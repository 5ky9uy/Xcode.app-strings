@(#)PROGRAM:AccessibilityEvents  PROJECT:AccessibilitySupport-1
@ffffff
@ffffff
init
initWithListener:eventMask:
listener
setListener:
eventMask
setEventMask:
.cxx_destruct
_listener
_eventMask
T@"<AXEEventTapListener>",W,N,V_listener
TQ,V_eventMask
sharedSessionTapManager
_initWithPlacement:location:
sharedHIDTapManager
sharedAnnotatedSessionTapManager
_listenerLock
lock
_passiveListeners
_activeListeners
mutableCopy
unlock
_findWrapperForListener:inListeners:
addObject:
_recreateEventTapAsNeededForListenerWrappers:listenOnly:
set_passiveListeners:
set_activeListeners:
registerListener:listenOnly:forEventMask:
_unregisterListener:listenOnly:forEventMask:
removeObject:
_unregisterListenerForAllEvents:
isActiveEventTap
copy
countByEnumeratingWithState:objects:count:
isGestureEvent:
eventTapManager:activelyTappedGestureEvent:cgEvent:withProxy:
eventFromCGEvent:
isKeyboardEvent:
eventTapManager:activelyTappedKeyboardEvent:cgEvent:withProxy:
isMouseEvent:
eventTapManager:activelyTappedMouseEvent:cgEvent:withProxy:
eventTapManager:activelyTappedEvent:type:withProxy:
eventTapManager:passivelyTappedGestureEvent:withProxy:
eventTapManager:passivelyTappedKeyboardEvent:withProxy:
eventTapManager:passivelyTappedMouseEvent:withProxy:
eventTapManager:passivelyTappedEvent:type:withProxy:
location
_tapPlacement
initWithTapLocation:priority:placement:options:eventsOfInterest:delegate:
_passiveEventTap
_activeEventTap
_eventsOfInterestAcrossAllListeners:
eventsOfInterest
_createEventTapWithEventsOfInterest:listenOnly:
enable
isEnabled
sleepForTimeInterval:
disable
set_passiveEventTap:
set_activeEventTap:
shared
sharedTapForLocation:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
eventTap:handleEvent:type:withProxy:
T@"AXEEventTapManager",R
registerGestureEventListener:listenOnly:
registerKeyboardEventListener:listenOnly:
registerMouseEventListener:listenOnly:
unregisterListener:listenOnly:forEventMask:
unregisterGestureEventListener:listenOnly:
unregisterKeyboardEventListener:listenOnly:
unregisterMouseEventListener:listenOnly:
unregisterListenerForAllEvents:
__tapPlacement
_location
__listenerLock
__passiveListeners
__activeListeners
__passiveEventTap
__activeEventTap
TI,R,N,V__tapPlacement
T@"NSLock",R,N,V__listenerLock
T@"NSArray",C,N,V__passiveListeners
T@"NSArray",C,N,V__activeListeners
T@"AXEEventTap",&,N,V__passiveEventTap
T@"AXEEventTap",&,N,V__activeEventTap
TQ,R,N,V_location
setLocation:
setClickState:
setEventType:
setDelta:
setScrollWheelDelta:
setIsScrollWheelEventContinuous:
setScrollMomentumPhase:
setIsDragEvent:
isDragEvent
setIsMoveEvent:
setIsLeftButtonDown:
setIsRightButtonDown:
setIsOtherButtonDown:
setIsSynthesized:
clickState
delta
scrollWheelDelta
isScrollWheelEventContinuous
scrollMomentumPhase
isMoveEvent
isLeftButtonDown
isRightButtonDown
isOtherButtonDown
isSynthesized
stringWithFormat:
copyWithZone:
eventType
_isScrollWheelEventContinuous
_isMoveEvent
_isDragEvent
_isLeftButtonDown
_isRightButtonDown
_isOtherButtonDown
_isSynthesized
_eventType
_scrollMomentumPhase
_clickState
_delta
_scrollWheelDelta
T{CGPoint=dd},N,V_location
Tq,N,V_clickState
TI,N,V_eventType
T{CGPoint=dd},N,V_delta
T{CGPoint=dd},N,V_scrollWheelDelta
Tc,N,V_isScrollWheelEventContinuous
TI,N,V_scrollMomentumPhase
Tc,N,V_isMoveEvent
Tc,N,V_isDragEvent
Tc,N,V_isLeftButtonDown
Tc,N,V_isRightButtonDown
Tc,N,V_isOtherButtonDown
Tc,N,V_isSynthesized
UTF8String
cancel
dealloc
_reportingQueue
_activateOnReportingQueue
_deactivateOnReportingQueue
_moveOnReportingQueue::
_mouseHIDReportDescriptorData
numberWithInt:
dictionaryWithObjects:forKeys:count:
appendBytes:length:
initWithBytes:length:
_activated
_hidUserDevice
initWithFormat:
_mouseHIDDeviceProperties
setObject:forKeyedSubscript:
initWithProperties:
set_hidUserDevice:
_hidUserDeviceQueue
setDispatchQueue:
activate
set_activated:
_reportWithLeftButtonDown:rightButtonDown:xMovement:yMovement:
handleReport:error:
T@"NSDictionary",R,C,N
T@"NSData",R,C,N
deactivate
move::
set_hidUserDeviceQueue:
set_reportingQueue:
__activated
__hidUserDevice
__hidUserDeviceQueue
__reportingQueue
Tc,N,V__activated
T@"HIDUserDevice",&,N,V__hidUserDevice
T@"NSObject<OS_dispatch_queue>",&,N,V__hidUserDeviceQueue
T@"NSObject<OS_dispatch_queue>",&,N,V__reportingQueue
stringWithCharacters:length:
set_flags:
setKeyCode:
setUnicodeCharacter:
setIsRepeatEvent:
setIsModifierChangedEvent:
setIsCommandDown:
setIsLeftCommandDown:
setIsRightCommandDown:
setIsOptionDown:
setIsLeftOptionDown:
setIsRightOptionDown:
setIsControlDown:
setIsLeftControlDown:
setIsRightControlDown:
setIsShiftDown:
setIsLeftShiftDown:
setIsRightShiftDown:
setIsFnDown:
isLeftCommandDown
isRightCommandDown
isLeftOptionDown
isRightOptionDown
isControlDown
isRightControlDown
isLeftShiftDown
isRightShiftDown
isFnDown
setIsDownEvent:
isDownEvent
isRepeatEvent
isCommandDown
isOptionDown
isShiftDown
keyCode
unicodeCharacter
isModifierChangedEvent
_flags
isDown
isRepeat
modifierMask
isLeftControlDown
_isDownEvent
_isRepeatEvent
_isModifierChangedEvent
_isCommandDown
_isLeftCommandDown
_isRightCommandDown
_isOptionDown
_isLeftOptionDown
_isRightOptionDown
_isControlDown
_isLeftControlDown
_isRightControlDown
_isShiftDown
_isLeftShiftDown
_isRightShiftDown
_isFnDown
_keyCode
_unicodeCharacter
__flags
TQ,N,V_keyCode
T@"NSString",C,N,V_unicodeCharacter
Tc,N,V_isDownEvent
Tc,N,V_isRepeatEvent
Tc,N,V_isModifierChangedEvent
Tc,N,V_isCommandDown
Tc,N,V_isLeftCommandDown
Tc,N,V_isRightCommandDown
Tc,N,V_isOptionDown
Tc,N,V_isLeftOptionDown
Tc,N,V_isRightOptionDown
Tc,N,V_isControlDown
Tc,N,V_isLeftControlDown
Tc,N,V_isRightControlDown
Tc,N,V_isShiftDown
Tc,N,V_isLeftShiftDown
Tc,N,V_isRightShiftDown
Tc,N,V_isFnDown
TQ,N,V__flags
Tc,R,N
Tq,R,N
array
allTouches
phase
arrayWithArray:
identity
string
isSynthetic
source
_nameOfSource:
count
appendFormat:
timestamp
processInfo
systemUptime
dateWithTimeIntervalSinceNow:
CGEvent
touchesMatchingPhase:inView:
touchFromNSTouch:timestamp:touchStartTimestamp:contextOrigin:
initWithTouches:eventSource:isSynthetic:previousGestureEvent:
touchStartTimestamp
compare:
numberWithUnsignedInteger:
touchMatchingIdentity:phase:
setPhase:
setTouchStartTimestamp:
sortedArrayUsingComparator:
firstObject
date
touchesMatchingPhase:
initWithNSEvent:eventSource:isSynthetic:previousGestureEvent:
initWithTouches:eventSource:isSynthetic:
touchingTouches
_isSynthetic
_source
_timestamp
_allTouches
_touchingTouches
TQ,R,N,V_source
T@"NSDate",R,N,V_timestamp
Tc,R,N,V_isSynthetic
T@"NSArray",R,N,V_allTouches
T@"NSArray",R,N,V_touchingTouches
setIsGestureEvent:
setIsDockControl:
setIsFluidTouchGesture:
setHidEventType:
setSymbolicHotKeyValue:
setSymbolicHotKeyTreatAsKeyDown:
setGestureProgress:
setZoomValue:
setZoomDeltaX:
setZoomDeltaY:
setRotationValue:
setScrollX:
setScrollY:
setScrollZ:
setSwipeProgress:
setSwipePositionX:
setSwipePositionY:
setSwipeVelocityX:
setSwipeVelocityY:
setSwipeVelocityZ:
setEventContextOriginX:
setEventContextOriginY:
isGestureEvent
isDockControl
isFluidTouchGesture
hidEventType
gestureProgress
zoomValue
zoomDeltaX
zoomDeltaY
rotationValue
scrollX
scrollY
scrollZ
swipeProgress
swipePositionX
swipePositionY
swipeVelocityX
swipeVelocityY
swipeVelocityZ
eventContextOriginX
eventContextOriginY
symbolicHotKeyValue
symbolicHotKeyTreatAsKeyDown
_isGestureEvent
_isDockControl
_isFluidTouchGesture
_symbolicHotKeyTreatAsKeyDown
_hidEventType
_gestureProgress
_zoomValue
_zoomDeltaX
_zoomDeltaY
_rotationValue
_scrollX
_scrollY
_scrollZ
_swipeProgress
_swipePositionX
_swipePositionY
_swipeVelocityX
_swipeVelocityY
_swipeVelocityZ
_eventContextOriginX
_eventContextOriginY
_symbolicHotKeyValue
Tc,N,V_isGestureEvent
Tc,N,V_isDockControl
Tc,N,V_isFluidTouchGesture
TQ,N,V_hidEventType
Td,N,V_gestureProgress
Td,N,V_zoomValue
Td,N,V_zoomDeltaX
Td,N,V_zoomDeltaY
Td,N,V_rotationValue
Td,N,V_scrollX
Td,N,V_scrollY
Td,N,V_scrollZ
Td,N,V_swipeProgress
Td,N,V_swipePositionX
Td,N,V_swipePositionY
Td,N,V_swipeVelocityX
Td,N,V_swipeVelocityY
Td,N,V_swipeVelocityZ
Td,N,V_eventContextOriginX
Td,N,V_eventContextOriginY
Tq,N,V_symbolicHotKeyValue
Tc,N,V_symbolicHotKeyTreatAsKeyDown
doubleValue
standardDeviationOfValues:withPrecalculatedMean:
standardDeviationOfValues:
initWithMaximumTapDownDeviation:
delegate
_currentState
set_currentState:
set_firstTouchStart:
set_secondTouchStart:
_firstTouchStart
_secondTouchStart
objectAtIndexedSubscript:
set_secondTouchStartTime:
splitTapGestureRecognizer:splitTapped:
maximumTapDownDeviation
processGestureEvent:
reset
setDelegate:
_secondTouchStartTime
_maximumTapDownDeviation
_delegate
__firstTouchStart
__secondTouchStart
__secondTouchStartTime
__currentState
T@"AXETrackingTouchEvent",&,N,V__firstTouchStart
T@"AXETrackingTouchEvent",&,N,V__secondTouchStart
T@"NSDate",&,N,V__secondTouchStartTime
TQ,N,V__currentState
Td,R,N,V_maximumTapDownDeviation
T@"<AXETrackingSplitTapGestureRecognizerDelegate>",W,N,V_delegate
setDetectDevices:
_devices
set_devices:
closeAndUnloadAsynchronously
createNewDevice:
load
shouldMonitorDevice:
shouldSeizeMonitoredDevice:
openAndSeize:
device:didPostEvent:
deviceDetector:didFindDevice:
device:didUnload:
T@"AXEHIDDeviceManager",R,N
detectDevices
_detectDevices
__devices
T@"NSMutableArray",&,N,V__devices
T@"<AXEHIDDeviceManagerDelegate>",W,N,V_delegate
Tc,N,V_detectDevices
type
deltaX
deltaY
buttonNumber
setType:
setButtonNumber:
setDeltaX:
setDeltaY:
_type
_buttonNumber
_deltaX
_deltaY
TQ,N,V_type
TQ,N,V_buttonNumber
Td,N,V_deltaX
Td,N,V_deltaY
firstTouchEvent
setIdentity:
setFirstTouchEvent:
setLastTouchEvent:
_stabilizingTouches
_maximumHoldDeviation
_allowInstabilityBeforeHold
_hasBeenUnstable
timeIntervalSinceDate:
_minimumPreStabilizationDuration
_minimumHoldDuration
removeAllObjects
lastTouchEvent
_state
set_state:
set_hasBeenUnstable:
initWithMaximumHoldDeviation:minimumHoldDuration:minimumPreStabilizationDuration:allowInstabilityBeforeHold:
appendTouchEvent:
touchDuration
set_stabilizingTouches:
set_maximumHoldDeviation:
set_minimumHoldDuration:
set_minimumPreStabilizationDuration:
set_allowInstabilityBeforeHold:
__allowInstabilityBeforeHold
__hasBeenUnstable
_identity
_firstTouchEvent
_lastTouchEvent
__stabilizingTouches
__state
__maximumHoldDeviation
__minimumHoldDuration
__minimumPreStabilizationDuration
T@"<NSObject><NSCopying>",&,N,V_identity
T@"AXETrackingTouchEvent",&,N,V_firstTouchEvent
T@"AXETrackingTouchEvent",&,N,V_lastTouchEvent
Td,R,N
T@"NSMutableArray",&,N,V__stabilizingTouches
TQ,N,V__state
Td,N,V__maximumHoldDeviation
Td,N,V__minimumHoldDuration
Td,N,V__minimumPreStabilizationDuration
Tc,N,V__allowInstabilityBeforeHold
Tc,N,V__hasBeenUnstable
initWithFingerCount:preHoldTapCount:maximumHoldDeviation:minimumHoldDuration:minimumPreStabilizationDuration:allowInstabilityBeforeHold:
initWithFingerCount:tapCount:
_touchHistories
objectForKeyedSubscript:
maximumHoldDeviation
minimumHoldDuration
minimumPreStabilizationDuration
allowInstabilityBeforeHold
set_touchHistories:
preHoldTapCount
fingerCount
anyObject
unsignedIntegerValue
set_touchingTouches:
_preHoldTapRecognizer
_updateTouchHistoriesWithTouches:
_transitionToState:
_signalTouchesMovedAfterStabilizing:
_preStabilizationTimer
invalidate
_holdStartTimeoutTimer
_holdTimer
maximumTapInterval
_holdStartTimeoutElapsed:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
set_holdStartTimeoutTimer:
_minimumPreStabilizationDurationElapsed:
set_preStabilizationTimer:
_signalStartedStabilizing:
_minimumHoldDurationElapsed:
set_holdTimer:
_signalStabilized:
_signalAborted:
holdGestureRecognizer:startedStabilizing:
holdGestureRecognizer:stabilized:
holdGestureRecognizer:touchesMovedAfterStabilizing:
holdGestureRecognizer:aborted:
tapGestureRecognizer:tapped:
tapGestureRecognizer:tapAborted:
initWithFingerCount:
initWithPreHoldTapCount:
initWithFingerCount:preHoldTapCount:
initWithPreHoldTapCount:maximumHoldDeviation:minimumHoldDuration:minimumPreStabilizationDuration:allowInstabilityBeforeHold:
set_preHoldTapRecognizer:
_fingerCount
_preHoldTapCount
__touchingTouches
__touchHistories
__preStabilizationTimer
__holdStartTimeoutTimer
__holdTimer
__preHoldTapRecognizer
T@"NSArray",&,N,V__touchingTouches
T@"NSMutableDictionary",&,N,V__touchHistories
T@"<AXETimer>",&,N,V__preStabilizationTimer
T@"<AXETimer>",&,N,V__holdStartTimeoutTimer
T@"<AXETimer>",&,N,V__holdTimer
T@"AXETrackingTapGestureRecognizer",&,N,V__preHoldTapRecognizer
TQ,R,N,V_fingerCount
TQ,R,N,V_preHoldTapCount
Td,R,N,V_maximumHoldDeviation
Td,R,N,V_minimumHoldDuration
Td,R,N,V_minimumPreStabilizationDuration
Tc,R,N,V_allowInstabilityBeforeHold
T@"<AXETrackingHoldGestureRecognizerDelegate>",W,N,V_delegate
initWithMinimumPanDistance:minimumPinchSeparationDeviation:minimumRotateAngleDeviation:
_touchStartEvents
removeObjectAtIndex:
setObject:atIndexedSubscript:
addObjectsFromArray:
set_initialTouchSeparation:
set_initialCentroidLocation:
set_initialAngleInDegrees:
_processGestureTouchEvents:
_signalEndOfGesture
_initialTouchSeparation
_initialCentroidLocation
_initialAngleInDegrees
minimumPinchSeparationDeviation
twoFingerGestureRecognizerPinchStarted:
twoFingerGestureRecognizer:pinched:relativeSeparation:
arrayWithObjects:count:
minimumRotateAngleDeviation
twoFingerGestureRecognizerRotateStarted:
twoFingerGestureRecognizer:rotated:relativeRotation:
minimumPanDistance
twoFingerGestureRecognizerPanStarted:
twoFingerGestureRecognizer:panned:relativeDisplacement:
twoFingerGestureRecognizerPanEnded:
twoFingerGestureRecognizerPinchEnded:
twoFingerGestureRecognizerRotateEnded:
set_touchStartEvents:
_minimumPanDistance
_minimumPinchSeparationDeviation
_minimumRotateAngleDeviation
__touchStartEvents
__initialTouchSeparation
__initialAngleInDegrees
__initialCentroidLocation
T@"NSMutableArray",&,N,V__touchStartEvents
Td,N,V__initialTouchSeparation
T{CGPoint=dd},N,V__initialCentroidLocation
Td,N,V__initialAngleInDegrees
Td,R,N,V_minimumPanDistance
Td,R,N,V_minimumPinchSeparationDeviation
Td,R,N,V_minimumRotateAngleDeviation
T@"<AXETrackingTwoFingerGestureRecognizerDelegate>",W,N,V_delegate
initWithMinimumEventInterval:
throttlerWithMinimumInterval:
addObserver:forKeyPath:options:context:
removeObserver:forKeyPath:
isEqualToString:
boolValue
setNativeDisplaySize:
eventCaptureStarted
setEventCaptureStarted:
_syntheticEventPostingDispatchQueue
synthesizedTapDownUpInterval
_isNonSyntheticDFRGestureEvent:
_nonSyntheticDFRGestureNSEventFromCGEvent:
_throttler
_processNonSyntheticDFRGestureNSEvent:
performSelector:onTarget:withObject:
_previousDFRGestureEvent
set_previousDFRGestureEvent:
touchInputDevice:capturedGestureEvent:
_initWithCGEvent:eventRef:
startEventCapture
stopEventCapture
T@"<AXETrackingTouchInputDeviceDelegate>",W,N
observeValueForKeyPath:ofObject:change:context:
synthesizeTapAtLocation:completionHandler:
synthesizeTouchDownAtLocation:
synthesizeTouchMoveToLocation:
synthesizeTouchUpAtLocation:
nativeDisplaySize
set_throttler:
set_syntheticEventPostingDispatchQueue:
_currentTouches
set_currentTouches:
_currentTrackedTouch
set_currentTrackedTouch:
_splitTouchStartDistance
set_splitTouchStartDistance:
_changingZoomScale
set_changingZoomScale:
_eventCaptureStarted
__changingZoomScale
_synthesizedTapDownUpInterval
__previousDFRGestureEvent
__throttler
__syntheticEventPostingDispatchQueue
__currentTouches
__currentTrackedTouch
__splitTouchStartDistance
_nativeDisplaySize
T{CGSize=dd},N,V_nativeDisplaySize
Tc,N,V_eventCaptureStarted
T@"AXETrackingGestureEvent",&,N,V__previousDFRGestureEvent
T@"AXFThrottler",&,N,V__throttler
T@"NSObject<OS_dispatch_queue>",&,N,V__syntheticEventPostingDispatchQueue
T@"NSSet",&,N,V__currentTouches
T@"NSTouch",&,N,V__currentTrackedTouch
Td,N,V__splitTouchStartDistance
Tc,N,V__changingZoomScale
Td,R,N,V_synthesizedTapDownUpInterval
T@"<AXETrackingTouchInputDeviceDelegate>",W,N,V_delegate
_hidDevice
intValue
_initWithHIDDevice:
isLoaded
setIsLoaded:
dictionary
_maxX
set_maxX:
_minX
set_minX:
_maxY
set_maxY:
_minY
set_minY:
setVendorID:
setProductID:
setManufacturer:
setProduct:
set_hidReportBuffer:
_hidReportBuffer
_closeDevice
set_canceled:
_canceled
set_hidDevice:
setObject:forKey:
handleReportCallback:report:reportLength:
handleValueCallback:
deviceInfo
vendorID
productID
manufacturer
product
_isLoaded
__canceled
_vendorID
_productID
_manufacturer
_product
__minX
__minY
__maxX
__maxY
__hidDevice
__hidReportBuffer
Tc,N,V_isLoaded
TQ,N,V_vendorID
TQ,N,V_productID
T@"NSString",C,N,V_manufacturer
T@"NSString",C,N,V_product
Td,N,V__minX
Td,N,V__minY
Td,N,V__maxX
Td,N,V__maxY
T^{__IOHIDDevice=},N,V__hidDevice
T*,N,V__hidReportBuffer
Tc,N,V__canceled
T@"<AXEHIDDeviceDelegate>",W,N,V_delegate
numberWithUnsignedLongLong:
initWithFingerCount:tapCount:maximumTapDownDeviation:maximumTapDownDuration:maximumTapInterval:
_mostRecentTapStartTouchEvents
removeObjectsInArray:
_abort
set_mostRecentTapStartTime:
_mostRecentTapEndTime
set_detectedTapCount:
set_tapSequenceStartingTouchEvents:
_tapSequenceStartingTouchEvents
_mostRecentTapStartTime
maximumTapDownDuration
_detectedTapCount
tapCount
_signalTapped:
set_mostRecentTapEndTime:
set_lastTouchingTouches:
_singleTapTimeoutTimer
set_singleTapTimeoutTimer:
_singleTapTimeoutElapsed:
_lastTouchingTouches
_signalTapAborted:
set_mostRecentTapStartTouchEvents:
_tapCount
_maximumTapDownDuration
_maximumTapInterval
__tapSequenceStartingTouchEvents
__mostRecentTapStartTouchEvents
__mostRecentTapStartTime
__mostRecentTapEndTime
__detectedTapCount
__singleTapTimeoutTimer
__lastTouchingTouches
T@"NSArray",&,N,V__tapSequenceStartingTouchEvents
T@"NSMutableArray",&,N,V__mostRecentTapStartTouchEvents
T@"NSDate",&,N,V__mostRecentTapStartTime
T@"NSDate",&,N,V__mostRecentTapEndTime
TQ,N,V__detectedTapCount
T@"<AXETimer>",&,N,V__singleTapTimeoutTimer
T@"NSArray",&,N,V__lastTouchingTouches
TQ,R,N,V_tapCount
Td,R,N,V_maximumTapDownDuration
Td,R,N,V_maximumTapInterval
T@"<AXETrackingTapGestureRecognizerDelegate>",W,N,V_delegate
_initWithEventTapLocation:
isKeyDown:
numberWithBool:
_eventSource
_setModifierFlags:
_modifierFlags
_eventTapLocation
_clearModifierFlags:
modifierFlagTable
unsignedLongLongValue
set_modifierFlags:
T@"AXEKeyboard",R
isAnyKeyDown
isAnyModifierDown
isCapsLockDown
_supportsBuiltinEscKey
downKeys
pressKey:
releaseKey:
set_eventTapLocation:
__eventSource
__eventTapLocation
__modifierFlags
TI,N,V__eventTapLocation
TQ,N,V__modifierFlags
T@"NSSet",R,C,N
_repeats
timeInterval
nextFireTime
setNextFireTime:
setValid:
_target
_selector
methodForSelector:
mockTimerInvalidated:
fire
isValid
userInfo
valid
Tc,R,GisValid
Td,R
T@,R
initWithTimeInterval:target:selector:userInfo:repeats:startTime:
setUserInfo:
setTimeInterval:
set_target:
set_selector:
set_repeats:
_startTime
set_startTime:
_valid
__repeats
_userInfo
_timeInterval
_nextFireTime
__target
__selector
__startTime
T@"<AXEMockTimerDelegate>",W,N,V_delegate
T@,&,N,V_userInfo
Td,N,V_timeInterval
Td,N,V_nextFireTime
Tc,N,GisValid,V_valid
T@,&,N,V__target
T:,N,V__selector
Tc,N,V__repeats
Td,N,V__startTime
_pendingTimers
currentSimulatedTime
sortUsingSelector:
setCurrentSimulatedTime:
fireNextPendingTimer
pendingTimerCount
fireAllPendingTimers
set_pendingTimers:
_currentSimulatedTime
__pendingTimers
Td,N,V_currentSimulatedTime
T@"NSMutableArray",&,N,V__pendingTimers
TQ,R,N
setSwallowAllGestureEvents:
set_availableTrackpadInfos:
set_eventCaptureStarted:
_nonSyntheticGestureEventFromCGEvent:
_processNonSyntheticGestureEvent:
swallowAllGestureEvents
_availableTrackpadInfos
numberWithLong:
initWithIdentity:location:phase:timestamp:touchStartTimestamp:
_previousGestureEvent
set_previousGestureEvent:
_swallowAllGestureEvents
__eventCaptureStarted
__previousGestureEvent
__availableTrackpadInfos
Tc,N,V__eventCaptureStarted
T@"AXETrackingGestureEvent",&,N,V__previousGestureEvent
T@"NSArray",C,N,V__availableTrackpadInfos
Tc,N,V_swallowAllGestureEvents
stringByAppendingString:
allKeysForObject:
allKeys
enumerateObjectsUsingBlock:
pointerArrayWithOptions:
initWithType:
setMatching:
_handleHIDEvent:
setEventHandler:
_hidEventSystemClient
setProperty:forKey:
setDeviceMatching:
setInputElementMatching:
_physicalKeyboardQueue
_listeners
addPointer:
_hidManager
pointerAtIndex:
removePointerAtIndex:
compact
devices
elementsMatching:
usagePage
usage
integerValue
integerValueForField:
services
serviceID
senderID
_signalKey:stateChanged:serviceClient:
_signalUsage:page:stateChanged:serviceClient:
orderedSet
length
physicalKeyboard:key:stateChanged:serviceClient:
physicalKeyboard:usagePage:usage:stateChanged:serviceClient:
sharedAggregateInstance
T@"AXEPhysicalKeyboard",R,N
registerListener:
unregisterListener:
attachedKeyboardIDs
set_hidEventSystemClient:
set_hidManager:
set_physicalKeyboardQueue:
set_listeners:
__hidEventSystemClient
__hidManager
__physicalKeyboardQueue
__listeners
T@"HIDEventSystemClient",&,N,V__hidEventSystemClient
T@"HIDManager",&,N,V__hidManager
T@"NSObject<OS_dispatch_queue>",&,N,V__physicalKeyboardQueue
T@"NSPointerArray",&,N,V__listeners
Tc,R,N,V_isFnDown
_uninstallEventTapAnyThread
_eventTapIDQueue
_eventTapIDToEventTapInfoMap
numberWithInteger:
newInfoWithTap:
_createEventTapThreadIfNeeded
_enableOnEventTapThread
_performOnEventTapThreadAndWait:
_disableOnEventTapThread
_options
_eventTapThread
_eventTapThreadLock
set_eventTapThread:
_installEventTapIfNeededOnEventTapThread
_eventTap
_setEnabled:
_reconnectOnEventTapThread
mainQueue
executeBlockAsynchronously:
executeAfterDelay:block:
currentThread
name
isCancelled
isFinished
_runBlock:
performSelector:onThread:withObject:waitUntilDone:
_performBlockOnEventTapThread:
mainBundle
bundleIdentifier
_continueReconnectOnMainThread
_performBlockOnMainThread:
_reconnectCount
_setReconnectCount:
_lastReconnectTimestamp
_setLastReconnectTimestamp:
_installEventTapIfNeededAnyThread
_performBlockOnMainThreadAfterDelay:block:
_eventTapID
_setEventTap:eventTapID:
_priority
_placement
_setEventTap:
_setRunLoopSource:
_uninstallEventTapOnEventTapThread
_runLoopSource
willChangeValueForKey:
didChangeValueForKey:
_eventTapForEventTapID:
automaticallyNotifiesObserversForKey:
_handleEventTapEvent:type:withProxy:
_isEnabled
__eventTap
__runLoopSource
_isActiveEventTap
__location
__placement
__options
__reconnectCount
_eventsOfInterest
__priority
__eventTapThreadLock
__eventTapThread
__lastReconnectTimestamp
__eventTapID
Tc,S_setEnabled:
TI,R,N,V__location
T@"NSString",R,C,N,V__priority
TI,R,N,V__placement
TI,R,N,V__options
T@"NSLock",R,N,V__eventTapThreadLock
T@"NSThread",&,V__eventTapThread
Td,N,S_setLastReconnectTimestamp:,V__lastReconnectTimestamp
TI,N,S_setReconnectCount:,V__reconnectCount
Tq,R,N,V__eventTapID
T@"<AXEEventTapDelegate>",R,W,V_delegate
Tc,R,V_isActiveEventTap
TQ,R,V_eventsOfInterest
initInfoWithTap:
_tap
T@"AXEEventTap",R,W,N,V_tap
stringWithString:
appendString:
detachNewThreadWithName:qualityOfService:
timerWithTimeInterval:target:selector:userInfo:repeats:
_timer
initWithTimeInterval:target:selector:userInfo:repeats:scheduled:
set_timer:
__timer
T@"NSTimer",&,N,V__timer
initialize
replaceSharedFactoryInstance:
_fingersToTouchEvents
_lastGestureEventTimestamp
dateByAddingTimeInterval:
set_lastGestureEventTimestamp:
setTimestamp:
allValues
removeObjectsForKeys:
initForEventSource:
moveFinger:to:
moveFinger:byDeltaX:deltaY:
liftFinger:
liftAllFingers
fingerWithID:
createGestureEventAfterTimeInterval:
set_eventSource:
set_fingersToTouchEvents:
__lastGestureEventTimestamp
__fingersToTouchEvents
TQ,N,V__eventSource
T@"NSDate",&,N,V__lastGestureEventTimestamp
T@"NSMutableDictionary",&,N,V__fingersToTouchEvents
synthesizeKeyDown:markupHandler:
_downKeys
_cgEventFlagsFromDownKeys:
set_cgEventFlags:
_cgEventFlags
synthesizeKeyUp:markupHandler:
containsObject:
unsignedIntValue
_cgEventFlagsForModifier:
T@"AXEVirtualKeyboard",R
synthesizeKeyDown:
synthesizeKeyUp:
isKeySynthesizedDown:
set_downKeys:
__cgEventFlags
__downKeys
TQ,N,V__cgEventFlags
T@"NSMutableSet",&,N,V__downKeys
initWithMinimumFlickDistance:minimumFlickVelocity:maximumFlickDuration:
set_flickStartTouchEvent:
_flickTimeoutTimer
maximumFlickDuration
_timeoutElapsed:
set_flickTimeoutTimer:
_flickStartTouchEvent
minimumFlickDistance
minimumFlickVelocity
_signalFlickRecognized:
_signalFlickAborted:
flickGestureRecognizer:flickedAngle:
flickGestureRecognizer:aborted:
_minimumFlickDistance
_minimumFlickVelocity
_maximumFlickDuration
__flickStartTouchEvent
__flickTimeoutTimer
T@"AXETrackingTouchEvent",&,N,V__flickStartTouchEvent
T@"<AXETimer>",&,N,V__flickTimeoutTimer
Td,R,N,V_minimumFlickDistance
Td,R,N,V_minimumFlickVelocity
Td,R,N,V_maximumFlickDuration
T@"<AXETrackingFlickGestureRecognizerDelegate>",W,N,V_delegate
_matchingDictionaries
T@"AXEHIDDeviceDetector",R,N
T^{__IOHIDManager=},N,V__hidManager
T@"<AXEHIDDeviceDetectorDelegate>",W,N,V_delegate
locationInView:
setDateFormat:
_nameOfPhase:
stringFromDate:
_touchStartTimestamp
_phase
T@"NSDate",&,N,V_timestamp
T@"NSDate",&,N,V_touchStartTimestamp
TQ,N,V_phase
T@"<NSObject><NSCopying>",R,N,V_identity
T{CGPoint=dd},R,N,V_location
_AXEEventTapListenerWrapper
AXEEventTapManager
AXEEventTapDelegate
NSObject
AXEMouseEvent
NSCopying
AXEPhysicalMouse
AXEKeyboardEvent
AXETrackingGestureEvent
AXEGestureEvent
AXEMathUtilities
AXETrackingSplitTapGestureRecognizer
AXETrackingGestureRecognizer
AXEHIDDeviceManager
AXEHIDDeviceDetectorDelegate
AXEHIDDeviceDelegate
AXEHIDEvent
AXEHIDGamePadDevice
_AXETrackingStabilizingTouchHistory
AXETrackingHoldGestureRecognizer
AXETrackingTapGestureRecognizerDelegate
AXETrackingTwoFingerGestureRecognizer
AXEDFRDevice
AXEEventTapListener
AXETrackingTouchInputDevice
AXEHIDDevice
AXETrackingTapGestureRecognizer
AXEHIDJoystickDevice
AXEKeyboard
AXEMockTimer
AXETimer
AXEMockTimerFactory
AXEMockTimerDelegate
AXETimerProviding
AXETrackingTrackpadDevice
AXEPhysicalKeyboard
AXEEventTap
_AXEEventTapInfo
AXENSTimer
AXETimerFactory
AXETrackingGestureRecognizerTestsFingerSimulator
AXEVirtualKeyboard
AXETrackingFlickGestureRecognizer
AXEHIDDeviceDetector
AXETrackingTouchEvent
@32@0:8@16Q24
@16@0:8
v24@0:8@16
Q16@0:8
v24@0:8Q16
v16@0:8
@"<AXEEventTapListener>"
@24@0:8Q16
c24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
c16@0:8
c24@0:8#16
c24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
c24@0:8@"Protocol"16
@"NSString"16@0:8
^{__CGEvent=}44@0:8@16^{__CGEvent=}24I32^{__CGEventTapProxy=}36
^{__CGEvent=}44@0:8@"AXEEventTap"16^{__CGEvent=}24I32^{__CGEventTapProxy=}36
v36@0:8@16c24Q28
v28@0:8@16c24
v36@0:8^v16c24Q28
v24@0:8^v16
@28@0:8I16Q20
Q24@0:8@16
@32@0:8^v16@24
@28@0:8Q16c24
I16@0:8
@"NSLock"
@"NSArray"
@"AXEEventTap"
@24@0:8^{__CGEvent=}16
c24@0:8^{__CGEvent=}16
@24@0:8^{_NSZone=}16
{CGPoint=dd}16@0:8
v32@0:8{CGPoint=dd}16
q16@0:8
v24@0:8q16
v20@0:8I16
v20@0:8c16
{CGPoint="x"d"y"d}
@40@0:8c16c20d24d32
v32@0:8d16d24
@"HIDUserDevice"
@"NSObject<OS_dispatch_queue>"
@"NSString"
@44@0:8@16Q24c32@36
@36@0:8@16Q24c32
@"NSDate"
d16@0:8
v24@0:8d16
d24@0:8@16
d32@0:8@16d24
v24@0:8@"AXETrackingGestureEvent"16
@24@0:8d16
@"<AXETrackingSplitTapGestureRecognizerDelegate>"
@"AXETrackingTouchEvent"
v32@0:8@16^{__IOHIDDevice=}24
v32@0:8@"AXEHIDDeviceDetector"16^{__IOHIDDevice=}24
v32@0:8@16@24
v28@0:8@"AXEHIDDevice"16c24
v32@0:8@"AXEHIDDevice"16@"AXEHIDEvent"24
@"<AXEHIDDeviceManagerDelegate>"
@"NSMutableArray"
@44@0:8d16d24d32c40
@"<NSObject><NSCopying>"
v32@0:8@"AXETrackingTapGestureRecognizer"16@"NSArray"24
@32@0:8Q16Q24
@52@0:8Q16d24d32d40c48
@60@0:8Q16Q24d32d40d48c56
@"<AXETrackingHoldGestureRecognizerDelegate>"
@"NSMutableDictionary"
@"<AXETimer>"
@"AXETrackingTapGestureRecognizer"
@40@0:8d16d24d32
@"<AXETrackingTwoFingerGestureRecognizerDelegate>"
v40@0:8@16@24^{__CGEventTapProxy=}32
v44@0:8@16^{__CGEvent=}24I32^{__CGEventTapProxy=}36
^{__CGEvent=}48@0:8@16@24^{__CGEvent=}32^{__CGEventTapProxy=}40
v40@0:8@"AXEEventTapManager"16@"AXEGestureEvent"24^{__CGEventTapProxy=}32
v40@0:8@"AXEEventTapManager"16@"AXEKeyboardEvent"24^{__CGEventTapProxy=}32
v40@0:8@"AXEEventTapManager"16@"AXEMouseEvent"24^{__CGEventTapProxy=}32
v44@0:8@"AXEEventTapManager"16^{__CGEvent=}24I32^{__CGEventTapProxy=}36
^{__CGEvent=}48@0:8@"AXEEventTapManager"16@"AXEGestureEvent"24^{__CGEvent=}32^{__CGEventTapProxy=}40
^{__CGEvent=}48@0:8@"AXEEventTapManager"16@"AXEKeyboardEvent"24^{__CGEvent=}32^{__CGEventTapProxy=}40
^{__CGEvent=}48@0:8@"AXEEventTapManager"16@"AXEMouseEvent"24^{__CGEvent=}32^{__CGEventTapProxy=}40
^{__CGEvent=}44@0:8@"AXEEventTapManager"16^{__CGEvent=}24I32^{__CGEventTapProxy=}36
@"<AXETrackingTouchInputDeviceDelegate>"16@0:8
v24@0:8@"<AXETrackingTouchInputDeviceDelegate>"16
v48@0:8@16@24@32^v40
v40@0:8{CGPoint=dd}16@?32
{CGSize=dd}16@0:8
v32@0:8{CGSize=dd}16
@"<AXETrackingTouchInputDeviceDelegate>"
@"AXETrackingGestureEvent"
@"AXFThrottler"
@"NSSet"
@"NSTouch"
{CGSize="width"d"height"d}
@24@0:8^{__IOHIDDevice=}16
v36@0:8i16*20q28
v24@0:8^{__IOHIDValue=}16
c20@0:8c16
^{__IOHIDDevice=}16@0:8
v24@0:8^{__IOHIDDevice=}16
*16@0:8
v24@0:8*16
@"<AXEHIDDeviceDelegate>"
^{__IOHIDDevice=}
@56@0:8Q16Q24d32d40d48
@"<AXETrackingTapGestureRecognizerDelegate>"
@20@0:8I16
c24@0:8Q16
^{__CGEventSource=}16@0:8
^{__CGEventSource=}
@60@0:8d16@24:32@40c48d52
q24@0:8@16
:16@0:8
v24@0:8:16
@"<AXEMockTimerDelegate>"
v24@0:8@"AXEMockTimer"16
@52@0:8d16@24:32@40c48
@"<AXETimer>"52@0:8d16@24:32@40c48
v36@0:8Q16c24@28
v44@0:8Q16Q24c32@36
@"HIDEventSystemClient"
@"HIDManager"
@"NSPointerArray"
@24@0:8q16
v32@0:8@16q24
v24@0:8@?16
@52@0:8I16^{__CFString=}20I28I32Q36@44
^{__CGEvent=}36@0:8^{__CGEvent=}16I24^{__CGEventTapProxy=}28
v32@0:8d16@?24
^{__CFMachPort=}16@0:8
v24@0:8^{__CFMachPort=}16
^{__CFRunLoopSource=}16@0:8
v24@0:8^{__CFRunLoopSource=}16
^{__CFMachPort=}
^{__CFRunLoopSource=}
@"<AXEEventTapDelegate>"
@"NSThread"
@24@0:8@16
@56@0:8d16@24:32@40c48c52
@"NSTimer"
@40@0:8Q16{CGPoint=dd}24
@40@0:8Q16d24d32
Q24@0:8Q16
v32@0:8Q16@?24
@"NSMutableSet"
@"<AXETrackingFlickGestureRecognizerDelegate>"
^{__IOHIDManager=}16@0:8
v24@0:8^{__IOHIDManager=}16
@"<AXEHIDDeviceDetectorDelegate>"
^{__IOHIDManager=}
@56@0:8@16@24@32{CGPoint=dd}40
@64@0:8@16{CGPoint=dd}24Q40@48@56
v8@?0
com.apple.coregraphics.eventTapPriority.accessibility
<%@: %@ location=%@ clickState=%ld delta=%@ scrollWheelDelta=%@ isScrollWheelEventContinuous=%d scrollMomentumPhase=%d isMoveEvent=%d isDragEvent=%d isLeftButtonDown=%d isRightButtonDown=%d isOtherButtonDown=%d
SYNTHESIZED
REAL
com.apple.accessibility.AXEPhysicalMouse.%p.hidQueue
com.apple.accessibility.AXEPhysicalMouse.%p.reportingQueue
ReportDescriptor
VendorID
Product
ReportInterval
RequestTimeout
com.apple.accessibility.AXEPhysicalMouse.%p.HIDDevice
PhysicalDeviceUniqueID
<%@: %@ key=%@ (%ld) isDownEvent=%d isRepeatEvent=%d isModifierChangedEvent=%d flags=0x%llx isCommandDown=%d isLeftCommandDown=%d isRightCommandDown=%d isOptionDown=%d isLeftOptionDown=%d isRightOptionDown=%d isControlDown=%d isShiftDown=%d isLeftShiftDown=%d isRightShiftDown=%d isFnDown=%d unicodeCharacter=%@
%@ %@ gesture event (%lu touches)
SYNTHETIC
  %@
q24@?0@"AXETrackingTouchEvent"8@"AXETrackingTouchEvent"16
(Undefined)
Trackpad
<%@: isGestureEvent=%d isDockControl=%d isFluidTouchGesture=%d hidEventType=%lu progress: %f zoom: %f zoom delta: (%f, %f) rotation: %f scroll: (%f, %f, %f) swipe progress: %f swipe position: (%f, %f) swipe velocity: (%f, %f, %f) context origin: (%f, %f) symbolic hotkey value: %ld (treat as down? %d)
%@ -- %f %f
Null
ButtonDown
ButtonUp
MouseMoved
LeftMouseDragged
RightMouseDragged
OtherMouseDragged
ScrollWheel
%@ first touch: {%@} last touch: {%@}
dynamicFunctionRowAvailable
com.apple.accessibilityevents.dfrdevice.eventDispatchQueue
AXEHIDServiceID
PrimaryUsagePage
PrimaryUsage
UsagePage
Usage
ProductID
Manufacturer
MaxInputReportSize
Seized
Opened
LocationID
SerialNumber
Transport
VendorIDSource
Built-In
HIDKind
HIDInterfaceID
HIDSubinterfaceID
HIDKeyboardSupportsEscKey
menuItem.shortcut.space
v32@?0@"NSNumber"8Q16^c24
DeviceUsagePage
DeviceUsage
com.apple.accessibility.AXEPhysicalKeyboard.queue
com.apple.accessibility.AXEPhysicalKeyboard.hidManager.queue
v24@?0@"HIDServiceClient"8@"HIDEvent"16
IOHIDDeviceSuspend
UsageMin
UsageMax
v32@?0@"HIDServiceClient"8Q16^c24
KeyboardLanguage
U.S.
com.apple.accessibility.AccessibilityEvents.AXEEventTap.eventTapIDQueue
com.apple.accessibility.AXVisualSupportAgent
v16@?0@"AXEEventTap"8
isEnabled
%u::%u
AXEEventTap thread: 
Active tap 
Passive tap 
location: HID 
location: Session 
location: Annotated Session 
matched
VersionNumber
CountryCode
StandardType
DeviceUsagePairs
Reset
yyyy-MM-dd HH:mm:ss.SSS
%@ %@ [ID: %@] [event: %@ start: %@]
Began
Moved
Stationary
Ended
Cancelled
Touching
Couldn't create HID user device with properties: %@!
Couldn't handle report %@: %@!
Event error: %@
making device: %@
Load device: %@
%@ device: %@
Can't open device <%d>: %@
Unload device: %@
%@ device: closed
Can't close device <%d>: %@
Error getting IOMasterPort
Error matching device identifier %llu
Error finding device identifier %llu
Error multiple entries matching identifier %llu
AXEEventTap: unable to detach new thread for event tap: %@
Exception raised while performing block on thread %@: %@
Unable to dispatch event request %@
Exception raised while performing selector %@ on thread %@: %@
Exception raised while installing event tap on runloop thread: %@
Exception raised while uninstalling event tap on runloop thread: %@
===> IOHIDDeviceRef[%@] %s <===
%s -- %@
K0j0
