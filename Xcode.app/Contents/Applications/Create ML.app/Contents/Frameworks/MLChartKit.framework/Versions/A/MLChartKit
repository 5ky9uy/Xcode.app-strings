@(#)PROGRAM:MLChartKit  PROJECT:MLUI-41
MLChartKit
ChartMetadata
CCChartViewOption
NNSAttributedStringKey
CCRendererType
CGSize
SystemDesign
NNSFontDescriptorSystemDesign
AppKit
Foundation
MLChartKit
CCChartViewWrapper
MLChartKit
ChartMetadataEntryType
MLChartKit
ChartData
MLChartKit
ChartMetadataEntry
MLChartKit
LineChartConfig
Color
Text
Strings
Keys
Rows
FontSizes
FontDesigns
MLChartKit
MLChartView
MLChartKit
ChartRootView
trainStringWidth
validateStringWidth
iterationStringWidth
Training Accuracy
Validation Accuracy
Training Loss
ValidationLoss
Accuracy
Loss
Style Loss
Content Loss
Snapshot at Iteration 
Can snapshot at Iteration 
Iteration 
Iteration
text
CCChartDataRow
@16@0:8
@24@0:8@16
@"NSArray"16@0:8
@24@0:8@"NSString"16
@"NSNumber"16@0:8
NSObject
c24@0:8@16
q16@0:8
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
c16@0:8
c24@0:8#16
c24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
c24@0:8@"Protocol"16
@"NSString"16@0:8
v24@?0@"NSString"8@16
/AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/MLUI/MLUI-41/MLChartKit/Other/CCChartViewWrapper.swift
snapshottableCheckpoints
lastSavedIteration
  "$schema": "https://vega.github.io/schema/vega-lite/v4.json",
  "datasets": {
    "records": [],
    "snapshots": [],
    "snapshottableCheckpoints": [],
    "lastSavedCheckpoint": []
  },
  "width": "container",
  "height": "container",
  "data": { "name": "records" },
  "encoding": {
    "x": {
      "field": "iteration",
      "type": "quantitative",
      "axis": {
        "title": "Iterations",
        "labelExpr": "datum.index === 0 ? '' : datum.label",
        "encoding": {
          "ticks": {
            "opacity": {
              "signal": "datum.value === 1 || datum.value === maxIterations ? 1 : 0"
            }
          },
          "grid": {
            "y2": { "value": 0 },
            "y": { "signal": "-height - 4" }
          }
        },
        "values": [1, { "signal": "maxIterations" }],
        "ticks": true
      },
      "scale": { "nice": false, "domain": [1, { "signal": "maxIterations" }] }
    }
  },
  "layer": [
    {
      "encoding": {
        "y": {
          "field": "maxScore",
          "type": "quantitative",
          "axis": {
            "title": { "signal": "isAccuracy ? 'Accuracy' : 'Loss'" },
            "labelPadding": 10,
            "tickCount": 4,
            "tickExtra": true
          },
          "scale": {
            "domain": {
              "fields": [
                { "data": "records", "field": "train" },
                { "data": "records", "field": "validate" },
                { "signal": "isAccuracy ? [0, 100] : [0, 0]" }
              ]
            }
          }
        }
      },
      "layer": [
        {
          "data": { "name": "snapshottableCheckpoints" },
          "transform": [
            {
              "calculate": "max(datum.validate, datum.train)",
              "as": "maxScore"
            }
          ],
          "mark": {
            "type": "rule",
            "style": "snapshottableCheckpoint",
            "opacity": { "signal": "lollipopIteration === datum.iteration ? 0 : 1" }
          }
        },
        {
          "data": { "name": "snapshots" },
          "transform": [
            {
              "calculate": "max(datum.validate, datum.train)",
              "as": "maxScore"
            }
          ],
          "mark": {
            "type": "rule",
            "style": "snapshot",
            "opacity": { "signal": "lollipopIteration === datum.iteration ? 0 : 1" }
          }
        },
        {
          "data": { "name": "records" },
          "transform": [
            {
              "calculate": "max(datum.validate, datum.train)",
              "as": "maxScore"
            }
          ],
          "layer":  [
            {
              "transform": [
                { "filter": "datum.iteration === lollipopIteration" }
              ],
              "mark": {
                "type": "rule",
                "style": "currentIterationRule",
                "y2": -14,
                "color": { "signal": "iterationMarkerColor" }
              }
            },
            {
              "transform": [
                {
                  "filter": "datum.iteration === lollipopIteration && datum.iteration !== currentIteration"
                }
              ],
              "mark": {
                "type": "rule",
                "style": "currentIterationRule",
                "color": { "signal": "createmlColor.selection" }
              }
            },
            {
              "transform": [
                {
                  "calculate": "max(datum.train, datum.validate)",
                  "as": "maxScore"
                },
                {
                  "filter": "datum.iteration === currentIteration"
                }
              ],
              "mark": {
                "type": "rule",
                "style": "currentIterationRule",
                "color": { "signal": "createmlColor.currentIterationMarker" }
              }
            }
          ]
        },
        {
          "transform": [
            { "filter": "datum.validate !== null" }
          ],
          "encoding": {
            "y": {
              "field": "validate",
              "type": "quantitative"
            }
          },
          "layer": [
            {
              "mark": { "type": "line", "style": "validateSaved" },
              "transform": [
                { "filter": "lastSavedIteration === null || datum.iteration <= lastSavedIteration" }
              ]
            },
            {
              "mark": {
                "type": "line",
                "style": "validateUnsaved"
              },
              "transform": [
                { "filter": "lastSavedIteration !== null && datum.iteration >= lastSavedIteration" }
              ]
            },
            {
              "transform": [
                { "filter": "datum.iteration === currentIteration" }
              ],
              "mark": { "type": "circle", "style": "validateSaved" },
              "encoding": {
                "y": {
                  "field": "validate",
                  "type": "quantitative"
                }
              }
            }
          ]
        },
        {
          "encoding": {
            "y": {
              "field": "train",
              "type": "quantitative"
            }
          },
          "layer": [
            {
              "mark": { "type": "line", "style": "trainSaved" },
              "transform": [
                { "filter": "lastSavedIteration === null || datum.iteration <= lastSavedIteration" }
              ]
            },
            {
              "mark": {
                "type": "line",
                "style": "trainUnsaved"
              },
              "transform": [
                { "filter": "lastSavedIteration !== null && datum.iteration >= lastSavedIteration" }
              ]
            },
            {
              "transform": [
                { "filter": "datum.iteration === currentIteration" }
              ],
              "mark": { "type": "circle", "style": "trainSaved" }
            }
          ]
        }
      ]
    },
    {
      "mark": {
        "type": "rect",
        "opacity": 0,
        "x": 0,
        "x2": { "signal": "width" },
        "y": { "signal": "-(lollipopHeight + chartPadding.lollipopChart)" },
        "y2": { "signal": "height" }
      }
    },
    {
      "data": { "name": "records" },
      "encoding": {
        "y": { "value": 0 }
      },
      "transform": [
        { "filter": "datum.iteration === lollipopIteration" },
        {
          "calculate": "datum.train !== null && datum.validate !== null",
          "as": "doubleLine"
        },
        {
          "as": "lollipopWidth",
          "calculate": "1 + lollipopPadding.left + (datum.doubleLine ? legendCircleWidthHeight + lollipopPadding.circleText : 0) + trainText.width + (datum.doubleLine ? lollipopPadding.col1Col2 + legendCircleWidthHeight + lollipopPadding.circleText + validateText.width : 0) + lollipopPadding.right + 1"
        },
        {
          "calculate": "1 + lollipopPadding.left + (datum.doubleLine ? legendCircleWidthHeight + lollipopPadding.circleText : 0 ) + lollipopIterationTextPrefixWidth + datum.iterationStringWidth + lollipopPadding.right + 1",
          "as": "lollipopWidthForIterationString"
        },
        {
          "calculate": "max(datum.lollipopWidth, datum.lollipopWidthForIterationString)",
          "as": "adjustedLollipopWidth"
        },
        {
          "calculate": "-lollipopHeight - chartPadding.lollipopChart",
          "as": "lollipopYOffset"
        },
        {
          "calculate": "scale('x', datum.iteration) - datum.adjustedLollipopWidth / 2",
          "as": "preLollipopStart"
        },
        {
          "calculate": "scale('x', datum.iteration) + datum.adjustedLollipopWidth / 2",
          "as": "preLollipopEnd"
        },
        {
          "calculate": "-min(0, datum.preLollipopStart) || min(0, width - datum.preLollipopEnd) ",
          "as": "boundaryOffset"
        },
        {
          "calculate": "datum.boundaryOffset - datum.adjustedLollipopWidth / 2",
          "as": "lollipopStartOffset"
        },
        {
          "calculate": "datum.boundaryOffset + datum.adjustedLollipopWidth / 2",
          "as": "lollipopEndOffset"
        },
        {
          "calculate": "datum.lollipopYOffset + lollipopPadding.top + 1",
          "as": "lollipopContentYOffset"
        },
        {
          "calculate": "datum.lollipopStartOffset + lollipopPadding.left + 1",
          "as": "lollipopContentXOffset"
        },
        {
          "calculate": "datum.lollipopContentXOffset + (datum.doubleLine ? legendCircleWidthHeight + lollipopPadding.circleText : 0)",
          "as": "lollipopContentTextXOffset"
        },
        {
          "calculate": "datum.lollipopContentTextXOffset + (datum.doubleLine ? trainText.width : singleText.width) + lollipopPadding.col1Col2",
          "as": "lollipopContentSecondXOffset"
        },
        {
          "calculate": "datum.lollipopContentSecondXOffset + legendCircleWidthHeight + lollipopPadding.circleText",
          "as": "lollipopContentSecondTextXOffset"
        },
        {
          "calculate": "datum.lollipopContentYOffset + trainText.height + lollipopPadding.row1Row2",
          "as": "lollipopContentRow2YOffset"
        },
        {
          "calculate": "datum.lollipopContentRow2YOffset + metricTextHeight + lollipopPadding.row2Row3",
          "as": "lollipopContentRow3YOffset"
        }
      ],
      "layer": [
        {
          "mark": {
            "type": "rect",
            "style": "lollipopRect",
            "yOffset": { "signal": "datum.lollipopYOffset" },
            "xOffset": { "signal": "datum.lollipopStartOffset" },
            "x2Offset": { "signal": "datum.lollipopEndOffset" }
          },
          "encoding": {
            "x2": {
              "field": "iteration",
              "type": "quantitative"
            }
          }
        },
        {
          "transform": [{ "filter": "datum.doubleLine" }],
          "mark": {
            "type": "circle",
            "size": { "signal": "legendCircleSize" },
            "color": { "signal": "createmlColor.train" },
            "dy": { "signal": "0.5 * legendCircleWidthHeight" },
            "yOffset": {
              "signal": "datum.lollipopContentYOffset + 0.5 * legendCircleWidthHeight"
            },
            "xOffset": {
              "signal": "datum.lollipopContentXOffset + 0.5 * legendCircleWidthHeight"
            }
          }
        },
        {
          "transform": [{ "filter": "datum.train !== null" }],
          "mark": {
            "type": "text",
            "style": "lollipopKeyText",
            "text": { "signal": "datum.doubleLine ? trainText.text : singleText.text" },
            "fontSize": 9,
            "fontWeight": 400,
            "yOffset": { "signal": "datum.lollipopContentYOffset" },
            "xOffset": { "signal": "datum.lollipopContentTextXOffset" }
          }
        },
        {
          "transform": [{ "filter": "datum.doubleLine" }],
          "mark": {
            "type": "circle",
            "size": { "signal": "legendCircleSize" },
            "color": { "signal": "createmlColor.validate" },
            "dy": { "signal": "0.5 * legendCircleWidthHeight" },
            "yOffset": {
              "signal": "datum.lollipopContentYOffset + legendCircleWidthHeight * 0.5"
            },
            "xOffset": {
              "signal": "datum.lollipopContentSecondXOffset + legendCircleWidthHeight * 0.5"
            }
          }
        },
        {
          "transform": [{ "filter": "datum.validate !== null" }],
          "mark": {
            "type": "text",
            "text": { "signal": "datum.doubleLine ? validateText.text : singleText.text" },
            "fontSize": 9,
            "style": "lollipopKeyText",
            "yOffset": { "signal": "datum.lollipopContentYOffset" },
            "xOffset": { "signal": "datum.doubleLine ? datum.lollipopContentSecondTextXOffset : datum.lollipopContentTextXOffset" }
          }
        },
        {
          "transform": [{ "filter": "datum.train !== null" }],
          "mark": {
            "type": "text",
            "font": "-apple-system-rounded",
            "fontSize": 13,
            "style": "lollipopKeyText",
            "yOffset": { "signal": "datum.lollipopContentRow2YOffset" },
            "xOffset": { "signal": "datum.lollipopContentTextXOffset" },
            "text": { "signal": "datum.trainString" }
          }
        },
        {
          "transform": [{ "filter": "datum.validate !== null" }],
          "mark": {
            "type": "text",
            "font": "-apple-system-rounded",
            "fontSize": 13,
            "style": "lollipopKeyText",
            "yOffset": { "signal": "datum.lollipopContentRow2YOffset" },
            "xOffset": { "signal": "datum.doubleLine ? datum.lollipopContentSecondTextXOffset : datum.lollipopContentTextXOffset" },
            "text": { "signal": "datum.validateString" }
          }
        },
        {
          "transform": [{ "filter": "datum.train !== null" }],
          "mark": {
            "type": "text",
            "text": { "signal": "isAccuracy ? '%' : ''" },
            "font": "-apple-system-rounded",
            "fontSize": 11,
            "style": "lollipopKeyText",
            "yOffset": { "signal": "datum.lollipopContentRow2YOffset + 1" },
            "xOffset": { "signal": "datum.lollipopContentTextXOffset + datum.trainStringWidth + lollipopPadding.metricPercent" }
          }
        },
        {
          "transform": [{ "filter": "datum.validate !== null" }],
          "mark": {
            "type": "text",
            "text": { "signal": "isAccuracy ? '%' : ''" },
            "fontSize": 11,
            "style": "lollipopKeyText",
            "yOffset": { "signal": "datum.lollipopContentRow2YOffset + 1" },
            "xOffset": { "signal": "(datum.doubleLine ? datum.lollipopContentSecondTextXOffset : datum.lollipopContentTextXOffset) + datum.validateStringWidth + lollipopPadding.metricPercent" }
          }
        },
        {
          "mark": {
            "type": "text",
            "text": {
              "signal": "lollipopIterationTextPrefix + datum.iteration"
            },
            "fontSize": 9,
            "style": "lollipopKeyText",
            "baseline": "line-bottom",
            "yOffset": { "signal": "datum.lollipopContentRow3YOffset + iterationTextHeight" },
            "xOffset": { "signal": "datum.lollipopContentTextXOffset" }
          }
        }
      ]
    },
    {
      "data": { "name": "snapshots" },
      "mark": { "type": "rect", "opacity": 0, "width": 12, "cursor": "pointer" }
    },
    {
      "data": { "name": "snapshottableCheckpoints" },
      "mark": { "type": "rect", "opacity": 0, "width": 12, "cursor": "pointer" }
    },
    {
      "transform": [
        { "filter": "datum.iteration === currentIteration" }
      ],
      "mark": { "type": "rect", "opacity": 0, "width": 12, "cursor": "pointer" }
    }
_TtC10MLChartKit9ChartData
_records
_snapshots
_snapshottableCheckpoints
_lastSavedIteration
_tickMinStep
  "signals": [
    {
      "name": "hoverIteration",
      "on": [
        {
          "events": "@layer_3_marks:mouseover, @layer_4_marks:mouseover, @layer_5_marks:mouseover",
          "update": "datum.iteration"
        }
      ]
    },
    {
      "name": "clickIteration",
      "on": [
        {
          "events": "@layer_3_marks:mousedown, @layer_4_marks:mousedown, @layer_5_marks:mousedown",
          "update": "datum.iteration"
        },
        {
          "events": "@layer_1_marks:mousedown",
          "update": "null"
        }
      ]
    },
    {
      "name": "lastSavedIteration",
      "value": null
    },
    {
      "name": "currentIteration",
      "update": "length(data('records')) ? data('records')[length(data('records')) - 1].iteration : null"
    },
    {
      "name": "snapshotSelected",
      "update": "(hoverIteration || clickIteration) && indata('snapshots', 'iteration', lollipopIteration)"
    },
    {
      "name": "snapshottableSelected",
      "update": "(hoverIteration || clickIteration) && indata('snapshottableCheckpoints', 'iteration', lollipopIteration)"
    },
    {
      "name": "snapshotOrSnapshottableSelected",
      "update": "snapshotSelected || snapshottableSelected"
    },
    {
      "name": "lollipopIteration",
      "update": "clickIteration || hoverIteration || currentIteration"
    },
    {
      "name": "createmlColor",
      "update": "{ train: color.
, validate: color.
, selection: color.
, lollipopBackground: color.
, oppositeText: color.
, labels: color.
, titles: color.
, currentIterationMarker: color.
, snapshotMarker: color.
, snapshottableMarker: color.
    },
    {
      "name": "chartPadding",
      "value": {
        "lollipopChart": 10
      }
    },
    {
      "name": "lollipopPadding",
      "value": {
          "top": 4,
          "bottom": 4,
          "left": 8,
          "right": 8,
          "row1Row2": 2,
          "row2Row3": 2,
          "circleText": 3,
          "col1Col2": 12,
          "metricPercent": 2
      }
    },
    {
      "name": "maxIterations",
      "value": 
    },
    {
      "name": "isAccuracy",
      "value": 
    },
    {
      "name": "lollipopHeight",
      "update": "1 + lollipopPadding.top + legendKeyTextHeight + lollipopPadding.row1Row2 + metricTextHeight + lollipopPadding.row2Row3 + iterationTextHeight + lollipopPadding.bottom + 1"
    },
    {
      "name": "legendCircleWidthHeight",
      "value": 6
    },
    {
      "name": "legendCircleSize",
      "value": 28.3
    },
    {
      "name": "trainText",
      "value": {
        "text": "
        "width": 
        "height": 
      }
    },
    {
      "name": "validateText",
      "value": {
        "text": "
      }
    },
    {
      "name": "singleText",
      "value": {
        "text": "
      }
    },
    {
      "name": "legendKeyTextHeight",
      "update": "singleText.height"
    },
    {
      "name": "metricTextHeight",
      "value": 
    },
    {
      "name": "iterationTextHeight",
      "value": 
    },
    {
      "name": "lollipopBackgroundColor",
      "update": "snapshotOrSnapshottableSelected ? createmlColor.selection : createmlColor.lollipopBackground"
    },
    {
      "name": "lollipopStrokeColor",
      "update": "snapshotOrSnapshottableSelected ? null : createmlColor.currentIterationMarker"
    },
    {
      "name": "lollipopTextColor",
      "update": "snapshotOrSnapshottableSelected ? createmlColor.oppositeText : createmlColor.text"
    },
    {
      "name": "iterationMarkerColor",
      "update": "snapshotOrSnapshottableSelected ? createmlColor.selection : createmlColor.currentIterationMarker"
    },
    {
      "name": "lollipopIterationTextPrefix",
      "update": "snapshotSelected ? '
' : snapshottableSelected ? '
    },
    {
      "name": "lollipopIterationTextPrefixWidth",
      "update": "snapshotSelected ? 
 : snapshottableSelected ? 
    },
    {
      "name": "xAxisTickSize",
      "value": 
    },
    {
      "name": "pad2Off",
      "value": 1
    }
  ],
  "line": { "strokeWidth": 4, "interpolate": "monotone" },
  "circle": { "size": 100, "opacity": 1 },
  "axis": {
    "labelFontSize": 9,
    "titleFontSize": 9,
    "titleFontWeight": 400,
    "titleColor": { "signal": "createmlColor.titles" }
  },
  "axisX": {
    "titleX": 5,
    "titleAlign": "left",
    "titleBaseline": "top",
    "titleY": 7,
    "labelAlign": "right",
    "labelOffset": -5,
    "labelPadding": { "signal": "-xAxisTickSize + 7" },
    "labelBaseline": "top",
    "labelColor": { "signal": "createmlColor.labels" },
    "grid": true,
    "gridWidth": 1,
    "tickWidth": 1,
    "domainWidth": 1,
    "gridColor": { "signal": "createmlColor.axis" },
    "tickColor": { "signal": "createmlColor.axis" },
    "domainColor": { "signal": "createmlColor.axis" },
    "domain": true,
    "tickSize": { "signal": "xAxisTickSize" }
  },
  "axisY": {
    "labelColor": { "signal": "createmlColor.labels" },
    "ticks": false,
    "titleY": { "signal": "height + xAxisTickSize - iterationTextHeight + pad2Off" },
    "titleBaseline": "top",
    "titleAlign": "right",
    "titleAngle": 0,
    "titleX": -12,
    "grid": true,
    "gridColor": { "signal": "createmlColor.grid" },
    "gridWidth": 1,
    "title": false,
    "labelPadding": 10,
    "tickCount": 4
  },
  "style": {
    "cell": { "stroke": "transparent" },
    "trainSaved": {
      "color": { "signal": "createmlColor.train" },
      "strokeCap": "round"
    },
    "validateSaved": {
      "color": { "signal": "createmlColor.validate" },
      "strokeCap": "round"
    },
    "trainUnsaved": {
      "color": { "signal": "createmlColor.train" },
      "strokeDash": [4, 1],
      "strokeCap": "butt"
    },
    "validateUnsaved": {
      "color": { "signal": "createmlColor.validate" },
      "strokeDash": [4, 1],
      "strokeCap": "butt"
    },
    "snapshot": {
      "color": { "signal": "createmlColor.snapshotMarker" }
    },
    "snapshottableCheckpoint": {
      "color": { "signal": "createmlColor.snapshottableMarker" },
      "strokeDash": [3, 3]
    },
    "currentIterationRule": {
      "color": { "signal": "createmlColor.currentIterationMarker" }
    },
    "lollipopRect": {
      "height": { "signal": "lollipopHeight" },
      "color": { "signal": "lollipopBackgroundColor" },
      "stroke": { "signal": "lollipopStrokeColor" },
      "baseline": "top",
      "strokeWidth": 1,
      "cornerRadiusTopLeft": 6,
      "cornerRadiusTopRight": 6,
      "cornerRadiusBottomRight": 6,
      "cornerRadiusBottomLeft": 6
    },
    "lollipopKeyText": {
      "color": { "signal": "lollipopTextColor" },
      "align": "left",
      "baseline": "top",
      "fontWeight": 400,
      "opacity": 1
    },
    "selectedCheckpointRule": {
      "color": { "signal": "createmlColor.selection" }
    },
    "selectedCheckpointText": {
      "color": { "signal": "createmlColor.oppositeText" },
      "fontWeight": 600,
      "opacity": 1,
      "fontSize": 9
    }
/AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/MLUI/MLUI-41/MLChartKit/Other/LineChartConfig.swift
Fatal error
v24@?0@"NSString"8@"JSValue"16
/AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/MLUI/MLUI-41/MLChartKit/Other/MLChartView.swift
MLChartKit.MLChartView
init(spec:)
init(spec:config:)
init(spec:config:options:)
init(frame:)
_TtC10MLChartKit11MLChartView
v16@0:8
v32@0:8@16@24
@32@0:8@16@24
@40@0:8@16@24@32
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
waitingData
waitingAddSignalListener
waitingAddSignalName
onCheckpointClick
lazilyInitializeRenderer
addListener:toSignalWithName:
Contradictory frame constraints specified.
swift_getObjCClassMetadata
_TtCs12_SwiftObject
swift_getTypeContextDescriptor
swift_getExistentialTypeMetadata
objc_addLoadImageFunc
__TEXT
__swift5_proto
So8NSStringC
SDySSypG
ySnySiGG
ySDySSypGG
$sSY
$ss21_ObjectiveCBridgeableP
SgXw
ypSg
SaySDySSypGG
ySaySDySSypGGG
So14CCChartDataRow_p
SiSg
ySiSgG
ySo14CCChartDataRow_pG
$s7SwiftUI19NSViewRepresentableP
$s7SwiftUI4ViewP
ySiG
$s7Combine16ObservableObjectP
ySS_yptG
SS_ypt
SdSg
ypGG
_ypt
ySSypG
So6NSFontCG
_SDy
ypGtG
_yptG
_SDy
ypGt
_So6NSFontCtG
_So6NSFontCt
So11CCChartViewC
SaySo14CCChartDataRow_pGSg
ySS_So7JSValueCtcSg
SSSg
ySicSg
So8NSStringCyXlSgIeyByy_
3key_
5valuet
3key_yp5valuetSg
_yptSg
3key_yp5valuetSg
_yptSg
ySbG
yAAy
ySbGSg
_rawValue
width
height
RawValue
_ObjectiveCType
chartView
maxIterations
interactionState
metric
_data
NSViewType
Coordinator
Body
primary
secondary
both
_records
_snapshots
_snapshottableCheckpoints
_lastSavedIteration
_tickMinStep
ObjectWillChangePublisher
iteration
primary
secondary
maxIterations
isAccuracy
trainingAccuracy
validationAccuracy
trainingLoss
validationLoss
accuracy
loss
styleLoss
contentLoss
iterationSnapshotPrefix
iterationSnapshottablePrefix
iterationCurrentPrefix
metricPlaceholder
iterationPlaceholder
text
three
RawValue
waitingData
waitingAddSignalListener
waitingAddSignalName
onCheckpointClick
_chartData
_interactionState
onCheckpointClick
maxIterations
isAccuracy
lastCheckpoint
metric
Body
columnsInChartView
chartViewDataValueForColumn:
chartViewDataRowID
isEqual:
hash
superclass
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
description
debugDescription
__swift_objectForKeyedSubscript:
objectAtIndexedSubscript:
setNamedDataset:rows:
setNeedsDisplay:
begin
init
commit
colorNameComponent
gridColor
separatorColor
textColor
textBackgroundColor
controlAccentColor
windowBackgroundColor
systemFontOfSize:
fontDescriptor
fontDescriptorWithDesign:
fontWithDescriptor:size:
sizeWithAttributes:
window
initWithSpec:
initWithSpec:config:
initWithSpec:config:options:
initWithFrame:
dealloc
initWithCoder:
viewDidMoveToWindow
.cxx_destruct
setSignalWithName:toValue:
toObject
iteration
train
validate
checkpoint
trainString
validateString
