@(#)PROGRAM:GPUPlugin  PROJECT:Instruments-64555.231
v8@?0
v24@?0@"JSContext"8@"JSValue"16
var %@ = 0;
var _DerivedCounterResult = [];
var _LastTimestamp = 0;
function _SetAndEvaluateRawCounterValues(numSamples) {
_DerivedCounterResult = [];
for (var sampleIndex = 0; sampleIndex < numSamples; ++sampleIndex) {
var sampleStartIndex = sampleIndex * %lu + 1;
var timestamp = (_RawCounterValues[0 + sampleIndex * %lu]) * TIMEBASE_NUMER / TIMEBASE_DENOM;
MTLStat_nSec = timestamp - _LastTimestamp; if (MTLStat_nSec > 1330000) { MTLStat_nSec = 1330000; }
TIME_SCALE = 1000.0 / 24.0; GBL_GPU_N_CLK_TIMER = MTLStat_nSec / TIME_SCALE; 
%@ = _RawCounterValues[%lu + sampleStartIndex];
%@_norm = _RawCounterValues[%lu + sampleStartIndex] / _RawCounterValues[1 + sampleStartIndex] * 100;
try { value = %@(); if (!isFinite(value)) { value = 0; } _DerivedCounterResult.push(value); } catch(err) { ErrorLog(err); _DerivedCounterResult.push(0); }
_LastTimestamp = timestamp
v16@?0@"NSString"8
ErrorLog
_RawCounterValues
_SetAndEvaluateRawCounterValues
_DerivedCounterResult
_vtx|_frg|_cmp
var MTLStat_nSec = %llu; var SAMPLE_INTERVAL_USEC = %llu;
var TIMEBASE_NUMER = %d; var TIMEBASE_DENOM = %d;
v32@?0@"NSString"8@16^c24
num_cores_per_ringbuffer
num_cores
num_mgpus
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
XRGPUWaitForCountersStart
XRGPUWaitForRemainingData
XRGPULoadRemainingData
XRGPULoadCountersMessage
XRGPUWaitingForGPUInfo
XRGPULoadGPUInfo
XRGPUTapDTXMessage
v16@?0@"DTXMessage"8
GPU Service reported error: %@
message
Failed to retrieve GPU info on target device
v16@?0r^{XRAnalysisCoreTableBindings=}8
Cannot find GPU device for counter collection
Cannot find GPU counters to collect
Cannot process GPU counters
mobile
Bandwidth
Percentage
Value
Cannot find GPU device for counter values
Cannot find GPU device for shader profiler values
family-name
[A|M](\d+)\D?
v32@?0r^Q8Q16Q24
Unexpected payload
accelerator-id
device-name
vendor-name
headless
low-power
removable
recommended-max-working-set-size
agx-tracecode-version
timestamp
counter-id
name
max-value
description
group-index
type
ring-buffer-count
require-weighted-accumulation
value
sample-index
ring-buffer-index
display-id
framebuffer-index
resolution
built-in
num-pcs
consistent-state-available
consistent-state-enabled
consistent-state-sustained
consistent-state-mapping
consistent-state
com.apple.instruments.server.services.gpu
com.apple.instruments.server.services.gpu.shaderprofiler
com.apple.instruments.server.services.gpu.counters
com.apple.instruments.server.services.gpu.counters.multisources
device-gpu-info
device-display-info
gpu-counter-info
counter-profile
counter-device
shader-profiler
gpu-counter-value
gpu-shader-profiler-sample
gpu-performance-state-info
requested-consistent-state
v24@?0Q8^c16
GPU Counter collection is not supported in Simulators.
Target device does not support GPU counter collection.
Try upgrading the target device to latest OS.
Target device does not support GPU counter collection. iOS 13 or later is required.
GPU Service is not available in the OS. GPU and GPU Memory info may be missing.
Shader Timeline tracing is not supported in Simulators.
Shader Timeline tracing is not supported on macOS.
Target device does not support Shader Timeline tracing. iOS 14 or later is required.
init
allocNewContext
_clearCache
initWithVirtualMachine:
JSGlobalContextRef
dealloc
_jsStringToString:
lastPathComponent
copy
toString
setExceptionHandler:
evaluateScript:withSourceURL:
objectForKeyedSubscript:
callWithArguments:
toDouble
stringWithUTF8String:
JSValueRef
_cachedStringFromString:
string
countByEnumeratingWithState:objects:count:
appendFormat:
appendString:
count
_codeGenCounterProcessing:derivedCounterNames:
setObject:forKeyedSubscript:
evaluteScript:scriptURL:
setRawArrayValue:bytes:numElements:
numberWithUnsignedLong:
arrayWithObjects:count:
callFunction:withArguments:
getValue:
toArray
valueWithObject:inContext:
sharedContext
_jsValueToString:
callGlobalFunction:
setGlobalDouble:value:
getGlobalDouble:
prepareCounterNames:derivedCounterNames:
prepareAndEvaluateCounterValues:numElementsPerSample:numSamples:
setValue:value:
virtualMachine
context
exceptionHandler
.cxx_destruct
.cxx_construct
_cache
_stringCache
_globalObject
_filename
_virtualMachine
_context
_exceptionHandler
T@"JSVirtualMachine",R,N,V_virtualMachine
T@"JSContext",R,N,V_context
T@?,C,N,V_exceptionHandler
objectAtIndexedSubscript:
addObject:
intValue
doubleValue
stringByReplacingOccurrencesOfString:withString:
boolValue
length
regularExpressionWithPattern:options:error:
stringByReplacingMatchesInString:options:range:withTemplate:
stringWithFormat:
stringByAppendingString:
machTimeBase
enumerateKeysAndObjectsUsingBlock:
handleCounterInfo:rawCounters:derivedCounterScript:sampleInterval:timeBase:
setGpuConfigurationVariables:
processCounterSample:numSamples:ringBufferIndex:
counterCount
rawCounterCount
parseShaderProfilerSamples:numSamples:gpuFamily:callback:
isMobileDevice
setIsMobileDevice:
gpuConfigurationVariables
_counterFunctionNames
_rawCounterNames
_derivedCounterScript
_jsContext
_isDeltaCounter
_counterMultiplier
_counterMaxValues
_previousProcessedSample
_lastSample
_sampleInterval
_needsPostProcessing
_isMobileDevice
_gpuConfigurationVariables
TQ,R,N
Tc,N,V_isMobileDevice
T@"NSDictionary",&,N,V_gpuConfigurationVariables
write:value:
unsignedIntValue
unsignedLongLongValue
stringValue
unsignedIntegerValue
numberWithUnsignedLongLong:
initWithColumnName:columnIndex:
write:data:
write:rawValue:numElements:
columnName
columnIndex
_columnName
_columnIndex
T@"NSString",R,N,V_columnName
TQ,R,N,V_columnIndex
initWIthTableID:columns:timeColumn:
write:tupleData:
write:rawData:
columns
timeColumn
tableID
_tableID
_columns
_timeColumn
T@"NSArray",R,N,V_columns
T@"XRGPUTapTableColumnMapping",R,N,V_timeColumn
TI,R,N,V_tableID
mode
_handleStopRecording:
replyMessageReceived
core
bulkLoadingPanelTicketForAgent:
setNextStop:mode:ticket:
_handleFinalData:
_handleRemoteServiceMessage:
_handleGPUInfoMessage:
executeStopOnItinerary:
deactivated
disableConsistentGPUPerformanceState:
messageWithSelector:typesAndArguments:
channel
sendMessageSync:replyHandler:
disableConsistentGPUPerformanceState
stopCollectingCounters
messageWithSelector:objectArguments:
messageReplyTicketForControlMessage:agent:
updateTrailingEventHorizon:
command
commandPurpose
requestDeviceGPUInfo
returnToRunning:
moveToFailed:
sendMessage:replyHandler:
issueResponder
instrumentsPlugInErrorWithCode:descriptionFormat:
handleIssue:type:from:
details
message
errorStatus
error
localizedDescription
_failedWithError:itinerary:
_finishRecording:
handleCourier:itinerary:
setMessageHandler:
cancel
setChannel:
moveToFinished:
object
initWithIndex:
addIndex:
_createAndWriteGPUInfo:deviceInfoDict:
minCounterCollectionInterval
populateTableIDs:block:
recordingOptions
isWindowed
windowLimit
isDeferred
enableMultiSourceCounters
configureCounters:counterProfile:interval:windowLimit:tracingPID:
enableShaderProfiler
enableConsistentGPUPerformanceState:acceleratorID:
reportFailureReason:recovery:
deviceTimeInfo
rawAttributes
containsString:
numberWithInt:
numberWithUnsignedInt:
startCollectingCounters
initWithReplyDict:
acceleratorID
connectedDisplays
performanceStateInfo
consistentPerformanceStateAvailable
numberWithBool:
consistentPerformanceStateEnabled
consistentPerformanceStateSustained
consistentPerformanceStateMapping
consistentPerformanceState
_advanceClock:
matchesInString:options:range:
numberOfRanges
rangeAtIndex:
substringWithRange:
integerValue
unsignedLongValue
bytes
_handleCounterValueMessage:acceleratorID:numSamples:sampleData:ringBufferIndex:sourceIndex:
_handleShaderProfilerBufferMessage:version:acceleratorID:numSamples:sampleData:ringBufferIndex:sourceIndex:
_handleCounterInfoMessage:acceleratorID:profile:config:ringBufferCount:sourceIndex:
_handleCounterConfiguredMessage:
_handleNewGPUMessage:timestamp:
_handleMessage:
recordingStopped:
columnIDForMnemonic:
_columnMapping:schema:
performMainThreadSafeSetup:
targetDevice
connection
remoteCapabilityVersion:
makeChannelWithIdentifier:
waitingRoom
dictionaryWithObjects:forKeys:count:
sendCourierToVisitWaitingRoom:message:details:
tableIDsToPopulate
tableSpecsByID
schemataByName
schemaName
name
isEqualToString:
_fillDeviceGPUInfoTableMapping:tableID:
_fillDeviceDisplayInfoTableMapping:tableID:
_fillCounterInfoTableMapping:tableID:
attributes
_fillCounterValueTableMapping:tableID:
_fillShaderProfilerSampleTableMapping:tableID:
_fillGPUPerformanceInfoTableMapping:tableID:
enumerateIndexesUsingBlock:
voteDeviceRelativeMachAbsoluteTime:
flushRemainingData
yieldNow
setYieldNow:
T^Ac,N
analysisCoreBulkLoadPanel
setAnalysisCoreBulkLoadPanel:
T@"<XRAnalysisCoreBulkLoadPanel>",&,N
greetingVisitor
setGreetingVisitor:
greetingTeam
setGreetingTeam:
T@"XRMobileAgent<XRMobileAgentVisitor>",&,N
T@"XRMobileAgentTeam",&,N
setReplyMessageReceived:
T@"DTXMessage",&,N
stopRecording:
start:
voteForEpoch:
flushAllRemainingData:
_currentMessage
_counterRequest
_hasRemoteService
_epoch
_supportsShaderProfiler
_supportsGPUSelection
_supportsMultiSourceCounters
_counterProfile
_counterGPUIndexOrAcceleratorID
_tableColumnIDMapping
_gpuMapping
_dataClock
_counterProcessors
_sampleIndexes
_targetPerformanceState
_analysisCoreBulkLoadPanel
_yieldNow
_replyMessageReceived
_channel
T@"DTXChannel",&,N,V_channel
T@"<XRAnalysisCoreBulkLoadPanel>",&,N,V_analysisCoreBulkLoadPanel
T^Ac,N,V_yieldNow
T@"DTXMessage",&,N,V_replyMessageReceived
deviceIdentifier
isSimulator
isLocal
instrumentsPlugInErrorWithCode:description:recoverySuggestion:
_retrieveDeviceInfoForDevice:
selectSupportedTableSpecs:command:
topIssueAffectingRecordingOfTableSpecs:command:
agentForCommand:
_deviceInfoMap
XRGPUTapJavaScriptContext
XRGPUTapGPUCounterProcessor
XRGPUTapTableColumnMapping
XRGPUTapTableMapping
XRGPUTapAgent
XRAnalysisCoreBulkLoadingAgent
XRMinorFrameAgent
XRMobileAgentOwner
XRReplyReceivingAgent
XRGPUTapPlugIn
@16@0:8
v16@0:8
{basic_string<char, std::char_traits<char>, std::allocator<char>>={__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}24@0:8^{OpaqueJSString=}16
{basic_string<char, std::char_traits<char>, std::allocator<char>>={__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}24@0:8^{OpaqueJSValue=}16
c32@0:8@16@24
d32@0:8@16@24
^{OpaqueJSString=}24@0:8r*16
d24@0:8r*16
v32@0:8r*16d24
c40@0:8r*16^Q24Q32
@32@0:8@16@24
@40@0:8^Q16Q24Q32
@24@0:8@16
@?16@0:8
v24@0:8@?16
{unordered_map<std::string, OpaqueJSValue *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, OpaqueJSValue *>>>="__table_"{__hash_table<std::__hash_value_type<std::string, OpaqueJSValue *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, OpaqueJSValue *>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, OpaqueJSValue *>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, OpaqueJSValue *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, OpaqueJSValue *>, std::hash<std::string>, std::equal_to<std::string>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, OpaqueJSValue *>, std::equal_to<std::string>, std::hash<std::string>, true>>="__value_"f}}}
{unordered_map<std::string, OpaqueJSString *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, OpaqueJSString *>>>="__table_"{__hash_table<std::__hash_value_type<std::string, OpaqueJSString *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, OpaqueJSString *>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, OpaqueJSString *>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, OpaqueJSString *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, OpaqueJSString *>, std::hash<std::string>, std::equal_to<std::string>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, OpaqueJSString *>, std::equal_to<std::string>, std::hash<std::string>, true>>="__value_"f}}}
^{OpaqueJSValue=}
@"NSString"
@"JSVirtualMachine"
@"JSContext"
c56@0:8@16@24@32Q40@48
v24@0:8@16
^d36@0:8^Q16Q24I32
Q16@0:8
v44@0:8^Q16Q24i32@?36
c16@0:8
v20@0:8c16
@"NSMutableArray"
@"XRGPUTapJavaScriptContext"
{vector<unsigned char, std::allocator<unsigned char>>="__begin_"*"__end_"*"__end_cap_"{__compressed_pair<unsigned char *, std::allocator<unsigned char>>="__value_"*}}
{vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}
{vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}
{vector<unsigned long long, std::allocator<unsigned long long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long long *, std::allocator<unsigned long long>>="__value_"^Q}}
@"NSDictionary"
@32@0:8@16Q24
c32@0:8r^{XRAnalysisCoreWriteCursor=}16@24
c36@0:8r^{XRAnalysisCoreWriteCursor=}16^v24I32
@36@0:8I16@20@28
v32@0:8r^{XRAnalysisCoreWriteCursor=}16@24
v32@0:8r^{XRAnalysisCoreWriteCursor=}16^Q24
I16@0:8
@"NSArray"
@"XRGPUTapTableColumnMapping"
^Ac16@0:8
v24@0:8^Ac16
@"<XRAnalysisCoreBulkLoadPanel>"16@0:8
v24@0:8@"<XRAnalysisCoreBulkLoadPanel>"16
@"XRMobileAgent<XRMobileAgentVisitor>"16@0:8
v24@0:8@"XRMobileAgent<XRMobileAgentVisitor>"16
@"XRMobileAgentTeam"16@0:8
v24@0:8@"XRMobileAgentTeam"16
@"DTXMessage"16@0:8
v24@0:8@"DTXMessage"16
v24@0:8Q16
v32@0:8@16@24
c56@0:8Q16Q24Q32@40I48I52
c24@0:8Q16
@32@0:8r^{XRAnalysisCoreTableBindings=}16@24
c32@0:8@16Q24
c56@0:8Q16Q24Q32^Q40I48I52
c64@0:8Q16Q24Q32Q40^Q48I56I60
c24@0:8@16
v28@0:8@16I24
@"DTXMessage"
@"NSMutableDictionary"
[5[16Q]]
@"<XRAnalysisCoreBulkLoadPanel>"
@"DTXChannel"
@(#)PROGRAM:GPUPlugin  PROJECT:Instruments-64555.231
v8@?0
v24@?0@"JSContext"8@"JSValue"16
var %@ = 0;
var _DerivedCounterResult = [];
var _LastTimestamp = 0;
function _SetAndEvaluateRawCounterValues(numSamples) {
_DerivedCounterResult = [];
for (var sampleIndex = 0; sampleIndex < numSamples; ++sampleIndex) {
var sampleStartIndex = sampleIndex * %lu + 1;
var timestamp = (_RawCounterValues[0 + sampleIndex * %lu]) * TIMEBASE_NUMER / TIMEBASE_DENOM;
MTLStat_nSec = timestamp - _LastTimestamp; if (MTLStat_nSec > 1330000) { MTLStat_nSec = 1330000; }
TIME_SCALE = 1000.0 / 24.0; GBL_GPU_N_CLK_TIMER = MTLStat_nSec / TIME_SCALE; 
%@ = _RawCounterValues[%lu + sampleStartIndex];
%@_norm = _RawCounterValues[%lu + sampleStartIndex] / _RawCounterValues[1 + sampleStartIndex] * 100;
try { value = %@(); if (!isFinite(value)) { value = 0; } _DerivedCounterResult.push(value); } catch(err) { ErrorLog(err); _DerivedCounterResult.push(0); }
_LastTimestamp = timestamp
v16@?0@"NSString"8
ErrorLog
_RawCounterValues
_SetAndEvaluateRawCounterValues
_DerivedCounterResult
_vtx|_frg|_cmp
var MTLStat_nSec = %llu; var SAMPLE_INTERVAL_USEC = %llu;
var TIMEBASE_NUMER = %d; var TIMEBASE_DENOM = %d;
v32@?0@"NSString"8@16^B24
num_cores_per_ringbuffer
num_cores
num_mgpus
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
XRGPUWaitForCountersStart
XRGPUWaitForRemainingData
XRGPULoadRemainingData
XRGPULoadCountersMessage
XRGPUWaitingForGPUInfo
XRGPULoadGPUInfo
XRGPUTapDTXMessage
v16@?0@"DTXMessage"8
GPU Service reported error: %@
message
Failed to retrieve GPU info on target device
v16@?0r^{XRAnalysisCoreTableBindings=}8
Cannot find GPU device for counter collection
Cannot find GPU counters to collect
Cannot process GPU counters
mobile
Bandwidth
Percentage
Value
Cannot find GPU device for counter values
Cannot find GPU device for shader profiler values
family-name
[A|M](\d+)\D?
v32@?0r^Q8Q16Q24
Unexpected payload
accelerator-id
device-name
vendor-name
headless
low-power
removable
recommended-max-working-set-size
agx-tracecode-version
timestamp
counter-id
name
max-value
description
group-index
type
ring-buffer-count
require-weighted-accumulation
value
sample-index
ring-buffer-index
display-id
framebuffer-index
resolution
built-in
num-pcs
consistent-state-available
consistent-state-enabled
consistent-state-sustained
consistent-state-mapping
consistent-state
com.apple.instruments.server.services.gpu
com.apple.instruments.server.services.gpu.shaderprofiler
com.apple.instruments.server.services.gpu.counters
com.apple.instruments.server.services.gpu.counters.multisources
device-gpu-info
device-display-info
gpu-counter-info
counter-profile
counter-device
shader-profiler
gpu-counter-value
gpu-shader-profiler-sample
gpu-performance-state-info
requested-consistent-state
v24@?0Q8^B16
GPU Counter collection is not supported in Simulators.
Target device does not support GPU counter collection.
Try upgrading the target device to latest OS.
Target device does not support GPU counter collection. iOS 13 or later is required.
GPU Service is not available in the OS. GPU and GPU Memory info may be missing.
Shader Timeline tracing is not supported in Simulators.
Shader Timeline tracing is not supported on macOS.
Target device does not support Shader Timeline tracing. iOS 14 or later is required.
schemataByName
count
name
windowLimit
JSGlobalContextRef
integerValue
issueResponder
waitingRoom
consistentPerformanceStateEnabled
deviceIdentifier
commandPurpose
performanceStateInfo
numberWithUnsignedLongLong:
toArray
messageWithSelector:typesAndArguments:
rangeAtIndex:
unsignedLongLongValue
substringWithRange:
stringByReplacingMatchesInString:options:range:withTemplate:
enumerateKeysAndObjectsUsingBlock:
boolValue
cancel
schemaName
isSimulator
core
initWithIndex:
attributes
isWindowed
command
voteDeviceRelativeMachAbsoluteTime:
enumerateIndexesUsingBlock:
setObject:forKeyedSubscript:
addObject:
regularExpressionWithPattern:options:error:
machTimeBase
numberWithUnsignedLong:
targetDevice
consistentPerformanceStateAvailable
messageWithSelector:objectArguments:
unsignedIntegerValue
stringByAppendingString:
intValue
moveToFinished:
recordingStopped:
isLocal
callWithArguments:
consistentPerformanceState
copy
stringWithUTF8String:
numberWithUnsignedInt:
unsignedIntValue
addIndex:
tableSpecsByID
details
arrayWithObjects:count:
localizedDescription
setNextStop:mode:ticket:
objectForKeyedSubscript:
containsString:
string
doubleValue
evaluateScript:withSourceURL:
instrumentsPlugInErrorWithCode:descriptionFormat:
returnToRunning:
messageReplyTicketForControlMessage:agent:
instrumentsPlugInErrorWithCode:description:recoverySuggestion:
valueWithObject:inContext:
isEqualToString:
acceleratorID
connection
moveToFailed:
sendMessageSync:replyHandler:
stringWithFormat:
numberWithInt:
reportFailureReason:recovery:
bytes
recordingOptions
dictionaryWithObjects:forKeys:count:
setMessageHandler:
length
message
tableIDsToPopulate
consistentPerformanceStateSustained
matchesInString:options:range:
objectAtIndexedSubscript:
errorStatus
columnIDForMnemonic:
toString
appendString:
sendMessage:replyHandler:
connectedDisplays
updateTrailingEventHorizon:
mode
numberWithBool:
object
stringValue
sendCourierToVisitWaitingRoom:message:details:
handleIssue:type:from:
unsignedLongValue
countByEnumeratingWithState:objects:count:
remoteCapabilityVersion:
lastPathComponent
numberOfRanges
consistentPerformanceStateMapping
appendFormat:
makeChannelWithIdentifier:
minCounterCollectionInterval
toDouble
initWithVirtualMachine:
JSValueRef
populateTableIDs:block:
initWithReplyDict:
isDeferred
error
rawAttributes
deviceTimeInfo
bulkLoadingPanelTicketForAgent:
stringByReplacingOccurrencesOfString:withString:
init
dealloc
sharedContext
allocNewContext
_jsStringToString:
_jsValueToString:
_clearCache
evaluteScript:scriptURL:
callFunction:withArguments:
_cachedStringFromString:
callGlobalFunction:
setGlobalDouble:value:
getGlobalDouble:
setRawArrayValue:bytes:numElements:
_codeGenCounterProcessing:derivedCounterNames:
prepareCounterNames:derivedCounterNames:
prepareAndEvaluateCounterValues:numElementsPerSample:numSamples:
setValue:value:
getValue:
virtualMachine
context
exceptionHandler
setExceptionHandler:
.cxx_destruct
.cxx_construct
_cache
_stringCache
_globalObject
_filename
_virtualMachine
_context
_exceptionHandler
T@"JSVirtualMachine",R,N,V_virtualMachine
T@"JSContext",R,N,V_context
T@?,C,N,V_exceptionHandler
handleCounterInfo:rawCounters:derivedCounterScript:sampleInterval:timeBase:
setGpuConfigurationVariables:
processCounterSample:numSamples:ringBufferIndex:
counterCount
rawCounterCount
parseShaderProfilerSamples:numSamples:gpuFamily:callback:
isMobileDevice
setIsMobileDevice:
gpuConfigurationVariables
_counterFunctionNames
_rawCounterNames
_derivedCounterScript
_jsContext
_isDeltaCounter
_counterMultiplier
_counterMaxValues
_previousProcessedSample
_lastSample
_sampleInterval
_needsPostProcessing
_isMobileDevice
_gpuConfigurationVariables
TQ,R,N
TB,N,V_isMobileDevice
T@"NSDictionary",&,N,V_gpuConfigurationVariables
initWithColumnName:columnIndex:
write:data:
write:value:
write:rawValue:numElements:
columnName
columnIndex
_columnName
_columnIndex
T@"NSString",R,N,V_columnName
TQ,R,N,V_columnIndex
initWIthTableID:columns:timeColumn:
write:tupleData:
write:rawData:
columns
timeColumn
tableID
_tableID
_columns
_timeColumn
T@"NSArray",R,N,V_columns
T@"XRGPUTapTableColumnMapping",R,N,V_timeColumn
TI,R,N,V_tableID
executeStopOnItinerary:
deactivated
disableConsistentGPUPerformanceState:
stopCollectingCounters
requestDeviceGPUInfo
handleCourier:itinerary:
enableMultiSourceCounters
configureCounters:counterProfile:interval:windowLimit:tracingPID:
enableShaderProfiler
enableConsistentGPUPerformanceState:acceleratorID:
startCollectingCounters
performMainThreadSafeSetup:
flushRemainingData
yieldNow
setYieldNow:
T^AB,N
analysisCoreBulkLoadPanel
setAnalysisCoreBulkLoadPanel:
T@"<XRAnalysisCoreBulkLoadPanel>",&,N
greetingVisitor
setGreetingVisitor:
greetingTeam
setGreetingTeam:
T@"XRMobileAgent<XRMobileAgentVisitor>",&,N
T@"XRMobileAgentTeam",&,N
replyMessageReceived
setReplyMessageReceived:
T@"DTXMessage",&,N
disableConsistentGPUPerformanceState
stopRecording:
_advanceClock:
start:
_failedWithError:itinerary:
_finishRecording:
_handleGPUInfoMessage:
_handleCounterInfoMessage:acceleratorID:profile:config:ringBufferCount:sourceIndex:
_handleCounterConfiguredMessage:
_createAndWriteGPUInfo:deviceInfoDict:
_handleNewGPUMessage:timestamp:
_handleCounterValueMessage:acceleratorID:numSamples:sampleData:ringBufferIndex:sourceIndex:
_handleShaderProfilerBufferMessage:version:acceleratorID:numSamples:sampleData:ringBufferIndex:sourceIndex:
_handleMessage:
_handleRemoteServiceMessage:
_handleFinalData:
_handleStopRecording:
_columnMapping:schema:
_fillDeviceGPUInfoTableMapping:tableID:
_fillCounterInfoTableMapping:tableID:
_fillCounterValueTableMapping:tableID:
_fillDeviceDisplayInfoTableMapping:tableID:
_fillShaderProfilerSampleTableMapping:tableID:
_fillGPUPerformanceInfoTableMapping:tableID:
voteForEpoch:
flushAllRemainingData:
channel
setChannel:
_currentMessage
_counterRequest
_hasRemoteService
_epoch
_supportsShaderProfiler
_supportsGPUSelection
_supportsMultiSourceCounters
_counterProfile
_counterGPUIndexOrAcceleratorID
_tableColumnIDMapping
_gpuMapping
_dataClock
_counterProcessors
_sampleIndexes
_targetPerformanceState
_analysisCoreBulkLoadPanel
_yieldNow
_replyMessageReceived
_channel
T@"DTXChannel",&,N,V_channel
T@"<XRAnalysisCoreBulkLoadPanel>",&,N,V_analysisCoreBulkLoadPanel
T^AB,N,V_yieldNow
T@"DTXMessage",&,N,V_replyMessageReceived
_retrieveDeviceInfoForDevice:
selectSupportedTableSpecs:command:
topIssueAffectingRecordingOfTableSpecs:command:
agentForCommand:
_deviceInfoMap
XRGPUTapJavaScriptContext
XRGPUTapGPUCounterProcessor
XRGPUTapTableColumnMapping
XRGPUTapTableMapping
XRGPUTapAgent
XRAnalysisCoreBulkLoadingAgent
XRMinorFrameAgent
XRMobileAgentOwner
XRReplyReceivingAgent
XRGPUTapPlugIn
@16@0:8
v16@0:8
{basic_string<char, std::char_traits<char>, std::allocator<char>>={__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}24@0:8^{OpaqueJSString=}16
{basic_string<char, std::char_traits<char>, std::allocator<char>>={__compressed_pair<std::basic_string<char>::__rep, std::allocator<char>>={__rep=(?={__long=*QQ}{__short=[23c]{?=C}}{__raw=[3Q]})}}}24@0:8^{OpaqueJSValue=}16
B32@0:8@16@24
d32@0:8@16@24
^{OpaqueJSString=}24@0:8r*16
d24@0:8r*16
v32@0:8r*16d24
B40@0:8r*16^Q24Q32
@32@0:8@16@24
@40@0:8^Q16Q24Q32
@24@0:8@16
@?16@0:8
v24@0:8@?16
{unordered_map<std::string, OpaqueJSValue *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, OpaqueJSValue *>>>="__table_"{__hash_table<std::__hash_value_type<std::string, OpaqueJSValue *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, OpaqueJSValue *>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, OpaqueJSValue *>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, OpaqueJSValue *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSValue *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, OpaqueJSValue *>, std::hash<std::string>, std::equal_to<std::string>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, OpaqueJSValue *>, std::equal_to<std::string>, std::hash<std::string>, true>>="__value_"f}}}
{unordered_map<std::string, OpaqueJSString *, std::hash<std::string>, std::equal_to<std::string>, std::allocator<std::pair<const std::string, OpaqueJSString *>>>="__table_"{__hash_table<std::__hash_value_type<std::string, OpaqueJSString *>, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, OpaqueJSString *>, std::hash<std::string>, std::equal_to<std::string>, true>, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, OpaqueJSString *>, std::equal_to<std::string>, std::hash<std::string>, true>, std::allocator<std::__hash_value_type<std::string, OpaqueJSString *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<std::string, OpaqueJSString *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<std::string, std::__hash_value_type<std::string, OpaqueJSString *>, std::hash<std::string>, std::equal_to<std::string>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<std::string, std::__hash_value_type<std::string, OpaqueJSString *>, std::equal_to<std::string>, std::hash<std::string>, true>>="__value_"f}}}
^{OpaqueJSValue=}
@"NSString"
@"JSVirtualMachine"
@"JSContext"
B56@0:8@16@24@32Q40@48
v24@0:8@16
^d36@0:8^Q16Q24I32
Q16@0:8
v44@0:8^Q16Q24i32@?36
B16@0:8
v20@0:8B16
@"NSMutableArray"
@"XRGPUTapJavaScriptContext"
{vector<unsigned char, std::allocator<unsigned char>>="__begin_"*"__end_"*"__end_cap_"{__compressed_pair<unsigned char *, std::allocator<unsigned char>>="__value_"*}}
{vector<unsigned int, std::allocator<unsigned int>>="__begin_"^I"__end_"^I"__end_cap_"{__compressed_pair<unsigned int *, std::allocator<unsigned int>>="__value_"^I}}
{vector<double, std::allocator<double>>="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::allocator<double>>="__value_"^d}}
{vector<unsigned long long, std::allocator<unsigned long long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long long *, std::allocator<unsigned long long>>="__value_"^Q}}
@"NSDictionary"
@32@0:8@16Q24
B32@0:8r^{XRAnalysisCoreWriteCursor=}16@24
B36@0:8r^{XRAnalysisCoreWriteCursor=}16^v24I32
@36@0:8I16@20@28
v32@0:8r^{XRAnalysisCoreWriteCursor=}16@24
v32@0:8r^{XRAnalysisCoreWriteCursor=}16^Q24
I16@0:8
@"NSArray"
@"XRGPUTapTableColumnMapping"
^AB16@0:8
v24@0:8^AB16
@"<XRAnalysisCoreBulkLoadPanel>"16@0:8
v24@0:8@"<XRAnalysisCoreBulkLoadPanel>"16
@"XRMobileAgent<XRMobileAgentVisitor>"16@0:8
v24@0:8@"XRMobileAgent<XRMobileAgentVisitor>"16
@"XRMobileAgentTeam"16@0:8
v24@0:8@"XRMobileAgentTeam"16
@"DTXMessage"16@0:8
v24@0:8@"DTXMessage"16
v24@0:8Q16
v32@0:8@16@24
B56@0:8Q16Q24Q32@40I48I52
B24@0:8Q16
@32@0:8r^{XRAnalysisCoreTableBindings=}16@24
B32@0:8@16Q24
B56@0:8Q16Q24Q32^Q40I48I52
B64@0:8Q16Q24Q32Q40^Q48I56I60
B24@0:8@16
v28@0:8@16I24
@"DTXMessage"
@"NSMutableDictionary"
[5[16Q]]
@"<XRAnalysisCoreBulkLoadPanel>"
@"DTXChannel"
