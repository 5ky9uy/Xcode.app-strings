max($module, fragment, width, /)
Return the maximum of the absolute value of all samples in a fragment.
minmax($module, fragment, width, /)
Return the minimum and maximum values of all samples in the sound fragment.
avg($module, fragment, width, /)
Return the average over all samples in the fragment.
maxpp($module, fragment, width, /)
Return the maximum peak-peak value in the sound fragment.
avgpp($module, fragment, width, /)
Return the average peak-peak value over all samples in the fragment.
rms($module, fragment, width, /)
Return the root-mean-square of the fragment, i.e. sqrt(sum(S_i^2)/n).
findfit($module, fragment, reference, /)
Try to match reference as well as possible to a portion of fragment.
findmax($module, fragment, length, /)
Search fragment for a slice of specified number of samples with maximum energy.
findfactor($module, fragment, reference, /)
Return a factor F such that rms(add(fragment, mul(reference, -F))) is minimal.
cross($module, fragment, width, /)
Return the number of zero crossings in the fragment passed as an argument.
mul($module, fragment, width, factor, /)
Return a fragment that has all samples in the original fragment multiplied by the floating-point value factor.
add($module, fragment1, fragment2, width, /)
Return a fragment which is the addition of the two samples passed as parameters.
bias($module, fragment, width, bias, /)
Return a fragment that is the original fragment with a bias added to each sample.
ulaw2lin($module, fragment, width, /)
Convert sound fragments in u-LAW encoding to linearly encoded sound fragments.
lin2ulaw($module, fragment, width, /)
Convert samples in the audio fragment to u-LAW encoding.
alaw2lin($module, fragment, width, /)
Convert sound fragments in a-LAW encoding to linearly encoded sound fragments.
lin2alaw($module, fragment, width, /)
Convert samples in the audio fragment to a-LAW encoding.
lin2lin($module, fragment, width, newwidth, /)
Convert samples between 1-, 2-, 3- and 4-byte formats.
adpcm2lin($module, fragment, width, state, /)
Decode an Intel/DVI ADPCM coded fragment to a linear fragment.
lin2adpcm($module, fragment, width, state, /)
Convert samples to 4 bit Intel/DVI ADPCM encoding.
tomono($module, fragment, width, lfactor, rfactor, /)
Convert a stereo fragment to a mono fragment.
tostereo($module, fragment, width, lfactor, rfactor, /)
Generate a stereo fragment from a mono fragment.
getsample($module, fragment, width, index, /)
Return the value of sample index from the fragment.
reverse($module, fragment, width, /)
Reverse the samples in a fragment and returns the modified fragment.
byteswap($module, fragment, width, /)
Convert big-endian samples to little-endian and vice versa.
ratecv($module, fragment, width, nchannels, inrate, outrate, state,
       weightA=1, weightB=0, /)
Convert the frame rate of the input fragment.
|}|y|u|q|m|i|e|a|]|Y|U|Q|M|I|E|A|>|<|:|8|6|4|2|0|.|,|*|(|&|$|"| 
audioop.error
error
audioop
minmax
maxpp
avgpp
findfit
findmax
findfactor
cross
bias
ulaw2lin
lin2ulaw
alaw2lin
lin2alaw
lin2lin
adpcm2lin
lin2adpcm
tomono
tostereo
getsample
reverse
byteswap
ratecv
argument 1
contiguous buffer
integer argument expected, got float
not a whole number of frames
Size should be 1, 2, 3 or 4
(ii)
argument 2
Strings should be even-sized
First sample should be longer
(nf)
Input sample should be longer
Samples should be same size
Lengths should be the same
not enough memory for output buffer
state must be a tuple or None
ii;adpcm2lin(): illegal state argument
bad state
(O(ii))
ii;lin2adpcm(): illegal state argument
Index out of range
# of channels should be >= 1
width * nchannels too big for a C int
weightA should be >= 1, weightB should be >= 0
sampling rate not > 0
iO!;ratecv(): illegal state argument
illegal state argument
ratecv(): illegal state argument
ii;ratecv(): illegal state argument
(O(iO))
