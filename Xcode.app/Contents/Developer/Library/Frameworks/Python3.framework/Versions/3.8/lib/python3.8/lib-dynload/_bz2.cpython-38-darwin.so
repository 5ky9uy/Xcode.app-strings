BZ2Compressor
BZ2Decompressor
_bz2.BZ2Compressor
compress
flush
argument
contiguous buffer
Compressor has been flushed
Unable to allocate buffer - output too large
libbzip2 was not compiled correctly
Internal error - invalid parameters passed to libbzip2
Invalid data stream
Unknown I/O error
Compressed file ended before the logical end-of-stream was detected
Internal error - Invalid sequence of commands sent to libbzip2
Unrecognized error from libbzip2: %d
Repeated call to flush()
integer argument expected, got float
compresslevel must be between 1 and 9
Unable to allocate lock
_bz2.BZ2Decompressor
decompress
data
max_length
argument 'data'
End of stream already reached
unused_data
needs_input
_bz2
BZ2Compressor(compresslevel=9, /)
Create a compressor object for compressing data incrementally.
  compresslevel
    Compression level, as a number between 1 and 9.
For one-shot compression, use the compress() function instead.
compress($self, data, /)
Provide data to the compressor object.
Returns a chunk of compressed data if possible, or b'' otherwise.
When you have finished providing data to the compressor, call the
flush() method to finish the compression process.
flush($self, /)
Finish the compression process.
Returns the compressed data left in internal buffers.
The compressor object may not be used after this method is called.
BZ2Decompressor()
Create a decompressor object for decompressing data incrementally.
For one-shot decompression, use the decompress() function instead.
decompress($self, /, data, max_length=-1)
Decompress *data*, returning uncompressed data as bytes.
If *max_length* is nonnegative, returns at most *max_length* bytes of
decompressed data. If this limit is reached and further output can be
produced, *self.needs_input* will be set to ``False``. In this case, the next
call to *decompress()* may provide *data* as b'' to obtain more of the output.
If all of the input data was decompressed and returned (either because this
was less than *max_length* bytes, or because *max_length* was negative),
*self.needs_input* will be set to True.
Attempting to decompress data after the end of stream is reached raises an
EOFError.  Any data found after the end of the stream is ignored and saved in
the unused_data attribute.
True if the end-of-stream marker has been reached.
Data found after the end of the compressed stream.
True if more input is needed before more decompressed data can be produced.
