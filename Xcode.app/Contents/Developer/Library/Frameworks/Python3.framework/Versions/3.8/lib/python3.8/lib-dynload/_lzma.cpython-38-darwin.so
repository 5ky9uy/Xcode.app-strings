!is_check_supported($module, check_id, /)
Test whether the given integrity check is supported.
Always returns True for CHECK_NONE and CHECK_CRC32.
_encode_filter_properties($module, filter, /)
Return a bytes object encoding the options (properties) of the filter specified by *filter* (a dict).
The result does not include the filter ID itself, only the options.
_decode_filter_properties($module, filter_id, encoded_props, /)
Return a bytes object encoding the options (properties) of the filter specified by *filter* (a dict).
The result does not include the filter ID itself, only the options.
LZMACompressor(format=FORMAT_XZ, check=-1, preset=None, filters=None)
Create a compressor object for compressing data incrementally.
format specifies the container format to use for the output. This can
be FORMAT_XZ (default), FORMAT_ALONE, or FORMAT_RAW.
check specifies the integrity check to use. For FORMAT_XZ, the default
is CHECK_CRC64. FORMAT_ALONE and FORMAT_RAW do not support integrity
checks; for these formats, check must be omitted, or be CHECK_NONE.
The settings used by the compressor can be specified either as a
preset compression level (with the 'preset' argument), or in detail
as a custom filter chain (with the 'filters' argument). For FORMAT_XZ
and FORMAT_ALONE, the default is to use the PRESET_DEFAULT preset
level. For FORMAT_RAW, the caller must always specify a filter chain;
the raw compressor does not support preset compression levels.
preset (if provided) should be an integer in the range 0-9, optionally
OR-ed with the constant PRESET_EXTREME.
filters (if provided) should be a sequence of dicts. Each dict should
have an entry for "id" indicating the ID of the filter, plus
additional entries for options to the filter.
For one-shot compression, use the compress() function instead.
compress($self, data, /)
Provide data to the compressor object.
Returns a chunk of compressed data if possible, or b'' otherwise.
When you have finished providing data to the compressor, call the
flush() method to finish the compression process.
flush($self, /)
Finish the compression process.
Returns the compressed data left in internal buffers.
The compressor object may not be used after this method is called.
LZMADecompressor(format=FORMAT_AUTO, memlimit=None, filters=None)
Create a decompressor object for decompressing data incrementally.
  format
    Specifies the container format of the input stream.  If this is
    FORMAT_AUTO (the default), the decompressor will automatically detect
    whether the input is FORMAT_XZ or FORMAT_ALONE.  Streams created with
    FORMAT_RAW cannot be autodetected.
  memlimit
    Limit the amount of memory used by the decompressor.  This will cause
    decompression to fail if the input cannot be decompressed within the
    given limit.
  filters
    A custom filter chain.  This argument is required for FORMAT_RAW, and
    not accepted with any other format.  When provided, this should be a
    sequence of dicts, each indicating the ID and options for a single
    filter.
For one-shot decompression, use the decompress() function instead.
decompress($self, /, data, max_length=-1)
Decompress *data*, returning uncompressed data as bytes.
If *max_length* is nonnegative, returns at most *max_length* bytes of
decompressed data. If this limit is reached and further output can be
produced, *self.needs_input* will be set to ``False``. In this case, the next
call to *decompress()* may provide *data* as b'' to obtain more of the output.
If all of the input data was decompressed and returned (either because this
was less than *max_length* bytes, or because *max_length* was negative),
*self.needs_input* will be set to True.
Attempting to decompress data after the end of stream is reached raises an
EOFError.  Any data found after the end of the stream is ignored and saved in
the unused_data attribute.
ID of the integrity check used by the input stream.
True if the end-of-stream marker has been reached.
True if more input is needed before more decompressed data can be produced.
Data found after the end of the compressed stream.
FORMAT_AUTO
FORMAT_XZ
FORMAT_ALONE
FORMAT_RAW
CHECK_NONE
CHECK_CRC32
CHECK_CRC64
CHECK_SHA256
CHECK_ID_MAX
CHECK_UNKNOWN
FILTER_LZMA1
FILTER_LZMA2
FILTER_DELTA
FILTER_X86
FILTER_IA64
FILTER_ARM
FILTER_ARMTHUMB
FILTER_SPARC
FILTER_POWERPC
MF_HC3
MF_HC4
MF_BT2
MF_BT3
MF_BT4
MODE_FAST
MODE_NORMAL
PRESET_DEFAULT
PRESET_EXTREME
_lzma.LZMAError
Call to liblzma failed.
LZMAError
LZMACompressor
LZMADecompressor
_lzma
is_check_supported
_encode_filter_properties
_decode_filter_properties
integer argument expected, got float
Filter specifier must be a dict or dict-like object
Filter specifier must have an "id" entry
Invalid filter ID: %llu
preset
dict_size
mode
nice_len
depth
Invalid compression preset: %u
|OOO&O&O&O&O&O&O&O&
Invalid filter specifier for LZMA filter
Value too large for uint32_t type
Value too large for lzma_mode type
Value too large for lzma_match_finder type
dist
|OO&
Invalid filter specifier for delta filter
start_offset
Invalid filter specifier for BCJ filter
Unsupported integrity check
Memory usage limit exceeded
Input format not supported by decoder
Invalid or unsupported options
Corrupt input data
Insufficient buffer space
Internal error
Unrecognized error from liblzma: %d
argument 2
contiguous buffer
_lzma.LZMACompressor
compress
flush
argument
Compressor has been flushed
Repeated call to flush()
format
check
filters
|iiOO:LZMACompressor
Integrity checks are only supported by FORMAT_XZ
Cannot specify both preset and filter chain
Unable to allocate lock
Invalid container format: %d
Too many filters - liblzma supports a maximum of %d
Invalid filter chain for FORMAT_ALONE - must be a single LZMA1 filter
Must specify filters for FORMAT_RAW
_lzma.LZMADecompressor
decompress
data
max_length
argument 'data'
Already at end of stream
needs_input
unused_data
memlimit
Cannot specify memory limit with FORMAT_RAW
Cannot specify filters except with FORMAT_RAW
