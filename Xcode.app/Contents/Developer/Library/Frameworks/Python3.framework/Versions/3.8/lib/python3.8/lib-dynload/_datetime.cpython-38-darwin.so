date(year, month, day) --> date object
fromtimestamp($type, timestamp, /)
Create a date from a POSIX timestamp.
The timestamp is a number, e.g. created via time.time(), that is interpreted
as local time.
datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
The year, month and day arguments are required. tzinfo may be None, or an
instance of a tzinfo subclass. The remaining arguments may be ints.
now($type, /, tz=None)
Returns new datetime object representing current time local to tz.
  tz
    Timezone object.
If no tz is specified, uses local timezone.
Difference between two datetime values.
timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)
All arguments are optional and default to 0.
Arguments may be integers or floats, and may be positive or negative.
time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object
All arguments are optional. tzinfo may be None, or an instance of
a tzinfo subclass. The remaining arguments may be ints.
Abstract base class for time zone info objects.
Fixed offset from UTC implementation of tzinfo.
resolution
MINYEAR
MAXYEAR
date
datetime
time
timedelta
tzinfo
timezone
datetime.datetime_CAPI
datetime_CAPI
_datetime
Fast implementation of the datetime type.
datetime.date
%s(%d, %d, %d)
date value out of range
isoformat
Unreachable C code path reached
fromtimestamp
fromordinal
int -> date corresponding to a proleptic Gregorian ordinal.
fromisoformat
str -> Construct a date from the output of date.isoformat()
fromisocalendar
int, int, int -> Construct a date from the ISO year, week number and weekday.
This is the inverse of the date.isocalendar() function
today
Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).
ctime
Return ctime() style string.
strftime
format -> strftime() style string.
__format__
Formats self with strftime.
timetuple
Return time tuple, compatible with time.localtime().
isocalendar
Return a 3-tuple containing ISO year, week number, and weekday.
Return string in ISO 8601 format, YYYY-MM-DD.
isoweekday
Return the day of the week represented by the date.
Monday == 1 ... Sunday == 7
toordinal
Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.
weekday
Return the day of the week represented by the date.
Monday == 0 ... Sunday == 6
replace
Return date with new specified fields.
__reduce__
__reduce__() -> (cls, state)
i:fromordinal
ordinal must be >= 1
fromisoformat: argument must be str
Invalid isoformat string: %R
year
week
iii:fromisocalendar
ISO calendar component out of range
Year is out of range: %d
Invalid week: %d
Invalid day: %d (range is [1, 7])
%s %s %2d %02d:%02d:%02d %04d
format
U:strftime
%c%02d%s%02d%s%02d.%06d
%c%02d%s%02d%s%02d
%c%02d%s%02d
utcoffset
offset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24).
tzinfo.%s() must return None or timedelta, not '%.200s'
tzname.replace() did not return a string
tzname
tzinfo.tzname() must return None or a string, not '%s'
%06d
U:__format__
struct_time
iiiiiiiii
%04d-%02d-%02d
|iii:replace
month
(ON)
Failed to encode latin1 string when unpickling a date object. pickle.load(data, encoding='latin1') is assumed.
datetime.datetime
%s(%d, %d, %d, %d, %d, %d, %d)
%s(%d, %d, %d, %d, %d, %d)
%s(%d, %d, %d, %d, %d)
%U, fold=%d)
%U, tzinfo=%R)
iiiiiiiO
can't subtract offset-naive and offset-aware datetimes
can't compare offset-naive and offset-aware datetimes
can't compare %s to %s
utcnow
Return a new datetime representing UTC day and time.
timestamp[, tz] -> tz's local time from POSIX timestamp.
utcfromtimestamp
Construct a naive UTC datetime from a POSIX timestamp.
strptime
string, format -> new datetime parsed from a string (like time.strptime()).
combine
date, time -> datetime with same date and time fields
string -> datetime from datetime.isoformat() output
Return date object with same year, month and day.
Return time object with same time but with tzinfo=None.
timetz
Return time object with same time and tzinfo.
timestamp
Return POSIX timestamp as float.
utctimetuple
Return UTC time tuple, compatible with time.localtime().
[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].
sep is used to separate the year from the time, and defaults to 'T'.
The optional argument timespec specifies the number of additional terms
of the time to include. Valid options are 'auto', 'hours', 'minutes',
'seconds', 'milliseconds' and 'microseconds'.
Return self.tzinfo.utcoffset(self).
Return self.tzinfo.tzname(self).
Return self.tzinfo.dst(self).
Return datetime with new specified fields.
astimezone
tz -> convert to local time in new timezone tz
__reduce_ex__
__reduce_ex__(proto) -> (cls, state)
tzinfo argument must be None or of a tzinfo subclass, not type '%s'
year %i is out of range
fromutc
O|O:fromtimestamp
O:utcfromtimestamp
_strptime_datetime
UU:strptime
_strptime
O!O!|O:combine
offset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24), not %R.
timespec
hours
%04d-%02d-%02d%c%02d
minutes
%04d-%02d-%02d%c%02d:%02d
seconds
%04d-%02d-%02d%c%02d:%02d:%02d
milliseconds
%04d-%02d-%02d%c%02d:%02d:%02d.%03d
microseconds
%04d-%02d-%02d%c%02d:%02d:%02d.%06d
|Cs:isoformat
auto
Unknown timespec value
|iiiiiiiO$i:replace
fold must be either 0 or 1
hour
minute
second
microsecond
fold
|O:astimezone
utcoffset() returned %.200s, expected timedelta or None
surrogateescape
i:__reduce_ex__
Failed to encode latin1 string when unpickling a datetime object. pickle.load(data, encoding='latin1') is assumed.
iii|iiiiO$i
bad tzinfo state arg
datetime.timedelta
days=%d
%U%sseconds=%d
%U%smicroseconds=%d
%s(%S)
divmod() returned a value out of range
divmod() returned non-tuple (type %.200s)
divmod() returned a tuple of size %zd
unexpected return type from as_integer_ratio(): expected tuple, got '%.200s'
as_integer_ratio() must return a 2-tuple
as_integer_ratio
%d day%s, %d:%02d:%02d.%06d
%d day%s, %d:%02d:%02d
%d:%02d:%02d.%06d
%d:%02d:%02d
total_seconds
Total seconds in the duration.
days
Number of days.
Number of seconds (>= 0 and less than 1 day).
Number of microseconds (>= 0 and less than 1 second).
weeks
|OOOOOOO:__new__
unsupported type for timedelta %s component: %s
datetime.time
%s(%d, %d, %d, %d)
%s(%d, %d)
can't compare offset-naive and offset-aware times
Return string in ISO 8601 format, [HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].
The optional argument timespec specifies the number of additional terms
of the time to include. Valid options are 'auto', 'hours', 'minutes',
'seconds', 'milliseconds' and 'microseconds'.
Return time with new specified fields.
string -> time from time.isoformat() output
%02d
%02d:%02d
%02d:%02d:%02d
%02d:%02d:%02d.%03d
%02d:%02d:%02d.%06d
|s:isoformat
|iiiiO$i:replace
iiiiO
Failed to encode latin1 string when unpickling a time object. pickle.load(data, encoding='latin1') is assumed.
|iiiiO$i
datetime.tzinfo
datetime -> string name of time zone.
datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
datetime -> DST offset as timedelta positive east of UTC.
datetime in UTC -> datetime in local time.
-> (cls, state)
a tzinfo subclass must implement %s()
fromutc: argument must be a datetime
fromutc: dt.tzinfo is not self
fromutc: non-None utcoffset() result required
fromutc: non-None dst() result required
fromutc: tz.dst() gave inconsistent results; cannot convert
__getinitargs__
__getstate__
(ONN)
datetime.timezone
%s.utc
%s(%R)
%s(%R, %R)
UTC%c%02d:%02d:%02d.%06d
UTC%c%02d:%02d:%02d
UTC%c%02d:%02d
If name is specified when timezone is created, returns the name.  Otherwise returns offset as 'UTC(+|-)HH:MM'.
Return fixed offset.
Return None.
pickle support
%s(dt) argument must be a datetime instance or None, not %.200s
(OO)
O!|U:timezone
offset
name
days=%d; must have magnitude <= %d
month must be in 1..12
day is out of range for month
hour must be in 0..23
minute must be in 0..59
second must be in 0..59
microsecond must be in 0..999999
;BGNU
7>CJQ
7>CJQ
date(year, month, day) --> date object
fromtimestamp($type, timestamp, /)
Create a date from a POSIX timestamp.
The timestamp is a number, e.g. created via time.time(), that is interpreted
as local time.
datetime(year, month, day[, hour[, minute[, second[, microsecond[,tzinfo]]]]])
The year, month and day arguments are required. tzinfo may be None, or an
instance of a tzinfo subclass. The remaining arguments may be ints.
now($type, /, tz=None)
Returns new datetime object representing current time local to tz.
  tz
    Timezone object.
If no tz is specified, uses local timezone.
Difference between two datetime values.
timedelta(days=0, seconds=0, microseconds=0, milliseconds=0, minutes=0, hours=0, weeks=0)
All arguments are optional and default to 0.
Arguments may be integers or floats, and may be positive or negative.
time([hour[, minute[, second[, microsecond[, tzinfo]]]]]) --> a time object
All arguments are optional. tzinfo may be None, or an instance of
a tzinfo subclass. The remaining arguments may be ints.
Abstract base class for time zone info objects.
Fixed offset from UTC implementation of tzinfo.
resolution
MINYEAR
MAXYEAR
date
datetime
time
timedelta
tzinfo
timezone
datetime.datetime_CAPI
datetime_CAPI
_datetime
Fast implementation of the datetime type.
datetime.date
%s(%d, %d, %d)
date value out of range
isoformat
Unreachable C code path reached
fromtimestamp
fromordinal
int -> date corresponding to a proleptic Gregorian ordinal.
fromisoformat
str -> Construct a date from the output of date.isoformat()
fromisocalendar
int, int, int -> Construct a date from the ISO year, week number and weekday.
This is the inverse of the date.isocalendar() function
today
Current date or datetime:  same as self.__class__.fromtimestamp(time.time()).
ctime
Return ctime() style string.
strftime
format -> strftime() style string.
__format__
Formats self with strftime.
timetuple
Return time tuple, compatible with time.localtime().
isocalendar
Return a 3-tuple containing ISO year, week number, and weekday.
Return string in ISO 8601 format, YYYY-MM-DD.
isoweekday
Return the day of the week represented by the date.
Monday == 1 ... Sunday == 7
toordinal
Return proleptic Gregorian ordinal.  January 1 of year 1 is day 1.
weekday
Return the day of the week represented by the date.
Monday == 0 ... Sunday == 6
replace
Return date with new specified fields.
__reduce__
__reduce__() -> (cls, state)
i:fromordinal
ordinal must be >= 1
fromisoformat: argument must be str
Invalid isoformat string: %R
year
week
iii:fromisocalendar
ISO calendar component out of range
Year is out of range: %d
Invalid week: %d
Invalid day: %d (range is [1, 7])
%s %s %2d %02d:%02d:%02d %04d
format
U:strftime
%c%02d%s%02d%s%02d.%06d
%c%02d%s%02d%s%02d
%c%02d%s%02d
utcoffset
offset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24).
tzinfo.%s() must return None or timedelta, not '%.200s'
tzname.replace() did not return a string
tzname
tzinfo.tzname() must return None or a string, not '%s'
%06d
U:__format__
struct_time
iiiiiiiii
%04d-%02d-%02d
|iii:replace
month
(ON)
Failed to encode latin1 string when unpickling a date object. pickle.load(data, encoding='latin1') is assumed.
datetime.datetime
%s(%d, %d, %d, %d, %d, %d, %d)
%s(%d, %d, %d, %d, %d, %d)
%s(%d, %d, %d, %d, %d)
%U, fold=%d)
%U, tzinfo=%R)
iiiiiiiO
can't subtract offset-naive and offset-aware datetimes
can't compare offset-naive and offset-aware datetimes
can't compare %s to %s
utcnow
Return a new datetime representing UTC day and time.
timestamp[, tz] -> tz's local time from POSIX timestamp.
utcfromtimestamp
Construct a naive UTC datetime from a POSIX timestamp.
strptime
string, format -> new datetime parsed from a string (like time.strptime()).
combine
date, time -> datetime with same date and time fields
string -> datetime from datetime.isoformat() output
Return date object with same year, month and day.
Return time object with same time but with tzinfo=None.
timetz
Return time object with same time and tzinfo.
timestamp
Return POSIX timestamp as float.
utctimetuple
Return UTC time tuple, compatible with time.localtime().
[sep] -> string in ISO 8601 format, YYYY-MM-DDT[HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].
sep is used to separate the year from the time, and defaults to 'T'.
The optional argument timespec specifies the number of additional terms
of the time to include. Valid options are 'auto', 'hours', 'minutes',
'seconds', 'milliseconds' and 'microseconds'.
Return self.tzinfo.utcoffset(self).
Return self.tzinfo.tzname(self).
Return self.tzinfo.dst(self).
Return datetime with new specified fields.
astimezone
tz -> convert to local time in new timezone tz
__reduce_ex__
__reduce_ex__(proto) -> (cls, state)
tzinfo argument must be None or of a tzinfo subclass, not type '%s'
year %i is out of range
fromutc
O|O:fromtimestamp
O:utcfromtimestamp
_strptime_datetime
UU:strptime
_strptime
O!O!|O:combine
offset must be a timedelta strictly between -timedelta(hours=24) and timedelta(hours=24), not %R.
timespec
hours
%04d-%02d-%02d%c%02d
minutes
%04d-%02d-%02d%c%02d:%02d
seconds
%04d-%02d-%02d%c%02d:%02d:%02d
milliseconds
%04d-%02d-%02d%c%02d:%02d:%02d.%03d
microseconds
%04d-%02d-%02d%c%02d:%02d:%02d.%06d
|Cs:isoformat
auto
Unknown timespec value
|iiiiiiiO$i:replace
fold must be either 0 or 1
hour
minute
second
microsecond
fold
|O:astimezone
utcoffset() returned %.200s, expected timedelta or None
surrogateescape
i:__reduce_ex__
Failed to encode latin1 string when unpickling a datetime object. pickle.load(data, encoding='latin1') is assumed.
iii|iiiiO$i
bad tzinfo state arg
datetime.timedelta
days=%d
%U%sseconds=%d
%U%smicroseconds=%d
%s(%S)
divmod() returned a value out of range
divmod() returned non-tuple (type %.200s)
divmod() returned a tuple of size %zd
unexpected return type from as_integer_ratio(): expected tuple, got '%.200s'
as_integer_ratio() must return a 2-tuple
as_integer_ratio
%d day%s, %d:%02d:%02d.%06d
%d day%s, %d:%02d:%02d
%d:%02d:%02d.%06d
%d:%02d:%02d
total_seconds
Total seconds in the duration.
days
Number of days.
Number of seconds (>= 0 and less than 1 day).
Number of microseconds (>= 0 and less than 1 second).
weeks
|OOOOOOO:__new__
unsupported type for timedelta %s component: %s
datetime.time
%s(%d, %d, %d, %d)
%s(%d, %d)
can't compare offset-naive and offset-aware times
Return string in ISO 8601 format, [HH[:MM[:SS[.mmm[uuu]]]]][+HH:MM].
The optional argument timespec specifies the number of additional terms
of the time to include. Valid options are 'auto', 'hours', 'minutes',
'seconds', 'milliseconds' and 'microseconds'.
Return time with new specified fields.
string -> time from time.isoformat() output
%02d
%02d:%02d
%02d:%02d:%02d
%02d:%02d:%02d.%03d
%02d:%02d:%02d.%06d
|s:isoformat
|iiiiO$i:replace
iiiiO
Failed to encode latin1 string when unpickling a time object. pickle.load(data, encoding='latin1') is assumed.
|iiiiO$i
datetime.tzinfo
datetime -> string name of time zone.
datetime -> timedelta showing offset from UTC, negative values indicating West of UTC
datetime -> DST offset as timedelta positive east of UTC.
datetime in UTC -> datetime in local time.
-> (cls, state)
a tzinfo subclass must implement %s()
fromutc: argument must be a datetime
fromutc: dt.tzinfo is not self
fromutc: non-None utcoffset() result required
fromutc: non-None dst() result required
fromutc: tz.dst() gave inconsistent results; cannot convert
__getinitargs__
__getstate__
(ONN)
datetime.timezone
%s.utc
%s(%R)
%s(%R, %R)
UTC%c%02d:%02d:%02d.%06d
UTC%c%02d:%02d:%02d
UTC%c%02d:%02d
If name is specified when timezone is created, returns the name.  Otherwise returns offset as 'UTC(+|-)HH:MM'.
Return fixed offset.
Return None.
pickle support
%s(dt) argument must be a datetime instance or None, not %.200s
(OO)
O!|U:timezone
offset
name
days=%d; must have magnitude <= %d
month must be in 1..12
day is out of range for month
hour must be in 0..23
minute must be in 0..59
second must be in 0..59
microsecond must be in 0..999999
