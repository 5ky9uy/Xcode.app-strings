ChannelID
InterpreterID
can't initialize mutex for channel management
_xxsubinterpreters.ChannelID
%s(%lld, send=True)
%s(%lld, recv=True)
%s(%lld)
%lld
'send', 'recv', or 'both'
send
the 'send' end of the channel
recv
the 'recv' end of the channel
both
channel %lld not found
_xxsubinterpreters
create
destroy
list_all
get_current
get_main
is_running
run_string
is_shareable
channel_create
channel_destroy
channel_list_all
channel_send
channel_recv
channel_close
channel_release
_channel_id
interpreter creation failed
O:destroy
cannot destroy the current interpreter
interpreter already running
interpreter has more than one thread
O:is_running
script
shared
OU|O:run_string
source code string cannot contain null bytes
RunFailedError: script raised an uncaught exception
unable to format exception type name
out of memory copying exception type name
unable to encode and copy exception type name
unable to format exception message
out of memory copying exception message
unable to encode and copy exception message
%s: %s
O:is_shareable
can't initialize mutex for new channel
failed to get a channel ID
O&:channel_destroy
channel ID must be a non-negative int, got %R
channel ID must be an int, got %.100s
too many channels open
O&O:channel_send
channel %lld closed
channel closed
channel already closed
O&:channel_recv
channel %lld is empty
force
O&|$ppp:channel_close
may not be closed if not empty (try force=True)
O&|$ppp:channel_release
_resolve
O&|$pppp:ChannelID.__new__
'send' and 'recv' cannot both be False
_xxsubinterpreters.RunFailedError
RunFailedError
_xxsubinterpreters.ChannelError
ChannelError
_xxsubinterpreters.ChannelNotFoundError
ChannelNotFoundError
_xxsubinterpreters.ChannelClosedError
ChannelClosedError
_xxsubinterpreters.ChannelEmptyError
ChannelEmptyError
_xxsubinterpreters.ChannelNotEmptyError
ChannelNotEmptyError
interpreters
test.support.interpreters
RecvChannel
SendChannel
A channel ID identifies a channel and may be used as an int.
This module provides primitive operations to manage Python interpreters.
The 'interpreters' module provides a more convenient interface.
create() -> ID
Create a new interpreter and return a unique generated ID.
destroy(id)
Destroy the identified interpreter.
Attempting to destroy the current interpreter results in a RuntimeError.
So does an unrecognized ID.
list_all() -> [ID]
Return a list containing the ID of every existing interpreter.
get_current() -> ID
Return the ID of current interpreter.
get_main() -> ID
Return the ID of main interpreter.
is_running(id) -> bool
Return whether or not the identified interpreter is running.
run_string(id, script, shared)
Execute the provided string in the identified interpreter.
See PyRun_SimpleStrings.
is_shareable(obj) -> bool
Return True if the object's data may be shared between interpreters and
False otherwise.
channel_create() -> cid
Create a new cross-interpreter channel and return a unique generated ID.
channel_destroy(cid)
Close and finalize the channel.  Afterward attempts to use the channel
will behave as though it never existed.
channel_list_all() -> [cid]
Return the list of all IDs for active channels.
channel_send(cid, obj)
Add the object's data to the channel's queue.
channel_recv(cid) -> obj
Return a new object from the data at the from of the channel's queue.
channel_close(cid, *, send=None, recv=None, force=False)
Close the channel for all interpreters.
If the channel is empty then the keyword args are ignored and both
ends are immediately closed.  Otherwise, if 'force' is True then
all queued items are released and both ends are immediately
closed.
If the channel is not empty *and* 'force' is False then following
happens:
 * recv is True (regardless of send):
   - raise ChannelNotEmptyError
 * recv is None and send is None:
   - raise ChannelNotEmptyError
 * send is True and recv is not True:
   - fully close the 'send' end
   - close the 'recv' end to interpreters not already receiving
   - fully close it once empty
Closing an already closed channel results in a ChannelClosedError.
Once the channel's ID has no more ref counts in any interpreter
the channel will be destroyed.
channel_release(cid, *, send=None, recv=None, force=True)
Close the channel for the current interpreter.  'send' and 'recv'
(bool) may be used to indicate the ends to close.  By default both
ends are closed.  Closing an already closed end is a noop.
