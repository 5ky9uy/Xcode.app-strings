zlib.error
error
MAX_WBITS
DEFLATED
DEF_MEM_LEVEL
DEF_BUF_SIZE
Z_NO_COMPRESSION
Z_BEST_SPEED
Z_BEST_COMPRESSION
Z_DEFAULT_COMPRESSION
Z_FILTERED
Z_HUFFMAN_ONLY
Z_RLE
Z_FIXED
Z_DEFAULT_STRATEGY
Z_NO_FLUSH
Z_PARTIAL_FLUSH
Z_SYNC_FLUSH
Z_FULL_FLUSH
Z_FINISH
Z_BLOCK
Z_TREES
1.2.11
ZLIB_VERSION
ZLIB_RUNTIME_VERSION
__version__
zlib.Compress
compress
flush
copy
y*:compress
while compressing data
library version mismatch
incomplete or truncated stream
inconsistent stream state
invalid input data
Error %d %s
Error %d %s: %.200s
|i:flush
while flushing
while finishing compression
Inconsistent stream state
Can't allocate memory for compression object
while copying compression object
Unable to allocate lock
zlib.Decompress
decompress
max_length
y*|O&:decompress
max_length must be non-negative
while decompressing data
zdict length does not fit in an unsigned int
while setting zdict
|O&:flush
length must be greater than zero
while finishing decompression
Can't allocate memory for decompression object
while copying decompression object
unused_data
unconsumed_tail
zlib
adler32
compressobj
crc32
decompressobj
y*|I:adler32
level
y*|i:compress
Out of memory while compressing data
Bad compression level
method
wbits
memLevel
strategy
zdict
|iiiiiy*:compressobj
Invalid dictionary
deflateSetDictionary()
Invalid initialization option
while creating compression object
y*|I:crc32
bufsize
y*|iO&:decompress
bufsize must be non-negative
Out of memory while decompressing data
while preparing to decompress data
|iO:decompressobj
zdict argument must support the buffer protocol
while creating decompression object
compress($self, data, /)
Returns a bytes object containing compressed data.
  data
    Binary data to be compressed.
After calling this function, some of the input data may still
be stored in internal buffers for later processing.
Call the flush() method to clear these buffers.
flush($self, mode=zlib.Z_FINISH, /)
Return a bytes object containing any remaining compressed data.
  mode
    One of the constants Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH.
    If mode == Z_FINISH, the compressor object can no longer be
    used after calling the flush() method.  Otherwise, more data
    can still be compressed.
copy($self, /)
Return a copy of the compression object.
decompress($self, data, /, max_length=0)
Return a bytes object containing the decompressed version of the data.
  data
    The binary data to decompress.
  max_length
    The maximum allowable length of the decompressed data.
    Unconsumed input data will be stored in
    the unconsumed_tail attribute.
After calling this function, some of the input data may still be stored in
internal buffers for later processing.
Call the flush() method to clear these buffers.
flush($self, length=zlib.DEF_BUF_SIZE, /)
Return a bytes object containing any remaining decompressed data.
  length
    the initial size of the output buffer.
copy($self, /)
Return a copy of the decompression object.
The functions in this module allow compression and decompression using the
zlib library, which is based on GNU zip.
adler32(string[, start]) -- Compute an Adler-32 checksum.
compress(data[, level]) -- Compress data, with compression level 0-9 or -1.
compressobj([level[, ...]]) -- Return a compressor object.
crc32(string[, start]) -- Compute a CRC-32 checksum.
decompress(string,[wbits],[bufsize]) -- Decompresses a compressed string.
decompressobj([wbits[, zdict]]]) -- Return a decompressor object.
'wbits' is window buffer size and container format.
Compressor objects support compress() and flush() methods; decompressor
objects support decompress() and flush().
adler32($module, data, value=1, /)
Compute an Adler-32 checksum of data.
  value
    Starting value of the checksum.
The returned checksum is an integer.
compress($module, data, /, level=Z_DEFAULT_COMPRESSION)
Returns a bytes object containing compressed data.
  data
    Binary data to be compressed.
  level
    Compression level, in 0-9 or -1.
compressobj($module, /, level=Z_DEFAULT_COMPRESSION, method=DEFLATED,
            wbits=MAX_WBITS, memLevel=DEF_MEM_LEVEL,
            strategy=Z_DEFAULT_STRATEGY, zdict=None)
Return a compressor object.
  level
    The compression level (an integer in the range 0-9 or -1; default is
    currently equivalent to 6).  Higher compression levels are slower,
    but produce smaller results.
  method
    The compression algorithm.  If given, this must be DEFLATED.
  wbits
    +9 to +15: The base-two logarithm of the window size.  Include a zlib
        container.
    -9 to -15: Generate a raw stream.
    +25 to +31: Include a gzip container.
  memLevel
    Controls the amount of memory used for internal compression state.
    Valid values range from 1 to 9.  Higher values result in higher memory
    usage, faster compression, and smaller output.
  strategy
    Used to tune the compression algorithm.  Possible values are
    Z_DEFAULT_STRATEGY, Z_FILTERED, and Z_HUFFMAN_ONLY.
  zdict
    The predefined compression dictionary - a sequence of bytes
    containing subsequences that are likely to occur in the input data.
crc32($module, data, value=0, /)
Compute a CRC-32 checksum of data.
  value
    Starting value of the checksum.
The returned checksum is an integer.
decompress($module, data, /, wbits=MAX_WBITS, bufsize=DEF_BUF_SIZE)
Returns a bytes object containing the uncompressed data.
  data
    Compressed data.
  wbits
    The window buffer size and container format.
  bufsize
    The initial output buffer size.
decompressobj($module, /, wbits=MAX_WBITS, zdict=b'')
Return a decompressor object.
  wbits
    The window buffer size and container format.
  zdict
    The predefined compression dictionary.  This must be the same
    dictionary as used by the compressor that produced the input data.
