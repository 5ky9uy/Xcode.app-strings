openssl_md_meth_names
HASH
sha1
sha224
sha256
sha384
sha512
_hashlib.HASH
<%U HASH object @ %p>
update
digest
hexdigest
copy
O:update
Unicode-objects must be encoded before hashing
object supporting the buffer API required
Buffer must be single dimension
unknown reasons
[%s: %s] %s
[%s] %s
name
algorithm name.
digest_size
block_size
_hashlib
pbkdf2_hmac
hmac_digest
openssl_md5
Returns a md5 hash object; optionally initialized with a string
openssl_sha1
Returns a sha1 hash object; optionally initialized with a string
openssl_sha224
Returns a sha224 hash object; optionally initialized with a string
openssl_sha256
Returns a sha256 hash object; optionally initialized with a string
openssl_sha384
Returns a sha384 hash object; optionally initialized with a string
openssl_sha512
Returns a sha512 hash object; optionally initialized with a string
string
O|O:new
name must be a string
unsupported hash type
hash_name
password
salt
iterations
dklen
sy*y*l|O:pbkdf2_hmac
password is too long.
salt is too long.
iteration value must be greater than 0.
iteration value is too great.
key length must be greater than 0.
key length is too great.
y*y*s:hmac_digest
key is too long.
msg is too long.
|O:md5
|O:sha1
|O:sha224
|O:sha256
|O:sha384
|O:sha512
A hash represents the object used to calculate a checksum of a
string of information.
Methods:
update() -- updates the current digest with an additional string
digest() -- return the current digest value
hexdigest() -- return the current digest as a string of hexadecimal digits
copy() -- return a copy of the current hash object
Attributes:
name -- the hash algorithm being used by this object
digest_size -- number of bytes in this hashes output
Update this hash object's state with the provided string.
Return the digest value as a bytes object.
Return the digest value as a string of hexadecimal digits.
Return a copy of the hash object.
Return a new hash object using the named algorithm.
An optional string argument may be provided and will be
automatically hashed.
The MD5 and SHA1 algorithms are always supported.
pbkdf2_hmac(hash_name, password, salt, iterations, dklen=None) -> key
Password based key derivation function 2 (PKCS #5 v2.0) with HMAC as
pseudorandom function.
hmac_digest($module, /, key, msg, digest)
Single-shot HMAC.
