????????????????                ````````````````
Conversion between binary data and ASCII
a2b_uu($module, data, /)
Decode a line of uuencoded data.
b2a_uu($module, data, /, *, backtick=False)
Uuencode line of data.
a2b_base64($module, data, /)
Decode a line of base64 data.
b2a_base64($module, data, /, *, newline=True)
Base64-code line of data.
a2b_hqx($module, data, /)
Decode .hqx coding.
b2a_hqx($module, data, /)
Encode .hqx data.
a2b_hex($module, hexstr, /)
Binary data of hexadecimal representation.
hexstr must contain an even number of hex digits (upper or lower case).
This function is also available as "unhexlify()".
b2a_hex($module, /, data, sep=<unrepresentable>, bytes_per_sep=1)
Hexadecimal representation of binary data.
  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators.  Positive values count from the
    right, negative values count from the left.
The return value is a bytes object.  This function is also
available as "hexlify()".
Example:
>>> binascii.b2a_hex(b'\xb9\x01\xef')
b'b901ef'
>>> binascii.hexlify(b'\xb9\x01\xef', ':')
b'b9:01:ef'
>>> binascii.b2a_hex(b'\xb9\x01\xef', b'_', 2)
b'b9_01ef'
hexlify($module, /, data, sep=<unrepresentable>, bytes_per_sep=1)
Hexadecimal representation of binary data.
  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators.  Positive values count from the
    right, negative values count from the left.
The return value is a bytes object.  This function is also
available as "b2a_hex()".
unhexlify($module, hexstr, /)
Binary data of hexadecimal representation.
hexstr must contain an even number of hex digits (upper or lower case).
rlecode_hqx($module, data, /)
Binhex RLE-code binary data.
rledecode_hqx($module, data, /)
Decode hexbin RLE-coded string.
crc_hqx($module, data, crc, /)
Compute CRC-CCITT incrementally.
crc32($module, data, crc=0, /)
Compute CRC-32 incrementally.
a2b_qp($module, /, data, header=False)
Decode a string of qp-encoded data.
b2a_qp($module, /, data, quotetabs=False, istext=True, header=False)
Encode a string using quoted-printable encoding.
On encoding, when istext is set, newlines are not encoded, and white
space at end of lines is.  When istext is not set, \r and \n (CR/LF)
are both encoded.  When quotetabs is set, space and tabs are encoded.
?456789:;<=
 !"#$%&'()*+,-./0123
}}}}}}}}}}~}}~}}}}}}}}}}}}}}}}}}}
}}}}}
 !"#$}%&'()*+},-./}}}}0123456}789:;<}}=>?}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
B c0
s2R"
b$C4 
S6r&
<`A
>2.Q
P%@Fpg`
RwbVr
ftGd$T
Wfvv
F4VL
DXeH
uJTZ7j
ld\EL
n6~UNt^
binascii
a2b_uu
b2a_uu
a2b_base64
b2a_base64
a2b_hqx
b2a_hqx
a2b_hex
b2a_hex
hexlify
unhexlify
rlecode_hqx
rledecode_hqx
crc_hqx
crc32
a2b_qp
b2a_qp
string argument should contain only ASCII characters
argument should be bytes, buffer or ASCII string, not '%.100s'
argument should be a contiguous buffer, not '%.100s'
Illegal char
Trailing garbage
backtick
argument 1
contiguous buffer
integer argument expected, got float
At most 45 bytes at once
Invalid base64-encoded string: number of data characters (%zd) cannot be 1 more than a multiple of 4
Incorrect padding
newline
Too much data for base64 line
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
binascii.a2b_hqx() is deprecated
String has incomplete number of bytes
argument
binascii.b2a_hqx() is deprecated
!"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr
Odd-length string
Non-hexadecimal digit found
data
bytes_per_sep
argument 'data'
binascii.rlecode_hqx() is deprecated
binascii.rledecode_hqx() is deprecated
Orphaned RLE code at start
header
quotetabs
istext
0123456789ABCDEF
binascii.Error
Error
binascii.Incomplete
Incomplete
%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%
9999999999999999995Conversion between binary data and ASCII
a2b_uu($module, data, /)
Decode a line of uuencoded data.
b2a_uu($module, data, /, *, backtick=False)
Uuencode line of data.
a2b_base64($module, data, /)
Decode a line of base64 data.
b2a_base64($module, data, /, *, newline=True)
Base64-code line of data.
a2b_hqx($module, data, /)
Decode .hqx coding.
b2a_hqx($module, data, /)
Encode .hqx data.
a2b_hex($module, hexstr, /)
Binary data of hexadecimal representation.
hexstr must contain an even number of hex digits (upper or lower case).
This function is also available as "unhexlify()".
b2a_hex($module, /, data, sep=<unrepresentable>, bytes_per_sep=1)
Hexadecimal representation of binary data.
  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators.  Positive values count from the
    right, negative values count from the left.
The return value is a bytes object.  This function is also
available as "hexlify()".
Example:
>>> binascii.b2a_hex(b'\xb9\x01\xef')
b'b901ef'
>>> binascii.hexlify(b'\xb9\x01\xef', ':')
b'b9:01:ef'
>>> binascii.b2a_hex(b'\xb9\x01\xef', b'_', 2)
b'b9_01ef'
hexlify($module, /, data, sep=<unrepresentable>, bytes_per_sep=1)
Hexadecimal representation of binary data.
  sep
    An optional single character or byte to separate hex bytes.
  bytes_per_sep
    How many bytes between separators.  Positive values count from the
    right, negative values count from the left.
The return value is a bytes object.  This function is also
available as "b2a_hex()".
unhexlify($module, hexstr, /)
Binary data of hexadecimal representation.
hexstr must contain an even number of hex digits (upper or lower case).
rlecode_hqx($module, data, /)
Binhex RLE-code binary data.
rledecode_hqx($module, data, /)
Decode hexbin RLE-coded string.
crc_hqx($module, data, crc, /)
Compute CRC-CCITT incrementally.
crc32($module, data, crc=0, /)
Compute CRC-32 incrementally.
a2b_qp($module, /, data, header=False)
Decode a string of qp-encoded data.
b2a_qp($module, /, data, quotetabs=False, istext=True, header=False)
Encode a string using quoted-printable encoding.
On encoding, when istext is set, newlines are not encoded, and white
space at end of lines is.  When istext is not set, \r and \n (CR/LF)
are both encoded.  When quotetabs is set, space and tabs are encoded.
?456789:;<=
 !"#$%&'()*+,-./0123
}}}}}}}}}}~}}~}}}}}}}}}}}}}}}}}}}
}}}}}
 !"#$}%&'()*+},-./}}}}0123456}789:;<}}=>?}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}
B c0
s2R"
b$C4 
S6r&
<`A
>2.Q
P%@Fpg`
RwbVr
ftGd$T
Wfvv
F4VL
DXeH
uJTZ7j
ld\EL
n6~UNt^
binascii
a2b_uu
b2a_uu
a2b_base64
b2a_base64
a2b_hqx
b2a_hqx
a2b_hex
b2a_hex
hexlify
unhexlify
rlecode_hqx
rledecode_hqx
crc_hqx
crc32
a2b_qp
b2a_qp
string argument should contain only ASCII characters
argument should be bytes, buffer or ASCII string, not '%.100s'
argument should be a contiguous buffer, not '%.100s'
Illegal char
Trailing garbage
backtick
argument 1
contiguous buffer
integer argument expected, got float
At most 45 bytes at once
Invalid base64-encoded string: number of data characters (%zd) cannot be 1 more than a multiple of 4
Incorrect padding
newline
Too much data for base64 line
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
binascii.a2b_hqx() is deprecated
String has incomplete number of bytes
argument
binascii.b2a_hqx() is deprecated
!"#$%&'()*+,-012345689@ABCDEFGHIJKLMNPQRSTUVXYZ[`abcdefhijklmpqr
Odd-length string
Non-hexadecimal digit found
data
bytes_per_sep
argument 'data'
binascii.rlecode_hqx() is deprecated
binascii.rledecode_hqx() is deprecated
Orphaned RLE code at start
header
quotetabs
istext
0123456789ABCDEF
binascii.Error
Error
binascii.Incomplete
Incomplete
