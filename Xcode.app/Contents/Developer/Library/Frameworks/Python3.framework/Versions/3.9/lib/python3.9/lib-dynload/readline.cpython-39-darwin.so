EditLine wrapper
Importing this module enables command line editing using libedit readline.
Importing this module enables command line editing using GNU readline.
parse_and_bind(string) -> None
Execute the init line provided in the string argument.
get_line_buffer() -> string
return the current contents of the line buffer.
insert_text(string) -> None
Insert text into the line buffer at the cursor position.
redisplay() -> None
Change what's displayed on the screen to reflect the current
contents of the line buffer.
read_init_file([filename]) -> None
Execute a readline initialization file.
The default filename is the last filename used.
read_history_file([filename]) -> None
Load a readline history file.
The default filename is ~/.history.
write_history_file([filename]) -> None
Save a readline history file.
The default filename is ~/.history.
get_history_item() -> string
return the current contents of history item at index.
get_current_history_length() -> integer
return the current (not the maximum) length of history.
set_history_length(length) -> None
set the maximal number of lines which will be written to
the history file. A negative length is used to inhibit
history truncation.
get_history_length() -> int
return the maximum number of lines that will be written to
the history file.
set_completer([function]) -> None
Set or remove the completer function.
The function is called as function(text, state),
for state in 0, 1, 2, ..., until it returns a non-string.
It should return the next possible completion starting with 'text'.
get_completer() -> function
Returns current completer function.
get_completion_type() -> int
Get the type of completion being attempted.
get_begidx() -> int
get the beginning index of the completion scope
get_endidx() -> int
get the ending index of the completion scope
set_completer_delims(string) -> None
set the word delimiters for completion
set_auto_history(enabled) -> None
Enables or disables automatic history.
add_history(string) -> None
add an item to the history buffer
remove_history_item(pos) -> None
remove history item given by its position
replace_history_item(pos, line) -> None
replaces history item given by its position with contents of line
get_completer_delims() -> string
get the word delimiters for completion
set_completion_display_matches_hook([function]) -> None
Set or remove the completion display function.
The function is called as
  function(substitution, [matches], longest_match_length)
once each time matches need to be displayed.
set_startup_hook([function]) -> None
Set or remove the function invoked by the rl_startup_hook callback.
The function is called with no arguments just
before readline prints the first prompt.
set_pre_input_hook([function]) -> None
Set or remove the function invoked by the rl_pre_input_hook callback.
The function is called with no arguments after the first prompt
has been printed and just before readline starts reading input
characters.
clear_history() -> None
Clear the current readline history.
_READLINE_VERSION
_READLINE_RUNTIME_VERSION
_READLINE_LIBRARY_VERSION
readline
parse_and_bind
get_line_buffer
insert_text
redisplay
read_init_file
read_history_file
write_history_file
get_history_item
get_current_history_length
set_history_length
get_history_length
set_completer
get_completer
get_completion_type
get_begidx
get_endidx
set_completer_delims
set_auto_history
add_history
remove_history_item
replace_history_item
get_completer_delims
set_completion_display_matches_hook
set_startup_hook
set_pre_input_hook
clear_history
surrogateescape
|O:read_init_file
enable-bracketed-paste
|O:read_history_file
|O:write_history_file
i:get_history_item
i:set_history_length
completer
|O:set_%.50s
set_%.50s(func): argument not callable
p:set_auto_history
i:remove_history_item
History index cannot be negative
No history item at position %d
iU:replace_history_item
completion_display_matches_hook
startup_hook
pre_input_hook
call_readline
not enough memory to save locale
python
`~!@#$%^&*()-=+[{]}\|;:'",<>/?
enable-meta-key
EditLine wrapper
Importing this module enables command line editing using libedit readline.
Importing this module enables command line editing using GNU readline.
parse_and_bind(string) -> None
Execute the init line provided in the string argument.
get_line_buffer() -> string
return the current contents of the line buffer.
insert_text(string) -> None
Insert text into the line buffer at the cursor position.
redisplay() -> None
Change what's displayed on the screen to reflect the current
contents of the line buffer.
read_init_file([filename]) -> None
Execute a readline initialization file.
The default filename is the last filename used.
read_history_file([filename]) -> None
Load a readline history file.
The default filename is ~/.history.
write_history_file([filename]) -> None
Save a readline history file.
The default filename is ~/.history.
get_history_item() -> string
return the current contents of history item at index.
get_current_history_length() -> integer
return the current (not the maximum) length of history.
set_history_length(length) -> None
set the maximal number of lines which will be written to
the history file. A negative length is used to inhibit
history truncation.
get_history_length() -> int
return the maximum number of lines that will be written to
the history file.
set_completer([function]) -> None
Set or remove the completer function.
The function is called as function(text, state),
for state in 0, 1, 2, ..., until it returns a non-string.
It should return the next possible completion starting with 'text'.
get_completer() -> function
Returns current completer function.
get_completion_type() -> int
Get the type of completion being attempted.
get_begidx() -> int
get the beginning index of the completion scope
get_endidx() -> int
get the ending index of the completion scope
set_completer_delims(string) -> None
set the word delimiters for completion
set_auto_history(enabled) -> None
Enables or disables automatic history.
add_history(string) -> None
add an item to the history buffer
remove_history_item(pos) -> None
remove history item given by its position
replace_history_item(pos, line) -> None
replaces history item given by its position with contents of line
get_completer_delims() -> string
get the word delimiters for completion
set_completion_display_matches_hook([function]) -> None
Set or remove the completion display function.
The function is called as
  function(substitution, [matches], longest_match_length)
once each time matches need to be displayed.
set_startup_hook([function]) -> None
Set or remove the function invoked by the rl_startup_hook callback.
The function is called with no arguments just
before readline prints the first prompt.
set_pre_input_hook([function]) -> None
Set or remove the function invoked by the rl_pre_input_hook callback.
The function is called with no arguments after the first prompt
has been printed and just before readline starts reading input
characters.
clear_history() -> None
Clear the current readline history.
_READLINE_VERSION
_READLINE_RUNTIME_VERSION
_READLINE_LIBRARY_VERSION
readline
parse_and_bind
get_line_buffer
insert_text
redisplay
read_init_file
read_history_file
write_history_file
get_history_item
get_current_history_length
set_history_length
get_history_length
set_completer
get_completer
get_completion_type
get_begidx
get_endidx
set_completer_delims
set_auto_history
add_history
remove_history_item
replace_history_item
get_completer_delims
set_completion_display_matches_hook
set_startup_hook
set_pre_input_hook
clear_history
surrogateescape
|O:read_init_file
enable-bracketed-paste
|O:read_history_file
|O:write_history_file
i:get_history_item
i:set_history_length
completer
|O:set_%.50s
set_%.50s(func): argument not callable
p:set_auto_history
i:remove_history_item
History index cannot be negative
No history item at position %d
iU:replace_history_item
completion_display_matches_hook
startup_hook
pre_input_hook
call_readline
not enough memory to save locale
python
`~!@#$%^&*()-=+[{]}\|;:'",<>/?
enable-meta-key
