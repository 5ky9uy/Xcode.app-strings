_curses.window
_curses._C_API
_C_API
_curses.error
error
version
__version__
ncurses_version
__new__
A_ATTRIBUTES
A_NORMAL
A_STANDOUT
A_UNDERLINE
A_REVERSE
A_BLINK
A_DIM
A_BOLD
A_ALTCHARSET
A_INVIS
A_PROTECT
A_CHARTEXT
A_COLOR
A_HORIZONTAL
A_LEFT
A_LOW
A_RIGHT
A_TOP
A_VERTICAL
A_ITALIC
COLOR_BLACK
COLOR_RED
COLOR_GREEN
COLOR_YELLOW
COLOR_BLUE
COLOR_MAGENTA
COLOR_CYAN
COLOR_WHITE
BUTTON1_PRESSED
BUTTON1_RELEASED
BUTTON1_CLICKED
BUTTON1_DOUBLE_CLICKED
BUTTON1_TRIPLE_CLICKED
BUTTON2_PRESSED
BUTTON2_RELEASED
BUTTON2_CLICKED
BUTTON2_DOUBLE_CLICKED
BUTTON2_TRIPLE_CLICKED
BUTTON3_PRESSED
BUTTON3_RELEASED
BUTTON3_CLICKED
BUTTON3_DOUBLE_CLICKED
BUTTON3_TRIPLE_CLICKED
BUTTON4_PRESSED
BUTTON4_RELEASED
BUTTON4_CLICKED
BUTTON4_DOUBLE_CLICKED
BUTTON4_TRIPLE_CLICKED
BUTTON_SHIFT
BUTTON_CTRL
BUTTON_ALT
ALL_MOUSE_EVENTS
REPORT_MOUSE_POSITION
UNKNOWN KEY
KEY_F(
KEY_MIN
KEY_MAX
addch
addnstr
addstr
attroff
attron
attrset
bkgd
chgat
bkgdset
border
clear
clearok
clrtobot
clrtoeol
cursyncup
delch
deleteln
derwin
echochar
enclose
erase
getbegyx
getbkgd
getch
getkey
get_wch
getmaxyx
getparyx
getstr
getyx
hline
idcok
idlok
immedok
inch
insch
insdelln
insertln
insnstr
insstr
instr
is_linetouched
is_wintouched
keypad
leaveok
move
mvderwin
mvwin
nodelay
notimeout
noutrefresh
overlay
overwrite
putwin
redrawln
redrawwin
refresh
resize
scroll
scrollok
setscrreg
standend
standout
subpad
subwin
syncdown
syncok
syncup
timeout
touchline
touchwin
untouchwin
vline
O:addch
Ol:addch
iiO:addch
iiOl:addch
_curses.window.addch requires 1 to 4 arguments
add_wch
expect bytes or str of length 1, or int, got a str of length %zi
int doesn't fit in long
expect bytes or str of length 1, or int, got %s
byte doesn't fit in chtype
%s() returned ERR
Oi:addnstr
Oil:addnstr
iiOi:addnstr
iiOil:addnstr
_curses.window.addnstr requires 2 to 5 arguments
addnwstr
expect bytes or str, got %s
O:addstr
Ol:addstr
iiO:addstr
iiOl:addstr
_curses.window.addstr requires 1 to 4 arguments
addwstr
integer argument expected, got float
l;attr
il;n,attr
iil;int,int,attr
iiil;int,int,n,attr
chgat requires 1 to 4 arguments
OO:box
_curses.window.box requires 0 to 2 arguments
i;True(1) or False(0)
ii:delch
_curses.window.delch requires 0 to 2 arguments
wdelch
mvwdelch
wdeleteln
ii:derwin
iiii:derwin
_curses.window.derwin requires 2 to 4 arguments
utf-8
werase
ii:getch
_curses.window.getch requires 0 to 2 arguments
ii:getkey
_curses.window.getkey requires 0 to 2 arguments
no input
ii:get_wch
_curses.window.get_wch requires 0 to 2 arguments
'n' must be nonnegative
ii;y,x
iii;y,x,n
getstr requires 0 to 3 arguments
Oi:hline
Oil:hline
iiOi:hline
iiOil:hline
_curses.window.hline requires 2 to 5 arguments
wmove
ii:inch
_curses.window.inch requires 0 to 2 arguments
O:insch
Ol:insch
iiO:insch
iiOl:insch
_curses.window.insch requires 1 to 4 arguments
i;nlines
winsdelln
winsertln
Oi:insnstr
Oil:insnstr
iiOi:insnstr
iiOil:insnstr
_curses.window.insnstr requires 2 to 5 arguments
insn_wstr
O:insstr
Ol:insstr
iiO:insstr
iiOl:insstr
_curses.window.insstr requires 1 to 4 arguments
inswstr
instr requires 0 or 3 arguments
iiiiii:noutrefresh
_curses.window.noutrefresh requires 0 to 6 arguments
noutrefresh() called for a pad requires 6 arguments
pnoutrefresh
noutrefresh() takes no arguments (6 given)
wnoutrefresh
O!:overlay
O!iiiiii:overlay
_curses.window.overlay requires 1 to 7 arguments
copywin
O!:overwrite
O!iiiiii:overwrite
_curses.window.overwrite requires 1 to 7 arguments
write
iiiiii:refresh
_curses.window.refresh requires 0 to 6 arguments
refresh() for a pad requires 6 arguments
prefresh
refresh() takes no arguments (6 given)
ii;lines,columns
wresize
i:scroll
_curses.window.scroll requires 0 to 1 arguments
wsetscrreg
ii:subwin
iiii:subwin
_curses.window.subwin requires 2 to 4 arguments
i;delay
ii:touchline
iii:touchline
_curses.window.touchline requires 2 to 3 arguments
Oi:vline
Oil:vline
iiOi:vline
iiOil:vline
_curses.window.vline requires 2 to 5 arguments
encoding
the typecode character used to create the array
encoding may not be deleted
setting encoding to a non-string
must call (at least) setupterm() first
must call initscr() first
must call start_color() first
_curses
baudrate
beep
can_change_color
cbreak
color_content
color_pair
curs_set
def_prog_mode
def_shell_mode
delay_output
doupdate
echo
endwin
erasechar
filter
flash
flushinp
getmouse
ungetmouse
getsyx
getwin
has_colors
has_ic
has_il
has_key
halfdelay
init_color
init_pair
initscr
intrflush
isendwin
is_term_resized
keyname
killchar
longname
meta
mouseinterval
mousemask
napms
newpad
newwin
nocbreak
noecho
nonl
noqiflush
noraw
pair_content
pair_number
putp
qiflush
reset_prog_mode
reset_shell_mode
resetty
resizeterm
resize_term
savetty
get_escdelay
set_escdelay
get_tabsize
set_tabsize
setsyx
setupterm
start_color
termattrs
termname
tigetflag
tigetnum
tigetstr
tparm
typeahead
unctrl
ungetch
update_lines_cols
unget_wch
use_env
use_default_colors
signed short integer is less than minimum
signed short integer is greater than maximum
Argument 1 was out of range. Check value of COLORS.
color_content() returned ERR
(iii)
getmouse() returned ERR
(hiiik)
argument 5
(ii)
read
f.read() returned %.100s instead of bytes
unsigned byte integer is less than minimum
unsigned byte integer is greater than maximum
ACS_ULCORNER
ACS_LLCORNER
ACS_URCORNER
ACS_LRCORNER
ACS_LTEE
ACS_RTEE
ACS_BTEE
ACS_TTEE
ACS_HLINE
ACS_VLINE
ACS_PLUS
ACS_S1
ACS_S9
ACS_DIAMOND
ACS_CKBOARD
ACS_DEGREE
ACS_PLMINUS
ACS_BULLET
ACS_LARROW
ACS_RARROW
ACS_DARROW
ACS_UARROW
ACS_BOARD
ACS_LANTERN
ACS_BLOCK
ACS_BSSB
ACS_SSBB
ACS_BBSS
ACS_SBBS
ACS_SBSS
ACS_SSSB
ACS_SSBS
ACS_BSSS
ACS_BSBS
ACS_SBSB
ACS_SSSS
ACS_S3
ACS_S7
ACS_LEQUAL
ACS_GEQUAL
ACS_PI
ACS_NEQUAL
ACS_STERLING
LINES
COLS
invalid key number
argument
(kk)
ii:newwin
iiii:newwin
_curses.newwin requires 2 to 4 arguments
Argument 1 was out of range. (0..COLOR_PAIRS-1)
pair_content() returned ERR
y:putp
curses
ms must be > 0
size must be > 0
term
embedded null character
argument 'term'
str or None
stdout
lost sys.stdout
setupterm: unknown error
setupterm: could not find terminal
setupterm: could not find terminfo database
COLORS
COLOR_PAIRS
start_color() returned ERR
y|iiiiiiiii:tparm
tparm() returned NULL
expect str of length 1 or int, got a str of length %zi
character doesn't fit in wchar_t
expect str of length 1 or int, got %s
use_default_colors() returned ERR
curses.ncurses_version
major
Major release number
minor
Minor release number
patch
Patch release number
addch([y, x,] ch, [attr=_curses.A_NORMAL])
Paint the character.
    Y-coordinate.
    X-coordinate.
  ch
    Character to add.
  attr
    Attributes for the character.
Paint character ch at (y, x) with attributes attr,
overwriting any character previously painted at that location.
By default, the character position and attributes are the
current settings for the window object.
addnstr([y, x,] str, n, [attr])
Paint at most n characters of the string.
    Y-coordinate.
    X-coordinate.
  str
    String to add.
    Maximal number of characters.
  attr
    Attributes for characters.
Paint at most n characters of the string str at (y, x) with
attributes attr, overwriting anything previously on the display.
By default, the character position and attributes are the
current settings for the window object.
addstr([y, x,] str, [attr])
Paint the string.
    Y-coordinate.
    X-coordinate.
  str
    String to add.
  attr
    Attributes for characters.
Paint the string str at (y, x) with attributes attr,
overwriting anything previously on the display.
By default, the character position and attributes are the
current settings for the window object.
attroff($self, attr, /)
Remove attribute attr from the "background" set.
attron($self, attr, /)
Add attribute attr from the "background" set.
attrset($self, attr, /)
Set the "background" set of attributes.
bkgd($self, ch, attr=_curses.A_NORMAL, /)
Set the background property of the window.
  ch
    Background character.
  attr
    Background attributes.
bkgdset($self, ch, attr=_curses.A_NORMAL, /)
Set the window's background.
  ch
    Background character.
  attr
    Background attributes.
border($self, ls=_curses.ACS_VLINE, rs=_curses.ACS_VLINE,
       ts=_curses.ACS_HLINE, bs=_curses.ACS_HLINE,
       tl=_curses.ACS_ULCORNER, tr=_curses.ACS_URCORNER,
       bl=_curses.ACS_LLCORNER, br=_curses.ACS_LRCORNER, /)
Draw a border around the edges of the window.
  ls
    Left side.
  rs
    Right side.
  ts
    Top side.
  bs
    Bottom side.
  tl
    Upper-left corner.
  tr
    Upper-right corner.
  bl
    Bottom-left corner.
  br
    Bottom-right corner.
Each parameter specifies the character to use for a specific part of the
border.  The characters can be specified as integers or as one-character
strings.  A 0 value for any parameter will cause the default character to be
used for that parameter.
box([verch=0, horch=0])
Draw a border around the edges of the window.
  verch
    Left and right side.
  horch
    Top and bottom side.
Similar to border(), but both ls and rs are verch and both ts and bs are
horch.  The default corner characters are always used by this function.
delch([y, x])
Delete any character at (y, x).
    Y-coordinate.
    X-coordinate.
derwin([nlines=0, ncols=0,] begin_y, begin_x)
Create a sub-window (window-relative coordinates).
  nlines
    Height.
  ncols
    Width.
  begin_y
    Top side y-coordinate.
  begin_x
    Left side x-coordinate.
derwin() is the same as calling subwin(), except that begin_y and begin_x
are relative to the origin of the window, rather than relative to the entire
screen.
echochar($self, ch, attr=_curses.A_NORMAL, /)
Add character ch with attribute attr, and refresh.
  ch
    Character to add.
  attr
    Attributes for the character.
enclose($self, y, x, /)
Return True if the screen-relative coordinates are enclosed by the window.
    Y-coordinate.
    X-coordinate.
getbkgd($self, /)
Return the window's current background character/attribute pair.
getch([y, x])
Get a character code from terminal keyboard.
    Y-coordinate.
    X-coordinate.
The integer returned does not have to be in ASCII range: function keys,
keypad keys and so on return numbers higher than 256.  In no-delay mode, -1
is returned if there is no input, else getch() waits until a key is pressed.
getkey([y, x])
Get a character (string) from terminal keyboard.
    Y-coordinate.
    X-coordinate.
Returning a string instead of an integer, as getch() does.  Function keys,
keypad keys and other special keys return a multibyte string containing the
key name.  In no-delay mode, an exception is raised if there is no input.
get_wch([y, x])
Get a wide character from terminal keyboard.
    Y-coordinate.
    X-coordinate.
Return a character for most keys, or an integer for function keys,
keypad keys, and other special keys.
hline([y, x,] ch, n, [attr=_curses.A_NORMAL])
Display a horizontal line.
    Starting Y-coordinate.
    Starting X-coordinate.
  ch
    Character to draw.
    Line length.
  attr
    Attributes for the characters.
inch([y, x])
Return the character at the given position in the window.
    Y-coordinate.
    X-coordinate.
The bottom 8 bits are the character proper, and upper bits are the attributes.
insch([y, x,] ch, [attr=_curses.A_NORMAL])
Insert a character before the current or specified position.
    Y-coordinate.
    X-coordinate.
  ch
    Character to insert.
  attr
    Attributes for the character.
All characters to the right of the cursor are shifted one position right, with
the rightmost characters on the line being lost.
insnstr([y, x,] str, n, [attr])
Insert at most n characters of the string.
    Y-coordinate.
    X-coordinate.
  str
    String to insert.
    Maximal number of characters.
  attr
    Attributes for characters.
Insert a character string (as many characters as will fit on the line)
before the character under the cursor, up to n characters.  If n is zero
or negative, the entire string is inserted.  All characters to the right
of the cursor are shifted right, with the rightmost characters on the line
being lost.  The cursor position does not change (after moving to y, x, if
specified).
insstr([y, x,] str, [attr])
Insert the string before the current or specified position.
    Y-coordinate.
    X-coordinate.
  str
    String to insert.
  attr
    Attributes for characters.
Insert a character string (as many characters as will fit on the line)
before the character under the cursor.  All characters to the right of
the cursor are shifted right, with the rightmost characters on the line
being lost.  The cursor position does not change (after moving to y, x,
if specified).
is_linetouched($self, line, /)
Return True if the specified line was modified, otherwise return False.
  line
    Line number.
Raise a curses.error exception if line is not valid for the given window.
noutrefresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])
Mark for refresh but wait.
This function updates the data structure representing the desired state of the
window, but does not force an update of the physical screen.  To accomplish
that, call doupdate().
overlay(destwin, [sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])
Overlay the window on top of destwin.
The windows need not be the same size, only the overlapping region is copied.
This copy is non-destructive, which means that the current background
character does not overwrite the old contents of destwin.
To get fine-grained control over the copied region, the second form of
overlay() can be used.  sminrow and smincol are the upper-left coordinates
of the source window, and the other variables mark a rectangle in the
destination window.
overwrite(destwin, [sminrow, smincol, dminrow, dmincol, dmaxrow,
          dmaxcol])
Overwrite the window on top of destwin.
The windows need not be the same size, in which case only the overlapping
region is copied.  This copy is destructive, which means that the current
background character overwrites the old contents of destwin.
To get fine-grained control over the copied region, the second form of
overwrite() can be used. sminrow and smincol are the upper-left coordinates
of the source window, the other variables mark a rectangle in the destination
window.
putwin($self, file, /)
Write all data associated with the window into the provided file object.
This information can be later retrieved using the getwin() function.
redrawln($self, beg, num, /)
Mark the specified lines corrupted.
  beg
    Starting line number.
  num
    The number of lines.
They should be completely redrawn on the next refresh() call.
refresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])
Update the display immediately.
Synchronize actual screen with previous drawing/deleting methods.
The 6 optional arguments can only be specified when the window is a pad
created with newpad().  The additional parameters are needed to indicate
what part of the pad and screen are involved.  pminrow and pmincol specify
the upper left-hand corner of the rectangle to be displayed in the pad.
sminrow, smincol, smaxrow, and smaxcol specify the edges of the rectangle to
be displayed on the screen.  The lower right-hand corner of the rectangle to
be displayed in the pad is calculated from the screen coordinates, since the
rectangles must be the same size.  Both rectangles must be entirely contained
within their respective structures.  Negative values of pminrow, pmincol,
sminrow, or smincol are treated as if they were zero.
scroll([lines=1])
Scroll the screen or scrolling region.
  lines
    Number of lines to scroll.
Scroll upward if the argument is positive and downward if it is negative.
setscrreg($self, top, bottom, /)
Define a software scrolling region.
  top
    First line number.
  bottom
    Last line number.
All scrolling actions will take place in this region.
subwin([nlines=0, ncols=0,] begin_y, begin_x)
Create a sub-window (screen-relative coordinates).
  nlines
    Height.
  ncols
    Width.
  begin_y
    Top side y-coordinate.
  begin_x
    Left side x-coordinate.
By default, the sub-window will extend from the specified position to the
lower right corner of the window.
touchline(start, count, [changed=True])
Pretend count lines have been changed, starting with line start.
If changed is supplied, it specifies whether the affected lines are marked
as having been changed (changed=True) or unchanged (changed=False).
vline([y, x,] ch, n, [attr=_curses.A_NORMAL])
Display a vertical line.
    Starting Y-coordinate.
    Starting X-coordinate.
  ch
    Character to draw.
    Line length.
  attr
    Attributes for the character.
curses function returned NULL
baudrate($module, /)
Return the output speed of the terminal in bits per second.
beep($module, /)
Emit a short attention sound.
can_change_color($module, /)
Return True if the programmer can change the colors displayed by the terminal.
cbreak($module, flag=True, /)
Enter cbreak mode.
  flag
    If false, the effect is the same as calling nocbreak().
In cbreak mode (sometimes called "rare" mode) normal tty line buffering is
turned off and characters are available to be read one by one.  However,
unlike raw mode, special characters (interrupt, quit, suspend, and flow
control) retain their effects on the tty driver and calling program.
Calling first raw() then cbreak() leaves the terminal in cbreak mode.
color_content($module, color_number, /)
Return the red, green, and blue (RGB) components of the specified color.
  color_number
    The number of the color (0 - (COLORS-1)).
A 3-tuple is returned, containing the R, G, B values for the given color,
which will be between 0 (no component) and 1000 (maximum amount of component).
color_pair($module, pair_number, /)
Return the attribute value for displaying text in the specified color.
  pair_number
    The number of the color pair.
This attribute value can be combined with A_STANDOUT, A_REVERSE, and the
other A_* attributes.  pair_number() is the counterpart to this function.
curs_set($module, visibility, /)
Set the cursor state.
  visibility
    0 for invisible, 1 for normal visible, or 2 for very visible.
If the terminal supports the visibility requested, the previous cursor
state is returned; otherwise, an exception is raised.  On many terminals,
the "visible" mode is an underline cursor and the "very visible" mode is
a block cursor.
def_prog_mode($module, /)
Save the current terminal mode as the "program" mode.
The "program" mode is the mode when the running program is using curses.
Subsequent calls to reset_prog_mode() will restore this mode.
def_shell_mode($module, /)
Save the current terminal mode as the "shell" mode.
The "shell" mode is the mode when the running program is not using curses.
Subsequent calls to reset_shell_mode() will restore this mode.
delay_output($module, ms, /)
Insert a pause in output.
  ms
    Duration in milliseconds.
doupdate($module, /)
Update the physical screen to match the virtual screen.
echo($module, flag=True, /)
Enter echo mode.
  flag
    If false, the effect is the same as calling noecho().
In echo mode, each character input is echoed to the screen as it is entered.
endwin($module, /)
De-initialize the library, and return terminal to normal status.
erasechar($module, /)
Return the user's current erase character.
filter($module, /)
flash($module, /)
Flash the screen.
That is, change it to reverse-video and then change it back in a short interval.
flushinp($module, /)
Flush all input buffers.
This throws away any typeahead that has been typed by the user and has not
yet been processed by the program.
getmouse($module, /)
Retrieve the queued mouse event.
After getch() returns KEY_MOUSE to signal a mouse event, this function
returns a 5-tuple (id, x, y, z, bstate).
ungetmouse($module, id, x, y, z, bstate, /)
Push a KEY_MOUSE event onto the input queue.
The following getmouse() will return the given state data.
getsyx($module, /)
Return the current coordinates of the virtual screen cursor.
Return a (y, x) tuple.  If leaveok is currently true, return (-1, -1).
getwin($module, file, /)
Read window related data stored in the file by an earlier putwin() call.
The routine then creates and initializes a new window using that data,
returning the new window object.
has_colors($module, /)
Return True if the terminal can display colors; otherwise, return False.
has_ic($module, /)
Return True if the terminal has insert- and delete-character capabilities.
has_il($module, /)
Return True if the terminal has insert- and delete-line capabilities.
has_key($module, key, /)
Return True if the current terminal type recognizes a key with that value.
  key
    Key number.
halfdelay($module, tenths, /)
Enter half-delay mode.
  tenths
    Maximal blocking delay in tenths of seconds (1 - 255).
Use nocbreak() to leave half-delay mode.
init_color($module, color_number, r, g, b, /)
Change the definition of a color.
  color_number
    The number of the color to be changed (0 - (COLORS-1)).
    Red component (0 - 1000).
    Green component (0 - 1000).
    Blue component (0 - 1000).
When init_color() is used, all occurrences of that color on the screen
immediately change to the new definition.  This function is a no-op on
most terminals; it is active only if can_change_color() returns true.
init_pair($module, pair_number, fg, bg, /)
Change the definition of a color-pair.
  pair_number
    The number of the color-pair to be changed (1 - (COLOR_PAIRS-1)).
  fg
    Foreground color number (-1 - (COLORS-1)).
  bg
    Background color number (-1 - (COLORS-1)).
If the color-pair was previously initialized, the screen is refreshed and
all occurrences of that color-pair are changed to the new definition.
initscr($module, /)
Initialize the library.
Return a WindowObject which represents the whole screen.
intrflush($module, flag, /)
isendwin($module, /)
Return True if endwin() has been called.
is_term_resized($module, nlines, ncols, /)
Return True if resize_term() would modify the window structure, False otherwise.
  nlines
    Height.
  ncols
    Width.
keyname($module, key, /)
Return the name of specified key.
  key
    Key number.
killchar($module, /)
Return the user's current line kill character.
longname($module, /)
Return the terminfo long name field describing the current terminal.
The maximum length of a verbose description is 128 characters.  It is defined
only after the call to initscr().
meta($module, yes, /)
Enable/disable meta keys.
If yes is True, allow 8-bit characters to be input.  If yes is False,
allow only 7-bit characters.
mouseinterval($module, interval, /)
Set and retrieve the maximum time between press and release in a click.
  interval
    Time in milliseconds.
Set the maximum time that can elapse between press and release events in
order for them to be recognized as a click, and return the previous interval
value.
mousemask($module, newmask, /)
Set the mouse events to be reported, and return a tuple (availmask, oldmask).
Return a tuple (availmask, oldmask).  availmask indicates which of the
specified mouse events can be reported; on complete failure it returns 0.
oldmask is the previous value of the given window's mouse event mask.
If this function is never called, no mouse events are ever reported.
napms($module, ms, /)
Sleep for specified time.
  ms
    Duration in milliseconds.
newpad($module, nlines, ncols, /)
Create and return a pointer to a new pad data structure.
  nlines
    Height.
  ncols
    Width.
newwin(nlines, ncols, [begin_y=0, begin_x=0])
Return a new window.
  nlines
    Height.
  ncols
    Width.
  begin_y
    Top side y-coordinate.
  begin_x
    Left side x-coordinate.
By default, the window will extend from the specified position to the lower
right corner of the screen.
nl($module, flag=True, /)
Enter newline mode.
  flag
    If false, the effect is the same as calling nonl().
This mode translates the return key into newline on input, and translates
newline into return and line-feed on output.  Newline mode is initially on.
nocbreak($module, /)
Leave cbreak mode.
Return to normal "cooked" mode with line buffering.
noecho($module, /)
Leave echo mode.
Echoing of input characters is turned off.
nonl($module, /)
Leave newline mode.
Disable translation of return into newline on input, and disable low-level
translation of newline into newline/return on output.
noqiflush($module, /)
Disable queue flushing.
When queue flushing is disabled, normal flush of input and output queues
associated with the INTR, QUIT and SUSP characters will not be done.
noraw($module, /)
Leave raw mode.
Return to normal "cooked" mode with line buffering.
pair_content($module, pair_number, /)
Return a tuple (fg, bg) containing the colors for the requested color pair.
  pair_number
    The number of the color pair (1 - (COLOR_PAIRS-1)).
pair_number($module, attr, /)
Return the number of the color-pair set by the specified attribute value.
color_pair() is the counterpart to this function.
putp($module, string, /)
Emit the value of a specified terminfo capability for the current terminal.
Note that the output of putp() always goes to standard output.
qiflush($module, flag=True, /)
Enable queue flushing.
  flag
    If false, the effect is the same as calling noqiflush().
If queue flushing is enabled, all output in the display driver queue
will be flushed when the INTR, QUIT and SUSP characters are read.
raw($module, flag=True, /)
Enter raw mode.
  flag
    If false, the effect is the same as calling noraw().
In raw mode, normal line buffering and processing of interrupt, quit,
suspend, and flow control keys are turned off; characters are presented to
curses input functions one by one.
reset_prog_mode($module, /)
Restore the terminal to "program" mode, as previously saved by def_prog_mode().
reset_shell_mode($module, /)
Restore the terminal to "shell" mode, as previously saved by def_shell_mode().
resetty($module, /)
Restore terminal mode.
resizeterm($module, nlines, ncols, /)
Resize the standard and current windows to the specified dimensions.
  nlines
    Height.
  ncols
    Width.
Adjusts other bookkeeping data used by the curses library that record the
window dimensions (in particular the SIGWINCH handler).
resize_term($module, nlines, ncols, /)
Backend function used by resizeterm(), performing most of the work.
  nlines
    Height.
  ncols
    Width.
When resizing the windows, resize_term() blank-fills the areas that are
extended.  The calling application should fill in these areas with appropriate
data.  The resize_term() function attempts to resize all windows.  However,
due to the calling convention of pads, it is not possible to resize these
without additional interaction with the application.
savetty($module, /)
Save terminal mode.
get_escdelay($module, /)
Gets the curses ESCDELAY setting.
Gets the number of milliseconds to wait after reading an escape character,
to distinguish between an individual escape character entered on the
keyboard from escape sequences sent by cursor and function keys.
set_escdelay($module, ms, /)
Sets the curses ESCDELAY setting.
  ms
    length of the delay in milliseconds.
Sets the number of milliseconds to wait after reading an escape character,
to distinguish between an individual escape character entered on the
keyboard from escape sequences sent by cursor and function keys.
get_tabsize($module, /)
Gets the curses TABSIZE setting.
Gets the number of columns used by the curses library when converting a tab
character to spaces as it adds the tab to a window.
set_tabsize($module, size, /)
Sets the curses TABSIZE setting.
  size
    rendered cell width of a tab character.
Sets the number of columns used by the curses library when converting a tab
character to spaces as it adds the tab to a window.
setsyx($module, y, x, /)
Set the virtual screen cursor.
    Y-coordinate.
    X-coordinate.
If y and x are both -1, then leaveok is set.
setupterm($module, /, term=None, fd=-1)
Initialize the terminal.
  term
    Terminal name.
    If omitted, the value of the TERM environment variable will be used.
  fd
    File descriptor to which any initialization sequences will be sent.
    If not supplied, the file descriptor for sys.stdout will be used.
start_color($module, /)
Initializes eight basic colors and global variables COLORS and COLOR_PAIRS.
Must be called if the programmer wants to use colors, and before any other
color manipulation routine is called.  It is good practice to call this
routine right after initscr().
It also restores the colors on the terminal to the values they had when the
terminal was just turned on.
termattrs($module, /)
Return a logical OR of all video attributes supported by the terminal.
termname($module, /)
Return the value of the environment variable TERM, truncated to 14 characters.
tigetflag($module, capname, /)
Return the value of the Boolean capability.
  capname
    The terminfo capability name.
The value -1 is returned if capname is not a Boolean capability, or 0 if
it is canceled or absent from the terminal description.
tigetnum($module, capname, /)
Return the value of the numeric capability.
  capname
    The terminfo capability name.
The value -2 is returned if capname is not a numeric capability, or -1 if
it is canceled or absent from the terminal description.
tigetstr($module, capname, /)
Return the value of the string capability.
  capname
    The terminfo capability name.
None is returned if capname is not a string capability, or is canceled or
absent from the terminal description.
tparm($module, str, i1=0, i2=0, i3=0, i4=0, i5=0, i6=0, i7=0, i8=0,
      i9=0, /)
Instantiate the specified byte string with the supplied parameters.
  str
    Parameterized byte string obtained from the terminfo database.
typeahead($module, fd, /)
Specify that the file descriptor fd be used for typeahead checking.
  fd
    File descriptor.
If fd is -1, then no typeahead checking is done.
unctrl($module, ch, /)
Return a string which is a printable representation of the character ch.
Control characters are displayed as a caret followed by the character,
for example as ^C.  Printing characters are left as they are.
ungetch($module, ch, /)
Push ch so the next getch() will return it.
update_lines_cols($module, /)
unget_wch($module, ch, /)
Push ch so the next get_wch() will return it.
use_env($module, flag, /)
Use environment variables LINES and COLUMNS.
If used, this function should be called before initscr() or newterm() are
called.
When flag is False, the values of lines and columns specified in the terminfo
database will be used, even if environment variables LINES and COLUMNS (used
by default) are set, or if curses is running in a window (in which case
default behavior would be to use the window size if LINES and COLUMNS are
not set).
use_default_colors($module, /)
Allow use of default values for colors on terminals supporting this feature.
Use this to support transparency in your application.  The default color
is assigned to the color number -1.
curses.ncurses_version
Ncurses version information as a named tuple.
+2.2
addch([y, x,] ch, [attr=_curses.A_NORMAL])
Paint the character.
    Y-coordinate.
    X-coordinate.
  ch
    Character to add.
  attr
    Attributes for the character.
Paint character ch at (y, x) with attributes attr,
overwriting any character previously painted at that location.
By default, the character position and attributes are the
current settings for the window object.
addnstr([y, x,] str, n, [attr])
Paint at most n characters of the string.
    Y-coordinate.
    X-coordinate.
  str
    String to add.
    Maximal number of characters.
  attr
    Attributes for characters.
Paint at most n characters of the string str at (y, x) with
attributes attr, overwriting anything previously on the display.
By default, the character position and attributes are the
current settings for the window object.
addstr([y, x,] str, [attr])
Paint the string.
    Y-coordinate.
    X-coordinate.
  str
    String to add.
  attr
    Attributes for characters.
Paint the string str at (y, x) with attributes attr,
overwriting anything previously on the display.
By default, the character position and attributes are the
current settings for the window object.
attroff($self, attr, /)
Remove attribute attr from the "background" set.
attron($self, attr, /)
Add attribute attr from the "background" set.
attrset($self, attr, /)
Set the "background" set of attributes.
bkgd($self, ch, attr=_curses.A_NORMAL, /)
Set the background property of the window.
  ch
    Background character.
  attr
    Background attributes.
bkgdset($self, ch, attr=_curses.A_NORMAL, /)
Set the window's background.
  ch
    Background character.
  attr
    Background attributes.
border($self, ls=_curses.ACS_VLINE, rs=_curses.ACS_VLINE,
       ts=_curses.ACS_HLINE, bs=_curses.ACS_HLINE,
       tl=_curses.ACS_ULCORNER, tr=_curses.ACS_URCORNER,
       bl=_curses.ACS_LLCORNER, br=_curses.ACS_LRCORNER, /)
Draw a border around the edges of the window.
  ls
    Left side.
  rs
    Right side.
  ts
    Top side.
  bs
    Bottom side.
  tl
    Upper-left corner.
  tr
    Upper-right corner.
  bl
    Bottom-left corner.
  br
    Bottom-right corner.
Each parameter specifies the character to use for a specific part of the
border.  The characters can be specified as integers or as one-character
strings.  A 0 value for any parameter will cause the default character to be
used for that parameter.
box([verch=0, horch=0])
Draw a border around the edges of the window.
  verch
    Left and right side.
  horch
    Top and bottom side.
Similar to border(), but both ls and rs are verch and both ts and bs are
horch.  The default corner characters are always used by this function.
delch([y, x])
Delete any character at (y, x).
    Y-coordinate.
    X-coordinate.
derwin([nlines=0, ncols=0,] begin_y, begin_x)
Create a sub-window (window-relative coordinates).
  nlines
    Height.
  ncols
    Width.
  begin_y
    Top side y-coordinate.
  begin_x
    Left side x-coordinate.
derwin() is the same as calling subwin(), except that begin_y and begin_x
are relative to the origin of the window, rather than relative to the entire
screen.
echochar($self, ch, attr=_curses.A_NORMAL, /)
Add character ch with attribute attr, and refresh.
  ch
    Character to add.
  attr
    Attributes for the character.
enclose($self, y, x, /)
Return True if the screen-relative coordinates are enclosed by the window.
    Y-coordinate.
    X-coordinate.
getbkgd($self, /)
Return the window's current background character/attribute pair.
getch([y, x])
Get a character code from terminal keyboard.
    Y-coordinate.
    X-coordinate.
The integer returned does not have to be in ASCII range: function keys,
keypad keys and so on return numbers higher than 256.  In no-delay mode, -1
is returned if there is no input, else getch() waits until a key is pressed.
getkey([y, x])
Get a character (string) from terminal keyboard.
    Y-coordinate.
    X-coordinate.
Returning a string instead of an integer, as getch() does.  Function keys,
keypad keys and other special keys return a multibyte string containing the
key name.  In no-delay mode, an exception is raised if there is no input.
get_wch([y, x])
Get a wide character from terminal keyboard.
    Y-coordinate.
    X-coordinate.
Return a character for most keys, or an integer for function keys,
keypad keys, and other special keys.
hline([y, x,] ch, n, [attr=_curses.A_NORMAL])
Display a horizontal line.
    Starting Y-coordinate.
    Starting X-coordinate.
  ch
    Character to draw.
    Line length.
  attr
    Attributes for the characters.
inch([y, x])
Return the character at the given position in the window.
    Y-coordinate.
    X-coordinate.
The bottom 8 bits are the character proper, and upper bits are the attributes.
insch([y, x,] ch, [attr=_curses.A_NORMAL])
Insert a character before the current or specified position.
    Y-coordinate.
    X-coordinate.
  ch
    Character to insert.
  attr
    Attributes for the character.
All characters to the right of the cursor are shifted one position right, with
the rightmost characters on the line being lost.
insnstr([y, x,] str, n, [attr])
Insert at most n characters of the string.
    Y-coordinate.
    X-coordinate.
  str
    String to insert.
    Maximal number of characters.
  attr
    Attributes for characters.
Insert a character string (as many characters as will fit on the line)
before the character under the cursor, up to n characters.  If n is zero
or negative, the entire string is inserted.  All characters to the right
of the cursor are shifted right, with the rightmost characters on the line
being lost.  The cursor position does not change (after moving to y, x, if
specified).
insstr([y, x,] str, [attr])
Insert the string before the current or specified position.
    Y-coordinate.
    X-coordinate.
  str
    String to insert.
  attr
    Attributes for characters.
Insert a character string (as many characters as will fit on the line)
before the character under the cursor.  All characters to the right of
the cursor are shifted right, with the rightmost characters on the line
being lost.  The cursor position does not change (after moving to y, x,
if specified).
is_linetouched($self, line, /)
Return True if the specified line was modified, otherwise return False.
  line
    Line number.
Raise a curses.error exception if line is not valid for the given window.
noutrefresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])
Mark for refresh but wait.
This function updates the data structure representing the desired state of the
window, but does not force an update of the physical screen.  To accomplish
that, call doupdate().
overlay(destwin, [sminrow, smincol, dminrow, dmincol, dmaxrow, dmaxcol])
Overlay the window on top of destwin.
The windows need not be the same size, only the overlapping region is copied.
This copy is non-destructive, which means that the current background
character does not overwrite the old contents of destwin.
To get fine-grained control over the copied region, the second form of
overlay() can be used.  sminrow and smincol are the upper-left coordinates
of the source window, and the other variables mark a rectangle in the
destination window.
overwrite(destwin, [sminrow, smincol, dminrow, dmincol, dmaxrow,
          dmaxcol])
Overwrite the window on top of destwin.
The windows need not be the same size, in which case only the overlapping
region is copied.  This copy is destructive, which means that the current
background character overwrites the old contents of destwin.
To get fine-grained control over the copied region, the second form of
overwrite() can be used. sminrow and smincol are the upper-left coordinates
of the source window, the other variables mark a rectangle in the destination
window.
putwin($self, file, /)
Write all data associated with the window into the provided file object.
This information can be later retrieved using the getwin() function.
redrawln($self, beg, num, /)
Mark the specified lines corrupted.
  beg
    Starting line number.
  num
    The number of lines.
They should be completely redrawn on the next refresh() call.
refresh([pminrow, pmincol, sminrow, smincol, smaxrow, smaxcol])
Update the display immediately.
Synchronize actual screen with previous drawing/deleting methods.
The 6 optional arguments can only be specified when the window is a pad
created with newpad().  The additional parameters are needed to indicate
what part of the pad and screen are involved.  pminrow and pmincol specify
the upper left-hand corner of the rectangle to be displayed in the pad.
sminrow, smincol, smaxrow, and smaxcol specify the edges of the rectangle to
be displayed on the screen.  The lower right-hand corner of the rectangle to
be displayed in the pad is calculated from the screen coordinates, since the
rectangles must be the same size.  Both rectangles must be entirely contained
within their respective structures.  Negative values of pminrow, pmincol,
sminrow, or smincol are treated as if they were zero.
scroll([lines=1])
Scroll the screen or scrolling region.
  lines
    Number of lines to scroll.
Scroll upward if the argument is positive and downward if it is negative.
setscrreg($self, top, bottom, /)
Define a software scrolling region.
  top
    First line number.
  bottom
    Last line number.
All scrolling actions will take place in this region.
subwin([nlines=0, ncols=0,] begin_y, begin_x)
Create a sub-window (screen-relative coordinates).
  nlines
    Height.
  ncols
    Width.
  begin_y
    Top side y-coordinate.
  begin_x
    Left side x-coordinate.
By default, the sub-window will extend from the specified position to the
lower right corner of the window.
touchline(start, count, [changed=True])
Pretend count lines have been changed, starting with line start.
If changed is supplied, it specifies whether the affected lines are marked
as having been changed (changed=True) or unchanged (changed=False).
vline([y, x,] ch, n, [attr=_curses.A_NORMAL])
Display a vertical line.
    Starting Y-coordinate.
    Starting X-coordinate.
  ch
    Character to draw.
    Line length.
  attr
    Attributes for the character.
curses function returned NULL
baudrate($module, /)
Return the output speed of the terminal in bits per second.
beep($module, /)
Emit a short attention sound.
can_change_color($module, /)
Return True if the programmer can change the colors displayed by the terminal.
cbreak($module, flag=True, /)
Enter cbreak mode.
  flag
    If false, the effect is the same as calling nocbreak().
In cbreak mode (sometimes called "rare" mode) normal tty line buffering is
turned off and characters are available to be read one by one.  However,
unlike raw mode, special characters (interrupt, quit, suspend, and flow
control) retain their effects on the tty driver and calling program.
Calling first raw() then cbreak() leaves the terminal in cbreak mode.
color_content($module, color_number, /)
Return the red, green, and blue (RGB) components of the specified color.
  color_number
    The number of the color (0 - (COLORS-1)).
A 3-tuple is returned, containing the R, G, B values for the given color,
which will be between 0 (no component) and 1000 (maximum amount of component).
color_pair($module, pair_number, /)
Return the attribute value for displaying text in the specified color.
  pair_number
    The number of the color pair.
This attribute value can be combined with A_STANDOUT, A_REVERSE, and the
other A_* attributes.  pair_number() is the counterpart to this function.
curs_set($module, visibility, /)
Set the cursor state.
  visibility
    0 for invisible, 1 for normal visible, or 2 for very visible.
If the terminal supports the visibility requested, the previous cursor
state is returned; otherwise, an exception is raised.  On many terminals,
the "visible" mode is an underline cursor and the "very visible" mode is
a block cursor.
def_prog_mode($module, /)
Save the current terminal mode as the "program" mode.
The "program" mode is the mode when the running program is using curses.
Subsequent calls to reset_prog_mode() will restore this mode.
def_shell_mode($module, /)
Save the current terminal mode as the "shell" mode.
The "shell" mode is the mode when the running program is not using curses.
Subsequent calls to reset_shell_mode() will restore this mode.
delay_output($module, ms, /)
Insert a pause in output.
  ms
    Duration in milliseconds.
doupdate($module, /)
Update the physical screen to match the virtual screen.
echo($module, flag=True, /)
Enter echo mode.
  flag
    If false, the effect is the same as calling noecho().
In echo mode, each character input is echoed to the screen as it is entered.
endwin($module, /)
De-initialize the library, and return terminal to normal status.
erasechar($module, /)
Return the user's current erase character.
filter($module, /)
flash($module, /)
Flash the screen.
That is, change it to reverse-video and then change it back in a short interval.
flushinp($module, /)
Flush all input buffers.
This throws away any typeahead that has been typed by the user and has not
yet been processed by the program.
getmouse($module, /)
Retrieve the queued mouse event.
After getch() returns KEY_MOUSE to signal a mouse event, this function
returns a 5-tuple (id, x, y, z, bstate).
ungetmouse($module, id, x, y, z, bstate, /)
Push a KEY_MOUSE event onto the input queue.
The following getmouse() will return the given state data.
getsyx($module, /)
Return the current coordinates of the virtual screen cursor.
Return a (y, x) tuple.  If leaveok is currently true, return (-1, -1).
getwin($module, file, /)
Read window related data stored in the file by an earlier putwin() call.
The routine then creates and initializes a new window using that data,
returning the new window object.
has_colors($module, /)
Return True if the terminal can display colors; otherwise, return False.
has_ic($module, /)
Return True if the terminal has insert- and delete-character capabilities.
has_il($module, /)
Return True if the terminal has insert- and delete-line capabilities.
has_key($module, key, /)
Return True if the current terminal type recognizes a key with that value.
  key
    Key number.
halfdelay($module, tenths, /)
Enter half-delay mode.
  tenths
    Maximal blocking delay in tenths of seconds (1 - 255).
Use nocbreak() to leave half-delay mode.
init_color($module, color_number, r, g, b, /)
Change the definition of a color.
  color_number
    The number of the color to be changed (0 - (COLORS-1)).
    Red component (0 - 1000).
    Green component (0 - 1000).
    Blue component (0 - 1000).
When init_color() is used, all occurrences of that color on the screen
immediately change to the new definition.  This function is a no-op on
most terminals; it is active only if can_change_color() returns true.
init_pair($module, pair_number, fg, bg, /)
Change the definition of a color-pair.
  pair_number
    The number of the color-pair to be changed (1 - (COLOR_PAIRS-1)).
  fg
    Foreground color number (-1 - (COLORS-1)).
  bg
    Background color number (-1 - (COLORS-1)).
If the color-pair was previously initialized, the screen is refreshed and
all occurrences of that color-pair are changed to the new definition.
initscr($module, /)
Initialize the library.
Return a WindowObject which represents the whole screen.
intrflush($module, flag, /)
isendwin($module, /)
Return True if endwin() has been called.
is_term_resized($module, nlines, ncols, /)
Return True if resize_term() would modify the window structure, False otherwise.
  nlines
    Height.
  ncols
    Width.
keyname($module, key, /)
Return the name of specified key.
  key
    Key number.
killchar($module, /)
Return the user's current line kill character.
longname($module, /)
Return the terminfo long name field describing the current terminal.
The maximum length of a verbose description is 128 characters.  It is defined
only after the call to initscr().
meta($module, yes, /)
Enable/disable meta keys.
If yes is True, allow 8-bit characters to be input.  If yes is False,
allow only 7-bit characters.
mouseinterval($module, interval, /)
Set and retrieve the maximum time between press and release in a click.
  interval
    Time in milliseconds.
Set the maximum time that can elapse between press and release events in
order for them to be recognized as a click, and return the previous interval
value.
mousemask($module, newmask, /)
Set the mouse events to be reported, and return a tuple (availmask, oldmask).
Return a tuple (availmask, oldmask).  availmask indicates which of the
specified mouse events can be reported; on complete failure it returns 0.
oldmask is the previous value of the given window's mouse event mask.
If this function is never called, no mouse events are ever reported.
napms($module, ms, /)
Sleep for specified time.
  ms
    Duration in milliseconds.
newpad($module, nlines, ncols, /)
Create and return a pointer to a new pad data structure.
  nlines
    Height.
  ncols
    Width.
newwin(nlines, ncols, [begin_y=0, begin_x=0])
Return a new window.
  nlines
    Height.
  ncols
    Width.
  begin_y
    Top side y-coordinate.
  begin_x
    Left side x-coordinate.
By default, the window will extend from the specified position to the lower
right corner of the screen.
nl($module, flag=True, /)
Enter newline mode.
  flag
    If false, the effect is the same as calling nonl().
This mode translates the return key into newline on input, and translates
newline into return and line-feed on output.  Newline mode is initially on.
nocbreak($module, /)
Leave cbreak mode.
Return to normal "cooked" mode with line buffering.
noecho($module, /)
Leave echo mode.
Echoing of input characters is turned off.
nonl($module, /)
Leave newline mode.
Disable translation of return into newline on input, and disable low-level
translation of newline into newline/return on output.
noqiflush($module, /)
Disable queue flushing.
When queue flushing is disabled, normal flush of input and output queues
associated with the INTR, QUIT and SUSP characters will not be done.
noraw($module, /)
Leave raw mode.
Return to normal "cooked" mode with line buffering.
pair_content($module, pair_number, /)
Return a tuple (fg, bg) containing the colors for the requested color pair.
  pair_number
    The number of the color pair (1 - (COLOR_PAIRS-1)).
pair_number($module, attr, /)
Return the number of the color-pair set by the specified attribute value.
color_pair() is the counterpart to this function.
putp($module, string, /)
Emit the value of a specified terminfo capability for the current terminal.
Note that the output of putp() always goes to standard output.
qiflush($module, flag=True, /)
Enable queue flushing.
  flag
    If false, the effect is the same as calling noqiflush().
If queue flushing is enabled, all output in the display driver queue
will be flushed when the INTR, QUIT and SUSP characters are read.
raw($module, flag=True, /)
Enter raw mode.
  flag
    If false, the effect is the same as calling noraw().
In raw mode, normal line buffering and processing of interrupt, quit,
suspend, and flow control keys are turned off; characters are presented to
curses input functions one by one.
reset_prog_mode($module, /)
Restore the terminal to "program" mode, as previously saved by def_prog_mode().
reset_shell_mode($module, /)
Restore the terminal to "shell" mode, as previously saved by def_shell_mode().
resetty($module, /)
Restore terminal mode.
resizeterm($module, nlines, ncols, /)
Resize the standard and current windows to the specified dimensions.
  nlines
    Height.
  ncols
    Width.
Adjusts other bookkeeping data used by the curses library that record the
window dimensions (in particular the SIGWINCH handler).
resize_term($module, nlines, ncols, /)
Backend function used by resizeterm(), performing most of the work.
  nlines
    Height.
  ncols
    Width.
When resizing the windows, resize_term() blank-fills the areas that are
extended.  The calling application should fill in these areas with appropriate
data.  The resize_term() function attempts to resize all windows.  However,
due to the calling convention of pads, it is not possible to resize these
without additional interaction with the application.
savetty($module, /)
Save terminal mode.
get_escdelay($module, /)
Gets the curses ESCDELAY setting.
Gets the number of milliseconds to wait after reading an escape character,
to distinguish between an individual escape character entered on the
keyboard from escape sequences sent by cursor and function keys.
set_escdelay($module, ms, /)
Sets the curses ESCDELAY setting.
  ms
    length of the delay in milliseconds.
Sets the number of milliseconds to wait after reading an escape character,
to distinguish between an individual escape character entered on the
keyboard from escape sequences sent by cursor and function keys.
get_tabsize($module, /)
Gets the curses TABSIZE setting.
Gets the number of columns used by the curses library when converting a tab
character to spaces as it adds the tab to a window.
set_tabsize($module, size, /)
Sets the curses TABSIZE setting.
  size
    rendered cell width of a tab character.
Sets the number of columns used by the curses library when converting a tab
character to spaces as it adds the tab to a window.
setsyx($module, y, x, /)
Set the virtual screen cursor.
    Y-coordinate.
    X-coordinate.
If y and x are both -1, then leaveok is set.
setupterm($module, /, term=None, fd=-1)
Initialize the terminal.
  term
    Terminal name.
    If omitted, the value of the TERM environment variable will be used.
  fd
    File descriptor to which any initialization sequences will be sent.
    If not supplied, the file descriptor for sys.stdout will be used.
start_color($module, /)
Initializes eight basic colors and global variables COLORS and COLOR_PAIRS.
Must be called if the programmer wants to use colors, and before any other
color manipulation routine is called.  It is good practice to call this
routine right after initscr().
It also restores the colors on the terminal to the values they had when the
terminal was just turned on.
termattrs($module, /)
Return a logical OR of all video attributes supported by the terminal.
termname($module, /)
Return the value of the environment variable TERM, truncated to 14 characters.
tigetflag($module, capname, /)
Return the value of the Boolean capability.
  capname
    The terminfo capability name.
The value -1 is returned if capname is not a Boolean capability, or 0 if
it is canceled or absent from the terminal description.
tigetnum($module, capname, /)
Return the value of the numeric capability.
  capname
    The terminfo capability name.
The value -2 is returned if capname is not a numeric capability, or -1 if
it is canceled or absent from the terminal description.
tigetstr($module, capname, /)
Return the value of the string capability.
  capname
    The terminfo capability name.
None is returned if capname is not a string capability, or is canceled or
absent from the terminal description.
tparm($module, str, i1=0, i2=0, i3=0, i4=0, i5=0, i6=0, i7=0, i8=0,
      i9=0, /)
Instantiate the specified byte string with the supplied parameters.
  str
    Parameterized byte string obtained from the terminfo database.
typeahead($module, fd, /)
Specify that the file descriptor fd be used for typeahead checking.
  fd
    File descriptor.
If fd is -1, then no typeahead checking is done.
unctrl($module, ch, /)
Return a string which is a printable representation of the character ch.
Control characters are displayed as a caret followed by the character,
for example as ^C.  Printing characters are left as they are.
ungetch($module, ch, /)
Push ch so the next getch() will return it.
update_lines_cols($module, /)
unget_wch($module, ch, /)
Push ch so the next get_wch() will return it.
use_env($module, flag, /)
Use environment variables LINES and COLUMNS.
If used, this function should be called before initscr() or newterm() are
called.
When flag is False, the values of lines and columns specified in the terminfo
database will be used, even if environment variables LINES and COLUMNS (used
by default) are set, or if curses is running in a window (in which case
default behavior would be to use the window size if LINES and COLUMNS are
not set).
use_default_colors($module, /)
Allow use of default values for colors on terminals supporting this feature.
Use this to support transparency in your application.  The default color
is assigned to the color number -1.
curses.ncurses_version
Ncurses version information as a named tuple.
_curses.window
_curses._C_API
_C_API
_curses.error
error
version
__version__
ncurses_version
__new__
A_ATTRIBUTES
A_NORMAL
A_STANDOUT
A_UNDERLINE
A_REVERSE
A_BLINK
A_DIM
A_BOLD
A_ALTCHARSET
A_INVIS
A_PROTECT
A_CHARTEXT
A_COLOR
A_HORIZONTAL
A_LEFT
A_LOW
A_RIGHT
A_TOP
A_VERTICAL
A_ITALIC
COLOR_BLACK
COLOR_RED
COLOR_GREEN
COLOR_YELLOW
COLOR_BLUE
COLOR_MAGENTA
COLOR_CYAN
COLOR_WHITE
BUTTON1_PRESSED
BUTTON1_RELEASED
BUTTON1_CLICKED
BUTTON1_DOUBLE_CLICKED
BUTTON1_TRIPLE_CLICKED
BUTTON2_PRESSED
BUTTON2_RELEASED
BUTTON2_CLICKED
BUTTON2_DOUBLE_CLICKED
BUTTON2_TRIPLE_CLICKED
BUTTON3_PRESSED
BUTTON3_RELEASED
BUTTON3_CLICKED
BUTTON3_DOUBLE_CLICKED
BUTTON3_TRIPLE_CLICKED
BUTTON4_PRESSED
BUTTON4_RELEASED
BUTTON4_CLICKED
BUTTON4_DOUBLE_CLICKED
BUTTON4_TRIPLE_CLICKED
BUTTON_SHIFT
BUTTON_CTRL
BUTTON_ALT
ALL_MOUSE_EVENTS
REPORT_MOUSE_POSITION
UNKNOWN KEY
KEY_F(
KEY_MIN
KEY_MAX
addch
addnstr
addstr
attroff
attron
attrset
bkgd
chgat
bkgdset
border
clear
clearok
clrtobot
clrtoeol
cursyncup
delch
deleteln
derwin
echochar
enclose
erase
getbegyx
getbkgd
getch
getkey
get_wch
getmaxyx
getparyx
getstr
getyx
hline
idcok
idlok
immedok
inch
insch
insdelln
insertln
insnstr
insstr
instr
is_linetouched
is_wintouched
keypad
leaveok
move
mvderwin
mvwin
nodelay
notimeout
noutrefresh
overlay
overwrite
putwin
redrawln
redrawwin
refresh
resize
scroll
scrollok
setscrreg
standend
standout
subpad
subwin
syncdown
syncok
syncup
timeout
touchline
touchwin
untouchwin
vline
O:addch
Ol:addch
iiO:addch
iiOl:addch
_curses.window.addch requires 1 to 4 arguments
add_wch
expect bytes or str of length 1, or int, got a str of length %zi
int doesn't fit in long
expect bytes or str of length 1, or int, got %s
byte doesn't fit in chtype
%s() returned ERR
Oi:addnstr
Oil:addnstr
iiOi:addnstr
iiOil:addnstr
_curses.window.addnstr requires 2 to 5 arguments
addnwstr
expect bytes or str, got %s
O:addstr
Ol:addstr
iiO:addstr
iiOl:addstr
_curses.window.addstr requires 1 to 4 arguments
addwstr
integer argument expected, got float
l;attr
il;n,attr
iil;int,int,attr
iiil;int,int,n,attr
chgat requires 1 to 4 arguments
OO:box
_curses.window.box requires 0 to 2 arguments
i;True(1) or False(0)
ii:delch
_curses.window.delch requires 0 to 2 arguments
wdelch
mvwdelch
wdeleteln
ii:derwin
iiii:derwin
_curses.window.derwin requires 2 to 4 arguments
utf-8
werase
ii:getch
_curses.window.getch requires 0 to 2 arguments
ii:getkey
_curses.window.getkey requires 0 to 2 arguments
no input
ii:get_wch
_curses.window.get_wch requires 0 to 2 arguments
'n' must be nonnegative
ii;y,x
iii;y,x,n
getstr requires 0 to 3 arguments
Oi:hline
Oil:hline
iiOi:hline
iiOil:hline
_curses.window.hline requires 2 to 5 arguments
wmove
ii:inch
_curses.window.inch requires 0 to 2 arguments
O:insch
Ol:insch
iiO:insch
iiOl:insch
_curses.window.insch requires 1 to 4 arguments
i;nlines
winsdelln
winsertln
Oi:insnstr
Oil:insnstr
iiOi:insnstr
iiOil:insnstr
_curses.window.insnstr requires 2 to 5 arguments
insn_wstr
O:insstr
Ol:insstr
iiO:insstr
iiOl:insstr
_curses.window.insstr requires 1 to 4 arguments
inswstr
instr requires 0 or 3 arguments
iiiiii:noutrefresh
_curses.window.noutrefresh requires 0 to 6 arguments
noutrefresh() called for a pad requires 6 arguments
pnoutrefresh
noutrefresh() takes no arguments (6 given)
wnoutrefresh
O!:overlay
O!iiiiii:overlay
_curses.window.overlay requires 1 to 7 arguments
copywin
O!:overwrite
O!iiiiii:overwrite
_curses.window.overwrite requires 1 to 7 arguments
write
iiiiii:refresh
_curses.window.refresh requires 0 to 6 arguments
refresh() for a pad requires 6 arguments
prefresh
refresh() takes no arguments (6 given)
ii;lines,columns
wresize
i:scroll
_curses.window.scroll requires 0 to 1 arguments
wsetscrreg
ii:subwin
iiii:subwin
_curses.window.subwin requires 2 to 4 arguments
i;delay
ii:touchline
iii:touchline
_curses.window.touchline requires 2 to 3 arguments
Oi:vline
Oil:vline
iiOi:vline
iiOil:vline
_curses.window.vline requires 2 to 5 arguments
encoding
the typecode character used to create the array
encoding may not be deleted
setting encoding to a non-string
must call (at least) setupterm() first
must call initscr() first
must call start_color() first
_curses
baudrate
beep
can_change_color
cbreak
color_content
color_pair
curs_set
def_prog_mode
def_shell_mode
delay_output
doupdate
echo
endwin
erasechar
filter
flash
flushinp
getmouse
ungetmouse
getsyx
getwin
has_colors
has_ic
has_il
has_key
halfdelay
init_color
init_pair
initscr
intrflush
isendwin
is_term_resized
keyname
killchar
longname
meta
mouseinterval
mousemask
napms
newpad
newwin
nocbreak
noecho
nonl
noqiflush
noraw
pair_content
pair_number
putp
qiflush
reset_prog_mode
reset_shell_mode
resetty
resizeterm
resize_term
savetty
get_escdelay
set_escdelay
get_tabsize
set_tabsize
setsyx
setupterm
start_color
termattrs
termname
tigetflag
tigetnum
tigetstr
tparm
typeahead
unctrl
ungetch
update_lines_cols
unget_wch
use_env
use_default_colors
signed short integer is less than minimum
signed short integer is greater than maximum
Argument 1 was out of range. Check value of COLORS.
color_content() returned ERR
(iii)
getmouse() returned ERR
(hiiik)
argument 5
(ii)
read
f.read() returned %.100s instead of bytes
unsigned byte integer is less than minimum
unsigned byte integer is greater than maximum
ACS_ULCORNER
ACS_LLCORNER
ACS_URCORNER
ACS_LRCORNER
ACS_LTEE
ACS_RTEE
ACS_BTEE
ACS_TTEE
ACS_HLINE
ACS_VLINE
ACS_PLUS
ACS_S1
ACS_S9
ACS_DIAMOND
ACS_CKBOARD
ACS_DEGREE
ACS_PLMINUS
ACS_BULLET
ACS_LARROW
ACS_RARROW
ACS_DARROW
ACS_UARROW
ACS_BOARD
ACS_LANTERN
ACS_BLOCK
ACS_BSSB
ACS_SSBB
ACS_BBSS
ACS_SBBS
ACS_SBSS
ACS_SSSB
ACS_SSBS
ACS_BSSS
ACS_BSBS
ACS_SBSB
ACS_SSSS
ACS_S3
ACS_S7
ACS_LEQUAL
ACS_GEQUAL
ACS_PI
ACS_NEQUAL
ACS_STERLING
LINES
COLS
invalid key number
argument
(kk)
ii:newwin
iiii:newwin
_curses.newwin requires 2 to 4 arguments
Argument 1 was out of range. (0..COLOR_PAIRS-1)
pair_content() returned ERR
y:putp
curses
ms must be > 0
size must be > 0
term
embedded null character
argument 'term'
str or None
stdout
lost sys.stdout
setupterm: unknown error
setupterm: could not find terminal
setupterm: could not find terminfo database
COLORS
COLOR_PAIRS
start_color() returned ERR
y|iiiiiiiii:tparm
tparm() returned NULL
expect str of length 1 or int, got a str of length %zi
character doesn't fit in wchar_t
expect str of length 1 or int, got %s
use_default_colors() returned ERR
curses.ncurses_version
major
Major release number
minor
Minor release number
patch
Patch release number
