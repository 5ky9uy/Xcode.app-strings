close
error
PIPE_BUF
poll
POLLIN
POLLPRI
POLLOUT
POLLERR
POLLHUP
POLLNVAL
POLLRDNORM
POLLRDBAND
POLLWRNORM
POLLWRBAND
kevent
kqueue
KQ_FILTER_READ
KQ_FILTER_WRITE
KQ_FILTER_AIO
KQ_FILTER_VNODE
KQ_FILTER_PROC
KQ_FILTER_SIGNAL
KQ_FILTER_TIMER
KQ_EV_ADD
KQ_EV_DELETE
KQ_EV_ENABLE
KQ_EV_DISABLE
KQ_EV_ONESHOT
KQ_EV_CLEAR
KQ_EV_SYSFLAGS
KQ_EV_FLAG1
KQ_EV_EOF
KQ_EV_ERROR
KQ_NOTE_LOWAT
KQ_NOTE_DELETE
KQ_NOTE_WRITE
KQ_NOTE_EXTEND
KQ_NOTE_ATTRIB
KQ_NOTE_LINK
KQ_NOTE_RENAME
KQ_NOTE_REVOKE
KQ_NOTE_EXIT
KQ_NOTE_FORK
KQ_NOTE_EXEC
KQ_NOTE_PCTRLMASK
KQ_NOTE_PDATAMASK
KQ_NOTE_TRACK
KQ_NOTE_CHILD
KQ_NOTE_TRACKERR
select
timeout must be a float or None
timeout must be non-negative
arguments 1-3 must be sequences
filedescriptor out of range in select()
too many file descriptors in select()
select.poll
register
modify
unregister
timeout must be an integer or None
timeout is too large
concurrent poll() invocation
Cannot create '%.200s' instances
select.kevent
ident
filter
flags
fflags
data
udata
<select.kevent ident=%zu filter=%d flags=0x%x fflags=0x%x data=0x%llx udata=%p>
select.kqueue
closed
True if the kqueue handler is closed
fromfd
fileno
control
integer argument expected, got float
I/O operation on closed kqueue object
Length of eventlist must be 0 or positive, got %d
timeout argument must be a number or None, got %.200s
timeout must be positive or None
changelist is not iterable
changelist is too long
changelist must be an iterable of select.kevent objects
This module supports asynchronous I/O on multiple file descriptors.
*** IMPORTANT NOTICE ***
On Windows, only sockets are supported; on Unix, all file descriptors.
select($module, rlist, wlist, xlist, timeout=None, /)
Wait until one or more file descriptors are ready for some kind of I/O.
The first three arguments are iterables of file descriptors to be waited for:
rlist -- wait until ready for reading
wlist -- wait until ready for writing
xlist -- wait for an "exceptional condition"
If only one kind of condition is required, pass [] for the other lists.
A file descriptor is either a socket or file object, or a small integer
gotten from a fileno() method call on one of those.
The optional 4th argument specifies a timeout in seconds; it may be
a floating point number to specify fractions of seconds.  If it is absent
or None, the call will never time out.
The return value is a tuple of three lists corresponding to the first three
arguments; each contains the subset of the corresponding file descriptors
that are ready.
*** IMPORTANT NOTICE ***
On Windows, only sockets are supported; on Unix, all file
descriptors can be used.
poll($module, /)
Returns a polling object.
This object supports registering and unregistering file descriptors, and then
polling them for I/O events.
register($self, fd,
         eventmask=select.POLLIN | select.POLLPRI | select.POLLOUT, /)
Register a file descriptor with the polling object.
  fd
    either an integer, or an object with a fileno() method returning an int
  eventmask
    an optional bitmask describing the type of events to check for
modify($self, fd, eventmask, /)
Modify an already registered file descriptor.
  fd
    either an integer, or an object with a fileno() method returning
    an int
  eventmask
    a bitmask describing the type of events to check for
unregister($self, fd, /)
Remove a file descriptor being tracked by the polling object.
poll($self, timeout=None, /)
Polls the set of registered file descriptors.
Returns a list containing any descriptors that have events or errors to
report, as a list of (fd, event) 2-tuples.
kevent(ident, filter=KQ_FILTER_READ, flags=KQ_EV_ADD, fflags=0, data=0, udata=0)
This object is the equivalent of the struct kevent for the C API.
See the kqueue manpage for more detailed information about the meaning
of the arguments.
One minor note: while you might hope that udata could store a
reference to a python object, it cannot, because it is impossible to
keep a proper reference count of the object once it's passed into the
kernel. Therefore, I have restricted it to only storing an integer.  I
recommend ignoring it and simply using the 'ident' field to key off
of. You could also set up a dictionary on the python side to store a
udata->object mapping.
O|hHILK:kevent
kqueue()
Kqueue syscall wrapper.
For example, to start watching a socket for input:
>>> kq = kqueue()
>>> sock = socket()
>>> sock.connect((host, port))
>>> kq.control([kevent(sock, KQ_FILTER_WRITE, KQ_EV_ADD)], 0)
To wait one second for it to become writeable:
>>> kq.control(None, 1, 1000)
To stop listening:
>>> kq.control([kevent(sock, KQ_FILTER_WRITE, KQ_EV_DELETE)], 0)
fromfd($type, fd, /)
Create a kqueue object from a given control fd.
close($self, /)
Close the kqueue control file descriptor.
Further operations on the kqueue object will raise an exception.
fileno($self, /)
Return the kqueue control file descriptor.
control($self, changelist, maxevents, timeout=None, /)
Calls the kernel kevent function.
  changelist
    Must be an iterable of kevent objects describing the changes to be made
    to the kernel's watch list or None.
  maxevents
    The maximum number of events that the kernel will return.
  timeout
    The maximum time to wait in seconds, or else None to wait forever.
    This accepts floats for smaller timeouts, too.
!This module supports asynchronous I/O on multiple file descriptors.
*** IMPORTANT NOTICE ***
On Windows, only sockets are supported; on Unix, all file descriptors.
select($module, rlist, wlist, xlist, timeout=None, /)
Wait until one or more file descriptors are ready for some kind of I/O.
The first three arguments are iterables of file descriptors to be waited for:
rlist -- wait until ready for reading
wlist -- wait until ready for writing
xlist -- wait for an "exceptional condition"
If only one kind of condition is required, pass [] for the other lists.
A file descriptor is either a socket or file object, or a small integer
gotten from a fileno() method call on one of those.
The optional 4th argument specifies a timeout in seconds; it may be
a floating point number to specify fractions of seconds.  If it is absent
or None, the call will never time out.
The return value is a tuple of three lists corresponding to the first three
arguments; each contains the subset of the corresponding file descriptors
that are ready.
*** IMPORTANT NOTICE ***
On Windows, only sockets are supported; on Unix, all file
descriptors can be used.
poll($module, /)
Returns a polling object.
This object supports registering and unregistering file descriptors, and then
polling them for I/O events.
register($self, fd,
         eventmask=select.POLLIN | select.POLLPRI | select.POLLOUT, /)
Register a file descriptor with the polling object.
  fd
    either an integer, or an object with a fileno() method returning an int
  eventmask
    an optional bitmask describing the type of events to check for
modify($self, fd, eventmask, /)
Modify an already registered file descriptor.
  fd
    either an integer, or an object with a fileno() method returning
    an int
  eventmask
    a bitmask describing the type of events to check for
unregister($self, fd, /)
Remove a file descriptor being tracked by the polling object.
poll($self, timeout=None, /)
Polls the set of registered file descriptors.
Returns a list containing any descriptors that have events or errors to
report, as a list of (fd, event) 2-tuples.
kevent(ident, filter=KQ_FILTER_READ, flags=KQ_EV_ADD, fflags=0, data=0, udata=0)
This object is the equivalent of the struct kevent for the C API.
See the kqueue manpage for more detailed information about the meaning
of the arguments.
One minor note: while you might hope that udata could store a
reference to a python object, it cannot, because it is impossible to
keep a proper reference count of the object once it's passed into the
kernel. Therefore, I have restricted it to only storing an integer.  I
recommend ignoring it and simply using the 'ident' field to key off
of. You could also set up a dictionary on the python side to store a
udata->object mapping.
O|hHILK:kevent
kqueue()
Kqueue syscall wrapper.
For example, to start watching a socket for input:
>>> kq = kqueue()
>>> sock = socket()
>>> sock.connect((host, port))
>>> kq.control([kevent(sock, KQ_FILTER_WRITE, KQ_EV_ADD)], 0)
To wait one second for it to become writeable:
>>> kq.control(None, 1, 1000)
To stop listening:
>>> kq.control([kevent(sock, KQ_FILTER_WRITE, KQ_EV_DELETE)], 0)
fromfd($type, fd, /)
Create a kqueue object from a given control fd.
close($self, /)
Close the kqueue control file descriptor.
Further operations on the kqueue object will raise an exception.
fileno($self, /)
Return the kqueue control file descriptor.
control($self, changelist, maxevents, timeout=None, /)
Calls the kernel kevent function.
  changelist
    Must be an iterable of kevent objects describing the changes to be made
    to the kernel's watch list or None.
  maxevents
    The maximum number of events that the kernel will return.
  timeout
    The maximum time to wait in seconds, or else None to wait forever.
    This accepts floats for smaller timeouts, too.
close
error
PIPE_BUF
poll
POLLIN
POLLPRI
POLLOUT
POLLERR
POLLHUP
POLLNVAL
POLLRDNORM
POLLRDBAND
POLLWRNORM
POLLWRBAND
kevent
kqueue
KQ_FILTER_READ
KQ_FILTER_WRITE
KQ_FILTER_AIO
KQ_FILTER_VNODE
KQ_FILTER_PROC
KQ_FILTER_SIGNAL
KQ_FILTER_TIMER
KQ_EV_ADD
KQ_EV_DELETE
KQ_EV_ENABLE
KQ_EV_DISABLE
KQ_EV_ONESHOT
KQ_EV_CLEAR
KQ_EV_SYSFLAGS
KQ_EV_FLAG1
KQ_EV_EOF
KQ_EV_ERROR
KQ_NOTE_LOWAT
KQ_NOTE_DELETE
KQ_NOTE_WRITE
KQ_NOTE_EXTEND
KQ_NOTE_ATTRIB
KQ_NOTE_LINK
KQ_NOTE_RENAME
KQ_NOTE_REVOKE
KQ_NOTE_EXIT
KQ_NOTE_FORK
KQ_NOTE_EXEC
KQ_NOTE_PCTRLMASK
KQ_NOTE_PDATAMASK
KQ_NOTE_TRACK
KQ_NOTE_CHILD
KQ_NOTE_TRACKERR
select
timeout must be a float or None
timeout must be non-negative
arguments 1-3 must be sequences
filedescriptor out of range in select()
too many file descriptors in select()
select.poll
register
modify
unregister
timeout must be an integer or None
timeout is too large
concurrent poll() invocation
Cannot create '%.200s' instances
select.kevent
ident
filter
flags
fflags
data
udata
<select.kevent ident=%zu filter=%d flags=0x%x fflags=0x%x data=0x%llx udata=%p>
select.kqueue
closed
True if the kqueue handler is closed
fromfd
fileno
control
integer argument expected, got float
I/O operation on closed kqueue object
Length of eventlist must be 0 or positive, got %d
timeout argument must be a number or None, got %.200s
timeout must be positive or None
changelist is not iterable
changelist is too long
changelist must be an iterable of select.kevent objects
