[blake2b(data=b'', /, *, digest_size=_blake2.blake2b.MAX_DIGEST_SIZE,
        key=b'', salt=b'', person=b'', fanout=1, depth=1, leaf_size=0,
        node_offset=0, node_depth=0, inner_size=0, last_node=False,
        usedforsecurity=True)
Return a new BLAKE2b hash object.
copy($self, /)
Return a copy of the hash object.
digest($self, /)
Return the digest value as a bytes object.
hexdigest($self, /)
Return the digest value as a string of hexadecimal digits.
update($self, data, /)
Update this hash object's state with the provided bytes-like object.
_blake2b provides BLAKE2b for hashlib
blake2s(data=b'', /, *, digest_size=_blake2.blake2s.MAX_DIGEST_SIZE,
        key=b'', salt=b'', person=b'', fanout=1, depth=1, leaf_size=0,
        node_offset=0, node_depth=0, inner_size=0, last_node=False,
        usedforsecurity=True)
Return a new BLAKE2s hash object.
copy($self, /)
Return a copy of the hash object.
digest($self, /)
Return the digest value as a bytes object.
hexdigest($self, /)
Return the digest value as a string of hexadecimal digits.
update($self, data, /)
Update this hash object's state with the provided bytes-like object.
_blake2.blake2b
copy
digest
hexdigest
update
Unicode-objects must be encoded before hashing
object supporting the buffer API required
Buffer must be single dimension
name
block_size
digest_size
blake2b
salt
person
fanout
depth
leaf_size
node_offset
node_depth
inner_size
last_node
usedforsecurity
integer argument expected, got float
argument 'key'
contiguous buffer
argument 'salt'
argument 'person'
digest_size must be between 1 and %d bytes
maximum salt length is %d bytes
maximum person length is %d bytes
fanout must be between 0 and 255
depth must be between 1 and 255
leaf_size is too large
node_depth must be between 0 and 255
inner_size must be between 0 and is %d
maximum key length is %d bytes
SALT_SIZE
PERSON_SIZE
MAX_KEY_SIZE
MAX_DIGEST_SIZE
BLAKE2B_SALT_SIZE
BLAKE2B_PERSON_SIZE
BLAKE2B_MAX_KEY_SIZE
BLAKE2B_MAX_DIGEST_SIZE
BLAKE2S_SALT_SIZE
BLAKE2S_PERSON_SIZE
BLAKE2S_MAX_KEY_SIZE
BLAKE2S_MAX_DIGEST_SIZE
_blake2
_blake2.blake2s
blake2s
node_offset is too large
_blake2.blake2b
copy
digest
hexdigest
update
Unicode-objects must be encoded before hashing
object supporting the buffer API required
Buffer must be single dimension
name
block_size
digest_size
blake2b
salt
person
fanout
depth
leaf_size
node_offset
node_depth
inner_size
last_node
usedforsecurity
integer argument expected, got float
argument 'key'
contiguous buffer
argument 'salt'
argument 'person'
digest_size must be between 1 and %d bytes
maximum salt length is %d bytes
maximum person length is %d bytes
fanout must be between 0 and 255
depth must be between 1 and 255
leaf_size is too large
node_depth must be between 0 and 255
inner_size must be between 0 and is %d
maximum key length is %d bytes
SALT_SIZE
PERSON_SIZE
MAX_KEY_SIZE
MAX_DIGEST_SIZE
BLAKE2B_SALT_SIZE
BLAKE2B_PERSON_SIZE
BLAKE2B_MAX_KEY_SIZE
BLAKE2B_MAX_DIGEST_SIZE
BLAKE2S_SALT_SIZE
BLAKE2S_PERSON_SIZE
BLAKE2S_MAX_KEY_SIZE
BLAKE2S_MAX_DIGEST_SIZE
_blake2
_blake2.blake2s
blake2s
node_offset is too large
blake2b(data=b'', /, *, digest_size=_blake2.blake2b.MAX_DIGEST_SIZE,
        key=b'', salt=b'', person=b'', fanout=1, depth=1, leaf_size=0,
        node_offset=0, node_depth=0, inner_size=0, last_node=False,
        usedforsecurity=True)
Return a new BLAKE2b hash object.
[copy($self, /)
Return a copy of the hash object.
digest($self, /)
Return the digest value as a bytes object.
hexdigest($self, /)
Return the digest value as a string of hexadecimal digits.
update($self, data, /)
Update this hash object's state with the provided bytes-like object.
_blake2b provides BLAKE2b for hashlib
n<blake2s(data=b'', /, *, digest_size=_blake2.blake2s.MAX_DIGEST_SIZE,
        key=b'', salt=b'', person=b'', fanout=1, depth=1, leaf_size=0,
        node_offset=0, node_depth=0, inner_size=0, last_node=False,
        usedforsecurity=True)
Return a new BLAKE2s hash object.
[copy($self, /)
Return a copy of the hash object.
digest($self, /)
Return the digest value as a bytes object.
hexdigest($self, /)
Return the digest value as a string of hexadecimal digits.
update($self, data, /)
Update this hash object's state with the provided bytes-like object.
