--version
llvm-otool(1): Apple Inc. version %s
-arch
missing argument(s) to %s option
unknown architecture specification flag: %s %s
-llvm-mc
-function_offsets
-bind_info
-dyld_info
-dyld_opcodes
-mcpu=
missing argument to -mcpu=
-no-show-raw-insn
-p requires an argument (a text symbol name)
only one -p flag can be specified
-show-objdump-command
-s requires two arguments (a segment name and a section name)
only one -s flag can be specified
unknown char `%c' in flag %s
one of -fahlLtdoOrTMRIHCGScisPx or --version must be specified
can't specify both -q and -Q
at least one file must be specified
__TEXT
__text
__fvmlib_init0
__info_plist
Usage: %s [-arch arch_type] [-fahlLDtdorSTMRIHGvVcXmqQjCP] [-mcpu=arg] [--version] <object file> ...
-f print the fat headers
-a print the archive header
-h print the mach header
-l print the load commands
-L print shared libraries used
-D print shared library id name
-t print the text section (disassemble with -v)
-x print all text sections (disassemble with -v)
-p <routine name>  start dissassemble from routine name
-s <segname> <sectname> print contents of section
-d print the data section
-o print the Objective-C segment
-r print the relocation entries
-S print the table of contents of a library
 (obsolete)
-T print the table of contents of a dynamic shared library
-M print the module table of a dynamic shared library
-R print the reference table of a dynamic shared library
-I print the indirect symbol table
-H print the two-level hints table
-G print the data in code table
-v print verbosely (symbolically) when possible
-V print disassembled operands symbolically
-c print argument strings of a core file
-X print no leading addresses or headers
-m don't use archive(member) syntax
-B force Thumb disassembly (ARM objects only)
-q use llvm's disassembler (the default)
-Q use otool(1)'s disassembler
-mcpu=arg use `arg' as the cpu for disassembly
-j print opcode bytes
-P print the info plist section as strings
-C print linker optimization hints
--version print the version of %s
objdump
llvm-objdump
-macho
-universal-headers
-archive-headers
-archive-member-offsets
-private-header
-private-headers
-disassemble-all
-section
,__text
-disassemble
__TEXT,__text
-full-leading-addr
-print-imm-hex
-dis-symname
-indirect-symbols
-data-in-code
-link-opt-hints
-info-plist
__DATA,__data
for -S functionality, use llvm-nm with -print-armap
-version
-bind
-dylibs-used
-dylib-id
-objc-meta-data
-non-verbose
-no-symbolic-operands
-no-leading-addr
-no-leading-headers
-B functionality not implemented in objdump(1)
-c functionality not implemented in objdump(1)
-W functionality not implemented in objdump(1)
-function-offsets functionality not implemented in objdump(1)
-O functionality obsolete
-T functionality obsolete
-M functionality obsolete
-R functionality obsolete
-i functionality obsolete
-Q functionality obsolete
%s: known architecture flags are:
cputype 1234567890 cpusubtype 1234567890
cputype %u cpusubtype %u
little
ppc64
x86_64
x86_64h
arm64
ppc970-64
arm64_32
arm64e
i386
m68k
hppa
sparc
m88k
i860
ppc601
ppc603
ppc603e
ppc603ev
ppc604
ppc604e
ppc750
ppc7400
ppc7450
ppc970
i486
i486SX
pentium
i586
pentpro
i686
pentIIm3
pentIIm5
pentium4
m68030
m68040
hppa7100LC
veo1
veo2
veo3
veo4
armv4t
armv5
xscale
armv6
armv6m
armv7
armv7f
armv7s
armv7k
armv7m
armv7em
arm64v8
fatal error: %s: 
warning: %s: 
error: %s: 
for architecture: %s 
 (%s)
virtual memory exhausted (malloc failed)
virtual memory exhausted (realloc failed)
+ %s 
can't fork a new process to execute: %s
can't find or exec: %s
wait on forked process %d failed
fatal error in %s
cctools-946
