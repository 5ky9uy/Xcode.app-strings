i386
x86_64
arm64
arm64_32
rbp frame, no saved registers
rbp frame, at -%d:
stack size=0x%08X, 
stack size=%d, 
no registers saved
dwarf offset 0x%08X, 
no unwind information
tbd 
 LSDA
ebp frame, no saved registers
ebp frame, at -%d:
no saved regs
no frame, no saved registers 
stack size=%d: 
d8/9 
std frame: 
old frame: 
std frame(sp adj 4): 
std frame(sp adj 8): 
std frame(sp adj 12): 
r10 
r11 
r12 
 / d8 
 / d8,d10 
 / d8,d10,d12 
 / d8,d10,d12,d14 
 / d12,d14 / d8,d9,d10 
 / d14 / d8,d9,d10,d11,d12
 / d8,d9,d10,d11,d12,d13,d14 
 / unknown D register usage 
unsupported compact unwind
-arch
armv7k
unknown architecture %s
-no_symbols
unknown option: %s
UnwindDump failed: %s
cannot open file
fstat(%s) failed, errno=%d
cannot map file
in universal file, i386 slice does not contain i386 mach-o
in universal file, x86_64 slice does not contain x86_64 mach-o
in universal file, arm64 slice does not contain arm64 mach-o
in universal file, arm64_32 slice does not contain arm64_32 mach-o
in universal file, arm slice does not contain arm mach-o
in universal file, unknown architecture slice 0x%x
not a known file type
%s in %s
not a mach-o file that can be checked
load command #%d extends beyond the end of the load commands
load command #%d extends beyond the end of the file
__unwind_info
__TEXT
__compact_unwind
__LD
Arch: %s, Section: __LD,__compact_unwind (size=0x%08llX, => %lld entries)
0x%08llX:
  start:        0x%08llX   %s
  start:        0x%08llX   %s+0x%X
  end:          0x%08llX   (len=0x%08X)
  unwind info:  0x%08X   %s
  personality:              %s
  lsda:         0x%08llX  %s
  lsda:         0x%08llX  %s+0x%X
--anonymous function--
Arch: %s, Section: __TEXT,__unwind_info (addr=0x%08llX, size=0x%08llX, fileOffset=0x%08X)
version=0x%08X
commonEncodingsArraySectionOffset=0x%08X
commonEncodingsArrayCount=0x%08X
personalityArraySectionOffset=0x%08X
personalityArrayCount=0x%08X
indexSectionOffset=0x%08X
indexCount=0x%08X
common encodings: (count=%u)
encoding[%3u]=0x%08X
personalities: (count=%u)
[%2u]=0x%08X
first level index: (count=%u)
[%2u] funcOffset=0x%08X, pageOffset=0x%08X, lsdaOffset=0x%08X
LSDA table: (section offset 0x%08X, count=%u)
[%3u] funcOffset=0x%08X, lsdaOffset=0x%08X,  %s
BAD LSDA entry (does not start with 0xFF) for %s
second level index[%u] sectionOffset=0x%08X, count=%u, fileOffset=0x%08X
entryPageOffset=0x%08X
entryCount=0x%08X
MISSING LSDA entry for %s
[%3u] funcOffset=0x%08X, encoding=0x%08X (%-56s) %s
encodingsPageOffset=0x%08X
encodingsCount=0x%08X
[%3u] funcOffset=0x%08X, encoding[%3u]=0x%08X (%-56s) %s
bad page header
vector
  personality:
  lsda:
kind=UNWIND_SECOND_LEVEL_COMPRESSED
kind=UNWIND_SECOND_LEVEL_REGULAR
13UnwindPrinterI3x86E
13UnwindPrinterI6x86_64E
13UnwindPrinterI5arm64E
13UnwindPrinterI8arm64_32E
13UnwindPrinterI3armE
#-?T
",>S
EOZdoy
13UnwindPrinterI3x86E
13UnwindPrinterI6x86_64E
13UnwindPrinterI5arm64E
13UnwindPrinterI8arm64_32E
13UnwindPrinterI3armE
i386
x86_64
arm64
arm64_32
rbp frame, no saved registers
rbp frame, at -%d:
stack size=0x%08X, 
stack size=%d, 
no registers saved
dwarf offset 0x%08X, 
no unwind information
tbd 
 LSDA
ebp frame, no saved registers
ebp frame, at -%d:
no saved regs
no frame, no saved registers 
stack size=%d: 
d8/9 
std frame: 
old frame: 
std frame(sp adj 4): 
std frame(sp adj 8): 
std frame(sp adj 12): 
r10 
r11 
r12 
 / d8 
 / d8,d10 
 / d8,d10,d12 
 / d8,d10,d12,d14 
 / d12,d14 / d8,d9,d10 
 / d14 / d8,d9,d10,d11,d12
 / d8,d9,d10,d11,d12,d13,d14 
 / unknown D register usage 
unsupported compact unwind
-arch
armv7k
unknown architecture %s
-no_symbols
unknown option: %s
UnwindDump failed: %s
cannot open file
fstat(%s) failed, errno=%d
cannot map file
in universal file, i386 slice does not contain i386 mach-o
in universal file, x86_64 slice does not contain x86_64 mach-o
in universal file, arm64 slice does not contain arm64 mach-o
in universal file, arm64_32 slice does not contain arm64_32 mach-o
in universal file, arm slice does not contain arm mach-o
in universal file, unknown architecture slice 0x%x
not a known file type
%s in %s
not a mach-o file that can be checked
load command #%d extends beyond the end of the load commands
load command #%d extends beyond the end of the file
__unwind_info
__TEXT
__compact_unwind
__LD
Arch: %s, Section: __LD,__compact_unwind (size=0x%08llX, => %lld entries)
0x%08llX:
  start:        0x%08llX   %s
  start:        0x%08llX   %s+0x%X
  end:          0x%08llX   (len=0x%08X)
  unwind info:  0x%08X   %s
  personality:              %s
  lsda:         0x%08llX  %s
  lsda:         0x%08llX  %s+0x%X
--anonymous function--
Arch: %s, Section: __TEXT,__unwind_info (addr=0x%08llX, size=0x%08llX, fileOffset=0x%08X)
version=0x%08X
commonEncodingsArraySectionOffset=0x%08X
commonEncodingsArrayCount=0x%08X
personalityArraySectionOffset=0x%08X
personalityArrayCount=0x%08X
indexSectionOffset=0x%08X
indexCount=0x%08X
common encodings: (count=%u)
encoding[%3u]=0x%08X
personalities: (count=%u)
[%2u]=0x%08X
first level index: (count=%u)
[%2u] funcOffset=0x%08X, pageOffset=0x%08X, lsdaOffset=0x%08X
LSDA table: (section offset 0x%08X, count=%u)
[%3u] funcOffset=0x%08X, lsdaOffset=0x%08X,  %s
BAD LSDA entry (does not start with 0xFF) for %s
second level index[%u] sectionOffset=0x%08X, count=%u, fileOffset=0x%08X
entryPageOffset=0x%08X
entryCount=0x%08X
MISSING LSDA entry for %s
[%3u] funcOffset=0x%08X, encoding=0x%08X (%-56s) %s
encodingsPageOffset=0x%08X
encodingsCount=0x%08X
[%3u] funcOffset=0x%08X, encoding[%3u]=0x%08X (%-56s) %s
bad page header
vector
  personality:
  lsda:
kind=UNWIND_SECOND_LEVEL_COMPRESSED
kind=UNWIND_SECOND_LEVEL_REGULAR
