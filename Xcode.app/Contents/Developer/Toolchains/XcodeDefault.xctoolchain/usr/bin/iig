%s%s
astrcat
iig/iig.cpp
-1 != result
.iig
implements
const
volatile
restrict
%s:%3d [%03d]
 %s (%s)
                         type[%d] (%s)
                         comment[%d:%d] (%s)
  %s attribute: %s
kernel
native
remote
localonly
serializable
extends=
Construct
other
OSMetaClassBase
void
%s::%s does not override
method:  (%s) %s::%s
overrides: (%s) %s::%s
  %s: attribute: %s
local
localhost
invokereply
reply
queuename=
type=
meth->typeMethod
error: types %s::%s != %s::%s
meth->oneway == meth->typeMethod->oneway
meth->mvirtual || meth->mstatic || meth->localonly
target
param->typeMethod
MACH_MSG_TYPE
OSAction
param->action
NULL == meth->target
%sCount
%s    ((%s) %s)
(in) 
(out)
meth->cls == cls
EmitRPCTypes
meth->msgid
%s_%s_%s
struct %s_Content
    IORPCMessage __hdr;
    kern_return_t __result;
    OSObjectRef  __object;
    
OSObjectRef
%s *
%s%s *
const 
  %s;
    %s __%s[%d];
    uint64_t __replyBuffer[8];
#pragma pack(4)
struct %s
    IORPCMessageMach           mach;
    mach_msg_port_descriptor_t %s__descriptor;
__object
    mach_msg_ool_descriptor_t  %s__descriptor;
    %s_Content content;
#pragma pack()
#define %s_ObjRefs (%d)
typedef union
    const IORPC rpc;
    struct
    {
        const struct %s_%s_Msg * message;
        struct %s_%s_Rpl       * reply;
        uint32_t sendSize;
        uint32_t replySize;
    };
%s_%s_Invocation;
#include <%s>  /* .iig include */
#include <%s>
CopyLines
false
    kern_return_t
    CreateAction%s(size_t referenceSize, OSAction ** action);
    %s%s
static 
virtual 
kern_return_t
    %s(
        IORPC rpc%s
        
 %s%s
        OSDispatchMethod supermethod = NULL
)%s%s;
 const
 APPLE_KEXT_OVERRIDE
#define %s_Methods 
public:
    virtual kern_return_t
    Dispatch(const IORPC rpc) APPLE_KEXT_OVERRIDE;
    static kern_return_t
    _Dispatch(%s * self, const IORPC rpc);
protected:
    /* _Impl methods */
    %s_%s(%s_%s_Args)%s;
Call
Impl
public:
    /* _Invoke methods */
    typedef %s (*%s_Handler)(%s%s%s_%s_Args);
OSMetaClassBase * target
    %s_Invoke(const IORPC rpc,
        OSMetaClassBase * target,
        %s_Handler func);
#define %s_KernelMethods 
protected:
    /* _Impl methods */
    %s_%s(%s_%s_Args);
#define %s_VirtualMethods 
/* iig(%s) generated from %s */
DriverKit-73
/* %s:%d-%d */
/* class %s %s:%d-%d */
EmitHeader
output: %s::%s (%s)
root
override
#define %s_%s_ID            0x%016qxULL
#define %s_%s_Args \
        const IORPC rpc%s
#if !KERNEL
extern OSMetaClass          * g%sMetaClass;
extern const OSClassLoadInformation %s_Class;
class %sMetaClass : public OSMetaClass
public:
    New(OSObject * instance) override;
    Dispatch(const IORPC rpc) override;
#endif /* !KERNEL */
class %sInterface : public OSInterface
public:
    virtual %s
        
)%s = 0;
struct %s_IVars;
struct %s_LocalIVars;
class %s : public %s, public %sInterface
#if KERNEL
    OSDeclareDefaultStructorsWithDispatch(%s);
#endif /* KERNEL */
#if !KERNEL
    friend class %sMetaClass;
    union
        %s_IVars * ivars;
        %s_LocalIVars * lvars;
    virtual const OSMetaClass *
    getMetaClass() const APPLE_KEXT_OVERRIDE { return OSTypeID(%s); };
    using super = %s;
    %s_Methods
    %s_VirtualMethods
/* %s:%d- */
fprintpstrf
len < 256
"\%03o%s"
@iig end
/* %s */
/* @iig end */
#undef
IIG_IMPLEMENTATION
#define
IIG_IMPLEMENTATION 
#include <DriverKit/IOReturn.h>
#include <%s/%s.h>
#include "%s.h"
@iig implementation
OSMetaClass
extern OSMetaClass * g%sMetaClass;
#endif /* !KERNEL */
OSDefineMetaClassAndStructors(%s, %s);
#define %s_QueueNames  ""
    
i24@?0r^v8r^v16
#define %s%s_MethodNames  ""
MetaClass
struct OSClassDescription_%s_t
    OSClassDescription base;
    uint64_t           methodOptions[2 * %ld];
    uint64_t           metaMethodOptions[2 * %ld];
    char               queueNames[sizeof(%s_QueueNames)];
    char               methodNames[sizeof(%s_MethodNames)];
    char               metaMethodNames[sizeof(%sMetaClass_MethodNames)];
const struct OSClassDescription_%s_t
OSClassDescription_%s =
    .base =
        .descriptionSize         = sizeof(OSClassDescription_%s_t),
        .name                    = "%s",
        .superName               = "%s",
        .flags                   = %d*kOSClassCanRemote,
        .methodOptionsSize       = 2 * sizeof(uint64_t) * %ld,
        .metaMethodOptionsSize   = 2 * sizeof(uint64_t) * %ld,
        .queueNamesSize       = sizeof(%s_QueueNames),
        .methodNamesSize         = sizeof(%s_MethodNames),
        .metaMethodNamesSize     = sizeof(%sMetaClass_MethodNames),
        .methodOptionsOffset     = __builtin_offsetof(struct OSClassDescription_%s_t, methodOptions),
        .metaMethodOptionsOffset = __builtin_offsetof(struct OSClassDescription_%s_t, metaMethodOptions),
        .queueNamesOffset     = __builtin_offsetof(struct OSClassDescription_%s_t, queueNames),
        .methodNamesOffset       = __builtin_offsetof(struct OSClassDescription_%s_t, methodNames),
        .metaMethodNamesOffset   = __builtin_offsetof(struct OSClassDescription_%s_t, metaMethodNames),
    },
    .%sethodOptions =
metaM
    {
        0x%016qx,
        %s_%s_ID,
    },
    .queueNames      = %s_QueueNames,
    .methodNames     = %s_MethodNames,
    .metaMethodNames = %sMetaClass_MethodNames,
OSMetaClass * g%sMetaClass;
static kern_return_t
%s_New(OSMetaClass * instance);
const OSClassLoadInformation
%s_Class = 
    .version           = 1,
    .description       = &OSClassDescription_%s.base,
    .instanceSize      = sizeof(%s),
    .metaPointer       = &g%sMetaClass,
    .New               = &%s_New,
extern const void * const
g%s_Declaration;
const void * const
g%s_Declaration
__attribute__((visibility("hidden"),section("__DATA_CONST,__osclassinfo,regular,no_dead_strip")))
    = &%s_Class;
%s_New(OSMetaClass * instance)
    if (!new(instance) %sMetaClass) return (kIOReturnNoMemory);
    return (kIOReturnSuccess);
kern_return_t
%sMetaClass::New(OSObject * instance)
    return (kIOReturnUnderrun);
    if (!new(instance) %s) return (kIOReturnNoMemory);
kern_return_t
%s::Dispatch(const IORPC rpc)
    return _Dispatch(this, rpc);
kern_return_t
%s::MetaClass::Dispatch(const IORPC rpc)
#else /* KERNEL */
kern_return_t
%sMetaClass::Dispatch(const IORPC rpc)
kern_return_t
%s::_Dispatch(%s * self, const IORPC rpc)
    kern_return_t ret = kIOReturnUnsupported;
    IORPCMessage * msg = IORPCMessageFromMach(rpc.message, false);
    switch (msg->msgid)
        case %s_%s_ID:
            ret = %s::%s_Invoke(rpc, &%s::%s_Impl);
            break;
        {
            union {
                %s (%s::*fIn)(%s_%s_Args);
                %s::%s_Handler handler;
            } map;
            map.fIn = &%s::%s_Impl;
            ret = %s::%s_Invoke(rpc, self, map.handler);
        }
        default:
            ret = OSMetaClassBase::Dispatch(rpc);
            ret = self->OSMetaClassBase::Dispatch(rpc);
            ret = %s::_Dispatch(self, rpc);
    }
    return (ret);
%s::CreateAction%s(size_t referenceSize, OSAction ** action)
    kern_return_t ret;
    ret = OSAction::Create(this,
                           %s_%s_ID,
                           referenceSize,
                           action);
    return (ret);
%s::%s%s(
_Call
        OSDispatchMethod supermethod
    kern_return_t ret;
    struct %s_%s_Msg * msg = (typeof(msg)) rpc.reply;
        %s_%s_Msg msg;
        struct
            %s_%s_Rpl rpl;
            mach_msg_max_trailer_t trailer;
        } rpl;
    } buf;
    struct %s_%s_Msg * msg = &buf.msg;
    struct %s_%s_Rpl * rpl = &buf.rpl.rpl;
    memset(msg, 0, sizeof(struct %s_%s_Msg));
    msg->mach.msgh.msgh_id   = %s;
kIORPCVersion190615
    msg->mach.msgh.msgh_size = sizeof(*msg);
    msg->content.__hdr.flags = %d*kIORPCMessageOneway
                             | %d*kIORPCMessageSimpleReply
                             | %d*kIORPCMessageLocalHost
                             | %d*kIORPCMessageOnqueue;
    msg->content.__hdr.msgid = %s_%s_ID;
    msg->content.__object = (OSObjectRef) OSTypeID(%s);
    msg->content.__object = (OSObjectRef) %s;
this
    msg->content.__hdr.objectRefs = %s_%s_Msg_ObjRefs;
    msg->mach.msgh_body.msgh_descriptor_count = %d;
    msg->%s__descriptor.type = MACH_MSG_PORT_DESCRIPTOR;
    msg->%s__descriptor.type = MACH_MSG_PORT_DESCRIPTOR;
    msg->content.%s = (OSObjectRef) %s;
    msg->%s__descriptor.disposition = %s;
    msg->%s__descriptor.name = %s;
    msg->%s__descriptor.type = MACH_MSG_OOL_DESCRIPTOR;
    msg->%s__descriptor.copy = MACH_MSG_VIRTUAL_COPY;
    msg->%s__descriptor.address = (void *) __builtin_offsetof(%s_%s_Msg_Content, %s);
    msg->content.%s = %s;
error: %s::%s oneway with results
char
    strlcpy(&msg->content.__%s[0], %s, sizeof(msg->content.__%s));
    if (%sCount > (sizeof(msg->content.__%s) / sizeof(msg->content.__%s[0]))) return%s;
 kIOReturnOverrun
    bcopy(%s, &msg->content.__%s[0], %sCount * sizeof(msg->content.__%s[0]));
    if (*%sCount > (sizeof(rpl->content.__%s) / sizeof(rpl->content.__%s[0]))) return%s;
    msg->content.%sCount = *%sCount;
    ret = kIOReturnSuccess;
    IORPC rpc = { .message = &buf.msg.mach, .sendSize = sizeof(*msg), .reply = NULL, .replySize = 0 };
    IORPC rpc = { .message = &buf.msg.mach, .sendSize = sizeof(buf.msg), .reply = &buf.rpl.rpl.mach, .replySize = sizeof(buf.rpl) };
    ret = OSMTypeID(%s)->Invoke(rpc);
    ret = %s->Invoke(rpc);
    if (supermethod) ret = supermethod((OSObject *)this, rpc);
    else             ret = ((OSObject *)this)->Invoke(rpc);
    if (kIOReturnSuccess == ret)
    do {
        if (rpl->mach.msgh.msgh_size < 
(sizeof(IORPCMessageMach) + sizeof(IORPCMessage))) { ret = kIOReturnIPCError; break; };
        if (rpl->mach.msgh_body.msgh_descriptor_count >= 1)
            if (rpl->mach.msgh.msgh_size < 
(sizeof(IORPCMessageMach) + sizeof(mach_msg_port_descriptor_t) + sizeof(IORPCMessage))) { ret = kIOReturnIPCError; break; };
        else
            if (rpl->mach.msgh.msgh_size                  != sizeof(*rpl)) { ret = kIOReturnIPCError; break; };
            if (rpl->content.__hdr.msgid                  != %s_%s_ID) { ret = kIOReturnIPCError; break; };
            if (rpl->mach.msgh_body.msgh_descriptor_count != %d) { ret = kIOReturnIPCError; break; };
            if (rpc.reply->%s__descriptor.type != MACH_MSG_PORT_DESCRIPTOR) { ret = kIOReturnIPCError; break; };
            if (rpc.reply->%s__descriptor.disposition != %s) { ret = kIOReturnIPCError; { ret = kIOReturnIPCError; break; }; };
            if (%s_%s_Rpl_ObjRefs   != rpl->content.__hdr.objectRefs) { ret = kIOReturnIPCError; break; };
            ret = rpl->content.__result;
    while (false);
        if (rpl->content.%sCount < *%sCount) *%sCount = rpl->content.%sCount;
        bcopy(&rpl->content.__%s[0], %s, *%sCount * sizeof(rpl->content.__%s[0]));
        *%s = OSDynamicCast(%s, (OSObject *) rpl->content.%s);
        if (rpl->content.%s && !*%s) ret = kIOReturnBadArgument;
        *%s = rpl->%s__descriptor.name;
        if (%s) *%s = rpl->content.%s;
        if (ret == kIOReturnSuccess) {
            IORPCMessage * message;
            OSObject     * object;
            message = IORPCMessageFromMach(rpc.reply, false);
            if ((rpc.reply->msgh_body.msgh_descriptor_count < 1) || !(kIORPCMessageOneway & message->flags)) ret = kIOReturnIPCError;
            object  = (typeof(object)) message->objects[0];
            if (!object) ret = kIOReturnIPCError;
            else
            {
                rpc.sendSize  = rpc.replySize;
                rpc.replySize = 0;
                rpc.reply     = NULL;
                ret = object->Invoke(rpc);
            }
    }
%s::%s_Invoke(const IORPC _rpc,
        %s_Handler func)
    %s_%s_Invocation rpc = { _rpc };
    %s * %s;
    %s %s = (sizeof(rpc.reply->content.__%s) / sizeof(rpc.reply->content.__%s[0]));
    if (%s_%s_Msg_ObjRefs != rpc.message->content.__hdr.objectRefs) return (kIOReturnIPCError);
    %s = OSDynamicCast(%s, (OSObject *) rpc.message->content.%s);
    if (!%s && rpc.message->content.%s) return (kIOReturnBadArgument);
    if (%s > rpc.message->content.%s) %s = rpc.message->content.%s;
    if (strnlen(&rpc.message->content.__%s[0], sizeof(rpc.message->content.__%s)) >= sizeof(rpc.message->content.__%s)) return kIOReturnBadArgument;
    %s(*func)(
ret = 
        %s%s
rpc.rpc,
        &rpc.message->content.__%s[0]
        &rpc.reply->content.__%s[0]
        %s
        rpc.message->%s__descriptor.name
        rpc.message->content.%s
        &%s
        (%s **)&rpc.reply->content.%s
        &rpc.reply->%s__descriptor.name
        &rpc.reply->content.%s
        IORPCMessage * message;
        message = IORPCMessageFromMach(rpc.rpc.reply, false);
        if ((rpc.rpc.reply->msgh_body.msgh_descriptor_count < 1)  || !(kIORPCMessageOneway & message->flags)) ret = kIOReturnIPCError;
    else
        rpc.reply->content.__hdr.msgid = %s_%s_ID;
        rpc.reply->content.__hdr.flags = kIORPCMessageOneway;
        rpc.reply->mach.msgh.msgh_id   = %s;
kIORPCVersion190615Reply
        rpc.reply->mach.msgh.msgh_size = sizeof(*rpc.reply);
        rpc.reply->mach.msgh_body.msgh_descriptor_count = %d;
        rpc.reply->content.__result    = ret;
        if (kIOReturnSuccess == ret)
            rpc.reply->content.__hdr.objectRefs = %s_%s_Rpl_ObjRefs;
            rpc.reply->content.%s = %s;
            rpc.reply->%s__descriptor.type = MACH_MSG_PORT_DESCRIPTOR;
            rpc.reply->%s__descriptor.type = MACH_MSG_OOL_DESCRIPTOR;
            rpc.reply->%s__descriptor.copy = MACH_MSG_VIRTUAL_COPY;
            rpc.reply->%s__descriptor.address = (void *) __builtin_offsetof(%s_%s_Rpl_Content, %s);
            rpc.reply->%s__descriptor.size = 0;
            rpc.reply->%s__descriptor.disposition = %s;
            rpc.reply->content.__hdr.objectRefs = 0;
            rpc.reply->content.%s = 0;
            rpc.reply->%s__descriptor.type        = MACH_MSG_PORT_DESCRIPTOR;
            rpc.reply->%s__descriptor.disposition = MACH_MSG_TYPE_PORT_NONE;
            rpc.reply->%s__descriptor.name        = MACH_PORT_NULL;
            rpc.reply->%s__descriptor.type    = MACH_MSG_OOL_DESCRIPTOR;
            rpc.reply->%s__descriptor.copy    = MACH_MSG_VIRTUAL_COPY;
            rpc.reply->%s__descriptor.address = NULL;
            rpc.reply->%s__descriptor.size    = 0;
            rpc.reply->content.%s = (OSObjectRef) 0;
usage: %s --def <def input file> --header <header output file> --impl <implementation output file> [--log <log file>] [--framework-name <name>] -- <clang args>
header
impl
version
framework-name
h:i:s:
x86_64
-arch
-isysroot
iPhoneOS
WatchOS
BridgeOS
AppleTVOS
arm64
clang: %s
clang_createTranslationUnitFromSourceFile error
compile failed
visit:
construct:
emit:
