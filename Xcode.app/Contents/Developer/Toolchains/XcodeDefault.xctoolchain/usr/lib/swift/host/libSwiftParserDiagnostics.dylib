7oldNode_AA03newB0t
5token_
9newTriviat
yyXlG
$sSY
$s22SwiftParserDiagnostics10TokenErrorP
ySSG
SgGG
yAAy
SgGGADG
Sg_ABt
5lower_AA5uppert
SgSg
SgGGAE_G
Sg_G
SgG_G
Sg_ABt
_SStSg
_SSt
SaySSG
ySSG
Sg_AAt
Sg_ABt
10diagnostic_Say
G12handledNodestG
_AAt
AB_G
10diagnostic_Say
G12handledNodest
10diagnostic_Say
G12handledNodestG
Sg_ABt
$s22SwiftParserDiagnostics0B5ErrorP
$s22SwiftParserDiagnostics0B4NoteP
$s22SwiftParserDiagnostics0B5FixItP
Sg_ABt
_pSg
10diagnostic_Say
G12handledNodestSg
Sg_yyc
Sg_yyc
Sg_SbABc
SbIegnd_
SbIegnr_
_pSg
ySnySiGG
SwiftParserDiagnostics
MultiNodeChange
MissingNodesBasicFormatter
StaticTokenError
StaticTokenWarning
SwiftParserDiagnostics
TokenError
InvalidFloatingPointExponentDigit
Kind
InvalidDigitInIntegerLiteral
SwiftParserDiagnostics
NoNewlinesFormat
HasTokenChecker
MissingNodesError
MatchingOpeningTokenNote
InsertTokenFixIt
NodesDescriptionPart
SwiftParserDiagnostics
MultiLineStringLiteralIndentatinDiagnosticsGenerator
InProgressDiagnostic
SwiftParserDiagnostics
ParserError
ParserNote
ParserFixIt
StaticParserError
AsyncMustPrecedeThrows
AvailabilityConditionInExpression
DuplicateEffectSpecifiers
EffectsSpecifierAfterArrow
ExtaneousCodeAtTopLevel
IdentifierNotAllowedInOperatorName
InvalidIdentifierError
InvalidIndentationInMultiLineStringLiteralError
Kind
MissingAttributeArgument
MissingConditionInStatement
MissingExpressionInStatement
NegatedAvailabilityCondition
SpaceSeparatedIdentifiersError
SpecifierOnParameterName
TokensNotAllowedInOperatorName
TryCannotBeUsed
UnexpectedNodesError
UnknownDirectiveError
EffectSpecifierDeclaredHere
StaticParserNote
StaticParserFixIt
MoveTokensAfterFixIt
MoveTokensInFrontOfFixIt
MoveTokensInFrontOfTypeFixIt
RemoveRedundantFixIt
RemoveNodesFixIt
ReplaceTokensFixIt
SwiftParserDiagnostics
ParseDiagnosticsGenerator
SwiftParserDiagnostics
PresentNodeChecker
PresentMaker
MissingMaker
primitiveChanges
RawValue
editorPlaceholder
equalMustHaveConsistentWhitespaceOnBothSides
expectedBinaryExponentInHexFloatLiteral
expectedClosingBraceInUnicodeEscape
expectedDigitInFloatLiteral
expectedHexCodeInUnicodeEscape
expectedHexDigitInHexLiteral
invalidCharacter
invalidEscapeSequenceInStringLiteral
invalidIdentifierStartCharacter
invalidNumberOfHexDigitsInUnicodeEscape
invalidUtf8
tokenDiagnosticOffsetOverflow
sourceConflictMarker
unexpectedBlockCommentEnd
unicodeCurlyQuote
spaceAtStartOfRegexLiteral
spaceAtEndOfRegexLiteral
multilineRegexClosingNotOnNewline
unprintableAsciiCharacter
unterminatedBlockComment
nonBreakingSpace
nulCharacter
kind
digit
character
binary
octal
decimal
hasToken
missingNodes
openingToken
tokensWithDefaultText
tokenWithoutDefaultText
node
closeQuote
finishedDiagnostics
inProgressDiagnostic
anchor
position
kind
lines
changes
handledNodes
message
messageID
asyncKeywords
throwsKeyword
availabilityCondition
correctSpecifier
unexpectedSpecifier
effectsSpecifiersAfterArrow
extraneousCode
identifier
invalidIdentifier
missingIdentifier
kind
lines
insufficientIndentation
unexpectedSpace
unexpectedTab
attributeName
node
avaialabilityCondition
negatedAvailabilityKeyword
firstToken
additionalTokens
misplacedSpecifiers
tokens
nextToken
unexpectedNodes
unexpected
specifier
movedTokens
after
inFrontOf
removeTokens
nodesToRemove
replaceTokens
replacement
diagnostics
handledNodes
suppressRemainingDiagnostics
hasPresentToken
_TtC22SwiftParserDiagnostics26MissingNodesBasicFormatter
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-5.9.0.114.10/swift-syntax/Sources/SwiftParserDiagnostics/DiagnosticExtensions.swift
Fatal error
unterminated '/*' comment
unprintable ASCII character found in source file
multi-line regex closing delimiter must appear on new line
bare slash regex literal may not end with space
bare slash regex literal may not start with space
unicode curly quote found; use '"' instead
unexpected end of block comment
source control conflict marker in source file
the lexer dicovered an error in this token but was not able to represent its offset due to overflow; please split the token
invalid UTF-8 found in source file
\u{...} escape sequence expects between 1 and 8 hex digits
an identifier cannot begin with this character
invalid escape sequence in literal
invalid character in source file
expected hexadecimal digit (0-9, A-F) in integer literal
expected hexadecimal code in \u{...} escape sequence
expected a digit in floating point exponent
expected '}' in \u{...} escape sequence
hexadecimal floating point literal must end with an exponent
'=' must have consistent whitespace on both sides
editor placeholder in source file
nul character embedded in middle of file
non-breaking space (U+00A0) used instead of regular space
' is not a valid first character in floating point exponent
' is not a valid digit in floating point exponent
' is not a valid hexadecimal digit (0-9, A-F) in integer literal
' is not a valid digit in integer literal
' is not a valid octal digit (0-7) in integer literal
' is not a valid binary digit (0 or 1) in integer literal
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-5.9.0.114.10/swift-syntax/Sources/SwiftParserDiagnostics/MissingNodesError.swift
to match this opening '
_TtC22SwiftParserDiagnostics16NoNewlinesFormat
_TtC22SwiftParserDiagnosticsP33_D814B2AFEC72B63D6ADAFD28B2DCE30C15HasTokenChecker
hasToken
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-5.9.0.114.10/swift-syntax/Sources/SwiftParserDiagnostics/MissingTokenError.swift
Raw string delimiters should only occur in string interpolation and at the end of a string or regex literal
SwiftParserDiagnostics.MultiLineStringLiteralIndentatinDiagnosticsGenerator
init(viewMode:)
_TtC22SwiftParserDiagnostics52MultiLineStringLiteralIndentatinDiagnosticsGenerator
closeQuote
finishedDiagnostics
inProgressDiagnostic
StaticParserError.
all statements inside a switch must be covered by a 'case' or 'default' label
allStatmentsInSwitchMustBeCoveredByCase
associated types cannot be variadic
associatedTypeCannotUsePack
'case' can only appear inside a 'switch' statement or 'enum' declaration
caseOutsideOfSwitchOrEnum
'class' constraint can only appear on protocol declarations
classConstraintCanOnlyBeUsedInProtocol
consecutive declarations on a line must be separated by ';'
consecutiveDeclarationsOnSameLine
consecutive statements on a line must be separated by ';'
consecutiveStatementsOnSameLine
C-style for statement has been removed in Swift 3
'default' cannot be used with a 'where' guard expression
defaultCannotBeUsedWithWhere
'default' label can only appear inside a 'switch' statement
defaultOutsideOfSwitch
deinitializers cannot have a name
deinitCannotHaveName
deinitializers cannot have parameters
deinitCannotHaveParameters
editorPlaceholderInSourceFile
escaped newline at the last line of a multi-line string literal is not allowed
escapedNewlineAtLatlineOfMultiLineStringLiteralNotAllowed
expected expression after 'try'
expectedExpressionAfterTry
expected '=' instead of '==' to assign default value for parameter
expectedAssignmentInsteadOfComparisonOperator
expected '{' or 'if' after 'else'
expectedLeftBraceOrIfAfterElse
expected Sequence expression for for-each loop
expectedSequenceExpressionInForEachLoop
unexpected initializer in pattern; did you mean to use '='?
initializerInPattern
initializers cannot have a name
initializerCannotHaveName
initializers cannot have a result type
initializerCannotHaveResultType
expected 'true' or 'false' after 'assignment'
invalidFlagAfterPrecedenceGroupAssignment
Expected 'none', 'left', or 'right' after 'associativity'
invalidPrecedenceGroupAssociativity
extraneous whitespace after '.' is not permitted
invalidWhitespaceAfterPeriod
expected ',' joining parts of a multi-clause condition
joinConditionsUsingComma
expected ',' joining platforms in availability condition
joinPlatformsUsingComma
parsing has exceeded the maximum nesting level
maximumNestingLevelOverflow
expected ':' and expression after '? ...' in ternary expression
missingColonAndExprInTernaryExpr
expected ':' after '? ...' in ternary expression
missingColonInTernaryExpr
expected ':' or '==' to indicate a conformance or same-type requirement
missingConformanceRequirement
expected async specifier; did you mean 'async'?
expected throwing specifier; did you mean 'throws'?
misspelledThrows
multi-line string literal content must begin on a new line
multiLineStringLiteralMustBeginOnNewLine
multi-line string literal closing delimiter must begin on a new line
multiLineStringLiteralMustHaveClosingDelimiterOnNewLine
operator should not be declared with body
operatorShouldBeDeclaredWithoutBody
Single-quoted string literal found, use '"'
singleQuoteStringLiteral
standalone ';' statements are not allowed
standaloneSemicolonStatement
subscripts cannot have a name
subscriptsCannotHaveNames
too many '#' characters in closing delimiter
tooManyClosingPoundDelimiters
expected additional '#' characters in closing delimiter
tooFewClosingPoundDelimiters
too many '#' characters to start string interpolation
tooManyRawStringDelimitersToStartInterpolation
'try' must be placed on the returned expression
tryMustBePlacedOnReturnedExpr
'try' must be placed on the thrown expression
tryMustBePlacedOnThrownExpr
'try' must be placed on the initial value expression
tryOnInitialValueExpression
ellipsis operator cannot be used with a type parameter pack
typeParameterPackEllipsis
unexpected 'if' keyword following '#else' conditional compilation directive; did you mean '#elseif'?
unexpectedPoundElseSpaceIf
unexpected ';' separator
unexpectedSemicolon
version comparison not needed
versionComparisonNotNeeded
 cannot be used in an expression, only as a condition of 'if' or 'guard'
 conflicts with 
 has already been specified
 must preceed '->'
 is considered an identifier and must not appear within an operator name
' is not a valid identifier
' cannot be used as an identifier here
 can only start with a letter or underscore, not a number
unexpected tab in indentation
unexpected space in indentation
insufficient indentation
 lines in multi-line string literal
 of line in multi-line string literal
expected argument for '@
missing condition in statement
missing condition in 
expected expression in statement
expected expression in 
 cannot be used in an expression; did you mean 
found an unexpected second identifier
found an unexpected second identifier in 
 before a parameter name is not allowed
 is not allowed in operator names
'try' cannot be used with '
use of unknown directive 
StaticParserNote.
should match indentation here
shouldMatchIndentationOfClosingQuote
StaticParserFixIt.
change indentation of this line to match closing delimiter
changeIndentationToMatchClosingDelimiter
insert attribute argument
insertAttributeArguments
insert whitespace
insertWhitespace
join the identifiers together
join the identifiers together with camel-case
joinIdentifiersWithCamelCase
remove extraneous delimiters
removeExtraneousDelimiters
insert additional closing '#' delimiters
insertExtraClosingPounds
remove whitespace
removeExtraneousWhitespace
remove operator body
removeOperatorBody
replace curly quotes with '"'
replaceCurlyQuoteByNormalQuote
replace non-breaking space with ' '
replaceNonBreakingSpaceBySpace
if this name is unavoidable, use backticks to escape it
 in front of type
remove redundant 
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-5.9.0.114.10/swift-syntax/Sources/SwiftParserDiagnostics/ParseDiagnosticsGenerator.swift
SwiftParserDiagnostics.ParseDiagnosticsGenerator
_TtC22SwiftParserDiagnostics25ParseDiagnosticsGenerator
diagnostics
handledNodes
suppressRemainingDiagnostics
_TtC22SwiftParserDiagnostics18PresentNodeChecker
hasPresentToken
_TtC22SwiftParserDiagnostics12PresentMaker
_TtC22SwiftParserDiagnostics12MissingMaker
generic where clause
generic parameter clause
declaration name
trailing closures
trailing closure
called expression
type inheritance clause
inheritance clause
primary associated type clause
precedence group
macro definition
constrained type
function signature
declaration name arguments
declaration base name
parameter pack specifier
default argument
associated values
'yield' statement
wildcard pattern
'while' statement
value binding pattern
ternary operator
@_private argument
@_unavailableFromAsync argument
typealias declaration
effect specifiers
'try' expression
'throw' statement
ternay expression
attribute argument
'switch' statement
suppressed type conformance
argument to '@_specialize
same type requirement
'return' statement
'repeat' statement
'relation' property of precedencegroup
'associativity' property of precedencegroup
'assignment' property of precedencegroup
'#sourceLocation' directive
'#sourceLocation' arguments
postfix expression
parameter clause
variadic expansion
@_originallyDefinedIn arguments
optional chaining
optional binding
operator declaration
opaque return type arguments
Objective-C selector
Objective-C selector piece
named opaque return type
'_move' expression
pattern matching
layout requirement
labeled statement
key path subscript component
key path property component
key path optional component
key path component
inout expression
implicitly unwrapped optional type
@_implements arguemnts
conditional compilation block
conditional compilation clause
'guard' statement
generic parameter
generic argument
generic argument clause
floating literal
'fallthrough' statement
@_expose arguments
@_effects arguments
editor placeholder
@_dynamicReplacement argument
@_documentation arguments
@_documentation argument
'discard' statement
'@differentiable' arguments
differentiability parameters
'@differentiable' argument
differentiability parameter
dictionary element
attribute arguments
'defer' statement
@convention(...) arguments for witness methods
@convention(...) arguments
'continue' statement
conformance requirement
type composition
closure signature
closure parameter
closure capture signature
closure capture item
closure capture specifier
'break' statement
'_borrow' expression
'@backDeployed' arguments
'await' expression
version restriction
'@availability' arguments
availability argument
availability entry
availability condition
associatedtype declaration
accessor specifiers
raw string delimiter
postfix operator
extended delimiter
dollar identifier
SwiftParserDiagnostics
MultiNodeChange
MissingNodesBasicFormatter
#'.26:>BFJN
StaticTokenError
StaticTokenWarning
SwiftParserDiagnostics
TokenError
InvalidFloatingPointExponentDigit
Kind
InvalidDigitInIntegerLiteral
SwiftParserDiagnostics
NoNewlinesFormat
HasTokenChecker
MissingNodesError
MatchingOpeningTokenNote
InsertTokenFixIt
NodesDescriptionPart
9999999
999999999999'
SwiftParserDiagnostics
MultiLineStringLiteralIndentatinDiagnosticsGenerator
InProgressDiagnostic
ffffff5F
SwiftParserDiagnostics
ParserError
ParserNote
ParserFixIt
StaticParserError
AsyncMustPrecedeThrows
AvailabilityConditionInExpression
DuplicateEffectSpecifiers
EffectsSpecifierAfterArrow
ExtaneousCodeAtTopLevel
IdentifierNotAllowedInOperatorName
InvalidIdentifierError
InvalidIndentationInMultiLineStringLiteralError
Kind
MissingAttributeArgument
MissingConditionInStatement
MissingExpressionInStatement
NegatedAvailabilityCondition
SpaceSeparatedIdentifiersError
SpecifierOnParameterName
TokensNotAllowedInOperatorName
TryCannotBeUsed
UnexpectedNodesError
UnknownDirectiveError
EffectSpecifierDeclaredHere
StaticParserNote
StaticParserFixIt
MoveTokensAfterFixIt
MoveTokensInFrontOfFixIt
MoveTokensInFrontOfTypeFixIt
RemoveRedundantFixIt
RemoveNodesFixIt
ReplaceTokensFixIt
SwiftParserDiagnostics
ParseDiagnosticsGenerator
SwiftParserDiagnostics
PresentNodeChecker
PresentMaker
MissingMaker
")28AJS
!$'+.
147:=A
DGNSY^bksvy|
7oldNode_AA03newB0t
5token_
9newTriviat
yyXlG
$sSY
$s22SwiftParserDiagnostics10TokenErrorP
ySSG
SgGG
yAAy
SgGGADG
Sg_ABt
5lower_AA5uppert
SgSg
SgGGAE_G
Sg_G
SgG_G
Sg_ABt
_SStSg
_SSt
SaySSG
ySSG
Sg_AAt
Sg_ABt
10diagnostic_Say
G12handledNodestG
_AAt
AB_G
10diagnostic_Say
G12handledNodest
10diagnostic_Say
G12handledNodestG
Sg_ABt
$s22SwiftParserDiagnostics0B5ErrorP
$s22SwiftParserDiagnostics0B4NoteP
$s22SwiftParserDiagnostics0B5FixItP
Sg_ABt
_pSg
10diagnostic_Say
G12handledNodestSg
Sg_yyc
Sg_yyc
Sg_SbABc
SbIegnd_
SbIegnr_
_pSg
ySnySiGG
primitiveChanges
RawValue
editorPlaceholder
equalMustHaveConsistentWhitespaceOnBothSides
expectedBinaryExponentInHexFloatLiteral
expectedClosingBraceInUnicodeEscape
expectedDigitInFloatLiteral
expectedHexCodeInUnicodeEscape
expectedHexDigitInHexLiteral
invalidCharacter
invalidEscapeSequenceInStringLiteral
invalidIdentifierStartCharacter
invalidNumberOfHexDigitsInUnicodeEscape
invalidUtf8
tokenDiagnosticOffsetOverflow
sourceConflictMarker
unexpectedBlockCommentEnd
unicodeCurlyQuote
spaceAtStartOfRegexLiteral
spaceAtEndOfRegexLiteral
multilineRegexClosingNotOnNewline
unprintableAsciiCharacter
unterminatedBlockComment
nonBreakingSpace
nulCharacter
kind
digit
character
binary
octal
decimal
hasToken
missingNodes
openingToken
tokensWithDefaultText
tokenWithoutDefaultText
node
closeQuote
finishedDiagnostics
inProgressDiagnostic
anchor
position
kind
lines
changes
handledNodes
message
messageID
asyncKeywords
throwsKeyword
availabilityCondition
correctSpecifier
unexpectedSpecifier
effectsSpecifiersAfterArrow
extraneousCode
identifier
invalidIdentifier
missingIdentifier
kind
lines
insufficientIndentation
unexpectedSpace
unexpectedTab
attributeName
node
avaialabilityCondition
negatedAvailabilityKeyword
firstToken
additionalTokens
misplacedSpecifiers
tokens
nextToken
unexpectedNodes
unexpected
specifier
movedTokens
after
inFrontOf
removeTokens
nodesToRemove
replaceTokens
replacement
diagnostics
handledNodes
suppressRemainingDiagnostics
hasPresentToken
_TtC22SwiftParserDiagnostics26MissingNodesBasicFormatter
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-5.9.0.114.10/swift-syntax/Sources/SwiftParserDiagnostics/DiagnosticExtensions.swift
Fatal error
unterminated '/*' comment
unprintable ASCII character found in source file
multi-line regex closing delimiter must appear on new line
bare slash regex literal may not end with space
bare slash regex literal may not start with space
unicode curly quote found; use '"' instead
unexpected end of block comment
source control conflict marker in source file
the lexer dicovered an error in this token but was not able to represent its offset due to overflow; please split the token
invalid UTF-8 found in source file
\u{...} escape sequence expects between 1 and 8 hex digits
an identifier cannot begin with this character
invalid escape sequence in literal
invalid character in source file
expected hexadecimal digit (0-9, A-F) in integer literal
expected hexadecimal code in \u{...} escape sequence
expected a digit in floating point exponent
expected '}' in \u{...} escape sequence
hexadecimal floating point literal must end with an exponent
'=' must have consistent whitespace on both sides
editor placeholder in source file
nul character embedded in middle of file
non-breaking space (U+00A0) used instead of regular space
' is not a valid first character in floating point exponent
' is not a valid digit in floating point exponent
' is not a valid hexadecimal digit (0-9, A-F) in integer literal
' is not a valid digit in integer literal
' is not a valid octal digit (0-7) in integer literal
' is not a valid binary digit (0 or 1) in integer literal
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-5.9.0.114.10/swift-syntax/Sources/SwiftParserDiagnostics/MissingNodesError.swift
to match this opening '
_TtC22SwiftParserDiagnostics16NoNewlinesFormat
_TtC22SwiftParserDiagnosticsP33_D814B2AFEC72B63D6ADAFD28B2DCE30C15HasTokenChecker
hasToken
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-5.9.0.114.10/swift-syntax/Sources/SwiftParserDiagnostics/MissingTokenError.swift
Raw string delimiters should only occur in string interpolation and at the end of a string or regex literal
SwiftParserDiagnostics.MultiLineStringLiteralIndentatinDiagnosticsGenerator
init(viewMode:)
_TtC22SwiftParserDiagnostics52MultiLineStringLiteralIndentatinDiagnosticsGenerator
closeQuote
finishedDiagnostics
inProgressDiagnostic
StaticParserError.
all statements inside a switch must be covered by a 'case' or 'default' label
allStatmentsInSwitchMustBeCoveredByCase
associated types cannot be variadic
associatedTypeCannotUsePack
'case' can only appear inside a 'switch' statement or 'enum' declaration
caseOutsideOfSwitchOrEnum
'class' constraint can only appear on protocol declarations
classConstraintCanOnlyBeUsedInProtocol
consecutive declarations on a line must be separated by ';'
consecutiveDeclarationsOnSameLine
consecutive statements on a line must be separated by ';'
consecutiveStatementsOnSameLine
C-style for statement has been removed in Swift 3
'default' cannot be used with a 'where' guard expression
defaultCannotBeUsedWithWhere
'default' label can only appear inside a 'switch' statement
defaultOutsideOfSwitch
deinitializers cannot have a name
deinitCannotHaveName
deinitializers cannot have parameters
deinitCannotHaveParameters
editorPlaceholderInSourceFile
escaped newline at the last line of a multi-line string literal is not allowed
escapedNewlineAtLatlineOfMultiLineStringLiteralNotAllowed
expected expression after 'try'
expectedExpressionAfterTry
expected '=' instead of '==' to assign default value for parameter
expectedAssignmentInsteadOfComparisonOperator
expected '{' or 'if' after 'else'
expectedLeftBraceOrIfAfterElse
expected Sequence expression for for-each loop
expectedSequenceExpressionInForEachLoop
unexpected initializer in pattern; did you mean to use '='?
initializerInPattern
initializers cannot have a name
initializerCannotHaveName
initializers cannot have a result type
initializerCannotHaveResultType
expected 'true' or 'false' after 'assignment'
invalidFlagAfterPrecedenceGroupAssignment
Expected 'none', 'left', or 'right' after 'associativity'
invalidPrecedenceGroupAssociativity
extraneous whitespace after '.' is not permitted
invalidWhitespaceAfterPeriod
expected ',' joining parts of a multi-clause condition
joinConditionsUsingComma
expected ',' joining platforms in availability condition
joinPlatformsUsingComma
parsing has exceeded the maximum nesting level
maximumNestingLevelOverflow
expected ':' and expression after '? ...' in ternary expression
missingColonAndExprInTernaryExpr
expected ':' after '? ...' in ternary expression
missingColonInTernaryExpr
expected ':' or '==' to indicate a conformance or same-type requirement
missingConformanceRequirement
expected async specifier; did you mean 'async'?
expected throwing specifier; did you mean 'throws'?
misspelledThrows
multi-line string literal content must begin on a new line
multiLineStringLiteralMustBeginOnNewLine
multi-line string literal closing delimiter must begin on a new line
multiLineStringLiteralMustHaveClosingDelimiterOnNewLine
operator should not be declared with body
operatorShouldBeDeclaredWithoutBody
Single-quoted string literal found, use '"'
singleQuoteStringLiteral
standalone ';' statements are not allowed
standaloneSemicolonStatement
subscripts cannot have a name
subscriptsCannotHaveNames
too many '#' characters in closing delimiter
tooManyClosingPoundDelimiters
expected additional '#' characters in closing delimiter
tooFewClosingPoundDelimiters
too many '#' characters to start string interpolation
tooManyRawStringDelimitersToStartInterpolation
'try' must be placed on the returned expression
tryMustBePlacedOnReturnedExpr
'try' must be placed on the thrown expression
tryMustBePlacedOnThrownExpr
'try' must be placed on the initial value expression
tryOnInitialValueExpression
ellipsis operator cannot be used with a type parameter pack
typeParameterPackEllipsis
unexpected 'if' keyword following '#else' conditional compilation directive; did you mean '#elseif'?
unexpectedPoundElseSpaceIf
unexpected ';' separator
unexpectedSemicolon
version comparison not needed
versionComparisonNotNeeded
 cannot be used in an expression, only as a condition of 'if' or 'guard'
 conflicts with 
 has already been specified
 must preceed '->'
 is considered an identifier and must not appear within an operator name
' is not a valid identifier
' cannot be used as an identifier here
 can only start with a letter or underscore, not a number
unexpected tab in indentation
unexpected space in indentation
insufficient indentation
 lines in multi-line string literal
 of line in multi-line string literal
expected argument for '@
missing condition in statement
missing condition in 
expected expression in statement
expected expression in 
 cannot be used in an expression; did you mean 
found an unexpected second identifier
found an unexpected second identifier in 
 before a parameter name is not allowed
 is not allowed in operator names
'try' cannot be used with '
use of unknown directive 
StaticParserNote.
should match indentation here
shouldMatchIndentationOfClosingQuote
StaticParserFixIt.
change indentation of this line to match closing delimiter
changeIndentationToMatchClosingDelimiter
insert attribute argument
insertAttributeArguments
insert whitespace
insertWhitespace
join the identifiers together
join the identifiers together with camel-case
joinIdentifiersWithCamelCase
remove extraneous delimiters
removeExtraneousDelimiters
insert additional closing '#' delimiters
insertExtraClosingPounds
remove whitespace
removeExtraneousWhitespace
remove operator body
removeOperatorBody
replace curly quotes with '"'
replaceCurlyQuoteByNormalQuote
replace non-breaking space with ' '
replaceNonBreakingSpaceBySpace
if this name is unavoidable, use backticks to escape it
 in front of type
remove redundant 
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/swiftlang/swiftlang-5.9.0.114.10/swift-syntax/Sources/SwiftParserDiagnostics/ParseDiagnosticsGenerator.swift
SwiftParserDiagnostics.ParseDiagnosticsGenerator
_TtC22SwiftParserDiagnostics25ParseDiagnosticsGenerator
diagnostics
handledNodes
suppressRemainingDiagnostics
_TtC22SwiftParserDiagnostics18PresentNodeChecker
hasPresentToken
_TtC22SwiftParserDiagnostics12PresentMaker
_TtC22SwiftParserDiagnostics12MissingMaker
generic where clause
generic parameter clause
declaration name
trailing closures
trailing closure
called expression
type inheritance clause
inheritance clause
primary associated type clause
precedence group
macro definition
constrained type
function signature
declaration name arguments
declaration base name
parameter pack specifier
default argument
associated values
'yield' statement
wildcard pattern
'while' statement
value binding pattern
ternary operator
@_private argument
@_unavailableFromAsync argument
typealias declaration
effect specifiers
'try' expression
'throw' statement
ternay expression
attribute argument
'switch' statement
suppressed type conformance
argument to '@_specialize
same type requirement
'return' statement
'repeat' statement
'relation' property of precedencegroup
'associativity' property of precedencegroup
'assignment' property of precedencegroup
'#sourceLocation' directive
'#sourceLocation' arguments
postfix expression
parameter clause
variadic expansion
@_originallyDefinedIn arguments
optional chaining
optional binding
operator declaration
opaque return type arguments
Objective-C selector
Objective-C selector piece
named opaque return type
'_move' expression
pattern matching
layout requirement
labeled statement
key path subscript component
key path property component
key path optional component
key path component
inout expression
implicitly unwrapped optional type
@_implements arguemnts
conditional compilation block
conditional compilation clause
'guard' statement
generic parameter
generic argument
generic argument clause
floating literal
'fallthrough' statement
@_expose arguments
@_effects arguments
editor placeholder
@_dynamicReplacement argument
@_documentation arguments
@_documentation argument
'discard' statement
'@differentiable' arguments
differentiability parameters
'@differentiable' argument
differentiability parameter
dictionary element
attribute arguments
'defer' statement
@convention(...) arguments for witness methods
@convention(...) arguments
'continue' statement
conformance requirement
type composition
closure signature
closure parameter
closure capture signature
closure capture item
closure capture specifier
'break' statement
'_borrow' expression
'@backDeployed' arguments
'await' expression
version restriction
'@availability' arguments
availability argument
availability entry
availability condition
associatedtype declaration
accessor specifiers
raw string delimiter
postfix operator
extended delimiter
dollar identifier
