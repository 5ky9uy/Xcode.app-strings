<unknown>
%s runtime error: %s%s
%s note: %s
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_diag.cc
((nullptr)) == ((suppression_ctx))
((suppression_ctx)) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_diag.h
((NumArgs != MaxArgs)) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/../sanitizer_common/sanitizer_mutex.h
((atomic_load(&state_, memory_order_relaxed))) == ((1))
InternalScopedBuffer
'%s'
%lld
%llu
undefined-behavior
null-pointer-use
pointer-overflow
misaligned-pointer-use
insufficient-object-size
signed-integer-overflow
unsigned-integer-overflow
integer-divide-by-zero
float-divide-by-zero
invalid-shift-base
invalid-shift-exponent
out-of-bounds-index
unreachable-call
missing-return
non-positive-vla-index
float-cast-overflow
invalid-bool-load
invalid-enum-load
function-type-mismatch
invalid-null-return
invalid-null-argument
dynamic-type-mismatch
cfi-bad-type
((0 && "unknown ErrorType!")) != (0)
[31m
[30m
<memory cannot be printed>
%s%02x
[32m
((isMemoryLocation())) != (0)
undefined
null
alignment
object-size
shift-base
shift-exponent
bounds
unreachable
return
vla-bound
bool
enum
function
returns-nonnull-attribute
nonnull-attribute
vptr
UndefinedBehaviorSanitizer
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_init.cc
((UBSAN_MODE_PLUGIN)) != ((ubsan_mode))
((UBSAN_MODE_UNKNOWN)) == ((ubsan_mode))
halt_on_error
Crash the program after printing the first error report
print_stacktrace
Include full stacktrace into an error report
suppressions
Suppressions file name.
report_error_type
Print specific error type instead of 'undefined-behavior' in summary.
UBSAN_SYMBOLIZER_PATH
UBSAN_OPTIONS
false
true
ERROR: Invalid value for bool option: '%s'
load of
store to
reference binding to
member access within
member call on
constructor call on
downcast of
upcast of
cast to virtual base of
_Nonnull binding to
%0 null pointer of type %1
%0 misaligned address %1 for type %3, which requires %2 byte alignment
%0 address %1 with insufficient space for an object of type %2
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_handlers.cc
((0 && "unexpected error type!")) != (0)
pointer points here
((CallerPC)) != (0)
negation of %0 cannot be represented in type %1; cast to an unsigned type to negate this value to itself
negation of %0 cannot be represented in type %1
division of %0 by -1 cannot be represented in type %1
division by zero
shift exponent %0 is negative
shift exponent %0 is too large for %1-bit type %2
left shift of negative value %0
left shift of %0 by %1 places cannot be represented in type %2
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_value.h
((isIntegerTy())) != (0)
index %0 out of bounds for type %1
execution reached a __builtin_unreachable() call
execution reached the end of a value-returning function without returning a value
variable length array bound evaluates to non-positive value %0
%0 is outside the range of representable values of type %2
'bool'
'BOOL'
load of value %0, which is not a valid value for type %1
(unknown)
call to function %0 through pointer to incorrect function type %1
%0 defined here
((0 && "source location pointer is null!")) != (0)
null pointer returned from function declared to never return null
%0 specified here
returns_nonnull attribute
_Nonnull return type annotation
null pointer passed as argument %0, which is declared to never be null
nonnull attribute
_Nonnull type annotation
addition of unsigned offset to %0 overflowed to %1
subtraction of unsigned offset from %0 overflowed to %1
pointer index expression with base %0 overflowed to %1
control flow integrity check for type %0 failed during indirect function call
%0 integer overflow: %1 %2 %3 cannot be represented in type %4
signed
unsigned
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_monitor.cc
((0 && "Invalid arguments passed to __ubsan_get_current_report_data")) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_value.cc
((getType().isSignedIntegerTy())) != (0)
((0 && "libclang_rt.ubsan was built without __int128 support")) != (0)
((0 && "unexpected bit width")) != (0)
((getType().isUnsignedIntegerTy())) != (0)
((Val >= 0)) != (0)
((getType().isFloatTy())) != (0)
((0 && "unexpected floating point bit width")) != (0)
virtual call
non-virtual call
base-to-derived cast
cast to unrelated type
control flow integrity check for type %0 failed during %1 (vtable address %2)
invalid vtable in module %0
invalid vtable
vtable is of type %0
%0 address %1 which does not point to an object of type %2
object has a possibly invalid vptr: abs(offset to top) too big
possibly invalid vptr
object has invalid vptr
invalid vptr
object is of type %0
vptr for %0
object is base class subobject at offset %0 within object of type %1
vptr for %2 base class of %1
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator.cc
((kBlockMagic)) == ((((u64*)addr)[0]))
Allocate
((allocated_end_ - allocated_current_ >= (sptr)size)) != (0)
%s's allocator is terminating the process instead of returning 0
If you don't like this behavior set allocator_may_return_null=1
((0)) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_combined.h
((reinterpret_cast<uptr>(res) & (alignment - 1))) == ((0))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_local_cache.h
((class_id)) != ((0UL))
((class_id)) < ((kNumClasses))
((b->Count())) > ((0))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h
((!sci->free_list.empty())) != (0)
SizeClassAllocator32
((0U)) == (((res & (kRegionSize - 1))))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_bytemap.h
((0U)) == ((map_[idx]))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_common.h
((x)) != ((0U))
((count_)) <= ((kMaxNumCached))
((c->max_count)) != ((0UL))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_secondary.h
((IsPowerOfTwo(alignment))) != (0)
LargeMmapAllocator
((IsAligned(map_beg, page_size_))) != (0)
((IsAligned(res, alignment))) != (0)
((IsAligned(res, page_size_))) != (0)
((res + size)) >= ((map_beg))
((res + size)) <= ((map_end))
((size_log)) < (((sizeof(stats.by_size_log)/sizeof((stats.by_size_log)[0]))))
((idx)) < ((kMaxNumChunks))
((IsAligned(p, page_size_))) != (0)
((PointerIsMine(p))) != (0)
((chunks_[idx])) == ((h))
((idx)) < ((n_chunks_))
((nearest_chunk)) >= ((h->map_beg))
((nearest_chunk)) < ((h->map_beg + h->map_size))
((nearest_chunk)) <= ((p))
((IsAligned((uptr)h, page_size_))) != (0)
IsPowerOfTwo(boundary)
SanitizerTool
%s.%s.%zu
%s.%zu
ERROR: Can't open file: 
ERROR: Path is too long: %c%c%c%c%c%c%c%c...
stdout
stderr
ERROR: Failed to mmap
ERROR: %s failed to %s 0x%zx (%zd) bytes of %s (error code: %d)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_common.cc
((0 && "unable to mmap")) != (0)
ReadFileToBuffer
SUMMARY: %s: %s
%L %F
((s)) >= ((z))
(total_mmaped >> 20) < common_flags()->mmap_limit_mb
PATH
Command: 
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_mutex.h
deadlock detector
WARNING: too long mutex cycle found
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector1.cc
((m->id)) == ((path[0]))
((!dd.isHeld(&lt->dd, m->id))) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector.h
((available_nodes_.empty())) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h
((!empty())) != (0)
((idx)) < ((size()))
((idx)) <= ((size()))
((epoch_)) == ((current_epoch))
((node)) >= ((size()))
((current_epoch_)) == ((nodeToEpoch(node)))
((!tmp_bv_.getBit(idx))) != (0)
((path[0])) == ((cur_node))
((it1_.hasNext())) != (0)
((it2_.hasNext())) != (0)
((n_recursive_locks)) < (((sizeof(recursive_locks)/sizeof((recursive_locks)[0]))))
((n_all_locks_)) < (((sizeof(all_locks_with_contexts_)/sizeof((all_locks_with_contexts_)[0]))))
((!available_nodes_.getBit(idx))) != (0)
((recycled_nodes_.setBit(idx))) != (0)
auto
DEFAULT
sancov
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_flags.cc
((base)) != (0)
((out < out_end - 1)) != (0)
include
read more options from the given file
include_if_exists
read more options from the given file (if it exists)
symbolize
If set, use the online symbolizer from common sanitizer runtime to turn virtual addresses to file/line locations.
external_symbolizer_path
Path to external symbolizer. If empty, the tool will search $PATH for the symbolizer.
allow_addr2line
If set, allows online symbolizer to run addr2line binary to symbolize stack traces (addr2line will only be used if llvm-symbolizer binary is unavailable.
strip_path_prefix
Strips this prefix from file paths in error reports.
fast_unwind_on_check
If available, use the fast frame-pointer-based unwinder on internal CHECK failures.
fast_unwind_on_fatal
If available, use the fast frame-pointer-based unwinder on fatal errors.
fast_unwind_on_malloc
If available, use the fast frame-pointer-based unwinder on malloc/free.
handle_ioctl
Intercept and handle ioctl requests.
malloc_context_size
Max number of stack frames kept for each allocation/deallocation.
log_path
Write logs to "log_path.pid". The special values are "stdout" and "stderr". The default is "stderr".
log_exe_name
Mention name of executable when reporting error and append executable name to logs (as in "log_path.exe_name.pid").
log_to_syslog
Write all sanitizer output to syslog in addition to other means of logging.
verbosity
Verbosity level (0 - silent, 1 - a bit of output, 2+ - more output).
detect_leaks
Enable memory leak detection.
leak_check_at_exit
Invoke leak checking in an atexit handler. Has no effect if detect_leaks=false, or if __lsan_do_leak_check() is called before the handler has a chance to run.
allocator_may_return_null
If false, the allocator will crash instead of returning 0 on out-of-memory.
print_summary
If false, disable printing error summaries in addition to error reports.
print_module_map
OS X only. 0 = don't print, 1 = print only once before process exits, 2 = print after each report.
check_printf
Check printf arguments.
handle_segv
If set, registers the tool's custom SIGSEGV/SIGBUS handler.
handle_abort
If set, registers the tool's custom SIGABRT handler.
handle_sigill
If set, registers the tool's custom SIGILL handler.
handle_sigfpe
If set, registers the tool's custom SIGFPE handler.
allow_user_segv_handler
If set, allows user to register a SEGV handler even if the tool registers one.
use_sigaltstack
If set, uses alternate stack for signal handling.
detect_deadlocks
If set, deadlock detection is enabled.
clear_shadow_mmap_threshold
Large shadow regions are zero-filled using mmap(NORESERVE) instead of memset(). This is the threshold size in bytes.
color
Colorize reports: (always|never|auto).
legacy_pthread_cond
Enables support for dynamic libraries linked with libpthread 2.2.5.
intercept_tls_get_addr
Intercept __tls_get_addr.
help
Print the flag descriptions.
mmap_limit_mb
Limit the amount of mmap-ed memory (excluding shadow) in Mb; not a user-facing flag, used mosly for testing the tools
hard_rss_limit_mb
Hard RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS and aborts the process if the limit is reached
soft_rss_limit_mb
Soft RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS. If the limit is reached all subsequent malloc/new calls will fail or return NULL (depending on the value of allocator_may_return_null) until the RSS goes below the soft limit. This limit does not affect memory allocations other than malloc/new.
heap_profile
Experimental heap profiler, asan-only
allocator_release_to_os_interval_ms
Experimental. Only affects a 64-bit allocator. If set, tries to release unused memory to the OS, but not more often than this interval (in milliseconds). Negative values mean do not attempt to release memory to the OS.
can_use_proc_maps_statm
If false, do not attempt to read /proc/maps/statm. Mostly useful for testing sanitizers.
coverage
If set, coverage information will be dumped at program shutdown (if the coverage instrumentation was enabled at compile time).
coverage_pcs
If set (and if 'coverage' is set too), the coverage information will be dumped as a set of PC offsets for every module.
coverage_order_pcs
If true, the PCs will be dumped in the order they've appeared during the execution.
coverage_bitset
If set (and if 'coverage' is set too), the coverage information will also be dumped as a bitset to a separate file.
coverage_counters
If set (and if 'coverage' is set too), the bitmap that corresponds to coverage counters will be dumped.
coverage_direct
If set, coverage information will be dumped directly to a memory mapped file. This way data is not lost even if the process is suddenly killed.
coverage_dir
Target directory for coverage dumps. Defaults to the current directory.
full_address_space
Sanitize complete address space; by default kernel area on 32-bit platforms will not be sanitized
print_suppressions
Print matched suppressions at exit.
disable_coredump
Disable core dumping. By default, disable_coredump=1 on 64-bit to avoid dumping a 16T+ core file. Ignored on OSes that don't dump core by default and for sanitizers that don't reserve lots of virtual memory.
use_madv_dontdump
If set, instructs kernel to not store the (huge) shadow in core file.
symbolize_inline_frames
Print inlined frames in stacktraces. Defaults to true.
symbolize_vs_style
Print file locations in Visual Studio style (e.g:  file(10,42): ...
dedup_token_length
If positive, after printing a stack trace also print a short string token based on this number of frames that will simplify deduplication of the reports. Example: 'DEDUP_TOKEN: foo-bar-main'. Default is 0.
stack_trace_format
Format string used to render stack frames. See sanitizer_stacktrace_printer.h for the format description. Use DEFAULT to get default format.
no_huge_pages_for_shadow
If true, the shadow is not allowed to use huge pages. 
strict_string_checks
If set check that string arguments are properly null-terminated
intercept_strstr
If set, uses custom wrappers for strstr and strcasestr functions to find more errors.
intercept_strspn
If set, uses custom wrappers for strspn and strcspn function to find more errors.
intercept_strpbrk
If set, uses custom wrappers for strpbrk function to find more errors.
intercept_strlen
If set, uses custom wrappers for strlen and strnlen functions to find more errors.
intercept_strchr
If set, uses custom wrappers for strchr, strchrnul, and strrchr functions to find more errors.
intercept_memcmp
If set, uses custom wrappers for memcmp function to find more errors.
strict_memcmp
If true, assume that memcmp(p1, p2, n) always reads n bytes before comparing p1 and p2.
intercept_memmem
If set, uses a wrapper for memmem() to find more errors.
intercept_intrin
If set, uses custom wrappers for memset/memcpy/memmove intrinsics to find more errors.
intercept_stat
If set, uses custom wrappers for *stat functions to find more errors.
intercept_send
If set, uses custom wrappers for send* functions to find more errors.
decorate_proc_maps
If set, decorate sanitizer mappings in /proc/self/maps with user-readable names
exitcode
Override the program exit status if the tool found an error
abort_on_error
If set, the tool calls abort() instead of _exit() after printing the error report.
suppress_equal_pcs
Deduplicate multiple reports for single source location in halt_on_error=false mode (asan only).
print_cmdline
Print command line on crash (asan only).
html_cov_report
Generate html coverage report.
sancov_path
Sancov tool location.
FlagHandlerInclude
ERROR: Invalid value for int option: '%s'
ERROR: Invalid value for uptr option: '%s'
Available flags for %s:
- %s
ERROR: %s
expected '='
unterminated string
Flag parsing failed.
Failed to read options from '%s': error %d
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_flag_parser.cc
((n_flags_)) < ((kMaxFlags))
WARNING: found %d unrecognized flag(s):
    %s
((n_unknown_flags_)) < ((kMaxUnknownFlags))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_libc.cc
(((reinterpret_cast<uptr>(s) | n) & 15)) == ((0))
((base)) == ((10))
((size)) <= ((1ULL << (30)))
%s: too many ignored libraries (max: %d)
%s: called_from_lib suppression '%s' is matched against 2 libraries: '%s' and '%s'
Matched called_from_lib suppression '%s' against library '%s'
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cc
((idx)) < ((kMaxLibs))
%s: library '%s' that was matched against called_from_lib suppression '%s' is unloaded
Adding instrumented range %p-%p from library '%s'
InternalMmapVectorNoCtor
login_tty failed (errno %d)
file-read-data
Checking file existance is not allowed under sandbox.
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_mac.cc
((stack_top)) != (0)
((stack_bottom)) != (0)
((getrlimit(3, &rl))) == ((0))
((environ)) != (0)
((kMaxPathLength)) <= ((buf_len))
((0 && "unimplemented")) != (0)
((owner_)) != (((uptr)pthread_self()))
((!owner_)) != (0)
((owner_ == (uptr)pthread_self())) != (0)
(((uptr)pthread_self())) == ((owner_))
((sysctl(mib, 2, 0, &len, 0, 0))) != ((-1))
((len)) < ((maxlen))
((sysctl(mib, 2, version, &len, 0, 0))) != ((-1))
Cannot get task info. Error: %d
AddressSanitizer
ThreadSanitizer
dladdr((void*)((uptr)&__sanitizer_report_error_summary), &info)
exec()-ing the program with
%s=%s
to enable wrappers.
ERROR: The process is launched without DYLD_INSERT_LIBRARIES, which is required for the sanitizer to work. We tried to set the environment variable and re-execute itself, but execv() failed, possibly because of sandbox restrictions. Make sure to launch the executable with:
%s=%s
"execv failed" && 0
pthread_create
dladdr(dlopen_addr, &info_pthread_create)
ERROR: Interceptors are not working. This may be because %s is loaded too late (e.g. via dlopen). Please launch the executable with:
%s=%s
"interceptors not installed" && 0
new_env
Register values:
%s = 0x%08x  
r[0]
r[1]
r[2]
r[3]
r[4]
r[5]
r[6]
r[7]
r[8]
r[9]
r[10]
r[11]
r[12]
<%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X>
Process module map:
0x%zx-0x%zx %s (%s) %s
End of module map.
i386
x86_64
x86_64h
armv6
armv7
armv7s
armv7k
arm64
((0 && "Invalid module arch")) != (0)
((i)) < ((size_))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_mac_spi.cc
((!dynamic_interpose_called)) != (0)
((kMaxDynamicInterposeEntries)) > ((dynamic_interpose_entry_count))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_posix.cc
allocate
ERROR: %s failed to deallocate 0x%zx (%zd) bytes at address %p
(("unable to unmap" && 0)) != (0)
((IsPowerOfTwo(size))) != (0)
allocate noreserve
memory at address 0x%zx
((fd != ((fd_t)-1))) != (0)
((fsize)) != (((uptr)-1))
((fsize)) > ((0))
could not map writable file (%d, %lld, %zu): %zd, errno: %d
((0)) != ((end))
DumpProcessMap
Process memory map follows:
%p-%p
End of process memory map.
ReportFile::Write() can't output requested buffer!
((start1 <= end1)) != (0)
((start2 <= end2)) != (0)
Supported Printf formats: %([0-9]*)?(z|ll)?{d,u,x,X}; %p; %(\.\*)?s; %c
format
buff_length > 0
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_printf.cc
((!(precision >= 0 && *cur != 's'))) != (0)
buff <= buff_end
((length_)) < ((size()))
base == 10 || base == 16
base == 10 || !negative
absolute_value || !negative
minimal_num_length < kMaxLen
AppendNumber buffer overflow
pos > 0
<null>
Report
==%s
Buffer in Report is too short!
==%d==
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_procmaps_mac.cc
((0 && "Invalid subtype of x86_64")) != (0)
((0 && "Invalid subtype of ARM")) != (0)
((0 && "Invalid CPU type")) != (0)
libclang_rt.
((size_)) > ((0))
((size_)) <= ((capacity_))
((size)) != (0)
((size)) < (((1ULL << (up + 1))))
((size)) > (((1ULL << up)))
((new_capacity)) > ((0))
((size_)) <= ((new_capacity))
InternalMmapVector
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stackdepot.cc
((prev + 1)) < ((StackDepotNode::kMaxUseCount))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stackdepotbase.h
((id)) < ((kMaxId))
((id)) != ((0))
((id & (((u32)-1) >> kReservedBits))) == ((id))
stack depot
((idx)) < ((kTabSize))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace.cc
((size)) <= ((kStackTraceMax))
((max_depth)) >= ((2))
((count)) < ((size))
#%n %p %F %L
0x%zx
in %s
+0x%zx
(<unknown module>)
(%p)
Unsupported specifier in stack frame format: %c (0x%zx)!
%s(%d
+0x%zx)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_suppressions.cc
((suppression_types_num_)) <= ((kMaxSuppressionTypes))
%s: reading suppressions file at %s
%s: failed to read suppressions file '%s'
((can_parse_)) != (0)
%s: failed to parse suppressions
((i)) < ((suppressions_.size()))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.cc
((start_hook_ == 0 && end_hook_ == 0)) != (0)
0x%zx
 (in 
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_thread_registry.cc
((status == ThreadStatusRunning || status == ThreadStatusFinished)) != (0)
((false)) == ((detached))
((ThreadStatusFinished)) == ((status))
ThreadRegistry
%s: Thread limit (%u threads) exceeded. Dying.
((tctx)) != ((0))
((tid)) != ((kUnknownTid))
((tid)) < ((max_threads_))
((tctx->status)) == ((ThreadStatusInvalid))
((alive_threads_)) == ((max_alive_threads_))
((tid)) < ((n_contexts_))
((ThreadStatusRunning)) == ((tctx->status))
%s: Detach of non-existent thread
%s: Join of non-existent thread
((alive_threads_)) > ((0))
((running_threads_)) > ((0))
((ThreadStatusCreated)) == ((tctx->status))
((tctx->status)) == ((ThreadStatusDead))
Sanitizer CHECK failed: %s:%d %s (%lld, %lld)
always
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_common_libcdep.cc
((SoftRssLimitExceededCallback)) == ((nullptr))
SANCOV_OPTIONS
If set, converage information will be symbolized by sancov tool after dumping.
Print flags help.
%s/%zd.sancov.raw
Coverage: failed to open %s for reading/writing
CovInit
CovInit::cc_array
CovInit::tr_event_array
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_coverage_libcdep.cc
((atomic_load(&pc_array_index, memory_order_relaxed))) == ((0))
((pc_fd)) != ((((fd_t)-1)))
((new_mapped_size)) <= ((sizeof(uptr) * kPcArrayMaxSize))
failed to extend raw coverage file: %d
(((uptr)p)) == ((next_map_base))
((reinterpret_cast<uptr>(counters) % 16)) == ((0))
((n)) < ((1 << 30))
((idx * sizeof(uptr))) < ((atomic_load(&pc_array_size, memory_order_acquire)))
((idx * sizeof(uptr))) < ((atomic_load(&cc_array_size, memory_order_acquire)))
((atomic_load(&atomic_callee_cache[0], memory_order_relaxed))) == ((caller))
((reinterpret_cast<uptr>(bitset) % kBatchSize)) == ((0))
((n % 16)) == ((0))
((cur % kBatchSize)) == ((0))
((reinterpret_cast<uptr>(c) % kBatchSize)) == ((0))
((cur)) < ((num_8bit_counters))
((cur)) == ((num_8bit_counters))
%s 0x%zx
trace-points
trace-compunits
trace-events
 CovDump: Trace: %zd PCs written
 CovDump: Trace: %zd Events written
((cc_cache)) != (0)
%s 0x%zx
%s 0x%zx
caller-callee
 CovDump: %zd caller-callee pairs written
((r.copied_module_name)) != (0)
((r.beg)) <= ((r.end))
((r.end)) <= ((size()))
counters-sancov
 CovDump: %zd counters written for '%s'
bitset-sancov
 CovDump: bitset of %zd bits written for '%s', %zd bits are set
((offsets->size())) >= ((kNumWordsForMagic))
((sym)) != ((nullptr))
((*magic_p)) == ((0ULL))
 CovDump: %zd PCs written to packed file
 CovDump: %s: %zd PCs written
((name)) != (0)
%s/%s.%zd.%s
%s/%zd.%s.packed
%s/%s.%s.packed
SanitizerCoverage: failed to open %s for writing (reason: %d)
((header_size_with_module)) < ((cov_max_block_size))
-html-report
html
coverage report generated to %s
ERROR: bad pc %x
TODO(aizatsky): call sancov to symbolize
SanitizerCoverage: %s %zd PCs written
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_coverage_libcdep_new.cc
((!*start)) != (0)
%zx %zx %zx %s
%s/%zd.sancov.map.tmp
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_coverage_mapping_libcdep.cc
((res)) <= ((tmp_path.size()))
Coverage: failed to open %s for writing: %d
sancov.map write failed: %d
%s/%zd.sancov.map
((res)) <= ((path.size()))
sancov.map rename failed: %d
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cc
((!StackSizeIsUnlimited())) != (0)
((AddressSpaceIsUnlimited())) != (0)
((0)) == ((sigaltstack(nullptr, &oldstack)))
SetAlternateSignalStack
((0)) == ((sigaltstack(&altstack, nullptr)))
((0)) == ((sigaltstack(&altstack, &oldstack)))
((size)) < ((page_size * 10))
((14)) == ((write_errno))
((internal_strlen(name) < sizeof(shmname) - 10)) != (0)
%zu [%s]
((0)) == ((res))
ERROR: %s failed to allocate 0x%zx (%zd) bytes at address %zx (errno: %d)
Sanitizer: increasing stacksize %zu->%zu
Sanitizer: pre-allocated stack size is insufficient: %zu < %zu
Sanitizer: pthread_create is likely to fail.
WARNING: failed to fork (errno %d)
Waiting on the process failed (errno %d).
ERROR: %s setrlimit() failed %d
((0)) == ((getrlimit(res, &rlim)))
((0)) == ((internal_sigaction(signum, &sigact, nullptr)))
Installed the sigaction for signal %d
    <empty stack>
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_libcdep.cc
((frames)) != (0)
DEDUP_TOKEN: %s
<can't symbolize>
modules_.size() > 0
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cc
((symbolizer_)) != (0)
((function_name)) != (0)
((module_name)) != (0)
DATA 
%s"%s" 0x%zx
%s"%s:%s" 0x%zx
((path_)) != (0)
((path_[0])) != (('\0'))
WARNING: Failed to use and restart external symbolizer!
WARNING: Can't read from symbolizer at fd %d
WARNING: Can't write to symbolizer at fd %d
((i)) < ((modules_.size()))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_internal.h
--default-arch=arm
--inlining=true
--inlining=false
((file_line_info)) != (0)
WARNING: invalid path to external symbolizer!
WARNING: Can't create a socket pair to start external symbolizer (errno: %d)
process-fork
WARNING: Forking external symbolizer is not allowed under sandbox.
WARNING: failed to fork external symbolizer
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_posix_libcdep.cc
WARNING: failed to fork external symbolizer (errno: %d)
((pid)) > ((0))
WARNING: external symbolizer didn't start up correctly!
((infd)) != (0)
((outfd)) != (0)
Symbolizer is disabled.
Cannot use internal symbolizer: out of memory
Using internal symbolizer.
Using libbacktrace symbolizer.
Using dladdr symbolizer.
External symbolizer is explicitly disabled.
llvm-symbolizer
Using llvm-symbolizer at user-specified path: %s
atos
Using atos at user-specified path: %s
addr2line
Using addr2line at user-specified path: %s
ERROR: External symbolizer path is set to '%s' which isn't a known symbolizer. Please set the path to the llvm-symbolizer binary or other known tool.
Using atos found at: %s
Using llvm-symbolizer found at: %s
Using addr2line found at: %s
((0)) == ((internal_strcmp(module_name, addr2line->module_name())))
0x%zx
0x%zx
swift_demangle
-iCfe
((garbage)) != (0)
vptr_check
N11__sanitizer11FlagHandlerIbEE
N11__sanitizer15FlagHandlerBaseE
N11__sanitizer11FlagHandlerIPKcEE
DYLD_INSERT_LIBRARIES
??:0
Address Sanitizer reported a failure.
Undefined Behavior Sanitizer reported a failure.
Thread Sanitizer reported a failure.
Sanitizer tool reported a failure.
Consult syslog for more information.
@2i 
@i 
<unknown>
%s runtime error: %s%s
%s note: %s
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_diag.cc
((nullptr)) == ((suppression_ctx))
((suppression_ctx)) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_diag.h
((NumArgs != MaxArgs)) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/../sanitizer_common/sanitizer_mutex.h
((atomic_load(&state_, memory_order_relaxed))) == ((1))
InternalScopedBuffer
'%s'
%lld
%llu
undefined-behavior
null-pointer-use
pointer-overflow
misaligned-pointer-use
insufficient-object-size
signed-integer-overflow
unsigned-integer-overflow
integer-divide-by-zero
float-divide-by-zero
invalid-shift-base
invalid-shift-exponent
out-of-bounds-index
unreachable-call
missing-return
non-positive-vla-index
float-cast-overflow
invalid-bool-load
invalid-enum-load
function-type-mismatch
invalid-null-return
invalid-null-argument
dynamic-type-mismatch
cfi-bad-type
((0 && "unknown ErrorType!")) != (0)
[31m
[30m
<memory cannot be printed>
%s%02x
[32m
((isMemoryLocation())) != (0)
undefined
null
alignment
object-size
shift-base
shift-exponent
bounds
unreachable
return
vla-bound
bool
enum
function
returns-nonnull-attribute
nonnull-attribute
vptr
UndefinedBehaviorSanitizer
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_init.cc
((UBSAN_MODE_PLUGIN)) != ((ubsan_mode))
((UBSAN_MODE_UNKNOWN)) == ((ubsan_mode))
halt_on_error
Crash the program after printing the first error report
print_stacktrace
Include full stacktrace into an error report
suppressions
Suppressions file name.
report_error_type
Print specific error type instead of 'undefined-behavior' in summary.
UBSAN_SYMBOLIZER_PATH
UBSAN_OPTIONS
false
true
ERROR: Invalid value for bool option: '%s'
load of
store to
reference binding to
member access within
member call on
constructor call on
downcast of
upcast of
cast to virtual base of
_Nonnull binding to
%0 null pointer of type %1
%0 misaligned address %1 for type %3, which requires %2 byte alignment
%0 address %1 with insufficient space for an object of type %2
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_handlers.cc
((0 && "unexpected error type!")) != (0)
pointer points here
((CallerPC)) != (0)
negation of %0 cannot be represented in type %1; cast to an unsigned type to negate this value to itself
negation of %0 cannot be represented in type %1
division of %0 by -1 cannot be represented in type %1
division by zero
shift exponent %0 is negative
shift exponent %0 is too large for %1-bit type %2
left shift of negative value %0
left shift of %0 by %1 places cannot be represented in type %2
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_value.h
((isIntegerTy())) != (0)
index %0 out of bounds for type %1
execution reached a __builtin_unreachable() call
execution reached the end of a value-returning function without returning a value
variable length array bound evaluates to non-positive value %0
%0 is outside the range of representable values of type %2
'bool'
'BOOL'
load of value %0, which is not a valid value for type %1
(unknown)
call to function %0 through pointer to incorrect function type %1
%0 defined here
((0 && "source location pointer is null!")) != (0)
null pointer returned from function declared to never return null
%0 specified here
returns_nonnull attribute
_Nonnull return type annotation
null pointer passed as argument %0, which is declared to never be null
nonnull attribute
_Nonnull type annotation
addition of unsigned offset to %0 overflowed to %1
subtraction of unsigned offset from %0 overflowed to %1
pointer index expression with base %0 overflowed to %1
control flow integrity check for type %0 failed during indirect function call
%0 integer overflow: %1 %2 %3 cannot be represented in type %4
signed
unsigned
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_monitor.cc
((0 && "Invalid arguments passed to __ubsan_get_current_report_data")) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_value.cc
((getType().isSignedIntegerTy())) != (0)
((0 && "libclang_rt.ubsan was built without __int128 support")) != (0)
((0 && "unexpected bit width")) != (0)
((getType().isUnsignedIntegerTy())) != (0)
((Val >= 0)) != (0)
((getType().isFloatTy())) != (0)
((0 && "unexpected floating point bit width")) != (0)
virtual call
non-virtual call
base-to-derived cast
cast to unrelated type
control flow integrity check for type %0 failed during %1 (vtable address %2)
invalid vtable in module %0
invalid vtable
vtable is of type %0
%0 address %1 which does not point to an object of type %2
object has a possibly invalid vptr: abs(offset to top) too big
possibly invalid vptr
object has invalid vptr
invalid vptr
object is of type %0
vptr for %0
object is base class subobject at offset %0 within object of type %1
vptr for %2 base class of %1
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator.cc
((kBlockMagic)) == ((((u64*)addr)[0]))
Allocate
((allocated_end_ - allocated_current_ >= (sptr)size)) != (0)
%s's allocator is terminating the process instead of returning 0
If you don't like this behavior set allocator_may_return_null=1
((0)) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_combined.h
((reinterpret_cast<uptr>(res) & (alignment - 1))) == ((0))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_local_cache.h
((class_id)) != ((0UL))
((class_id)) < ((kNumClasses))
((b->Count())) > ((0))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h
((!sci->free_list.empty())) != (0)
SizeClassAllocator32
((0U)) == (((res & (kRegionSize - 1))))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_bytemap.h
((0U)) == ((map_[idx]))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_common.h
((x)) != ((0U))
((count_)) <= ((kMaxNumCached))
((c->max_count)) != ((0UL))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_secondary.h
((IsPowerOfTwo(alignment))) != (0)
LargeMmapAllocator
((IsAligned(map_beg, page_size_))) != (0)
((IsAligned(res, alignment))) != (0)
((IsAligned(res, page_size_))) != (0)
((res + size)) >= ((map_beg))
((res + size)) <= ((map_end))
((size_log)) < (((sizeof(stats.by_size_log)/sizeof((stats.by_size_log)[0]))))
((idx)) < ((kMaxNumChunks))
((IsAligned(p, page_size_))) != (0)
((PointerIsMine(p))) != (0)
((chunks_[idx])) == ((h))
((idx)) < ((n_chunks_))
((nearest_chunk)) >= ((h->map_beg))
((nearest_chunk)) < ((h->map_beg + h->map_size))
((nearest_chunk)) <= ((p))
((IsAligned((uptr)h, page_size_))) != (0)
IsPowerOfTwo(boundary)
SanitizerTool
%s.%s.%zu
%s.%zu
ERROR: Can't open file: 
ERROR: Path is too long: %c%c%c%c%c%c%c%c...
stdout
stderr
ERROR: Failed to mmap
ERROR: %s failed to %s 0x%zx (%zd) bytes of %s (error code: %d)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_common.cc
((0 && "unable to mmap")) != (0)
ReadFileToBuffer
SUMMARY: %s: %s
%L %F
((s)) >= ((z))
(total_mmaped >> 20) < common_flags()->mmap_limit_mb
PATH
Command: 
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_mutex.h
deadlock detector
WARNING: too long mutex cycle found
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector1.cc
((m->id)) == ((path[0]))
((!dd.isHeld(&lt->dd, m->id))) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector.h
((available_nodes_.empty())) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h
((!empty())) != (0)
((idx)) < ((size()))
((idx)) <= ((size()))
((epoch_)) == ((current_epoch))
((node)) >= ((size()))
((current_epoch_)) == ((nodeToEpoch(node)))
((!tmp_bv_.getBit(idx))) != (0)
((path[0])) == ((cur_node))
((it1_.hasNext())) != (0)
((it2_.hasNext())) != (0)
((n_recursive_locks)) < (((sizeof(recursive_locks)/sizeof((recursive_locks)[0]))))
((n_all_locks_)) < (((sizeof(all_locks_with_contexts_)/sizeof((all_locks_with_contexts_)[0]))))
((!available_nodes_.getBit(idx))) != (0)
((recycled_nodes_.setBit(idx))) != (0)
auto
DEFAULT
sancov
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_flags.cc
((base)) != (0)
((out < out_end - 1)) != (0)
include
read more options from the given file
include_if_exists
read more options from the given file (if it exists)
symbolize
If set, use the online symbolizer from common sanitizer runtime to turn virtual addresses to file/line locations.
external_symbolizer_path
Path to external symbolizer. If empty, the tool will search $PATH for the symbolizer.
allow_addr2line
If set, allows online symbolizer to run addr2line binary to symbolize stack traces (addr2line will only be used if llvm-symbolizer binary is unavailable.
strip_path_prefix
Strips this prefix from file paths in error reports.
fast_unwind_on_check
If available, use the fast frame-pointer-based unwinder on internal CHECK failures.
fast_unwind_on_fatal
If available, use the fast frame-pointer-based unwinder on fatal errors.
fast_unwind_on_malloc
If available, use the fast frame-pointer-based unwinder on malloc/free.
handle_ioctl
Intercept and handle ioctl requests.
malloc_context_size
Max number of stack frames kept for each allocation/deallocation.
log_path
Write logs to "log_path.pid". The special values are "stdout" and "stderr". The default is "stderr".
log_exe_name
Mention name of executable when reporting error and append executable name to logs (as in "log_path.exe_name.pid").
log_to_syslog
Write all sanitizer output to syslog in addition to other means of logging.
verbosity
Verbosity level (0 - silent, 1 - a bit of output, 2+ - more output).
detect_leaks
Enable memory leak detection.
leak_check_at_exit
Invoke leak checking in an atexit handler. Has no effect if detect_leaks=false, or if __lsan_do_leak_check() is called before the handler has a chance to run.
allocator_may_return_null
If false, the allocator will crash instead of returning 0 on out-of-memory.
print_summary
If false, disable printing error summaries in addition to error reports.
print_module_map
OS X only. 0 = don't print, 1 = print only once before process exits, 2 = print after each report.
check_printf
Check printf arguments.
handle_segv
If set, registers the tool's custom SIGSEGV/SIGBUS handler.
handle_abort
If set, registers the tool's custom SIGABRT handler.
handle_sigill
If set, registers the tool's custom SIGILL handler.
handle_sigfpe
If set, registers the tool's custom SIGFPE handler.
allow_user_segv_handler
If set, allows user to register a SEGV handler even if the tool registers one.
use_sigaltstack
If set, uses alternate stack for signal handling.
detect_deadlocks
If set, deadlock detection is enabled.
clear_shadow_mmap_threshold
Large shadow regions are zero-filled using mmap(NORESERVE) instead of memset(). This is the threshold size in bytes.
color
Colorize reports: (always|never|auto).
legacy_pthread_cond
Enables support for dynamic libraries linked with libpthread 2.2.5.
intercept_tls_get_addr
Intercept __tls_get_addr.
help
Print the flag descriptions.
mmap_limit_mb
Limit the amount of mmap-ed memory (excluding shadow) in Mb; not a user-facing flag, used mosly for testing the tools
hard_rss_limit_mb
Hard RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS and aborts the process if the limit is reached
soft_rss_limit_mb
Soft RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS. If the limit is reached all subsequent malloc/new calls will fail or return NULL (depending on the value of allocator_may_return_null) until the RSS goes below the soft limit. This limit does not affect memory allocations other than malloc/new.
heap_profile
Experimental heap profiler, asan-only
allocator_release_to_os_interval_ms
Experimental. Only affects a 64-bit allocator. If set, tries to release unused memory to the OS, but not more often than this interval (in milliseconds). Negative values mean do not attempt to release memory to the OS.
can_use_proc_maps_statm
If false, do not attempt to read /proc/maps/statm. Mostly useful for testing sanitizers.
coverage
If set, coverage information will be dumped at program shutdown (if the coverage instrumentation was enabled at compile time).
coverage_pcs
If set (and if 'coverage' is set too), the coverage information will be dumped as a set of PC offsets for every module.
coverage_order_pcs
If true, the PCs will be dumped in the order they've appeared during the execution.
coverage_bitset
If set (and if 'coverage' is set too), the coverage information will also be dumped as a bitset to a separate file.
coverage_counters
If set (and if 'coverage' is set too), the bitmap that corresponds to coverage counters will be dumped.
coverage_direct
If set, coverage information will be dumped directly to a memory mapped file. This way data is not lost even if the process is suddenly killed.
coverage_dir
Target directory for coverage dumps. Defaults to the current directory.
full_address_space
Sanitize complete address space; by default kernel area on 32-bit platforms will not be sanitized
print_suppressions
Print matched suppressions at exit.
disable_coredump
Disable core dumping. By default, disable_coredump=1 on 64-bit to avoid dumping a 16T+ core file. Ignored on OSes that don't dump core by default and for sanitizers that don't reserve lots of virtual memory.
use_madv_dontdump
If set, instructs kernel to not store the (huge) shadow in core file.
symbolize_inline_frames
Print inlined frames in stacktraces. Defaults to true.
symbolize_vs_style
Print file locations in Visual Studio style (e.g:  file(10,42): ...
dedup_token_length
If positive, after printing a stack trace also print a short string token based on this number of frames that will simplify deduplication of the reports. Example: 'DEDUP_TOKEN: foo-bar-main'. Default is 0.
stack_trace_format
Format string used to render stack frames. See sanitizer_stacktrace_printer.h for the format description. Use DEFAULT to get default format.
no_huge_pages_for_shadow
If true, the shadow is not allowed to use huge pages. 
strict_string_checks
If set check that string arguments are properly null-terminated
intercept_strstr
If set, uses custom wrappers for strstr and strcasestr functions to find more errors.
intercept_strspn
If set, uses custom wrappers for strspn and strcspn function to find more errors.
intercept_strpbrk
If set, uses custom wrappers for strpbrk function to find more errors.
intercept_strlen
If set, uses custom wrappers for strlen and strnlen functions to find more errors.
intercept_strchr
If set, uses custom wrappers for strchr, strchrnul, and strrchr functions to find more errors.
intercept_memcmp
If set, uses custom wrappers for memcmp function to find more errors.
strict_memcmp
If true, assume that memcmp(p1, p2, n) always reads n bytes before comparing p1 and p2.
intercept_memmem
If set, uses a wrapper for memmem() to find more errors.
intercept_intrin
If set, uses custom wrappers for memset/memcpy/memmove intrinsics to find more errors.
intercept_stat
If set, uses custom wrappers for *stat functions to find more errors.
intercept_send
If set, uses custom wrappers for send* functions to find more errors.
decorate_proc_maps
If set, decorate sanitizer mappings in /proc/self/maps with user-readable names
exitcode
Override the program exit status if the tool found an error
abort_on_error
If set, the tool calls abort() instead of _exit() after printing the error report.
suppress_equal_pcs
Deduplicate multiple reports for single source location in halt_on_error=false mode (asan only).
print_cmdline
Print command line on crash (asan only).
html_cov_report
Generate html coverage report.
sancov_path
Sancov tool location.
FlagHandlerInclude
ERROR: Invalid value for int option: '%s'
ERROR: Invalid value for uptr option: '%s'
Available flags for %s:
- %s
ERROR: %s
expected '='
unterminated string
Flag parsing failed.
Failed to read options from '%s': error %d
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_flag_parser.cc
((n_flags_)) < ((kMaxFlags))
WARNING: found %d unrecognized flag(s):
    %s
((n_unknown_flags_)) < ((kMaxUnknownFlags))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_libc.cc
(((reinterpret_cast<uptr>(s) | n) & 15)) == ((0))
((base)) == ((10))
((size)) <= ((1ULL << (30)))
%s: too many ignored libraries (max: %d)
%s: called_from_lib suppression '%s' is matched against 2 libraries: '%s' and '%s'
Matched called_from_lib suppression '%s' against library '%s'
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cc
((idx)) < ((kMaxLibs))
%s: library '%s' that was matched against called_from_lib suppression '%s' is unloaded
Adding instrumented range %p-%p from library '%s'
InternalMmapVectorNoCtor
login_tty failed (errno %d)
file-read-data
Checking file existance is not allowed under sandbox.
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_mac.cc
((stack_top)) != (0)
((stack_bottom)) != (0)
((getrlimit(3, &rl))) == ((0))
((environ)) != (0)
((kMaxPathLength)) <= ((buf_len))
((0 && "unimplemented")) != (0)
((owner_)) != (((uptr)pthread_self()))
((!owner_)) != (0)
((owner_ == (uptr)pthread_self())) != (0)
(((uptr)pthread_self())) == ((owner_))
((sysctl(mib, 2, 0, &len, 0, 0))) != ((-1))
((len)) < ((maxlen))
((sysctl(mib, 2, version, &len, 0, 0))) != ((-1))
Cannot get task info. Error: %d
AddressSanitizer
ThreadSanitizer
dladdr((void*)((uptr)&__sanitizer_report_error_summary), &info)
exec()-ing the program with
%s=%s
to enable wrappers.
ERROR: The process is launched without DYLD_INSERT_LIBRARIES, which is required for the sanitizer to work. We tried to set the environment variable and re-execute itself, but execv() failed, possibly because of sandbox restrictions. Make sure to launch the executable with:
%s=%s
"execv failed" && 0
pthread_create
dladdr(dlopen_addr, &info_pthread_create)
ERROR: Interceptors are not working. This may be because %s is loaded too late (e.g. via dlopen). Please launch the executable with:
%s=%s
"interceptors not installed" && 0
new_env
Register values:
%s = 0x%08x  
r[0]
r[1]
r[2]
r[3]
r[4]
r[5]
r[6]
r[7]
r[8]
r[9]
r[10]
r[11]
r[12]
<%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X>
Process module map:
0x%zx-0x%zx %s (%s) %s
End of module map.
i386
x86_64
x86_64h
armv6
armv7
armv7s
armv7k
arm64
((0 && "Invalid module arch")) != (0)
((i)) < ((size_))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_mac_spi.cc
((!dynamic_interpose_called)) != (0)
((kMaxDynamicInterposeEntries)) > ((dynamic_interpose_entry_count))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_posix.cc
allocate
ERROR: %s failed to deallocate 0x%zx (%zd) bytes at address %p
(("unable to unmap" && 0)) != (0)
((IsPowerOfTwo(size))) != (0)
allocate noreserve
memory at address 0x%zx
((fd != ((fd_t)-1))) != (0)
((fsize)) != (((uptr)-1))
((fsize)) > ((0))
could not map writable file (%d, %lld, %zu): %zd, errno: %d
((0)) != ((end))
DumpProcessMap
Process memory map follows:
%p-%p
End of process memory map.
ReportFile::Write() can't output requested buffer!
((start1 <= end1)) != (0)
((start2 <= end2)) != (0)
Supported Printf formats: %([0-9]*)?(z|ll)?{d,u,x,X}; %p; %(\.\*)?s; %c
format
buff_length > 0
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_printf.cc
((!(precision >= 0 && *cur != 's'))) != (0)
buff <= buff_end
((length_)) < ((size()))
base == 10 || base == 16
base == 10 || !negative
absolute_value || !negative
minimal_num_length < kMaxLen
AppendNumber buffer overflow
pos > 0
<null>
Report
==%s
Buffer in Report is too short!
==%d==
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_procmaps_mac.cc
((0 && "Invalid subtype of x86_64")) != (0)
((0 && "Invalid subtype of ARM")) != (0)
((0 && "Invalid CPU type")) != (0)
libclang_rt.
((size_)) > ((0))
((size_)) <= ((capacity_))
((size)) != (0)
((size)) < (((1ULL << (up + 1))))
((size)) > (((1ULL << up)))
((new_capacity)) > ((0))
((size_)) <= ((new_capacity))
InternalMmapVector
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stackdepot.cc
((prev + 1)) < ((StackDepotNode::kMaxUseCount))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stackdepotbase.h
((id)) < ((kMaxId))
((id)) != ((0))
((id & (((u32)-1) >> kReservedBits))) == ((id))
stack depot
((idx)) < ((kTabSize))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace.cc
((size)) <= ((kStackTraceMax))
((max_depth)) >= ((2))
((count)) < ((size))
#%n %p %F %L
0x%zx
in %s
+0x%zx
(<unknown module>)
(%p)
Unsupported specifier in stack frame format: %c (0x%zx)!
%s(%d
+0x%zx)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_suppressions.cc
((suppression_types_num_)) <= ((kMaxSuppressionTypes))
%s: reading suppressions file at %s
%s: failed to read suppressions file '%s'
((can_parse_)) != (0)
%s: failed to parse suppressions
((i)) < ((suppressions_.size()))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.cc
((start_hook_ == 0 && end_hook_ == 0)) != (0)
0x%zx
 (in 
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_thread_registry.cc
((status == ThreadStatusRunning || status == ThreadStatusFinished)) != (0)
((false)) == ((detached))
((ThreadStatusFinished)) == ((status))
ThreadRegistry
%s: Thread limit (%u threads) exceeded. Dying.
((tctx)) != ((0))
((tid)) != ((kUnknownTid))
((tid)) < ((max_threads_))
((tctx->status)) == ((ThreadStatusInvalid))
((alive_threads_)) == ((max_alive_threads_))
((tid)) < ((n_contexts_))
((ThreadStatusRunning)) == ((tctx->status))
%s: Detach of non-existent thread
%s: Join of non-existent thread
((alive_threads_)) > ((0))
((running_threads_)) > ((0))
((ThreadStatusCreated)) == ((tctx->status))
((tctx->status)) == ((ThreadStatusDead))
Sanitizer CHECK failed: %s:%d %s (%lld, %lld)
always
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_common_libcdep.cc
((SoftRssLimitExceededCallback)) == ((nullptr))
SANCOV_OPTIONS
If set, converage information will be symbolized by sancov tool after dumping.
Print flags help.
%s/%zd.sancov.raw
Coverage: failed to open %s for reading/writing
CovInit
CovInit::cc_array
CovInit::tr_event_array
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_coverage_libcdep.cc
((atomic_load(&pc_array_index, memory_order_relaxed))) == ((0))
((pc_fd)) != ((((fd_t)-1)))
((new_mapped_size)) <= ((sizeof(uptr) * kPcArrayMaxSize))
failed to extend raw coverage file: %d
(((uptr)p)) == ((next_map_base))
((reinterpret_cast<uptr>(counters) % 16)) == ((0))
((n)) < ((1 << 30))
((idx * sizeof(uptr))) < ((atomic_load(&pc_array_size, memory_order_acquire)))
((idx * sizeof(uptr))) < ((atomic_load(&cc_array_size, memory_order_acquire)))
((atomic_load(&atomic_callee_cache[0], memory_order_relaxed))) == ((caller))
((reinterpret_cast<uptr>(bitset) % kBatchSize)) == ((0))
((n % 16)) == ((0))
((cur % kBatchSize)) == ((0))
((reinterpret_cast<uptr>(c) % kBatchSize)) == ((0))
((cur)) < ((num_8bit_counters))
((cur)) == ((num_8bit_counters))
%s 0x%zx
trace-points
trace-compunits
trace-events
 CovDump: Trace: %zd PCs written
 CovDump: Trace: %zd Events written
((cc_cache)) != (0)
%s 0x%zx
%s 0x%zx
caller-callee
 CovDump: %zd caller-callee pairs written
((r.copied_module_name)) != (0)
((r.beg)) <= ((r.end))
((r.end)) <= ((size()))
counters-sancov
 CovDump: %zd counters written for '%s'
bitset-sancov
 CovDump: bitset of %zd bits written for '%s', %zd bits are set
((offsets->size())) >= ((kNumWordsForMagic))
((sym)) != ((nullptr))
((*magic_p)) == ((0ULL))
 CovDump: %zd PCs written to packed file
 CovDump: %s: %zd PCs written
((name)) != (0)
%s/%s.%zd.%s
%s/%zd.%s.packed
%s/%s.%s.packed
SanitizerCoverage: failed to open %s for writing (reason: %d)
((header_size_with_module)) < ((cov_max_block_size))
-html-report
html
coverage report generated to %s
ERROR: bad pc %x
TODO(aizatsky): call sancov to symbolize
SanitizerCoverage: %s %zd PCs written
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_coverage_libcdep_new.cc
((!*start)) != (0)
%zx %zx %zx %s
%s/%zd.sancov.map.tmp
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_coverage_mapping_libcdep.cc
((res)) <= ((tmp_path.size()))
Coverage: failed to open %s for writing: %d
sancov.map write failed: %d
%s/%zd.sancov.map
((res)) <= ((path.size()))
sancov.map rename failed: %d
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cc
((!StackSizeIsUnlimited())) != (0)
((AddressSpaceIsUnlimited())) != (0)
((0)) == ((sigaltstack(nullptr, &oldstack)))
SetAlternateSignalStack
((0)) == ((sigaltstack(&altstack, nullptr)))
((0)) == ((sigaltstack(&altstack, &oldstack)))
((size)) < ((page_size * 10))
((14)) == ((write_errno))
((internal_strlen(name) < sizeof(shmname) - 10)) != (0)
%zu [%s]
((0)) == ((res))
ERROR: %s failed to allocate 0x%zx (%zd) bytes at address %zx (errno: %d)
Sanitizer: increasing stacksize %zu->%zu
Sanitizer: pre-allocated stack size is insufficient: %zu < %zu
Sanitizer: pthread_create is likely to fail.
WARNING: failed to fork (errno %d)
Waiting on the process failed (errno %d).
ERROR: %s setrlimit() failed %d
((0)) == ((getrlimit(res, &rlim)))
((0)) == ((internal_sigaction(signum, &sigact, nullptr)))
Installed the sigaction for signal %d
    <empty stack>
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_libcdep.cc
((frames)) != (0)
DEDUP_TOKEN: %s
<can't symbolize>
modules_.size() > 0
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cc
((symbolizer_)) != (0)
((function_name)) != (0)
((module_name)) != (0)
DATA 
%s"%s" 0x%zx
%s"%s:%s" 0x%zx
((path_)) != (0)
((path_[0])) != (('\0'))
WARNING: Failed to use and restart external symbolizer!
WARNING: Can't read from symbolizer at fd %d
WARNING: Can't write to symbolizer at fd %d
((i)) < ((modules_.size()))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_internal.h
--default-arch=arm
--inlining=true
--inlining=false
((file_line_info)) != (0)
WARNING: invalid path to external symbolizer!
WARNING: Can't create a socket pair to start external symbolizer (errno: %d)
process-fork
WARNING: Forking external symbolizer is not allowed under sandbox.
WARNING: failed to fork external symbolizer
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_posix_libcdep.cc
WARNING: failed to fork external symbolizer (errno: %d)
((pid)) > ((0))
WARNING: external symbolizer didn't start up correctly!
((infd)) != (0)
((outfd)) != (0)
Symbolizer is disabled.
Cannot use internal symbolizer: out of memory
Using internal symbolizer.
Using libbacktrace symbolizer.
Using dladdr symbolizer.
External symbolizer is explicitly disabled.
llvm-symbolizer
Using llvm-symbolizer at user-specified path: %s
atos
Using atos at user-specified path: %s
addr2line
Using addr2line at user-specified path: %s
ERROR: External symbolizer path is set to '%s' which isn't a known symbolizer. Please set the path to the llvm-symbolizer binary or other known tool.
Using atos found at: %s
Using llvm-symbolizer found at: %s
Using addr2line found at: %s
((0)) == ((internal_strcmp(module_name, addr2line->module_name())))
0x%zx
0x%zx
swift_demangle
-iCfe
((garbage)) != (0)
vptr_check
N11__sanitizer11FlagHandlerIbEE
N11__sanitizer15FlagHandlerBaseE
N11__sanitizer11FlagHandlerIPKcEE
DYLD_INSERT_LIBRARIES
??:0
Address Sanitizer reported a failure.
Undefined Behavior Sanitizer reported a failure.
Thread Sanitizer reported a failure.
Sanitizer tool reported a failure.
Consult syslog for more information.
@2i 
@i 
<unknown>
%s runtime error: %s%s
%s note: %s
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_diag.cc
((nullptr)) == ((suppression_ctx))
((suppression_ctx)) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_diag.h
((NumArgs != MaxArgs)) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/../sanitizer_common/sanitizer_mutex.h
((atomic_load(&state_, memory_order_relaxed))) == ((1))
InternalScopedBuffer
'%s'
%lld
%llu
0x%08x%08x%08x%08x
undefined-behavior
null-pointer-use
pointer-overflow
misaligned-pointer-use
insufficient-object-size
signed-integer-overflow
unsigned-integer-overflow
integer-divide-by-zero
float-divide-by-zero
invalid-shift-base
invalid-shift-exponent
out-of-bounds-index
unreachable-call
missing-return
non-positive-vla-index
float-cast-overflow
invalid-bool-load
invalid-enum-load
function-type-mismatch
invalid-null-return
invalid-null-argument
dynamic-type-mismatch
cfi-bad-type
((0 && "unknown ErrorType!")) != (0)
[31m
[30m
<memory cannot be printed>
%s%02x
[32m
((isMemoryLocation())) != (0)
undefined
null
alignment
object-size
shift-base
shift-exponent
bounds
unreachable
return
vla-bound
bool
enum
function
returns-nonnull-attribute
nonnull-attribute
vptr
UndefinedBehaviorSanitizer
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_init.cc
((UBSAN_MODE_PLUGIN)) != ((ubsan_mode))
((UBSAN_MODE_UNKNOWN)) == ((ubsan_mode))
halt_on_error
Crash the program after printing the first error report
print_stacktrace
Include full stacktrace into an error report
suppressions
Suppressions file name.
report_error_type
Print specific error type instead of 'undefined-behavior' in summary.
UBSAN_SYMBOLIZER_PATH
UBSAN_OPTIONS
false
true
ERROR: Invalid value for bool option: '%s'
load of
store to
reference binding to
member access within
member call on
constructor call on
downcast of
upcast of
cast to virtual base of
_Nonnull binding to
%0 null pointer of type %1
%0 misaligned address %1 for type %3, which requires %2 byte alignment
%0 address %1 with insufficient space for an object of type %2
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_handlers.cc
((0 && "unexpected error type!")) != (0)
pointer points here
((CallerPC)) != (0)
negation of %0 cannot be represented in type %1; cast to an unsigned type to negate this value to itself
negation of %0 cannot be represented in type %1
division of %0 by -1 cannot be represented in type %1
division by zero
shift exponent %0 is negative
shift exponent %0 is too large for %1-bit type %2
left shift of negative value %0
left shift of %0 by %1 places cannot be represented in type %2
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_value.h
((isIntegerTy())) != (0)
index %0 out of bounds for type %1
execution reached a __builtin_unreachable() call
execution reached the end of a value-returning function without returning a value
variable length array bound evaluates to non-positive value %0
%0 is outside the range of representable values of type %2
'bool'
'BOOL'
load of value %0, which is not a valid value for type %1
(unknown)
call to function %0 through pointer to incorrect function type %1
%0 defined here
((0 && "source location pointer is null!")) != (0)
null pointer returned from function declared to never return null
%0 specified here
returns_nonnull attribute
_Nonnull return type annotation
null pointer passed as argument %0, which is declared to never be null
nonnull attribute
_Nonnull type annotation
addition of unsigned offset to %0 overflowed to %1
subtraction of unsigned offset from %0 overflowed to %1
pointer index expression with base %0 overflowed to %1
control flow integrity check for type %0 failed during indirect function call
%0 integer overflow: %1 %2 %3 cannot be represented in type %4
signed
unsigned
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_monitor.cc
((0 && "Invalid arguments passed to __ubsan_get_current_report_data")) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/ubsan/ubsan_value.cc
((getType().isSignedIntegerTy())) != (0)
((0 && "unexpected bit width")) != (0)
((getType().isUnsignedIntegerTy())) != (0)
((Val >= 0)) != (0)
((getType().isFloatTy())) != (0)
((0 && "unexpected floating point bit width")) != (0)
virtual call
non-virtual call
base-to-derived cast
cast to unrelated type
control flow integrity check for type %0 failed during %1 (vtable address %2)
invalid vtable in module %0
invalid vtable
vtable is of type %0
%0 address %1 which does not point to an object of type %2
object has a possibly invalid vptr: abs(offset to top) too big
possibly invalid vptr
object has invalid vptr
invalid vptr
object is of type %0
vptr for %0
object is base class subobject at offset %0 within object of type %1
vptr for %2 base class of %1
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator.cc
((kBlockMagic)) == ((((u64*)addr)[0]))
Allocate
((allocated_end_ - allocated_current_ >= (sptr)size)) != (0)
%s's allocator is terminating the process instead of returning 0
If you don't like this behavior set allocator_may_return_null=1
((0)) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_combined.h
((reinterpret_cast<uptr>(res) & (alignment - 1))) == ((0))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_local_cache.h
((class_id)) != ((0UL))
((class_id)) < ((kNumClasses))
((b->Count())) > ((0))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h
((!sci->free_list.empty())) != (0)
SizeClassAllocator32
((0U)) == (((res & (kRegionSize - 1))))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_bytemap.h
((0U)) == ((map2[idx % kSize2]))
TwoLevelByteMap
((res)) < ((kNumPossibleRegions))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_common.h
((x)) != ((0U))
((count_)) <= ((kMaxNumCached))
((c->max_count)) != ((0UL))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_allocator_secondary.h
((IsPowerOfTwo(alignment))) != (0)
LargeMmapAllocator
((IsAligned(map_beg, page_size_))) != (0)
((IsAligned(res, alignment))) != (0)
((IsAligned(res, page_size_))) != (0)
((res + size)) >= ((map_beg))
((res + size)) <= ((map_end))
((size_log)) < (((sizeof(stats.by_size_log)/sizeof((stats.by_size_log)[0]))))
((idx)) < ((kMaxNumChunks))
((IsAligned(p, page_size_))) != (0)
((PointerIsMine(p))) != (0)
((chunks_[idx])) == ((h))
((idx)) < ((n_chunks_))
((nearest_chunk)) >= ((h->map_beg))
((nearest_chunk)) < ((h->map_beg + h->map_size))
((nearest_chunk)) <= ((p))
((IsAligned((uptr)h, page_size_))) != (0)
IsPowerOfTwo(boundary)
SanitizerTool
%s.%s.%zu
%s.%zu
ERROR: Can't open file: 
ERROR: Path is too long: %c%c%c%c%c%c%c%c...
stdout
stderr
ERROR: Failed to mmap
ERROR: %s failed to %s 0x%zx (%zd) bytes of %s (error code: %d)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_common.cc
((0 && "unable to mmap")) != (0)
ReadFileToBuffer
SUMMARY: %s: %s
%L %F
((s)) >= ((z))
(total_mmaped >> 20) < common_flags()->mmap_limit_mb
PATH
Command: 
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_mutex.h
deadlock detector
WARNING: too long mutex cycle found
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector1.cc
((m->id)) == ((path[0]))
((!dd.isHeld(&lt->dd, m->id))) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector.h
((available_nodes_.empty())) != (0)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h
((!empty())) != (0)
((idx)) < ((size()))
((idx)) <= ((size()))
((epoch_)) == ((current_epoch))
((node)) >= ((size()))
((current_epoch_)) == ((nodeToEpoch(node)))
((!tmp_bv_.getBit(idx))) != (0)
((path[0])) == ((cur_node))
((it1_.hasNext())) != (0)
((it2_.hasNext())) != (0)
((n_recursive_locks)) < (((sizeof(recursive_locks)/sizeof((recursive_locks)[0]))))
((n_all_locks_)) < (((sizeof(all_locks_with_contexts_)/sizeof((all_locks_with_contexts_)[0]))))
((!available_nodes_.getBit(idx))) != (0)
((recycled_nodes_.setBit(idx))) != (0)
auto
DEFAULT
sancov
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_flags.cc
((base)) != (0)
((out < out_end - 1)) != (0)
include
read more options from the given file
include_if_exists
read more options from the given file (if it exists)
symbolize
If set, use the online symbolizer from common sanitizer runtime to turn virtual addresses to file/line locations.
external_symbolizer_path
Path to external symbolizer. If empty, the tool will search $PATH for the symbolizer.
allow_addr2line
If set, allows online symbolizer to run addr2line binary to symbolize stack traces (addr2line will only be used if llvm-symbolizer binary is unavailable.
strip_path_prefix
Strips this prefix from file paths in error reports.
fast_unwind_on_check
If available, use the fast frame-pointer-based unwinder on internal CHECK failures.
fast_unwind_on_fatal
If available, use the fast frame-pointer-based unwinder on fatal errors.
fast_unwind_on_malloc
If available, use the fast frame-pointer-based unwinder on malloc/free.
handle_ioctl
Intercept and handle ioctl requests.
malloc_context_size
Max number of stack frames kept for each allocation/deallocation.
log_path
Write logs to "log_path.pid". The special values are "stdout" and "stderr". The default is "stderr".
log_exe_name
Mention name of executable when reporting error and append executable name to logs (as in "log_path.exe_name.pid").
log_to_syslog
Write all sanitizer output to syslog in addition to other means of logging.
verbosity
Verbosity level (0 - silent, 1 - a bit of output, 2+ - more output).
detect_leaks
Enable memory leak detection.
leak_check_at_exit
Invoke leak checking in an atexit handler. Has no effect if detect_leaks=false, or if __lsan_do_leak_check() is called before the handler has a chance to run.
allocator_may_return_null
If false, the allocator will crash instead of returning 0 on out-of-memory.
print_summary
If false, disable printing error summaries in addition to error reports.
print_module_map
OS X only. 0 = don't print, 1 = print only once before process exits, 2 = print after each report.
check_printf
Check printf arguments.
handle_segv
If set, registers the tool's custom SIGSEGV/SIGBUS handler.
handle_abort
If set, registers the tool's custom SIGABRT handler.
handle_sigill
If set, registers the tool's custom SIGILL handler.
handle_sigfpe
If set, registers the tool's custom SIGFPE handler.
allow_user_segv_handler
If set, allows user to register a SEGV handler even if the tool registers one.
use_sigaltstack
If set, uses alternate stack for signal handling.
detect_deadlocks
If set, deadlock detection is enabled.
clear_shadow_mmap_threshold
Large shadow regions are zero-filled using mmap(NORESERVE) instead of memset(). This is the threshold size in bytes.
color
Colorize reports: (always|never|auto).
legacy_pthread_cond
Enables support for dynamic libraries linked with libpthread 2.2.5.
intercept_tls_get_addr
Intercept __tls_get_addr.
help
Print the flag descriptions.
mmap_limit_mb
Limit the amount of mmap-ed memory (excluding shadow) in Mb; not a user-facing flag, used mosly for testing the tools
hard_rss_limit_mb
Hard RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS and aborts the process if the limit is reached
soft_rss_limit_mb
Soft RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS. If the limit is reached all subsequent malloc/new calls will fail or return NULL (depending on the value of allocator_may_return_null) until the RSS goes below the soft limit. This limit does not affect memory allocations other than malloc/new.
heap_profile
Experimental heap profiler, asan-only
allocator_release_to_os_interval_ms
Experimental. Only affects a 64-bit allocator. If set, tries to release unused memory to the OS, but not more often than this interval (in milliseconds). Negative values mean do not attempt to release memory to the OS.
can_use_proc_maps_statm
If false, do not attempt to read /proc/maps/statm. Mostly useful for testing sanitizers.
coverage
If set, coverage information will be dumped at program shutdown (if the coverage instrumentation was enabled at compile time).
coverage_pcs
If set (and if 'coverage' is set too), the coverage information will be dumped as a set of PC offsets for every module.
coverage_order_pcs
If true, the PCs will be dumped in the order they've appeared during the execution.
coverage_bitset
If set (and if 'coverage' is set too), the coverage information will also be dumped as a bitset to a separate file.
coverage_counters
If set (and if 'coverage' is set too), the bitmap that corresponds to coverage counters will be dumped.
coverage_direct
If set, coverage information will be dumped directly to a memory mapped file. This way data is not lost even if the process is suddenly killed.
coverage_dir
Target directory for coverage dumps. Defaults to the current directory.
full_address_space
Sanitize complete address space; by default kernel area on 32-bit platforms will not be sanitized
print_suppressions
Print matched suppressions at exit.
disable_coredump
Disable core dumping. By default, disable_coredump=1 on 64-bit to avoid dumping a 16T+ core file. Ignored on OSes that don't dump core by default and for sanitizers that don't reserve lots of virtual memory.
use_madv_dontdump
If set, instructs kernel to not store the (huge) shadow in core file.
symbolize_inline_frames
Print inlined frames in stacktraces. Defaults to true.
symbolize_vs_style
Print file locations in Visual Studio style (e.g:  file(10,42): ...
dedup_token_length
If positive, after printing a stack trace also print a short string token based on this number of frames that will simplify deduplication of the reports. Example: 'DEDUP_TOKEN: foo-bar-main'. Default is 0.
stack_trace_format
Format string used to render stack frames. See sanitizer_stacktrace_printer.h for the format description. Use DEFAULT to get default format.
no_huge_pages_for_shadow
If true, the shadow is not allowed to use huge pages. 
strict_string_checks
If set check that string arguments are properly null-terminated
intercept_strstr
If set, uses custom wrappers for strstr and strcasestr functions to find more errors.
intercept_strspn
If set, uses custom wrappers for strspn and strcspn function to find more errors.
intercept_strpbrk
If set, uses custom wrappers for strpbrk function to find more errors.
intercept_strlen
If set, uses custom wrappers for strlen and strnlen functions to find more errors.
intercept_strchr
If set, uses custom wrappers for strchr, strchrnul, and strrchr functions to find more errors.
intercept_memcmp
If set, uses custom wrappers for memcmp function to find more errors.
strict_memcmp
If true, assume that memcmp(p1, p2, n) always reads n bytes before comparing p1 and p2.
intercept_memmem
If set, uses a wrapper for memmem() to find more errors.
intercept_intrin
If set, uses custom wrappers for memset/memcpy/memmove intrinsics to find more errors.
intercept_stat
If set, uses custom wrappers for *stat functions to find more errors.
intercept_send
If set, uses custom wrappers for send* functions to find more errors.
decorate_proc_maps
If set, decorate sanitizer mappings in /proc/self/maps with user-readable names
exitcode
Override the program exit status if the tool found an error
abort_on_error
If set, the tool calls abort() instead of _exit() after printing the error report.
suppress_equal_pcs
Deduplicate multiple reports for single source location in halt_on_error=false mode (asan only).
print_cmdline
Print command line on crash (asan only).
html_cov_report
Generate html coverage report.
sancov_path
Sancov tool location.
FlagHandlerInclude
ERROR: Invalid value for int option: '%s'
ERROR: Invalid value for uptr option: '%s'
Available flags for %s:
- %s
ERROR: %s
expected '='
unterminated string
expected separator or eol
Flag parsing failed.
Failed to read options from '%s': error %d
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_flag_parser.cc
((n_flags_)) < ((kMaxFlags))
WARNING: found %d unrecognized flag(s):
    %s
((n_unknown_flags_)) < ((kMaxUnknownFlags))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_libc.cc
(((reinterpret_cast<uptr>(s) | n) & 15)) == ((0))
((base)) == ((10))
((size)) <= ((1ULL << (40)))
%s: too many ignored libraries (max: %d)
%s: called_from_lib suppression '%s' is matched against 2 libraries: '%s' and '%s'
Matched called_from_lib suppression '%s' against library '%s'
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cc
((idx)) < ((kMaxLibs))
%s: library '%s' that was matched against called_from_lib suppression '%s' is unloaded
Adding instrumented range %p-%p from library '%s'
InternalMmapVectorNoCtor
login_tty failed (errno %d)
file-read-data
Checking file existance is not allowed under sandbox.
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_mac.cc
((stack_top)) != (0)
((stack_bottom)) != (0)
((getrlimit(3, &rl))) == ((0))
((environ)) != (0)
((kMaxPathLength)) <= ((buf_len))
((0 && "unimplemented")) != (0)
((owner_)) != (((uptr)pthread_self()))
((!owner_)) != (0)
((owner_ == (uptr)pthread_self())) != (0)
(((uptr)pthread_self())) == ((owner_))
((sysctl(mib, 2, 0, &len, 0, 0))) != ((-1))
((len)) < ((maxlen))
((sysctl(mib, 2, version, &len, 0, 0))) != ((-1))
Cannot get task info. Error: %d
AddressSanitizer
ThreadSanitizer
dladdr((void*)((uptr)&__sanitizer_report_error_summary), &info)
exec()-ing the program with
%s=%s
to enable wrappers.
ERROR: The process is launched without DYLD_INSERT_LIBRARIES, which is required for the sanitizer to work. We tried to set the environment variable and re-execute itself, but execv() failed, possibly because of sandbox restrictions. Make sure to launch the executable with:
%s=%s
"execv failed" && 0
pthread_create
dladdr(dlopen_addr, &info_pthread_create)
ERROR: Interceptors are not working. This may be because %s is loaded too late (e.g. via dlopen). Please launch the executable with:
%s=%s
"interceptors not installed" && 0
new_env
Register values:
%s = 0x%016llx  
x[0]
x[1]
x[2]
x[3]
x[4]
x[5]
x[6]
x[7]
x[8]
x[9]
x[10]
x[11]
x[12]
x[13]
x[14]
x[15]
x[16]
x[17]
x[18]
x[19]
x[20]
x[21]
x[22]
x[23]
x[24]
x[25]
x[26]
x[27]
x[28]
<%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X>
Process module map:
0x%zx-0x%zx %s (%s) %s
End of module map.
i386
x86_64
x86_64h
armv6
armv7
armv7s
armv7k
arm64
((0 && "Invalid module arch")) != (0)
((i)) < ((size_))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_mac_spi.cc
((!dynamic_interpose_called)) != (0)
((kMaxDynamicInterposeEntries)) > ((dynamic_interpose_entry_count))
allocate
ERROR: %s failed to deallocate 0x%zx (%zd) bytes at address %p
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_posix.cc
(("unable to unmap" && 0)) != (0)
((IsPowerOfTwo(size))) != (0)
allocate noreserve
memory at address 0x%zx
((fd != ((fd_t)-1))) != (0)
((fsize)) != (((uptr)-1))
((fsize)) > ((0))
could not map writable file (%d, %lld, %zu): %zd, errno: %d
((0)) != ((end))
DumpProcessMap
Process memory map follows:
%p-%p
End of process memory map.
ReportFile::Write() can't output requested buffer!
((start1 <= end1)) != (0)
((start2 <= end2)) != (0)
Supported Printf formats: %([0-9]*)?(z|ll)?{d,u,x,X}; %p; %(\.\*)?s; %c
format
buff_length > 0
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_printf.cc
((!(precision >= 0 && *cur != 's'))) != (0)
buff <= buff_end
((length_)) < ((size()))
base == 10 || base == 16
base == 10 || !negative
absolute_value || !negative
minimal_num_length < kMaxLen
AppendNumber buffer overflow
pos > 0
<null>
Report
==%s
Buffer in Report is too short!
==%d==
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_procmaps_mac.cc
((0 && "Invalid subtype of x86_64")) != (0)
((0 && "Invalid subtype of ARM")) != (0)
((0 && "Invalid CPU type")) != (0)
libclang_rt.
((size_)) > ((0))
((size_)) <= ((capacity_))
((size)) != (0)
((size)) < (((1ULL << (up + 1))))
((size)) > (((1ULL << up)))
((new_capacity)) > ((0))
((size_)) <= ((new_capacity))
InternalMmapVector
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stackdepot.cc
((prev + 1)) < ((StackDepotNode::kMaxUseCount))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stackdepotbase.h
((id)) < ((kMaxId))
((id)) != ((0))
((id & (((u32)-1) >> kReservedBits))) == ((id))
stack depot
((idx)) < ((kTabSize))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace.cc
((size)) <= ((kStackTraceMax))
((max_depth)) >= ((2))
((count)) < ((size))
#%n %p %F %L
0x%zx
in %s
+0x%zx
(<unknown module>)
(%p)
Unsupported specifier in stack frame format: %c (0x%zx)!
%s(%d
+0x%zx)
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_suppressions.cc
((suppression_types_num_)) <= ((kMaxSuppressionTypes))
%s: reading suppressions file at %s
%s: failed to read suppressions file '%s'
((can_parse_)) != (0)
%s: failed to parse suppressions
((i)) < ((suppressions_.size()))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.cc
((start_hook_ == 0 && end_hook_ == 0)) != (0)
0x%zx
 (in 
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_thread_registry.cc
((status == ThreadStatusRunning || status == ThreadStatusFinished)) != (0)
((false)) == ((detached))
((ThreadStatusFinished)) == ((status))
ThreadRegistry
%s: Thread limit (%u threads) exceeded. Dying.
((tctx)) != ((0))
((tid)) != ((kUnknownTid))
((tid)) < ((max_threads_))
((tctx->status)) == ((ThreadStatusInvalid))
((alive_threads_)) == ((max_alive_threads_))
((tid)) < ((n_contexts_))
((ThreadStatusRunning)) == ((tctx->status))
%s: Detach of non-existent thread
%s: Join of non-existent thread
((alive_threads_)) > ((0))
((running_threads_)) > ((0))
((ThreadStatusCreated)) == ((tctx->status))
((tctx->status)) == ((ThreadStatusDead))
Sanitizer CHECK failed: %s:%d %s (%lld, %lld)
always
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_common_libcdep.cc
((SoftRssLimitExceededCallback)) == ((nullptr))
SANCOV_OPTIONS
If set, converage information will be symbolized by sancov tool after dumping.
Print flags help.
%s/%zd.sancov.raw
Coverage: failed to open %s for reading/writing
CovInit
CovInit::cc_array
CovInit::tr_event_array
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_coverage_libcdep.cc
((atomic_load(&pc_array_index, memory_order_relaxed))) == ((0))
((pc_fd)) != ((((fd_t)-1)))
((new_mapped_size)) <= ((sizeof(uptr) * kPcArrayMaxSize))
failed to extend raw coverage file: %d
(((uptr)p)) == ((next_map_base))
((reinterpret_cast<uptr>(counters) % 16)) == ((0))
((n)) < ((1 << 30))
((0)) == ((pc >> (64 - kBundleCounterBits)))
((idx * sizeof(uptr))) < ((atomic_load(&pc_array_size, memory_order_acquire)))
((idx * sizeof(uptr))) < ((atomic_load(&cc_array_size, memory_order_acquire)))
((atomic_load(&atomic_callee_cache[0], memory_order_relaxed))) == ((caller))
((reinterpret_cast<uptr>(bitset) % kBatchSize)) == ((0))
((n % 16)) == ((0))
((cur % kBatchSize)) == ((0))
((reinterpret_cast<uptr>(c) % kBatchSize)) == ((0))
((cur)) < ((num_8bit_counters))
((cur)) == ((num_8bit_counters))
%s 0x%zx
trace-points
trace-compunits
trace-events
 CovDump: Trace: %zd PCs written
 CovDump: Trace: %zd Events written
((cc_cache)) != (0)
%s 0x%zx
%s 0x%zx
caller-callee
 CovDump: %zd caller-callee pairs written
((r.copied_module_name)) != (0)
((r.beg)) <= ((r.end))
((r.end)) <= ((size()))
counters-sancov
 CovDump: %zd counters written for '%s'
bitset-sancov
 CovDump: bitset of %zd bits written for '%s', %zd bits are set
((offsets->size())) >= ((kNumWordsForMagic))
((sym)) != ((nullptr))
((*magic_p)) == ((0ULL))
 CovDump: %zd PCs written to packed file
 CovDump: %s: %zd PCs written
((name)) != (0)
%s/%s.%zd.%s
%s/%zd.%s.packed
%s/%s.%s.packed
SanitizerCoverage: failed to open %s for writing (reason: %d)
((header_size_with_module)) < ((cov_max_block_size))
-html-report
html
coverage report generated to %s
ERROR: bad pc %x
TODO(aizatsky): call sancov to symbolize
SanitizerCoverage: %s %zd PCs written
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_coverage_libcdep_new.cc
((!*start)) != (0)
%zx %zx %zx %s
%s/%zd.sancov.map.tmp
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_coverage_mapping_libcdep.cc
((res)) <= ((tmp_path.size()))
Coverage: failed to open %s for writing: %d
sancov.map write failed: %d
%s/%zd.sancov.map
((res)) <= ((path.size()))
sancov.map rename failed: %d
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cc
((!StackSizeIsUnlimited())) != (0)
((AddressSpaceIsUnlimited())) != (0)
((0)) == ((sigaltstack(nullptr, &oldstack)))
SetAlternateSignalStack
((0)) == ((sigaltstack(&altstack, nullptr)))
((0)) == ((sigaltstack(&altstack, &oldstack)))
((size)) < ((page_size * 10))
((14)) == ((write_errno))
((internal_strlen(name) < sizeof(shmname) - 10)) != (0)
%zu [%s]
((0)) == ((res))
ERROR: %s failed to allocate 0x%zx (%zd) bytes at address %zx (errno: %d)
Sanitizer: increasing stacksize %zu->%zu
Sanitizer: pre-allocated stack size is insufficient: %zu < %zu
Sanitizer: pthread_create is likely to fail.
WARNING: failed to fork (errno %d)
Waiting on the process failed (errno %d).
ERROR: %s setrlimit() failed %d
((0)) == ((getrlimit(res, &rlim)))
((0)) == ((internal_sigaction(signum, &sigact, nullptr)))
Installed the sigaction for signal %d
    <empty stack>
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_libcdep.cc
((frames)) != (0)
DEDUP_TOKEN: %s
<can't symbolize>
modules_.size() > 0
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cc
((symbolizer_)) != (0)
((function_name)) != (0)
((module_name)) != (0)
DATA 
%s"%s" 0x%zx
%s"%s:%s" 0x%zx
((path_)) != (0)
((path_[0])) != (('\0'))
WARNING: Failed to use and restart external symbolizer!
WARNING: Can't read from symbolizer at fd %d
WARNING: Can't write to symbolizer at fd %d
((i)) < ((modules_.size()))
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_internal.h
--default-arch=arm64
--inlining=true
--inlining=false
((file_line_info)) != (0)
WARNING: invalid path to external symbolizer!
WARNING: Can't create a socket pair to start external symbolizer (errno: %d)
process-fork
WARNING: Forking external symbolizer is not allowed under sandbox.
WARNING: failed to fork external symbolizer
/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-900.0.35/src/projects/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_posix_libcdep.cc
WARNING: failed to fork external symbolizer (errno: %d)
((pid)) > ((0))
WARNING: external symbolizer didn't start up correctly!
((infd)) != (0)
((outfd)) != (0)
Symbolizer is disabled.
Cannot use internal symbolizer: out of memory
Using internal symbolizer.
Using libbacktrace symbolizer.
Using dladdr symbolizer.
External symbolizer is explicitly disabled.
llvm-symbolizer
Using llvm-symbolizer at user-specified path: %s
atos
Using atos at user-specified path: %s
addr2line
Using addr2line at user-specified path: %s
ERROR: External symbolizer path is set to '%s' which isn't a known symbolizer. Please set the path to the llvm-symbolizer binary or other known tool.
Using atos found at: %s
Using llvm-symbolizer found at: %s
Using addr2line found at: %s
((0)) == ((internal_strcmp(module_name, addr2line->module_name())))
0x%zx
0x%zx
swift_demangle
-iCfe
((garbage)) != (0)
vptr_check
N11__sanitizer11FlagHandlerIbEE
N11__sanitizer15FlagHandlerBaseE
N11__sanitizer11FlagHandlerIPKcEE
v@DYLD_INSERT_LIBRARIES
??:0
Address Sanitizer reported a failure.
Undefined Behavior Sanitizer reported a failure.
Thread Sanitizer reported a failure.
Sanitizer tool reported a failure.
Consult syslog for more information.
@2i 
@i 
