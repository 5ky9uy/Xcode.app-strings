SizeClassAllocator
LargeMmapAllocator
FATAL: %s: reallocarray parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
FATAL: %s: calloc parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
Allocate
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_allocator.cpp
((allocated_end_ - allocated_current_ >= (sptr)size)) != (0)
((IsPowerOfTwo(alignment))) != (0)
HINT: if you don't care about these errors you may set allocator_may_return_null=1
WARNING: %s: CombinedAllocator allocation overflow: 0x%zx bytes with 0x%zx alignment requested
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_allocator_combined.h
((reinterpret_cast<uptr>(res) & (alignment - 1))) == ((0))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_allocator_local_cache.h
((class_id)) != ((0UL))
((class_id)) < ((kNumClasses))
((b->Count())) > ((0))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_common.h
((x)) != ((0U))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_allocator_primary32.h
((IsAligned(res, kRegionSize))) != (0)
TwoLevelMap
((res)) < ((kNumPossibleRegions))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_list.h
((!empty())) != (0)
FATAL: Internal error: %s's allocator failed to allocate a transfer batch.
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_allocator_secondary.h
WARNING: %s: LargeMmapAllocator allocation overflow: 0x%zx bytes with 0x%zx alignment requested
((IsAligned(map_beg, page_size_))) != (0)
((IsAligned(res, alignment))) != (0)
((IsAligned(res, page_size_))) != (0)
((res + size)) >= ((map_beg))
((res + size)) <= ((map_end))
((IsAligned(p, page_size_))) != (0)
((n)) < ((kMaxNumChunks))
FATAL: %s: internal allocator is out of memory trying to allocate 0x%zx bytes
((PointerIsMine(p))) != (0)
((chunks_[idx])) == ((h))
((idx)) < ((n_chunks_))
((nearest_chunk)) >= ((h->map_beg))
((nearest_chunk)) < ((h->map_beg + h->map_size))
((nearest_chunk)) <= ((p))
((IsAligned((uptr)h, page_size_))) != (0)
IsPowerOfTwo(boundary)
SanitizerTool
ERROR: Failed to mmap
ERROR: %s failed to %s 0x%zx (%zd) bytes of %s (error code: %d)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_common.cpp
((0 && "unable to mmap")) != (0)
SUMMARY: %s: %s
((s)) >= ((z))
(total_mmaped >> 20) < common_flags()->mmap_limit_mb
Command: 
((new_capacity)) > ((0))
((size_)) <= ((new_capacity))
InternalMmapVector
deadlock detector
WARNING: too long mutex cycle found
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector1.cpp
((m->id)) == ((path[0]))
((!dd.isHeld(&lt->dd, m->id))) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_deadlock_detector.h
((available_nodes_.empty())) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_bitvector.h
((0)) != (0)
((idx)) < ((size()))
((idx)) <= ((size()))
((epoch_)) == ((current_epoch))
((node)) >= ((size()))
((current_epoch_)) == ((nodeToEpoch(node)))
((!tmp_bv_.getBit(idx))) != (0)
((path[0])) == ((cur_node))
((it2_.hasNext())) != (0)
((n_recursive_locks)) < (((sizeof(recursive_locks)/sizeof((recursive_locks)[0]))))
((n_all_locks_)) < (((sizeof(all_locks_with_contexts_)/sizeof((all_locks_with_contexts_)[0]))))
((!available_nodes_.getBit(idx))) != (0)
((recycled_nodes_.setBit(idx))) != (0)
%s.%s.%zu
%s.%zu
ERROR: Can't open file: 
 (reason: %d)
ERROR: Path is too long: %c%c%c%c%c%c%c%c...
stderr
stdout
ReadFileToBuffer
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_file.cpp
((read_len)) < ((buff->size()))
((buff->size())) <= ((max_len))
PATH
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_mutex.h
((atomic_load(&state_, memory_order_relaxed))) == ((1))
((i)) < ((size_))
auto
DEFAULT
sancov
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_flags.cpp
((base)) != (0)
((out < out_end - 1)) != (0)
include
read more options from the given file
include_if_exists
read more options from the given file (if it exists)
symbolize
If set, use the online symbolizer from common sanitizer runtime to turn virtual addresses to file/line locations.
external_symbolizer_path
Path to external symbolizer. If empty, the tool will search $PATH for the symbolizer.
allow_addr2line
If set, allows online symbolizer to run addr2line binary to symbolize stack traces (addr2line will only be used if llvm-symbolizer binary is unavailable.
strip_path_prefix
Strips this prefix from file paths in error reports.
fast_unwind_on_check
If available, use the fast frame-pointer-based unwinder on internal CHECK failures.
fast_unwind_on_fatal
If available, use the fast frame-pointer-based unwinder on fatal errors.
fast_unwind_on_malloc
If available, use the fast frame-pointer-based unwinder on malloc/free.
handle_ioctl
Intercept and handle ioctl requests.
malloc_context_size
Max number of stack frames kept for each allocation/deallocation.
log_path
Write logs to "log_path.pid". The special values are "stdout" and "stderr". If unspecified, defaults to "stderr".
log_exe_name
Mention name of executable when reporting error and append executable name to logs (as in "log_path.exe_name.pid").
log_suffix
String to append to log file name, e.g. ".txt".
log_to_syslog
Write all sanitizer output to syslog in addition to other means of logging.
verbosity
Verbosity level (0 - silent, 1 - a bit of output, 2+ - more output).
strip_env
Whether to remove the sanitizer from DYLD_INSERT_LIBRARIES to avoid passing it to children. Default is true.
detect_leaks
Enable memory leak detection.
leak_check_at_exit
Invoke leak checking in an atexit handler. Has no effect if detect_leaks=false, or if __lsan_do_leak_check() is called before the handler has a chance to run.
allocator_may_return_null
If false, the allocator will crash instead of returning 0 on out-of-memory.
print_summary
If false, disable printing error summaries in addition to error reports.
print_module_map
Print the process module map where supported (0 - don't print, 1 - print only once before process exits, 2 - print after each report).
check_printf
Check printf arguments.
handle_segv
Controls custom tool's SIGSEGV handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigbus
Controls custom tool's SIGBUS handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_abort
Controls custom tool's SIGABRT handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigill
Controls custom tool's SIGILL handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigtrap
Controls custom tool's SIGTRAP handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
handle_sigfpe
Controls custom tool's SIGFPE handler (0 - do not registers the handler, 1 - register the handler and allow user to set own, 2 - registers the handler and block user from changing it). 
allow_user_segv_handler
Deprecated. True has no effect, use handle_sigbus=1. If false, handle_*=1 will be upgraded to handle_*=2.
use_sigaltstack
If set, uses alternate stack for signal handling.
detect_deadlocks
If set, deadlock detection is enabled.
clear_shadow_mmap_threshold
Large shadow regions are zero-filled using mmap(NORESERVE) instead of memset(). This is the threshold size in bytes.
color
Colorize reports: (always|never|auto).
legacy_pthread_cond
Enables support for dynamic libraries linked with libpthread 2.2.5.
intercept_tls_get_addr
Intercept __tls_get_addr.
help
Print the flag descriptions.
mmap_limit_mb
Limit the amount of mmap-ed memory (excluding shadow) in Mb; not a user-facing flag, used mosly for testing the tools
hard_rss_limit_mb
Hard RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS and aborts the process if the limit is reached
soft_rss_limit_mb
Soft RSS limit in Mb. If non-zero, a background thread is spawned at startup which periodically reads RSS. If the limit is reached all subsequent malloc/new calls will fail or return NULL (depending on the value of allocator_may_return_null) until the RSS goes below the soft limit. This limit does not affect memory allocations other than malloc/new.
max_allocation_size_mb
If non-zero, malloc/new calls larger than this size will return nullptr (or crash if allocator_may_return_null=false).
heap_profile
Experimental heap profiler, asan-only
allocator_release_to_os_interval_ms
Only affects a 64-bit allocator. If set, tries to release unused memory to the OS, but not more often than this interval (in milliseconds). Negative values mean do not attempt to release memory to the OS.
can_use_proc_maps_statm
If false, do not attempt to read /proc/maps/statm. Mostly useful for testing sanitizers.
coverage
If set, coverage information will be dumped at program shutdown (if the coverage instrumentation was enabled at compile time).
coverage_dir
Target directory for coverage dumps. Defaults to the current directory.
cov_8bit_counters_out
If non-empty, write 8bit counters to this file. 
cov_pcs_out
If non-empty, write the coverage pc table to this file. 
full_address_space
Sanitize complete address space; by default kernel area on 32-bit platforms will not be sanitized
print_suppressions
Print matched suppressions at exit.
disable_coredump
Disable core dumping. By default, disable_coredump=1 on 64-bit to avoid dumping a 16T+ core file. Ignored on OSes that don't dump core by default and for sanitizers that don't reserve lots of virtual memory.
use_madv_dontdump
If set, instructs kernel to not store the (huge) shadow in core file.
symbolize_inline_frames
Print inlined frames in stacktraces. Defaults to true.
symbolize_vs_style
Print file locations in Visual Studio style (e.g:  file(10,42): ...
dedup_token_length
If positive, after printing a stack trace also print a short string token based on this number of frames that will simplify deduplication of the reports. Example: 'DEDUP_TOKEN: foo-bar-main'. Default is 0.
stack_trace_format
Format string used to render stack frames. See sanitizer_stacktrace_printer.h for the format description. Use DEFAULT to get default format.
no_huge_pages_for_shadow
If true, the shadow is not allowed to use huge pages. 
strict_string_checks
If set check that string arguments are properly null-terminated
intercept_strstr
If set, uses custom wrappers for strstr and strcasestr functions to find more errors.
intercept_strspn
If set, uses custom wrappers for strspn and strcspn function to find more errors.
intercept_strtok
If set, uses a custom wrapper for the strtok function to find more errors.
intercept_strpbrk
If set, uses custom wrappers for strpbrk function to find more errors.
intercept_strcmp
If set, uses custom wrappers for strcmp functions to find more errors.
intercept_strlen
If set, uses custom wrappers for strlen and strnlen functions to find more errors.
intercept_strndup
If set, uses custom wrappers for strndup functions to find more errors.
intercept_strchr
If set, uses custom wrappers for strchr, strchrnul, and strrchr functions to find more errors.
intercept_memcmp
If set, uses custom wrappers for memcmp function to find more errors.
strict_memcmp
If true, assume that memcmp(p1, p2, n) always reads n bytes before comparing p1 and p2.
intercept_memmem
If set, uses a wrapper for memmem() to find more errors.
intercept_intrin
If set, uses custom wrappers for memset/memcpy/memmove intrinsics to find more errors.
intercept_stat
If set, uses custom wrappers for *stat functions to find more errors.
intercept_send
If set, uses custom wrappers for send* functions to find more errors.
decorate_proc_maps
If set, decorate sanitizer mappings in /proc/self/maps with user-readable names
exitcode
Override the program exit status if the tool found an error
abort_on_error
If set, the tool calls abort() instead of _exit() after printing the error report.
suppress_equal_pcs
Deduplicate multiple reports for single source location in halt_on_error=false mode (asan only).
print_cmdline
Print command line on crash (asan only).
html_cov_report
Generate html coverage report.
sancov_path
Sancov tool location.
dump_instruction_bytes
If true, dump 16 bytes starting at the instruction that caused SEGV
dump_registers
If true, dump values of CPU registers when SEGV happens. Only available on OS X for now.
detect_write_exec
If true, triggers warning when writable-executable pages requests are being made
test_only_emulate_no_memorymap
TEST ONLY fail to read memory mappings to emulate sanitized "init"
FlagHandlerInclude
ERROR: Invalid value for bool option: '%s'
false
true
ERROR: Invalid value for int option: '%s'
exclusive
ERROR: Invalid value for signal handler option: '%s'
ERROR: Invalid value for uptr option: '%s'
0x%zx
Available flags for %s:
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_flag_parser.cpp
((buffer[sizeof(buffer) - 1])) == (('\0'))
 Truncated
- %s (Current Value%s: %s)
%s: ERROR: %s
%s: ERROR: expected '=' in %s
expected '='
unterminated string
Flag parsing failed.
%s: %s
<empty>
Failed to read options from '%s': error %d
((n_flags_)) < ((kMaxFlags))
WARNING: found %d unrecognized flag(s):
    %s
((n_unknown_flags_)) < ((kMaxUnknownFlags))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_libc.cpp
((base)) == ((10))
((size)) <= ((1ULL << (40)))
%s: too many ignored libraries (max: %zu)
%s: called_from_lib suppression '%s' is matched against 2 libraries: '%s' and '%s'
Matched called_from_lib suppression '%s' against library '%s'
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_libignore.cpp
((idx)) < (((sizeof(ignored_code_ranges_)/sizeof((ignored_code_ranges_)[0]))))
%s: library '%s' that was matched against called_from_lib suppression '%s' is unloaded
Adding instrumented range 0x%zx-0x%zx from library '%s'
((idx)) < (((sizeof(instrumented_code_ranges_)/sizeof((instrumented_code_ranges_)[0]))))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_mac.cpp
((false && "internal_mremap is unimplemented on Mac")) != (0)
((0 && "unimplemented")) != (0)
WARNING: Spawning external symbolizer is not allowed under sandbox.
Checking file existence is not allowed under sandbox.
((stack_top)) != (0)
((stack_bottom)) != (0)
((getrlimit(3, &rl))) == ((0))
((environ)) != (0)
((kMaxPathLength)) <= ((buf_len))
((internal_strlen(vers))) >= ((3))
((*p)) == (('.'))
kern.osrelease
((res)) == ((0))
((len)) < ((sizeof(VersStr)))
Cannot get task info. Error: %d
com.apple.sanitizer
%{public}s
AddressSanitizer
UndefinedBehaviorSanitizer
ThreadSanitizer
internal_dladdr((void*)((uptr)&__sanitizer_report_error_summary), &info)
exec()-ing the program with
%s=%s
to enable wrappers.
ERROR: The process is launched without DYLD_INSERT_LIBRARIES, which is required for the sanitizer to work. We tried to set the environment variable and re-execute itself, but execv() failed, possibly because of sandbox restrictions. Make sure to launch the executable with:
%s=%s
"execv failed" && 0
puts
internal_dladdr(dlopen_addr, &info_puts)
ERROR: Interceptors are not working. This may be because %s is loaded too late (e.g. via dlopen). Please launch the executable with:
%s=%s
"interceptors not installed" && 0
new_env
FindDynamicShadowStart, space_size = %p
Shadow doesn't fit, largest_gap_found = %p, max_occupied_addr = %p
Unable to find a memory range for dynamic shadow.
space_size = %p, largest_gap_found = %p, max_occupied_addr = %p, new_max_vm = %p
((0 && "cannot place shadow")) != (0)
Unable to find a memory range after restricting VM.
((0 && "cannot place shadow after restricting vm")) != (0)
((IsAligned(shadow_start, alignment))) != (0)
((false && "HWASan aliasing is unimplemented on Mac")) != (0)
Register values:
%s = 0x%016llx  
x[0]
x[1]
x[2]
x[3]
x[4]
x[5]
x[6]
x[7]
x[8]
x[9]
x[10]
x[11]
x[12]
x[13]
x[14]
x[15]
x[16]
x[17]
x[18]
x[19]
x[20]
x[21]
x[22]
x[23]
x[24]
x[25]
x[26]
x[27]
x[28]
   %s = 0x%016llx  
<%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X>
Process module map:
0x%zx-0x%zx %s (%s) %s
End of module map.
SIMULATOR_RUNTIME_VERSION
ERROR: Running in simulator but SIMULATOR_RUNTIME_VERSION env var is not set.
((atomic_load(&state_, memory_order_relaxed) & kWriterLock)) != (0)
task_set_exc_guard_behavior
i386
x86_64
x86_64h
armv6
armv7
armv7s
armv7k
arm64
arm64e
arm64_32
riscv64
hexagon
((0 && "Invalid module arch")) != (0)
file-read-data
process-fork
process-exec*
sandbox_check(%s, %d, %s) failed with errno: %d
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_mutex.cpp
((count)) != ((0))
allocate
ERROR: %s failed to deallocate 0x%zx (%zd) bytes at address %p
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_posix.cpp
(("unable to unmap" && 0)) != (0)
((IsPowerOfTwo(size))) != (0)
allocate noreserve
((fd != ((fd_t)-1))) != (0)
((fsize)) != (((uptr)-1))
((fsize)) > ((0))
could not map writable file (%d, %lld, %zu): %zd, errno: %d
((0)) != ((segment.end))
ABRT
SEGV
TRAP
UNKNOWN SIGNAL
/proc/
memory at address 0x%zx
((start1 <= end1)) != (0)
((start2 <= end2)) != (0)
Supported Printf formats: %([0-9]*)?(z|l|ll)?{d,u,x,X}; %p; %[-]([0-9]*)?(\.\*)?s; %c
Provided format: 
format
buff_length > 0
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_printf.cpp
((!((precision >= 0 || left_justified) && *cur != 's'))) != (0)
!have_flags
!have_length
((!have_width || left_justified)) != (0)
false
buff <= buff_end
((buffer_[length()])) == (('\0'))
base == 10 || base == 16
base == 10 || !negative
absolute_value || !negative
minimal_num_length < kMaxLen
AppendNumber buffer overflow
<null>
==%s
==%d==
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_procmaps_mac.cpp
((0 && "Invalid subtype of x86_64")) != (0)
((0 && "Invalid subtype of ARM")) != (0)
((0 && "CPU_SUBTYPE_ARM64_32_ALL cpu subtype not supported")) != (0)
((0 && "Invalid CPU type")) != (0)
libclang_rt.
((size_)) > ((0))
((size_)) <= ((capacity()))
((size)) != (0)
((size)) < (((1ULL << (up + 1))))
((size)) > (((1ULL << up)))
Failed to get threads for task (errno %d).
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_mac.cpp
((index)) < ((threads_.size()))
Error - unable to get thread ident for a thread
Error - unable to get registers for a thread
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_suppressions.cpp
((suppression_types_num_)) <= ((kMaxSuppressionTypes))
%s: reading suppressions file at %s
%s: failed to read suppressions file '%s'
((can_parse_)) != (0)
%s: failed to parse suppressions
((i)) < ((suppressions_.size()))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.cpp
((0 && "dtls is unsupported on this platform!")) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_thread_registry.cpp
((status == ThreadStatusRunning || status == ThreadStatusFinished)) != (0)
((false)) == ((detached))
((ThreadStatusFinished)) == ((status))
%s: Thread limit (%u threads) exceeded. Dying.
((tctx)) != ((0))
((tid)) != ((kInvalidTid))
((tid)) < ((max_threads_))
((tctx->status)) == ((ThreadStatusInvalid))
((alive_threads_)) == ((max_alive_threads_))
((0 ? ThreadStatusCreated : ThreadStatusRunning)) == ((tctx->status))
%s: Detach of non-existent thread
%s: Join of non-existent thread
((alive_threads_)) > ((0))
((running_threads_)) > ((0))
((tctx->status)) == ((ThreadStatusCreated))
((ThreadStatusCreated)) == ((tctx->status))
((tctx->status)) == ((ThreadStatusDead))
((tctx->status)) != ((ThreadStatusInvalid))
((tctx->status)) != ((ThreadStatusDead))
((tctx->user_id)) == ((0))
%s: CHECK failed: %s:%d "%s" (0x%zx, 0x%zx) (tid=%u)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_common_libcdep.cpp
((SoftRssLimitExceededCallback)) == ((nullptr))
((IsPowerOfTwo(align))) != (0)
(((beg % GetMmapGranularity()))) == ((0))
((((end + 1) % GetMmapGranularity()))) == ((0))
ReserveShadowMemoryRange failed while trying to map 0x%zx bytes. Perhaps you're using ulimit -v
shadow gap
ERROR: Failed to protect the shadow gap. %s cannot proceed correctly. ABORTING.
high gap
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_mac_libcdep.cpp
((res != ((void *)-1))) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_posix_libcdep.cpp
((!StackSizeIsUnlimited())) != (0)
((AddressSpaceIsUnlimited())) != (0)
((0)) == ((sigaltstack(nullptr, &oldstack)))
SetAlternateSignalStack
((0)) == ((sigaltstack(&altstack, nullptr)))
((0)) == ((sigaltstack(&altstack, &oldstack)))
((size)) < ((page_size * 10))
((14)) == ((write_errno))
((size)) <= ((size_))
((addr + size)) == ((reinterpret_cast<uptr>(base_) + size_))
Sanitizer: increasing stacksize %zu->%zu
Sanitizer: pre-allocated stack size is insufficient: %zu < %zu
Sanitizer: pthread_create is likely to fail.
WARNING: failed to fork (errno %d)
Waiting on the process failed (errno %d).
ERROR: %s getrlimit() failed %d
ERROR: %s setrlimit() failed %d
((0)) == ((getrlimit(res, &rlim)))
((0)) == ((internal_sigaction(signum, &sigact, nullptr)))
Installed the sigaction for signal %d
ERROR: %s failed to allocate 0x%zx (%zd) bytes at address %zx (errno: %d)
SANCOV_OPTIONS
If set, coverage information will be symbolized by sancov tool after dumping.
Print flags help.
ERROR: unknown pc 0x%zx (may happen if dlclose is used)
SanitizerCoverage: %s: %zd PCs written
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_coverage_libcdep_new.cpp
((name)) != (0)
%s/%s.%zd.%s
SanitizerCoverage: failed to open %s for writing (reason: %d)
((!*start)) != (0)
cov_8bit_counters_out: written %zd bytes to %s
cov_pcs_out: written %zd bytes to %s
calloc-overflow
ERROR: %s: calloc parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
reallocarray-overflow
ERROR: %s: reallocarray parameters overflow: count * size (%zd * %zd) cannot be represented in type size_t
pvalloc-overflow
ERROR: %s: pvalloc parameters overflow: size 0x%zx rounded up to system page size 0x%zx cannot be represented in type size_t
invalid-allocation-alignment
ERROR: %s: invalid allocation alignment: %zd, alignment must be a power of two
invalid-aligned-alloc-alignment
ERROR: %s: invalid alignment requested in aligned_alloc: %zd, alignment must be a power of two and the requested size 0x%zx must be a multiple of alignment
invalid-posix-memalign-alignment
ERROR: %s: invalid alignment requested in posix_memalign: %zd, alignment must be a power of two and a multiple of sizeof(void*) == %zd
allocation-size-too-big
ERROR: %s: requested allocation size 0x%zx exceeds maximum supported size of 0x%zx
out-of-memory
ERROR: %s: allocator is out of memory trying to allocate 0x%zx bytes
rss-limit-exceeded
ERROR: %s: allocator exceeded the RSS limit
[31m
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_stackdepotbase.h
((s & kUnlockMask)) == ((s))
((id & (((u32)-1) >> kReservedBits))) == ((id))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_stackdepot.cpp
((args.size)) < ((1 << kStackSizeBits))
stack depot
Stack for id %u:
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace.cpp
((size)) <= ((kStackTraceMax))
((max_depth)) >= ((2))
((count)) < ((size))
((stack_top)) > ((stack_bottom))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_libcdep.cpp
((output)) != (0)
    <empty stack>
((printer.ProcessAddressFrames(pc))) != (0)
DEDUP_TOKEN: %s
((out_buf)) != (0)
((request_fast_unwind)) == ((WillUseFastUnwind(request_fast_unwind)))
<can't symbolize>
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.cpp
((!info || address == info->address)) != (0)
in %s
+0x%zx
(<unknown module>)
(%p)
Unsupported specifier in stack frame format: %c (%p)!
%s(%d
+0x%zx)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer.cpp
((start_hook_ == 0 && end_hook_ == 0)) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_libcdep.cpp
((symbolizer_)) != (0)
modules_.size() > 0
CODE
DATA
FRAME
((module_name)) != (0)
%s "%s" 0x%zx
%s "%s:%s" 0x%zx
WARNING: Command buffer too small
((path_)) != (0)
((path_[0])) != (('\0'))
WARNING: Symbolizer was blocked from starting itself!
WARNING: Failed to use and restart external symbolizer!
WARNING: Can't read from symbolizer at fd %d
WARNING: Symbolizer buffer too small
WARNING: Can't write to symbolizer at fd %d
((i)) < ((modules_.size()))
--default-arch=arm64e
--inlines
--no-inlines
0x%zx
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_mac.cpp
((ret)) == ((0))
__check_mach_ports_lookup=%s
((count)) >= ((sizeof("__check_mach_ports_lookup") + internal_strlen(pid_str_)))
 (in 
((result)) == ((0))
WARNING: invalid path to external symbolizer!
Launching Symbolizer process: 
WARNING: failed to spawn external symbolizer (errno: %d)
WARNING: Can't create a socket pair to start external symbolizer (errno: %d)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_posix_libcdep.cpp
((pid)) > ((0))
WARNING: external symbolizer didn't start up correctly!
((infd)) != (0)
((outfd)) != (0)
Symbolizer is disabled.
Cannot use internal symbolizer: out of memory
Using libbacktrace symbolizer.
Using dladdr symbolizer.
External symbolizer is explicitly disabled.
Using llvm-symbolizer at user-specified path: %s
atos
Using atos at user-specified path: %s
addr2line
Using addr2line at user-specified path: %s
ERROR: External symbolizer path is set to '%s' which isn't a known symbolizer. Please set the path to the llvm-symbolizer binary or other known tool.
Using atos found at: %s
Using llvm-symbolizer found at: %s
Using addr2line found at: %s
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_internal.h
((0)) == ((internal_strcmp(module_name, addr2line->module_name())))
0x%zx
0x%zx
swift_demangle
((garbage)) != (0)
-iCfe
%L %F
always
WARNING: %s: writable-executable page usage
w-and-x-usage
ABORTING
ERROR: %s: %s on address %p (pc %p bp %p sp %p T%d)
ERROR: %s: %s on unknown address (pc %p bp %p sp %p T%d)
ERROR: %s: %s on unknown address %p (pc %p bp %p sp %p T%d)
Hint: pc points to the zero page.
WRITE
READ
UNKNOWN
The signal is caused by a %s memory access.
Hint: this fault was caused by a dereference of a high value address (see register values below).  Disassemble the provided pc to learn which register was used.
Hint: address points to the zero page.
%s can not provide additional info.
First 16 instruction bytes at pc: 
unaccessible
%s%s%x%x%s 
[35m
<unknown>
%s runtime error: %s%s
%s note: %s
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/ubsan/ubsan_diag.cpp
((nullptr)) == ((suppression_ctx))
((suppression_ctx)) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/ubsan/ubsan_diag.h
((NumArgs != MaxArgs)) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/ubsan/../sanitizer_common/sanitizer_common.h
'%s'
%lld
%llu
0x%08x%08x%08x%08x
undefined-behavior
null-pointer-use
nullptr-with-offset
nullptr-with-nonzero-offset
nullptr-after-nonzero-offset
pointer-overflow
misaligned-pointer-use
alignment-assumption
insufficient-object-size
signed-integer-overflow
unsigned-integer-overflow
integer-divide-by-zero
float-divide-by-zero
invalid-builtin-use
invalid-objc-cast
implicit-unsigned-integer-truncation
implicit-signed-integer-truncation
implicit-integer-sign-change
implicit-signed-integer-truncation-or-sign-change
invalid-shift-base
invalid-shift-exponent
out-of-bounds-index
unreachable-call
missing-return
non-positive-vla-index
float-cast-overflow
invalid-bool-load
invalid-enum-load
function-type-mismatch
invalid-null-return
invalid-null-argument
dynamic-type-mismatch
cfi-bad-type
((0 && "unknown ErrorType!")) != (0)
[30m
<memory cannot be printed>
%s%02x
[32m
((isMemoryLocation())) != (0)
undefined
null
nullability-assign
alignment
object-size
implicit-signed-integer-truncation,implicit-integer-sign-change
shift-base
shift-exponent
bounds
unreachable
return
vla-bound
bool
enum
function
returns-nonnull-attribute
nullability-return
nonnull-attribute
nullability-arg
vptr
halt_on_error
Crash the program after printing the first error report
print_stacktrace
Include full stacktrace into an error report
suppressions
Suppressions file name.
report_error_type
Print specific error type instead of 'undefined-behavior' in summary.
silence_unsigned_overflow
Do not print non-fatal error reports for unsigned integer overflow. Used to provide fuzzing signal without blowing up logs.
UBSAN_SYMBOLIZER_PATH
UBSAN_OPTIONS
load of
store to
reference binding to
member access within
member call on
constructor call on
downcast of
upcast of
cast to virtual base of
_Nonnull binding to
dynamic operation on
%0 null pointer of type %1
%0 misaligned address %1 for type %3, which requires %2 byte alignment
%0 address %1 with insufficient space for an object of type %2
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/ubsan/ubsan_handlers.cpp
((0 && "unexpected error type!")) != (0)
pointer points here
((CallerPC)) != (0)
assumption of %0 byte alignment for pointer of type %1 failed
assumption of %0 byte alignment (with offset of %1 byte) for pointer of type %2 failed
alignment assumption was specified here
%0address is %1 aligned, misalignment offset is %2 bytes
offset 
negation of %0 cannot be represented in type %1; cast to an unsigned type to negate this value to itself
negation of %0 cannot be represented in type %1
division of %0 by -1 cannot be represented in type %1
division by zero
shift exponent %0 is negative
shift exponent %0 is too large for %1-bit type %2
left shift of negative value %0
left shift of %0 by %1 places cannot be represented in type %2
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/ubsan/ubsan_value.h
((isIntegerTy())) != (0)
index %0 out of bounds for type %1
execution reached an unreachable program point
execution reached the end of a value-returning function without returning a value
variable length array bound evaluates to non-positive value %0
%0 is outside the range of representable values of type %2
'bool'
'BOOL'
load of value %0, which is not a valid value for type %1
implicit conversion from type %0 of value %1 (%2-bit, %3signed) to type %4 changed the value to %5 (%6-bit, %7signed)
passing zero to %0, which is not a valid argument
ctz()
clz()
<unknown type>
invalid ObjC cast, object is a '%0', but expected a %1
((0 && "source location pointer is null!")) != (0)
null pointer returned from function declared to never return null
%0 specified here
returns_nonnull attribute
_Nonnull return type annotation
null pointer passed as argument %0, which is declared to never be null
nonnull attribute
_Nonnull type annotation
applying zero offset to null pointer
applying non-zero offset %0 to null pointer
applying non-zero offset to non-null pointer %0 produced null pointer
addition of unsigned offset to %0 overflowed to %1
subtraction of unsigned offset from %0 overflowed to %1
pointer index expression with base %0 overflowed to %1
non-virtual pointer to member function call
indirect function call
control flow integrity check for type %0 failed during %1
(unknown)
%0 defined here
check failed in %0, destination function located in %1
%0 integer overflow: %1 %2 %3 cannot be represented in type %4
signed
unsigned
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/ubsan/ubsan_monitor.cpp
((0 && "Invalid arguments passed to __ubsan_get_current_report_data")) != (0)
/usr/lib/libobjc.A.dylib
object_getClassName
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/ubsan/ubsan_value.cpp
((getType().isSignedIntegerTy())) != (0)
((0 && "unexpected bit width")) != (0)
((getType().isUnsignedIntegerTy())) != (0)
((Val >= 0)) != (0)
((getType().isFloatTy())) != (0)
((0 && "unexpected floating point bit width")) != (0)
virtual call
non-virtual call
base-to-derived cast
cast to unrelated type
virtual pointer to member function call
control flow integrity check for type %0 failed during %1 (vtable address %2)
invalid vtable
vtable is of type %0
check failed in %0, vtable located in %1
%0 address %1 which does not point to an object of type %2
object has a possibly invalid vptr: abs(offset to top) too big
possibly invalid vptr
object has invalid vptr
invalid vptr
object is of type %0
vptr for %0
object is base class subobject at offset %0 within object of type %1
vptr for %2 base class of %1
call to function %0 through pointer to incorrect function type %1
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_clock.cpp
((tid)) < ((kMaxTidInClock))
((reused_)) == ((((u64)reused_ << kClkBits) >> kClkBits))
((dst->dirty_[0].tid())) == ((kInvalidTid))
clock=[
%s%llu
] tid=%u/%u last_acq=%llu
((size_)) == ((0))
((blocks_)) == ((0))
((tab_)) == ((0))
((tab_idx_)) == ((0))
((top)) < ((ClockBlock::kClockCount))
((dirty->tid())) < ((size_))
((v)) > ((0))
] reused=[
] release_store_tid=%d/%d dirty_tids=%d[%llu]/%d[%llu]
((get_block(bi))) == ((0))
ThreadSanitizer: %s overflow (%zu*%zu). Dying.
ThreadSanitizer: growing %s: %zu out of %zu*%zu
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_debugging.cpp
((idx)) < ((rep->stacks.Size()))
((idx)) < ((rep->mops.Size()))
((idx)) < ((rep->locs.Size()))
((idx)) < ((rep->mutexes.Size()))
((idx)) < ((rep->threads.Size()))
((idx)) < ((rep->unique_tids.Size()))
meta shadow
shadow
heap
stack
global
data-race
data-race-vptr
heap-use-after-free
heap-use-after-free-vptr
external-race
thread-leak
locked-mutex-destroy
mutex-double-lock
mutex-invalid-access
mutex-bad-unlock
mutex-bad-read-lock
mutex-bad-read-unlock
signal-unsafe-call
errno-in-signal-handler
lock-order-inversion
((0 && "missing case")) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_common.h
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_allocator_primary32.h
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_allocator_secondary.h
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_external.cpp
((tag)) < ((atomic_load(&used_tags, memory_order_relaxed)))
((new_tag)) < ((kExternalTagMax))
race on %s
(((uptr)tag)) >= ((kExternalTagFirstUserAvailable))
(((uptr)tag)) < ((kExternalTagMax))
Swift variable
Swift access race
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_fd.cpp
((fd)) < ((kTableSize))
((s)) != ((&fdctx.globsync))
((s)) != ((&fdctx.filesync))
((s)) != ((&fdctx.socksync))
enable_annotations
Enable dynamic annotations, otherwise they are no-ops.
suppress_equal_stacks
Suppress a race report if we've already output another race report with the same stack.
suppress_equal_addresses
Suppress a race report if we've already output another race report on the same address.
report_bugs
Turns off bug reporting entirely (useful for benchmarking).
report_thread_leaks
Report thread leaks at exit?
report_destroy_locked
Report destruction of a locked mutex?
report_mutex_bugs
Report incorrect usages of mutexes and mutex annotations?
report_signal_unsafe
Report violations of async signal-safety (e.g. malloc() call from a signal handler).
report_atomic_races
Report races between atomic and plain memory accesses.
force_seq_cst_atomics
If set, all atomics are effectively sequentially consistent (seq_cst), regardless of what user actually specified.
Exit after first reported error.
atexit_sleep_ms
Sleep in main thread before exiting for that many ms (useful to catch "at exit" races).
profile_memory
If set, periodically write memory profile to that file.
flush_memory_ms
Flush shadow memory every X ms.
flush_symbolizer_ms
Flush symbolizer caches every X ms.
memory_limit_mb
Resident memory limit in MB to aim at.If the process consumes more memory, then TSan will flush shadow memory.
stop_on_start
Stops on start until __tsan_resume() is called (for debugging).
running_on_valgrind
Controls whether RunningOnValgrind() returns true or false.
history_size
Per-thread history size, controls how many previous memory accesses are remembered per thread.  Possible values are [0..7]. history_size=0 amounts to 32K memory accesses.  Each next value doubles the amount of memory accesses, up to history_size=7 that amounts to 4M memory accesses.  The default value is 2 (128K memory accesses).
io_sync
Controls level of synchronization implied by IO operations. 0 - no synchronization 1 - reasonable level of synchronization (write->read)2 - global synchronization of all IO operations.
die_after_fork
Die after multi-threaded fork if the child creates new threads.
ignore_interceptors_accesses
Ignore reads and writes from all interceptors.
ignore_noninstrumented_modules
Interceptors should only detect races when called from instrumented modules.
shared_ptr_interceptor
Track atomic reference counting in libc++ shared_ptr and weak_ptr.
second_deadlock_stack
Report where each mutex is locked in deadlock reports
TSAN_SYMBOLIZER_PATH
    #%n %f %S %M
ThreadSanitizer: incorrect value for history_size (must be [0..7])
ThreadSanitizer: incorrect value for io_sync (must be [0..2])
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_ignoreset.cpp
((size_)) <= ((kMaxSize))
ThreadSanitizer: starting new threads after multi-threaded fork is not supported. Dying (set die_after_fork=0 to override)
ThreadSanitizer: starting new threads after multi-threaded fork is not supported (pid %lu). Continuing because of die_after_fork=0, but you are on your own
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_interceptors_posix.cpp
((p.tid)) != ((kMainTid))
ThreadSanitizer: ignoring signal %d
((sctx)) != ((0))
((sctx->int_signal_send)) == ((sig))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_common_interceptors.inc
((ioctl_initialized)) != (0)
Decoding unknown ioctl 0x%lx
WARNING: failed decoding unknown ioctl 0x%lx
((res)) <= ((sizeof(local_dest)))
WARNING: Skipping dlclose() call from handle %p (rdar://78524723).
ThreadSanitizer: failed to setup atexit callback
ThreadSanitizer: failed to setup atfork callbacks
barrier_init: count is too large (%d)
((thr->shadow_stack_pos)) >= ((buf->shadow_stack_pos))
ThreadSanitizer: can't find longjmp buf
ThreadSignalContext
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_common_interceptors_format.inc
((*p)) == ((0))
%s: WARNING: unexpected format specifier in scanf interceptor: %.*s
jztLq
cCsS[
diouxXn
aAeEfFgG
WARNING: unexpected floating-point arg size in printf interceptor: %zu
%s: WARNING: unexpected format specifier in printf interceptor: %.*s (reported once per process)
WARNING: unexpected arg size in printf interceptor: %zu
'-+ #0
cCsS
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_common_interceptors_ioctl.inc
<DECODED_IOCTL>
((*endptr >= nptr)) != (0)
((!h.created())) != (0)
((h->type == CommonInterceptorMetadata::CIMT_FILE)) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_addrhashmap.h
((!h->remove_)) != (0)
((atomic_load(&c->addr, memory_order_relaxed))) == ((0))
((addr1)) == ((0))
((addr1)) == ((h->addr_))
((h.exists())) != (0)
%s ignores mlock/mlockall/munlock/munlockall
AddrHashMap
Duplicate or unsorted ioctl request id %x >= %x (%s vs %s)
((ioctl_table_size < ioctl_table_max)) != (0)
FIOASYNC
FIOCLEX
FIOGETOWN
FIONBIO
FIONCLEX
FIOSETOWN
SIOCATMARK
SIOCGIFCONF
SIOCGPGRP
SIOCSPGRP
TIOCCONS
TIOCEXCL
TIOCGETD
TIOCGPGRP
TIOCGWINSZ
TIOCMBIC
TIOCMBIS
TIOCMGET
TIOCMSET
TIOCNOTTY
TIOCNXCL
TIOCOUTQ
TIOCPKT
TIOCSCTTY
TIOCSETD
TIOCSPGRP
TIOCSTI
TIOCSWINSZ
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_signal_interceptors.inc
((!was_called_once)) != (0)
((atomic_load(&ctx->in_blocking_func, memory_order_relaxed))) == ((1))
ThreadSanitizer: mmap at bad address: addr=%p size=%p res=%p
pure_happens_before
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_interface_ann.cpp
((!(flagz & MutexFlagRecursiveUnlock))) != (0)
free
tsan-%s
malloc
realloc
calloc
valloc
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_malloc_mac.inc
((memptr)) != (0)
posix_memalign
((allocated < kCallocPoolSize)) != (0)
mz_realloc(%p) -- attempting to realloc unallocated memory.
__sanitizer_mz_destroy() called -- ignoring
tsan
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_mman.cpp
((p)) != (((void*)0))
((IsAligned((uptr)ptr, align))) != (0)
((!heap_start)) != (0)
((p)) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_allocator_local_cache.h
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_list.h
Stats: LargeMmapAllocator: allocated %zd times, remains %zd (%zd K) max %zd M; by size logs: 
%zd:%zd; 
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_allocator_combined.h
((size)) >= ((2 * kPageSize))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_mutexset.cpp
((size_)) == ((kMaxSize - 1))
main thread
thread T%d
    [failed to restore the stack]
wrap_
==================
WARNING: ThreadSanitizer: %s (pid=%d)
  Cycle in lock order graph: 
 => 
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_report.cpp
((rep->mutexes.Size())) > ((0U))
((rep->mutexes.Size() * (flags()->second_deadlock_stack ? 2 : 1))) == ((rep->stacks.Size()))
  Mutex 
 acquired here while holding mutex 
 in 
 previously acquired by the same thread here:
    Hint: use TSAN_OPTIONS=second_deadlock_stack=1 to get more informative warning message
  and:
  And %d more similar thread leaks.
data race
data race on vptr (ctor/dtor vs virtual call)
heap-use-after-free (virtual call vs free)
race on external object
thread leak
destroy of a locked mutex
double lock of a mutex
use of an invalid mutex (e.g. uninitialized or destroyed)
unlock of an unlocked mutex (or by a wrong thread)
read lock of a write locked mutex
read unlock of a write locked mutex
signal-unsafe call inside of a signal
signal handler spoils errno
lock-order-inversion (potential deadlock)
%sM%lld (%p)%s%s
%sM%lld%s%s
[36m
  %s of size %d at %p by %s
external object
  %s access of %s at %p by %s
[34m
Atomic write
Atomic read
Previous atomic write
Previous atomic read
Write
Read
Previous write
Previous read
Modifying
Read-only
Previous modifying
Previous read-only
 (mutexes:
 %s M%llu
write
read
  As if synchronized via sleep:
[33m
  Location is global '%s' of size %zu at %p (%s+0x%zx)
  Location is global '%s' at %p (%s+0x%zx)
  Location is heap block of size %zu at %p allocated by %s:
  Location is %s of size %zu at %p allocated by %s:
  Location is stack of %s.
  Location is TLS of %s.
  Location is file descriptor %d created by %s at:
  Mutex M%llu is already destroyed.
  Mutex M%llu (%p) created at:
  Thread T%d
 '%s'
running
finished
 (tid=%llu, %s) is a GCD worker thread
 (tid=%llu, %s) created by %s
 at:
tsan_interceptors_posix.cpp
sanitizer_common_interceptors.inc
tsan_interface_
libclang_rt.tsan_
clock allocator
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_rtl.cpp
((reinterpret_cast<uptr>(this) % 64)) == ((0))
%s.%d
ThreadSanitizer: failed to open memory profile file '%s'
mapped meta shadow for (0x%zx-0x%zx) at (0x%zx-0x%zx)
((addr)) >= ((TraceMemBeg()))
((addr + size)) <= ((TraceMemEnd()))
((addr)) == ((addr & ~((64 << 10) - 1)))
FATAL: ThreadSanitizer can not mmap thread trace (0x%zx/0x%zx)
TSAN_OPTIONS
***** Running under ThreadSanitizer v2 (pid %d) *****
((tid)) == ((kMainTid))
ThreadSanitizer is suspended at startup (pid %d). Call __tsan_resume().
ThreadSanitizer: reported %d warnings
ThreadSanitizer: forked new process with pid %d, parent had %d threads
((TraceAcquire(thr, &ev))) != (0)
((part)) != (0)
TracePart
((TryTraceFunc(thr, *pos))) != (0)
((thr->is_freeing)) == ((false))
((thr->ignore_reads_and_writes)) > ((0))
((thr->ignore_sync)) > ((0))
trace %u
trace header %u
ThreadSanitizer: failed to mprotect [0x%zx-0x%zx) 
(("unable to mprotect" && 0)) != (0)
ThreadSanitizer: periodic memory flush
ThreadSanitizer: memory flush check RSS=%llu LAST=%llu LIMIT=%llu
ThreadSanitizer: flushing memory due to RSS
ThreadSanitizer: memory flushed RSS=%llu
((IsShadowMem(p))) != (0)
((IsShadowMem(p + size * kShadowCnt / kShadowCell - 1))) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_rtl_mutex.cpp
((!thr->is_freeing)) != (0)
((rec)) > ((0))
((s->recursion)) == ((0))
((s->recursion)) > ((0))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_clock.h
((atomic_load_relaxed(&global_acquire_))) <= ((v))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_rtl_proc.cpp
((proc->thr)) == ((nullptr))
((thr->proc1)) == ((nullptr))
((thr->proc1)) == ((proc))
((proc->thr)) == ((thr))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_rtl_report.cpp
((thr)) != (0)
((RoundDown(epoch, kTracePartSize))) == ((hdr->epoch0))
((flags()->report_bugs)) != (0)
((!thr->suppress_reports)) != (0)
((thr->current_report)) == ((nullptr))
((ent)) != ((0))
main
__tsan_thread_start_func
__do_global_ctors_aux
__libc_csu_init
__libc_start_main
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_sync.h
((uid)) == ((GetLsb(uid, 14)))
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/../sanitizer_common/sanitizer_mutex.h
((!(s0.IsAtomic() && s1.IsAtomic()))) != (0)
ThreadSanitizer: suppressing report as doubled (addr)
ThreadSanitizer: suppressing report as doubled (stack)
((ev_sid)) != ((kFreeSid))
((ev_epoch)) != ((kEpochOver))
((stack.Size())) != (0)
ThreadSanitizer: failed to restore address 0x%zx
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_rtl_thread.cpp
((sync.size())) == ((0))
((tid)) > ((0))
((tid)) < ((kMaxTid))
ThreadSanitizer: main thread finished with ignores enabled
ThreadSanitizer: thread T%d %s finished with ignores enabled, created at:
  One of the following ignores was not ended (in order of probability)
  Ignore was enabled at:
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_shadow.h
((hs)) <= ((7))
ThreadSanitizer: dup thread with used id 0x%zx
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_suppressions.cpp
race:^_M_rep$
race:^_M_is_leaked$
race:std::_Sp_counted_ptr_inplace<std::thread::_Impl
mutex:ConvertMatchingCGEvents
mutex:AcquireCoalescingStack
mutex:CFRunLoopRunSpecific
mutex:QuartzCore::post_notification
ThreadSanitizer: matched suppression '%s'
ThreadSanitizer: Matched %d suppressions (pid=%d):
%d %s:%s
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_symbolize.cpp
((!thr->in_symbolizer)) != (0)
((thr->in_symbolizer)) != (0)
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_sync.cpp
((clock.size())) == ((0))
((read_clock.size())) == ((0))
heap block allocator
sync allocator
((sz)) > ((0))
((p)) == ((RoundUp(p, kPageSize)))
((sz)) == ((RoundUp(sz, kPageSize)))
((src)) != ((dst))
((sz)) != ((0))
((*dst_meta)) == ((0))
((idx & kFlagSync)) != (0)
OSAtomicAdd32
OSAtomicAdd32Barrier
OSAtomicAdd64
OSAtomicAdd64Barrier
OSAtomicIncrement32
OSAtomicIncrement32Barrier
OSAtomicIncrement64
OSAtomicIncrement64Barrier
OSAtomicDecrement32
OSAtomicDecrement32Barrier
OSAtomicDecrement64
OSAtomicDecrement64Barrier
OSAtomicOr32
OSAtomicOr32Barrier
OSAtomicOr32Orig
OSAtomicOr32OrigBarrier
OSAtomicAnd32
OSAtomicAnd32Barrier
OSAtomicAnd32Orig
OSAtomicAnd32OrigBarrier
OSAtomicXor32
OSAtomicXor32Barrier
OSAtomicXor32Orig
OSAtomicXor32OrigBarrier
OSAtomicCompareAndSwapInt
OSAtomicCompareAndSwapIntBarrier
OSAtomicCompareAndSwapLong
OSAtomicCompareAndSwapLongBarrier
OSAtomicCompareAndSwapPtr
OSAtomicCompareAndSwapPtrBarrier
OSAtomicCompareAndSwap32
OSAtomicCompareAndSwap32Barrier
OSAtomicCompareAndSwap64
OSAtomicCompareAndSwap64Barrier
OSAtomicTestAndSet
OSAtomicTestAndSetBarrier
OSAtomicTestAndClear
OSAtomicTestAndClearBarrier
OSAtomicEnqueue
OSAtomicDequeue
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_interceptors_mac.cpp
((!cur_thread()->is_dead)) != (0)
OSSpinLockLock
OSSpinLockTry
OSSpinLockUnlock
os_lock_lock
os_lock_trylock
os_lock_unlock
os_unfair_lock_lock
FATAL: ThreadSanitizer: failed to intercept %s
os_unfair_lock_lock_with_options
os_unfair_lock_trylock
os_unfair_lock_unlock
os_unfair_recursive_lock_lock_with_options
os_unfair_recursive_lock_trylock
os_unfair_recursive_lock_unlock
_os_nospin_lock_lock
_os_nospin_lock_trylock
_os_nospin_lock_unlock
xpc_connection_set_event_handler
v16@?0^v8
xpc_connection_send_barrier
v8@?0
xpc_connection_send_message_with_reply
xpc_connection_cancel
objc_sync_enter
((result)) == ((OBJC_SYNC_SUCCESS))
objc_sync_exit
swapcontext
_ZNSt3__119__shared_weak_count16__release_sharedEv
_ZNSt3__114__shared_count16__release_sharedEv
mach_vm_allocate
mach_vm_deallocate
ThreadState
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_platform_mac.cpp
shadow   (0x%016zx-0x%016zx): resident %zd kB, dirty %zd kB
meta     (0x%016zx-0x%016zx): resident %zd kB, dirty %zd kB
traces   (0x%016zx-0x%016zx): resident %zd kB, dirty %zd kB
low app  (0x%016zx-0x%016zx): resident %zd kB, dirty %zd kB
high app (0x%016zx-0x%016zx): resident %zd kB, dirty %zd kB
heap     (0x%016zx-0x%016zx): resident %zd kB, dirty %zd kB
stacks: %zd unique IDs, %zd kB allocated
threads: %zd total, %zd live
------------------------------
ARM64 maximum VM address is '%p', which is too low. Please add 'arm64_maxoffset=0xFC0000000' to your boot-args and reboot the device.
ThreadSanitizer: unsupported vm address limit %p, expected %p.
((thread_state_key)) == ((0))
((tid)) != ((kMainTid))
((thread)) == ((pthread_self()))
FATAL: ThreadSanitizer can not mmap the shadow memory
FATAL: Make sure to compile with -fPIE and to link with -pie.
__tsan_on_initialize
__tsan_on_finalize
FATAL: ThreadSanitizer: unexpected memory mapping 0x%zx-0x%zx
MADV_DONTDUMP
FATAL: ThreadSanitizer can not protect [%zx,%zx]
FATAL: Make sure you are not using unlimited stack
dispatch_async_f
dispatch_async
dispatch_sync_f
dispatch_sync
dispatch_barrier_async_f
dispatch_barrier_async
dispatch_barrier_sync_f
dispatch_barrier_sync
dispatch_async_and_wait_f
dispatch_async_and_wait
dispatch_barrier_async_and_wait_f
dispatch_barrier_async_and_wait
dispatch_after
dispatch_after_f
dispatch_once
dispatch_once_f
dispatch_semaphore_signal
dispatch_semaphore_wait
dispatch_group_wait
dispatch_group_leave
dispatch_group_async
dispatch_group_async_f
dispatch_group_notify
dispatch_read_callback
dispatch_source_set_event_handler
dispatch_source_set_event_handler_f
dispatch_source_set_cancel_handler
dispatch_source_set_cancel_handler_f
dispatch_source_set_registration_handler
dispatch_source_set_registration_handler_f
dispatch_apply
v16@?0Q8
dispatch_apply_f
dispatch_data_create
dispatch_read
v20@?0^{dispatch_data_s=}8i16
dispatch_write
dispatch_io_read
v24@?0B8^{dispatch_data_s=}12i20
dispatch_io_write
dispatch_io_barrier
dispatch_io_create
dispatch_io_create_callback
v12@?0i8
dispatch_io_create_with_path
dispatch_io_create_with_io
dispatch_io_close
dispatch_resume
dispatch_callback_wrap
/System/Volumes/Data/SWE/Apps/DT/BuildRoots/BuildRoot2/ActiveBuildRoot/Library/Caches/com.apple.xbs/Sources/clang_compiler_rt/clang-1400.0.29.102/compiler-rt/lib/tsan/rtl/tsan_interceptors_libdispatch.cpp
((dispatch_queue_offsets.dqo_width_size)) == ((2))
((width)) != ((0))
((dispatch_queue_offsets.dqo_target_queue_size)) == ((8))
((tq)) != ((0))
_Znwm
_Znam
_ZnwmRKSt9nothrow_t
_ZnamRKSt9nothrow_t
_ZnwmSt11align_val_t
_ZnamSt11align_val_t
_ZnwmSt11align_val_tRKSt9nothrow_t
_ZnamSt11align_val_tRKSt9nothrow_t
_ZdlPv
_ZdaPv
_ZdlPvRKSt9nothrow_t
_ZdaPvRKSt9nothrow_t
_ZdlPvm
_ZdaPvm
_ZdlPvSt11align_val_t
_ZdaPvSt11align_val_t
_ZdlPvSt11align_val_tRKSt9nothrow_t
_ZdaPvSt11align_val_tRKSt9nothrow_t
_ZdlPvmSt11align_val_t
_ZdaPvmSt11align_val_t
DYLD_INSERT_LIBRARIES
/usr/lib/dyld
    #%n %p %F %L
??:0
llvm-symbolizer
:DEADLYSIGNAL
: nested bug in the same thread, aborting.
stack-overflow
vptr_check
N11__sanitizer11FlagHandlerIbEE
N11__sanitizer15FlagHandlerBaseE
N11__sanitizer11FlagHandlerIPKcEE
called_from_lib
none
race
race_top
mutex
thread
signal
called_from_lib
deadlock
FATAL: %s can not madvise shadow region [%zx, %zx] with %s (errno: %d)
HINT: if %s is not supported in your environment, you may set TSAN_OPTIONS=%s=0
Address Sanitizer reported a failure.
Undefined Behavior Sanitizer reported a failure.
Thread Sanitizer reported a failure.
Sanitizer tool reported a failure.
Consult syslog for more information.
@2i 
@i 
__check_mach_ports_lookup=000000000000000
