%s: fatal: "%s", line %d: 
"%s", line %d: warning: 
"%s", line %d: 
MsgError
<no name yet>
no SubSystem declaration
/dev/null
User.c
Server.c
_server
_impl
_subsystem
Cannot use UseSpecialReplyPort in non ANSI mode
#include <mach/port.h>
#include <mach/machine/kern_return.h>
#include <mach/mig_errors.h>
#include <string.h>
#include <mach/ndr.h>
#include <mach/boolean.h>
#include <mach/kern_return.h>
#include <mach/notify.h>
#include <mach/mach_types.h>
#include <mach/message.h>
/* BEGIN VOUCHER CODE */
#ifndef KERNEL
#if defined(__has_include)
#if __has_include(<mach/mig_voucher_support.h>)
#ifndef USING_VOUCHERS
#define USING_VOUCHERS
#endif
#ifndef __VOUCHER_FORWARD_TYPE_DECLS__
#define __VOUCHER_FORWARD_TYPE_DECLS__
#ifdef __cplusplus
extern "C" {
extern boolean_t voucher_mach_msg_set(mach_msg_header_t *msg) __attribute__((weak_import));
#endif // __VOUCHER_FORWARD_TYPE_DECLS__
#endif // __has_include(<mach/mach_voucher_types.h>)
#endif // __has_include
#endif // !KERNEL
/* END VOUCHER CODE */
/* BEGIN MIG_STRNCPY_ZEROFILL CODE */
#if __has_include(<mach/mig_strncpy_zerofill_support.h>)
#ifndef USING_MIG_STRNCPY_ZEROFILL
#define USING_MIG_STRNCPY_ZEROFILL
#ifndef __MIG_STRNCPY_ZEROFILL_FORWARD_TYPE_DECLS__
#define __MIG_STRNCPY_ZEROFILL_FORWARD_TYPE_DECLS__
extern int mig_strncpy_zerofill(char *dest, const char *src, int len) __attribute__((weak_import));
#endif /* __MIG_STRNCPY_ZEROFILL_FORWARD_TYPE_DECLS__ */
#endif /* __has_include(<mach/mig_strncpy_zerofill_support.h>) */
#endif /* __has_include */
/* END MIG_STRNCPY_ZEROFILL CODE */
#include <mach/rpc.h>
(__MigKernelSpecificCode) || (_MIG_KERNEL_SPECIFIC_CODE_)
#include <kern/ipc_mig.h>
#endif /* __MigKernelSpecificCode */
/* union of all requests */
#ifndef __RequestUnion__%s%s_subsystem__defined
#define __RequestUnion__%s%s_subsystem__defined
union __RequestUnion__%s%s_subsystem {
__Request__%s_t Request_%s;
#endif /* !__RequestUnion__%s%s_subsystem__defined */
/* union of all replies */
#ifndef __ReplyUnion__%s%s_subsystem__defined
#define __ReplyUnion__%s%s_subsystem__defined
union __ReplyUnion__%s%s_subsystem {
__Reply__%s_t Reply_%s;
_user_
WriteHeader(): bad statement_kind_t (%d)
#ifdef __BeforeMigUserHeader
__BeforeMigUserHeader
#endif /* __BeforeMigUserHeader */
#include <sys/cdefs.h>
__BEGIN_DECLS
__END_DECLS
/********************** Caution **************************/
/* The following data types should be used to calculate  */
/* maximum message sizes only. The actual message may be */
/* smaller, and the position of the arguments within the */
/* message layout may vary from what is presented here.  */
/* For example, if any of the arguments are variable-    */
/* sized, and less than the maximum is sent, the data    */
/* will be packed tight in the actual message to reduce  */
/* the presence of holes.                                */
/* %s %s */
MIG_SERVER_ROUTINE
%s %s
    (
return 
); }
#else /* %s */
#else
    ();
#endif
/* %s */
#ifndef MIG_SERVER_ROUTINE
#define MIG_SERVER_ROUTINE
_server_
WriteServerHeader(): bad statement_kind_t (%d)
#ifdef __BeforeMigServerHeader
__BeforeMigServerHeader
#endif /* __BeforeMigServerHeader */
WriteInternalHeader(): bad statement_kind_t (%d)
_defines
Defines related to the Subsystem %s
WriteDefinesHeader(): bad statement_kind_t (%d)
#ifndef
#define
/* Module %s */
#ifdef AUTOTEST
#ifndef FUNCTION_PTR_T
#define FUNCTION_PTR_T
typedef void (*function_ptr_t)
(mach_port_t, char *, mach_msg_type_number_t);
typedef struct {
        char            *name;
        function_ptr_t  function;
} function_table_entry;
typedef function_table_entry   *function_table_t;
#endif /* FUNCTION_PTR_T */
#endif /* AUTOTEST */
#ifndef
%s_MSG_COUNT
#define
%s_MSG_COUNT
#endif
/* %s_MSG_COUNT */
%s %s
__AfterMigUserHeader
__AfterMigServerHeader
#ifdef %s
#endif /* %s */
#endif
 /* _%s */
#ifndef subsystem_to_name_map_%s
#define subsystem_to_name_map_%s \
    { "%s", %d }
#endif
boolean_t %s(
mach_msg_header_t *InHeadP,
mach_msg_header_t *OutHeadP);
mig_routine_t %s_routine(
mach_msg_header_t *InHeadP);
/* Description of this subsystem, for use in direct RPC */
extern const struct %s {
struct subsystem *
subsystem;
/* Reserved for system use */
mig_server_routine_t
server;
/* Server routine */
mach_msg_id_t
start;
/* Min routine number */
mach_msg_id_t
end;
/* Max routine number + 1 */
unsigned int
maxsize;
/* Max msg size */
vm_address_t
base_addr;
/* Base address */
struct rpc_routine_descriptor
/*Array of routine descriptors */
vm_address_t
reserved;
/* Reserved */
struct routine_descriptor
/*Array of routine descriptors */
routine[%d];
struct rpc_routine_arg_descriptor
/*Array of arg descriptors */
arg_descriptor[%d];
} %s;
#define %s %s_external
#define
MACH_ID_%s
/* %s() */
#define
MACH_ID_%s_REPLY
/* %s() */
bootstrap_cmds-116
%d errors found. Abort.
Writing %s ... 
done.
Writing %s ...
done.
Writing %s ... 
done.
Writing individual user files ... 
-version
-novouchers
-server
missing name for -server option
-sheader
missing name for -sheader option
-split
Mach RPC traps not fully supported
-iheader
missing name for -iheader option
missing prefix for -i option
-user
missing name for -user option
unknown flag: '%s'
-header
missing name for -header option
-dheader
missing name for -dheader option
-maxonstack
missing size for -maxonstack option
unknown/unsupported flag: '%s'
bad argument: '%s'
fopen(%s): %s
done.
rtAlloc(): %s
argAlloc(): %s
Routine
SimpleRoutine
rtRoutineKindToStr(%d): not a routine_kind_t
%s (%d) %s(
MACH_MSG_OPTION_NONE
%s %s specifies a SendTime/WaitTime which may leak resources, adopt "ConsumeOnSendError Timeout"
%s %s has OUT argument
Overwrite option(s) do not match with the KernelUser personality
(mach_msg_size_t)(sizeof(%s)
RequestPort
ReplyPort
WaitTime
SendTime
MsgOption
MsgSeqno
SecToken
AuditToken
ContextToken
Implicit
(In)
(Out)
%s: %s
, Dealloc
, Dealloc[]
, CountInOut
, SameCount
, PhysicalCopy
, Overwrite
, Auto
, Const
RetCode
NDR_record
multiple RequestPort args in %s; %s won't be used
multiple ReplyPort args in %s; %s won't be used
multiple WaitTime/SendTime type args in %s; %s won't be used
SendTime type argument after a WaitTime in %s; SendTime %s won't be used
multiple SendTime type args in %s; %s won't be used
multiple MsgOption args in %s; %s won't be used
Head.msgh_request_port
Head.msgh_reply_port
msgh_sender
msgh_audit
msgh_context
msgh_seqno
Template
Head.msgh_bits
MACH_MSGH_BITS_REQUEST
MACH_MSGH_BITS_REPLY
%s: Dealloc and NotDealloc ignored with Dealloc[]
%s: Dealloc and NotDealloc cancel out
%s: Dealloc is ignored: it is meaningless  for that type of argument
%s: CountInOut is ignored: argument must be Out
%s: CountInOut is ignored: argument isn't variable or in-line
%s: SameCount is ignored - the argument is not variable
%s: SameCount is ignored - adjacent argument is not variable
%s: SameCount is ignored - inconsistencies with the adjacent argument
%s: PhysicalCopy is ignored, argument copied inline anyway
%s: PhysicalCopy is ignored, it does not apply to ports and array of ports
%s: RetCode is ignored - the type doesn't match a MIG RetCode
%s: RetCode is allowed only for SimpleRoutines
%s: RetCode is ignored - only one argument can be flagged as RetCode
%s: Overwrite is ignored - it must be Out AND Ool!
%s: Inline variable-sized arguments can't be InOut
Dealloc
Subs
Poly
mach_msg_port_descriptor_t
mach_msg_ool_ports_descriptor_t
mach_msg_ool_descriptor_t
dummy ReplyPort arg
dummy MsgOption arg
dummy WaitTime arg
%s %s doesn't have a server port argument
Implicit data is not supported in the KernelUser and KernelServer modes
%s: argument has no in-translation function
%s: argument has no out-translation function
%s.name
%s.address
Type of kernel processed data unknown
%s.disposition
Type of kernel processed data inconsistent
%s.deallocate
|MACH_RCV_TRAILER_ELEMENTS(MACH_RCV_TRAILER_CTX)
|MACH_RCV_TRAILER_ELEMENTS(MACH_RCV_TRAILER_AUDIT)
|MACH_RCV_TRAILER_ELEMENTS(MACH_RCV_TRAILER_SENDER)
UseSpecialReplyPort option cannot be used with KernelUser / KernelServer
|__MigSpecialReplyPortMsgOption
 - (
_WALIGNSZ_(%s)
#ifndef __RequestUnion__%s__defined
#define __RequestUnion__%s__defined
union __RequestUnion__%s {
#endif /* __RequestUnion__%s__defined */
#ifndef __ReplyUnion__%s__defined
#define __ReplyUnion__%s__defined
union __ReplyUnion__%s {
#endif /* __ReplyUnion__%s__defined */
defined(__NDR_convert__int_rep__Request__%s_t__%s__defined)
defined(__NDR_convert__char_rep__Request__%s_t__%s__defined)
defined(__NDR_convert__float_rep__Request__%s_t__%s__defined)
int_rep
Request
char_rep
float_rep
#if defined(__NDR_convert__int_rep__Request__%s_t__%s__defined)
__NDR_convert__int_rep__Request__%s_t__%s(&In%dP->%s, In%dP->NDR.int_rep);
#endif
/* __NDR_convert__int_rep__Request__%s_t__%s__defined */
(%s)(In%dP->%s.address)
&In%dP->%s
#if defined(__NDR_convert__%s__Request__%s_t__%s__defined)
__NDR_convert__%s__Request__%s_t__%s(%s, In0P->NDR.%s
, In%dP->%s
#endif
/* __NDR_convert__%s__Request__%s_t__%s__defined */
if (In0P->NDR.int_rep != NDR_record.int_rep)
#if ( __MigTypeCheck 
|| __NDR_convert__ 
#if __MIG_check__Request__%s_subsystem__
#if !defined(__MIG_check__Request__%s_t__defined)
#define __MIG_check__Request__%s_t__defined
mig_internal kern_return_t __MIG_check__Request__%s_t(__attribute__((__unused__)) __Request__%s_t *In0P
, __attribute__((__unused__)) __Request__%s_t **In%dPP
typedef __Request__%s_t __Request;
__Request *In%dP;
__MigTypeCheck
unsigned int msgh_size;
#endif
/* __MigTypeCheck */
unsigned int msgh_size_delta;
 || \
if (In0P->NDR.int_rep != NDR_record.int_rep) {
#endif
/* defined(__NDR_convert__int_rep...) */
if (In0P->NDR.char_rep != NDR_record.char_rep) {
#endif
/* defined(__NDR_convert__char_rep...) */
if (In0P->NDR.float_rep != NDR_record.float_rep) {
#endif
/* defined(__NDR_convert__float_rep...) */
return MACH_MSG_SUCCESS;
#endif /* !defined(__MIG_check__Request__%s_t__defined) */
#endif /* __MIG_check__Request__%s_subsystem__ */
#endif /* ( __MigTypeCheck 
) */
defined(__MIG_check__Request__%s_t__defined)
check_result = __MIG_check__Request__%s_t((__Request *)In0P
, (__Request **)&In%dP
if (check_result != MACH_MSG_SUCCESS)
{ MIG_RETURN_ERROR(OutP, check_result); }
#endif
/* defined(__MIG_check__Request__%s_t__defined) */
WriteServer(): bad statement_kind_t (%d)
%s[i] = %sptr->name;
    %s
*ptr;
    int
In%dP
OutP
    ptr = &%s->%s[0];
    for (i = 0; i < In%dP->%s; ptr++, i++) %s
    j = min(%d, 
%s);
%s->%s);
    for (i = 0; i < j; ptr++, i++) %s
    for (i = 0; i < %d; ptr++, i++) %s
/* %s */ %s(%s%s)
/* %s */ %s%s
TrailerP->
In%dP->
%s%s%s
ptr->
In%dP->%s.
%sif (%stype != MACH_MSG_PORT_DESCRIPTOR
 || 
%s    %sdisposition != MACH_MSG_TYPE_MOVE_RECEIVE
 || (
%s    %sdisposition != MACH_MSG_TYPE_MOVE_SEND_ONCE
 &&  
%s    %sdisposition != MACH_MSG_TYPE_MAKE_SEND_ONCE)
 || (
%s    %sdisposition != MACH_MSG_TYPE_MOVE_SEND
 &&  
%s    %sdisposition != MACH_MSG_TYPE_MAKE_SEND
 &&  
%s    %sdisposition != MACH_MSG_TYPE_COPY_SEND)
%s    %sdisposition != %s
return MIG_TYPE_ERROR;
    }
*ptr
ptr->
OutP->%s
OutP->%s.
UseStaticTemplates
%s = %s;
#else
/* UseStaticTemplates */
%sname = MACH_PORT_NULL;
#if __MigKernelSpecificCode
%sdisposition = %s;
#if !(defined(KERNEL) && defined(__LP64__))
%spad1 = 0;
%spad2 = 0;
%stype = MACH_MSG_PORT_DESCRIPTOR;
#if defined(KERNEL)
%spad_end = 0;
#endif
/* UseStaticTemplates */
%sname = (mach_port_t)%s(%s);
%sname = %s%s%s;
%sdisposition = OutP->%s;
OutP->%s.disposition = %s;
__MigKernelSpecificCode
if (%s == MACH_MSG_TYPE_PORT_RECEIVE)
  if (IP_VALID((ipc_port_t) In0P->Head.msgh_reply_port) &&
    IP_VALID((ipc_port_t) OutP->%s.name) &&
    ipc_port_check_circularity((ipc_port_t) OutP->%s.name, (ipc_port_t) In0P->Head.msgh_reply_port))
OutP->Head.msgh_bits |= MACH_MSGH_BITS_CIRCULAR;
%s[i] = ptr->address;
%sif (%stype != MACH_MSG_OOL_DESCRIPTOR
%s    %ssize != %d
%sreturn MIG_TYPE_ERROR;
%ssize = %d;
%sdeallocate =  %s;
TRUE
FALSE
%scopy = %s;
MACH_MSG_PHYSICAL_COPY
MACH_MSG_VIRTUAL_COPY
%stype = MACH_MSG_OOL_DESCRIPTOR;
#if defined(KERNEL) && !defined(__LP64__)
%saddress = (void *)%s%s;
%sdeallocate = %s;
%ssize = 
%s%s
OutP->%s%s
 * %d;
    }
    for (i = j; i < %d; ptr++, i++)
ptr->size = 0;
%s%s = In%dP->%s[0].disposition;
%sif (%stype != MACH_MSG_OOL_PORTS_DESCRIPTOR
%s    %scount != %d
%scount = %d;
%stype = MACH_MSG_OOL_PORTS_DESCRIPTOR;
%scount = 
%s%s;
OutP->%s%s;
%scount = 0;
msgh_size = In0P->Head.msgh_size;
if ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
    (msgh_size < 
__Request
) ||  (msgh_size > (mach_msg_size_t)sizeof(__Request)))
    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request)))
if (
!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
    (In0P->msgh_body.msgh_descriptor_count != %d) ||
) ||  (msgh_size > (mach_msg_size_t)sizeof(__Request))
    (In0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Request))
) &&
    ((In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
    In0P->Head.msgh_size != (mach_msg_size_t)sizeof(mig_reply_error_t) ||
    ((mig_reply_error_t *)In0P)->RetCode == KERN_SUCCESS))
return MIG_BAD_ARGUMENTS;
*In%dPP = In%dP = (__Request *) ((pointer_t) In%dP);
*In%dPP = In%dP = (__Request *) ((pointer_t) In%dP + msgh_size_delta - 
if ( In%dP->%s > %d )
msgh_size_delta = 
msgh_size -= msgh_size_delta;
if (((msgh_size - 
%s %d)
%s (In%dP->__Present__%s ? _WALIGNSZ_(%s) : 0))
/ %d 
< In%dP->%s) ||
    (msgh_size %s 
return MIG_BAD_ARGUMENTS;
(In%dP->__Present__%s ? _WALIGNSZ_(%s) : 0)
_WALIGN_
%d * 
In%dP->%s
#if __MigTypeCheck
%sif (%ssize 
!= In%dP->%s%s
 || In%dP->%s%s > %d
%sif (%scount 
#endif
/* __MigTypeCheck */
#if __MigTypeCheck
char * msg_limit = ((char *) In0P) + In0P->Head.msgh_size;
size_t strnlen_limit;
size_t memchr_limit;
strnlen_limit = min((msg_limit - 
In%dP->%s),  %d);
if (
( strnlen(In%dP->%s, strnlen_limit) >= %d + 1 )
return MIG_BAD_ARGUMENTS; // string length exceeds buffer length!
memchr_limit = min((msg_limit - In%dP->%s),  %d);
( memchr(In%dP->%s, '\0', memchr_limit) == NULL )
#endif
/* __MigTypeCheck */
#define
__MIG_check__Request__%s_subsystem__ 1
#define
__NDR_convert__Request__%s_subsystem__ 1
#include "%s"
#include <mig_debug.h>
#endif
/* __MigKernelSpecificCode */
#if  MIG_DEBUG
#include <mach/mig_log.h>
#endif /* MIG_DEBUG */
#define novalue void
#define novalue int
#define msgh_request_port
msgh_remote_port
#define MACH_MSGH_BITS_REQUEST(bits)
MACH_MSGH_BITS_REMOTE(bits)
#define msgh_reply_port
msgh_local_port
#define MACH_MSGH_BITS_REPLY(bits)
MACH_MSGH_BITS_LOCAL(bits)
#define msgh_request_port
msgh_local_port
#define msgh_reply_port
msgh_remote_port
MACH_MSG_LOG_SERVER
#define MIG_RETURN_ERROR(X, code)
((mig_reply_error_t *)X)->RetCode = code;\
((mig_reply_error_t *)X)->NDR = NDR_record;\
return;\
/* Forward Declarations */
mig_internal novalue _X%s
(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP);
mig_internal novalue _X%s
(mach_msg_header_t *InHeadP, mach_msg_header_t *OutHeadP)
(InHeadP, OutHeadP)
mach_msg_header_t *InHeadP, *OutHeadP;
typedef __Request__%s_t __Request;
typedef __Reply__%s_t Reply __attribute__((unused));
 * typedef struct {
mach_msg_header_t Head;
NDR_record_t NDR;
kern_return_t RetCode;
 * } mig_reply_error_t;
Declare
Before
OutP->msgh_body.msgh_descriptor_count = %d;
After
Request *In0P = (Request *) InHeadP;
Request *In%dP;
Reply *OutP = (Reply *) OutHeadP;
mach_msg_max_trailer_t *TrailerP;
unsigned int trailer_size __attribute__((unused));
#ifdef
__MIG_check__Request__%s_t__defined
kern_return_t check_result;
#endif
/* __MIG_check__Request__%s_t__defined */
%s %s;
%s %s[%d]
void *%s[%d]
%s %s
if (!(In0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) &&
    (In0P->Head.msgh_size == (mach_msg_size_t)sizeof(mig_reply_error_t)))
%s = 
OutP->%s = 
((mig_reply_error_t *)In0P)->RetCode
(%s)(0)
return;
KERN_SUCCESS
OutP->
%s = 
if (%s < %s)
%s = %s;
%s%s(
(%s%s)%s(%s)
(%s ? 
__Present__
%s%s.__Real__%s : %s)
%s%s.count
%s%s.size
 / %d
(%s%s)%s(OutP->%s)
%sOutP->%s
vm_map_copy_discard(%s);
mig_deallocate((vm_offset_t) %s, 
%s.count);
%s.size);
%d);
%s = (void *) 0;
In%dP->%s.%s = (mach_msg_size_t) 0;
count
size
%s(%s);
if (%s != KERN_SUCCESS) {
MIG_RETURN_ERROR(OutP, %s);
if (IP_VALID((ipc_port_t)%s))
ipc_port_release_send((ipc_port_t)%s);
OutP->%s = %s;
OutP->Head.msgh_size = 
Reply
 + msgh_size_delta;
msgh_size = 
msgh_size += msgh_size_delta;
OutP = (Reply *) ((pointer_t) OutP + msgh_size_delta - %d);
 + %d) & ~%d)
#ifdef USING_MIG_STRNCPY_ZEROFILL
if (mig_strncpy_zerofill != NULL) {
OutP->%s = (%s) mig_strncpy_zerofill(OutP->%s, %s, %d);
} else {
#endif /* USING_MIG_STRNCPY_ZEROFILL */
OutP->%s = (%s) mig_strncpy(OutP->%s, %s, %d);
(void)memcpy((char *) OutP->%s, (const char *) %s, %d);
(void)memcpy((char *) OutP->%s, (const char *) %s, 
/* %s */ %s(%s)
/* %s */ %s
#ifdef __LP64__
size_t strLength = strlen(OutP->%s) + 1;
if (strLength > 0xffffffff)
MIG_RETURN_ERROR(OutP, MIG_BAD_ARGUMENTS);
OutP->%s = (mach_msg_type_number_t) strLength;
OutP->%s = (mach_msg_type_number_t) strlen(OutP->%s) + 1;
#endif /* __LP64__ */
/* %d */ OutP->%s
 + (
msgh_size += 
OutP = (Reply *) OutHeadP;
OutP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
OutP->Head.msgh_size = msgh_size;
mig_external boolean_t %s
mig_routine_t routine;
OutHeadP->msgh_bits = 
MACH_MSGH_BITS(MACH_MSGH_BITS_REPLY(InHeadP->msgh_bits), 0);
OutHeadP->msgh_remote_port = InHeadP->msgh_reply_port;
/* Minimal size: routine() will update it if different */
OutHeadP->msgh_size = (mach_msg_size_t)sizeof(mig_reply_error_t);
OutHeadP->msgh_local_port = MACH_PORT_NULL;
OutHeadP->msgh_id = InHeadP->msgh_id + 100;
OutHeadP->msgh_reserved = 0;
if ((InHeadP->msgh_id > %d) || (InHeadP->msgh_id < %d) ||
    ((routine = %s.routine[InHeadP->msgh_id - %d].stub_routine) == 0)) {
((mig_reply_error_t *)OutHeadP)->NDR = NDR_record;
((mig_reply_error_t *)OutHeadP)->RetCode = MIG_BAD_ID;
LOG_ERRORS(MACH_MSG_LOG_SERVER, MACH_MSG_ERROR_UNKNOWN_ID,
&InHeadP->msgh_id, __FILE__, __LINE__);
return FALSE;
(*routine) (InHeadP, OutHeadP);
return TRUE;
mig_external mig_routine_t %s_routine
(mach_msg_header_t *InHeadP)
(InHeadP)
mach_msg_header_t *InHeadP;
int msgh_id;
msgh_id = InHeadP->msgh_id - %d;
if ((msgh_id > %d) || (msgh_id < 0))
return 0;
return %s.routine[msgh_id].stub_routine;
mig_symtab_t _%sSymTab[] = {
int _%sSymTabBase = %d;
int _%sSymTabEnd = %d;
boolean_t %s(
mach_msg_header_t *InHeadP,
mach_msg_header_t *OutHeadP
mig_routine_t %s_routine(
mach_msg_header_t *InHeadP
const struct %s {
mig_server_routine_t 
server;
/* Server routine */
} %s = {
const struct %s %s = {
%s_routine,
(mach_msg_size_t)sizeof(union __ReplyUnion__%s),
(vm_address_t)&%s,
(vm_address_t)0,
{0, 0, 0, 0, 0, 0},
&%s.arg_descriptor[%d], (mach_msg_size_t)sizeof(__Reply__%s_t)
(routine_arg_descriptor_t)0, (mach_msg_size_t)sizeof(__Reply__%s_t)
_X%s
{ "", 0, 0 },
{ "%s", %d, _X%s },
{ "", 0, 0 },
MiG internal error: type of kernel processed data unknown
stAlloc(): %s
strmake('%s'): %s
strconcat('%s', '%s'): %s
strphrase('%s', '%s'): %s
NULL
must use full IPC type decl
type '%s' not defined
IPC type decl is too complicated for Kernel Processed Data
IPC type decl is too complicated
IPC type decl is already defined to be Out-Of-Line
MACH_MSG_TYPE_STRING_C
char
mach_msg_type_number_t
mach_msg_type_number_t *
mach_msg_type_name_t
boolean_t
MACH_MSG_TYPE_BOOLEAN
MACH_MSG_TYPE_BYTE
MACH_MSG_TYPE_INTEGER_32
kern_return_t
NDR_record_t
char *
MACH_MSG_TYPE_UNSTRUCTURED
tid_t
mach_port_t
MACH_MSG_TYPE_COPY_SEND
MACH_MSG_TYPE_PORT_SEND
MACH_MSG_TYPE_MAKE_SEND_ONCE
MACH_MSG_TYPE_PORT_SEND_ONCE
type of %s is too complicated
type of %s can't be polymorphic
argument %s isn't a proper request port
argument %s isn't a proper reply port
argument %s isn't a proper integer
argument %s isn't a proper Token
%s: can't translate variable-sized arrays
%s: can't destroy variable-sized array
Type %s = 
array [] of 
array [*:%d] of 
struct [%d] of 
array [%d] of 
(%s,
(%s|%s
 %d)
CUserType:
CServerType:
InTran:
%s %s(%s)
OutTran:
%s %s(%s)
Destructor:
%s(%s)
itAlloc(): %s
sizeof(%s) == 0
mig_user_allocate
mig_user_deallocate
defined(__NDR_convert__int_rep__Reply__%s_t__%s__defined)
defined(__NDR_convert__char_rep__Reply__%s_t__%s__defined)
defined(__NDR_convert__float_rep__Reply__%s_t__%s__defined)
#if defined(__NDR_convert__int_rep__Reply__%s_t__%s__defined)
__NDR_convert__int_rep__Reply__%s_t__%s(&Out%dP->%s, Out%dP->NDR.int_rep);
#endif
/* __NDR_convert__int_rep__Reply__%s_t__%s__defined */
(%s)(Out%dP->%s.address)
&Out%dP->%s
#if defined(__NDR_convert__%s__Reply__%s_t__%s__defined)
__NDR_convert__%s__Reply__%s_t__%s(%s, Out0P->NDR.%s
, Out%dP->%s
#endif /* __NDR_convert__%s__Reply__%s_t__%s__defined */
if (Out0P->NDR.int_rep != NDR_record.int_rep)
*Out%dPP = Out%dP = (__Reply *) ((pointer_t) Out%dP + msgh_size_delta - %d);
          { (mig_impl_routine_t) 0,
          (mig_stub_routine_t) %s, 
%d, %d, %s}
WriteUser(): bad statement_kind_t (%d)
WriteUserIndividual(): bad statement_kind_t (%d)
            {
                0 
| MACH_RPC_PORT 
| MACH_RPC_ARRAY 
| MACH_RPC_VARIABLE 
| MACH_RPC_PORT_ARRAY 
| MACH_RPC_ARRAY_FIXED 
| MACH_RPC_ARRAY_VARIABLE 
 | MACH_RPC_IN 
 | MACH_RPC_OUT 
 | MACH_RPC_POINTER 
 | MACH_RPC_DEALLOCATE 
 | MACH_RPC_PHYSICAL_COPY 
                %d,
                %d,
            },
 | MACH_RPC_MOVE_RECEIVE
 | MACH_RPC_MOVE_SEND
 | MACH_RPC_MOVE_SEND_ONCE
 | MACH_RPC_COPY_SEND
 | MACH_RPC_MAKE_SEND
 | MACH_RPC_MAKE_SEND_ONCE
#if __MIG_check__Reply__%s_subsystem__
#if !defined(__MIG_check__Reply__%s_t__defined)
#define __MIG_check__Reply__%s_t__defined
mig_internal kern_return_t __MIG_check__Reply__%s_t(__Reply__%s_t *Out0P
, __Reply__%s_t **Out%dPP
typedef __Reply__%s_t __Reply __attribute__((unused));
__Reply *Out%dP;
boolean_t msgh_simple;
if (Out0P->Head.msgh_request_port != MACH_PORT_NULL) {
if (Out0P->NDR.int_rep != NDR_record.int_rep) {
if (Out0P->NDR.char_rep != NDR_record.char_rep) {
if (Out0P->NDR.float_rep != NDR_record.float_rep) {
#endif /* !defined(__MIG_check__Reply__%s_t__defined) */
#endif /* __MIG_check__Reply__%s_subsystem__ */
) */
InP->%s
InP->%s.
%sname = %s%s%s%s;
%sdisposition = %s%s;
    for (i = %s; i < %d; ptr++, i++) {
InOvTemplate
Out%dP
    if (%s%s > %d)
MIG_ARRAY_TOO_LARGE
    for (i = 0; i < %s%s; ptr++, i++) %s
    j = min(Out%dP->%s, %s%s);
    if (Out%dP->%s >
 %s%s)
%s%s = %sOut%dP->%s.name;
%s%s = Out%dP->%s%s.disposition;
Out%dP->%s.
%sreturn MIG_TYPE_ERROR;
%saddress = (void *)(%s%s%s);
.size
%ssize = 0;
%s->%s = %s%s%s * %d;
%s->%s = %s%s%s;
%s%s = (%s)(Out%dP->%s.address);
%scount = %s%s%s;
if (Out0P->Head.msgh_id != %d) {
    if (Out0P->Head.msgh_id == MACH_NOTIFY_SEND_ONCE)
{ return MIG_SERVER_DIED; }
    else
{ return MIG_REPLY_MISMATCH; }
msgh_simple = !(Out0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX);
msgh_size = Out0P->Head.msgh_size;
if ((Out0P->Head.msgh_bits & MACH_MSGH_BITS_COMPLEX) ||
    (Out0P->Head.msgh_size != (mach_msg_size_t)sizeof(__Reply)))
    ((msgh_size > (mach_msg_size_t)sizeof(__Reply) || msgh_size < 
__Reply
    ((msgh_size != (mach_msg_size_t)sizeof(__Reply)) &&
     (msgh_size != (mach_msg_size_t)sizeof(mig_reply_error_t) ||
      Out0P->RetCode == KERN_SUCCESS)))
if ((msgh_simple || Out0P->msgh_body.msgh_descriptor_count != %d ||
    msgh_size < 
 || msgh_size > (mach_msg_size_t)sizeof(__Reply)) &&
    msgh_size != (mach_msg_size_t)sizeof(__Reply)) &&
    (!msgh_simple || msgh_size != (mach_msg_size_t)sizeof(mig_reply_error_t) ||
    ((mig_reply_error_t *)Out0P)->RetCode == KERN_SUCCESS))
{ return MIG_TYPE_ERROR ; }
%sreturn%s%s;%s
return Out0P->RetCode;
%s}%s
%s ReturnValue;
ReturnValue = Out0P->RetCode;
%s{ 
%s((char *) Mess, sizeof(*Mess)); 
return ReturnValue;
%s}%s
return; }%s
return %s; }%s
if (Out0P->RetCode != KERN_SUCCESS) {
if (msgh_simple) {
#ifdef
__NDR_convert__mig_reply_error_t__defined
__NDR_convert__mig_reply_error_t((mig_reply_error_t *)Out0P);
#endif
/* __NDR_convert__mig_reply_error_t__defined */
return ((mig_reply_error_t *)Out0P)->RetCode;
if ( Out%dP->%s > %d )
< Out%dP->%s) ||
{ return MIG_TYPE_ERROR ; }
_WALIGN_(
Out%dP->%s
 * %d
!= Out%dP->%s%s
 || Out%dP->%s%s > %d
Send
#define
__MIG_check__Reply__%s_subsystem__ 1
#define
__NDR_convert__Reply__%s_subsystem__ 1
#define
__NDR_convert__mig_reply_error_subsystem__ 1
#include <mach/mach.h>
/* LINTLIBRARY */
#else
/* %s */
extern mach_port_t mig_get_reply_port();
extern void mig_dealloc_reply_port();
extern char *%s();
extern void %s();
#include <TargetConditionals.h>
#include <mach/mach_sync_ipc.h>
#ifndef __MigCanUseSpecialReplyPort
#if TARGET_OS_SIMULATOR
#define __MigCanUseSpecialReplyPort 0
#define mig_get_special_reply_port() MACH_PORT_DEAD
#define mig_dealloc_special_reply_port(port) __builtin_trap()
#endif /* __MigCanUseSpecialReplyPort */
#if TARGET_OS_OSX
extern _Bool _os_xbs_chrooted;
#define __MigCanUseSpecialReplyPort (!_os_xbs_chrooted)
#define __MigCanUseSpecialReplyPort 1
#ifndef __MigSpecialReplyPortMsgOption
#define __MigSpecialReplyPortMsgOption (__MigCanUseSpecialReplyPort ? (MACH_SEND_SYNC_OVERRIDE|MACH_SEND_SYNC_USE_THRPRI|MACH_RCV_SYNC_WAIT) : MACH_MSG_OPTION_NONE)
#endif /* __MigSpecialReplyPortMsgOption */
/* TODO: #include <mach/mach.h> */
#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */
extern void mach_msg_destroy(mach_msg_header_t *);
#ifdef __cplusplus
#endif /* __cplusplus */
__MachMsgErrorWithTimeout
__MachMsgErrorWithoutTimeout
__MachMsgErrorWithTimeoutSRP
__MachMsgErrorWithoutTimeoutSRP
#ifndef
#define
%s(_R_) { \
switch (_R_) { \
case MACH_SEND_INVALID_DATA: \
case MACH_SEND_INVALID_DEST: \
case MACH_SEND_INVALID_HEADER: \
if (!__MigCanUseSpecialReplyPort) { \
mig_put_reply_port(InP->Head.msgh_reply_port); \
mig_put_reply_port(InP->Head.msgh_reply_port); \
break; \
case MACH_SEND_TIMED_OUT: \
case MACH_RCV_TIMED_OUT: \
default: \
if (__MigCanUseSpecialReplyPort) { \
mig_dealloc_special_reply_port(InP->Head.msgh_reply_port); \
} else { \
mig_dealloc_reply_port(InP->Head.msgh_reply_port); \
mig_dealloc_reply_port(InP->Head.msgh_reply_port); \
_user
MACH_MSG_LOG_USER
(mach_port_t, char *, mach_msg_type_number_t)
extern void client_%s%s;
function_table_entry %s_client_functions[] =
    { "%s", client_%s },
    { (char *) 0, (function_ptr_t) 0 }
OverwriteTemplate
InP->msgh_body.msgh_descriptor_count = %d;
mig_external %s %s
    kern_return_t rtn;
    const static struct
    {
        struct rpc_routine_descriptor rd;
        struct rpc_routine_arg_descriptor rad[%d];
    } sig =
    {
sig.rad, 0
        {
        }
    };
    rtn = (MACH_RPC(&sig, (mach_msg_size_t)sizeof(sig), %d, %s,
                   (%s
)));
    if (rtn != KERN_NO_ACCESS) return rtn;
/* The following message rpc code is generated for the network case */
    if (0 /* Should be: !(%s & 0x3) XXX */) {
      rpc_subsystem_t subsystem = ((rpc_port_t)%s)->rp_subsystem;
      if (subsystem && subsystem->start == %d) {
kern_return_t rtn;
mach_msg_type_number_t _MIG_Ignore_Count_;
char *_%sTemp_;
/* Pre-Process the IN arguments: */
rtn = RPC_SIMPLE(%s, %d, %d, (
/* Post-Process the IN and OUT arguments: */
return rtn;
      }
    }
/* IN %s: */
(void)vm_read(mach_task_self(),
      (vm_address_t) %s%s, %s, (vm_address_t *) &_%sTemp_, &_MIG_Ignore_Count_);
*(char **)&%s%s = _%sTemp_;
_%sTemp_ = (char *) %s%s;
{   char _%sTemp_[%d];
{   _%sTemp_ = (char *) %s(%d);
_%sTemp_
/* %s */ (char *) %s
    *(char **)&%s%s = _%sTemp_;
/* OUT %s: */
    _%sTemp_ = (char *) %s%s;
(void)vm_deallocate(mach_task_self(),
 (vm_address_t *) _%sTemp_, %s);
%s(_%sTemp_, %d);
 (vm_address_t *) %s%s, %s);
Request MessRequest;
Request *InP = &MessRequest;
union {
OverwriteTemplate In;
Reply Out;
} MessReply;
OverwriteTemplate *InOvTemplate = &MessReply.In;
Reply *Out0P = &MessReply.Out;
Reply *Out%dP = NULL;
union %sMessU {
Request In;
} Mess;
} *Mess = (union %sMessU *) %s(sizeof(*Mess));
Request *InP = &Mess%sIn;
Reply *Out0P = &Mess%sOut;
mach_msg_return_t msg_result;
#ifdef
__MIG_check__Reply__%s_t__defined
#endif
/* __MIG_check__Reply__%s_t__defined */
#if LimitCheck
if ((sizeof(Request) - %d) > %d)
    __RequestOnStackAbort(%d, "%s");
if (sizeof(Request) < %d)
    __MessageOffStackNote(%d, "%s");
if ((sizeof(Reply) - %d) > %d)
    __ReplyOnStackAbort(%d, "%s");
if (sizeof(Reply) < %d)
if (sizeof(Request) < %d 
&& sizeof(Reply) < %d)
#endif /* LimitCheck */
if (%s) {
((mig_reply_error_t *)InP)->RetCode = %s;
((mig_reply_error_t *)InP)->NDR = NDR_record;
goto ready_to_send;
InP = (Request *) ((pointer_t) InP + msgh_size_delta - 
(InP->__Present__%s ? _WALIGNSZ_(%s) : 0)
if (%s%s < %d)
InP->%s = %s%s;
else
InP->%s = %d;
InP->%s = (%s) mig_strncpy_zerofill(InP->%s, %s, %d);
InP->%s = (%s) mig_strncpy(InP->%s, %s, %d);
(void)memcpy((char *) InP->%s, (const char *) %s%s, %d);
if (%s%s > %d) {
(void)memcpy((char *) InP->%s, (const char *) %s%s, 
%s%s);
if ((InP->__Present__%s = (%s != %s))) {
InP->%s.__Real__%s
/* %s%s */ %s%s
ready_to_send:
InP = &MessRequest;
InP = &Mess%sIn;
InP->Head.msgh_bits =
 MACH_MSGH_BITS_COMPLEX|
MACH_MSGH_BITS(%s, %s);
if (!%s)
InP->Head.msgh_bits |= MACH_MSGH_BITS_COMPLEX;
/* msgh_size passed as argument */
InP->%s = %s;
InP->%s = MACH_PORT_NULL;
InP->%s = __MigCanUseSpecialReplyPort ? mig_get_special_reply_port() : mig_get_reply_port();
InP->%s = mig_get_reply_port();
InP->Head.msgh_id = %d;
InP->Head.msgh_reserved = 0;
#ifdef USING_VOUCHERS
if (voucher_mach_msg_set != NULL) {
voucher_mach_msg_set(&InP->Head);
#endif // USING_VOUCHERS
/* END VOUCHER CODE */
(mach_msg_size_t)sizeof(Request)
msgh_size
(%s) ? (mach_msg_size_t)sizeof(mig_reply_error_t) : 
msg_result = mach_msg_send_from_kernel(
&InP->Head, %s);
msg_result = mach_msg(&InP->Head, MACH_SEND_MSG|%s%s, %s, 0, MACH_PORT_NULL, %s, MACH_PORT_NULL);
MACH_SEND_TIMEOUT|
MACH_MSG_TIMEOUT_NONE
msg_result
if (msg_result == MACH_SEND_INVALID_DEST ||
msg_result == MACH_SEND_TIMED_OUT) {
if (msg_result == MACH_SEND_TIMED_OUT) {
if((vm_offset_t) InP->%s.address != (vm_offset_t) %s)
mig_deallocate((vm_offset_t) InP->%s.address, (vm_size_t) InP->%s.size);
mach_msg_destroy_from_kernel(&InP->Head);
/* mach_msg_destroy doesn't handle the local port */
switch (MACH_MSGH_BITS_LOCAL(InP->Head.msgh_bits)) {
case MACH_MSG_TYPE_MOVE_SEND:
mach_port_deallocate(mach_task_self(), InP->Head.msgh_local_port);
break;
mach_msg_destroy(&InP->Head);
/* Initialize the template for overwrite */
InOvTemplate->msgh_body.msgh_descriptor_count = %d;
InOvTemplate->%s.
%saddress = (void *) %s%s%s;
%s%s%s;
%s%s%s * %d;
%scopy = MACH_MSG_OVERWRITE;
%stype = MACH_MSG_OOL_%sDESCRIPTOR;
PORTS_
    for (i = %s%s; i < %d; ptr++, i++) {
ptr->copy = MACH_MSG_ALLOCATE;
ptr->type = MACH_MSG_OOL_%sDESCRIPTOR;
InOvTemplate->%s.copy = MACH_MSG_ALLOCATE;
InOvTemplate->%s.type = MACH_MSG_OOL_%sDESCRIPTOR;
(__MigKernelSpecificCode) || (_MIG_KERNELSPECIFIC_CODE_)
msg_result = mach_msg_rpc_from_kernel(&InP->Head, %s, (mach_msg_size_t)sizeof(Reply));
msg_result = mach_msg_overwrite(&InP->Head, MACH_SEND_MSG|MACH_RCV_MSG|MACH_RCV_OVERWRITE|%s%s%s, %s, (mach_msg_size_t)sizeof(Reply), InP->Head.msgh_reply_port, %s, MACH_PORT_NULL, 
MACH_RCV_TRAILER_TYPE(MACH_MSG_TRAILER_FORMAT_0)|
MACH_SEND_TIMEOUT|MACH_RCV_TIMEOUT|
 &InOvTemplate->Head, (mach_msg_size_t)sizeof(OverwriteTemplate));
msg_result = mach_msg(&InP->Head, MACH_SEND_MSG|MACH_RCV_MSG|%s%s%s, %s, (mach_msg_size_t)sizeof(Reply), InP->Head.msgh_reply_port, %s, MACH_PORT_NULL);
MACH_MSG_SUCCESS
if (msg_result != %s) {
__MachMsgErrorWithTimeout%s(msg_result);
__MachMsgErrorWithoutTimeout%s(msg_result);
msg_result = mach_msg(&InP->Head, MACH_SEND_MSG|%s%s, %s, 0, 
 MACH_PORT_NULL, %s, MACH_PORT_NULL);
if (msg_result != MACH_MSG_SUCCESS)
msg_result = mach_msg(&Out0P->Head, MACH_RCV_MSG|%s%s%s, 0, (mach_msg_size_t)sizeof(Reply), InP->Head.msgh_local_port, %s, MACH_PORT_NULL);
MACH_RCV_TIMEOUT|
defined(__MIG_check__Reply__%s_t__defined)
check_result = __MIG_check__Reply__%s_t((__Reply__%s_t *)Out0P
, (__Reply__%s_t **)&Out%dP
if (check_result != MACH_MSG_SUCCESS) {
mach_msg_destroy_from_kernel(&Out0P->Head);
mach_msg_destroy(&Out0P->Head);
check_result
#endif
/* defined(__MIG_check__Reply__%s_t__defined) */
TrailerP
(void) mig_strncpy(%s%s, %s->%s, %d);
(void)memcpy((char *) %s%s, (const char *) %s->%s, %d);
if (Out%dP->%s
 > %s%s) {
 > %d) {
(void)memcpy((char *) %s%s, (const char *) Out%dP->%s, 
 %s%s);
 %d);
%s%s = Out%dP->%s
(void)memcpy((char *) %s%s, (const char *) Out%dP->%s, 
Out%dP->%s);
/* %s%s */ %s->%s
 * IDENTIFICATION:
 * stub generated %s
 * with a MiG generated by bootstrap_cmds-116
 * OPTIONS: 
KernelUser
KernelServer
-R (no RPC calls)
#ifdef
mig_external
mig_external
extern
#endif
/* mig_external */
#ifdef
mig_internal
mig_internal
static
#endif
/* mig_internal */
#include %s
WriteImplImport(): bad statement_kind_t (%d)
#ifndef
lint
UseExternRCSId
%s char %s_rcsid[] = %s;
const
#else
/* UseExternRCSId */
static %s char rcsid[] = %s;
#endif
/* UseExternRCSId */
#endif
/* lint */
Simple
__%s%s%s(%d, "%s")
#ifndef
mig_internal
#define
mig_internal
static __inline__
#ifndef
mig_external
#define mig_external
!defined(__MigTypeCheck) && defined(TypeCheck)
#define
__MigTypeCheck
TypeCheck
/* Legacy setting */
#endif
/* !defined(__MigTypeCheck) */
!defined(__MigKernelSpecificCode) && defined(_MIG_KERNEL_SPECIFIC_CODE_)
#define
__MigKernelSpecificCode
_MIG_KERNEL_SPECIFIC_CODE_
/* Legacy setting */
#endif
/* !defined(__MigKernelSpecificCode) */
#ifndef
LimitCheck
#define
LimitCheck 0
#endif
/* LimitCheck */
#ifndef
#define
min(a,b)  ( ((a) < (b))? (a): (b) )
#endif
/* min */
#if !defined(_WALIGN_)
#define _WALIGN_(x) (((x) + %d) & ~%d)
#endif /* !defined(_WALIGN_) */
#if !defined(_WALIGNSZ_)
#define _WALIGNSZ_(x) _WALIGN_(sizeof(x))
#endif /* !defined(_WALIGNSZ_) */
#ifndef
UseStaticTemplates
#define
UseStaticTemplates
const 
%s%s %s%s
mach_msg_max_trailer_t trailer;
mach_msg_trailer_t trailer;
%s %sOffset; /* MiG doesn't use it */
%s %s;
%s %s[%d];
boolean_t __Present__%s;
union {
    %s __Real__%s;
    char __Phony__%s[_WALIGNSZ_(%s)];
} %s;
%s %s;
char %s[%d];
#ifdef  __MigPackStructs
#pragma pack(push, %lu)
#endif
typedef struct {
mach_msg_header_t Head;
/* start of the kernel processed data */
mach_msg_body_t msgh_body;
/* end of the kernel processed data */
} %s __attribute__((unused));
#ifdef  __MigPackStructs
#pragma pack(pop)
#endif
const static %s %s = {
/* name = */
MACH_PORT_NULL,
/* pad1 = */
/* pad2 = */
/* disp = */
/* type = */
MACH_MSG_PORT_DESCRIPTOR,
/* addr = */
(void *)0,
/* size = */
/* size = */
/* deal = */
/* copy = */
/* type = */
MACH_MSG_OOL_DESCRIPTOR,
/* coun = */
/* coun = */
/* copy is meaningful only in overwrite mode */
/* copy = */
MACH_MSG_PHYSICAL_COPY,
/* type = */
MACH_MSG_OOL_PORTS_DESCRIPTOR,
/* typedefs for all replies */
#ifndef __Reply__%s_subsystem__defined
#define __Reply__%s_subsystem__defined
__Reply__%s_t
#endif /* !__Reply__%s_subsystem__defined */
/* typedefs for all requests */
#ifndef __Request__%s_subsystem__defined
#define __Request__%s_subsystem__defined
__Request__%s_t
#endif /* !__Request__%s_subsystem__defined */
#ifndef __NDR_convert__%s__%s__%s_t__%s__defined
string
__%s
defined(__NDR_convert__%s%s__%s__defined)
#define
__NDR_convert__%s__%s__%s_t__%s__defined
#define
__NDR_convert__%s__%s__%s_t__%s(a, f%s) \
__NDR_convert__2DARRAY((%s *)(a), f, %d, c, 
__NDR_convert__ARRAY((%s *)(a), f, %d * (c), 
__NDR_convert__ARRAY((%s *)(a), f, %d, 
__NDR_convert__ARRAY((%s *)(a), f, c, 
__NDR_convert__%s%s__%s
(a, f, %d
((%s *)(a), f%s
#endif /* defined(__NDR_convert__*__defined) */
#endif /* __NDR_convert__%s__%s__%s_t__%s__defined */
    (void)memcpy(
, %s);
MiG internal error: argument is %s
#if  MIG_DEBUG
LOG_TRACE(MACH_MSG_LOG_USER,
LOG_TRACE(MACH_MSG_LOG_SERVER,
MACH_MSG_REQUEST_BEING_SENT
Out0P
MACH_MSG_REPLY_BEING_RCVD
In0P
MACH_MSG_REQUEST_BEING_RCVD
MACH_MSG_REPLY_BEING_SENT
%s->Head.msgh_id,
msgh_size,
(mach_msg_size_t)sizeof(Request),
%s->Head.msgh_size,
%s->msgh_body.msgh_descriptor_count,
0, /* Kernel Proc. Data entries */
0, /* RetCode */
%s->RetCode,
/* Ports */
/* Out-of-Line Ports */
/* Out-of-Line Bytes */
__FILE__, __LINE__);
#endif /* MIG_DEBUG */
#define LOG_W_E(X)
LOG_ERRORS(%s, \
MACH_MSG_ERROR_WHILE_PARSING, (void *)(X), __FILE__, __LINE__)
#else  /* MIG_DEBUG */
#define LOG_W_E(X)
LOG_W_E("%s"); 
%s((char *) Mess, (mach_msg_size_t)sizeof(*Mess)); 
%sreturn %s; }
%sMIG_RETURN_ERROR(OutP, %s); }
TrailerP = (mach_msg_max_trailer_t *)((vm_offset_t)%s +
round_msg(%s->Head.msgh_size));
if (TrailerP->msgh_trailer_type != MACH_MSG_TRAILER_FORMAT_0)
{ return MIG_TRAILER_ERROR ; }
{ MIG_RETURN_ERROR(%s, MIG_TRAILER_ERROR); }
trailer_size = TrailerP->msgh_trailer_size -
(mach_msg_size_t)(sizeof(mach_msg_trailer_type_t) - sizeof(mach_msg_trailer_size_t));
if (trailer_size < (mach_msg_size_t)sizeof(mach_port_seqno_t))
{ MIG_RETURN_ERROR(OutP, MIG_TRAILER_ERROR); }
trailer_size -= (mach_msg_size_t)sizeof(mach_port_seqno_t);
if (trailer_size < (mach_msg_size_t)sizeof(security_token_t))
trailer_size -= (mach_msg_size_t)sizeof(security_token_t);
if (trailer_size < (mach_msg_size_t)sizeof(audit_token_t))
trailer_size -= (mach_msg_size_t)sizeof(audit_token_t);
if (trailer_size < (mach_msg_size_t)sizeof(mach_vm_address_t))
trailer_size -= (mach_msg_size_t)sizeof(mach_vm_address_t);
__%s%s%s
#define
%s(_NUM_, _NAME_)
(void) mig_strncpy_zerofill(
, %d);
#endif /* USING_MIG_STRNCPY_ZEROFILL */
(void) mig_strncpy(
{   typedef struct { char data[%d]; } *sp;
    * (sp) 
 = * (sp) 
[%d]
 + %s->%s%s.count
 + %s->%s%s.size
Subsystem %s: base = %u%s%s
, KernelUser
, KernelServer
previous Subsystem decl (of %s) will be ignored
duplicate KernelUser keyword
with KernelUser the -R option is meaningless
duplicate KernelServer keyword
MsgOption %s
None
Timeout
syntax error
WaitTime %s
SendTime %s
ErrorProc %s
ServerPrefix %s
UserPrefix %s
ServerDemux %s
%s %s
previous RCS decl will be ignored
RCSId %s
overriding previous definition of %s
conflicting translation types (%s, %s)
conflicting in-translation functions (%s, %s)
conflicting server types (%s, %s)
conflicting out-translation functions (%s, %s)
conflicting destructor functions (%s, %s)
conflicting user types (%s, %s)
Long form type declarations aren't allowed any longer
sizes in IPCTypes (%d, %d) aren't equal
Illegal direction specified
ValueOf only valid for in
PointerToIfNot only valid for in
redundant IPC flag ignored
only Dealloc is variable
memory exhausted
Import
SImport
UImport
IImport
DImport
import_name(%d): not import statement
NoSendTime
NoWaitTime
MsgOption: canceled
((mach_msg_type_name_t) -1)
illegal # directive
fatal flex scanner internal error--no action found
out of dynamic memory in yy_create_buffer()
out of dynamic memory in yy_scan_buffer()
out of dynamic memory in yy_scan_bytes()
bad buffer in yy_scan_bytes()
fatal flex scanner internal error--end of buffer missed
fatal error - scanner input buffer overflow
input in flex scanner failed
out of dynamic memory in yy_get_next_buffer()
out of dynamic memory in yyensure_buffer_stack()
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRS
;=O@$BO@MB
OC-.JMJ
OC=O<
C>?@AOO
 !"#>?@AMNM()*+,JB/O456789:
@AC>?@AMC
 !"#%&<>?@A<<<<0123J456789:>?@A<<B<<E<
J>?@AMNO>?@A<J
<J<<BDPRPPPMQC<<BIOBOIB;I;OK=;;;';;;OO=OOOO'''BOOBB'
ICJCOC-S
 ()*+
-./01
!$&,2s{qrjkl}|mnoptvuwyxza
IJM45C<KG=
>?Aef
O\WXYZQR
TUUVVVVVVVVVVVVVVVVVVVWXYYZZ[\]^_`abbccdefghiiiiijklmmmmmmmnnnnnnnnoooppqqrrstttuvwwxxyyyyyyzz{|}}~~~~
@(#)PROGRAM:migcom  PROJECT:mig-116
(defined(__STDC__) || defined(c_plusplus))
defined(LINTLIBRARY)
ReturnValue
