-debug
-packet_timeout
-delay_accept
-delay_write
-daemon
-relaxed_command_check
-kill
-address
-port
-names
-started
-dump
-stop
epmd running - daemon = %d
fork a daemon
erlang mapper daemon cant fork %m
daemon child is %d
epmd: Cant setsid()
erlang mapper daemon cant fork 2'nd time %m
daemon 2'nd child is %d
epmd: chdir() failed
/dev/null
usage: epmd [-d|-debug] [DbgExtra...] [-address List]
            [-port No] [-daemon] [-relaxed_command_check]
       epmd [-d|-debug] [-port No] [-names|-kill|-stop name]
See the Erlang epmd manual page for info about the usage.
Regular options
    -address List
        Let epmd listen only on the comma-separated list of IP
        addresses (and on the loopback interface).
    -port No
        Let epmd listen to another port than default %d
    -d
    -debug
        Enable debugging. This will give a log to
        the standard error stream. It will shorten
        the number of saved used node names to 5.
        If you give more than one debug flag you may
        get more debugging information.
    -daemon
        Start epmd detached (as a daemon)
    -relaxed_command_check
        Allow this instance of epmd to be killed with
        epmd -kill even if there are registered nodes.
        Also allows forced unregister (epmd -stop).
DbgExtra options
    -packet_timeout Seconds
        Set the number of seconds a connection can be
        inactive before epmd times out and closes the
        connection (default 60).
    -delay_accept Seconds
        To simulate a busy server you can insert a
        delay between epmd gets notified about that
        a new connection is requested and when the
        connections gets accepted.
    -delay_write Seconds
        Also a simulation of a busy server. Inserts
        a delay before a reply is sent.
Interactive options
    -names
        List names registered with the currently running epmd
    -kill
        Kill the currently running epmd
        (only allowed if -names show empty database or
        -relaxed_command_check was given when epmd was started).
    -stop Name
        Forcibly unregisters a name with epmd
        (only allowed if -relaxed_command_check was given when 
        epmd was started).
epmd: %s
epmd: %.*s: 
%s: %s
ERL_EPMD_ADDRESS
ERL_EPMD_PORT
ERL_EPMD_RELAXED_COMMAND_CHECK
epmd: local epmd responded with <%s>
epmd: Name too long!
epmd: up and running on port %d with data:
epmd: Cannot connect to local epmd
Killing not allowed - living nodes in database.
Killed
epmd: failed to read answer from local epmd
epmd: no response from local epmd
epmd: Can't write to epmd
try to initiate listening port %d
cannot allocate memory
cannot convert IP address to network format
cannot parse IP address "%s"
cannot listen on more than %d IP addresses
error opening stream socket
can't set sockopt
failed to set non-blocking mode of listening socket %d
there is already a epmd running at port %d
failed to bind socket
failed to listen on socket
entering the main select() loop
error in select 
closing because timed out on receive
closing connection on file descriptor %d
error on ALIVE socket %d (%d; errno=0x%x)
got more than expected on ALIVE socket %d (%d)
got partial packet only on file descriptor %d (%d)
error in read
invalid packet size (%d)
got %d bytes in packet, expected %d
unregistering '%s:%d', port %d
trying to unregister node with unknown file descriptor %d
*****     active name     "%s#%d" at port %d, fd = %d
*****     reg calculated count  : %d
*****     old/unused name "%s#%d"
*****     unreg counter         : %d
*****     unreg calculated count: %d
got %d bytes
***** 
***** ......and more
%s%.8x
 %.2x
** got ALIVE2_REQ
ALIVE2_REQ from non local address
packet to small for request ALIVE2_REQ (%d)
Node name size error in ALIVE2_REQ
Extra info size error in ALIVE2_REQ
node name contains ascii 0 in ALIVE2_REQ
** failed to send ALIVE2_RESP for "%s"
** sent ALIVE2_RESP for "%s"
** got PORT2_REQ
packet too small for request PORT2_REQ (%d)
node name contains ascii 0 in PORT2_REQ
invalid node name in PORT2_REQ
** failed to send PORT2_RESP (ok) for "%s"
** sent PORT2_RESP (ok) for "%s"
** failed to send PORT2_RESP (error) for "%s"
** sent PORT2_RESP (error) for "%s"
** got NAMES_REQ
failed to send NAMES_RESP
name 
 at port %d
** sent NAMES_RESP
** got DUMP_REQ
DUMP_REQ from non local address
failed to send DUMP_RESP
active name     <
> at port %d, fd = %d
old/unused name <
>, port = %d, fd = %d 
** sent DUMP_RESP
KILL_REQ from non local address
** got KILL_REQ
Disallowed KILL_REQ, live nodes
failed to send reply to KILL_REQ
epmd killed
got KILL_REQ - terminates normal
** got STOP_REQ
STOP_REQ from non local address
Disallowed STOP_REQ, no relaxed_command_check
packet too small for request STOP_REQ (%d)
NOEXIST
failed to send STOP_RESP NOEXIST
** sent STOP_RESP NOEXIST
epmd connection stopped
STOPPED
failed to send STOP_RESP STOPPED
** sent STOP_RESP STOPPED
got garbage 
node name is too long (%d) %s
invalid node name encoding
extra data is too long (%d) %s
node name already occupied %s
reusing slot with same name '%s'
epmd: Insufficient memory
registering '%s:%d', port %d
type %d proto %d highvsn %d lowvsn %d
Invalid length in write %d
error in write
could only send %d bytes out of %d to fd %d
trying to unregister node with unknown name %s
error in accept
Local peer connected
Non-local peer connected
opening connection on file descriptor %d
failed opening connection on file descriptor %d
time in seconds: %d
0123456789abcdef
0123456789ABCDEF
                                
00000000000000000000000000000000
