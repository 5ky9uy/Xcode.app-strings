ERLC_EMULATOR
Value of environment variable ERLC_EMULATOR is too large
+sbtu
-noinput
-mode
minimal
-boot
start_clean
erl_compile
compile_cmdline
Failed to get current working directory: %s
@cwd
@option
@output_type
-compile
makedep_output
standard_io
{%s,%s}
{%s,"%s"}
makedep_target
makedep_quote_target
makedep_add_missing
makedep_phony
@outdir
@optimize
-smp
@verbose
true
@warn
error
warnings_as_errors
@files
No value given to -%c option
Error %d executing '%s'.
-b type
type of output file (e.g. jam or beam)
turn on debugging of erlc itself
-Dname
define name
-Dname=value
define name to have value
-help
shows this help text
-I path
where to search for include files
generate a rule for make(1) describing the dependencies
-MF file
write the dependencies to 'file'
-MT target
change the target of the rule emitted by dependency generation
-MQ target
same as -MT but quote characters special to make(1)
consider missing headers as generated files and add them to the dependencies
add a phony target for each dependency
same as -M -MT file (with default 'file')
-o name
name output directory or file
-pa path
add path to the front of Erlang's code path
-pz path
add path to the end of Erlang's code path
compile using SMP emulator
verbose compiler output
-Werror
make all warnings into errors
disable warnings
-Wnumber
set warning level to number
-Wall
enable all warnings
enable warnings (default; same as -W1)
generate listing of expanded code (Erlang compiler)
generate assembly listing (Erlang compiler)
generate listing of preprocessed code (Erlang compiler)
+term
pass the Erlang term unchanged to the compiler
Usage:
erlc [options] file.ext ...
Options:
%-14s %s
erlc: %s
Insufficient memory
0123456789abcdef
0123456789ABCDEF
                                
00000000000000000000000000000000
