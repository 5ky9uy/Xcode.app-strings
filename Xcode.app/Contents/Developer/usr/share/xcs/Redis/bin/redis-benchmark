kqueue
fcntl(F_GETFL): %s
fcntl(F_SETFL,O_NONBLOCK): %s
setsockopt SO_KEEPALIVE: %s
setsockopt SO_SNDBUF: %s
connect: %s
setsockopt TCP_NODELAY: %s
creating socket: %s
setsockopt SO_REUSEADDR: %s
unable to bind socket
setsockopt: %s
bind: %s
listen: %s
accept: %s
--csv
--dbnum
--help
Invalid option "%s" or option argument missing
%s: %.2f
127.0.0.1
Creating %d idle connections and waiting forever (Ctrl+C when done)
ping_inline
PING_INLINE
PING
ping_mbulk
PING
PING_BULK
SET key:__rand_int__ %s
GET key:__rand_int__
INCR counter:__rand_int__
INCR
lpush
LPUSH mylist %s
LPUSH
LPOP mylist
LPOP
SADD myset element:__rand_int__
SADD
SPOP myset
SPOP
lrange
lrange_100
lrange_300
lrange_500
lrange_600
LPUSH (needed to benchmark LRANGE)
LRANGE mylist 0 99
LRANGE_100 (first 100 elements)
LRANGE mylist 0 299
LRANGE_300 (first 300 elements)
LRANGE mylist 0 449
LRANGE_500 (first 450 elements)
LRANGE mylist 0 599
LRANGE_600 (first 600 elements)
MSET
key:__rand_int__
MSET (10 keys)
Could not connect to Redis at 
%s:%d: %s
%s: %s
SELECT
__rand_int__
Writing to socket: %s
freeClient
redis-benchmark.c
ln != NULL
Error: %s
Unexpected error reply, exiting...
====== %s ======
  %d requests completed in %.2f seconds
  %d parallel clients
  %d bytes payload
  keep alive: %d
%.2f%% <= %d milliseconds
%.2f requests per second
"%s","%.2f"
%s: %.2f requests per second
Usage: redis-benchmark [-h <host>] [-p <port>] [-c <clients>] [-n <requests]> [-k <boolean>]
 -h <hostname>      Server hostname (default 127.0.0.1)
 -p <port>          Server port (default 6379)
 -s <socket>        Server socket (overrides host and port)
 -c <clients>       Number of parallel connections (default 50)
 -n <requests>      Total number of requests (default 10000)
 -d <size>          Data size of SET/GET value in bytes (default 2)
 -dbnum <db>        SELECT the specified db number (default 0)
 -k <boolean>       1=keep alive 0=reconnect (default 1)
 -r <keyspacelen>   Use random keys for SET/GET/INCR, random values for SADD
  Using this option the benchmark will expand the string __rand_int__
  inside an argument with a 12 digits number in the specified range
  from 0 to keyspacelen-1. The substitution changes every time a command
  is executed. Default tests use this to hit random keys in the
  specified range.
 -P <numreq>        Pipeline <numreq> requests. Default 1 (no pipeline).
 -q                 Quiet. Just show query/sec values
 --csv              Output in CSV format
 -l                 Loop. Run the tests forever
 -t <tests>         Only run the comma separated list of tests. The test
                    names are the same as the ones produced as output.
 -I                 Idle mode. Just open N idle connections and wait.
Examples:
 Run the benchmark with the default configuration against 127.0.0.1:6379:
   $ redis-benchmark
 Use 20 parallel clients, for a total of 100k requests, against 192.168.1.1:
   $ redis-benchmark -h 192.168.1.1 -p 6379 -n 100000 -c 20
 Fill 127.0.0.1:6379 with about 1 million keys only using the SET test:
   $ redis-benchmark -t set -n 1000000 -r 100000000
 Benchmark 127.0.0.1:6379 for a few commands producing CSV output:
   $ redis-benchmark -t ping,set,get -n 100000 --csv
 Benchmark a specific command line:
   $ redis-benchmark -r 10000 -n 10000 eval 'return redis.call("ping")' 0
 Fill a list with 10000 random elements:
   $ redis-benchmark -r 10000 -n 10000 lpush mylist __rand_int__
 On user specified command lines __rand_int__ is replaced with a random integer
 with a range of values selected by the -r option.
WARNING: keepalive disabled, you probably need 'echo 1 > /proc/sys/net/ipv4/tcp_tw_reuse' for Linux and 'sudo sysctl -w net.inet.tcp.msl=1000' for Mac OS X in order to use a lot of clients/requests
sdsIncrLen
sds.c
sh->free >= incr
sh->free >= 0
\x%02x
zmalloc: Out of memory trying to allocate %zu bytes
getsockopt(SO_ERROR)
setsockopt(SO_RCVTIMEO)
setsockopt(SO_SNDTIMEO)
%s: 
Can't get addr: %s
Can't bind socket: %s
Can't create socket: %s
setsockopt(TCP_NODELAY)
fcntl(F_GETFL)
fcntl(F_SETFL)
poll(2)
redisReaderFeed
hiredis.c
r->buf != NULL
eEfFgGaA
$%zu
redisvFormatCommand
pos == totlen
redisFormatCommandArgv
__redisSetError
type == REDIS_ERR_IO
Server closed the connection
Out of memory
createStringObject
task->type == REDIS_REPLY_ERROR || task->type == REDIS_REPLY_STATUS || task->type == REDIS_REPLY_STRING
parent->type == REDIS_REPLY_ARRAY
createArrayObject
createIntegerObject
createNilObject
processItem
NULL
Protocol error, got %s as reply type byte
"\%c"
"\n"
"\r"
"\t"
"\a"
"\b"
"%c"
"\x%02x"
moveToNextTask
prv->type == REDIS_REPLY_ARRAY
cur->idx < prv->elements
No support for nested multi bulk replies with depth > 7
diouxX
