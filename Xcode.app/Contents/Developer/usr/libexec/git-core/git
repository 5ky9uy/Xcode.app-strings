git [--version] [--help] [-C <path>] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]
'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
The following paths are ignored by one of your .gitignore files:
You've added another git repository inside your current repository.
Clones of the outer repository will not contain the contents of
the embedded repository and will not know how to obtain it.
If you meant to add a submodule, use:
git submodule add <url> %s
If you added this path by mistake, you can remove it from the
index with:
git rm --cached %s
See "git help submodule" for more information.
git bundle create <file> <git-rev-list args>
   or: git bundle verify <file>
   or: git bundle list-heads <file> [<refname>...]
   or: git bundle unbundle <file> [<refname>...]
git check-ref-format [--normalize] [<options>] <refname>
   or: git check-ref-format --branch <branchname-shorthand>
Clone succeeded, but checkout failed.
You can inspect what was checked out with 'git status'
and retry the checkout with 'git checkout -f HEAD'
git commit-tree [(-p <sha1>)...] [-S[<keyid>]] [-m <message>] [-F <file>] <sha1>
You asked to amend the most recent commit, but doing so would make
it empty. You can repeat your command with --allow-empty, or you can
remove the commit entirely with "git reset HEAD^".
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:
    git commit --allow-empty
Otherwise, please use 'git reset'
If you wish to skip this commit, use:
    git reset
Then "git cherry-pick --continue" will resume cherry-picking
the remaining commits.
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:
    git config --global user.name "Your Name"
    git config --global user.email you@example.com
After doing this, you may fix the identity used for this commit with:
    git commit --amend --reset-author
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:
    git config --global --edit
After doing this, you may fix the identity used for this commit with:
    git commit --amend --reset-author
git credential [fill|approve|reject]
git diff-files [-q] [-0 | -1 | -2 | -3 | -c | --cc] [<common-diff-options>] [<path>...]
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
git diff-index [-m] [--cached] [<common-diff-options>] <tree-ish> [<path>...]
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
git diff-tree [--stdin] [-m] [-c] [--cc] [-s] [-v] [--pretty] [-t] [-r] [--root] [<common-diff-options>] <tree-ish> [<tree-ish>] [<path>...]
  -r            diff recursively
  --root        include the initial commit as diff against /dev/null
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
git diff [<options>] [<commit> [<commit>]] [--] [<path>...]
git fetch-pack [--all] [--stdin] [--quiet | -q] [--keep | -k] [--thin] [--include-tag] [--upload-pack=<git-upload-pack>] [--depth=<n>] [--no-progress] [--diag-url] [-v] [<host>:]<directory> [<refs>...]
git get-tar-commit-id
git index-pack [-v] [-o <index-file>] [--keep | --keep=<msg>] [--verify] [--strict] (<pack-file> | --stdin [--fix-thin] [<pack-file>])
git mailinfo [-k | -b] [-m | --message-id] [-u | --encoding=<encoding> | -n] [--scissors | --no-scissors] <msg> <patch> < mail >info
git mailsplit [-d<prec>] [-f<n>] [-b] [--keep-cr] -o<directory> [(<mbox>|<Maildir>)...]
GIT_MERGE_AUTOEDIT
Please enter a commit message to explain why this merge is necessary,
especially if it merges an updated upstream into a topic branch.
Lines starting with '%c' will be ignored, and an empty message aborts
the commit.
git merge-ours <base>... -- HEAD <remote>...
git %s <base>... -- <head> <remote> ...
git merge-tree <base-tree> <branch1> <branch2>
Write/edit the notes for the following object:
disabling bitmap writing, as some objects are not being packed
disabling bitmap writing, packs are split due to pack.packSizeLimit
git pack-redundant [--verbose] [--alt-odb] (--all | <filename.pack>...)
git patch-id [--stable | --unstable]
0123456789
You are not currently on a branch.
To push the history leading to the current (detached HEAD)
state now, use
    git push %s HEAD:<name-of-remote-branch>
Updates were rejected because the tip of your current branch is behind
its remote counterpart. Integrate the remote changes (e.g.
'git pull ...') before pushing again.
See the 'Note about fast-forwards' in 'git push --help' for details.
Updates were rejected because a pushed branch tip is behind its remote
counterpart. Check out this branch and integrate the remote changes
(e.g. 'git pull ...') before pushing again.
See the 'Note about fast-forwards' in 'git push --help' for details.
Updates were rejected because the tag already exists in the remote.
Updates were rejected because the remote contains work that you do
not have locally. This is usually caused by another repository pushing
to the same ref. You may want to first integrate the remote changes
(e.g., 'git pull ...') before pushing again.
See the 'Note about fast-forwards' in 'git push --help' for details.
You cannot update a remote ref that points at a non-commit object,
or update a remote ref to make it point at a non-commit object,
without using the '--force' option.
6666666666666666\\\\\\\\\\\\\\\\
0005
git reflog [ show | expire | delete | exists ]
git reflog expire [--expire=<time>] [--expire-unreachable=<time>] [--rewrite] [--updateref] [--stale-fix] [--dry-run | -n] [--verbose] [--all] <refs>...
git reflog delete [--rewrite] [--updateref] [--dry-run | -n] [--verbose] <refs>...
git reflog exists <ref>
--mirror is dangerous and deprecated; please
 use --mirror=fetch or --mirror=push instead
git remote-ext <remote> <url>
git remote-fd <remote> <url>
Incremental repacks are incompatible with bitmap indexes.  Use
--no-write-bitmap-index or disable the pack.writebitmaps configuration.
git rev-list [OPTION] <commit-id>... [ -- paths... ]
  limiting output:
    --max-count=<n>
    --max-age=<epoch>
    --min-age=<epoch>
    --sparse
    --no-merges
    --min-parents=<n>
    --no-min-parents
    --max-parents=<n>
    --no-max-parents
    --remove-empty
    --all
    --branches
    --tags
    --remotes
    --stdin
    --quiet
  ordering output:
    --topo-order
    --date-order
    --reverse
  formatting output:
    --parents
    --children
    --objects | --objects-edge
    --unpacked
    --header | --pretty
    --abbrev=<n> | --no-abbrev
    --abbrev-commit
    --left-right
    --count
  special purpose:
    --bisect
    --bisect-vars
    --bisect-all
git rev-parse --parseopt [<options>] -- [<args>...]
   or: git rev-parse --sq-quote [<arg>...]
   or: git rev-parse [<options>] [<arg>...]
Run "git rev-parse --parseopt -h" for more information on the first usage.
HEAD
-w[<width>[,<indent1>[,<indent2>]]]
Write a message for tag:
  %s
Lines starting with '%c' will be ignored.
Write a message for tag:
  %s
Lines starting with '%c' will be kept; you may remove them yourself if you want to.
git unpack-objects [-n] [-q] [-r] [--strict]
git upload-archive <repo>
git upload-archive: archiver died with error
git var (-l | <variable>)
GIT binary patch
^(1969-12-31|1970-01-01) [0-2][0-9]:[0-5][0-9]:00(\.0+)? ([-+][0-2][0-9]:?[0-5][0-9])
-Subproject commit 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
----------------------------------------------------------------------
(builtin)true
(builtin)false
(builtin)unknown
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~
After fixing the error cause you may try to fix up
the remote tracking information by invoking
"git branch --set-upstream-to=%s%s%s".
the requested upstream branch '%s' does not exist
If you are planning on basing your work on an upstream
branch that already exists at the remote, you may need to
run "git fetch" to retrieve it.
If you are planning to push out a new local branch that
will track its remote counterpart, you may want to use
"git push -u" to set the upstream config as you push.
Cannot setup tracking information; starting point '%s' is not a branch.
# v2 git bundle
gpgsig
Warning: commit message did not conform to UTF-8.
You may want to amend it after fixing the message, or set the config
variable i18n.commitencoding to the encoding your project uses.
exceeded maximum include depth (%d) while including
from
Do you have circular includes?
@@@@@@@@@AA@@A@@@@@@@@@@@@@@@@@@
     
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
NN'C
2waN
mdIP
gwz3
4}@4m
.(uw
OJqj
m"2T
FH9<
x6(T!
h`LK
JbEv
E&)
R;*&
(G]>
pENOXHn
0lY;
F==8
p;I}
=J-f
VYk[(
[x*w1
L<<'2
[<tR
yrhj
>/Vm-ikP I
xj4UWg
 h'$
zyT_
Lv<l
rq{1
A'eW|
3B-9
------------
only found copies from modified paths due to too many files.
inexact rename detection was skipped due to too many files.
you may want to set your %s variable to at least %d and retry the command.
'%s' appears to be a git command, but we were not
able to execute it. Maybe git-%s is broken?
From e6807f3efca28b30decfecb1732a56c7db1137ee Mon Sep 17 00:00:00 2001
# repo-abbrev:
utf-8
?BITM
abtnvfr
cache entry has null sha1: %s
# pack-refs with: peeled fully-peeled 
refname
die() should not be called in child
error() should not be called in child
warn() should not be called in child
Signed-off-by: 
you have staged changes in your working tree
If these changes are meant to be squashed into the previous commit, run:
  git commit --amend %s
If they are meant to go into a new commit, run:
  git commit %s
In both cases, once you're done, continue with:
  git rebase --continue
(cherry picked from commit 
  %m %s
2.14.3 (Apple Git-98)
@------------------------ >8 ------------------------
Success
No match
Invalid regular expression
Invalid collation character
Invalid character class name
Trailing backslash
Invalid back reference
Unmatched [ or [^
Unmatched ( or \(
Unmatched \{
Invalid content of \{\}
Invalid range end
Memory exhausted
Invalid preceding regular expression
Premature end of regular expression
Regular expression too big
Unmatched ) or \)
git-help
git-
cannot handle %s as a builtin
usage: %s
Expansion of alias '%s' failed; '%s' is not a git command
Failed to run command '%s': %s
GIT_PAGER
annotate
archive
bisect--helper
blame
branch
bundle
cat-file
check-attr
check-ignore
check-mailmap
check-ref-format
checkout
checkout-index
cherry
cherry-pick
clean
clone
column
commit-tree
config
count-objects
credential
describe
diff
diff-files
diff-index
diff-tree
difftool
fast-export
fetch-pack
fmt-merge-msg
for-each-ref
format-patch
fsck
fsck-objects
get-tar-commit-id
grep
hash-object
help
index-pack
init
init-db
interpret-trailers
ls-files
ls-remote
ls-tree
mailinfo
mailsplit
merge-base
merge-file
merge-index
merge-ours
merge-recursive
merge-recursive-ours
merge-recursive-theirs
merge-subtree
merge-tree
mktag
mktree
name-rev
notes
pack-objects
pack-redundant
pack-refs
patch-id
pickaxe
prune
prune-packed
pull
rebase--helper
receive-pack
reflog
remote
remote-ext
remote-fd
repack
replace
rerere
rev-list
rev-parse
revert
send-pack
shortlog
show-branch
show-ref
stage
status
stripspace
submodule--helper
symbolic-ref
unpack-file
unpack-objects
update-index
update-ref
update-server-info
upload-archive
upload-archive--writer
verify-commit
verify-pack
verify-tag
version
whatchanged
worktree
write-tree
--help
--exclude-guides
%s doesn't support --super-prefix
git.c
trace: built-in: git
write failure on standard output
unknown write failure on standard output
close failed on standard output
--version
--exec-path
--html-path
share/doc/git-doc
--man-path
share/man
--info-path
share/info
--paginate
--no-pager
--no-replace-objects
GIT_NO_REPLACE_OBJECTS
--git-dir
No directory given for --git-dir.
GIT_DIR
--git-dir=
--namespace
No namespace given for --namespace.
GIT_NAMESPACE
--namespace=
--work-tree
No directory given for --work-tree.
GIT_WORK_TREE
--work-tree=
--super-prefix
No prefix given for --super-prefix.
GIT_INTERNAL_SUPER_PREFIX
--super-prefix=
--bare
GIT_IMPLICIT_WORK_TREE
-c expects a configuration string
--literal-pathspecs
GIT_LITERAL_PATHSPECS
--no-literal-pathspecs
--glob-pathspecs
GIT_GLOB_PATHSPECS
--noglob-pathspecs
GIT_NOGLOB_PATHSPECS
--icase-pathspecs
GIT_ICASE_PATHSPECS
--shallow-file
No directory given for -C.
Cannot change to '%s'
--list-builtins
Unknown option: %s
git-%s
trace: exec:
While expanding alias '%s': '%s'
Bad alias.%s string: %s
alias '%s' changes environment variables
You can use '!git' in the alias to do this.
empty alias for %s
recursive alias: %s
trace: alias expansion: %s =>
size_t overflow: %ju * %ju
add--interactive
--patch
-A and -u are mutually incompatible
Option --ignore-missing can only be used together with --dry-run
--chmod param '%s' must be either -x or +x
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?
index file corrupt
BUG:%s:%d: unsupported magic %x
builtin/add.c
pathspec '%s' did not match any files
Unable to write new index file
unexpected diff status %c
updating files failed
remove '%s'
add.ignoreerrors
add.ignore-errors
be verbose
interactive picking
patch
select hunks interactively
edit
edit current diff and apply
force
allow adding otherwise ignored files
update
update tracked files
intent-to-add
record only the fact that the path will be added later
add changes from all tracked and untracked files
ignore-removal
ignore paths removed in the working tree (same as --no-all)
refresh
don't add, only refresh the index
ignore-errors
just skip files which cannot be added because of errors
ignore-missing
check if - even missing - files are ignored in dry run
chmod
(+/-)x
override the executable bit of the listed files
warn-embedded-repo
warn when adding an embedded repository
git add [<options>] [--] <pathspec>...
ADD_EDIT.patch
--recount
Could not read the index
Could not open '%s' for writing.
Could not write patch
editing patch failed
Could not stat '%s'
Empty patch. Aborted.
Could not apply '%s'
Unstaged changes after refreshing the index:
Use -f if you really want to add them.
adding files failed
adding embedded git repository: %s
cannot chmod %cx '%s'
git am [<options>] [(<mbox> | <Maildir>)...]
git am [<options>] (--continue | --skip | --abort)
run interactively
binary
historical option -- no-op
3way
allow fall back on 3way merging if needed
be quiet
signoff
add a Signed-off-by line to the commit message
utf8
recode into utf8 (default)
keep
pass -k flag to git-mailinfo
keep-non-patch
pass -b flag to git-mailinfo
message-id
pass -m flag to git-mailinfo
keep-cr
pass --keep-cr flag to git-mailsplit for mbox format
no-keep-cr
do not pass --keep-cr flag to git-mailsplit independent of am.keepcr
scissors
strip everything before a scissors line
whitespace
action
pass it through git-apply
ignore-space-change
ignore-whitespace
directory
root
exclude
path
include
patch-format
format
format the patch(es) are in
reject
resolvemsg
override error message when patch failure occurs
continue applying patches after resolving a conflict
resolved
synonyms for --continue
skip
skip the current patch
restore the original branch and abort the patching operation.
committer-date-is-author-date
lie about committer date
ignore-date
use current timestamp for author date
rerere-autoupdate
update the index with reused conflict resolution if possible
key-id
GPG-sign commits
rebasing
(internal use for git-rebase)
The -b/--binary option has been a no-op for long time, and
it will be removed. Please do not use it anymore.
failed to read the index
previous rebase directory %s still exists but mbox given.
Stray %s directory found.
Use "git am --abort" to remove it.
Resolve operation not in progress, we are not resuming.
%s/%s
BUG: invalid resume value
mbox
stgit
stgit-series
mboxrd
Invalid value for --patch-format: %s
rebase-apply
am.threeway
am.messageid
commit.gpgsign
last
next
BUG: state file 'next' does not exist
BUG: state file 'last' does not exist
could not parse author script
original-commit
could not parse %s
threeway
sign
messageid
apply-opt
could not read '%s'
author-script
read_author_script
builtin/am.c
!state->author_name
!state->author_email
!state->author_date
GIT_AUTHOR_NAME
GIT_AUTHOR_EMAIL
GIT_AUTHOR_DATE
read_commit_msg
!state->msg
final-commit
Patch format detection failed.
failed to create directory '%s'
Failed to split patches.
BUG: invalid value for state->keep
BUG: invalid value for state->scissors
applying
abort-safety
ORIG_HEAD
From 
From: 
# This series applies on GIT commit
# HG changeset patch
From:
Author:
Date:
^[!-9;-~]+:
fseek failed
invalid pattern: %s
am.keepcr
BUG: invalid patch_format
-d%d
-o%s
--keep-cr
--mboxrd
%s/%0*d
could not parse patch '%s'
From:%s
From
Date
Subject: %s
Only one StGIT patch series can be applied at once
# User 
From: %s
# Date 
invalid timestamp
invalid Date line
invalid timezone offset
Date: %s
dirtyindex
Dirty index: cannot apply patches (dirty: %s)
Applying: %.*s
patch-merge-index
No changes -- Patch already applied.
Patch failed at %s %.*s
advice.amworkdir
The copy of the patch that failed is found in: %s
rewritten
am_run
state->rebasing
unable to write index file
%0*d
cannot resume: %s does not exist.
author
invalid ident line: %.*s
get_commit_info
unable to parse commit %s
info
could not parse patch
Subject: 
Author: 
Email: 
Date: 
Mail System Internal Data
Patch is empty.
parse_mail
GIT_AUTHOR_NAME=
GIT_AUTHOR_EMAIL=
GIT_AUTHOR_DATE=
do_interactive
state->msg
cannot be interactive without stdin connected to a terminal.
Commit Body is:
--------------------------
Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all: 
run_applypatch_msg_hook
applypatch-msg
'%s' was deleted by the applypatch-msg hook
BUG: init_apply_state() failed
unknown option passed through to git apply
BUG: check_apply_state() failed
could not build fake ancestor
Repository lacks necessary blobs to fall back on 3-way merge.
Using index info to reconstruct a base tree...
--diff-filter=AM
Did you hand edit your patch?
It does not apply to blobs recorded in its index.
could not write tree
Falling back to patching base and 3-way merge...
%.*s
Failed to merge in the changes.
--build-fake-ancestor=%s
git am -i
git am
When you have resolved this problem, run "%s --continue".
If you prefer to skip this patch, run "%s --skip" instead.
To restore the original branch and stop patching, run "%s --abort".
pre-applypatch
applying to an empty history
GIT_COMMITTER_DATE
GIT_REFLOG_ACTION
%s: %.*s
do_commit
!is_null_oid(&state->orig_commit)
post-applypatch
could not stat %s
Malformed input line: '%s'.
Notes added by 'git rebase'
rebase
Failed to copy notes from '%s' to '%s'
post-rewrite
No changes - did you forget to use 'git add'?
If there is nothing left to stage, chances are that something else
already introduced the same changes; you might want to skip this patch.
You still have unmerged paths in your index.
You should 'git add' each file with resolved conflicts to mark them as such.
You might run `git rm` on a file to accept "deleted by them" for it.
failed to clean index
Could not parse object '%s'.
unable to write new index file
am --abort
You seem to have moved HEAD since the last 'am' failure.
Not rewinding to ORIG_HEAD
git apply [<options>] [<patch>...]
git-upload-archive
output
file
write the archive to this file
repo
retrieve the archive from remote repository <repo>
exec
command
path to the remote git-upload-archive command
could not create archive file '%s'
could not redirect output
git archive: Remote with no URL
argument --format=%s
argument %s
git archive: expected ACK/NAK, got EOF
NACK 
git archive: NACK %s
ERR 
remote error: %s
git archive: protocol error
git archive: expected a flush
next-all
perform 'git bisect next'
no-checkout
update BISECT_HEAD instead of checking out the current commit
git bisect--helper --next-all [--no-checkout]
incremental
Show blame entries as we find them, incrementally
Show blank SHA-1 for boundary commits (Default: off)
Do not treat root commits as boundaries (Default: off)
show-stats
Show work cost statistics
Force progress reporting
score-debug
Show output score for blame entries
show-name
Show original filename (Default: auto)
show-number
Show original linenumber (Default: off)
porcelain
Show in a format designed for machine consumption
line-porcelain
Show porcelain format with per-line commit information
Use the same output mode as git-annotate (Default: off)
Show raw timestamp (Default: off)
Show long commit SHA1 (Default: off)
Suppress author name and timestamp (Default: off)
show-email
Show author email instead of name (Default: off)
Ignore whitespace differences
indent-heuristic
Use an experimental heuristic to improve diffs
minimal
Spend extra cycles to find better match
Use revisions from <file> instead of calling git-rev-list
contents
Use <file>'s contents as the final image
score
Find line copies within and across files
Find line movements within and across files
Process only line range n,m, counting from 1
abbrev
use <n> digits to display SHA-1s
--reverse
--children
--progress can't be used with --incremental or porcelain formats
reading graft file '%s' failed
4 years, 11 months ago
cannot stat path '%s'
file %s has only %lu line
file %s has only %lu lines
Blaming lines
num read blob: %d
num get patch: %d
num commits: %d
blame.showroot
blame.blankboundary
blame.showemail
blame.date
<rev-opts> are documented in git-rev-list(1)
Baa %d!
%s %d %d %d
stdout
author %s
author-mail %s
author-time %ju
author-tz %s
committer %s
committer-mail %s
committer-time %ju
committer-tz %s
summary %s
author 
committer 
(%s)
<%.*s>
previous %s 
filename 
%s %d %d
(%10s
%10s
 %*d %02d
 %-*.*s
 %*d
 (%s%*s %10s
 %*d) 
%ju %s
boundary
Generic options
show hash and subject, give twice for upstream branch
suppress informational messages
track
set up tracking mode (see git-pull(1))
set-upstream
change upstream info
set-upstream-to
upstream
change the upstream info
unset-upstream
Unset the upstream info
color
when
use colored output
always
remotes
act on remote-tracking branches
contains
print only branches that contain the commit
no-contains
print only branches that don't contain the commit
with
without
Specific git-branch actions:
list both remote-tracking and local branches
delete fully merged branch
delete branch (even if not merged)
move
move/rename a branch and its reflog
move/rename a branch, even if target exists
list
list branch names
create-reflog
create the branch's reflog
edit-description
edit the description for the branch
force creation, move/rename, deletion
merged
print only branches that are merged
no-merged
print only branches that are not merged
style
list branches in columns
sort
field name to sort on
points-at
object
print only branches of the object
ignore-case
sorting and filtering are case insensitive
format to use for the output
Failed to resolve HEAD as a valid ref.
HEAD not found below refs/heads!
--column and --verbose are incompatible
branch name required
Cannot give description to detached HEAD
cannot edit description of more than one branch
No commit on branch '%s' yet.
No branch named '%s'.
too many branches for a rename operation
too many branches to set new upstream
could not set upstream of HEAD to %s when it does not point to any branch.
no such branch '%s'
branch '%s' does not exist
too many branches to unset upstream
could not unset upstream of HEAD when it does not point to any branch.
Branch '%s' has no upstream information
branch.%s.merge
it does not make sense to create 'HEAD' manually
-a and -r options to 'git branch' do not make sense with a branch name
The --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to
refs/remotes/%s
If you wanted to make '%s' track '%s', do this:
    git branch -d %s
    git branch --set-upstream-to %s
git branch [<options>] [-r | -a] [--merged | --no-merged]
git branch [<options>] [-l] [-f] <branch-name> [<start-point>]
git branch [<options>] [-r] (-d | -D) <branch-name>...
git branch [<options>] (-m | -M) [<old-branch>] <new-branch>
git branch [<options>] [-r | -a] [--points-at]
git branch [<options>] [-r | -a] [--format]
column.
color.branch
color.branch.
plain
current
cannot use -a with -d
Couldn't look up commit object for HEAD
Cannot delete branch '%s' checked out at '%s'
remote-tracking branch '%s' not found.
branch '%s' not found.
Error deleting remote-tracking branch '%s'
Error deleting branch '%s'
Deleted remote-tracking branch %s (was %s).
Deleted branch %s (was %s).
broken
Couldn't look up commit object for '%s'
The branch '%s' is not fully merged.
If you are sure you want to delete it, run 'git branch -D %s'.
deleting branch '%s' that has been merged to
         '%s', but not yet merged to HEAD.
not deleting branch '%s' that is not yet merged to
         '%s', even though it is merged to HEAD.
branch.%s
Update of config-file failed
remotes/
unable to parse format string
print_ref_list
builtin/branch.c
!filter->verbose && "--column and --verbose are incompatible"
%%(if)%%(HEAD)%%(then)* %s%%(else)  %s%%(end)
  %s
%%(objectname:short)
%%(objectname)
%%(objectname:short=%d)
%%(align:%d,left)%%(refname:lstrip=2)%%(end)
%%(if)%%(upstream)%%(then)[%s%%(upstream:short)%s%%(if)%%(upstream:track)%%(then): %%(upstream:track,nobracket)%%(end)] %%(end)%%(contents:subject)
%%(if)%%(upstream:track)%%(then)%%(upstream:track) %%(end)%%(contents:subject)
%%(align:%d,left)%s%%(refname:lstrip=2)%%(end)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(else) %s %%(contents:subject)%%(end)
%%(refname:lstrip=2)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(end)
%s%%(refname:lstrip=2)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(end)
%%(if:notequals=refs/remotes)%%(refname:rstrip=-2)%%(then)%s%%(else)%s%%(end)
Please edit the description for the branch
  %s
Lines starting with '%c' will be stripped.
branch.%s.description
EDIT_DESCRIPTION
cannot rename the current branch while not on any.
Invalid branch name: '%s'
Branch: renamed %s to %s
Branch rename failed
Renamed a misnamed branch '%s' away
Branch renamed to %s, but HEAD is not updated!
Branch is renamed, but update of config-file failed
Branch %s is being rebased at %s
Branch %s is being bisected at %s
verify
%s is okay
list-heads
Need a repository to create a bundle.
unbundle
Need a repository to unbundle.
<type> can be one of: blob, tree, commit, tag
show object type
show object size
exit with zero when there's no error
pretty-print object's content
textconv
for blob objects, run textconv on object's content
filters
for blob objects, run filters on object's content
blob
use a specific path for --textconv/--filters
allow-unknown-type
allow -s and -t to work with broken/corrupt objects
buffer
buffer --batch output
batch
show info and content of objects fed from the standard input
batch-check
show info about objects fed from the standard input
follow-symlinks
follow in-tree symlinks (used with --batch or --batch-check)
batch-all-objects
show all objects with --batch or --batch-check
--batch-all-objects cannot be combined with --textconv nor with --filters
--path=<path> needs --textconv or --filters
--path=<path> incompatible with --batch
git cat-file --allow-unknown-type: use with -s or -t
git cat-file (-t [--allow-unknown-type] | -s [--allow-unknown-type] | -e | -p | <type> | --textconv | --filters) [--path=<path>] <object>
git cat-file (--batch | --batch-check) [--follow-symlinks] [--textconv | --filters]
%(objectname) %(objecttype) %(objectsize)
format element '%s' does not end in ')'
objectname
objecttype
objectsize
objectsize:disk
rest
deltabase
unknown format element: %.*s
%s missing
unable to write to stdout
print_object_or_die
builtin/cat-file.c
data->info.typep
missing path for '%s'
could not convert '%s' %s
BUG: invalid cmdmode: %c
unable to stream %s to stdout
object %s disappeared
object %s changed type!?
object %s changed size!?
cannot read object %s '%s'
dangling %ju
loop %ju
notdir %ju
BUG: unknown get_sha1_with_context result %d
symlink %ju
Not a valid object name %s
git cat-file: could not get object info
git cat-file --filters %s: <object> must be <sha1:path>
git cat-file --textconv %s: <object> must be <sha1:path>
Cannot read object %s
%s not a valid tag
git cat-file: unknown option: %s
git cat-file %s: bad file
invalid cache
Attributes and --all both specified
No attribute specified
Can't specify files with --stdin
No file specified
%s: not a valid attribute name
attribute to stdout
report all attributes set on file
cached
use .gitattributes only from the index
stdin
read file names from stdin
terminate input and output records by a NUL character
git check-attr [-a | --all | <attr>...] [--] <pathname>...
git check-attr --stdin [-z] [-a | --all | <attr>...]
line is badly quoted
git_check_attr died
unset
unspecified
%s%c%s%c%s%c
: %s: %s
cannot specify pathnames with --stdin
-z only makes sense with --stdin
no path specified
--quiet is only valid with a single pathname
cannot have both --quiet and --verbose
--non-matching is only valid with --verbose
ignore to stdout
suppress progress reporting
non-matching
show non-matching input paths
no-index
ignore index when checking
git check-ignore [<options>] <pathname>...
git check-ignore [<options>] --stdin
check-ignore to stdout
no pathspec given.
:%d:%s%s%s
%s%c%d%c%s%s%s%c%s%c
%c%c%c%s%c
no contacts specified
also read contacts from stdin
git check-mailmap [<options>] <contact>...
unable to parse contact: %s
%.*s 
<%.*s>
--branch
--normalize
--print
--allow-onelevel
--no-allow-onelevel
--refspec-pattern
'%s' is not a valid branch name
check out all files in the index
force overwrite of existing files
no warning for existing files and files not in index
no-create
don't checkout new files
index
update stat information in the index file
paths are separated with NUL character
read list of paths from the standard input
temp
write the content to temporary files
prefix
string
when creating files, prepend <string>
1-3|all
copy out the files from named stage
git checkout-index: don't mix '--all' and explicit filenames
git checkout-index: don't mix '--stdin' and explicit filenames
git checkout-index: don't mix '--all' and '--stdin'
stage should be between 1 and 3 or all
git checkout-index [<options>] [--] [<file>...]
git checkout-index: %s 
is not in the cache
does not exist at stage %d
is unmerged
create and checkout a new branch
create/reset and checkout a branch
create reflog for new branch
detach
detach HEAD at named commit
set upstream info for new branch
orphan
new-branch
new unparented branch
checkout our version for unmerged files
theirs
checkout their version for unmerged files
force checkout (throw away local modifications)
perform a 3-way merge with the new branch
overwrite-ignore
conflict
conflict style (merge or diff3)
ignore-skip-worktree-bits
do not limit pathspecs to sparse entries only
guess
second guess 'git checkout <no-such-branch>'
ignore-other-worktrees
do not check if another worktree is holding the given ref
recurse-submodules
control recursive updating of submodules
force progress reporting
merge.conflictstyle
-b, -B and --orphan are mutually exclusive
--track needs a branch name
refs/
Missing branch name; try -b
invalid path specification
'%s' is not a commit and a branch '%s' cannot be created from it
git checkout: --detach does not take a path argument '%s'
git checkout: --ours/--theirs, --force and --merge are incompatible when
checking out of the index.
diff.ignoresubmodules
submodule.
git checkout [<options>] <branch>
git checkout [<options>] [<branch>] -- <file>...
only one reference expected, %d given.
invalid reference: %s
reference is not a tree: %s
'%s' cannot be used with updating paths
--track
--detach
'%s' cannot be used with %s
Cannot update paths and switch to branch '%s' at the same time.
--patch=checkout
path '%s' is unmerged
path '%s' does not have our version
path '%s' does not have their version
path '%s' does not have all necessary versions
path '%s' does not have necessary versions
base
path '%s': cannot merge
Unable to add merge result for '%s'
make_cache_entry failed for path '%s'
post-checkout
'%s' cannot be used with switching branches
--ours/--theirs
'%s' cannot be used with '%s'
-b/-B/--orphan
--orphan
Cannot switch branch to a non-commit '%s'
You are on a branch yet to be born
checkout -b
Switched to a new branch '%s'
you need to resolve your current index first
internal error in revision walk
Previous HEAD position was
 ... and %d more.
Warning: you are leaving %d commit behind, not connected to
any of your branches:
Warning: you are leaving %d commits behind, not connected to
any of your branches:
If you want to keep it by creating a new branch, this may be a good time
to do so with:
 git branch <new-branch-name> %s
If you want to keep them by creating a new branch, this may be a good time
to do so with:
 git branch <new-branch-name> %s
%s %s... %s
Can not do reflog for '%s': %s
checkout: moving from %s to %s
(invalid)
HEAD is now at
unable to update HEAD
Reset branch '%s'
Already on '%s'
Switched to and reset branch '%s'
Switched to branch '%s'
do not print names of files removed
interactive cleaning
remove whole directories
pattern
add <pattern> to ignore rules
remove ignored files, too
remove only ignored files
-x and -X cannot be used together
clean.requireForce set to true and neither -i, -n, nor -f given; refusing to clean
clean.requireForce defaults to true and neither -i, -n, nor -f given; refusing to clean
--exclude option
Cannot lstat '%s'
color.interactive
color.interactive.
clean.requireforce
prompt
header
error
git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] <paths>...
filter by pattern
select by numbers
ask each
quit
*** Commands ***
What now
Would remove the following item:
Would remove the following items:
No more files to clean, exiting.
Input ignore patterns>> 
manual exclude
WARNING: Cannot find items matched by: %s
Select items to delete
Remove %s [y/N]? 
clean               - start cleaning
filter by pattern   - exclude items from deletion
select by numbers   - select items to be deleted by numbers
ask each            - confirm each deletion (like "rm -i")
quit                - stop cleaning
help                - this screen
?                   - help for prompt selection
%s%s%s
%s%s%s%s
Bad type of menu_stuff when print menu
%s%2d: 
%s%2d: %s
Prompt help:
1          - select a numbered item
foo        - select item based on unique prefix
           - (empty) select nothing
Prompt help:
1          - select a single item
3-5        - select a range of items
2-3,6-9    - select multiple ranges
foo        - select item based on unique prefix
-...       - unselect specified items
*          - choose all items
           - (empty) finish selecting
Huh (%s)?
Bad type of menu_stuff when parse choice
Would skip repository %s
Skipping repository %s
Would remove %s
Removing %s
failed to remove %s
Bye.
Too many arguments.
You must specify a repository to clone.
--bare and --origin %s options are incompatible.
--bare and --separate-git-dir are incompatible.
origin
repository '%s' does not exist
depth %s is not a positive number
destination path '%s' already exists and is not an empty directory.
clone: from %s
working tree '%s' already exists.
%s/.git
could not create leading directories of '%s'
could not create work tree dir '%s'
Cloning into bare repository '%s'...
Cloning into '%s'...
submodule.active=%s
clone --recursive is not compatible with both --reference and --reference-if-able
submodule.alternateLocation=superproject
submodule.alternateErrorStrategy=die
submodule.alternateErrorStrategy=info
core.bare
true
+%s*:%s*
remote.%s.tagOpt
--depth is ignored in local clones; use file:// instead.
--shallow-since is ignored in local clones; use file:// instead.
--shallow-exclude is ignored in local clones; use file:// instead.
source repository is shallow, ignoring --local
--local is ignored
Don't know how to clone %s
depth
deepen-since
deepen-not
followtags
uploadpack
Remote branch %s not found in upstream %s
You appear to have cloned an empty repository.
refs/heads/master
don't create a checkout
bare
create a bare repository
naked
mirror
create a mirror repository (implies bare)
to clone from a local repository
no-hardlinks
don't use local hardlinks, always copy
shared
setup as shared repository
pathspec
initialize submodules in the clone
jobs
number of submodules cloned in parallel
template
template-directory
directory from which templates will be used
reference
reference repository
reference-if-able
dissociate
use --reference only while cloning
name
use <name> instead of 'origin' to track upstream
checkout <branch> instead of the remote's HEAD
upload-pack
path to git-upload-pack on the remote
create a shallow clone of that depth
shallow-since
time
create a shallow clone since a specific time
shallow-exclude
revision
deepen history of shallow clone, excluding rev
single-branch
clone only one branch, HEAD or --branch
no-tags
don't clone any tags, and make later fetches not to follow them
shallow-submodules
any cloned submodules will be shallow
separate-git-dir
gitdir
separate git dir from working tree
key=value
set config inside the new repository
ipv4
use IPv4 addresses only
ipv6
use IPv6 addresses only
git clone [<options>] [--] <repo> [<dir>]
/.git
.git/.git
.git
.bundle
gitdir: 
No directory name could be guessed.
Please specify a directory on the command line
%.*s.git
unable to write parameters to config file
info: Could not add alternate for '%s': %s
%s/objects
git-upload-pack
Could not find remote branch %s to clone.
+%s:%s
+%s:%s%s
BUG: remote HEAD points at non-head?
/objects
done.
failed to open '%s'
failed to stat '%s'
%s exists and is not a directory
failed to stat %s
/info/alternates
failed to unlink '%s'
failed to create link '%s'
failed to copy file to '%s'
%s/objects/%s
skipping invalid relative alternate: %s/%s
remote did not send all necessary objects
unable to update %s
cannot repack to clean up
cannot unlink temporary alternates file
remote HEAD refers to nonexistent ref, unable to checkout.
unable to checkout working tree
--init
--recursive
--depth=1
--jobs=%d
--progress
lookup config vars
mode
layout to use
raw-mode
width
Maximum width
indent
Padding space on left border
Padding space on right border
padding
Padding space between columns
--command=
--command must be the first argument
git column [<options>]
--no-gpg-sign
git commit-tree: failed to open '%s'
git commit-tree: failed to read '%s'
git commit-tree: failed to close '%s'
Cannot give more than one trees
git commit-tree: failed to read
duplicate parent %s ignored
short
show status concisely
show branch information
show-stash
show stash information
machine-readable output
long
show status in long format (default)
null
terminate entries with NUL
untracked-files
show untracked files, optional modes: all, normal, no. (Default: all)
ignored
show ignored files
ignore-submodules
ignore changes to submodules, optional when: all, dirty, untracked. (Default: all)
list untracked files in columns
GIT_EDITOR=:
suppress summary after successful commit
show diff in commit message template
Commit message options
read message from file
override author for commit
date
override date for commit
commit message
reedit-message
reuse and edit message from specified commit
reuse-message
reuse message from specified commit
fixup
use autosquash formatted message to fixup specified commit
squash
use autosquash formatted message to squash specified commit
reset-author
the commit is authored by me now (used with -C/-c/--amend)
add Signed-off-by:
use specified template file
force edit of commit
cleanup
how to strip spaces and #comments from message
include status in commit message template
Commit contents options
commit all changed files
add specified files to index for commit
interactively add files
interactively add changes
commit only specified files
no-verify
bypass pre-commit and commit-msg hooks
show what would be committed
amend
amend previous commit
no-post-rewrite
bypass post-rewrite hook
allow-empty
ok to record an empty change
allow-empty-message
ok to record a change with an empty message
could not parse HEAD commit
commit (initial)
commit (amend)
commit (merge)
Corrupt MERGE_HEAD file (%s)
could not read MERGE_MODE
no-ff
commit (cherry-pick)
could not read commit message: %s
Aborting commit due to empty commit message.
Aborting commit; you did not edit the message.
gpgsig
Repository has been updated, but unable to write
new_index file. Check that disk is not full and quota is
not exceeded, and then "git reset HEAD" to recover.
post-commit
Notes added by 'git commit --amend'
unsupported porcelain version '%s'
git status [<options>] [--] <pathspec>...
status.submodulesummary
status.short
status.branch
status.showstash
status.color
color.status
status.displaycommentprefix
status.color.
color.status.
status.relativepaths
status.showuntrackedfiles
normal
Invalid untracked files mode '%s'
updated
added
changed
untracked
nobranch
unmerged
localBranch
remoteBranch
--long and -z are incompatible
git commit [<options>] [--] <pathspec>...
commit.template
commit.status
commit.cleanup
commit.verbose
Using both --reset-author and --author does not make sense
You have nothing to amend.
You are in the middle of a merge -- cannot amend.
You are in the middle of a cherry-pick -- cannot amend.
Options --squash and --fixup cannot be used together
Only one of -c/-C/-F/--fixup can be used.
Option -m cannot be combined with -c/-C/-F/--fixup.
--reset-author can be used only with -C, -c or --amend.
CHERRY_PICK_HEAD
Only one of --include/--only/--all/--interactive/--patch can be used.
No paths with --include/--only does not make sense.
verbatim
strip
Invalid cleanup mode %s
Paths with -a does not make sense.
--author=%s
%aN <%aE>
--author '%s' is not 'Name <email>' and matches no existing author
could not lookup commit %s
HEAD^1
unable to create temporary index
GIT_INDEX_FILE
interactive add failed
unable to update temporary index
Failed to update main cache tree
unable to write new_index file
cannot do a partial commit during a merge.
cannot do a partial commit during a cherry-pick.
cannot read the index
next-index-%ju
unable to write temporary index file
failed to unpack HEAD tree object
pre-commit
squash! 
squash! %s
(reading log message from standard input)
could not read log from standard input
could not read log file '%s'
fixup! %s
could not read SQUASH_MSG
could not read MERGE_MSG
could not open '%s'
could not write commit template
It looks like you may be committing a merge.
If this is not correct, please remove the file
and try again.
It looks like you may be committing a cherry-pick.
If this is not correct, please remove the file
and try again.
Please enter the commit message for your changes. Lines starting
with '%c' will be ignored, and an empty message aborts the commit.
Please enter the commit message for your changes. Lines starting
with '%c' will be kept; you may remove them yourself if you want to.
An empty message aborts the commit.
%sAuthor:    %.*s <%.*s>
%sDate:      %s
%sCommitter: %.*s <%.*s>
Cannot read index
Error building trees
Please supply the message using either -m or -F option.
commit-msg
commit '%s' lacks author header
commit '%s' has malformed author line
malformed --author parameter
invalid date format: %s
#;@!$%^&|:
unable to select a comment character that is not used
in the current commit message
BUG: unable to parse our own ident: %s
COMMIT_EDITMSG
%s %s
couldn't look up newly created commit
could not parse newly created commit
format:%h] %s
%an <%ae>
%cn <%ce>
 Author: 
 Date: 
 Committer: 
detached HEAD
[%s%s 
 (root-commit)
~/.gitconfig
GIT_CONFIG
only one config file at a time.
--local can only be used inside a git repository
$HOME not set
only one type at a time.
--get-color and variable type are incoherent
only one action at a time.
--name-only is only applicable to --list or --get-regexp
--show-origin is only applicable to --get, --get-all, --get-regexp, and --list.
unable to read config file '%s'
error processing config file(s)
not in a git directory
editing stdin is not supported
editing blobs is not supported
cannot create configuration file %s
cannot overwrite multiple values with a single value
       Use a regexp, --add or --replace-all to change %s.
No such section!
command line
Config file location
global
use global config file
system
use system config file
use repository config file
use given config file
blob-id
read config from given blob object
Action
get value: name [value-regex]
get-all
get all values: key [value-regex]
get-regexp
get values for regexp: name-regex [value-regex]
get-urlmatch
get value specific for the URL: section[.var] URL
replace-all
replace all matching variables: name value [value_regex]
add a new variable: name value
remove a variable: name [value-regex]
unset-all
remove all matches: name [value-regex]
rename-section
rename section: old-name new-name
remove-section
remove a section: name
list all
open an editor
get-color
find the color configured: slot [default]
get-colorbool
find the color setting: slot [stdout-is-tty]
Type
bool
value is "true" or "false"
value is decimal number
bool-or-int
value is --bool or --int
value is a path (file or directory name)
Other
terminate values with NUL byte
name-only
show variable names only
includes
respect include directives on lookup
show-origin
show origin of config (file, standard input, blob, command line)
git config [<options>]
wrong number of arguments
%s%c%s%c
# This is Git's per-user configuration file.
[user]
# Please adapt and uncomment the following lines:
name = %s
email = %s
writing to stdin is not supported
writing config blobs is not supported
%lld
false
BUG: cannot normalize type %d
invalid key pattern: %s
unable to parse default color value
color.diff
diff.color
color.ui
human-readable
print sizes in human readable format
count: %lu
size: %s
in-pack: %lu
packs: %lu
size-pack: %s
prune-packable: %lu
garbage: %lu
size-garbage: %s
%lu kilobytes
%lu objects, %s
git count-objects [-v] [-H | --human-readable]
no corresponding .idx or .pack
garbage found
no corresponding .idx
no corresponding .pack
alternate: 
unable to read credential from stdin
fill
approve
find the tag that comes after the commit
debug
debug search strategy on stderr
use any ref
use any tag, even unannotated
always use long format
first-parent
only follow first parent
exact-match
only output exact matches
candidates
consider <n> most recent tags (default: 10)
match
only consider tags matching <pattern>
do not consider tags matching <pattern>
show abbreviated commit object as fallback
mark
append <mark> on dirty working tree (default: "-dirty")
-dirty
append <mark> on broken working tree (default: "-broken")
-broken
--long is incompatible with --abbrev=0
--peel-tag
--name-only
--no-undefined
--always
--tags
--refs=refs/tags/%s
--exclude=refs/tags/%s
No names found, cannot describe anything.
--dirty is incompatible with commit-ishes
--broken is incompatible with commit-ishes
git describe [<options>] [<commit-ish>...]
git describe [<options>] --dirty
no tag exactly matches '%s'
searching to describe %s
finished search at %s
No annotated tags can describe '%s'.
However, there were unannotated tags: try --tags.
No tags can describe '%s'.
Try --always, or create some tags.
 %-*s %8d %s
traversed %lu commits
more than %i tags found; listed %i most recent
gave up search at %s
annotated tag %s not available
annotated tag %s has no embedded name
tag '%s' is really '%s' here
-%d-g%s
head
lightweight
annotated
--base
--ours
--theirs
read_cache_preload
read_cache
--stdin
Object %s is a %s, not a commit or tree
Need exactly two trees, separated by a space
--no-index
Not a git repository
To compare two paths outside a working tree:
git diff %s <path> <path>
[--no-index]
Not a git repository
--staged
invalid object '%s' given.
more than two blobs given: '%s'
unhandled object '%s' given.
invalid option: %s
builtin/diff.c
'%s': not a regular file or symlink
use `diff.guitool` instead of `diff.tool`
dir-diff
perform a full-directory diff
no-prompt
do not prompt before launching a diff tool
symlinks
use symlinks in dir-diff mode
tool
<tool>
use the specified diff tool
tool-help
print a list of diff tools that may be used with `--tool`
trust-exit-code
make 'git-difftool' exit when an invoked diff tool returns a non - zero exit code
extcmd
<command>
specify a custom command for viewing diffs
GIT_DIFF_TOOL
no <tool> given for --tool=<tool>
GIT_DIFFTOOL_EXTCMD
no <cmd> given for --extcmd=<cmd>
GIT_DIFFTOOL_TRUST_EXIT_CODE
diff.guitool
difftool.trustexitcode
git difftool [<options>] [<commit> [<commit>]] [--] [<path>...]
mergetool
--tool-help=diff
difftool--helper
TMPDIR
%s/git-difftool.XXXXXX
/tmp
could not create '%s'
%s/left/
%s/right/
--raw
--no-abbrev
could not obtain raw diff
combined diff formats('-c' and '--cc') are not supported in
directory diff mode('-d' and '--dir-diff').
Subproject commit %s
could not write '%s'
could not create directory for '%s'
could not symlink '%s' to '%s'
could not copy '%s' to '%s'
error occurred running diff --raw
GIT_DIFFTOOL_DIRDIFF
%s/wtindex
could not write %s
both files modified: '%s' and '%s'.
working tree file has been left.
temporary files exist in '%s'.
you may want to cleanup or recover these.
expected ':', got '%c'
expected ' ', got '%c'
expected object ID, got '%s'
missing status
unexpected trailer: '%s'
could not read symlink %s
could not read symlink file %s
could not read object %s for symlink %s
--really-refresh
--unmerged
diff-files did not exit properly
failed: %d
GIT_PAGER=
GIT_EXTERNAL_DIFF=git-difftool--helper
GIT_DIFFTOOL_PROMPT=true
GIT_DIFFTOOL_NO_PROMPT=true
show progress after <n> objects
signed-tags
select handling of signed tags
tag-of-filtered-object
select handling of tags that tag filtered objects
export-marks
Dump marks to this file
import-marks
Import marks from this file
fake-missing-tagger
Fake a tagger when tags lack one
full-tree
Output full tree for each commit
use-done-feature
Use the done feature to terminate the stream
no-data
Skip output of blob data
refspec
Apply refspec to exported refs
anonymize
anonymize output
ignore
warn
warn-strip
Unknown signed-tags mode: %s
drop
rewrite
Unknown tag-of-filtered mode: %s
git fast-export [rev-list-opts]
corrupt mark line: %s
object not found: %s
not a commit? can't happen: %s
Object %s already has a mark
%s: Unexpected object of type %s, skipping.
Tag points to object of unexpected type %s, skipping.
Tag %s points nowhere?
Could not read blob %s
sha1 mismatch in blob %s
blob
mark :%u
data %lu
Could not write blob '%s'
anonymous blob %d
progress %d objects
M %06o %s 
M %06o :%d 
Unexpected comparison status '%c' for %s, %s
none
"%s"
path%d
Could not find author in commit %s
Could not find committer in commit %s
UTF-8
reset %s
commit %s
mark :%u
%.*s
%.*s
data %u
from :%d
merge :%d
encoding 
ref%d
BUG: malformed line fed to anonymize_ident_line: %.*s
Malformed Ident <malformed@example.com> 0 -0000
User %d <user%d@example.com>
subject %d
body
reset %s
from :%d
Omitting tag %s,
since tags of trees (or tags of tags of trees, etc.) are not supported.
Could not read tag %s
tagger 
tagger Unspecified Tagger <unspecified-tagger> 0 +0000
-----BEGIN PGP SIGNATURE-----
Encountered signed tag %s; use --signed-tags=<mode> to handle it.
Exporting signed tag %s
Stripping signature from tag %s
Tag %s tags unexported object; use --tag-of-filtered-object=<mode> to handle it.
Tag %s tags unexported %s!
Can't find replacement commit for tag %s
tag %s
from :%d
%.*s%sdata %d
%.*s
tag message %d
reset %s
from %s
Unable to open marks file %s for writing.
:%u %s
Unable to write marks file %s.
done
feature done
deleteall
--upload-pack=
--exec=
--keep
--thin
--include-tag
--diag-url
--depth=
--shallow-since=
--shallow-exclude=
--deepen-relative
--no-progress
--stateless-rpc
--lock-pack
--check-self-contained-and-connected
--cloning
--update-shallow
lock %s
connectivity-ok
Negative depth in --deepen is not supported
--deepen and --depth are mutually exclusive
--depth and --unshallow cannot be used together
--unshallow on a complete repository does not make sense
fetch --all does not take a repository argument
fetch --all does not make sense with refspecs
No such remote or remote group: %s
Fetching a group and specifying refspecs does not make sense
fetch.prune
submodule.recurse
fetch from all remotes
append
append to .git/FETCH_HEAD instead of overwriting
path to upload pack on remote end
force overwrite of local branch
multiple
fetch from multiple remotes
fetch all tags and associated objects
do not fetch all tags (--no-tags)
number of submodules fetched in parallel
prune remote-tracking branches no longer on remote
on-demand
control recursive fetching of submodules
keep downloaded pack
update-head-ok
allow updating of HEAD ref
deepen history of shallow clone
deepen history of shallow repository based on time
deepen
unshallow
convert to a complete repository
submodule-prefix
prepend this to submodule path output
recurse-submodules-default
default for recursive fetching of submodules (lower priority than config files)
update-shallow
accept refs that update .git/shallow
refmap
specify fetch refmap
git fetch [<options>] [<repository> [<refspec>...]]
git fetch [<options>] <group>
git fetch --multiple [<options>] [(<repository> | <group>)...]
git fetch --all [<options>]
--append
Fetching %s
cannot open %s
No remote repository specified.  Please, specify either a URL or a
remote name from which new revisions should be fetched.
You need to specify a tag name.
refs/tags/%s:refs/tags/%s
deepen-relative
updateshallow
Option "%s" value "%s" is not valid for %s
Option "%s" is ignored for %s
Don't know how to fetch from %s
--refmap option is only meaningful with command-line refspec(s).
Couldn't find remote ref HEAD
Refusing to fetch into current branch %s of non-bare repository
   (%s will become dangling)
   (%s has become dangling)
foreign
fetch: prune
From %.*s
[deleted]
(none)
%c %-*s 
  (%s)
%-*s -> %s
%-*s -> *
/dev/null
%s did not send all necessary objects
reject %s because shallow roots are not allowed to be updated
remote-tracking branch
'%s' of 
not-for-merge
FETCH_HEAD
some local refs could not be updated; try running
 'git remote prune %s' to remove any old, conflicting branches
full
fetch.output
compact
configuration fetch.output contains invalid value %s
object %s not found
[up to date]
[rejected]
can't fetch in current branch
updating tag
[tag update]
unable to update local ref
storing tag
[new tag]
storing head
[new branch]
storing ref
[new ref]
fast-forward
forced-update
forced update
non-fast-forward
remotes.
--dry-run
--update-head-ok
--force
--recurse-submodules
--recurse-submodules=on-demand
merge.log
merge.summary
%s: negative length %s
merge.branchdesc
No current branch
Error in line %d: %.*s
populate log with at most <n> entries from shortlog
alias for --log (deprecated)
text
use <text> as start of message
file to read from
cannot open '%s'
could not read input file
 of 
branch 
tag 
remote-tracking branch 
%s of %s
Merge 
branches 
remote-tracking branches 
tags 
commit 
commits 
 of %s
 into %s
 and %s
gpg verification failed.
^HEAD
* %s: (%d commits)
* %s:
  ...
  %s
%c %s 
%s (%d) and %s (%d)
%s (%d) and others
  : %.*s
git fmt-merge-msg [-m <message>] [--log[=<n>] | --no-log] [--file <file>]
shell
quote placeholders suitably for shells
perl
quote placeholders suitably for perl
python
quote placeholders suitably for python
quote placeholders suitably for Tcl
count
show only <n> matched refs
respect format colors
print only refs which points at the given object
print only refs that are merged
print only refs that are not merged
print only refs which contain the commit
print only refs which don't contain the commit
%(objectname) %(objecttype)
%(refname)
invalid --count argument: `%d'
more than one quoting style?
git for-each-ref [<options>] [<pattern>]
git for-each-ref [--points-at <object>]
git for-each-ref [(--merged | --no-merged) [<commit>]]
git for-each-ref [--contains [<commit>]] [--no-contains [<commit>]]
Checking objects
%s: object missing
invalid parameter: expected sha1, got '%s'
unreachable
show unreachable objects
dangling
show dangling objects
report tags
report root nodes
cache
make index objects head nodes
reflogs
make reflogs head nodes (default)
also consider packs and alternate objects
connectivity-only
check only connectivity
strict
enable more strict checking
lost-found
write dangling objects in .git/lost-found
show progress
name-objects
show verbose names for reachable objects
git fsck [<options>] [<object>...]
broken link from %7s %s
unknown
wrong object type in link
              to %7s %s
 (%s)
%s in %s %s: %s
warning
fsck.skiplist
skiplist=%s
fsck.
Checking HEAD link
Invalid HEAD
HEAD points to something strange (%s)
HEAD: detached HEAD points at nothing
notice: HEAD points to an unborn branch (%s)
Checking object directory
Checking object directories
%s: object corrupt or missing: %s
BUG: read_loose_object streamed a non-blob
Checking %s %s
broken links
root %s
tagged %s %s
 (%s) in %s
tmp_obj_
bad sha1 file: %s
%s: object corrupt or missing
notice: No default references
%s: invalid sha1 pointer %s
%s: not a commit
Checking reflog %s->%s
%s@{%ju}
%s: invalid reflog entry %s
Checking cache tree
%s: invalid sha1 pointer in cache-tree
non-tree in cache-tree
Checking connectivity (%d objects)
Checking connectivity
Checking %s
missing %s %s
unreachable %s %s
dangling %s %s
lost-found/%s/%s
other
Could not create lost-found
Could not write '%s'
Could not finish '%s'
prune unreferenced objects
aggressive
be more thorough (increased runtime)
enable auto-gc mode
force running gc even if there may be another gc running
expire
--expire
Failed to parse gc.logexpiry value %s
--depth=%d
--window=%d
Auto packing the repository in background for optimum performance.
Auto packing the repository for optimum performance.
See "git help gc" for manual housekeeping.
gc is already running on machine '%s' pid %ju (use --force if not)
gc.log
failed to run %s
There are too many unreachable loose objects; run 'git prune' to remove them.
2.weeks.ago
git gc [<options>]
gc.packrefs
notbare
gc.aggressivewindow
gc.aggressivedepth
gc.auto
gc.autopacklimit
gc.autodetach
gc.pruneexpire
gc.worktreepruneexpire
gc.logexpiry
1.day.ago
pre-auto-gc
--no-write-bitmap-index
Can't stat %s
The last gc run reported the following. Please correct the root cause
and remove %s.
Automatic cleanup will not be performed until the file is removed.
gc.pid
%s %%%ds
--unpack-unreachable=%s
Failed to fstat %s: %s
3.months.ago
objects/17
0123456789abcdef
git get-tar-commit-id: read error
52 comment=
git get-tar-commit-id: write error
dummy
search in index instead of in the work tree
find in contents not managed by git
search in both tracked and untracked files
exclude-standard
ignore files specified via '.gitignore'
recursively search in each submodule
parent-basename
basename
prepend parent project's basename to output
invert-match
show non-matching lines
case insensitive matching
word-regexp
match patterns only at word boundaries
process binary files as text
don't match patterns in binary files
process binary files with textconv filters
max-depth
descend at most <depth> levels
extended-regexp
use extended POSIX regular expressions
basic-regexp
use basic POSIX regular expressions (default)
fixed-strings
interpret patterns as fixed strings
perl-regexp
use Perl-compatible regular expressions
line-number
show line numbers
don't show filenames
show filenames
full-name
show filenames relative to top directory
files-with-matches
show only filenames instead of matching lines
synonym for --files-with-matches
files-without-match
show only the names of files without match
print NUL after filenames
show the number of matches instead of matching lines
highlight matches
break
print empty line between matches from different files
heading
show filename only once above matches from same file
context
show <n> context lines before and after matches
before-context
show <n> context lines before matches
after-context
show <n> context lines after matches
use <n> worker threads
shortcut for -C NUM
show-function
show a line with the function name before matches
function-context
show the surrounding function
read patterns from file
match <pattern>
combine patterns specified with -e
indicate hit with exit status without output
all-match
show only matches from files that match all patterns
show parse tree for grep expression
open-files-in-pager
pager
show matching files in the pager
ext-grep
allow calling of grep(1) (ignored by this build)
grep.fallbacktonoindex
no pattern given.
--no-index or --untracked cannot be used with revs
unable to resolve revision: %s
invalid number of threads specified (%d)
--open-files-in-pager only works on the worktree
less
+/%s%s
option not supported with --recurse-submodules.
--cached or --untracked cannot be used with --no-index.
--[no-]exclude-standard cannot be used for tracked contents.
both --cached and trees are given.
switch `%c' expects a numerical value
-e option
--and
--not
grep.threads
invalid number of threads specified (%d) for %s
git grep [<options>] [-e] <pattern> [<rev>...] [[--] <path>...]
grep: failed to create thread: %s
grep_lock
builtin/grep.c
num_threads
grep_unlock
%s=%s
GIT_INTERNAL_TOPLEVEL_PREFIX
--super-prefix=%s%s/
--parent-basename=%.*s
process for submodule '%s' failed with exit code: %d
--untracked
--exclude-standard
--textconv
--max-depth=%d
--full-name
--break
--heading
--before-context=%d
--after-context=%d
--all-match
--debug
BUG: Added a new grep pattern type without updating switch statement
-e%s
--threads=%d
modules/%s
unable to read tree (%s)
unable to grep from object of type %s
git hash-object [-t <type>] [-w] [--path=<file> | --no-filters] [--stdin] [--] <file>...
git hash-object  --stdin-paths
type
object type
write the object into the object database
read the object from stdin
stdin-paths
no-filters
store file as is without filters
literally
just hash any random garbage to create corrupt objects for debugging Git
process file as it were from this path
Can't use --stdin-paths with --stdin
Can't specify files with --stdin-paths
Can't use --stdin-paths with --path
Multiple --stdin arguments are not supported
Can't use --path with --no-filters
Unable to add %s to database
Unable to hash %s
hash to stdout
Cannot open '%s'
usage: %s%s
print all available commands
exclude-guides
exclude guides
guides
print list of useful guides
show man page
show manual in web browser
show info page
git help [--all] [--guides] [--man | --web | --info] [<command>]
help.format
help.htmlpath
man.viewer
man.
'%s': path for unsupported man viewer.
Please consider using 'man.<tool>.cmd' instead.
woman
konqueror
'%s': cmd for supported man viewer.
Please consider using 'man.<tool>.path' instead.
The common Git guides are:
   %s   
attributes
Defining attributes per path
everyday
Everyday Git With 20 Commands Or So
glossary
A Git glossary
Specifies intentionally untracked files to ignore
modules
Defining submodule properties
revisions
Specifying revisions and ranges for Git
tutorial
A tutorial introduction to Git (for version 1.5.1 or newer)
workflows
An overview of recommended workflows with Git
html
unrecognized help format '%s'
`git %s' is aliased to `%s'
GIT_MAN_VIEWER
no man viewer handled the request
git%s
MANPATH
'%s': unknown man viewer.
failed to exec '%s'
emacsclient
(woman "%s")
Failed to start emacsclient.
Failed to parse emacsclient version.
emacsclient version '%d' too old (< 22).
DISPLAY
kfmclient
/konqueror
%.*s/kfmclient
man:%s(1)
newTab
%s %s
/bin/sh
INFOPATH
gitman
no info viewer handled the request
%s/git.html
HTML documentation is not provided by this distribution of git.
%s/%s.html
web--browse
help.browser
Cannot come back to cwd
--fix-thin
--strict
--strict=
--verify
--verify-stat
--verify-stat-only
--keep=
--threads=
--pack_header=
bad %s
--show-resolving-progress
--report-end-of-input
--index-version=
--max-input-size=
--fix-thin cannot be used without --stdin
--stdin requires a git repository
--verify with no packfile name given
object type mismatch at %s
pack.indexversion
bad pack.indexversion=%u
pack.threads
packfile name '%s' does not end with '.pack'
Cannot open existing pack file '%s'
Cannot open existing pack idx file for '%s'
pack/tmp_pack_XXXXXX
unable to create '%s'
cannot open packfile '%s'
pack signature mismatch
pack version %u unsupported
cannot fill %d bytes
early EOF
read error on input
used more bytes than were available
pack too large for current definition of off_t
pack exceeds maximum allowed size
Receiving objects
Indexing objects
pack is corrupted (SHA1 mismatch)
cannot fstat packfile
pack has junk at the end
confusion beyond insanity in parse_pack_objects()
offset value overflow for delta base object
delta base offset is out of bound
unknown object type %d
pack has bad object at offset %ju: %s
%s %lu
inflate returned %d
sha1_object
builtin/index-pack.c
data || obj_entry
cannot read existing object info %s
SHA1 COLLISION FOUND WITH %s !
cannot read existing object %s
invalid blob object %s
data && "data can only be NULL for large _blobs_"
invalid %s
Error in object
Not all child objects of %s are reachable
BUG: parse_object_buffer transmogrified our buffer
cannot pread pack file
premature end of pack file, %ju byte missing
premature end of pack file, %ju bytes missing
serious inflate inconsistency
unable to read %s
Resolving deltas
GIT_FORCE_THREADS
unable to create thread: %s
unable to open %s
BUG: child->real_type != OBJ_REF_DELTA
find_unresolved_deltas_1
child->real_type == OBJ_OFS_DELTA
failed to apply delta
confusion beyond insanity
completed with %d local object
completed with %d local objects
Unexpected tail checksum for %s (disk corruption?)
pack has %d unresolved delta
pack has %d unresolved deltas
local object %s is corrupt
unable to deflate appended object (%d)
did not receive expected object %s
object %s: expected type %s, found %s
%s %-6s %lu %lu %ju
 %u %s
non delta: %d object
non delta: %d objects
chain length = %d: %lu object
chain length = %d: %lu objects
pack
error while closing pack file
cannot write keep file '%s'
cannot close written keep file '%s'
cannot store pack file
cannot store index file
%s already exists
BUG: invalid value for shared_repository
core.sharedrepository
receive.denyNonFastforwards
Reinitialized existing shared Git repository in %s%s
Reinitialized existing Git repository in %s%s
Initialized empty shared Git repository in %s%s
Initialized empty Git repository in %s%s
permissions
specify that the git repository is to be shared amongst several users
cannot mkdir %s
cannot chdir to %s
%s (or --work-tree=<directory>) not allowed without specifying %s (or --git-dir=<directory>)
Cannot access work tree '%s'
unable to handle file type %d
unable to move %s to %s
gitdir: %s
refs
failed to set up refs db: %s
core.repositoryformatversion
core.filemode
core.logallrefupdates
core.worktree
tXXXXXX
testing
core.symlinks
CoNfIg
core.ignorecase
init.templatedir
GIT_TEMPLATE_DIR
share/git-core/templates
templates not found %s
not copying templates from '%s': %s
cannot stat '%s'
cannot stat template '%s'
cannot opendir '%s'
cannot readlink '%s'
cannot symlink '%s' '%s'
cannot copy '%s' to '%s'
ignoring template %s
/pack
/info
git init [-q | --quiet] [--bare] [--template=<template-directory>] [--shared[=<permissions>]] [<directory>]
in-place
edit files in place
trim-empty
trim empty trailers
trailer
trailer(s) to add
no input file given for in-place editing
git interpret-trailers [--in-place] [--trim-empty] [(--trailer <token>[(=|:)<value>])...] [<file>...]
%stag %s%s
Could not read object %s
%stree %s%s
Unknown type: %d
numbered
use [PATCH n/m] even with a single patch
no-numbered
use [PATCH] even with multiple patches
print patches to standard out
cover-letter
generate a cover letter
numbered-files
use simple number sequence for output file names
suffix
use <sfx> instead of '.patch'
start-number
start numbering patches at <n> instead of 1
reroll-count
mark the series as Nth re-roll
Use [RFC PATCH] instead of [PATCH]
subject-prefix
Use [<prefix>] instead of [PATCH]
output-directory
store resulting files in <dir>
keep-subject
don't strip/add [PATCH]
no-binary
don't output binary diffs
zero-commit
output all-zero hash in From header
ignore-if-in-upstream
don't include a patch matching a commit upstream
no-stat
show patch format instead of default (patch + stat)
Messaging
add-header
add email header
email
add To: header
add Cc: header
from
ident
set From address to <ident> (or committer ident if absent)
in-reply-to
make first mail a reply to <message-id>
attach
attach the patch
inline
inline the patch
thread
enable message threading, styles: shallow, deep
signature
add a signature
base-commit
add prerequisite tree info to the patch series
signature-file
add a signature from a file
don't print the patch filenames
%s v%d
To: 
    
Cc: 
invalid ident line: %s
-n and -k are mutually exclusive.
--subject-prefix/--rfc and -k are mutually exclusive.
unrecognized argument: %s
--name-only does not make sense
--name-status does not make sense
--check does not make sense
standard output, or directory, which one?
Could not create directory '%s'
unable to read signature file '%s'
cover
Failed to create output files
--%s%s--
Could not find a tracked remote branch, please specify <upstream> manually.
Unknown commit %s
format.pretty
format.subjectprefix
log.abbrevcommit
log.date
log.decorate
log.showroot
log.follow
color.decorate.
log.mailmap
log.showsignature
incomplete
Final output: %d %s
git show %s: bad file
show_tag_object
builtin/log.c
type == OBJ_TAG
tagger 
Tagger
%s%s
suppress diff output
source
show source
use-mailmap
Use mail map file
decorate
decorate options
n,m:file
Process line range n,m in file, counting from 1
invalid --decorate option: %s
git log [<options>] [<revision-range>] [[--] <path>...]
git show [<options>] <object>...
.patch
RFC PATCH
Two output directories?
to: 
cc: 
shallow
deep
format.headers
format.headers without value
format.suffix
format.to
format.cc
diff.submodule
format.numbered
format.attach
format.thread
format.signoff
format.signature
format.signaturefile
format.coverletter
format.outputdirectory
format.useautobase
format.from
PATCH
git format-patch [<options>] [<since> | <revision-range>]
Need exactly one range.
Not a range.
Failed to resolve '%s' as a valid ref.
upstream base
Could not find exact merge base.
Failed to get upstream, if you want to record base commit automatically,
please use git branch --set-upstream-to to track a remote branch.
Or you could specify base commit by --base=<base-commit-id> manually.
Failed to find exact merge base
base commit should be the ancestor of revision list
base commit shouldn't be in revision list
rev_list
cannot get patch id
insane in-reply-to: %s
%s.%ju.git.%s
*** SUBJECT HERE ***
*** BLURB HERE ***
Cover letter needs email format
base-commit: %s
prerequisite-patch-id: %s
name of output directory is too long
Cannot open patch file %s
git cherry [-v] [<upstream> [<head> [<limit>]]]
%c %s
%c %s %s
tree-ish %s not found.
bad tree-ish %s
unable to read tree entries %s
identify the file status with tags
use lowercase letters for 'assume unchanged' files
show cached files in the output (default)
deleted
show deleted files in the output
modified
show modified files in the output
others
show other files in the output
show ignored files in the output
show staged contents' object name in the output
killed
show files on the filesystem that need to be removed
show 'other' directories' names only
show line endings of files
empty-directory
don't show empty directories
show unmerged files in the output
resolve-undo
show resolve-undo information
skip files matching pattern
exclude-from
exclude patterns are read from <file>
exclude-per-directory
read additional per-directory exclude patterns in <file>
add the standard git exclusions
make the output relative to the project top directory
recurse through submodules
error-unmatch
if any <file> is not in the index, treat this as an error
with-tree
tree-ish
pretend that paths removed since <tree-ish> are still present
show debugging data
ls-files --recurse-submodules unsupported mode
ls-files --recurse-submodules does not support --error-unmatch
ls-files --ignored needs some exclude pattern
ls-files --with-tree is incompatible with -s or -u
Did you forget to 'git add'?
git ls-files [<options>] [<file>...]
git ls-files: internal error - directory entry not superset of prefix
i/%-5s w/%-5s attr/%-17s
BUG: killed-file %.*s not found
git ls-files: internal error - cache entry not superset of prefix
%s%06o %s %d
  ctime: %d:%d
  mtime: %d:%d
  dev: %d
ino: %d
  uid: %d
gid: %d
  size: %d
flags: %x
do not print remote URL
path of git-upload-pack on the remote host
limit to tags
heads
limit to heads
do not show peeled tags
take url.<base>.insteadOf into account
exit-code
exit with exit code 2 if no matching refs are found
symref
show underlying ref in addition to the object pointed by it
*/%s
bad repository '%s'
No remote configured to list refs from.
remote %s has no configured URL
From %s
ref: %s
git ls-remote [--heads] [--tags] [--refs] [--upload-pack=<exec>]
                     [-q | --quiet] [--exit-code] [--get-url]
                     [--symref] [<repository> [<refs>...]]
only show trees
recurse into subtrees
show trees when recursing
terminate entries with NUL byte
include object size
list only filenames
name-status
use full path names
list entire tree; not just current directory (implies --full-name)
not a tree object
git ls-tree [<options>] <tree-ish> [<path>...]
%06o %s %s %7s
%06o %s %s
--message-id
--encoding=
--scissors
--no-scissors
--no-inbody-headers
unknown option: %s
cannot split patches from stdin
cannot stat %s
cannot split patches from %s
cannot open mbox %s
empty mbox: '%s'
cannot read mbox %s
corrupt mailbox
cannot open output file '%s'
cannot write output
cannot read mbox
cannot open mail %s
cannot read mail %s
cannot opendir %s
refs/heads/
reset
--merge
--abort expects no arguments
There is no merge to abort (MERGE_HEAD missing).
commit
--continue expects no arguments
There is no merge in progress (MERGE_HEAD missing).
You have not concluded your merge (MERGE_HEAD exists).
Please, commit your changes before you merge.
You have not concluded your merge (MERGE_HEAD exists).
You have not concluded your cherry-pick (CHERRY_PICK_HEAD exists).
Please, commit your changes before you merge.
You have not concluded your cherry-pick (CHERRY_PICK_HEAD exists).
You cannot combine --squash with --no-ff.
No commit specified and merge.defaultToUpstream not set.
@{-1}
Squash commit into empty head not supported yet
Non-fast-forward commit does not make sense into an empty head
%s - not something we can merge
Can merge only exactly one commit into empty head
initial pull
Commit %s has an untrusted GPG signature, allegedly by %s.
Commit %s has a bad GPG signature allegedly by %s.
Commit %s does not have a GPG signature.
Commit %s has a good GPG signature by %s
GITHEAD_%s
updating ORIG_HEAD
refusing to merge unrelated histories
Already up-to-date.
Updating %s..%s
Fast-forward
 (no commit created; -m option ignored)
Already up-to-date. Yeeah!
Not possible to fast-forward, aborting.
Trying merge strategy %s...
No merge strategy handled the merge.
Merge with strategy %s failed.
Using the %s to prepare resolving by hand.
Automatic merge went well; stopped before committing as requested
git merge [<options>] [<commit>...]
git merge --abort
git merge --continue
do not show a diffstat at the end of the merge
stat
show a diffstat at the end of the merge
(synonym to --stat)
add (at most <n>) entries from shortlog to merge commit message
create a single commit instead of doing a merge
perform a commit if the merge succeeds (default)
edit message before committing
allow fast-forward (default)
ff-only
abort if fast-forward is not possible
verify-signatures
verify that the named commit has a valid GPG signature
strategy
merge strategy to use
strategy-option
option=value
option for selected merge strategy
message
merge commit message (for a non-fast-forward merge)
be more verbose
quiet
be more quiet
abort
abort the current in-progress merge
continue
continue the current in-progress merge
allow-unrelated-histories
allow merging unrelated histories
progress
gpg-sign
GPG sign commit
update ignored files (default)
git-merge-
Could not find merge strategy '%s'.
Available strategies are:
Available custom strategies are:
recursive
octopus
resolve
ours
subtree
switch `m' requires a value
branch.
.mergeoptions
merge.diffstat
merge.stat
pull.twohead
pull.octopus
merge.renormalize
merge.ff
only
merge.defaulttoupstream
Bad branch.%s.mergeoptions string: %s
branch.*.mergeoptions
No current branch.
No remote for the current branch.
No default upstream defined for the current branch.
No remote-tracking branch for %s from %s
not something we can merge
could not close '%s'
not something we can merge in %s: %s
'%s' does not point to a commit
branch '%s' of .
refs/tags/
tag '%s' of .
remote-tracking branch '%s' of .
refs/heads/%s
branch '%s'%s of .
 (early part)
%s '%s'
commit '%s'
read-tree
4b825dc642cb6eb9a060e54bf8d69288fbee4904
read-tree failed
strbuf_setlen
Bad value '%s' in environment '%s'
 (nothing to squash)
%s: %s
--auto
post-merge
revision walk setup failed
Squashed commit of the following:
commit %s
Unable to write index.
failed to write commit object
In-index merge
builtin/merge.c
the control must not reach here under --squash
prepare-commit-msg
Empty commit message.
Not committing merge; use 'git commit' to complete the merge.
Could not read from '%s'
stash
could not run stash.
stash failed
not a valid object: %s
apply
--reset
Not handling anything other than two heads merge.
Unknown option for merge-recursive: -X%s
unable to write %s
git write-tree failed to write a tree
Merge made by the '%s' strategy.
Squash commit -- not updating HEAD
No merge message -- not updating HEAD
Wonderful.
Automatic merge failed; fix conflicts and then commit the result.
Rewinding the tree to pristine...
Trying really trivial in-index merge...
Nope.
output all common ancestors
find ancestors for a single n-way merge
independent
list revs not reachable from others
is-ancestor
is the first one ancestor of the other?
fork-point
find where <commit> forked from reflog of <ref>
--is-ancestor cannot be used with --all
--independent cannot be used with --all
git merge-base [-a | --all] <commit> <commit>...
git merge-base [-a | --all] --octopus <commit>...
git merge-base --independent <commit>...
git merge-base --is-ancestor <commit> <commit>
git merge-base --fork-point <ref> [<commit>]
--is-ancestor takes exactly two commits
No such ref: '%s'
Ambiguous refname: '%s'
Not a valid object name: '%s'
Not a valid commit name %s
send results to standard output
diff3
use a diff3 based merge
for conflicts, use our version
for conflicts, use their version
union
for conflicts, use a union version
marker-size
for conflicts, use this marker size
do not warn about conflicts
set labels for file1/orig-file/file2
failed to redirect stderr to /dev/null
Cannot merge binary files: %s
Could not open %s for writing
Could not write to %s
Could not close %s
too many labels on the command line
git merge-file [<options>] [-L <name1> [-L <orig> [-L <name2>]]] <file1> <orig-file> <file2>
git merge-index [-o] [-q] <merge-program> (-a | [--] [<filename>...])
git merge-index: unknown option %s
merge program failed
git merge-index: %s not in the cache
-subtree
unknown option %s
could not parse object '%s'
cannot handle more than %d bases. Ignoring %s.
not handling anything other than two heads merge.
could not resolve ref '%s'
Merging %s with %s
unknown rev %s
%s is not a tree
result
their
  %-6s %o %s %s
added in remote
added in both
added in local
removed in both
changed in both
removed in local
removed in remote
unable to generate diff
git mktag
could not read from stdin
invalid tag signature file
unable to write tag file
wanna fool me ? you obviously got the size wrong !
char%d: does not start with "object "
char%d: could not get SHA1 hash
type 
char%d: could not find "\ntype "
char%ju: could not find next "\n"
char%ju: no "tag " found
char%ju: type too long
char%d: could not verify object %s
char%ju: could not verify tag name
char%ju: could not find "tagger "
char%ju: malformed tagger field
char%ju: missing tagger name
0123456789
char%ju: missing tag timestamp
char%ju: malformed tag timestamp
char%ju: malformed tag timezone
char%ju: trailing garbage in tag header
input is NUL terminated
missing
allow missing objects
allow creation of more than one tree
input format error: (blank line only valid in batch mode)
git mktree [-z] [--missing] [--batch]
input format error: %s
invalid quoting
entry '%s' object type (%s) doesn't match mode type (%s)
entry '%s' object %s is unavailable
entry '%s' object %s is a %s but specified type was (%s)
path %s contains slash
%o %s%c
force move/rename even if target exists
skip move/rename errors
destination '%s' is not a directory
Checking rename of '%s' to '%s'
bad source
can not move directory into itself
cannot move directory over file
source directory is empty
not under version control
destination exists
overwriting '%s'
Cannot overwrite
multiple sources for the same target
destination directory does not exist
%s, source=%s, destination=%s
Renaming %s to %s
renaming '%s' failed
cmd_mv
builtin/mv.c
pos >= 0
git mv [<options>] <source>... <destination>
Directory %s is in index and no submodule?
Please stage your changes to .gitmodules or stash them to proceed
%.*s is in index
print only names (no SHA-1)
only use tags to name the commits
only use refs matching <pattern>
ignore refs matching <pattern>
list all commits reachable from all refs
read from stdin
allow to print `undefined` names (default)
peel-tag
dereference tags in the input (internal use)
Specify either a list, or --all, not both!
Could not get sha1 for %s. Skipping.
Could not get object for %s. Skipping.
Could not get commit for %s. Skipping.
git name-rev [<options>] <commit>...
git name-rev [<options>] --all
git name-rev [<options>] --stdin
%s^0
generation: %d, but deref?
%.*s~%d^%d
%.*s^%d
%.*s%s
%.*s (%s)
%.*s~%d
cannot describe '%s'
undefined
notes-ref
use notes from <notes-ref>
GIT_NOTES_REF
copy
remove
get-ref
unknown subcommand: %s
git notes [--ref <notes-ref>] [list [<object>]]
git notes [--ref <notes-ref>] add [-f] [--allow-empty] [-m <msg> | -F <file> | (-c | -C) <object>] [<object>]
git notes [--ref <notes-ref>] copy [-f] <from-object> <to-object>
git notes [--ref <notes-ref>] append [--allow-empty] [-m <msg> | -F <file> | (-c | -C) <object>] [<object>]
git notes [--ref <notes-ref>] edit [--allow-empty] [<object>]
git notes [--ref <notes-ref>] show [<object>]
git notes [--ref <notes-ref>] merge [-v | -q] [-s <strategy>] <notes-ref>
git notes merge --commit [-v | -q]
git notes merge --abort [-v | -q]
git notes [--ref <notes-ref>] remove [<object>...]
git notes [--ref <notes-ref>] prune [-n | -v]
git notes [--ref <notes-ref>] get-ref
too many parameters
failed to resolve '%s' as a valid ref.
no note found for object %s.
git notes [list [<object>]]
refs/notes/
refusing to %s notes in %s (outside of refs/notes/)
note contents as a string
note contents in a file
reuse and edit specified note object
reuse specified note object
allow storing empty note
replace existing notes
Cannot add notes. Found existing notes for object %s. Use '-f' to overwrite existing notes
Overwriting existing notes for object %s
Notes added by 'git notes add'
Removing note for object %s
Notes removed by 'git notes add'
cannot read '%s'
could not open or read '%s'
failed to read object '%s'.
cannot read note data from non-blob object '%s'.
git notes add [<options>] [<object>]
NOTES_EDITMSG
could not create file '%s'
please supply the note contents using either -m or -F option
--stat
--no-notes
unable to start 'show' for object '%s'
could not read 'show' output
failed to finish 'show' for object '%s'
unable to write note object
the note contents have been left in %s
read objects from stdin
for-rewrite
load rewriting config for <command> (implies --stdin)
too few parameters
Cannot copy notes. Found existing notes for object %s. Use '-f' to overwrite existing notes
missing notes on source object %s. Cannot copy.
Notes added by 'git notes copy'
git notes copy [<options>] <from-object> <to-object>
git notes copy --stdin [<from-object> <to-object>]...
malformed input line: '%s'.
failed to copy notes from '%s' to '%s'
The -m/-F/-c/-C options have been deprecated for the 'edit' subcommand.
Please use 'git notes add -f -m/-F/-c/-C' instead.
Notes added by 'git notes %s'
Notes removed by 'git notes %s'
git notes edit [<object>]
git notes append [<options>] [<object>]
git notes show [<object>]
General options
Merge options
resolve notes conflicts using the given strategy (manual/ours/theirs/union/cat_sort_uniq)
Committing unmerged notes
finalize notes merge by committing unmerged notes
Aborting notes merge resolution
abort notes merge
cannot mix --commit, --abort or -s/--strategy
must specify a notes ref to merge
unknown -s/--strategy: %s
BUG: local ref %s is outside of refs/notes/
notes.%s.mergeStrategy
notes.mergeStrategy
notes: Merged notes from %s into %s
NOTES_MERGE_PARTIAL
NOTES_MERGE_REF
a notes merge into %s is already in-progress at %s
failed to store link to current notes ref (%s)
Automatic notes merge failed. Fix conflicts in %s and commit the result with 'git notes merge --commit', or abort the merge with 'git notes merge --abort'.
NOTES_MERGE_WORKTREE
git notes merge [<options>] <notes-ref>
git notes merge --commit [<options>]
git notes merge --abort [<options>]
failed to delete ref NOTES_MERGE_PARTIAL
failed to delete ref NOTES_MERGE_REF
failed to remove 'git notes merge' worktree
failed to read ref NOTES_MERGE_PARTIAL
could not find commit from NOTES_MERGE_PARTIAL.
could not parse commit from NOTES_MERGE_PARTIAL.
failed to resolve NOTES_MERGE_REF
failed to finalize notes merge
notes: 
unknown notes merge strategy %s
attempt to remove non-existent note is not an error
read object names from the standard input
Notes removed by 'git notes remove'
git notes remove [<object>]
Object %s has no note
do not remove, show only
report pruned notes
Notes removed by 'git notes prune'
git notes prune [<options>]
git notes get-ref
do not show progress meter
show progress meter
all-progress
show progress meter during object writing phase
all-progress-implied
similar to --all-progress when progress meter is shown
index-version
version[,offset]
write the pack index file in the specified idx format version
max-pack-size
maximum size of each output pack file
ignore borrowed objects from alternate object store
ignore packed objects
limit pack window by objects
window-memory
limit pack window by memory in addition to object limit
maximum length of delta chain allowed in the resulting pack
reuse-delta
reuse existing deltas
reuse-object
reuse existing objects
delta-base-offset
use OFS_DELTA objects
use threads when searching for best delta matches
non-empty
do not create an empty pack output
revs
read revision arguments from standard input
unpacked
limit the objects to those that are not yet packed
include objects reachable from any reference
include objects referred by reflog entries
indexed-objects
include objects referred to by the index
output pack to stdout
include-tag
include tag objects that refer to objects to be packed
keep-unreachable
keep unreachable objects
pack-loose-unreachable
pack loose unreachable objects
unpack-unreachable
unpack unreachable objects newer than <time>
thin
create thin packs
create packs suitable for shallow fetches
honor-pack-keep
ignore packs that have companion .keep file
compression
pack compression level
keep-true-parents
do not hide commits by grafts
use-bitmap-index
use a bitmap index if available to speed up counting objects
write-bitmap-index
write a bitmap index together with the pack index
--objects-edge-aggressive
--objects-edge
--objects
--indexed-objects
--unpacked
bad pack compression level %d
--max-pack-size cannot be used to build a pack for transfer.
minimum pack size limit is 1 MiB
--thin cannot be used to build an indexable pack.
--keep-unreachable and --unpack-unreachable are incompatible.
Counting objects
Total %u (delta %u), reused %u (delta %u)
unsupported index version %s
bad index version '%s'
pack.window
pack.windowmemory
pack.depth
pack.deltacachesize
pack.deltacachelimit
pack.writebitmaphashcache
pack.usebitmaps
git pack-objects --stdout [<options>...] [< <ref-list> | < <object-list>]
git pack-objects [<options>...] <base-name> [< <ref-list> | < <object-list>]
fgets returned NULL, not EOF, not error!
fgets
expected edge sha1, got garbage:
expected sha1, got garbage:
delta
--shallow 
not an SHA-1 '%s'
not a rev '%s'
bad revision '%s'
unable to add recent objects
get_object_list_from_bitmap
builtin/pack-objects.c
reuse_packfile_objects
cannot open pack index
loose object at %s could not be examined
unable to force loose object
unable to pack objects reachable from tag %s
unable to get type of object %s
Compressing objects
inconsistency with delta count
delta base offset overflow in pack for %s
delta base offset out of bound for %s
BUG: confusing delta dfs state in first pass: %d
BUG: confusing delta dfs state in second pass: %d
Delta compression using up to %d threads.
object %s cannot be read
object %s inconsistent object length (%lu vs %lu)
suboptimal pack - out of memory
Writing objects
<stdout>
write_pack_file
pack_to_stdout
failed to stat %s
failed utime() on %s
%s.bitmap
wrote %u objects while expecting %u
ordered %u objects, expected %u
packfile is invalid: %s
unable to open packfile for reuse: %s
unable to seek in reused packfile
unable to read from reused packfile
recursive delta detected for object %s
delta size changed
deflate error (%d)
bad packed object CRC for %s
corrupt packed object for %s
--verbose
--alt-odb
Zero packs found!
Bad sha1 on stdin: %s
There are %lu packs available in alt-odbs.
The smallest (bytewise) set of packs is:
containing %lu duplicate objects with a total size of %lukb.
A total of %lu unique objects were considered.
Redundant packs (with indexes):
%luMB of redundant packs in total.
Bad pack filename: %s
Filename %s not found in packed_git
Internal error: No complete sets found!
pack everything
prune loose refs (default)
git pack-refs [<options>]
--stable
--unstable
patchid.stable
diff-tree 
diff 
index 
@@ -
Removing duplicate objects
rm -f %s
git prune-packed [-n | --dry-run] [-q | --quiet]
report pruned objects
expiry-date
expire objects older than <time>
cannot prune in a precious-objects repo
%s/pack
git prune [-n] [-v] [--expire <time>] [--] [<head>...]
Removing stale temporary file %s
Unable to open directory %s
tmp_
--[no-]autostash option is only valid with --rebase.
Updating an unborn branch with changes added to the index.
pull with rebase
please commit or stash them.
fetch updated the current branch head.
fast-forwarding your working tree from
commit %s.
Cannot fast-forward your working tree.
After making sure that you saved anything precious from
$ git diff %s
output, run
$ git reset --hard
to recover.
Cannot merge multiple branches into empty head.
Cannot rebase onto multiple branches.
cannot rebase with locally recorded submodule modifications
--ff-only
control for recursive fetching of submodules
Options related to merging
false|true|preserve|interactive
incorporate changes by rebasing rather than merging
allow fast-forward
autostash
automatically stash/stash pop before and after rebase
Options related to fetching
number of submodules pulled in parallel
--rebase
pull.rebase
preserve
Invalid value for %s: %s
git pull [<options>] [<repository> [<refspec>...]]
pull.ff
--no-ff
--ff
Invalid value for pull.ff: %s
branch.%s.rebase
rebase.autostash
--fork-point
heads/
tags/
refs/remotes/%s/%s
get_upstream_branch
builtin/pull.c
curr_branch_remote
--recurse-submodules=on
--recurse-submodules=no
submodule recursion option not understood
BUG: refspecs without repo?
not-for-merge
There is no candidate for rebasing against among the refs that you just fetched.
There are no candidates for merging among the refs that you just fetched.
Generally this means that you provided a wildcard refspec which had no
matches on the remote end.
You asked to pull from the remote '%s', but did not specify
a branch. Because this is not the default configured remote
for your current branch, you must specify a branch on the command line.
You are not currently on a branch.
Please specify which branch you want to rebase against.
Please specify which branch you want to merge with.
See git-pull(1) for details.
    git pull %s %s
<remote>
<branch>
There is no tracking information for the current branch.
If you wish to set tracking information for this branch you can do so with:
    git branch --set-upstream-to=%s/%s %s
Your configuration specifies to merge with the ref '%s'
from the remote, but no such ref was fetched.
--allow-unrelated-histories
--preserve-merges
--interactive
--no-autostash
--autostash
--verify-signatures
ignoring --verify-signatures for rebase
--onto
--checkout
repository
push all refs
mirror all refs
delete refs
push tags (can't be used with --all or --mirror)
force updates
force-with-lease
refname>:<expect
require old value of ref to be at this value
check|on-demand|no
control recursive pushing of submodules
use thin pack
receive pack program
set upstream for git pull/status
prune locally removed refs
bypass pre-push hook
follow-tags
push missing but relevant tags
signed
yes|no|if-asked
GPG sign the push
atomic
request atomic transaction on remote side
push-option
server-specific
option to transmit
--delete is incompatible with --all, --mirror and --tags
--delete doesn't make sense without any refs
refs/tags/*
push options must not have new line characters
%s missing parameter
push.followtags
push.gpgsign
if-asked
Invalid value for '%s'
push.recursesubmodules
git push [<options>] [<repository> [<refspec>...]]
tag shorthand without <tag>
:refs/tags/%s
refs/tags/%s
--delete only accepts plain target ref names
%s%s:%s
%s:%s
No configured push destination.
Either specify the URL from the command-line or configure a remote repository using
    git remote add <name> <url>
and then push using the remote name
    git push <name>
--all and --tags are incompatible
--all can't be combined with refspecs
--mirror and --tags are incompatible
--mirror can't be combined with refspecs
--all and --mirror are incompatible
You didn't specify any refspecs to push, and push.default is "nothing".
The current branch %s has no upstream branch.
To push the current branch and set the remote as upstream, use
    git push --set-upstream %s %s
The current branch %s has multiple upstream branches, refusing to push.
You are pushing to remote '%s', which is not the upstream of
your current branch '%s', without telling me what to push
to update which remote branch.
To choose either option permanently, see push.default in 'git help config'.
The upstream branch of your current branch does not match
the name of your current branch.  To push to the upstream branch
on the remote, use
    git push %s HEAD:%s
To push to the branch of the same name on the remote, use
    git push %s %s
receivepack
underlying transport does not support --%s option
Pushing to %s
failed to push some refs to '%s'
index-output
write resulting index to <file>
empty
only empty the index
Merging
perform a merge in addition to a read
trivial
3-way merge if no file level merging required
3-way merge in presence of adds and removes
same as -m, but discard unmerged entries
<subdirectory>/
read the tree into the index under <subdirectory>/
update working tree with merge result
gitignore
allow explicitly ignored files to be overwritten
don't check the working tree after merging
don't update the index or the work tree
no-sparse-checkout
skip applying sparse checkout filter
debug-unpack
debug unpack-trees
Which one? -m, --reset, or --prefix?
You need to resolve your current index first
failed to unpack tree object %s
read-tree: emptying the index with no arguments is deprecated; use --empty
passing trees as arguments contradicts --empty
-u and -i at the same time makes no sense
%s is meaningless without -m, --reset, or --prefix
--exclude-per-directory is meaningless unless -u
you must specify at least one tree to merge
more than one --exclude-per-directory given.
git read-tree [(-m [--trivial] [--aggressive] | --reset | --prefix=<prefix>) [-u [--exclude-per-directory=<gitignore>] | -i]] [--no-sparse-checkout] [--index-output=<file>] (--empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])
I cannot read more than %d trees
* %d-way merge
ent#%d
%06o #%d %s %.8s
(missing)
(conflict)
continue rebase
abort rebase
git rebase--helper [<options>]
stateless-rpc
advertise-refs
reject-thin-pack-for-testing
You must specify a directory.
'%s' does not appear to be a git repository
inconsistent push options
post-receive
git receive-pack <git-dir>
receive
receive.denydeletes
receive.denynonfastforwards
receive.unpacklimit
transfer.unpacklimit
receive.fsck.skiplist
%cskiplist=%s
receive.fsck.
%c%s=%s
Skipping unknown msg id '%s'
receive.fsckobjects
transfer.fsckobjects
receive.denycurrentbranch
receive.denydeletecurrent
receive.updateserverinfo
receive.autogc
receive.shallowupdate
receive.certnonceseed
receive.certnonceslop
receive.advertiseatomic
receive.advertisepushoptions
receive.keepalive
receive.maxinputsize
refuse
updateinstead
%s:%ju
%ju-%.*s
capabilities^{}
.have
report-status delete-refs side-band-64k quiet
 atomic
 ofs-delta
 push-cert=%s
 push-options
 agent=%s
%s %s%c%s
shallow 
protocol error: expected shallow sha, got '%s'
report-status
side-band-64k
push-options
push-cert
push-cert-end
protocol error: expected old/new/ref, got '%s'
protocol error: got both push certificate and unsigned commands
malformed push certificate %.*s
unable to create temporary object directory
--strict%s
--max-input-size=%ju
unpack-objects abnormal exit
localhost
--keep=receive-pack %ju on %s
index-pack fork failed
index-pack abnormal exit
eof before pack header was fully read
protocol error (pack signature mismatch detected)
protocol error (pack version unsupported)
unknown error in parse_pack_header
--pack_header=%u,%u
shallow update not allowed
GIT_SHALLOW_FILE
unpacker error
pre-receive
pre-receive hook declined
unable to migrate objects to permanent storage
missing necessary objects
deny deleting a hidden ref
deny updating a hidden ref
refusing update to broken symref '%s'
broken symref
refusing inconsistent update between symref '%s' (%s..%s) and its target '%s' (%s..%s)
inconsistent aliased update
error: 
atomic push failure
transaction failed to start
atomic transaction failed
refusing to create funny ref '%s' remotely
funny refname
updating the current branch
refusing to update checked out branch: %s
branch is currently checked out
unpack should have generated %s, but I can't find it!
bad pack
denying ref deletion for %s
deletion prohibited
deleting the current branch
refusing to delete the current branch: %s
deletion of the current branch prohibited
Invalid denyDeleteCurrent setting
bad sha1 objects for %s
bad ref
denying non-fast-forward %s (you should pull first)
hook declined to update %s
hook declined
Allowing deletion of corrupt ref.
Deleting a non-existent ref.
failed to delete
shallow error
failed to update ref
warning: 
By default, updating the current branch in a non-bare repository
is denied, because it will make the index and work tree inconsistent
with what you pushed, and will require 'git reset --hard' to match
the work tree to HEAD.
You can set the 'receive.denyCurrentBranch' configuration variable
to 'ignore' or 'warn' in the remote repository to allow pushing into
its current branch; however, this is not recommended unless you
arranged to update its work tree to match what you pushed in some
other way.
To squelch this message and still keep the default behaviour, set
'receive.denyCurrentBranch' configuration variable to 'refuse'.
denyCurrentBranch = updateInstead needs a worktree
GIT_DIR=%s
push-to-checkout
--ignore-submodules
--refresh
Up-to-date check failed
Working directory has unstaged changes
Working directory has staged changes
Could not update working tree to new HEAD
GIT_WORK_TREE=%s
push-to-checkout hook declined
By default, deleting the current branch is denied, because the next
'git clone' won't result in any file checked out, causing confusion.
You can set 'receive.denyDeleteCurrent' configuration variable to
'warn' or 'ignore' in the remote repository to allow deleting the
current branch, with or without a warning message.
To squelch this message, you can set it to 'refuse'.
builtin/receive-pack.c
shallow: update_shallow_ref %s
BUG: connectivity check has not been run on ref %s
BUG: connectivity check skipped???
unpack %s
ok %s
ng %s %s
%s %s %s
GIT_PUSH_OPTION_%d=%s
GIT_PUSH_OPTION_COUNT=%d
GIT_PUSH_OPTION_COUNT
GIT_PUSH_CERT=%s
GIT_PUSH_CERT_SIGNER=%s
GIT_PUSH_CERT_KEY=%s
GIT_PUSH_CERT_STATUS=%c
GIT_PUSH_CERT_NONCE=%s
GIT_PUSH_CERT_NONCE_STATUS=%s
GIT_PUSH_CERT_NONCE_SLOP=%ld
nonce
MISSING
UNSOLICITED
SLOP
post-update
exists
--expire=
'%s' is not a valid timestamp
--expire-unreachable=
--stale-fix
--rewrite
--updateref
Marking reachable objects...
%s points nowhere!
reflogexpire
reflogexpireunreachable
'%s' for '%s' is not a valid timestamp
refs/stash
Nothing to delete?
Not a reflog: %s
no reflog for '%s'
invalid ref format: %s
verbose
be verbose; must be placed before a subcommand
rename
set-head
set-branches
get-url
set-url
show
Unknown subcommand: %s
git remote [-v | --verbose]
git remote add [-t <branch>] [-m <master>] [-f] [--tags | --no-tags] [--mirror=<fetch|push>] <name> <url>
git remote rename <old> <new>
git remote remove <name>
git remote set-head <name> (-a | --auto | -d | --delete | <branch>)
git remote [-v | --verbose] show [-n] <name>
git remote prune [-n | --dry-run] <name>
git remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)...]
git remote set-branches [--add] <name> <branch>...
git remote get-url [--push] [--all] <name>
git remote set-url [--push] <name> <newurl> [<oldurl>]
git remote set-url --add <name> <newurl>
git remote set-url --delete <name> <url>
%s (fetch)
%s (push)
fetch
fetch the remote branches
tags
import all tags and associated objects when fetching
or do not fetch any tag at all (--no-tags)
branch(es) to track
master
master branch
push|fetch
set up remote as a mirror to push to or fetch from
specifying a master branch makes no sense with --mirror
specifying branches to track makes sense only with fetch mirrors
remote %s already exists.
refs/heads/test:refs/remotes/%s/test
'%s' is not a valid remote name
remote.%s.url
remote.%s.fetch
remote.%s.mirror
remote.%s.tagopt
--no-tags
refs/remotes/%s/HEAD
remote add
Could not setup master '%s'
push
unknown mirror argument: %s
git remote add [<options>] <name> <url>
refs/%s:refs/%s
refs/heads/%s:refs/remotes/%s/%s
Updating %s
Could not fetch %s
No such remote: %s
remote.%s
Could not rename config section '%s' to '%s'
:refs/remotes/%s/
Not updating non-default fetch refspec
Please update the configuration manually if necessary.
branch.%s.remote
deleting '%s' failed
remote: renamed %s to %s
creating '%s' failed
remote.%s.push
remotes/%s
branches/%s
.remote
.merge
.rebase
more than one %s
interactive
refs/remotes/%s/
merge
branch.%s.%s
could not unset '%s'
remote: remove
Note: A branch outside the refs/remotes/ hierarchy was not removed;
to delete it, use:
Note: Some branches outside the refs/remotes/ hierarchy were not removed;
to delete them, use:
  git branch -d %s
Could not remove config section '%s'
refs/remotes/
auto
set refs/remotes/<name>/HEAD according to remote
delete
delete refs/remotes/<name>/HEAD
Cannot determine remote HEAD
Multiple remote HEAD branches. Please choose one explicitly with:
  git remote set-head %s %s
Could not delete %s
Not a valid ref: %s
remote set-head
Could not setup %s
%s/HEAD set to %s
Could not get fetch map for refspec %s
refs/heads/*
(matching)
(delete)
add branch
no remote specified
git remote set-branches <name> <branch>...
git remote set-branches --add <name> <branch>...
No such remote '%s'
query push URLs rather than fetch URLs
return all URLs
no URLs configured for remote '%s'
manipulate push URLs
add URL
delete URLs
--add --delete doesn't make sense
remote.%s.pushurl
Invalid old URL pattern: %s
No such URL found: %s
Will not delete all non-push URLs
do not query remotes
* remote %s
  Fetch URL: %s
(no URL)
  Push  URL: %s
  HEAD branch: %s
(not queried)
(unknown)
    %s
  Remote branch:%s
  Remote branches:%s
 (status not queried)
  Local branch configured for 'git pull':
  Local branches configured for 'git pull':
  Local refs will be mirrored by 'git push'
  Local ref configured for 'git push'%s:
  Local refs configured for 'git push'%s:
git remote show [<options>] <name>
 new (next fetch will store in remotes/%s)
 tracked
 stale (use 'git remote prune' to remove)
 ???
    %-*s
invalid branch.%s.merge; cannot rebase onto > 1 branch
    %-*s 
rebases interactively onto remote %s
rebases onto remote %s
 merges with remote %s
merges with remote %s
%-*s    and with remote %s
create
up to date
fast-forwardable
local out of date
    %-*s forces to %-*s (%s)
    %-*s pushes to %-*s (%s)
    %-*s forces to %s
    %-*s pushes to %s
dry-run
dry run
git remote prune [<options>] <name>
 %s will become dangling!
 %s has become dangling!
Pruning %s
URL: %s
remote: prune
 * [would prune] %s
 * [pruned] %s
prune remotes after fetching
--prune
--no-prune
--multiple
default
--all
git remote update [<options>] [<group> | <remote>]...
remotes.default
  HEAD branch (remote HEAD is ambiguous, may be one of the following):
Command input error
capabilities
connect 
Bad command
Can't run specified command
GIT_EXT_SERVICE
GIT_EXT_SERVICE_NOPREFIX
Bad remote-ext placeholder '%%%c'.
remote-ext command has incomplete placeholder
%s %s%chost=%s%c
*connect
Bad URL syntax
Input error
Copying data between file descriptors failed
Bad command: %s
.pack
pack everything in a single pack
same as -a, and turn unreachable objects loose
remove redundant packs, and run git-prune-packed
pass --no-reuse-delta to git-pack-objects
pass --no-reuse-object to git-pack-objects
do not run git-update-server-info
local
pass --local to git-pack-objects
write bitmap index
approxidate
with -A, do not loosen objects older than this
with -a, repack unreachable objects
window
size of the window used for delta compression
bytes
same as the above, but limit memory size instead of entries count
limits the maximum delta depth
threads
limits the maximum number of threads
maximum size of each packfile
pack-kept-objects
repack objects in packs marked with .keep
cannot delete packs in a precious-objects repo
--keep-unreachable and -A are incompatible
%s/.tmp-%d-pack
--keep-true-parents
--honor-pack-keep
--non-empty
--reflog
--window=%s
--window-memory=%s
--depth=%s
--threads=%s
--max-pack-size=%s
--no-reuse-delta
--no-reuse-object
--write-bitmap-index
GIT_REF_PARANOIA=1
--unpack-unreachable
--keep-unreachable
--pack-loose-unreachable
--incremental
--local
--quiet
--delta-base-offset
repack: Expecting 40 character sha1 lines only from pack-objects.
%s/pack-%s%s
%s/old-%s%s
%s/old-%s
WARNING: Some packs in use have been renamed by
WARNING: prefixing old- to their name, in order to
WARNING: replace them with the new version of the
WARNING: file.  But the operation failed, and the
WARNING: attempt to rename them back to their
WARNING: original names also failed.
WARNING: Please rename them in %s manually:
WARNING:   old-%s -> %s
%s-%s%s
failed to remove '%s'
repack.usedeltabaseoffset
repack.packkeptobjects
repack.writebitmaps
pack.writebitmaps
git repack [<options>]
%s/%s.keep
.keep
Nothing new to pack.
list replace refs
delete replace refs
edit existing object
graft
change a commit's parents
replace the ref if it exists
do not pretty-print contents for --edit
use this format
--format cannot be used when not listing
-f only makes sense when writing a replacement
--raw only makes sense with --edit
-d needs at least one argument
bad number of arguments
-e needs exactly one argument
-g needs at least one argument
only one pattern can be given with -l
BUG: invalid cmdmode %d
git replace [-f] <object> <replacement>
git replace [-f] --edit <object>
git replace [-f] --graft <commit> [<parent>...]
git replace -d <object>...
git replace [--format=<format>] [-l [<pattern>]]
replace ref '%s' not found.
Deleted replace ref '%s'
Objects must be of the same type.
'%s' points to a replaced object of type '%s'
while '%s' points to a replacement object of type '%s'.
'%s' is not a valid ref name.
replace ref '%s' already exists
REPLACE_EDITOBJ
unable to get object type for %s
editing object file failed
new object is the same as the old one: '%s'
replacement
unable to open %s for writing
cat-file reported failure
unable to open %s for reading
unable to spawn mktree
unable to read from mktree
mktree reported failure
mktree did not return an object name
unable to fstat %s
unable to write object to database
the original commit '%s' has a gpg signature.
the signature will be removed in the replacement commit!
could not write replacement commit for: '%s'
new commit is the same as the old one: '%s'
parent 
parent %s
bad mergetag in commit '%s'
malformed mergetag in commit '%s'
original commit '%s' contains mergetag '%s' that is discarded; use --edit instead of --graft
medium
invalid replace format '%s'
valid formats are 'short', 'medium' and 'long'
%s -> %s
%s (%s) -> %s (%s)
register clean resolutions in index
forget
'git rerere forget' without paths is deprecated
clear
remaining
preimage
unable to generate diff for %s
git rerere [clear | forget <path>... | status | remaining | diff | gc]
--- a/%s
+++ b/%s
be quiet, only report errors
mixed
reset HEAD and index
soft
reset only HEAD
hard
reset HEAD, index and working tree
reset HEAD but keep local changes
record only the fact that removed paths will be added later
Failed to resolve '%s' as a valid revision.
Failed to resolve '%s' as a valid tree.
--patch is incompatible with --{hard,mixed,soft}
--patch=reset
--mixed with paths is deprecated; use 'git reset -- <paths>' instead.
Cannot do %s reset with paths.
%s reset is not allowed in a bare repository
-N can only be used with --mixed
Unstaged changes after reset:
Could not reset index file to revision '%s'.
Could not write new index file.
git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]
git reset [-q] [<tree-ish>] [--] <paths>...
git reset --patch [<tree-ish>] [--] [<paths>...]
Cannot do a %s reset in the middle of a merge.
You do not have a valid HEAD.
Failed to find tree of HEAD.
Failed to find tree of %s.
updating HEAD
reset: moving to %s
reset: %s
HEAD is now at %s
 %.*s
--header
--timestamp
--bisect
--bisect-all
--bisect-vars
--use-bitmap-index
--test-bitmap
--progress=
rev-list does not support display of notes
bisect_rev
bisect_nr
bisect_good
bisect_bad
bisect_all
bisect_steps
%s='%s'
%s=%d
%ju 
missing blob object '%s'
------
--parseopt
--sq-quote
--local-env-vars
--resolve-git-dir
--resolve-git-dir requires an argument
not a gitdir '%s'
--git-path
--git-path requires an argument
-n requires an argument
--default
--default requires an argument
--prefix
--prefix requires an argument
--revs-only
--no-revs
--flags
--no-flags
--short
--sq
--symbolic
--symbolic-full-name
--abbrev-ref
loose
unknown mode for --abbrev-ref: %s
--disambiguate=
refs/bisect/bad
refs/bisect/good
--branches
--glob=
--remotes
--exclude=
--show-toplevel
--show-superproject-working-tree
--show-prefix
--show-cdup
--absolute-git-dir
%s%s.git
--git-common-dir
--is-inside-git-dir
--is-inside-work-tree
--is-bare-repository
--shared-index-path
sharedindex.%s
--since=
--max-age=
--after=
--before=
--min-age=
--until=
git rev-parse --parseopt [<options>] -- [<args>...]
keep-dashdash
keep the `--` passed as an arg
stop-at-non-option
stop parsing after the first non-option argument
stuck-long
output in stuck long form
*=?!
set --
premature end of input
no usage string given before the `--' separator
 --no-%s
 -%c
 --%s
%s%ju
--dense
--branches=
--ignore-missing
--max-count=
--no-merges
--min-parents=
--no-min-parents
--max-parents=
--no-max-parents
--parents
--pretty
--remotes=
--sparse
--tags=
--topo-order
--date-order
Needed a single revision
%s^%d
refname '%s' is ambiguous
revert failed
cherry-pick failed
end revert or cherry-pick sequence
resume revert or cherry-pick sequence
cancel revert or cherry-pick sequence
no-commit
don't automatically commit
edit the commit message
no-op (backward compatibility)
mainline
parent-number
select mainline parent
merge strategy
option
option for merge strategy
append commit name
preserve initially empty commits
allow commits with empty messages
keep-redundant-commits
keep redundant, empty commits
--quit
--continue
run_sequencer
builtin/revert.c
cmd == 'a'
--abort
--no-commit
--signoff
--mainline
--strategy
--strategy-option
--rerere-autoupdate
--no-rerere-autoupdate
--edit
git revert [<options>] <commit-ish>...
git revert <subcommand>
git cherry-pick [<options>] <commit-ish>...
git cherry-pick <subcommand>
expects a number greater than zero
%s: %s cannot be used with %s
not removing '%s' recursively without -r
rm '%s'
git rm: unable to remove %s
could not remove '%s'
git rm: '%s'
do not list removed files
only remove from the index
override the up-to-date check
allow recursive removal
ignore-unmatch
exit with a zero status even if nothing matched
git rm [<options>] [--] <file>...
the following file has staged content different from both the
file and the HEAD:
the following files have staged content different from both the
file and the HEAD:
(use -f to force removal)
the following file has changes staged in the index:
the following files have changes staged in the index:
(use --cached to keep the file, or -f to force removal)
the following file has local modifications:
the following files have local modifications:
    %s
git-receive-pack
remote name
use stateless RPC protocol
read refs from stdin
helper-status
print status from remote helper
Destination %s is not a uri for %s
Everything up-to-date
git send-pack [--all | --mirror] [--dry-run] [--force] [--receive-pack=<git-receive-pack>] [--verbose] [--thin] [--atomic] [<host>:]<directory> [<ref>...]
  --all and explicit <ref> specification are mutually exclusive.
no match
non-fast forward
fetch first
needs force
stale info
already exists
<none>
committer
Group by committer rather than author
sort output according to the number of commits per author
Suppress commit descriptions, only provides commit count
Show the email address of each author
w[,i1[,i2]]
Linewrap output
%s (%d):
      %s
 <%.*s>
[PATCH
/.../
git shortlog [<options>] [<revision-range>] [[--] [<path>...]]
author 
Commit: 
committer 
show remote-tracking and local branches
show remote-tracking branches
color '*!+-' corresponding to the branch
more
show <n> more commits after the common ancestor
synonym to more=-1
no-name
suppress naming strings
include the current branch
sha1-name
name commits with their object names
show possible merge bases
show refs unreachable from any other ref
topo-order
show commits in topological order
topics
show only commits not on the first branch
sparse
show merges reachable from only one tip
date-order
topologically sort, maintaining date order where possible
<n>[,<base>]
show <n> most recent ref-log entries starting at base
--reflog is incompatible with --all, --remotes, --independent or --merge-base
no branches given, and HEAD is not valid
--reflog option needs one branch name
only %d entries can be shown at one time.
no such ref %s
(%s) %s
%s@{%d}
No revs to be shown.
cannot handle more than %d revs.
'%s' is not a valid ref.
cannot find commit %s (%s)
%c [%s] 
%s%c%s [%s] 
%s%c%s
unrecognized reflog param '%s'
showbranch.default
color.showbranch
git show-branch [-a | --all] [-r | --remotes] [--topo-order | --date-order]
[--current] [--color[=<when>] | --no-color] [--sparse]
[--more=<n> | --list | --independent | --merge-base]
[--no-name | --sha1-name] [--topics] [(<rev> | <glob>)...]
git show-branch (-g | --reflog)[=<n>[,<base>]] [--list] [<ref>]
ignoring %s; cannot handle more than %d refs
no matching refs with %s
bad sha1 reference %s
(unavailable)
[PATCH] 
[%s] 
%s~%d
--verify requires a reference
'%s' - not a valid ref
No match
only show tags (can be combined with heads)
only show heads (can be combined with tags)
stricter reference checking, requires exact ref path
show the HEAD reference, even if it would be filtered out
dereference
dereference tags into object IDs
hash
only show SHA1 hash using <n> digits
do not print results to stdout (useful with --verify)
exclude-existing
show refs from stdin that aren't in local repository
git show-ref [-q | --quiet] [--verify] [--head] [-d | --dereference] [-s | --hash[=<n>]] [--abbrev[=<n>]] [--tags] [--heads] [--] [<pattern>...]
git show-ref --exclude-existing[=<pattern>]
ref '%s' ignored
git show-ref: bad ref %s (%s)
%s %s^{}
strip-comments
skip and remove all lines starting with comment character
comment-lines
prepend comment character and space to each line
could not read the input
git stripspace [-s | --strip-comments]
git stripspace [-c | --comment-lines]
git submodule--helper <command>
'%s' is not a valid submodule--helper subcommand
update-clone
relative-path
resolve-relative-url
resolve-relative-url-test
remote-branch
push-check
absorb-git-dirs
is-active
alternative anchor for relative paths
git submodule--helper list [--prefix=<path>] [<path>...]
%06o %s U
%06o %s %d
git submodule--helper name <path>
no submodule mapping found in .gitmodules for path '%s'
where the new submodule will be cloned to
name of the new submodule
url where to clone the submodule from
depth for shallow clones
Suppress output for cloning a submodule
force cloning progress
git submodule--helper clone [--prefix=<path>] [--quiet] [--reference <repository>] [--name <name>] [--depth <depth>] --url <url> --path <path>
%s/modules/%s
could not create directory '%s'
clone of '%s' into submodule path '%s' failed
%s/index
could not get submodule directory for '%s'
submodule.alternateLocation
submodule.alternateErrorStrategy
Value '%s' for submodule.alternateErrorStrategy is not recognized
superproject
Value '%s' for submodule.alternateLocation is not recognized
modules/%s/
submodule '%s' cannot add alternate: %s
--no-checkout
--depth
--reference
--separate-git-dir
path into the working tree
recursive-prefix
path into the working tree, across nested submodule boundaries
rebase, merge, checkout or none
<depth>
Create a shallow clone truncated to the specified number of revisions
parallel jobs
recommend-shallow
whether the initial clone should follow the shallow recommendation
don't print cloning progress
git submodule--helper update_clone [--prefix=<path>] [<path>...]
bad value for update parameter
BUG: submodule considered for cloning, doesn't need cloning any more?
Skipping unmerged submodule %s
Skipping submodule '%s'
%06o %s %d %d
--path
--name
--url
Submodule path '%s' not initialized
Maybe you want to use 'update --init'?
Failed to clone '%s'. Retry scheduled
Failed to clone '%s' a second time, aborting
submodule--helper relative-path takes exactly 2 arguments, got %d
resolve-relative-url only accepts one or two arguments
No such ref: %s
Expecting a full ref name, got %s
./%s
cannot strip one component off url '%s'
resolve-relative-url-test only accepts three arguments: <up_path> <remoteurl> <url>
(null)
Suppress output for initializing a submodule
git submodule--helper init [<path>]
submodule.active
BUG: cannot have prefix and superprefix
No url found for submodule path '%s' in .gitmodules
submodule.%s.active
submodule.%s.url
could not lookup configuration '%s'. Assuming this repository is its own authoritative upstream.
Failed to register url for submodule path '%s'
Submodule '%s' (%s) registered for path '%s'
submodule.%s.update
warning: command update mode suggested for submodule '%s'
Failed to register update mode for submodule path '%s'
submodule--helper remote-branch takes exactly one arguments, got %d
submodule %s doesn't exist
Submodule (%s) branch configured to inherit branch from superproject, but the superproject is not on any branch
submodule--helper push-check requires at least 2 arguments
remote '%s' not configured
HEAD does not match the named branch in the superproject
src refspec '%s' must name a ref
recurse into submodules
git submodule--helper embed-git-dir [<path>...]
submodule--helper is-active takes exactly 1 argument
suppress error message for non-symbolic (detached) refs
delete symbolic ref
shorten ref output
reason
reason of the update
Refusing to perform update with empty message
Cannot delete %s, not a symbolic ref
deleting '%s' is not allowed
Refusing to point HEAD outside of refs/
git symbolic-ref [<options>] <name> [<ref>]
git symbolic-ref -d [-q] <name>
ref %s is not a symbolic ref
list tag names
print <n> lines of each tag message
delete tags
verify tags
Tag creation options
annotated tag, needs a message
tag message
annotated and GPG-signed tag
local-user
use another key to sign the tag
replace the tag if exists
create a reflog
Tag listing options
show tag list in columns
print only tags that contain the commit
print only tags that don't contain the commit
print only tags that are merged
print only tags that are not merged
print only tags of the object
--column and -n are incompatible
-n option is only allowed in list mode
--contains option is only allowed in list mode
--no-contains option is only allowed in list mode
--points-at option is only allowed in list mode
--merged and --no-merged options are only allowed in list mode
only one -F or -m option is allowed.
too many params
'%s' is not a valid tag name.
tag '%s' already exists
Updated tag '%s' (was %s)
tag.sort
tag.forcesignannotated
git tag [-a | -s | -u <key-id>] [-f] [-m <msg> | -F <file>] <tagname> [<head>]
git tag -d <tagname>...
git tag -l [-n[<num>]] [--contains <commit>] [--no-contains <commit>] [--points-at <object>]
[--format=<format>] [--[no-]merged [<commit>]] [<pattern>...]
git tag -v [--format=<format>] <tagname>...
%s %%(contents:lines=%d)
%(align:15)%(refname:lstrip=2)%(end)
%(refname:lstrip=2)
tag '%s' not found.
Deleted tag '%s' (was %s)
tag: tagging 
object of unknown type
commit object
tree object
blob object
other tag object
bad object type.
object %s
type %s
tag %s
tagger %s
TAG_EDITMSG
no tag message?
The tag message has been left in %s
unable to sign the tag
git unpack-file <sha1>
unable to read blob object %s
.merge_file_XXXXXX
unable to write temp-file
final sha1 did not match
bad pack file
unknown pack file version %u
Unpacking objects
unresolved deltas left after unpacking
bad object type %d
failed to write object
invalid blob object
object %s tried to add buffer twice!
offset value out of bound for delta base object
failed to read delta-pack base object %s
object type mismatch
object of unexpected type
Whoops! Cannot find object '%s'
Error on reachable objects of %s
failed to write object %s
continue refresh even when index needs update
refresh: ignore submodules
do not ignore new files
let files replace directories and vice-versa
notice files missing from worktree
refresh even if index contains unmerged entries
refresh stat information
really-refresh
like --refresh, but ignore assume-unchanged setting
cacheinfo
<mode>,<object>,<path>
add the specified entry to the index
assume-unchanged
mark files as "not changing"
no-assume-unchanged
clear assumed-unchanged bit
skip-worktree
mark files as "index-only"
no-skip-worktree
clear skip-worktree bit
info-only
add to index only; do not add content to object database
force-remove
remove named paths even if present in worktree
with --stdin: input lines are terminated by null bytes
read list of paths to be updated from standard input
index-info
add entries from standard input to the index
unresolve
repopulate stages #2 and #3 for the listed paths
again
only update entries that differ from HEAD
ignore files missing from worktree
report actions to standard output
clear-resolve-undo
(for porcelains) forget saved unresolved conflicts
write index in this format
split-index
enable or disable split index
untracked-cache
enable/disable untracked cache
test-untracked-cache
test if the filesystem supports untracked cache
force-untracked-cache
enable untracked cache without testing the filesystem
cache corrupted
unknown option '%s'
unknown switch '%c'
index-version %d not in range: %d..%d
core.splitIndex is set to false; remove or change it, if you really want to enable split index
core.splitIndex is set to true; remove or change it, if you really want to disable split index
core.untrackedCache is set to true; remove or change it, if you really want to disable the untracked cache
Untracked cache disabled
core.untrackedCache is set to false; remove or change it, if you really want to enable the untracked cache
Untracked cache enabled for '%s'
BUG: bad untracked_cache value: %d
git update-index: --cacheinfo cannot add %s
option 'cacheinfo' expects <mode>,<sha1>,<path>
Invalid path '%s'
%s: cannot add to the index - missing --add option?
add '%s'
option 'chmod' expects "+x" or "-x"
option '%s' must be the last argument
git update-index: bad quoting of path name
Ignoring path %s
git update-index: unable to remove %s
git update-index: unable to update %s
malformed index info %s
No HEAD -- no initial commit yet?
MERGE_HEAD
Not in the middle of a merge.
%s: skipping still unmerged path.
%s: identical in both, skipping.
%s: cannot add our version to the index.
%s: cannot add their version to the index.
%s: not in %s branch.
%s: not a blob in %s branch.
git update-index [<options>] [--] [<file>...]
Unable to mark file %s
remove '%s'
Unable to process path %s
'%s' is beyond a symbolic link
%s: cannot remove from the index
lstat("%s"): %s
%s: does not exist and --remove not passed
%s: is a directory - add individual files instead
%s: is a directory - add files inside instead
chmod %cx '%s'
git update-index: cannot chmod %cx '%s'
mtime-test-XXXXXX
Could not make temporary directory
Testing mtime in '%s' 
newfile
directory stat info does not change after adding a new file
new-dir
directory stat info does not change after adding a new directory
data
directory stat info changes after updating a file
new-dir/new
directory stat info changes after adding a file inside subdirectory
directory stat info does not change after deleting a file
directory stat info does not change after deleting a directory
failed to delete directory %s
failed to create file %s
failed to create directory %s
failed to delete file %s
delete the reference
no-deref
update <refname> not the one it points to
stdin has NUL-terminated arguments
read updates from stdin
Refusing to perform update with empty message.
%s: not a valid SHA1
%s: not a valid old SHA1
git update-ref [<options>] -d <refname> [<old-val>]
git update-ref [<options>]    <refname> <new-val> [<old-val>]
git update-ref [<options>] --stdin [-z]
empty command in input
whitespace before command: %s
update 
create 
delete 
verify 
option 
unknown command: %s
update: missing <ref>
update %s: missing <newvalue>
update %s: extra input: %s
badly quoted argument: %s
unexpected character after quoted argument: %s
%s %s: expected SP but got: %s
%s %s: expected NUL but got: %s
%s %s: missing <newvalue>, treating as zero
%s %s: invalid <oldvalue>: %s
%s %s: invalid <newvalue>: %s
%s %s: unexpected end of input when reading <oldvalue>
%s %s: unexpected end of input when reading <newvalue>
create: missing <ref>
create %s: missing <newvalue>
create %s: zero <newvalue>
create %s: extra input: %s
delete: missing <ref>
delete %s: zero <oldvalue>
delete %s: extra input: %s
verify: missing <ref>
verify %s: extra input: %s
option unknown: %s
update the info files from scratch
git update-server-info [--force]
argument 
Too many options (>%d)
'argument' token or flush expected
NACK unable to spawn subprocess
upload-archive: %s
poll failed resuming
read error: %s
sent error to the client: %s
%s=%s
GIT_COMMITTER_IDENT
GIT_AUTHOR_IDENT
GIT_EDITOR
Terminal is dumb, but EDITOR unset
print commit contents
print raw gpg status output
git verify-commit [-v | --verbose] <commit>...
commit '%s' not found.
%s: unable to read file.
%s: cannot verify a non-commit object of type %s.
stat-only
show statistics only
git verify-pack [-v | --verbose] [-s | --stat-only] <pack>...
%s: bad
%s: ok
print tag contents
git verify-tag [-v | --verbose] [--format=<format>] <tag>...
lock
unlock
git worktree add [<options>] <path> [<branch>]
git worktree list [<options>]
git worktree lock [<options>] <path>
git worktree prune [<options>]
git worktree unlock <path>
checkout <branch> even if already checked out in other worktree
create a new branch
create or reset a branch
populate the new working tree
keep the new working tree locked
-b, -B, and --detach are mutually exclusive
'%s' already exists
worktrees/%.*s
could not create directory of '%s'
%s/locked
initializing
added with --lock
%s/gitdir
gitdir: %s/worktrees/%s
%s/HEAD
%s/commondir
../..
Preparing %s (identifier %s)
--hard
report pruned working trees
expire working trees older than <time>
worktrees
worktrees/%s
Removing worktrees/%s: not a valid directory
worktrees/%s/locked
worktrees/%s/gitdir
Removing worktrees/%s: gitdir file does not exist
Removing worktrees/%s: unable to read gitdir file (%s)
Removing worktrees/%s: invalid gitdir file
worktrees/%s/link
Removing worktrees/%s: gitdir file points to non-existent location
worktree %s
HEAD %s
branch %s
%-*s 
(bare)
(detached HEAD)
[%s]
(error)
reason for locking
'%s' is not a working tree
The main working tree cannot be locked or unlocked
'%s' is already locked, reason: %s
'%s' is already locked
'%s' is not locked
detached
git-write-tree
missing-ok
<prefix>/
write tree object for a subdirectory <prefix>
ignore-cache-tree
only useful for debugging
%s: error reading the index
%s: error building trees
%s: prefix %s not found
git write-tree [--missing-ok] [--prefix=<prefix>/]
The empty string is not a valid path
unable to get current working directory
More than %d nested symlinks on path '%s'
Invalid symlink '%s'
hint: %.*s
advice.
Cherry-picking is not possible because you have unmerged files.
Committing is not possible because you have unmerged files.
Merging is not possible because you have unmerged files.
Pulling is not possible because you have unmerged files.
Reverting is not possible because you have unmerged files.
It is not possible to %s because you have unmerged files.
Fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
Exiting because of an unresolved conflict.
Please, commit your changes before merging.
Exiting because of unfinished merge.
Note: checking out '%s'.
You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by performing another checkout.
If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -b with the checkout command again. Example:
  git checkout -b <new-branch-name>
pushupdaterejected
pushnonffcurrent
pushnonffmatching
pushalreadyexists
pushfetchfirst
pushneedsforce
statushints
statusuoption
commitbeforemerge
resolveconflict
implicitidentity
detachedhead
setupstreamfailure
objectnamewarning
rmhints
addembeddedrepo
pushnonfastforward
cmdline ends with \
unclosed quote
%10s: %8u (%ju kB)
--reject and --3way cannot be used together.
--cached and --3way cannot be used together.
--3way outside a repository
--index outside a repository
--cached outside a repository
BUG: state->lock_file should not be NULL
<stdin>
can't open patch '%s': %s
squelched %d whitespace error
squelched %d whitespace errors
%d line adds whitespace errors.
%d lines add whitespace errors.
%d line applied after fixing whitespace errors.
%d lines applied after fixing whitespace errors.
don't apply changes matching the given path
apply changes matching the given path
remove <num> leading slashes from traditional diff paths
no-add
ignore additions made by the patch
instead of applying the patch, output diffstat for the input
allow-binary-replacement
numstat
show number of added and deleted lines in decimal notation
instead of applying the patch, output a summary for the input
check
instead of applying the patch, see if the patch is applicable
make sure the patch is applicable to the current index
apply a patch without touching the working tree
unsafe-paths
accept a patch that touches outside the working area
also apply the patch (use with --stat/--summary/--check)
attempt three-way merge if a patch does not apply
build-fake-ancestor
build a temporary index based on embedded index information
ensure at least <n> lines of context match
detect new or modified lines that have whitespace errors
ignore changes in whitespace when finding context
reverse
apply the patch in reverse
unidiff-zero
don't expect at least one line of context
leave the rejected hunks in corresponding *.rej files
allow-overlap
allow overlapping hunks
inaccurate-eof
tolerate incorrectly detected missing new-line at the end of file
recount
do not trust the line counts in the hunk headers
prepend <root> to all filenames
apply.whitespace
apply.ignorewhitespace
nowarn
error-all
unrecognized whitespace option '%s'
never
change
unrecognized whitespace ignore option '%s'
Skipped patch '%s'.
unrecognized input
unable to read index file
git apply: failed to read
 differ
Binary files 
Files 
patch with only garbage at line %d
patch fragment without header at line %d: %.*s
diff --git 
git diff header lacks filename information when removing %d leading pathname component (line %d)
git diff header lacks filename information when removing %d leading pathname components (line %d)
git diff header lacks filename information (line %d)
+++ 
old mode 
new mode 
deleted file mode 
new file mode 
copy from 
copy to 
rename old 
rename new 
rename from 
rename to 
similarity index 
dissimilarity index 
git apply: bad git-diff - expected /dev/null, got %s on line %d
git apply: bad git-diff - inconsistent new filename on line %d
git apply: bad git-diff - inconsistent old filename on line %d
/dev/null
git apply: bad git-diff - expected /dev/null on line %d
invalid mode on line %d: %s
inconsistent header lines %d and %d
unable to find filename in patch at line %d
Cannot prepare timestamp regexp %s
regexec returned %d for input: %s
1969-12-31
1970-01-01
corrupt patch at line %d
new file %s depends on old contents
deleted file %s still has contents
** warning: file %s becomes empty but is not deleted
new file depends on old contents
deleted file still has contents
recount: ignore empty hunk
recount: unexpected line: %.*s
%s:%d: %s.
%.*s
unrecognized binary patch at line %d
delta 
literal 
corrupt binary patch at line %d: %.*s
Checking patch %s...
%s: already exists in index
%s: already exists in working directory
new mode (%o) of %s does not match old mode (%o)
new mode (%o) of %s does not match old mode (%o) of %s
affected file '%s' is beyond a symbolic link
%s: patch does not apply
check_preimage
apply.c
patch->is_new <= 0
path %s has been renamed/deleted
%s: does not exist in index
%s: does not match index
%s: wrong type
%s has type %o, expected %o
cannot checkout %s
invalid path '%s'
path_is_beyond_symlink
*name_ != '\0'
removal patch leaves file contents
failed to read %s
reading from '%s' beyond a symbolic link
unable to read symlink %s
unable to open or read %s
patch failed: %s:%ld
cannot apply binary patch to '%s' without full index line
the patch applies to '%s' (%s), which does not match the current contents.
the patch applies to an empty '%s' but it is not empty
the necessary postimage %s for '%s' cannot be read
binary patch does not apply to '%s'
binary patch to '%s' creates incorrect result (expecting %s, got %s)
missing binary patch data for '%s'
cannot reverse-apply a binary patch without the reverse hunk to '%s'
invalid start of line: '%c'
Hunk #%d succeeded at %d (offset %d line).
Hunk #%d succeeded at %d (offset %d lines).
Context reduced to (%ld/%ld) to apply fragment at %d
while searching for:
%.*s
update_pre_post_images
postlen ? fixed_preimage.nr == preimage->nr : fixed_preimage.nr <= preimage->nr
BUG: caller miscounted postlen: asked %d, orig = %d, used = %d
size_t underflow: %ju - %ju
repository lacks the necessary blob to fall back on 3-way merge.
Falling back to three-way merge...
cannot read the current contents of '%s'
Failed to fall back on three-way merge...
Applied patch to '%s' with conflicts.
Applied patch to '%s' cleanly.
U %s
unable to remove %s from index
%s~%u
unable to write file '%s' mode %o
failed to write to '%s'
closing file '%s'
unable to add cache entry for %s
Subproject commit 
corrupt patch for submodule %s
unable to stat newly created file '%s'
unable to create backing store for newly created file %s
Applied patch %s cleanly.
internal error
Applying patch %%s with %d reject...
Applying patch %%s with %d rejects...
truncating .rej filename to %.*s.rej
.rej
diff a/%s b/%s
(rejected hunks)
Hunk #%d applied cleanly.
Rejected hunk #%d.
sha1 information is lacking or useless for submodule %s
mode change for %s, which is not in current HEAD
sha1 information is lacking or useless (%s).
could not add %s to temporary index
could not write temporary index to %s
 %-*s |  Bin
 %-*s |
%5d %.*s%.*s
 rewrite %s (%d%%)
 %s mode %06o %s
 %s %s
 %s %.*s{%s => %s} (%d%%)
 %s %s => %s (%d%%)
 mode change %06o => %06o %s
 mode change %06o => %06o
%.*s
uploadarchive.allowunreachable
$Format:
export-ignore
export-subst
%.*s%s/
archive format
prepend prefix to each pathname in the archive
worktree-attributes
read .gitattributes in working directory
report archived files on stderr
store only
compress faster
compress better
list supported archive formats
Unexpected option --remote
Option --exec can only be used together with --remote
Unexpected option --output
Unknown archive format '%s'
Argument not supported for format '%s': -%d
git archive [<options>] <tree-ish> [<path>...]
git archive --list
git archive --remote <repo> [--exec <cmd>] [<options>] <tree-ish> [<path>...]
git archive --remote <repo> [--exec <cmd>] --list
no such ref: %.*s
Not a valid object name
current working directory is untracked
tar.tgz.command
gzip -cn
tar.tgz.remote
tar.tar.gz.command
tar.tar.gz.remote
comment
mtime
pax_global_header
%u %s=
%07o
%011lo
ustar
unsupported file mode: 0%o (SHA1: %s)
%s.data
cannot read %s
see %s.paxheader
linkpath
size
%s.paxheader
cannot stream blob %s
BUG: tar-filter archiver called with no filter defined
 -%d
unable to start '%s' filter
unable to redirect descriptor
'%s' filter reported error
tar.umask
timestamp too large for this system: %ju
Path is not valid UTF-8: %s
path too long (%d chars, SHA1: %s): %s
BUG: counted %d != ended at %d
BUG: %s: not a valid attribute name
BUG: non-INDEX attr direction in a bare repo
git_attr_internal
attr.c
a->attr_nr == (g_attr_hashmap.map.size - 1)
BUG: no entry found
prepare_attr_stack
(*stack)->origin
.gitattributes
[builtin]
[attr]
%s not allowed: %s:%d
Negative patterns are ignored in git attributes
Use '\!' for literal leading exclamation.
%.*s is not a valid attribute name
%s: %s:%d
[attr]binary -diff -merge -text
GIT_ATTR_NOSYSTEM
share/git-core/gitattributes
/etc/gitattributes
info/attributes
BUG: interned attributes shouldn't be deleted
invalid base85 alphabet %c
invalid base85 sequence %.5s
good
could not read file '%s'
reading bisect refs failed
%s was both %s and %s
No testable commit found.
Maybe you started with bad path parameters?
%s is the first %s commit
(roughly %d step)
(roughly %d steps)
Bisecting: %d revision left to test after this %s
Bisecting: %d revisions left to test after this %s
dist=%d
BISECT_TERMS
refs/bisect/
skip-
BISECT_ANCESTORS_OK
a %s revision is needed
Bisecting: a merge base must be tested
The merge base %s is bad.
This means the bug has been fixed between %s and [%s].
The merge base %s is new.
The property has changed between %s and [%s].
The merge base %s is %s.
This means the first '%s' commit is between %s and [%s].
Some %s revs are not ancestors of the %s rev.
git bisect cannot work properly in this case.
Maybe you mistook %s and %s revs?
BISECT_EXPECTED_REV
the merge base between %s and [%s] must be skipped.
So we cannot be sure the first %s commit is between %s and %s.
We continue anyway.
bisect_rev_setup
Badly quoted content in file '%s': %s
BISECT_NAMES
There are only 'skip'ped commits left to test.
The first %s commit could be any of:
We cannot bisect more!
BISECT_HEAD
internal error in blame_origin_decref
assign_blame
blame.c
commit == suspect->commit
--contents and --reverse do not blend well.
cannot use --contents with final commit object name
--reverse and --first-parent together require specified latest commit
BUG: not unique item in first-parent chain
--reverse --first-parent together require range along first-parent chain
no such path %s in %s
cannot read blob %s for path %s
%s in %s has negative refcnt %d
internal error in blame::find_origin
internal error in blame::find_origin (%c)
unable to generate diff (%s -> %s)
Cannot read blob %s for path %s
internal error in blame::blame_chunk_cb
unable to generate diff (%s)
Non commit %s?
More than one commit to dig from %s and %s?
More than one commit to dig up from, %s and %s?
No commit to dig up from?
no such ref: HEAD
Not Committed Yet
not.committed.yet
tree 0000000000000000000000000000000000000000
author %s
committer %s
Version of %s from %s
standard input
Cannot stat '%s'
cannot open or read '%s'
unsupported file type %s
failed to read from stdin
no such commit %s
cannot open '%s' for reading
unknown line in '%s': %s
no such path '%s' in HEAD
Not setting branch %s as its own upstream.
Branch %s set up to track remote branch %s from %s by rebasing.
Branch %s set up to track remote branch %s from %s.
Branch %s set up to track local branch %s by rebasing.
Branch %s set up to track local branch %s.
Branch %s set up to track remote ref %s by rebasing.
Branch %s set up to track remote ref %s.
Branch %s set up to track local ref %s by rebasing.
Branch %s set up to track local ref %s.
Unable to write upstream branch configuration
'%s' is not a valid branch name.
A branch named '%s' already exists.
Cannot force update the current branch.
Not a valid object name: '%s'.
Ambiguous object name: '%s'.
Not a valid branch point: '%s'.
branch: Reset to %s
branch: Created from %s
'%s' is already checked out at '%s'
HEAD of working tree %s is not updated
Not tracking: ambiguous information for ref %s
cannot find the current offset
%s %ju
BUG: should not happen
cannot seek back
unable to write pack header
failed to read %d bytes from '%s'
unexpected deflate failure: %d
%s/pack/pack-
Repository lacks these prerequisite commits:
The bundle contains this ref:
The bundle contains these %d refs:
The bundle records a complete history.
The bundle requires this ref:
The bundle requires these %d refs:
unable to dup file descriptor
Refusing to create empty bundle.
cannot create '%s'
index-pack died
'%s' does not look like a v2 bundle file
unrecognized header: %s%s (%d)
--pretty=oneline
rev-list died
ref '%s' is excluded by the rev-list options
--all-progress-implied
--stdout
Could not spawn pack-objects
pack-objects died
%s: unmerged (%s)
You have both %s and %s
update_one
cache-tree.c
!(dryrun && repair)
index cache-tree records empty sub-tree
cache-tree.c: '%.*s' in '%s' not found
invalid object %06o %s for '%.*s'
%c%d %d
fatal - unsorted cache subtree
cache-tree: internal error
[31m
[32m
[33m
[34m
[35m
[1;32m
[1;33m
[1;34m
[1;35m
[1;36m
BUG: color parsing ran out of space
invalid color value: %.*s
black
green
yellow
blue
magenta
cyan
white
bold
italic
blink
strike
%c8;5;%d
%c8;2;%d;%d;%d
TERM
dumb
print_columns
column.c
(colopts & COL_ENABLE_MASK) != COL_AUTO
BUG: invalid layout mode %d
--raw-mode=%d
--width=%d
--indent=%s
--padding=%d
0123456789;
invalid column.%s mode %s
dense
unsupported option '%s'
%s%c
%06o 
 %s 
read error '%s'
early EOF '%s'
Subproject commit %s
object '%s' is not a blob!
diff --cc 
diff --combined 
%s%sindex 
%s%s
..%s%s
%s%snew file mode %06o
%s%sdeleted file 
mode 
%s%06o
..%06o
--- 
size_t overflow: %ju + %ju
unable to generate combined diff for %s
 +%lu,%lu 
%s%s %s%s
 -%lu,%lu
%.*s%s%s
Binary files differ
%s %s is not a commit!
bad graft data: %s
cannot read commit object %s
expected commit for %s, got %s
bogus commit object %s
bad tree pointer in commit %s
bad parents in commit %s
Could not read %s
Object %s not a commit
mergetag
a NUL byte in commit log message not allowed.
tree %s
encoding %s
duplicate graft data: %s
parent
/dev/tty
include.path
includeif
bogus config parameter: %s
bogus format in GIT_CONFIG_PARAMETERS
failed to expand user dir in: '%s'
core.
user.
i18n.
push.
mailmap.
pager.color
color.pager
pack.packsizelimit
pack.compression
unable to load config blob object '%s'
reference '%s' does not point to a blob
/etc/gitconfig
share/git-core/gitconfig
failed to parse %s
GIT_CONFIG_NOSYSTEM
git_configset_get_value
config.c
values->nr > 0
Invalid %s: '%s'
core.untrackedcache
unknown core.untrackedCache value '%s'; using 'keep' default value
core.splitindex
splitindex.maxpercentchange
splitIndex.maxPercentChange value '%d' should be between 0 and 100
unable to parse '%s' from command-line config
bad config variable '%s' in file '%s' at line %d
could not lock config file %s
opening %s
invalid config file %s
fstat on %s failed
unable to mmap '%s'
chmod on %s failed
could not write config file %s
could not set '%s' to '%s'
invalid section name: %s
missing value for '%s'
BUG: current_config_origin_type called outside config callback
submodule-blob
BUG: unknown config origin type
BUG: current_config_name called outside config callback
could not expand include path '%s'
relative config includes must come from files
<unknown>
the command line
gitdir:
gitdir/i:
relative config include conditionals must come from files
BUG: how is this possible?
key does not contain a section: %s
key does not contain variable name: %s
invalid key (newline): %s
out of range
invalid unit
bad numeric config value '%s' for '%s': %s
bad numeric config value '%s' for '%s' in blob %s: %s
bad numeric config value '%s' for '%s' in file %s: %s
bad numeric config value '%s' for '%s' in standard input: %s
bad numeric config value '%s' for '%s' in submodule-blob %s: %s
bad numeric config value '%s' for '%s' in command line %s: %s
bad numeric config value '%s' for '%s' in %s: %s
core.trustctime
core.checkstat
core.quotepath
core.attributesfile
core.hookspath
core.ignorestat
core.prefersymlinkrefs
core.warnambiguousrefs
core.abbrev
abbrev length out of range: %d
core.disambiguate
core.loosecompression
bad zlib compression level %d
core.compression
core.packedgitwindowsize
core.bigfilethreshold
core.packedgitlimit
core.deltabasecachelimit
core.autocrlf
input
core.safecrlf
core.eol
crlf
native
core.notesref
core.editor
core.commentchar
core.commentChar should only be one character
core.askpass
core.excludesfile
core.whitespace
core.fsyncobjectfiles
core.preloadindex
core.createobject
link
invalid mode for object creation: %s
core.sparsecheckout
core.precomposeunicode
core.protecthfs
core.protectntfs
core.hidedotfiles
dotgitonly
i18n.commitencoding
i18n.logoutputencoding
branch.autosetupmerge
branch.autosetuprebase
malformed value for %s
push.default
nothing
matching
simple
tracking
malformed value for %s: %s
Must be one of nothing, matching, simple, upstream or current.
mailmap.file
mailmap.blob
BUG: config_buf can only ungetc the same character
bad config line %d in blob %s
bad config line %d in file %s
bad config line %d in standard input
bad config line %d in submodule-blob %s
bad config line %d in command line %s
bad config line %d in %s
unable to resolve config blob '%s'
unable to parse command-line config
BUG: configset_add_value has no source
unknown error occurred while reading the configuration files
[%.*s "
[%.*s]
%.*s = %s
%s has multiple values
failed to write new configuration file %s
protocol error: expected shallow sha-1, got '%s'
repository on the other end cannot be shallow
protocol error: expected sha/ref, got '%s'
protocol error: unexpected capabilities^{}
protocol error: multiple capabilities^{}
protocol error: unexpected ref after capabilities^{}
Diag: url=%s
NULL
Diag: protocol=%s
Diag: hostandport=%s
Diag: path=%s
GIT_OVERRIDE_VIRTUAL_HOST
strange pathname '%s' blocked
Diag: userandhost=%s
Diag: port=%s
NONE
strange hostname '%s' blocked
GIT_SSH
-batch
unable to fork
The remote end hung up upon initial contact
Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
No path specified. See 'man git-pull' for valid url syntax
git+ssh
ssh+git
I don't handle protocol '%s'
unknown protocol
GIT_PROXY_COMMAND
core.gitproxy
 for 
9418
strange port '%s' blocked
cannot start proxy %s
Looking up %s ... 
Unable to look up %s (port %s) (%s)
done.
Connecting to %s (port %s) ... 
%s[%d: %s]: errno=%s
unable to connect to %s:
unable to set SO_KEEPALIVE on socket: %s
GIT_SSH_COMMAND
core.sshcommand
plink
plink.exe
tortoiseplink
tortoiseplink.exe
GIT_SSH_VARIANT
ssh.variant
putty
--progress=%s
Could not run 'git rev-list'
failed write to rev-list
failed to close rev-list's stdin
async_query_available_blobs
convert.c
subprocess_map_initialized
external filter '%s' is not available anymore although not all paths have been filtered
command=list_available_blobs
pathname=
success
-text
text eol=lf
text eol=crlf
text=auto
text=auto eol=crlf
text=auto eol=lf
%s: clean filter '%s' failed
convert_to_git_filter_fd
ca.drv
ca.drv->clean || ca.drv->process
external filter '%s' failed
filter
smudge
process
required
read from external filter '%s' failed
cannot fork to run external filter '%s'
cannot feed the input to external filter '%s'
external filter '%s' failed %d
unexpected filter type
apply_multi_file_filter
strlen(filter_type) < LARGE_PACKET_DATA_MAX - strlen("command=\n")
command=%s
path name too long for external filter
pathname=%s
can-delay=1
delayed
delay
git-filter
CRLF will be replaced by LF in %s.
The file will have its original line endings in your working directory.
CRLF would be replaced by LF in %s.
LF will be replaced by CRLF in %s.
The file will have its original line endings in your working directory.
LF would be replaced by CRLF in %s
%s: smudge filter %s failed
Id: 
: %s $
$Id: 
Illegal crlf_action %d
copy-fd: read returned
copy-fd: write returned
%s: close error
invalid credential line: %s
username
password
protocol
host
credential helper '%s' told us to quit
unable to get password from user
erase
credential.
helper
usehttppath
https
http
git credential-%s
Username
Password
%s for '%s': 
%s: 
%s://
%s: sha1 file error on close
%s: error when reading the tail of sha1 file
%s: sha1 file has trailing garbage
unable to open /dev/null
unable to open '%s'
%s: sha1 file read error
%s: sha1 file truncated
sha1 file '%s' validation error
sha1 file '%s' write error. Out of diskspace
sha1 file '%s' write error
in the future
%ju second ago
%ju seconds ago
%ju minute ago
%ju minutes ago
%ju hour ago
%ju hours ago
%ju day ago
%ju days ago
%ju week ago
%ju weeks ago
%ju month ago
%ju months ago
%ju year
%ju years
%s, %ju month ago
%s, %ju months ago
%ju year ago
%ju years ago
BUG: cannot create anonymous strftime date_mode struct
%ju %+05d
%04d-%02d-%02d
%04d-%02d-%02d %02d:%02d:%02d %+05d
%04d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d
%.3s, %d %.3s %d %02d:%02d:%02d %+05d
%.3s %.3s %d %02d:%02d:%02d %d%c%+05d
default-local
-local
date format missing colon separator: %s
unknown date format %s
Timestamp too large for this system: %ju
Timestamp+tz too large: %ju +%04d
Timestamp before Unix epoch: %ju %04d
Sundays
Mondays
Tuesdays
Wednesdays
Thursdays
Fridays
Saturdays
January
February
March
April
June
July
August
September
October
November
December
IDLW
MEWT
MEST
CEST
MESZ
EEST
WAST
WADT
EAST
EADT
NZST
NZDT
IDLE
%ju %c%02d%02d
relative
iso8601-strict
iso-strict
iso8601
rfc2822
unix
months
years
yesterday
noon
midnight
zero
three
four
five
seven
eight
nine
seconds
minutes
hours
days
weeks
internal error in merge #1
internal error in merge #2
internal error in merge #3
internal error in merge #4
failed to read orderfile '%s'
invalid regex: %s
skipping rename detection, detected duplicate destination '%s'
Performing inexact rename detection
internal error: dst already matched.
create_delta_index
diff-delta.c
packed_entry - (struct index_entry *)mem == entries
bad tree object %s
invalid diff option/value: %s
Could not access '%s'
error while reading from stdin
Could not open directory %s
myers
patience
histogram
diff.indentheuristic
diff.context
diff.interhunkcontext
diff.renames
diff.autorefreshindex
diff.mnemonicprefix
diff.noprefix
diff.statgraphwidth
diff.external
diff.wordregex
diff.orderfile
Unknown value for 'diff.submodule' config variable: '%s'
diff.algorithm
diff.wserrorhighlight
diff.renamelimit
diff.color.
color.diff.
diff.suppressblankempty
diff.suppress-blank-empty
diff.dirstat
Found errors in 'diff.dirstat' config variable:
print_stat_summary
diff.c
insertions == 0 && deletions == 0
 0 files changed
 %d file changed
 %d files changed
, %d insertion(+)
, %d insertions(+)
, %d deletion(-)
, %d deletions(-)
internal error: asking to populate invalid file.
--name-only, --name-status, --check and -s are mutually exclusive
--follow requires exactly one pathspec
Option '--%s' requires a value
unified
--patch-with-raw
--numstat
--shortstat
--dirstat
--dirstat=
--cumulative
cumulative
--dirstat-by-file
files
--dirstat-by-file=
--check
--summary
--patch-with-stat
--name-status
--no-patch
--break-rewrites=
--break-rewrites
invalid argument to -B: %s
--find-renames=
--find-renames
invalid argument to -M: %s
--irreversible-delete
--find-copies=
--find-copies
invalid argument to -C: %s
--no-renames
--rename-empty
--no-rename-empty
--relative
--relative=
--minimal
--no-minimal
--ignore-all-space
--ignore-space-change
--ignore-space-at-eol
--ignore-blank-lines
--indent-heuristic
--no-indent-heuristic
--patience
--histogram
diff-algorithm
option diff-algorithm accepts "myers", "minimal", "patience" and "histogram"
--binary
--full-index
--text
--find-copies-harder
--follow
--no-follow
--color
--color=
option `color' expects "always", "auto", or "never"
--no-color
--color-words
--color-words=
--word-diff
--word-diff=
bad --word-diff argument: %s
word-diff-regex
--exit-code
--ext-diff
--no-ext-diff
--no-textconv
--ignore-submodules=
--submodule
--submodule=
--ws-error-highlight=
--ita-invisible-in-index
--ita-visible-in-index
--pickaxe-all
--pickaxe-regex
diff-filter
unknown change class '%c' in --diff-filter=%s
src-prefix
line-prefix
dst-prefix
--no-prefix
inter-hunk-context
--function-context
--no-function-context
%s...
diff.renameLimit
unable to read files to diff
BUG: fill_textconv called with non-textconv driver
copies
meta
frag
func
changes
lines
noncumulative
  Failed to parse dirstat cut-off percentage '%s'
  Unknown dirstat parameter '%s'
Subproject commit %s%s
Failed to parse --dirstat/-X option parameter:
BUG: stat option does not begin with --stat: %s
-width
--stat-width
-name-width
--stat-name-width
-graph-width
--stat-graph-width
-count
--stat-count
option '%s' requires a value
Failed to parse --submodule option parameter: '%s'
unknown value after ws-error-highlight=%.*s
Option '%c' requires a value
ACDMRTXU*B
break-rewrites
find-copies
find-renames
BUG: oid abbreviation out of range: %d
internal diff status error
diff--git
newfilemode
---/dev/null
+++b/
deletedfilemode
---a/
+++/dev/null
unable to generate patch-id diff for %s
stat '%s'
cannot hash %s
%06o
internal error in diff-resolve-rename-copy
unable to generate checkdiff for %s
%s:%d: %s.
checkdiff_consume
data->o
%s%s:%d: leftover conflict marker
%s%s:%d: %s.
invalid diff
:%06o %06o %s 
%c%03d%c
%c%c
unable to generate diffstat for %s
 => 
 %*s
 %s%ju%s
 -> 
%s%ju%s
 bytes
 Unmerged
 %*ju%s
%s ...
 %s%-*s |
%s%4d.%01d%% %.*s
%s rewrite 
(%d%%)
 %s mode %06o 
 %s %s (%d%%)
%s mode change %06o => %06o%c
GIT_EXTERNAL_DIFF
* Unmerged path %s
%s%ssimilarity index %d%%
%s%scopy from 
%s%scopy to 
%s%srename from 
%s%srename to 
%s%sdissimilarity index %d%%%s
%s%sindex %s..%s
 %06o
GIT_DIFF_PATH_COUNTER=%d
GIT_DIFF_PATH_TOTAL=%d
external diff died, stopping at %s
stat(%s)
readlink(%s)
cannot read data blob for %s
BUG: diff is failing to clean up its tempfiles
XXXXXX_
unable to create temp-file
%s%sdiff --git %s %s%s
%s%snew file mode %06o%s
%s%sdeleted file mode %06o%s
%s%sold mode %06o%s
%s%snew mode %06o%s
%sBinary files %s and %s differ
GIT_DIFF_OPTS
--unified=
%s%s--- %s%s%s
%s%s+++ %s%s%s
%s%s@@ -
 @@%s
1,%d
 No newline at end of file
%sGIT binary patch
%sdelta %lu
%sliteral %lu
Invalid regular expression: %s
%s%s--- %s%s%s
%s%s+++ %s%s%s
diff_words_show
unable to generate word diff
fn_out_diff_words_aux
feeding unmodified %s to diffcore
error reading from textconv command '%s'
pathspec '%s' did not match any file(s) known to git.
GIT_TRACE_UNTRACKED_STATS
dir.c
node creation: %u
gitignore invalidation: %u
directory invalidation: %u
opendir: %u
dir_inside_of
dir && subdir && *dir && *subdir
.gitignore
could not create directories for %s
%s/config
could not migrate git directory from '%s' to '%s'
cannot use %s as an exclude file
last_exclude_matching_from_list
x->baselen == 0 || x->base[x->baselen - 1] == '/'
oops in prep_exclude
prep_exclude
stk->baselen == dir->basebuf.len
failed to get kernel name and information
Location %s, system %s
GIT_DISABLE_UNTRACKED_CACHE
Untracked cache is disabled on this system or location.
info/exclude
error opening directory %s: %s
error reading directory %s: %s
error closing directory %s: %s
error reading path '%s': %s
BUG: empty path passed to dir_iterator_begin()
VISUAL
EDITOR
unable to start editor '%s'
There was a problem with the editor '%s'.
external filter '%s' signaled that '%s' is now available although it has not been delayed earlier
'%s' was not filtered properly
could not stat file '%s'
%s already exists, no checkout
unable to unlink old '%s'
unable to read sha1 file of %s (%s)
unable to create symlink %s
unable to create file %s
unable to write file %s
cannot create temporary submodule %s
cannot create submodule directory %s
unknown file mode for %s in index
write_entry
entry.c
state->istate
.merge_link_XXXXXX
cannot lstat '%s'
cannot unlink '%s'
cannot rmdir '%s'
cannot create directory at '%s'
GIT_OBJECT_DIRECTORY
GIT_GRAFT_FILE
GIT_REPLACE_REF_BASE
GIT_PREFIX
GIT_COMMON_DIR
refs/replace/
environment.c
git environment hasn't been setup
internal error: work tree has already been set
Current worktree: %s
New worktree: %s
objects/%s
Could not set GIT_DIR to '%s'
refs/namespaces/%s
bad git namespace path "%s"
ewah_set
ewah/ewah_bitmap.c
i >= self->bit_size
ewah_iterator_next
it->literals < it->lw
it->pointer < it->buffer_size
add_empty_word
rlw_get_run_bit(self->rlw) == v
rlw_get_running_len(self->rlw) == run_len + 1
add_literal
rlw_get_literal_words(self->rlw) == current_num + 1
Unable to determine current working directory
git_extract_argv0_path
exec_cmd.c
s >= path_buf
GIT_EXEC_PATH
libexec/git-core
/usr/local/bin:/usr/bin:/bin
trace: exec failed: %s
too many args to run %s
system_prefix
argv0_path
is_absolute_path(argv0_path)
/Applications/Xcode.app/Contents/Developer/usr
RUNTIME_PREFIX requested, but prefix computation failed.  Using static fallback '%s'.
no matching remote head
no such remote ref %s
Server does not allow request for unadvertised object %s
fetch.unpacklimit
fetch.fsckobjects
Server does not support shallow clients
multi_ack_detailed
Server supports multi_ack_detailed
no-done
Server supports no-done
multi_ack
Server supports multi_ack
Server supports side-band-64k
side-band
Server supports side-band
allow-tip-sha1-in-want
Server supports allow-tip-sha1-in-want
allow-reachable-sha1-in-want
Server supports allow-reachable-sha1-in-want
thin-pack
no-progress
ofs-delta
Server supports ofs-delta
agent
Server version is %.*s
Server does not support --shallow-since
Server does not support --shallow-exclude
Server does not support --deepen
no common commits
want %s (%s)
already have %s (%s)
Marking %s as complete
--stateless-rpc requires multi_ack_detailed
 multi_ack_detailed
 multi_ack
 no-done
 side-band-64k
 side-band
 deepen-relative
 thin-pack
 no-progress
 include-tag
 deepen-since
 deepen-not
want %s%s
want %s
deepen %d
deepen-since %ju
deepen-not %s
invalid shallow line: %s
unshallow 
invalid unshallow line: %s
error in object: %s
no shallow found: %s
expected shallow/unshallow, got %s
have %s
have %s
got %s %d %s
invalid commit %s
giving up
done
got %s (%d) %s
git fetch-pack: expected shallow list
git fetch-pack: expected ACK/NAK, got EOF
ACK 
common
ready
git fetch-pack: expected ACK/NAK, got '%s'
fetch-pack: unable to fork off sideband demultiplexer
protocol error: bad pack header
--keep=fetch-pack %ju on %s
fetch-pack: unable to fork off %s
%s failed
error in sideband demultiplexer
Unhandled message id: %s
Cannot demote %s to %s
skiplist
skiplist requires a path
Missing '=': '%s'
Unknown object type for %s
no valid object to fsck
unknown type '%d' (internal fsck error)
object %s: %s
Unknown fsck message type: '%s'
NUL_IN_HEADER
UNTERMINATED_HEADER
BAD_DATE
BAD_DATE_OVERFLOW
BAD_EMAIL
BAD_NAME
BAD_OBJECT_SHA1
BAD_PARENT_SHA1
BAD_TAG_OBJECT
BAD_TIMEZONE
BAD_TREE
BAD_TREE_SHA1
BAD_TYPE
DUPLICATE_ENTRIES
MISSING_AUTHOR
MISSING_COMMITTER
MISSING_EMAIL
MISSING_GRAFT
MISSING_NAME_BEFORE_EMAIL
MISSING_OBJECT
MISSING_PARENT
MISSING_SPACE_BEFORE_DATE
MISSING_SPACE_BEFORE_EMAIL
MISSING_TAG
MISSING_TAG_ENTRY
MISSING_TAG_OBJECT
MISSING_TREE
MISSING_TYPE
MISSING_TYPE_ENTRY
MULTIPLE_AUTHORS
TAG_OBJECT_NOT_TAG
TREE_NOT_SORTED
UNKNOWN_TYPE
ZERO_PADDED_DATE
BAD_FILEMODE
EMPTY_NAME
FULL_PATHNAME
HAS_DOT
HAS_DOTDOT
HAS_DOTGIT
NULL_SHA1
ZERO_PADDED_FILEMODE
NUL_IN_COMMIT
BAD_TAG_NAME
MISSING_TAGGER_ENTRY
fsck_msg_type
fsck.c
msg_id >= 0 && msg_id < FSCK_MSG_MAX
Could not open skip list: %s
Could not read '%s'
Invalid SHA-1: %s
in tree %s: entry %s has bad mode %.6o
append_msg_id
*msg_id
cannot be parsed as a tree
contains entries pointing to null sha1
contains full pathnames
contains empty pathname
contains '.'
contains '..'
contains '.git'
contains zero-padded file modes
contains bad file modes
contains duplicate file entries
not properly sorted
invalid format - expected 'tree' line
invalid 'tree' line format - bad sha1
invalid 'parent' line format - bad sha1
graft objects missing
parent objects missing
invalid format - expected 'author' line
invalid format - multiple 'author' lines
invalid format - expected 'committer' line
could not load commit's tree %s
NUL byte in the commit object body
unterminated header: NUL at offset %ld
unterminated header
invalid author/committer line - missing space before email
invalid author/committer line - bad name
invalid author/committer line - missing email
invalid author/committer line - bad email
invalid author/committer line - missing space before date
invalid author/committer line - zero-padded date
invalid author/committer line - date causes integer overflow
invalid author/committer line - bad date
invalid author/committer line - bad time zone
could not load tagged object
cannot read tag object
expected tag got %s
invalid format - expected 'object' line
invalid 'object' line format - bad sha1
invalid format - expected 'type' line
invalid format - unexpected end after 'type' line
invalid 'type' value
invalid format - expected 'tag' line
invalid 'tag' name: %.*s
invalid format - expected 'tagger' line
LANGUAGE
-----BEGIN PGP SIGNATURE-----
-----BEGIN PGP MESSAGE-----
user.signingkey
gpg.program
--status-fd=2
-bsau
[GNUPG:] SIG_CREATED 
gpg failed to sign the data
.git_vtag_tmpXXXXXX
could not create temporary file
failed writing detached signature to '%s'
--status-fd=1
--keyid-format=long
[GNUPG:] GOODSIG 
[GNUPG:] BADSIG 
[GNUPG:] TRUST_NEVER
[GNUPG:] TRUST_UNDEFINED
[GNUPG:] ERRSIG 
[GNUPG:] EXPSIG 
[GNUPG:] EXPKEYSIG 
[GNUPG:] REVKEYSIG 
log.graphcolors
graph_next_line
graph.c
diff_output_prefix_callback
ignore invalid color '%.*s' in log.graphColors
graph_output_pre_commit_line
graph->num_parents >= 3
0 <= graph->expansion_row && graph->expansion_row < num_expansion_rows
graph_output_commit_char
graph->revs->boundary
graph_output_post_merge_line
parents
par_column
graph_output_collapsing_line
target * 2 <= i
graph->new_mapping[i] == -1
graph->new_mapping[i - 1] > target
graph->new_mapping[i - 2] < 0
graph->new_mapping[i - 3] == target
[1;31m
[36m
grep.extendedregexp
grep.patterntype
grep.linenumber
grep.fullname
color.grep
color.grep.context
color.grep.filename
color.grep.function
color.grep.linenumber
color.grep.matchcontext
color.grep.matchselected
color.grep.selected
color.grep.separator
color.grep.match
basic
extended
fixed
bad %s argument: %s
incomplete pattern expression: %s
BUG: a non-header pattern in grep header list.
BUG: unknown header field %d
BUG: malformed header expr
unmatched parenthesis
not a pattern expression %s
--and not followed by pattern expression
--not not followed by pattern expression
--not followed by non pattern expression
fixed %s
cannot use Perl-compatible regexes when not compiled with USE_LIBPCRE
In '%s' at %d, 
%s, 
%s'%s': %s
grep_splice_or
grep.c
x->node == GREP_NODE_OR
[all-match]
true
(not
(and
*and*
*not*
*or*
pattern_head
pattern_body
<head %d>
<body>
BUG: unknown binary handling mode
Binary file 
 matches
BUG: invalid grep_source type to load
'%s': short read
'%s': unable to read %s
BUG: attempt to textconv something without a path?
pcre_exec failed with error code %d
regexec_buf
./git-compat-util.h
nmatch > 0 && pmatch
Not a valid grep expression
Unexpected node type (internal error) %d
match_one_pattern
p->field < ARRAY_SIZE(header_field)
regexp returned nonsense
PATH
available git commands in '%s'
git commands available from elsewhere on your $PATH
These are common Git commands used in various situations:
Uh oh. Your system reports no Git commands at all.
WARNING: You called a Git command named '%s', which does not exist.
Continuing under the assumption that you meant '%s'.
Continuing in %0.1f seconds, assuming that you meant '%s'.
git: '%s' is not a git command. See 'git --help'.
The most similar command is
The most similar commands are
git version [<options>]
build-options
also print build options
git version %s
sizeof-long: %d
%s: %s - %s
Did you mean this?
Did you mean one of these?
.exe
start a working area (see also: git help tutorial)
work on the current change (see also: git help everyday)
examine the history and state (see also: git help revisions)
grow, mark and tweak your common history
collaborate (see also: git help workflows)
help.autocorrect
alias.
0123456789abcdef
EMAIL
no email was given and auto-detection is disabled
unable to auto-detect email address (got '%s')
no name was given and auto-detection is disabled
unable to auto-detect name (got '%s')
empty ident name (for <%s>) not allowed
name consists only of disallowed characters: %s
user.useconfigonly
user.name
user.email
Unknown
/etc/mailname
cannot read /etc/mailname
cannot get host name
%s.(none)
*** Please tell me who you are.
  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"
to set your account's default identity.
Omit --global to set the identity only in this repository.
memory exhausted
range_set_append_unsafe
line-log.c
a <= b
range_set_append
rs->nr == 0 || rs->ranges[rs->nr-1].end <= a
sort_and_merge_range_set
o <= rs->nr
range_set_check_invariants
rs->ranges[0].start < rs->ranges[0].end
rs->ranges[i-1].end < rs->ranges[i].start
rs->ranges[i].start < rs->ranges[i].end
More than one commit to dig from: %s and %s?
No commit specified?
-L argument not 'start,end:file' or ':funcname:file': %s
malformed -L argument '%s'
There is no path %s in the commit
Cannot read blob %s
nth_line
d && line <= d->lines
d->spec && d->spec->data
range_set_union
out->nr == 0
line_log_data_copy
line_log_data_copy_one
%s%sdiff --git a/%s b/%s%s
%s%s+++ b/%s%s
%s%s@@ -%ld,%ld +%ld,%ld @@%s
\ No newline at end of file
queue_diffs
move_diff_queue
src != dst
process_all_files
process_diff_filepair
pair->two->path
rg->path
pair->two->oid_valid
parse_range_funcname
line-range.c
*arg == ':'
-L parameter '%s': %s
-L parameter '%s' starting at line %ld: no match
-L parameter '%s' matches at EOF
-L parameter: regexec() failed: %s
-L invalid empty range
-L invalid line number: %ld
-L parameter '%s' starting at line %ld: %s
unknown pending object %s (%s)
bad tree object
bad blob object
conflict-marker-size
merge.default
driver
%s: lacks value
ll_ext_merge
ll-merge.c
opts
custom merge driver %s lacks command line.
built-in binary merge
built-in 3-way text merge
built-in union merge
ll_binary_merge
Cannot merge binary files: %s (%s vs. %s)
ll_xdl_merge
ll_union_merge
Unable to create '%s.lock': %s.
Another git process seems to be running in this repository, e.g.
an editor opened by 'git commit'. Please make sure all processes
are terminated then try again. If it still fails, a git process
may have crashed in this repository earlier:
remove the file manually to continue.
Unable to create '%s.lock': %s
BUG: get_locked_file_path() called for malformed lock object
tag: 
v%d-
%04d-%s
Subject: [%s%s%0*d/%d] 
Subject: [%s] 
From %s Mon Sep 17 00:00:00 2001
Message-Id: <%s>
In-Reply-To: <%s>
%s<%s>
References: 
%sMIME-Version: 1.0
Content-Type: multipart/mixed; boundary="%s%s"
This is a multi-part message in MIME format.
--%s%s
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit
--%s%s
Content-Type: text/x-patch; name="%s"
Content-Transfer-Encoding: 8bit
Content-Disposition: %s; filename="%s"
attachment
 (from %s)
log size %i
object names
add_ref_decoration
log-tree.c
cb_data == NULL
invalid replace ref %s
replaced
grafted
No signature
%s%.*s%s%s
malformed mergetag
merged tag '%s'
tag %s names a non-parent %s
parent #%d, tagged '%s'
empty patch: '%s'
>From 
Content-Type
Content-Type: 
Content-Transfer-Encoding
Message-Id
Subject
cannot convert from %s to %s
boundary=
Too many boundaries to handle
charset=
base64
quoted-printable
Message-Id: %s
>From
[PATCH]
diff -
Index: 
Detected mismatched boundaries, can't recover
BUG: inbody_header_accum, if not empty, must always contain a valid in-body header
Author: %s
Email: %s
%s: %s
%s: %.*s
mailinfo.
mailinfo.scissors
HEAD:.mailmap
.mailmap
unable to open mailmap at %s
unable to read mailmap object at %s
mailmap is not a blob: %s
cannot find path %s in tree %s
cannot read tree %s
entry %s in tree %s is not a tree
entry %.*s not found in tree %s
merge-%s
--%s
failed to read the cache
.our
.their
BUG: There are unmerged index entries:
BUG: %d %.*s
BUG: unmerged index entries in merge-recursive.c
error building trees
merging of trees %s and %s failed
BUG: unprocessed path??? %s
Merging:
found %u common ancestor:
found %u common ancestors:
ancestor
Temporary merge branch 1
Temporary merge branch 2
merge returned no commit
merged common ancestors
merged tree
merge.renamelimit
Could not parse object '%s'
GIT_MERGE_VERBOSITY
subtree=
diff-algorithm=
ignore-all-space
ignore-space-at-eol
renormalize
no-renormalize
no-renames
find-renames=
rename-threshold=
BUG: ren1_src != ren2_src
BUG: ren1_dst != ren2_dst
CONFLICT (rename/add): Rename %s->%s in %s. %s added in %s
Adding merged %s
Adding as %s instead
setup_rename_conflict_info
merge-recursive.c
!pair2 == !dst_entry2
blob expected for %s '%s'
failed to open '%s': %s
failed to symlink '%s': %s
do not know what to do with %06o %s '%s'
failed to create path '%s'%s
Removing %s to make room for subdirectory
: perhaps a D/F conflict?
refusing to lose untracked file at '%s'
addinfo_cache failed for path '%s'
BUG: unsupported object type in the tree
Removing %s
file/directory
directory/file
CONFLICT (%s): There is a directory with name %s in %s. Adding %s as %s
Adding %s
BUG: fatal merge failure, shouldn't happen.
Skipped %s (merged same as existing)
Auto-merging %s
CONFLICT (%s): Merge conflict in %s
renamed
CONFLICT (%s/delete): %s deleted in %s and %s in %s. Version %s of %s left in tree.
CONFLICT (%s/delete): %s deleted in %s and %s to %s in %s. Version %s of %s left in tree.
CONFLICT (%s/delete): %s deleted in %s and %s in %s. Version %s of %s left in tree at %s.
CONFLICT (%s/delete): %s deleted in %s and %s to %s in %s. Version %s of %s left in tree at %s.
CONFLICT (rename/rename): Rename "%s"->"%s" in branch "%s" rename "%s"->"%s" in "%s"%s
 (left unresolved)
%s is a directory in %s adding as %s instead
CONFLICT (rename/rename): Rename %s->%s in %s. Rename %s->%s in %s
Renaming %s to %s and %s to %s instead
blob_unchanged
o_oid && a_oid
cannot read object %s
object %s is not a blob
modify
virtual %s
(bad commit)
merge.verbosity
unable to create lazy_dir_thread
unable to join lazy_dir_thread
unable to create lazy_name_thread
unable to join lazy_name_thread
cache entry out of order
hash_dir_entry_with_parent_and_prefix
name-hash.c
(parent != NULL) ^ (strchr(prefix->buf, '/') == NULL)
string_list_add_refs_by_glob
notes.c
list->strdup_strings
notes ref %s is invalid
refs/notes/commits
init_notes
!t->initialized
Cannot use notes ref %s
Failed to read notes tree referenced by %s (%s)
init_display_notes
!display_notes_trees
GIT_NOTES_DISPLAY_REF
add_note
t->initialized
remove_note
get_note
for_each_note
write_notes_tree
prune_notes
format_display_notes
display_notes_trees
notes/
Could not read %s for notes-index
load_subtree
prefix_len * 2 >= n
Failed to load %s %s into notes tree from %s
note
notes.displayref
note_tree_insert
GET_PTR_TYPE(entry) == 0
GET_PTR_TYPE(*p) == PTR_TYPE_NOTE || GET_PTR_TYPE(*p) == PTR_TYPE_SUBTREE
note_tree_remove
i == n && parent_stack[i] == tree
note_tree_consolidate
tree && parent
CLR_PTR_TYPE(parent->a[index]) == tree
for_each_note_helper
path_len < FANOUT_PATH_MAX - 1
construct_path_with_fanout
fanout < GIT_SHA1_RAWSZ
write_each_note
note_path_len <= GIT_SHA1_HEXSZ + FANOUT_PATH_SEPARATORS
write_each_note_helper
memchr(path + 3 * n, '/', path_len - (3 * n)) == NULL
tree_write_stack_init_subtree
!tws->next
tws->path[0] == '\0' && tws->path[1] == '\0'
%o %.*s%c
Notes:
Notes (%s):
refs/notes/%s
update notes cache
notes_merge
notes-merge.c
o->local_ref && o->remote_ref
!strcmp(o->local_ref, local_tree->ref)
notes_merge(o->local_ref = %s, o->remote_ref = %s)
Failed to resolve local notes ref '%s'
Could not parse local commit %s (%s)
local commit: %.7s
Failed to resolve remote notes ref '%s'
Could not parse remote commit %s (%s)
remote commit: %.7s
Cannot merge empty notes ref (%s) into empty notes ref (%s)
One merge base found (%.7s)
Multiple merge bases found. Using the first (%.7s)
Merging remote commit %.7s into local commit %.7s with merge-base %.7s
notes_merge(): result = %i, result_oid = %.7s
Committing notes in notes merge worktree at %s
partial notes commit has empty message
could not open %s
Skipping non-SHA1 entry '%s%s'
Failed to stat '%s'
Failed to write blob object from '%s'
Failed to add resolved note '%s' to notes tree
Added resolved note for object %s: %s
Finalized notes merge commit: %s
Removing notes merge worktree at %s/*
merge_from_diffs(base = %.7s, local = %.7s, remote = %.7s)
Merge result: %i unmerged notes and a dirty notes tree
Merge result: %i unmerged notes and a clean notes tree
diff_tree_remote(base = %.7s, remote = %.7s)
Cannot merge entry '%s' (%c): %.7s -> %.7s. Skipping!
diff_tree_remote
!oidcmp(&mp->obj, &obj)
is_null_oid(&mp->remote)
is_null_oid(&mp->base)
!"Invalid existing change recorded"
Stored remote change for %s: %.7s -> %.7s
verify_notes_filepair
p->one->mode == p->two->mode
!is_null_oid(&p->one->oid)
!is_null_oid(&p->two->oid)
is_null_oid(&p->one->oid)
is_null_oid(&p->two->oid)
!strcmp(p->one->path, p->two->path)
diff_tree_local(len = %i, base = %.7s, local = %.7s)
Ignoring local-only change for %s: %.7s -> %.7s
diff_tree_local
is_null_oid(&mp->local) || !oidcmp(&mp->local, &uninitialized)
!oidcmp(&p->one->oid, &mp->base)
!oidcmp(&mp->local, &uninitialized)
Stored local change for %s: %.7s -> %.7s
merge_changes(num_changes = %i)
%.7s: %.7s -> %.7s/%.7s
skipping (no remote change)
skipping (local == remote)
no local change, adopted remote
BUG: combine_notes_overwrite failed
need content-level merge
Using local notes for %s
Using remote notes for %s
Concatenating local and remote notes for %s
failed to concatenate notes (combine_notes_concatenate)
Concatenating unique lines in local and remote notes for %s
failed to concatenate notes (combine_notes_cat_sort_uniq)
Unknown strategy (%i).
local version
remote version
merge_one_change_manual(obj = %.7s, base = %.7s, local = %.7s, remote = %.7s)
Conflicts:
Auto-merging notes for %s
merge_one_change_manual
!is_null_oid(&p->remote)
CONFLICT (delete/modify): Notes for object %s deleted in %s and modified in %s. Version from %s left in tree.
content
add/add
CONFLICT (%s): Merge conflict in notes for object %s
removing from partial merge result
You have not concluded your previous notes merge (%s exists).
Please, use 'git notes merge --commit' or 'git notes merge --abort' to commit/abort the previous merge before you start a new notes merge.
NOTES_MERGE_*
You have not concluded your notes merge (%s exists).
NOTES_MERGE_WORKTREE/.test
unable to create directory %s
missing '%s'. This should not happen
cannot read note %s for object %s
blob expected in note %s for object %s
NOTES_MERGE_WORKTREE/%s
unable to create directory for '%s'
notes-merge
notes-merge: disk full?
Failed to execute internal merge
./strbuf.h
Already up-to-date!
No merge base found; doing history-less merge
create_notes_commit
notes-utils.c
Failed to write notes tree to database
Failed to find/parse commit %s
Failed to commit notes tree to database
Cannot commit uninitialized/unreferenced notes tree
manual
cat_sort_uniq
GIT_NOTES_REWRITE_MODE
GIT_NOTES_REWRITE_REF
Bad %s value: '%s'
overwrite
concatenate
notes.rewrite.
notes.rewritemode
Bad notes.rewriteMode value: '%s'
notes.rewriteref
Refusing to rewrite notes in %s (outside of refs/notes/)
invalid object type "%s"
object %s is a %s, not a %s
object %s has unknown type id %d
unable to parse object: %s
sha1 mismatch %s
tree
BUG: failed to perform bitmap walk
reuse_partial_packfile_from_bitmap
pack-bitmap.c
traverse_bitmap_commit_list
bitmap_git.result
count_bitmap_commit_list
failed to load bitmap indexes
you must specify exactly one commit to test
Bitmap v%d test (%d entries loaded)
Found bitmap for %s. %d bits / %08x checksum
Commit %s doesn't have an indexed bitmap
Verifying bitmap entries
Mismatch!
Reusing bitmaps
open_pack_bitmap
!bitmap_git.map && !bitmap_git.loaded
ignoring extra bitmap file: %s
%.*s.bitmap
Corrupted bitmap index (missing header data)
Corrupted bitmap index file (wrong header)
Unsupported version for bitmap index file (%d)
Unsupported options for bitmap index file (Git requires BITMAP_OPT_FULL_DAG)
load_pack_bitmap
bitmap_git.map && !bitmap_git.loaded
Failed to load bitmap index (corrupted?)
Corrupted bitmap pack index
Invalid XOR offset in bitmap pack index
Duplicate entry in bitmap index: %s
Object not in bitmap: %s
Missing type information for %s (%d/%d)
Building bitmaps
Duplicate entry when writing index: %s
Selecting bitmap commits
pack/tmp_bitmap_XXXXXX
unable to make temporary bitmap file readable
unable to rename temporary bitmap file to '%s'
Failed to write bitmap index. Packfile doesn't have full closure (object %s is missing)
Failed to write bitmap index
BUG: trying to write commit not in index
packfile %s index not opened
Packfile index for %s SHA1 mismatch
%s SHA1 checksum mismatch
%s SHA1 does not match its index
internal error pack-check nth-packed-object
index CRC mismatch for object %s from %s at offset %ju
cannot unpack %s from %s at offset %ju
packed %s from %s is corrupt
BUG: Duplicate object in hash
bad offset for revindex
write_idx_file
pack-write.c
index_name
pack/tmp_idx_XXXXXX
The same object %s appears twice in the pack
Failed seeking to start of '%s'
Unable to reread header of '%s'
Failed to checksum '%s'
Unexpected checksum for %s (disk corruption?)
keep
%s/pack/pack-%s.keep
bad type %d
object size is too enormous to format
unable to make temporary pack file readable
unable to make temporary index file readable
%s.pack
unable to rename temporary pack file
%s.idx
unable to rename temporary index file
PAGER
GIT_PAGER_IN_USE
COLUMNS
core.pager
LESS=FRX LV=-c
malformed build-time PAGER_ENV: %s
malformed build-time PAGER_ENV
pager.
BUG: switch '%c' (--%s) %s
BUG: option '%s' %s
BUG: switch '%c' %s
STOP_AT_NON_OPTION and KEEP_UNKNOWN don't go together
help-all
unknown switch `%c'
unknown non-ascii option in string: `%s'
fatal: %s
switch `%c' %s
option `no-%s' %s
option `%s' %s
uses incompatible flags LASTARG_DEFAULT and OPTARG
invalid short name
short name already used
uses feature not supported for dashless options
should not accept an argument
multi-word argh should use dash to separate words
takes no value
isn't available
expects a numerical value
expects a non-negative integer value with an optional k/m/g suffix
should not happen, someone must be hit on the forehead
: incompatible with %s
: incompatible with something else
requires a value
did you mean `--%s` (with two dashes ?)
Ambiguous option: %s (could be --%s%s or --%s%s)
cat <<\EOF
usage: %s
   or: %s
    %s
-NUM
%*s%s
[=%s]
[=<%s>]
[<%s>]
 <%s>
expects "always", "auto", or "never"
malformed object name '%s'
--no-
unexpected delta opcode 0
delta replay has gone wild
Could not get patch ID for %s
ref:
HOME
Could not make %s writable by group
git~1
xdg_config_home
path.c
filename
XDG_CONFIG_HOME
%s/git/%s
%s/.config/git/%s
xdg_cache_home
XDG_CACHE_HOME
%s/.cache/git/%s
SQUASH_MSG
MERGE_MSG
MERGE_RR
MERGE_MODE
branches
hooks
info/sparse-checkout
logs
logs/HEAD
logs/refs/bisect
objects
refs/bisect
packed-refs
grafts
BUG: PATHSPEC_PREFER_CWD and PATHSPEC_PREFER_FULL are incompatible
BUG: PATHSPEC_PREFER_CWD requires arguments
empty strings as pathspecs will be made invalid in upcoming releases. please use . instead if you meant to match all paths
pathspec '%s' is beyond a symbolic link
BUG: PATHSPEC_MAXDEPTH_VALID and PATHSPEC_KEEP_ORDER are incompatible
BUG: 'prefix' magic is supposed to be used at worktree's root
%s: 'literal' and 'glob' are incompatible
%s: '%s' is outside repository
BUG: error initializing pathspec_item
prefix:
invalid parameter for pathspec magic 'prefix'
attr:
Invalid pathspec magic '%.*s' in '%s'
Missing ')' at the end of pathspec magic in '%s'
Only one 'attr:' specification is allowed.
attr spec must not be empty
invalid attribute name %s
BUG: should have same number of entries
Escape character '\' not allowed as last character in attr value
cannot use '%c' for value matching
literal
icase
attr
Unimplemented pathspec magic '%c' in '%s'
global 'glob' and 'noglob' pathspec settings are incompatible
global 'literal' pathspec setting is incompatible with all other global pathspec settings
,prefix:%d)
'%s' (mnemonic: '%c')
'%s'
%s: pathspec magic not supported by this command: %s
0000
flush packet write failed
protocol error: bad line length character: %.4s
protocol error: bad line length %d
PACK
PACK
PACK ...
packet: %12s%c 
pkt-line.c
GIT_TRACE_PACKET
GIT_TRACE_PACKFILE
sideband
packet write with format failed
protocol error: impossibly long line
0123456789abcdef
packet write failed - data exceeds max packet size
packet write failed
BUG: multiple sources given to packet_read
read error
The remote end hung up unexpectedly
unable to create threaded lstat
unable to join threaded lstat
format:
tformat:
invalid --pretty format: %s
 <%.*s>
%s: %.*s%.*s <%.*s>
Date:   %s
%sDate: %s
MIME-Version: 1.0
Content-Type: text/plain; charset=%s
Content-Transfer-Encoding: 8bit
fuller
pretty.
invalid --pretty format: '%s' references an alias which points to itself
=?%s?q?
=%02X
 =?%s?q?
encoding 
(auto)
(trailers)
auto,
always,
unable to parse --pretty format
trunc)
ltrunc)
mtrunc)
bad parent line in commit
Author
Commit
Merge:
BUG: prio_queue_reverse() on non-LIFO queue
%s...
, %s.
%s: %3u%% (%u/%u)%s%s
%s: %u%s%s
GIT_ASKPASS
SSH_ASKPASS
GIT_TERMINAL_PROMPT
terminal prompts disabled
could not read %s%s
unable to read askpass response from '%s'
Too many or long arguments
unable to mark recent objects
unable to stat %s
unable to get object info for %s
unknown object type for %s: %s
unable to lookup %s
symbolic ref is dangling: %s
cannot create an empty blob in the object database
%s: can only add regular files, symbolic links or git-directories
unable to index file %s
unable to add %s to index
add '%s'
unable to stat '%s'
%s: needs update
%s needs update
%s: needs merge
%s: index file open failed
cannot stat the open index
index file smaller than expected
unable to map index file
broken index, expect %s in %s, got %s
GIT_TEST_SPLIT_INDEX
%s: cannot drop to stage #0
internal error: ce_mode is %o
Will not add file alias '%s' ('%s' already exists in index)
'%s' appears as both a file and as a directory
bad signature
bad index version %d
bad index file sha1 signature
Unknown index entry format %08x
malformed name field in the index
index uses %.4s extension, which we do not understand
ignoring %.4s extension
unordered stage entries in index
multiple stage entries for merged file '%s'
unordered stage entries for '%s'
could not freshen shared index '%s'
do_write_locked_index
read-cache.c
(flags & (COMMIT_LOCK | CLOSE_LOCK)) != (COMMIT_LOCK | CLOSE_LOCK)
GIT_ALLOW_NULL_SHA1
GIT_INDEX_VERSION
index.version
index.version set, but the value is invalid.
Using version %i
GIT_INDEX_VERSION set, but the value is invalid.
Using version %i
sharedindex_XXXXXX
cannot fix permission bits on %s
unable to open git dir: %s
sharedindex.
unable to unlink: %s
could not stat '%s'
splitindex.sharedindexexpire
Cannot walk reflogs for %s
%s@{
Reflog: %s (%s)
Reflog message: %s
refs/%s
%sHEAD
ignoring dangling symref %s.
ignoring broken ref %s.
refs_delete_ref
refs.c
refs == get_main_ref_store()
Log for %s is empty.
ref_store_transaction_begin
BUG: free called on a prepared reference transaction
BUG: unexpected reference transaction state
BUG: update called for transaction that is not open
BUG: REF_ISPRUNING set without REF_NODEREF
ref_transaction_update
refusing to update ref with bad name '%s'
BUG: create called without valid new_sha1
BUG: delete called with old_sha1 set to zeros
BUG: verify called with old_sha1 set to NULL
refs_update_ref
update_ref failed for ref '%s': %s
shorten_unambiguous_ref
offset < total_len
transfer.hiderefs
hiderefs
GIT_REF_PARANOIA
%srefs/
ref_update_reject_duplicates
multiple updates for ref '%s' not allowed.
BUG: ref_update_reject_duplicates() received unsorted list
BUG: prepare called twice on reference transaction
BUG: prepare called on a closed reference transaction
GIT_QUARANTINE_PATH
ref updates forbidden inside quarantine environment
BUG: abort called on a closed reference transaction
BUG: commit called on a closed reference transaction
refs_verify_refname_available
'%s' exists; cannot create '%s'
cannot process '%s' and '%s' at the same time
BUG: error while iterating over references
.lock
refs/%.*s
refs/tags/%.*s
refs/heads/%.*s
refs/remotes/%.*s
refs/remotes/%.*s/HEAD
Could not open '%s' for writing
could not read ref '%s'
Unexpected sha1 when deleting %s
Log for ref %s has gap after %s.
Log for ref %s unexpectedly ended on %s.
could not open '%s' for writing: %s
unexpected sha1 when writing '%s'
BUG: reference backend %s is unknown
BUG: %s ref_store '%s' initialized twice
%s/packed-refs
init_db
refs/heads
refs/tags
BUG: ref_store is type "%s" not "files" in %s
BUG: operation %s requires abilities 0x%x, but only have 0x%x
BUG: unknown ref type %d of ref %s
ref_transaction_prepare
files_transaction_prepare
refs/files-backend.c
lock_ref_for_update
cannot lock ref '%s': %s
cannot lock ref '%s': error reading reference
cannot update ref '%s': %s
couldn't close '%s.lock'
BUG: operation %s only allowed for main ref store
multiple updates for 'HEAD' (including one via its referent '%s') are not allowed
lock_raw_ref
unable to resolve reference '%s'
unable to create lock file %s.lock; non-directory in the way
unable to create directory for %s
there is a non-empty directory '%s' blocking reference '%s'
unable to resolve reference '%s': reference broken
unable to resolve reference '%s': %s
cannot lock ref '%s': reference already exists
cannot lock ref '%s': reference is missing but expected %s
cannot lock ref '%s': is at %s but expected %s
multiple updates for '%s' (including one via symref '%s') are not allowed
trying to write ref '%s' with nonexistent object %s
trying to write non-commit object %s to branch '%s'
couldn't write '%s'
ref_transaction_finish
files_transaction_finish
cannot update the ref '%s': %s
couldn't set '%s'
unable to append to '%s': %s
unable to create directory for '%s': %s
there are still logs under '%s'
repack_without_refs
unable to overwrite old ref-pack file: %s
lock_packed_refs
core.packedrefstimeout
BUG: packed-ref cache cleared while locked
couldn't read %s
# pack-refs with:
 fully-peeled 
 peeled 
packed refname is dangerous: %s
rollback_packed_refs
BUG: packed-refs not locked
commit_packed_refs
unable to fdopen packed-refs descriptor
error while iterating over references
%s/logs
%s/logs/%s
initial_ref_transaction_commit
files_initial_transaction_commit
BUG: commit called for transaction that is not open
BUG: initial ref transaction called with existing refs
BUG: initial ref transaction with old_sha1 set
unable to lock packed-refs file: %s
unable to commit packed-refs file: %s
BUG: packed refs not locked
Reference has invalid format: '%s'
pack_refs
unable to overwrite old ref-pack file
fill_ref_dir
loose refname is dangerous: %s
%s does not point to a valid object!
peel_ref
create_symref
lock_ref_sha1_basic
there are still refs under '%s'
can't verify ref '%s'
ref '%s' is at %s but expected %s
unable to fdopen %s: %s
ref: %s
unable to write symref for %s: %s
no symlink - falling back to symbolic ref
delete_refs
could not delete reference %s: %s
could not delete references: %s
could not remove reference %s
rename_ref
refs/.tmp-renamed-log
reflog for %s is a symlink
refname %s not found
refname %s is a symbolic ref, renaming it is not supported
unable to move logfile logs/%s to logs/refs/.tmp-renamed-log: %s
unable to delete old %s
Directory not empty: %s
unable to delete existing %s
unable to rename '%s' to '%s': %s
unable to write current sha1 into %s: %s
unable to lock %s for rollback: %s
unable to restore logfile %s from %s: %s
unable to restore logfile %s from logs/refs/.tmp-renamed-log: %s
directory not empty: %s
unable to move logfile %s to %s: %s
commit_ref_update
ref_iterator_begin
read_raw_ref
reflog_iterator_begin
bad ref for %s
BUG: ref_iterator_peel() called for reflog_iterator
for_each_reflog_ent
for_each_reflog_ent_reverse
cannot seek back reflog for %s: %s
cannot read %d bytes from reflog for %s: %s
BUG: reverse reflog parser had leftover data
reflog_exists
create_reflog
delete_reflog
reflog_expire
cannot fdopen %s (%s)
couldn't write %s: %s
couldn't write %s
unable to write reflog '%s' (%s)
couldn't set %s
would prune %s
prune %s
%s %s %s %ju %+05d
keep %s
BUG: peel called for empty iterator
BUG: peel called before advance for merge iterator
BUG: attempt to trim too many characters
get_ref_dir
refs/ref-cache.c
entry->flag & REF_DIR
BUG: incomplete ref_store without fill_ref_dir function
Reference directory conflict: %s
Duplicated ref, and SHA1s don't match: %s
Duplicated ref: %s
BUG: peel called before advance for cache iterator
gone
ahead %d
behind %d
ahead %d, behind %d
malformed format string %s
color:
(no branch, rebasing %s)
(no branch, bisect started on %s)
(HEAD detached at %s)
(HEAD detached from %s)
(no branch)
filter_refs: invalid type
BUG: qsort_s() failed
format: %%(end) atom missing
version:
is incompatible with --merged
is incompatible with --no-merged
malformed object name %s
must point to a commit
malformed field name: %.*s
unknown field name: %.*s
numparent
authorname
authoremail
authordate
committername
committeremail
committerdate
tagger
taggername
taggeremail
taggerdate
creator
creatordate
subject
body
trailers
flag
align
then
else
lstrip=
strip=
Integer value expected refname:lstrip=%s
rstrip=
Integer value expected refname:rstrip=%s
unrecognized %%(%s) argument: %s
short=
positive value expected objectname:short=%s
unrecognized %%(objectname) argument: %s
%%(subject) does not take arguments
%%(body) does not take arguments
%%(trailers) does not take arguments
lines=
positive value expected contents:lines=%s
unrecognized %%(contents) argument: %s
trackshort
nobracket
expected format: %%(color:<color>)
unrecognized color: %%(color:%s)
expected format: %%(align:<width>,<position>)
position=
unrecognized position:%s
width=
unrecognized width:%s
unrecognized %%(align) argument: %s
positive width expected with the %%(align) atom
right
middle
left
equals=
notequals=
unrecognized %%(if) argument: %s
ignoring ref with broken name %s
ignoring broken ref %s
malformed object at '%s'
,symref
,packed
%s^{}
missing object %s for %s
parse_object_buffer failed on %s for %s
BUG: unhandled RR_* enum
BUG: unknown %%(objectname) option
format: %%(end) atom used without corresponding atom
format: %%(if) atom used without a %%(then) atom
format: %%(then) atom used without an %%(if) atom
format: %%(then) atom used more than once
format: %%(then) atom used after %%(else)
format: %%(else) atom used without an %%(if) atom
format: %%(else) atom used without a %%(then) atom
format: %%(else) atom used more than once
Eh?  Object of type %d?
    
query_refspecs: need either src or dst
HEAD does not point to a branch
no such branch: '%s'
no upstream configured for branch '%s'
upstream branch '%s' not stored as a remote-tracking branch
Couldn't find remote ref %s
* Ignoring funny ref '%s' locally
%s...%s
Your branch is based on '%s', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)
Your branch is up-to-date with '%s'.
Your branch is ahead of '%s' by %d commit.
Your branch is ahead of '%s' by %d commits.
  (use "git push" to publish your local commits)
Your branch is behind '%s' by %d commit, and can be fast-forwarded.
Your branch is behind '%s' by %d commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)
Your branch and '%s' have diverged,
and have %d and %d different commit each, respectively.
Your branch and '%s' have diverged,
and have %d and %d different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)
Invalid refspec '%s'
make_remote
remote.c
replaced == NULL
URL:
Push:
Pull:
refs/heads/%s:refs/heads/%s
HEAD:refs/heads/%s
pushremote
insteadof
pushinsteadof
pushdefault
Config remote shorthand cannot begin with '/': %s
skipdefaultupdate
skipfetchall
pushurl
more than one receivepack given, using the first
more than one uploadpack given, using the first
tagopt
proxy
proxyauthmethod
Cannot fetch both %s and %s to %s
%s usually tracks %s, not %s
%s tracks both %s and %s
Internal error
Key '%s' of pattern had no '*'
Value '%s' of pattern has no '*'
src refspec %s does not match any.
src refspec %s matches more than one.
%s cannot be resolved to branch.
unable to delete '%s': remote ref does not exist
unable to push to unqualified destination: %s
The destination refspec neither matches an existing ref on the remote nor
begins with refs/, and we are unable to guess a prefix based on the source ref.
dst refspec %s matches more than one.
dst ref %s receives from more than one src.
branch '%s' has no remote for pushing
push refspecs for '%s' do not include '%s'
push has no destination (push.default is 'nothing')
cannot resolve 'simple' push to a single destination
BUG: unhandled push situation
push destination '%s' on remote '%s' has no local tracking branch
query_refspecs_multiple: need either src or dst
cannot parse expected object name '%s'
replace depth too high for object %s
bad replace ref name: %s
duplicate replace ref: %s
info/grafts
rr-cache/%s
rr-cache/%s/%s
rr-cache/%s/%s.%d
Could not read index
gc.rerereresolved
gc.rerereunresolved
rr-cache
unable to open rr-cache directory
rerere.enabled
rerere.autoupdate
Could not create directory %s
corrupt MERGE_RR
Could not open %s
Could not write %s
There were errors while writing %s (%s)
Failed to flush %s
Could not parse conflict hunks in %s
postimage
Recorded resolution for '%s'.
Resolved '%s' using previous resolution.
cannot unlink stray '%s'
Recorded preimage for '%s'
thisimage
Writing %s failed
Staged '%s' using previous resolution.
Could not parse conflict hunks in '%s'
Failed to update conflicted state in '%s'
no remembered resolution for '%s'
no remembered resolution for %s
cannot unlink %s
Updated preimage for '%s'
Forgot resolution for %s
write_rr
rerere.c
rr->items[i].util != RERERE_RESOLVED
id->variant >= 0
%s.%d
%s%c
%s%c
unable to write rerere record
%o%c
Index records invalid resolve-undo information
cannot unmerge '%s'
unable to add index blob to traversal
unknown option `%s'
--stdin given twice?
cannot combine --reverse with --walk-reflogs
cannot combine --walk-reflogs with history-limiting options
cannot combine --parents and --children
cannot combine --reverse with --graph
cannot combine --walk-reflogs with --graph
cannot combine --no-walk with --graph
cannot use --grep-reflog without --walk-reflogs
--first-parent is incompatible with --bisect
treesame
bad tree %s
bad object %s
reflog of '%s' references pruned commits
Invalid symmetric difference expression %s
Invalid revision range %s
--no-walk
--do-walk
--no-walk=
max-count
'%s': not a non-negative integer
max-age
since
after
min-age
before
until
--first-parent
--walk-reflogs
bad --default argument
--simplify-merges
--simplify-by-decoration
--author-date-order
--early-output
--early-output=
--show-all
--remove-empty
--boundary
--left-right
--left-only
--left-only is incompatible with --right-only or --cherry
--right-only
--right-only is incompatible with --left-only
--cherry
--cherry is incompatible with --left-only
--count
--cherry-mark
--cherry-mark is incompatible with --cherry-pick
--cherry-pick
--cherry-pick is incompatible with --cherry-mark
--verify-objects
--unpacked=
--unpacked=<packfile> no longer supported.
--cc
--pretty=
--format=
--expand-tabs
--no-expand-tabs
--expand-tabs=
--show-notes
--notes
--show-signature
--no-show-signature
--show-linear-break
                    ..........
--show-linear-break=
--show-notes=
--notes=
--standard-notes
--no-standard-notes
--oneline
oneline
--graph
--root
--no-commit-id
--abbrev
--abbrev=
--abbrev-commit
--no-abbrev-commit
--full-diff
--full-history
--relative-date
--log-size
grep-reflog
--grep-debug
--basic-regexp
--extended-regexp
--regexp-ignore-case
--fixed-strings
--perl-regexp
--invert-grep
encoding
children
--show-linear-break and --graph are incompatible
glob
sorted
unsorted
invalid argument to --no-walk
refs/bisect/%s
options not supported in --stdin mode
--merge without HEAD?
--merge without MERGE_HEAD?
your current branch appears to be broken
your current branch '%s' does not have any commits yet
bad tag
%s is unknown object
--ancestry-path given but there are no bottom commits
cannot simplify commit %s (because of %s)
cannot simplify commit %s (invalid %s)
bad tree compare for commit %s
update_treesame %s
mark_redundant_parents %d %d %d %d
compact_treesame %u
compact_treesame parents mismatch
reflog 
%.*s <%.*s>
Failed to traverse parents of commit %s
Failed to simplify parents of commit %s
standard output
standard error
cannot create %s pipe for %s: %s
run-command.c
trace: run_command:
open /dev/null failed
cannot fork() for %s
BUG: run_command with a pipe can cause deadlock
cannot create pipe
cannot create thread
pthread_join failed
hooks/%s
BUG: command is empty
BUG: shell command is empty
|&;<>()$`\"' 
*?[#~=%
%s "$@"
blocking all signals
disabling cancellation
BUG: %s
re-enabling cancellation
restoring signal mask
trace: run_command: running exit handler for pid %ju
waitpid for %s failed
waitpid is confused (%s)
%s died of signal %d
exec '%s': cd to '%s' failed
dup2() in child failed
close() in child failed
sigprocmask failed restoring signals
cannot run %s
cannot exec '%s'
unable to block SIGPIPE in async thread
poll failed
run_processes_parallel: preparing to run up to %d tasks
BUG: you need to specify a get_next_task function
BUG: bookkeeping is hard
poll
read
run_processes_parallel: done
delete-refs
no-thin
the receiving end does not support --signed push
not sending a push certificate since the receiving end does not support --signed push
the receiving end does not support --atomic push
the receiving end does not support push options
 report-status
 quiet
%s %s %s%c%s
%s %s %s
send-pack: unable to fork off sideband demultiplexer
the receiving end asked to sign an invalid nonce <%.*s>
certificate version 0.1
pusher %s 
pushee %s
nonce %s
push-option %s
failed to sign the push certificate
push-cert%c%s
atomic push failed for ref %s. status: %d
--revs
--shallow
git pack-objects failed
error writing to pack-objects
pack-objects died of signal %d
unpack 
unable to parse remote unpack status: %s
remote unpack failed: %s
invalid ref status from remote: %s
remote reported status on unknown ref: %s
remote reported status on unexpected ref: %s
sequencer
Conflicts:
cannot read '%s': %s
unexpected end of file
stored pre-cherry-pick HEAD file '%s' is corrupt
cannot abort from a branch yet to be born
You seem to have moved HEAD. Not rewinding, check your HEAD!
sequencer_pick_revisions
sequencer.c
opts->revs
%s: can't cherry-pick a %s
%s: bad revision
BUG: expected exactly one commit from walk
can't revert as initial commit
GIT_COMMITTER_NAME
GIT_COMMITTER_EMAIL
sequencer/head
no cherry-pick or revert in progress
cannot resolve HEAD
sequencer/abort-safety
git %s: failed to read the index
git %s: failed to refresh the index
rebase -i
Unknown action: %d
cannot rebase: You have unstaged changes.
could not remove CHERRY_PICK_HEAD
cannot amend non-existing commit
invalid file: '%s'
invalid contents: '%s'
You have uncommitted changes in your working tree. Please, commit them
first and then run 'git rebase --continue' again.
could not commit staged changes.
rebase-merge/amend
--amend
-S%s
--cleanup=strip
--cleanup=verbatim
--allow-empty
--allow-empty-message
'\\''
rebase-merge/author-script
rebase-merge/message
rebase-merge/git-rebase-todo
sequencer/todo
malformed options sheet: '%s'
rebase-merge/gpg_sign_opt
rebase-merge/allow_rerere_autoupdate
rebase-merge/verbose
rebase-merge/strategy
rebase-merge/strategy_opts
sequencer/opts
options.no-commit
options.edit
options.signoff
options.record-origin
options.allow-ff
options.mainline
options.strategy
options.gpg-sign
options.strategy-option
options.allow-rerere-auto
invalid key: %s
invalid value for %s: %s
could not read '%s'.
please fix this using 'git rebase --edit-todo'.
unusable instruction sheet: '%s'
no commits parsed.
cannot cherry-pick during a revert.
cannot revert during a cherry-pick.
invalid line %d: %.*s
cannot '%s' without a previous commit
pick
reword
noop
Unknown command: %d
rebase-merge/done
rebase-merge/end
your local changes would be overwritten by %s.
commit your changes or stash them to proceed.
rebase-merge/stopped-sha
rebase-merge/rewritten-pending
%.*s %s
rebase-merge/rewritten-list
pick_commits
!(opts->signoff || opts->no_commit || opts->record_origin || opts->edit)
Rebasing (%d/%d)%s
Stopped at %s...  %.*s
cannot read HEAD
could not read orig-head
could not read 'onto'
finish
%s onto %s
could not update %s
returning to %s
could not update HEAD to %s
--for-rewrite=rebase
Successfully rebased and updated %s.
could not lock '%s'
could not write to '%s'
failed to finalize '%s'.
rebase-merge/msgnum
your index file is unmerged.
commit %s is a merge but no -m option was given.
commit %s does not have parent %d
mainline was specified but commit %s is not a merge.
%s: cannot parse parent commit %s
Revert "
This reverts commit 
, reversing
changes made to 
could not rename '%s' to '%s'
could not revert %s... %s
could not apply %s... %s
%s... %s
parent of %s
GIT_AUTHOR_NAME='
'\\%c'
GIT_AUTHOR_EMAIL='
GIT_AUTHOR_DATE='@
%s: fast-forward
0123456789
unexpected 1st line of squash message:
%.*s
invalid 1st line of squash message:
%.*s
This is a combination of %d commits.
need a HEAD to fixup
could not read HEAD
could not read HEAD's commit message
cannot write '%s'
This is the 1st commit message:
could not read commit message of %s
This is the commit message #%d:
The commit message #%d will be skipped:
unknown command: %d
rebase-merge/message-squash
rebase-merge/message-fixup
(empty tree)
%s: Unable to write new index file
could not write eol to '%s'
GIT_CHERRY_PICK_HELP
after resolving the conflicts, mark the corrected paths
with 'git add <paths>' or 'git rm <paths>'
after resolving the conflicts, mark the corrected paths
with 'git add <paths>' or 'git rm <paths>'
and commit the result with 'git commit'
could not resolve HEAD commit
unable to update cache tree
could not parse commit %s
could not parse parent commit %s
You can amend the commit now, with
  git commit --amend %s
Once you are satisfied with your changes, run
  git rebase --continue
Could not apply %s... %.*s
%s/patch
%s/message
Executing: %s
could not read index
execution failed: %s
%sYou can fix the problem, and then run
  git rebase --continue
and made changes to the index and/or the working tree
execution succeeded: %s
but left changes to the index and/or the working tree
Commit or stash your changes, and then run
  git rebase --continue
rebase-merge/onto
Applied autostash.
store
cannot store %s
Applying autostash resulted in conflicts.
Your changes are safe in the stash.
You can run "git stash pop" or "git stash drop" at any time.
rebase-merge/autostash
%s %s %.*s
empty commit set passed
a cherry-pick or revert is already in progress
try "git cherry-pick (--continue | --quit | --abort)"
could not create sequencer directory '%s'
could not lock HEAD
info/rev-cache
info/refs
%s_XXXXXX
%s^{}
%s/info/packs
unrecognized: %s
P %s
'%s' is outside repository
bad flag '%s' used after filename
ambiguous argument '%s': both revision and filename
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
/refs
is_nonbare_repository_dir
setup.c
orig_path_len != 0
unable to set up work tree using invalid config
This operation must be run in a work tree
Expected git repo version <= %d, found %d
unknown repository extensions found:
Error opening '%s'
Too large to be a .git file: '%s'
Error reading %s
Invalid gitfile format: %s
No path in gitfile: %s
Not a git repository: %s
BUG: unknown error code
%.*s%.*s
ignoring git dir '%s': %s
Unable to read current working directory
Not a git repository (or any parent up to mount point %s)
Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).
BUG: unhandled setup_git_directory_1() result
umask
group
world
everybody
Problem with core.sharedRepository filemode value (0%.3o).
The owner of files must always have read and write permissions.
open /dev/null or dup failed
fork failed
setsid failed
%s: no such path in the working tree.
Use 'git <command> -- <path>...' to specify paths that do not exist locally.
ambiguous argument '%s': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
extensions.
preciousobjects
GIT_CEILING_DIRECTORIES
GIT_DISCOVERY_ACROSS_FILESYSTEM
failed to stat '%*s%s%s'
'$%s' too big
Not a git repository: '%s'
core.bare and core.worktree do not make sense
Could not chdir to '%s'
Could not come back to cwd
Not a git repository (or any of the parent directories): %s
/config
BUG: assertion failed in binary search
raceproof_create_file
sha1_file.c
*path
%s/pack/pack-%s.%s
objects/info/alternates
unable to fdopen alternates lockfile
unable to read alternates file
unable to move new alternates file into place
path '%s' does not exist
%s/.git/objects
reference repository '%s' as a linked checkout is not supported yet.
reference repository '%s' is not a local repository.
%s/shallow
reference repository '%s' is shallow
%s/info/grafts
reference repository '%s' is grafted
GIT_ALTERNATE_OBJECT_DIRECTORIES
pack_report: getpagesize()            = %10ju
pack_report: core.packedGitWindowSize = %10ju
pack_report: core.packedGitLimit      = %10ju
pack_report: pack_used_ctr            = %10u
pack_report: pack_mmap_calls          = %10u
pack_report: pack_open_windows        = %10u / %10u
pack_report: pack_mapped              = %10ju / %10ju
BUG: pack_name does not end in .pack
%.*s.idx
mmap failed
pack '%s' still has open windows to it
BUG: want to close pack marked 'do-not-close'
packfile %s cannot be accessed
offset beyond end of packfile (truncated pack?)
offset before end of packfile (broken .idx?)
packfile %s cannot be mapped
.idx
bad object header
delta data unpack-initial failed
failed to validate delta base reference at offset %ju from %s
BUG: unpack_entry: left loop at a valid delta
unknown object type %i at offset %ju in %s
failed to read delta base object %s at offset %ju from %s
failed to unpack compressed delta at offset %ju from %s
offset before start of pack index for %s (corrupt index?)
offset beyond end of pack index for %s (truncated index?)
GIT_DEBUG_LOOKUP
%02x%02x%02x... lo %u hi %u nr %u
lo %u hi %u rg %u mi %u
failed to read object %s
replacement %s not found for %s
loose object %s (stored in %s) is corrupt
packed object %s (stored in %s) is corrupt
tree 
object 
unable to write sha1 filename %s
unable to set permission to '%s'
cannot read sha1_file for %s
open("%s")
%s: failed to insert into database
readlink("%s")
HEAD
%s: unsupported file type
%s is not a valid object
%s is not a valid '%s' object
invalid loose object subdirectory: %x
%02x
%02x%s
unable to mmap %s
unable to unpack header of %s
unable to parse header of %s
unable to unpack contents of %s
sha1 mismatch for %s (expected %s)
BUG: strbuf_setlen() beyond buffer
!strbuf_slopbuf[0]
0123456789abcdef
%s: ignoring alternate object stores, nesting too deep.
unable to normalize object directory: %s
unable to normalize alternate object path: %s
object directory %s does not exist; check .git/objects/info/alternates.
%s/info/alternates
index file %s is too small
index file %s is version %u and is not supported by this binary (try upgrading GIT to a newer version)
non-monotonic index %s
wrong index v1 file size in %s
wrong index v2 file size in %s
GIT_MMAP_LIMIT
attempting to mmap %ju over limit %ju
packfile %s index unavailable
packfile %s not a regular file
packfile %s size changed
cannot determine file descriptor flags
cannot set FD_CLOEXEC
file %s is far too short to be a packfile
file %s is not a GIT packfile
packfile %s is version %u and not supported (try upgrading GIT to a newer version)
packfile %s claims to have %u objects while index indicates %u objects
end of packfile %s is unavailable
packfile %s signature is unavailable
packfile %s does not match index
unable to open object pack directory: %s
.bitmap
object file %s is empty
invalid object type
I am totally screwed
GIT_TRACE_PACK_ACCESS
%s %ju
unable to unpack %s header with --allow-unknown-type
unable to unpack %s header
unable to parse %s header with --allow-unknown-type
unable to parse %s header
insufficient permission for adding an object to repository database %s
unable to create temporary file
unable to write sha1 file
unable to deflate new object %s (%d)
deflateEnd on object %s failed (%d)
confused by unstable object source data for %s
tmp_obj_XXXXXX
/tmp_obj_XXXXXX
file write error
sha1 file
error when closing sha1 file
failed to read object %s at offset %ju from %s
index_stream_convert_blob
would_convert_to_git_filter_fd(path)
corrupt commit
corrupt tag
short read
unable to get sha1 of object %u in %s
corrupt loose object '%s'
garbage at end of loose object '%s'
committish
treeish
unknown hint type for '%s': %s
%.*s: expected %s type, but the object dereferences to %s type
BUG: incompatible flags for get_sha1_with_context
BUG: multiple get_short_sha1 disambiguator flags
short SHA1 %s is ambiguous
The candidates are:
 %ad - %s
  %s %s%s
unknown type
 to 
@{upstream}
@{u}
@{push}
Invalid object name '%.*s'.
commit}
tag}
tree}
blob}
object}
refname '%.*s' is ambiguous.
Git normally never creates a ref that ends with 40 hex characters
because it will be ignored when you just specify 40-hex. These refs
may be created by mistake. For example,
  git checkout -b $br $(git rev-parse ...)
where "$br" is somehow empty and a 40-hex ref is created. Please
examine these refs and maybe delete them. Turn this message off by
running "git config advice.objectNameWarning false"
Log for '%.*s' only goes back to %s.
Log for '%.*s' only has %d entries.
relative path syntax can't be used outside working tree.
Path '%s' is in the index, but not at stage %d.
Did you mean ':%d:%s'?
Path '%s' is in the index, but not '%s'.
Did you mean ':%d:%s' aka ':%d:./%s'?
Path '%s' exists on disk, but not in the index.
Path '%s' does not exist (neither on disk nor in the index).
Path '%s' exists on disk, but not in '%.*s'.
Path '%s' exists, but not '%s'.
Did you mean '%.*s:%s' aka '%.*s:./%s'?
Path '%s' does not exist in '%.*s'
BUG: is_repository_shallow must not be called before set_alternate_shallow_file
bad shallow line: %s
shallow_XXXXXX
failed to write to %s
GIT_TRACE_SHALLOW
shallow.c
shallow: prepare_shallow_info
shallow: remove_nonexistent_theirs_shallow
shallow: assign_shallow_commits_to_refs
Removing %s from .git/shallow
shallow %s
BUG: shallow must be initialized by now
shallow file has changed since we read it
shallow %s
BUG: pool size too small for %d in paint_alloc()
shallow: post_assign_shallow
        
%s%s: protocol error: no band designator
remote: 
%.*s%s%c
%s%s: protocol error: bad band #%d
%04x
BUG: signal out of range: %d
corrupt link extension (too short)
corrupt delete bitmap in link extension
corrupt replace bitmap in link extension
garbage at the end of link extension
corrupt link extension, entry %d should have non-zero length name
prepare_to_write_split_index
split-index.c
!(ce->ce_flags & CE_STRIP_NAME)
position for replacement %d exceeds base index size %d
too many replacements (%d vs %d)
entry %d is marked as both replaced and deleted
corrupt link extension, entry %d should have zero length name
position for delete %d exceeds base index size %d
you want to use way too much memory
`pos' is too far after the end of the buffer
`pos + len' is too far after the end of the buffer
BUG: your vsnprintf is broken (returned %d)
BUG: your vsnprintf is broken (insatiable)
strbuf_getwholeline
strbuf.c
r == -1
Out of memory, getdelim failed
"<>&
&quot;
&lt;
&gt;
&amp;
%u.%2.2u GiB
%u.%2.2u MiB
%u.%2.2u KiB
%u bytes
%+05d
%%%02x
%s:%p
internal error in string_list_split(): list->strdup_strings must be set
internal error in string_list_split_in_place(): list->strdup_strings must not be set
.gitmodules
Cannot change unmerged .gitmodules, resolve merge conflicts first
Could not find section in .gitmodules where path=%s
.path
Could not update .gitmodules entry %s
Could not remove .gitmodules entry for %s
staging updated .gitmodules failed
/.gitmodules
in unpopulated submodule '%s'
Pathspec '%s' is in submodule '%.*s'
bad --ignore-submodules argument: %s
%s(revision walker failed)
--submodule=diff
--line-prefix=%s
--src-prefix=%s%s/
--dst-prefix=%s%s/
(diff failed)
find_unpushed_submodules
--remotes=%s
Pushing submodule '%s'
Unable to push submodule '%s'
--recurse-submodules-default
'%s' not recognized as a git repository
--porcelain=2
-uno
Could not run 'git status --porcelain=2' in submodule %s
BUG: invalid status --porcelain=2 line %s
S..U
'git status --porcelain=2' failed in submodule %s
foreach
test -f .git
--porcelain
--ignore-submodules=none
-uall
--ignored
could not start 'git status' in submodule '%s'
could not run 'git status' in submodule '%s'
BUG: could not get submodule information for '%s'
submodule '%s' has dirty index
Failed to merge submodule %s (%s)
not checked out
commits not present
commits don't follow merge-base
merge following commits not found
not fast-forward
Found a possible merge resolution for the submodule:
If this is correct simply add it to the index for example
by using:
  git update-index --cacheinfo 160000 %s "%s"
which will accept this suggestion.
multiple merges found
could not lookup name for submodule '%s'
BUG: we don't know how to pass the flags down?
could not recurse into submodule '%s'
--stage
could not start ls-files in ..
160000
BUG: returned path string doesn't match cwd?
ls-tree returned unexpected return code %d
submodule.fetchjobs
negative values not allowed for submodule.fetchJobs
fetch.recursesubmodules
GIT_CONFIG_PARAMETERS
%sSubmodule %s contains untracked content
%sSubmodule %s contains modified content
(new submodule)
(submodule deleted)
(not initialized)
(commits not present)
%s%sSubmodule %s 
 %s%s
%s:%s
 (rewind)
Could not run 'git rev-list <commits> --not --remotes -n 1' command in submodule %s
process for submodule '%s' failed
--push-option=%s
%s%s/
Fetching submodule %s%s
--submodule-prefix
could not reset submodule index
objects/
--merges
--ancestry-path
 %h: %m %s
relocate_gitdir for submodule '%s' with more than one worktree not supported
Migrating git directory of '%s%s' from
'%s' to
'%s'
%s:.gitmodules
fetchrecursesubmodules
Invalid parameter '%s' for config option 'submodule.%s.ignore'
invalid value for %s
WORKTREE
%s:.gitmodules, multiple configurations found for 'submodule.%s.%s'. Skipping second one!
status=
cannot fork to run subprocess '%s'
initialization for subprocess '%s' failed
%s-client
Could not write client identification
version=%d
Could not write requested version
Could not write flush packet
-server
Unexpected line '%s', expected %s-server
<flush packet>
version=
Unexpected line '%s', expected version
Unexpected line '%s', expected flush
Version %d not supported
capability=%s
Could not write requested capability
capability=
subprocess '%s' requested unsupported capability '%s'
%s: cannot verify a non-tag object of type %s.
missing object referenced by '%.*s'
type 
Unknown type %s
Object %s not a tag
no signature found
BUG: fdopen_tempfile() called for inactive object
BUG: fdopen_tempfile() called for open object
BUG: get_tempfile_path() called for inactive object
BUG: get_tempfile_fd() called for inactive object
BUG: get_tempfile_fp() called for inactive object
BUG: reopen_tempfile called for an open object
BUG: reopen_tempfile called for an inactive object
BUG: rename_tempfile called for inactive object
BUG: prepare_tempfile_object called for active object
BUG: prepare_tempfile_object called for improperly-reset object
BUG: only one tmp_objdir can be used at a time
%s/incoming-XXXXXX
%s=%s%c%s
GIT_TRACE_SETUP
trace.c
setup: git_dir: %s
setup: git_common_dir: %s
setup: worktree: %s
setup: cwd: %s
setup: prefix: %s
GIT_TRACE
unable to write trace for %s: %s
GIT_TRACE_BARE
%02d:%02d:%02d.%06ld 
%s:%d 
performance: %.9f s
could not open '%s' for tracing: %s
unknown trace value for '%s': %s
         If you want to trace into a file, then please set %s
         to an absolute pathname (starting with /)
GIT_TRACE_PERFORMANCE
git command:%s
could not rename temporary file to %s
trailer.
where
unknown value '%s' for key '%s'
ifexists
ifmissing
separators
start
addIfDifferent
addIfDifferentNeighbor
doNothing
BUG: trailer.c: unhandled type %d
could not read input file '%s'
file %s is not a regular file
file %s is not writable by user
git-interpret-trailers-XXXXXX
could not open temporary file
empty trailer token in trailer '%.*s'
$ARG
running trailer command '%s' failed
%s%c %s
Signed-off-by: 
(cherry picked from commit 
updating local tracking ref '%s'
update by push
remote part of refspec is not a valid name in %s
BUG: taking over transport requires non-NULL smart_options field.
GIT_PROTOCOL_FROM_USER
BUG: invalid protocol_allow_config type
transport '%s' not allowed
No remote provided to transport_get()
rsync:
git-over-rsync is no longer supported
file://
git://
ssh://
git+ssh://
ssh+git://
This transport does not support using --set-upstream
Failed to push all needed submodules!
Done
Operation not supported by protocol
To %s
[no match]
remote does not support deleting refs
new shallow roots not allowed
[remote rejected]
[remote failure]
remote failed to report status
atomic push failed
%s:%s
%s (%s)
 %c %-*s 
%s -> %s
GIT_ALLOW_PROTOCOL
protocol.%s.allow
protocol.allow
user
unknown value for config '%s': %s
Could not read bundle '%s'.
transport: invalid depth option '%s'
pre-push
%s %s %s %s
The following submodule paths contain changes that can
not be found on any remote:
Please try
git push --recurse-submodules=on-demand
or cd to the path and use
git push
to push them to a remote.
Aborting.
Would set upstream of '%s' to '%s' of '%s'
--git-dir=%s
--format=%(objectname) %(refname)
invalid line while parsing alternate refs: %s
GIT_TRANSPORT_HELPER_DEBUG
remote input
remote output
option %s 
git-remote-%s
Unable to find remote helper for '%s'
Can't dup helper output fd
capabilities
Debug: Got cap %s
import
bidi-import
export
check-connectivity
refspec 
connect
export-marks 
import-marks 
no-private-update
Unknown mandatory capability %s. This remote helper probably needs newer version of Git.
This remote helper should implement refspec capability.
Debug: Capabilities complete.
Debug: Remote helper: -> %s
Full write to remote helper failed
Debug: Remote helper: Waiting...
Debug: Remote helper quit.
Debug: Remote helper: <- %s
verbosity
family
unsupported
%s unexpectedly said: '%s'
list for-push
list
Malformed response in ref list: %s
unchanged
Could not read ref %s
Debug: Read ref listing.
servpath
Setting remote service path not supported by protocol.
Invalid remote service path.
connect %s
Debug: Smart transport connection ready.
fallback
Debug: Falling back to dumb transport.
Unknown response to connect: %s
cloning
fetch %s %s
lock 
%s also locked %s
Couldn't run fast-import
import %s
Error while running fast-import
fast-import
--stats
--cat-blob-fd=%d
No refs in common and none specified; doing nothing.
Perhaps you should specify a branch such as 'master'.
push 
helper %s does not support dry-run
pushcert
helper %s does not support --signed
helper %s does not support --signed=if-asked
helper %s does not support 'push-option'
update by helper
error 
expected ok/error, helper said '%s'
helper reported unexpected status of %s
remote-helper doesn't support push; refspec needed
helper %s does not support 'force'
export
--refspec
Couldn't run fast-export
Error while running fast-export
%s.tmp
--use-done-feature
--signed-tags=verbatim
--signed-tags=warn-strip
--export-marks=%s.tmp
--import-marks=%s
Debug: Disconnecting.
Operation not supported by protocol.
Can't connect to subservice %s.
Can't start thread for copying data: %s
Git to program copy
Program to git copy
%s is readable
read(%s) failed
%s EOF (with %i bytes in buffer)
Read %i bytes from %s (buffer now at %i)
GIT_TRANSLOOP_DEBUG
Transfer loop debugging: %s
%s is writable
write(%s) failed
Wrote %i bytes to %s (buffer now at %i)
Closed %s.
%s thread failed
%s thread failed to join: %s
emit_path
tree-diff.c
t || tp
Object %s not a tree
Commit %s in submodule path %s%s not found
Invalid commit %s in submodule path %s%s
unable to read tree %s
too-short tree object
malformed mode in tree entry
empty filename in tree entry
too-short tree file
tree-walk.c
Your local changes to the following files would be overwritten by checkout:
%%sPlease commit your changes or stash them before you switch branches.
Your local changes to the following files would be overwritten by checkout:
Your local changes to the following files would be overwritten by merge:
%%sPlease commit your changes or stash them before you merge.
Your local changes to the following files would be overwritten by merge:
Your local changes to the following files would be overwritten by %s:
%%sPlease commit your changes or stash them before you %s.
Your local changes to the following files would be overwritten by %s:
Updating the following directories would lose untracked files in them:
The following untracked working tree files would be removed by checkout:
%%sPlease move or remove them before you switch branches.
The following untracked working tree files would be removed by checkout:
The following untracked working tree files would be removed by merge:
%%sPlease move or remove them before you merge.
The following untracked working tree files would be removed by merge:
The following untracked working tree files would be removed by %s:
%%sPlease move or remove them before you %s.
The following untracked working tree files would be removed by %s:
The following untracked working tree files would be overwritten by checkout:
%%sPlease move or remove them before you switch branches.
The following untracked working tree files would be overwritten by checkout:
The following untracked working tree files would be overwritten by merge:
%%sPlease move or remove them before you merge.
The following untracked working tree files would be overwritten by merge:
The following untracked working tree files would be overwritten by %s:
%%sPlease move or remove them before you %s.
The following untracked working tree files would be overwritten by %s:
Entry '%s' overlaps with '%s'.  Cannot bind.
Cannot update sparse checkout: the following entries are not up-to-date:
The following working tree files would be overwritten by sparse checkout update:
The following working tree files would be removed by sparse checkout update:
Cannot update submodule:
unpack_trees takes at most %d trees
Merge requires file-level merging
Sparse checkout leaves no entry on working directory
Cannot do a twoway merge of %d trees
Cannot do a bind merge of %d trees
Cannot do a oneway merge of %d trees
* unpack mask %lu, dirmask %lu, cnt %d 
ent#%d %06o %s
programming error in a caller of mark_ce_used_same_name
submodule update strategy not supported for submodule '%s'
%.*s/
BUG: both update and delete flags are set on %s
Checking out files
Aborting
Entry '%s' would be overwritten by merge. Cannot merge.
Entry '%s' not uptodate. Cannot merge.
Updating '%s' would lose untracked files in it
Untracked working tree file '%s' would be overwritten by merge.
Untracked working tree file '%s' would be removed by merge.
Entry '%s' not uptodate. Cannot update sparse checkout.
Working tree file '%s' would be overwritten by sparse checkout update.
Working tree file '%s' would be removed by sparse checkout update.
Submodule '%s' cannot checkout new HEAD.
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+.-
invalid URL scheme name or missing '://' suffix
:/?#[]@!$&'()*+,;=
invalid %XX escape sequence
file:
missing host and scheme is not 'file:'
a 'file:' URL may not have a port number
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-[:]*
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-[:]
invalid characters in host name
http:
https:
invalid port number
invalid '..' path segment
 <>"%{}|\^`
%%%02X
fatal: recursion detected in die handler
fatal: recursion detected in die_errno handler
fatal: 
die() called many times. Recursion error or racy threaded death!
usage: 
BUG: %s:%d: 
BUG: 
funcname
xfuncname
cachetextconv
wordregex
textconv/%s
!^(.*[ 
])?(is[ 
]+new|renames|is[ 
]+separate)([ 
].*)?$
!^[ 
]*with[ 
].*$
]*((procedure|function)[ 
]+.*)$
]*((package|protected|task)[ 
]+.*)$
[a-zA-Z][a-zA-Z0-9_]*|[-+]?[0-9][0-9#_.aAbBcCdDeEfF]*([eE][+-]?[0-9_]+)?|=>|\.\.|\*\*|:=|/=|>=|<=|<<|>>|<>|[^[:space:]]|[
fortran
!^([C*]|[ 
]*!)
!^[ 
]*MODULE[ 
]+PROCEDURE[ 
]*((END[ 
]+)?(PROGRAM|MODULE|BLOCK[ 
]+DATA|([^'" 
]+[ 
]+)*(SUBROUTINE|FUNCTION))[ 
]+[A-Z].*)$
[a-zA-Z][a-zA-Z0-9_]*|\.([Ee][Qq]|[Nn][Ee]|[Gg][TtEe]|[Ll][TtEe]|[Tt][Rr][Uu][Ee]|[Ff][Aa][Ll][Ss][Ee]|[Aa][Nn][Dd]|[Oo][Rr]|[Nn]?[Ee][Qq][Vv]|[Nn][Oo][Tt])\.|[-+]?[0-9.]+([AaIiDdEeFfLlTtXx][Ss]?[-+]?[0-9.]*)?(_[a-zA-Z0-9][a-zA-Z0-9_]*)?|//|\*\*|::|[/<>=]=|[^[:space:]]|[
fountain
^((\.[^.]|(int|ext|est|int\.?/ext|i/e)[. ]).*)$
-]+|[^[:space:]]|[
]*(<[Hh][1-6]([ 
].*)?>.*)$
[^<>= 
]+|[^[:space:]]|[
java
!^[ 
]*(catch|do|for|if|instanceof|new|return|switch|throw|while)
]*(([A-Za-z_][A-Za-z_0-9]*[ 
]+)+[A-Za-z_][A-Za-z_0-9]*[ 
]*\([^;]*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lL]?|[-+*/<>%&^|=!]=|--|\+\+|<<=?|>>>?=?|&&|\|\||[^[:space:]]|[
matlab
^[[:space:]]*((classdef|function)[[:space:]].*)$|^%%[[:space:]].*$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|[=~<>]=|\.[*/\^']|\|\||&&|[^[:space:]]|[
objc
!^[ 
]*(do|for|if|else|return|switch|while)
]*([-+][ 
]*\([ 
]*[A-Za-z_][A-Za-z_0-9* 
]*\)[ 
]*[A-Za-z_].*)$
]*(([A-Za-z_][A-Za-z_0-9]*[ 
]+)+[A-Za-z_][A-Za-z_0-9]*[ 
]*\([^;]*)$
^(@(implementation|interface|protocol)[ 
].*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lL]?|[-+*/<>%&^|=!]=|--|\+\+|<<=?|>>=?|&&|\|\||::|->|[^[:space:]]|[
pascal
^(((class[ 
]+)?(procedure|function)|constructor|destructor|interface|implementation|initialization|finalization)[ 
]*.*)$
^(.*=[ 
]*(class|record).*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|<>|<=|>=|:=|\.\.|[^[:space:]]|[
^package .*
^sub [[:alnum:]_':]+[ 
]*(\([^)]*\)[ 
]*)?(:[^;#]*)?(\{[ 
]*)?(#.*)?$
^(BEGIN|END|INIT|CHECK|UNITCHECK|AUTOLOAD|DESTROY)[ 
]*(\{[ 
]*)?(#.*)?$
^=head[0-9] .*
[[:alpha:]_'][[:alnum:]_']*|0[xb]?[0-9a-fA-F_]*|[0-9a-fA-F_]+(\.[0-9a-fA-F_]+)?([eE][-+]?[0-9_]+)?|=>|-[rwxoRWXOezsfdlpSugkbctTBMAC>]|~~|::|&&=|\|\|=|//=|\*\*=|&&|\|\||//|\+\+|--|\*\*|\.\.\.?|[-+*/%.^&<>=!|]=|=~|!~|<<|<>|<=>|>>|[^[:space:]]|[
 ]*(((public|protected|private|static)[
 ]+)*function.*)$
 ]*(class.*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|[-+*/<>%&^|=!.]=|--|\+\+|<<=?|>>=?|===|&&|\|\||::|->|[^[:space:]]|[
]*((class|def)[ 
].*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[jJlL]?|0[xX]?[0-9a-fA-F]+[lL]?|[-+*/<>%&^|=!]=|//=?|<<=?|>>=?|\*\*=?|[^[:space:]]|[
ruby
]*((class|module|def)[ 
].*)$
(@|@@|\$)?[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|\?(\\C-)?(\\M-)?.|//=?|[-+*/<>%&^|=!]=|<<=?|>>=?|===|\.{1,3}|::|[!=]~|[^[:space:]]|[
bibtex
(@[a-zA-Z]{1,}[ 
]*\{{0,1}[ 
]*[^ 
"@',\#}{~%]*).*$
[={}"]|[^={}" 
]+|[^[:space:]]|[
^(\\((sub)*section|chapter|part)\*{0,1}\{.*)$
\\[a-zA-Z@]+|\\.|[a-zA-Z0-9
]+|[^[:space:]]|[
!^[ 
]*[A-Za-z_][A-Za-z_0-9]*:[[:space:]]*($|/[/*])
^((::[[:space:]]*)?[A-Za-z_].*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lLuU]*|[-+*/<>%&^|=!]=|--|\+\+|<<=?|>>=?|&&|\|\||::|->\*?|\.\*|[^[:space:]]|[
csharp
!^[ 
]*(do|while|for|if|else|instanceof|new|return|switch|case|throw|catch|using)
]*(((static|public|internal|private|protected|new|virtual|sealed|override|unsafe)[ 
]+)*[][<>@.~_[:alnum:]]+[ 
]+[<>@._[:alnum:]]+[ 
]*\(.*\))[ 
]*(((static|public|internal|private|protected|new|virtual|sealed|override|unsafe)[ 
]+)*[][<>@.~_[:alnum:]]+[ 
]+[@._[:alnum:]]+)[ 
]*(((static|public|internal|private|protected|new|unsafe|sealed|abstract|partial)[ 
]+)*(class|enum|interface|struct)[ 
]+.*)$
]*(namespace[ 
]+.*)$
![:;][[:space:]]*$
^[_a-z0-9].*$
-?[_a-zA-Z][-_a-zA-Z0-9]*|-?[0-9]+|\#[0-9a-fA-F]+|[^[:space:]]|[
diff=true
!diff
utf-8
%-*s
%*s%-*s
latin-1
ISO-8859-1
GIT_USER_AGENT
git/2.14.3 (Apple Git-98)
versionsort.suffix
versionsort.prereleasesuffix
ignoring versionsort.prereleasesuffix because versionsort.suffix is set
%s/worktrees
is_worktree_locked
worktree.c
!is_main_worktree(wt)
locked
failed to read '%s'
%s/worktrees/%s/HEAD
Out of memory, strdup failed
Out of memory, realloc failed
data too large to fit into virtual memory space
Out of memory, calloc failed
could not open '%s' for reading and writing
could not open '%s' for writing
could not open '%s' for reading
dup failed
Out of memory? fdopen failed
Unable to create temporary file '%s'
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
XXXXXX
unlink_or_msg
wrapper.c
unable to unlink %s: %s
unlink
rmdir
unable to access '%s'
BUG: your snprintf is broken
BUG: attempt to snprintf into too-small buffer
could not write to %s
could not close %s
Out of memory, malloc failed (tried to allocate %lu bytes)
Data too large to fit into virtual memory space.
GIT_ALLOC_LIMIT
attempting to allocate %ju over limit %ju
unable to %s %s
GIT_FLUSH
write failure on '%s'
write error
fsync error on '%s'
tabwidth=
tabwidth %.*s out of range
cannot enforce both tab-in-indent and indent-with-non-tab
trailing whitespace
new blank line at EOF
space before tab in indent
indent with spaces
tab in indent
trailing-space
space-before-tab
indent-with-non-tab
cr-at-eol
blank-at-eol
blank-at-eof
tab-in-indent
%c %s
Do not touch the line above.
Everything below will be removed.
%c %s
rebase-apply/applying
rebase-apply/patch
rebase-apply/head-name
rebase-apply/onto
rebase-merge
rebase-merge/interactive
rebase-merge/head-name
BISECT_LOG
BISECT_START
REVERT_HEAD
BUG: finalize_deferred_config() should have been called
cannot %s: You have unstaged changes.
additionally, your index contains uncommitted changes.
cannot %s: Your index contains uncommitted changes.
BUG: worktree status unknown???
dirty
checkout: moving from 
No commits yet on 
HEAD (no branch)
behind 
ahead 
, %s
 %s%c
%s -> 
%s %s%c
# branch.oid %s%c
(initial)
# branch.head %s%c
(detached)
# branch.upstream %s%c
# branch.ab +%d -%d%c
2 %s %s %06o %06o %06o %s %s %c%d %s%c%s%c
1 %s %s %06o %06o %06o %s %s %s%c
wt_porcelain_v2_fix_up_changed
wt-status.c
d->mode_head == 0
d->mode_worktree == 0
BUG: unhandled unmerged status %x
wt_porcelain_v2_print_unmerged_entry
pos < 0
BUG: observed stagemask 0x%x != expected stagemask 0x%x
%c %s %s %06o %06o %06o %06o %s %s %s %s%c
%c %s%c
On branch 
interactive rebase in progress; onto 
rebase in progress; onto 
HEAD detached at 
HEAD detached from 
Not currently on any branch.
Initial commit
No commits yet
Untracked files
Ignored files
add -f
It took %.2f seconds to enumerate untracked files. 'status -uno'
may speed it up, but you have to be careful not to forget to add
new files yourself (see 'git help status').
Untracked files not listed%s
 (use -u option to show untracked files)
No changes
wt_longstatus_print_tracking
s->branch && !s->is_initial
%s%.*s
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)
You are in the middle of an am session.
The current patch is empty.
  (fix conflicts and then run "git am --continue")
  (use "git am --skip" to skip this patch)
  (use "git am --abort" to restore the original branch)
  (fix conflicts and then run "git rebase --continue")
  (use "git rebase --skip" to skip this patch)
  (use "git rebase --abort" to check out the original branch)
  (all conflicts fixed: run "git rebase --continue")
You are currently splitting a commit while rebasing branch '%s' on '%s'.
You are currently splitting a commit during a rebase.
  (Once your working directory is clean, run "git rebase --continue")
You are currently editing a commit while rebasing branch '%s' on '%s'.
You are currently editing a commit during a rebase.
  (use "git commit --amend" to amend the current commit)
  (use "git rebase --continue" once you are satisfied with your changes)
git-rebase-todo is missing.
No commands done.
Last command done (%d command done):
Last commands done (%d commands done):
   %s
  (see more in file %s)
No commands remaining.
Next command to do (%d remaining command):
Next commands to do (%d remaining commands):
  (use "git rebase --edit-todo" to view and edit)
Could not open file %s for reading
exec 
You are currently rebasing branch '%s' on '%s'.
You are currently rebasing.
rebase-merge/orig-head
You are currently cherry-picking commit %s.
  (fix conflicts and run "git cherry-pick --continue")
  (all conflicts fixed: run "git cherry-pick --continue")
  (use "git cherry-pick --abort" to cancel the cherry-pick operation)
You are currently reverting commit %s.
  (fix conflicts and run "git revert --continue")
  (all conflicts fixed: run "git revert --continue")
  (use "git revert --abort" to cancel the revert operation)
You are currently bisecting, started from branch '%s'.
You are currently bisecting.
  (use "git bisect reset" to get back to the original branch)
Changes to be committed:
  (use "git reset %s <file>..." to unstage)
  (use "git rm --cached <file>..." to unstage)
new commits, 
modified content, 
untracked content, 
BUG: unhandled change_type %d in wt_longstatus_print_change_data
BUG: unhandled diff status %c
wt_longstatus_print_change_data
len >= 0
%s%.*s%s -> %s
%s%.*s%s
new file:
copied:
deleted:
modified:
renamed:
typechange:
unknown:
unmerged:
Unmerged paths:
  (use "git add <file>..." to mark resolution)
  (use "git add/rm <file>..." as appropriate to mark resolution)
  (use "git rm <file>..." to mark resolution)
%s%.*s%s
both deleted:
added by us:
deleted by them:
added by them:
deleted by us:
both added:
both modified:
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
GIT_INDEX_FILE=%s
submodule
summary
--files
--cached
--for-status
--summary-limit
HEAD^
Submodules changed but not updated:
Submodule changes to be committed:
%s%s
  (use "git %s <file>..." to include in what will be committed)
--------------------------------------------------
Your stash currently has %d entry
Your stash currently has %d entries
no changes added to commit (use "git add" and/or "git commit -a")
no changes added to commit
nothing added to commit but untracked files present (use "git add" to track)
nothing added to commit but untracked files present
nothing to commit (create/copy files and use "git add" to track)
nothing to commit, working tree clean
nothing to commit (use -u to show untracked files)
nothing to commit
malformed diff output: %s
Could not stat %s
Last expression must not be negated: %s
Invalid regexp to look for hunk header: %s
'%s' is not a boolean
unknown style '%s' given for '%s'
1.2.11
inflateInit: %s (%s)
no message
inflateInit2: %s (%s)
inflateEnd: %s (%s)
inflate: out of memory
inflate: %s (%s)
deflateInit: %s (%s)
deflateEnd: %s (%s)
deflate: out of memory
deflate: %s (%s)
BUG: total_out mismatch
BUG: total_in mismatch
out of memory
wrong version
needs dictionary
data stream error
stream consistency error
unknown error
deflateInit2: %s (%s)
iconv_open(%s,%s) failed, but needed:
    precomposed unicode is not supported.
    If you want to use decomposed unicode, run
    "git config core.precomposeunicode false"
UTF-8-MAC
LC_ALL
LC_CTYPE
LANG
alnum
space
parse_bracket_exp
compat/regex/regcomp.c
upper
lower
alpha
cntrl
digit
print
blank
graph
punct
xdigit
link_nfa_nodes
node->next == NULL
left > -1
right > -1
!IS_EPSILON_NODE (node->token.type)
re_search_stub
compat/regex/regexec.c
pmatch[0].rm_so == start
re_copy_regs
regs_allocated == REGS_FIXED
regs->num_regs >= nregs
re_search_internal
mctx.input.offsets_needed == 0
check_matching
err == REG_ESPACE
pop_fail_stack
num >= 0
group sync broken sliding up
group sync broken sliding down
match disappeared
group sync broken sliding to match
best shift unreached
group sync broken sliding to blank line
group sync broken moving to next group
group sync broken at end of file
BUG: %s
\ No newline at end of file
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleShortVersionString</key>
<string>98</string>
<key>CFBundleVersion</key>
<string>98</string>
</dict>
</plist>
git blame [<options>] [<rev-opts>] [<rev>] [--] <file>
[31m
[32m
[34m
[1;34m
[1;31m
[1;31m
[36m
[31m
[32m
[33m
[41m
Add file contents to the index
bisect
Use binary search to find the commit that introduced a bug
branch
List, create, or delete branches
checkout
Switch branches or restore working tree files
clone
Clone a repository into a new directory
commit
Record changes to the repository
diff
Show changes between commits, commit and working tree, etc
fetch
Download objects and refs from another repository
grep
Print lines matching a pattern
init
Create an empty Git repository or reinitialize an existing one
Show commit logs
merge
Join two or more development histories together
Move or rename a file, a directory, or a symlink
pull
Fetch from and integrate with another repository or a local branch
push
Update remote refs along with associated objects
rebase
Reapply commits on top of another base tip
reset
Reset current HEAD to the specified state
Remove files from the working tree and from the index
show
Show various types of objects
status
Show the working tree status
Create, list, delete or verify a tag object signed with GPG
[1;32m
[1;31m
[1;33m
[1;35m
[1;36m
[1;34m
/bad-path/
[32m
[31m
[31m
[31m
[31m
[32m
[31m
