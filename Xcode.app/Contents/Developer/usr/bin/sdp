%sScripting.r
couldn't open output file %s
resource 'aete' (0, "%s") {
title
suite
"%s",
Type Names Suite
Hidden terms
Hidden codes
kASTypeNamesSuite
/* Enumerations */
command
event
synonym
"%s",
code
result
replyRequired, %s, %s, Reserved13,
direct-parameter
directParam%s,
Optional
Required
%s, %s, Reserved13,
parameter
"%s", 
%s, 
"%s",
optional
required
%s, %s, Reserved13
name
%s: hex code must be exactly %d bytes long.
%s: code must be exactly %d characters long.
%s skipped because it has no code.
"%s", 
"%s for %s", 
Alternate code
Synonym
, reply_none__, dp_none__, { }
description
'%.4s', '%s'
0x%.8s, 0x%.8s
'%s'
listOfItems
singleItem
enumerated
notEnumerated
value-type
record-type
class
class-extension
extends
'%s',
inherits
"<Inheritance>", pInherits, '%s',
"inherits elements and properties of the %s class.",
reserved, singleItem, notEnumerated, readOnly, Reserved12
"%s", 
contents
pContents
reserved, %s, %s, %s, Reserved12
property
element
plural
"%ss", 
%s, plural__
"%s for %s", { }, { }
access
readOnly
readWrite
"%s for %s",
%s, 
accessor
style
index
 formAbsolutePosition
 formName
 formUniqueID
range
 formRange
relative
 formRelativePosition
test
 formTest
%s: unknown accessor style "%s"
number | string
alias | string
date | number
date | number | string
%@, 
%@ or %@
"%s", 
'%s', 
"", { }, { }
hidden
/* Enumerations */
enumeration
enumerator
"%s"
#include <Carbon/Carbon.r>
#define Reserved8   reserved, reserved, reserved, reserved, reserved, reserved, reserved, reserved
#define Reserved12  Reserved8, reserved, reserved, reserved, reserved
#define Reserved13  Reserved12, reserved
#define dp_none__   noParams, "", directParamOptional, singleItem, notEnumerated, Reserved13
#define reply_none__   noReply, "", replyOptional, singleItem, notEnumerated, Reserved13
#define synonym_verb__ reply_none__, dp_none__, { }
#define plural__    "", {"", kAESpecialClassProperties, cType, "", reserved, singleItem, notEnumerated, readOnly, Reserved8, noApostrophe, notFeminine, notMasculine, plural}, {}
0x1,  // major version
0x0,  // minor version
english,
roman,
/* Events */
/* Classes */
/* Comparisons */
reply_none__,
dp_none__,
cocoa
properties
xml:base
/System/
AppleEventCode
ReadOnly
Type
synonyms
Name
UnnamedArguments
UsedFeatures
ValueTypes
%s - scriptSuite files do not support "record-type" elements.
Commands
Classes
Synonyms
Enumerations
scriptSuite
Description
scriptTerminology
method
%s - "method" attribute for elements is obsolete; use "key" instead.
type
%s - "method" attribute for %s is obsolete; use "key" instead.
%s - hex code must be exactly %zu bytes long.
%s - code must be exactly %zu characters long.
AppleEventClassCode
NSScriptObjectSpecifier
%s - Cocoa Scripting prior to 10.3 does not support direct parameter types other than "object".
%s - Cocoa Scripting prior to 10.3 does not support optional direct parameters.
UnnamedArgument
ResultAppleEventCode
NSScriptCommand
CommandClass
Arguments
list
Superclass
pcnt
DefaultSubcontainerAttribute
Attributes
ToManyRelationships
responds-to
SupportedCommands
%s - declared to inherit from itself.
AbstractObject
item
LocationRequiredToCreate
Enumerators
%s.%s
PluralName
basename
bundleid
f:i:o:V:N:I:A
unrecognized output style '%c'
must specify at least one output format using -f.
SDK_NAME
10.3
10.11
extra non-option parameters ignored.
stdin
http://www.w3.org/2001/XInclude
xi:include
href
xpointer
xpointer(/dictionary/*)
specifying a single output file with -fs or -ft is usually not a good idea.
usage: %s -f{ahmst} [-o directory | file | -] [options...] [file]
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
****
NSObject
string
TEXT
NSString
text
number
nmbr
NSNumber
integer
long
NSNumber<Int>
real
doub
NSNumber<Double>
boolean
bool
NSNumber<Bool>
date
ldt 
NSDate
object
obj 
specifier
location
insl
NSPositionalSpecifier
location specifier
record
reco
NSDictionary
file
NSString<FilePath>
point
QDpt
NSData<QDPoint>
rectangle
qdrt
NSData<QDRect>
NSNumber<TypeCode>
list of 
%@ "%@" missing required "%@" attribute.
%@ node missing required "%@" attribute.
NSArray
unknown type name "%s".
type name "%s" not associated with any code.
unknown verb name "%s".
ns  
sf  
nd  
nds 
%@.%@
NSNumber<%@.%@>
NSData
%@<%@>
%@ "%@"
dictionary
%@ of %s
get_attribute(%s) applied to non-element node %s
%s: missing required "%s" attribute.
%s element should be unique, but isn't.
input contains no %s elements.
XPath evaluation failed: %s
%s - %s
object class
object description
object self
warning: couldn't determine application name from input; use --basename to set it.
Application
void
self
parameter[(not(@hidden = 'yes') or @code = 'tpnm')]
- (%s) %s
%s(%s)%s
 NS_RETURNS_NOT_RETAINED
 __attribute__((deprecated))
  // %s
id result__ = 
[self sendEvent:'%s' id:'%s' parameters:
[%s %s%s], 
return [result__ %s];
%s.h
suite[(@code != 'appS' and @code != 'caVS' and @code != 'coVS' and @code != 'daVS' and @code != 'docS' and @code != 'drAD' and @code != 'menS' and @code != 'panS' and @code != 'teVS')]/(class | class-extension)
suite[(@code != 'appS' and @code != 'caVS' and @code != 'coVS' and @code != 'daVS' and @code != 'docS' and @code != 'drAD' and @code != 'menS' and @code != 'panS' and @code != 'teVS')]/enumeration
suite[(@code != 'appS' and @code != 'caVS' and @code != 'coVS' and @code != 'daVS' and @code != 'docS' and @code != 'drAD' and @code != 'menS' and @code != 'panS' and @code != 'teVS')]/command
 * %s.h
@class %s
, %s
warning: skipping redeclared enumeration "%s"
// %s
enum %s {
%s = '%s'
 /* %s */
}%s;
typedef enum %s %s%s;
@protocol %sGenericMethods
 * %s
warning: class "%s" redeclared; use <class-extension> instead.
__attribute__((deprecated)) 
@interface %s 
+ (%s *) application;
: %s
SBObject
 <%sGenericMethods>
(%s)
%s.m
 * %s.m
#include "%s.h"
@implementation %s
(%s)
type[not(@hidden='yes')]
NSArray<
auto
break
case
char
const
continue
default
double
else
enum
extern
float
goto
register
return
short
signed
sizeof
static
struct
switch
typedef
union
unsigned
volatile
while
catch
const_cast
delete
dynamic_cast
explicit
false
friend
inline
mutable
namespace
operator
private
protected
public
reinterpret_cast
static_cast
template
this
throw
true
typeid
typename
using
virtual
wchar_t
and_eq
bitand
bitor
compl
not_eq
or_eq
xor_eq
inout
bycopy
byref
oneway
super
alloc
init
copy
\%03o
__TEXT
__sdef
suite[(@code != 'appS' and @code != 'caVS' and @code != 'coVS' and @code != 'daVS' and @code != 'docS' and @code != 'drAD' and @code != 'menS' and @code != 'panS' and @code != 'teVS')]/(class | enumeration | record-type | value-type)
synonyms-are-types
????
Standard Suite
capp
application
error: %s inherits from undefined class "%s".
error: %s inherits from non-class type "%s".
count
make
reference
warning: %s refers to hidden type '%s'; skipping.
warning:   Use -A to emit this declaration anyway.
- (SBElementArray<%s> *)
- (SBElementArray *)
- (void) %s: (%s) %s
@property 
(copy
(readonly
, readonly
set 
deref
objectify
valuate
typecode
NSAppleEventDescriptor
NSData *
descriptorWithDescriptorType:'
' data:
data
descriptorWithEnumCode:
enumCodeValue
warning: %s refers to undefined type '%s'; assuming type 'id'.
warning: use of undefined type '%s'; assuming type 'id'.
+ (%s *) application
static %s *app__;
if (!app__) @synchronized(self) {
if (!app__) {
app__ = [[self alloc] initWithBundleIdentifier:@"%s"];
return app__;
suite[(@code != 'appS' and @code != 'caVS' and @code != 'coVS' and @code != 'daVS' and @code != 'docS' and @code != 'drAD' and @code != 'menS' and @code != 'panS' and @code != 'teVS')]/class
typedef struct { NSString *name; FourCharCode code; } classForCode_t;
static const classForCode_t classForCodeData__[] = {
{ @"%s", '%s' },
{ nil, 0 } 
- (NSDictionary *) classNamesForCodes
static NSMutableDictionary *dict__;
if (!dict__) @synchronized([self class]) {
if (!dict__) {
dict__ = [[NSMutableDictionary alloc] init];
const classForCode_t *p;
for (p = classForCodeData__; p->name != nil; ++p)
[dict__ setObject:p->name forKey:[NSNumber numberWithUnsignedInt:p->code]];
return dict__;
suite[(@code != 'appS' and @code != 'caVS' and @code != 'coVS' and @code != 'daVS' and @code != 'docS' and @code != 'drAD' and @code != 'menS' and @code != 'panS' and @code != 'teVS')]/(class | class-extension | record-type)/property
typedef struct { FourCharCode code; NSString *name; } codeForPropertyName_t;
static const codeForPropertyName_t codeForPropertyNameData__[] = {
{ '%s', @"%s" },
{ 0, nil } 
- (NSDictionary *) codesForPropertyNames
static NSMutableDictionary *dict__;
if (!dict__) @synchronized([self class]) {
if (!dict__) {
dict__ = [[NSMutableDictionary alloc] init];
const codeForPropertyName_t *p;
for (p = codeForPropertyNameData__; p->name != nil; ++p)
[dict__ setObject:[NSNumber numberWithUnsignedInt:p->code] forKey:p->name];
return dict__;
- (SBElementArray *) %s
return [self elementArrayWithCode:'%s'];
- (%s) %s
return [[self propertyWithCode:'%s'] get];
id v = [[self propertyWithCode:'%s'] get];
return [v %s];
return (%s) [self propertyWithClass:[%s class] code:'%s'];
return (%s) [self propertyWithCode:'%s'];
- (void) %s: (%s) %s
[[self propertyWithCode:'%s'] setTo:%s];
id v = [%s %s%s];
[[self propertyWithCode:'%s'] setTo:v];
[[self propertyWithClass:[%s class] code:'%s'] setTo:%s];
return result__;
#import <AppKit/AppKit.h>
#import <ScriptingBridge/ScriptingBridge.h>
: SBApplication
@end
@end
init
drain
attributeForName:
stringValue
name
stringWithFormat:
isEqual:
UTF8String
removeAttributeForName:
elementsForName:
count
objectAtIndex:
parent
kind
elementWithName:
insertChild:atIndex:
namespaceWithName:stringValue:
addNamespace:
attributeWithName:stringValue:
addAttribute:
nodesForXPath:error:
localizedDescription
getObjects:
self
childAtIndex:
nextSibling
initWithContentsOfURL:options:error:
initWithData:options:error:
XMLData
rootElement
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE dictionary SYSTEM "file://localhost/System/Library/DTDs/sdef.dtd" [
<!ATTLIST suite
synonyms-are-types (yes | no) #IMPLIED
<!ATTLIST cocoa
type
NMTOKENS
#IMPLIED
objectify
NMTOKEN
#IMPLIED
valuate
NMTOKEN
#IMPLIED
deref
(yes | no)
#IMPLIED
typecode    CDATA       #IMPLIED
typecode64  CDATA       #IMPLIED
<dictionary>
<suite name="Scripting Bridge Intrinsics" code="sbin" synonyms-are-types="yes">
<value-type name="any" code="****">
<cocoa class="id" deref="no"/>
</value-type>
<value-type name="boolean" code="bool">
<cocoa class="NSNumber" type="BOOL" objectify="numberWithBool:" valuate="boolValue" typecode="B"/>
</value-type>
<value-type name="color" code="colr">
<cocoa class="NSColor"/>
<synonym name="RGB color" code="cRGB"/>
</value-type>
<value-type name="date" code="ldt ">
<cocoa class="NSDate"/>
</value-type>
<value-type name="double integer" code="comp">
<cocoa class="NSNumber" type="long long" objectify="numberWithLongLong:" valuate="longLongValue" typecode="q"/>
<!-- It's necessary to keep this separate from "integer" to deal with iTunes track ids and Finder item sizes in 32-bit. -->
</value-type>
<value-type name="file" code="file">
<cocoa class="NSURL"/>
<synonym name="alias" code="alis"/>
<synonym name="file specification" code="fss "/>
</value-type>
<value-type name="integer" code="long">
<cocoa class="NSNumber" type="NSInteger" objectify="numberWithInteger:" valuate="integerValue" typecode="i" typecode64="q"/>
<synonym name="small integer" code="shor"/>
<synonym name="unsigned integer" code="magn"/>
</value-type>
<value-type name="list" code="list">
<cocoa class="NSArray"/>
</value-type>
<value-type name="location specifier" code="insl">
<cocoa class="SBObject"/>
<synonym name="location reference"/>
</value-type>
<value-type name="missing value" code="msng">
<cocoa class="NSNull"/>
</value-type>
<value-type name="number" code="nmbr">
<cocoa class="NSNumber"/>
</value-type>
<value-type name="picture" code="PICT">
<cocoa class="NSImage"/>
<synonym name="TIFF picture" code="TIFF"/>
<synonym name="JPEG picture" code="JPEG"/>
<synonym name="GIF picture" code="GIFf"/>
</value-type>
<value-type name="point" code="QDpt">
<cocoa class="NSValue" type="NSPoint" objectify="valueWithPoint:" valuate="pointValue" typecode="{_NSPoint=ff}" typecode64="{CGPoint=dd}"/>
</value-type>
<value-type name="property" code="prop">
<cocoa class="NSString" type="SEL" objectify="TYPE_NOT_SUPPORTED:" valuate="TYPE_NOT_SUPPORTED" typecode=":"/>
<!-- passing "SEL" types through the static glue is not currently supported! -->
</value-type>
<value-type name="raw data" code="tdta">
<cocoa class="NSData"/>
<synonym name="tdta"/>
</value-type>
<value-type name="real" code="doub">
<cocoa class="NSNumber" type="double" objectify="numberWithDouble:" valuate="doubleValue" typecode="d"/>
</value-type>
<value-type name="record" code="reco">
<cocoa class="NSDictionary"/>
</value-type>
<value-type name="rectangle" code="qdrt">
<cocoa class="NSValue" type="NSRect" objectify="valueWithRect:" valuate="rectValue" typecode="{_NSRect={_NSPoint=ff}{_NSSize=ff}}" typecode64="{CGRect={CGPoint=dd}{CGSize=dd}}"/>
</value-type>
<value-type name="specifier" code="obj ">
<cocoa class="SBObject" deref="no"/>
<synonym name="reference"/>
</value-type>
<value-type name="text" code="ctxt">
<cocoa class="NSString"/>
<synonym name="string" code="TEXT"/>
<synonym name="international text" code="itxt"/>
<synonym name="Unicode text" code="utxt"/>
</value-type>
<value-type name="type" code="type">
<cocoa class="NSNumber"/>
</value-type>
<value-type name="version" code="vers">
<cocoa class="NSString"/>
</value-type>
</suite>
</dictionary>
t000
