VMUOptionParser
Displays/aggregates allocation histories in a process
setPurposeDescription:
<pid | partial-process-name> [options] <mode> [<address> ...]
setSyntaxDescription:
'mode' should be one of {-callTree, -allBySize, -allByCount, -allEvents, or one or more addresses}
setDiscussion:
setSingleHyphenLongNames:
v4@?0
allBySize
[mode]
allByCount
allEvents
fullStacks
print backtraces with one line per frame
callTree
debug
highWaterMark
machineReadableOutput
showContent
(-allEvents, -calltree only)
invert
(-calltree only)
ignoreThreads
collapseRecursion
chargeSystemLibraries
consolidateAllBySymbol
consolidateSystemFramesBySymbol
forkCorpse
generate a corpse fork from process and run malloc_history on it
getCorpseFromParent
get_corpse
quiet
suppress the process description header and footer
showTiming
DVT_VMUDebugTimer
alloc
init
initialization
startWithMessage:
hasPrefix:
UTF8String
bad address %@ specified
length
VMUClassPatternMatcher
initWithPattern:forArgument:error:
v12@?0@"NSString"4^@8
parseArgumentsWithBlock:
no process id or name specified
usage:
specify only one mode (-callTree, -allBySize, -allByCount, -allEvents, or one or more addresses)
cannot use -showContent with -highWaterMark, since the malloc heap has probably changed since high water mark
do not pass specific addresses or <classes-pattern> with -allEvents
only call tree / all events mode support -showContent option
cannot use call tree options when not passing -callTree
no mode, address, or <classes-pattern> specified
DVT_VMUProcessObjectGraph
directedGraphWithData:error:
%s[%d]: [fatal] unable to read input graph: %s
localizedDescription
stackLogReader
The target process has no stack logs.  Run it with the MallocStackLogging environment variable set to get stack logs.
Can't show high water mark when reading stack logs for active allocations only, from memory graph file.
processDescriptionString
NSString
int main(int, char **)
stringWithUTF8String:
<Unknown Function>
/Library/Caches/com.apple.xbs/Sources/SamplingTools/SamplingTools-64032/malloc_history/malloc_history_main.m
<Unknown File>
NSAssertionHandler
currentHandler
expected no addresses to be passed with -allEvents
handleFailureInFunction:file:lineNumber:description:
binaryImagesDescription
create symbolicator for task
malloc_history was unable to acquire a symbolicator for the target process.
DVT_VMUTaskStackLogReader
initWithTask:symbolicator:
%s[%d]: Process %d is not debuggable.
Due to security restrictions, malloc_history cannot show memory contents of restricted processes.
usesLiteMode
Can't show high water mark when target process is run in lite mode of malloc stack logging.
create process description
DVT_VMUProcessDescription
initWithTask:getBinariesList:
description
finding high water mark
DVT_VMUTaskMemoryScanner
initWithTask:
addRootNodesFromTask
addMallocNodesFromTask
%s[%d]: [fatal] unable to introspect malloc zones to get allocation information
int main(int, char **)_block_invoke_2
v12@?0i4I8
NSMutableDictionary
zoneCount
zoneNameForIndex:
DVT_VMURangeArray
setObject:forKeyedSubscript:
VM Regions
nodeCount
objectForKeyedSubscript:
nodeDetails:
addRange:
v12@?0@"DVT_VMUVMRegion"4^c8
enumerateRegionsWithBlock:
count
%d blocks in zone %s
rangeAtIndex:
getFramesForAddress:size:inLiteZone:stackFramesBuffer:
%i: %#qx %s -- %ld stack frames
 -- NO STACK !!!
 -- SHORT STACK
functionNameForPCaddress:
  %s
  0x%qx 
%d total blocks
MallocStackLoggingLite
NSMapTable
mapTableWithKeyOptions:valueOptions:
step 1 -- build map table with live malloc block addresses as keys
class
isKindOfClass:
nodeDescription:
matchesNodeDetails:orNodeDescription:
inspectingLiveProcess
liteModeStackIDforAddress:size:
skipping step 2 of enumerating stack log records to record unique backtrace IDs, since for MallocStackLogging=lite that is done in the previous step of zone enumeration
step 2 -- enumerate stack log records to record unique backtrace IDs for objects of interest
stack log enumeration callbacks
v32@?0I4Q8Q16Q24
enumerateRecords:
skipping step 1 of building map table with live malloc block addresses as keys since we're looking for high water mark
step 2 -- enumerate stack log records to record unique backtrace IDs for objects that were live at high water mark
NSException
name
HighWaterMarkException
isEqualToString:
void printCallTree(__strong id<VMUCommonGraphInterface>, CSSymbolicatorRef, HighWaterMarkInfo *, VMUCallTreeOptions, BOOL, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)
Unexpected exception
step 3 -- from uniqueBacktraceToObjectsMap, create uniqueBacktraceToObjectsMap
objectForKey:
setObject:forKey:
step 4 -- build call tree by iterating the uniqueBacktraceToObjectsMap
DVT_VMUCallTreeRoot
initWithSymbolicator:sampler:options:
setStackLogReader:
DVT_VMUBacktrace
NSMutableSet
%qu unique stacks
getFramesForStackID:stackFramesBuffer:
CONTENT:  
stringByAppendingString:
addBacktrace:count:numBytes:
sort
addChildWithName:address:count:numBytes:toNode:
freeing up call-tree memory
allBacktracesHaveBeenAdded
releasing objectIdentifier
step 5 -- print call tree
invertedNode
stringFromCallTreeIndentIfNoBranches:
releasing call tree/autorelease pool
stop
exceptionWithName:reason:userInfo:
labelForNode:
NSCharacterSet
newlineCharacterSet
rangeOfCharacterFromSet:options:
componentsSeparatedByCharactersInSet:
objectAtIndexedSubscript:
" PLUS %lu MORE LINES
stringByAppendingFormat:
malloc<%llu>
stringWithFormat:
    
stringByReplacingOccurrencesOfString:withString:
member:
addObject:
error acquiring stack with identifier: %qd (frame count %u)
void printAllBySizeOrCount(HighWaterMarkInfo *, BOOL, NSHashTable *__strong, __strong id<VMUStackLogReader>)
%d call%s for %qd bytes: 
symbolicatedBacktraceForStackID:isLiteZone:options:
VM_ALLOC
ALLOC
VM_DEALLOC
FREE
v32@?0I4{?=Qb60b4@}8^c28
enumerateObjectsWithBlock:
0x%qx
0x%qx
%s 0x%qx-0x%qx [size=%qu]: %s 
OTHER
0x%qx
%s  0x%qx: 
%s  0x%qx-0x%qx [size=%qu]: 
void printAddressHistory(__strong id<VMUCommonGraphInterface>, HighWaterMarkInfo *, mach_vm_address_t, __strong id<VMUStackLogReader>, BOOL, BOOL)
no stack logs found for 0x%qx
NSByteCountFormatter
setCountStyle:
stringFromByteCount:
NSNumberFormatter
setNumberStyle:
NSNumber
numberWithLongLong:
stringFromNumber:
High water mark of allocated heap memory: %*s  at malloc stack log record index %*s
     Current total allocated heap memory: %*s  at malloc stack log record index %*s
  Cumulative total allocated heap memory: %*s
            Total heap memory operations: %*s  allocations: %*s  deallocations: %*s
High water mark of allocated heap memory
High water mark at malloc stack log record index
Current total allocated heap memory
Current total at malloc stack log record index
Cumulative total allocated heap memory
Total heap memory operations (count)
Total heap memory allocations (count)
Total heap memory deallocations (count)
Call graph:
Total number in stack -- this line is here to get the correct format for importing with the Sampler instrument in Instruments.app
malloc_history Report Version:  2.0
----
error in %@ <classes> pattern '%@': %s
Region
Thread
.*%@
hasSuffix:
%@.*
error in % <region-description> pattern '%@': %s
dealloc
%s[%d]: [fatal] %s
className
_regex:matchesName:
displayName
_matchesClassInfo:
NSObject
_classesRegex
^{?=iI*^{re_guts}}
_vmRegionsRegex
_memoizedRegexResult
^{__CFDictionary=}
@20@0:4@8@12^@16
v8@0:4
c16@0:4^{?=iI*^{re_guts}}8@12
c12@0:4@8
c32@0:4{?=Qb60b4@}8@28
initWithFormat:arguments:
NSDictionary
dictionaryWithObjects:forKeys:count:
NSError
VMUOptionParserDomain
errorWithDomain:code:userInfo:
NSMutableArray
NSMutableString
initWithString:
/Library/Caches/com.apple.xbs/Sources/SamplingTools/SamplingTools-64032/VMUOptionParser.m
Invalid parameter not satisfying: %@
block && (longName || shortName)
handleFailureInMethod:object:file:lineNumber:description:
characterAtIndex:
!longName || ([longName length] && [longName characterAtIndex:0] != '-')
Option's long-name '%@' is invalid or already in use.
rangeOfString:
Option's short-name '%c' is invalid or already in use.
appendString:
stringWithString:
appendFormat:
%s%@
%c%c%@%c
[@@@spacing@@@]%@
%s flag supplied with no argument
unrecognized option '%s'
removeAllObjects
userInfo
code
[invalid usage]: %s
%s: %s
Usage: %s %s
countByEnumeratingWithState:objects:count:
[@@@spacing@@@]
_purposeDescription
@"NSString"
_syntaxDescription
_discussionDescription
_optionDescriptions
@"NSMutableArray"
_optionBlockByString
@"NSMutableDictionary"
_longOptStructs
^{__CFArray=}
_shortOpts
@"NSMutableString"
_spacing
_singleHyphenLongNames
_parametersShowAsAssignment
@8@0:4
registerOptionWithLongName:shortName:hasArgument:argumentName:optionDescription:handler:
v32@0:4@8c12i16@20@24@?28
@12@0:4@?8
v12@0:4@8
.cxx_destruct
purposeDescription
syntaxDescription
discussion
singleHyphenLongNames
c8@0:4
v12@0:4c8
parametersShowAsAssignment
setParametersShowAsAssignment:
T@"NSString",C,N,V_purposeDescription
T@"NSString",C,N,V_syntaxDescription
T@"NSString",C,N,V_discussionDescription
Tc,N,V_singleHyphenLongNames
Tc,N,V_parametersShowAsAssignment
containsString:
.memgraph
stringByResolvingSymlinksInPath
NSFileManager
defaultManager
fileExistsAtPath:isDirectory:
isExecutableFileAtPath:
attributesOfItemAtPath:error:
fileSize
NSData
dataWithContentsOfFile:options:error:
%s[%d]: [fatal] unable to suspend target process: %s
%s[%d]: task_stop_peeking failed. (%s)
string
NSProcessInfo
processInfo
arguments
arrayWithArray:
lastPathComponent
setObject:atIndexedSubscript:
Command args:    %@
componentsJoinedByString:
Target process:  %s [%u]
Parent process:  %s [%u]
Parent process:  unable to determine
DYLD_INSERT_LIBRARIES=/usr/local/lib/libLeaksAtExit.dylib
DYLD_ROOT_PATH
DT_NO_RESPAWN
/usr/bin/%s
%s[%d]: [fatal] execve: %s could not be launched: %s (%d)
SAMPLING_TOOLS_TARGET_PID
intValue
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: Unable to deallocate target task port: %d (%s)
/usr/lib/system/libsystem_kernel.dylib
task_generate_corpse
%s[%d]: [fatal] Fail to generate corpse from the task, exiting
is64Bit
valueForEnvVar:
SIMULATOR_UDID
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
x86_64
i386
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
__check_mach_ports_lookup
numberWithInt:
stringValue
__check_parent_tool_v1
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal]  child process status could not be determined; exit code unavailable.
v16@?0I4I8I12
v8@?0I4
i12@?0r^v4r^v8
: terminated; resuming target task
: interrupted; resuming target task
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
%s/usr/bin/%s
%s%s
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_msg_send' failed: %s (%d)
0"0D
@(#)PROGRAM:malloc_history  PROJECT:SamplingTools-64032
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>17E148</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.SamplingTools</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>MacOSX</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>9Q1001b</string>
<key>DTPlatformVersion</key>
<string>GM</string>
<key>DTSDKBuild</key>
<string>17E158</string>
<key>DTSDKName</key>
<string>macosx10.13internal</string>
<key>DTXcode</key>
<string>0930</string>
<key>DTXcodeBuild</key>
<string>9Q1001b</string>
<key>SecTaskAccess</key>
<array>
<string>allowed</string>
<string>safe</string>
</array>
</dict>
</plist>
