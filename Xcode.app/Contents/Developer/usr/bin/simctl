errorWithSimErrno:
array
devices
countByEnumeratingWithState:objects:count:
available
addObject:
deleteDevice:error:
count
objectAtIndexedSubscript:
dictionaryWithObjects:forKeys:count:
domain
code
errorWithDomain:code:userInfo:
items
arrayWithObjects:count:
types
containsObject:
valueForType:
stringWithUTF8String:
terminateApplicationWithID:error:
setKeyboardLanguage:error:
availableDevices
eraseContentsAndSettingsWithError:
resolveAllTypes
setPasteboardWithItems:error:
objectForKeyedSubscript:
isEqualToString:
unsignedLongLongValue
registerNotificationHandlerOnQueue:handler:
changeCount
unregisterNotificationHandler:error:
URLWithString:
openURL:error:
installedAppsWithError:
sharedServiceContextForDeveloperDir:error:
currentHandler
handleFailureInFunction:file:lineNumber:description:
alloc
initWithUUIDString:
devicesByUDID
state
runtime
root
deviceType
supportedArchs
name
descriptiveName
devicePairsByUUID
supportedDeviceTypesByAlias
UTF8String
supportedRuntimesByAlias
generalPasteboard
pasteboardForNSPasteboard:refreshResolveCount:
pasteboard
initWithFormat:arguments:
mutableCopy
setObject:forKeyedSubscript:
stringByDeletingLastPathComponent
fileSystemRepresentation
stringByAppendingPathComponent:
dictionaryWithContentsOfFile:
stringWithFormat:
defaultManager
fileExistsAtPath:
registerNotificationHandler:
upgradeToRuntime:error:
triggerCloudSyncWithError:
rename:error:
ioPorts
ioPortClass
descriptor
displayClass
defaultWidthForDisplay
defaultHeightForDisplay
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
powerState
numberWithInt:
uuid
ioSurface
boolValue
damageRect
displayAngle
consoleDebugger_stringForSquareAngle:
initWithDebugLoggingBlock:
ioPortForUUID:
attachConsumer:toPort:
detachConsumer:fromPort:
setWithArray:
hasPrefix:
length
substringFromIndex:
videoWriterForOutputStream:fileType:
stringByStandardizingPath
fileURLWithPath:
videoWriterForURL:fileType:
startWriting
didChangeIOSurface:
finishWriting
fileType:fromString:
setDateFormat:
date
stringFromDate:
stringByReplacingOccurrencesOfString:withString:
initWithURL:append:
initWithIo:port:fileType:error:
writeScreenshotWithOutputStream:error:
numberWithBool:
bootWithOptions:error:
cloneDevice:name:error:
UDID
UUIDString
dictionary
componentsSeparatedByString:
getenv:error:
isExecutableFileAtPath:
currentDirectoryPath
spawnWithPath:options:terminationQueue:terminationHandler:error:
unregisterService:error:
lookup:error:
registerPort:service:error:
stringByExpandingTildeInPath
bundleWithPath:
bundleIdentifier
installApplication:withOptions:error:
uninstallApplication:withOptions:error:
createDeviceWithType:runtime:name:error:
defaultCStringEncoding
fileHandleWithStandardInput
readDataToEndOfFile
initWithData:encoding:
setValue:forType:
launchApplicationWithID:options:error:
supportedDeviceTypes
identifier
supportedRuntimes
isAvailableWithError:
localizedFailureReason
versionString
buildVersionString
runtimeIdentifier
stateString
allKeys
localizedCompare:
sortedArrayUsingSelector:
devicePairs
active
connected
gizmo
companion
UUID
dataWithJSONObject:options:error:
propertiesOfApplication:error:
setSharedContextConnectionType:
stringWithFileSystemRepresentation:length:
fileExistsAtPath:isDirectory:
addProfilesAtPath:
deviceSetWithPath:error:
defaultDeviceSetWithError:
localizedDescription
localizedRecoverySuggestion
connectionType
mainRunLoop
productFamilyID
createDevicePairWithGizmo:companion:error:
unpairDevicePair:error:
setActiveWithError:
postDarwinNotification:error:
darwinNotificationGetState:name:error:
darwinNotificationSetState:name:error:
shutdownWithError:
addMedia:error:
userInfo
addPhoto:error:
addVideo:error:
mainBundle
bundlePath
pathComponents
pathExtension
xpcObject
bundleForClass:
localizedStringForKey:value:table:
errorWithSimErrno:localizedDescription:
objectForXPCObject:
sim_packedVersion
objectForInfoDictionaryKey:
unavailable
Errors encountered while deleting multiple devices.
Errors
The pasteboard holds no items.
The pasteboard does not hold any items with a textual representation.
com.apple.simctl.errors
available
v8@?0
Errors encountered while erasing multiple devices.
%d items written, new change count is %lu, sync is successful.
Unable to sync.
notification
content_changed
new_change_count
Pasteboard contents changed (new change count is %llu).  We no longer need to provide promised data.  Exiting.
v16@?0@"NSDictionary"8
Path
Error getting a serviceContext: %@
Missing device
SimDevice *simctl_get_device(const char *const)
<Unknown Function>
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSimulator/CoreSimulator-338.16/simctl/util.m
<Unknown File>
Failed to create string from %s.
booted
No devices are booted.
building
Unable to determine the runtime root to resolve the 'building' device alias.
No devices found that match the build environment.
Invalid device: %s
Missing device pair
SimDevicePair *simctl_get_devicePair(const char *const)
Failed to create UUID from %@.
Invalid device pair: %s
Missing device type
Invalid device type: %s
Missing runtime
Invalid runtime: %s
host
SIMCTL_CHILD_
void ctl_forward_signals(SimDevice *const __strong, int, NSString *const __strong)
Unable to create signal dispatch_source for %d
Could not shutdown application nicely, attempting SIGKILL: %@
SIMULATOR_SDK_DIR
SIMULATOR_PLATFORM_DIR
SDKROOT
error: Unable to resolve the 'building' device alias.  You must set SIMULATOR_SDK_DIR and SIMULATOR_PLATFORM_DIR, pass an appropriate -sdk to simctl, or set SDKROOT.
SDKSettings.plist
System/Library/CoreServices/SystemVersion.plist
Info.plist
FamilyName
error: Unable to determine platform family name for the 'building' device alias.
Version
ProductVersion
IPHONE_SDK_MARKETING_VERSION
warning: Unable to determine the marketing version for the 'building' device alias from the platform or SDK.  Falling back on IPHONE_SDK_MARKETING_VERSION.
error: Unable to determine marketing version for the 'building' device alias.
Developer/Library/CoreSimulator/Profiles/Runtimes
%@/%@ %@.simruntime
Contents/Resources/RuntimeRoot
NSError *ctl_command_device_io(const int, const char **)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSimulator/CoreSimulator-338.16/simctl/cmd_io.m
Failed to get device IO.
Failed to create operation name string.
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
powerState
Ti,R,N
displayClass
TS,R,N
defaultWidthForDisplay
TI,R,N
defaultHeightForDisplay
main
Error: Device does not have a '%@' display port
enumerate
poll
recordVideo
screenshot
--poll
Default cache
Inhibit cache
Write-thru cache
Copy back cache
Write combine cache
Copy back inner cache
Port:
    UUID: %@
    Power state: %@
    Display class: %d
    Default width: %d
    Default height: %d
ioSurface
T@,R,N
    IOSurface port:
        width              = %ld
        height             = %ld
        bytes per row      = %ld
        size               = %ld
        pixel format       = %@
        bytes per element  = %ld
NSError * _Nullable io_operation_enumerate(SimDevice *const __strong _Nonnull, NSObject<SimDeviceIOProtocol> *const __strong _Nonnull, int, const char **)
Failed to get creation properties from IO surface.
Failed to get cache mode from IO surface.
Cache mode %@ not recognized.
        CPU cache mode     = %@.
Failed to get pixel casting attribute from IO surface.
        Pixel size casting = %@
damageRect
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N
    Damage rectangle:
        Last damage region = {%f, %f, %f, %f}
displayAngle
Td,R,N
    Display rotation:
        Angle              = %@ radians
Polling all IO ports for events.
NSError * _Nullable io_operation_poll(SimDevice *const __strong _Nonnull, NSObject<SimDeviceIOProtocol> *const __strong _Nonnull, int, const char **)
Failed to create console mappings dictionary.
v16@?0@"NSString"8
Failed to create display console debugger.
__io_operation_poll_block_invoke_2
Failed to create semaphore for SIGINT source.
Failed to dispatch source for SIGINT.
Polling completed.
Failed to find IO port for UUID %@.
Failed to find console debugger for port %@.
--type=
--display=
NSError * _Nullable io_operation_recordVideo(SimDevice *const __strong _Nonnull, NSObject<SimDeviceIOProtocol> *const __strong _Nonnull, int, const char **)
Failed to create stream for pipe.
Failed to create video writer.
Recording... (Press CTL+C to stop)
__io_operation_recordVideo_block_invoke
Recording completed.
Invalid file type: %@
NSError * _Nullable io_operation_screenshot(SimDevice *const __strong _Nonnull, NSObject<SimDeviceIOProtocol> *const __strong _Nonnull, int, const char **)
MM-dd-yyyy_HH.mm.ss.mmm
tiff
Screenshot_%@_%@_%@.%@
Failed to create screenshot writer but got no error
Wrote screenshot to: %@
persist
--wait-for-debugger
wait_for_debugger
binpref
--arch=
Child process terminated with signal %d: %s
v12@?0i8
arguments
environment
stdin
stdout
stderr
PATH
Unable to lookup host service %s
Unable to lookup device service %s: %ld
Registration in the host bootstrap is not permitted.
Unable to register service %s: %ld
Failed to install the requested application
An application bundle was not found at the provided path.
Provide a valid path to the desired application bundle.
CFBundleIdentifier
The bundle identifier of the application could not be determined.
Ensure that the application's Info.plist contains a value for CFBundleIdentifier.
SimPasteboardItem: %@
Cannot combine --console with --stdout or --stderr
%@: Error %ld
Unable to open pty
Unable to grant pty permissions
Unable to unlock pty
NSError *ctl_command_launch(int, const char **)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSimulator/CoreSimulator-338.16/simctl/cmd_launch.m
Unable to create pty dispatch source for launch.
%@: %d
devices
devicetypes
runtimes
pairs
--json
== Device Types ==
name
identifier
%@ (%@)
== Runtimes ==
 (unavailable%@%@)
version
buildversion
availability
(available)
%@ (%@ - %@) (%@)%@
== Devices ==
-- %@ --
udid
state
    %@ (%@) (%@)%@
-- Unavailable: %@ --
== Device Pairs ==
(active, connected)
(active, disconnected)
(inactive, connected)
(inactive, disconnected)
(unavailable)
watch
phone
%@ %@
    Watch: %@ (%@) (%@)
    Phone: %@ (%@) (%@)
create
Create a new device.
<name> <device type id> <runtime id>
clone
Clone an existing device.
<device> <new name>
upgrade
Upgrade a device to a newer runtime.
<device> <runtime id>
delete
Delete a device or all unavailable devices.
<device> [... <device n>] | unavailable
pair
Create a new watch and phone pair.
<watch device> <phone device>
unpair
Unpair a watch and phone pair.
<pair UUID>
pair_activate
Set a given pair as active.
<pair>
erase
Erase a device's contents and settings.
<device> [... <device n>] | all
boot
Boot a device.
<device>
If you want to set environment variables in the resulting environment, set them in the calling environment with a SIMCTL_CHILD_ prefix.
shutdown
Shutdown a device.
<device> | all
rename
Rename a device.
<device> <name>
getenv
Print an environment variable from a running device.
<device> <variable name>
openurl
Open a URL in a device.
<device> <URL>
addphoto
Add photos to the photo library of a device.
<device> <path> [... <path>]
addvideo
Add videos to the photo library of a device.
addmedia
Add photos, live photos, or videos to the photo library of a device.
<device> <path> [... <path>]
You can specify multiple files including a mix of photos and videos.
You can also specify multiple live photos by providing the photo and video files. They will automatically be discovered and imported correctly.
install
Install an app on a device.
<device> <path>
uninstall
Uninstall an app from a device.
<device> <app identifier>
get_app_container
Print the path of the installed app's container
launch
Launch an application by identifier on a device.
[-w | --wait-for-debugger] [--console] [--stdout=<path>] [--stderr=<path>] <device> <app identifier> [<argv 1> <argv 2> ... <argv n>]
--console Block and print the application's stdout and stderr to the current terminal.
Signals received by simctl are passed through to the application.
(Cannot be combined with --stdout or --stderr)
--stdout=<path> Redirect the application's standard output to a file.
--stderr=<path> Redirect the application's standard error to a file.
Note: Log output is often directed to stderr, not stdout.
If you want to set environment variables in the resulting environment, set them in the calling environment with a SIMCTL_CHILD_ prefix.
terminate
Terminate an application by identifier on a device.
spawn
Spawn a process on a device.
[-w | --wait-for-debugger] [-a <arch> | --arch=<arch>] <device> <path to executable> [<argv 1> <argv 2> ... <argv n>]
If you want to set environment variables in the resulting environment, set them in the calling environment with a SIMCTL_CHILD_ prefix.
list
List available devices, device types, runtimes, or device pairs.
[-j | --json] [devices|devicetypes|runtimes|pairs]
icloud_sync
Trigger iCloud sync on a device.
<device>
pbinfo
Print information about the device's pasteboard
<device or "host">
pbsync
Sync the pasteboard content from one pasteboard to another.
[-pv] <source device or "host"> <destination device or "host">
 -p causes simctl to use promise data for secondary types.  simctl will continue to run to provide that promise data until something else replaces it on the pasteboard.
pbcopy
Copy standard input onto the device pasteboard.
[-v] <device or "host">
pbpaste
Print the contents of the device's pasteboard to standard output.
notify_post
Post a darwin notification on a device.
<device> <notification name>
notify_get_state
Set the state value of a darwin notification on a device.
notify_set_state
Get the state value of a darwin notification on a device.
<device> <notification name> <state>
register
Register a service from one bootstrap into another.
<source device or "host">/<service> <destination device>/<service>
unregister
Unregister a service from a device's bootstrap.
<device> <service>
keyboard
Set the device's keyboard language.
<device> <language>
monitor
List notifications as they arrive.
appinfo
Show information about an installed application.
<device> <bundle identifier>
listapps
Show the installed applications.
help
Prints the usage for a given subcommand.
<subcommand>
Set up a device IO operation.
<device> <operation> <arguments>
Supported operations:
enumerate [--poll]
    Lists all available IO ports and descriptor states.
    --poll       Poll after enumeration.
poll
    Polls all available IO ports for events.
recordVideo [--type=<type>] [--display=<display>] <file>
    Records the main framebuffer display to the specified file (use "-" for stdout).
    --type       "h264", "mp4" or "fmp4". Default is "mp4".
screenshot [--type=<type>] [--display=<display>] [<file>]
    Saves a screenshot as a PNG to the specified file (use "-" for stdout).
    If no file is specified a default filename will be used.
    --type       Can be "png", "tiff", "bmp", "gif", "jpeg". Default is png.
    --display    iOS: supports "main" or "tv". Default is "main".
                 tvOS: supports only "tv"
                 watchOS: supports only "main"
Example:
Save a screenshot of the booted device to screenshot.png:
simctl io booted screenshot screenshot.png
Pipe fragmented mp4 video of the booted device to another program:
simctl io booted recordVideo --type=fmp4 - | <other program>
%s%s
Usage: %s %s %s
XPC_SERVICES_UNAVAILABLE
XPCServices are unavailable.  Managing devices in-process.
Running inside of an XBS Chroot.  Managing devices in-process.
--noxpc
--version
--set
Provided set path does not exist: %@
--profiles
Provided profiles path does not exist: %@
Unable to locate device set: %@
com.apple.CoreSimulator.LaunchdSimError
An error was encountered processing the command (domain=%@, code=%ld):
Unrecognized subcommand: %s
%s%s%c
        
usage: %s [--noxpc] [--set <path>] [--profiles <path>] <subcommand> ...
       %s help [subcommand]
Command line utility to control the Simulator
For subcommands that require a <device> argument, you may specify a device UDID or the special "booted" string which will cause simctl to pick a booted device.  If multiple devices are booted when the "booted" device is selected, simctl will choose one of them.
Subcommands:
%-20s%s
%llu
ErrorsDictionary
Failed to import '%@', error %ld: %@
Warning: addphoto is deprecated, use addmedia instead
Errors encountered for multiple photo additions.
Warning: addvideo is deprecated, use addmedia instead
Platforms
Contents/Developer
XCODE_DEVELOPER_DIR_PATH
/Applications/Xcode.app
___xcodeAppPath_block_invoke
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSimulator/CoreSimulator-338.16/CoreSimulator/simutil/find_xcode.m
(path != nil) && "Unable to determine path to Xcode.app"
NSString * _Nonnull _xcodeAppPathForNestedFile(NSString * _Nonnull __strong)
Invalid parameter not satisfying: %@
inputPath
xpc_event_object
error
BOOL simservice_send_request_sync(const xpc_connection_t  _Nonnull __strong, FoundationXPCDictionary *const  _Nonnull __strong, FoundationXPCDictionary * _Nullable __autoreleasing *const _Nullable, NSError * _Nullable __autoreleasing *const _Nullable)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSimulator/CoreSimulator-338.16/CoreSimulator/simutil/util.m
Invalid request dictionary
Error returned in reply: %s
/AppleInternal
/var/db/disableAppleInternal
XBS_IS_CHROOTED
/AppleInternal/XBS/.isChrooted
/BuildSupport/makeProject
/BinaryCache
/mnt/baas
XBS_REVISION
RC_BUILDIT
/System/Library/CoreServices/SystemVersion.plist
__currentHostVersion_block_invoke
Unable to determine system version - /System/Library/CoreServices/SystemVersion.plist is missing %@ property.
Unable to determine system version - /System/Library/CoreServices/SystemVersion.plist is either missing or invalid.
CFBundleVersion
dispatch_assert_queue
dispatch_assert_queue$V2
S16@0:8
I16@0:8
c24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
c16@0:8
c24@0:8#16
c24@0:8@"Protocol"16
c24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
@"NSString"16@0:8
i16@0:8
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
d16@0:8
SimDisplayDescriptorState
FoundationXPCProtocolProxyable
NSObject
SimDeviceIOPortDescriptorState
SimDisplayIOSurfaceRenderable
SimDisplayDamageRectangle
SimDisplayRotationAngle
--wait-for-debugger
--console
--stdout=
--stderr=
@(#)PROGRAM:simctl  PROJECT:CoreSimulator-338.16
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>15A284</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.CoreSimulator.simctl</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleShortVersionString</key>
<string>338.16</string>
<key>CFBundleSignature</key>
<string>????</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>MacOSX</string>
</array>
<key>CFBundleVersion</key>
<string>338.16</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>8C34</string>
<key>DTPlatformVersion</key>
<string>GM</string>
<key>DTSDKBuild</key>
<string>16C37</string>
<key>DTSDKName</key>
<string>macosx10.12internal</string>
<key>DTXcode</key>
<string>0820</string>
<key>DTXcodeBuild</key>
<string>8C34</string>
<key>NSHumanReadableCopyright</key>
<string>Copyright 
 2013-2016 Apple Inc. All rights reserved.</string>
</dict>
</plist>
