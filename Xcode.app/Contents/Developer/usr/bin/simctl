errorWithSimErrno:
devices
countByEnumeratingWithState:objects:count:
available
addObject:
state
shutdownWithError:
deleteDevice:error:
count
objectAtIndexedSubscript:
dictionaryWithObjects:forKeys:count:
domain
code
errorWithDomain:code:userInfo:
items
arrayWithObjects:count:
types
containsObject:
valueForType:
stringWithUTF8String:
terminateApplicationWithID:error:
setKeyboardLanguage:error:
availableDevices
eraseContentsAndSettingsWithError:
init
UTF8String
closeArchive
dealloc
defaultManager
contentsOfDirectoryAtPath:error:
stringByAppendingPathComponent:
fileExistsAtPath:isDirectory:
lastPathComponent
addDirectoryToArchive:withDirName:error:
addFileToArchive:withFileName:error:
initWithPath:shouldCompress:error:
_archive
_archive_fd
resolveAllTypes
setPasteboardWithItems:error:
objectForKeyedSubscript:
isEqualToString:
unsignedLongLongValue
registerNotificationHandlerOnQueue:handler:
changeCount
unregisterNotificationHandler:error:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
descriptiveName
dataPath
copyItemAtPath:toPath:error:
logPath
devicePath
UDID
UUIDString
stringWithFormat:
fileExistsAtPath:
deviceSet
runtime
root
setObject:forKeyedSubscript:
numberWithInt:
spawnWithPath:options:terminationQueue:terminationHandler:pid:error:
fileSystemRepresentation
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
_saveDevicePlistToDestination:
_saveLogArchiveToDestination:terminationQueue:terminationGroup:
_saveLaunchctlDumpstateToDestination:terminationQueue:terminationGroup:
_saveIOEnumerateLogToDestination:
_saveHostLaunchdJobStateToDestination:
_saveLogsToDestination:
_saveLaunchdLogToDestination:
_saveDataToDestination:
launchdJobName
saveLogsToDestination:captureData:completionQueue:completionHandler:
stringByStandardizingPath
integerValue
handleFailureInFunction:file:lineNumber:description:
class
bundleForClass:
writeToFile:atomically:
addProfilesAtPath:
mutableCopy
deviceSetWithPath:error:
addObjectsFromArray:
stringByAppendingPathExtension:
stringByDeletingLastPathComponent
alloc
removeItemAtPath:error:
URLQueryAllowedCharacterSet
stringByAddingPercentEncodingWithAllowedCharacters:
sharedWorkspace
URLWithString:
openURL:
infoDictionary
bundleIdentifier
bundlePath
fileHandleForWritingAtPath:
setLaunchPath:
setArguments:
setStandardOutput:
setStandardError:
launch
waitUntilExit
synchronizeFile
closeFile
setPath
openURL:error:
lowercaseString
installedAppsWithError:
path
sharedServiceContextForDeveloperDir:error:
initWithUUIDString:
devicesByUDID
isEqual:
deviceType
supportedArchs
name
devicePairsByUUID
supportedDeviceTypesByAlias
supportedRuntimesByAlias
generalPasteboard
pasteboardForNSPasteboard:refreshResolveCount:
pasteboard
initWithFormat:arguments:
errorWithSimErrno:userInfo:
bundledRuntimes
hasPrefix:
stringByReplacingOccurrencesOfString:withString:
upgradeToRuntime:error:
triggerCloudSyncWithError:
rename:error:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
ioPortForUUID:
ioPorts
bundleWithIdentifier:
localizedStringForKey:value:table:
errorWithSimErrno:localizedDescription:
ioPortClass
descriptor
powerState
displayClass
defaultWidthForDisplay
defaultHeightForDisplay
defaultPixelFormat
mask
numberWithUnsignedShort:
uuid
specification
allKeys
registerCallbackWithUUID:ioSurfaceChangeCallback:
unregisterIOSurfaceChangeCallbackWithUUID:
registerCallbackWithUUID:ioSurfacesChangeCallback:
unregisterIOSurfacesChangeCallbackWithUUID:
framebufferSurface
maskedFramebufferSurface
ioSurface
width
height
bytesPerRow
allocationSize
pixelFormat
bytesPerElement
boolValue
registerCallbackWithUUID:rotationAngleCallback:
unregisterRotationAngleCallbackWithUUID:
displayAngle
consoleDebugger_stringForSquareAngle:
listMemoryRegionsWithcompletionQueue:completionHandler:
createMemoryRegionWithConfiguration:uuid:completionQueue:completionHandler:
registerMemoryRegion:uuid:completionQueue:completionHandler:
unregisterMemoryRegionForUUID:completionQueue:completionHandler:
rendererPrivateName
rendererVersion
isBlacklisted
inhibitCacheForPrivate
requiresPixelCasting
environment
routeGuestDeviceScope:toHostDeviceUID:completionQueue:completionHandler:
registerCallbackWithUUID:selectedDeviceUIDChangedCallback:
registerCallbackWithUUID:availableDevicesChangedCallback:
unregisterCallbackWithUUID:
availableHostDevices
guestInputHostDeviceUID
guestOutputHostDeviceUID
uniqueIdentifier
displayName
inputChannels
outputChannels
initWithDebugLoggingBlock:
UUID
rectValue
didReceiveDamageRect:
registerCallbackWithUUID:damageRectanglesCallback:
didChangeIOSurface:
didChangeDisplayAngle:
setWithArray:
length
unregisterDamageRectanglesCallbackWithUUID:
finishWriting
removeObjectIdenticalTo:
videoWriterForDispatchIO:fileType:completionQueue:completionHandler:
startWriting
removeAllObjects
substringFromIndex:
host
scheme
port
unsignedIntValue
isAbsolutePath
currentDirectoryPath
fileType:fromString:
initWithIo:port:fileType:error:
writeScreenshotWithDispatchIO:maskPolicy:error:
numberWithBool:
bootWithOptions:error:
cloneDevice:name:error:
mainBundle
pathComponents
pathExtension
componentsSeparatedByString:
getenv:error:
isExecutableFileAtPath:
unregisterService:error:
lookup:error:
registerPort:service:error:
productFamilyID
stringByExpandingTildeInPath
fileURLWithPath:
installApplication:withOptions:error:
uninstallApplication:withOptions:error:
createDeviceWithType:runtime:name:error:
defaultCStringEncoding
fileHandleWithStandardInput
readDataToEndOfFile
initWithData:encoding:
setValue:forType:
launchApplicationWithID:options:pid:error:
arrayWithArray:
setObject:atIndexedSubscript:
pipe
fileHandleForWriting
fileHandleForReading
availableData
hasSuffix:
substringToIndex:
arrayWithObjects:
fileHandleWithStandardOutput
supportedDeviceTypes
identifier
supportedRuntimes
isAvailableWithError:
localizedFailureReason
versionString
buildVersionString
runtimeIdentifier
stateString
localizedCompare:
sortedArrayUsingSelector:
devicePairs
active
connected
gizmo
companion
dataWithJSONObject:options:error:
propertiesOfApplication:error:
setSharedContextConnectionType:
stringWithFileSystemRepresentation:length:
defaultDeviceSetWithError:
localizedDescription
localizedRecoverySuggestion
userInfo
connectionType
mainRunLoop
createDevicePairWithGizmo:companion:error:
unpairDevicePair:error:
setActiveWithError:
postDarwinNotification:error:
darwinNotificationGetState:name:error:
darwinNotificationSetState:name:error:
status
migrationPhaseDescription
migrationElapsedTime
date
isTerminalStatus
bootElapsedTime
bootStatus
addMedia:error:
addPhoto:error:
addVideo:error:
unavailable
Errors encountered while deleting multiple devices.
Errors
The pasteboard holds no items.
The pasteboard does not hold any items with a textual representation.
com.apple.simctl.errors
available
v8@?0
Errors encountered while erasing multiple devices.
com.apple.simctl.archive
Unable to write or file already exists
Unknown
notification
%d items written, new change count is %lu, sync is successful.
Unable to sync.
content_changed
new_change_count
Pasteboard contents changed (new change count is %llu).  We no longer need to provide promised data.  Exiting.
v16@?0@"NSDictionary"8
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSimulator/CoreSimulator-518.21/simctl/cmd_diagnose.m
<Unknown File>
Invalid parameter not satisfying: %@
deviceDestination
data
Gathering data container for %@
Error copying device data for %@: %@
logs
Gathering logs for %@
Error copying device logs for %@: %@
device.plist
Gathering device info for %@
Error copying device plist for %@ from '%@' to '%@': %@
/tmp
com.apple.CoreSimulator.SimDevice.%@
launchd_sim
Gathering launchd logs for %@
Error copying device launchd log for %@ from '%@' to '%@': %@
Gathering io enumerate for %@
io_enumerate.log
enumerate
terminationQueue
terminationGroup
Gathering launchd state for %@
bin/launchctl
Unable to gather launchd state for %@, launchctl executable does not exist.
launchctl
dumpstate
launchd_state.log
Unable to get launchd state for %@, launchctl dumpstate exited with %d
v12@?0i8
Error dumping launchctl state for %@: %@
Unable to get launchd state for %@, cannot open '%@': %@
Gathering logarchive for %@
usr/bin/log
Unable to gather logarchive for %@, log executable does not exist.
system.logarchive
collect
--output
Unable to gather logarchive for %@, 'log collect' exited with %d.  Trying `log show`
log_show.log
Unable to gather logs for %@: Failed to create output log file %@: %s
show
--debug
--info
Unable to gather logs for %@: 'log show' exited with %d.
Error gathering logs for %@: %@
Unable to create destination directory for %@ at '%@', skipping device. Error: %@
hostLaunchd_state.log
user/%d/%@
Gathering host launchd state for %@
/bin/launchctl
print
Cannot write to '%@'
diagnose.log
NSError * _Nullable ctl_command_diagnose(int, const char *const  _Nullable * _Nonnull)
<Unknown Function>
Unable to write to '%@'
Writing to %@
xcode_version.log
/usr/bin/xcodebuild
-version
-sdk
host_version.log
/usr/sbin/system_profiler
SPSoftwareDataType
simctl_list.log
list
Getting Simulator component versions...
simulator_version.log
Unable to write version info to %@
CoreSimulator
SimulatorKit
Collecting CoreSimulator logs...
Skipping '%@', file does not exist or is a directory
Error copying '%@' to '%@': %@
sim_environment.plist
com.apple.simctl.diagnose
Platforms/AppleTVSimulator.platform/Developer/Library/Xcode/PrivatePlugIns/IDEInterfaceBuilderAppleTVIntegration.ideplugin/Contents/Resources
Platforms/iPhoneSimulator.platform/Developer/Library/Xcode/PrivatePlugIns/IDEInterfaceBuilderiOSIntegration.ideplugin/Contents/Resources
Library/Developer/XCPGDevices
Library/Developer/Xcode/UserData/IB Support/Simulator Devices
No booted devices found, collecting logs from bootable devices
building
Collecting device information (this may take some time)...
This operation will time-out after %lld seconds.
v16@?0@"NSError"8
TIMEOUT - Waited %lld seconds for all devices to finish gathering but they never did.
Successfully wrote files to '%@'
Compressing Archive...
tar.gz
Error creating archive at '%@'. Files are still in %@
Error adding files to archive at '%@'. Files are still in %@
Successfully wrote simctl diagnose archive to '%@'
Error cleaning up temporary files at '%@'
rdar://new/problem/attachments=%@
file:///%@
Bundle '%@':
path: %@
version:%@
Unable to find %@ bundle to get version info!
Unable to run %@: %@
--sdk
iphoneos
simctl
--set
--profiles
/usr/bin/xcrun
%Y_%m_%d.%H-%M-%S%z
NSString * _Nullable _output_directory(NSError * _Nullable __autoreleasing * _Nullable)
strftime failed, that should never happen
/private/tmp/simctl_diagnose_%@
~/Library/Logs/CoreSimulator/CoreSimulator.log
~/Library/Logs/CoreSimulator/Simulator.log
~/Library/Developer/CoreSimulator/Devices/device_set.plist
void _diagnose_log(NSString * _Nonnull __strong, ...)
format
/AppleInternal
/var/db/disableAppleInternal
XBS_IS_CHROOTED
/AppleInternal/XBS/.isChrooted
/BuildSupport/makeProject
/BinaryCache
/mnt/baas
XBS_REVISION
RC_BUILDIT
GroupContainers
groups
DataContainer
bundle
BundleContainer
Path
Error getting a serviceContext: %@
Missing device
SimDevice * _Nonnull simctl_get_device(const char *const _Nonnull)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSimulator/CoreSimulator-518.21/simctl/util.m
Failed to create string from %s.
booted
No devices are booted.
Unable to determine the runtime to resolve the 'building' device alias.
No devices found that match the build environment.
Invalid device: %s
Missing device pair
SimDevicePair * _Nonnull simctl_get_devicePair(const char *const _Nonnull)
Failed to create UUID from %@.
Invalid device pair: %s
Missing device type
Invalid device type: %s
Missing runtime
Invalid runtime: %s
host
SIMCTL_CHILD_
void ctl_forward_signals(SimDevice *const  _Nonnull __strong, int, NSString *const  _Nonnull __strong)
Unable to create signal dispatch_source for %d
Could not shutdown application nicely, attempting SIGKILL: %@
com.apple.simctl.terminate
UnderlyingException
Unable to create NSTask
%lld
com.apple.simulator.simctl
com.apple.message.signature3
com.apple.message.signature2
com.apple.message.result
fail
pass
com.apple.message.signature
com.apple.message.summarize
com.apple.message.coresim_version
518.21
error: Unable to resolve the 'building' device alias.  No runtimes match platformDir=%@, runtimes=%@
DEVICE_PLATFORM_DIR
SIMULATOR_PLATFORM_DIR
Simulator.platform
OS.platform
SDKROOT
error: Unable to resolve the 'building' device alias.  You must set DEVICE_PLATFORM_DIR, pass an appropriate -sdk to xcrun, or set SDKROOT.
--type=
--mask=
--display=
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
ioPorts
T@"NSArray",R,N
com.apple.CoreSimulator
Failed to initialize device IO.
NSError * _Nullable ctl_command_device_io(int, const char *const  _Nullable * _Nonnull)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSimulator/CoreSimulator-518.21/simctl/cmd_io.m
Failed to get device IO.
Failed to create operation name string.
powerState
Ti,R,N
displayClass
TS,R,N
defaultWidthForDisplay
TI,R,N
defaultHeightForDisplay
defaultPixelFormat
mask
T@"NSURL",R,N
internal
main
external
Error: Device does not have a '%@' display port
poll
recordVideo
screenshot
--poll
Default cache
Inhibit cache
Write-thru cache
Copy back cache
Write combine cache
Copy back inner cache
Display
Audio
LegacyHID
StreamProcessor
Port:
    UUID: %@
Unsupported
    Class: %@
    Power state: %@
    Display class: %d
    Default width: %d
    Default height: %d
    Default pixel format: %@
specification
T@"NSDictionary",R,N
    Stream processor device
    Specification:
        %@ = %@
framebufferSurface
T@"IOSurface",R,N
maskedFramebufferSurface
ioSurface
    IOSurface port:
        width              = %ld
        height             = %ld
        bytes per row      = %ld
        size               = %ld
        pixel format       = %@
        bytes per element  = %ld
NSError * _Nullable io_operation_enumerate(__strong id<SimDeviceIOClientProtocol> _Nonnull, int, const char *const  _Nullable * _Nonnull)
Failed to get creation properties from IO surface.
Failed to get cache mode from IO surface.
Cache mode %@ not recognized.
        CPU cache mode     = %@
Failed to get pixel casting attribute from IO surface.
        Pixel size casting = %@
displayAngle
Td,R,N
    Display rotation:
        Angle              = %@ radians
state
T@"<SimDeviceIOPortDescriptorState>",R,N
rendererPrivateName
T@"NSString",R,N
rendererVersion
isBlacklisted
Tc,R,N
inhibitCacheForPrivate
requiresPixelCasting
    Renderer private name: %@
    Renderer version: %@
    Blacklisted: %@
    Memory regions:
Failed to create group to capture memory regions listing.
        Name: %@
v24@?0@"NSSet"8@"NSError"16
environment
uuid
T@"NSUUID",R,N
availableHostDevices
guestInputHostDeviceUID
guestOutputHostDeviceUID
    Guest Audio Input -> Default Host Audio Device
    Guest Audio Input -> Host Audio Device #%@
    Guest Audio Output -> Default Host Audio Device
    Guest Audio Output -> Host Audio Device #%@
    Host Audio Devices:
        %@: %@ (%d In / %d Out)
Polling all IO ports for events.
NSError * _Nullable io_operation_poll(__strong id<SimDeviceIOClientProtocol> _Nonnull, int, const char *const  _Nullable * _Nonnull)
Failed to create console mappings dictionary.
v16@?0@"NSString"8
Failed to create display console debugger.
NSError * _Nullable io_operation_poll(__strong id<SimDeviceIOClientProtocol> _Nonnull, int, const char *const  _Nullable * _Nonnull)_block_invoke_2
Failed to create semaphore for SIGINT source.
Failed to dispatch source for SIGINT.
Polling completed.
NSError * _Nullable io_operation_poll(__strong id<SimDeviceIOClientProtocol> _Nonnull, int, const char *const  _Nullable * _Nonnull)_block_invoke
Failed to find IO port for UUID %@.
Failed to find console debugger for port %@.
v16@?0@"NSArray"8
v24@?0@"IOSurface"8@"IOSurface"16
v16@?0d8
@"NSError"16@?0@"NSString"8
ignored
alpha
black
NSError * _Nullable io_operation_recordVideo(__strong id<SimDeviceIOClientProtocol> _Nonnull, int, const char *const  _Nullable * _Nonnull)
Failed to create queue attributes for cleanup blocks queue.
com.apple.simctl.cleanupBlocksQueue
Failed to create main queue.
Failed to create session UUID.
Error: %@.
Video recording requires hardware Metal capability.
NSError * _Nullable io_operation_recordVideo(__strong id<SimDeviceIOClientProtocol> _Nonnull, int, const char *const  _Nullable * _Nonnull)_block_invoke
Descriptor is not an IOSurface renderable.
Recording... (Press CTRL+C to stop)
Recording completed.
Unsupported URL scheme.
Unsupported host.
Using host address %@.
Connected to client address at %@.
%@/%@
Failed to open IO channel to path.
Invalid file type: %@
NSError * _Nullable io_operation_screenshot(__strong id<SimDeviceIOClientProtocol> _Nonnull, int, const char *const  _Nullable * _Nonnull)
Failed to create screenshot writer but got no error
Wrote screenshot to: %@
--disabledJob=
--enabledJob=
Expected job identifier with '--disabledJob=' or '--enabledJob='
Unknown argument: %@
Contents/Developer
XCODE_DEVELOPER_DIR_PATH
/Applications/Xcode.app
_xcodeAppPath_block_invoke
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSimulator/CoreSimulator-518.21/simctl/find_xcode.m
(path != nil) && "Unable to determine path to Xcode.app"
NSString * _Nonnull _xcodeAppPathForNestedFile(NSString * _Nonnull __strong)
inputPath
--wait-for-debugger
--arch=
--standalone
Child process terminated with signal %d: %s
PATH
'%@' not found
Unable to lookup host service %s
Unable to lookup device service %s: %ld
Registration in the host bootstrap is not permitted.
Unable to register service %s: %ld
There are no booted devices!
Device %@ is not booted!
com.apple.simctl.logverbose
com.apple.gizmoappd
FileLoggingLevel
ConsoleLoggingLevel
com.apple.companionappd
com.apple.frontboard
FBLoggingTypes
-array-add -string FBWorkspaceLog
com.apple.DTServiceHub
MaxLogLevelInclusive
DTXPCControlServiceLog
DTXPCServiceControllerLog
Timed out waiting for device(s) to respond
Successfully %@ verbose logging
enabled
disabled
defaults
write
delete
usr/bin/defaults
Error writing to %@, defaults exited with %d
Error trying to change defaults for %@: %@
SimPasteboardItem: %@
Cannot combine --console with --stdout or --stderr
%@: Error %ld
Unable to open pty
Unable to grant pty permissions
Unable to unlock pty
NSError * _Nullable ctl_command_launch(int, const char *const  _Nullable * _Nonnull)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSimulator/CoreSimulator-518.21/simctl/cmd_launch.m
Unable to create pty dispatch source for launch.
%@: %d
iphonesimulator
getenv
SIMULATOR_ROOT
--show-sdk-path
No path returned by xcrun
/usr/bin/darwinup
udid
name
devices
devicetypes
runtimes
pairs
--json
== Device Types ==
identifier
== Runtimes ==
 (unavailable%@%@)
version
buildversion
availability
(available)
== Devices ==
-- %@ --
    %@ (%@) (%@)%@
-- Unavailable: %@ --
== Device Pairs ==
(active, connected)
(active, disconnected)
(inactive, connected)
(inactive, disconnected)
(unavailable)
watch
phone
%@ %@
    Watch: %@ (%@) (%@)
    Phone: %@ (%@) (%@)
create
Create a new device.
<name> <device type id> <runtime id>
clone
Clone an existing device.
<device> <new name>
upgrade
Upgrade a device to a newer runtime.
<device> <runtime id>
Delete a device or all unavailable devices.
<device> [... <device n>] | unavailable
Specifying unavailable will delete devices that are not supported by the current Xcode SDK.
pair
Create a new watch and phone pair.
<watch device> <phone device>
unpair
Unpair a watch and phone pair.
<pair UUID>
pair_activate
Set a given pair as active.
<pair>
erase
Erase a device's contents and settings.
<device> [... <device n>] | all
Specifying all will erase all existing devices.
boot
Boot a device.
<device> [-disabledJob=<job>] [--disabledJob=<job>]
--disabledJob=<job>     Disables the given launchd job. Multiple jobs can be disabled by passing multiple flags.
--enabledJob=<job>      Enables the given launchd job when it would normally be disabled.
                        Multiple jobs can be enabled by passing multiple flags.
If you want to set environment variables in the resulting environment, set them in the calling environment with a SIMCTL_CHILD_ prefix.
shutdown
Shutdown a device.
<device> | all
Specifying all will shut down all running devices
rename
Rename a device.
<device> <name>
Print an environment variable from a running device.
<device> <variable name>
openurl
Open a URL in a device.
<device> <URL>
addphoto
Add photos to the photo library of a device.
<device> <path> [... <path>]
addvideo
Add videos to the photo library of a device.
addmedia
Add photos, live photos, or videos to the photo library of a device.
<device> <path> [... <path>]
You can specify multiple files including a mix of photos and videos.
You can also specify multiple live photos by providing the photo and video files. They will automatically be discovered and imported correctly.
install
Install an app on a device.
<device> <path>
uninstall
Uninstall an app from a device.
<device> <app identifier>
get_app_container
Print the path of the installed app's container
<device> <app identifier> [<container>]
container   Optionally specify the container. Defaults to app.
  app                 The .app bundle
  data                The application's data container
  groups              The App Group containers
  <group identifier>  A specific App Group container
launch
Launch an application by identifier on a device.
[-w | --wait-for-debugger] [--console] [--stdout=<path>] [--stderr=<path>] <device> <app identifier> [<argv 1> <argv 2> ... <argv n>]
--console Block and print the application's stdout and stderr to the current terminal.
Signals received by simctl are passed through to the application.
(Cannot be combined with --stdout or --stderr)
--stdout=<path> Redirect the application's standard output to a file.
--stderr=<path> Redirect the application's standard error to a file.
Note: Log output is often directed to stderr, not stdout.
If you want to set environment variables in the resulting environment, set them in the calling environment with a SIMCTL_CHILD_ prefix.
terminate
Terminate an application by identifier on a device.
spawn
Spawn a process on a device.
[-w | --wait-for-debugger] [-s | --standalone] [-a <arch> | --arch=<arch>] <device> <path to executable> [<argv 1> <argv 2> ... <argv n>]
If you want to set environment variables in the resulting environment, set them in the calling environment with a SIMCTL_CHILD_ prefix.
List available devices, device types, runtimes, or device pairs.
[-j | --json] [devices|devicetypes|runtimes|pairs]
icloud_sync
Trigger iCloud sync on a device.
<device>
pbinfo
Print information about the device's pasteboard
<device or "host">
pbsync
Sync the pasteboard content from one pasteboard to another.
[-pv] <source device or "host"> <destination device or "host">
 -p causes simctl to use promise data for secondary types.  simctl will continue to run to provide that promise data until something else replaces it on the pasteboard.
pbcopy
Copy standard input onto the device pasteboard.
[-v] <device or "host">
pbpaste
Print the contents of the device's pasteboard to standard output.
notify_post
Post a darwin notification on a device.
<device> <notification name>
notify_get_state
Set the state value of a darwin notification on a device.
notify_set_state
Get the state value of a darwin notification on a device.
<device> <notification name> <state>
register
Register a service from one bootstrap into another.
<source device or "host">/<service> <destination device>/<service>
unregister
Unregister a service from a device's bootstrap.
<device> <service>
keyboard
Set the device's keyboard language.
<device> <language>
monitor
List notifications as they arrive.
appinfo
Show information about an installed application.
<device> <bundle identifier>
listapps
Show the installed applications.
help
Prints the usage for a given subcommand.
<subcommand>
Set up a device IO operation.
<device> <operation> <arguments>
Supported operations:
enumerate [--poll]
    Lists all available IO ports and descriptor states.
    --poll       Poll after enumeration.
poll
    Polls all available IO ports for events.
recordVideo [--type=<type>] [--display=<display>] [--mask=<policy>] <file or url>
    Records the main framebuffer display to the specified file or url (use "-" for stdout).
    --type       "h264", "mp4" or "fmp4". Default is "mp4". For "fmp4" it is beneficial to use sockets.
    --mask       For non-rectantular displays, handle the mask by policy:
                 ignored: The mask is ignored and the unmasked framebuffer is saved.
                 black: The mask is rendered black.
screenshot [--type=<type>] [--display=<display>] [--mask=<policy>] <file or url>
    Saves a screenshot as a PNG to the specified file or url(use "-" for stdout).
    --type       Can be "png", "tiff", "bmp", "gif", "jpeg". Default is png.
    --display    iOS: supports "internal" or "external". Default is "internal".
                 tvOS: supports only "external"
                 watchOS: supports only "internal"
    --mask       For non-rectantular displays, handle the mask by policy:
                 ignored: The mask is ignored and the unmasked framebuffer is saved.
                 alpha: The mask is used as premultiplied alpha.
                 black: The mask is rendered black.
Example:
Save a screenshot of the booted device to screenshot.png:
simctl io booted screenshot screenshot.png
Pipe fragmented mp4 video of the booted device to another program:
simctl io booted recordVideo --type=fmp4 - | <other program>
Notes:
A URL may be specified instead of a file to establish a server socket.
The syntax for accepted URLs is: "[tcp|udp]://[ipv4|ipv6]:<port>"
Valid examples are: "tcp://127.0.0.1:9152" and "udp://[::1]:8152".
diagnose
Collect diagnostic information and logs.
[-bX] [--timeout=<duration>] [--output=<path>] [--no-archive] [--all-logs] [--data-containers]
-b                Do NOT show the resulting archive in a Finder window upon completion.
-X                Run all diagnostics with no timeout. It ignores the --timeout value if it is specified.
--timeout         Specify a duration (in seconds) to wait for the log collection before timeout.
--output          Specify the output directory.
                  If not provided the temporary directory is used.
--no-archive      Do not create an archive, leave the collected files uncompressed.
--all-logs        Include all device logs, even for non-booted devices.
--data-container  Include booted device(s) data directory.
                  Warning: May include private information, app data containers,
                  and increases the size of the archive!
                  Default is NOT to collect the data container.
Please provide simctl diagnose output when filing bugs.
NOTE: If there are booted devices only logs from those devices are collected by default, otherwise --all-logs is assumed. More information can be collected from a booted device so you should prefer leaving affected simulators booted when running simctl diagnose. 
NOTE: You can run 'simctl <device> logverbose enable' to enable verbose logging and reboot the device before reproducing the problem and running 'simctl diagnose'.
--create-radar    Create a new radar with the output attached.
                  (--no-archive will be ignored)
logverbose
enable or disable verbose logging for a device
[<device>] (enable | disable)
<device>         The device. If not provided all booted devices are affected.
enable           Enables verbose logging
disable          Disables verbose logging
NOTE: You may need to reboot the affected device before logging changes will be effective.
bootstatus
Checks device boot status.
<device>
Monitors the specified device and prints boot status information until the device finishes booting. You can safely call this before you attempt to start booting the device.
darwinup
Invoke darwinup to install a root for the specified simulator runtime.
[-s] <platform> [install | list | uninstall] [<archive>]
-s         Use the SDK root path instead of the runtime root.
<platform> Simulator platform, i.e. iphonesimulator, watchsimulator, appletvsimulator.
install    Install the root specified by <archive>.
list       List the roots installed.
uninstall  Remove the root specified by <archive>.
/Library/Developer/PrivateFrameworks/CoreSimulator.framework/Resources/bin/simctl
XPC_SERVICES_UNAVAILABLE
XPCServices are unavailable.  Managing devices in-process.
Running inside of an XBS Chroot.  Managing devices in-process.
--noxpc
--version
playgrounds
Using Playgrounds Device Set: '%@'
interfacebuilder
Using Interface Builder Device Set: '%@'
Provided set path does not exist: %@
Provided profiles path does not exist: %@
Unable to locate device set: %@
com.apple.CoreSimulator.LaunchdSimError
An error was encountered processing the command (domain=%@, code=%ld):
Underlying error (domain=%@, code=%ld):
Unrecognized subcommand: %s
usage: %s [--noxpc] [--set <path>] [--profiles <path>] <subcommand> ...
       %s help [subcommand]
Command line utility to control the Simulator
For subcommands that require a <device> argument, you may specify a device UDID or the special "booted" string which will cause simctl to pick a booted device.  If multiple devices are booted when the "booted" device is selected, simctl will choose one of them.
Subcommands:
%-20s%s
%s%s
Usage: %s %s %s
Apple Internal Only:
%s%s%c
        
%llu
com.apple.simctl.bootstatus
Monitoring boot status for %@ (%@).
Booting
Waiting on BackBoard
Waiting on Data Migration
Reason:%@
Migration Elapsed:%@ seconds
Waiting on System App
Data Migration Failed
Finished
[%@] Status=%lu, isTerminal=%@, Elapsed=%@.
Device already booted, nothing to do.
Device is shutdown or shutting down. Waiting for boot to begin...
%d:%02d:%02d
%02d:%02d
ErrorsDictionary
Failed to import '%@', error [%@] %ld: %@
Warning: addphoto is deprecated, use addmedia instead
Errors encountered for multiple photo additions.
Warning: addvideo is deprecated, use addmedia instead
Archive
diagnose
SimDeviceIOClientProtocol
SimDeviceIOProtocol
NSObject
SimDisplayDescriptorState
FXPCMemoizable
SimDeviceIOPortDescriptorState
SimStreamProcessorDescriptorState
SimDisplayIOSurfaceRenderable
FXPCImpersonateable
SimDisplayRotationAngle
SimStreamProcessable
SimDeviceIOPortDescriptorInterface
SimDeviceIOResourceManagerInterface
SimAudioHostRoutable
SimEnvironmentProvider
@36@0:8@16c24^@28
v16@0:8
c40@0:8@16@24^@32
^{archive=}
v24@0:8@16
v40@0:8@16@24@32
v44@0:8@16c24@28@?36
c24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
c16@0:8
c24@0:8#16
c24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
c24@0:8@"Protocol"16
@"NSString"16@0:8
@24@0:8@16
@"<SimDeviceIOPortInterface>"24@0:8@"NSUUID"16
@"NSArray"16@0:8
i16@0:8
S16@0:8
I16@0:8
@"NSURL"16@0:8
@"NSDictionary"16@0:8
v32@0:8@16@?24
v32@0:8@"NSUUID"16@?<v@?@"IOSurface">24
v24@0:8@"NSUUID"16
v32@0:8@"NSUUID"16@?<v@?@"IOSurface"@"IOSurface">24
@"IOSurface"16@0:8
d16@0:8
v32@0:8@"NSUUID"16@?<v@?d>24
@"<SimDeviceIOPortDescriptorState>"16@0:8
v48@0:8@16@24@32@?40
v40@0:8@16@24@?32
v32@0:8@"NSObject<OS_dispatch_queue>"16@?<v@?@"NSSet"@"NSError">24
v48@0:8@"<SimDeviceIOMemoryRegionConfigurationInterface>"16@"NSUUID"24@"NSObject<OS_dispatch_queue>"32@?<v@?@"NSError">40
v48@0:8@"<NSObject>"16@"NSUUID"24@"NSObject<OS_dispatch_queue>"32@?<v@?@"NSError">40
v40@0:8@"NSUUID"16@"NSObject<OS_dispatch_queue>"24@?<v@?@"NSError">32
v48@0:8Q16@24@32@?40
v48@0:8Q16@"NSString"24@"NSObject<OS_dispatch_queue>"32@?<v@?@"NSError">40
v32@0:8@"NSUUID"16@?<v@?Q@"NSString">24
v32@0:8@"NSUUID"16@?<v@?@"NSArray">24
@"NSUUID"16@0:8
--output=
--no-archive
--create-radar
--all-logs
--data-container
--timeout=
--wait-for-debugger
--console
--stdout=
--stderr=
@(#)PROGRAM:simctl  PROJECT:CoreSimulator-518.21
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>16B2657</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.CoreSimulator.simctl</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleShortVersionString</key>
<string>518.21</string>
<key>CFBundleSignature</key>
<string>????</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>MacOSX</string>
</array>
<key>CFBundleVersion</key>
<string>518.21</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>9E499</string>
<key>DTPlatformVersion</key>
<string>GM</string>
<key>DTSDKBuild</key>
<string>17E158</string>
<key>DTSDKName</key>
<string>macosx10.13internal</string>
<key>DTXcode</key>
<string>0930</string>
<key>DTXcodeBuild</key>
<string>9E499</string>
<key>NSHumanReadableCopyright</key>
<string>Copyright 
 2013-2017 Apple Inc. All rights reserved.</string>
</dict>
</plist>
