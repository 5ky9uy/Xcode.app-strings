path
text
binary
warning
stringsAndStringsdict
stringsdictOnly
stringsdata
xcstrings
_TtC13xcstringstool31SwiftLocalizableStringCollector
thingsToExtract
$__lazy_storage_$_extractableFunctionBaseNames
localizableStrings
xcstringstool.SwiftLocalizableStringCollector
init(viewMode:)
FromTableInBundle
WithDefaultValue
_TtC13xcstringstool27SwiftStringLiteralCollector
stringLiterals
0123456789abcdefABCDEF}
 (specified on command-line as 
_TtC13xcstringstool17XCStringsCompiler
inputFile
outputDirectory
specifiedLanguages
options
fileManager
_TtC13xcstringstoolP33_8C723CA5F89161A7842F8864CA90A15E15StringsdataPool
$defaultActor
stringsdataURLs
Skipping source file because it is not a supported file type: '
Failed to process source file '
_TtC13xcstringstool14SwiftExtractor
fileURL
parsedFile
sourceBuffer
The output format for individual files that can have different representations
Force all strings to build, including source strings that are already present in source code.
Caution must be used when combining with the sync command, since a sync operation may change the build result when using this option.
serializationFormat
forceBuildAllStrings
' conflicts with compiled set element for '
_TtC13xcstringstool19StringsdictCompiler
locale
localizations
sourceTable
otherKeysToAvoidCollisionWith
hasCorrespondingStringsFile
stringsToWriteToRegularStringsFile
supportsOtherDeviceCase
diagnosticCollector
errorThatShouldPreventFullCompilation
stringsdict
flatUnitsForCurrentStringLocalization
substitutionsForCurrentStringLocalization
_TtCC13xcstringstool19StringsdictCompilerP33_8B323BB1EFDB08A2A29156FD84008E5013Substitutions
subs
unreferencedSubNames
String references its containing substitution '
', causing an infinite cycle
String indirectly references its containing substitution '
No variations specified
Fallback value must be written to .strings file, which is not possible in stringsdictOnly mode
String has multiple fallback values that need to be written to .strings file, but only one can be written
Cannot reliably infer argument number for plural variation because %
 is used in multiple positions. Use an explicit substitution instead.
Cannot infer format specifier for string group because more than one numerical specifier was found
Cannot infer format specifier for string group because no numerical specifiers were found
 case cannot be further varied
Referencing undefined substitution '
Cannot reference '
' from here because it is not a plural variation
Cannot reference substitution '
' from here because it is not a plain string or plural variation
Mixing variation types at the same depth is not allowed
Strings varied by 
 are not supported by stringsdict
' from here because it is not a plain string
Fallback value cannot be further varied
String cannot be varied by 
' was never referenced. To reference, use %#@
@ in some other string
_TtC13xcstringstool17SwiftSourceBuffer
converter
$__lazy_storage_$_lines
NSLocalizedString
NSLocalizedStringFromTable
NSLocalizedStringFromTableInBundle
NSLocalizedStringWithDefaultValue
NSLocalizedAttributedString
NSLocalizedAttributedStringFromTable
NSLocalizedAttributedStringFromTableInBundle
NSLocalizedAttributedStringWithDefaultValue
CFCopyLocalizedString
CFCopyLocalizedStringFromTable
CFCopyLocalizedStringFromTableInBundle
CFCopyLocalizedStringWithDefaultValue
Skipping extraction of localizable string with non-static table name
The contents of string interpolations in localization comments will not be extracted
Cannot extract non-literal comment for localization
String interpolation may prevent proper localization in this context
Cannot extract non-literal value for localization
Skipping extraction of localizable string because string interpolation is not supported in this context
Skipping extraction of localizable string with non-literal key
Work with .xcstrings files
Prints all string keys represented in an xcstrings file.
Produces build products for an .xcstrings file.
Updates an .xcstrings file based on strings present in .stringsdata files.
Extracts strings from source code files.
The source code files to extract from.
A plist with paths to input files, which can be used instead of passing file paths directly as arguments.
The directory to place output .stringsdata files.
The .xcstrings files to merge into.
.stringsdata files specifying the strings used from source.
Prevents marking strings stale and/or removing them from the .xcstrings when not found in the .stringsdata.
The path to the .xcstrings file to compile.
The directory to place output files.
The output format for the overall compilation
If specified, outputs a newline-separated list of output paths that would be produced by a compilation, but does not actually compile anything.
Optionally specify particular languages to compile.
You can pass as many of these options as you want.
The path to the .xcstrings file to print.
--all-swift-literals cannot be combined with other extraction criteria
Extract all Swift string literals, regardless of localizability.
This mode only operates on .swift files.
Extract from NSLocalizedString and sibling macros and functions.
This mode mimics genstrings.
Specify custom localization functions or C macros that should additionally be extracted.
Each value should be the base name of a function that matches the signature of NSLocalizedString. Variants that accept tables, bundles, and default values are automatically included. You can specify this option multiple times.
Extract from SwiftUI Text()
This mode mimics the -SwiftUI option in genstrings.
skipMarkingStringsStale
allSwiftLiterals
legacyLocalizableStrings
userFunctionNames
Disables printing of detailed source code line info alongside diagnostics.
This can increase performance. This flag also changes the behavior of printed column numbers to represent UTF-8 byte offsets instead of grapheme cluster offsets. An additional column length (in UTF-8 bytes) is also added.
Prevents xcstringstool from writing .stringsdata files that would contain no strings.
Specifies whether the final output artifact should be .stringsdata or .xcstrings.
xcstrings mode is currently intended only for at-desk engineering investigations.
shouldDisableLineHints
omitEmptyStringsdata
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$("${COMP_WORDS[0]}" 
 "${COMP_WORDS[@]}")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
$("${COMP_WORDS[0]}" ---completion 
 "${COMP_WORDS[@]}")
ArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
SHELL
function _swift_
_using_command
    set -l cmd (commandline -opc)
    if [ (count $cmd) -eq (count $argv) ]
        for i in (seq (count $argv))
            if [ $cmd[$i] != $argv[$i] ]
                return 1
            end
        end
        return 0
    end
    return 1
-f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-f -a '(__fish_complete_directories)'
-f -a '(for i in 
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Show help information.
Show the version.
ArgumentParser/Argument.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
Argument(*definition*)
--experimental-dump-help
ArgumentParser/Flag.swift
Flag(*definition*)
offset element 
ArgumentParser/NameSpecification.swift
' has not characters to form short option name.
ArgumentParser/Option.swift
Option(*definition*)
ArgumentParser/OptionGroup.swift
OptionGroup(*definition*)
Fatal error
Down-casted Array element failed to match the target type
Expected 
Tree<ParsableCommand.Type>
NSArray element failed to match the Swift Array Element type
Expected 
_TtC14ArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
ArgumentParser/ArgumentDecoder.swift
experimental-dump-help
ArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
ArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
Show subcommand help information.
 <subcommand>' for detailed help.
ArgumentParser/HelpGenerator.swift
' for more information.
Unspecified version
ArgumentParser/UsageGenerator.swift
preferredName cannot be nil for named arguments
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
. Please provide one of the following:
. Please provide one of 
element
parent
children
long
short
longWithSingleDash
positional
option
flag
serializationVersion
defaultSubcommand
URLResourceKey
NNSURLResourceKey
Foundation
xcstringstool
SwiftLocalizableStringCollector
CustomMacrosSpec
SwiftStringLiteralCollector
SourceCodeLocation
XCStringsToLprojCompiler
Language
XCStringsCompiler
SourceCodeStringLiteral
SourceCodeString
Slice
Content
CodingKeys
SourceFileList
SourceCodeStringExtractor
StringsdataPool
SwiftUITextSpec
FlattenedStringSetElement
FlattenedStringSet
SwiftExtractor
CompilerOptions
CodingKeys
StringsdictCompiler
Substitutions
CompoundSpec
ExtractedString
Localizability
StringsAndStringsdictPair
LprojableFileFormat
ExtractionSpec
FunctionSpec
ExtractionList
InterpolationStrategy
LanguageScope
FunctionParameter
ExtractableItem
EmptyExtractionSpec
SerializationFormat
NSFileHandle
Severity
SourceCodeDiagnostic
FunctionCall
Argument
SwiftSourceBuffer
LegacyLocalizableSpec
SourceCodeFile
StringsFile
XCStringsTool
CommandFailed
Extract
Sync
Compile
Print
CodingKeys
Criteria
Format
OutputFormat
ExtractionOptions
CodingKeys
ArgumentParser
CompletionShell
Argument
ArgumentArrayParsingStrategy
ArgumentHelp
ArgumentVisibility
Representation
CompletionKind
Kind
ValidationError
ExitCode
CleanExit
Representation
Flag
FlagInversion
FlagExclusivity
Representation
NameSpecification
Element
Representation
Option
SingleValueParsingStrategy
ArrayParsingStrategy
OptionGroup
AsyncParsableCommand
AsyncMainProtocol
Command
CommandConfiguration
EnumerableFlag
ExpressibleByArgument
ParsableArguments
ArgumentSetProvider
_WrappedParsableCommand
StandardError
CodingKeys
ParsableArgumentsValidator
ParsableArgumentsValidatorError
ParsableCommand
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
ArrayWrapper
UnkeyedContainer
SingleValueContainer
Error
ArgumentHelpOptionProvider
ArgumentDefinition
ParsingStrategy
Update
Help
Kind
Options
ArgumentSet
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
InputOrigin
Element
Name
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
 @|U
ParsedValues
Element
InputKey
ParserError
InternalParseError
InputIndex
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
HelpCommand
CodingKeys
Element
HelpGenerator
Section
DiscussionSection
Header
MessageInfo
Tree
InitializationError
ArgumentParserToolInfo
ToolInfoHeader
ToolInfoV0
CommandInfoV0
ArgumentInfoV0
NameInfoV0
KindV0
CodingKeys
So8NSStringC
$sSY
$ss21_ObjectiveCBridgeableP
ShySSGSg
5lower_AA5uppert
SiSg
SaySSG
ySSG
ySiSgG
ShySSG
SSSg
So13NSFileManagerC
ySS_
10referencertG
10referencert
SSSg14knownSpecifier_t
$sST
SnySiG
$sSl
$sSK
$sSk
$s13xcstringstool25SourceCodeStringExtractorP
ScPSg
_pIeghHlzo_
ytIeghHr_
ScGyytG
ySbG
_pSg
SS3key_
5valuetSg
SS3key_
5valuet
SS3key_
5valuet
ySnySiGG
3key_SS5valuetSg
3key_SS5valuet
SDySS
SDyS2SG
_pSg
SDySS
Sg_ABt
3key_
5valuetSg
3key_
5valuet
SS3key_
5valuet
3key_
5valuetSg
3key_
5valuet
_SiSg6argNumt
_SiSg6argNumtSg
SS3key_
5valuetSg
ySs_GSg
ySsG
ySs_G
SS3key_
5valuet
ySSG
ySsG
ySsG
10referencertSg
_SiSgt
ySS_
SS3key_
5valuetSg
Sg_ABt
yS2SG
ySSSiG
$s13xcstringstool19LprojableFileFormatP
$s13xcstringstool14ExtractionSpecP
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
$ss12CaseIterableP
yypG
SaySSGSg
_pSgSg
_pXpG
SS3key_SSSg5valueAB7commentAB9tableNametSg
3key_yp5valuetSg
_pXpG
ySaySSGG
ySay
ySay
SS3key_
5valuet
SaySSG
_pXpG
SaySsG
$sSY
$ss12CaseIterableP
ySSG
SaySSG_SSt
ySSG
qd__
$s14ArgumentParser13ParsedWrapperP
Sayqd__GSg
SSqd__
_pIeggrzo_
Sayqd__G
ypSg
_pIeggrzo_
qd__XMT
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SSSg
SaySSG10extensions_t
SaySSGAAc
_pXpSg
SbSg
Sbz_Xx
$ss25ExpressibleByArrayLiteralP
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
_pSg
$s14ArgumentParser20AsyncParsableCommandP
$s14ArgumentParser17AsyncMainProtocolP
7Command
_pXpG
$s14ArgumentParser14EnumerableFlagP
$s14ArgumentParser013ExpressibleByA0P
yypG
$s14ArgumentParser17ParsableArgumentsP
$s14ArgumentParser0A11SetProviderP
SSSg5label_yp5valuet
_pSg
SSypSgIeggr_
$s14ArgumentParser26ParsableArgumentsValidator33_D8B6916CE93C2FC7F7BEDE789FAE65F8LLP
$s14ArgumentParser31ParsableArgumentsValidatorErrorP
$s14ArgumentParser15ParsableCommandP
_SitG
_Sit
_pXpG
ySsG
_SStG
_SSt
ySi_
_pXmTSg
$s14ArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
SayypG
yypG
_pXpGG
ySnySiGG
ySaySSG_SStG
ySiG
ySaySiGG
SaySiG
_pXp_AA_pXpt
SayxG
$s14ArgumentParser0A18HelpOptionProviderP
ztKc
ztKc
SgSS
ztKc
$ss10SetAlgebraP
$ss9OptionSetP
$sST
SnySiG
$sSl
$sSK
$sSk
yyXlG
_SStSg
SSxSgIeggr_
xXMT
_pSg
ySSG
ySbG
S2SSgIeggr_
$s14ArgumentParser22DecodableParsedWrapperP
5Value
_pXpGADG
10visibility_t
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
_SSt
Sb8inserted_
17memberAfterInsertt
ySaySSGG
SaySSGSg
_ypt
ySSSgG
yAAyABySaySSSgGACGGSSGG
yAAySaySSSgGACGGSSG
ySaySSSgGACGG
ySaySSSgGABG
SaySSSgG
ySay
GSSG
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
yxGSgXw
yxGG
_pXpGACG
_pXpGACSgIegnr_
_pXp
SaySSGSg
SaySSG
$sSY
SSSg
_rawValue
RawValue
_ObjectiveCType
thingsToExtract
sourceBuffer
$__lazy_storage_$_extractableFunctionBaseNames
localizableStrings
functionNames
stringLiterals
line
column
_wholeFileOffset
codeSpecifiedOnCommandLine
normalizedCode
inputFile
outputDirectory
specifiedLanguages
options
fileManager
content
location
slices
literal
nonLiteral
interpolation
Element
Iterator
Index
SubSequence
Indices
path
files
RawValue
$defaultActor
stringsdataURLs
Element
Iterator
Index
SubSequence
Indices
value
state
setKey
compiledElements
fileURL
parsedFile
sourceBuffer
_serializationFormat
_forceBuildAllStrings
serializationFormat
forceBuildAllStrings
locale
localizations
sourceTable
otherKeysToAvoidCollisionWith
hasCorrespondingStringsFile
stringsToWriteToRegularStringsFile
supportsOtherDeviceCase
diagnosticCollector
errorThatShouldPreventFullCompilation
stringsdict
flatUnitsForCurrentStringLocalization
substitutionsForCurrentStringLocalization
subs
unreferencedSubNames
subSpecs
localizability
defaultValue
comment
tableName
_sourceFunctionTemplate
localizable
unknown
stringsFile
stringsdictFile
localizationFunctions
name
parameters
languageScope
isAttributed
interpolationStrategy
label
optional
representedItem
rawValue
notSupported
bestEffortSpecifier
ArrayLiteralElement
Element
RawValue
value
comment
tableName
text
binary
AllCases
RawValue
severity
message
filePath
location
lineContent
warning
RawValue
label
value
functionName
arguments
converter
$__lazy_storage_$_lines
fileURL
includeLineHintsInDiagnostics
extractedStrings
includeLiteralsTableInStringsdata
$__lazy_storage_$_extractor
strings
_inputFile
_outputDirectory
_format
_languages
_extraOptions
_dryRun
_xcstrings
_stringsdata
_skipMarkingStringsStale
_sourceFiles
_fileListPlist
_criteria
stringsAndStringsdict
stringsdictOnly
_allSwiftLiterals
_legacyLocalizableStrings
_userFunctionNames
_swiftUIText
sourceFiles
fileListPlist
outputDirectory
extraOptions
criteria
xcstrings
stringsdata
skipMarkingStringsStale
inputFile
format
languages
dryRun
AllCases
RawValue
allSwiftLiterals
legacyLocalizableStrings
userFunctionNames
swiftUIText
stringsdata
xcstrings
_shouldDisableLineHints
_omitEmptyStringsdata
_outputFormat
RawValue
shouldDisableLineHints
omitEmptyStringsdata
outputFormat
RawValue
AllCases
rawValue
Value
_parsedValue
base
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
visibility
base
default
hidden
private
kind
list
file
shellCommand
custom
default
directory
RawValue
message
rawValue
base
helpRequest
dumpRequest
Value
_parsedValue
base
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
ArrayLiteralElement
elements
base
customLong
customShort
long
short
Value
_parsedValue
base
Value
_parsedValue
_visibility
_dummy
commandName
_superCommandName
abstract
usage
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
_options
options
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
default
scanningForValue
unconditional
upToNextOption
allRemainingInput
kind
help
completion
parsingStrategy
update
initial
options
abstract
discussion
valueName
visibility
defaultValue
keys
allValues
isComposite
nullary
unary
named
positional
rawValue
ArrayLiteralElement
Element
RawValue
Element
Iterator
Index
SubSequence
Indices
content
namePositions
commandStack
parserError
visibility
_generateCompletionScript
generateCompletionScript
_elements
ArrayLiteralElement
argumentIndex
defaultValue
long
short
longWithSingleDash
value
definition
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
rawValue
RawValue
helpRequested
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
versionRequested
dumpHelpRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
_subcommands
_help
commandStack
visibility
subcommands
help
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
positionalArguments
subcommands
options
title
content
help
validation
other
element
parent
children
recursiveSubcommand
RawValue
serializationVersion
command
superCommands
commandName
abstract
discussion
defaultSubcommand
subcommands
arguments
kind
shouldDisplay
isOptional
isRepeating
names
preferredName
valueName
defaultValue
allValues
name
long
short
longWithSingleDash
positional
option
flag
copyItemAtURL:toURL:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentDirectoryPath
dataWithPropertyList:format:options:error:
defaultManager
fileExistsAtPath:
fileExistsAtPath:isDirectory:
fileHandleWithStandardError
fileHandleWithStandardOutput
init
initWithContentsOfURL:options:error:
initWithDictionary:
removeItemAtURL:error:
format
formatter
style
help
version
bash
fish
path
text
binary
warning
stringsAndStringsdict
stringsdictOnly
stringsdata
xcstrings
_TtC13xcstringstool31SwiftLocalizableStringCollector
thingsToExtract
$__lazy_storage_$_extractableFunctionBaseNames
localizableStrings
xcstringstool.SwiftLocalizableStringCollector
init(viewMode:)
FromTableInBundle
WithDefaultValue
_TtC13xcstringstool27SwiftStringLiteralCollector
stringLiterals
0123456789abcdefABCDEF}
 (specified on command-line as 
_TtC13xcstringstool17XCStringsCompiler
inputFile
outputDirectory
specifiedLanguages
options
fileManager
_TtC13xcstringstoolP33_8C723CA5F89161A7842F8864CA90A15E15StringsdataPool
$defaultActor
stringsdataURLs
Skipping source file because it is not a supported file type: '
Failed to process source file '
_TtC13xcstringstool14SwiftExtractor
fileURL
parsedFile
sourceBuffer
The output format for individual files that can have different representations
Force all strings to build, including source strings that are already present in source code.
Caution must be used when combining with the sync command, since a sync operation may change the build result when using this option.
serializationFormat
forceBuildAllStrings
' conflicts with compiled set element for '
_TtC13xcstringstool19StringsdictCompiler
locale
localizations
sourceTable
otherKeysToAvoidCollisionWith
hasCorrespondingStringsFile
stringsToWriteToRegularStringsFile
supportsOtherDeviceCase
diagnosticCollector
errorThatShouldPreventFullCompilation
stringsdict
flatUnitsForCurrentStringLocalization
substitutionsForCurrentStringLocalization
_TtCC13xcstringstool19StringsdictCompilerP33_8B323BB1EFDB08A2A29156FD84008E5013Substitutions
subs
unreferencedSubNames
String references its containing substitution '
', causing an infinite cycle
String indirectly references its containing substitution '
No variations specified
Fallback value must be written to .strings file, which is not possible in stringsdictOnly mode
String has multiple fallback values that need to be written to .strings file, but only one can be written
Cannot reliably infer argument number for plural variation because %
 is used in multiple positions. Use an explicit substitution instead.
Cannot infer format specifier for string group because more than one numerical specifier was found
Cannot infer format specifier for string group because no numerical specifiers were found
 case cannot be further varied
Referencing undefined substitution '
Cannot reference '
' from here because it is not a plural variation
Cannot reference substitution '
' from here because it is not a plain string or plural variation
Mixing variation types at the same depth is not allowed
Strings varied by 
 are not supported by stringsdict
' from here because it is not a plain string
Fallback value cannot be further varied
String cannot be varied by 
' was never referenced. To reference, use %#@
@ in some other string
_TtC13xcstringstool17SwiftSourceBuffer
converter
$__lazy_storage_$_lines
NSLocalizedString
NSLocalizedStringFromTable
NSLocalizedStringFromTableInBundle
NSLocalizedStringWithDefaultValue
NSLocalizedAttributedString
NSLocalizedAttributedStringFromTable
NSLocalizedAttributedStringFromTableInBundle
NSLocalizedAttributedStringWithDefaultValue
CFCopyLocalizedString
CFCopyLocalizedStringFromTable
CFCopyLocalizedStringFromTableInBundle
CFCopyLocalizedStringWithDefaultValue
Skipping extraction of localizable string with non-static table name
The contents of string interpolations in localization comments will not be extracted
Cannot extract non-literal comment for localization
String interpolation may prevent proper localization in this context
Cannot extract non-literal value for localization
Skipping extraction of localizable string because string interpolation is not supported in this context
Skipping extraction of localizable string with non-literal key
Work with .xcstrings files
Prints all string keys represented in an xcstrings file.
Produces build products for an .xcstrings file.
Updates an .xcstrings file based on strings present in .stringsdata files.
Extracts strings from source code files.
The source code files to extract from.
A plist with paths to input files, which can be used instead of passing file paths directly as arguments.
The directory to place output .stringsdata files.
The .xcstrings files to merge into.
.stringsdata files specifying the strings used from source.
Prevents marking strings stale and/or removing them from the .xcstrings when not found in the .stringsdata.
The path to the .xcstrings file to compile.
The directory to place output files.
The output format for the overall compilation
If specified, outputs a newline-separated list of output paths that would be produced by a compilation, but does not actually compile anything.
Optionally specify particular languages to compile.
You can pass as many of these options as you want.
The path to the .xcstrings file to print.
--all-swift-literals cannot be combined with other extraction criteria
Extract all Swift string literals, regardless of localizability.
This mode only operates on .swift files.
Extract from NSLocalizedString and sibling macros and functions.
This mode mimics genstrings.
Specify custom localization functions or C macros that should additionally be extracted.
Each value should be the base name of a function that matches the signature of NSLocalizedString. Variants that accept tables, bundles, and default values are automatically included. You can specify this option multiple times.
Extract from SwiftUI Text()
This mode mimics the -SwiftUI option in genstrings.
skipMarkingStringsStale
allSwiftLiterals
legacyLocalizableStrings
userFunctionNames
Disables printing of detailed source code line info alongside diagnostics.
This can increase performance. This flag also changes the behavior of printed column numbers to represent UTF-8 byte offsets instead of grapheme cluster offsets. An additional column length (in UTF-8 bytes) is also added.
Prevents xcstringstool from writing .stringsdata files that would contain no strings.
Specifies whether the final output artifact should be .stringsdata or .xcstrings.
xcstrings mode is currently intended only for at-desk engineering investigations.
shouldDisableLineHints
omitEmptyStringsdata
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$("${COMP_WORDS[0]}" 
 "${COMP_WORDS[@]}")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
$("${COMP_WORDS[0]}" ---completion 
 "${COMP_WORDS[@]}")
ArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
SHELL
function _swift_
_using_command
    set -l cmd (commandline -opc)
    if [ (count $cmd) -eq (count $argv) ]
        for i in (seq (count $argv))
            if [ $cmd[$i] != $argv[$i] ]
                return 1
            end
        end
        return 0
    end
    return 1
-f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-f -a '(__fish_complete_directories)'
-f -a '(for i in 
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Show help information.
Show the version.
ArgumentParser/Argument.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
Argument(*definition*)
--experimental-dump-help
ArgumentParser/Flag.swift
Flag(*definition*)
offset element 
ArgumentParser/NameSpecification.swift
' has not characters to form short option name.
ArgumentParser/Option.swift
Option(*definition*)
ArgumentParser/OptionGroup.swift
OptionGroup(*definition*)
Fatal error
Down-casted Array element failed to match the target type
Expected 
Tree<ParsableCommand.Type>
NSArray element failed to match the Swift Array Element type
Expected 
_TtC14ArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
ArgumentParser/ArgumentDecoder.swift
experimental-dump-help
ArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
ArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
Show subcommand help information.
 <subcommand>' for detailed help.
ArgumentParser/HelpGenerator.swift
' for more information.
Unspecified version
ArgumentParser/UsageGenerator.swift
preferredName cannot be nil for named arguments
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
. Please provide one of the following:
. Please provide one of 
element
parent
children
long
short
longWithSingleDash
positional
option
flag
serializationVersion
defaultSubcommand
URLResourceKey
NNSURLResourceKey
Foundation
xcstringstool
SwiftLocalizableStringCollector
tableName
bundle
value
comment
CustomMacrosSpec
SwiftStringLiteralCollector
SourceCodeLocation
XCStringsToLprojCompiler
Language
XCStringsCompiler
SourceCodeStringLiteral
SourceCodeString
Slice
Content
CodingKeys
SourceFileList
SourceCodeStringExtractor
StringsdataPool
SwiftUITextSpec
FlattenedStringSetElement
FlattenedStringSet
SwiftExtractor
CompilerOptions
CodingKeys
StringsdictCompiler
Substitutions
CompoundSpec
ExtractedString
Localizability
StringsAndStringsdictPair
LprojableFileFormat
ExtractionSpec
FunctionSpec
ExtractionList
InterpolationStrategy
LanguageScope
FunctionParameter
ExtractableItem
EmptyExtractionSpec
SerializationFormat
NSFileHandle
Severity
SourceCodeDiagnostic
FunctionCall
Argument
SwiftSourceBuffer
LegacyLocalizableSpec
SourceCodeFile
StringsFile
XCStringsTool
CommandFailed
Extract
Sync
Compile
Print
CodingKeys
Criteria
Format
OutputFormat
ExtractionOptions
CodingKeys
@help
q.Hg
ArgumentParser
CompletionShell
Argument
ArgumentArrayParsingStrategy
ArgumentHelp
ArgumentVisibility
Representation
CompletionKind
Kind
ValidationError
ExitCode
CleanExit
Representation
Flag
FlagInversion
FlagExclusivity
Representation
NameSpecification
Element
Representation
Option
SingleValueParsingStrategy
ArrayParsingStrategy
OptionGroup
AsyncParsableCommand
AsyncMainProtocol
Command
CommandConfiguration
EnumerableFlag
ExpressibleByArgument
ParsableArguments
ArgumentSetProvider
_WrappedParsableCommand
StandardError
CodingKeys
ParsableArgumentsValidator
ParsableArgumentsValidatorError
ParsableCommand
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
ArrayWrapper
UnkeyedContainer
SingleValueContainer
Error
ArgumentHelpOptionProvider
ArgumentDefinition
ParsingStrategy
Update
Help
Kind
Options
ArgumentSet
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
InputOrigin
Element
Name
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
ParsedValues
Element
InputKey
ParserError
InternalParseError
InputIndex
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
HelpCommand
CodingKeys
Element
HelpGenerator
Section
DiscussionSection
Header
MessageInfo
Tree
InitializationError
&-D5;
ArgumentParserToolInfo
ToolInfoHeader
ToolInfoV0
CommandInfoV0
ArgumentInfoV0
NameInfoV0
KindV0
CodingKeys
So8NSStringC
$sSY
$ss21_ObjectiveCBridgeableP
ShySSGSg
5lower_AA5uppert
SiSg
SaySSG
ySSG
ySiSgG
ShySSG
SSSg
So13NSFileManagerC
ySS_
10referencertG
10referencert
SSSg14knownSpecifier_t
$sST
SnySiG
$sSl
$sSK
$sSk
$s13xcstringstool25SourceCodeStringExtractorP
ScPSg
_pIeghHlzo_
ytIeghHr_
ScGyytG
ySbG
_pSg
SS3key_
5valuetSg
SS3key_
5valuet
SS3key_
5valuet
ySnySiGG
3key_SS5valuetSg
3key_SS5valuet
SDySS
SDyS2SG
_pSg
SDySS
Sg_ABt
3key_
5valuetSg
3key_
5valuet
SS3key_
5valuet
3key_
5valuetSg
3key_
5valuet
_SiSg6argNumt
_SiSg6argNumtSg
SS3key_
5valuetSg
ySs_GSg
ySsG
ySs_G
SS3key_
5valuet
ySSG
ySsG
ySsG
10referencertSg
_SiSgt
ySS_
SS3key_
5valuetSg
Sg_ABt
yS2SG
ySSSiG
$s13xcstringstool19LprojableFileFormatP
$s13xcstringstool14ExtractionSpecP
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
$ss12CaseIterableP
yypG
SaySSGSg
_pSgSg
_pXpG
SS3key_SSSg5valueAB7commentAB9tableNametSg
3key_yp5valuetSg
_pXpG
ySaySSGG
ySay
ySay
SS3key_
5valuet
SaySSG
_pXpG
SaySsG
$sSY
$ss12CaseIterableP
ySSG
SaySSG_SSt
ySSG
qd__
$s14ArgumentParser13ParsedWrapperP
Sayqd__GSg
SSqd__
_pIeggrzo_
Sayqd__G
ypSg
_pIeggrzo_
qd__XMT
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SSSg
SaySSG10extensions_t
SaySSGAAc
_pXpSg
SbSg
Sbz_Xx
$ss25ExpressibleByArrayLiteralP
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
_pSg
$s14ArgumentParser20AsyncParsableCommandP
$s14ArgumentParser17AsyncMainProtocolP
7Command
_pXpG
$s14ArgumentParser14EnumerableFlagP
$s14ArgumentParser013ExpressibleByA0P
yypG
$s14ArgumentParser17ParsableArgumentsP
$s14ArgumentParser0A11SetProviderP
SSSg5label_yp5valuet
_pSg
SSypSgIeggr_
$s14ArgumentParser26ParsableArgumentsValidator33_D8B6916CE93C2FC7F7BEDE789FAE65F8LLP
$s14ArgumentParser31ParsableArgumentsValidatorErrorP
$s14ArgumentParser15ParsableCommandP
_SitG
_Sit
_pXpG
ySsG
_SStG
_SSt
ySi_
_pXmTSg
$s14ArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
SayypG
yypG
_pXpGG
ySnySiGG
ySaySSG_SStG
ySiG
ySaySiGG
SaySiG
_pXp_AA_pXpt
SayxG
$s14ArgumentParser0A18HelpOptionProviderP
ztKc
ztKc
SgSS
ztKc
$ss10SetAlgebraP
$ss9OptionSetP
$sST
SnySiG
$sSl
$sSK
$sSk
yyXlG
_SStSg
SSxSgIeggr_
xXMT
_pSg
ySSG
ySbG
S2SSgIeggr_
$s14ArgumentParser22DecodableParsedWrapperP
5Value
_pXpGADG
10visibility_t
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
_SSt
Sb8inserted_
17memberAfterInsertt
ySaySSGG
SaySSGSg
_ypt
ySSSgG
yAAyABySaySSSgGACGGSSGG
yAAySaySSSgGACGGSSG
ySaySSSgGACGG
ySaySSSgGABG
SaySSSgG
ySay
GSSG
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
yxGSgXw
yxGG
_pXpGACG
_pXpGACSgIegnr_
_pXp
SaySSGSg
SaySSG
$sSY
SSSg
_rawValue
RawValue
_ObjectiveCType
thingsToExtract
sourceBuffer
$__lazy_storage_$_extractableFunctionBaseNames
localizableStrings
functionNames
stringLiterals
line
column
_wholeFileOffset
codeSpecifiedOnCommandLine
normalizedCode
inputFile
outputDirectory
specifiedLanguages
options
fileManager
content
location
slices
literal
nonLiteral
interpolation
Element
Iterator
Index
SubSequence
Indices
path
files
RawValue
$defaultActor
stringsdataURLs
Element
Iterator
Index
SubSequence
Indices
value
state
setKey
compiledElements
fileURL
parsedFile
sourceBuffer
_serializationFormat
_forceBuildAllStrings
serializationFormat
forceBuildAllStrings
locale
localizations
sourceTable
otherKeysToAvoidCollisionWith
hasCorrespondingStringsFile
stringsToWriteToRegularStringsFile
supportsOtherDeviceCase
diagnosticCollector
errorThatShouldPreventFullCompilation
stringsdict
flatUnitsForCurrentStringLocalization
substitutionsForCurrentStringLocalization
subs
unreferencedSubNames
subSpecs
localizability
defaultValue
comment
tableName
_sourceFunctionTemplate
localizable
unknown
stringsFile
stringsdictFile
localizationFunctions
name
parameters
languageScope
isAttributed
interpolationStrategy
label
optional
representedItem
rawValue
notSupported
bestEffortSpecifier
ArrayLiteralElement
Element
RawValue
value
comment
tableName
text
binary
AllCases
RawValue
severity
message
filePath
location
lineContent
warning
RawValue
label
value
functionName
arguments
converter
$__lazy_storage_$_lines
fileURL
includeLineHintsInDiagnostics
extractedStrings
includeLiteralsTableInStringsdata
$__lazy_storage_$_extractor
strings
_inputFile
_outputDirectory
_format
_languages
_extraOptions
_dryRun
_xcstrings
_stringsdata
_skipMarkingStringsStale
_sourceFiles
_fileListPlist
_criteria
stringsAndStringsdict
stringsdictOnly
_allSwiftLiterals
_legacyLocalizableStrings
_userFunctionNames
_swiftUIText
sourceFiles
fileListPlist
outputDirectory
extraOptions
criteria
xcstrings
stringsdata
skipMarkingStringsStale
inputFile
format
languages
dryRun
AllCases
RawValue
allSwiftLiterals
legacyLocalizableStrings
userFunctionNames
swiftUIText
stringsdata
xcstrings
_shouldDisableLineHints
_omitEmptyStringsdata
_outputFormat
RawValue
shouldDisableLineHints
omitEmptyStringsdata
outputFormat
RawValue
AllCases
rawValue
Value
_parsedValue
base
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
visibility
base
default
hidden
private
kind
list
file
shellCommand
custom
default
directory
RawValue
message
rawValue
base
helpRequest
dumpRequest
Value
_parsedValue
base
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
ArrayLiteralElement
elements
base
customLong
customShort
long
short
Value
_parsedValue
base
Value
_parsedValue
_visibility
_dummy
commandName
_superCommandName
abstract
usage
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
_options
options
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
default
scanningForValue
unconditional
upToNextOption
allRemainingInput
kind
help
completion
parsingStrategy
update
initial
options
abstract
discussion
valueName
visibility
defaultValue
keys
allValues
isComposite
nullary
unary
named
positional
rawValue
ArrayLiteralElement
Element
RawValue
Element
Iterator
Index
SubSequence
Indices
content
namePositions
commandStack
parserError
visibility
_generateCompletionScript
generateCompletionScript
_elements
ArrayLiteralElement
argumentIndex
defaultValue
long
short
longWithSingleDash
value
definition
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
rawValue
RawValue
helpRequested
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
versionRequested
dumpHelpRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
_subcommands
_help
commandStack
visibility
subcommands
help
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
positionalArguments
subcommands
options
title
content
help
validation
other
element
parent
children
recursiveSubcommand
RawValue
serializationVersion
command
superCommands
commandName
abstract
discussion
defaultSubcommand
subcommands
arguments
kind
shouldDisplay
isOptional
isRepeating
names
preferredName
valueName
defaultValue
allValues
name
long
short
longWithSingleDash
positional
option
flag
copyItemAtURL:toURL:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentDirectoryPath
dataWithPropertyList:format:options:error:
defaultManager
fileExistsAtPath:
fileExistsAtPath:isDirectory:
fileHandleWithStandardError
fileHandleWithStandardOutput
init
initWithContentsOfURL:options:error:
initWithDictionary:
removeItemAtURL:error:
format
formatter
style
help
version
bash
fish
