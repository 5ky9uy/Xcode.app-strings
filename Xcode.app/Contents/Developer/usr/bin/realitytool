@(#)PROGRAM:realitytool  PROJECT:RealityTools-409.100.11.0.1
@realitytool
RealityTool
REStartupOptions
OSLogType
Nos_log_type_t
StandardError
StandardOutput
OutputDef
LogType
ModuleWithDependenciesError
URLError
CompileCommand
CreateSchemaCommand
ExportCommand
CodingKeys
RealityToolError
UseMetal
RKAssetsCustomComponentsSchemaHandler
CustomFileManagerDelegate
DerivedDataError
RKAssetsCompiler
RKAssetsCompilerError
SimulatorToolAdapter
ArgumentParser
CompletionShell
Argument
ArgumentArrayParsingStrategy
ExpressibleByArgument
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
HelpCommand
CodingKeys
InputOrigin
Element
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
ArrayWrapper
UnkeyedContainer
SingleValueContainer
Error
CommandConfiguration
ValidationError
ExitCode
CleanExit
ArgumentHelpOptionProvider
Update
Kind
ArgumentDefinition
ParsingStrategy
Help
Options
ParsedValues
Element
InputKey
NameSpecification
Element
CompletionKind
Kind
Option
SingleValueParsingStrategy
ArrayParsingStrategy
Tree
InitializationError
InputIndex
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
MessageInfo
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
OptionGroup
ParsableCommand
ParsableArguments
ArgumentSetProvider
_WrappedParsableCommand
StandardError
CodingKeys
 @tr
ParserError
InternalParseError
Flag
FlagInversion
FlagExclusivity
Element
HelpGenerator
Section
DiscussionSection
Usage
Header
Name
ArgumentHelp
ArgumentSet
T@"NSNumber",C,N,V_signalNumber
T@"NSArray",R,N,V_arguments
_backtraceQueue
T@"NSDictionary",C,N,V_additionalEnvironment
_registrationID
T@"NSNumber",C,N,V_exitCode
containsObject:
T@"NSNumber",C,N,V_processIdentifier
initWithPlatformName:launchPath:frameworkSearchPaths:arguments:
T@"NSObject<RTSimulatorToolProxyDelegate>",R,W,N,V_proxyDelegate
isAlive
T@"NSString",R,N
loadAllPlatformsReturningError:
T@"RTSimulatorToolExecutionContext",R,N,V_executionContext
processExitType
T@"SimDevice",R,N,V_device
runtime
Tc,N,V_shouldRaiseOnFailures
setPath
Tc,V_isAlive
stringByAppendingPathComponent:
_additionalEnvironment
success
.cxx_destruct
T@"NSString",R,N,V_platformName
T@"NSArray",R,N,V_frameworkSearchPaths
_device
T@"NSError",&,N,V_error
arrayWithArray:
T@"NSNumber",C,N,V_exitStatus
dealloc
T@"NSNumber",R,N,V_processIdentifier
initWithString:
T@"NSString",C,N,V_processFailureDescription
isProxy
T@"NSString",R,N,V_launchPath
numberWithBool:
T@"RTSimulatorToolLaunchContext",R,N,V_launchContext
release
T@?,R,C,N,V_terminationHandler
Tc,N,V_success
setWithObjects:
Tq,N,V_processExitType
stringFromDate:
_arguments
_busyCountToolQueue
_cachedDisabledSimulatorJobs
_environmentForBootingDevice
_error
_executionContext
_exitCode
_exitStatus
_frameworkSearchPaths
_isAlive
_isBusyCount
_keepAlivePipe
_launchContext
_launchPath
_logAtLogLevel:withFormat:
_platformName
_processExitType
_processFailureDescription
_processIdentifier
_proxyDelegate
_queue
_shouldRaiseOnFailures
_signalNumber
_success
_terminationHandler
_timeStampForLifeTime
_timeStampFromLastIdleOrBusy
_toolExitDispatchSource
addEntriesFromDictionary:
addObject:
addObjectsFromArray:
additionalEnvironment
allObjects
allPlatforms
appendFormat:
appendString:
arguments
array
arrayWithObject:
arrayWithObjects:count:
autorelease
available
availableDevices
boolForKey:
boolValue
bootDeviceIfNeededWithLaunchContext:error:
bootWithOptions:error:
bundleIdentifier
busyCountQueue
class
code
componentsJoinedByString:
componentsSeparatedByString:
conformsToProtocol:
copy
copyItemAtURL:toURL:error:
count
countByEnumeratingWithState:objects:count:
createDeviceWithType:runtime:name:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentRunLoop
currentThread
debugDescription
decrementBusy
defaultDeviceSetWithError:
defaultManager
defaultPaths
deleteDevice:error:
description
developerDirectory
device
deviceType
dictionary
dictionaryRepresentation
dictionaryWithContentsOfFile:
dictionaryWithObjects:forKeys:count:
didLaunchWithPipeToKeepAlive:error:
didShutdownTool:
directoryContents
disabledSimulatorJobs
domain
dvt_cachedEnvironment
dvt_isNonEmpty
dvt_objectsPassingTest:
enumerateKeysAndObjectsUsingBlock:
enumerateObjectsWithOptions:usingBlock:
environment
environmentWithLaunchContext:error:
error
errorWithDomain:code:userInfo:
executionContext
existsInFileSystem
exitCode
exitStatus
family
fileDescriptor
fileExistsAtPath:
fileExistsAtPath:isDirectory:
fileHandleWithStandardError
fileHandleWithStandardOutput
fileManager:shouldCopyItemAtPath:toPath:
fileManager:shouldCopyItemAtURL:toURL:
fileManager:shouldLinkItemAtPath:toPath:
fileManager:shouldLinkItemAtURL:toURL:
fileManager:shouldMoveItemAtPath:toPath:
fileManager:shouldMoveItemAtURL:toURL:
fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:
fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:
fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:
fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:
fileManager:shouldProceedAfterError:movingItemAtPath:toPath:
fileManager:shouldProceedAfterError:movingItemAtURL:toURL:
fileManager:shouldProceedAfterError:removingItemAtPath:
fileManager:shouldProceedAfterError:removingItemAtURL:
fileManager:shouldRemoveItemAtPath:
fileManager:shouldRemoveItemAtURL:
filePathForPathString:
filePathForRelativePathString:
frameworkSearchPaths
frameworkSearchPathsForOverlayToolsForDVTPlatform:
getDeltaTimeString
handshakeWithPlatformToolWithPID:proxyDelegate:launchContext:optionalLifelinePipe:error:
hasSuffix:
hash
homeDirectoryForCurrentUser
ibSpawnWithPath:options:terminationQueue:terminationHandler:pid:error:
ibSpawningIBSimulatorToolProcess
ibSwizzledEnvironment
ib_addObjectsFromCollection:
ib_aggregatedDescriptionAndFailureReasons
ib_dictionaryByRemovingObjectsForKeys:
ib_errorWithLocalizedDescription:
ib_errorWithLocalizedDescriptionFormat:
ib_errorWithUnderlyingError:recoverySuggestion:localizedDescriptionFormat:
ib_objectForKey:creatingIfNecessaryWithBlock:
ib_setByIntersectingSet:
ib_setBySubtractingSet:
identifier
incrementBusy
init
initWith:
initWithExecutionContext:launchContext:proxyDelegate:terminationHandler:error:
initWithSimDevice:
initialize
initializeApplicationDirectoryName:
instanceMethodForSelector:
instancesRespondToSelector:
integerForKey:
integerValue
isAbsolutePath
isAvailableWithError:
isEqual:
isEqualToString:
isKindOfClass:
isMainThread
isMemberOfClass:
lastPathComponent
launchAndConnectToToolWithLaunchContext:proxyDelegate:error:useMetal:
launchContext
launchJobsScannedForRuntimeRoot:
launchPath
launchToolInSimulator:dvtPlatform:platformVersion:error:useMetal:
length
lifeTime
localizedDescription
logAspectWithName:
logLevel
mainBundle
name
numberWithInt:
numberWithInteger:
objectForKey:
objectForKeyedSubscript:
orderedSet
osPlatform
osPlatformFromSimulator
pathExtension
pathString
pathToOverlayToolNamed:dvtPlatform:platformVersion:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
pipe
platformForIdentifier:
platformForName:
platformIdentifier
platformName
platformPath
populateDYLDFrameworkSearchPaths:launchContext:
populateEnvironment:launchContext:error:
populateLaunchJobForRuntimeRoot:requiredIdentifiers:disabledIdentifiers:
processFailureDescription
processIdentifier
processInfo
propertyListDictionary
proxyDelegate
realityToolForDVPlatform:platformVersion:arguments:launchError:useMetal:
registerDefaults:
registerNotificationHandlerOnQueue:handler:
removeItemAtURL:error:
removeObjectAtIndex:
removeObjectForKey:
replaceSimDeviceInstanceMethodsIfNeeded
requestedJobsFromRTEnableSimulatorJobs
resetLifeTime
respondsToSelector:
resultWithFailure
resultWithNSError:
resultWithSuccess
retain
retainCount
root
runRealityProducer:dvtPlatform:platformVersion:useMetal:
runUntilDate:
self
serviceContextForDeveloperDir:error:
setAdditionalEnvironment:
setDateFormat:
setDefaultDeveloperPathsClass:
setDelegate:
setError:
setExitCode:
setExitStatus:
setIbSpawningIBSimulatorToolProcess:
setIsAlive:
setObject:forKey:
setProcessExitType:
setProcessFailureDescription:
setProcessIdentifier:
setShouldRaiseOnFailures:
setSignalNumber:
setSuccess:
setupToolExitDispatchSource
shouldRaiseOnFailures
shouldUseDefaultRealityCompilerForPlatform
shutdown
shutdownAndForceToolProxyKill
signalNumber
simulatorPlatform
simulatorPlatformFromOS
spawnWithPath:options:terminationQueue:terminationHandler:pid:error:
standardUserDefaults
startTime
state
stringByAppendingFormat:
stringByAppendingString:
stringByDeletingLastPathComponent
stringByDeletingPathExtension
stringByExpandingTildeInPath
stringByReplacingOccurrencesOfString:withString:options:range:
stringForKey:
stringWithFormat:
stringWithString:
subpathsOfDirectoryAtPath:error:
superclass
supportedDeviceTypes
supportedRuntimes
supportsDeviceType:
temporaryDirectory
terminationHandler
timeInfo
timeSinceLastIdleOrBusy
toolName
unsignedIntegerValue
valueForKey:
zone
UseDefaultRealityToolCompiler
simulator
DVTFilePath *RTPathForPlatformRelativePath(NSString *__strong, DVTPlatform *__strong)
/AppleInternal/Library/BuildRoots/fa8c45dc-b5e4-11ee-b3c7-b6ef2fd8d87b/Library/Caches/com.apple.xbs/Sources/PalomaRETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderKit/RTDVTFoundationAdditions.m
((platformRelativePath)) != nil
%@ should not be nil.
(platformRelativePath)
((platform)) != nil
(platform)
NSString *RTPathForPlatformContentWithSuffix(NSString *__strong, NSString *__strong, DVTPlatform *__strong, NSString *__strong)
((contentName)) != nil
(contentName)
macosx
RealityTool
dyldCandidates = %@
platformCandidates = %@
NSArray<DVTFilePath *> *RTDYLDPathsForPlatform(DVTPlatform *__strong, NSString *__strong)
Release
RTDVTFoundationAdditions
%s: Ignoring relative path '%@'
%@-%@
v8@?0
DYLD_FRAMEWORK_PATH
c16@?0@"NSString"8
%s: Empty path component in DYLD_FRAMEWORK_PATH '%@'
NSArray<NSString *> *RTNonEmptyPathsFromDYLDFrameworkPathEnvar(void)_block_invoke_2
RTLogging
iphoneos
iphonesimulator
iOS %@.simruntime
xros
xrsimulator
xrOS %@.simruntime
+[RTSimulatorPlatformAdapter pathToOverlayToolNamed:dvtPlatform:platformVersion:]
/AppleInternal/Library/BuildRoots/fa8c45dc-b5e4-11ee-b3c7-b6ef2fd8d87b/Library/Caches/com.apple.xbs/Sources/PalomaRETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/RTSimulatorPlatformAdapter.m
runtimeDir
"%@" should not be nil.
Developer/Library/Xcode/Overlays
Library/Developer/CoreSimulator/Profiles/Runtimes/%@/Contents/Resources/RuntimeRoot/usr/local/bin
Failed to find simulator executable '%@'
tooPath = '%@'
Developer/Library/PrivateFrameworks
frameworksPath = '%@'
realitytool
Device %@, runtime %@ for %@ does not have a runtime root
+[RTSimulatorPlatformAdapter realityToolForDVPlatform:platformVersion:arguments:launchError:useMetal:]
!(launchError)
A method claimed to have succeeded but provided an error!
(launchError)
A method claimed to have failed but provided no error!
delay %d
SIMULATOR_MEMORY_WARNINGS
RTRunDataMigrationWhenLaunchingPlatformTools
RTLaunchPlatformToolsWithLimitedLaunchdJobs_06_2017
-[RTSimulatorToolExecutionContext initWithSimDevice:]
/AppleInternal/Library/BuildRoots/fa8c45dc-b5e4-11ee-b3c7-b6ef2fd8d87b/Library/Caches/com.apple.xbs/Sources/PalomaRETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderCocoaTouchIntegration/RTSimulatorToolExecutionContext.m
((device)) != nil
(device)
RTEnableSimulatorJobs
Enabling additional simualtor jobs with '%@': %@
System/Library/LaunchDaemons
plist
Label
@"NSMutableSet"8@?0
-[RTSimulatorToolExecutionContext populateLaunchJobForRuntimeRoot:requiredIdentifiers:disabledIdentifiers:]
runtimeRoot
com.apple.CoreSimulator.bridge
com.apple.CoreSimulator.IndigoFramebufferBridge
com.apple.mobilegestalt.xpc
com.apple.backboardd
com.apple.assertiond
com.apple.cfprefsd.xpc.daemon
com.apple.accessibility.axAuditDaemon.deviceservice
com.apple.cloudkit.cktestd
com.apple.cloudkit.partlycloudd
com.apple.GPUTools.MobileService
com.apple.installcoordination_observer_test
com.apple.instruments.deviceservice
com.apple.internal.honeybeed.root
com.apple.internal.prototyped
com.apple.soundanalysisd
com.apple.testmanagerd
com.apple.testrund
-[RTSimulatorToolExecutionContext disabledSimulatorJobs]
__objc_no
Called DVTWarn
![intersectingIdentifiers count]
You cannot have a job both enabled and disabled. These are overlapping: %@
IS_INTERFACE_BUILDER_SIMULATOR
SIM_DISABLE_DATA_MIGRATION_FOR_DEVTOOLS
Device state changed: %@: %@
v16@?0@"NSDictionary"8
Registering notification handler: %ld
Device is shutdown, booting %@
Failed to boot %@
Device is neither shutdown nor booted: %@
Already booted device %@ for context %@
Failed to boot device %@ for context %@
com.apple.dt.IDEInterfaceBuilder
-[RTSimulatorToolExecutionContext bootDeviceIfNeededWithLaunchContext:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to boot device %@ for context %@", [self device], launchContext]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to boot device %@ for context %@", [self device], launchContext]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
RT_THREAD_NAME
DYLD_INSERT_LIBRARIES
RTTrapPlatformToolForSeconds
RT_TRAP_PLATFORM_TOOL_FOR_SECONDS
user defaults *LogLevel:
LogLevel
    key=%@, value=%@
v32@?0@"NSString"8@16*24
environment %@:
DYLD_LIBRARY_PATH
DYLD_FALLBACK_LIBRARY_PATH
%@:%@
v32@?0@"NSString"8@"NSString"16*24
DEBUG: Added to environment: %@
Failed to determine environment in which to launch %@
-[RTSimulatorToolExecutionContext environmentWithLaunchContext:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to determine environment in which to launch %@", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to determine environment in which to launch %@", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
Connected to %@ with pid %ld
Failed to initialize proxy for context %@: %@
Failed to keep platform tool alive
Try restarting your computer
Failed to keep launch platform tool and keep alive
Invalid pid for %@
Failed to handshake with platform tool
-[RTSimulatorToolExecutionContext handshakeWithPlatformToolWithPID:proxyDelegate:launchContext:optionalLifelinePipe:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to handshake with platform tool"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to handshake with platform tool"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
-[RTSimulatorToolExecutionContext replaceSimDeviceInstanceMethodsIfNeeded]_block_invoke
Cannot replace %@ because the class %s does not exist.
SimDevice
@"NSDictionary"16@?0@"SimDevice"8
[SimDevice instancesRespondToSelector:@selector(environment)]
Expecting to override an environment property on SimDevice
Going to spawn platform tool via CoreSimulator for context %@ on device %@
Spawning
not 
using
Tool exited with code %d
Tool exited with no error
Tool terminated by signal '%s'
Tool stopped by signal '%s'
Tool stopped/terminated with unkown status %ld
v12@?0i8
Spawned %@ with pid %ld but waiting to connect
Spawned pid = %d
Failed to spawn %@ on %@
Failed to spawn %@, error: %@
Failed to determine launch environment
Failed to launch %@ via CoreSimulator spawn
-[RTSimulatorToolExecutionContext launchAndConnectToToolWithLaunchContext:proxyDelegate:error:useMetal:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to launch %@ via CoreSimulator spawn", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to launch %@ via CoreSimulator spawn", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
RTAbstractPlatformToolProxy.busyCountToolQueue
Acquiring tool: %@. busyCount = %@
-[RTSimulatorToolExecutionContext decrementBusy]_block_invoke
Releasing tool: %@. busyCount = %@
<%@: %p busyCount=%@, %@ for %.1f secs, lifeTime=%.1f secs>
Busy
Idle
Main Thread
Background Thread
%d:%02d:%02d.%03d
%d:%02d.%03d
-[RTSimulatorToolLaunchContext initWithPlatformName:launchPath:frameworkSearchPaths:arguments:]
/AppleInternal/Library/BuildRoots/fa8c45dc-b5e4-11ee-b3c7-b6ef2fd8d87b/Library/Caches/com.apple.xbs/Sources/PalomaRETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderKit/RTSimulatorToolLaunchContext.m
platformName
launchPath
 toolName = %@, platformName = %@
RTSimulatorToolProxy.RemoteShutdownSourceQueue
RTSimulatorToolProxy.queue
RTSimulatorToolProxy.busyCountToolQueue
RTSimulatorToolProxy.backtraceQueue
Looking up device for type %@ and runtime %@
Using SimDeviceSet at path: %@
RTClearSimulatorDevicesOnLaunch
%@ is set, deleting %@%@
 -- but deleting failed with error %@
Picking device from available devices: %@
No device found with matching runtime and deviceType identifiers, creating new device
Failed to create new simulator device in set %@ that matches %@ for runtime %@ (%@). Available devices: %@
Failed to create SimDeviceSet at path %@. You'll want to check the logs in ~/Library/Logs/CoreSimulator to see why creating the SimDeviceSet failed.
Failed to get shared SimServiceContext with error %@. You'll want to check the logs in ~/Library/Logs/CoreSimulator to see why getting the shared context failed.
Failed to find a suitable device for the type %@ with runtime %@
SimDevice *RTSimDeviceForSimDeviceTypeAndSimRuntime(SimDeviceType *__strong, SimRuntime *__strong, NSError *__autoreleasing *)
/AppleInternal/Library/BuildRoots/fa8c45dc-b5e4-11ee-b3c7-b6ef2fd8d87b/Library/Caches/com.apple.xbs/Sources/PalomaRETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderCocoaTouchIntegration/RTSimulatorToolUtilities.m
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find a suitable device for the type %@ with runtime %@", deviceType, runtime]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find a suitable device for the type %@ with runtime %@", deviceType, runtime]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
DISABLE_FOCUS_SOUNDS
MallocStackLogging
NSZombieEnabled
v32@?0@"SimDeviceType"8Q16*24
No available runtime found from: [
    %@ ==> %@ does not support runtime
 when matching for %@
Could not find any supported simulator runtimes
Failed to find newest available Simulator runtime
SimDeviceType *RTSimDeviceTypeForSimRuntime(SimRuntime *__strong, NSError *__autoreleasing *)
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Simulator runtime"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Simulator runtime"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
dvtPlatform.identifier = %@
dvtPlatform.name = %@
dvtPlatform.family = %@
supportedRuntimes count = %ld
runtime.identifier = %@
runtime.name = %@
runtime.platformIdentifier = %@
v32@?0@"SimRuntime"8Q16*24
    %@ ==> not available: %@,
    %@ ==> %@ does not support runtime,
SimRuntime *RTSimDeviceRuntimeForDVTPlatform(DVTPlatform *__strong, NSError *__autoreleasing *)
Disabling RT's simulator service RTDisableSimualtorService=1
Created shared service context: %@
Unable to load specific SimServiceContext from %@
Failed to create specific shared service context: %@
Failed to get shared service context
SimServiceContext *RTSharedInterfaceBuilderSpecificSimulatorServiceContext(NSError *__autoreleasing *)
!(({ NSError *effectiveError = (initializationError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to get shared service context"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (initializationError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to get shared service context"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
RTDisableSimualtorService
BOOL DVTPlatformSupportSimRuntime(DVTPlatform *__strong, SimRuntime *__strong)
The DVT runtime platform is missing for (%@). Available Platforms: %@
note
warning
error
true
false
auto
Reality .rkassets to .reality compiler.
Exception from DVTPlatform: 
%{private}@ %{private}@
com.apple.realitytool
%{public}@ %{public}@
Fatal error
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
Failed reading file '
Failed getting subpaths of '
Timeout reached, but no result was returned from UserComponentSchema Preprocessor.
UserComponentsSchema.usda
Failed to get requested engine configuration 
', but realitytool only supports 
', failed to obtain an RE asset platform
run realitytool in 
 realitytool completed.
realitytool cannot use Metal in this build environment
Enabling Metal for deployment target compile
Exception thrown: 
\s+def\s+RealityKitComponent\s+"ImageBasedLight"
Failure creating or patching schema - 'error.localizedDescription'
 swift files, timeout is 
 sec. reached, but no result was returned from UserComponentSchema Preprocessor.
Failure creating schema - '
Command to parse custom component swift files to create a .usda schema with initial values
Will need to sepecify output .usda file and list of input swift files
Failure patching schema into .rkassets - '
Command to compile .rkassets bundle with support .usda schema file into .reality runtime file.
Will need to sepecify output folder, platform, deploymentTarget, optional schema file, and input .rkassets bundle
failed to create temp directory: 
--schema-file <file> must be specified when using --derived-data <path>
Failed to convert '
' to an RE asset platform
Invalid --deployment-target '
', but Xcode only supports 
', but failed to obtain a valid os from Xcode
', but failed to obtain a valid simulator from Xcode
', but realitytool only supports [
Output .reality bundle path
Optional .usda schema file generated by the create-schema command.
Derived Data unique directory
Platform required for compile: [
Deployment Target for os, like 1.0 for visionOS.
Input is .rkassets bundle
' does not exist
' does not have expected extension, '
empty path not allowed for directory
empty path not allowed for file
empty path not allowed for output file
Output schema file path
File with list of Swift files for the target and each dependency to preprocess into schema .usda
' has incorrect extension '
' not expected '.reality'
' is not a folder
output folder: '
' has no extension
deploymentTarget
moduleWithDependencies
_TtC11realitytool37RKAssetsCustomComponentsSchemaHandler
originalRKAssetsURL
originalRKAssetSubpaths
fileManager
fmDelegate
realitySymbolCache
userCodeRegistry
subscriptions
derivedDataRootURL
schemaURL
_TtC11realitytoolP33_9C34E9C2B61758FE4CDCD282C96BADEA25CustomFileManagerDelegate
c40@0:8@16@24@32
c32@0:8@16@24
@16@0:8
realitytool-modified
def RealityKitCustomComponent
No CustomComponents in schema .usda, skipping .rkassets patching.
Starting DerivedData process...
Finished processRKAssets() with a failure
Finished processRKAssets() successfully
Processing rkassets USD files...
Copying file without alterations: 
RealityKitCustomComponent
Skipping file with no custom components: 
Altered file to prepend custom component references: 
contains deprecated 
 instead. Using fallback mechanism.
Produced a user code stage: 
No RealityKitCustomComponents found, no schema .usda created, skipping .rkassets patching.
Finished process() with a failure
Finished process() successfully
Finished process() with code incompatibility issues
RealityComposerPro
Starting Swift file(s) preprocess...
Produced a user code stage with 
Finished processSwiftFiles() with a failure '
Finished processSwiftFiles() successfully
Finished processSwiftFiles() with code incompatibility issues, failure
NSFileManagerDelegate
c48@0:8@16@24@32@40
c40@0:8@"NSFileManager"16@"NSString"24@"NSString"32
c40@0:8@"NSFileManager"16@"NSURL"24@"NSURL"32
c48@0:8@"NSFileManager"16@"NSError"24@"NSString"32@"NSString"40
c48@0:8@"NSFileManager"16@"NSError"24@"NSURL"32@"NSURL"40
c32@0:8@"NSFileManager"16@"NSString"24
c32@0:8@"NSFileManager"16@"NSURL"24
c40@0:8@"NSFileManager"16@"NSError"24@"NSString"32
c40@0:8@"NSFileManager"16@"NSError"24@"NSURL"32
NSObject
c24@0:8@16
q16@0:8
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
c16@0:8
c24@0:8#16
c24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
c24@0:8@"Protocol"16
@"NSString"16@0:8
_TtC11realitytool16RKAssetsCompiler
Preparing to compile 
 to output file 
%{public}@
Ordered internal assets (relative to 
Beginning compilation of 
Finished compilation of 
Preparing to preprocess 
_TtC11realitytool20SimulatorToolAdapter
ArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
SHELL
ArgumentParser/Argument.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
Argument(*definition*)
ArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
Show subcommand help information.
_TtC14ArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
ArgumentParser/ArgumentDecoder.swift
function __fish_
_using_command
    set cmd (commandline -opc)
    if [ (count $cmd) -eq (count $argv) ]
        for i in (seq (count $argv))
            if [ $cmd[$i] != $argv[$i] ]
                return 1
            end
        end
        return 0
    end
    return 1
-f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-f -a '(__fish_complete_directories)'
-f -a '(for i in 
ArgumentParser/NameSpecification.swift
' has not characters to form short option name.
ArgumentParser/Option.swift
Option(*definition*)
element
parent
children
' for more information.
Unspecified version
ArgumentParser/Flag.swift
ArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
ArgumentParser/OptionGroup.swift
OptionGroup(*definition*)
Tree<ParsableCommand.Type>
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-h --help)'{-h,--help}'[Print help information.]'
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Flag(*definition*)
offset element 
 <subcommand>' for detailed help.
ArgumentParser/HelpGenerator.swift
Show the version.
Show help information.
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$(
 "$COMP_WORDS")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
PropertyList
Translators
RealityCompilerResult
RTSimulatorPlatformAdapter
IBSimDeviceSpawningsSupport
RTSimulatorToolExecutionContext
Timing
RTSimulatorToolLaunchContext
RTSimulatorToolProxy
c16@0:8
@16@0:8
@24@0:8@16
@20@0:8c16
v20@0:8c16
v24@0:8@16
v16@0:8
@"NSError"
@40@0:8@16@24@32
@52@0:8@16@24@32^@40c48
@44@0:8@16@24@32c40
c64@0:8@16@24@32@?40^i48^@56
v40@0:8@16@24@32
c32@0:8@16^@24
v32@0:8@16@24
c40@0:8@16@24^@32
@32@0:8@16^@24
@52@0:8i16@20@28@36^@44
@44@0:8@16@24^@32c40
d16@0:8
@"NSObject<OS_dispatch_queue>"
@"NSDictionary"
@"SimDevice"
{mach_timebase_info="numer"I"denom"I}
@48@0:8@16@24@32@40
q16@0:8
v24@0:8q16
@"NSString"
@"NSArray"
@"NSNumber"
v32@0:8@16^@24
@56@0:8@16@24@32@?40^@48
@?16@0:8
@"NSPipe"
@"NSObject<OS_dispatch_source>"
@"RTSimulatorToolExecutionContext"
@"RTSimulatorToolLaunchContext"
@"NSObject<RTSimulatorToolProxyDelegate>"
realitytool Path = '%@'
Spawning realitytool on device %@
Spawning %sstandalone (%s metal)
_pXpG
So7NSErrorCSg
$sSY
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
yypG
So9OS_os_logC
ySSypG
SS_ypt
SaySSG
ySSG
SS9directory_t
ySSG
ySSG
Sgz_Xx
_GSg
$ss12CaseIterableP
So13NSFileManagerC
So8NSObjectC
_AAt
ySnySiGG
ySay
GADGGG
ySay
ySay
_pGIegn_
GIeggg_
SS4path_SS17expectedExtensiont
SS4path_t
SSSg
qd__
$s14ArgumentParser13ParsedWrapperP
Sayqd__GSg
SSqd__
_pIeggrzo_
Sayqd__G
ypSg
_pIeggrzo_
qd__XMT
$s14ArgumentParser013ExpressibleByA0P
$s14ArgumentParser22DecodableParsedWrapperP
5Value
ySaySSGG
_pXpG
SaySSGSg
_Sit
_pXpGADG
_ypt
SaySsG
SaySiG
$s14ArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
_SitG
SayypG
yypG
ySsG
ySaySSG_SStG
SaySSG_SSt
ySiG
ySaySiGG
_pXpG
_pXpGG
_pXp_AA_pXpt
SayxG
_pXpSg
ySSG
$s14ArgumentParser0A18HelpOptionProviderP
ztKc
SgSS
ztKc
ztKc
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
SaySSG10extensions_t
SaySSGAAc
yxGSgXw
yxGG
yyXlG
_pXpGACG
_pXpGACSgIegnr_
_pXp
_SSt
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
_pSg
_pXmTSg
ySbG
SbSg
S2SSgIeggr_
$s14ArgumentParser15ParsableCommandP
_SStG
_SSt
ySi_
$s14ArgumentParser17ParsableArgumentsP
$s14ArgumentParser0A11SetProviderP
SSSg5label_yp5valuet
_pSg
SSypSgIeggr_
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
Sbz_Xx
ySSSgG
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
ySay
$sST
_SStSg
SSxSgIeggr_
xXMT
rawValue
RawValue
ArrayLiteralElement
Element
note
warning
error
logger
osLogType
RawValue
failedToLoadFile
failedToDecodeData
failedToEncodeData
failedToConvertDataToString
failedToWriteFile
failedGettingSubpathsOf
failedReadingFile
_outputFolder
_platform
_deploymentTarget
_useMetal
_inputFolder
_outputSchema
_moduleWithDependencies
_outputReality
_schemaFile
_derivedData
_rkAssetsFolder
true
false
auto
message
outputReality
schemaFile
derivedData
platform
deploymentTarget
useMetal
rkAssetsFolder
outputSchema
moduleWithDependencies
outputFolder
inputFolder
AllCases
RawValue
originalRKAssetsURL
originalRKAssetSubpaths
fileManager
fmDelegate
realitySymbolCache
userCodeRegistry
subscriptions
derivedDataRootURL
schemaURL
unableToCopy
unableToDeleteOldFiles
invalidURLComponent
sourceCodeIncompatibility
noDerivedDataRootURLProvided
noSchemaURLProvided
failedReadingSchemaFile
noSymbolCache
noUserCodeRegistry
nothingToDo
inputFileBadExtension
rkAssetsIsNotDirectory
outputFolderIsNotDirectory
cannotGetRkassetsContents
RawValue
AllCases
rawValue
Value
_parsedValue
_hiddenFromHelp
remaining
unconditionalRemaining
value
definition
_subcommands
commandStack
subcommands
_elements
ArrayLiteralElement
argumentIndex
defaultValue
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
commandName
_superCommandName
abstract
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
RawValue
message
rawValue
helpRequest
nullary
unary
named
positional
default
kind
help
completion
parsingStrategy
update
initial
options
discussion
defaultValue
keys
allValues
isComposite
nextAsValue
scanningForValue
unconditional
upToNextOption
allRemainingInput
rawValue
ArrayLiteralElement
Element
RawValue
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
rawValue
RawValue
ArrayLiteralElement
elements
customLong
customShort
long
short
kind
list
file
shellCommand
custom
default
directory
Value
_parsedValue
_hiddenFromHelp
next
unconditional
scanningForValue
singleValue
unconditionalSingleValue
upToNextOption
remaining
element
parent
children
recursiveSubcommand
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
help
validation
other
commandStack
parserError
_generateCompletionScript
generateCompletionScript
Value
_parsedValue
_hiddenFromHelp
_options
options
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
helpRequested
versionRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
Value
_parsedValue
_hiddenFromHelp
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
positionalArguments
subcommands
options
components
title
content
long
short
longWithSingleDash
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
shouldDisplay
Element
Iterator
content
namePositions
usda
usdc
usdz
rkassets
xros
xrsimulator
macosx
bash
fish
@(#)PROGRAM:realitytool  PROJECT:RealityTools-409.100.11.0.1
realitytool
RealityTool
REStartupOptions
OSLogType
Nos_log_type_t
StandardError
StandardOutput
OutputDef
LogType
ModuleWithDependenciesError
URLError
CompileCommand
CreateSchemaCommand
ExportCommand
CodingKeys
RealityToolError
UseMetal
RKAssetsCustomComponentsSchemaHandler
CustomFileManagerDelegate
DerivedDataError
RKAssetsCompiler
rkassets
RKAssetsCompilerError
SimulatorToolAdapter
ArgumentParser
CompletionShell
Argument
ArgumentArrayParsingStrategy
ExpressibleByArgument
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
help
HelpCommand
CodingKeys
InputOrigin
Element
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
ArrayWrapper
UnkeyedContainer
SingleValueContainer
Error
CommandConfiguration
ValidationError
ExitCode
CleanExit
ArgumentHelpOptionProvider
Update
Kind
ArgumentDefinition
ParsingStrategy
Help
Options
ParsedValues
Element
InputKey
NameSpecification
Element
CompletionKind
Kind
Option
SingleValueParsingStrategy
ArrayParsingStrategy
Tree
InitializationError
InputIndex
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
MessageInfo
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
OptionGroup
ParsableCommand
ParsableArguments
ArgumentSetProvider
_WrappedParsableCommand
StandardError
CodingKeys
ParserError
InternalParseError
Flag
FlagInversion
FlagExclusivity
Element
HelpGenerator
Section
DiscussionSection
Usage
Header
Name
ArgumentHelp
ArgumentSet
UseDefaultRealityToolCompiler
simulator
DVTFilePath *RTPathForPlatformRelativePath(NSString *__strong, DVTPlatform *__strong)
/AppleInternal/Library/BuildRoots/fa8c45dc-b5e4-11ee-b3c7-b6ef2fd8d87b/Library/Caches/com.apple.xbs/Sources/PalomaRETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderKit/RTDVTFoundationAdditions.m
((platformRelativePath)) != nil
%@ should not be nil.
(platformRelativePath)
((platform)) != nil
(platform)
NSString *RTPathForPlatformContentWithSuffix(NSString *__strong, NSString *__strong, DVTPlatform *__strong, NSString *__strong)
((contentName)) != nil
(contentName)
macosx
RealityTool
dyldCandidates = %@
platformCandidates = %@
NSArray<DVTFilePath *> *RTDYLDPathsForPlatform(DVTPlatform *__strong, NSString *__strong)
Release
RTDVTFoundationAdditions
%s: Ignoring relative path '%@'
%@-%@
v8@?0
DYLD_FRAMEWORK_PATH
B16@?0@"NSString"8
%s: Empty path component in DYLD_FRAMEWORK_PATH '%@'
NSArray<NSString *> *RTNonEmptyPathsFromDYLDFrameworkPathEnvar(void)_block_invoke_2
RTLogging
iphoneos
iphonesimulator
iOS %@.simruntime
xros
xrsimulator
xrOS %@.simruntime
+[RTSimulatorPlatformAdapter pathToOverlayToolNamed:dvtPlatform:platformVersion:]
/AppleInternal/Library/BuildRoots/fa8c45dc-b5e4-11ee-b3c7-b6ef2fd8d87b/Library/Caches/com.apple.xbs/Sources/PalomaRETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/RTSimulatorPlatformAdapter.m
runtimeDir
"%@" should not be nil.
Developer/Library/Xcode/Overlays
Library/Developer/CoreSimulator/Profiles/Runtimes/%@/Contents/Resources/RuntimeRoot/usr/local/bin
Failed to find simulator executable '%@'
tooPath = '%@'
Developer/Library/PrivateFrameworks
frameworksPath = '%@'
realitytool
Device %@, runtime %@ for %@ does not have a runtime root
+[RTSimulatorPlatformAdapter realityToolForDVPlatform:platformVersion:arguments:launchError:useMetal:]
!(launchError)
A method claimed to have succeeded but provided an error!
(launchError)
A method claimed to have failed but provided no error!
delay %d
SIMULATOR_MEMORY_WARNINGS
RTRunDataMigrationWhenLaunchingPlatformTools
RTLaunchPlatformToolsWithLimitedLaunchdJobs_06_2017
-[RTSimulatorToolExecutionContext initWithSimDevice:]
/AppleInternal/Library/BuildRoots/fa8c45dc-b5e4-11ee-b3c7-b6ef2fd8d87b/Library/Caches/com.apple.xbs/Sources/PalomaRETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderCocoaTouchIntegration/RTSimulatorToolExecutionContext.m
((device)) != nil
(device)
RTEnableSimulatorJobs
Enabling additional simualtor jobs with '%@': %@
System/Library/LaunchDaemons
plist
Label
@"NSMutableSet"8@?0
-[RTSimulatorToolExecutionContext populateLaunchJobForRuntimeRoot:requiredIdentifiers:disabledIdentifiers:]
runtimeRoot
com.apple.CoreSimulator.bridge
com.apple.CoreSimulator.IndigoFramebufferBridge
com.apple.mobilegestalt.xpc
com.apple.backboardd
com.apple.assertiond
com.apple.cfprefsd.xpc.daemon
com.apple.accessibility.axAuditDaemon.deviceservice
com.apple.cloudkit.cktestd
com.apple.cloudkit.partlycloudd
com.apple.GPUTools.MobileService
com.apple.installcoordination_observer_test
com.apple.instruments.deviceservice
com.apple.internal.honeybeed.root
com.apple.internal.prototyped
com.apple.soundanalysisd
com.apple.testmanagerd
com.apple.testrund
-[RTSimulatorToolExecutionContext disabledSimulatorJobs]
__objc_no
Called DVTWarn
![intersectingIdentifiers count]
You cannot have a job both enabled and disabled. These are overlapping: %@
IS_INTERFACE_BUILDER_SIMULATOR
SIM_DISABLE_DATA_MIGRATION_FOR_DEVTOOLS
Device state changed: %@: %@
v16@?0@"NSDictionary"8
Registering notification handler: %ld
Device is shutdown, booting %@
Failed to boot %@
Device is neither shutdown nor booted: %@
Already booted device %@ for context %@
Failed to boot device %@ for context %@
com.apple.dt.IDEInterfaceBuilder
-[RTSimulatorToolExecutionContext bootDeviceIfNeededWithLaunchContext:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to boot device %@ for context %@", [self device], launchContext]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to boot device %@ for context %@", [self device], launchContext]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
RT_THREAD_NAME
DYLD_INSERT_LIBRARIES
RTTrapPlatformToolForSeconds
RT_TRAP_PLATFORM_TOOL_FOR_SECONDS
user defaults *LogLevel:
LogLevel
    key=%@, value=%@
v32@?0@"NSString"8@16^B24
environment %@:
DYLD_LIBRARY_PATH
DYLD_FALLBACK_LIBRARY_PATH
%@:%@
v32@?0@"NSString"8@"NSString"16^B24
DEBUG: Added to environment: %@
Failed to determine environment in which to launch %@
-[RTSimulatorToolExecutionContext environmentWithLaunchContext:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to determine environment in which to launch %@", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to determine environment in which to launch %@", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
Connected to %@ with pid %ld
Failed to initialize proxy for context %@: %@
Failed to keep platform tool alive
Try restarting your computer
Failed to keep launch platform tool and keep alive
Invalid pid for %@
Failed to handshake with platform tool
-[RTSimulatorToolExecutionContext handshakeWithPlatformToolWithPID:proxyDelegate:launchContext:optionalLifelinePipe:error:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to handshake with platform tool"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to handshake with platform tool"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
-[RTSimulatorToolExecutionContext replaceSimDeviceInstanceMethodsIfNeeded]_block_invoke
Cannot replace %@ because the class %s does not exist.
SimDevice
@"NSDictionary"16@?0@"SimDevice"8
[SimDevice instancesRespondToSelector:@selector(environment)]
Expecting to override an environment property on SimDevice
Going to spawn platform tool via CoreSimulator for context %@ on device %@
Spawning
not 
using
Tool exited with code %d
Tool exited with no error
Tool terminated by signal '%s'
Tool stopped by signal '%s'
Tool stopped/terminated with unkown status %ld
v12@?0i8
Spawned %@ with pid %ld but waiting to connect
Spawned pid = %d
Failed to spawn %@ on %@
Failed to spawn %@, error: %@
Failed to determine launch environment
Failed to launch %@ via CoreSimulator spawn
-[RTSimulatorToolExecutionContext launchAndConnectToToolWithLaunchContext:proxyDelegate:error:useMetal:]
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to launch %@ via CoreSimulator spawn", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to launch %@ via CoreSimulator spawn", [launchContext toolName]]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
RTAbstractPlatformToolProxy.busyCountToolQueue
Acquiring tool: %@. busyCount = %@
-[RTSimulatorToolExecutionContext decrementBusy]_block_invoke
Releasing tool: %@. busyCount = %@
<%@: %p busyCount=%@, %@ for %.1f secs, lifeTime=%.1f secs>
Busy
Idle
Main Thread
Background Thread
%d:%02d:%02d.%03d
%d:%02d.%03d
-[RTSimulatorToolLaunchContext initWithPlatformName:launchPath:frameworkSearchPaths:arguments:]
/AppleInternal/Library/BuildRoots/fa8c45dc-b5e4-11ee-b3c7-b6ef2fd8d87b/Library/Caches/com.apple.xbs/Sources/PalomaRETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderKit/RTSimulatorToolLaunchContext.m
platformName
launchPath
 toolName = %@, platformName = %@
RTSimulatorToolProxy.RemoteShutdownSourceQueue
RTSimulatorToolProxy.queue
RTSimulatorToolProxy.busyCountToolQueue
RTSimulatorToolProxy.backtraceQueue
Looking up device for type %@ and runtime %@
Using SimDeviceSet at path: %@
RTClearSimulatorDevicesOnLaunch
%@ is set, deleting %@%@
 -- but deleting failed with error %@
Picking device from available devices: %@
No device found with matching runtime and deviceType identifiers, creating new device
Failed to create new simulator device in set %@ that matches %@ for runtime %@ (%@). Available devices: %@
Failed to create SimDeviceSet at path %@. You'll want to check the logs in ~/Library/Logs/CoreSimulator to see why creating the SimDeviceSet failed.
Failed to get shared SimServiceContext with error %@. You'll want to check the logs in ~/Library/Logs/CoreSimulator to see why getting the shared context failed.
Failed to find a suitable device for the type %@ with runtime %@
SimDevice *RTSimDeviceForSimDeviceTypeAndSimRuntime(SimDeviceType *__strong, SimRuntime *__strong, NSError *__autoreleasing *)
/AppleInternal/Library/BuildRoots/fa8c45dc-b5e4-11ee-b3c7-b6ef2fd8d87b/Library/Caches/com.apple.xbs/Sources/PalomaRETools/Source/Tools/realitytool/Sources/SimulatorToolSupport-macOS/IDEInterfaceBuilderCocoaTouchIntegration/RTSimulatorToolUtilities.m
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find a suitable device for the type %@ with runtime %@", deviceType, runtime]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (localFailureReason); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find a suitable device for the type %@ with runtime %@", deviceType, runtime]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
DISABLE_FOCUS_SOUNDS
MallocStackLogging
NSZombieEnabled
v32@?0@"SimDeviceType"8Q16^B24
No available runtime found from: [
    %@ ==> %@ does not support runtime
 when matching for %@
Could not find any supported simulator runtimes
Failed to find newest available Simulator runtime
SimDeviceType *RTSimDeviceTypeForSimRuntime(SimRuntime *__strong, NSError *__autoreleasing *)
!(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Simulator runtime"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (localError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to find newest available Simulator runtime"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
dvtPlatform.identifier = %@
dvtPlatform.name = %@
dvtPlatform.family = %@
supportedRuntimes count = %ld
runtime.identifier = %@
runtime.name = %@
runtime.platformIdentifier = %@
v32@?0@"SimRuntime"8Q16^B24
    %@ ==> not available: %@,
    %@ ==> %@ does not support runtime,
SimRuntime *RTSimDeviceRuntimeForDVTPlatform(DVTPlatform *__strong, NSError *__autoreleasing *)
Disabling RT's simulator service RTDisableSimualtorService=1
Created shared service context: %@
Unable to load specific SimServiceContext from %@
Failed to create specific shared service context: %@
Failed to get shared service context
SimServiceContext *RTSharedInterfaceBuilderSpecificSimulatorServiceContext(NSError *__autoreleasing *)
!(({ NSError *effectiveError = (initializationError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to get shared service context"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
(({ NSError *effectiveError = (initializationError); NSString *effectiveFailureReason = (((void *)0)); if (effectiveError || effectiveFailureReason) { NSString *localizedDescription = ([NSString stringWithFormat:@"Failed to get shared service context"]); NSMutableDictionary *userInfo = [NSMutableDictionary dictionary]; [userInfo setObject:localizedDescription forKey:NSLocalizedDescriptionKey]; if (effectiveError) { [userInfo setObject:effectiveError forKey:NSUnderlyingErrorKey]; } if (effectiveFailureReason) { [userInfo setObject:effectiveFailureReason forKey:NSLocalizedFailureReasonErrorKey]; } NSString *domain = [effectiveError domain] ?: @"com.apple.dt.IDEInterfaceBuilder"; NSInteger code = (effectiveError) ? [effectiveError code] : -1; effectiveError = [NSError errorWithDomain:domain code:code userInfo:userInfo]; } effectiveError; }))
RTDisableSimualtorService
BOOL DVTPlatformSupportSimRuntime(DVTPlatform *__strong, SimRuntime *__strong)
The DVT runtime platform is missing for (%@). Available Platforms: %@
note
warning
error
true
false
auto
Reality .rkassets to .reality compiler.
Exception from DVTPlatform: 
%{private}@ %{private}@
com.apple.realitytool
%{public}@ %{public}@
Fatal error
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
Failed reading file '
Failed getting subpaths of '
Timeout reached, but no result was returned from UserComponentSchema Preprocessor.
UserComponentsSchema.usda
Failed to get requested engine configuration 
', but realitytool only supports 
run realitytool in 
 realitytool completed.
', failed to obtain an RE asset platform
realitytool cannot use Metal in this build environment
Enabling Metal for deployment target compile
Exception thrown: 
\s+def\s+RealityKitComponent\s+"ImageBasedLight"
Failure creating or patching schema - 'error.localizedDescription'
 swift files, timeout is 
 sec. reached, but no result was returned from UserComponentSchema Preprocessor.
Failure creating schema - '
Command to parse custom component swift files to create a .usda schema with initial values
Will need to sepecify output .usda file and list of input swift files
Failure patching schema into .rkassets - '
Command to compile .rkassets bundle with support .usda schema file into .reality runtime file.
Will need to sepecify output folder, platform, deploymentTarget, optional schema file, and input .rkassets bundle
failed to create temp directory: 
--schema-file <file> must be specified when using --derived-data <path>
Failed to convert '
' to an RE asset platform
Invalid --deployment-target '
', but Xcode only supports 
', but failed to obtain a valid os from Xcode
', but failed to obtain a valid simulator from Xcode
', but realitytool only supports [
Output .reality bundle path
Optional .usda schema file generated by the create-schema command.
Derived Data unique directory
Platform required for compile: [
Deployment Target for os, like 1.0 for visionOS.
Input is .rkassets bundle
' does not exist
' does not have expected extension, '
empty path not allowed for directory
empty path not allowed for file
empty path not allowed for output file
Output schema file path
File with list of Swift files for the target and each dependency to preprocess into schema .usda
' has incorrect extension '
' not expected '.reality'
' is not a folder
output folder: '
' has no extension
deploymentTarget
moduleWithDependencies
_TtC11realitytool37RKAssetsCustomComponentsSchemaHandler
originalRKAssetsURL
originalRKAssetSubpaths
fileManager
fmDelegate
realitySymbolCache
userCodeRegistry
subscriptions
derivedDataRootURL
schemaURL
_TtC11realitytoolP33_9C34E9C2B61758FE4CDCD282C96BADEA25CustomFileManagerDelegate
B40@0:8@16@24@32
B32@0:8@16@24
@16@0:8
realitytool-modified
def RealityKitCustomComponent
No CustomComponents in schema .usda, skipping .rkassets patching.
Starting DerivedData process...
Finished processRKAssets() with a failure
Finished processRKAssets() successfully
Processing rkassets USD files...
Copying file without alterations: 
RealityKitCustomComponent
Skipping file with no custom components: 
Altered file to prepend custom component references: 
contains deprecated 
 instead. Using fallback mechanism.
Produced a user code stage: 
No RealityKitCustomComponents found, no schema .usda created, skipping .rkassets patching.
Finished process() with a failure
Finished process() successfully
Finished process() with code incompatibility issues
RealityComposerPro
Starting Swift file(s) preprocess...
Produced a user code stage with 
Finished processSwiftFiles() with a failure '
Finished processSwiftFiles() successfully
Finished processSwiftFiles() with code incompatibility issues, failure
NSFileManagerDelegate
B48@0:8@16@24@32@40
B40@0:8@"NSFileManager"16@"NSString"24@"NSString"32
B40@0:8@"NSFileManager"16@"NSURL"24@"NSURL"32
B48@0:8@"NSFileManager"16@"NSError"24@"NSString"32@"NSString"40
B48@0:8@"NSFileManager"16@"NSError"24@"NSURL"32@"NSURL"40
B32@0:8@"NSFileManager"16@"NSString"24
B32@0:8@"NSFileManager"16@"NSURL"24
B40@0:8@"NSFileManager"16@"NSError"24@"NSString"32
B40@0:8@"NSFileManager"16@"NSError"24@"NSURL"32
NSObject
B24@0:8@16
q16@0:8
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
B24@0:8@"Protocol"16
@"NSString"16@0:8
_TtC11realitytool16RKAssetsCompiler
Preparing to compile 
 to output file 
%{public}@
Ordered internal assets (relative to 
Beginning compilation of 
Finished compilation of 
Preparing to preprocess 
_TtC11realitytool20SimulatorToolAdapter
ArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
SHELL
ArgumentParser/Argument.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
Argument(*definition*)
ArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
Show subcommand help information.
_TtC14ArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
ArgumentParser/ArgumentDecoder.swift
function __fish_
_using_command
    set cmd (commandline -opc)
    if [ (count $cmd) -eq (count $argv) ]
        for i in (seq (count $argv))
            if [ $cmd[$i] != $argv[$i] ]
                return 1
            end
        end
        return 0
    end
    return 1
-f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-f -a '(__fish_complete_directories)'
-f -a '(for i in 
ArgumentParser/NameSpecification.swift
' has not characters to form short option name.
ArgumentParser/Option.swift
Option(*definition*)
element
parent
children
' for more information.
Unspecified version
ArgumentParser/Flag.swift
ArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
ArgumentParser/OptionGroup.swift
OptionGroup(*definition*)
Tree<ParsableCommand.Type>
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-h --help)'{-h,--help}'[Print help information.]'
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Flag(*definition*)
offset element 
 <subcommand>' for detailed help.
ArgumentParser/HelpGenerator.swift
Show the version.
Show help information.
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$(
 "$COMP_WORDS")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
PropertyList
Translators
RealityCompilerResult
RTSimulatorPlatformAdapter
IBSimDeviceSpawningsSupport
RTSimulatorToolExecutionContext
Timing
RTSimulatorToolLaunchContext
RTSimulatorToolProxy
T@"NSNumber",C,N,V_signalNumber
T@"NSArray",R,N,V_arguments
_backtraceQueue
T@"NSDictionary",C,N,V_additionalEnvironment
_registrationID
T@"NSNumber",C,N,V_exitCode
containsObject:
T@"NSNumber",C,N,V_processIdentifier
initWithPlatformName:launchPath:frameworkSearchPaths:arguments:
T@"NSObject<RTSimulatorToolProxyDelegate>",R,W,N,V_proxyDelegate
isAlive
T@"NSString",R,N
loadAllPlatformsReturningError:
T@"RTSimulatorToolExecutionContext",R,N,V_executionContext
processExitType
T@"SimDevice",R,N,V_device
runtime
TB,N,V_shouldRaiseOnFailures
setPath
TB,V_isAlive
stringByAppendingPathComponent:
_additionalEnvironment
success
.cxx_destruct
T@"NSString",R,N,V_platformName
T@"NSArray",R,N,V_frameworkSearchPaths
_device
T@"NSError",&,N,V_error
arrayWithArray:
T@"NSNumber",C,N,V_exitStatus
dealloc
T@"NSNumber",R,N,V_processIdentifier
initWithString:
T@"NSString",C,N,V_processFailureDescription
isProxy
T@"NSString",R,N,V_launchPath
numberWithBool:
T@"RTSimulatorToolLaunchContext",R,N,V_launchContext
release
T@?,R,C,N,V_terminationHandler
TB,N,V_success
setWithObjects:
Tq,N,V_processExitType
stringFromDate:
_arguments
_busyCountToolQueue
_cachedDisabledSimulatorJobs
_environmentForBootingDevice
_error
_executionContext
_exitCode
_exitStatus
_frameworkSearchPaths
_isAlive
_isBusyCount
_keepAlivePipe
_launchContext
_launchPath
_logAtLogLevel:withFormat:
_platformName
_processExitType
_processFailureDescription
_processIdentifier
_proxyDelegate
_queue
_shouldRaiseOnFailures
_signalNumber
_success
_terminationHandler
_timeStampForLifeTime
_timeStampFromLastIdleOrBusy
_toolExitDispatchSource
addEntriesFromDictionary:
addObject:
addObjectsFromArray:
additionalEnvironment
allObjects
allPlatforms
appendFormat:
appendString:
arguments
array
arrayWithObject:
arrayWithObjects:count:
autorelease
available
availableDevices
boolForKey:
boolValue
bootDeviceIfNeededWithLaunchContext:error:
bootWithOptions:error:
bundleIdentifier
busyCountQueue
class
code
componentsJoinedByString:
componentsSeparatedByString:
conformsToProtocol:
copy
copyItemAtURL:toURL:error:
count
countByEnumeratingWithState:objects:count:
createDeviceWithType:runtime:name:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentRunLoop
currentThread
debugDescription
decrementBusy
defaultDeviceSetWithError:
defaultManager
defaultPaths
deleteDevice:error:
description
developerDirectory
device
deviceType
dictionary
dictionaryRepresentation
dictionaryWithContentsOfFile:
dictionaryWithObjects:forKeys:count:
didLaunchWithPipeToKeepAlive:error:
didShutdownTool:
directoryContents
disabledSimulatorJobs
domain
dvt_cachedEnvironment
dvt_isNonEmpty
dvt_objectsPassingTest:
enumerateKeysAndObjectsUsingBlock:
enumerateObjectsWithOptions:usingBlock:
environment
environmentWithLaunchContext:error:
error
errorWithDomain:code:userInfo:
executionContext
existsInFileSystem
exitCode
exitStatus
family
fileDescriptor
fileExistsAtPath:
fileExistsAtPath:isDirectory:
fileHandleWithStandardError
fileHandleWithStandardOutput
fileManager:shouldCopyItemAtPath:toPath:
fileManager:shouldCopyItemAtURL:toURL:
fileManager:shouldLinkItemAtPath:toPath:
fileManager:shouldLinkItemAtURL:toURL:
fileManager:shouldMoveItemAtPath:toPath:
fileManager:shouldMoveItemAtURL:toURL:
fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:
fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:
fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:
fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:
fileManager:shouldProceedAfterError:movingItemAtPath:toPath:
fileManager:shouldProceedAfterError:movingItemAtURL:toURL:
fileManager:shouldProceedAfterError:removingItemAtPath:
fileManager:shouldProceedAfterError:removingItemAtURL:
fileManager:shouldRemoveItemAtPath:
fileManager:shouldRemoveItemAtURL:
filePathForPathString:
filePathForRelativePathString:
frameworkSearchPaths
frameworkSearchPathsForOverlayToolsForDVTPlatform:
getDeltaTimeString
handshakeWithPlatformToolWithPID:proxyDelegate:launchContext:optionalLifelinePipe:error:
hasSuffix:
hash
homeDirectoryForCurrentUser
ibSpawnWithPath:options:terminationQueue:terminationHandler:pid:error:
ibSpawningIBSimulatorToolProcess
ibSwizzledEnvironment
ib_addObjectsFromCollection:
ib_aggregatedDescriptionAndFailureReasons
ib_dictionaryByRemovingObjectsForKeys:
ib_errorWithLocalizedDescription:
ib_errorWithLocalizedDescriptionFormat:
ib_errorWithUnderlyingError:recoverySuggestion:localizedDescriptionFormat:
ib_objectForKey:creatingIfNecessaryWithBlock:
ib_setByIntersectingSet:
ib_setBySubtractingSet:
identifier
incrementBusy
init
initWith:
initWithExecutionContext:launchContext:proxyDelegate:terminationHandler:error:
initWithSimDevice:
initialize
initializeApplicationDirectoryName:
instanceMethodForSelector:
instancesRespondToSelector:
integerForKey:
integerValue
isAbsolutePath
isAvailableWithError:
isEqual:
isEqualToString:
isKindOfClass:
isMainThread
isMemberOfClass:
lastPathComponent
launchAndConnectToToolWithLaunchContext:proxyDelegate:error:useMetal:
launchContext
launchJobsScannedForRuntimeRoot:
launchPath
launchToolInSimulator:dvtPlatform:platformVersion:error:useMetal:
length
lifeTime
localizedDescription
logAspectWithName:
logLevel
mainBundle
name
numberWithInt:
numberWithInteger:
objectForKey:
objectForKeyedSubscript:
orderedSet
osPlatform
osPlatformFromSimulator
pathExtension
pathString
pathToOverlayToolNamed:dvtPlatform:platformVersion:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
pipe
platformForIdentifier:
platformForName:
platformIdentifier
platformName
platformPath
populateDYLDFrameworkSearchPaths:launchContext:
populateEnvironment:launchContext:error:
populateLaunchJobForRuntimeRoot:requiredIdentifiers:disabledIdentifiers:
processFailureDescription
processIdentifier
processInfo
propertyListDictionary
proxyDelegate
realityToolForDVPlatform:platformVersion:arguments:launchError:useMetal:
registerDefaults:
registerNotificationHandlerOnQueue:handler:
removeItemAtURL:error:
removeObjectAtIndex:
removeObjectForKey:
replaceSimDeviceInstanceMethodsIfNeeded
requestedJobsFromRTEnableSimulatorJobs
resetLifeTime
respondsToSelector:
resultWithFailure
resultWithNSError:
resultWithSuccess
retain
retainCount
root
runRealityProducer:dvtPlatform:platformVersion:useMetal:
runUntilDate:
self
serviceContextForDeveloperDir:error:
setAdditionalEnvironment:
setDateFormat:
setDefaultDeveloperPathsClass:
setDelegate:
setError:
setExitCode:
setExitStatus:
setIbSpawningIBSimulatorToolProcess:
setIsAlive:
setObject:forKey:
setProcessExitType:
setProcessFailureDescription:
setProcessIdentifier:
setShouldRaiseOnFailures:
setSignalNumber:
setSuccess:
setupToolExitDispatchSource
shouldRaiseOnFailures
shouldUseDefaultRealityCompilerForPlatform
shutdown
shutdownAndForceToolProxyKill
signalNumber
simulatorPlatform
simulatorPlatformFromOS
spawnWithPath:options:terminationQueue:terminationHandler:pid:error:
standardUserDefaults
startTime
state
stringByAppendingFormat:
stringByAppendingString:
stringByDeletingLastPathComponent
stringByDeletingPathExtension
stringByExpandingTildeInPath
stringByReplacingOccurrencesOfString:withString:options:range:
stringForKey:
stringWithFormat:
stringWithString:
subpathsOfDirectoryAtPath:error:
superclass
supportedDeviceTypes
supportedRuntimes
supportsDeviceType:
temporaryDirectory
terminationHandler
timeInfo
timeSinceLastIdleOrBusy
toolName
unsignedIntegerValue
valueForKey:
zone
B16@0:8
@16@0:8
@24@0:8@16
@20@0:8B16
v20@0:8B16
v24@0:8@16
v16@0:8
@"NSError"
@40@0:8@16@24@32
@52@0:8@16@24@32^@40B48
@44@0:8@16@24@32B40
B64@0:8@16@24@32@?40^i48^@56
v40@0:8@16@24@32
B32@0:8@16^@24
v32@0:8@16@24
B40@0:8@16@24^@32
@32@0:8@16^@24
@52@0:8i16@20@28@36^@44
@44@0:8@16@24^@32B40
d16@0:8
@"NSObject<OS_dispatch_queue>"
@"NSDictionary"
@"SimDevice"
{mach_timebase_info="numer"I"denom"I}
@48@0:8@16@24@32@40
q16@0:8
v24@0:8q16
@"NSString"
@"NSArray"
@"NSNumber"
v32@0:8@16^@24
@56@0:8@16@24@32@?40^@48
@?16@0:8
@"NSPipe"
@"NSObject<OS_dispatch_source>"
@"RTSimulatorToolExecutionContext"
@"RTSimulatorToolLaunchContext"
@"NSObject<RTSimulatorToolProxyDelegate>"
realitytool Path = '%@'
Spawning realitytool on device %@
Spawning %sstandalone (%s metal)
_pXpG
So7NSErrorCSg
$sSY
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
yypG
So9OS_os_logC
ySSypG
SS_ypt
SaySSG
ySSG
SS9directory_t
ySSG
ySSG
Sgz_Xx
_GSg
$ss12CaseIterableP
So13NSFileManagerC
So8NSObjectC
_AAt
ySnySiGG
ySay
GADGGG
ySay
ySay
_pGIegn_
GIeggg_
SS4path_SS17expectedExtensiont
SS4path_t
SSSg
qd__
$s14ArgumentParser13ParsedWrapperP
Sayqd__GSg
SSqd__
_pIeggrzo_
Sayqd__G
ypSg
_pIeggrzo_
qd__XMT
$s14ArgumentParser013ExpressibleByA0P
$s14ArgumentParser22DecodableParsedWrapperP
5Value
ySaySSGG
_pXpG
SaySSGSg
_Sit
_pXpGADG
_ypt
SaySsG
SaySiG
$s14ArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
_SitG
SayypG
yypG
ySsG
ySaySSG_SStG
SaySSG_SSt
ySiG
ySaySiGG
_pXpG
_pXpGG
_pXp_AA_pXpt
SayxG
_pXpSg
ySSG
$s14ArgumentParser0A18HelpOptionProviderP
ztKc
SgSS
ztKc
ztKc
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
SaySSG10extensions_t
SaySSGAAc
yxGSgXw
yxGG
yyXlG
_pXpGACG
_pXpGACSgIegnr_
_pXp
_SSt
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
_pSg
_pXmTSg
ySbG
SbSg
S2SSgIeggr_
$s14ArgumentParser15ParsableCommandP
_SStG
_SSt
ySi_
$s14ArgumentParser17ParsableArgumentsP
$s14ArgumentParser0A11SetProviderP
SSSg5label_yp5valuet
_pSg
SSypSgIeggr_
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
Sbz_Xx
ySSSgG
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
ySay
$sST
_SStSg
SSxSgIeggr_
xXMT
rawValue
RawValue
ArrayLiteralElement
Element
note
warning
error
logger
osLogType
RawValue
failedToLoadFile
failedToDecodeData
failedToEncodeData
failedToConvertDataToString
failedToWriteFile
failedGettingSubpathsOf
failedReadingFile
_outputFolder
_platform
_deploymentTarget
_useMetal
_inputFolder
_outputSchema
_moduleWithDependencies
_outputReality
_schemaFile
_derivedData
_rkAssetsFolder
true
false
auto
message
outputReality
schemaFile
derivedData
platform
deploymentTarget
useMetal
rkAssetsFolder
outputSchema
moduleWithDependencies
outputFolder
inputFolder
AllCases
RawValue
originalRKAssetsURL
originalRKAssetSubpaths
fileManager
fmDelegate
realitySymbolCache
userCodeRegistry
subscriptions
derivedDataRootURL
schemaURL
unableToCopy
unableToDeleteOldFiles
invalidURLComponent
sourceCodeIncompatibility
noDerivedDataRootURLProvided
noSchemaURLProvided
failedReadingSchemaFile
noSymbolCache
noUserCodeRegistry
nothingToDo
inputFileBadExtension
rkAssetsIsNotDirectory
outputFolderIsNotDirectory
cannotGetRkassetsContents
RawValue
AllCases
rawValue
Value
_parsedValue
_hiddenFromHelp
remaining
unconditionalRemaining
value
definition
_subcommands
commandStack
subcommands
_elements
ArrayLiteralElement
argumentIndex
defaultValue
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
commandName
_superCommandName
abstract
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
RawValue
message
rawValue
helpRequest
nullary
unary
named
positional
default
kind
help
completion
parsingStrategy
update
initial
options
discussion
defaultValue
keys
allValues
isComposite
nextAsValue
scanningForValue
unconditional
upToNextOption
allRemainingInput
rawValue
ArrayLiteralElement
Element
RawValue
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
rawValue
RawValue
ArrayLiteralElement
elements
customLong
customShort
long
short
kind
list
file
shellCommand
custom
default
directory
Value
_parsedValue
_hiddenFromHelp
next
unconditional
scanningForValue
singleValue
unconditionalSingleValue
upToNextOption
remaining
element
parent
children
recursiveSubcommand
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
help
validation
other
commandStack
parserError
_generateCompletionScript
generateCompletionScript
Value
_parsedValue
_hiddenFromHelp
_options
options
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
helpRequested
versionRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
Value
_parsedValue
_hiddenFromHelp
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
positionalArguments
subcommands
options
components
title
content
long
short
longWithSingleDash
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
shouldDisplay
Element
Iterator
content
namePositions
usda
usdc
usdz
rkassets
xros
xrsimulator
macosx
bash
fish
