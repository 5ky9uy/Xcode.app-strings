git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]
'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
The following paths are ignored by one of your .gitignore files:
You've added another git repository inside your current repository.
Clones of the outer repository will not contain the contents of
the embedded repository and will not know how to obtain it.
If you meant to add a submodule, use:
git submodule add <url> %s
If you added this path by mistake, you can remove it from the
index with:
git rm --cached %s
See "git help submodule" for more information.
You need to give me at least one %s and %s revision.
You can use "git bisect %s" and "git bisect %s" for that.
bad|new
good|old
You need to start by "git bisect start".
You then need to give me at least one %s and %s revision.
You can use "git bisect %s" and "git bisect %s" for that.
git check-ref-format [--normalize] [<options>] <refname>
   or: git check-ref-format --branch <branchname-shorthand>
Clone succeeded, but checkout failed.
You can inspect what was checked out with 'git status'
and retry with 'git restore --source=HEAD :/'
You asked to amend the most recent commit, but doing so would make
it empty. You can repeat your command with --allow-empty, or you can
remove the commit entirely with "git reset HEAD^".
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:
    git commit --allow-empty
Otherwise, please use 'git cherry-pick --skip'
and then use:
    git cherry-pick --continue
to resume cherry-picking the remaining commits.
If you wish to skip this commit, use:
    git cherry-pick --skip
Otherwise, please use 'git rebase --skip'
The permissions on your socket directory are too loose; other
users may be able to read your cached credentials. Consider running:
chmod 0700 %s
git credential [fill|approve|reject]
git diff-files [-q] [-0 | -1 | -2 | -3 | -c | --cc] [<common-diff-options>] [<path>...]
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
git diff-index [-m] [--cached] [<common-diff-options>] <tree-ish> [<path>...]
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
git diff-tree [--stdin] [-m] [-c | --cc] [-s] [-v] [--pretty] [-t] [-r] [--root] [<common-diff-options>] <tree-ish> [<tree-ish>] [<path>...]
  -r            diff recursively
  -c            show combined diff for merge commits
  --cc          show combined diff for merge commits removing uninteresting hunks
  --combined-all-paths
                show name of file in all parents for combined diffs
  --root        include the initial commit as diff against /dev/null
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
git diff [<options>] [<commit>] [--] [<path>...]
   or: git diff [<options>] --cached [<commit>] [--] [<path>...]
   or: git diff [<options>] <commit> [--merge-base] [<commit>...] <commit> [--] [<path>...]
   or: git diff [<options>] <commit>...<commit>] [--] [<path>...]
   or: git diff [<options>] <blob> <blob>]
   or: git diff [<options>] --no-index [--] <path> <path>]
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
?git fast-import [--date-format=<f>] [--max-pack-size=<n>] [--big-file-threshold=<n>] [--depth=<n>] [--active-branches=<n>] [--export-marks=<marks.file>]
git fetch-pack [--all] [--stdin] [--quiet | -q] [--keep | -k] [--thin] [--include-tag] [--upload-pack=<git-upload-pack>] [--depth=<n>] [--no-progress] [--diag-url] [-v] [<host>:]<directory> [<refs>...]
Fetch normally indicates which branches had a forced update,
but that check has been disabled. To re-enable, use '--show-forced-updates'
flag or run 'git config fetch.showForcedUpdates true'.
It took %.2f seconds to check forced updates. You can use
'--no-show-forced-updates' or run 'git config fetch.showForcedUpdates false'
 to avoid this check.
git maintenance <subcommand> [<options>]
launchctl
git get-tar-commit-id
git index-pack [-v] [-o <index-file>] [--keep | --keep=<msg>] [--[no-]rev-index] [--verify] [--strict] (<pack-file> | --stdin [--fix-thin] [<pack-file>])
git mailsplit [-d<prec>] [-f<n>] [-b] [--keep-cr] -o<directory> [(<mbox>|<Maildir>)...]
git merge-ours <base>... -- HEAD <remote>...
git %s <base>... -- <head> <remote> ...
git merge-tree <base-tree> <branch1> <branch2>
GIT_MERGE_AUTOEDIT
Please enter a commit message to explain why this merge is necessary,
especially if it merges an updated upstream into a topic branch.
An empty message aborts the commit.
Lines starting with '%c' will be ignored, and an empty message aborts
the commit.
Write/edit the notes for the following object:
disabling bitmap writing, as some objects are not being packed
disabling bitmap writing, packs are split due to pack.packSizeLimit
git pack-redundant [--verbose] [--alt-odb] (--all | <filename.pack>...)
git patch-id [--stable | --unstable]
0123456789
You are not currently on a branch.
To push the history leading to the current (detached HEAD)
state now, use
    git push %s HEAD:<name-of-remote-branch>
Updates were rejected because the tip of your current branch is behind
its remote counterpart. Integrate the remote changes (e.g.
'git pull ...') before pushing again.
See the 'Note about fast-forwards' in 'git push --help' for details.
Updates were rejected because a pushed branch tip is behind its remote
counterpart. Check out this branch and integrate the remote changes
(e.g. 'git pull ...') before pushing again.
See the 'Note about fast-forwards' in 'git push --help' for details.
Updates were rejected because the tag already exists in the remote.
Updates were rejected because the remote contains work that you do
not have locally. This is usually caused by another repository pushing
to the same ref. You may want to first integrate the remote changes
(e.g., 'git pull ...') before pushing again.
See the 'Note about fast-forwards' in 'git push --help' for details.
You cannot update a remote ref that points at a non-commit object,
or update a remote ref to make it point at a non-commit object,
without using the '--force' option.
Updates were rejected because the tip of the remote-tracking
branch has been updated since the last checkout. You may want
to integrate those changes locally (e.g., 'git pull ...')
before forcing an update.
6666666666666666\\\\\\\\\\\\\\\\
0005
git reflog [ show | expire | delete | exists ]
git reflog expire [--expire=<time>] [--expire-unreachable=<time>] [--rewrite] [--updateref] [--stale-fix] [--dry-run | -n] [--verbose] [--all] <refs>...
git reflog delete [--rewrite] [--updateref] [--dry-run | -n] [--verbose] <refs>...
git reflog exists <ref>
git remote-ext <remote> <url>
git remote-fd <remote> <url>
--mirror is dangerous and deprecated; please
 use --mirror=fetch or --mirror=push instead
Incremental repacks are incompatible with bitmap indexes.  Use
--no-write-bitmap-index or disable the pack.writebitmaps configuration.
git rev-list [OPTION] <commit-id>... [ -- paths... ]
  limiting output:
    --max-count=<n>
    --max-age=<epoch>
    --min-age=<epoch>
    --sparse
    --no-merges
    --min-parents=<n>
    --no-min-parents
    --max-parents=<n>
    --no-max-parents
    --remove-empty
    --all
    --branches
    --tags
    --remotes
    --stdin
    --quiet
  ordering output:
    --topo-order
    --date-order
    --reverse
  formatting output:
    --parents
    --children
    --objects | --objects-edge
    --unpacked
    --header | --pretty
    --[no-]object-names
    --abbrev=<n> | --no-abbrev
    --abbrev-commit
    --left-right
    --count
  special purpose:
    --bisect
    --bisect-vars
    --bisect-all
git rev-parse --parseopt [<options>] -- [<args>...]
   or: git rev-parse --sq-quote [<arg>...]
   or: git rev-parse [<options>] [<arg>...]
Run "git rev-parse --parseopt -h" for more information on the first usage.
HEAD
-w[<width>[,<indent1>[,<indent2>]]]
refs/stash
An alternate computed from a superproject's alternate is invalid.
To allow Git to clone without an alternate in such a case, set
submodule.alternateErrorStrategy to 'info' or, equivalently, clone with
'--reference-if-able' instead of '--reference'.
You have created a nested tag. The object referred to by your new tag is
already a tag. If you meant to tag the object that it points to, use:
git tag -f %s %s^{}
Write a message for tag:
  %s
Lines starting with '%c' will be ignored.
Write a message for tag:
  %s
Lines starting with '%c' will be kept; you may remove them yourself if you want to.
git unpack-objects [-n] [-q] [-r] [--strict]
git upload-archive <repo>
git upload-archive: archiver died with error
git var (-l | <variable>)
j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
g - select a hunk to go to
/ - search for a hunk matching the given regex
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
Disable this message with "git config advice.%s false"
GIT binary patch
GIT binary patch
-Subproject commit 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
----------------------------------------------------------------------
(builtin)true
(builtin)false
(builtin)unknown
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~
After fixing the error cause you may try to fix up
the remote tracking information by invoking
"git branch --set-upstream-to=%s%s%s".
the requested upstream branch '%s' does not exist
If you are planning on basing your work on an upstream
branch that already exists at the remote, you may need to
run "git fetch" to retrieve it.
If you are planning to push out a new local branch that
will track its remote counterpart, you may want to use
"git push -u" to set the upstream config as you push.
Cannot setup tracking information; starting point '%s' is not a branch.
# v2 git bundle
# v3 git bundle
Warning: commit message did not conform to UTF-8.
You may want to amend it after fixing the message, or set the config
variable i18n.commitencoding to the encoding your project uses.
exceeded maximum include depth (%d) while including
from
This might be due to circular includes.
@@@@@@@@@AA@@A@@@@@@@@@@@@@@@@@@
     
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
NN'C
2waN
mdIP
gwz3
4}@4m
.(uw
OJqj
m"2T
FH9<
x6(T!
h`LK
JbEv
E&)
R;*&
(G]>
pENOXHn
0lY;
F==8
p;I}
=J-f
VYk[(
[x*w1
L<<'2
[<tR
yrhj
>/Vm-ikP I
xj4UWg
 h'$
zyT_
Lv<l
rq{1
A'eW|
3B-9
@------------
only found copies from modified paths due to too many files.
inexact rename detection was skipped due to too many files.
you may want to set your %s variable to at least %d and retry the command.
$@'%s' appears to be a git command, but we were not
able to execute it. Maybe git-%s is broken?
From e6807f3efca28b30decfecb1732a56c7db1137ee Mon Sep 17 00:00:00 2001
utf-8
A"\Si
BITM
+,-./:=@_^
abtnvfr
cache entry has null sha1: %s
You can fix this with 'git rebase --edit-todo' and then run 'git rebase --continue'.
Or you can abort the rebase with 'git rebase --abort'.
refname
Using '%s' as the name for the initial branch. This default branch name
is subject to change. To configure the initial branch name to use in all
of your new repositories, which will suppress this warning, call:
git config --global init.defaultBranch <name>
Names commonly chosen instead of 'master' are 'main', 'trunk' and
'development'. The just-created branch can be renamed via this command:
git branch -m <name>
# pack-refs with: peeled fully-peeled sorted 
Signed-off-by: 
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:
    git config --global user.name "Your Name"
    git config --global user.email you@example.com
After doing this, you may fix the identity used for this commit with:
    git commit --amend --reset-author
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:
    git config --global --edit
After doing this, you may fix the identity used for this commit with:
    git commit --amend --reset-author
you have staged changes in your working tree
If these changes are meant to be squashed into the previous commit, run:
  git commit --amend %s
If they are meant to go into a new commit, run:
  git commit %s
In both cases, once you're done, continue with:
  git rebase --continue
Could not execute the todo command
    %.*s
It has been rescheduled; To edit the command before continuing, please
edit the todo list first:
    git rebase --edit-todo
    git rebase --continue
(cherry picked from commit 
This is a combination of %d commits.
The 1st commit message will be skipped:
This is the 1st commit message:
The commit message #%d will be skipped:
This is the commit message #%d:
  %m %s
A          
0005
UTF-8
2.32.0 (Apple Git-132)
XXXXXX
------------------------ >8 ------------------------
Success
No match
Invalid regular expression
Invalid collation character
Invalid character class name
Trailing backslash
Invalid back reference
Unmatched [ or [^
Unmatched ( or \(
Unmatched \{
Invalid content of \{\}
Invalid range end
Memory exhausted
Invalid preceding regular expression
Premature end of regular expression
Regular expression too big
Unmatched ) or \)
git-
git.c
prefix '%s' must start with 'git-'
git-help
cannot handle %s as a builtin
usage: %s
expansion of alias '%s' failed; '%s' is not a git command
failed to run command '%s': %s
GIT_PAGER
annotate
archive
bisect--helper
blame
branch
bugreport
bundle
cat-file
check-attr
check-ignore
check-mailmap
check-ref-format
checkout
checkout--worker
checkout-index
cherry
cherry-pick
clean
clone
column
commit
commit-graph
commit-tree
config
count-objects
credential
credential-cache
credential-cache--daemon
credential-store
describe
diff
diff-files
diff-index
diff-tree
difftool
env--helper
fast-export
fast-import
fetch
fetch-pack
fmt-merge-msg
for-each-ref
for-each-repo
format-patch
fsck
fsck-objects
get-tar-commit-id
grep
hash-object
help
index-pack
init
init-db
interpret-trailers
ls-files
ls-remote
ls-tree
mailinfo
mailsplit
maintenance
merge
merge-base
merge-file
merge-index
merge-ours
merge-recursive
merge-recursive-ours
merge-recursive-theirs
merge-subtree
merge-tree
mktag
mktree
multi-pack-index
name-rev
notes
pack-redundant
pack-refs
patch-id
pickaxe
prune
prune-packed
pull
push
range-diff
read-tree
rebase
rebase--interactive
receive-pack
reflog
remote
remote-ext
remote-fd
repack
replace
rerere
reset
restore
rev-list
rev-parse
revert
send-pack
shortlog
show
show-branch
show-index
show-ref
sparse-checkout
stage
stash
status
stripspace
submodule--helper
switch
symbolic-ref
unpack-file
unpack-objects
update-index
update-ref
update-server-info
upload-archive
upload-archive--writer
upload-pack
verify-commit
verify-pack
verify-tag
version
whatchanged
worktree
write-tree
--help
--exclude-guides
%s doesn't support --super-prefix
trace: built-in: git
write failure on standard output
unknown write failure on standard output
close failed on standard output
--version
--exec-path
_query_
--html-path
share/doc/git-doc
--man-path
share/man
--info-path
share/info
--paginate
--no-pager
--no-replace-objects
GIT_NO_REPLACE_OBJECTS
--git-dir
no directory given for --git-dir
GIT_DIR
--git-dir=
--namespace
no namespace given for --namespace
GIT_NAMESPACE
--namespace=
--work-tree
no directory given for --work-tree
GIT_WORK_TREE
--work-tree=
--super-prefix
no prefix given for --super-prefix
GIT_INTERNAL_SUPER_PREFIX
--super-prefix=
--bare
GIT_IMPLICIT_WORK_TREE
-c expects a configuration string
--config-env
no config key given for --config-env
--config-env=
--literal-pathspecs
GIT_LITERAL_PATHSPECS
--no-literal-pathspecs
--glob-pathspecs
GIT_GLOB_PATHSPECS
--noglob-pathspecs
GIT_NOGLOB_PATHSPECS
--icase-pathspecs
GIT_ICASE_PATHSPECS
--no-optional-locks
GIT_OPTIONAL_LOCKS
--shallow-file
no directory given for -C
cannot change to '%s'
--list-cmds=
parseopt
unknown option: %s
builtins
main
others
nohelpers
alias
list-
unsupported command listing type '%s'
_run_git_alias_
trace: exec:
git_alias
could not execute builtin %s
  %s
 <==
 ==>
alias loop detected: expansion of '%s' does not terminate:%s
git-%s
dashed
_run_dashed_
'%s' is aliased to '%s'
shell_alias
_run_shell_alias_
while expanding alias '%s': '%s'
bad alias.%s string: %s
alias '%s' changes environment variables.
You can use '!git' in the alias to do this
empty alias for %s
recursive alias: %s
trace: alias expansion: %s =>
GIT_TEST_ADD_I_USE_BUILTIN
add.interactive.usebuiltin
feature.experimental
--patch
--patch=stash
--patch=reset
--patch=checkout
--patch=worktree
'%s' not supported
add--interactive
--dry-run is incompatible with --interactive/--patch
--pathspec-from-file is incompatible with --interactive/--patch
builtin/add.c
--pathspec-from-file is incompatible with --edit
-A and -u are mutually incompatible
Option --ignore-missing can only be used together with --dry-run
--chmod param '%s' must be either -x or +x
--pathspec-from-file is incompatible with pathspec arguments
--pathspec-file-nul requires --pathspec-from-file
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?
Turn this message off by running
"git config advice.addEmptyPathspec false"
index file corrupt
BUG:%s:%d: unsupported magic %x
pathspec '%s' did not match any files
Unable to write new index file
unexpected diff status %c
updating files failed
remove '%s'
add.ignoreerrors
add.ignore-errors
dry-run
dry run
interactive
interactive picking
patch
select hunks interactively
edit
edit current diff and apply
force
allow adding otherwise ignored files
update tracked files
renormalize
renormalize EOL of tracked files (implies -u)
intent-to-add
record only the fact that the path will be added later
add changes from all tracked and untracked files
ignore-removal
ignore paths removed in the working tree (same as --no-all)
refresh
don't add, only refresh the index
ignore-errors
just skip files which cannot be added because of errors
ignore-missing
check if - even missing - files are ignored in dry run
chmod
(+|-)x
override the executable bit of the listed files
warn-embedded-repo
warn when adding an embedded repository
legacy-stash-p
backend for `git stash -p`
pathspec-from-file
file
read pathspec from file
pathspec-file-nul
with --pathspec-from-file, pathspec elements are separated with NUL character
git add [<options>] [--] <pathspec>...
ADD_EDIT.patch
--recount
--cached
Could not read the index
Could not open '%s' for writing.
Could not write patch
editing patch failed
Could not stat '%s'
Empty patch. Aborted.
Could not apply '%s'
Unstaged changes after refreshing the index:
Use -f if you really want to add them.
Turn this message off by running
"git config advice.addIgnoredFile false"
adding files failed
adding embedded git repository: %s
cannot chmod %cx '%s'
git am [<options>] [(<mbox> | <Maildir>)...]
git am [<options>] (--continue | --skip | --abort)
run interactively
historical option -- no-op
3way
allow fall back on 3way merging if needed
quiet
be quiet
signoff
add a Signed-off-by trailer to the commit message
utf8
recode into utf8 (default)
keep
pass -k flag to git-mailinfo
keep-non-patch
pass -b flag to git-mailinfo
message-id
pass -m flag to git-mailinfo
keep-cr
pass --keep-cr flag to git-mailsplit for mbox format
no-keep-cr
do not pass --keep-cr flag to git-mailsplit independent of am.keepcr
scissors
strip everything before a scissors line
quoted-cr
action
pass it through git-mailinfo
pass it through git-apply
ignore-space-change
ignore-whitespace
directory
root
include
patch-format
format the patch(es) are in
reject
resolvemsg
override error message when patch failure occurs
continue
continue applying patches after resolving a conflict
resolved
synonyms for --continue
skip
skip the current patch
abort
restore the original branch and abort the patching operation
quit
abort the patching operation but keep HEAD where it is
show-current-patch
(diff|raw)
show the patch being applied
committer-date-is-author-date
lie about committer date
ignore-date
use current timestamp for author date
rerere-autoupdate
update the index with reused conflict resolution if possible
gpg-sign
key-id
GPG-sign commits
rebasing
(internal use for git-rebase)
The -b/--binary option has been a no-op for long time, and
it will be removed. Please do not use it anymore.
failed to read the index
previous rebase directory %s still exists but mbox given.
Stray %s directory found.
Use "git am --abort" to remove it.
Resolve operation not in progress, we are not resuming.
%s/%s
interactive mode requires patches on the command line
builtin/am.c
invalid resume value
bad action '%s' for '%s'
--quoted-cr
mbox
stgit
stgit-series
mboxrd
Invalid value for --patch-format: %s
Invalid value for --show-current-patch: %s
--show-current-patch=%s is incompatible with --show-current-patch=%s
rebase-apply
am.threeway
am.messageid
commit.gpgsign
last
next
state file 'next' does not exist
state file 'last' does not exist
could not parse author script
original-commit
could not parse %s
threeway
sign
messageid
apply-opt
could not read '%s'
author-script
read_am_author_script
am.c
!state->author_name
!state->author_email
!state->author_date
read_commit_msg
!state->msg
final-commit
Patch format detection failed.
failed to create directory '%s'
REBASE_HEAD
Failed to split patches.
invalid value for state->keep
invalid value for state->scissors
nowarn
invalid value for state->quoted_cr
applying
HEAD
abort-safety
ORIG_HEAD
From 
From: 
# This series applies on GIT commit
# HG changeset patch
From:
Author:
Date:
^[!-9;-~]+:
fseek failed
invalid pattern: %s
am.keepcr
invalid patch_format
-d%d
-o%s
--keep-cr
--mboxrd
%s/%0*d
could not parse patch '%s'
From:%s
From
Date
Subject: %s
Only one StGIT patch series can be applied at once
# User 
From: %s
# Date 
invalid timestamp
invalid Date line
invalid timezone offset
Date: %s
dirtyindex
unable to write index file
Dirty index: cannot apply patches (dirty: %s)
Applying: %.*s
patch-merge-index
No changes -- Patch already applied.
Patch failed at %s %.*s
Use 'git am --show-current-patch=diff' to see the failed patch
rewritten
am_run
state->rebasing
%0*d
cannot resume: %s does not exist.
author
missing author line in commit %s
invalid ident line: %.*s
get_commit_info
unable to parse commit %s
info
could not parse patch
Patch sent with format=flowed; space at the end of lines might be lost.
Subject: 
Author: 
Email: 
Date: 
Mail System Internal Data
Patch is empty.
parse_mail
GIT_AUTHOR_NAME=
GIT_AUTHOR_EMAIL=
GIT_AUTHOR_DATE=
do_interactive
state->msg
Commit Body is:
--------------------------
Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all: 
unable to read from stdin; aborting
run_applypatch_msg_hook
applypatch-msg
'%s' was deleted by the applypatch-msg hook
init_apply_state() failed
unknown option passed through to git apply
check_apply_state() failed
could not build fake ancestor
Repository lacks necessary blobs to fall back on 3-way merge.
Using index info to reconstruct a base tree...
Did you hand edit your patch?
It does not apply to blobs recorded in its index.
could not write tree
Falling back to patching base and 3-way merge...
Failed to merge in the changes.
--build-fake-ancestor=%s
git am -i
git am
When you have resolved this problem, run "%s --continue".
If you prefer to skip this patch, run "%s --skip" instead.
To restore the original branch and stop patching, run "%s --abort".
git write-tree failed to write a tree
applying to an empty history
GIT_COMMITTER_NAME
GIT_COMMITTER_EMAIL
failed to write commit object
GIT_REFLOG_ACTION
%s: %.*s
do_commit
!is_null_oid(&state->orig_commit)
post-applypatch
Malformed input line: '%s'.
Notes added by 'git rebase'
Failed to copy notes from '%s' to '%s'
post-rewrite
No changes - did you forget to use 'git add'?
If there is nothing left to stage, chances are that something else
already introduced the same changes; you might want to skip this patch.
You still have unmerged paths in your index.
You should 'git add' each file with resolved conflicts to mark them as such.
You might run `git rm` on a file to accept "deleted by them" for it.
failed to clean index
am_skip
Could not parse object '%s'.
unable to write new index file
am --abort
You seem to have moved HEAD since the last 'am' failure.
Not rewinding to ORIG_HEAD
invalid mode for --show-current-patch
failed to read '%s'
builtin/apply.c
git apply [<options>] [<patch>...]
git-upload-archive
output
write the archive to this file
repo
retrieve the archive from remote repository <repo>
exec
command
path to the remote git-upload-archive command
could not create archive file '%s'
could not redirect output
git archive: Remote with no URL
argument --format=%s
argument %s
git archive: expected ACK/NAK, got a flush packet
NACK 
git archive: NACK %s
git archive: protocol error
git archive: expected a flush
bisect-reset
reset the bisection state
bisect-next-check
check whether bad or good terms exist
bisect-terms
print out the bisect terms
bisect-start
start the bisect session
bisect-next
find the next bisection commit
bisect-state
mark the state of ref (or refs)
bisect-log
list the bisection steps so far
bisect-replay
replay the bisection process from the given file
bisect-skip
skip some commits for checkout
no-log
no log for BISECT_WRITE
--bisect-reset requires either no argument or a commit
--bisect-next-check requires 2 or 3 arguments
--bisect-terms requires 0 or 1 argument
good
--bisect-next requires 0 arguments
--bisect-log requires 0 arguments
no logfile given
builtin/bisect--helper.c
unknown subcommand %d
git bisect--helper --bisect-reset [<commit>]
git bisect--helper --bisect-next-check <good_term> <bad_term> [<term>]
git bisect--helper --bisect-terms [--term-good | --term-old | --term-bad | --term-new]
git bisect--helper --bisect-start [--term-{new,bad}=<term> --term-{old,good}=<term>] [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] [<paths>...]
git bisect--helper --bisect-next
git bisect--helper --bisect-state (bad|new) [<rev>]
git bisect--helper --bisect-state (good|old) [<rev>...]
git bisect--helper --bisect-replay <filename>
git bisect--helper --bisect-skip [(<rev>|<range>)...]
'%s' is not a valid commit
BISECT_HEAD
could not check out original HEAD '%s'. Try 'git bisect reset <commit>'.
BISECT_START
refs/bisect/%s
%s-*
refs/bisect/
bisecting only with a %s commit
Are you sure [Y/n]? 
no terms defined
Your current terms are %s for the old state
and %s for the new state.
--term-good
--term-old
--term-bad
--term-new
invalid argument %s for 'git bisect terms'.
Supported options are: --term-good|--term-old and --term-bad|--term-new.
--no-checkout
--first-parent
'' is not a valid term
--term-good=
--term-old=
--term-bad=
--term-new=
unrecognized option: '%s'
%s^{commit}
'%s' does not appear to be a valid revision
bad HEAD - I need a HEAD
checking out '%s' failed. Try 'git bisect start <valid-branch>'.
won't bisect on cg-seek'ed tree
bad HEAD - strange symbolic ref
invalid ref: '%s'
head-name
BISECT_FIRST_PARENT
BISECT_NAMES
refs/bisect/%s-%s
Bad bisect_write argument: %s
couldn't get the oid of the rev '%s'
couldn't open the file '%s'
git bisect %s %s
BISECT_LOG
# %s: [%s] %s
please use two different terms
'%s' is not a valid term
start
visualize
view
replay
terms
can't use the builtin command '%s' as a term
can't change the meaning of the term '%s'
write-in-file does not support '%s' mode
cannot open file '%s' in mode '%s'
could not write to file '%s'
BISECT_TERMS
git bisect start
You need to start by "git bisect start"
Do you want me to do it for you [Y/n]? 
# first %s commit: [%s] %s
could not open '%s' for appending
# only skipped commits left to test
# possible first %s commit: [%s] %s
revision walk setup failed
Please call `--bisect-state` with at least one argument
'git bisect %s' can take only one argument.
Bad rev input: %s
Bad rev input (not a commit): %s
Invalid command: you're currently in a %s/%s bisect
BISECT_EXPECTED_REV
BISECT_ANCESTORS_OK
cannot read file '%s' for replaying
git bisect
git-bisect
'%s'?? what are you talking about?
We are not bisecting.
incremental
show blame entries as we find them, incrementally
do not show object names of boundary commits (Default: off)
do not treat root commits as boundaries (Default: off)
show-stats
show work cost statistics
progress
force progress reporting
score-debug
show output score for blame entries
show-name
show original filename (Default: auto)
show-number
show original linenumber (Default: off)
porcelain
show in a format designed for machine consumption
line-porcelain
show porcelain format with per-line commit information
use the same output mode as git-annotate (Default: off)
show raw timestamp (Default: off)
show long commit SHA1 (Default: off)
suppress author name and timestamp (Default: off)
show-email
show author email instead of name (Default: off)
ignore whitespace differences
ignore-rev
ignore <rev> when blaming
ignore-revs-file
ignore revisions from <file>
color-lines
color redundant metadata from previous line differently
color-by-age
color lines by age
minimal
spend extra cycles to find better match
use revisions from <file> instead of calling git-rev-list
contents
use <file>'s contents as the final image
score
find line copies within and across files
find line movements within and across files
range
process only line range <start>,<end> or function :<funcname>
abbrev
use <n> digits to display object names
builtin/blame.c
--reverse
--children
--progress can't be used with --incremental or porcelain formats
reading graft file '%s' failed
4 years, 11 months ago
missing <path> to blame
no such ref: HEAD
file %s has only %lu line
file %s has only %lu lines
Blaming lines
[36m
num read blob: %d
num get patch: %d
num commits: %d
blue,12 month ago,white,1 month ago,red
expecting a color: %s
must end with a color
blame.showroot
blame.blankboundary
blame.showemail
blame.date
blame.ignorerevsfile
blame.markunblamablelines
blame.markignoredlines
color.blame.repeatedlines
invalid color '%s' in color.blame.repeatedLines
color.blame.highlightrecent
blame.coloring
repeatedLines
highlightRecent
invalid value for blame.coloring
<rev-opts> are documented in git-rev-list(1)
cannot find revision %s to ignore
Baa %d!
%s %d %d %d
stdout
author %s
author-mail %s
author-time %ju
author-tz %s
committer %s
committer-mail %s
committer-time %ju
committer-tz %s
summary %s
author 
committer 
(%s)
(unknown)
<%.*s>
previous %s 
filename 
%s %d %d
(%10s
%10s
 %*d %02d
 %-*.*s
 %*d
 (%s%*s %10s
 %*d) 
%ju %s
boundary
Generic options
show hash and subject, give twice for upstream branch
suppress informational messages
track
set up tracking mode (see git-pull(1))
set-upstream
do not use
set-upstream-to
upstream
change the upstream info
unset-upstream
unset the upstream info
color
when
use colored output
always
remotes
act on remote-tracking branches
contains
print only branches that contain the commit
no-contains
print only branches that don't contain the commit
with
without
Specific git-branch actions:
list both remote-tracking and local branches
delete fully merged branch
delete branch (even if not merged)
move
move/rename a branch and its reflog
move/rename a branch, even if target exists
copy a branch and its reflog
copy a branch, even if target exists
list
list branch names
show-current
show current branch name
create-reflog
create the branch's reflog
edit-description
edit the description for the branch
force creation, move/rename, deletion
merged
print only branches that are merged
no-merged
print only branches that are not merged
style
list branches in columns
sort
field name to sort on
points-at
object
print only branches of the object
ignore-case
sorting and filtering are case insensitive
format to use for the output
Failed to resolve HEAD as a valid ref.
HEAD not found below refs/heads!
--column and --verbose are incompatible
branch name required
Cannot give description to detached HEAD
cannot edit description of more than one branch
refs/heads/%s
No commit on branch '%s' yet.
No branch named '%s'.
too many branches for a copy operation
too many arguments for a rename operation
too many arguments to set new upstream
could not set upstream of HEAD to %s when it does not point to any branch.
no such branch '%s'
branch '%s' does not exist
too many arguments to unset upstream
could not unset upstream of HEAD when it does not point to any branch.
Branch '%s' has no upstream information
branch.%s.remote
branch.%s.merge
The -a, and -r, options to 'git branch' do not take a branch name.
Did you mean to use: -a|-r --list <pattern>?
the '--set-upstream' option is no longer supported. Please use '--track' or '--set-upstream-to' instead.
plain
local
current
%s.%s
git branch [<options>] [-r | -a] [--merged] [--no-merged]
git branch [<options>] [-l] [-f] <branch-name> [<start-point>]
git branch [<options>] [-r] (-d | -D) <branch-name>...
git branch [<options>] (-m | -M) [<old-branch>] <new-branch>
git branch [<options>] (-c | -C) [<old-branch>] <new-branch>
git branch [<options>] [-r | -a] [--points-at]
git branch [<options>] [-r | -a] [--format]
branch.sort
column.
color.branch
color.branch.
refs/remotes/%s
cannot use -a with -d
Couldn't look up commit object for HEAD
Cannot delete branch '%s' checked out at '%s'
remote-tracking branch '%s' not found.
branch '%s' not found.
broken
Deleted remote-tracking branch %s (was %s).
Deleted branch %s (was %s).
Couldn't look up commit object for '%s'
The branch '%s' is not fully merged.
If you are sure you want to delete it, run 'git branch -D %s'.
deleting branch '%s' that has been merged to
         '%s', but not yet merged to HEAD.
not deleting branch '%s' that is not yet merged to
         '%s', even though it is merged to HEAD.
branch.%s
Update of config-file failed
could not resolve HEAD
HEAD (%s) points outside of refs/heads/
remotes/
unable to parse format string
print_ref_list
branch.c
!filter->verbose && "--column and --verbose are incompatible"
refs/remotes/
%%(if)%%(HEAD)%%(then)* %s%%(else)%%(if)%%(worktreepath)%%(then)+ %s%%(else)  %s%%(end)%%(end)
  %s
%%(objectname:short)
%%(objectname)
%%(objectname:short=%d)
%%(align:%d,left)%%(refname:lstrip=2)%%(end)
 %s 
%%(if:notequals=*)%%(HEAD)%%(then)%%(if)%%(worktreepath)%%(then)(%s%%(worktreepath)%s) %%(end)%%(end)
%%(if)%%(upstream)%%(then)[%s%%(upstream:short)%s%%(if)%%(upstream:track)%%(then): %%(upstream:track,nobracket)%%(end)] %%(end)%%(contents:subject)
%%(if)%%(upstream:track)%%(then)%%(upstream:track) %%(end)%%(contents:subject)
%%(align:%d,left)%s%%(refname:lstrip=2)%%(end)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(else) %s %%(contents:subject)%%(end)
%%(refname:lstrip=2)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(end)
%s%%(refname:lstrip=2)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(end)
%%(if:notequals=refs/remotes)%%(refname:rstrip=-2)%%(then)%s%%(else)%s%%(end)
Please edit the description for the branch
  %s
Lines starting with '%c' will be stripped.
branch.%s.description
EDIT_DESCRIPTION
cannot copy the current branch while not on any.
cannot rename the current branch while not on any.
Invalid branch name: '%s'
builtin/branch.c
expected prefix missing for refs
Branch: copied %s to %s
Branch: renamed %s to %s
Branch rename failed
Branch copy failed
Created a copy of a misnamed branch '%s'
Renamed a misnamed branch '%s' away
Branch renamed to %s, but HEAD is not updated!
Branch is renamed, but update of config-file failed
Branch is copied, but update of config-file failed
Branch %s is being rebased at %s
Branch %s is being bisected at %s
%Y-%m-%d-%H%M
output-directory
specify a destination for the bugreport file
suffix
format
specify a strftime format suffix for the filename
git-bugreport-
.txt
could not create leading directories for '%s'
System Info
Enabled Hooks
couldn't create a new file at '%s'
unable to write to %s
Created new report at '%s'.
git bugreport [-o|--output-directory <file>] [-s|--suffix <format>]
Thank you for filling out a Git bug report!
Please answer the following questions to help us understand your issue.
What did you do before the bug happened? (Steps to reproduce your issue)
What did you expect to happen? (Expected behavior)
What happened instead? (Actual behavior)
What's different between what you expected and what actually happened?
Anything else you want to add:
Please review the rest of the bug report below.
You can delete any lines you don't wish to share.
[%s]
git version:
uname: 
uname() failed with error '%s' (%d)
%s %s %s %s
compiler info: 
libc info: 
SHELL
$SHELL (typically, interactive shell): %s
<unset>
clang: %s
13.1.6 (clang-1316.0.21.1)
no compiler information available
no libc information available
pre-applypatch
pre-commit
pre-merge-commit
prepare-commit-msg
commit-msg
post-commit
pre-rebase
post-checkout
post-merge
pre-push
pre-receive
update
post-receive
post-update
push-to-checkout
pre-auto-gc
sendemail-validate
fsmonitor-watchman
p4-pre-submit
post-index-change
not run from a git repository - no hooks to show
be verbose; must be placed before a subcommand
create
verify
list-heads
unbundle
Unknown subcommand: %s
git bundle create [<options>] <file> <git-rev-list args>
git bundle verify [<options>] <file>
git bundle list-heads <file> [<refname>...]
git bundle unbundle <file> [<refname>...]
do not show progress meter
show progress meter
all-progress
show progress meter during object writing phase
all-progress-implied
similar to --all-progress when progress meter is shown
specify bundle format version
--all-progress
--all-progress-implied
Need a repository to create a bundle.
do not show bundle details
%s is okay
Need a repository to unbundle.
<type> can be one of: blob, tree, commit, tag
show object type
show object size
exit with zero when there's no error
pretty-print object's content
textconv
for blob objects, run textconv on object's content
filters
for blob objects, run filters on object's content
use a specific path for --textconv/--filters
allow-unknown-type
allow -s and -t to work with broken/corrupt objects
buffer
buffer --batch output
batch
show info and content of objects fed from the standard input
batch-check
show info about objects fed from the standard input
follow-symlinks
follow in-tree symlinks (used with --batch or --batch-check)
batch-all-objects
show all objects with --batch or --batch-check
unordered
do not order --batch-all-objects output
--batch-all-objects cannot be combined with --textconv nor with --filters
--path=<path> needs --textconv or --filters
--path=<path> incompatible with --batch
git cat-file --allow-unknown-type: use with -s or -t
builtin/cat-file.c
only one batch option may be specified
git cat-file (-t [--allow-unknown-type] | -s [--allow-unknown-type] | -e | -p | <type> | --textconv | --filters) [--path=<path>] <object>
git cat-file (--batch[=<format>] | --batch-check[=<format>]) [--follow-symlinks] [--textconv | --filters]
%(objectname) %(objecttype) %(objectsize)
This repository uses promisor remotes. Some objects may not be loaded.
format element '%s' does not end in ')'
objectname
objecttype
objectsize
objectsize:disk
rest
deltabase
unknown format element: %.*s
%s missing
unable to write to stdout
print_object_or_die
cat-file.c
data->info.typep
missing path for '%s'
could not convert '%s' %s
invalid cmdmode: %c
object %s disappeared
object %s changed type!?
object %s changed size!?
cannot read object %s '%s'
unable to stream %s to stdout
%s ambiguous
dangling %ju
loop %ju
notdir %ju
unknown get_sha1_with_context result %d
symlink %ju
Not a valid object name %s
git cat-file: could not get object info
git cat-file --filters %s: <object> must be <sha1:path>
git cat-file --textconv %s: <object> must be <sha1:path>
Cannot read object %s
object 
%s not a valid tag
git cat-file: unknown option: %s
git cat-file %s: bad file
invalid cache
Attributes and --all both specified
No attribute specified
Can't specify files with --stdin
No file specified
%s: not a valid attribute name
attribute to stdout
report all attributes set on file
cached
use .gitattributes only from the index
stdin
read file names from stdin
terminate input and output records by a NUL character
git check-attr [-a | --all | <attr>...] [--] <pathname>...
git check-attr --stdin [-z] [-a | --all | <attr>...]
line is badly quoted
unset
unspecified
%s%c%s%c%s%c
: %s: %s
cannot specify pathnames with --stdin
-z only makes sense with --stdin
no path specified
--quiet is only valid with a single pathname
cannot have both --quiet and --verbose
--non-matching is only valid with --verbose
ignore to stdout
suppress progress reporting
non-matching
show non-matching input paths
no-index
ignore index when checking
git check-ignore [<options>] <pathname>...
git check-ignore [<options>] --stdin
check-ignore to stdout
no pathspec given.
:%d:%s%s%s
%s%c
%s%c%d%c%s%s%s%c%s%c
%c%c%c%s%c
no contacts specified
also read contacts from stdin
git check-mailmap [<options>] <contact>...
unable to parse contact: %s
%.*s 
<%.*s>
--branch
--normalize
--print
--allow-onelevel
--no-allow-onelevel
--refspec-pattern
'%s' is not a valid branch name
prefix
string
when creating files, prepend <string>
git checkout--worker [<options>]
builtin/checkout--worker.c
packet_read() returned negative value
checkout worker received too short item (got %dB, exp %dB)
checkout worker received corrupted item
check out all files in the index
force overwrite of existing files
no warning for existing files and files not in index
no-create
don't checkout new files
update stat information in the index file
read list of paths from the standard input
temp
write the content to temporary files
(1|2|3|all)
copy out the files from named stage
git checkout-index: don't mix '--all' and explicit filenames
git checkout-index: don't mix '--stdin' and explicit filenames
git checkout-index: don't mix '--all' and '--stdin'
builtin/checkout-index.c
stage should be between 1 and 3 or all
git checkout-index [<options>] [--] [<file>...]
git checkout-index: %s 
is not in the cache
does not exist at stage %d
is unmerged
create and checkout a new branch
create/reset and checkout a branch
create reflog for new branch
guess
second guess 'git checkout <no-such-branch>' (default)
overlay
use overlay mode (default)
create and switch to a new branch
force-create
create/reset and switch to a branch
second guess 'git switch <no-such-branch>'
discard-changes
throw away local modifications
source
<tree-ish>
which tree-ish to checkout from
staged
restore the index
restore the working tree (default)
ignore-unmerged
ignore unmerged entries
use overlay mode
--ignore-unmerged
recurse-submodules
control recursive updating of submodules
perform a 3-way merge with the new branch
conflict
conflict style (merge or diff3)
detach
detach HEAD at named commit
set upstream info for new branch
force checkout (throw away local modifications)
orphan
new-branch
new unparented branch
overwrite-ignore
update ignored files (default)
ignore-other-worktrees
do not check if another worktree is holding the given ref
ours
checkout our version for unmerged files
checkout their version for unmerged files
ignore-skip-worktree-bits
do not limit pathspecs to sparse entries only
builtin/checkout.c
make up your mind, you need to take _something_
merge.conflictstyle
--force
-%c, -%c and --orphan are mutually exclusive
-p and --overlay are mutually exclusive
--track needs a branch name
refs/
missing branch name; try -%c
could not resolve %s
reference is not a tree: %s
invalid path specification
'%s' is not a commit and a branch '%s' cannot be created from it
git checkout: --detach does not take a path argument '%s'
--pathspec-from-file is incompatible with --detach
--pathspec-from-file is incompatible with --patch
git checkout: --ours/--theirs, --force and --merge are incompatible when
checking out of the index.
you must specify path(s) to restore
diff.ignoresubmodules
checkout.guess
submodule.
only one reference expected
only one reference expected, %d given.
@{-1}
invalid reference: %s
'%s' could be both a local file and a tracking branch.
Please use -- (and optionally --no-guess) to disambiguate
If you meant to check out a remote tracking branch on, e.g. 'origin',
you can do so by fully qualifying the name with the --track option:
    git checkout --track origin/<name>
If you'd like to always have checkouts of an ambiguous <name> prefer
one remote, e.g. the 'origin' remote, consider setting
checkout.defaultRemote=origin in your config.
'%s' matched multiple (%d) remote tracking branches
'%s' cannot be used with updating paths
--track
--detach
'%s' cannot be used with %s
--merge
Cannot update paths and switch to branch '%s' at the same time.
neither '%s' or '%s' is specified
--staged
--worktree
'%s' must be used when '%s' is not specified
--source
'%s' or '%s' cannot be used with %s
--ours
--theirs
--conflict
either flag must have been set, worktree=%d, index=%d
path '%s' is unmerged
path '%s' does not have our version
path '%s' does not have their version
path '%s' does not have all necessary versions
Recreated %d merge conflict
Recreated %d merge conflicts
Updated %d path from %s
Updated %d paths from %s
Updated %d path from the index
Updated %d paths from the index
path '%s' does not have necessary versions
merge.renormalize
path '%s': cannot merge
Unable to add merge result for '%s'
make_cache_entry failed for path '%s'
'%s' cannot be used with switching branches
--[no]-overlay
--ours/--theirs
'%s' cannot be used with '%s'
--discard-changes
-b/-B/--orphan
--orphan
'%s' cannot take <start-point>
Cannot switch branch to a non-commit '%s'
missing branch or commit argument
refs/tags/
a branch is expected, got tag '%s'
a branch is expected, got remote branch '%s'
a branch is expected, got '%s'
a branch is expected, got commit '%s'
cannot switch branch while merging
Consider "git merge --quit" or "git worktree add".
cannot switch branch in the middle of an am session
Consider "git am --quit" or "git worktree add".
cannot switch branch while rebasing
Consider "git rebase --quit" or "git worktree add".
cannot switch branch while cherry-picking
Consider "git cherry-pick --quit" or "git worktree add".
cannot switch branch while reverting
Consider "git revert --quit" or "git worktree add".
you are switching branch while bisecting
unborn
You are on a branch yet to be born
checkout -b
Switched to a new branch '%s'
'switch --orphan' should never accept a commit as starting point
(empty)
you need to resolve your current index first
cannot continue with staged changes in the following files:
internal error in revision walk
Previous HEAD position was
 ... and %d more.
Warning: you are leaving %d commit behind, not connected to
any of your branches:
Warning: you are leaving %d commits behind, not connected to
any of your branches:
If you want to keep it by creating a new branch, this may be a good time
to do so with:
 git branch <new-branch-name> %s
If you want to keep them by creating a new branch, this may be a good time
to do so with:
 git branch <new-branch-name> %s
%s %s... %s
%s %s %s
Can not do reflog for '%s': %s
checkout: moving from %s to %s
(invalid)
HEAD is now at
unable to update HEAD
Reset branch '%s'
Already on '%s'
Switched to and reset branch '%s'
Switched to branch '%s'
git checkout [<options>] <branch>
git checkout [<options>] [<branch>] -- <file>...
git switch [<options>] [<branch>]
git restore [<options>] [--source=<branch>] <file>...
do not print names of files removed
interactive cleaning
remove whole directories
pattern
add <pattern> to ignore rules
remove ignored files, too
remove only ignored files
clean.requireForce set to true and neither -i, -n, nor -f given; refusing to clean
clean.requireForce defaults to true and neither -i, -n, nor -f given; refusing to clean
-x and -X cannot be used together
--exclude option
Cannot lstat '%s'
prompt
header
builtin/clean.c
color.interactive
color.interactive.
clean.requireforce
git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] <paths>...
filter by pattern
select by numbers
ask each
*** Commands ***
What now
Would remove the following item:
Would remove the following items:
No more files to clean, exiting.
Input ignore patterns>> 
manual exclude
WARNING: Cannot find items matched by: %s
Select items to delete
Remove %s [y/N]? 
clean               - start cleaning
filter by pattern   - exclude items from deletion
select by numbers   - select items to be deleted by numbers
ask each            - confirm each deletion (like "rm -i")
quit                - stop cleaning
help                - this screen
?                   - help for prompt selection
%s%s%s
%s%s%s%s
Bad type of menu_stuff when print menu
%s%2d: 
%s%2d: %s
Prompt help:
1          - select a numbered item
foo        - select item based on unique prefix
           - (empty) select nothing
Prompt help:
1          - select a single item
3-5        - select a range of items
2-3,6-9    - select multiple ranges
foo        - select item based on unique prefix
-...       - unselect specified items
*          - choose all items
           - (empty) finish selecting
Huh (%s)?
Bad type of menu_stuff when parse choice
Would skip repository %s
Skipping repository %s
could not lstat %s
Would remove %s
Removing %s
failed to remove %s
Bye.
Too many arguments.
You must specify a repository to clone.
--bare and --origin %s options are incompatible.
--bare and --separate-git-dir are incompatible.
repository '%s' does not exist
depth %s is not a positive number
destination path '%s' already exists and is not an empty directory.
repository path '%s' already exists and is not an empty directory.
clone: from %s
working tree '%s' already exists.
%s/.git
could not create leading directories of '%s'
could not create work tree dir '%s'
Cloning into bare repository '%s'...
Cloning into '%s'...
submodule.active=%s
clone --recursive is not compatible with both --reference and --reference-if-able
submodule.alternateLocation=superproject
submodule.alternateErrorStrategy=die
submodule.alternateErrorStrategy=info
origin
'%s' is not a valid remote name
core.bare
true
refs/remotes/%s/
remote.%s.url
remote.%s.tagOpt
--no-tags
+%s*:%s*
--depth is ignored in local clones; use file:// instead.
--shallow-since is ignored in local clones; use file:// instead.
--shallow-exclude is ignored in local clones; use file:// instead.
--filter is ignored in local clones; use file:// instead.
source repository is shallow, reject to clone.
source repository is shallow, ignoring --local
--local is ignored
rejectshallow
depth
deepen-since
deepen-not
followtags
uploadpack
from-promisor
Remote branch %s not found in upstream %s
You appear to have cloned an empty repository.
clone.defaultremotename
clone.rejectshallow
be more verbose
be more quiet
reject-shallow
don't clone shallow repository
no-checkout
don't create a checkout
bare
create a bare repository
naked
mirror
create a mirror repository (implies bare)
to clone from a local repository
no-hardlinks
don't use local hardlinks, always copy
shared
setup as shared repository
pathspec
initialize submodules in the clone
recursive
jobs
number of submodules cloned in parallel
template
template-directory
directory from which templates will be used
reference
reference repository
reference-if-able
dissociate
use --reference only while cloning
name
use <name> instead of 'origin' to track upstream
checkout <branch> instead of the remote's HEAD
path to git-upload-pack on the remote
create a shallow clone of that depth
shallow-since
time
create a shallow clone since a specific time
shallow-exclude
revision
deepen history of shallow clone, excluding rev
single-branch
clone only one branch, HEAD or --branch
no-tags
don't clone any tags, and make later fetches not to follow them
shallow-submodules
any cloned submodules will be shallow
separate-git-dir
gitdir
separate git dir from working tree
key=value
set config inside the new repository
server-option
server-specific
option to transmit
ipv4
use IPv4 addresses only
ipv6
use IPv6 addresses only
args
object filtering
remote-submodules
any cloned submodules will use their remote-tracking branch
sparse
initialize sparse-checkout file to include only files at root
git clone [<options>] [--] <repo> [<dir>]
/.git
.git/.git
.git
.bundle
gitdir: 
No directory name could be guessed.
Please specify a directory on the command line
%.*s.git
unable to write parameters to config file
info: Could not add alternate for '%s': %s
%s/objects
failed to initialize sparse-checkout
git-upload-pack
Could not find remote branch %s to clone.
+%s:%s
+%s:%s%s
builtin/clone.c
remote HEAD points at non-head?
remote.%s.fetch
remote.%s.mirror
/objects
done.
failed to start iterator over '%s'
info/alternates
failed to unlink '%s'
failed to create link '%s'
failed to copy file to '%s'
failed to iterate over '%s'
failed to stat '%s'
%s exists and is not a directory
%s/objects/%s
skipping invalid relative alternate: %s/%s
remote did not send all necessary objects
unable to update %s
cannot repack to clean up
cannot unlink temporary alternates file
remote HEAD refers to nonexistent ref, unable to checkout.
unable to checkout working tree
submodule
--require-init
--recursive
--depth=1
--jobs=%d
--remote
--no-fetch
--single-branch
--no-single-branch
lookup config vars
mode
layout to use
raw-mode
width
maximum width
indent
padding space on left border
padding space on right border
padding
padding space between columns
--command=
--command must be the first argument
git column [<options>]
object-dir
the object directory to store the graph
write
git commit-graph verify [--object-dir <objdir>] [--shallow] [--[no-]progress]
git commit-graph write [--object-dir <objdir>] [--append] [--split[=<strategy>]] [--reachable|--stdin-packs|--stdin-commits] [--changed-paths] [--[no-]max-new-filters <n>] [--[no-]progress] <split options>
shallow
if the commit-graph is split, only verify the tip file
builtin/commit-graph.c
Could not open commit-graph '%s'
could not find object directory matching %s
reachable
start walk at all refs
stdin-packs
scan pack-indexes listed by stdin for commits
stdin-commits
start walk at commits listed by stdin
append
include all commits already in the commit-graph file
changed-paths
enable computation for changed paths
split
allow writing an incremental commit-graph file
max-commits
maximum number of commits in a non-base split commit-graph
size-multiple
maximum ratio between two levels of a split commit-graph
expire-time
expiry-date
only expire files older than a given date-time
max-new-filters
maximum number of changed-path Bloom filters to compute
use at most one of --reachable, --stdin-commits, or --stdin-packs
GIT_TEST_COMMIT_GRAPH_CHANGED_PATHS
Collecting commits from input
no-merge
unrecognized --split argument, %s
%s expects a numerical value
commitgraph.maxnewfilters
unexpected non-hex object ID: %s
invalid object: %s
parent
id of a parent commit object
message
commit message
read commit log message from file
GPG sign commit
must give exactly one tree
not a valid object name %s
git commit-tree: failed to read
builtin/commit-tree.c
option callback expects an argument
duplicate parent %s ignored
git commit-tree: failed to open '%s'
git commit-tree: failed to read '%s'
git commit-tree: failed to close '%s'
git commit-tree [(-p <parent>)...] [-S[<keyid>]] [(-m <message>)...] [(-F <file>)...] <tree>
added
short
show status concisely
show branch information
show-stash
show stash information
ahead-behind
compute full ahead/behind values
machine-readable output
long
show status in long format (default)
null
terminate entries with NUL
untracked-files
show untracked files, optional modes: all, normal, no. (Default: all)
ignored
show ignored files, optional modes: traditional, matching, no. (Default: traditional)
traditional
ignore-submodules
ignore changes to submodules, optional when: all, dirty, untracked. (Default: all)
list untracked files in columns
no-renames
do not detect renames
find-renames
detect renames, optionally set similarity index
Unsupported combination of ignored and untracked-files arguments
suppress summary after successful commit
show diff in commit message template
Commit message options
read message from file
override author for commit
date
override date for commit
reedit-message
reuse and edit message from specified commit
reuse-message
reuse message from specified commit
fixup
[(amend|reword):]commit
use autosquash formatted message to fixup or amend/reword specified commit
squash
use autosquash formatted message to squash specified commit
reset-author
the commit is authored by me now (used with -C/-c/--amend)
trailer
add custom trailer(s)
add a Signed-off-by trailer
use specified template file
force edit of commit
cleanup
how to strip spaces and #comments from message
include status in commit message template
Commit contents options
commit all changed files
add specified files to index for commit
interactively add files
interactively add changes
only
commit only specified files
no-verify
bypass pre-commit and commit-msg hooks
show what would be committed
amend
amend previous commit
no-post-rewrite
bypass post-rewrite hook
allow-empty
ok to record an empty change
allow-empty-message
ok to record a change with an empty message
could not parse HEAD commit
commit (initial)
commit (amend)
commit (merge)
Corrupt MERGE_HEAD file (%s)
could not read MERGE_MODE
no-ff
commit (cherry-pick)
commit (rebase)
could not read commit message: %s
Aborting commit due to empty commit message.
builtin/commit.c
Aborting commit; you did not edit the message.
amend! 
Aborting commit due to empty commit message body.
gpgsig
gpgsig-sha256
repository has been updated, but unable to write
new_index file. Check that disk is not full and quota is
not exceeded, and then "git restore --staged :/" to recover.
updated
changed
untracked
noBranch
unmerged
localBranch
remoteBranch
unsupported porcelain version '%s'
git status [<options>] [--] <pathspec>...
status.submodulesummary
status.short
status.branch
status.aheadbehind
status.showstash
status.color
color.status
status.displaycommentprefix
status.color.
color.status.
status.relativepaths
status.showuntrackedfiles
normal
Invalid untracked files mode '%s'
diff.renamelimit
status.renamelimit
diff.renames
status.renames
--long and -z are incompatible
matching
Invalid ignored mode '%s'
--trailer
git commit [<options>] [--] <pathspec>...
commit.template
commit.status
commit.cleanup
commit.verbose
Using both --reset-author and --author does not make sense
You have nothing to amend.
You are in the middle of a merge -- cannot amend.
You are in the middle of a cherry-pick -- cannot amend.
You are in the middle of a rebase -- cannot amend.
Options --squash and --fixup cannot be used together
Only one of -c/-C/-F/--fixup can be used.
Option -m cannot be combined with -c/-C/-F.
--reset-author can be used only with -C, -c or --amend.
CHERRY_PICK_HEAD
Only one of --include/--only/--all/--interactive/--patch can be used.
reword
unknown option: --fixup=%s:%s
paths '%s ...' with -a does not make sense
--author=%s
--all
revision walk setup failed
%aN <%aE>
--author '%s' is not 'Name <email>' and matches no existing author
could not lookup commit %s
You are in the middle of a merge -- cannot reword.
You are in the middle of a cherry-pick -- cannot reword.
cannot combine reword option of --fixup with path '%s'
reword option of --fixup is mutually exclusive with --patch/--interactive/--all/--include/--only
HEAD^1
--pathspec-from-file with -a does not make sense
No paths with --include/--only does not make sense.
unable to create temporary index
GIT_INDEX_FILE
interactive add failed
unable to update temporary index
Failed to update main cache tree
unable to write new_index file
cannot do a partial commit during a merge.
cannot do a partial commit during a cherry-pick.
cannot do a partial commit during a rebase.
cannot read the index
next-index-%ju
unable to write temporary index file
failed to unpack HEAD tree object
squash! 
squash! %s
(reading log message from standard input)
could not read log from standard input
could not read log file '%s'
%s! %%s
cannot combine -m with --fixup:%s
could not read SQUASH_MSG
could not read MERGE_MSG
could not open '%s'
could not write commit template
It looks like you may be committing a merge.
If this is not correct, please run
git update-ref -d MERGE_HEAD
and try again.
It looks like you may be committing a cherry-pick.
If this is not correct, please run
git update-ref -d CHERRY_PICK_HEAD
and try again.
Please enter the commit message for your changes. Lines starting
with '%c' will be ignored, and an empty message aborts the commit.
Please enter the commit message for your changes. Lines starting
with '%c' will be kept; you may remove them yourself if you want to.
An empty message aborts the commit.
%sAuthor:    %.*s <%.*s>
%sDate:      %s
%sCommitter: %.*s <%.*s>
Cannot read index
--in-place
unable to pass trailers to --trailers
Error building trees
GIT_INDEX_FILE=%s
Please supply the message using either -m or -F option.
GIT_AUTHOR_NAME
GIT_AUTHOR_EMAIL
GIT_AUTHOR_DATE
commit '%s' lacks author header
commit '%s' has malformed author line
malformed --author parameter
invalid date format: %s
amend!
#;@!$%^&|:
unable to select a comment character that is not used
in the current commit message
unable to parse our own ident: %s
GIT_CONFIG
only one config file at a time
--local can only be used inside a git repository
--blob can only be used inside a git repository
--worktree can only be used inside a git repository
$HOME not set
config.worktree
--worktree cannot be used with multiple working trees unless the config
extension worktreeConfig is enabled. Please read "CONFIGURATION FILE"
section in "git help worktree" for details
--get-color and variable type are incoherent
only one action at a time
--name-only is only applicable to --list or --get-regexp
--show-origin is only applicable to --get, --get-all, --get-regexp, and --list
--default is only applicable to --get
--fixed-value only applies with 'value-pattern'
unable to read config file '%s'
error processing config file(s)
not in a git directory
editing stdin is not supported
editing blobs is not supported
cannot create configuration file %s
cannot overwrite multiple values with a single value
       Use a regexp, --add or --replace-all to change %s.
no such section: %s
command line
Config file location
global
use global config file
system
use system config file
use repository config file
use per-worktree config file
use given config file
blob-id
read config from given blob object
Action
get value: name [value-pattern]
get-all
get all values: key [value-pattern]
get-regexp
get values for regexp: name-regex [value-pattern]
get-urlmatch
get value specific for the URL: section[.var] URL
replace-all
replace all matching variables: name value [value-pattern]
add a new variable: name value
remove a variable: name [value-pattern]
unset-all
remove all matches: name [value-pattern]
rename-section
rename section: old-name new-name
remove-section
remove a section: name
list all
fixed-value
use string equality when comparing values to 'value-pattern'
open an editor
get-color
find the color configured: slot [default]
get-colorbool
find the color setting: slot [stdout-is-tty]
Type
type
value is given this type
bool
value is "true" or "false"
value is decimal number
bool-or-int
value is --bool or --int
bool-or-str
value is --bool or string
value is a path (file or directory name)
value is an expiry date
Other
terminate values with NUL byte
name-only
show variable names only
includes
respect include directives on lookup
show-origin
show origin of config (file, standard input, blob, command line)
show-scope
show scope of config (worktree, local, global, system, command)
default
value
with --get, use default value when missing entry
unrecognized --type argument, %s
only one type at a time
git config [<options>]
wrong number of arguments, should be %d
wrong number of arguments, should be from %d to %d
%s%c%s%c
# This is Git's per-user configuration file.
[user]
# Please adapt and uncomment the following lines:
name = %s
email = %s
writing to stdin is not supported
writing config blobs is not supported
%lld
false
cannot parse color '%s'
builtin/config.c
cannot normalize type %d
invalid key pattern: %s
failed to format default config value: %s
unable to parse default color value
color.diff
diff.color
color.ui
human-readable
print sizes in human readable format
count: %lu
size: %s
in-pack: %lu
packs: %lu
size-pack: %s
prune-packable: %lu
garbage: %lu
size-garbage: %s
%lu kilobytes
%lu objects, %s
git count-objects [-v] [-H | --human-readable]
%s: %s
no corresponding .idx or .pack
garbage found
no corresponding .idx
no corresponding .pack
alternate: 
git-credential-cache--daemon [opts] <socket_path>
debug
print debugging messages to stderr
credentialcache.ignoresighup
socket directory must be an absolute path
unable to create directories for '%s'
unable to mkdir '%s'
unable to bind to '%s'
/dev/null
unable to point stderr to /dev/null
accept failed
username=%s
password=%s
exit
builtin/credential-cache--daemon.c
erase
store
cache client didn't specify a timeout
cache client gave us a partial credential
cache client sent unknown action: %s
action=
client sent bogus action line: %s
timeout=
client sent bogus timeout line: %s
git credential-cache [<options>] <action>
timeout
number of seconds to cache credentials
socket
path of cache-daemon socket
unable to find a suitable socket path; use --socket
~/.git-credential-cache
%s/socket
credential/socket
action=%s
timeout=%d
unable to relay credential
unable to connect to cache daemon
unable to write to cache daemon
read error from cache daemon
unable to start cache daemon
unable to read result code from cache daemon
cache daemon did not start: %.*s
git credential-store [<options>] <action>
fetch and store credentials in <path>
~/.git-credentials
credentials
unable to set up default path; use --file
unable to read credential
credentialstore.locktimeoutms
unable to get credential storage lock in %d ms
unable to write credential store
%s://
unable to read credential from stdin
fill
approve
find the tag that comes after the commit
debug search strategy on stderr
use any ref
tags
use any tag, even unannotated
always use long format
first-parent
only follow first parent
exact-match
only output exact matches
candidates
consider <n> most recent tags (default: 10)
match
only consider tags matching <pattern>
do not consider tags matching <pattern>
show abbreviated commit object as fallback
dirty
mark
append <mark> on dirty working tree (default: "-dirty")
-dirty
append <mark> on broken working tree (default: "-broken")
-broken
--long is incompatible with --abbrev=0
--peel-tag
--name-only
--no-undefined
--always
--tags
--refs=refs/tags/%s
--exclude=refs/tags/%s
No names found, cannot describe anything.
builtin/describe.c
malformed internal diff-index command line
--dirty is incompatible with commit-ishes
--broken is incompatible with commit-ishes
git describe [<options>] [<commit-ish>...]
git describe [<options>] --dirty
./hashmap.h
hashmap_get_size: size not set
describe %s
%s is neither a commit nor blob
no tag exactly matches '%s'
No exact match on refs or tags, searching to describe
finished search at %s
No annotated tags can describe '%s'.
However, there were unannotated tags: try --tags.
No tags can describe '%s'.
Try --always, or create some tags.
 %-*s %8d %s
traversed %lu commits
more than %i tags found; listed %i most recent
gave up search at %s
annotated tag %s not available
tag '%s' is externally known as '%s'
tags/
-%d-g%s
head
lightweight
annotated
internal: The first arg is not parsed
--objects
--in-commit-order
setup_revisions could not handle all args?
--base
read_cache_preload
--merge-base
read_cache
--stdin and --merge-base are mutually exclusive
--merge-base only works with two commits
Object %s is a %s, not a commit or tree
Need exactly two trees, separated by a space
%s %s
--no-index
builtin/diff.c
Not a git repository
invalid object '%s' given.
more than two blobs given: '%s'
unhandled object '%s' given.
%s...%s: multiple merge bases, using %s
%s...%s: no merge base
invalid option: %s
'%s': not a regular file or symlink
use `diff.guitool` instead of `diff.tool`
dir-diff
perform a full-directory diff
no-prompt
do not prompt before launching a diff tool
symlinks
use symlinks in dir-diff mode
tool
use the specified diff tool
tool-help
print a list of diff tools that may be used with `--tool`
trust-exit-code
make 'git-difftool' exit when an invoked diff tool returns a non - zero exit code
extcmd
specify a custom command for viewing diffs
passed to `diff`
difftool requires worktree or --no-index
--dir-diff is incompatible with --no-index
--gui, --tool and --extcmd are mutually exclusive
GIT_MERGETOOL_GUI
GIT_DIFF_TOOL
no <tool> given for --tool=<tool>
GIT_DIFFTOOL_EXTCMD
no <cmd> given for --extcmd=<cmd>
GIT_DIFFTOOL_TRUST_EXIT_CODE
difftool.trustexitcode
git difftool [<options>] [<commit> [<commit>]] [--] [<path>...]
mergetool
--tool-help=diff
difftool--helper
TMPDIR
%s/git-difftool.XXXXXX
/tmp
could not create '%s'
%s/left/
%s/right/
--raw
--no-abbrev
could not obtain raw diff
combined diff formats('-c' and '--cc') are not supported in
directory diff mode('-d' and '--dir-diff').
Subproject commit %s
could not write '%s'
could not create directory for '%s'
could not symlink '%s' to '%s'
could not copy '%s' to '%s'
error occurred running diff --raw
GIT_DIFFTOOL_DIRDIFF
%s/wtindex
could not write %s
both files modified: '%s' and '%s'.
working tree file has been left.
temporary files exist in '%s'.
you may want to cleanup or recover these.
builtin/difftool.c
expected ':', got '%c'
expected ' ', got '%c'
expected object ID, got '%s'
missing status
unexpected trailer: '%s'
could not read symlink %s
could not read symlink file %s
could not read object %s for symlink %s
--really-refresh
--unmerged
diff-files did not exit properly
failed: %d
GIT_PAGER=
GIT_EXTERNAL_DIFF=git-difftool--helper
GIT_DIFFTOOL_PROMPT=true
GIT_DIFFTOOL_NO_PROMPT=true
default for git_env_*(...) to fall back on
exit-code
be quiet only use git_env_*() value as exit code
option `--default' expects a boolean value with `--type=bool`, not `%s`
option `--default' expects an unsigned long value with `--type=ulong`, not `%s`
builtin/env--helper.c
unknown <type> value
ulong
git env--helper --type=[bool|ulong] <options> <env-var>
show progress after <n> objects
signed-tags
select handling of signed tags
tag-of-filtered-object
select handling of tags that tag filtered objects
reencode
select handling of commit messages in an alternate encoding
export-marks
dump marks to this file
import-marks
import marks from this file
import-marks-if-exists
import marks from this file if it exists
fake-missing-tagger
fake a tagger when tags lack one
full-tree
output full tree for each commit
use-done-feature
use the done feature to terminate the stream
no-data
skip output of blob data
refspec
apply refspec to exported refs
anonymize
anonymize output
anonymize-map
from:to
convert <from> to <to> in anonymized output
reference-excluded-parents
reference parents which are not in fast-export stream by object id
show-original-ids
show original object ids of blobs/commits
mark-tags
label tags with mark ids
--anonymize-map without --anonymize does not make sense
Cannot pass both --import-marks and --import-marks-if-exists
verbatim
ignore
warn-strip
Unknown signed-tags mode: %s
drop
rewrite
Unknown tag-of-filtered mode: %s
Unknown reencoding mode: %s
builtin/fast-export.c
--anonymize-map token cannot be empty
git fast-export [rev-list-opts]
corrupt mark line: %s
object not found: %s
not a commit? can't happen: %s
Object %s already has a mark
%s: Unexpected object of type %s, skipping.
Tag points to object of unexpected type %s, skipping.
Tag %s points nowhere?
could not read blob %s
oid mismatch in blob %s
Could not read blob %s
blob
mark :%u
original-oid %s
data %ju
could not write blob '%s'
anonymous blob %d
progress %d objects
M %06o %s 
M %06o :%d 
Unexpected comparison status '%c' for %s, %s
"%s"
path%d
could not find author in commit %s
could not find committer in commit %s
UTF-8
Encountered commit-specific encoding %s in commit %s; use --reencode=[yes|no] to handle it
reset %s
commit %s
mark :%u
%.*s
%.*s
encoding %s
data %u
from 
merge 
encoding 
ref%d
malformed line fed to anonymize_ident_line: %.*s
Malformed Ident <malformed@example.com> 0 -0000
User %d <user%d@example.com>
subject %d
body
reset %s
from %s
reset %s
from :%d
Omitting tag %s,
since tags of trees (or tags of tags of trees, etc.) are not supported.
could not read tag %s
tagger 
tagger Unspecified Tagger <unspecified-tagger> 0 +0000
-----BEGIN PGP SIGNATURE-----
encountered signed tag %s; use --signed-tags=<mode> to handle it
exporting signed tag %s
stripping signature from tag %s
tag %s tags unexported object; use --tag-of-filtered-object=<mode> to handle it
Error: Cannot export nested tags unless --mark-tags is specified.
tag %s
mark :%u
from :%d
from %s
%.*s%sdata %d
%.*s
tag message %d
Unable to open marks file %s for writing.
:%u %s
Unable to write marks file %s.
done
feature done
deleteall
--allow-unsafe-features
commit 
tag 
reset 
cat-blob 
get-mark 
checkpoint
progress 
feature 
option git 
option 
Unsupported command: %s
stream ends early
%s statistics:
---------------------------------------------------------------------
Alloc'd objects: %10ju
Total objects:   %10ju (%10ju duplicates                  )
      blobs  :   %10ju (%10ju duplicates %10ju deltas of %10ju attempts)
      trees  :   %10ju (%10ju duplicates %10ju deltas of %10ju attempts)
      commits:   %10ju (%10ju duplicates %10ju deltas of %10ju attempts)
      tags   :   %10ju (%10ju duplicates %10ju deltas of %10ju attempts)
Total branches:  %10lu (%10lu loads     )
      marks:     %10ju (%10ju unique    )
      atoms:     %10u
Memory total:    %10ju KiB
       pools:    %10lu KiB
     objects:    %10ju KiB
pack.depth
pack.indexversion
bad pack.indexversion=%u
pack.packsizelimit
fastimport.unpacklimit
transfer.unpacklimit
pack/tmp_pack_XXXXXX
builtin/fast-import.c
fast_import_crash_%ju
can't write crash report %s
fast-import: dumping crash report to %s
fast-import crash report:
    fast-import process: %ju
    parent process     : %ju
    at %s
Most Recent Commands Before Crash
---------------------------------
Active Branch LRU
-----------------
    active_branches = %lu cur, %lu max
  pos  clock name
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  %2lu) %6ju %s
Inactive Branches
Annotated Tags
--------------
Marks
-----
  exported to %s
-------------------
END OF CRASH REPORT
  status      :
 active
 loaded
 dirty
  tip commit  : %s
  old tree    : %s
  cur tree    : %s
  commit clock: %ju
  last pack   : 
:%ju %s
mark :
original-oid 
data 
Expected 'data n' command, found: %s
EOF in data (terminator '%s' not found)
EOF in data (%lu bytes remaining)
%s %lu
blob %ju
EOF in data (%ju bytes remaining)
unexpected deflate failure: %d
cannot truncate pack to skip duplicate
author 
committer 
Expected committer but didn't get one
encoding 
tree %s
parent %s
author %s
committer %s
Invalid attempt to create duplicate branch: %s
Branch name doesn't conform to GIT standards: %s
Missing < in ident string: %s
Missing space before < in ident string: %s
Missing > in ident string: %s
Missing space after > in ident string: %s
Invalid raw date "%s" in ident: %s
Invalid rfc2822 date "%s" in ident: %s
Date in ident must be 'now': %s
Can't create a branch from itself: %s
Mark :%ju not a commit
Invalid ref name or SHA1 expression: %s
Garbage after mark: %s
parse_mark_ref
fast-import.c
*p == ':'
No value after ':' in mark: %s
mark :%ju not declared
Not a valid commit: %s
tree 
The commit %s is corrupt
Not a tree: %s
Can't load tree %s
Corrupt mode in %s
Corrupt mode: %s
inline 
Invalid dataref: %s
Missing space after SHA1: %s
Garbage after path in: %s
Git links cannot be specified 'inline': %s
Not a commit (actually a %s): %s
Directories cannot be specified 'inline': %s
%s not found: %s
Tree
Blob
Not a %s (actually a %s): %s
Missing space after mark: %s
Root cannot be a non-directory
Empty path component found in input
Non-directories cannot have subtrees
Missing space after source: %s
Missing dest: %s
Garbage after dest in: %s
Path %s not in branch
Can't add a note on empty branch.
Not a blob (actually a %s): %s
Blob not found: %s
Too large fanout (%u)
Failed to remove path %s
%o %s%c
Expected from command, got %s
Can't tag an empty branch.
Not a valid object: %s
tagger 
object %s
type %s
tag %s
tagger %s
Not in a commit: %s
Invalid path: %s
Unknown mark: %s
Missing space after tree-ish: %s
Not a tree-ish: %s
Can't load object %s
Invalid SHA1 in tag: %s
Invalid SHA1 in commit: %s
missing 
%06o %s %s
Write to frontend failed
Garbage after SHA1: %s
Can't read object %s
Object %s is a %s but a blob was expected.
%s %s %ju
Not a mark: %s
Expected 'mark' command, got %s
Expected 'to' command, got %s
parse_alias
Got feature command '%s' after data command
This version of fast-import does not support feature %s.
date-format=
import-marks=
import-marks-if-exists=
export-marks=
rewrite-submodules-to=
rewrite-submodules-from=
get-mark
cat-blob
relative-marks
no-relative-marks
raw-permissive
rfc2822
unknown --date-format argument %s
feature '%s' forbidden in input without --allow-unsafe-features
Only one import-marks command allowed per stream
cannot read '%s'
info/fast-import/%s
Expected format name:filename for submodule rewrite option
Got option command '%s' after data command
This version of fast-import does not support option: %s
max-pack-size=
max-pack-size is now in bytes, assuming --max-pack-size=%lum
minimum max-pack-size is 1 MiB
big-file-threshold=
depth=
active-branches=
export-pack-edges=
stats
allow-unsafe-features
--depth
--depth cannot exceed %u
%s: argument must be a non-negative integer
--active-branches
unknown option %s
cat-blob-fd=
unknown option --%s
--cat-blob-fd
--cat-blob-fd cannot exceed %d
Missing from marks for submodule '%s'
Missing to marks for submodule '%s'
core git rejected index %s
Failed seeking to start of '%s'
cannot create keep file
failed to write keep file
pack
cannot store pack file
cannot store index file
internal consistency error creating the index
Branch %s is missing commits.
Not updating %s (new tip %s does not contain %s)
refs/tags/%s
unable to create leading directories of %s
Unable to write marks file %s
Unable to write marks file %s: %s
Unable to write file %s
--upload-pack=
--exec=
--keep
--include-tag
--diag-url
--depth=
--shallow-since=
--shallow-exclude=
--deepen-relative
--no-progress
--stateless-rpc
--lock-pack
--check-self-contained-and-connected
--cloning
--update-shallow
--from-promisor
--filter=
--no-filter
builtin/fetch-pack.c
unknown protocol version
lock %s
Lockfile created but not reported: %s
connectivity-ok
Negative depth in --deepen is not supported
--deepen and --depth are mutually exclusive
--depth and --unshallow cannot be used together
--unshallow on a complete repository does not make sense
fetch --all does not take a repository argument
fetch --all does not make sense with refspecs
No such remote or remote group: %s
Fetching a group and specifying refspecs does not make sense
must supply remote when using --negotiate-only
Protocol does not support --negotiate-only, exiting.
--filter can only be used with the remote configured in extensions.partialclone
--atomic can only be used when fetching from one remote
--stdin can only be used when fetching from one remote
fetch.prune
fetch.prunetags
fetch.showforcedupdates
submodule.recurse
submodule.fetchjobs
fetch.recursesubmodules
fetch.parallel
fetch.parallel cannot be negative
fetch from all remotes
set upstream for git pull/fetch
append to .git/FETCH_HEAD instead of overwriting
atomic
use atomic transaction to update references
path to upload pack on remote end
force overwrite of local reference
multiple
fetch from multiple remotes
fetch all tags and associated objects
do not fetch all tags (--no-tags)
number of submodules fetched in parallel
prefetch
modify the refspec to place all refs within refs/prefetch/
prune remote-tracking branches no longer on remote
prune-tags
prune local tags no longer on remote and clobber changed tags
on-demand
control recursive fetching of submodules
write-fetch-head
write fetched references to the FETCH_HEAD file
keep downloaded pack
update-head-ok
allow updating of HEAD ref
deepen history of shallow clone
deepen history of shallow repository based on time
deepen
unshallow
convert to a complete repository
submodule-prefix
prepend this to submodule path output
recurse-submodules-default
default for recursive fetching of submodules (lower priority than config files)
update-shallow
accept refs that update .git/shallow
refmap
specify fetch refmap
negotiation-tip
report that we have only objects reachable from this object
negotiate-only
do not fetch a packfile; instead, print ancestors of negotiation tips
auto-maintenance
run 'maintenance --auto' after fetching
auto-gc
show-forced-updates
check for forced-updates on all updated branches
write-commit-graph
write the commit-graph after fetching
accept refspecs from stdin
builtin/fetch.c
git fetch [<options>] [<repository> [<refspec>...]]
git fetch [<options>] <group>
git fetch --multiple [<options>] [(<repository> | <group>)...]
git fetch --all [<options>]
remotes.
deepen-relative
updateshallow
Ignoring --negotiation-tip because the protocol does not support it.
Option "%s" value "%s" is not valid for %s
Option "%s" is ignored for %s
Ignoring --negotiation-tip=%s because it does not match any refs
refs/tags/*:refs/tags/*
You need to specify a tag name.
refs/tags/%s:refs/tags/%s
remote_refs
multiple branches detected, incompatible with --set-upstream
not setting upstream for a remote remote-tracking branch
not setting upstream for a remote tag
unknown branch type
no source branch found.
you need to specify exactly one branch with the --set-upstream option.
cannot open %s
--refmap option is only meaningful with command-line refspec(s).
Couldn't find remote ref HEAD
refs/prefetch/
Refusing to fetch into current branch %s of non-bare repository
   (%s will become dangling)
   (%s has become dangling)
foreign
fetch: prune
From %.*s
[deleted]
(none)
%c %-*s 
  (%s)
%-*s -> %s
%-*s -> *
fetch_refs
consume_refs
%s did not send all necessary objects
reject %s because shallow roots are not allowed to be updated
remote-tracking branch
'%s' of 
FETCH_HEAD
some local refs could not be updated; try running
 'git remote prune %s' to remove any old, conflicting branches
full
fetch.output
compact
configuration fetch.output contains invalid value %s
not-for-merge
object %s not found
[up to date]
[rejected]
can't fetch in current branch
updating tag
[tag update]
unable to update local ref
would clobber existing tag
storing tag
[new tag]
storing head
[new branch]
storing ref
[new ref]
fast-forward
forced-update
forced update
non-fast-forward
unseen remote ref?
--append
--no-auto-gc
--no-write-commit-graph
--end-of-options
parallel/fetch
Fetching %s
Could not fetch %s
could not fetch '%s' (exit code: %d)
--dry-run
--prune
--no-prune
--prune-tags
--no-prune-tags
--update-head-ok
--recurse-submodules
--recurse-submodules=on-demand
--ipv4
--ipv6
populate log with at most <n> entries from shortlog
alias for --log (deprecated)
text
use <text> as start of message
file to read from
cannot open '%s'
could not read input file
git fmt-merge-msg [-m <message>] [--log[=<n>] | --no-log] [--file <file>]
shell
quote placeholders suitably for shells
perl
quote placeholders suitably for perl
python
quote placeholders suitably for python
quote placeholders suitably for Tcl
count
show only <n> matched refs
respect format colors
print only refs which points at the given object
print only refs that are merged
print only refs that are not merged
print only refs which contain the commit
print only refs which don't contain the commit
%(objectname) %(objecttype)
%(refname)
invalid --count argument: `%d'
more than one quoting style?
git for-each-ref [<options>] [<pattern>]
git for-each-ref [--points-at <object>]
git for-each-ref [--merged [<commit>]] [--no-merged [<commit>]]
git for-each-ref [--contains [<commit>]] [--no-contains [<commit>]]
config key storing a list of repository paths
missing --config=<config>
git for-each-repo --config=<config> <command-args>
Checking objects
%s: object missing
invalid parameter: expected sha1, got '%s'
core.commitgraph
--object-dir
core.multipackindex
unreachable
show unreachable objects
dangling
show dangling objects
report tags
report root nodes
cache
make index objects head nodes
reflogs
make reflogs head nodes (default)
also consider packs and alternate objects
connectivity-only
check only connectivity
strict
enable more strict checking
lost-found
write dangling objects in .git/lost-found
show progress
name-objects
show verbose names for reachable objects
git fsck [<options>] [<object>...]
broken link from %7s %s
unknown
wrong object type in link
broken link from %7s %s
              to %7s %s
error in %s %s: %s
warning in %s %s: %s
builtin/fsck.c
%d (FSCK_IGNORE?) should never trigger this callback
Checking object directory
Checking object directories
%s: object corrupt or missing: %s
read_loose_object streamed a non-blob
%s: object could not be parsed: %s
Checking %s %s
broken links
root %s
tagged %s %s (%s) in %s
tmp_obj_
bad sha1 file: %s
%s: object corrupt or missing
notice: No default references
%s: invalid sha1 pointer %s
%s: not a commit
Checking %s link
invalid %s
%s points to something strange (%s)
%s: detached HEAD points at nothing
notice: %s points to an unborn branch (%s)
Checking reflog %s->%s
%s@{%ju}
%s: invalid reflog entry %s
Checking cache tree
%s: invalid sha1 pointer in cache-tree
non-tree in cache-tree
Checking connectivity (%d objects)
Checking connectivity
Checking %s
missing %s %s
unreachable %s %s
dangling %s %s
lost-found/%s/%s
other
could not create lost-found
could not finish '%s'
prune unreferenced objects
aggressive
be more thorough (increased runtime)
auto
enable auto-gc mode
force running gc even if there may be another gc running
keep-largest-pack
repack all other packs except the largest pack
expire
--expire
failed to parse gc.logexpiry value %s
failed to parse prune expiry value %s
--depth=%d
--window=%d
Auto packing the repository in background for optimum performance.
Auto packing the repository for optimum performance.
See "git help gc" for manual housekeeping.
builtin/gc.c
gc is already running on machine '%s' pid %ju (use --force if not)
gc.log
failed to run %s
--exclude-promisor-objects
There are too many unreachable loose objects; run 'git prune' to remove them.
stop
register
unregister
invalid subcommand: %s
2.weeks.ago
git gc [<options>]
gc.packrefs
notbare
gc.reflogexpire
gc.reflogexpireunreachable
gc.aggressivewindow
gc.aggressivedepth
gc.auto
gc.autopacklimit
gc.autodetach
gc.pruneexpire
gc.worktreepruneexpire
gc.logexpiry
gc.bigpackthreshold
pack.deltacachesize
failed to parse '%s' value '%s'
1.day.ago
--no-write-bitmap-index
cannot stat '%s'
The last gc run reported the following. Please correct the root cause
and remove %s.
Automatic cleanup will not be performed until the file is removed.
gc.pid
%s %%%ds
--unpack-unreachable=%s
--keep-pack=%s
Failed to fstat %s: %s
3.months.ago
objects/17
0123456789abcdef
run tasks based on the state of the repository
schedule
frequency
run tasks based on frequency
do not report progress or other information over stderr
task
run a specific task
use at most one of --auto and --schedule=<frequency>
--no-schedule is not allowed
unrecognized --schedule argument '%s'
hourly
daily
weekly
'%s' is not a valid task
task '%s' cannot be selected multiple times
loose-objects
incremental-repack
log.excludedecoration
failed to prefetch remotes
--prefetch
--no-write-fetch-head
--recurse-submodules=no
%s/pack/loose
failed to start 'git pack-objects' process
failed to finish 'git pack-objects' process
maintenance.loose-objects.auto
skipping incremental-repack task because core.multiPackIndex is disabled
failed to write multi-pack-index
'git multi-pack-index expire' failed
--batch-size=%ju
'git multi-pack-index repack' failed
core.multiPackIndex
maintenance.incremental-repack.auto
--auto
failed to write commit-graph
--split
--reachable
maintenance.commit-graph.auto
git maintenance run [--auto] [--[no-]quiet] [--task=<task>] [--schedule]
maintenance.%s.enabled
maintenance.%s.schedule
maintenance.strategy
%s/maintenance
lock file '%s' exists, skipping maintenance
task '%s' failed
failed to add repo to global config
%s/schedule
GIT_TEST_MAINT_SCHEDULER
GIT_TEST_MAINT_SCHEDULER unparseable: %s
another process is scheduling background maintenance
schtasks
crontab
unknown background scheduler: %s
failed to create directories for '%s'
<?xml version="1.0"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0"><dict>
<key>Label</key><string>%s</string>
<key>ProgramArguments</key>
<array>
<string>%s/git</string>
<string>--exec-path=%s</string>
<string>for-each-repo</string>
<string>--config=maintenance.repo</string>
<string>maintenance</string>
<string>run</string>
<string>--schedule=%s</string>
</array>
<key>StartCalendarInterval</key>
<array>
<dict>
<key>Hour</key><integer>%d</integer>
<key>Minute</key><integer>0</integer>
</dict>
<dict>
<key>Day</key><integer>%d</integer>
<key>Hour</key><integer>0</integer>
<key>Minute</key><integer>0</integer>
</dict>
<dict>
<key>Day</key><integer>0</integer>
<key>Hour</key><integer>0</integer>
<key>Minute</key><integer>0</integer>
</dict>
</array>
</dict>
</plist>
failed to bootstrap service %s
invalid schedule %d
org.git-scm.git.%s
~/Library/LaunchAgents/%s.plist
failed to expand path '%s'
bootstrap
bootout
failed to start launchctl
gui/%d
%s/schedule_%s_XXXXXX
failed to create temp xml file
<?xml version="1.0" ?>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
<Triggers>
<CalendarTrigger>
<StartBoundary>2020-01-01T01:00:00</StartBoundary>
<Enabled>true</Enabled>
<ScheduleByDay>
<DaysInterval>1</DaysInterval>
</ScheduleByDay>
<Repetition>
<Interval>PT1H</Interval>
<Duration>PT23H</Duration>
<StopAtDurationEnd>false</StopAtDurationEnd>
</Repetition>
<StartBoundary>2020-01-01T00:00:00</StartBoundary>
<Enabled>true</Enabled>
<ScheduleByWeek>
<DaysOfWeek>
<Monday />
<Tuesday />
<Wednesday />
<Thursday />
<Friday />
<Saturday />
</DaysOfWeek>
<WeeksInterval>1</WeeksInterval>
</ScheduleByWeek>
<StartBoundary>2020-01-01T00:00:00</StartBoundary>
<Enabled>true</Enabled>
<ScheduleByWeek>
<DaysOfWeek>
<Sunday />
</DaysOfWeek>
<WeeksInterval>1</WeeksInterval>
</ScheduleByWeek>
</CalendarTrigger>
</Triggers>
<Principals>
<Principal id="Author">
<LogonType>InteractiveToken</LogonType>
<RunLevel>LeastPrivilege</RunLevel>
</Principal>
</Principals>
<Settings>
<MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>
<Enabled>true</Enabled>
<Hidden>true</Hidden>
<UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine>
<WakeToRun>false</WakeToRun>
<ExecutionTimeLimit>PT72H</ExecutionTimeLimit>
<Priority>7</Priority>
</Settings>
<Actions Context="Author">
<Exec>
<Command>"%s\git.exe"</Command>
<Arguments>--exec-path="%s" for-each-repo --config=maintenance.repo maintenance run --schedule=%s</Arguments>
</Exec>
</Actions>
</Task>
/create
/xml
failed to start schtasks
Git Maintenance (%s)
/delete
failed to run 'crontab -l'; your system might not support 'cron'
failed to run 'crontab'; your system might not support 'cron'
failed to open stdin of 'crontab'
# BEGIN GIT MAINTENANCE SCHEDULE
# END GIT MAINTENANCE SCHEDULE
# The following schedule was created by Git
# Any edits made in this region might be
# replaced in the future by a Git command.
%%s %%s * * %%s "%s/git" --exec-path="%s" for-each-repo --config=maintenance.repo maintenance run --schedule=%%s
1-23
'crontab' died
--global
--get
--fixed-value
maintenance.repo
failed to run 'git config'
--add
--unset
git get-tar-commit-id: read error
git get-tar-commit-id: EOF before reading tar header
 comment=
git get-tar-commit-id: write error
dummy
search in index instead of in the work tree
find in contents not managed by git
search in both tracked and untracked files
exclude-standard
ignore files specified via '.gitignore'
recursively search in each submodule
invert-match
show non-matching lines
case insensitive matching
word-regexp
match patterns only at word boundaries
process binary files as text
don't match patterns in binary files
process binary files with textconv filters
search in subdirectories (default)
max-depth
descend at most <depth> levels
extended-regexp
use extended POSIX regular expressions
basic-regexp
use basic POSIX regular expressions (default)
fixed-strings
interpret patterns as fixed strings
perl-regexp
use Perl-compatible regular expressions
line-number
show line numbers
show column number of first match
don't show filenames
show filenames
full-name
show filenames relative to top directory
files-with-matches
show only filenames instead of matching lines
synonym for --files-with-matches
files-without-match
show only the names of files without match
print NUL after filenames
only-matching
show only matching parts of a line
show the number of matches instead of matching lines
highlight matches
break
print empty line between matches from different files
heading
show filename only once above matches from same file
context
show <n> context lines before and after matches
before-context
show <n> context lines before matches
after-context
show <n> context lines after matches
threads
use <n> worker threads
shortcut for -C NUM
show-function
show a line with the function name before matches
function-context
show the surrounding function
read patterns from file
match <pattern>
combine patterns specified with -e
indicate hit with exit status without output
all-match
show only matches from files that match all patterns
open-files-in-pager
pager
show matching files in the pager
ext-grep
allow calling of grep(1) (ignored by this build)
grep.fallbacktonoindex
no pattern given
--no-index or --untracked cannot be used with revs
unable to resolve revision: %s
--untracked not supported with --recurse-submodules
invalid option combination, ignoring --threads
invalid number of threads specified (%d)
--open-files-in-pager only works on the worktree
less
+/%s%s
--cached or --untracked cannot be used with --no-index
--untracked cannot be used with --cached
--[no-]exclude-standard cannot be used for tracked contents
both --cached and trees are given
switch `%c' expects a numerical value
builtin/grep.c
-e option
option callback does not expect an argument
--and
grep.threads
invalid number of threads specified (%d) for %s
git grep [<options>] [-e] <pattern> [<rev>...] [[--] <path>...]
grep: failed to create thread: %s
unable to read tree (%s)
unable to grep from object of type %s
git hash-object [-t <type>] [-w] [--path=<file> | --no-filters] [--stdin] [--] <file>...
git hash-object  --stdin-paths
object type
write the object into the object database
read the object from stdin
stdin-paths
no-filters
store file as is without filters
literally
just hash any random garbage to create corrupt objects for debugging Git
process file as it were from this path
Can't use --stdin-paths with --stdin
Can't specify files with --stdin-paths
Can't use --stdin-paths with --path
Multiple --stdin arguments are not supported
Can't use --path with --no-filters
Unable to add %s to database
Unable to hash %s
hash to stdout
Cannot open '%s'
usage: %s%s
'git help config' for more information
print all available commands
exclude-guides
exclude guides
guides
print list of useful guides
print all configuration variable names
config-for-completion
show man page
show manual in web browser
show info page
print command description
git help [--all] [--guides] [--man | --web | --info] [<command>]
help.format
help.htmlpath
man.viewer
man.
'%s': path for unsupported man viewer.
Please consider using 'man.<tool>.cmd' instead.
woman
konqueror
'%s': cmd for supported man viewer.
Please consider using 'man.<tool>.path' instead.
advice
<slot>
color.decorate
color.grep
color.remote
<msg-id>
receive.fsck
builtin/help.c
slot_expansion %s.%s is not used
%.*s
add.ignoreErrors
add.interactive.useBuiltin
advice.*
alias.*
am.threeWay
apply.ignoreWhitespace
author.email
author.name
blame.blankBoundary
blame.ignoreRevsFile
blame.markIgnoredLines
blame.markUnblamables
blame.showEmail
blame.showRoot
branch.<name>.description
branch.<name>.merge
branch.<name>.mergeOptions
branch.<name>.pushRemote
branch.<name>.rebase
branch.<name>.remote
branch.autoSetupMerge
branch.autoSetupRebase
browser.<tool>.cmd
browser.<tool>.path
checkout.defaultRemote
checkout.thresholdForParallelism
checkout.workers
clean.requireForce
clone.defaultRemoteName
clone.rejectShallow
color.advice
color.advice.hint
color.blame.highlightRecent
color.blame.repeatedLines
color.branch.<slot>
color.decorate.<slot>
color.diff.<slot>
color.grep.<slot>
color.interactive.<slot>
color.pager
color.push
color.push.error
color.remote.<slot>
color.showBranch
color.status.<slot>
color.transport
color.transport.rejected
column.branch
column.clean
column.status
column.tag
column.ui
commit.gpgSign
commitGraph.generationVersion
commitGraph.maxNewFilters
commitGraph.readChangedPaths
committer.email
committer.name
completion.commands
core.abbrev
core.alternateRefsPrefixes
core.askPass
core.attributesFile
core.autocrlf
core.bigFileThreshold
core.checkRoundtripEncoding
core.checkStat
core.commentChar
core.commitGraph
core.compression
core.createObject
core.deltaBaseCacheLimit
core.editor
core.eol
core.excludesFile
core.fileMode
core.filesRefLockTimeout
core.fsmonitor
core.fsmonitorHookVersion
core.fsyncObjectFiles
core.gitProxy
core.hideDotFiles
core.hooksPath
core.ignoreCase
core.ignoreStat
core.logAllRefUpdates
core.looseCompression
core.notesRef
core.packedGitLimit
core.packedGitWindowSize
core.packedRefsTimeout
core.pager
core.precomposeUnicode
core.preferSymlinkRefs
core.preloadIndex
core.protectHFS
core.protectNTFS
core.quotePath
core.repositoryFormatVersion
core.restrictinheritedhandles
core.safecrlf
core.sharedRepository
core.sparseCheckout
core.sparseCheckoutCone
core.splitIndex
core.sshCommand
core.symlinks
core.trustctime
core.unsetenvvars
core.untrackedCache
core.useReplaceRefs
core.warnAmbiguousRefs
core.whitespace
core.worktree
credential.<url>.*
credential.helper
credential.useHttpPath
credential.username
credentialCache.ignoreSIGHUP
credentialStore.lockTimeoutMS
diff.<driver>.binary
diff.<driver>.cachetextconv
diff.<driver>.command
diff.<driver>.textconv
diff.<driver>.wordRegex
diff.<driver>.xfuncname
diff.algorithm
diff.autoRefreshIndex
diff.colorMoved
diff.colorMovedWS
diff.context
diff.dirstat
diff.external
diff.guitool
diff.ignoreSubmodules
diff.indentHeuristic
diff.interHunkContext
diff.mnemonicPrefix
diff.noprefix
diff.orderFile
diff.relative
diff.renameLimit
diff.statGraphWidth
diff.submodule
diff.suppressBlankEmpty
diff.tool
diff.wordRegex
diff.wsErrorHighlight
difftool.<tool>.cmd
difftool.<tool>.path
difftool.prompt
extensions.objectFormat
fastimport.unpackLimit
feature.*
feature.manyFiles
fetch.fsck.<msg-id>
fetch.fsck.skipList
fetch.fsckObjects
fetch.negotiationAlgorithm
fetch.pruneTags
fetch.recurseSubmodules
fetch.showForcedUpdates
fetch.unpackLimit
fetch.writeCommitGraph
filter.<driver>.clean
filter.<driver>.smudge
format.attach
format.cc
format.coverFromDescription
format.coverLetter
format.encodeEmailHeaders
format.filenameMaxLength
format.from
format.headers
format.notes
format.numbered
format.outputDirectory
format.pretty
format.signOff
format.signature
format.signatureFile
format.subjectPrefix
format.suffix
format.thread
format.to
format.useAutoBase
fsck.<msg-id>
fsck.skipList
gc.<pattern>.reflogExpire
gc.<pattern>.reflogExpireUnreachable
gc.aggressiveDepth
gc.aggressiveWindow
gc.autoDetach
gc.autoPackLimit
gc.bigPackThreshold
gc.logExpiry
gc.packRefs
gc.pruneExpire
gc.reflogExpire
gc.reflogExpireUnreachable
gc.rerereResolved
gc.rerereUnresolved
gc.worktreePruneExpire
gc.writeCommitGraph
gitcvs.allBinary
gitcvs.commitMsgAnnotation
gitcvs.dbDriver
gitcvs.dbName
gitcvs.dbPass
gitcvs.dbTableNamePrefix
gitcvs.dbUser
gitcvs.enabled
gitcvs.logFile
gitcvs.usecrlfattr
gitweb.avatar
gitweb.blame
gitweb.category
gitweb.description
gitweb.grep
gitweb.highlight
gitweb.owner
gitweb.patches
gitweb.pickaxe
gitweb.remote_heads
gitweb.showSizes
gitweb.snapshot
gitweb.url
gpg.<format>.program
gpg.format
gpg.minTrustLevel
gpg.program
grep.column
grep.extendedRegexp
grep.fallbackToNoIndex
grep.lineNumber
grep.patternType
gui.blamehistoryctx
gui.commitMsgWidth
gui.copyBlameThreshold
gui.diffContext
gui.displayUntracked
gui.encoding
gui.fastCopyBlame
gui.matchTrackingBranch
gui.newBranchTemplate
gui.pruneDuringFetch
gui.spellingDictionary
gui.trustmtime
guitool.<name>.argPrompt
guitool.<name>.cmd
guitool.<name>.confirm
guitool.<name>.needsFile
guitool.<name>.noConsole
guitool.<name>.noRescan
guitool.<name>.prompt
guitool.<name>.revPrompt
guitool.<name>.revUnmerged
guitool.<name>.title
help.autoCorrect
help.browser
help.htmlPath
http.<url>.*
http.cookieFile
http.delegation
http.emptyAuth
http.extraHeader
http.followRedirects
http.lowSpeedLimit
http.lowSpeedTime
http.maxRequests
http.minSessions
http.noEPSV
http.pinnedpubkey
http.postBuffer
http.proxy
http.proxyAuthMethod
http.proxySSLCAInfo
http.proxySSLCert
http.proxySSLCertPasswordProtected
http.proxySSLKey
http.saveCookies
http.schannelCheckRevoke
http.schannelUseSSLCAInfo
http.sslBackend
http.sslCAInfo
http.sslCAPath
http.sslCert
http.sslCertPasswordProtected
http.sslCipherList
http.sslKey
http.sslTry
http.sslVerify
http.sslVersion
http.userAgent
http.version
i18n.commitEncoding
i18n.logOutputEncoding
imap.authMethod
imap.folder
imap.host
imap.pass
imap.port
imap.preformattedHTML
imap.sslverify
imap.tunnel
imap.user
index.recordEndOfIndexEntries
index.recordOffsetTable
index.sparse
index.threads
index.version
init.defaultBranch
init.templateDir
instaweb.browser
instaweb.httpd
instaweb.local
instaweb.modulePath
instaweb.port
interactive.diffFilter
interactive.singleKey
log.abbrevCommit
log.date
log.decorate
log.diffMerges
log.excludeDecoration
log.follow
log.graphColors
log.mailmap
log.showRoot
log.showSignature
lsrefs.unborn
mailinfo.scissors
mailmap.blob
mailmap.file
maintenance.<task>.enabled
maintenance.<task>.schedule
man.<tool>.cmd
man.<tool>.path
merge.<driver>.driver
merge.<driver>.name
merge.<driver>.recursive
merge.autoStash
merge.branchdesc
merge.conflictStyle
merge.defaultToUpstream
merge.directoryRenames
merge.ff
merge.guitool
merge.log
merge.renameLimit
merge.renames
merge.stat
merge.suppressDest
merge.tool
merge.verbosity
merge.verifySignatures
mergetool.<tool>.cmd
mergetool.<tool>.hideResolved
mergetool.<tool>.path
mergetool.<tool>.trustExitCode
mergetool.hideResolved
mergetool.keepBackup
mergetool.keepTemporaries
mergetool.meld.hasOutput
mergetool.meld.useAutoMerge
mergetool.prompt
mergetool.writeToTemp
notes.<name>.mergeStrategy
notes.displayRef
notes.mergeStrategy
notes.rewrite.<command>
notes.rewriteMode
notes.rewriteRef
pack.allowPackReuse
pack.compression
pack.deltaCacheLimit
pack.deltaCacheSize
pack.indexVersion
pack.island
pack.islandCore
pack.packSizeLimit
pack.preferBitmapTips
pack.threads
pack.useBitmaps
pack.useSparse
pack.window
pack.windowMemory
pack.writeBitmapHashCache
pack.writeReverseIndex
pager.<cmd>
pretty.<name>
protocol.<name>.allow
protocol.allow
protocol.version
pull.ff
pull.octopus
pull.rebase
pull.twohead
push.default
push.followTags
push.gpgSign
push.negotiate
push.pushOption
push.recurseSubmodules
push.useForceIfIncludes
rebase.abbreviateCommands
rebase.autoSquash
rebase.autoStash
rebase.backend
rebase.forkPoint
rebase.instructionFormat
rebase.missingCommitsCheck
rebase.rescheduleFailedExec
rebase.stat
receive.advertiseAtomic
receive.advertisePushOptions
receive.autogc
receive.certNonceSeed
receive.certNonceSlop
receive.denyCurrentBranch
receive.denyDeleteCurrent
receive.denyDeletes
receive.denyNonFastForwards
receive.fsck.<msg-id>
receive.fsck.skipList
receive.fsckObjects
receive.hideRefs
receive.keepAlive
receive.maxInputSize
receive.procReceiveRefs
receive.shallowUpdate
receive.unpackLimit
receive.updateServerInfo
remote.<name>.fetch
remote.<name>.mirror
remote.<name>.partialclonefilter
remote.<name>.promisor
remote.<name>.proxy
remote.<name>.proxyAuthMethod
remote.<name>.prune
remote.<name>.pruneTags
remote.<name>.push
remote.<name>.pushurl
remote.<name>.receivepack
remote.<name>.skipDefaultUpdate
remote.<name>.skipFetchAll
remote.<name>.tagOpt
remote.<name>.uploadpack
remote.<name>.url
remote.<name>.vcs
remote.pushDefault
remotes.<group>
repack.packKeptObjects
repack.useDeltaBaseOffset
repack.useDeltaIslands
repack.writeBitmaps
rerere.autoUpdate
rerere.enabled
reset.quiet
sendemail.<identity>.*
sendemail.aliasFileType
sendemail.aliasesFile
sendemail.annotate
sendemail.bcc
sendemail.cc
sendemail.ccCmd
sendemail.chainReplyTo
sendemail.confirm
sendemail.envelopeSender
sendemail.forbidSendmailVariables
sendemail.from
sendemail.identity
sendemail.multiEdit
sendemail.signedoffbycc
sendemail.smtpBatchSize
sendemail.smtpDomain
sendemail.smtpEncryption
sendemail.smtpPass
sendemail.smtpReloginDelay
sendemail.smtpServer
sendemail.smtpServerOption
sendemail.smtpServerPort
sendemail.smtpUser
sendemail.smtpsslcertpath
sendemail.suppressFrom
sendemail.suppresscc
sendemail.thread
sendemail.to
sendemail.tocmd
sendemail.transferEncoding
sendemail.validate
sendemail.xmailer
sequence.editor
showBranch.default
splitIndex.maxPercentChange
splitIndex.sharedIndexExpire
ssh.variant
stash.showIncludeUntracked
stash.showPatch
stash.showStat
stash.useBuiltin
status.aheadBehind
status.displayCommentPrefix
status.relativePaths
status.renameLimit
status.showStash
status.showUntrackedFiles
status.submoduleSummary
submodule.<name>.active
submodule.<name>.branch
submodule.<name>.fetchRecurseSubmodules
submodule.<name>.ignore
submodule.<name>.update
submodule.<name>.url
submodule.active
submodule.alternateErrorStrategy
submodule.alternateLocation
submodule.fetchJobs
tag.forceSignAnnotated
tag.gpgSign
tag.sort
tar.umask
trace2.configParams
trace2.destinationDebug
trace2.envVars
trace2.eventBrief
trace2.eventNesting
trace2.eventTarget
trace2.maxFiles
trace2.normalBrief
trace2.normalTarget
trace2.perfBrief
trace2.perfTarget
transfer.advertiseSID
transfer.fsckObjects
transfer.hideRefs
transfer.unpackLimit
uploadarchive.allowUnreachable
uploadpack.allowAnySHA1InWant
uploadpack.allowFilter
uploadpack.allowReachableSHA1InWant
uploadpack.allowRefInWant
uploadpack.allowTipSHA1InWant
uploadpack.hideRefs
uploadpack.keepAlive
uploadpack.packObjectsHook
uploadpackfilter.<filter>.allow
uploadpackfilter.allow
uploadpackfilter.tree.maxDepth
url.<base>.insteadOf
url.<base>.pushInsteadOf
user.email
user.name
user.signingKey
user.useConfigOnly
versionsort.suffix
web.browser
worktree.guessRemote
html
unrecognized help format '%s'
GIT_MAN_VIEWER
no man viewer handled the request
git%s
MANPATH
'%s': unknown man viewer.
failed to exec '%s'
emacsclient
(woman "%s")
Failed to start emacsclient.
Failed to parse emacsclient version.
emacsclient version '%d' too old (< 22).
DISPLAY
kfmclient
/konqueror
%.*s/kfmclient
man:%s(1)
newTab
%s %s
INFOPATH
gitman
no info viewer handled the request
%s/git.html
HTML documentation is not provided by this distribution of git.
%s/%s.html
web--browse
Cannot come back to cwd
GIT_TEST_WRITE_REV_INDEX
--fix-thin
--strict
--fsck-objects
--verify
--verify-stat
--verify-stat-only
--promisor
--threads=
--pack_header=
bad %s
--show-resolving-progress
--report-end-of-input
--index-version=
--max-input-size=
--object-format=
unknown hash algorithm '%s'
--rev-index
--no-rev-index
--fix-thin cannot be used without --stdin
--stdin requires a git repository
--object-format cannot be used with --stdin
--verify with no packfile name given
fsck error in pack objects
object type mismatch at %s
pack.writereverseindex
packfile name '%s' does not end with '.%s'
Cannot open existing pack file '%s'
Cannot open existing pack idx file for '%s'
unable to create '%s'
cannot open packfile '%s'
pack signature mismatch
pack version %u unsupported
cannot fill %d bytes
early EOF
read error on input
used more bytes than were available
pack too large for current definition of off_t
pack exceeds maximum allowed size
Receiving objects
Indexing objects
pack is corrupted (SHA1 mismatch)
cannot fstat packfile
pack has junk at the end
confusion beyond insanity in parse_pack_objects()
offset value overflow for delta base object
delta base offset is out of bound
unknown object type %d
pack has bad object at offset %ju: %s
inflate returned %d
sha1_object
index-pack.c
data || obj_entry
cannot read existing object info %s
SHA1 COLLISION FOUND WITH %s !
cannot read existing object %s
invalid blob object %s
fsck error in packed object
data && "data can only be NULL for large _blobs_"
Not all child objects of %s are reachable
builtin/index-pack.c
parse_object_buffer transmogrified our buffer
cannot pread pack file
premature end of pack file, %ju byte missing
premature end of pack file, %ju bytes missing
serious inflate inconsistency
unable to read %s
Resolving deltas
GIT_FORCE_THREADS
unable to create thread: %s
REF_DELTA at offset %ju already resolved (duplicate base %s?)
threaded_second_pass
child_obj->real_type == OBJ_OFS_DELTA
failed to apply delta
resolve_delta
base->data
confusion beyond insanity
completed with %d local object
completed with %d local objects
Unexpected tail checksum for %s (disk corruption?)
pack has %d unresolved delta
pack has %d unresolved deltas
local object %s is corrupt
unable to deflate appended object (%d)
did not receive expected object %s
object %s: expected type %s, found %s
%s %-6s %ju %ju %ju
 %u %s
non delta: %d object
non delta: %d objects
chain length = %d: %lu object
chain length = %d: %lu objects
error while closing pack file
promisor
cannot store reverse index file
cannot write %s file '%s'
cannot close written %s file '%s'
core.repositoryformatversion
extensions.objectformat
%s already exists
re-init: ignored --initial-branch=%s
builtin/init-db.c
invalid value for shared_repository
core.sharedrepository
receive.denyNonFastforwards
Reinitialized existing shared Git repository in %s%s
Reinitialized existing Git repository in %s%s
Initialized empty shared Git repository in %s%s
Initialized empty Git repository in %s%s
permissions
specify that the git repository is to be shared amongst several users
initial-branch
override the name of the initial branch
object-format
hash
specify the hash algorithm to use
--separate-git-dir and --bare are mutually exclusive
cannot mkdir %s
cannot chdir to %s
%s (or --work-tree=<directory>) not allowed without specifying %s (or --git-dir=<directory>)
Cannot access work tree '%s'
--separate-git-dir incompatible with bare repository
unable to handle file type %d
unable to move %s to %s
gitdir: %s
GIT_DEFAULT_HASH
attempt to reinitialize repository with different hash
init.templatedir
refs
failed to set up refs db: %s
invalid initial branch name: '%s'
core.filemode
core.logallrefupdates
tXXXXXX
testing
CoNfIg
core.ignorecase
GIT_TEMPLATE_DIR
share/git-core/templates
templates not found in %s
not copying templates from '%s': %s
cannot stat template '%s'
cannot opendir '%s'
cannot readlink '%s'
cannot symlink '%s' '%s'
cannot copy '%s' to '%s'
ignoring template %s
/pack
/info
git init [-q | --quiet] [--bare] [--template=<template-directory>] [--shared[=<permissions>]] [<directory>]
in-place
edit files in place
trim-empty
trim empty trailers
where
where to place the new trailer
if-exists
action if trailer already exists
if-missing
action if trailer is missing
only-trailers
output only the trailers
only-input
do not apply config rules
unfold
join whitespace-continued values
parse
set parsing options
no-divider
do not treat --- specially
trailer(s) to add
--trailer with --only-input does not make sense
no input file given for in-place editing
builtin/interpret-trailers.c
git interpret-trailers [--in-place] [--trim-empty] [(--trailer <token>[(=|:)<value>])...] [<file>...]
%stag %s%s
could not read object %s
%stree %s%s
unknown type: %d
numbered
use [PATCH n/m] even with a single patch
no-numbered
use [PATCH] even with multiple patches
print patches to standard out
cover-letter
generate a cover letter
numbered-files
use simple number sequence for output file names
use <sfx> instead of '.patch'
start-number
start numbering patches at <n> instead of 1
reroll-count
mark the series as Nth re-roll
filename-max-length
max length of output filename
use [RFC PATCH] instead of [PATCH]
cover-from-description
cover-from-description-mode
generate parts of a cover letter based on a branch's description
subject-prefix
use [<prefix>] instead of [PATCH]
store resulting files in <dir>
keep-subject
don't strip/add [PATCH]
no-binary
don't output binary diffs
zero-commit
output all-zero hash in From header
ignore-if-in-upstream
don't include a patch matching a commit upstream
no-stat
show patch format instead of default (patch + stat)
Messaging
add-header
add email header
email
add To: header
add Cc: header
from
ident
set From address to <ident> (or committer ident if absent)
in-reply-to
make first mail a reply to <message-id>
attach
attach the patch
inline
inline the patch
thread
enable message threading, styles: shallow, deep
signature
add a signature
base-commit
add prerequisite tree info to the patch series
signature-file
add a signature from a file
don't print the patch filenames
show progress while generating patches
interdiff
show changes against <rev> in cover letter or single patch
show changes against <refspec> in cover letter or single patch
creation-factor
percentage by which creation is weighted
%s v%s
To: 
    
Cc: 
invalid ident line: %s
-n and -k are mutually exclusive
--subject-prefix/--rfc and -k are mutually exclusive
unrecognized argument: %s
--name-only does not make sense
--name-status does not make sense
--check does not make sense
--stdout, --output, and --output-directory are mutually exclusive
could not create directory '%s'
--interdiff requires --cover-letter or single patch
Interdiff:
Interdiff against v%d:
--creation-factor requires --range-diff
--range-diff requires --cover-letter or single patch
Range-diff:
Range-diff against v%d:
unable to read signature file '%s'
cover
Generating patches
failed to create output files
--%s%s--
Could not find a tracked remote branch, please specify <upstream> manually.
unknown commit %s
format.subjectprefix
format.filenamemaxlength
format.encodeemailheaders
log.abbrevcommit
log.diffmerges
log.showroot
color.decorate.
log.showsignature
incomplete
Final output: %d %s
git show %s: bad file
show_tag_object
log.c
type == OBJ_TAG
Tagger
%s%s
suppress diff output
show source
use-mailmap
use mail map file
mailmap
decorate-refs
only decorate refs that match <pattern>
decorate-refs-exclude
do not decorate refs that match <pattern>
decorate
decorate options
range:file
trace the evolution of line range <start>,<end> or function :<funcname> in <file>
-L<range>:<file> cannot be used with pathspec
invalid --decorate option: %s
builtin/log.c
git log [<options>] [<revision-range>] [[--] <path>...]
git show [<options>] <object>...
.patch
RFC PATCH
two output directories?
to: 
cc: 
deep
format.headers without value
format.signoff
format.signaturefile
format.coverletter
format.outputdirectory
format.useautobase
whenAble
format.coverfromdescription
PATCH
git format-patch [<options>] [<since> | <revision-range>]
subject
%s: invalid cover from description mode
need exactly one range
not a range
%s..%s
failed to infer range-diff origin of current series
using '%s' as range-diff origin of current series
requested automatic base selection but a commit was provided
unexpected automatic base selection method
failed to resolve '%s' as a valid ref
upstream base
could not find exact merge base
failed to get upstream, if you want to record base commit automatically,
please use git branch --set-upstream-to to track a remote branch.
Or you could specify base commit by --base=<base-commit-id> manually
failed to find exact merge base
base commit should be the ancestor of revision list
base commit shouldn't be in revision list
rev_list
cannot get patch id
insane in-reply-to: %s
%s.%ju.git.%s
cover letter needs email format
failed to create cover-letter file
*** SUBJECT HERE ***
*** BLURB HERE ***
--no-notes
--notes
--notes=%s
base-commit: %s
prerequisite-patch-id: %s
cannot open patch file %s
git cherry [-v] [<upstream> [<head> [<limit>]]]
%c %s
%c %s %s
tree-ish %s not found.
bad tree-ish %s
unable to read tree entries %s
identify the file status with tags
use lowercase letters for 'assume unchanged' files
use lowercase letters for 'fsmonitor clean' files
show cached files in the output (default)
deleted
show deleted files in the output
modified
show modified files in the output
show other files in the output
show ignored files in the output
show staged contents' object name in the output
killed
show files on the filesystem that need to be removed
show 'other' directories' names only
show line endings of files
empty-directory
don't show empty directories
show unmerged files in the output
resolve-undo
show resolve-undo information
skip files matching pattern
exclude-from
exclude patterns are read from <file>
exclude-per-directory
read additional per-directory exclude patterns in <file>
add the standard git exclusions
make the output relative to the project top directory
recurse through submodules
error-unmatch
if any <file> is not in the index, treat this as an error
with-tree
tree-ish
pretend that paths removed since <tree-ish> are still present
show debugging data
deduplicate
suppress duplicate entries
ls-files --recurse-submodules unsupported mode
ls-files --recurse-submodules does not support --error-unmatch
ls-files -i must be used with either -o or -c
ls-files --ignored needs some exclude pattern
ls-files --with-tree is incompatible with -s or -u
Did you forget to 'git add'?
builtin/ls-files.c
git ls-files [<options>] [<file>...]
cannot lstat '%s'
git ls-files: internal error - directory entry not superset of prefix
i/%-5s w/%-5s attr/%-17s
killed-file %.*s not found
git ls-files: internal error - cache entry not superset of prefix
%s%06o %s %d
  ctime: %u:%u
  mtime: %u:%u
  dev: %u
ino: %u
  uid: %u
gid: %u
  size: %u
flags: %x
do not print remote URL
path of git-upload-pack on the remote host
limit to tags
heads
limit to heads
do not show peeled tags
get-url
take url.<base>.insteadOf into account
exit with exit code 2 if no matching refs are found
symref
show underlying ref in addition to the object pointed by it
*/%s
bad repository '%s'
No remote configured to list refs from.
remote %s has no configured URL
From %s
ref: %s
git ls-remote [--heads] [--tags] [--refs] [--upload-pack=<exec>]
                     [-q | --quiet] [--exit-code] [--get-url]
                     [--symref] [<repository> [<refs>...]]
only show trees
recurse into subtrees
show trees when recursing
terminate entries with NUL byte
include object size
list only filenames
name-status
use full path names
list entire tree; not just current directory (implies --full-name)
not a tree object
git ls-tree [<options>] <tree-ish> [<path>...]
%06o %s %s %7s
keep subject
keep non patch brackets in subject
copy Message-ID to the end of commit message
re-code metadata to i18n.commitEncoding
disable charset re-coding of metadata
encoding
re-code metadata to this encoding
use scissors
<action>
action when quoted CR is found
inbody-headers
use headers in message's body
builtin/mailinfo.c
invalid meta_charset.policy
git mailinfo [<options>] <msg> <patch> < mail >info
unknown option: %s
cannot split patches from stdin
cannot stat %s
cannot split patches from %s
cannot open mbox %s
empty mbox: '%s'
cannot read mbox %s
corrupt mailbox
builtin/mailsplit.c
cannot open output file '%s'
cannot write output
cannot read mbox
cannot open mail %s
cannot read mail %s
cannot opendir %s
output all common ancestors
octopus
find ancestors for a single n-way merge
independent
list revs not reachable from others
is-ancestor
is the first one ancestor of the other?
fork-point
find where <commit> forked from reflog of <ref>
--is-ancestor cannot be used with --all
--independent cannot be used with --all
git merge-base [-a | --all] <commit> <commit>...
git merge-base [-a | --all] --octopus <commit>...
git merge-base --independent <commit>...
git merge-base --is-ancestor <commit> <commit>
git merge-base --fork-point <ref> [<commit>]
--is-ancestor takes exactly two commits
Not a valid object name: '%s'
Not a valid commit name %s
send results to standard output
diff3
use a diff3 based merge
for conflicts, use our version
for conflicts, use their version
union
for conflicts, use a union version
marker-size
for conflicts, use this marker size
do not warn about conflicts
set labels for file1/orig-file/file2
failed to redirect stderr to /dev/null
Cannot merge binary files: %s
Could not open %s for writing
Could not write to %s
Could not close %s
builtin/merge-file.c
too many labels on the command line
git merge-file [<options>] [-L <name1> [-L <orig> [-L <name2>]]] <file1> <orig-file> <file2>
git merge-index [-o] [-q] <merge-program> (-a | [--] [<filename>...])
git merge-index: unknown option %s
merge program failed
git merge-index: %s not in the cache
builtin/merge-index.c
read_cache failed
builtin/merge-ours.c
-subtree
could not parse object '%s'
cannot handle more than %d bases. Ignoring %s.
not handling anything other than two heads merge.
could not resolve ref '%s'
Merging %s with %s
GITHEAD_%s
unknown rev %s
%s is not a tree
result
their
  %-6s %o %s %s
added in remote
added in both
added in local
removed in both
changed in both
removed in local
removed in remote
unable to generate diff
GIT_TEST_MERGE_ALGORITHM
--abort expects no arguments
There is no merge to abort (MERGE_HEAD missing).
--quit expects no arguments
--continue expects no arguments
There is no merge in progress (MERGE_HEAD missing).
You have not concluded your merge (MERGE_HEAD exists).
Please, commit your changes before you merge.
You have not concluded your merge (MERGE_HEAD exists).
You have not concluded your cherry-pick (CHERRY_PICK_HEAD exists).
Please, commit your changes before you merge.
You have not concluded your cherry-pick (CHERRY_PICK_HEAD exists).
You cannot combine --squash with --no-ff.
You cannot combine --squash with --commit.
No commit specified and merge.defaultToUpstream not set.
Squash commit into empty head not supported yet
Non-fast-forward commit does not make sense into an empty head
%s - not something we can merge
Can merge only exactly one commit into empty head
initial pull
updating ORIG_HEAD
refusing to merge unrelated histories
Updating %s..%s
Fast-forward
 (no commit created; -m option ignored)
Not possible to fast-forward, aborting.
Trying merge strategy %s...
No merge strategy handled the merge.
Merge with strategy %s failed.
Using the %s to prepare resolving by hand.
Automatic merge went well; stopped before committing as requested
git merge [<options>] [<commit>...]
git merge --abort
git merge --continue
do not show a diffstat at the end of the merge
show a diffstat at the end of the merge
(synonym to --stat)
add (at most <n>) entries from shortlog to merge commit message
create a single commit instead of doing a merge
perform a commit if the merge succeeds (default)
edit message before committing
allow fast-forward (default)
ff-only
abort if fast-forward is not possible
verify-signatures
verify that the named commit has a valid GPG signature
strategy
merge strategy to use
strategy-option
option=value
option for selected merge strategy
merge commit message (for a non-fast-forward merge)
abort the current in-progress merge
--abort but leave index and working tree alone
continue the current in-progress merge
allow-unrelated-histories
allow merging unrelated histories
autostash
automatically stash/stash pop before and after
bypass pre-merge-commit and commit-msg hooks
builtin/merge.c
git-merge-
Could not find merge strategy '%s'.
Available strategies are:
Available custom strategies are:
resolve
subtree
switch `m' requires a value
-F cannot be negated
option `%s' requires a value
could not read file '%s'
branch.
.mergeoptions
merge.diffstat
merge.verifysignatures
merge.defaulttoupstream
gpg.mintrustlevel
merge.autostash
Bad branch.%s.mergeoptions string: %s
branch.*.mergeoptions
Bad value '%s' in environment '%s'
No current branch.
No remote for the current branch.
No default upstream defined for the current branch.
No remote-tracking branch for %s from %s
not something we can merge
not something we can merge in %s: %s
'%s' does not point to a commit
branch '%s' of .
tag '%s' of .
remote-tracking branch '%s' of .
branch '%s'%s of .
 (early part)
%s '%s'
commit '%s'
read-tree failed
Already up to date. (nothing to squash)
Already up to date.
Squashed commit of the following:
commit %s
Unable to write index.
In-index merge
the control must not reach here under --squash
Empty commit message.
Not committing merge; use 'git commit' to complete the merge.
Could not read from '%s'
could not run stash.
stash failed
not a valid object: %s
--reset
Not handling anything other than two heads merge.
Unknown option for merge-recursive: -X%s
unable to write %s
Merge made by the '%s' strategy.
Squash commit -- not updating HEAD
No merge message -- not updating HEAD
Wonderful.
Automatic merge failed; fix conflicts and then commit the result.
Rewinding the tree to pristine...
Trying really trivial in-index merge...
Nope.
could not read from stdin
tag on stdin did not pass our strict fsck check
tag on stdin did not refer to a valid object
unable to write tag file
git mktag
warning: tag input does not pass fsck: %s
error: tag input does not pass fsck: %s
builtin/mktag.c
could not read tagged object '%s'
object '%s' tagged as '%s', but is a '%s' type
input is NUL terminated
missing
allow missing objects
allow creation of more than one tree
input format error: (blank line only valid in batch mode)
builtin/mktree.c
git mktree [-z] [--missing] [--batch]
input format error: %s
invalid quoting
entry '%s' object type (%s) doesn't match mode type (%s)
entry '%s' object %s is unavailable
entry '%s' object %s is a %s but specified type was (%s)
path %s contains slash
unrecognized subcommand: %s
object directory containing set of packfile and pack-index pairs
git multi-pack-index [<options>] write [--preferred-pack=<pack>]
git multi-pack-index [<options>] verify
git multi-pack-index [<options>] expire
git multi-pack-index [<options>] repack [--batch-size=<size>]
batch-size
during repack, collect pack-files of smaller size into a batch that is larger than this size
builtin/multi-pack-index.c
preferred-pack
pack for reuse when computing a multi-pack bitmap
force move/rename even if target exists
skip move/rename errors
destination '%s' is not a directory
Checking rename of '%s' to '%s'
bad source
can not move directory into itself
cannot move directory over file
source directory is empty
not under version control
conflicted
destination exists
overwriting '%s'
Cannot overwrite
multiple sources for the same target
destination directory does not exist
%s, source=%s, destination=%s
Renaming %s to %s
renaming '%s' failed
cmd_mv
mv.c
pos >= 0
git mv [<options>] <source>... <destination>
Directory %s is in index and no submodule?
Please stage your changes to .gitmodules or stash them to proceed
%.*s is in index
print only ref-based names (no object names)
only use tags to name the commits
only use refs matching <pattern>
ignore refs matching <pattern>
list all commits reachable from all refs
read from stdin
allow to print `undefined` names (default)
peel-tag
dereference tags in the input (internal use)
Specify either a list, or --all, not both!
Could not get sha1 for %s. Skipping.
Could not get object for %s. Skipping.
Could not get commit for %s. Skipping.
git name-rev [<options>] <commit>...
git name-rev [<options>] --all
git name-rev [<options>] --stdin
%s^0
%.*s~%d^%d
%.*s^%d
%.*s%s
%.*s (%s)
cannot describe '%s'
undefined
notes-ref
use notes from <notes-ref>
GIT_NOTES_REF
remove
get-ref
unknown subcommand: %s
git notes [--ref <notes-ref>] [list [<object>]]
git notes [--ref <notes-ref>] add [-f] [--allow-empty] [-m <msg> | -F <file> | (-c | -C) <object>] [<object>]
git notes [--ref <notes-ref>] copy [-f] <from-object> <to-object>
git notes [--ref <notes-ref>] append [--allow-empty] [-m <msg> | -F <file> | (-c | -C) <object>] [<object>]
git notes [--ref <notes-ref>] edit [--allow-empty] [<object>]
git notes [--ref <notes-ref>] show [<object>]
git notes [--ref <notes-ref>] merge [-v | -q] [-s <strategy>] <notes-ref>
git notes merge --commit [-v | -q]
git notes merge --abort [-v | -q]
git notes [--ref <notes-ref>] remove [<object>...]
git notes [--ref <notes-ref>] prune [-n] [-v]
git notes [--ref <notes-ref>] get-ref
too many arguments
failed to resolve '%s' as a valid ref.
no note found for object %s.
git notes [list [<object>]]
refs/notes/
refusing to %s notes in %s (outside of refs/notes/)
note contents as a string
note contents in a file
reuse and edit specified note object
reuse specified note object
allow storing empty note
replace existing notes
Cannot add notes. Found existing notes for object %s. Use '-f' to overwrite existing notes
Overwriting existing notes for object %s
builtin/notes.c
combine_notes_overwrite failed
Notes added by 'git notes add'
Removing note for object %s
Notes removed by 'git notes add'
could not open or read '%s'
failed to read object '%s'.
cannot read note data from non-blob object '%s'.
git notes add [<options>] [<object>]
NOTES_EDITMSG
could not create file '%s'
please supply the note contents using either -m or -F option
--stat
unable to start 'show' for object '%s'
could not read 'show' output
failed to finish 'show' for object '%s'
unable to write note object
the note contents have been left in %s
read objects from stdin
for-rewrite
load rewriting config for <command> (implies --stdin)
too few arguments
Cannot copy notes. Found existing notes for object %s. Use '-f' to overwrite existing notes
missing notes on source object %s. Cannot copy.
Notes added by 'git notes copy'
git notes copy [<options>] <from-object> <to-object>
git notes copy --stdin [<from-object> <to-object>]...
malformed input line: '%s'.
failed to copy notes from '%s' to '%s'
The -m/-F/-c/-C options have been deprecated for the 'edit' subcommand.
Please use 'git notes add -f -m/-F/-c/-C' instead.
Notes added by 'git notes %s'
Notes removed by 'git notes %s'
git notes edit [<object>]
git notes append [<options>] [<object>]
git notes show [<object>]
General options
Merge options
resolve notes conflicts using the given strategy (manual/ours/theirs/union/cat_sort_uniq)
Committing unmerged notes
finalize notes merge by committing unmerged notes
Aborting notes merge resolution
abort notes merge
cannot mix --commit, --abort or -s/--strategy
must specify a notes ref to merge
unknown -s/--strategy: %s
local ref %s is outside of refs/notes/
notes.%s.mergeStrategy
notes: Merged notes from %s into %s
NOTES_MERGE_PARTIAL
NOTES_MERGE_REF
a notes merge into %s is already in-progress at %s
failed to store link to current notes ref (%s)
Automatic notes merge failed. Fix conflicts in %s and commit the result with 'git notes merge --commit', or abort the merge with 'git notes merge --abort'.
NOTES_MERGE_WORKTREE
git notes merge [<options>] <notes-ref>
git notes merge --commit [<options>]
git notes merge --abort [<options>]
failed to delete ref NOTES_MERGE_PARTIAL
failed to delete ref NOTES_MERGE_REF
failed to remove 'git notes merge' worktree
failed to read ref NOTES_MERGE_PARTIAL
could not find commit from NOTES_MERGE_PARTIAL.
could not parse commit from NOTES_MERGE_PARTIAL.
failed to resolve NOTES_MERGE_REF
failed to finalize notes merge
notes: 
unknown notes merge strategy %s
attempt to remove non-existent note is not an error
read object names from the standard input
Notes removed by 'git notes remove'
git notes remove [<object>]
Failed to resolve '%s' as a valid ref.
Object %s has no note
do not remove, show only
report pruned notes
Notes removed by 'git notes prune'
git notes prune [<options>]
git notes get-ref
unable to get size of %s
builtin/pack-objects.c
when e->type is a delta, it must belong to a pack
unable to parse object header of %s
index-version
<version>[,<offset>]
write the pack index file in the specified idx format version
max-pack-size
maximum size of each output pack file
ignore borrowed objects from alternate object store
ignore packed objects
window
limit pack window by objects
window-memory
limit pack window by memory in addition to object limit
maximum length of delta chain allowed in the resulting pack
reuse-delta
reuse existing deltas
reuse-object
reuse existing objects
delta-base-offset
use OFS_DELTA objects
use threads when searching for best delta matches
non-empty
do not create an empty pack output
revs
read revision arguments from standard input
unpacked
limit the objects to those that are not yet packed
include objects reachable from any reference
include objects referred by reflog entries
indexed-objects
include objects referred to by the index
read packs from stdin
output pack to stdout
include tag objects that refer to objects to be packed
keep-unreachable
keep unreachable objects
pack-loose-unreachable
pack loose unreachable objects
unpack-unreachable
unpack unreachable objects newer than <time>
use the sparse reachability algorithm
thin
create thin packs
create packs suitable for shallow fetches
honor-pack-keep
ignore packs that have companion .keep file
keep-pack
ignore this pack
compression
pack compression level
keep-true-parents
do not hide commits by grafts
use-bitmap-index
use a bitmap index if available to speed up counting objects
write-bitmap-index
write a bitmap index together with the pack index
write-bitmap-index-quiet
write a bitmap index if possible
handling for missing objects
exclude-promisor-objects
do not pack objects in promisor packfiles
delta-islands
respect islands during delta compression
uri-protocol
protocol
exclude any configured uploadpack.blobpackfileuri with this protocol
GIT_TEST_PACK_SPARSE
delta chain depth %d is too deep, forcing %d
pack.deltaCacheLimit is too high, forcing %d
--objects-edge-aggressive
--objects-edge
--reflog
--indexed-objects
--unpacked
bad pack compression level %d
--max-pack-size cannot be used to build a pack for transfer
minimum pack size limit is 1 MiB
--thin cannot be used to build an indexable pack
--keep-unreachable and --unpack-unreachable are incompatible
cannot use --filter without --stdout
cannot use --filter with --stdin-packs
cannot use internal rev list with --stdin-packs
--topo-order
enumerate-objects
Enumerating objects
prepare-pack
write-pack-file
Total %u (delta %u), reused %u (delta %u), pack-reused %u
unsupported index version %s
bad index version '%s'
option_parse_missing_action
pack-objects.c
!unset
allow-any
allow-promisor
invalid value for --missing
./pack-objects.h
OBJ_ANY cannot be set in pack-objects code
delta
show_object__ma_allow_any
arg_missing_action == MA_ALLOW_ANY
show_object__ma_allow_promisor
arg_missing_action == MA_ALLOW_PROMISOR
pack.windowmemory
pack.deltacachelimit
pack.writebitmaphashcache
pack.usebitmaps
pack.allowpackreuse
value of uploadpack.blobpackfileuri must be of the form '<object-hash> <pack-hash> <uri>' (got '%s')
object already configured in another uploadpack.blobpackfileuri (got '%s')
git pack-objects --stdout [<options>...] [< <ref-list> | < <object-list>]
git pack-objects [<options>...] <base-name> [< <ref-list> | < <object-list>]
could not find pack '%s'
stdin_packs_found
stdin_packs_hints
could not get type of object %s in pack %s
loose object at %s could not be examined
BUG: fgets returned NULL, not EOF, not error!
fgets
expected edge object ID, got garbage:
expected object ID, got garbage:
--shallow 
not an object name '%s'
not a rev '%s'
bad revision '%s'
unable to add recent objects
get_object_list_from_bitmap
reuse_packfile_objects
cannot open pack index
unable to force loose object
loosen_unused_packed_objects/loosened
unable to pack objects reachable from tag %s
unable to get type of object %s
Compressing objects
inconsistency with delta count
Counting objects
invalid type %d
delta base offset overflow in pack for %s
delta base offset out of bound for %s
'size' is supposed to be the object size!
confusing delta dfs state in first pass: %d
confusing delta dfs state in second pass: %d
Delta compression using up to %d threads
object %s cannot be read
object %s inconsistent object length (%ju vs %ju)
suboptimal pack - out of memory
configured exclusion wasn't configured
Writing objects
<stdout>
write_pack_file
pack_to_stdout
failed to stat %s
failed utime() on %s
%s.bitmap
wrote %u objects while expecting %u
write_pack_file/wrote
ordered %u objects, expected %u
write_reused_pack_one
type >= 0
base_offset != 0
expected object at offset %ju in pack %s
find_reused_offset
recursive delta detected for object %s
delta size changed
deflate error (%d)
write_reuse_object: could not locate %s, expected at offset %ju in pack %s
bad packed object CRC for %s
corrupt packed object for %s
--verbose
--alt-odb
--i-still-use-this
'git pack-redundant' is nominated for removal.
If you still use this command, please add an extra
option, '--i-still-use-this', on the command line
and let us know you still use it by sending an e-mail
to <git@vger.kernel.org>.  Thanks.
Zero packs found!
Bad object ID on stdin: %s
There are %lu packs available in alt-odbs.
The smallest (bytewise) set of packs is:
containing %lu duplicate objects with a total size of %lukb.
A total of %lu unique objects were considered.
Redundant packs (with indexes):
%luMB of redundant packs in total.
Bad pack filename: %s
Filename %s not found in packed_git
pack everything
prune loose refs (default)
git pack-refs [<options>]
--stable
--unstable
patchid.stable
diff-tree 
diff 
index 
@@ -
git prune-packed [-n | --dry-run] [-q | --quiet]
report pruned objects
expire objects older than <time>
limit traversal to objects outside promisor packfiles
cannot prune in a precious-objects repo
%s/pack
git prune [-n] [-v] [--progress] [--expire <time>] [--] [<head>...]
bad sha1 file: %s
Removing stale temporary file %s
Unable to open directory %s
tmp_
Updating an unborn branch with changes added to the index.
pull with rebase
please commit or stash them.
fetch updated the current branch head.
fast-forwarding your working tree from
commit %s.
Cannot fast-forward your working tree.
After making sure that you saved anything precious from
$ git diff %s
output, run
$ git reset --hard
to recover.
Cannot merge multiple branches into empty head.
Cannot rebase onto multiple branches.
cannot rebase with locally recorded submodule modifications
--ff-only
rebase.autostash
control for recursive fetching of submodules
Options related to merging
(false|true|merges|preserve|interactive)
incorporate changes by rebasing rather than merging
allow fast-forward
Options related to fetching
force overwrite of local branch
number of submodules pulled in parallel
--rebase
Invalid value for %s: %s
git pull [<options>] [<repository> [<refspec>...]]
--no-ff
--ff
Invalid value for pull.ff: %s
branch.%s.rebase
--fork-point
heads/
refs/remotes/%s/%s
get_upstream_branch
pull.c
curr_branch_remote
--recurse-submodules=on
builtin/pull.c
submodule recursion option not understood
--show-forced-updates
--no-show-forced-updates
refspecs without repo?
not-for-merge
There is no candidate for rebasing against among the refs that you just fetched.
There are no candidates for merging among the refs that you just fetched.
Generally this means that you provided a wildcard refspec which had no
matches on the remote end.
You asked to pull from the remote '%s', but did not specify
a branch. Because this is not the default configured remote
for your current branch, you must specify a branch on the command line.
You are not currently on a branch.
Please specify which branch you want to rebase against.
Please specify which branch you want to merge with.
See git-pull(1) for details.
    git pull %s %s
<remote>
<branch>
There is no tracking information for the current branch.
If you wish to set tracking information for this branch you can do so with:
    git branch --set-upstream-to=%s/%s %s
Your configuration specifies to merge with the ref '%s'
from the remote, but no such ref was fetched.
unable to access commit %s
Pulling without specifying how to reconcile divergent branches is
discouraged. You can squelch this message by running one of the following
commands sometime before your next pull:
  git config pull.rebase false  # merge (the default strategy)
  git config pull.rebase true   # rebase
  git config pull.ff only       # fast-forward only
You can replace "git config" with "git config --global" to set a default
preference for all repositories. You can also pass --rebase, --no-rebase,
or --ff-only on the command line to override the configured default per
invocation.
--cleanup=%s
--no-autostash
--autostash
--allow-unrelated-histories
--rebase-merges
--preserve-merges
--interactive
--verify-signatures
ignoring --verify-signatures for rebase
--onto
--checkout
repository
push all refs
mirror all refs
delete refs
push tags (can't be used with --all or --mirror)
force updates
force-with-lease
<refname>:<expect>
require old value of ref to be at this value
force-if-includes
require remote updates to be integrated locally
(check|on-demand|no)
control recursive pushing of submodules
use thin pack
receive pack program
set upstream for git pull/status
prune locally removed refs
bypass pre-push hook
follow-tags
push missing but relevant tags
signed
(yes|no|if-asked)
GPG sign the push
request atomic transaction on remote side
push-option
--delete is incompatible with --all, --mirror and --tags
--delete doesn't make sense without any refs
refs/tags/*
No configured push destination.
Either specify the URL from the command-line or configure a remote repository using
    git remote add <name> <url>
and then push using the remote name
    git push <name>
--all and --tags are incompatible
--all can't be combined with refspecs
--mirror and --tags are incompatible
--mirror can't be combined with refspecs
--all and --mirror are incompatible
push options must not have new line characters
push.followtags
push.gpgsign
if-asked
Invalid value for '%s'
push.recursesubmodules
push.pushoption
color.push.
push.useforceifincludes
git push [<options>] [<repository> [<refspec>...]]
tag shorthand without <tag>
:refs/tags/%s
--delete only accepts plain target ref names
%s%s:%s
%s:%s
You didn't specify any refspecs to push, and push.default is "nothing".
The current branch %s has no upstream branch.
To push the current branch and set the remote as upstream, use
    git push --set-upstream %s %s
The current branch %s has multiple upstream branches, refusing to push.
You are pushing to remote '%s', which is not the upstream of
your current branch '%s', without telling me what to push
to update which remote branch.
To choose either option permanently, see push.default in 'git help config'.
The upstream branch of your current branch does not match
the name of your current branch.  To push to the upstream branch
on the remote, use
    git push %s HEAD:%s
To push to the branch of the same name on the remote, use
    git push %s HEAD
receivepack
underlying transport does not support --%s option
Pushing to %s
builtin/push.c
transport_push
failed to push some refs to '%s'
no-dual-color
use simple diff colors
passed to 'git log'
left-only
only emit output related to the first range
right-only
only emit output related to the second range
not a commit range: '%s'
single arg format must be symmetric range
%s..%.*s
%.*s..%s
need two commit ranges
git range-diff [<options>] <old-base>..<old-tip> <new-base>..<new-tip>
git range-diff [<options>] <old-tip>...<new-tip>
git range-diff [<options>] <base> <old-tip> <new-tip>
index-output
write resulting index to <file>
empty
only empty the index
Merging
perform a merge in addition to a read
trivial
3-way merge if no file level merging required
3-way merge in presence of adds and removes
same as -m, but discard unmerged entries
<subdirectory>/
read the tree into the index under <subdirectory>/
update working tree with merge result
gitignore
allow explicitly ignored files to be overwritten
don't check the working tree after merging
don't update the index or the work tree
no-sparse-checkout
skip applying sparse checkout filter
debug-unpack
debug unpack-trees
suppress feedback messages
Which one? -m, --reset, or --prefix?
You need to resolve your current index first
failed to unpack tree object %s
read-tree: emptying the index with no arguments is deprecated; use --empty
passing trees as arguments contradicts --empty
-u and -i at the same time makes no sense
%s is meaningless without -m, --reset, or --prefix
--exclude-per-directory is meaningless unless -u
you must specify at least one tree to merge
builtin/read-tree.c
more than one --exclude-per-directory given.
git read-tree [(-m [--trivial] [--aggressive] | --reset | --prefix=<prefix>) [-u [--exclude-per-directory=<gitignore>] | -i]] [--no-sparse-checkout] [--index-output=<file>] (--empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])
I cannot read more than %d trees
* %d-way merge
ent#%d
%06o #%d %s %.8s
(missing)
(conflict)
keep-empty
keep commits which start empty
allow commits with empty messages
rebase-merges
rebase merge commits
rebase-cousins
keep original branch points of cousins
autosquash
move commits that begin with squash!/fixup!
sign commits
display a diffstat of what changed upstream
continue rebase
skip commit
edit-todo
edit the todo list
show the current patch
shorten-ids
shorten commit ids in the todo list
expand-ids
expand commit ids in the todo list
check-todo-list
check the todo list
rearrange-squash
rearrange fixup/squash lines
add-exec-commands
insert exec commands in todo list
onto
restrict-revision
restrict revision
squash-onto
squash onto
the upstream commit
head name
rebase strategy
strategy-opts
strategy options
switch-to
the branch or commit to checkout
onto-name
onto name
the command to run
reschedule-failed-exec
automatically re-schedule any `exec` that fails
--[no-]rebase-cousins has no effect without --rebase-merges
rebase onto given branch instead of upstream
keep-base
use the merge-base of upstream and branch as the current base
allow pre-rebase hook to run
be quiet. implies --no-stat
do not show diffstat of what changed upstream
add a Signed-off-by trailer to each commit
make committer date match author date
reset-author-date
ignore author date and use current date
synonym of --reset-author-date
passed to 'git apply'
ignore changes in whitespace
force-rebase
cherry-pick all commits, even if unchanged
skip current patch and continue
abort and check out the original branch
abort but keep HEAD where it is
edit the todo list during an interactive rebase
show the patch file being applied or merged
use apply strategies to rebase
use merging strategies to rebase
let the user edit the list of commits to rebase
preserve-merges
(DEPRECATED) try to recreate merges instead of ignoring them
{drop,keep,ask}
how to handle commits that become empty
move commits that begin with squash!/fixup! under -i
add exec lines after each commit of the editable list
allow rebasing commits with empty messages
try to rebase merges instead of skipping them
use 'merge-base --fork-point' to refine upstream
use the given merge strategy
option
pass the argument through to the merge strategy
rebase all reachable commits up to the root(s)
reapply-cherry-picks
apply all changes, even those already present upstream
%s/applying
It looks like 'git am' is in progress. Cannot rebase.
%s/rewritten
%s/interactive
git rebase --preserve-merges is deprecated. Use --rebase-merges instead.
cannot combine '--keep-base' with '--onto'
cannot combine '--keep-base' with '--root'
cannot combine '--root' with '--fork-point'
No rebase in progress?
The --edit-todo action can only be used during interactive rebase.
builtin/rebase.c
interactive-exec
Cannot read HEAD
could not read index
You must edit all merge conflicts and then
mark them as resolved using git add
could not discard worktree changes
could not move back to %s
could not remove '%s'
action: %d
git rebase (--continue | --abort | --skip)
rm -fr "%s"
It seems that there is already a %s directory, and
I wonder if you are in the middle of another rebase.  If that is the
case, please try
If that is not the case, please
and run me again.  I am stopping in case you still have something
valuable there.
--whitespace=fix
--whitespace=strip
switch `C' expects a numerical value
--whitespace=
Invalid whitespace option: '%s'
--empty
--reapply-cherry-picks
-S%s
--exec
exec %s
no-rebase-cousins
Unknown mode: %s
--ignore-whitespace
--committer-date-is-author-date
--ignore-date
 --%s
--strategy requires --merge or --interactive
unhandled rebase type (%d)
--root without --onto
 --progress
cannot combine apply options with merge options
Unknown rebase backend: %s
options.type was just set above; should be unreachable.
--reschedule-failed-exec requires --exec or --interactive
cannot combine '--signoff' with '--preserve-merges'
--signoff
cannot combine '--preserve-merges' with '--rebase-merges'
error: cannot combine '--preserve-merges' with '--reschedule-failed-exec'
invalid upstream '%s'
Could not create new root commit
--root
'%s': need exactly one merge base with branch
'%s': need exactly one merge base
Does not point to a valid commit '%s'
fatal: no such branch/commit '%s'
No such ref: %s
Could not resolve HEAD to a revision
unexpected number of arguments left to parse
Please commit or stash them.
%s: checkout %s
could not switch to %s
HEAD is up to date.
Current branch %s is up to date.
HEAD is up to date, rebase forced.
Current branch %s is up to date, rebase forced.
The pre-rebase hook refused to rebase.
Changes to %s:
Changes from %s to %s:
Could not detach HEAD
Fast-forwarded %s to %s.
rebase finished: %s onto %s
detached HEAD
Fast-forwarded
--no-keep-empty
--keep-empty
git rebase--interactive [<options>]
rebase.abbreviatecommands
a base commit must be provided with --upstream or --onto
invalid command '%d'
could not generate todo list
unusable todo list
%s...%s
could not create temporary %s
could not mark as interactive
rebase-merge/interactive
rebase-merge/squash-onto
could not read '%s'.
unusable todo list: '%s'
could not write '%s'.
unrecognized empty type '%s'; valid values are "drop", "keep", and "ask".
git rebase [-i] [options] [--exec <cmd>] [--onto <newbase> | --keep-base] [<upstream> [<branch>]]
git rebase [-i] [options] [--exec <cmd>] [--onto <newbase>] --root [<branch>]
git rebase --continue | --abort | --skip | --edit-todo
rebase.autosquash
rebase.reschedulefailedexec
rebase.forkpoint
rebase-merge
edit_todo
show_current_patch
rebase (%s)
could not get 'onto': '%s'
orig-head
invalid orig-head: '%s'
allow_rerere_autoupdate
--rerere-autoupdate
--no-rerere-autoupdate
ignoring invalid allow_rerere_autoupdate: '%s'
gpg_sign_opt
strategy_opts
exec commands cannot contain newlines
empty exec command
%s requires the merge backend
Please specify which branch you want to rebase against.
See git-rebase(1) for details.
    git rebase '<branch>'
If you wish to set tracking information for this branch you can do so with:
    git branch --set-upstream-to=%s/<branch> %s
GIT_CHERRY_PICK_HELP
GIT_SEQUENCE_EDITOR
state_dir
upstream_name
head_name
orig_head
onto_name
revisions
restrict_revision
git_am_opt
diffstat
force_rebase
switch_to
keep_empty
allow_empty_message
--allow-empty-message
rebase_merges
rebase_cousins
rebase_root
squash_onto
git_format_patch_opt
GIT_SEQUENCE_EDITOR=:; export GIT_SEQUENCE_EDITOR; 
git-rebase--preserve-merges
git_rebase__preserve_merges
Unhandled rebase type %d
. git-sh-setup && . %s && %s
stopped-sha
Nothing to do
Resolve all conflicts manually, mark them as resolved with
"git add/rm <conflicted_files>", then run "git rebase --continue".
You can instead skip this commit: run "git rebase --skip".
To abort and get back to the state before "git rebase", run "git rebase --abort".
--resolved
--resolvemsg=%s
--skip
--show-current-patch
rebased-patches
--stdout
--full-index
--cherry-pick
--right-only
--src-prefix=a/
--dst-prefix=b/
--no-renames
--no-cover-letter
--pretty=mboxrd
--no-base
git encountered an error while preparing the patches to replay
these revisions:
    %s
As a result, git cannot rebase them.
--rebasing
--patch-format=mboxrd
move_to_original_branch without onto
rebase finished: returning to %s
-%s-rerere-autoupdate
unset %s; 
First, rewinding head to replay your work on top of it...
stateless-rpc
advertise-refs
reject-thin-pack-for-testing
You must specify a directory.
'%s' does not appear to be a git repository
version 1
builtin/receive-pack.c
inconsistent push options
git receive-pack <git-dir>
receive
receive.denydeletes
receive.denynonfastforwards
receive.unpacklimit
receive.fsck.skiplist
%cskiplist=%s
receive.fsck.
%c%s=%s
Skipping unknown msg id '%s'
receive.fsckobjects
transfer.fsckobjects
receive.denycurrentbranch
receive.denydeletecurrent
repack.usedeltabaseoffset
receive.updateserverinfo
receive.shallowupdate
receive.certnonceseed
receive.certnonceslop
receive.advertiseatomic
receive.advertisepushoptions
receive.keepalive
receive.maxinputsize
receive.procreceiverefs
refuse
updateinstead
%s:%ju
%ju-%.*s
capabilities^{}
.have
report-status report-status-v2 delete-refs side-band-64k quiet
 atomic
 ofs-delta
 push-cert=%s
 push-options
 object-format=%s
 agent=%s
%s %s%c%s
protocol error: expected shallow sha, got '%s'
report-status
report-status-v2
push-options
error: unsupported object format '%s'
session-id
client-sid
push-cert
protocol error: got an unexpected packet
push-cert-end
protocol error: expected old/new/ref, got '%s'
protocol error: got both push certificate and unsigned commands
malformed push certificate %.*s
unable to create temporary object directory
--strict%s
--max-input-size=%ju
unpack-objects abnormal exit
localhost
--keep=receive-pack %ju on %s
index-pack fork failed
index-pack abnormal exit
eof before pack header was fully read
protocol error (pack signature mismatch detected)
protocol error (pack version unsupported)
unknown error in parse_pack_header
--pack_header=%u,%u
shallow update not allowed
GIT_SHALLOW_FILE
unpacker error
pre-receive hook declined
unable to migrate objects to permanent storage
fail to run proc-receive hook
missing necessary objects
deny deleting a hidden ref
deny updating a hidden ref
refusing update to broken symref '%s'
broken symref
refusing inconsistent update between symref '%s' (%s..%s) and its target '%s' (%s..%s)
inconsistent aliased update
error: 
proc-receive
cannot find hook 'proc-receive'
version=1%c%s
version=1
version=
fail to negotiate version with proc-receive hook
proc-receive version '%d' is not supported
%s %s %s
fail to write commands to proc-receive hook
fail to write push-options to proc-receive hook
proc-receive exited abnormally
proc-receive reported incomplete status line: '%s'
proc-receive reported 'option' without a matching 'ok/ng' directive
refname
old-oid
new-oid
fall-through
proc-receive reported bad status '%s' on ref '%s'
proc-receive reported status on unknown ref: %s
proc-receive reported status on unexpected ref: %s
failed
proc-receive failed to report status
atomic push failure
transaction failed to start
atomic transaction failed
refusing to create funny ref '%s' remotely
funny refname
updating the current branch
refusing to update checked out branch: %s
branch is currently checked out
unpack should have generated %s, but I can't find it!
bad pack
denying ref deletion for %s
deletion prohibited
deleting the current branch
refusing to delete the current branch: %s
deletion of the current branch prohibited
Invalid denyDeleteCurrent setting
bad sha1 objects for %s
bad ref
denying non-fast-forward %s (you should pull first)
hook declined to update %s
hook declined
Allowing deletion of corrupt ref.
Deleting a non-existent ref.
failed to delete
shallow error
failed to update ref
warning: 
By default, updating the current branch in a non-bare repository
is denied, because it will make the index and work tree inconsistent
with what you pushed, and will require 'git reset --hard' to match
the work tree to HEAD.
You can set the 'receive.denyCurrentBranch' configuration variable
to 'ignore' or 'warn' in the remote repository to allow pushing into
its current branch; however, this is not recommended unless you
arranged to update its work tree to match what you pushed in some
other way.
To squelch this message and still keep the default behaviour, set
'receive.denyCurrentBranch' configuration variable to 'refuse'.
By default, deleting the current branch is denied, because the next
'git clone' won't result in any file checked out, causing confusion.
You can set 'receive.denyDeleteCurrent' configuration variable to
'warn' or 'ignore' in the remote repository to allow deleting the
current branch, with or without a warning message.
To squelch this message, you can set it to 'refuse'.
denyCurrentBranch = updateInstead needs a worktree
GIT_DIR=%s
--ignore-submodules
--refresh
Up-to-date check failed
Working directory has unstaged changes
Working directory has staged changes
Could not update working tree to new HEAD
GIT_WORK_TREE=%s
push-to-checkout hook declined
shallow: update_shallow_ref %s
BUG: connectivity check has not been run on ref %s
connectivity check skipped???
unpack %s
ng %s %s
ok %s
option refname %s
option old-oid %s
option new-oid %s
option forced-update
GIT_PUSH_OPTION_%d=%s
GIT_PUSH_OPTION_COUNT=%d
GIT_PUSH_OPTION_COUNT
GIT_PUSH_CERT=%s
GIT_PUSH_CERT_SIGNER=%s
GIT_PUSH_CERT_KEY=%s
GIT_PUSH_CERT_STATUS=%c
GIT_PUSH_CERT_NONCE=%s
GIT_PUSH_CERT_NONCE_STATUS=%s
GIT_PUSH_CERT_NONCE_SLOP=%ld
nonce
MISSING
UNSOLICITED
SLOP
exists
--expire=
'%s' is not a valid timestamp
--expire-unreachable=
--stale-fix
--rewrite
--updateref
--single-worktree
Marking reachable objects...
%s points nowhere!
reflogexpire
reflogexpireunreachable
refs/stash
builtin/reflog.c
not a worktree ref: %s
no reflog specified to delete
not a reflog: %s
no reflog for '%s'
invalid ref format: %s
Command input error
builtin/remote-ext.c
capabilities
Bad command
Can't run specified command
GIT_EXT_SERVICE
GIT_EXT_SERVICE_NOPREFIX
Bad remote-ext placeholder '%%%c'.
remote-ext command has incomplete placeholder
%s %s%c
%s %s%chost=%s%c
*connect
Bad URL syntax
Input error
Copying data between file descriptors failed
Bad command: %s
rename
set-head
set-branches
set-url
git remote [-v | --verbose]
git remote add [-t <branch>] [-m <master>] [-f] [--tags | --no-tags] [--mirror=<fetch|push>] <name> <url>
git remote rename <old> <new>
git remote remove <name>
git remote set-head <name> (-a | --auto | -d | --delete | <branch>)
git remote [-v | --verbose] show [-n] <name>
git remote prune [-n | --dry-run] <name>
git remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)...]
git remote set-branches [--add] <name> <branch>...
git remote get-url [--push] [--all] <name>
git remote set-url [--push] <name> <newurl> [<oldurl>]
git remote set-url --add <name> <newurl>
git remote set-url --delete <name> <url>
%s (fetch)
%s (push)
fetch the remote branches
import all tags and associated objects when fetching
or do not fetch any tag at all (--no-tags)
branch(es) to track
master
master branch
(push|fetch)
set up remote as a mirror to push to or fetch from
specifying a master branch makes no sense with --mirror
specifying branches to track makes sense only with fetch mirrors
remote %s already exists.
builtin/remote.c
refs/remotes/%s/HEAD
remote add
Could not setup master '%s'
unknown mirror argument: %s
git remote add [<options>] <name> <url>
refs/%s:refs/%s
refs/heads/%s:refs/remotes/%s/%s
Updating %s
No such remote: '%s'
remote.%s
Could not rename config section '%s' to '%s'
:refs/remotes/%s/
Not updating non-default fetch refspec
Please update the configuration manually if necessary.
branch.%s.pushRemote
deleting '%s' failed
remote: renamed %s to %s
creating '%s' failed
remote.%s.push
remotes/%s
branches/%s
.remote
.merge
.rebase
.pushremote
more than one %s
could not set '%s'
could not unset '%s'
The %s configuration remote.pushDefault in:
%s:%d
now names the non-existent remote '%s'
remote.pushdefault
branch.%s.%s
branch.%s.pushremote
remote: remove
Note: A branch outside the refs/remotes/ hierarchy was not removed;
to delete it, use:
Note: Some branches outside the refs/remotes/ hierarchy were not removed;
to delete them, use:
  git branch -d %s
Could not remove config section '%s'
set refs/remotes/<name>/HEAD according to remote
delete refs/remotes/<name>/HEAD
Cannot determine remote HEAD
Multiple remote HEAD branches. Please choose one explicitly with:
  git remote set-head %s %s
Could not delete %s
Not a valid ref: %s
remote set-head
Could not setup %s
%s/HEAD set to %s
Could not get fetch map for refspec %s
refs/heads/*
(matching)
(delete)
add branch
no remote specified
git remote set-branches <name> <branch>...
git remote set-branches --add <name> <branch>...
No such remote '%s'
query push URLs rather than fetch URLs
return all URLs
no URLs configured for remote '%s'
manipulate push URLs
add URL
delete URLs
--add --delete doesn't make sense
remote.%s.pushurl
Invalid old URL pattern: %s
No such URL found: %s
Will not delete all non-push URLs
do not query remotes
* remote %s
  Fetch URL: %s
(no URL)
  Push  URL: %s
  HEAD branch: %s
(not queried)
    %s
  Remote branch:%s
  Remote branches:%s
 (status not queried)
  Local branch configured for 'git pull':
  Local branches configured for 'git pull':
  Local refs will be mirrored by 'git push'
  Local ref configured for 'git push'%s:
  Local refs configured for 'git push'%s:
git remote show [<options>] <name>
 new (next fetch will store in remotes/%s)
 tracked
 stale (use 'git remote prune' to remove)
 ???
    %-*s
invalid branch.%s.merge; cannot rebase onto > 1 branch
    %-*s 
rebases interactively onto remote %s
rebases interactively (with merges) onto remote %s
rebases onto remote %s
 merges with remote %s
merges with remote %s
%-*s    and with remote %s
up to date
fast-forwardable
local out of date
    %-*s forces to %-*s (%s)
    %-*s pushes to %-*s (%s)
    %-*s forces to %s
    %-*s pushes to %s
git remote prune [<options>] <name>
 %s will become dangling!
 %s has become dangling!
Pruning %s
URL: %s
remote: prune
 * [would prune] %s
 * [pruned] %s
prune remotes after fetching
--multiple
git remote update [<options>] [<group> | <remote>]...
remotes.default
  HEAD branch (remote HEAD is ambiguous, may be one of the following):
pack everything in a single pack
same as -a, and turn unreachable objects loose
remove redundant packs, and run git-prune-packed
pass --no-reuse-delta to git-pack-objects
pass --no-reuse-object to git-pack-objects
do not run git-update-server-info
pass --local to git-pack-objects
write bitmap index
pass --delta-islands to git-pack-objects
approxidate
with -A, do not loosen objects older than this
with -a, repack unreachable objects
size of the window used for delta compression
bytes
same as the above, but limit memory size instead of entries count
limits the maximum delta depth
limits the maximum number of threads
maximum size of each packfile
pack-kept-objects
repack objects in packs marked with .keep
do not repack this pack
geometric
find a geometric progression with factor <N>
cannot delete packs in a precious-objects repo
--keep-unreachable and -A are incompatible
--geometric is incompatible with -A, -a
.tmp-%d-pack
--keep-true-parents
--honor-pack-keep
--non-empty
--write-bitmap-index
--write-bitmap-index-quiet
--delta-islands
--keep-pack=%s-%s.pack
GIT_REF_PARANOIA=1
--unpack-unreachable
--keep-unreachable
--pack-loose-unreachable
--stdin-packs
--incremental
repack: Expecting full hex object ID lines only from pack-objects.
Nothing new to pack.
%s/pack-%s%s
%s-%s%s
missing required file: %s
could not unlink: %s
.pack
GIT_TEST_MULTI_PACK_INDEX
repack.packkeptobjects
repack.writebitmaps
pack.writebitmaps
repack.usedeltaislands
git repack [<options>]
cannot open index for %s
pack %s too large to consider in geometric progression
pack %s too large to roll up
--window=%s
--window-memory=%s
--depth=%s
--threads=%s
--max-pack-size=%s
--no-reuse-delta
--no-reuse-object
--local
--delta-base-offset
%s/%s.keep
%s-%s.promisor
could not finish pack-objects to repack promisor objects
could not start pack-objects to repack promisor objects
.idx
.rev
.bitmap
.promisor
%s.pack
list replace refs
delete replace refs
edit existing object
graft
change a commit's parents
convert-graft-file
convert existing graft file
replace the ref if it exists
do not pretty-print contents for --edit
use this format
--format cannot be used when not listing
-f only makes sense when writing a replacement
--raw only makes sense with --edit
-d needs at least one argument
bad number of arguments
-e needs exactly one argument
-g needs at least one argument
--convert-graft-file takes no argument
only one pattern can be given with -l
builtin/replace.c
invalid cmdmode %d
git replace [-f] <object> <replacement>
git replace [-f] --edit <object>
git replace [-f] --graft <commit> [<parent>...]
git replace [-f] --convert-graft-file
git replace -d <object>...
git replace [--format=<format>] [-l [<pattern>]]
replace ref '%s' not found
Deleted replace ref '%s'
Objects must be of the same type.
'%s' points to a replaced object of type '%s'
while '%s' points to a replacement object of type '%s'.
'%s' is not a valid ref name
replace ref '%s' already exists
not a valid object name: '%s'
unable to get object type for %s
REPLACE_EDITOBJ
editing object file failed
new object is the same as the old one: '%s'
replacement
unable to open %s for writing
cat-file reported failure
unable to open %s for reading
unable to spawn mktree
unable to read from mktree
mktree reported failure
mktree did not return an object name
unable to fstat %s
unable to write object to database
the original commit '%s' has a gpg signature
the signature will be removed in the replacement commit!
could not write replacement commit for: '%s'
graft for '%s' unnecessary
new commit is the same as the old one: '%s'
parent 
could not parse %s as a commit
bad mergetag in commit '%s'
malformed mergetag in commit '%s'
original commit '%s' contains mergetag '%s' that is discarded; use --edit instead of --graft
could not convert the following graft(s):
medium
invalid replace format '%s'
valid formats are 'short', 'medium' and 'long'
%s -> %s
%s (%s) -> %s (%s)
register clean resolutions in index
forget
'git rerere forget' without paths is deprecated
clear
remaining
preimage
unable to generate diff for '%s'
git rerere [clear | forget <path>... | status | remaining | diff | gc]
--- a/%s
+++ b/%s
be quiet, only report errors
mixed
reset HEAD and index
soft
reset only HEAD
hard
reset HEAD, index and working tree
reset HEAD but keep local changes
record only the fact that removed paths will be added later
Failed to resolve '%s' as a valid revision.
Failed to resolve '%s' as a valid tree.
--patch is incompatible with --{hard,mixed,soft}
builtin/reset.c
patch-interactive
--mixed with paths is deprecated; use 'git reset -- <paths>' instead.
Cannot do %s reset with paths.
%s reset is not allowed in a bare repository
-N can only be used with --mixed
Unstaged changes after reset:
It took %.2f seconds to enumerate unstaged changes after reset.  You can
use '--quiet' to avoid this.  Set the config setting reset.quiet to true
to make this the default.
Could not reset index file to revision '%s'.
Could not write new index file.
git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]
git reset [-q] [<tree-ish>] [--] <pathspec>...
git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]
git reset --patch [<tree-ish>] [--] [<pathspec>...]
Cannot do a %s reset in the middle of a merge.
You do not have a valid HEAD.
Failed to find tree of HEAD.
Failed to find tree of %s.
updating HEAD
reset: moving to %s
reset: %s
HEAD is now at %s
--missing=
cannot combine --exclude-promisor-objects and --missing
--header
--timestamp
--bisect
--bisect-all
--bisect-vars
--use-bitmap-index
--test-bitmap
--progress=
object filtering requires --objects
--filter-provided-objects
--filter-print-omitted
--no-object-names
--object-names
--disk-usage
rev-list does not support display of notes
marked counting is incompatible with --objects
print
bisect_rev
bisect_nr
bisect_good
bisect_bad
bisect_all
bisect_steps
%s='%s'
%s=%d
%ju 
unable to get disk usage of %s
missing %s object '%s'
unexpected missing %s object '%s'
builtin/rev-list.c
unhandled missing_action
------
--parseopt
--sq-quote
--local-env-vars
--resolve-git-dir
--resolve-git-dir requires an argument
not a gitdir '%s'
--git-path
--git-path requires an argument
-n requires an argument
--path-format
--path-format requires an argument
absolute
relative
unknown argument to --path-format: %s
--default
--default requires an argument
--prefix
--prefix requires an argument
--revs-only
--no-revs
--flags
--no-flags
--short
--sq
--symbolic
--symbolic-full-name
--abbrev-ref
loose
unknown mode for --abbrev-ref: %s
--disambiguate=
refs/bisect/bad
refs/bisect/good
--branches
--glob=
--remotes
--exclude=
--show-toplevel
this operation must be run in a work tree
--show-superproject-working-tree
--show-prefix
--show-cdup
--absolute-git-dir
%s%s.git
--git-common-dir
--is-inside-git-dir
--is-inside-work-tree
--is-bare-repository
--is-shallow-repository
--shared-index-path
sharedindex.%s
--since=
--max-age=
--after=
--before=
--min-age=
--until=
--show-object-format
storage
input
unknown mode for --show-object-format: %s
git rev-parse --parseopt [<options>] -- [<args>...]
keep-dashdash
keep the `--` passed as an arg
stop-at-non-option
stop parsing after the first non-option argument
stuck-long
output in stuck long form
*=?!
set --
premature end of input
no usage string given before the `--' separator
 --no-%s
 -%c
%s%ju
--dense
--branches=
--ignore-missing
--max-count=
--no-merges
--min-parents=
--no-min-parents
--max-parents=
--no-max-parents
--parents
--pretty
--remotes=
--sparse
--tags=
--date-order
builtin/rev-parse.c
Needed a single revision
%s^%d
refname '%s' is ambiguous
revert failed
cherry-pick failed
end revert or cherry-pick sequence
resume revert or cherry-pick sequence
cancel revert or cherry-pick sequence
skip current commit and continue
no-commit
don't automatically commit
edit the commit message
no-op (backward compatibility)
mainline
parent-number
select mainline parent
merge strategy
option for merge strategy
append commit name
preserve initially empty commits
keep-redundant-commits
keep redundant, empty commits
--quit
--continue
run_sequencer
revert.c
cmd == 'a'
--abort
--no-commit
--mainline
--strategy
--strategy-option
--edit
git revert [<options>] <commit-ish>...
git revert <subcommand>
git cherry-pick [<options>] <commit-ish>...
git cherry-pick <subcommand>
option `%s' expects a number greater than zero
%s: %s cannot be used with %s
No pathspec was given. Which files should I remove?
please stage your changes to .gitmodules or stash them to proceed
not removing '%s' recursively without -r
builtin/rm.c
rm '%s'
git rm: unable to remove %s
git rm: '%s'
do not list removed files
only remove from the index
override the up-to-date check
allow recursive removal
ignore-unmatch
exit with a zero status even if nothing matched
git rm [<options>] [--] <file>...
the following file has staged content different from both the
file and the HEAD:
the following files have staged content different from both the
file and the HEAD:
(use -f to force removal)
the following file has changes staged in the index:
the following files have changes staged in the index:
(use --cached to keep the file, or -f to force removal)
the following file has local modifications:
the following files have local modifications:
    %s
git-receive-pack
remote name
use stateless RPC protocol
read refs from stdin
helper-status
print status from remote helper
Destination %s is not a uri for %s
support for protocol v2 not implemented yet
builtin/send-pack.c
Everything up-to-date
git send-pack [--all | --mirror] [--dry-run] [--force] [--receive-pack=<git-receive-pack>] [--verbose] [--thin] [--atomic] [<host>:]<directory> [<ref>...]
  --all and explicit <ref> specification are mutually exclusive.
no match
non-fast forward
fetch first
needs force
stale info
remote ref updated since checkout
already exists
<none>
%cN <%cE>
committer
group by committer rather than author
sort output according to the number of commits per author
suppress commit descriptions, only provides commit count
show the email address of each author
<w>[,<i1>[,<i2>]]
linewrap output
group
field
group by field
builtin/shortlog.c
too many arguments given outside repository
%s (%d):
      %s
[PATCH
 <%.*s>
trailer:
unknown group type: %s
git shortlog [<options>] [<revision-range>] [[--] <path>...]
git log --pretty=short | git shortlog [<options>]
Commit: 
using multiple --group options with stdin is not supported
using --group=trailer with stdin is not supported
unhandled shortlog group
show remote-tracking and local branches
show remote-tracking branches
color '*!+-' corresponding to the branch
more
show <n> more commits after the common ancestor
synonym to more=-1
no-name
suppress naming strings
include the current branch
sha1-name
name commits with their object names
show possible merge bases
show refs unreachable from any other ref
topo-order
show commits in topological order
topics
show only commits not on the first branch
show merges reachable from only one tip
date-order
topologically sort, maintaining date order where possible
<n>[,<base>]
show <n> most recent ref-log entries starting at base
--reflog is incompatible with --all, --remotes, --independent or --merge-base
no branches given, and HEAD is not valid
--reflog option needs one branch name
only %d entries can be shown at one time.
no such ref %s
(%s) %s
%s@{%d}
No revs to be shown.
builtin/show-branch.c
cannot handle more than %d revs.
'%s' is not a valid ref.
cannot find commit %s (%s)
%c [%s] 
%s%c%s [%s] 
%s%c%s
unrecognized reflog param '%s'
showbranch.default
color.showbranch
git show-branch [-a | --all] [-r | --remotes] [--topo-order | --date-order]
[--current] [--color[=<when>] | --no-color] [--sparse]
[--more=<n> | --list | --independent | --merge-base]
[--no-name | --sha1-name] [--topics] [(<rev> | <glob>)...]
git show-branch (-g | --reflog)[=<n>[,<base>]] [--list] [<ref>]
ignoring %s; cannot handle more than %d refs
no matching refs with %s
bad sha1 reference %s
(unavailable)
[PATCH] 
[%s] 
%s~%d
hash-algorithm
Unknown hash algorithm
unable to read header
unknown index version
unable to read index
corrupt index file
unable to read entry %u/%u
%u %s
unable to read sha1 %u/%u
unable to read crc %u/%u
unable to read 32b offset %u/%u
inconsistent 64b offset index
unable to read 64b offset %u
%ju %s (%08x)
git show-index [--object-format=<hash-algorithm>]
--verify requires a reference
'%s' - not a valid ref
No match
only show tags (can be combined with heads)
only show heads (can be combined with tags)
stricter reference checking, requires exact ref path
show the HEAD reference, even if it would be filtered out
dereference
dereference tags into object IDs
only show SHA1 hash using <n> digits
do not print results to stdout (useful with --verify)
exclude-existing
show refs from stdin that aren't in local repository
builtin/show-ref.c
git show-ref [-q | --quiet] [--verify] [--head] [-d | --dereference] [-s | --hash[=<n>]] [--abbrev[=<n>]] [--tags] [--heads] [--] [<pattern>...]
git show-ref --exclude-existing[=<pattern>]
ref '%s' ignored
git show-ref: bad ref %s (%s)
reapply
disable
git sparse-checkout (init|list|set|add|reapply|disable) <options>
this worktree is not sparse (sparse-checkout file may not exist)
git sparse-checkout list
cone
initialize the sparse-checkout in cone mode
sparse-index
toggle the use of a sparse index
failed to modify sparse-index config
failed to open '%s'
!/*/
!/*/
git sparse-checkout init [--cone] [--[no-]sparse-index]
unable to upgrade repository format to enable worktreeConfig
extensions.worktreeConfig
failed to set extensions.worktreeConfig setting
failed to create directory for sparse-checkout file
!%s/*/
read patterns from standard in
git sparse-checkout (set|add) (--stdin | <patterns>)
unable to load existing sparse-checkout patterns
unable to unquote C-style string '%s'
could not normalize path %s
git sparse-checkout reapply
error while refreshing working directory
git sparse-checkout disable
GIT_TEST_STASH_USE_BUILTIN
the stash.useBuiltin support has been removed!
See its entry in 'git help config' for details.
%s.stash.%ju
save
stash.showstat
stash.showpatch
stash.showincludeuntracked
stash.usebuiltin
git stash list [<options>]
git stash show [<options>] [<stash>]
git stash drop [-q|--quiet] [<stash>]
git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
git stash branch <branchname> [<stash>]
git stash clear
git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
          [-u|--include-untracked] [-a|--all] [-m|--message <message>]
          [--pathspec-from-file=<file> [--pathspec-file-nul]]
          [--] [<pathspec>...]]
git stash save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
          [-u|--include-untracked] [-a|--all] [<message>]
keep-index
keep index
stash in patch mode
quiet mode
include-untracked
include untracked files in stash
include ignore files
stash message
subcommand wasn't specified; 'push' can't be assumed due to unexpected token '%s'
git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
          [-u|--include-untracked] [-a|--all] [-m|--message <message>]
          [--] [<pathspec>...]]
Can't use --patch and --include-untracked or --all at the same time
Did you forget to 'git add'?
No local changes to save
Cannot initialize stash
Cannot save the current status
Saved working directory and index state %s
--binary
--index
--hard
--no-recurse-submodules
--no-overlay
Cannot remove worktree changes
(no branch)
git stash
git@stash
You do not have the initial commit yet
%s: %s 
index on %s
Cannot save the current index state
Cannot save the untracked files
Cannot save the current worktree state
WIP on %s
On %s: 
Cannot record working tree state
--remove
untracked files on %s
No changes selected
--ignore-skip-worktree-entries
Created via "git stash store".
Cannot update %s with %s
attempt to recreate the index
git stash apply [--index] [-q|--quiet] [<stash>]
 '%s'
Too many revisions specified:%s
No stash entries found.
%s@{0}
0123456789
%s@{%s}
%s is not a valid reference
%s^3:
%s^1
%s^1:
%s^2:
'%s' is not a stash-like commit
cannot apply a stash in the middle of a merge
could not generate diff %s^!.
conflicts in index. Try without --index.
could not save index tree
could not restore untracked files from stash
Updated upstream
Stashed changes
Version stash was based on
Merging %s with %s
Index was not unstashed.
%s^2^..%s^2
%s.stash.XXXXXX
WARNING: Untracked file in way of tracked file!  Renaming
            %s -> %s
         to make room.
Failed to move %s to %s
git stash clear with arguments is unimplemented
'%s' is not a stash reference
builtin/stash.c
Dropped %s (%s)
%s: Could not drop stash entry
The stash entry is kept in case you need it again.
git stash pop [--index] [-q|--quiet] [<stash>]
No branch name specified
--format=%gd: %gs
include untracked files in the stash
only-untracked
only show untracked files in the stash
failed to parse tree
failed to unpack trees
"git stash store" requires one <commit> argument
git stash store [-m|--message <message>] [-q|--quiet] <commit>
strip-comments
skip and remove all lines starting with comment character
comment-lines
prepend comment character and space to each line
could not read the input
git stripspace [-s | --strip-comments]
git stripspace [-c | --comment-lines]
git submodule--helper <command>
'%s' is not a valid submodule--helper subcommand
update-module-mode
update-clone
ensure-core-worktree
relative-path
resolve-relative-url
resolve-relative-url-test
foreach
print-default-remote
sync
deinit
remote-branch
push-check
absorb-git-dirs
is-active
check-name
set-branch
alternative anchor for relative paths
git submodule--helper list [--prefix=<path>] [<path>...]
%06o %s U
%06o %s %d
git submodule--helper name <path>
no submodule mapping found in .gitmodules for path '%s'
where the new submodule will be cloned to
name of the new submodule
url where to clone the submodule from
depth for shallow clones
Suppress output for cloning a submodule
force cloning progress
require-init
disallow cloning into non-empty directory
git submodule--helper clone [--prefix=<path>] [--quiet] [--reference <repository>] [--name <name>] [--depth <depth>] [--single-branch] --url <url> --path <path>
%s/modules/%s
refusing to create/use '%s' in another submodule's git dir
clone of '%s' into submodule path '%s' failed
directory not empty: '%s'
%s/index
could not get submodule directory for '%s'
Value '%s' for submodule.alternateErrorStrategy is not recognized
superproject
Value '%s' for submodule.alternateLocation is not recognized
/modules/%s/
submodule '%s' cannot add alternate: %s
--reference
--dissociate
--separate-git-dir
submodule--helper update-module-clone expects <just-cloned> <path> [<update>]
just_cloned
submodule.%s.update
Invalid update mode '%s' for submodule path '%s'
Invalid update mode '%s' configured for submodule path '%s'
builtin/submodule--helper.c
how did we read update = !command from .gitmodules?
path into the working tree
recursive-prefix
path into the working tree, across nested submodule boundaries
rebase, merge, checkout or none
<depth>
create a shallow clone truncated to the specified number of revisions
parallel jobs
recommend-shallow
whether the initial clone should follow the shallow recommendation
don't print cloning progress
git submodule--helper update-clone [--prefix=<path>] [<path>...]
bad value for update parameter
parallel/update
BUG: submodule considered for cloning, doesn't need cloning any more?
Skipping unmerged submodule %s
Skipping submodule '%s'
submodule.%s.url
--path
--name
--url
Submodule path '%s' not initialized
Maybe you want to use 'update --init'?
could not look up configuration '%s'. Assuming this repository is its own authoritative upstream.
Expecting a full ref name, got %s
./%s
cannot strip one component off url '%s'
Failed to clone '%s'. Retry scheduled
Failed to clone '%s' a second time, aborting
dummy %s %d
submodule--helper ensure-core-worktree <path>
We could get the submodule handle before?
could not get a repository handle for submodule '%s'
submodule--helper relative-path takes exactly 2 arguments, got %d
resolve-relative-url only accepts one or two arguments
resolve-relative-url-test only accepts three arguments: <up_path> <remoteurl> <url>
(null)
suppress output of entering each submodule command
recurse into nested submodules
git submodule--helper foreach [--quiet] [--recursive] [--] <command>
No url found for submodule path '%s' in .gitmodules
name=%s
sm_path=%s
displaypath=%s
sha1=%s
toplevel=%s
path=%s; %s
Entering '%s'
run_command returned non-zero status for %s
run_command returned non-zero status while recursing in the nested submodules of %s
cannot have prefix '%s' and superprefix '%s'
suppress output for initializing a submodule
git submodule--helper init [<options>] [<path>]
submodule.%s.active
Failed to register url for submodule path '%s'
Submodule '%s' (%s) registered for path '%s'
warning: command update mode suggested for submodule '%s'
Failed to register update mode for submodule path '%s'
suppress submodule status output
use commit stored in the index instead of the one stored in the submodule HEAD
git submodule status [--quiet] [--cached] [--recursive] [<path>...]
--ignore-submodules=dirty
could not resolve HEAD ref inside the submodule '%s'
failed to recurse into submodule '%s'
%c%s %s
 (%s)
--contains
submodule--helper print-default-remote takes no arguments
suppress output of synchronizing submodule url
git submodule--helper sync [--quiet] [--recursive] [<path>]
Synchronizing submodule url for '%s'
failed to register url for submodule path '%s'
failed to get the default remote for submodule '%s'
/config
failed to update remote for submodule '%s'
remove submodule working trees even if they contain local changes
unregister all submodules
git submodule deinit [--quiet] [-f | --force] [--all | [--] [<path>...]]
pathspec and --all are incompatible
Use '--all' if you really want to deinitialize all submodules
Submodule work tree '%s' contains a .git directory (use 'rm -rf' if you really want to remove it including all of its history)
Submodule work tree '%s' contains local modifications; use '-f' to discard them
Cleared directory '%s'
Could not remove submodule work tree '%s'
could not create empty submodule directory %s
--get-regexp
submodule.%s\.
submodule.%s
Submodule '%s' (%s) unregistered for path '%s'
use the commit stored in the index instead of the submodule HEAD
files
to compare the commit in the index with that in the submodule HEAD
for-status
skip submodules with 'ignore_config' value set to 'all'
summary-limit
limit the summary size
git submodule--helper summary [<options>] [<commit>] [--] [<path>]
could not fetch a revision for HEAD
--cached and --files are mutually exclusive
submodule.%s.ignore
couldn't hash object from '%s'
unexpected mode %o
--count
  Warn: %s doesn't contain commits %s and %s
  Warn: %s doesn't contain commit %s
* %s %s(blob)->%s(submodule)
* %s %s(submodule)->%s(blob)
* %s %s...%s
 (%d):
--pretty=  %m %s
--pretty=  > %s
--pretty=  < %s
submodule--helper remote-branch takes exactly one arguments, got %d
submodule %s doesn't exist
submodule.%s.branch
Submodule (%s) branch configured to inherit branch from superproject, but the superproject is not on any branch
submodule--helper push-check requires at least 2 arguments
remote '%s' not configured
HEAD does not match the named branch in the superproject
src refspec '%s' must name a ref
recurse into submodules
git submodule--helper absorb-git-dirs [<options>] [<path>...]
submodule--helper is-active takes exactly 1 argument
check-writeable
check if it is safe to write to the .gitmodules file
unset the config in the .gitmodules file
git submodule--helper config <name> [<value>]
git submodule--helper config --unset <name>
git submodule--helper config --check-writeable
please make sure that the .gitmodules file is in the working tree
suppress output for setting url of a submodule
git submodule--helper set-url [--quiet] <path> <newurl>
set the default tracking branch to master
set the default tracking branch
git submodule--helper set-branch [-q|--quiet] (-d|--default) <path>
git submodule--helper set-branch [-q|--quiet] (-b|--branch) <branch> <path>
--branch or --default required
--branch and --default are mutually exclusive
suppress error message for non-symbolic (detached) refs
delete symbolic ref
shorten ref output
reason
reason of the update
Refusing to perform update with empty message
Cannot delete %s, not a symbolic ref
deleting '%s' is not allowed
Refusing to point HEAD outside of refs/
git symbolic-ref [<options>] <name> [<ref>]
git symbolic-ref -d [-q] <name>
ref %s is not a symbolic ref
list tag names
print <n> lines of each tag message
delete tags
verify tags
Tag creation options
annotated tag, needs a message
tag message
force edit of tag message
annotated and GPG-signed tag
local-user
use another key to sign the tag
replace the tag if exists
create a reflog
Tag listing options
show tag list in columns
print only tags that contain the commit
print only tags that don't contain the commit
print only tags that are merged
print only tags that are not merged
print only tags of the object
--column and -n are incompatible
-n option is only allowed in list mode
--contains option is only allowed in list mode
--no-contains option is only allowed in list mode
--points-at option is only allowed in list mode
--merged and --no-merged options are only allowed in list mode
only one -F or -m option is allowed.
'%s' is not a valid tag name.
tag '%s' already exists
Invalid cleanup mode %s
Updated tag '%s' (was %s)
builtin/tag.c
tag.gpgsign
tag.forcesignannotated
git tag [-a | -s | -u <key-id>] [-f] [-m <msg> | -F <file>]
<tagname> [<head>]
git tag -d <tagname>...
git tag -l [-n[<num>]] [--contains <commit>] [--no-contains <commit>] [--points-at <object>]
[--format=<format>] [--merged <commit>] [--no-merged <commit>] [<pattern>...]
git tag -v [--format=<format>] <tagname>...
%s %%(contents:lines=%d)
%(align:15)%(refname:lstrip=2)%(end)
%(refname:lstrip=2)
Deleted tag '%s' (was %s)
tag '%s' not found.
tag: tagging 
object of unknown type
commit object
, %s
tree object
blob object
other tag object
bad object type.
object %s
type %s
tag %s
tagger %s
TAG_EDITMSG
no tag message?
The tag message has been left in %s
unable to sign the tag
git unpack-file <sha1>
unable to read blob object %s
.merge_file_XXXXXX
unable to write temp-file
--strict=
final sha1 did not match
bad pack file
unknown pack file version %u
Unpacking objects
unresolved deltas left after unpacking
bad object type %d
builtin/unpack-objects.c
failed to write object
invalid blob object
object %s tried to add buffer twice!
offset value out of bound for delta base object
failed to read delta-pack base object %s
object type mismatch
object of unexpected type
Whoops! Cannot find object '%s'
Error on reachable objects of %s
failed to write object %s
continue refresh even when index needs update
refresh: ignore submodules
do not ignore new files
let files replace directories and vice-versa
notice files missing from worktree
refresh even if index contains unmerged entries
refresh stat information
really-refresh
like --refresh, but ignore assume-unchanged setting
cacheinfo
<mode>,<object>,<path>
add the specified entry to the index
assume-unchanged
mark files as "not changing"
no-assume-unchanged
clear assumed-unchanged bit
skip-worktree
mark files as "index-only"
no-skip-worktree
clear skip-worktree bit
ignore-skip-worktree-entries
do not touch index-only entries
info-only
add to index only; do not add content to object database
force-remove
remove named paths even if present in worktree
with --stdin: input lines are terminated by null bytes
read list of paths to be updated from standard input
index-info
add entries from standard input to the index
unresolve
repopulate stages #2 and #3 for the listed paths
again
only update entries that differ from HEAD
ignore files missing from worktree
report actions to standard output
clear-resolve-undo
(for porcelains) forget saved unresolved conflicts
write index in this format
split-index
enable or disable split index
untracked-cache
enable/disable untracked cache
test-untracked-cache
test if the filesystem supports untracked cache
force-untracked-cache
enable untracked cache without testing the filesystem
force-write-index
write out the index even if is not flagged as changed
fsmonitor
enable or disable file system monitor
fsmonitor-valid
mark files as fsmonitor valid
no-fsmonitor-valid
clear fsmonitor valid bit
cache corrupted
builtin/update-index.c
unknown option '%s'
unknown switch '%c'
index-version %d not in range: %d..%d
core.splitIndex is set to false; remove or change it, if you really want to enable split index
core.splitIndex is set to true; remove or change it, if you really want to disable split index
core.untrackedCache is set to true; remove or change it, if you really want to disable the untracked cache
Untracked cache disabled
core.untrackedCache is set to false; remove or change it, if you really want to enable the untracked cache
Untracked cache enabled for '%s'
bad untracked_cache value: %d
core.fsmonitor is unset; set it if you really want to enable fsmonitor
fsmonitor enabled
core.fsmonitor is set; remove it if you really want to disable fsmonitor
fsmonitor disabled
git update-index: --cacheinfo cannot add %s
option 'cacheinfo' expects <mode>,<sha1>,<path>
Invalid path '%s'
%s: cannot add to the index - missing --add option?
add '%s'
option 'chmod' expects "+x" or "-x"
option '%s' must be the last argument
git update-index: bad quoting of path name
Ignoring path %s
git update-index: unable to remove %s
git update-index: unable to update %s
malformed index info %s
No HEAD -- no initial commit yet?
MERGE_HEAD
Not in the middle of a merge.
%s: skipping still unmerged path.
%s: identical in both, skipping.
%s: cannot add our version to the index.
%s: cannot add their version to the index.
%s: not in %s branch.
%s: not a blob in %s branch.
git update-index [<options>] [--] [<file>...]
Unable to mark file %s
remove '%s'
Unable to process path %s
./fsmonitor.h
mark_fsmonitor_invalid '%s'
'%s' is beyond a symbolic link
%s: cannot remove from the index
lstat("%s"): %s
%s: does not exist and --remove not passed
%s: is a directory - add individual files instead
%s: is a directory - add files inside instead
chmod %cx '%s'
git update-index: cannot chmod %cx '%s'
mtime-test-XXXXXX
Could not make temporary directory
Testing mtime in '%s' 
newfile
directory stat info does not change after adding a new file
new-dir
directory stat info does not change after adding a new directory
data
directory stat info changes after updating a file
new-dir/new
directory stat info changes after adding a file inside subdirectory
directory stat info does not change after deleting a file
directory stat info does not change after deleting a directory
failed to delete directory %s
failed to create file %s
failed to create directory %s
failed to delete file %s
delete the reference
no-deref
update <refname> not the one it points to
stdin has NUL-terminated arguments
read updates from stdin
Refusing to perform update with empty message.
%s: not a valid SHA1
%s: not a valid old SHA1
git update-ref [<options>] -d <refname> [<old-val>]
git update-ref [<options>]    <refname> <new-val> [<old-val>]
git update-ref [<options>] --stdin [-z]
empty command in input
whitespace before command: %s
unknown command: %s
cannot restart ongoing transaction
prepared transactions can only be closed
transaction is closed
prepare
update: missing <ref>
update %s: missing <newvalue>
update %s: extra input: %s
badly quoted argument: %s
unexpected character after quoted argument: %s
%s %s: expected SP but got: %s
%s %s: expected NUL but got: %s
%s %s: missing <newvalue>, treating as zero
%s %s: invalid <oldvalue>: %s
%s %s: invalid <newvalue>: %s
%s %s: unexpected end of input when reading <oldvalue>
%s %s: unexpected end of input when reading <newvalue>
create: missing <ref>
create %s: missing <newvalue>
create %s: zero <newvalue>
create %s: extra input: %s
delete: missing <ref>
delete %s: zero <oldvalue>
delete %s: extra input: %s
verify: missing <ref>
verify %s: extra input: %s
option unknown: %s
start: extra input: %s
start: ok
prepare: extra input: %s
prepare: %s
prepare: ok
abort: extra input: %s
abort: %s
abort: ok
commit: extra input: %s
commit: %s
commit: ok
update the info files from scratch
git update-server-info [--force]
argument 
Too many options (>%d)
'argument' token or flush expected
NACK unable to spawn subprocess
upload-archive: %s
poll failed resuming
read error: %s
sent error to the client: %s
quit after a single request/response exchange
exit immediately after initial ref advertisement
do not try <directory>/.git/ if <directory> is no Git directory
interrupt transfer after <n> seconds of inactivity
builtin/upload-pack.c
git upload-pack [<options>] <dir>
%s=%s
GIT_COMMITTER_IDENT
GIT_AUTHOR_IDENT
GIT_EDITOR
Terminal is dumb, but EDITOR unset
print commit contents
print raw gpg status output
git verify-commit [-v | --verbose] <commit>...
commit '%s' not found.
%s: unable to read file.
%s: cannot verify a non-commit object of type %s.
stat-only
show statistics only
git verify-pack [-v | --verbose] [-s | --stat-only] <pack>...
--object-format=%s
%s: bad
%s: ok
print tag contents
git verify-tag [-v | --verbose] [--format=<format>] <tag>...
lock
unlock
repair
worktree.guessremote
git worktree add [<options>] <path> [<commit-ish>]
git worktree list [<options>]
git worktree lock [<options>] <path>
git worktree move <worktree> <new-path>
git worktree prune [<options>]
git worktree remove [<options>] <worktree>
git worktree unlock <path>
checkout <branch> even if already checked out in other worktree
create a new branch
create or reset a branch
populate the new working tree
keep the new working tree locked
set up tracking mode (see git-branch(1))
guess-remote
try to match the new branch name with a remote-tracking branch
-b, -B, and --detach are mutually exclusive
--[no-]track can only be used if a new branch is created
Preparing worktree (new branch '%s')
Preparing worktree (resetting branch '%s'; was at %s)
Preparing worktree (checking out '%s')
Preparing worktree (detached HEAD %s)
builtin/worktree.c
How come '%s' becomes empty after sanitization?
worktrees/%s
could not create directory of '%s'
%s/locked
initializing
added with --lock
%s/gitdir
gitdir: %s/worktrees/%s
%s/HEAD
%s/commondir
../..
%s=%s
'%s' already exists
unusable worktree destination '%s'
'%s' is a missing but locked worktree;
use '%s -f -f' to override, or 'unlock' and 'prune' or 'remove' to clear
'%s' is a missing but already registered worktree;
use '%s -f' to override, or 'prune' or 'remove' to clear
failed to delete '%s'
report pruned working trees
expire working trees older than <time>
worktrees
Removing %s/%s: %s
duplicate entry
show extended annotations and reasons, if available
add 'prunable' annotation to worktrees older than <time>
--verbose and --porcelain are mutually exclusive
worktree %s
HEAD %s
branch %s
locked %s
prunable %s
%-*s 
(bare)
(detached HEAD)
[%s]
(error)
locked: %s
 locked
prunable: %s
 prunable
reason for locking
'%s' is not a working tree
The main working tree cannot be locked or unlocked
'%s' is already locked, reason: %s
'%s' is already locked
worktrees/%s/locked
'%s' is not locked
force move even if worktree is dirty or locked
'%s' is a main working tree
could not figure out destination name from '%s'
cannot move a locked working tree, lock reason: %s
use 'move -f -f' to override or unlock first
cannot move a locked working tree;
use 'move -f -f' to override or unlock first
validation failed, cannot move working tree: %s
failed to move '%s' to '%s'
modules
working trees containing submodules cannot be moved or removed
force removal even if worktree is dirty or locked
cannot remove a locked working tree, lock reason: %s
use 'remove -f -f' to override or unlock first
cannot remove a locked working tree;
use 'remove -f -f' to override or unlock first
validation failed, cannot remove working tree: %s
%s=%s/.git
--porcelain
--ignore-submodules=none
failed to run 'git status' on '%s'
'%s' contains modified or untracked files, use --force to delete it
failed to run 'git status' on '%s', code %d
repair: %s: %s
error: %s: %s
locked
detached
git-write-tree
missing-ok
<prefix>/
write tree object for a subdirectory <prefix>
ignore-cache-tree
only useful for debugging
%s: error reading the index
%s: error building trees
%s: prefix %s not found
git write-tree [--missing-ok] [--prefix=<prefix>/]
common-main.c
The empty string is not a valid path
More than %d nested symlinks on path '%s'
Invalid symlink '%s'
interactive.header
interactive.help
interactive.prompt
interactive.error
diff.frag
fall back
diff.plain
diff.old
diff.new
interactive.difffilter
interactive.singlekey
add untracked
%12s %12s %s
     
unstaged
could not refresh index
color.%s
 %2d: %s
 %2d: %s%.*s%s%s
Prompt help:
1          - %s
select a numbered item
foo        - %s
select item based on unique prefix
           - %s
(empty) select nothing
Update
could not stage '%s'
updated %d path
updated %d paths
Revert
Could not parse HEAD^{tree}
reverted %d path
reverted %d paths
note: %s is untracked now.
Add untracked
added %d path
added %d paths
ignoring unmerged: %s
Only binary files changed.
No changes.
Patch update
Review diff
status        - %s
show paths with changes
update        - %s
add working tree state to the staged set of changes
revert        - %s
revert staged set of changes back to the HEAD version
patch         - %s
pick hunks and update selectively
diff          - %s
view diff between HEAD and index
add untracked - %s
add contents of untracked files to the staged set of changes
%c%2d: %s
+%ju/-%ju
select a single item
3-5        - %s
select a range of items
2-3,6-9    - %s
select multiple ranges
-...       - %s
unselect specified items
*          - %s
choose all items
(empty) finish selecting
add-interactive.c
singleton requires immediate
Huh (%s)?
prefix_item_list in inconsistent state (%ju vs %ju)
No untracked files.
Stash mode change [y,n,q,a,d%s,?]? 
Stash deletion [y,n,q,a,d%s,?]? 
Stash addition [y,n,q,a,d%s,?]? 
Stash this hunk [y,n,q,a,d%s,?]? 
If the patch applies cleanly, the edited hunk will immediately be marked for stashing.
y - stash this hunk
n - do not stash this hunk
q - quit; do not stash this hunk or any of the remaining ones
a - stash this hunk and all later hunks in the file
d - do not stash this hunk or any of the later hunks in the file
Unstage mode change [y,n,q,a,d%s,?]? 
Unstage deletion [y,n,q,a,d%s,?]? 
Unstage addition [y,n,q,a,d%s,?]? 
Unstage this hunk [y,n,q,a,d%s,?]? 
If the patch applies cleanly, the edited hunk will immediately be marked for unstaging.
y - unstage this hunk
n - do not unstage this hunk
q - quit; do not unstage this hunk or any of the remaining ones
a - unstage this hunk and all later hunks in the file
d - do not unstage this hunk or any of the later hunks in the file
Apply mode change to index [y,n,q,a,d%s,?]? 
Apply deletion to index [y,n,q,a,d%s,?]? 
Apply addition to index [y,n,q,a,d%s,?]? 
Apply this hunk to index [y,n,q,a,d%s,?]? 
If the patch applies cleanly, the edited hunk will immediately be marked for applying.
y - apply this hunk to index
n - do not apply this hunk to index
q - quit; do not apply this hunk or any of the remaining ones
a - apply this hunk and all later hunks in the file
d - do not apply this hunk or any of the later hunks in the file
Discard mode change from worktree [y,n,q,a,d%s,?]? 
Discard deletion from worktree [y,n,q,a,d%s,?]? 
Discard addition from worktree [y,n,q,a,d%s,?]? 
Discard this hunk from worktree [y,n,q,a,d%s,?]? 
If the patch applies cleanly, the edited hunk will immediately be marked for discarding.
y - discard this hunk from worktree
n - do not discard this hunk from worktree
q - quit; do not discard this hunk or any of the remaining ones
a - discard this hunk and all later hunks in the file
d - do not discard this hunk or any of the later hunks in the file
Discard mode change from index and worktree [y,n,q,a,d%s,?]? 
Discard deletion from index and worktree [y,n,q,a,d%s,?]? 
Discard addition from index and worktree [y,n,q,a,d%s,?]? 
Discard this hunk from index and worktree [y,n,q,a,d%s,?]? 
y - discard this hunk from index and worktree
n - do not discard this hunk from index and worktree
q - quit; do not discard this hunk or any of the remaining ones
a - discard this hunk and all later hunks in the file
d - do not discard this hunk or any of the later hunks in the file
Apply mode change to index and worktree [y,n,q,a,d%s,?]? 
Apply deletion to index and worktree [y,n,q,a,d%s,?]? 
Apply addition to index and worktree [y,n,q,a,d%s,?]? 
Apply this hunk to index and worktree [y,n,q,a,d%s,?]? 
y - apply this hunk to index and worktree
n - do not apply this hunk to index and worktree
q - quit; do not apply this hunk or any of the remaining ones
a - apply this hunk and all later hunks in the file
d - do not apply this hunk or any of the later hunks in the file
y - apply this hunk to worktree
n - do not apply this hunk to worktree
q - quit; do not apply this hunk or any of the remaining ones
a - apply this hunk and all later hunks in the file
d - do not apply this hunk or any of the later hunks in the file
Stage mode change [y,n,q,a,d%s,?]? 
Stage deletion [y,n,q,a,d%s,?]? 
Stage addition [y,n,q,a,d%s,?]? 
Stage this hunk [y,n,q,a,d%s,?]? 
If the patch applies cleanly, the edited hunk will immediately be marked for staging.
y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk or any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk or any of the later hunks in the file
--diff-algorithm=%s
could not parse diff
--color
could not parse colored diff
failed to run '%s'
add-patch.c
diff starts with unexpected line:
%.*s
deleted file
new file
double mode change?
%.*s
mode change in the middle?
%.*s
'new mode' without 'old mode'?
%.*s
'new mode' does not immediately follow 'old mode'?
%.*s
diff can only contain delete *or* add *or* a mode change?!?
%.*s
mode change in hunk #%d???
mismatched output from interactive.diffFilter
Your filter must maintain a one-to-one correspondence
between its input and output lines.
could not parse hunk header '%.*s'
could not parse colored hunk header '%.*s'
,g,/
%s(%ju/%ju) 
No previous hunk
No next hunk
No other hunks to goto
go to which hunk (<ret> to see more)? 
go to which hunk? 
Invalid number: '%s'
Sorry, only %d hunk available.
Sorry, only %d hunks available.
No other hunks to search
search for regex? 
Malformed search regexp %s: %s
No hunk matches the given pattern
Sorry, cannot split this hunk
Split into %d hunks.
Sorry, cannot edit this hunk
'git apply' failed
@@ -%lu
,%lu
 +%lu
%c%2d: 
 -%lu,%lu +%lu,%lu 
looking for next line beyond buffer (%d >= %d)
invalid hunk index: %d (must be >= 0 and < %d)
buffer overrun while splitting hunks
unhandled diff marker: '%c'
counts are off: %d/%d
miscounted old_offset: %lu != %lu
miscounted new_offset: %lu != %lu
Your edited hunk does not apply. Edit again (saying "no" discards!) [y/n]? 
Manual hunk edit mode -- see bottom for a quick guide.
To remove '%c' lines, make them ' ' lines (context).
To remove '%c' lines, delete them.
Lines starting with %c will be removed.
If it does not apply cleanly, you will be given an opportunity to
edit again.  If all lines of the hunk are removed, then the edit is
aborted and the hunk is left unchanged.
addp-hunk-edit.diff
could not parse hunk header
--check
'git apply --cached' failed
failed to find %d context lines in:
%.*s
expected context line #%d in
%.*s
hunks do not overlap:
%.*s
does not end with:
%.*s
The selected hunks do not apply to the index!
Apply them to the worktree anyway? 
Nothing was applied.
color.advice.
advice.
Cherry-picking is not possible because you have unmerged files.
Committing is not possible because you have unmerged files.
Merging is not possible because you have unmerged files.
Pulling is not possible because you have unmerged files.
Reverting is not possible because you have unmerged files.
It is not possible to %s because you have unmerged files.
Fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
Exiting because of an unresolved conflict.
Please, commit your changes before merging.
Exiting because of unfinished merge.
The following pathspecs didn't match any eligible path, but they do match index
entries outside the current sparse checkout:
Disable or modify the sparsity rules if you intend to update such entries.
Note: switching to '%s'.
You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.
If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:
  git switch -c <new-branch-name>
Or undo this operation with:
  git switch -
Turn off this advice by setting config variable advice.detachedHead to false
%shint: %.*s%s
addEmbeddedRepo
amWorkDir
checkoutAmbiguousRemoteBranchName
commitBeforeMerge
detachedHead
fetchShowForcedUpdates
graftFileDeprecated
ignoredHook
implicitIdentity
nestedTag
objectNameWarning
pushAlreadyExists
pushFetchFirst
pushNeedsForce
pushNonFFCurrent
pushNonFFMatching
pushUnqualifiedRefName
pushNonFastForward
pushUpdateRejected
pushRefNeedsUpdate
resetQuiet
resolveConflict
rmHints
sequencerInUse
setUpstreamFailure
statusAheadBehindWarning
statusHints
statusUoption
submoduleAlternateErrorStrategyDie
updateSparsePath
waitingForEditor
hint
addIgnoredFile
addEmptyPathspec
cmdline ends with \
unclosed quote
%10s: %8u (%ju kB)
--reject and --3way cannot be used together.
--3way outside a repository
--index outside a repository
--cached outside a repository
%s%s
--- 
+++ 
old mode 
new mode 
deleted file mode 
new file mode 
copy from 
copy to 
rename old 
rename new 
rename from 
rename to 
similarity index 
dissimilarity index 
git diff header lacks filename information when removing %d leading pathname component (line %d)
git diff header lacks filename information when removing %d leading pathname components (line %d)
git diff header lacks filename information (line %d)
<stdin>
can't open patch '%s': %s
squelched %d whitespace error
squelched %d whitespace errors
%d line adds whitespace errors.
%d lines add whitespace errors.
%d line applied after fixing whitespace errors.
%d lines applied after fixing whitespace errors.
exclude
path
don't apply changes matching the given path
apply changes matching the given path
remove <num> leading slashes from traditional diff paths
no-add
ignore additions made by the patch
stat
instead of applying the patch, output diffstat for the input
allow-binary-replacement
binary
show number of added and deleted lines in decimal notation
summary
instead of applying the patch, output a summary for the input
check
instead of applying the patch, see if the patch is applicable
index
make sure the patch is applicable to the current index
mark new files with `git add --intent-to-add`
apply a patch without touching the working tree
unsafe-paths
accept a patch that touches outside the working area
apply
also apply the patch (use with --stat/--summary/--check)
attempt three-way merge, fall back on normal patch if that fails
build-fake-ancestor
build a temporary index based on embedded index information
paths are separated with NUL character
ensure at least <n> lines of context match
whitespace
detect new or modified lines that have whitespace errors
ignore changes in whitespace when finding context
reverse
apply the patch in reverse
unidiff-zero
don't expect at least one line of context
leave the rejected hunks in corresponding *.rej files
allow-overlap
allow overlapping hunks
verbose
be verbose
inaccurate-eof
tolerate incorrectly detected missing new-line at the end of file
recount
do not trust the line counts in the hunk headers
prepend <root> to all filenames
apply.whitespace
apply.ignorewhitespace
warn
error
error-all
strip
unrecognized whitespace option '%s'
change
unrecognized whitespace ignore option '%s'
git apply: bad git-diff - expected /dev/null, got %s on line %d
git apply: bad git-diff - inconsistent new filename on line %d
git apply: bad git-diff - inconsistent old filename on line %d
git apply: bad git-diff - expected /dev/null on line %d
%s%.*s
invalid mode on line %d: %s
inconsistent header lines %d and %d
.gitattributes
Skipped patch '%s'.
unrecognized input
unable to read index file
git apply: failed to read
 differ
Binary files 
Files 
patch with only garbage at line %d
patch fragment without header at line %d: %.*s
diff --git 
unable to find filename in patch at line %d
^[0-2][0-9]:([0-5][0-9]):00(\.0+)? ([-+][0-2][0-9]:?[0-5][0-9])
1969-12-31 
1970-01-01 
Cannot prepare timestamp regexp %s
regexec returned %d for input: %s
corrupt patch at line %d
new file %s depends on old contents
deleted file %s still has contents
** warning: file %s becomes empty but is not deleted
recount: ignore empty hunk
recount: unexpected line: %.*s
%s:%d: %s.
%.*s
unrecognized binary patch at line %d
delta 
literal 
corrupt binary patch at line %d: %.*s
 => 
Checking patch %s...
%s: already exists in index
%s: does not match index
%s: already exists in working directory
new mode (%o) of %s does not match old mode (%o)
new mode (%o) of %s does not match old mode (%o) of %s
affected file '%s' is beyond a symbolic link
%s: patch does not apply
check_preimage
apply.c
patch->is_new <= 0
path %s has been renamed/deleted
%s: does not exist in index
%s: wrong type
%s has type %o, expected %o
cannot checkout %s
path_is_beyond_symlink
*name_ != '\0'
Falling back to direct application...
removal patch leaves file contents
failed to read %s
reading from '%s' beyond a symbolic link
Subproject commit %s
unable to read symlink %s
unable to open or read %s
size_t overflow: %ju * %ju
repository lacks the necessary blob to perform 3-way merge.
Performing three-way merge...
cannot read the current contents of '%s'
Failed to perform three-way merge...
Applied patch to '%s' with conflicts.
Applied patch to '%s' cleanly.
base
theirs
patch failed: %s:%ld
cannot apply binary patch to '%s' without full index line
the patch applies to '%s' (%s), which does not match the current contents.
the patch applies to an empty '%s' but it is not empty
the necessary postimage %s for '%s' cannot be read
binary patch does not apply to '%s'
binary patch to '%s' creates incorrect result (expecting %s, got %s)
missing binary patch data for '%s'
cannot reverse-apply a binary patch without the reverse hunk to '%s'
invalid start of line: '%c'
Hunk #%d succeeded at %d (offset %d line).
Hunk #%d succeeded at %d (offset %d lines).
Context reduced to (%ld/%ld) to apply fragment at %d
while searching for:
%.*s
BUG: strbuf_setlen() beyond buffer
!strbuf_slopbuf[0]
update_pre_post_images
postlen ? fixed_preimage.nr == preimage->nr : fixed_preimage.nr <= preimage->nr
caller miscounted postlen: asked %d, orig = %d, used = %d
size_t overflow: %ju + %ju
size_t underflow: %ju - %ju
U %s
unable to remove %s from index
%s~%u
unable to write file '%s' mode %o
failed to write to '%s'
closing file '%s'
unable to add cache entry for %s
Subproject commit 
corrupt patch for submodule %s
unable to stat newly created file '%s'
unable to create backing store for newly created file %s
Applied patch %s cleanly.
internal error
Applying patch %%s with %d reject...
Applying patch %%s with %d rejects...
truncating .rej filename to %.*s.rej
.rej
diff a/%s b/%s
(rejected hunks)
Hunk #%d applied cleanly.
Rejected hunk #%d.
%.*s
sha1 information is lacking or useless for submodule %s
mode change for %s, which is not in current HEAD
sha1 information is lacking or useless (%s).
could not add %s to temporary index
could not write temporary index to %s
 %-*s |  Bin
 %-*s |
%5d %.*s%.*s
delete
 rewrite %s (%d%%)
 %s mode %06o %s
 %s %s
copy
 %s %.*s{%s => %s} (%d%%)
 %s %s => %s (%d%%)
 mode change %06o => %06o %s
 mode change %06o => %06o
option callback does not expect negation
tar.tgz.command
gzip -cn
tar.tgz.remote
tar.tar.gz.command
tar.tar.gz.remote
comment
mtime
pax_global_header
%ju %s=
archive-tar.c
pax extended header length miscalculated as %ju, should be %ju
%07o
%011jo
%011lo
ustar
unsupported file mode: 0%o (SHA1: %s)
%s.data
see %s.paxheader
linkpath
%s.paxheader
cannot stream blob %s
tar-filter archiver called with no filter defined
 -%d
unable to start '%s' filter
unable to redirect descriptor
'%s' filter reported error
timestamp too large for this system: %ju
path is not valid UTF-8: %s
path too long (%d chars, SHA1: %s): %s
uploadarchive.allowunreachable
export-ignore
export-subst
%.*s%s/
cannot read %s
$Format:
archive format
prepend prefix to each pathname in the archive
add-file
add untracked file to archive
worktree-attributes
read .gitattributes in working directory
report archived files on stderr
set compression level
list supported archive formats
Unexpected option --remote
Option --exec can only be used together with --remote
Unexpected option --output
Options --add-file and --remote cannot be used together
archive.c
Unknown archive format '%s'
Argument not supported for format '%s': -%d
File not found: %s
Not a regular file: %s
git archive [<options>] <tree-ish> [<path>...]
git archive --list
git archive --remote <repo> [--exec <cmd>] [<options>] <tree-ish> [<path>...]
git archive --remote <repo> [--exec <cmd>] --list
no such ref: %.*s
not a valid object name: %s
not a tree object: %s
current working directory is untracked
attr.c
counted %d != ended at %d
non-INDEX attr direction in a bare repo
git_attr_internal
a->attr_nr == (hashmap_get_size(&g_attr_hashmap.map) - 1)
no entry found
prepare_attr_stack
(*stack)->origin
[builtin]
[attr]
%s not allowed: %s:%d
Negative patterns are ignored in git attributes
Use '\!' for literal leading exclamation.
%.*s is not a valid attribute name
%s: %s:%d
[attr]binary -diff -merge -text
GIT_ATTR_NOSYSTEM
share/git-core/gitattributes
/etc/gitattributes
attributes
info/attributes
interned attributes shouldn't be deleted
invalid base85 alphabet %c
invalid base85 sequence %.5s
reading bisect refs failed
%s was both %s and %s
No testable commit found.
Maybe you started with bad path arguments?
%s is the first %s commit
(roughly %d step)
(roughly %d steps)
Bisecting: %d revision left to test after this %s
Bisecting: %d revisions left to test after this %s
bisect: remove
bisect.c
shouldn't be calling count-distance in fp mode
dist=%d
skip-
a %s revision is needed
The merge base %s is bad.
This means the bug has been fixed between %s and [%s].
The merge base %s is new.
The property has changed between %s and [%s].
The merge base %s is %s.
This means the first '%s' commit is between %s and [%s].
Some %s revs are not ancestors of the %s rev.
git bisect cannot work properly in this case.
Maybe you mistook %s and %s revs?
the merge base between %s and [%s] must be skipped.
So we cannot be sure the first %s commit is between %s and %s.
We continue anyway.
bisect_rev_setup
Badly quoted content in file '%s': %s
There are only 'skip'ped commits left to test.
The first %s commit could be any of:
--summary
--cc
refs/bisect%s
BISECT_RUN
Bisecting: a merge base must be tested
We cannot bisect more!
internal error in blame_origin_decref
assign_blame
blame.c
commit == suspect->commit
--contents and --reverse do not blend well.
repo is NULL
cannot use --contents with final commit object name
--reverse and --first-parent together require specified latest commit
not unique item in first-parent chain
--reverse --first-parent together require range along first-parent chain
no such path %s in %s
cannot read blob %s for path %s
bloom/queries
bloom/response-no
%s in %s has negative refcnt %d
internal error in blame::find_origin
internal error in blame::find_origin (%c)
unable to generate diff (%s -> %s)
Cannot read blob %s for path %s
internal error in blame::blame_chunk_cb
find_best_line_matches
abs(i - closest_local_line_a) < 1000
get_similarity
abs(line_a - closest_line_a) <= max_search_distance_a
ignore_blame_entry
e->num_lines == entry_len
unable to generate diff (%s)
Non commit %s?
More than one commit to dig from %s and %s?
More than one commit to dig up from, %s and %s?
No commit to dig up from?
Not Committed Yet
not.committed.yet
tree 0000000000000000000000000000000000000000
author %s
committer %s
Version of %s from %s
Cannot stat '%s'
cannot open or read '%s'
unsupported file type %s
failed to read from stdin
no such commit %s
cannot open '%s' for reading
unknown line in '%s': %s
no such path '%s' in HEAD
Not setting branch %s as its own upstream.
Branch '%s' set up to track remote branch '%s' from '%s' by rebasing.
Branch '%s' set up to track remote branch '%s' from '%s'.
Branch '%s' set up to track local branch '%s' by rebasing.
Branch '%s' set up to track local branch '%s'.
Branch '%s' set up to track remote ref '%s' by rebasing.
Branch '%s' set up to track remote ref '%s'.
Branch '%s' set up to track local ref '%s' by rebasing.
Branch '%s' set up to track local ref '%s'.
Unable to write upstream branch configuration
'%s' is not a valid branch name.
A branch named '%s' already exists.
Cannot force update the current branch.
Not a valid object name: '%s'.
Ambiguous object name: '%s'.
Not a valid branch point: '%s'.
branch: Reset to %s
branch: Created from %s
'%s' is already checked out at '%s'
HEAD of working tree %s is not updated
Not tracking: ambiguous information for ref %s
cannot find the current offset
bulk-checkin.c
should not happen
cannot seek back
unable to write pack header
failed to read from '%s'
failed to read %d bytes from '%s'
%s/pack/pack-
Repository lacks these prerequisite commits:
need a repository to verify a bundle
verify_bundle
bundle.c
The bundle contains this ref:
The bundle contains these %d refs:
The bundle records a complete history.
The bundle requires this ref:
The bundle requires these %d refs:
unsupported bundle version %d
cannot write bundle version %d with algorithm %s
@object-format=
Refusing to create empty bundle.
cannot create '%s'
index-pack died
'%s' does not look like a v2 or v3 bundle file
unrecognized header: %s%s (%d)
object-format=
unrecognized bundle hash algorithm: %s
unknown capability '%s'
-%s 
ref '%s' is excluded by the rev-list options
unable to dup bundle descriptor
Could not spawn pack-objects
pack-objects died
cache-tree.c
cache_tree
cache_tree_update
BUG: There are unmerged index entries:
BUG: %d %.*s
unmerged index entries when writing inmemory index
cache-tree
prime_cache_tree
%s: unmerged (%s)
You have both %s and %s
update_one
!(dryrun && repair)
index cache-tree records empty sub-tree
cache-tree.c: '%.*s' in '%s' not found
invalid object %06o %s for '%.*s'
%c%d %d
fatal - unsorted cache subtree
cache-tree: internal error
%s with flags 0x%x should not be in cache-tree
bad subtree '%.*s'
cache-tree for path %.*s does not match. Expected %s got %s
directory '%s' is present in index, but not sparse
chdir-notify.c
setup: chdir from '%s' to '%s'
setup: reparent %s to '%s'
checkout.defaultremote
chunk-format.c
expected to write %lld bytes to chunk %x, but wrote %lld instead
terminating chunk id appears earlier than expected
improper chunk offset(s) %llx and %llx
duplicate chunk ID %x found
final chunk has non-zero id %x
[31m
[32m
[33m
[34m
[35m
[1;31m
[1;32m
[1;33m
[1;34m
[1;35m
[1;36m
color.c
color parsing ran out of space
invalid color value: %.*s
file descriptor out of range: %d
black
green
yellow
blue
magenta
cyan
white
bright
bold
italic
blink
strike
%d;5;%d
%d;2;%d;%d;%d
print_columns
column.c
(colopts & COL_ENABLE_MASK) != COL_AUTO
invalid layout mode %d
--raw-mode=%d
--width=%d
--indent=%s
--padding=%d
invalid column.%s mode %s
dense
unsupported option '%s'
%06o 
read error '%s'
early EOF '%s'
object '%s' is not a blob!
diff --cc 
diff --combined 
%s%sindex 
..%s%s
%s%snew file mode %06o
%s%sdeleted file 
mode 
%s%06o
..%06o
unable to generate combined diff for %s
 +%lu,%lu 
%s%s %s%s
 -%lu,%lu
%.*s%s%s
Binary files differ
GIT_TEST_COMMIT_GRAPH
failed to write commit-graph under GIT_TEST_COMMIT_GRAPH
%s/info/commit-graph
%s/info/commit-graphs/commit-graph-chain
commit-graph file is too small
commit-graph signature %X does not match signature %X
commit-graph version %X does not match version %X
commit-graph hash version %X does not match version %X
commit-graph file is too small to hold %u chunks
GIT_TEST_COMMIT_GRAPH_DIE_ON_PARSE
dying as requested by the '%s' variable on commit-graph parse!
Collecting referenced commits
attempting to write a commit-graph, but 'core.commitGraph' is disabled
GIT_TEST_BLOOM_SETTINGS_BITS_PER_ENTRY
GIT_TEST_BLOOM_SETTINGS_NUM_HASHES
GIT_TEST_BLOOM_SETTINGS_MAX_CHANGED_PATHS
too many commits to write graph
no commit-graph file loaded
the commit-graph file has incorrect checksum and is likely corrupt
commit-graph has incorrect OID order: %s then %s
commit-graph has incorrect fanout value: fanout[%d] = %u != %u
failed to parse commit %s from commit-graph
Verifying commits in commit graph
failed to parse commit %s from object database for commit-graph
root tree OID for commit %s in commit-graph is %s != %s
commit-graph parent list for commit %s is too long
commit-graph parent for %s is %s != %s
commit-graph parent list for commit %s terminates early
commit-graph has non-zero generation number for commit %s, but zero elsewhere
commit-graph generation for commit %s is %ju < %ju
commit date for commit %s in commit-graph is %ju != %ju
commitgraph.generationversion
commit-graph is missing the OID Fanout chunk
commit-graph is missing the OID Lookup chunk
commit-graph is missing the Commit Data chunk
invalid commit-graph chain: line '%s' not a hash
unable to find all commit-graph files
%s/info/commit-graphs/graph-%s.graph
commit-graph has no base graphs chunk
commit-graph chain does not match
invalid parent position %u
could not find commit %s
commit-graph.c
NULL commit-graph
invalid commit position. commit-graph is likely corrupt
commit-graph requires overflow generation data but has none
get_commit_tree_in_graph_one called from non-commit-graph commit
%s/pack/
Finding commits for commit graph in %d pack
Finding commits for commit graph in %d packs
error adding pack %s
error opening index for %s
Finding commits for commit graph among packed objects
Loading known commits in commit graph
Expanding reachable commits in commit graph
Clearing commit marks in commit graph
Finding extra edges in commit graph
Merging commit-graph
Scanning merged commits
Computing commit graph topological levels
Computing commit graph generation numbers
Computing commit changed paths Bloom filters
filter-computed
filter-not-computed
filter-trunc-empty
filter-trunc-large
%s/info/commit-graphs/tmp_graph_XXXXXX
unable to create temporary graph layer
unable to adjust shared permissions for '%s'
Writing out commit graph in %d pass
Writing out commit graph in %d passes
unable to open commit-graph chain file
failed to rename base commit-graph file
failed to rename temporary commit-graph file
missing parent %s for commit %s
hash_version
num_hashes
bits_per_entry
max_changed_paths
settings
failed to write correct number of base graph ids
/info/commit-graphs
.graph
a from object
commit-reach.c
bad generation skip %ju > %ju at %s
%s %s is not a commit!
bad graft data: %s
read_graft_line
commit.c
!graft
cannot read commit object %s
expected commit for %s, got %s
bogus commit object %s
bad tree pointer in commit %s
bad tree pointer %s in commit %s
bad parents in commit %s
bad parent %s in commit %s
bad graft parent %s in commit %s
Could not read %s
Object %s not a commit
No such ref: '%s'
Ambiguous refname: '%s'
Commit %s has an untrusted GPG signature, allegedly by %s.
Commit %s has a bad GPG signature allegedly by %s.
Commit %s does not have a GPG signature.
Commit %s has a good GPG signature by %s
mergetag
a NUL byte in commit log message not allowed.
GIT_EDITOR=:
Support for <GIT_DIR>/info/grafts is deprecated
and will be removed in a future Git version.
Please use "git replace --convert-graft-file"
to convert the grafts into replace refs.
Turn this message off by running
"git config advice.graftFileDeprecated false"
duplicate graft data: %s
compat/obstack.c
/dev/tty
reading single keystrokes not supported on this platform; reading line instead
infocmp
include.path
includeif
invalid config format: %s
missing environment variable name for configuration '%.*s'
missing environment variable '%s' for configuration '%.*s'
bogus config parameter: %s
bogus count in %s
too many entries in %s
GIT_CONFIG_KEY_%d
missing config key %s
GIT_CONFIG_VALUE_%d
missing config value %s
bad boolean config value '%s' for '%s'
failed to expand user dir in: '%s'
'%s' for '%s' is not a valid timestamp
core.
user.
author.
committer.
i18n.
push.
mailmap.
pager.color
unable to load config blob object '%s'
reference '%s' does not point to a blob
GIT_CONFIG_SYSTEM
/etc/gitconfig
GIT_CONFIG_GLOBAL
share/git-core/gitconfig
failed to parse %s
GIT_CONFIG_NOSYSTEM
git_configset_get_value
config.c
values->nr > 0
Invalid %s: '%s'
core.splitindex
splitindex.maxpercentchange
splitIndex.maxPercentChange value '%d' should be between 0 and 100
GIT_TEST_FSMONITOR
GIT_TEST_INDEX_THREADS
unable to parse '%s' from command-line config
bad config variable '%s' in file '%s' at line %d
could not lock config file %s
opening %s
invalid config file %s
fstat on %s failed
unable to mmap '%s'
chmod on %s failed
could not write config file %s
could not set '%s' to '%s'
missing value for '%s'
current_config_origin_type called outside config callback
submodule-blob
unknown config origin type
current_config_name called outside config callback
could not expand include path '%s'
relative config includes must come from files
the command line
gitdir:
gitdir/i:
onbranch:
relative config include conditionals must come from files
how is this possible?
key does not contain a section: %s
key does not contain variable name: %s
invalid key (newline): %s
empty config key
bogus format in %s
out of range
invalid unit
bad numeric config value '%s' for '%s': %s
bad numeric config value '%s' for '%s' in blob %s: %s
bad numeric config value '%s' for '%s' in file %s: %s
bad numeric config value '%s' for '%s' in standard input: %s
bad numeric config value '%s' for '%s' in submodule-blob %s: %s
bad numeric config value '%s' for '%s' in command line %s: %s
bad numeric config value '%s' for '%s' in %s: %s
core.checkstat
core.quotepath
core.attributesfile
core.hookspath
core.ignorestat
core.prefersymlinkrefs
core.warnambiguousrefs
abbrev length out of range: %d
core.disambiguate
core.loosecompression
bad zlib compression level %d
core.packedgitwindowsize
core.bigfilethreshold
core.packedgitlimit
core.deltabasecachelimit
crlf
native
core.checkroundtripencoding
core.notesref
core.commentchar
core.commentChar should only be one character
core.askpass
core.excludesfile
core.fsyncobjectfiles
core.preloadindex
core.createobject
link
invalid mode for object creation: %s
core.sparsecheckout
core.sparsecheckoutcone
core.precomposeunicode
core.protecthfs
core.protectntfs
core.usereplacerefs
i18n.commitencoding
i18n.logoutputencoding
branch.autosetupmerge
branch.autosetuprebase
malformed value for %s
nothing
tracking
malformed value for %s: %s
must be one of nothing, matching, simple, upstream or current
config_buf can only ungetc the same character
bad config line %d in blob %s
bad config line %d in file %s
bad config line %d in standard input
bad config line %d in submodule-blob %s
bad config line %d in command line %s
bad config line %d in %s
config error action unset
unable to resolve config blob '%s'
git_dir without commondir
unable to parse command-line config
configset_add_value has no source
unknown error occurred while reading the configuration files
[%.*s "
%s = %s
invalid section name '%s'
%s has multiple values
failed to write new configuration file %s
invalid section name: %s
server doesn't support '%s'
server doesn't support feature '%s'
connect.c
invalid packet
protocol error: unexpected '%s'
ls-refs
command=ls-refs
agent
agent=%s
unknown object format '%s' specified by server
object-format=%s
server-option=%s
peel
symrefs
unborn
ref-prefix %s
invalid ls-refs response: %s
expected flush after ref listing
expected response end packet after ref listing
Diag: url=%s
NULL
Diag: protocol=%s
Diag: hostandport=%s
Diag: path=%s
transport/git
strange pathname '%s' blocked
Diag: userandhost=%s
Diag: port=%s
NONE
transport/ssh
transport/file
GIT_PROTOCOL=version=%d
unable to fork
the remote end hung up upon initial contact
Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
expected flush after capabilities
protocol error: unexpected capabilities^{}
ignoring capabilities after first line '%s'
protocol error: expected shallow sha-1, got '%s'
repository on the other end cannot be shallow
symref-target:
peeled:
%s^{}
no path specified; see 'git help pull' for valid url syntax
git+ssh
ssh+git
protocol '%s' is not supported
unknown protocol
GIT_OVERRIDE_VIRTUAL_HOST
newline is forbidden in git:// hosts and repo paths
version=%d%c
GIT_PROXY_COMMAND
core.gitproxy
 for 
9418
strange hostname '%s' blocked
strange port '%s' blocked
cannot start proxy %s
Looking up %s ... 
unable to look up %s (port %s) (%s)
done.
Connecting to %s (port %s) ... 
%s[%d: %s]: errno=%s
unable to connect to %s:
done.
unable to set SO_KEEPALIVE on socket
GIT_SSH
GIT_SSH_COMMAND
core.sshcommand
ssh.exe
plink
plink.exe
tortoiseplink
tortoiseplink.exe
GIT_SSH_VARIANT
putty
simple
SendEnv=GIT_PROTOCOL
VARIANT_AUTO passed to push_ssh_options
ssh variant 'simple' does not support -4
ssh variant 'simple' does not support -6
-batch
ssh variant 'simple' does not support setting port
--progress=%s
Could not run 'git rev-list'
failed write to rev-list
failed to close rev-list's stdin
async_query_available_blobs
convert.c
subprocess_map_initialized
external filter '%s' is not available anymore although not all paths have been filtered
command=list_available_blobs
pathname=
working-tree-encoding
-text
text eol=lf
text eol=crlf
text=auto
text=auto eol=crlf
text=auto eol=lf
%s: clean filter '%s' failed
convert_to_git_filter_fd
ca.drv
external filter '%s' failed
smudge
process
required
true/false are no valid working-tree-encodings
read from external filter '%s' failed
cannot fork to run external filter '%s'
cannot feed the input to external filter '%s'
external filter '%s' failed %d
unexpected filter type
command=%s
path name too long for external filter
pathname=%s
ref=%s
treeish=%s
blob=%s
can-delay=1
delayed
delay
git-filter
failed to encode '%s' from %s to %s
destination
Checking roundtrip encoding for %s...
reencoded source
encoding '%s' from %s to %s and back is not the same
BOM is prohibited in '%s' if encoded as %s
The file '%s' contains a byte order mark (BOM). Please use UTF-%.*s as working-tree-encoding.
BOM is required in '%s' if encoded as %s
The file '%s' is missing a byte order mark (BOM). Please use UTF-%sBE or UTF-%sLE (depending on the byte order) as working-tree-encoding.
GIT_TRACE_WORKING_TREE_ENCODING
%s (%s, considered %s):
[2m%2i:
[0m %2x 
[2m%c
[0m%c
CRLF would be replaced by LF in %s
CRLF will be replaced by LF in %s.
The file will have its original line endings in your working directory
LF would be replaced by CRLF in %s
LF will be replaced by CRLF in %s.
The file will have its original line endings in your working directory
%s: smudge filter %s failed
Id: 
: %s $
$Id: 
illegal crlf_action %d
copy-fd: read returned
copy-fd: write returned
%s: close error
invalid credential line: %s
username
password
host
credential helper '%s' told us to quit
unable to get password from user
credential url cannot be parsed: %s
credential.c
credential value for %s is missing
credential value for %s contains newline
refusing to work with credential missing host field
refusing to work with credential missing protocol field
credential.
helper
usehttppath
skipping credential lookup for key: credential.%s
https
http
git credential-%s
Username
Password
%s for '%s': 
%s: 
url has no scheme: %s
url contains a newline in its %s component: %s
%s: sha1 file error on close
%s: error when reading the tail of sha1 file
%s: sha1 file has trailing garbage
unable to open /dev/null
%s: sha1 file read error
%s: sha1 file truncated
sha1 file '%s' validation error
sha1 file '%s' write error. Out of diskspace
sha1 file '%s' write error
in the future
%ju second ago
%ju seconds ago
%ju minute ago
%ju minutes ago
%ju hour ago
%ju hours ago
%ju day ago
%ju days ago
%ju week ago
%ju weeks ago
%ju month ago
%ju months ago
%ju year
%ju years
%s, %ju month ago
%s, %ju months ago
%ju year ago
%ju years ago
date.c
cannot create anonymous strftime date_mode struct
%ju %+05d
%04d-%02d-%02d
%04d-%02d-%02d %02d:%02d:%02d %+05d
%04d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d
%.3s, %d %.3s %d %02d:%02d:%02d %+05d
auto:
default-local
-local
date format missing colon separator: %s
unknown date format %s
GIT_TEST_DATE_NOW
Timestamp too large for this system: %ju
Timestamp+tz too large: %ju +%04d
Timestamp before Unix epoch: %ju %04d
Sundays
Mondays
Tuesdays
Wednesdays
Thursdays
Fridays
Saturdays
January
February
March
April
June
July
August
September
October
November
December
%.3s 
%.3s %d 
%02d:%02d
:%02d
 %+05d
IDLW
MEWT
MEST
CEST
MESZ
EEST
WAST
WADT
EAST
EADT
NZST
NZDT
IDLE
%ju %c%02d%02d
iso8601-strict
iso-strict
iso8601
human
unix
months
years
yesterday
noon
midnight
zero
three
four
five
seven
eight
nine
seconds
minutes
hours
days
weeks
Propagating island marks
bad tree object %s
Marked %d islands, done.
failed to load island regex for '%s': %s
pack.islandcore
island regex from config has too many capture groups (max=%d)
create_delta_index
diff-delta.c
packed_entry - (struct index_entry *)mem == entries
--no-diff-merges
--combined-all-paths
diff-merges
--combined-all-paths makes no sense without -c or --cc
separate
combined
dense-combined
unknown value for --diff-merges: %s
diff-lib.c
--merge-base does not work with ranges
--merge-base only works with commits
unexpected revs->pending.nr: %d
unable to get HEAD
no merge base found
multiple merge bases found
run_diff_index must be passed exactly one tree
check_removed
is_fsmonitor_refreshed(istate)
Not a git repository. Use --no-index to compare two paths outside a working tree
git diff --no-index [<options>] <path> <path>
Could not access '%s'
error while reading from stdin
Could not open directory %s
copies
myers
patience
histogram
diff.indentheuristic
diff.colormoved
diff.colormovedws
diff.interhunkcontext
diff.autorefreshindex
diff.mnemonicprefix
diff.statgraphwidth
diff.wordregex
diff.orderfile
Unknown value for 'diff.submodule' config variable: '%s'
diff.color.
color.diff.
diff.wserrorhighlight
diff.suppressblankempty
diff.suppress-blank-empty
Found errors in 'diff.dirstat' config variable:
internal error: asking to populate invalid file.
--name-only, --name-status, --check and -s are mutually exclusive
-G, -S and --find-object are mutually exclusive
--follow requires exactly one pathspec
Option '--%s' requires a value
%s...
unable to read files to diff
diff.c
fill_textconv called with non-textconv driver
meta
frag
func
oldMoved
oldMovedAlternative
oldMovedDimmed
oldMovedAlternativeDimmed
newMoved
newMovedAlternative
newMovedDimmed
newMovedAlternativeDimmed
contextDimmed
oldDimmed
newDimmed
contextBold
oldBold
newBold
blocks
zebra
dimmed-zebra
dimmed_zebra
color moved setting must be one of 'no', 'default', 'blocks', 'zebra', 'dimmed-zebra', 'plain'
ignore-space-at-eol
ignore-all-space
allow-indentation-change
unknown color-moved-ws mode '%s', possible values are 'ignore-space-change', 'ignore-space-at-eol', 'ignore-all-space', 'allow-indentation-change'
color-moved-ws: allow-indentation-change cannot be combined with other whitespace modes
changes
lines
noncumulative
cumulative
  Failed to parse dirstat cut-off percentage '%s'
  Unknown dirstat parameter '%s'
 No newline at end of file
%s%s+++ %s%s%s
%s%s--- %s%s%s
%sGIT binary patch
%sdelta %s
%sliteral %s
%sSubmodule %s contains untracked content
%sSubmodule %s contains modified content
 0 files changed
 ...
unknown diff symbol
print_stat_summary_inserts_deletes
insertions == 0 && deletions == 0
 %d file changed
 %d files changed
, %d insertion(+)
, %d insertions(+)
, %d deletion(-)
, %d deletions(-)
Subproject commit %s%s
GIT_EXTERNAL_DIFF
ACDMRTXU*B
Diff output format options
generate patch
no-patch
unified
generate diffs with <n> lines context
generate the diff in raw format
patch-with-raw
synonym for '-p --raw'
patch-with-stat
synonym for '-p --stat'
numstat
machine friendly --stat
shortstat
output only the last line of --stat
dirstat
<param1,param2>...
output the distribution of relative amount of changes for each sub-directory
synonym for --dirstat=cumulative
dirstat-by-file
synonym for --dirstat=files,param1,param2...
warn if changes introduce conflict markers or whitespace errors
condensed summary such as creations, renames and mode changes
show only names of changed files
show only names and status of changed files
<width>[,<name-width>[,<count>]]
generate diffstat
stat-width
<width>
generate diffstat with a given width
stat-name-width
generate diffstat with a given name width
stat-graph-width
generate diffstat with a given graph width
stat-count
<count>
generate diffstat with limited lines
compact-summary
generate compact summary in diffstat
output a binary diff that can be applied
full-index
show full pre- and post-image object names on the "index" lines
show colored diff
ws-error-highlight
<kind>
highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff
do not munge pathnames and use NULs as output field terminators in --raw or --numstat
src-prefix
<prefix>
show the given source prefix instead of "a/"
dst-prefix
show the given destination prefix instead of "b/"
line-prefix
prepend an additional prefix to every line of output
no-prefix
do not show any source or destination prefix
inter-hunk-context
show context between diff hunks up to the specified number of lines
output-indicator-new
<char>
specify the character to indicate a new line instead of '+'
output-indicator-old
specify the character to indicate an old line instead of '-'
output-indicator-context
specify the character to indicate a context instead of ' '
Diff rename options
break-rewrites
<n>[/<m>]
break complete rewrite changes into pairs of delete and create
detect renames
irreversible-delete
omit the preimage for deletes
find-copies
detect copies
find-copies-harder
use unmodified files as source to find copies
disable rename detection
rename-empty
use empty blobs as rename source
follow
continue listing the history of a file beyond renames
prevent rename/copy detection if the number of rename/copy targets exceeds given limit
Diff algorithm options
produce the smallest possible diff
ignore whitespace when comparing lines
ignore changes in amount of whitespace
ignore changes in whitespace at EOL
ignore-cr-at-eol
ignore carrier-return at the end of line
ignore-blank-lines
ignore changes whose lines are all blank
ignore-matching-lines
<regex>
ignore changes whose all lines match <regex>
indent-heuristic
heuristic to shift diff hunk boundaries for easy reading
generate diff using the "patience diff" algorithm
generate diff using the "histogram diff" algorithm
diff-algorithm
<algorithm>
choose a diff algorithm
anchored
<text>
generate diff using the "anchored diff" algorithm
word-diff
<mode>
show word diff, using <mode> to delimit changed words
word-diff-regex
use <regex> to decide what a word is
color-words
equivalent to --word-diff=color --word-diff-regex=<regex>
color-moved
moved lines of code are colored differently
color-moved-ws
how white spaces are ignored in --color-moved
Other diff options
when run from subdir, exclude changes outside and show relative paths
treat all files as text
swap two inputs, reverse the diff
exit with 1 if there were differences, 0 otherwise
disable all output of the program
ext-diff
allow an external diff helper to be executed
run external text conversion filters when comparing binary files
<when>
ignore changes to submodules in the diff generation
<format>
specify how differences in submodules are shown
ita-invisible-in-index
hide 'git add -N' entries from the index
ita-visible-in-index
treat 'git add -N' entries as real in the index
<string>
look for differences that change the number of occurrences of the specified string
look for differences that change the number of occurrences of the specified regex
pickaxe-all
show all changes in the changeset with -S or -G
pickaxe-regex
treat <string> in -S as extended POSIX regular expression
control the order in which files appear in the output
rotate-to
<path>
show the change in the specified path first
skip-to
skip the output to the specified path
find-object
<object-id>
look for differences that change the number of occurrences of the specified object
diff-filter
[(A|C|D|M|R|T|U|X|B)...[*]]
select files by diff type
<file>
Output to a specific file
--unified
how come --cumulative take a value?
Failed to parse --dirstat/-X option parameter:
invalid --stat value: %s
%s should not get here
unknown value after ws-error-highlight=%.*s
%s expects a character, got '%s'
%s expects <n>/<m> form
invalid argument to %s
invalid regex given to -I: '%s'
option diff-algorithm accepts "myers", "minimal", "patience" and "histogram"
bad --word-diff argument: %s
bad --color-moved argument: %s
invalid mode '%s' in --color-moved-ws
failed to parse --submodule option parameter: '%s'
unable to resolve '%s'
unknown change class '%c' in --diff-filter=%s
oid abbreviation out of range: %d
internal diff status error
diff--git
newfilemode
---/dev/null
+++b/
deletedfilemode
---a/
+++/dev/null
unable to generate patch-id diff for %s
stat '%s'
cannot hash %s
%06o
internal error in diff-resolve-rename-copy
unable to generate checkdiff for %s
%s:%d: %s.
checkdiff_consume
data->o
%s%s:%d: leftover conflict marker
%s%s:%d: %s.
:%06o %06o %s 
%c%03d%c
%c%c
 %s%-*s |
 %*s
 %s%ju%s
 -> 
%s%ju%s
 bytes
 Unmerged
 %*ju%s
%s%4d.%01d%% %.*s
 rewrite 
 (%d%%)
 %s mode %06o 
 %s %s (%d%%)
 mode change %06o => %06o
* Unmerged path %s
%s%ssimilarity index %d%%
%s%scopy from 
%s%scopy to 
%s%srename from 
%s%srename to 
%s%sdissimilarity index %d%%%s
%s%sindex %s..%s
 %06o
GIT_DIFF_PATH_COUNTER=%d
GIT_DIFF_PATH_TOTAL=%d
external diff died, stopping at %s
stat(%s)
readlink(%s)
cannot read data blob for %s
diff is failing to clean up its tempfiles
XXXXXX_
unable to create temp-file
%s%sdiff --git %s %s%s
%s%snew file mode %06o%s
%s%sdeleted file mode %06o%s
%s%sold mode %06o%s
%s%snew mode %06o%s
%sBinary files %s and %s differ
GIT_DIFF_OPTS
--unified=
unable to generate diff for %s
1,%d
invalid regular expression: %s
diff_words_show
unable to generate word diff
fn_out_diff_words_aux
feeding unmodified %s to diffcore
unable to generate diffstat for %s
new +l
new +x
gone
mode -l
mode +l
mode +x
mode -x
error reading from textconv command '%s'
internal error in merge #1
internal error in merge #2
internal error in merge #3
internal error in merge #4
failed to read orderfile '%s'
invalid regex: %s
diffcore-rename.c
setup
diffcore_rename_extended
!dir_rename_count || strmap_empty(dir_rename_count)
dirs_removed incompatible with break/copy detection
break detection incompatible with source specification
exact renames
cull after exact
GIT_BASENAME_FACTOR
factor >= 0.0 && factor <= 1.0
dir rename setup
basename matches
cull basename
inexact renames
Performing inexact rename detection
!one->rename_used || want_copies || break_idx
write back to queue
tracking failed somehow; failed to find associated dst for broken pair
internal error: dst already matched.
find_basename_matches
!rename_src[i].p->one->rename_used
src_index == -1 || src_index == i
handle_early_known_dir_renames
!one->rename_used
val != -1
res == RELEVANT_FOR_ANCESTOR
No such path '%s' in the diff
error reading directory '%s'
error closing directory '%s'
error opening directory '%s'
dir.c
DIR_SHOW_IGNORED and DIR_SHOW_IGNORED_TOO are exclusive
pathspec '%s' did not match any file(s) known to git
read_directory
GIT_FORCE_UNTRACKED_CACHE
do not know how to check file existence in arbitrary repo
dir_inside_of
dir && subdir && *dir && *subdir
.gitignore
info/sparse-checkout
could not create directories for %s
%s/config
could not migrate git directory from '%s' to '%s'
unrecognized pattern: '%s'
unrecognized negative pattern: '%s'
your sparse-checkout file may have issues: pattern '%s' is repeated
disabling cone pattern matching
cannot use %s as an exclude file
last_matching_pattern_from_list
pattern->baselen == 0 || pattern->base[pattern->baselen - 1] == '/'
oops in prep_exclude
prep_exclude
stk->baselen == dir->basebuf.len
failed to get kernel name and information
Location %s, system %s
GIT_DISABLE_UNTRACKED_CACHE
untracked cache is disabled on this system or location
Unhandled value for directory_exists_in_index: %d
could not open directory '%s'
directories-visited
paths-visited
node-creation
gitignore-invalidation
directory-invalidation
opendir
info/exclude
index file corrupt in repo %s
TERM
dumb
VISUAL
EDITOR
hint: Waiting for your editor to close the file...%c
editor
unable to start editor '%s'
There was a problem with the editor '%s'.
Filtering content
external filter '%s' signaled that '%s' is now available although it has not been delayed earlier
'%s' was not filtered properly
update_ce_after_write
entry.c
state->istate
Can't remove entry to a path
could not stat file '%s'
%s already exists, no checkout
unable to unlink old '%s'
unable to read sha1 file of %s (%s)
unable to create symlink %s
unable to create file %s
cannot create temporary submodule %s
cannot create submodule directory %s
unknown file mode for %s in index
unable to stat just-written file %s
.merge_link_XXXXXX
cannot rmdir '%s'
cannot create directory at '%s'
SHIFT-JIS
GIT_ALTERNATE_OBJECT_DIRECTORIES
GIT_CONFIG_COUNT
GIT_OBJECT_DIRECTORY
GIT_GRAFT_FILE
GIT_REPLACE_REF_BASE
GIT_PREFIX
GIT_COMMON_DIR
refs/replace/
environment.c
git environment hasn't been setup
internal error: work tree has already been set
Current worktree: %s
New worktree: %s
objects/%s
GIT_PRINT_SHA1_ELLIPSIS
refs/namespaces/%s
bad git namespace path "%s"
could not set GIT_DIR to '%s'
setup: move $GIT_DIR to '%s'
ewah_set
ewah_bitmap.c
i >= self->bit_size
ewah_iterator_next
it->literals < it->lw
it->pointer < it->buffer_size
add_empty_word
rlw_get_run_bit(self->rlw) == v
rlw_get_running_len(self->rlw) == 0
rlw_get_run_bit(self->rlw) == 0
rlw_get_literal_words(self->rlw) == 0
corrupt ewah bitmap: eof before bit size
corrupt ewah bitmap: eof before length
corrupt ewah bitmap: eof in data (%ju bytes short)
corrupt ewah bitmap: eof before rlw
exec-cmd.c
trace: could not determine executable path from: %s
trace: resolved executable dir: %s
GIT_EXEC_PATH
libexec/git-core
/usr/local/bin:/usr/bin:/bin
trace: exec failed: %s
too many args to run %s
trace: could not normalize path: %s
trace: resolved executable path from Darwin stack: %s
trace: resolved executable path from argv0: %s
system_prefix
executable_dirname
is_absolute_path(executable_dirname)
/Applications/Xcode.app/Contents/Developer/usr
RUNTIME_PREFIX requested, but prefix computation failed.  Using static fallback '%s'.
no matching remote head
fetch-pack.c
Protocol V2 does not provide shallows at this point in the fetch
unable to write request to remote
acknowledgments
unexpected 'ready' from remote
no such remote ref %s
Server does not allow request for unadvertised object %s
fetch.unpacklimit
fetch.fsckobjects
fetch.uriprotocols
fetch.fsck.skiplist
fetch.fsck.
negotiation_v2
shallow-info
wanted-refs
packfile-uris
packfile
http-fetch
--packfile=%.*s
--index-pack-arg=%s
fetch-pack: unable to spawn http-fetch
fetch-pack: expected keep then TAB at start of http-fetch output
fetch-pack: expected hash then LF at end of http-fetch output
fetch-pack: unable to finish http-fetch
fetch-pack: pack downloaded from %s does not match expected hash %.*s
fsck failed
parse_remote_refs_and_find_cutoff
mark_complete_local_refs
mark_common_remote_refs
Marking %s as complete
want %s (%s)
already have %s (%s)
Server does not support shallow requests
Server supports filter
filter %s
filtering not recognized by server, ignoring
packfile-uris %s
done
deepen %d
deepen-since %ju
deepen-not %s
deepen-relative
ref-in-want
want %s
want-ref %s
have %s
invalid shallow line: %s
unshallow 
invalid unshallow line: %s
error in object: %s
no shallow found: %s
expected shallow/unshallow, got %s
error processing shallow info: %d
expected wanted-ref, got '%s'
unexpected wanted-ref: '%s'
error processing wanted refs: %d
expected '<hash> <uri>', got: %s
expected DELIM
fetch-pack: unable to fork off sideband demultiplexer
protocol error: bad pack header
--keep=fetch-pack %ju on %s
fetch-pack: unable to fork off %s
fetch-pack: invalid index-pack output
%s failed
error in sideband demultiplexer
name of pack lockfile should end with .keep (was '%s')
invalid length read %d
invalid hash
Server version is %.*s
Server supports %s
Server does not support shallow clients
multi_ack_detailed
allow-tip-sha1-in-want
allow-reachable-sha1-in-want
Server does not support --shallow-since
Server does not support --shallow-exclude
Server does not support --deepen
Server does not support this repository's object format
no common commits
--stateless-rpc requires multi_ack_detailed
 multi_ack_detailed
 multi_ack
 side-band-64k
 side-band
 deepen-relative
 thin-pack
 no-progress
 include-tag
 deepen-since
 deepen-not
 filter
want %s%s
negotiation_v0_v1
have %s
got %s %d %s
invalid commit %s
giving up
got %s (%d) %s
unable to write to remote
git fetch-pack: expected shallow list
git fetch-pack: expected a flush packet after shallow list
git fetch-pack: expected ACK/NAK, got a flush packet
ACK 
ready
git fetch-pack: expected ACK/NAK, got '%s'
command=fetch
session-id=%s
mismatched algorithms: client %s; server %s
the server does not support algorithm '%s'
error reading section header '%s'
expected '%s', received '%s'
unexpected acknowledgment line: '%s'
error processing acks: %d
expected packfile to be sent after 'ready'
expected no other sections to be sent after no 'ready'
git fetch-pack: expected response end packet
merge.summary
%s: negative length %s
merge.suppressdest
No current branch
error in line %d: %.*s
 of 
branch 
remote-tracking branch 
%s of %s
branches 
remote-tracking branches 
tags 
commits 
 of %s
 into %s
 and %s
gpg verification failed.
^HEAD
* %s: (%d commits)
* %s:
  ...
  %s
%c %s 
%s (%d) and %s (%d)
%s (%d) and others
  : %.*s
Unhandled message id: %s
Cannot demote %s to %s
skiplist
skiplist requires a path
Missing '=': '%s'
Unknown object type for %s
invalid format - expected 'object' line
invalid 'object' line format - bad sha1
invalid format - expected 'type' line
invalid format - unexpected end after 'type' line
invalid 'type' value
invalid format - expected 'tag' line
invalid 'tag' name: %.*s
invalid format - expected 'tagger' line
invalid format - extra header(s) after 'tagger'
no valid object to fsck
unknown type '%d' (internal fsck error)
object %s: %s
unable to read .gitmodules blob
non-blob found at .gitmodules
fsck.skiplist
skiplist=%s
fsck.
NUL_IN_HEADER
UNTERMINATED_HEADER
BAD_DATE
BAD_DATE_OVERFLOW
BAD_EMAIL
BAD_NAME
BAD_OBJECT_SHA1
BAD_PARENT_SHA1
BAD_TAG_OBJECT
BAD_TIMEZONE
BAD_TREE
BAD_TREE_SHA1
BAD_TYPE
DUPLICATE_ENTRIES
MISSING_AUTHOR
MISSING_COMMITTER
MISSING_EMAIL
MISSING_NAME_BEFORE_EMAIL
MISSING_OBJECT
MISSING_SPACE_BEFORE_DATE
MISSING_SPACE_BEFORE_EMAIL
MISSING_TAG
MISSING_TAG_ENTRY
MISSING_TREE
MISSING_TREE_OBJECT
MISSING_TYPE
MISSING_TYPE_ENTRY
MULTIPLE_AUTHORS
TREE_NOT_SORTED
UNKNOWN_TYPE
ZERO_PADDED_DATE
GITMODULES_MISSING
GITMODULES_BLOB
GITMODULES_LARGE
GITMODULES_NAME
GITMODULES_SYMLINK
GITMODULES_URL
GITMODULES_PATH
GITMODULES_UPDATE
BAD_FILEMODE
EMPTY_NAME
FULL_PATHNAME
HAS_DOT
HAS_DOTDOT
HAS_DOTGIT
NULL_SHA1
ZERO_PADDED_FILEMODE
NUL_IN_COMMIT
GITMODULES_PARSE
GITIGNORE_SYMLINK
GITATTRIBUTES_SYMLINK
MAILMAP_SYMLINK
BAD_TAG_NAME
MISSING_TAGGER_ENTRY
EXTRA_HEADER_ENTRY
Unknown fsck message type: '%s'
fsck_msg_type
fsck.c
msg_id >= 0 && msg_id < FSCK_MSG_MAX
in tree %s: entry %s has bad mode %.6o
%.*s~%d
unterminated header: NUL at offset %ld
unterminated header
invalid author/committer line - missing space before email
invalid author/committer line - bad name
invalid author/committer line - missing email
invalid author/committer line - bad email
invalid author/committer line - missing space before date
invalid author/committer line - zero-padded date
invalid author/committer line - date causes integer overflow
invalid author/committer line - bad date
invalid author/committer line - bad time zone
.gitmodules too large to parse
could not parse gitmodules blob
disallowed submodule name: %s
disallowed submodule url: %s
disallowed submodule path: %s
disallowed submodule update setting: %s
git://
http::
https::
ftp::
ftps::
http://
https://
ftp://
ftps://
cannot be parsed as a tree
.gitmodules is a symbolic link
.gitignore is a symlink
.gitattributes is a symlink
.mailmap is a symlink
contains entries pointing to null sha1
contains full pathnames
contains empty pathname
contains '.'
contains '..'
contains '.git'
contains zero-padded file modes
contains bad file modes
contains duplicate file entries
not properly sorted
invalid format - expected 'tree' line
invalid 'tree' line format - bad sha1
invalid 'parent' line format - bad sha1
invalid format - expected 'author' line
invalid format - multiple 'author' lines
invalid format - expected 'committer' line
NUL byte in the commit object body
GIT_TRACE_FSMONITOR
corrupt fsmonitor extension (too short)
%llu
bad fsmonitor version %d
failed to parse ewah bitmap reading fsmonitor index extension
fsmonitor.c
extension/fsmn/read/token
read fsmonitor extension successful '%s'
extension/fsmn/write/token
write fsmonitor extension successful '%s'
refresh fsmonitor
Empty last update token.
fsmonitor process '%s'
fsmonitor process '%s' returned %s
success
failure
add fsmonitor
remove fsmonitor
fsmonitor_dirty has more entries than the index (%ju > %u)
core.fsmonitorhookversion
Invalid hook version '%i' in core.fsmonitorhookversion. Must be 1 or 2.
fsm_hook
query
query/failed
query/response-length
query/trivial-response
fsmonitor_refresh_callback '%s'
LANGUAGE
user.signingkey
unsupported value for %s: %s
gpg.openpgp.program
openpgp
gpg.x509.program
x509
--status-fd=2
-bsau
[GNUPG:] SIG_CREATED 
gpg failed to sign the data
.git_vtag_tmpXXXXXX
could not create temporary file
failed writing detached signature to '%s'
gpg-interface.c
bad signature '%s'
--status-fd=1
[GNUPG:] GOODSIG 
[GNUPG:] 
GOODSIG 
BADSIG 
ERRSIG 
EXPSIG 
EXPKEYSIG 
REVKEYSIG 
VALIDSIG 
TRUST_
gpgsm
--keyid-format=long
-----BEGIN PGP SIGNATURE-----
-----BEGIN PGP MESSAGE-----
-----BEGIN SIGNED MESSAGE-----
UNDEFINED
NEVER
MARGINAL
FULLY
ULTIMATE
log.graphcolors
diff_output_prefix_callback
graph.c
ignore invalid color '%.*s' in log.graphColors
graph_output_pre_commit_line
graph->num_parents >= 3
0 <= graph->expansion_row && graph->expansion_row < graph_num_expansion_rows(graph)
graph_output_commit_char
graph->revs->boundary
graph_output_post_merge_line
par_column >= 0
graph_output_collapsing_line
target * 2 <= i
graph->mapping[i] == -1
graph->mapping[i - 1] > target
graph->mapping[i - 2] < 0
grep.extendedregexp
grep.patterntype
grep.linenumber
grep.fullname
color.grep.match
color.grep.matchcontext
color.grep.matchselected
color.grep.
incomplete pattern expression: %s
function
lineNumber
matchContext
matchSelected
selected
separator
basic
extended
fixed
bad %s argument: %s
grep.c
a non-header pattern in grep header list.
unknown header field %d
malformed header expr
unmatched parenthesis
not a pattern expression %s
--and not followed by pattern expression
--not not followed by pattern expression
--not followed by non pattern expression
given pattern contains NULL byte (via -f <file>). This is only supported with -P under PCRE v2
cannot use Perl-compatible regexes when not compiled with USE_LIBPCRE
In '%s' at %d, 
%s, 
%s'%s': %s
grep_splice_or
x->node == GREP_NODE_OR
grep call which could print a name requires grep_source.name be non-NULL
unknown binary handling mode
Binary file 
 matches
invalid grep_source type to load
'%s': short read
'%s': unable to read %s
attempt to textconv something without a path?
pcre_exec failed with error code %d
regexec_buf
git-compat-util.h
nmatch > 0 && pmatch
Not a valid grep expression
Unexpected node type (internal error) %d
match_one_pattern
p->field < ARRAY_SIZE(header_field)
regexp returned nonsense
hash-lookup.c
assertion failed in binary search
PATH
available git commands in '%s'
git commands available from elsewhere on your $PATH
These are common Git commands used in various situations:
The Git concept guides are:
See 'git help <command>' to read about a specific subcommand
External commands
   %s
Command aliases
git: '%s' is not a git command. See 'git --help'.
help.c
Uh oh. Your system reports no Git commands at all.
WARNING: You called a Git command named '%s', which does not exist.
Continuing under the assumption that you meant '%s'.
Continuing in %0.1f seconds, assuming that you meant '%s'.
The most similar command is
The most similar commands are
git version %s
cpu: %s
x86_64
built from commit: %s
no commit associated with this build
sizeof-long: %d
sizeof-size_t: %d
shell-path: %s
git version [<options>]
build-options
also print build options
%s: %s - %s
Did you mean this?
Did you mean one of these?
.exe
start a working area (see also: git help tutorial)
work on the current change (see also: git help everyday)
examine the history and state (see also: git help revisions)
grow, mark and tweak your common history
collaborate (see also: git help workflows)
ancillaryinterrogators
ancillarymanipulators
complete
foreignscminterface
guide
history
mainporcelain
plumbinginterrogators
plumbingmanipulators
purehelpers
synchelpers
synchingrepositories
git-add
Add file contents to the index
git-am
Apply a series of patches from a mailbox
git-annotate
Annotate file lines with commit information
git-apply
Apply a patch to files and/or to the index
git-archimport
Import a GNU Arch repository into Git
git-archive
Create an archive of files from a named tree
Use binary search to find the commit that introduced a bug
git-blame
Show what revision and author last modified each line of a file
git-branch
List, create, or delete branches
git-bugreport
Collect information for user to file a bug report
git-bundle
Move objects and refs by archive
git-cat-file
Provide content or type and size information for repository objects
git-check-attr
Display gitattributes information
git-check-ignore
Debug gitignore / exclude files
git-check-mailmap
Show canonical names and email addresses of contacts
git-checkout
Switch branches or restore working tree files
git-checkout-index
Copy files from the index to the working tree
git-check-ref-format
Ensures that a reference name is well formed
git-cherry
Find commits yet to be applied to upstream
git-cherry-pick
Apply the changes introduced by some existing commits
git-citool
Graphical alternative to git-commit
git-clean
Remove untracked files from the working tree
git-clone
Clone a repository into a new directory
git-column
Display data in columns
git-commit
Record changes to the repository
git-commit-graph
Write and verify Git commit-graph files
git-commit-tree
Create a new commit object
git-config
Get and set repository or global options
git-count-objects
Count unpacked number of objects and their disk consumption
git-credential
Retrieve and store user credentials
git-credential-cache
Helper to temporarily store passwords in memory
git-credential-store
Helper to store credentials on disk
git-cvsexportcommit
Export a single commit to a CVS checkout
git-cvsimport
Salvage your data out of another SCM people love to hate
git-cvsserver
A CVS server emulator for Git
git-daemon
A really simple server for Git repositories
git-describe
Give an object a human readable name based on an available ref
git-diff
Show changes between commits, commit and working tree, etc
git-diff-files
Compares files in the working tree and the index
git-diff-index
Compare a tree to the working tree or index
git-diff-tree
Compares the content and mode of blobs found via two tree objects
git-difftool
Show changes using common diff tools
git-fast-export
Git data exporter
git-fast-import
Backend for fast Git data importers
git-fetch
Download objects and refs from another repository
git-fetch-pack
Receive missing objects from another repository
git-filter-branch
Rewrite branches
git-fmt-merge-msg
Produce a merge commit message
git-for-each-ref
Output information on each ref
git-for-each-repo
Run a Git command on a list of repositories
git-format-patch
Prepare patches for e-mail submission
git-fsck
Verifies the connectivity and validity of the objects in the database
git-gc
Cleanup unnecessary files and optimize the local repository
git-get-tar-commit-id
Extract commit ID from an archive created using git-archive
git-grep
Print lines matching a pattern
git-gui
A portable graphical interface to Git
git-hash-object
Compute object ID and optionally creates a blob from a file
Display help information about Git
git-http-backend
Server side implementation of Git over HTTP
git-http-fetch
Download from a remote Git repository via HTTP
git-http-push
Push objects over HTTP/DAV to another repository
git-imap-send
Send a collection of patches from stdin to an IMAP folder
git-index-pack
Build pack index file for an existing packed archive
git-init
Create an empty Git repository or reinitialize an existing one
git-instaweb
Instantly browse your working repository in gitweb
git-interpret-trailers
Add or parse structured information in commit messages
gitk
The Git repository browser
git-log
Show commit logs
git-ls-files
Show information about files in the index and the working tree
git-ls-remote
List references in a remote repository
git-ls-tree
List the contents of a tree object
git-mailinfo
Extracts patch and authorship from a single e-mail message
git-mailsplit
Simple UNIX mbox splitter program
git-maintenance
Run tasks to optimize Git repository data
git-merge
Join two or more development histories together
git-merge-base
Find as good common ancestors as possible for a merge
git-merge-file
Run a three-way file merge
git-merge-index
Run a merge for files needing merging
git-merge-one-file
The standard helper program to use with git-merge-index
git-mergetool
Run merge conflict resolution tools to resolve merge conflicts
git-merge-tree
Show three-way merge without touching index
git-multi-pack-index
Write and verify multi-pack-indexes
git-mktag
Creates a tag object with extra validation
git-mktree
Build a tree-object from ls-tree formatted text
git-mv
Move or rename a file, a directory, or a symlink
git-name-rev
Find symbolic names for given revs
git-notes
Add or inspect object notes
git-p4
Import from and submit to Perforce repositories
git-pack-objects
Create a packed archive of objects
git-pack-redundant
Find redundant pack files
git-pack-refs
Pack heads and tags for efficient repository access
git-patch-id
Compute unique ID for a patch
git-prune
Prune all unreachable objects from the object database
git-prune-packed
Remove extra objects that are already in pack files
git-pull
Fetch from and integrate with another repository or a local branch
git-push
Update remote refs along with associated objects
git-quiltimport
Applies a quilt patchset onto the current branch
git-range-diff
Compare two commit ranges (e.g. two versions of a branch)
git-read-tree
Reads tree information into the index
git-rebase
Reapply commits on top of another base tip
Receive what is pushed into the repository
git-reflog
Manage reflog information
git-remote
Manage set of tracked repositories
git-repack
Pack unpacked objects in a repository
git-replace
Create, list, delete refs to replace objects
git-request-pull
Generates a summary of pending changes
git-rerere
Reuse recorded resolution of conflicted merges
git-reset
Reset current HEAD to the specified state
git-restore
Restore working tree files
git-revert
Revert some existing commits
git-rev-list
Lists commit objects in reverse chronological order
git-rev-parse
Pick out and massage parameters
git-rm
Remove files from the working tree and from the index
git-send-email
Send a collection of patches as emails
git-send-pack
Push objects over Git protocol to another repository
git-shell
Restricted login shell for Git-only SSH access
git-shortlog
Summarize 'git log' output
git-show
Show various types of objects
git-show-branch
Show branches and their commits
git-show-index
Show packed archive index
git-show-ref
List references in a local repository
git-sh-i18n
Git's i18n setup code for shell scripts
git-sh-setup
Common Git shell script setup code
git-sparse-checkout
Initialize and modify the sparse-checkout
git-stash
Stash the changes in a dirty working directory away
git-stage
Add file contents to the staging area
git-status
Show the working tree status
git-stripspace
Remove unnecessary whitespace
git-submodule
Initialize, update or inspect submodules
git-svn
Bidirectional operation between a Subversion repository and Git
git-switch
Switch branches
git-symbolic-ref
Read, modify and delete symbolic refs
git-tag
Create, list, delete or verify a tag object signed with GPG
git-unpack-file
Creates a temporary file with a blob's contents
git-unpack-objects
Unpack objects from a packed archive
git-update-index
Register file contents in the working tree to the index
git-update-ref
Update the object name stored in a ref safely
git-update-server-info
Update auxiliary info file to help dumb servers
Send archive back to git-archive
Send objects packed back to git-fetch-pack
git-var
Show a Git logical variable
git-verify-commit
Check the GPG signature of commits
git-verify-pack
Validate packed Git archive files
git-verify-tag
Check the GPG signature of tags
gitweb
Git web interface (web frontend to Git repositories)
git-whatchanged
Show logs with difference each commit introduces
git-worktree
Manage multiple working trees
Create a tree object from the current index
gitattributes
Defining attributes per path
gitcli
Git command-line interface and conventions
gitcore-tutorial
A Git core tutorial for developers
gitcredentials
Providing usernames and passwords to Git
gitcvs-migration
Git for CVS users
gitdiffcore
Tweaking diff output
giteveryday
A useful minimum set of commands for Everyday Git
gitfaq
Frequently asked questions about using Git
gitglossary
A Git Glossary
githooks
Hooks used by Git
Specifies intentionally untracked files to ignore
gitmailmap
Map author/committer names and/or E-Mail addresses
gitmodules
Defining submodule properties
gitnamespaces
Git namespaces
gitremote-helpers
Helper programs to interact with remote repositories
gitrepository-layout
Git Repository Layout
gitrevisions
Specifying revisions and ranges for Git
gitsubmodules
Mounting one repository inside another
gittutorial-2
A tutorial introduction to Git: part two
gittutorial
A tutorial introduction to Git
gitworkflows
An overview of recommended workflows with Git
Main Porcelain Commands
Ancillary Commands / Manipulators
Ancillary Commands / Interrogators
Interacting with Others
Low-level Commands / Manipulators
Low-level Commands / Interrogators
Low-level Commands / Syncing Repositories
Low-level Commands / Internal Helpers
alias.
   %s   
help.autocorrect
immediate
0123456789abcdef
EMAIL
no email was given and auto-detection is disabled
unable to auto-detect email address (got '%s')
no name was given and auto-detection is disabled
unable to auto-detect name (got '%s')
empty ident name (for <%s>) not allowed
name consists only of disallowed characters: %s
GIT_COMMITTER_DATE
user.useconfigonly
Unknown
/etc/mailname
cannot read /etc/mailname
cannot get host name
%s.(none)
Author identity unknown
Committer identity unknown
*** Please tell me who you are.
  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"
to set your account's default identity.
Omit --global to set the identity only in this repository.
json-writer.c
json-writer: too many jw_end(): '%s'
json-writer: object: missing jw_object_begin(): '%s'
json-writer: object: not in object: '%s'
\u%04x
%%.%df
json-writer: object: missing jw_end(): '%s'
json-writer: array: missing jw_array_begin()
json-writer: array: not in array
memory exhausted
kwset.c
Cannot allocate a negative amount: %ld
range_set_append_unsafe
line-log.c
a <= b
range_set_append
rs->nr == 0 || rs->ranges[rs->nr-1].end <= a
sort_and_merge_range_set
o <= rs->nr
range_set_check_invariants
rs->ranges[0].start < rs->ranges[0].end
rs->ranges[i-1].end < rs->ranges[i].start
rs->ranges[i].start < rs->ranges[i].end
More than one commit to dig from: %s and %s?
No commit specified?
-L argument not 'start,end:file' or ':funcname:file': %s
malformed -L argument '%s'
There is no path %s in the commit
Cannot read blob %s
nth_line
d && line <= d->lines
d->spec && d->spec->data
range_set_union
out->nr == 0
%s%sdiff --git a/%s b/%s%s
%s%s+++ b/%s%s
%s%s@@ -%ld,%ld +%ld,%ld @@%s
\ No newline at end of file
line_log_data_copy
line_log_data_copy_one
queue_diffs
move_diff_queue
src != dst
process_all_files
process_diff_filepair
pair->two->path
rg->path
pair->two->oid_valid
parse_range_funcname
line-range.c
*arg == ':'
-L parameter '%s': %s
-L parameter '%s' starting at line %ld: no match
-L parameter '%s' matches at EOF
-L parameter: regexec() failed: %s
-L invalid empty range
-L invalid line number: %ld
-L parameter '%s' starting at line %ld: %s
linear-assignment.c
negative j: %d
blob:none
blob:limit
sparse:oid
object:type
combine
list-objects-filter-options.c
list_object_filter_config_name: invalid argument '%d'
multiple filter-specs cannot be combined
negative growth in ALLOC_GROW_BY
no filter_spec available for this filter
blob:limit=%lu
unable to upgrade repository format to support partial clone
remote.%s.promisor
remote.%s.partialclonefilter
filter_options already populated
blob:limit=
tree:
expected 'tree:<depth>'
sparse:oid=
sparse:path=
sparse:path filters support has been dropped
object:type=
'%s' for 'object:type=<type>' isnot a valid object type
combine:
invalid filter-spec '%s'
expected something after combine:
parse_combine_filter
subspecs[sub]->buf[last] == '+'
must escape char in sub-filter-spec: '%c'
~`!@#$^&*()[]{}\;'",<>?
Add to combine filter-spec: %s
list-objects-filter.c
invalid list-objects filter choice: %d
unknown filter_situation: %d
filter_blobs_none
obj->type == OBJ_TAG
obj->type == OBJ_COMMIT
obj->type == OBJ_TREE
obj->type == OBJ_BLOB
(obj->flags & SEEN) == 0
filter_blobs_limit
filter_trees_depth
unable to access sparse blob in '%s'
unable to parse sparse filter data in %s
filter_sparse
filter_data->nr > 1
filter_object_type
expected oidset to be cleared already
unable to load root tree for commit %s
traverse_trees_and_blobs
list-objects.c
base->len == 0
unknown pending object %s (%s)
bad tree object
Skipping contents of tree %s...
entry '%s' in tree %s has tree mode, but is not a tree
entry '%s' in tree %s has blob mode, but is not a blob
bad blob object
conflict-marker-size
merge.default
driver
%s: lacks value
ll_ext_merge
ll-merge.c
opts
custom merge driver %s lacks command line.
built-in binary merge
built-in 3-way text merge
built-in union merge
ll_binary_merge
Cannot merge binary files: %s (%s vs. %s)
ll_xdl_merge
ll_union_merge
Unable to create '%s.lock': %s.
Another git process seems to be running in this repository, e.g.
an editor opened by 'git commit'. Please make sure all processes
are terminated then try again. If it still fails, a git process
may have crashed in this repository earlier:
remove the file manually to continue.
Unable to create '%s.lock': %s
lockfile.c
get_locked_file_path() called for malformed lock object
tag: 
%04d-%s
Subject: [%s%s%0*d/%d] 
Subject: [%s] 
From %s Mon Sep 17 00:00:00 2001
Message-Id: <%s>
In-Reply-To: <%s>
%s<%s>
References: 
%sMIME-Version: 1.0
Content-Type: multipart/mixed; boundary="%s%s"
This is a multi-part message in MIME format.
--%s%s
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit
--%s%s
Content-Type: text/x-patch; name="%s"
Content-Transfer-Encoding: 8bit
Content-Disposition: %s; filename="%s"
attachment
 (from %s)
log size %i
grafted
object names
invalid replace ref %s
replaced
No signature
%s%.*s%s%s
malformed mergetag
merged tag '%s'
tag %s names a non-parent %s
parent #%d, tagged '%s'
peel
symrefs
ref-prefix 
expected flush after ls-refs arguments
advertise
invalid value '%s' for lsrefs.unborn
unborn %s
 symref-target:%s
 peeled:%s
empty patch: '%s'
>From 
Content-Type
Content-Transfer-Encoding
Message-Id
Subject
cannot convert from %s to %s
format=
flowed
delsp=
boundary=
Too many boundaries to handle
charset=
base64
quoted-printable
mailinfo.c
Message-Id: %s
>From
[PATCH]
diff -
Index: 
quoted CRLF detected
Detected mismatched boundaries, can't recover
inbody_header_accum, if not empty, must always contain a valid in-body header
a NUL byte in '%s' is not allowed.
Author: %s
Email: %s
%s: %s
%s: %.*s
mailinfo.
mailinfo.quotedcr
HEAD:.mailmap
.mailmap
unable to open mailmap at %s
unable to read mailmap object at %s
mailmap is not a blob: %s
cannot find path %s in tree %s
cannot read tree %s
entry %s in tree %s is not a tree
entry %.*s not found in tree %s
.our
.their
merge_switch_to_result
merge-ort.c
record_conflicted
write_auto_merge
display messages
merge_finalize
incore_nonrecursive
merge_incore_nonrecursive
incore_recursive
merge_incore_recursive
opt->ancestor == NULL
record_conflicted_index_entries
ci && !ci->merged.clean
Conflicted %s but nothing in basic working tree or index; this shouldn't happen
cruft
Note: %s not up to date and in way of checking out conflicted version; old copy renamed to %s
sanity checks
opt->priv->call_depth == 0
!opt->priv->toplevel_dir || 0 == strlen(opt->priv->toplevel_dir)
allocate/init
collect_merge_info
collecting merge info failed for trees %s, %s, %s
renames
process_entries
Called collect_merge_info_callback wrong
collect_merge_info_callback
mbase_null == is_null_oid(&names[0].oid)
side1_null == is_null_oid(&names[1].oid)
side2_null == is_null_oid(&names[2].oid)
!mbase_null || !side1_null || !side2_null
mask > 0 && mask < 8
setup_path_info
!is_null || resolved
!df_conflict || !resolved
resolved == (merged_version != NULL)
collect_rename_info
renames->dir_rename_mask == 0 || renames->dir_rename_mask == (dirmask & ~1)
traverse_trees_wrapper
renames->dir_rename_mask == 2 || renames->dir_rename_mask == 4
traverse_trees_wrapper_callback
n==3
regular renames
directory renames
process renames
diffcore_rename
CONFLICT (directory rename split): Unclear where to rename %s to; it was renamed to multiple other directories, with no destination getting a majority of the files.
compute_collisions
new_path
Failed to apply directory rename!
c_info is NULL
apply_directory_rename_modifications
ci->filemask == 2 || ci->filemask == 4
ci->dirmask == 0
new_ci && !new_ci->merged.clean
(new_ci->filemask & ci->filemask) == 0
process_renames
base && !base->merged.clean
side1 && !side1->merged.clean
side2 && !side2->merged.clean
side1 == side2
CONFLICT (rename/rename): %s renamed to %s in %s and to %s in %s.
newinfo && !newinfo->merged.clean
target_index == 1 || target_index == 2
source_deleted || oldinfo->filemask & old_sidemask
CONFLICT (rename involved in collision): rename of %s -> %s has content conflicts AND collides with another path; this may result in nested conflict markers.
CONFLICT (rename/delete): %s renamed to %s in %s, but deleted in %s.
(S_IFMT & a->mode) == (S_IFMT & b->mode)
S_ISREG(a->mode)
unsupported object type in the tree: %06o for %s
pathnames[0] && pathnames[1] && pathnames[2] && opt->ancestor
Note: Fast-forwarding submodule %s to %s
Failed to merge submodule %s
Failed to merge submodule %s, but a possible merge resolution exists:
Failed to merge submodule %s, but multiple possible merges exist:
%h %s
process_entries setup
plist grow
plist copy
plist special sort
processing
process_entries cleanup
dir_metadata.offsets.nr = %d (should be 1)
dir_metadata.offsets.items[0].util = %u (should be 0)
dir_metadata accounting completely off; shouldn't happen
write_completed_directory
dir_info
record_entry_for_tree
strchr(basename, '/') == NULL
ci->match_mask == 0 || ci->match_mask == 3 || ci->match_mask == 5 || ci->match_mask == 6
ci->df_conflict
ci->filemask != 0
ci->merged.result.mode == S_IFDIR
CONFLICT (file/directory): directory in the way of %s from %s; moving it to %s instead.
othermask == 2 || othermask == 4
ci->merged.is_null == (ci->filemask == ci->match_mask)
CONFLICT (distinct types): %s had different types on each side; renamed both of them so each can be recorded somewhere.
CONFLICT (distinct types): %s had different types on each side; renamed one of them so each can be recorded somewhere.
rename_a || rename_b
df_file_index == 1 || df_file_index == 2
CONFLICT (modify/delete): %s deleted in %s and modified in %s.  Version %s of %s left in tree.
write_tree
offset <= versions->nr
merge_trees
merge-recursive.c
opt->ancestor != NULL
constructed merge base
merge_recursive
opt->ancestor == NULL || !strcmp(opt->ancestor, "constructed merge base")
Could not parse object '%s'
GIT_MERGE_VERBOSITY
subtree=
diff-algorithm=
no-renormalize
find-renames=
rename-threshold=
merge_start
opt->repo
opt->branch1 && opt->branch2
opt->detect_renames >= -1 && opt->detect_renames <= DIFF_DETECT_COPY
opt->detect_directory_renames >= MERGE_DIRECTORY_RENAMES_NONE && opt->detect_directory_renames <= MERGE_DIRECTORY_RENAMES_TRUE
opt->rename_limit >= -1
opt->rename_score >= 0 && opt->rename_score <= MAX_SCORE
opt->show_rename_progress >= 0 && opt->show_rename_progress <= 1
opt->xdl_opts >= 0
opt->recursive_variant >= MERGE_VARIANT_NORMAL && opt->recursive_variant <= MERGE_VARIANT_THEIRS
opt->verbosity >= 0 && opt->verbosity <= 5
opt->buffer_output <= 2
opt->obuf.len == 0
opt->priv == NULL
Your local changes to the following files would be overwritten by merge:
  %s
merging of trees %s and %s failed
unprocessed path??? %s
get_directory_renames
entry->new_dir.len == 0
CONFLICT (rename/rename): Rename directory %s->%s in %s. Rename directory %s->%s in %s
WARNING: Avoiding applying %s -> %s rename to %s, because %s itself was renamed.
entry->non_unqiue_dir not set and !new_path
CONFLICT (directory rename split): Unclear where to place %s because directory %s was renamed to multiple other directories, with no destination getting a majority of the files.
collision_ent is NULL
CONFLICT (implicit dir rename): Existing file/dir at %s in the way of implicit directory rename(s) putting the following path(s) there: %s.
CONFLICT (implicit dir rename): Cannot map more than one path to %s; implicit directory renames tried to put these paths there: %s
Refusing to lose dirty file at %s
ren1_src != ren2_src
ren1_dst != ren2_dst
blob expected for %s '%s'
failed to open '%s': %s
failed to symlink '%s': %s
do not know what to do with %06o %s '%s'
failed to create path '%s'%s
Removing %s to make room for subdirectory
: perhaps a D/F conflict?
refusing to lose untracked file at '%s'
add_cacheinfo failed for path '%s'; merge aborting.
add_cacheinfo failed to refresh for path '%s'; merge aborting.
process_entry
opt->branch1 == ci->ren1->branch
Removing %s
file/directory
directory/file
CONFLICT (%s): There is a directory with name %s in %s. Adding %s as %s
Adding %s
CONFLICT (add/add): Merge conflict in %s
fatal merge failure, shouldn't happen.
warn_about_dir_renamed_entries
opt->detect_directory_renames > MERGE_DIRECTORY_RENAMES_NONE
ren->dir_rename_original_type == 'A' || ren->dir_rename_original_type == 'R'
Path updated: %s added in %s inside a directory that was renamed in %s; moving it to %s.
CONFLICT (file location): %s added in %s inside a directory that was renamed in %s, suggesting it should perhaps be moved to %s.
Path updated: %s renamed to %s in %s, inside a directory that was renamed in %s; moving it to %s.
CONFLICT (file location): %s renamed to %s in %s, inside a directory that was renamed in %s, suggesting it should perhaps be moved to %s.
Impossible dir_rename_original_type/clean combination
handle_rename_via_dir
ren->dir_rename_original_dest
Error: Refusing to lose untracked file at %s; writing to %s instead.
CONFLICT (rename/add): Rename %s->%s in %s.  Added %s in %s
version of %s from %s
Failed to execute internal merge
unsupported object type in the tree
Auto-merging %s
merge_3way
a->path && b->path && o->path && opt->ancestor
Failed to merge submodule %s (not checked out)
Failed to merge submodule %s (commits not present)
Failed to merge submodule %s (commits don't follow merge-base)
Fast-forwarding submodule %s to the following commit:
Fast-forwarding submodule %s
Failed to merge submodule %s (merge following commits not found)
Failed to merge submodule %s (not fast-forward)
Found a possible merge resolution for the submodule:
If this is correct simply add it to the index for example
by using:
  git update-index --cacheinfo 160000 %s "%s"
which will accept this suggestion.
Failed to merge submodule %s (multiple merges found)
virtual %s
(bad commit)
print_commit
!merge_remote_util(commit)
 %h: %m %s
renamed
CONFLICT (%s/delete): %s deleted in %s and %s in %s. Version %s of %s left in tree.
CONFLICT (%s/delete): %s deleted in %s and %s to %s in %s. Version %s of %s left in tree.
CONFLICT (%s/delete): %s deleted in %s and %s in %s. Version %s of %s left in tree at %s.
CONFLICT (%s/delete): %s deleted in %s and %s to %s in %s. Version %s of %s left in tree at %s.
CONFLICT (rename/rename): Rename "%s"->"%s" in branch "%s" rename "%s"->"%s" in "%s"%s
 (left unresolved)
%s and %s, both renamed from %s
%s is a directory in %s adding as %s instead
Refusing to lose untracked file at %s; adding as %s instead
CONFLICT (rename/rename): Rename %s->%s in %s. Rename %s->%s in %s
cannot read object %s
object %s is not a blob
modify
Refusing to lose untracked file at %s, even though it's in the way.
content
add/add
handle_content_merge
o->path && a->path && b->path
Skipped %s (merged same as existing)
CONFLICT (%s): Merge conflict in %s
Adding as %s instead
merge.renamelimit
Merging:
found %u common ancestor:
found %u common ancestors:
ancestor
empty tree
merged common ancestors
Temporary merge branch 1
Temporary merge branch 2
merge returned no commit
merged tree
merge.directoryrenames
merge-%s
--%s
failed to read the cache
%s/pack/multi-pack-index-%s.rev
multi-pack-index file %s is too small
multi-pack-index signature 0x%08x does not match signature 0x%08x
multi-pack-index version %d not recognized
multi-pack-index hash version %u does not match version %u
multi-pack-index missing required pack-name chunk
multi-pack-index missing required OID fanout chunk
multi-pack-index missing required OID lookup chunk
multi-pack-index missing required object offsets chunk
multi-pack-index pack names out of order: '%s' before '%s'
midx.c
midx
load/num_packs
load/num_objects
bad pack-int-id: %u (%u total packs)
%s/pack/%s
failed to clear multi-pack-index at %s
multi-pack-index file exists, but failed to parse
Looking for referenced packfiles
failed to load pack in position %d
oid fanout out of order: fanout[%d] = %x > %x = fanout[%d]
the midx contains no oid
Verifying OID order in multi-pack-index
oid lookup out of order: oid[%d] = %s >= %s = oid[%d]
Sorting objects by packfile
Verifying object offsets
failed to load pack entry for oid[%d] = %s
failed to load pack-index for packfile %s
incorrect object offset for oid[%d] = %s: %llx != %llx
Counting referenced objects
Finding and deleting unreferenced packfiles
/pack/pack
could not start pack-objects
could not finish pack-objects
%s/pack/multi-pack-index
invalid hash version
multi-pack-index OID fanout is of the wrong size
Adding packfiles to multi-pack-index
did not see pack-file %s to drop
unknown preferred pack: '%s'
preferred pack '%s' is expired
no pack files to index.
failed to add packfile '%s'
failed to open pack-index '%s'
failed to locate object %d in packfile
incorrect pack-file order: %s before %s
OIDs not in order: %s >= %s
object %s is in an expired pack with int-id %d
object %s requires a large offset (%llx) but the MIDX is not writing large offsets!
too many large-offset objects
%s-%s.rev
multi-pack-index-%s%s
multi-pack-index-
name-hash.c
name-hash-init
initialize name hash
unable to create lazy_dir thread: %s
unable to join lazy_dir_thread
unable to create lazy_name thread: %s
unable to join lazy_name thread: %s
handle_range_dir
begin >= 0
cache entry out of order
hash_dir_entry_with_parent_and_prefix
(parent != NULL) ^ (strchr(prefix->buf, '/') == NULL)
negotiator/noop.c
ack with noop negotiator, which does not emit any commits
negotiator/skipping.c
missing parent in priority queue
received ack for commit %s not sent as 'have'
refs/notes/%s
update notes cache
notes_merge
notes-merge.c
o->local_ref && o->remote_ref
!strcmp(o->local_ref, local_tree->ref)
notes_merge(o->local_ref = %s, o->remote_ref = %s)
Failed to resolve local notes ref '%s'
Could not parse local commit %s (%s)
local commit: %.7s
Failed to resolve remote notes ref '%s'
Could not parse remote commit %s (%s)
remote commit: %.7s
Cannot merge empty notes ref (%s) into empty notes ref (%s)
One merge base found (%.7s)
Multiple merge bases found. Using the first (%.7s)
Merging remote commit %.7s into local commit %.7s with merge-base %.7s
notes_merge(): result = %i, result_oid = %.7s
Committing notes in notes merge worktree at %s
partial notes commit has empty message
could not open %s
Skipping non-SHA1 entry '%s%s'
Failed to stat '%s'
Failed to write blob object from '%s'
Failed to add resolved note '%s' to notes tree
Added resolved note for object %s: %s
Finalized notes merge commit: %s
Removing notes merge worktree at %s/*
merge_from_diffs(base = %.7s, local = %.7s, remote = %.7s)
Merge result: %i unmerged notes and a dirty notes tree
Merge result: %i unmerged notes and a clean notes tree
diff_tree_remote(base = %.7s, remote = %.7s)
Cannot merge entry '%s' (%c): %.7s -> %.7s. Skipping!
diff_tree_remote
oideq(&mp->obj, &obj)
is_null_oid(&mp->remote)
is_null_oid(&mp->base)
!"Invalid existing change recorded"
Stored remote change for %s: %.7s -> %.7s
verify_notes_filepair
p->one->mode == p->two->mode
!is_null_oid(&p->one->oid)
!is_null_oid(&p->two->oid)
is_null_oid(&p->one->oid)
is_null_oid(&p->two->oid)
!strcmp(p->one->path, p->two->path)
diff_tree_local(len = %i, base = %.7s, local = %.7s)
Ignoring local-only change for %s: %.7s -> %.7s
diff_tree_local
is_null_oid(&mp->local) || oideq(&mp->local, &uninitialized)
oideq(&p->one->oid, &mp->base)
oideq(&mp->local, &uninitialized)
Stored local change for %s: %.7s -> %.7s
merge_changes(num_changes = %i)
%.7s: %.7s -> %.7s/%.7s
skipping (no remote change)
skipping (local == remote)
no local change, adopted remote
need content-level merge
Using local notes for %s
Using remote notes for %s
Concatenating local and remote notes for %s
failed to concatenate notes (combine_notes_concatenate)
Concatenating unique lines in local and remote notes for %s
failed to concatenate notes (combine_notes_cat_sort_uniq)
Unknown strategy (%i).
local version
remote version
merge_one_change_manual(obj = %.7s, base = %.7s, local = %.7s, remote = %.7s)
Conflicts:
Auto-merging notes for %s
merge_one_change_manual
!is_null_oid(&p->remote)
CONFLICT (delete/modify): Notes for object %s deleted in %s and modified in %s. Version from %s left in tree.
!is_null_oid(&p->local)
CONFLICT (%s): Merge conflict in notes for object %s
removing from partial merge result
You have not concluded your previous notes merge (%s exists).
Please, use 'git notes merge --commit' or 'git notes merge --abort' to commit/abort the previous merge before you start a new notes merge.
NOTES_MERGE_*
You have not concluded your notes merge (%s exists).
NOTES_MERGE_WORKTREE/.test
unable to create directory %s
missing '%s'. This should not happen
cannot read note %s for object %s
blob expected in note %s for object %s
NOTES_MERGE_WORKTREE/%s
unable to create directory for '%s'
notes-merge
No merge base found; doing history-less merge
create_notes_commit
notes-utils.c
Failed to write notes tree to database
Failed to find/parse commit %s
Failed to commit notes tree to database
Cannot commit uninitialized/unreferenced notes tree
manual
cat_sort_uniq
GIT_NOTES_REWRITE_MODE
GIT_NOTES_REWRITE_REF
Bad %s value: '%s'
overwrite
concatenate
notes.rewrite.
notes.rewritemode
Bad notes.rewriteMode value: '%s'
notes.rewriteref
Refusing to rewrite notes in %s (outside of refs/notes/)
string_list_add_refs_by_glob
notes.c
list->strdup_strings
notes ref %s is invalid
refs/notes/commits
init_notes
!t->initialized
Cannot use notes ref %s
Failed to read notes tree referenced by %s (%s)
load_display_notes
!display_notes_trees
GIT_NOTES_DISPLAY_REF
add_note
t->initialized
remove_note
get_note
for_each_note
write_notes_tree
prune_notes
format_display_notes
display_notes_trees
notes/
Could not read %s for notes-index
prefix_len (%ju) is out of range
prefix_len (%ju) is too small
Failed to load %s %s into notes tree from %s
note
notes.displayref
note_tree_insert
GET_PTR_TYPE(entry) == 0
GET_PTR_TYPE(*p) == PTR_TYPE_NOTE || GET_PTR_TYPE(*p) == PTR_TYPE_SUBTREE
note_tree_remove
i == n && parent_stack[i] == tree
note_tree_consolidate
tree && parent
CLR_PTR_TYPE(parent->a[index]) == tree
for_each_note_helper
path_len < FANOUT_PATH_MAX - 1
construct_path_with_fanout
fanout < the_hash_algo->rawsz
write_each_note
note_path_len <= GIT_MAX_HEXSZ + FANOUT_PATH_SEPARATORS
write_each_note_helper
memchr(path + 3 * n, '/', path_len - (3 * n)) == NULL
tree_write_stack_init_subtree
!tws->next
tws->path[0] == '\0' && tws->path[1] == '\0'
%o %.*s%c
Notes:
Notes (%s):
sha1
sha256
raceproof_create_file
object-file.c
*path
objects/info/alternates
unable to fdopen alternates lockfile
unable to read alternates file
unable to move new alternates file into place
path '%s' does not exist
%s/.git/objects
reference repository '%s' as a linked checkout is not supported yet.
reference repository '%s' is not a local repository.
%s/shallow
reference repository '%s' is shallow
%s/info/grafts
reference repository '%s' is grafted
mmap failed
%s %ju
failed to read object %s
replacement %s not found for %s
loose object %s (stored in %s) is corrupt
packed object %s (stored in %s) is corrupt
unable to write file %s
unable to set permission to '%s'
cannot read object for %s
open("%s")
%s: failed to insert into database
readlink("%s")
%s: unsupported file type
%s is not a valid object
%s is not a valid '%s' object
invalid loose object subdirectory: %x
%02x
unable to open %s
unable to mmap %s
unable to unpack header of %s
unable to parse header of %s
unable to unpack contents of %s
hash mismatch for %s (expected %s)
trying to init unknown hash
trying to clone unknown hash
trying to update unknown hash
trying to finalize unknown hash
0123456789abcdef
%s: ignoring alternate object stores, nesting too deep
unable to normalize object directory: %s
unable to normalize alternate object path: %s
object directory %s does not exist; check .git/objects/info/alternates
/refs
invalid line while parsing alternate refs: %s
core.alternateRefsCommand
--git-dir=%s
--format=%(objectname)
%s/info/alternates
GIT_MMAP_LIMIT
attempting to mmap %ju over limit %ju
object file %s is empty
invalid object type
unable to unpack %s header with --allow-unknown-type
unable to unpack %s header
unable to parse %s header with --allow-unknown-type
unable to parse %s header
insufficient permission for adding an object to repository database %s
unable to create temporary file
unable to write loose object file
unable to deflate new object %s (%d)
deflateEnd on object %s failed (%d)
confused by unstable object source data for %s
tmp_obj_XXXXXX
/tmp_obj_XXXXXX
file write error
loose object file
error when closing loose object file
index_stream_convert_blob
would_convert_to_git_filter_fd(istate, path)
corrupt commit
corrupt tag
read error while indexing %s
<unknown>
short read while indexing %s
strbuf_setlen
corrupt loose object '%s'
garbage at end of loose object '%s'
none
committish
treeish
blob
unknown hint type for '%s': %s
%.*s: expected %s type, but the object dereferences to %s type
refs/heads/
refs/heads/HEAD
object-name.c
incompatible flags for get_oid_with_context
0123456789abcdef
checkout: moving from 
 to 
@{upstream}
@{u}
@{push}
invalid object name '%.*s'.
commit}
tag}
tree}
blob}
object}
refname '%.*s' is ambiguous.
Git normally never creates a ref that ends with 40 hex characters
because it will be ignored when you just specify 40-hex. These refs
may be created by mistake. For example,
  git switch -c $br $(git rev-parse ...)
where "$br" is somehow empty and a 40-hex ref is created. Please
examine these refs and maybe delete them. Turn this message off by
running "git config advice.objectNameWarning false"
log for '%.*s' only goes back to %s
log for '%.*s' only has %d entries
multiple get_short_oid disambiguator flags
short object ID %s is ambiguous
The candidates are:
show_ambiguous_object shouldn't return non-zero
 %ad - %s
  %s %s%s
unknown type
relative path syntax can't be used outside working tree
path '%s' is in the index, but not at stage %d
hint: Did you mean ':%d:%s'?
path '%s' is in the index, but not '%s'
hint: Did you mean ':%d:%s' aka ':%d:./%s'?
path '%s' exists on disk, but not in the index
path '%s' does not exist (neither on disk nor in the index)
path '%s' exists on disk, but not in '%.*s'
path '%s' exists, but not '%s'
hint: Did you mean '%.*s:%s' aka '%.*s:./%s'?
path '%s' does not exist in '%.*s'
invalid object type "%s"
object %s is a %s, not a %s
object %s has unknown type id %d
unable to parse object: %s
hash mismatch %s
tree
could not open object name list: %s
invalid object name: %s
Could not read '%s'
Missing type information for %s (%d/%d)
Building bitmaps
pack-bitmap-write.c
pack-bitmap-write
building_bitmaps_total
Selecting bitmap commits
pack/tmp_bitmap_XXXXXX
unable to make temporary bitmap file readable
unable to rename temporary bitmap file to '%s'
num_selected_commits
num_maximal_commits
Failed to write bitmap index. Packfile doesn't have full closure (object %s is missing)
unable to load tree object %s
Duplicate entry when writing index: %s
Failed to write bitmap index
trying to write commit not in index
pack-bitmap.c
failed to perform bitmap walk
reuse_partial_packfile_from_bitmap
traverse_bitmap_commit_list
bitmap_git->result
count_bitmap_commit_list
failed to load bitmap indexes
you must specify exactly one commit to test
Bitmap v%d test (%d entries loaded)
Found bitmap for %s. %d bits / %08x checksum
Commit %s doesn't have an indexed bitmap
Verifying bitmap entries
mismatch in bitmap results
pack.preferbitmaptips
open_pack_bitmap
!bitmap_git->map
ignoring extra bitmap file: %s
%.*s.bitmap
Corrupted bitmap index (too small)
Corrupted bitmap index file (wrong header)
Unsupported version for bitmap index file (%d)
Unsupported options for bitmap index file (Git requires BITMAP_OPT_FULL_DAG)
corrupted bitmap index file (too short to fit hash cache)
load_pack_bitmap
bitmap_git->map
Failed to load bitmap index (corrupted?)
corrupt ewah bitmap: truncated header for entry %d
corrupt ewah bitmap: commit index %u out of range
Corrupted bitmap pack index
Invalid XOR offset in bitmap pack index
Duplicate entry in bitmap index: %s
object type %d not stored by bitmap type index
filter_bitmap_object_type given invalid object
Object not in bitmap: %s
packfile %s index not opened
Packfile index for %s hash mismatch
%s pack checksum mismatch
%s pack checksum does not match its index
pack-check.c
unable to get oid of object %lu from %s
index CRC mismatch for object %s from %s at offset %ju
cannot unpack %s from %s at offset %ju
packed %s from %s is corrupt
packing_data has already been converted to pack array
GIT_TEST_FULL_IN_PACK_ARRAY
GIT_TEST_OE_SIZE
GIT_TEST_OE_DELTA_SIZE
duplicate object inserted into hash
Duplicate object in hash
bad offset for revindex
pack-revindex.c
pack_pos_to_index: reverse index not yet loaded
pack_pos_to_index: out-of-bounds object at %u
pack_pos_to_offset: out-of-bounds object at %u
pack_pos_to_midx: reverse index not yet loaded
pack_pos_to_midx: out-of-bounds object at %u
midx_to_pack_pos: reverse index not yet loaded
midx_to_pack_pos: out-of-bounds object at %u
%.*s.rev
GIT_TEST_REV_INDEX_DIE_IN_MEMORY
dying as requested by '%s'
reverse-index file %s is too small
reverse-index file %s is corrupt
reverse-index file %s has unknown signature
reverse-index file %s has unsupported version %u
reverse-index file %s has unsupported hash id %u
write_idx_file
pack-write.c
index_name
pack/tmp_idx_XXXXXX
The same object %s appears twice in the pack
qsort_s() failed
cannot both write and verify reverse index
pack/tmp_rev_XXXXXX
could not stat: %s
failed to make %s readable
Unable to reread header of '%s'
Unexpected short read for header of '%s'
Failed to checksum '%s'
Unexpected checksum for %s (disk corruption?)
keep
%s/pack/pack-%s.keep
bad type %d
object size is too enormous to format
unable to make temporary pack file readable
unable to make temporary index file readable
unable to rename temporary pack file
%s.idx
unable to rename temporary index file
%s.rev
unable to rename temporary reverse-index file
could not write '%s' promisor file
write_rev_header: unknown hash version
%s/pack/pack-%s.%s
pack_report: getpagesize()            = %10ju
pack_report: core.packedGitWindowSize = %10ju
pack_report: core.packedGitLimit      = %10ju
pack_report: pack_used_ctr            = %10u
pack_report: pack_mmap_calls          = %10u
pack_report: pack_open_windows        = %10u / %10u
pack_report: pack_mapped              = %10ju / %10ju
index file %s is too small
empty data
index file %s is version %u and is not supported by this binary (try upgrading GIT to a newer version)
non-monotonic index %s
wrong index v1 file size in %s
wrong index v2 file size in %s
packfile.c
pack_name does not end in .pack
%.*s.idx
pack '%s' still has open windows to it
want to close pack marked 'do-not-close'
.keep
packfile %s cannot be accessed
offset beyond end of packfile (truncated pack?)
offset before end of packfile (broken .idx?)
packfile %s cannot be mapped
unable to open object pack directory: %s
bad object header
delta data unpack-initial failed
I am totally screwed
could not find object at offset %ju in pack %s
failed to validate delta base reference at offset %ju from %s
unpack_entry: left loop at a valid delta
unknown object type %i at offset %ju in %s
failed to read delta base object %s at offset %ju from %s
failed to unpack compressed delta at offset %ju from %s
bsearch_pack called without a valid pack-index
offset before start of pack index for %s (corrupt index?)
offset beyond end of pack index for %s (truncated index?)
unable to get sha1 of object %u in %s
packfile %s index unavailable
packfile %s not a regular file
packfile %s size changed
error reading from %s
file %s is far too short to be a packfile
file %s is not a GIT packfile
packfile %s is version %u and not supported (try upgrading GIT to a newer version)
packfile %s claims to have %u objects while index indicates %u objects
packfile %s signature is unavailable
packfile %s does not match index
%.*s.pack
GIT_TRACE_PACK_ACCESS
%s %ju
PAGER
COLUMNS
GIT_PAGER_IN_USE
LESS=FRX LV=-c
malformed build-time PAGER_ENV: %s
malformed build-time PAGER_ENV
pager.
GIT_TEST_CHECKOUT_WORKERS
invalid value for GIT_TEST_CHECKOUT_WORKERS: '%s'
parallel-checkout.c
parallel checkout already initialized
pcheckout
collision/dirname
collision/basename
failed to open file '%s'
unable to close file '%s'
unable to stat just-written file '%s'
cannot run parallel checkout: uninitialized or already running
unsupported conv_attrs classification '%d'
write_pc_item_to_fd
is_eligible_for_parallel_checkout(pc_item->ce, &pc_item->ca)
unable to write file '%s'
failed to rewind descriptor of '%s'
failed to truncate file '%s'
--prefix=%s
failed to spawn checkout worker
failed to poll checkout workers
error polling from checkout worker
too short result from checkout worker (got %dB, exp >=%dB)
received result from supposedly finished checkout worker
unexpected item id from checkout worker (got %ju, exp %ju)
wrong result size from checkout worker (got %dB, exp %dB)
checkout worker %d died of signal %d
unknown checkout item status in parallel checkout
parallel checkout finished with pending entries
cannot finish parallel checkout: not initialized yet
option `%s' expects a numerical value
malformed expiration date '%s'
option `%s' expects "always", "auto", or "never"
parse-options-cb.c
malformed object name '%s'
--no-
BUG: switch '%c' (--%s) %s
BUG: option '%s' %s
BUG: switch '%c' %s
--git-completion-helper
--git-completion-helper-all
parse-options.c
parse_short_opt() cannot return these
end-of-options
help-all
parse_long_opt() cannot return these
GIT_TEST_DISALLOW_ABBREVIATED_OPTIONS
unknown switch `%c'
unknown non-ascii option in string: `%s'
fatal: %s
switch `%c'
option `no-%s'
option `%s'
STOP_AT_NON_OPTION and KEEP_UNKNOWN don't go together
Can't keep argv0 if you don't have it
uses incompatible flags LASTARG_DEFAULT and OPTARG
invalid short name
short name already used
uses feature not supported for dashless options
should not accept an argument
OPTION_CALLBACK needs one callback
OPTION_CALLBACK can't have two callbacks
OPTION_LOWLEVEL_CALLBACK needs a callback
OPTION_LOWLEVEL_CALLBACK needs no high level callback
OPT_ALIAS() should not remain at this point. Are you using parse_options_step() directly?
That case is not supported yet.
multi-word argh should use dash to separate words
%s takes no value
%s isn't available
BITOP can't have unset form
%s expects a non-negative integer value with an optional k/m/g suffix
opt->type %d should not happen
%s is incompatible with %s
%s : incompatible with something else
%s requires a value
 --%s%s
did you mean `--%s` (with two dashes)?
disallowed abbreviated or ambiguous option '%.*s'
ambiguous option: %s (could be --%s%s or --%s%s)
An alias must have long option name
alias of --%s
No please. Nested aliases are not supported.
could not find source option '%s' of alias '%s'
cat <<\EOF
usage: %s
   or: %s
    %s
-NUM
%*s%s
()<>[]|
[=%s]
[=<%s>]
[<%s>]
 <%s>
unexpected delta opcode 0
delta replay has gone wild
Could not get patch ID for %s
ref:
HOME
path.c
Could not make %s writable by group
gi7eba
gi250a
gi7d29
maba30
xdg_config_home
filename
XDG_CONFIG_HOME
%s/git/%s
%s/.config/git/%s
xdg_cache_home
XDG_CACHE_HOME
%s/.cache/git/%s
SQUASH_MSG
MERGE_MSG
MERGE_RR
MERGE_MODE
MERGE_AUTOSTASH
AUTO_MERGE
branches
common
hooks
logs
logs/HEAD
logs/refs/bisect
logs/refs/rewritten
logs/refs/worktree
objects
refs/bisect
refs/rewritten
refs/worktree
packed-refs
grafts
.lock
pathspec.c
PATHSPEC_PREFER_CWD and PATHSPEC_PREFER_FULL are incompatible
PATHSPEC_PREFER_CWD requires arguments
empty string is not a valid pathspec. please use . instead if you meant to match all paths
pathspec '%s' is beyond a symbolic link
PATHSPEC_MAXDEPTH_VALID and PATHSPEC_KEEP_ORDER are incompatible
line is badly quoted: %s
'prefix' magic is supposed to be used at worktree's root
%s: 'literal' and 'glob' are incompatible
%s: '%s' is outside repository at '%s'
error initializing pathspec_item
prefix:
invalid parameter for pathspec magic 'prefix'
attr:
Invalid pathspec magic '%.*s' in '%s'
Missing ')' at the end of pathspec magic in '%s'
Only one 'attr:' specification is allowed.
attr spec must not be empty
invalid attribute name %s
should have same number of entries
Escape character '\' not allowed as last character in attr value
cannot use '%c' for value matching
literal
icase
attr
Unimplemented pathspec magic '%c' in '%s'
global 'glob' and 'noglob' pathspec settings are incompatible
global 'literal' pathspec setting is incompatible with all other global pathspec settings
,prefix:%d)
'%s' (mnemonic: '%c')
'%s'
%s: pathspec magic not supported by this command: %s
0000
unable to write flush packet
0001
unable to write delim packet
0002
unable to write stateless separator packet
flush packet write failed
0123456789abcdef
protocol error: impossibly long line
protocol error: bad line length character: %.4s
protocol error: bad line length %d
ERR 
remote error: %s
pkt-line.c
unhandled incomplete sideband: '%s'
PACK
PACK
PACK ...
packet: %12s%c 
GIT_TRACE_PACKET
GIT_TRACE_PACKFILE
sideband
packet write with format failed
packet write failed - data exceeds max packet size
packet write failed: %s
multiple sources given to packet_read
read error
the remote end hung up unexpectedly
strbuf.h
GIT_TEST_PRELOAD_INDEX
preload-index.c
preload
Refreshing index
unable to create threaded lstat: %s
unable to join threaded lstat
preload index
preload/sum_lstat
format:
tformat:
invalid --pretty format: %s
 <%.*s>
%s: %.*s%.*s <%.*s>
Date:   %s
%sDate: %s
key_value_separator
keyonly
valueonly
MIME-Version: 1.0
Content-Type: text/plain; charset=%s
Content-Transfer-Encoding: 8bit
fuller
%C(auto)%h (%s, %ad)
pretty.
invalid --pretty format: '%s' references an alias which points to itself
=?%s?q?
=%02X
 =?%s?q?
(auto)
(describe
marginal
fully
ultimate
(trailers
auto,
always,
unable to parse --pretty format
trunc)
ltrunc)
mtrunc)
--%s=%.*s
bad parent line in commit
Author
Commit
Merge:
prio-queue.c
prio_queue_reverse() on non-LIFO queue
progress.c
don't provide NULL to stop_progress
total_objects
total_bytes
don't provide NULL to stop_progress_msg
, %s.
%3u%% (%ju/%ju)%s
%ju%s
  %s%*s
%s:%*s
  %s%s
%s: %s%*s
GIT_PROGRESS_DELAY
partialclonefilter
promisor remote name cannot begin with '/': %s
fetch.negotiationAlgorithm=noop
--filter=blob:none
promisor-remote: unable to fork off fetch subprocess
promisor-remote: could not write to fetch subprocess
promisor-remote: could not close stdin to fetch subprocess
GIT_ASKPASS
SSH_ASKPASS
GIT_TERMINAL_PROMPT
terminal prompts disabled
could not read %s%s
unable to read askpass response from '%s'
GIT_TEST_PROTOCOL_VERSION
unknown value for config 'protocol.version': %s
unknown value for %s: %s
GIT_PROTOCOL
version 
server is speaking an unknown protocol
protocol error: server explicitly said version 0
object-info: unexpected line: '%s'
object-info: expected flush after arguments
oid 
object-info: protocol error, expected to get oid, not '%s'
 %lu
Removing duplicate objects
rm -f %s
--left-only and --right-only are mutually exclusive
could not parse log for '%s'
--no-color
--decorate=no
--no-prefix
--output-indicator-new=>
--output-indicator-old=<
--output-indicator-context=#
--pretty=medium
could not start `log`
could not read `log` output
could not parse first line of `log` output: did not start with 'commit ': '%s'
diff --git
could not parse git header '%.*s'
 ## 
%s (new)
%s (deleted)
%s => %s
 (mode change %06o => %06o)
 ## Metadata ##
 ## Commit message ##
Notes
 ## %.*s ##
 %s:
range-diff.c
already assigned!
failed to generate diff
%*s:  %s 
%*d:  %s 
 %*s:  %s
 %*d:  %s
^ ## (.*) ##$
^.?@@ (.*)$
unable to mark recent objects
unable to stat %s
unable to get object info for %s
unknown object type for %s: %s
unable to lookup %s
symbolic ref is dangling: %s
unable to create object '%s'
BUG: unknown object type %d
cannot create an empty blob in the object database
%s: can only add regular files, symbolic links or git-directories
'%s' does not have a commit checked out
unable to index file '%s'
unable to add '%s' to index
add '%s'
unable to stat '%s'
invalid path '%s'
Refresh index
%s: needs update
%s: needs merge
read-cache.c
refresh/sum_lstat
refresh/sum_scan
refresh index
%s: index file open failed
%s: cannot stat the open index
%s: index file smaller than expected
%s: unable to map index file
unable to create load_index_extensions thread: %s
unable to join load_index_extensions thread: %s
read/version
read/cache_nr
do_read_index
read cache %s
%s/sharedindex.%s
shared/do_read_index
broken index, expect %s in %s, got %s
cache entry is not allocated from expected memory pool
GIT_TEST_CHECK_CACHE_TREE
GIT_TEST_SPLIT_INDEX
sharedindex_XXXXXX
%s: cannot drop to stage #0
GIT_TEST_VALIDATE_INDEX_CACHE_ENTRIES
mark_fsmonitor_clean '%s'
unsupported ce_mode: %o
will not add file alias '%s' ('%s' already exists in index)
'%s' appears as both a file and as a directory
overflow: -1 - %ju
bad signature 0x%08x
bad index version %d
bad index file sha1 signature
index uses %.4s extension, which we do not understand
ignoring %.4s extension
the name hash isn't thread safe
unable to create load_cache_entries thread: %s
unable to join load_cache_entries thread: %s
unknown index entry format 0x%08x
malformed name field in the index, near path '%s'
unordered stage entries in index
multiple stage entries for merged file '%s'
unordered stage entries for '%s'
could not freshen shared index '%s'
failed to convert to a sparse-index
do_write_index
GIT_ALLOW_NULL_SHA1
write index, changed mask = %x
write/version
write/cache_nr
GIT_INDEX_VERSION
index.version set, but the value is invalid.
Using version %i
GIT_INDEX_VERSION set, but the value is invalid.
Using version %i
index.recordoffsettable
index.recordendofindexentries
shared/do_write_index
cannot fix permission bits on '%s'
unable to open git dir: %s
sharedindex.
unable to unlink: %s
could not stat '%s'
splitindex.sharedindexexpire
invalid IEOT version %d
invalid number of IEOT entries %d
Commands:
p, pick <commit> = use commit
r, reword <commit> = use commit, but edit the commit message
e, edit <commit> = use commit, but stop for amending
s, squash <commit> = use commit, but meld into previous commit
f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
                   commit's log message, unless -C is used, in which case
                   keep only this commit's message; -c is same as -C but
                   opens the editor
x, exec <command> = run command (the rest of the line) using shell
b, break = stop here (continue rebase later with 'git rebase --continue')
d, drop <commit> = remove commit
l, label <label> = label current HEAD with a name
t, reset <label> = reset HEAD to a label
m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
.       create a merge commit using the original merge commit's
.       message (or the oneline, if no original merge commit was
.       specified); use -c <commit> to reword the commit message
These lines can be re-ordered; they are executed from top to bottom.
Rebase %s onto %s (%d command)
Rebase %s onto %s (%d commands)
Do not remove any line. Use 'drop' explicitly to remove a commit.
If you remove a line here THAT COMMIT WILL BE LOST.
You are editing the todo file of an ongoing interactive rebase.
To continue rebase after editing, run:
    git rebase --continue
However, if you remove everything, the rebase will be aborted.
 - %s %.*s
Warning: some commits may have been dropped accidentally.
Dropped commits (newer to older):
To avoid this message, use "drop" to explicitly remove a commit.
Use 'git config rebase.missingCommitsCheck' to change the level of warnings.
The possible behaviours are: ignore, warn, error.
rebase.missingcommitscheck
unrecognized setting %s for option rebase.missingCommitsCheck. Ignoring.
preserve
merges
ahead %d
behind %d
ahead %d, behind %d
malformed format string %s
color:
(no branch, rebasing %s)
(no branch, rebasing detached HEAD %s)
(no branch, bisect started on %s)
(HEAD detached at %s)
(HEAD detached from %s)
filter_refs: invalid type
ref-filter.c
format: %%(end) atom missing
version:
malformed object name %s
option `%s' must point to a commit
malformed field name: %.*s
unknown field name: %.*s
not a git repository, but the field '%.*s' requires access to object data
numparent
authorname
authoremail
authordate
committername
committeremail
committerdate
tagger
taggername
taggeremail
taggerdate
creator
creatordate
body
trailers
flag
worktreepath
align
then
else
lstrip=
strip=
Integer value expected refname:lstrip=%s
rstrip=
Integer value expected refname:rstrip=%s
unrecognized %%(%s) argument: %s
%%(objecttype) does not take arguments
disk
unrecognized %%(objectsize) argument: %s
short=
positive value expected '%s' in %%(%s)
unrecognized argument '%s' in %%(%s)
%%(deltabase) does not take arguments
trim
localpart
unrecognized email option: %s
sanitize
unrecognized %%(subject) argument: %s
%%(body) does not take arguments
expected %%(trailers:key=<value>)
unknown %%(trailers) argument: %s
size
trailers:
lines=
positive value expected contents:lines=%s
unrecognized %%(contents) argument: %s
push:
trackshort
nobracket
remotename
remoteref
expected format: %%(color:<color>)
unrecognized color: %%(color:%s)
expected format: %%(align:<width>,<position>)
position=
unrecognized position:%s
width=
unrecognized width:%s
unrecognized %%(align) argument: %s
positive width expected with the %%(align) atom
right
middle
left
equals=
notequals=
unrecognized %%(if) argument: %s
ignoring ref with broken name %s
malformed object at '%s'
ref_kind_from_refname() should only mark one ref as HEAD
should have died in the xor check above
,symref
,packed
missing object %s for %s
unhandled RR_* enum
unknown %%(%s) option
format: %%(end) atom used without corresponding atom
format: %%(if) atom used without a %%(then) atom
format: %%(then) atom used without an %%(if) atom
format: %%(then) atom used more than once
format: %%(then) atom used after %%(else)
format: %%(else) atom used without an %%(if) atom
format: %%(else) atom used without a %%(then) atom
format: %%(else) atom used more than once
Object size is less than zero.
parse_object_buffer failed on %s for %s
Eh?  Object of type %d?
    
unknown email option
cannot walk reflogs for %s
no current branch
%s@{
Reflog: %s (%s)
Reflog message: %s
refs/%s
refs.c
sanitizing refname '%s' check returned error
%s does not point to a valid object!
%sHEAD
pattern must not start with '/'
init.defaultbranch
GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
could not retrieve `%s`
invalid branch name: %s = %s
ignoring dangling symref %s
ignoring broken ref %s
core.filesreflocktimeout
log for %s is empty
ref_store_transaction_begin
free called on a prepared reference transaction
unexpected reference transaction state
update called for transaction that is not open
ref_transaction_update
refusing to update ref with bad name '%s'
illegal flags 0x%x passed to ref_transaction_update()
create called without valid new_oid
delete called with old_oid set to zeros
verify called with old_oid set to NULL
update_ref failed for ref '%s': %s
refs_shorten_unambiguous_ref
offset < total_len
transfer.hiderefs
hiderefs
GIT_REF_PARANOIA
reference iterator is not ordered
%srefs/
attempting to get main_ref_store outside of repository
ref_update_reject_duplicates
multiple updates for ref '%s' not allowed
ref_update_reject_duplicates() received unsorted list
prepare called twice on reference transaction
prepare called on a closed reference transaction
GIT_QUARANTINE_PATH
ref updates forbidden inside quarantine environment
prepared
ref updates aborted by hook
abort called on a closed reference transaction
aborted
commit called on a closed reference transaction
committed
refs_verify_refname_available
'%s' exists; cannot create '%s'
cannot process '%s' and '%s' at the same time
error while iterating over references
refs/%.*s
refs/tags/%.*s
refs/heads/%.*s
refs/remotes/%.*s
refs/remotes/%.*s/HEAD
refs/worktree/
refs/rewritten/
main-worktree/
worktrees/
log for ref %s has gap after %s
log for ref %s unexpectedly ended on %s
reference backend %s is unknown
%s ref_store '%s' initialized twice
reference-transaction
refs/debug.c
ref_store for %s
GIT_TRACE_REFS
init_db: %d
transaction_prepare: %d
finish: %d
transaction {
%d: %s %s -> %s (F=0x%x, T=0x%x) "%s"
pack_refs: %d
create_symref: %s -> %s "%s": %d
delete_refs {
}: %d
rename_ref: %s -> %s "%s": %d
copy_ref: %s -> %s "%s": %d
ref_iterator_begin: %s (0x%x)
iterator_advance: (%d)
iterator_advance: %s (0)
iterator_peel: %s: %d
iterator_abort: %d
read_raw_ref: %s: %s (=> %s) type %x: %d
read_raw_ref: %s: %d (errno %d)
for_each_reflog_iterator_begin
for_each_reflog: %s: %d
reflog_ent %s (ret %d): %s -> %s, %s %ld "%s"
for_each_reflog_reverse: %s: %d
reflog_exists: %s: %d
create_reflog: %s: %d
delete_reflog: %s: %d
reflog_expire: %s: %d
reflog_expire_prepare: %s
reflog_expire_should_prune: %s %ld: %d
%s/packed-refs
files-backend $GIT_DIR
files-backend $GIT_COMMONDIR
init_db
refs/heads
refs/tags
refs/files-backend.c
ref_store is type "%s" not "files" in %s
operation %s requires abilities 0x%x, but only have 0x%x
ref %s is not a main pseudoref
unknown ref type %d of ref %s
ref_transaction_prepare
files_transaction_prepare
files-backend.c
REF_IS_PRUNING set without REF_NO_DEREF
lock_ref_for_update
cannot lock ref '%s': %s
cannot lock ref '%s': error reading reference
cannot update ref '%s': %s
couldn't close '%s.lock'
operation %s only allowed for main ref store
multiple updates for 'HEAD' (including one via its referent '%s') are not allowed
%s unexpectedly not 'HEAD'
lock_raw_ref
unable to resolve reference '%s'
unable to create lock file %s.lock; non-directory in the way
unable to create directory for %s
there is a non-empty directory '%s' blocking reference '%s'
unable to resolve reference '%s': reference broken
unable to resolve reference '%s': %s
cannot lock ref '%s': reference already exists
cannot lock ref '%s': reference is missing but expected %s
cannot lock ref '%s': is at %s but expected %s
multiple updates for '%s' (including one via symref '%s') are not allowed
%s unexpectedly found in affected_refnames
trying to write ref '%s' with nonexistent object %s
trying to write non-commit object %s to branch '%s'
couldn't write '%s'
error aborting transaction: %s
ref_transaction_finish
files_transaction_finish
cannot update the ref '%s': %s
couldn't set '%s'
unable to append to '%s': %s
unable to create directory for '%s': %s
there are still logs under '%s'
%s/logs/%s
refname %s is not a other-worktree ref
%s/worktrees/%.*s/logs/%s
ref_transaction_abort
initial_ref_transaction_commit
files_initial_transaction_commit
commit called for transaction that is not open
initial ref transaction called with existing refs
initial ref transaction with old_sha1 set
pack_refs
failure preparing to create packed reference %s: %s
unable to write new packed-refs: %s
fill_ref_dir
loose refname is dangerous: %s
create_symref
lock_ref_oid_basic
there are still refs under '%s'
can't verify ref '%s'
ref '%s' is at %s but expected %s
unable to fdopen %s: %s
ref: %s
unable to write symref for %s: %s
no symlink - falling back to symbolic ref
delete_refs
could not remove reference %s
could not delete reference %s: %s
could not delete references: %s
rename_ref
refs/.tmp-renamed-log
reflog for %s is a symlink
refname %s not found
refname %s is a symbolic ref, copying it is not supported
refname %s is a symbolic ref, renaming it is not supported
unable to move logfile logs/%s to logs/refs/.tmp-renamed-log: %s
unable to copy logfile logs/%s to logs/refs/.tmp-renamed-log: %s
unable to delete old %s
Directory not empty: %s
unable to delete existing %s
unable to copy '%s' to '%s': %s
unable to rename '%s' to '%s': %s
unable to write current sha1 into %s: %s
unable to lock %s for rollback: %s
unable to restore logfile %s from %s: %s
unable to restore logfile %s from logs/refs/.tmp-renamed-log: %s
directory not empty: %s
unable to move logfile %s to %s: %s
commit_ref_update
ref_iterator_begin
read_raw_ref
reflog_iterator_begin
%s/logs
bad ref for %s
ref_iterator_peel() called for reflog_iterator
for_each_reflog_ent
for_each_reflog_ent_reverse
cannot seek back reflog for %s: %s
cannot read %d bytes from reflog for %s: %s
reverse reflog parser had leftover data
reflog_exists
create_reflog
delete_reflog
reflog_expire
cannot fdopen %s (%s)
couldn't write %s: %s
couldn't write %s
unable to write reflog '%s' (%s)
couldn't set %s
would prune %s
prune %s
%s %s %s %ju %+05d
keep %s
refs/iterator.c
overlay_ref_iterator requires ordered inputs
peel called for empty iterator
peel called before advance for merge iterator
attempt to trim too many characters
packed_refs_lock
core.packedrefstimeout
unable to close %s: %s
packed_refs_unlock
refs/packed-backend.c
packed_refs_unlock() called when not locked
packed_refs_is_locked
is_packed_transaction_needed
is_packed_transaction_needed() called while unlocked
packed
ref_store is type "%s" not "packed" in %s
unallowed operation (%s), requires %x, has %x
error ummapping packed-refs file %s
# pack-refs with:
fully-peeled
peeled
couldn't read %s
couldn't stat %s
unterminated line in %s: %.*s
unterminated line in %s: %.75s...
unexpected line in %s: %.*s
unexpected line in %s: %.75s...
unterminated line found in packed-refs
unterminated peeled line found in packed-refs
write_with_updates() called while unlocked
%s.new
unable to create file %s: %s
unable to fdopen packed-refs tempfile: %s
cannot update ref '%s': reference already exists
cannot update ref '%s': is at %s but expected %s
cannot update ref '%s': reference is missing but expected %s
unable to write packed-refs file: error iterating over old contents
error closing file %s: %s
error writing to %s: %s
error replacing %s: %s
packed reference store does not support symrefs
packed reference store does not support renaming references
packed reference store does not support copying references
packed refname is dangerous: %s
packed reference store does not support reflogs
get_ref_dir
ref-cache.c
entry->flag & REF_DIR
refs/ref-cache.c
incomplete ref_store without fill_ref_dir function
Reference directory conflict: %s
Duplicated ref, and SHA1s don't match: %s
Duplicated ref: %s
invalid refspec '%s'
refs/heads/test:refs/remotes/%s/test
remote.c
query_refspecs: need either src or dst
HEAD does not point to a branch
no such branch: '%s'
no upstream configured for branch '%s'
upstream branch '%s' not stored as a remote-tracking branch
couldn't find remote ref %s
* Ignoring funny ref '%s' locally
Your branch is based on '%s', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)
Your branch is up to date with '%s'.
Your branch and '%s' refer to different commits.
  (use "%s" for details)
git status --ahead-behind
Your branch is ahead of '%s' by %d commit.
Your branch is ahead of '%s' by %d commits.
  (use "git push" to publish your local commits)
Your branch is behind '%s' by %d commit, and can be fast-forwarded.
Your branch is behind '%s' by %d commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)
Your branch and '%s' have diverged,
and have %d and %d different commit each, respectively.
Your branch and '%s' have diverged,
and have %d and %d different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)
refs/heads/master
make_remote
replaced == NULL
URL:
Push:
Pull:
refs/heads/%s:refs/heads/%s
HEAD:refs/heads/%s
pushremote
insteadof
pushinsteadof
pushdefault
config remote shorthand cannot begin with '/': %s
skipdefaultupdate
skipfetchall
prunetags
pushurl
more than one receivepack given, using the first
more than one uploadpack given, using the first
tagopt
proxy
proxyauthmethod
Cannot fetch both %s and %s to %s
%s usually tracks %s, not %s
%s tracks both %s and %s
Internal error
refspec->src should not be null here
key '%s' of pattern had no '*'
value '%s' of pattern has no '*'
src refspec %s does not match any
src refspec %s matches more than one
%s cannot be resolved to branch
unable to delete '%s': remote ref does not exist
dst refspec %s matches more than one
dst ref %s receives from more than one src
The destination you provided is not a full refname (i.e.,
starting with "refs/"). We tried to guess what you meant by:
- Looking for a ref that matches '%s' on the remote side.
- Checking if the <src> being pushed ('%s')
  is a ref in "refs/{heads,tags}/". If so we add a corresponding
  refs/{heads,tags}/ prefix on the remote side.
Neither worked, so we gave up. You must fully qualify the ref.
'%s' is not a valid object, match_explicit_lhs() should catch this!
The <src> part of the refspec is a commit object.
Did you mean to create a new branch by pushing to
'%s:refs/heads/%s'?
The <src> part of the refspec is a tag object.
Did you mean to create a new tag by pushing to
'%s:refs/tags/%s'?
The <src> part of the refspec is a tree object.
Did you mean to tag a new tree by pushing to
'%s:refs/tags/%s'?
The <src> part of the refspec is a blob object.
Did you mean to tag a new blob by pushing to
'%s:refs/tags/%s'?
'%s' should be commit/tag/tree/blob, is '%d'
branch '%s' has no remote for pushing
push refspecs for '%s' do not include '%s'
push has no destination (push.default is 'nothing')
cannot resolve 'simple' push to a single destination
unhandled push situation
push destination '%s' on remote '%s' has no local tracking branch
stat_branch_pair: invalid abf '%d'
query_refspecs_multiple: need either src or dst
cannot parse expected object name '%s'
replace depth too high for object %s
bad replace ref name: %s
duplicate replace ref: %s
commitgraph.readchangedpaths
gc.writecommitgraph
core.untrackedcache
fetch.negotiationalgorithm
skipping
pack.usesparse
feature.manyfiles
fetch.writecommitgraph
info/grafts
repository.c
repo's index should point back at itself
the repo hasn't been setup
rr-cache/%s
rr-cache/%s/%s
rr-cache/%s/%s.%d
gc.rerereresolved
gc.rerereunresolved
rr-cache
unable to open rr-cache directory
rerere.autoupdate
corrupt MERGE_RR
there were errors while writing '%s' (%s)
failed to flush '%s'
could not parse conflict hunks in '%s'
postimage
Recorded resolution for '%s'.
Resolved '%s' using previous resolution.
cannot unlink stray '%s'
Recorded preimage for '%s'
thisimage
failed utime() on '%s'
writing '%s' failed
rerere.c
Staged '%s' using previous resolution.
failed to update conflicted state in '%s'
no remembered resolution for '%s'
cannot unlink '%s'
Updated preimage for '%s'
Forgot resolution for '%s'
write_rr
rr->items[i].util != RERERE_RESOLVED
id->variant >= 0
%s.%d
%s%c
%s%c
unable to write rerere record
reset.c
Not a fully qualified branch: '%s'
could not determine HEAD revision
%o%c
Index records invalid resolve-undo information
cannot unmerge '%s'
unknown option `%s'
--stdin given twice?
revision.c
cannot combine --reverse with --walk-reflogs
cannot combine --walk-reflogs with history-limiting options
cannot combine --parents and --children
cannot combine --reverse with --graph
cannot combine --walk-reflogs with --graph
cannot combine --no-walk with --graph
cannot use --grep-reflog without --walk-reflogs
-L does not yet support diff formats besides -p and -s
treesame
bad object %s
reflog of '%s' references pruned commits
unable to add index blob to traversal
Invalid symmetric difference expression %s
Invalid revision range %s
--no-walk
--do-walk
--alternate-refs
--no-walk=
max-count
'%s': not a non-negative integer
max-age
since
after
min-age
before
until
--ancestry-path
--walk-reflogs
bad --default argument
--simplify-merges
--simplify-by-decoration
--author-date-order
--early-output
--early-output=
--remove-empty
--merges
--boundary
--left-right
--left-only
--left-only is incompatible with --right-only or --cherry
--right-only is incompatible with --left-only
--cherry
--cherry is incompatible with --left-only
--cherry-mark
--cherry-mark is incompatible with --cherry-pick
--cherry-pick is incompatible with --cherry-mark
--verify-objects
--unpacked=
--unpacked=<packfile> no longer supported
--no-kept-objects
--no-kept-objects=
in-core
on-disk
--pretty=
--format=
--expand-tabs
--no-expand-tabs
--expand-tabs=
--show-notes
--show-signature
--no-show-signature
--show-linear-break
                    ..........
--show-linear-break=
--show-notes=
--notes=
--standard-notes
--no-standard-notes
--oneline
oneline
--graph
--encode-email-headers
--no-encode-email-headers
--no-commit-id
--abbrev
--abbrev=
--abbrev-commit
--no-abbrev-commit
--full-diff
--show-pulls
--full-history
--relative-date
--log-size
grep-reflog
--basic-regexp
--extended-regexp
--regexp-ignore-case
--fixed-strings
--perl-regexp
--all-match
--invert-grep
children
exclude_promisor_objects can only be used when fetch_if_missing is 0
--show-linear-break and --graph are incompatible
--single-worktree cannot be used together with submodule
glob
sorted
unsorted
invalid argument to --no-walk
.alternate
options not supported in --stdin mode
--merge without HEAD?
--merge without MERGE_HEAD?
your current branch appears to be broken
your current branch '%s' does not have any commits yet
%s is unknown object
filter_not_present
maybe
definitely_not
false_positive
bloom
statistics
--ancestry-path given but there are no bottom commits
cannot simplify commit %s (because of %s)
cannot simplify commit %s (invalid %s)
bad tree compare for commit %s
update_treesame %s
count_explore_walked
count_indegree_walked
count_topo_walked
topo_walk
mark_redundant_parents %d %d %d %d
compact_treesame %u
compact_treesame parents mismatch
reflog 
%.*s <%.*s>
Failed to traverse parents of commit %s
Failed to simplify parents of commit %s
run-command.c
standard input
standard output
standard error
cannot create %s pipe for %s: %s
cannot run %s
open /dev/null failed
cannot fork() for %s
run_command with a pipe can cause deadlock
cannot create pipe
cannot create async thread: %s
pthread_join failed
hooks/%s
The '%s' hook was ignored because it's not set as executable.
You can disable this warning with `git config advice.ignoredHook false`.
max:%d
maintenance.auto
--quiet
--no-quiet
trace: run_command:
 cd 
 git
 unset
 %s=
command is empty
/bin/sh
shell command is empty
|&;<>()$`\"' 
*?[#~=%
%s "$@"
blocking all signals
disabling cancellation
die() should not be called in child
error() should not be called in child
warn() should not be called in child
re-enabling cancellation
restoring signal mask
trace: run_command: running exit handler for pid %ju
waitpid for %s failed
waitpid is confused (%s)
%s died of signal %d
exec '%s': cd to '%s' failed
dup2() in child failed
close() in child failed
sigprocmask failed restoring signals
cannot exec '%s'
fatal: 
unable to block SIGPIPE in async thread
poll failed
run_processes_parallel: preparing to run up to %d tasks
you need to specify a get_next_task function
bookkeeping is hard
poll
read
run_processes_parallel: done
delete-refs
no-thin
the receiving end does not support this repository's hash algorithm
the receiving end does not support --signed push
not sending a push certificate since the receiving end does not support --signed push
the receiving end does not support --atomic push
the receiving end does not support push options
 report-status
 report-status-v2
 quiet
atomic push failed for ref %s. status: %d
%s %s %s%c%s
send-pack: unable to fork off sideband demultiplexer
--negotiate-only
--negotiation-tip=%s
send-pack: unable to fork off fetch subprocess
push negotiation failed; proceeding anyway with push
the receiving end asked to sign an invalid nonce <%.*s>
certificate version 0.1
pusher %s 
pushee %s
nonce %s
push-option %s
failed to sign the push certificate
push-cert%c%s
--revs
git pack-objects failed
error writing to pack-objects
pack-objects died of signal %d
invalid status line from remote: %s
'option' without a matching 'ok/ng' directive
invalid ref status from remote: %s
remote reported status on unknown ref: %s
remote reported status on unexpected ref: %s
unexpected flush packet while reading remote unpack status
unpack 
unable to parse remote unpack status: %s
remote unpack failed: %s
COMMIT_EDITMSG
rebase-merge/git-rebase-todo
rebase-merge/git-rebase-todo.backup
rebase-merge/dropped
(rebase) cleanup
could not delete '%s'
Conflicts:
'GIT_AUTHOR_NAME' already given
'GIT_AUTHOR_EMAIL' already given
'GIT_AUTHOR_DATE' already given
unknown variable '%s'
missing 'GIT_AUTHOR_NAME'
missing 'GIT_AUTHOR_EMAIL'
missing 'GIT_AUTHOR_DATE'
Notes added by 'git commit --amend'
couldn't look up newly created commit
could not parse newly created commit
format:%h] %s
%an <%ae>
%cn <%ce>
 Author: 
 Date: 
 Committer: 
unable to resolve HEAD after creating commit
[%s%s 
 (root-commit)
unable to open '%s'
invalid line %d: %.*s
cannot '%s' without a previous commit
cancelling a cherry picking in progress
REVERT_HEAD
cancelling a revert in progress
--rerere-autoupdate
--no-rerere-autoupdate
-S%s
--signoff
cannot read '%s': %s
unexpected end of file
stored pre-cherry-pick HEAD file '%s' is corrupt
cannot abort from a branch yet to be born
You seem to have moved HEAD. Not rewinding, check your HEAD!
no revert in progress
no cherry-pick in progress
sequencer.c
unexpected action in sequencer_skip
failed to skip the commit
there is nothing to skip
have you committed already?
try "git %s --continue"
Cannot autostash
Unexpected stash response: '%s'
Could not create directory for '%s'
Created autostash: %s
reset --hard
could not reset --hard
sequencer_pick_revisions
opts->revs
%s: can't cherry-pick a %s
%s: bad revision
empty commit set passed
unexpected extra commit from walk
can't revert as initial commit
pick
make_script: unhandled options
make_script: error preparing revisions
%s %s 
 %c empty
nothing to do
invalid todo list after expanding IDs:
could not skip unnecessary pick commands
the script was already rearranged.
fixup!
invalid commit message cleanup mode '%s'
rebase-merge/refs-to-delete
no key present in '%.*s'
unable to dequote value of '%s'
~/.gitconfig
sequencer/todo
label
noop
rebase-merge/done
%s does not accept arguments: '%s'
missing arguments for %s
could not parse '%s'
unknown command: %d
rebase-merge/head-name
rebase-merge/onto
rebase-merge/orig-head
rebase-merge/quiet
rebase-merge/verbose
rebase-merge/strategy
rebase-merge/strategy_opts
rebase-merge/allow_rerere_autoupdate
rebase-merge/gpg_sign_opt
rebase-merge/signoff
rebase-merge/drop_redundant_commits
rebase-merge/keep_redundant_commits
rebase-merge/cdate_is_adate
rebase-merge/ignore_date
rebase-merge/reschedule-failed-exec
rebase-merge/no-reschedule-failed-exec
sequencer/head
no cherry-pick or revert in progress
cannot resolve HEAD
sequencer/abort-safety
sequencer
Applied autostash.
cannot store %s
Your changes are safe in the stash.
You can run "git stash pop" or "git stash drop" at any time.
Applying autostash resulted in conflicts.
Autostash exists; creating a new stash entry.
git %s: failed to read the index
git %s: failed to refresh the index
unknown action: %d
unusable squash-onto
malformed options sheet: '%s'
rebase-merge/current-fixups
sequencer/opts
options.no-commit
options.edit
options.allow-empty
options.allow-empty-message
options.keep-redundant-commits
options.signoff
options.record-origin
options.allow-ff
options.mainline
options.strategy
options.gpg-sign
options.strategy-option
options.allow-rerere-auto
options.default-msg-cleanup
invalid key: %s
invalid value for %s: %s
please fix this using 'git rebase --edit-todo'.
unusable instruction sheet: '%s'
no commits parsed.
cannot cherry-pick during a revert.
cannot revert during a cherry-pick.
cannot rebase: You have unstaged changes.
cannot amend non-existing commit
invalid file: '%s'
invalid contents: '%s'
You have uncommitted changes in your working tree. Please, commit them
first and then run 'git rebase --continue' again.
Incorrect current_fixups:
could not write file: '%s'
squash 
squash 
could not remove CHERRY_PICK_HEAD
could not commit staged changes.
rebase-merge/amend
rebase-merge/message-fixup
rebase-merge/message-squash
could not parse HEAD
HEAD %s is not a commit!
CLEANUP_MSG and VERBATIM_MSG are mutually exclusive
GIT_COMMITTER_DATE=%s
--amend
--no-gpg-sign
--cleanup=strip
--cleanup=verbatim
--allow-empty
GIT_AUTHOR_NAME=%s
GIT_AUTHOR_EMAIL=%s
GIT_AUTHOR_DATE=%s
rebase-merge/author-script
GIT_AUTHOR_DATE missing from author script
rebase-merge/message
--no-edit
your local changes would be overwritten by %s.
commit your changes or stash them to proceed.
rebase-merge/stopped-sha
rebase-merge/rewritten-pending
%.*s %s
rebase-merge/rewritten-list
pick_commits
!(opts->signoff || opts->no_commit || opts->record_origin || should_edit(opts) || opts->committer_date_is_author_date || opts->ignore_date)
Rebasing (%d/%d)%s
Stopped at %s...  %.*s
unknown command %d
cannot read HEAD
could not read orig-head
could not read 'onto'
finish
%s onto %s
could not update %s
returning to %s
could not update HEAD to %s
--for-rewrite=rebase
Successfully rebased and updated %s.
could not lock '%s'
failed to finalize '%s'
rebase-merge/msgnum
Stopped at HEAD
Stopped at %s
%s (%s)
parent of %s
your index file is unmerged.
cannot fixup root commit
commit %s is a merge but no -m option was given.
commit %s does not have parent %d
%s: cannot parse parent commit %s
Revert "
This reverts commit 
, reversing
changes made to 
could not rename '%s' to '%s'
could not revert %s... %s
could not apply %s... %s
dropping %s %s -- patch contents already upstream
unable to parse commit author
GIT_AUTHOR_NAME='
'\%c'
GIT_AUTHOR_EMAIL='
GIT_AUTHOR_DATE='@
%s: fast-forward
need a HEAD to fixup
could not read HEAD
could not read HEAD's commit message
cannot write '%s'
could not read commit message of %s
%s%s %s
squash
# %s
squash!
(empty tree)
%s: Unable to write new index file
after resolving the conflicts, mark the corrected paths
with 'git add <paths>' or 'git rm <paths>'
after resolving the conflicts, mark the corrected paths
with 'git add <paths>' or 'git rm <paths>'
and commit the result with 'git commit'
could not resolve HEAD commit
unable to update cache tree
unable to read commit message from '%s'
invalid author identity '%s'
corrupt author: missing date information
@%.*s %.*s
'prepare-commit-msg' hook failed
unable to copy '%s' to '%s'
You can amend the commit now, with
  git commit --amend %s
Once you are satisfied with your changes, run
  git rebase --continue
Could not apply %s... %.*s
Could not merge %.*s
%s/patch
%s/message
Executing: %s
execution failed: %s
%sYou can fix the problem, and then run
  git rebase --continue
and made changes to the index and/or the working tree
execution succeeded: %s
but left changes to the index and/or the working tree
Commit or stash your changes, and then run
  git rebase --continue
illegal label name: '%.*s'
refs/rewritten/%.*s
rebase (label) '%.*s'
[new root]
writing fake root commit
writing squash-onto
failed to find tree of %s
could not write index
'%.*s'
cannot merge without a current revision
unable to parse '%.*s'
nothing to merge: '%.*s'
octopus merge cannot be executed on top of a [new root]
could not get commit message of '%s'
author %s
Merge %s '%.*s'
-X%s
--no-log
--no-stat
could not even attempt to merge '%.*s'
merge: Unable to write new index file
could not resolve '%s'
%s %s %.*s
revert is already in progress
try "git revert (--continue | %s--abort | --quit)"
cherry-pick is already in progress
try "git cherry-pick (--continue | %s--abort | --quit)"
unexpected action in create_seq_dir
--skip | 
could not create sequencer directory '%s'
could not lock HEAD
invalid cleanup_mode provided (%d)
Merge 
Merge pull request 
 from 
%s -C %s
 # %s
branch-point
%s onto
%c Branch %s
%s %s # %s
rev-
could not parse commit %s
could not parse parent commit %s
 %.*s
could not write eol to '%s'
rebase-merge/autostash
checkout %s
could not detach HEAD
GIT_REFLOG_ACTION=%s
could not parse commit '%s'
rebase-merge/end
fixup! 
version 2
object-info
serve.c
Should have already died when seeing EOF
unexpected stateless separator packet
no command requested
command=
command '%s' requested after already requesting command '%s'
invalid command '%s'
unknown object format '%s'
mismatched object format: server %s; client %s
info/rev-cache
info/refs
%s_XXXXXX
%s^{}
%s/info/packs
unrecognized: %s
P %s
'%s' is outside repository at '%s'
option '%s' must come before non-option arguments
ambiguous argument '%s': both revision and filename
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
is_nonbare_repository_dir
setup.c
orig_path_len != 0
unable to set up work tree using invalid config
cannot upgrade repository format from %d to %d: %s
cannot upgrade repository format: unknown extension %s
Expected git repo version <= %d, found %d
unknown repository extensions found:
repo version is 0, but v1-only extensions found:
error opening '%s'
too large to be a .git file: '%s'
error reading %s
invalid gitfile format: %s
no path in gitfile: %s
not a git repository: %s
unknown error code
%.*s%.*s
ignoring git dir '%s': %s
Unable to read current working directory
not a git repository (or any of the parent directories): %s
not a git repository (or any parent up to mount point %s)
Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).
unhandled setup_git_directory_1() result
umask
world
everybody
problem with core.sharedRepository filemode value (0%.3o).
The owner of files must always have read and write permissions.
open /dev/null or dup failed
fork failed
setsid failed
%s: no such path in the working tree.
Use 'git <command> -- <path>...' to specify paths that do not exist locally.
ambiguous argument '%s': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
extensions.
preciousobjects
partialclone
worktreeconfig
noop-v1
objectformat
invalid value for 'extensions.objectformat'
GIT_CEILING_DIRECTORIES
GIT_DISCOVERY_ACROSS_FILESYSTEM
failed to stat '%*s%s%s'
'$%s' too big
not a git repository: '%s'
core.bare and core.worktree do not make sense
cannot chdir to '%s'
cannot come back to cwd
%s/config.worktree
shallow.c
is_repository_shallow must not be called before set_alternate_shallow_file
bad shallow line: %s
no commits selected for shallow requests
shallow_XXXXXX
failed to write to %s
GIT_TRACE_SHALLOW
shallow: prepare_shallow_info
shallow: remove_nonexistent_theirs_shallow
shallow: assign_shallow_commits_to_refs
Removing %s from .git/shallow
shallow must be initialized by now
shallow file has changed since we read it
shallow %s
pool size too small for %d in paint_alloc()
shallow: post_assign_shallow
        
%s%s: unexpected disconnect while reading sideband packet
sideband.c
negative length on non-eof packet read
%s%s: protocol error: missing sideband designator
remote: 
%s%s: protocol error: bad band #%d
%04x
warning
sigchain.c
signal out of range: %d
GIT_TEST_SPARSE_INDEX
attempting to use sparse-index without cone mode
unable to update cache-tree, staying full
sparse-index.c
convert_to_sparse
ensure_full_index
index entry is a directory, but not sparse (%08x)
corrupt link extension (too short)
corrupt delete bitmap in link extension
corrupt replace bitmap in link extension
garbage at the end of link extension
corrupt link extension, entry %d should have non-zero length name
split-index.c
ce refers to a shared ce at %d, which is beyond the shared index size %d
prepare_to_write_split_index
!(ce->ce_flags & CE_STRIP_NAME)
position for replacement %d exceeds base index size %d
too many replacements (%d vs %d)
entry %d is marked as both replaced and deleted
corrupt link extension, entry %d should have zero length name
position for delete %d exceeds base index size %d
you want to use way too much memory
`pos' is too far after the end of the buffer
`pos + len' is too far after the end of the buffer
strbuf.c
your vsnprintf is broken (returned %d)
your vsnprintf is broken (returns inconsistent lengths)
your vsnprintf is broken (insatiable)
 <>"%{}|\^`:?#[]@!$&'()*+,;=
%%%02X
strbuf_getwholeline
r == -1
Out of memory, getdelim failed
"<>&
&quot;
&lt;
&gt;
&amp;
%+05d
could not edit '%s'
%%%02x
%u.%2.2u GiB
%u.%2.2u GiB/s
%u.%2.2u MiB
%u.%2.2u MiB/s
%u.%2.2u KiB
%u.%2.2u KiB/s
%u byte
%u bytes
%u byte/s
%u bytes/s
string-list.c
internal error in string_list_split(): list->strdup_strings must be set
internal error in string_list_split_in_place(): list->strdup_strings must not be set
status=
subprocess
cannot fork to run subprocess '%s'
initialization for subprocess '%s' failed
%s-client
Could not write client identification
version=%d
Could not write requested version
Could not write flush packet
-server
Unexpected line '%s', expected %s-server
<flush packet>
Unexpected line '%s', expected version
Unexpected line '%s', expected flush
Version %d not supported
capability=%s
Could not write requested capability
capability=
subprocess '%s' requested unsupported capability '%s'
negative values not allowed for submodule.fetchjobs
Could not update .gitmodules entry %s
fetchrecursesubmodules
Invalid parameter '%s' for config option 'submodule.%s.ignore'
invalid value for %s
ignoring suspicious submodule name: %s
ignoring '%s' which may be interpreted as a command-line option: %s
WORKTREE
%s:.gitmodules, multiple configurations found for 'submodule.%s.%s'. Skipping second one!
%s:.gitmodules
.gitmodules
:.gitmodules
HEAD:.gitmodules
Cannot change unmerged .gitmodules, resolve merge conflicts first
Could not find section in .gitmodules where path=%s
.path
Could not remove .gitmodules entry for %s
staging updated .gitmodules failed
objects/
in unpopulated submodule '%s'
Pathspec '%s' is in submodule '%.*s'
bad --ignore-submodules argument: %s
(revision walker failed)
--submodule=diff
--color=%s
never
--src-prefix=%s%s/
--dst-prefix=%s%s/
(diff failed)
find_unpushed_submodules
--remotes=%s
Pushing submodule '%s'
Unable to push submodule '%s'
--recurse-submodules-default
Errors during submodule fetch:
'%s' not recognized as a git repository
--porcelain=2
-uno
Could not run 'git status --porcelain=2' in submodule %s
submodule.c
invalid status --porcelain=2 line %s
S..U
'git status --porcelain=2' failed in submodule %s
test -f .git
-uall
--ignored
could not start 'git status' in submodule '%s'
could not run 'git status' in submodule '%s'
%s/modules/%s/config
Could not unset core.worktree setting in submodule '%s'
could not get submodule information for '%s'
submodule '%s' has dirty index
--super-prefix=%s%s/
Submodule '%s' could not be updated.
--no-deref
submodule name '%s' not a suffix of git dir '%s'
submodule git dir '%s' is inside git dir '%.*s'
could not lookup name for submodule '%s'
modules/%s
we don't know how to pass the flags down?
could not recurse into submodule '%s'
--stage
--full-name
could not start ls-files in ..
160000
returned path string doesn't match cwd?
ls-tree returned unexpected return code %d
GIT_CONFIG_PARAMETERS
(new submodule)
(submodule deleted)
(commits not present)
Submodule %s 
 (rewind)
Submodule in commit %s at path: '%s' collides with a submodule named the same. Skipping it.
Could not run 'git rev-list <commits> --not --remotes -n 1' command in submodule %s
submodule entry '%s' (%s) is a %s, not a commit
process for submodule '%s' failed
--push-option=%s
Fetching submodule %s%s
--submodule-prefix
%s%s/
%s/%s/
Could not access submodule '%s'
submodule.%s.fetchRecurseSubmodules
%s=.
callback cookie bogus
could not reset submodule index
relocate_gitdir for submodule '%s' with more than one worktree not supported
refusing to move '%s' into an existing git dir
Migrating git directory of '%s%s' from
'%s' to
'%s'
failed to lstat '%s'
%s: cannot verify a non-tag object of type %s.
missing object referenced by '%.*s'
type 
unknown tag type '%s' in %s
bad tag pointer to %s in %s
Object %s not a tag
bad tag
no signature found
cannot fix permission bits on %s
tempfile.c
fdopen_tempfile() called for inactive object
fdopen_tempfile() called for open object
get_tempfile_path() called for inactive object
get_tempfile_fd() called for inactive object
get_tempfile_fp() called for inactive object
reopen_tempfile called for an inactive object
reopen_tempfile called for an open object
rename_tempfile called for inactive object
activate_tempfile called for active object
tmp-objdir.c
only one tmp_objdir can be used at a time
%s/incoming-XXXXXX
%s=%s%c%s
GIT_TRACE
GIT_TRACE_PERFORMANCE
GIT_TRACE_SETUP
trace.c
Too deep indentation
setup: git_dir: %s
setup: git_common_dir: %s
setup: worktree: %s
setup: cwd: %s
setup: prefix: %s
could not open '%s' for tracing: %s
unknown trace value for '%s': %s
         If you want to trace into a file, then please set %s
         to an absolute pathname (starting with /)
unable to write trace for %s: %s
GIT_TRACE_BARE
%02d:%02d:%02d.%06ld 
%s:%d 
performance: %.9f s
:%.*s 
git command:%s
thread-proc on main: %s
thread-proc on main
GIT_TRACE2_PARENT_NAME
af_unix:
unable to write trace to '%s': %s
trace2: not opening %s trace file due to too many files in target directory %s
trace2: could not open '%.*s' for '%s' tracing: %s
git-trace2-discard
trace2: could not open '%s' for '%s' tracing: %s
af_unix:stream:
af_unix:dgram:
trace2: invalid AF_UNIX value '%s' for '%s' tracing
trace2: invalid AF_UNIX path '%s' for '%s' tracing
trace2: could not connect to socket '%s' for '%s' tracing: %s
trace2: unknown value for '%s': '%s'
GIT_TRACE2_PARENT_SID
Localhost
-P%08x
trace2/tr2_sysenv.c
tr2_sysenv_get invalid var '%d'
trace2.
GIT_TRACE2_CONFIG_PARAMS
trace2.configparams
GIT_TRACE2_ENV_VARS
trace2.envvars
GIT_TRACE2_DST_DEBUG
trace2.destinationdebug
GIT_TRACE2
trace2.normaltarget
GIT_TRACE2_BRIEF
trace2.normalbrief
GIT_TRACE2_EVENT
trace2.eventtarget
GIT_TRACE2_EVENT_BRIEF
trace2.eventbrief
GIT_TRACE2_EVENT_NESTING
trace2.eventnesting
GIT_TRACE2_PERF
trace2.perftarget
GIT_TRACE2_PERF_BRIEF
trace2.perfbrief
GIT_TRACE2_MAX_FILES
trace2.maxfiles
%02d:%02d:%02d.%06ld
%4d-%02d-%02dT%02d:%02d:%02d.%06ldZ
%4d%02d%02dT%02d%02d%02d.%06ldZ
event
atexit
line
too_many_files
t_abs
argv
code
signal
trace2/tr2_tgt_event.c
signo
cmd_path
cmd_name
hierarchy
cmd_mode
child_start
child_id
child_class
hook
hook_name
use_shell
child_exit
t_rel
thread_start
thread_exit
exec_id
exec_result
def_param
param
def_repo
region_enter
nesting
category
region_leave
data_json
version %s
start 
exit elapsed:%.6f code:%d
signal elapsed:%.6f code:%d
trace2/tr2_tgt_normal.c
atexit elapsed:%.6f code:%d
cmd_path %s
cmd_name %s
cmd_mode %s
alias %s -> 
child_start[%d]
git 
child_exit[%d] pid:%d code:%d elapsed:%.6f
exec[%d] 
exec_result[%d] code:%d
 err:%s
def_param %s=%s
worktree 
%s:%d
d%d | 
%-*s | %-*s | 
r%d 
%9.6f | 
%9s | 
%-*.*s | 
code:%d
signo:%d
trace2/tr2_tgt_perf.c
alias:%s argv:[
[ch%d] class:hook hook:%s
[ch%d] class:%s
 cd:
 argv:[
[ch%d] pid:%d code:%d
id:%d 
argv:[
id:%d code:%d
worktree:
label:%s
printf
th%02d:
trace2/tr2_tls.c
no open regions in thread '%s'
addIfDifferent
addIfDifferentNeighbor
doNothing
could not rename temporary file to %s
trailer.
unknown value '%s' for key '%s'
ifexists
ifmissing
separators
trailer.c
trailer.c: unhandled type %d
could not read input file '%s'
file %s is not a regular file
file %s is not writable by user
git-interpret-trailers-XXXXXX
could not open temporary file
empty trailer token in trailer '%.*s'
trailer.c: unhandled value %d
$ARG
running trailer command '%s' failed
%s%c %s
Signed-off-by: 
(cherry picked from commit 
GIT_TRANSPORT_HELPER_DEBUG
remote input
remote output
option %s 
remote-%s
unable to find remote helper for '%s'
transport-helper.c
can't dup helper output fd
capabilities
Debug: Got cap %s
import
bidi-import
export
check-connectivity
refspec 
connect
stateless-connect
export-marks 
import-marks 
no-private-update
unknown mandatory capability %s; this remote helper probably needs newer version of Git
this remote helper should implement refspec capability
Debug: Capabilities complete.
Debug: Remote helper: -> %s
full write to remote helper failed
Debug: Remote helper: Waiting...
Debug: Remote helper quit.
Debug: Remote helper: <- %s
verbosity
family
unsupported
%s unexpectedly said: '%s'
servpath
setting remote service path not supported by protocol
invalid remote service path
connect %s
stateless-connect %s
Debug: Smart transport connection ready.
fallback
Debug: Falling back to dumb transport.
unknown response to connect: %s
option object-format
list for-push
list
:object-format 
unsupported object format '%s'
malformed response in ref list: %s
unchanged
could not read ref %s
Debug: Read ref listing.
--negotiate-only requires protocol v2
cloning
fetch %s %s
lock 
%s also locked %s
couldn't run fast-import
import %s
error while running fast-import
--stats
--cat-blob-fd=%d
No refs in common and none specified; doing nothing.
Perhaps you should specify a branch.
push 
helper %s does not support dry-run
pushcert
helper %s does not support --signed
helper %s does not support --signed=if-asked
helper %s does not support --atomic
helper %s does not support --%s
helper %s does not support 'push-option'
update by helper
'option' without a matching 'ok/error' directive
error 
expected ok/error, helper said '%s'
helper reported unexpected status of %s
remote-helper doesn't support push; refspec needed
helper %s does not support 'force'
export
--refspec
couldn't run fast-export
error while running fast-export
%s.tmp
--use-done-feature
--signed-tags=verbatim
--signed-tags=warn-strip
--export-marks=%s.tmp
--import-marks=%s
operation not supported by protocol
can't connect to subservice %s
Debug: Disconnecting.
can't start thread for copying data: %s
Git to program copy
Program to git copy
%s is readable
read(%s) failed
%s EOF (with %i bytes in buffer)
Read %i bytes from %s (buffer now at %i)
GIT_TRANSLOOP_DEBUG
Transfer loop debugging: %s
%s is writable
write(%s) failed
Wrote %i bytes to %s (buffer now at %i)
Closed %s.
%s thread failed
%s thread failed to join: %s
could not parse transport.color.* config
transport.c
taking over transport requires non-NULL smart_options field.
GIT_PROTOCOL_FROM_USER
invalid protocol_allow_config type
transport '%s' not allowed
No remote provided to transport_get()
rsync:
git-over-rsync is no longer supported
file://
ssh://
git+ssh://
ssh+git://
get_refs_list
push_submodules
failed to push all needed submodules
check_submodules
push_refs
Done
updating local tracking ref '%s'
update by push
color.transport.reset
To %s
[no match]
remote does not support deleting refs
new shallow roots not allowed
[remote rejected]
[remote failure]
remote failed to report status
atomic push failed
%s:%s
%s (%s)
 %s%c %-*s%s 
%s -> %s
[new reference]
server-sid
buffer must be empty at the end of handshake()
see protocol.version in 'git help config' for more details
server options require protocol version 2 or later
server does not support wait-for-done
GIT_ALLOW_PROTOCOL
protocol.%s.allow
user
unknown value for config '%s': %s
could not read bundle '%s'
transport: invalid depth option '%s'
The following submodule paths contain changes that can
not be found on any remote:
Please try
git push --recurse-submodules=on-demand
or cd to the path and use
git push
to push them to a remote.
Aborting.
Would set upstream of '%s' to '%s' of '%s'
emit_path
tree-diff.c
t || tp
unable to read tree %s
tree-walk.c
too small buffer passed to make_traverse_path
traverse_info pathlen does not match strings
traverse_info ran out of list items
traverse_trees() called with too many trees (%d)
too-short tree object
malformed mode in tree entry
empty filename in tree entry
too-short tree file
traverse_trees_count
traverse_trees_max_depth
Commit %s in submodule path %s%s not found
Invalid commit %s in submodule path %s%s
Object %s not a tree
Your local changes to the following files would be overwritten by checkout:
%%sPlease commit your changes or stash them before you switch branches.
Your local changes to the following files would be overwritten by checkout:
Your local changes to the following files would be overwritten by merge:
%%sPlease commit your changes or stash them before you merge.
Your local changes to the following files would be overwritten by merge:
Your local changes to the following files would be overwritten by %s:
%%sPlease commit your changes or stash them before you %s.
Your local changes to the following files would be overwritten by %s:
Updating the following directories would lose untracked files in them:
The following untracked working tree files would be removed by checkout:
%%sPlease move or remove them before you switch branches.
The following untracked working tree files would be removed by checkout:
The following untracked working tree files would be removed by merge:
%%sPlease move or remove them before you merge.
The following untracked working tree files would be removed by merge:
The following untracked working tree files would be removed by %s:
%%sPlease move or remove them before you %s.
The following untracked working tree files would be removed by %s:
The following untracked working tree files would be overwritten by checkout:
%%sPlease move or remove them before you switch branches.
The following untracked working tree files would be overwritten by checkout:
The following untracked working tree files would be overwritten by merge:
%%sPlease move or remove them before you merge.
The following untracked working tree files would be overwritten by merge:
The following untracked working tree files would be overwritten by %s:
%%sPlease move or remove them before you %s.
The following untracked working tree files would be overwritten by %s:
Entry '%s' overlaps with '%s'.  Cannot bind.
Cannot update submodule:
The following paths are not up to date and were left despite sparse patterns:
The following paths are unmerged and were left despite sparse patterns:
The following paths were already present and thus not updated despite sparse patterns:
unpack_trees takes at most %d trees
unpack-trees.c
unpack_trees
traverse_trees
Merge requires file-level merging
update_sparsity() is for reflecting sparsity patterns in working directory
update_sparsity() called wrong
update_sparsity
Cannot do a twoway merge of %d trees
Cannot do a bind merge of %d trees
Cannot do a oneway merge of %d trees
invalid merge_size: %d
worktree and untracked commit have duplicate entries: %s
Updating index flags
clear_ce_flags(0x%08lx,0x%08lx)
* unpack mask %lu, dirmask %lu, cnt %d 
ent#%d %06o %s
programming error in a caller of mark_ce_used_same_name
Wrong condition to get here buddy
This is a directory and should not exist in index
pos %d doesn't point to the first entry of %s in index
We need cache-tree to do this optimization
Unpacked %d entries from %s to %s using cache-tree
%.*s/
After fixing the above paths, you may want to run `git sparse-checkout reapply`.
check_updates
both update and delete flags are set on %s
Updating files
the following paths have collided (e.g. case-sensitive paths
on a case-insensitive filesystem) and only one from the same
colliding group is in the working tree:
  '%s'
Aborting
Entry '%s' would be overwritten by merge. Cannot merge.
Entry '%s' not uptodate. Cannot merge.
Updating '%s' would lose untracked files in it
Untracked working tree file '%s' would be overwritten by merge.
Untracked working tree file '%s' would be removed by merge.
Submodule '%s' cannot checkout new HEAD.
Path '%s' not uptodate; will not remove from working tree.
Path '%s' unmerged; will not remove from working tree.
Path '%s' already present; will not overwrite with sparse update.
packfile
shallow wait-for-done
uploadpack.allowfilter
uploadpack.allowrefinwant
 ref-in-want
GIT_TEST_SIDEBAND_ALL
uploadpack.allowsidebandall
 sideband-all
uploadpack.blobpackfileuri
 packfile-uris
uploadpack.allowtipsha1inwant
uploadpack.allowreachablesha1inwant
uploadpack.allowanysha1inwant
uploadpack.keepalive
transfer.advertisesid
uploadpack.packobjectshook
uploadpackfilter
allow
maxdepth
'%s' is a symref but it is not?
multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed
%s %s%c%s%s%s%s%s%s%s object-format=%s agent=%s
 allow-tip-sha1-in-want
 allow-reachable-sha1-in-want
 no-done
%s %s^{}
 symref=%s:%s
 session-id=%s
filter 
git upload-pack: filtering capability not negotiated
want 
git upload-pack: protocol error, expected to get object ID, not '%s'
multi_ack
no-done
thin-pack
ofs-delta
side-band-64k
side-band
no-progress
include-tag
filter
upload-pack.c
transfer
upload-pack: not our ref %s
git upload-pack: not our ref %s
shallow 
invalid shallow object %s
deepen 
Invalid deepen: %s
deepen-since 
Invalid deepen-since: %s
deepen-not 
git upload-pack: ambiguous deepen-not: %s
filter '%s' not supported
tree filter allows max depth %lu, but got %lu
--stdin
git upload-pack: deepen and deepen-since (or deepen-not) cannot be used together
--max-age=%ju
--not
shallow %s
unshallow %s
ACK %s ready
ACK %s
have 
ACK %s continue
ACK %s common
git upload-pack: expected SHA1 list, got '%s'
git upload-pack: expected SHA1 object, got '%s'
oops (%s)
aborting due to possible repository corruption on the remote side.
pack-objects
--thin
--shallow
--progress
--filter=%s
--uri-protocol=%s
git upload-pack: unable to fork git-pack-objects
--not
poll failed, resuming
git upload-pack: git-pack-objects died with error.
flushed.
git upload-pack: %s
--shallow %s
packfile
packfile_uris requires sideband-all
packfile-uris
wait-for-done
sideband-all
packfile-uris 
unexpected line: '%s'
expected flush after fetch arguments
git upload-pack: protocol error, expected to get oid, not '%s'
want-ref 
unknown ref %s
acknowledgments
ready
wanted-refs
shallow-info
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+.-
invalid URL scheme name or missing '://' suffix
:/?#[]@!$&'()*+,;=
invalid %XX escape sequence
file:
missing host and scheme is not 'file:'
a 'file:' URL may not have a port number
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-[:]*
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-[:]
invalid characters in host name
http:
https:
invalid port number
invalid '..' path segment
 <>"%{}|\^`
BUG!!! too long a prefix '%s'
fatal: recursion detected in die handler
usage.c
fatal: recursion detected in die_errno handler
die() called many times. Recursion error or racy threaded death!
usage: 
_usage_
BUG: %s:%d: 
BUG: 
funcname
xfuncname
cachetextconv
wordregex
textconv/%s
diff=true
!diff
!^(.*[ 
])?(is[ 
]+new|renames|is[ 
]+separate)([ 
].*)?$
!^[ 
]*with[ 
].*$
]*((procedure|function)[ 
]+.*)$
]*((package|protected|task)[ 
]+.*)$
[a-zA-Z][a-zA-Z0-9_]*|[-+]?[0-9][0-9#_.aAbBcCdDeEfF]*([eE][+-]?[0-9_]+)?|=>|\.\.|\*\*|:=|/=|>=|<=|<<|>>|<>|[^[:space:]]|[
bash
]*(([a-zA-Z_][a-zA-Z0-9_]*[ 
]*\([ 
]*\))|(function[ 
]+[a-zA-Z_][a-zA-Z0-9_]*(([ 
]*\([ 
]*\))|([ 
]+)))[ 
]*(\{|\(\(?|\[\[))
]+|[^[:space:]]|[
bibtex
(@[a-zA-Z]{1,}[ 
]*\{{0,1}[ 
]*[^ 
"@',\#}{~%]*).*$
[={}"]|[^={}" 
]+|[^[:space:]]|[
!^[ 
]*[A-Za-z_][A-Za-z_0-9]*:[[:space:]]*($|/[/*])
^((::[[:space:]]*)?[A-Za-z_].*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lLuU]*|[-+*/<>%&^|=!]=|--|\+\+|<<=?|>>=?|&&|\|\||::|->\*?|\.\*|[^[:space:]]|[
csharp
!^[ 
]*(do|while|for|if|else|instanceof|new|return|switch|case|throw|catch|using)
]*(((static|public|internal|private|protected|new|virtual|sealed|override|unsafe|async)[ 
]+)*[][<>@.~_[:alnum:]]+[ 
]+[<>@._[:alnum:]]+[ 
]*\(.*\))[ 
]*(((static|public|internal|private|protected|new|virtual|sealed|override|unsafe)[ 
]+)*[][<>@.~_[:alnum:]]+[ 
]+[@._[:alnum:]]+)[ 
]*(((static|public|internal|private|protected|new|unsafe|sealed|abstract|partial)[ 
]+)*(class|enum|interface|struct)[ 
]+.*)$
]*(namespace[ 
]+.*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lL]?|[-+*/<>%&^|=!]=|--|\+\+|<<=?|>>=?|&&|\|\||::|->|[^[:space:]]|[
![:;][[:space:]]*$
^[:[@.#]?[_a-z0-9].*$
-?[_a-zA-Z][-_a-zA-Z0-9]*|-?[0-9]+|\#[0-9a-fA-F]+|[^[:space:]]|[
]*((/[ 
]*\{|&?[a-zA-Z_]).*)
[a-zA-Z0-9,._+?#-]+|[-+*/%&^|!~]|>>|<<|&&|\|\||[^[:space:]]|[
elixir
]*((def(macro|module|impl|protocol|p)?|test)[ 
].*)$
[@:]?[a-zA-Z0-9@_?!]+|[-+]?0[xob][0-9a-fA-F]+|[-+]?[0-9][0-9_.]*([eE][-+]?[0-9_]+)?|:?(\+\+|--|\.\.|~~~|<>|\^\^\^|<?\|>|<<<?|>?>>|<<?~|~>?>|<~>|<=|>=|===?|!==?|=~|&&&?|\|\|\|?|=>|<-|\\\\|->)|:?%[A-Za-z0-9_.]\{\}?|[^[:space:]]|[
fortran
!^([C*]|[ 
]*!)
!^[ 
]*MODULE[ 
]+PROCEDURE[ 
]*((END[ 
]+)?(PROGRAM|MODULE|BLOCK[ 
]+DATA|([^!'" 
]+[ 
]+)*(SUBROUTINE|FUNCTION))[ 
]+[A-Z].*)$
[a-zA-Z][a-zA-Z0-9_]*|\.([Ee][Qq]|[Nn][Ee]|[Gg][TtEe]|[Ll][TtEe]|[Tt][Rr][Uu][Ee]|[Ff][Aa][Ll][Ss][Ee]|[Aa][Nn][Dd]|[Oo][Rr]|[Nn]?[Ee][Qq][Vv]|[Nn][Oo][Tt])\.|[-+]?[0-9.]+([AaIiDdEeFfLlTtXx][Ss]?[-+]?[0-9.]*)?(_[a-zA-Z0-9][a-zA-Z0-9_]*)?|//|\*\*|::|[/<>=]=|[^[:space:]]|[
fountain
^((\.[^.]|(int|ext|est|int\.?/ext|i/e)[. ]).*)$
-]+|[^[:space:]]|[
golang
]*(func[ 
]*.*(\{[ 
]*)?)
]*(type[ 
].*(struct|interface)[ 
]*(\{[ 
]*)?)
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.eE]+i?|0[xX]?[0-9a-fA-F]+i?|[-+*/<>%&^|=!:]=|--|\+\+|<<=?|>>=?|&\^=?|&&|\|\||<-|\.{3}|[^[:space:]]|[
]*(<[Hh][1-6]([ 
].*)?>.*)$
[^<>= 
]+|[^[:space:]]|[
java
!^[ 
]*(catch|do|for|if|instanceof|new|return|switch|throw|while)
]*(([A-Za-z_][A-Za-z_0-9]*[ 
]+)+[A-Za-z_][A-Za-z_0-9]*[ 
]*\([^;]*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lL]?|[-+*/<>%&^|=!]=|--|\+\+|<<=?|>>>?=?|&&|\|\||[^[:space:]]|[
markdown
^ {0,3}#{1,6}[ 
matlab
^[[:space:]]*((classdef|function)[[:space:]].*)$|^(%%%?|##)[[:space:]].*$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|[=~<>]=|\.[*/\^']|\|\||&&|[^[:space:]]|[
objc
!^[ 
]*(do|for|if|else|return|switch|while)
]*([-+][ 
]*\([ 
]*[A-Za-z_][A-Za-z_0-9* 
]*\)[ 
]*[A-Za-z_].*)$
]*(([A-Za-z_][A-Za-z_0-9]*[ 
]+)+[A-Za-z_][A-Za-z_0-9]*[ 
]*\([^;]*)$
^(@(implementation|interface|protocol)[ 
].*)$
pascal
^(((class[ 
]+)?(procedure|function)|constructor|destructor|interface|implementation|initialization|finalization)[ 
]*.*)$
^(.*=[ 
]*(class|record).*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|<>|<=|>=|:=|\.\.|[^[:space:]]|[
^package .*
^sub [[:alnum:]_':]+[ 
]*(\([^)]*\)[ 
]*)?(:[^;#]*)?(\{[ 
]*)?(#.*)?$
^(BEGIN|END|INIT|CHECK|UNITCHECK|AUTOLOAD|DESTROY)[ 
]*(\{[ 
]*)?(#.*)?$
^=head[0-9] .*
[[:alpha:]_'][[:alnum:]_']*|0[xb]?[0-9a-fA-F_]*|[0-9a-fA-F_]+(\.[0-9a-fA-F_]+)?([eE][-+]?[0-9_]+)?|=>|-[rwxoRWXOezsfdlpSugkbctTBMAC>]|~~|::|&&=|\|\|=|//=|\*\*=|&&|\|\||//|\+\+|--|\*\*|\.\.\.?|[-+*/%.^&<>=!|]=|=~|!~|<<|<>|<=>|>>|[^[:space:]]|[
 ]*(((public|protected|private|static|abstract|final)[
 ]+)*function.*)$
 ]*((((final|abstract)[
 ]+)?class|interface|trait).*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|[-+*/<>%&^|=!.]=|--|\+\+|<<=?|>>=?|===|&&|\|\||::|->|[^[:space:]]|[
]*((class|(async[ 
]+)?def)[ 
].*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[jJlL]?|0[xX]?[0-9a-fA-F]+[lL]?|[-+*/<>%&^|=!]=|//=?|<<=?|>>=?|\*\*=?|[^[:space:]]|[
ruby
]*((class|module|def)[ 
].*)$
(@|@@|\$)?[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|\?(\\C-)?(\\M-)?.|//=?|[-+*/<>%&^|=!]=|<<=?|>>=?|===|\.{1,3}|::|[!=]~|[^[:space:]]|[
rust
 ]*((pub(\([^\)]+\))?[
 ]+)?((async|const|unsafe|extern([
 ]+"[^"]+"))[
 ]+)?(struct|enum|union|mod|trait|fn|impl|macro_rules!)[< 
]+[^;]*)$
[a-zA-Z_][a-zA-Z0-9_]*|[0-9][0-9_a-fA-Fiosuxz]*(\.([0-9]*[eE][+-]?)?[0-9_fF]*)?|[-+*\/<>%&^|=!:]=|<<=?|>>=?|&&|\|\||->|=>|\.{2}=|\.{3}|::|[^[:space:]]|[
scheme
 ]*(\(((define|def(struct|syntax|class|method|rules|record|proto|alias)?)[-*/ 
]|(library|module|struct|class)[*+ 
]).*)$
\|([^\\]*)\||([^][)(}{[ 
])+|[^[:space:]]|[
^(\\((sub)*section|chapter|part)\*{0,1}\{.*)$
\\[a-zA-Z@]+|\\.|[a-zA-Z0-9
]+|[^[:space:]]|[
utf-8
UTF-16LE-BOM
UTF-16
UTF-16LE
UTF-16BE-BOM
UTF-16BE
UTF-32BE
UTF-32LE
UTF-32
%-*s
%*s%-*s
latin-1
ISO-8859-1
GIT_USER_AGENT
git/2.32.0 (Apple Git-132)
versionsort.prereleasesuffix
ignoring versionsort.prereleasesuffix because versionsort.suffix is set
%s/worktrees
'%s' at main working tree is not the repository directory
'%s' file does not contain absolute path to the working tree location
worktrees/%s/gitdir
'%s' does not exist
'%s' is not a .git file, error code %d
'%s' does not point back to '%s'
worktree.c
can't relocate main worktree
worktrees/%s/
not a valid path
unable to locate repository; .git is not a file
unable to locate repository; .git file does not reference a repository
unable to locate repository; .git file broken
gitdir unreadable
gitdir incorrect
not a valid directory
gitdir file does not exist
unable to read gitdir file (%s)
short read (expected %ju bytes, read %ju)
invalid gitdir file
worktrees/%s/index
gitdir file points to non-existent location
not a directory
.git is not a file
.git file broken
.git file incorrect
Out of memory, strdup failed
Out of memory, realloc failed
data too large to fit into virtual memory space
Out of memory, calloc failed
could not open '%s' for reading and writing
could not open '%s' for writing
could not open '%s' for reading
dup failed
Out of memory? fdopen failed
Unable to create temporary file '%s'
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
unlink_or_msg
wrapper.c
unable to unlink '%s': %s
unlink
rmdir
unable to access '%s'
unable to get current working directory
your snprintf is broken
attempt to snprintf into too-small buffer
could not write to '%s'
could not close '%s'
could not stat %s
Out of memory, malloc failed (tried to allocate %lu bytes)
Data too large to fit into virtual memory space.
GIT_ALLOC_LIMIT
attempting to allocate %ju over limit %ju
unable to %s '%s'
GIT_FLUSH
write failure on '%s'
write error
fsync error on '%s'
tabwidth=
tabwidth %.*s out of range
cannot enforce both tab-in-indent and indent-with-non-tab
trailing whitespace
new blank line at EOF
space before tab in indent
indent with spaces
tab in indent
trailing-space
space-before-tab
indent-with-non-tab
cr-at-eol
blank-at-eol
blank-at-eof
tab-in-indent
wt-status.c
initial
%c %s
Do not modify or remove the line above.
Everything below it will be ignored.
rebase-apply/applying
rebase-apply/patch
rebase-apply/head-name
rebase-apply/onto
count/changed
count/untracked
count/ignored
finalize_deferred_config() should have been called
cannot %s: You have unstaged changes.
additionally, your index contains uncommitted changes.
cannot %s: Your index contains uncommitted changes.
multiple renames on the same target? how?
unhandled diff-files status '%c'
unhandled diff-index status '%c'
No commits yet on 
HEAD (no branch)
different
behind 
ahead 
 %s%c
%s -> 
# branch.oid %s%c
(initial)
# branch.head %s%c
(detached)
# branch.upstream %s%c
# branch.ab +%d -%d%c
# branch.ab +? -?%c
# branch.ab +0 -0%c
2 %s %s %06o %06o %06o %s %s %c%d %s%c%s%c
1 %s %s %06o %06o %06o %s %s %s%c
wt_porcelain_v2_fix_up_changed
d->mode_head == 0
d->mode_worktree == 0
unhandled unmerged status %x
wt_porcelain_v2_print_unmerged_entry
pos < 0
observed stagemask 0x%x != expected stagemask 0x%x
%c %s %s %06o %06o %06o %06o %s %s %s %s%c
%c %s%c
On branch 
interactive rebase in progress; onto 
rebase in progress; onto 
HEAD detached at 
HEAD detached from 
Not currently on any branch.
Initial commit
No commits yet
Untracked files
Ignored files
add -f
It took %.2f seconds to enumerate untracked files. 'status -uno'
may speed it up, but you have to be careful not to forget to add
new files yourself (see 'git help status').
Untracked files not listed%s
 (use -u option to show untracked files)
No changes
no changes added to commit (use "git add" and/or "git commit -a")
no changes added to commit
nothing added to commit but untracked files present (use "git add" to track)
nothing added to commit but untracked files present
nothing to commit (create/copy files and use "git add" to track)
nothing to commit
nothing to commit (use -u to show untracked files)
nothing to commit, working tree clean
wt_longstatus_print_tracking
s->branch && !s->is_initial
It took %.2f seconds to compute the branch ahead/behind values.
You can use '--no-ahead-behind' to avoid this.
git-rebase-todo is missing.
No commands done.
Last command done (%d command done):
Last commands done (%d commands done):
   %s
  (see more in file %s)
No commands remaining.
Next command to do (%d remaining command):
Next commands to do (%d remaining commands):
  (use "git rebase --edit-todo" to view and edit)
Could not open file %s for reading
exec 
label 
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)
You are in the middle of an am session.
The current patch is empty.
  (fix conflicts and then run "git am --continue")
  (use "git am --skip" to skip this patch)
  (use "git am --abort" to restore the original branch)
  (fix conflicts and then run "git rebase --continue")
  (use "git rebase --skip" to skip this patch)
  (use "git rebase --abort" to check out the original branch)
  (all conflicts fixed: run "git rebase --continue")
You are currently splitting a commit while rebasing branch '%s' on '%s'.
You are currently splitting a commit during a rebase.
  (Once your working directory is clean, run "git rebase --continue")
You are currently editing a commit while rebasing branch '%s' on '%s'.
You are currently editing a commit during a rebase.
  (use "git commit --amend" to amend the current commit)
  (use "git rebase --continue" once you are satisfied with your changes)
You are currently rebasing branch '%s' on '%s'.
You are currently rebasing.
Cherry-pick currently in progress.
You are currently cherry-picking commit %s.
  (fix conflicts and run "git cherry-pick --continue")
  (run "git cherry-pick --continue" to continue)
  (all conflicts fixed: run "git cherry-pick --continue")
  (use "git cherry-pick --skip" to skip this patch)
  (use "git cherry-pick --abort" to cancel the cherry-pick operation)
Revert currently in progress.
You are currently reverting commit %s.
  (fix conflicts and run "git revert --continue")
  (run "git revert --continue" to continue)
  (all conflicts fixed: run "git revert --continue")
  (use "git revert --skip" to skip this patch)
  (use "git revert --abort" to cancel the revert operation)
You are currently bisecting, started from branch '%s'.
You are currently bisecting.
  (use "git bisect reset" to get back to the original branch)
You are in a sparse checkout with %d%% of tracked files present.
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
  (use "git restore --source=%s --staged <file>..." to unstage)
  (use "git rm --cached <file>..." to unstage)
new commits, 
modified content, 
untracked content, 
unhandled change_type %d in wt_longstatus_print_change_data
unhandled diff status %c
wt_longstatus_print_change_data
len >= 0
%s%.*s%s -> %s
%s%.*s%s
new file:
copied:
deleted:
modified:
renamed:
typechange:
unknown:
unmerged:
Unmerged paths:
  (use "git add <file>..." to mark resolution)
  (use "git add/rm <file>..." as appropriate to mark resolution)
  (use "git rm <file>..." to mark resolution)
%s%.*s%s
both deleted:
added by us:
deleted by them:
added by them:
deleted by us:
both added:
both modified:
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
--files
--for-status
--summary-limit
HEAD^
Submodules changed but not updated:
Submodule changes to be committed:
%s%s
  (use "git %s <file>..." to include in what will be committed)
--------------------------------------------------
Your stash currently has %d entry
Your stash currently has %d entries
Could not stat %s
Could not open %s
xdiff-interface.c
mismatch between line count and parsing
Last expression must not be negated: %s
Invalid regexp to look for hunk header: %s
'%s' is not a boolean
unknown style '%s' given for '%s'
xdiff emitted hunk in the middle of a line
1.2.11
inflateInit: %s (%s)
no message
inflateInit2: %s (%s)
inflateEnd: %s (%s)
inflate: out of memory
inflate: %s (%s)
deflateInit: %s (%s)
deflateEnd: %s (%s)
deflate: out of memory
deflate: %s (%s)
zlib.c
total_out mismatch
total_in mismatch
out of memory
wrong version
needs dictionary
data stream error
stream consistency error
unknown error
deflateInit2: %s (%s)
unable to restore original working directory
iconv_open(%s,%s) failed, but needed:
    precomposed unicode is not supported.
    If you want to use decomposed unicode, run
    "git config core.precomposeunicode false"
UTF-8-MAC
LC_ALL
LC_CTYPE
LANG
alnum
space
parse_bracket_exp
regcomp.c
upper
lower
alpha
cntrl
digit
blank
graph
punct
xdigit
link_nfa_nodes
node->next == NULL
left > -1
right > -1
!IS_EPSILON_NODE (node->token.type)
re_search_stub
regexec.c
pmatch[0].rm_so == start
re_copy_regs
regs_allocated == REGS_FIXED
regs->num_regs >= nregs
re_search_internal
mctx.input.offsets_needed == 0
check_matching
err == REG_ESPACE
pop_fail_stack
num >= 0
group sync broken sliding up
group sync broken sliding down
match disappeared
group sync broken sliding to match
best shift unreached
group sync broken sliding to blank line
group sync broken moving to next group
group sync broken at end of file
BUG: %s
xdiff/xdiffi.c
\ No newline at end of file
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleShortVersionString</key>
<string>132</string>
<key>CFBundleVersion</key>
<string>132</string>
</dict>
</plist>
%s%s
1ahs
652s
git blame [<options>] [<rev-opts>] [<rev>] [--] <file>
[31m
[32m
[34m
[36m
[1;34m
[1;31m
[1;31m
[31m
[33m
[36m
[31m
[32m
[33m
[41m
[1;35m
[1;34m
[2;3m
[1;36m
[1;33m
[2;3m
[2;31m
[2;32m
[1;31m
[1;32m
[1;31m
[1;31m
[36m
[1;32m
[1;31m
[1;33m
[1;35m
[1;36m
[1;34m
/bad-path/
[33m
[1;33m
[1;32m
[1;31m
[31m
[32m
[31m
[31m
[31m
[31m
[32m
[31m
git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]
'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.
The following paths are ignored by one of your .gitignore files:
You've added another git repository inside your current repository.
Clones of the outer repository will not contain the contents of
the embedded repository and will not know how to obtain it.
If you meant to add a submodule, use:
git submodule add <url> %s
If you added this path by mistake, you can remove it from the
index with:
git rm --cached %s
See "git help submodule" for more information.
You need to give me at least one %s and %s revision.
You can use "git bisect %s" and "git bisect %s" for that.
bad|new
good|old
You need to start by "git bisect start".
You then need to give me at least one %s and %s revision.
You can use "git bisect %s" and "git bisect %s" for that.
git check-ref-format [--normalize] [<options>] <refname>
   or: git check-ref-format --branch <branchname-shorthand>
Clone succeeded, but checkout failed.
You can inspect what was checked out with 'git status'
and retry with 'git restore --source=HEAD :/'
You asked to amend the most recent commit, but doing so would make
it empty. You can repeat your command with --allow-empty, or you can
remove the commit entirely with "git reset HEAD^".
The previous cherry-pick is now empty, possibly due to conflict resolution.
If you wish to commit it anyway, use:
    git commit --allow-empty
Otherwise, please use 'git cherry-pick --skip'
and then use:
    git cherry-pick --continue
to resume cherry-picking the remaining commits.
If you wish to skip this commit, use:
    git cherry-pick --skip
Otherwise, please use 'git rebase --skip'
!-<FR
The permissions on your socket directory are too loose; other
users may be able to read your cached credentials. Consider running:
chmod 0700 %s
git credential [fill|approve|reject]
git diff-files [-q] [-0 | -1 | -2 | -3 | -c | --cc] [<common-diff-options>] [<path>...]
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
git diff-index [-m] [--cached] [<common-diff-options>] <tree-ish> [<path>...]
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
git diff-tree [--stdin] [-m] [-c | --cc] [-s] [-v] [--pretty] [-t] [-r] [--root] [<common-diff-options>] <tree-ish> [<tree-ish>] [<path>...]
  -r            diff recursively
  -c            show combined diff for merge commits
  --cc          show combined diff for merge commits removing uninteresting hunks
  --combined-all-paths
                show name of file in all parents for combined diffs
  --root        include the initial commit as diff against /dev/null
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
git diff [<options>] [<commit>] [--] [<path>...]
   or: git diff [<options>] --cached [<commit>] [--] [<path>...]
   or: git diff [<options>] <commit> [--merge-base] [<commit>...] <commit> [--] [<path>...]
   or: git diff [<options>] <commit>...<commit>] [--] [<path>...]
   or: git diff [<options>] <blob> <blob>]
   or: git diff [<options>] --no-index [--] <path> <path>]
common diff options:
  -z            output diff-raw with lines terminated with NUL.
  -p            output patch format.
  -u            synonym for -p.
  --patch-with-raw
                output both a patch and the diff-raw format.
  --stat        show diffstat instead of patch.
  --numstat     show numeric diffstat instead of patch.
  --patch-with-stat
                output a patch and prepend its diffstat.
  --name-only   show only names of changed files.
  --name-status show names and status of changed files.
  --full-index  show full object name on index lines.
  --abbrev=<n>  abbreviate object names in diff-tree header and diff-raw.
  -R            swap input file pairs.
  -B            detect complete rewrites.
  -M            detect renames.
  -C            detect copies.
  --find-copies-harder
                try unchanged files as candidate for copy detection.
  -l<n>         limit rename attempts up to <n> paths.
  -O<file>      reorder diffs according to the <file>.
  -S<string>    find filepair whose only one side contains the string.
  --pickaxe-all
                show all files diff when -S is used and hit is found.
  -a  --text    treat all files as text.
git fast-import [--date-format=<f>] [--max-pack-size=<n>] [--big-file-threshold=<n>] [--depth=<n>] [--active-branches=<n>] [--export-marks=<marks.file>]
git fetch-pack [--all] [--stdin] [--quiet | -q] [--keep | -k] [--thin] [--include-tag] [--upload-pack=<git-upload-pack>] [--depth=<n>] [--no-progress] [--diag-url] [-v] [<host>:]<directory> [<refs>...]
Fetch normally indicates which branches had a forced update,
but that check has been disabled. To re-enable, use '--show-forced-updates'
flag or run 'git config fetch.showForcedUpdates true'.
It took %.2f seconds to check forced updates. You can use
'--no-show-forced-updates' or run 'git config fetch.showForcedUpdates false'
 to avoid this check.
git maintenance <subcommand> [<options>]
launchctl
git get-tar-commit-id
git index-pack [-v] [-o <index-file>] [--keep | --keep=<msg>] [--[no-]rev-index] [--verify] [--strict] (<pack-file> | --stdin [--fix-thin] [<pack-file>])
git mailsplit [-d<prec>] [-f<n>] [-b] [--keep-cr] -o<directory> [(<mbox>|<Maildir>)...]
git merge-ours <base>... -- HEAD <remote>...
git %s <base>... -- <head> <remote> ...
git merge-tree <base-tree> <branch1> <branch2>
GIT_MERGE_AUTOEDIT
Please enter a commit message to explain why this merge is necessary,
especially if it merges an updated upstream into a topic branch.
An empty message aborts the commit.
Lines starting with '%c' will be ignored, and an empty message aborts
the commit.
Write/edit the notes for the following object:
disabling bitmap writing, as some objects are not being packed
disabling bitmap writing, packs are split due to pack.packSizeLimit
git pack-redundant [--verbose] [--alt-odb] (--all | <filename.pack>...)
git patch-id [--stable | --unstable]
0123456789
You are not currently on a branch.
To push the history leading to the current (detached HEAD)
state now, use
    git push %s HEAD:<name-of-remote-branch>
Updates were rejected because the tip of your current branch is behind
its remote counterpart. Integrate the remote changes (e.g.
'git pull ...') before pushing again.
See the 'Note about fast-forwards' in 'git push --help' for details.
Updates were rejected because a pushed branch tip is behind its remote
counterpart. Check out this branch and integrate the remote changes
(e.g. 'git pull ...') before pushing again.
See the 'Note about fast-forwards' in 'git push --help' for details.
Updates were rejected because the tag already exists in the remote.
Updates were rejected because the remote contains work that you do
not have locally. This is usually caused by another repository pushing
to the same ref. You may want to first integrate the remote changes
(e.g., 'git pull ...') before pushing again.
See the 'Note about fast-forwards' in 'git push --help' for details.
You cannot update a remote ref that points at a non-commit object,
or update a remote ref to make it point at a non-commit object,
without using the '--force' option.
Updates were rejected because the tip of the remote-tracking
branch has been updated since the last checkout. You may want
to integrate those changes locally (e.g., 'git pull ...')
before forcing an update.
0005
git reflog [ show | expire | delete | exists ]
git reflog expire [--expire=<time>] [--expire-unreachable=<time>] [--rewrite] [--updateref] [--stale-fix] [--dry-run | -n] [--verbose] [--all] <refs>...
git reflog delete [--rewrite] [--updateref] [--dry-run | -n] [--verbose] <refs>...
git reflog exists <ref>
git remote-ext <remote> <url>
git remote-fd <remote> <url>
--mirror is dangerous and deprecated; please
 use --mirror=fetch or --mirror=push instead
Incremental repacks are incompatible with bitmap indexes.  Use
--no-write-bitmap-index or disable the pack.writebitmaps configuration.
git rev-list [OPTION] <commit-id>... [ -- paths... ]
  limiting output:
    --max-count=<n>
    --max-age=<epoch>
    --min-age=<epoch>
    --sparse
    --no-merges
    --min-parents=<n>
    --no-min-parents
    --max-parents=<n>
    --no-max-parents
    --remove-empty
    --all
    --branches
    --tags
    --remotes
    --stdin
    --quiet
  ordering output:
    --topo-order
    --date-order
    --reverse
  formatting output:
    --parents
    --children
    --objects | --objects-edge
    --unpacked
    --header | --pretty
    --[no-]object-names
    --abbrev=<n> | --no-abbrev
    --abbrev-commit
    --left-right
    --count
  special purpose:
    --bisect
    --bisect-vars
    --bisect-all
git rev-parse --parseopt [<options>] -- [<args>...]
   or: git rev-parse --sq-quote [<arg>...]
   or: git rev-parse [<options>] [<arg>...]
Run "git rev-parse --parseopt -h" for more information on the first usage.
HEAD

-w[<width>[,<indent1>[,<indent2>]]]
refs/stash
An alternate computed from a superproject's alternate is invalid.
To allow Git to clone without an alternate in such a case, set
submodule.alternateErrorStrategy to 'info' or, equivalently, clone with
'--reference-if-able' instead of '--reference'.
You have created a nested tag. The object referred to by your new tag is
already a tag. If you meant to tag the object that it points to, use:
git tag -f %s %s^{}
Write a message for tag:
  %s
Lines starting with '%c' will be ignored.
Write a message for tag:
  %s
Lines starting with '%c' will be kept; you may remove them yourself if you want to.
git unpack-objects [-n] [-q] [-r] [--strict]
git upload-archive <repo>
git upload-archive: archiver died with error
git var (-l | <variable>)
&X&&e^j - leave this hunk undecided, see next undecided hunk
J - leave this hunk undecided, see next hunk
k - leave this hunk undecided, see previous undecided hunk
K - leave this hunk undecided, see previous hunk
g - select a hunk to go to
/ - search for a hunk matching the given regex
s - split the current hunk into smaller hunks
e - manually edit the current hunk
? - print help
Disable this message with "git config advice.%s false"
GIT binary patch
-Subproject commit 
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
----------------------------------------------------------------------
(builtin)true
(builtin)false
(builtin)unknown
0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz!#$%&()*+-;<=>?@^_`{|}~
After fixing the error cause you may try to fix up
the remote tracking information by invoking
"git branch --set-upstream-to=%s%s%s".
the requested upstream branch '%s' does not exist
If you are planning on basing your work on an upstream
branch that already exists at the remote, you may need to
run "git fetch" to retrieve it.
If you are planning to push out a new local branch that
will track its remote counterpart, you may want to use
"git push -u" to set the upstream config as you push.
Cannot setup tracking information; starting point '%s' is not a branch.
# v2 git bundle
# v3 git bundle
'Warning: commit message did not conform to UTF-8.
You may want to amend it after fixing the message, or set the config
variable i18n.commitencoding to the encoding your project uses.
exceeded maximum include depth (%d) while including
from
This might be due to circular includes.
@@@@@@@@@AA@@A@@@@@@@@@@@@@@@@@@
     
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
NN'C
2waN
mdIP
gwz3
4}@4m
.(uw
OJqj
m"2T
FH9<
x6(T!
h`LK
JbEv
E&)
R;*&
(G]>
pENOXHn
0lY;
F==8
p;I}
=J-f
VYk[(
[x*w1
L<<'2
[<tR
yrhj
>/Vm-ikP I
xj4UWg
 h'$
zyT_
Lv<l
rq{1
A'eW|
3B-9
------------
only found copies from modified paths due to too many files.
inexact rename detection was skipped due to too many files.
you may want to set your %s variable to at least %d and retry the command.
'%s' appears to be a git command, but we were not
able to execute it. Maybe git-%s is broken?
+From e6807f3efca28b30decfecb1732a56c7db1137ee Mon Sep 17 00:00:00 2001
utf-8
A"\Si
VXZg
BITM
PACK
;BKUXe
JMPU
BBB"B$B&
+,-./:=@_^
abtnvfr
cache entry has null sha1: %s
You can fix this with 'git rebase --edit-todo' and then run 'git rebase --continue'.
Or you can abort the rebase with 'git rebase --abort'.
*/eqrefname
Using '%s' as the name for the initial branch. This default branch name
is subject to change. To configure the initial branch name to use in all
of your new repositories, which will suppress this warning, call:
git config --global init.defaultBranch <name>
Names commonly chosen instead of 'master' are 'main', 'trunk' and
'development'. The just-created branch can be renamed via this command:
git branch -m <name>
# pack-refs with: peeled fully-peeled sorted 
Signed-off-by: 
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly:
    git config --global user.name "Your Name"
    git config --global user.email you@example.com
After doing this, you may fix the identity used for this commit with:
    git commit --amend --reset-author
Your name and email address were configured automatically based
on your username and hostname. Please check that they are accurate.
You can suppress this message by setting them explicitly. Run the
following command and follow the instructions in your editor to edit
your configuration file:
    git config --global --edit
After doing this, you may fix the identity used for this commit with:
    git commit --amend --reset-author
you have staged changes in your working tree
If these changes are meant to be squashed into the previous commit, run:
  git commit --amend %s
If they are meant to go into a new commit, run:
  git commit %s
In both cases, once you're done, continue with:
  git rebase --continue
Could not execute the todo command
    %.*s
It has been rescheduled; To edit the command before continuing, please
edit the todo list first:
    git rebase --edit-todo
    git rebase --continue
(cherry picked from commit 
This is a combination of %d commits.
The 1st commit message will be skipped:
This is the 1st commit message:
The commit message #%d will be skipped:
This is the commit message #%d:
  %m %s
A          
.A*2<C
K$(Q
0005
UTF-8
2.32.0 (Apple Git-132)
XXXXXX
"%?oooo2o?
------------------------ >8 ------------------------
3063
3063
dhkm
rsy}
<EEE
/29222
222USuccess
No match
Invalid regular expression
Invalid collation character
Invalid character class name
Trailing backslash
Invalid back reference
Unmatched [ or [^
Unmatched ( or \(
Unmatched \{
Invalid content of \{\}
Invalid range end
Memory exhausted
Invalid preceding regular expression
Premature end of regular expression
Regular expression too big
Unmatched ) or \)
git-
git.c
prefix '%s' must start with 'git-'
git-help
cannot handle %s as a builtin
usage: %s
expansion of alias '%s' failed; '%s' is not a git command
failed to run command '%s': %s
GIT_PAGER
annotate
apply
archive
bisect--helper
blame
branch
bugreport
bundle
cat-file
check-attr
check-ignore
check-mailmap
check-ref-format
checkout
checkout--worker
checkout-index
cherry
cherry-pick
clean
clone
column
commit
commit-graph
commit-tree
config
count-objects
credential
credential-cache
credential-cache--daemon
credential-store
describe
diff
diff-files
diff-index
diff-tree
difftool
env--helper
fast-export
fast-import
fetch
fetch-pack
fmt-merge-msg
for-each-ref
for-each-repo
format-patch
fsck
fsck-objects
get-tar-commit-id
grep
hash-object
help
index-pack
init
init-db
interpret-trailers
ls-files
ls-remote
ls-tree
mailinfo
mailsplit
maintenance
merge
merge-base
merge-file
merge-index
merge-ours
merge-recursive
merge-recursive-ours
merge-recursive-theirs
merge-subtree
merge-tree
mktag
mktree
multi-pack-index
name-rev
notes
pack-objects
pack-redundant
pack-refs
patch-id
pickaxe
prune
prune-packed
pull
push
range-diff
read-tree
rebase
rebase--interactive
receive-pack
reflog
remote
remote-ext
remote-fd
repack
replace
rerere
reset
restore
rev-list
rev-parse
revert
send-pack
shortlog
show
show-branch
show-index
show-ref
sparse-checkout
stage
stash
status
stripspace
submodule--helper
switch
symbolic-ref
unpack-file
unpack-objects
update-index
update-ref
update-server-info
upload-archive
upload-archive--writer
upload-pack
verify-commit
verify-pack
verify-tag
version
whatchanged
worktree
write-tree
--help
--exclude-guides
%s doesn't support --super-prefix
trace: built-in: git
write failure on standard output
unknown write failure on standard output
close failed on standard output
--version
--exec-path
_query_
--html-path
share/doc/git-doc
--man-path
share/man
--info-path
share/info
--paginate
--no-pager
--no-replace-objects
GIT_NO_REPLACE_OBJECTS
--git-dir
no directory given for --git-dir
GIT_DIR
--git-dir=
--namespace
no namespace given for --namespace
GIT_NAMESPACE
--namespace=
--work-tree
no directory given for --work-tree
GIT_WORK_TREE
--work-tree=
--super-prefix
no prefix given for --super-prefix
GIT_INTERNAL_SUPER_PREFIX
--super-prefix=
--bare
GIT_IMPLICIT_WORK_TREE
-c expects a configuration string
--config-env
no config key given for --config-env
--config-env=
--literal-pathspecs
GIT_LITERAL_PATHSPECS
--no-literal-pathspecs
--glob-pathspecs
GIT_GLOB_PATHSPECS
--noglob-pathspecs
GIT_NOGLOB_PATHSPECS
--icase-pathspecs
GIT_ICASE_PATHSPECS
--no-optional-locks
GIT_OPTIONAL_LOCKS
--shallow-file
no directory given for -C
cannot change to '%s'
--list-cmds=
parseopt
unknown option: %s
builtins
main
others
nohelpers
alias
list-
unsupported command listing type '%s'
_run_git_alias_
trace: exec:
git_alias
could not execute builtin %s
  %s
 <==
 ==>
alias loop detected: expansion of '%s' does not terminate:%s
git-%s
dashed
_run_dashed_
'%s' is aliased to '%s'
shell_alias
_run_shell_alias_
while expanding alias '%s': '%s'
bad alias.%s string: %s
alias '%s' changes environment variables.
You can use '!git' in the alias to do this
empty alias for %s
recursive alias: %s
trace: alias expansion: %s =>
size_t overflow: %ju * %ju
GIT_TEST_ADD_I_USE_BUILTIN
add.interactive.usebuiltin
feature.experimental
--patch
--patch=stash
--patch=reset
--patch=checkout
--patch=worktree
'%s' not supported
add--interactive
--dry-run is incompatible with --interactive/--patch
--pathspec-from-file is incompatible with --interactive/--patch
builtin/add.c
--pathspec-from-file is incompatible with --edit
-A and -u are mutually incompatible
Option --ignore-missing can only be used together with --dry-run
--chmod param '%s' must be either -x or +x
--pathspec-from-file is incompatible with pathspec arguments
--pathspec-file-nul requires --pathspec-from-file
Nothing specified, nothing added.
Maybe you wanted to say 'git add .'?
Turn this message off by running
"git config advice.addEmptyPathspec false"
index file corrupt
BUG:%s:%d: unsupported magic %x
pathspec '%s' did not match any files
Unable to write new index file
unexpected diff status %c
updating files failed
remove '%s'
add.ignoreerrors
add.ignore-errors
dry-run
dry run
verbose
be verbose
interactive
interactive picking
patch
select hunks interactively
edit
edit current diff and apply
force
allow adding otherwise ignored files
update
update tracked files
renormalize
renormalize EOL of tracked files (implies -u)
intent-to-add
record only the fact that the path will be added later
add changes from all tracked and untracked files
ignore-removal
ignore paths removed in the working tree (same as --no-all)
refresh
don't add, only refresh the index
ignore-errors
just skip files which cannot be added because of errors
ignore-missing
check if - even missing - files are ignored in dry run
chmod
(+|-)x
override the executable bit of the listed files
warn-embedded-repo
warn when adding an embedded repository
legacy-stash-p
backend for `git stash -p`
pathspec-from-file
file
read pathspec from file
pathspec-file-nul
with --pathspec-from-file, pathspec elements are separated with NUL character
git add [<options>] [--] <pathspec>...
ADD_EDIT.patch
--recount
--cached
Could not read the index
Could not open '%s' for writing.
Could not write patch
editing patch failed
Could not stat '%s'
Empty patch. Aborted.
Could not apply '%s'
Unstaged changes after refreshing the index:
Use -f if you really want to add them.
Turn this message off by running
"git config advice.addIgnoredFile false"
adding files failed
adding embedded git repository: %s
BUG: strbuf_setlen() beyond buffer
strbuf_setlen
strbuf.h
!strbuf_slopbuf[0]
cannot chmod %cx '%s'
git am [<options>] [(<mbox> | <Maildir>)...]
git am [<options>] (--continue | --skip | --abort)
run interactively
binary
historical option -- no-op
3way
allow fall back on 3way merging if needed
quiet
be quiet
signoff
add a Signed-off-by trailer to the commit message
utf8
recode into utf8 (default)
keep
pass -k flag to git-mailinfo
keep-non-patch
pass -b flag to git-mailinfo
message-id
pass -m flag to git-mailinfo
keep-cr
pass --keep-cr flag to git-mailsplit for mbox format
no-keep-cr
do not pass --keep-cr flag to git-mailsplit independent of am.keepcr
scissors
strip everything before a scissors line
quoted-cr
action
pass it through git-mailinfo
whitespace
pass it through git-apply
ignore-space-change
ignore-whitespace
directory
root
exclude
path
include
patch-format
format
format the patch(es) are in
reject
resolvemsg
override error message when patch failure occurs
continue
continue applying patches after resolving a conflict
resolved
synonyms for --continue
skip
skip the current patch
abort
restore the original branch and abort the patching operation
quit
abort the patching operation but keep HEAD where it is
show-current-patch
(diff|raw)
show the patch being applied
committer-date-is-author-date
lie about committer date
ignore-date
use current timestamp for author date
rerere-autoupdate
update the index with reused conflict resolution if possible
gpg-sign
key-id
GPG-sign commits
rebasing
(internal use for git-rebase)
The -b/--binary option has been a no-op for long time, and
it will be removed. Please do not use it anymore.
failed to read the index
previous rebase directory %s still exists but mbox given.
Stray %s directory found.
Use "git am --abort" to remove it.
Resolve operation not in progress, we are not resuming.
%s/%s
interactive mode requires patches on the command line
builtin/am.c
invalid resume value
option callback does not expect negation
bad action '%s' for '%s'
--quoted-cr
mbox
stgit
stgit-series
mboxrd
Invalid value for --patch-format: %s
Invalid value for --show-current-patch: %s
--show-current-patch=%s is incompatible with --show-current-patch=%s
rebase-apply
am.threeway
am.messageid
commit.gpgsign
last
next
state file 'next' does not exist
state file 'last' does not exist
could not parse author script
original-commit
could not parse %s
threeway
sign
messageid
apply-opt
could not read '%s'
author-script
read_am_author_script
am.c
!state->author_name
!state->author_email
!state->author_date
read_commit_msg
!state->msg
final-commit
Patch format detection failed.
failed to create directory '%s'
REBASE_HEAD
Failed to split patches.
invalid value for state->keep
invalid value for state->scissors
nowarn
warn
strip
invalid value for state->quoted_cr
applying
HEAD
abort-safety
ORIG_HEAD
From 
From: 
# This series applies on GIT commit
# HG changeset patch
From:
Author:
Date:
^[!-9;-~]+:
fseek failed
invalid pattern: %s
am.keepcr
invalid patch_format
-d%d
-o%s
--keep-cr
--mboxrd
could not open '%s' for reading
%s/%0*d
could not open '%s' for writing
could not parse patch '%s'
From:%s
From
Date
Subject: %s
Only one StGIT patch series can be applied at once
# User 
From: %s
# Date 
invalid timestamp
invalid Date line
invalid timezone offset
Date: %s
dirtyindex
unable to write index file
Dirty index: cannot apply patches (dirty: %s)
Applying: %.*s
patch-merge-index
No changes -- Patch already applied.
Patch failed at %s %.*s
Use 'git am --show-current-patch=diff' to see the failed patch
rewritten
am_run
state->rebasing
%0*d
cannot resume: %s does not exist.
author
missing author line in commit %s
invalid ident line: %.*s
get_commit_info
unable to parse commit %s
info
could not parse patch
Patch sent with format=flowed; space at the end of lines might be lost.
Subject: 
Author: 
Email: 
Date: 
Mail System Internal Data
Patch is empty.
parse_mail
GIT_AUTHOR_NAME=
GIT_AUTHOR_EMAIL=
GIT_AUTHOR_DATE=
do_interactive
state->msg
Commit Body is:
--------------------------
Apply? [y]es/[n]o/[e]dit/[v]iew patch/[a]ccept all: 
unable to read from stdin; aborting
run_applypatch_msg_hook
applypatch-msg
'%s' was deleted by the applypatch-msg hook
init_apply_state() failed
unknown option passed through to git apply
check_apply_state() failed
could not build fake ancestor
Repository lacks necessary blobs to fall back on 3-way merge.
Using index info to reconstruct a base tree...
Did you hand edit your patch?
It does not apply to blobs recorded in its index.
could not write tree
Falling back to patching base and 3-way merge...
%.*s
Failed to merge in the changes.
--build-fake-ancestor=%s
git am -i
git am
When you have resolved this problem, run "%s --continue".
If you prefer to skip this patch, run "%s --skip" instead.
To restore the original branch and stop patching, run "%s --abort".
pre-applypatch
git write-tree failed to write a tree
applying to an empty history
GIT_COMMITTER_NAME
GIT_COMMITTER_EMAIL
failed to write commit object
GIT_REFLOG_ACTION
%s: %.*s
do_commit
!is_null_oid(&state->orig_commit)
post-applypatch
Malformed input line: '%s'.
Notes added by 'git rebase'
Failed to copy notes from '%s' to '%s'
post-rewrite
No changes - did you forget to use 'git add'?
If there is nothing left to stage, chances are that something else
already introduced the same changes; you might want to skip this patch.
You still have unmerged paths in your index.
You should 'git add' each file with resolved conflicts to mark them as such.
You might run `git rm` on a file to accept "deleted by them" for it.
failed to clean index
am_skip
Could not parse object '%s'.
unable to write new index file
am --abort
You seem to have moved HEAD since the last 'am' failure.
Not rewinding to ORIG_HEAD
invalid mode for --show-current-patch
failed to read '%s'
builtin/apply.c
git apply [<options>] [<patch>...]
git-upload-archive
output
write the archive to this file
repo
retrieve the archive from remote repository <repo>
exec
command
path to the remote git-upload-archive command
could not create archive file '%s'
could not redirect output
git archive: Remote with no URL
argument --format=%s
argument %s
git archive: expected ACK/NAK, got a flush packet
NACK 
git archive: NACK %s
git archive: protocol error
git archive: expected a flush
bisect-reset
reset the bisection state
bisect-next-check
check whether bad or good terms exist
bisect-terms
print out the bisect terms
bisect-start
start the bisect session
bisect-next
find the next bisection commit
bisect-state
mark the state of ref (or refs)
bisect-log
list the bisection steps so far
bisect-replay
replay the bisection process from the given file
bisect-skip
skip some commits for checkout
no-log
no log for BISECT_WRITE
--bisect-reset requires either no argument or a commit
--bisect-next-check requires 2 or 3 arguments
--bisect-terms requires 0 or 1 argument
good
--bisect-next requires 0 arguments
--bisect-log requires 0 arguments
no logfile given
builtin/bisect--helper.c
unknown subcommand %d
git bisect--helper --bisect-reset [<commit>]
git bisect--helper --bisect-next-check <good_term> <bad_term> [<term>]
git bisect--helper --bisect-terms [--term-good | --term-old | --term-bad | --term-new]
git bisect--helper --bisect-start [--term-{new,bad}=<term> --term-{old,good}=<term>] [--no-checkout] [--first-parent] [<bad> [<good>...]] [--] [<paths>...]
git bisect--helper --bisect-next
git bisect--helper --bisect-state (bad|new) [<rev>]
git bisect--helper --bisect-state (good|old) [<rev>...]
git bisect--helper --bisect-replay <filename>
git bisect--helper --bisect-skip [(<rev>|<range>)...]
'%s' is not a valid commit
BISECT_HEAD
could not check out original HEAD '%s'. Try 'git bisect reset <commit>'.
BISECT_START
refs/bisect/%s
%s-*
refs/bisect/
bisecting only with a %s commit
Are you sure [Y/n]? 
no terms defined
Your current terms are %s for the old state
and %s for the new state.
--term-good
--term-old
--term-bad
--term-new
invalid argument %s for 'git bisect terms'.
Supported options are: --term-good|--term-old and --term-bad|--term-new.
--no-checkout
--first-parent
'' is not a valid term
--term-good=
--term-old=
--term-bad=
--term-new=
unrecognized option: '%s'
%s^{commit}
'%s' does not appear to be a valid revision
bad HEAD - I need a HEAD
checking out '%s' failed. Try 'git bisect start <valid-branch>'.
refs/heads/
won't bisect on cg-seek'ed tree
bad HEAD - strange symbolic ref
invalid ref: '%s'
head-name
BISECT_FIRST_PARENT
BISECT_NAMES
refs/bisect/%s-%s
Bad bisect_write argument: %s
couldn't get the oid of the rev '%s'
couldn't open the file '%s'
git bisect %s %s
BISECT_LOG
# %s: [%s] %s
please use two different terms
'%s' is not a valid term
start
visualize
view
replay
terms
can't use the builtin command '%s' as a term
can't change the meaning of the term '%s'
write-in-file does not support '%s' mode
cannot open file '%s' in mode '%s'
could not write to file '%s'
BISECT_TERMS
git bisect start
You need to start by "git bisect start"
Do you want me to do it for you [Y/n]? 
# first %s commit: [%s] %s
could not open '%s' for appending
# only skipped commits left to test
failed to write to '%s'
# possible first %s commit: [%s] %s
revision walk setup failed
Please call `--bisect-state` with at least one argument
'git bisect %s' can take only one argument.
Bad rev input: %s
Bad rev input (not a commit): %s
Invalid command: you're currently in a %s/%s bisect
BISECT_EXPECTED_REV
BISECT_ANCESTORS_OK
cannot read file '%s' for replaying
git bisect
git-bisect
'%s'?? what are you talking about?
We are not bisecting.
incremental
show blame entries as we find them, incrementally
do not show object names of boundary commits (Default: off)
do not treat root commits as boundaries (Default: off)
show-stats
show work cost statistics
progress
force progress reporting
score-debug
show output score for blame entries
show-name
show original filename (Default: auto)
show-number
show original linenumber (Default: off)
porcelain
show in a format designed for machine consumption
line-porcelain
show porcelain format with per-line commit information
use the same output mode as git-annotate (Default: off)
show raw timestamp (Default: off)
show long commit SHA1 (Default: off)
suppress author name and timestamp (Default: off)
show-email
show author email instead of name (Default: off)
ignore whitespace differences
ignore-rev
ignore <rev> when blaming
ignore-revs-file
ignore revisions from <file>
color-lines
color redundant metadata from previous line differently
color-by-age
color lines by age
minimal
spend extra cycles to find better match
use revisions from <file> instead of calling git-rev-list
contents
use <file>'s contents as the final image
score
find line copies within and across files
find line movements within and across files
range
process only line range <start>,<end> or function :<funcname>
abbrev
use <n> digits to display object names
builtin/blame.c
--reverse
--children
--progress can't be used with --incremental or porcelain formats
reading graft file '%s' failed
4 years, 11 months ago
missing <path> to blame
no such ref: HEAD
file %s has only %lu line
file %s has only %lu lines
Blaming lines
[36m
num read blob: %d
num get patch: %d
num commits: %d
blue,12 month ago,white,1 month ago,red
expecting a color: %s
must end with a color
blame.showroot
blame.blankboundary
blame.showemail
blame.date
blame.ignorerevsfile
blame.markunblamablelines
blame.markignoredlines
color.blame.repeatedlines
invalid color '%s' in color.blame.repeatedLines
color.blame.highlightrecent
blame.coloring
repeatedLines
highlightRecent
none
invalid value for blame.coloring
<rev-opts> are documented in git-rev-list(1)
cannot find revision %s to ignore
Baa %d!
%s %d %d %d
stdout
author %s
author-mail %s
author-time %ju
author-tz %s
committer %s
committer-mail %s
committer-time %ju
committer-tz %s
summary %s
author 
committer 
(%s)
(unknown)
<%.*s>
previous %s 
filename 
%s %d %d
(%10s
%10s
 %*d %02d
 %-*.*s
 %*d
 (%s%*s %10s
 %*d) 
%ju %s
boundary
Generic options
show hash and subject, give twice for upstream branch
suppress informational messages
track
set up tracking mode (see git-pull(1))
set-upstream
do not use
set-upstream-to
upstream
change the upstream info
unset-upstream
unset the upstream info
color
when
use colored output
always
remotes
act on remote-tracking branches
contains
print only branches that contain the commit
no-contains
print only branches that don't contain the commit
with
without
Specific git-branch actions:
list both remote-tracking and local branches
delete
delete fully merged branch
delete branch (even if not merged)
move
move/rename a branch and its reflog
move/rename a branch, even if target exists
copy
copy a branch and its reflog
copy a branch, even if target exists
list
list branch names
show-current
show current branch name
create-reflog
create the branch's reflog
edit-description
edit the description for the branch
force creation, move/rename, deletion
merged
print only branches that are merged
no-merged
print only branches that are not merged
style
list branches in columns
sort
field name to sort on
points-at
object
print only branches of the object
ignore-case
sorting and filtering are case insensitive
format to use for the output
Failed to resolve HEAD as a valid ref.
HEAD not found below refs/heads!
--column and --verbose are incompatible
branch name required
Cannot give description to detached HEAD
cannot edit description of more than one branch
refs/heads/%s
No commit on branch '%s' yet.
No branch named '%s'.
too many branches for a copy operation
too many arguments for a rename operation
too many arguments to set new upstream
could not set upstream of HEAD to %s when it does not point to any branch.
no such branch '%s'
branch '%s' does not exist
too many arguments to unset upstream
could not unset upstream of HEAD when it does not point to any branch.
Branch '%s' has no upstream information
branch.%s.remote
branch.%s.merge
The -a, and -r, options to 'git branch' do not take a branch name.
Did you mean to use: -a|-r --list <pattern>?
the '--set-upstream' option is no longer supported. Please use '--track' or '--set-upstream-to' instead.
plain
local
current
%s.%s
git branch [<options>] [-r | -a] [--merged] [--no-merged]
git branch [<options>] [-l] [-f] <branch-name> [<start-point>]
git branch [<options>] [-r] (-d | -D) <branch-name>...
git branch [<options>] (-m | -M) [<old-branch>] <new-branch>
git branch [<options>] (-c | -C) [<old-branch>] <new-branch>
git branch [<options>] [-r | -a] [--points-at]
git branch [<options>] [-r | -a] [--format]
branch.sort
column.
color.branch
color.branch.
refs/remotes/%s
cannot use -a with -d
Couldn't look up commit object for HEAD
Cannot delete branch '%s' checked out at '%s'
remote-tracking branch '%s' not found.
branch '%s' not found.
broken
Deleted remote-tracking branch %s (was %s).
Deleted branch %s (was %s).
Couldn't look up commit object for '%s'
The branch '%s' is not fully merged.
If you are sure you want to delete it, run 'git branch -D %s'.
deleting branch '%s' that has been merged to
         '%s', but not yet merged to HEAD.
not deleting branch '%s' that is not yet merged to
         '%s', even though it is merged to HEAD.
branch.%s
Update of config-file failed
could not resolve HEAD
HEAD (%s) points outside of refs/heads/
remotes/
unable to parse format string
print_ref_list
branch.c
!filter->verbose && "--column and --verbose are incompatible"
refs/remotes/
%%(if)%%(HEAD)%%(then)* %s%%(else)%%(if)%%(worktreepath)%%(then)+ %s%%(else)  %s%%(end)%%(end)
  %s
%%(objectname:short)
%%(objectname)
%%(objectname:short=%d)
%%(align:%d,left)%%(refname:lstrip=2)%%(end)
 %s 
%%(if:notequals=*)%%(HEAD)%%(then)%%(if)%%(worktreepath)%%(then)(%s%%(worktreepath)%s) %%(end)%%(end)
%%(if)%%(upstream)%%(then)[%s%%(upstream:short)%s%%(if)%%(upstream:track)%%(then): %%(upstream:track,nobracket)%%(end)] %%(end)%%(contents:subject)
%%(if)%%(upstream:track)%%(then)%%(upstream:track) %%(end)%%(contents:subject)
%%(align:%d,left)%s%%(refname:lstrip=2)%%(end)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(else) %s %%(contents:subject)%%(end)
%%(refname:lstrip=2)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(end)
%s%%(refname:lstrip=2)%s%%(if)%%(symref)%%(then) -> %%(symref:short)%%(end)
%%(if:notequals=refs/remotes)%%(refname:rstrip=-2)%%(then)%s%%(else)%s%%(end)
Please edit the description for the branch
  %s
Lines starting with '%c' will be stripped.
branch.%s.description
EDIT_DESCRIPTION
cannot copy the current branch while not on any.
cannot rename the current branch while not on any.
Invalid branch name: '%s'
builtin/branch.c
expected prefix missing for refs
Branch: copied %s to %s
Branch: renamed %s to %s
Branch rename failed
Branch copy failed
Created a copy of a misnamed branch '%s'
Renamed a misnamed branch '%s' away
Branch renamed to %s, but HEAD is not updated!
Branch is renamed, but update of config-file failed
Branch is copied, but update of config-file failed
Branch %s is being rebased at %s
Branch %s is being bisected at %s
%Y-%m-%d-%H%M
output-directory
specify a destination for the bugreport file
suffix
specify a strftime format suffix for the filename
git-bugreport-
.txt
could not create leading directories for '%s'
System Info
Enabled Hooks
couldn't create a new file at '%s'
unable to write to %s
Created new report at '%s'.
git bugreport [-o|--output-directory <file>] [-s|--suffix <format>]
Thank you for filling out a Git bug report!
Please answer the following questions to help us understand your issue.
What did you do before the bug happened? (Steps to reproduce your issue)
What did you expect to happen? (Expected behavior)
What happened instead? (Actual behavior)
What's different between what you expected and what actually happened?
Anything else you want to add:
Please review the rest of the bug report below.
You can delete any lines you don't wish to share.
[%s]
git version:
uname: 
uname() failed with error '%s' (%d)
%s %s %s %s
compiler info: 
libc info: 
SHELL
$SHELL (typically, interactive shell): %s
<unset>
clang: %s
13.1.6 (clang-1316.0.21.1)
no compiler information available
no libc information available
pre-commit
pre-merge-commit
prepare-commit-msg
commit-msg
post-commit
pre-rebase
post-checkout
post-merge
pre-push
pre-receive
post-receive
post-update
push-to-checkout
pre-auto-gc
sendemail-validate
fsmonitor-watchman
p4-pre-submit
post-index-change
not run from a git repository - no hooks to show
be verbose; must be placed before a subcommand
create
verify
list-heads
unbundle
Unknown subcommand: %s
git bundle create [<options>] <file> <git-rev-list args>
git bundle verify [<options>] <file>
git bundle list-heads <file> [<refname>...]
git bundle unbundle <file> [<refname>...]
do not show progress meter
show progress meter
all-progress
show progress meter during object writing phase
all-progress-implied
similar to --all-progress when progress meter is shown
specify bundle format version
--quiet
--progress
--all-progress
--all-progress-implied
Need a repository to create a bundle.
do not show bundle details
%s is okay
Need a repository to unbundle.
<type> can be one of: blob, tree, commit, tag
show object type
show object size
exit with zero when there's no error
pretty-print object's content
textconv
for blob objects, run textconv on object's content
filters
for blob objects, run filters on object's content
blob
use a specific path for --textconv/--filters
allow-unknown-type
allow -s and -t to work with broken/corrupt objects
buffer
buffer --batch output
batch
show info and content of objects fed from the standard input
batch-check
show info about objects fed from the standard input
follow-symlinks
follow in-tree symlinks (used with --batch or --batch-check)
batch-all-objects
show all objects with --batch or --batch-check
unordered
do not order --batch-all-objects output
--batch-all-objects cannot be combined with --textconv nor with --filters
--path=<path> needs --textconv or --filters
--path=<path> incompatible with --batch
git cat-file --allow-unknown-type: use with -s or -t
builtin/cat-file.c
only one batch option may be specified
git cat-file (-t [--allow-unknown-type] | -s [--allow-unknown-type] | -e | -p | <type> | --textconv | --filters) [--path=<path>] <object>
git cat-file (--batch[=<format>] | --batch-check[=<format>]) [--follow-symlinks] [--textconv | --filters]
%(objectname) %(objecttype) %(objectsize)
This repository uses promisor remotes. Some objects may not be loaded.
format element '%s' does not end in ')'
objectname
objecttype
objectsize
objectsize:disk
rest
deltabase
unknown format element: %.*s
%s missing
unable to write to stdout
print_object_or_die
cat-file.c
data->info.typep
missing path for '%s'
could not convert '%s' %s
invalid cmdmode: %c
object %s disappeared
object %s changed type!?
object %s changed size!?
cannot read object %s '%s'
unable to stream %s to stdout
%s ambiguous
dangling %ju
loop %ju
notdir %ju
unknown get_sha1_with_context result %d
symlink %ju
Not a valid object name %s
git cat-file: could not get object info
git cat-file --filters %s: <object> must be <sha1:path>
git cat-file --textconv %s: <object> must be <sha1:path>
Cannot read object %s
object 
%s not a valid tag
git cat-file: unknown option: %s
git cat-file %s: bad file
invalid cache
Attributes and --all both specified
No attribute specified
Can't specify files with --stdin
No file specified
%s: not a valid attribute name
attribute to stdout
report all attributes set on file
cached
use .gitattributes only from the index
stdin
read file names from stdin
terminate input and output records by a NUL character
git check-attr [-a | --all | <attr>...] [--] <pathname>...
git check-attr --stdin [-z] [-a | --all | <attr>...]
line is badly quoted
unset
unspecified
%s%c%s%c%s%c
: %s: %s
cannot specify pathnames with --stdin
-z only makes sense with --stdin
no path specified
--quiet is only valid with a single pathname
cannot have both --quiet and --verbose
--non-matching is only valid with --verbose
ignore to stdout
suppress progress reporting
non-matching
show non-matching input paths
no-index
ignore index when checking
git check-ignore [<options>] <pathname>...
git check-ignore [<options>] --stdin
check-ignore to stdout
no pathspec given.
:%d:%s%s%s
%s%c
%s%c%d%c%s%s%s%c%s%c
%c%c%c%s%c
no contacts specified
also read contacts from stdin
git check-mailmap [<options>] <contact>...
unable to parse contact: %s
%.*s 
<%.*s>
--branch
--normalize
--print
--allow-onelevel
--no-allow-onelevel
--refspec-pattern
'%s' is not a valid branch name
prefix
string
when creating files, prepend <string>
git checkout--worker [<options>]
builtin/checkout--worker.c
packet_read() returned negative value
checkout worker received too short item (got %dB, exp %dB)
checkout worker received corrupted item
check out all files in the index
force overwrite of existing files
no warning for existing files and files not in index
no-create
don't checkout new files
index
update stat information in the index file
paths are separated with NUL character
read list of paths from the standard input
temp
write the content to temporary files
(1|2|3|all)
copy out the files from named stage
git checkout-index: don't mix '--all' and explicit filenames
git checkout-index: don't mix '--stdin' and explicit filenames
git checkout-index: don't mix '--all' and '--stdin'
builtin/checkout-index.c
stage should be between 1 and 3 or all
git checkout-index [<options>] [--] [<file>...]
git checkout-index: %s 
is not in the cache
does not exist at stage %d
is unmerged
create and checkout a new branch
create/reset and checkout a branch
create reflog for new branch
guess
second guess 'git checkout <no-such-branch>' (default)
overlay
use overlay mode (default)
create and switch to a new branch
force-create
create/reset and switch to a branch
second guess 'git switch <no-such-branch>'
discard-changes
throw away local modifications
source
<tree-ish>
which tree-ish to checkout from
staged
restore the index
restore the working tree (default)
ignore-unmerged
ignore unmerged entries
use overlay mode
--ignore-unmerged
recurse-submodules
control recursive updating of submodules
perform a 3-way merge with the new branch
conflict
conflict style (merge or diff3)
detach
detach HEAD at named commit
set upstream info for new branch
force checkout (throw away local modifications)
orphan
new-branch
new unparented branch
overwrite-ignore
update ignored files (default)
ignore-other-worktrees
do not check if another worktree is holding the given ref
ours
checkout our version for unmerged files
theirs
checkout their version for unmerged files
ignore-skip-worktree-bits
do not limit pathspecs to sparse entries only
builtin/checkout.c
make up your mind, you need to take _something_
merge.conflictstyle
--force
-%c, -%c and --orphan are mutually exclusive
-p and --overlay are mutually exclusive
--track needs a branch name
refs/
missing branch name; try -%c
could not resolve %s
reference is not a tree: %s
invalid path specification
'%s' is not a commit and a branch '%s' cannot be created from it
git checkout: --detach does not take a path argument '%s'
--pathspec-from-file is incompatible with --detach
--pathspec-from-file is incompatible with --patch
git checkout: --ours/--theirs, --force and --merge are incompatible when
checking out of the index.
you must specify path(s) to restore
diff.ignoresubmodules
checkout.guess
submodule.
only one reference expected
only one reference expected, %d given.
@{-1}
invalid reference: %s
'%s' could be both a local file and a tracking branch.
Please use -- (and optionally --no-guess) to disambiguate
If you meant to check out a remote tracking branch on, e.g. 'origin',
you can do so by fully qualifying the name with the --track option:
    git checkout --track origin/<name>
If you'd like to always have checkouts of an ambiguous <name> prefer
one remote, e.g. the 'origin' remote, consider setting
checkout.defaultRemote=origin in your config.
'%s' matched multiple (%d) remote tracking branches
'%s' cannot be used with updating paths
--track
--detach
'%s' cannot be used with %s
--merge
Cannot update paths and switch to branch '%s' at the same time.
neither '%s' or '%s' is specified
--staged
--worktree
'%s' must be used when '%s' is not specified
--source
'%s' or '%s' cannot be used with %s
--ours
--theirs
--conflict
either flag must have been set, worktree=%d, index=%d
path '%s' is unmerged
path '%s' does not have our version
path '%s' does not have their version
path '%s' does not have all necessary versions
Recreated %d merge conflict
Recreated %d merge conflicts
Updated %d path from %s
Updated %d paths from %s
Updated %d path from the index
Updated %d paths from the index
path '%s' does not have necessary versions
merge.renormalize
base
path '%s': cannot merge
Unable to add merge result for '%s'
make_cache_entry failed for path '%s'
'%s' cannot be used with switching branches
--[no]-overlay
--ours/--theirs
'%s' cannot be used with '%s'
--discard-changes
-b/-B/--orphan
--orphan
'%s' cannot take <start-point>
Cannot switch branch to a non-commit '%s'
missing branch or commit argument
refs/tags/
a branch is expected, got tag '%s'
a branch is expected, got remote branch '%s'
a branch is expected, got '%s'
a branch is expected, got commit '%s'
cannot switch branch while merging
Consider "git merge --quit" or "git worktree add".
cannot switch branch in the middle of an am session
Consider "git am --quit" or "git worktree add".
cannot switch branch while rebasing
Consider "git rebase --quit" or "git worktree add".
cannot switch branch while cherry-picking
Consider "git cherry-pick --quit" or "git worktree add".
cannot switch branch while reverting
Consider "git revert --quit" or "git worktree add".
you are switching branch while bisecting
unborn
You are on a branch yet to be born
checkout -b
Switched to a new branch '%s'
'switch --orphan' should never accept a commit as starting point
(empty)
you need to resolve your current index first
cannot continue with staged changes in the following files:
internal error in revision walk
Previous HEAD position was
 ... and %d more.
Warning: you are leaving %d commit behind, not connected to
any of your branches:
Warning: you are leaving %d commits behind, not connected to
any of your branches:
If you want to keep it by creating a new branch, this may be a good time
to do so with:
 git branch <new-branch-name> %s
If you want to keep them by creating a new branch, this may be a good time
to do so with:
 git branch <new-branch-name> %s
%s %s... %s
%s %s %s
Can not do reflog for '%s': %s
checkout: moving from %s to %s
(invalid)
HEAD is now at
unable to update HEAD
Reset branch '%s'
Already on '%s'
Switched to and reset branch '%s'
Switched to branch '%s'
git checkout [<options>] <branch>
git checkout [<options>] [<branch>] -- <file>...
git switch [<options>] [<branch>]
git restore [<options>] [--source=<branch>] <file>...
do not print names of files removed
interactive cleaning
remove whole directories
pattern
add <pattern> to ignore rules
remove ignored files, too
remove only ignored files
clean.requireForce set to true and neither -i, -n, nor -f given; refusing to clean
clean.requireForce defaults to true and neither -i, -n, nor -f given; refusing to clean
-x and -X cannot be used together
--exclude option
Cannot lstat '%s'
prompt
header
error
builtin/clean.c
color.interactive
color.interactive.
clean.requireforce
git clean [-d] [-f] [-i] [-n] [-q] [-e <pattern>] [-x | -X] [--] <paths>...
filter by pattern
select by numbers
ask each
*** Commands ***
What now
Would remove the following item:
Would remove the following items:
No more files to clean, exiting.
Input ignore patterns>> 
manual exclude
WARNING: Cannot find items matched by: %s
Select items to delete
Remove %s [y/N]? 
clean               - start cleaning
filter by pattern   - exclude items from deletion
select by numbers   - select items to be deleted by numbers
ask each            - confirm each deletion (like "rm -i")
quit                - stop cleaning
help                - this screen
?                   - help for prompt selection
%s%s%s
%s%s%s%s
Bad type of menu_stuff when print menu
%s%2d: 
%s%2d: %s
Prompt help:
1          - select a numbered item
foo        - select item based on unique prefix
           - (empty) select nothing
Prompt help:
1          - select a single item
3-5        - select a range of items
2-3,6-9    - select multiple ranges
foo        - select item based on unique prefix
-...       - unselect specified items
*          - choose all items
           - (empty) finish selecting
Huh (%s)?
Bad type of menu_stuff when parse choice
size_t overflow: %ju + %ju
Would skip repository %s
Skipping repository %s
could not lstat %s
Would remove %s
Removing %s
failed to remove %s
Bye.
Too many arguments.
You must specify a repository to clone.
--bare and --origin %s options are incompatible.
--bare and --separate-git-dir are incompatible.
repository '%s' does not exist
depth %s is not a positive number
destination path '%s' already exists and is not an empty directory.
repository path '%s' already exists and is not an empty directory.
clone: from %s
working tree '%s' already exists.
%s/.git
could not create leading directories of '%s'
could not create work tree dir '%s'
Cloning into bare repository '%s'...
Cloning into '%s'...
submodule.active=%s
clone --recursive is not compatible with both --reference and --reference-if-able
submodule.alternateLocation=superproject
submodule.alternateErrorStrategy=die
submodule.alternateErrorStrategy=info
origin
'%s' is not a valid remote name
core.bare
true
refs/remotes/%s/
remote.%s.url
remote.%s.tagOpt
--no-tags
+%s*:%s*
--depth is ignored in local clones; use file:// instead.
--shallow-since is ignored in local clones; use file:// instead.
--shallow-exclude is ignored in local clones; use file:// instead.
--filter is ignored in local clones; use file:// instead.
%s/shallow
source repository is shallow, reject to clone.
source repository is shallow, ignoring --local
--local is ignored
rejectshallow
depth
deepen-since
deepen-not
followtags
uploadpack
filter
from-promisor
Remote branch %s not found in upstream %s
You appear to have cloned an empty repository.
clone.defaultremotename
clone.rejectshallow
be more verbose
be more quiet
reject-shallow
don't clone shallow repository
no-checkout
don't create a checkout
bare
create a bare repository
naked
mirror
create a mirror repository (implies bare)
to clone from a local repository
no-hardlinks
don't use local hardlinks, always copy
shared
setup as shared repository
pathspec
initialize submodules in the clone
recursive
jobs
number of submodules cloned in parallel
template
template-directory
directory from which templates will be used
reference
reference repository
reference-if-able
dissociate
use --reference only while cloning
name
use <name> instead of 'origin' to track upstream
checkout <branch> instead of the remote's HEAD
path to git-upload-pack on the remote
create a shallow clone of that depth
shallow-since
time
create a shallow clone since a specific time
shallow-exclude
revision
deepen history of shallow clone, excluding rev
single-branch
clone only one branch, HEAD or --branch
no-tags
don't clone any tags, and make later fetches not to follow them
shallow-submodules
any cloned submodules will be shallow
separate-git-dir
gitdir
separate git dir from working tree
key=value
set config inside the new repository
server-option
server-specific
option to transmit
ipv4
use IPv4 addresses only
ipv6
use IPv6 addresses only
args
object filtering
remote-submodules
any cloned submodules will use their remote-tracking branch
sparse
initialize sparse-checkout file to include only files at root
git clone [<options>] [--] <repo> [<dir>]
/.git
.git/.git
.git
.bundle
gitdir: 
No directory name could be guessed.
Please specify a directory on the command line
%.*s.git
unable to write parameters to config file
info: Could not add alternate for '%s': %s
%s/objects
failed to initialize sparse-checkout
git-upload-pack
Could not find remote branch %s to clone.
+%s:%s
+%s:%s%s
builtin/clone.c
remote HEAD points at non-head?
remote.%s.fetch
remote.%s.mirror
/objects
done.
failed to start iterator over '%s'
info/alternates
failed to unlink '%s'
failed to create link '%s'
failed to copy file to '%s'
failed to iterate over '%s'
failed to stat '%s'
%s exists and is not a directory
%s/objects/%s
skipping invalid relative alternate: %s/%s
remote did not send all necessary objects
unable to update %s
objects/info/alternates
cannot repack to clean up
cannot unlink temporary alternates file
remote HEAD refers to nonexistent ref, unable to checkout.
unable to checkout working tree
submodule
--require-init
--recursive
--depth=1
--jobs=%d
--remote
--no-fetch
--single-branch
--no-single-branch
lookup config vars
mode
layout to use
raw-mode
width
maximum width
indent
padding space on left border
padding space on right border
padding
padding space between columns
--command=
--command must be the first argument
git column [<options>]
object-dir
the object directory to store the graph
write
git commit-graph verify [--object-dir <objdir>] [--shallow] [--[no-]progress]
git commit-graph write [--object-dir <objdir>] [--append] [--split[=<strategy>]] [--reachable|--stdin-packs|--stdin-commits] [--changed-paths] [--[no-]max-new-filters <n>] [--[no-]progress] <split options>
shallow
if the commit-graph is split, only verify the tip file
builtin/commit-graph.c
Could not open commit-graph '%s'
could not find object directory matching %s
reachable
start walk at all refs
stdin-packs
scan pack-indexes listed by stdin for commits
stdin-commits
start walk at commits listed by stdin
append
include all commits already in the commit-graph file
changed-paths
enable computation for changed paths
split
allow writing an incremental commit-graph file
max-commits
maximum number of commits in a non-base split commit-graph
size-multiple
maximum ratio between two levels of a split commit-graph
expire-time
expiry-date
only expire files older than a given date-time
max-new-filters
maximum number of changed-path Bloom filters to compute
use at most one of --reachable, --stdin-commits, or --stdin-packs
GIT_TEST_COMMIT_GRAPH_CHANGED_PATHS
Collecting commits from input
no-merge
unrecognized --split argument, %s
%s expects a numerical value
commitgraph.maxnewfilters
unexpected non-hex object ID: %s
invalid object: %s
parent
id of a parent commit object
message
commit message
read commit log message from file
GPG sign commit
must give exactly one tree
not a valid object name %s
git commit-tree: failed to read
builtin/commit-tree.c
option callback expects an argument
duplicate parent %s ignored
git commit-tree: failed to open '%s'
git commit-tree: failed to read '%s'
git commit-tree: failed to close '%s'
git commit-tree [(-p <parent>)...] [-S[<keyid>]] [(-m <message>)...] [(-F <file>)...] <tree>
added
short
show status concisely
show branch information
show-stash
show stash information
ahead-behind
compute full ahead/behind values
machine-readable output
long
show status in long format (default)
null
terminate entries with NUL
untracked-files
show untracked files, optional modes: all, normal, no. (Default: all)
ignored
show ignored files, optional modes: traditional, matching, no. (Default: traditional)
traditional
ignore-submodules
ignore changes to submodules, optional when: all, dirty, untracked. (Default: all)
list untracked files in columns
no-renames
do not detect renames
find-renames
detect renames, optionally set similarity index
Unsupported combination of ignored and untracked-files arguments
suppress summary after successful commit
show diff in commit message template
Commit message options
read message from file
override author for commit
date
override date for commit
reedit-message
reuse and edit message from specified commit
reuse-message
reuse message from specified commit
fixup
[(amend|reword):]commit
use autosquash formatted message to fixup or amend/reword specified commit
squash
use autosquash formatted message to squash specified commit
reset-author
the commit is authored by me now (used with -C/-c/--amend)
trailer
add custom trailer(s)
add a Signed-off-by trailer
use specified template file
force edit of commit
cleanup
how to strip spaces and #comments from message
include status in commit message template
Commit contents options
commit all changed files
add specified files to index for commit
interactively add files
interactively add changes
only
commit only specified files
no-verify
bypass pre-commit and commit-msg hooks
show what would be committed
amend
amend previous commit
no-post-rewrite
bypass post-rewrite hook
allow-empty
ok to record an empty change
allow-empty-message
ok to record a change with an empty message
could not parse HEAD commit
commit (initial)
commit (amend)
commit (merge)
Corrupt MERGE_HEAD file (%s)
could not read MERGE_MODE
no-ff
commit (cherry-pick)
commit (rebase)
could not read commit message: %s
Aborting commit due to empty commit message.
builtin/commit.c
Aborting commit; you did not edit the message.
amend! 
Aborting commit due to empty commit message body.
gpgsig
gpgsig-sha256
repository has been updated, but unable to write
new_index file. Check that disk is not full and quota is
not exceeded, and then "git restore --staged :/" to recover.
updated
changed
untracked
noBranch
unmerged
localBranch
remoteBranch
unsupported porcelain version '%s'
git status [<options>] [--] <pathspec>...
status.submodulesummary
status.short
status.branch
status.aheadbehind
status.showstash
status.color
color.status
status.displaycommentprefix
status.color.
color.status.
status.relativepaths
status.showuntrackedfiles
normal
Invalid untracked files mode '%s'
diff.renamelimit
status.renamelimit
diff.renames
status.renames
--long and -z are incompatible
matching
Invalid ignored mode '%s'
--trailer
git commit [<options>] [--] <pathspec>...
commit.template
commit.status
commit.cleanup
commit.verbose
Using both --reset-author and --author does not make sense
You have nothing to amend.
You are in the middle of a merge -- cannot amend.
You are in the middle of a cherry-pick -- cannot amend.
You are in the middle of a rebase -- cannot amend.
Options --squash and --fixup cannot be used together
Only one of -c/-C/-F/--fixup can be used.
Option -m cannot be combined with -c/-C/-F.
--reset-author can be used only with -C, -c or --amend.
CHERRY_PICK_HEAD
Only one of --include/--only/--all/--interactive/--patch can be used.
reword
unknown option: --fixup=%s:%s
paths '%s ...' with -a does not make sense
--author=%s
--all
revision walk setup failed
%aN <%aE>
--author '%s' is not 'Name <email>' and matches no existing author
could not lookup commit %s
You are in the middle of a merge -- cannot reword.
You are in the middle of a cherry-pick -- cannot reword.
cannot combine reword option of --fixup with path '%s'
reword option of --fixup is mutually exclusive with --patch/--interactive/--all/--include/--only
HEAD^1
--pathspec-from-file with -a does not make sense
No paths with --include/--only does not make sense.
unable to create temporary index
GIT_INDEX_FILE
interactive add failed
unable to update temporary index
Failed to update main cache tree
unable to write new_index file
cannot do a partial commit during a merge.
cannot do a partial commit during a cherry-pick.
cannot do a partial commit during a rebase.
cannot read the index
next-index-%ju
unable to write temporary index file
failed to unpack HEAD tree object
squash! 
squash! %s
(reading log message from standard input)
could not read log from standard input
could not read log file '%s'
%s! %%s
cannot combine -m with --fixup:%s
could not read SQUASH_MSG
could not read MERGE_MSG
could not open '%s'
could not write commit template
It looks like you may be committing a merge.
If this is not correct, please run
git update-ref -d MERGE_HEAD
and try again.
It looks like you may be committing a cherry-pick.
If this is not correct, please run
git update-ref -d CHERRY_PICK_HEAD
and try again.
Please enter the commit message for your changes. Lines starting
with '%c' will be ignored, and an empty message aborts the commit.
Please enter the commit message for your changes. Lines starting
with '%c' will be kept; you may remove them yourself if you want to.
An empty message aborts the commit.
%sAuthor:    %.*s <%.*s>
%sDate:      %s
%sCommitter: %.*s <%.*s>
Cannot read index
--in-place
unable to pass trailers to --trailers
Error building trees
GIT_INDEX_FILE=%s
Please supply the message using either -m or -F option.
GIT_AUTHOR_NAME
GIT_AUTHOR_EMAIL
GIT_AUTHOR_DATE
commit '%s' lacks author header
commit '%s' has malformed author line
malformed --author parameter
invalid date format: %s
amend!
#;@!$%^&|:
unable to select a comment character that is not used
in the current commit message
unable to parse our own ident: %s
GIT_CONFIG
only one config file at a time
--local can only be used inside a git repository
--blob can only be used inside a git repository
--worktree can only be used inside a git repository
$HOME not set
config.worktree
--worktree cannot be used with multiple working trees unless the config
extension worktreeConfig is enabled. Please read "CONFIGURATION FILE"
section in "git help worktree" for details
--get-color and variable type are incoherent
only one action at a time
--name-only is only applicable to --list or --get-regexp
--show-origin is only applicable to --get, --get-all, --get-regexp, and --list
--default is only applicable to --get
--fixed-value only applies with 'value-pattern'
unable to read config file '%s'
error processing config file(s)
not in a git directory
editing stdin is not supported
editing blobs is not supported
cannot create configuration file %s
cannot overwrite multiple values with a single value
       Use a regexp, --add or --replace-all to change %s.
no such section: %s
command line
Config file location
global
use global config file
system
use system config file
use repository config file
use per-worktree config file
use given config file
blob-id
read config from given blob object
Action
get value: name [value-pattern]
get-all
get all values: key [value-pattern]
get-regexp
get values for regexp: name-regex [value-pattern]
get-urlmatch
get value specific for the URL: section[.var] URL
replace-all
replace all matching variables: name value [value-pattern]
add a new variable: name value
remove a variable: name [value-pattern]
unset-all
remove all matches: name [value-pattern]
rename-section
rename section: old-name new-name
remove-section
remove a section: name
list all
fixed-value
use string equality when comparing values to 'value-pattern'
open an editor
get-color
find the color configured: slot [default]
get-colorbool
find the color setting: slot [stdout-is-tty]
Type
type
value is given this type
bool
value is "true" or "false"
value is decimal number
bool-or-int
value is --bool or --int
bool-or-str
value is --bool or string
value is a path (file or directory name)
value is an expiry date
Other
terminate values with NUL byte
name-only
show variable names only
includes
respect include directives on lookup
show-origin
show origin of config (file, standard input, blob, command line)
show-scope
show scope of config (worktree, local, global, system, command)
default
value
with --get, use default value when missing entry
unrecognized --type argument, %s
only one type at a time
git config [<options>]
wrong number of arguments, should be %d
wrong number of arguments, should be from %d to %d
%s%c%s%c
# This is Git's per-user configuration file.
[user]
# Please adapt and uncomment the following lines:
name = %s
email = %s
writing to stdin is not supported
writing config blobs is not supported
%lld
false
cannot parse color '%s'
builtin/config.c
cannot normalize type %d
invalid key pattern: %s
failed to format default config value: %s
unable to parse default color value
color.diff
diff.color
color.ui
human-readable
print sizes in human readable format
count: %lu
size: %s
in-pack: %lu
packs: %lu
size-pack: %s
prune-packable: %lu
garbage: %lu
size-garbage: %s
%lu kilobytes
%lu objects, %s
git count-objects [-v] [-H | --human-readable]
%s: %s
no corresponding .idx or .pack
garbage found
no corresponding .idx
no corresponding .pack
alternate: 
git-credential-cache--daemon [opts] <socket_path>
debug
print debugging messages to stderr
credentialcache.ignoresighup
socket directory must be an absolute path
unable to create directories for '%s'
unable to mkdir '%s'
unable to bind to '%s'
/dev/null
unable to point stderr to /dev/null
poll failed
accept failed
dup failed
username=%s
password=%s
exit
builtin/credential-cache--daemon.c
erase
store
cache client didn't specify a timeout
cache client gave us a partial credential
cache client sent unknown action: %s
action=
client sent bogus action line: %s
timeout=
client sent bogus timeout line: %s
git credential-cache [<options>] <action>
timeout
number of seconds to cache credentials
socket
path of cache-daemon socket
unable to find a suitable socket path; use --socket
~/.git-credential-cache
%s/socket
credential/socket
action=%s
timeout=%d
unable to relay credential
unable to connect to cache daemon
unable to write to cache daemon
read error from cache daemon
unable to start cache daemon
unable to read result code from cache daemon
cache daemon did not start: %.*s
git credential-store [<options>] <action>
fetch and store credentials in <path>
~/.git-credentials
credentials
unable to set up default path; use --file
unable to read credential
unable to open %s
credentialstore.locktimeoutms
unable to get credential storage lock in %d ms
unable to write credential store
%s://
unable to read credential from stdin
fill
approve
find the tag that comes after the commit
debug search strategy on stderr
use any ref
tags
use any tag, even unannotated
always use long format
first-parent
only follow first parent
exact-match
only output exact matches
candidates
consider <n> most recent tags (default: 10)
match
only consider tags matching <pattern>
do not consider tags matching <pattern>
show abbreviated commit object as fallback
dirty
mark
append <mark> on dirty working tree (default: "-dirty")
-dirty
append <mark> on broken working tree (default: "-broken")
-broken
--long is incompatible with --abbrev=0
--peel-tag
--name-only
--no-undefined
--always
--tags
--refs=refs/tags/%s
--exclude=refs/tags/%s
No names found, cannot describe anything.
builtin/describe.c
malformed internal diff-index command line
--dirty is incompatible with commit-ishes
--broken is incompatible with commit-ishes
git describe [<options>] [<commit-ish>...]
git describe [<options>] --dirty
./hashmap.h
hashmap_get_size: size not set
describe %s
%s is neither a commit nor blob
no tag exactly matches '%s'
No exact match on refs or tags, searching to describe
finished search at %s
No annotated tags can describe '%s'.
However, there were unannotated tags: try --tags.
No tags can describe '%s'.
Try --always, or create some tags.
 %-*s %8d %s
traversed %lu commits
more than %i tags found; listed %i most recent
gave up search at %s
annotated tag %s not available
tag '%s' is externally known as '%s'
tags/
-%d-g%s
head
lightweight
annotated
internal: The first arg is not parsed
--objects
--in-commit-order
setup_revisions could not handle all args?
--base
read_cache_preload
--merge-base
read_cache
--stdin
--stdin and --merge-base are mutually exclusive
--merge-base only works with two commits
Object %s is a %s, not a commit or tree
Need exactly two trees, separated by a space
%s %s
--no-index
builtin/diff.c
Not a git repository
invalid object '%s' given.
more than two blobs given: '%s'
unhandled object '%s' given.
%s...%s: multiple merge bases, using %s
%s...%s: no merge base
invalid option: %s
'%s': not a regular file or symlink
use `diff.guitool` instead of `diff.tool`
dir-diff
perform a full-directory diff
no-prompt
do not prompt before launching a diff tool
symlinks
use symlinks in dir-diff mode
tool
use the specified diff tool
tool-help
print a list of diff tools that may be used with `--tool`
trust-exit-code
make 'git-difftool' exit when an invoked diff tool returns a non - zero exit code
extcmd
specify a custom command for viewing diffs
passed to `diff`
difftool requires worktree or --no-index
--dir-diff is incompatible with --no-index
--gui, --tool and --extcmd are mutually exclusive
GIT_MERGETOOL_GUI
GIT_DIFF_TOOL
no <tool> given for --tool=<tool>
GIT_DIFFTOOL_EXTCMD
no <cmd> given for --extcmd=<cmd>
GIT_DIFFTOOL_TRUST_EXIT_CODE
difftool.trustexitcode
git difftool [<options>] [<commit> [<commit>]] [--] [<path>...]
mergetool
--tool-help=diff
difftool--helper
TMPDIR
%s/git-difftool.XXXXXX
/tmp
could not create '%s'
%s/left/
%s/right/
--raw
--no-abbrev
could not obtain raw diff
combined diff formats('-c' and '--cc') are not supported in
directory diff mode('-d' and '--dir-diff').
Subproject commit %s
could not write '%s'
could not create directory for '%s'
could not symlink '%s' to '%s'
could not copy '%s' to '%s'
error occurred running diff --raw
GIT_DIFFTOOL_DIRDIFF
%s/wtindex
could not write %s
both files modified: '%s' and '%s'.
working tree file has been left.
temporary files exist in '%s'.
you may want to cleanup or recover these.
builtin/difftool.c
expected ':', got '%c'
expected ' ', got '%c'
expected object ID, got '%s'
missing status
unexpected trailer: '%s'
could not read symlink %s
could not read symlink file %s
could not read object %s for symlink %s
--really-refresh
--unmerged
diff-files did not exit properly
failed: %d
GIT_PAGER=
GIT_EXTERNAL_DIFF=git-difftool--helper
GIT_DIFFTOOL_PROMPT=true
GIT_DIFFTOOL_NO_PROMPT=true
default for git_env_*(...) to fall back on
exit-code
be quiet only use git_env_*() value as exit code
option `--default' expects a boolean value with `--type=bool`, not `%s`
option `--default' expects an unsigned long value with `--type=ulong`, not `%s`
builtin/env--helper.c
unknown <type> value
ulong
git env--helper --type=[bool|ulong] <options> <env-var>
show progress after <n> objects
signed-tags
select handling of signed tags
tag-of-filtered-object
select handling of tags that tag filtered objects
reencode
select handling of commit messages in an alternate encoding
export-marks
dump marks to this file
import-marks
import marks from this file
import-marks-if-exists
import marks from this file if it exists
fake-missing-tagger
fake a tagger when tags lack one
full-tree
output full tree for each commit
use-done-feature
use the done feature to terminate the stream
no-data
skip output of blob data
refspec
apply refspec to exported refs
anonymize
anonymize output
anonymize-map
from:to
convert <from> to <to> in anonymized output
reference-excluded-parents
reference parents which are not in fast-export stream by object id
show-original-ids
show original object ids of blobs/commits
mark-tags
label tags with mark ids
--anonymize-map without --anonymize does not make sense
Cannot pass both --import-marks and --import-marks-if-exists
verbatim
ignore
warn-strip
Unknown signed-tags mode: %s
drop
rewrite
Unknown tag-of-filtered mode: %s
Unknown reencoding mode: %s
builtin/fast-export.c
--anonymize-map token cannot be empty
git fast-export [rev-list-opts]
corrupt mark line: %s
object not found: %s
not a commit? can't happen: %s
Object %s already has a mark
%s: Unexpected object of type %s, skipping.
Tag points to object of unexpected type %s, skipping.
Tag %s points nowhere?
could not read blob %s
oid mismatch in blob %s
Could not read blob %s
blob
mark :%u
original-oid %s
data %ju
could not write blob '%s'
anonymous blob %d
progress %d objects
M %06o %s 
M %06o :%d 
Unexpected comparison status '%c' for %s, %s
"%s"
path%d
could not find author in commit %s
could not find committer in commit %s
UTF-8
Encountered commit-specific encoding %s in commit %s; use --reencode=[yes|no] to handle it
reset %s
commit %s
mark :%u
%.*s
%.*s
encoding %s
data %u
from 
merge 
encoding 
ref%d
malformed line fed to anonymize_ident_line: %.*s
Malformed Ident <malformed@example.com> 0 -0000
User %d <user%d@example.com>
subject %d
body
reset %s
from %s
reset %s
from :%d
Omitting tag %s,
since tags of trees (or tags of tags of trees, etc.) are not supported.
could not read tag %s
tagger 
tagger Unspecified Tagger <unspecified-tagger> 0 +0000
-----BEGIN PGP SIGNATURE-----
encountered signed tag %s; use --signed-tags=<mode> to handle it
exporting signed tag %s
stripping signature from tag %s
tag %s tags unexported object; use --tag-of-filtered-object=<mode> to handle it
Error: Cannot export nested tags unless --mark-tags is specified.
tag %s
mark :%u
from :%d
from %s
%.*s%sdata %d
%.*s
tag message %d
Unable to open marks file %s for writing.
:%u %s
Unable to write marks file %s.
done
feature done
deleteall
--allow-unsafe-features
commit 
tag 
reset 
cat-blob 
get-mark 
checkpoint
progress 
feature 
option git 
option 
Unsupported command: %s
stream ends early
%s statistics:
---------------------------------------------------------------------
Alloc'd objects: %10ju
Total objects:   %10ju (%10ju duplicates                  )
      blobs  :   %10ju (%10ju duplicates %10ju deltas of %10ju attempts)
      trees  :   %10ju (%10ju duplicates %10ju deltas of %10ju attempts)
      commits:   %10ju (%10ju duplicates %10ju deltas of %10ju attempts)
      tags   :   %10ju (%10ju duplicates %10ju deltas of %10ju attempts)
Total branches:  %10lu (%10lu loads     )
      marks:     %10ju (%10ju unique    )
      atoms:     %10u
Memory total:    %10ju KiB
       pools:    %10lu KiB
     objects:    %10ju KiB
pack.depth
pack.indexversion
bad pack.indexversion=%u
pack.packsizelimit
fastimport.unpacklimit
transfer.unpacklimit
pack/tmp_pack_XXXXXX
fatal: 
builtin/fast-import.c
fast_import_crash_%ju
can't write crash report %s
fast-import: dumping crash report to %s
fast-import crash report:
    fast-import process: %ju
    parent process     : %ju
    at %s
Most Recent Commands Before Crash
---------------------------------
Active Branch LRU
-----------------
    active_branches = %lu cur, %lu max
  pos  clock name
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  %2lu) %6ju %s
Inactive Branches
Annotated Tags
--------------
Marks
-----
  exported to %s
-------------------
END OF CRASH REPORT
  status      :
 active
 loaded
 dirty
  tip commit  : %s
  old tree    : %s
  cur tree    : %s
  commit clock: %ju
  last pack   : 
:%ju %s
mark :
original-oid 
data 
Expected 'data n' command, found: %s
EOF in data (terminator '%s' not found)
EOF in data (%lu bytes remaining)
%s %lu
blob %ju
EOF in data (%ju bytes remaining)
unexpected deflate failure: %d
cannot truncate pack to skip duplicate
author 
committer 
Expected committer but didn't get one
encoding 
tree %s
parent %s
author %s
committer %s
Invalid attempt to create duplicate branch: %s
Branch name doesn't conform to GIT standards: %s
Missing < in ident string: %s
Missing space before < in ident string: %s
Missing > in ident string: %s
Missing space after > in ident string: %s
Invalid raw date "%s" in ident: %s
Invalid rfc2822 date "%s" in ident: %s
Date in ident must be 'now': %s
Can't create a branch from itself: %s
Mark :%ju not a commit
Invalid ref name or SHA1 expression: %s
Garbage after mark: %s
parse_mark_ref
fast-import.c
*p == ':'
No value after ':' in mark: %s
mark :%ju not declared
Not a valid commit: %s
tree 
The commit %s is corrupt
Not a tree: %s
Can't load tree %s
Corrupt mode in %s
Corrupt mode: %s
inline 
Invalid dataref: %s
Missing space after SHA1: %s
Garbage after path in: %s
Git links cannot be specified 'inline': %s
Not a commit (actually a %s): %s
Directories cannot be specified 'inline': %s
%s not found: %s
Tree
Blob
Not a %s (actually a %s): %s
Missing space after mark: %s
Root cannot be a non-directory
Empty path component found in input
Non-directories cannot have subtrees
Missing space after source: %s
Missing dest: %s
Garbage after dest in: %s
Path %s not in branch
Can't add a note on empty branch.
Not a blob (actually a %s): %s
Blob not found: %s
Too large fanout (%u)
Failed to remove path %s
%o %s%c
Expected from command, got %s
Can't tag an empty branch.
Not a valid object: %s
tagger 
object %s
type %s
tag %s
tagger %s
Not in a commit: %s
Invalid path: %s
Unknown mark: %s
Missing space after tree-ish: %s
Not a tree-ish: %s
Can't load object %s
Invalid SHA1 in tag: %s
Invalid SHA1 in commit: %s
missing 
%06o %s %s
Write to frontend failed
Garbage after SHA1: %s
Can't read object %s
Object %s is a %s but a blob was expected.
%s %s %ju
Not a mark: %s
Expected 'mark' command, got %s
Expected 'to' command, got %s
parse_alias
Got feature command '%s' after data command
This version of fast-import does not support feature %s.
date-format=
import-marks=
import-marks-if-exists=
export-marks=
rewrite-submodules-to=
rewrite-submodules-from=
get-mark
cat-blob
relative-marks
no-relative-marks
raw-permissive
rfc2822
unknown --date-format argument %s
feature '%s' forbidden in input without --allow-unsafe-features
Only one import-marks command allowed per stream
cannot read '%s'
info/fast-import/%s
Expected format name:filename for submodule rewrite option
Got option command '%s' after data command
This version of fast-import does not support option: %s
max-pack-size=
max-pack-size is now in bytes, assuming --max-pack-size=%lum
minimum max-pack-size is 1 MiB
big-file-threshold=
depth=
active-branches=
export-pack-edges=
stats
allow-unsafe-features
--depth
--depth cannot exceed %u
%s: argument must be a non-negative integer
--active-branches
unknown option %s
cat-blob-fd=
unknown option --%s
--cat-blob-fd
--cat-blob-fd cannot exceed %d
Missing from marks for submodule '%s'
Missing to marks for submodule '%s'
core git rejected index %s
Failed seeking to start of '%s'
cannot create keep file
failed to write keep file
pack
cannot store pack file
cannot store index file
internal consistency error creating the index
Branch %s is missing commits.
Not updating %s (new tip %s does not contain %s)
refs/tags/%s
unable to create leading directories of %s
Unable to write marks file %s
Unable to write marks file %s: %s
Unable to write file %s
--upload-pack=
--exec=
--keep
--thin
--include-tag
--diag-url
--depth=
--shallow-since=
--shallow-exclude=
--deepen-relative
--no-progress
--stateless-rpc
--lock-pack
--check-self-contained-and-connected
--cloning
--update-shallow
--from-promisor
--filter=
--no-filter
builtin/fetch-pack.c
unknown protocol version
lock %s
Lockfile created but not reported: %s
connectivity-ok
Negative depth in --deepen is not supported
--deepen and --depth are mutually exclusive
--depth and --unshallow cannot be used together
--unshallow on a complete repository does not make sense
fetch --all does not take a repository argument
fetch --all does not make sense with refspecs
No such remote or remote group: %s
Fetching a group and specifying refspecs does not make sense
must supply remote when using --negotiate-only
Protocol does not support --negotiate-only, exiting.
--filter can only be used with the remote configured in extensions.partialclone
--atomic can only be used when fetching from one remote
--stdin can only be used when fetching from one remote
fetch.prune
fetch.prunetags
fetch.showforcedupdates
submodule.recurse
submodule.fetchjobs
fetch.recursesubmodules
fetch.parallel
fetch.parallel cannot be negative
fetch from all remotes
set upstream for git pull/fetch
append to .git/FETCH_HEAD instead of overwriting
atomic
use atomic transaction to update references
path to upload pack on remote end
force overwrite of local reference
multiple
fetch from multiple remotes
fetch all tags and associated objects
do not fetch all tags (--no-tags)
number of submodules fetched in parallel
prefetch
modify the refspec to place all refs within refs/prefetch/
prune remote-tracking branches no longer on remote
prune-tags
prune local tags no longer on remote and clobber changed tags
on-demand
control recursive fetching of submodules
write-fetch-head
write fetched references to the FETCH_HEAD file
keep downloaded pack
update-head-ok
allow updating of HEAD ref
deepen history of shallow clone
deepen history of shallow repository based on time
deepen
unshallow
convert to a complete repository
submodule-prefix
prepend this to submodule path output
recurse-submodules-default
default for recursive fetching of submodules (lower priority than config files)
update-shallow
accept refs that update .git/shallow
refmap
specify fetch refmap
negotiation-tip
report that we have only objects reachable from this object
negotiate-only
do not fetch a packfile; instead, print ancestors of negotiation tips
auto-maintenance
run 'maintenance --auto' after fetching
auto-gc
show-forced-updates
check for forced-updates on all updated branches
write-commit-graph
write the commit-graph after fetching
accept refspecs from stdin
builtin/fetch.c
git fetch [<options>] [<repository> [<refspec>...]]
git fetch [<options>] <group>
git fetch --multiple [<options>] [(<repository> | <group>)...]
git fetch --all [<options>]
remotes.
deepen-relative
updateshallow
Ignoring --negotiation-tip because the protocol does not support it.
Option "%s" value "%s" is not valid for %s
Option "%s" is ignored for %s
%s is not a valid object
Ignoring --negotiation-tip=%s because it does not match any refs
refs/tags/*:refs/tags/*
You need to specify a tag name.
refs/tags/%s:refs/tags/%s
remote_refs
multiple branches detected, incompatible with --set-upstream
not setting upstream for a remote remote-tracking branch
not setting upstream for a remote tag
unknown branch type
no source branch found.
you need to specify exactly one branch with the --set-upstream option.
cannot open %s
--refmap option is only meaningful with command-line refspec(s).
Couldn't find remote ref HEAD
refs/prefetch/
Refusing to fetch into current branch %s of non-bare repository
   (%s will become dangling)
   (%s has become dangling)
foreign
fetch: prune
From %.*s
[deleted]
(none)
%c %-*s 
  (%s)
%-*s -> %s
%-*s -> *
fetch_refs
consume_refs
%s did not send all necessary objects
reject %s because shallow roots are not allowed to be updated
remote-tracking branch
'%s' of 
FETCH_HEAD
some local refs could not be updated; try running
 'git remote prune %s' to remove any old, conflicting branches
full
fetch.output
compact
configuration fetch.output contains invalid value %s
not-for-merge
object %s not found
[up to date]
[rejected]
can't fetch in current branch
updating tag
[tag update]
unable to update local ref
would clobber existing tag
storing tag
[new tag]
storing head
[new branch]
storing ref
[new ref]
fast-forward
forced-update
forced update
non-fast-forward
unseen remote ref?
--append
--no-auto-gc
--no-write-commit-graph
--end-of-options
parallel/fetch
Fetching %s
Could not fetch %s
could not fetch '%s' (exit code: %d)
--dry-run
--prune
--no-prune
--prune-tags
--no-prune-tags
--update-head-ok
--recurse-submodules
--recurse-submodules=on-demand
--ipv4
--ipv6
populate log with at most <n> entries from shortlog
summary
alias for --log (deprecated)
text
use <text> as start of message
file to read from
cannot open '%s'
could not read input file
git fmt-merge-msg [-m <message>] [--log[=<n>] | --no-log] [--file <file>]
shell
quote placeholders suitably for shells
perl
quote placeholders suitably for perl
python
quote placeholders suitably for python
quote placeholders suitably for Tcl
count
show only <n> matched refs
respect format colors
print only refs which points at the given object
print only refs that are merged
print only refs that are not merged
print only refs which contain the commit
print only refs which don't contain the commit
%(objectname) %(objecttype)
%(refname)
invalid --count argument: `%d'
more than one quoting style?
git for-each-ref [<options>] [<pattern>]
git for-each-ref [--points-at <object>]
git for-each-ref [--merged [<commit>]] [--no-merged [<commit>]]
git for-each-ref [--contains [<commit>]] [--no-contains [<commit>]]
config key storing a list of repository paths
missing --config=<config>
git for-each-repo --config=<config> <command-args>
Checking objects
%s: object missing
invalid parameter: expected sha1, got '%s'
core.commitgraph
--object-dir
core.multipackindex
unreachable
show unreachable objects
dangling
show dangling objects
report tags
report root nodes
cache
make index objects head nodes
reflogs
make reflogs head nodes (default)
also consider packs and alternate objects
connectivity-only
check only connectivity
strict
enable more strict checking
lost-found
write dangling objects in .git/lost-found
show progress
name-objects
show verbose names for reachable objects
git fsck [<options>] [<object>...]
broken link from %7s %s
unknown
wrong object type in link
broken link from %7s %s
              to %7s %s
error in %s %s: %s
warning in %s %s: %s
builtin/fsck.c
%d (FSCK_IGNORE?) should never trigger this callback
Checking object directory
Checking object directories
%s: object corrupt or missing: %s
read_loose_object streamed a non-blob
%s: object could not be parsed: %s
Checking %s %s
broken links
root %s
tagged %s %s (%s) in %s
tmp_obj_
bad sha1 file: %s
%s: object corrupt or missing
notice: No default references
%s: invalid sha1 pointer %s
%s: not a commit
Checking %s link
invalid %s
%s points to something strange (%s)
%s: detached HEAD points at nothing
notice: %s points to an unborn branch (%s)
Checking reflog %s->%s
%s@{%ju}
%s: invalid reflog entry %s
Checking cache tree
%s: invalid sha1 pointer in cache-tree
non-tree in cache-tree
Checking connectivity (%d objects)
Checking connectivity
Checking %s
missing %s %s
unreachable %s %s
dangling %s %s
lost-found/%s/%s
other
could not create lost-found
could not finish '%s'
prune unreferenced objects
aggressive
be more thorough (increased runtime)
auto
enable auto-gc mode
force running gc even if there may be another gc running
keep-largest-pack
repack all other packs except the largest pack
expire
--expire
failed to parse gc.logexpiry value %s
failed to parse prune expiry value %s
--depth=%d
--window=%d
Auto packing the repository in background for optimum performance.
Auto packing the repository for optimum performance.
See "git help gc" for manual housekeeping.
builtin/gc.c
gc is already running on machine '%s' pid %ju (use --force if not)
gc.log
failed to run %s
--exclude-promisor-objects
There are too many unreachable loose objects; run 'git prune' to remove them.
stop
register
unregister
invalid subcommand: %s
2.weeks.ago
git gc [<options>]
gc.packrefs
notbare
gc.reflogexpire
gc.reflogexpireunreachable
gc.aggressivewindow
gc.aggressivedepth
gc.auto
gc.autopacklimit
gc.autodetach
gc.pruneexpire
gc.worktreepruneexpire
gc.logexpiry
gc.bigpackthreshold
pack.deltacachesize
failed to parse '%s' value '%s'
1.day.ago
--no-write-bitmap-index
cannot stat '%s'
The last gc run reported the following. Please correct the root cause
and remove %s.
Automatic cleanup will not be performed until the file is removed.
gc.pid
%s %%%ds
--unpack-unreachable=%s
--keep-pack=%s
Failed to fstat %s: %s
3.months.ago
objects/17
0123456789abcdef
run tasks based on the state of the repository
schedule
frequency
run tasks based on frequency
do not report progress or other information over stderr
task
run a specific task
use at most one of --auto and --schedule=<frequency>
--no-schedule is not allowed
unrecognized --schedule argument '%s'
hourly
daily
weekly
'%s' is not a valid task
task '%s' cannot be selected multiple times
loose-objects
incremental-repack
log.excludedecoration
failed to prefetch remotes
--prefetch
--no-write-fetch-head
--recurse-submodules=no
%s/pack/loose
failed to start 'git pack-objects' process
failed to finish 'git pack-objects' process
maintenance.loose-objects.auto
skipping incremental-repack task because core.multiPackIndex is disabled
failed to write multi-pack-index
'git multi-pack-index expire' failed
--batch-size=%ju
'git multi-pack-index repack' failed
core.multiPackIndex
maintenance.incremental-repack.auto
--auto
--no-quiet
failed to write commit-graph
--split
--reachable
maintenance.commit-graph.auto
git maintenance run [--auto] [--[no-]quiet] [--task=<task>] [--schedule]
maintenance.%s.enabled
maintenance.%s.schedule
maintenance.strategy
%s/maintenance
lock file '%s' exists, skipping maintenance
task '%s' failed
failed to add repo to global config
%s/schedule
GIT_TEST_MAINT_SCHEDULER
GIT_TEST_MAINT_SCHEDULER unparseable: %s
another process is scheduling background maintenance
schtasks
crontab
unknown background scheduler: %s
failed to create directories for '%s'
<?xml version="1.0"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0"><dict>
<key>Label</key><string>%s</string>
<key>ProgramArguments</key>
<array>
<string>%s/git</string>
<string>--exec-path=%s</string>
<string>for-each-repo</string>
<string>--config=maintenance.repo</string>
<string>maintenance</string>
<string>run</string>
<string>--schedule=%s</string>
</array>
<key>StartCalendarInterval</key>
<array>
<dict>
<key>Hour</key><integer>%d</integer>
<key>Minute</key><integer>0</integer>
</dict>
<dict>
<key>Day</key><integer>%d</integer>
<key>Hour</key><integer>0</integer>
<key>Minute</key><integer>0</integer>
</dict>
<dict>
<key>Day</key><integer>0</integer>
<key>Hour</key><integer>0</integer>
<key>Minute</key><integer>0</integer>
</dict>
</array>
</dict>
</plist>
failed to bootstrap service %s
invalid schedule %d
org.git-scm.git.%s
~/Library/LaunchAgents/%s.plist
failed to expand path '%s'
bootstrap
bootout
failed to start launchctl
gui/%d
%s/schedule_%s_XXXXXX
failed to create temp xml file
<?xml version="1.0" ?>
<Task version="1.4" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task">
<Triggers>
<CalendarTrigger>
<StartBoundary>2020-01-01T01:00:00</StartBoundary>
<Enabled>true</Enabled>
<ScheduleByDay>
<DaysInterval>1</DaysInterval>
</ScheduleByDay>
<Repetition>
<Interval>PT1H</Interval>
<Duration>PT23H</Duration>
<StopAtDurationEnd>false</StopAtDurationEnd>
</Repetition>
<StartBoundary>2020-01-01T00:00:00</StartBoundary>
<Enabled>true</Enabled>
<ScheduleByWeek>
<DaysOfWeek>
<Monday />
<Tuesday />
<Wednesday />
<Thursday />
<Friday />
<Saturday />
</DaysOfWeek>
<WeeksInterval>1</WeeksInterval>
</ScheduleByWeek>
<StartBoundary>2020-01-01T00:00:00</StartBoundary>
<Enabled>true</Enabled>
<ScheduleByWeek>
<DaysOfWeek>
<Sunday />
</DaysOfWeek>
<WeeksInterval>1</WeeksInterval>
</ScheduleByWeek>
</CalendarTrigger>
</Triggers>
<Principals>
<Principal id="Author">
<LogonType>InteractiveToken</LogonType>
<RunLevel>LeastPrivilege</RunLevel>
</Principal>
</Principals>
<Settings>
<MultipleInstancesPolicy>IgnoreNew</MultipleInstancesPolicy>
<Enabled>true</Enabled>
<Hidden>true</Hidden>
<UseUnifiedSchedulingEngine>true</UseUnifiedSchedulingEngine>
<WakeToRun>false</WakeToRun>
<ExecutionTimeLimit>PT72H</ExecutionTimeLimit>
<Priority>7</Priority>
</Settings>
<Actions Context="Author">
<Exec>
<Command>"%s\git.exe"</Command>
<Arguments>--exec-path="%s" for-each-repo --config=maintenance.repo maintenance run --schedule=%s</Arguments>
</Exec>
</Actions>
</Task>
/create
/xml
failed to start schtasks
Git Maintenance (%s)
/delete
failed to run 'crontab -l'; your system might not support 'cron'
failed to run 'crontab'; your system might not support 'cron'
failed to open stdin of 'crontab'
# BEGIN GIT MAINTENANCE SCHEDULE
# END GIT MAINTENANCE SCHEDULE
# The following schedule was created by Git
# Any edits made in this region might be
# replaced in the future by a Git command.
%%s %%s * * %%s "%s/git" --exec-path="%s" for-each-repo --config=maintenance.repo maintenance run --schedule=%%s
1-23
'crontab' died
maintenance.auto
--global
--get
--fixed-value
maintenance.repo
failed to run 'git config'
--add
--unset
git get-tar-commit-id: read error
git get-tar-commit-id: EOF before reading tar header
 comment=
git get-tar-commit-id: write error
dummy
search in index instead of in the work tree
find in contents not managed by git
search in both tracked and untracked files
exclude-standard
ignore files specified via '.gitignore'
recursively search in each submodule
invert-match
show non-matching lines
case insensitive matching
word-regexp
match patterns only at word boundaries
process binary files as text
don't match patterns in binary files
process binary files with textconv filters
search in subdirectories (default)
max-depth
descend at most <depth> levels
extended-regexp
use extended POSIX regular expressions
basic-regexp
use basic POSIX regular expressions (default)
fixed-strings
interpret patterns as fixed strings
perl-regexp
use Perl-compatible regular expressions
line-number
show line numbers
show column number of first match
don't show filenames
show filenames
full-name
show filenames relative to top directory
files-with-matches
show only filenames instead of matching lines
synonym for --files-with-matches
files-without-match
show only the names of files without match
print NUL after filenames
only-matching
show only matching parts of a line
show the number of matches instead of matching lines
highlight matches
break
print empty line between matches from different files
heading
show filename only once above matches from same file
context
show <n> context lines before and after matches
before-context
show <n> context lines before matches
after-context
show <n> context lines after matches
threads
use <n> worker threads
shortcut for -C NUM
show-function
show a line with the function name before matches
function-context
show the surrounding function
read patterns from file
match <pattern>
combine patterns specified with -e
indicate hit with exit status without output
all-match
show only matches from files that match all patterns
open-files-in-pager
pager
show matching files in the pager
ext-grep
allow calling of grep(1) (ignored by this build)
grep.fallbacktonoindex
no pattern given
--no-index or --untracked cannot be used with revs
unable to resolve revision: %s
--untracked not supported with --recurse-submodules
invalid option combination, ignoring --threads
invalid number of threads specified (%d)
--open-files-in-pager only works on the worktree
less
+/%s%s
--cached or --untracked cannot be used with --no-index
--untracked cannot be used with --cached
--[no-]exclude-standard cannot be used for tracked contents
both --cached and trees are given
switch `%c' expects a numerical value
builtin/grep.c
-e option
option callback does not expect an argument
--and
--not
grep.threads
invalid number of threads specified (%d) for %s
git grep [<options>] [-e] <pattern> [<rev>...] [[--] <path>...]
grep: failed to create thread: %s
unable to read tree (%s)
unable to grep from object of type %s
git hash-object [-t <type>] [-w] [--path=<file> | --no-filters] [--stdin] [--] <file>...
git hash-object  --stdin-paths
object type
write the object into the object database
read the object from stdin
stdin-paths
no-filters
store file as is without filters
literally
just hash any random garbage to create corrupt objects for debugging Git
process file as it were from this path
Can't use --stdin-paths with --stdin
Can't specify files with --stdin-paths
Can't use --stdin-paths with --path
Multiple --stdin arguments are not supported
Can't use --path with --no-filters
Unable to add %s to database
Unable to hash %s
hash to stdout
Cannot open '%s'
usage: %s%s
'git help config' for more information
print all available commands
exclude-guides
exclude guides
guides
print list of useful guides
print all configuration variable names
config-for-completion
show man page
show manual in web browser
show info page
print command description
git help [--all] [--guides] [--man | --web | --info] [<command>]
help.format
help.htmlpath
man.viewer
man.
'%s': path for unsupported man viewer.
Please consider using 'man.<tool>.cmd' instead.
woman
konqueror
'%s': cmd for supported man viewer.
Please consider using 'man.<tool>.path' instead.
advice
<slot>
color.decorate
color.grep
color.remote
<msg-id>
receive.fsck
builtin/help.c
slot_expansion %s.%s is not used
%.*s
add.ignoreErrors
add.interactive.useBuiltin
advice.*
alias.*
am.threeWay
apply.ignoreWhitespace
apply.whitespace
author.email
author.name
blame.blankBoundary
blame.ignoreRevsFile
blame.markIgnoredLines
blame.markUnblamables
blame.showEmail
blame.showRoot
branch.<name>.description
branch.<name>.merge
branch.<name>.mergeOptions
branch.<name>.pushRemote
branch.<name>.rebase
branch.<name>.remote
branch.autoSetupMerge
branch.autoSetupRebase
browser.<tool>.cmd
browser.<tool>.path
checkout.defaultRemote
checkout.thresholdForParallelism
checkout.workers
clean.requireForce
clone.defaultRemoteName
clone.rejectShallow
color.advice
color.advice.hint
color.blame.highlightRecent
color.blame.repeatedLines
color.branch.<slot>
color.decorate.<slot>
color.diff.<slot>
color.grep.<slot>
color.interactive.<slot>
color.pager
color.push
color.push.error
color.remote.<slot>
color.showBranch
color.status.<slot>
color.transport
color.transport.rejected
column.branch
column.clean
column.status
column.tag
column.ui
commit.gpgSign
commitGraph.generationVersion
commitGraph.maxNewFilters
commitGraph.readChangedPaths
committer.email
committer.name
completion.commands
core.abbrev
core.alternateRefsCommand
core.alternateRefsPrefixes
core.askPass
core.attributesFile
core.autocrlf
core.bigFileThreshold
core.checkRoundtripEncoding
core.checkStat
core.commentChar
core.commitGraph
core.compression
core.createObject
core.deltaBaseCacheLimit
core.editor
core.eol
core.excludesFile
core.fileMode
core.filesRefLockTimeout
core.fsmonitor
core.fsmonitorHookVersion
core.fsyncObjectFiles
core.gitProxy
core.hideDotFiles
core.hooksPath
core.ignoreCase
core.ignoreStat
core.logAllRefUpdates
core.looseCompression
core.notesRef
core.packedGitLimit
core.packedGitWindowSize
core.packedRefsTimeout
core.pager
core.precomposeUnicode
core.preferSymlinkRefs
core.preloadIndex
core.protectHFS
core.protectNTFS
core.quotePath
core.repositoryFormatVersion
core.restrictinheritedhandles
core.safecrlf
core.sharedRepository
core.sparseCheckout
core.sparseCheckoutCone
core.splitIndex
core.sshCommand
core.symlinks
core.trustctime
core.unsetenvvars
core.untrackedCache
core.useReplaceRefs
core.warnAmbiguousRefs
core.whitespace
core.worktree
credential.<url>.*
credential.helper
credential.useHttpPath
credential.username
credentialCache.ignoreSIGHUP
credentialStore.lockTimeoutMS
diff.<driver>.binary
diff.<driver>.cachetextconv
diff.<driver>.command
diff.<driver>.textconv
diff.<driver>.wordRegex
diff.<driver>.xfuncname
diff.algorithm
diff.autoRefreshIndex
diff.colorMoved
diff.colorMovedWS
diff.context
diff.dirstat
diff.external
diff.guitool
diff.ignoreSubmodules
diff.indentHeuristic
diff.interHunkContext
diff.mnemonicPrefix
diff.noprefix
diff.orderFile
diff.relative
diff.renameLimit
diff.statGraphWidth
diff.submodule
diff.suppressBlankEmpty
diff.tool
diff.wordRegex
diff.wsErrorHighlight
difftool.<tool>.cmd
difftool.<tool>.path
difftool.prompt
extensions.objectFormat
fastimport.unpackLimit
feature.*
feature.manyFiles
fetch.fsck.<msg-id>
fetch.fsck.skipList
fetch.fsckObjects
fetch.negotiationAlgorithm
fetch.pruneTags
fetch.recurseSubmodules
fetch.showForcedUpdates
fetch.unpackLimit
fetch.writeCommitGraph
filter.<driver>.clean
filter.<driver>.smudge
format.attach
format.cc
format.coverFromDescription
format.coverLetter
format.encodeEmailHeaders
format.filenameMaxLength
format.from
format.headers
format.notes
format.numbered
format.outputDirectory
format.pretty
format.signOff
format.signature
format.signatureFile
format.subjectPrefix
format.suffix
format.thread
format.to
format.useAutoBase
fsck.<msg-id>
fsck.skipList
gc.<pattern>.reflogExpire
gc.<pattern>.reflogExpireUnreachable
gc.aggressiveDepth
gc.aggressiveWindow
gc.autoDetach
gc.autoPackLimit
gc.bigPackThreshold
gc.logExpiry
gc.packRefs
gc.pruneExpire
gc.reflogExpire
gc.reflogExpireUnreachable
gc.rerereResolved
gc.rerereUnresolved
gc.worktreePruneExpire
gc.writeCommitGraph
gitcvs.allBinary
gitcvs.commitMsgAnnotation
gitcvs.dbDriver
gitcvs.dbName
gitcvs.dbPass
gitcvs.dbTableNamePrefix
gitcvs.dbUser
gitcvs.enabled
gitcvs.logFile
gitcvs.usecrlfattr
gitweb.avatar
gitweb.blame
gitweb.category
gitweb.description
gitweb.grep
gitweb.highlight
gitweb.owner
gitweb.patches
gitweb.pickaxe
gitweb.remote_heads
gitweb.showSizes
gitweb.snapshot
gitweb.url
gpg.<format>.program
gpg.format
gpg.minTrustLevel
gpg.program
grep.column
grep.extendedRegexp
grep.fallbackToNoIndex
grep.lineNumber
grep.patternType
gui.blamehistoryctx
gui.commitMsgWidth
gui.copyBlameThreshold
gui.diffContext
gui.displayUntracked
gui.encoding
gui.fastCopyBlame
gui.matchTrackingBranch
gui.newBranchTemplate
gui.pruneDuringFetch
gui.spellingDictionary
gui.trustmtime
guitool.<name>.argPrompt
guitool.<name>.cmd
guitool.<name>.confirm
guitool.<name>.needsFile
guitool.<name>.noConsole
guitool.<name>.noRescan
guitool.<name>.prompt
guitool.<name>.revPrompt
guitool.<name>.revUnmerged
guitool.<name>.title
help.autoCorrect
help.browser
help.htmlPath
http.<url>.*
http.cookieFile
http.delegation
http.emptyAuth
http.extraHeader
http.followRedirects
http.lowSpeedLimit
http.lowSpeedTime
http.maxRequests
http.minSessions
http.noEPSV
http.pinnedpubkey
http.postBuffer
http.proxy
http.proxyAuthMethod
http.proxySSLCAInfo
http.proxySSLCert
http.proxySSLCertPasswordProtected
http.proxySSLKey
http.saveCookies
http.schannelCheckRevoke
http.schannelUseSSLCAInfo
http.sslBackend
http.sslCAInfo
http.sslCAPath
http.sslCert
http.sslCertPasswordProtected
http.sslCipherList
http.sslKey
http.sslTry
http.sslVerify
http.sslVersion
http.userAgent
http.version
i18n.commitEncoding
i18n.logOutputEncoding
imap.authMethod
imap.folder
imap.host
imap.pass
imap.port
imap.preformattedHTML
imap.sslverify
imap.tunnel
imap.user
index.recordEndOfIndexEntries
index.recordOffsetTable
index.sparse
index.threads
index.version
init.defaultBranch
init.templateDir
instaweb.browser
instaweb.httpd
instaweb.local
instaweb.modulePath
instaweb.port
interactive.diffFilter
interactive.singleKey
log.abbrevCommit
log.date
log.decorate
log.diffMerges
log.excludeDecoration
log.follow
log.graphColors
log.mailmap
log.showRoot
log.showSignature
lsrefs.unborn
mailinfo.scissors
mailmap.blob
mailmap.file
maintenance.<task>.enabled
maintenance.<task>.schedule
man.<tool>.cmd
man.<tool>.path
merge.<driver>.driver
merge.<driver>.name
merge.<driver>.recursive
merge.autoStash
merge.branchdesc
merge.conflictStyle
merge.defaultToUpstream
merge.directoryRenames
merge.ff
merge.guitool
merge.log
merge.renameLimit
merge.renames
merge.stat
merge.suppressDest
merge.tool
merge.verbosity
merge.verifySignatures
mergetool.<tool>.cmd
mergetool.<tool>.hideResolved
mergetool.<tool>.path
mergetool.<tool>.trustExitCode
mergetool.hideResolved
mergetool.keepBackup
mergetool.keepTemporaries
mergetool.meld.hasOutput
mergetool.meld.useAutoMerge
mergetool.prompt
mergetool.writeToTemp
notes.<name>.mergeStrategy
notes.displayRef
notes.mergeStrategy
notes.rewrite.<command>
notes.rewriteMode
notes.rewriteRef
pack.allowPackReuse
pack.compression
pack.deltaCacheLimit
pack.deltaCacheSize
pack.indexVersion
pack.island
pack.islandCore
pack.packSizeLimit
pack.preferBitmapTips
pack.threads
pack.useBitmaps
pack.useSparse
pack.window
pack.windowMemory
pack.writeBitmapHashCache
pack.writeReverseIndex
pager.<cmd>
pretty.<name>
protocol.<name>.allow
protocol.allow
protocol.version
pull.ff
pull.octopus
pull.rebase
pull.twohead
push.default
push.followTags
push.gpgSign
push.negotiate
push.pushOption
push.recurseSubmodules
push.useForceIfIncludes
rebase.abbreviateCommands
rebase.autoSquash
rebase.autoStash
rebase.backend
rebase.forkPoint
rebase.instructionFormat
rebase.missingCommitsCheck
rebase.rescheduleFailedExec
rebase.stat
receive.advertiseAtomic
receive.advertisePushOptions
receive.autogc
receive.certNonceSeed
receive.certNonceSlop
receive.denyCurrentBranch
receive.denyDeleteCurrent
receive.denyDeletes
receive.denyNonFastForwards
receive.fsck.<msg-id>
receive.fsck.skipList
receive.fsckObjects
receive.hideRefs
receive.keepAlive
receive.maxInputSize
receive.procReceiveRefs
receive.shallowUpdate
receive.unpackLimit
receive.updateServerInfo
remote.<name>.fetch
remote.<name>.mirror
remote.<name>.partialclonefilter
remote.<name>.promisor
remote.<name>.proxy
remote.<name>.proxyAuthMethod
remote.<name>.prune
remote.<name>.pruneTags
remote.<name>.push
remote.<name>.pushurl
remote.<name>.receivepack
remote.<name>.skipDefaultUpdate
remote.<name>.skipFetchAll
remote.<name>.tagOpt
remote.<name>.uploadpack
remote.<name>.url
remote.<name>.vcs
remote.pushDefault
remotes.<group>
repack.packKeptObjects
repack.useDeltaBaseOffset
repack.useDeltaIslands
repack.writeBitmaps
rerere.autoUpdate
rerere.enabled
reset.quiet
sendemail.<identity>.*
sendemail.aliasFileType
sendemail.aliasesFile
sendemail.annotate
sendemail.bcc
sendemail.cc
sendemail.ccCmd
sendemail.chainReplyTo
sendemail.confirm
sendemail.envelopeSender
sendemail.forbidSendmailVariables
sendemail.from
sendemail.identity
sendemail.multiEdit
sendemail.signedoffbycc
sendemail.smtpBatchSize
sendemail.smtpDomain
sendemail.smtpEncryption
sendemail.smtpPass
sendemail.smtpReloginDelay
sendemail.smtpServer
sendemail.smtpServerOption
sendemail.smtpServerPort
sendemail.smtpUser
sendemail.smtpsslcertpath
sendemail.suppressFrom
sendemail.suppresscc
sendemail.thread
sendemail.to
sendemail.tocmd
sendemail.transferEncoding
sendemail.validate
sendemail.xmailer
sequence.editor
showBranch.default
splitIndex.maxPercentChange
splitIndex.sharedIndexExpire
ssh.variant
stash.showIncludeUntracked
stash.showPatch
stash.showStat
stash.useBuiltin
status.aheadBehind
status.displayCommentPrefix
status.relativePaths
status.renameLimit
status.showStash
status.showUntrackedFiles
status.submoduleSummary
submodule.<name>.active
submodule.<name>.branch
submodule.<name>.fetchRecurseSubmodules
submodule.<name>.ignore
submodule.<name>.update
submodule.<name>.url
submodule.active
submodule.alternateErrorStrategy
submodule.alternateLocation
submodule.fetchJobs
tag.forceSignAnnotated
tag.gpgSign
tag.sort
tar.umask
trace2.configParams
trace2.destinationDebug
trace2.envVars
trace2.eventBrief
trace2.eventNesting
trace2.eventTarget
trace2.maxFiles
trace2.normalBrief
trace2.normalTarget
trace2.perfBrief
trace2.perfTarget
transfer.advertiseSID
transfer.fsckObjects
transfer.hideRefs
transfer.unpackLimit
uploadarchive.allowUnreachable
uploadpack.allowAnySHA1InWant
uploadpack.allowFilter
uploadpack.allowReachableSHA1InWant
uploadpack.allowRefInWant
uploadpack.allowTipSHA1InWant
uploadpack.hideRefs
uploadpack.keepAlive
uploadpack.packObjectsHook
uploadpackfilter.<filter>.allow
uploadpackfilter.allow
uploadpackfilter.tree.maxDepth
url.<base>.insteadOf
url.<base>.pushInsteadOf
user.email
user.name
user.signingKey
user.useConfigOnly
versionsort.suffix
web.browser
worktree.guessRemote
html
unrecognized help format '%s'
GIT_MAN_VIEWER
no man viewer handled the request
git%s
MANPATH
'%s': unknown man viewer.
failed to exec '%s'
emacsclient
(woman "%s")
Failed to start emacsclient.
Failed to parse emacsclient version.
emacsclient version '%d' too old (< 22).
DISPLAY
kfmclient
/konqueror
%.*s/kfmclient
man:%s(1)
newTab
%s %s
/bin/sh
INFOPATH
gitman
no info viewer handled the request
%s/git.html
HTML documentation is not provided by this distribution of git.
%s/%s.html
web--browse
Cannot come back to cwd
GIT_TEST_WRITE_REV_INDEX
--fix-thin
--strict
--fsck-objects
--verify
--verify-stat
--verify-stat-only
--promisor
--threads=
--pack_header=
bad %s
--show-resolving-progress
--report-end-of-input
--index-version=
--max-input-size=
--object-format=
unknown hash algorithm '%s'
--rev-index
--no-rev-index
--fix-thin cannot be used without --stdin
--stdin requires a git repository
--object-format cannot be used with --stdin
--verify with no packfile name given
fsck error in pack objects
object type mismatch at %s
pack.writereverseindex
packfile name '%s' does not end with '.%s'
Cannot open existing pack file '%s'
Cannot open existing pack idx file for '%s'
unable to create '%s'
cannot open packfile '%s'
pack signature mismatch
pack version %u unsupported
cannot fill %d bytes
early EOF
read error on input
used more bytes than were available
pack too large for current definition of off_t
pack exceeds maximum allowed size
Receiving objects
Indexing objects
pack is corrupted (SHA1 mismatch)
cannot fstat packfile
pack has junk at the end
confusion beyond insanity in parse_pack_objects()
offset value overflow for delta base object
delta base offset is out of bound
unknown object type %d
pack has bad object at offset %ju: %s
%s %ju
inflate returned %d
sha1_object
index-pack.c
data || obj_entry
cannot read existing object info %s
SHA1 COLLISION FOUND WITH %s !
cannot read existing object %s
invalid blob object %s
fsck error in packed object
data && "data can only be NULL for large _blobs_"
Not all child objects of %s are reachable
builtin/index-pack.c
parse_object_buffer transmogrified our buffer
cannot pread pack file
premature end of pack file, %ju byte missing
premature end of pack file, %ju bytes missing
serious inflate inconsistency
unable to read %s
Resolving deltas
GIT_FORCE_THREADS
unable to create thread: %s
REF_DELTA at offset %ju already resolved (duplicate base %s?)
threaded_second_pass
child_obj->real_type == OBJ_OFS_DELTA
failed to apply delta
resolve_delta
base->data
confusion beyond insanity
completed with %d local object
completed with %d local objects
Unexpected tail checksum for %s (disk corruption?)
pack has %d unresolved delta
pack has %d unresolved deltas
local object %s is corrupt
unable to deflate appended object (%d)
did not receive expected object %s
object %s: expected type %s, found %s
%s %-6s %ju %ju %ju
 %u %s
non delta: %d object
non delta: %d objects
chain length = %d: %lu object
chain length = %d: %lu objects
error while closing pack file
promisor
cannot store reverse index file
cannot write %s file '%s'
cannot close written %s file '%s'
core.repositoryformatversion
extensions.objectformat
%s already exists
re-init: ignored --initial-branch=%s
builtin/init-db.c
invalid value for shared_repository
core.sharedrepository
receive.denyNonFastforwards
Reinitialized existing shared Git repository in %s%s
Reinitialized existing Git repository in %s%s
Initialized empty shared Git repository in %s%s
Initialized empty Git repository in %s%s
permissions
specify that the git repository is to be shared amongst several users
initial-branch
override the name of the initial branch
object-format
hash
specify the hash algorithm to use
--separate-git-dir and --bare are mutually exclusive
cannot mkdir %s
cannot chdir to %s
%s (or --work-tree=<directory>) not allowed without specifying %s (or --git-dir=<directory>)
Cannot access work tree '%s'
--separate-git-dir incompatible with bare repository
unable to handle file type %d
unable to move %s to %s
gitdir: %s
GIT_DEFAULT_HASH
attempt to reinitialize repository with different hash
init.templatedir
refs
failed to set up refs db: %s
invalid initial branch name: '%s'
core.filemode
core.logallrefupdates
tXXXXXX
testing
CoNfIg
core.ignorecase
GIT_TEMPLATE_DIR
share/git-core/templates
templates not found in %s
not copying templates from '%s': %s
cannot stat template '%s'
cannot opendir '%s'
cannot readlink '%s'
cannot symlink '%s' '%s'
cannot copy '%s' to '%s'
ignoring template %s
/pack
/info
git init [-q | --quiet] [--bare] [--template=<template-directory>] [--shared[=<permissions>]] [<directory>]
in-place
edit files in place
trim-empty
trim empty trailers
where
where to place the new trailer
if-exists
action if trailer already exists
if-missing
action if trailer is missing
only-trailers
output only the trailers
only-input
do not apply config rules
unfold
join whitespace-continued values
parse
set parsing options
no-divider
do not treat --- specially
trailer(s) to add
--trailer with --only-input does not make sense
no input file given for in-place editing
builtin/interpret-trailers.c
git interpret-trailers [--in-place] [--trim-empty] [(--trailer <token>[(=|:)<value>])...] [<file>...]
%stag %s%s
could not read object %s
%stree %s%s
unknown type: %d
numbered
use [PATCH n/m] even with a single patch
no-numbered
use [PATCH] even with multiple patches
print patches to standard out
cover-letter
generate a cover letter
numbered-files
use simple number sequence for output file names
use <sfx> instead of '.patch'
start-number
start numbering patches at <n> instead of 1
reroll-count
mark the series as Nth re-roll
filename-max-length
max length of output filename
use [RFC PATCH] instead of [PATCH]
cover-from-description
cover-from-description-mode
generate parts of a cover letter based on a branch's description
subject-prefix
use [<prefix>] instead of [PATCH]
store resulting files in <dir>
keep-subject
don't strip/add [PATCH]
no-binary
don't output binary diffs
zero-commit
output all-zero hash in From header
ignore-if-in-upstream
don't include a patch matching a commit upstream
no-stat
show patch format instead of default (patch + stat)
Messaging
add-header
add email header
email
add To: header
add Cc: header
from
ident
set From address to <ident> (or committer ident if absent)
in-reply-to
make first mail a reply to <message-id>
attach
attach the patch
inline
inline the patch
thread
enable message threading, styles: shallow, deep
signature
add a signature
base-commit
add prerequisite tree info to the patch series
signature-file
add a signature from a file
don't print the patch filenames
show progress while generating patches
interdiff
show changes against <rev> in cover letter or single patch
show changes against <refspec> in cover letter or single patch
creation-factor
percentage by which creation is weighted
%s v%s
To: 
    
Cc: 
invalid ident line: %s
-n and -k are mutually exclusive
--subject-prefix/--rfc and -k are mutually exclusive
unrecognized argument: %s
--name-only does not make sense
--name-status does not make sense
--check does not make sense
--stdout, --output, and --output-directory are mutually exclusive
could not create directory '%s'
--interdiff requires --cover-letter or single patch
Interdiff:
Interdiff against v%d:
--creation-factor requires --range-diff
--range-diff requires --cover-letter or single patch
Range-diff:
Range-diff against v%d:
unable to read signature file '%s'
cover
Generating patches
failed to create output files
--%s%s--
Could not find a tracked remote branch, please specify <upstream> manually.
unknown commit %s
format.subjectprefix
format.filenamemaxlength
format.encodeemailheaders
log.abbrevcommit
log.diffmerges
log.showroot
color.decorate.
log.showsignature
incomplete
Final output: %d %s
git show %s: bad file
show_tag_object
log.c
type == OBJ_TAG
Tagger
%s%s
suppress diff output
show source
use-mailmap
use mail map file
mailmap
decorate-refs
only decorate refs that match <pattern>
decorate-refs-exclude
do not decorate refs that match <pattern>
decorate
decorate options
range:file
trace the evolution of line range <start>,<end> or function :<funcname> in <file>
-L<range>:<file> cannot be used with pathspec
invalid --decorate option: %s
builtin/log.c
git log [<options>] [<revision-range>] [[--] <path>...]
git show [<options>] <object>...
.patch
RFC PATCH
two output directories?
to: 
cc: 
deep
format.headers without value
format.signoff
format.signaturefile
format.coverletter
format.outputdirectory
format.useautobase
whenAble
format.coverfromdescription
PATCH
git format-patch [<options>] [<since> | <revision-range>]
subject
%s: invalid cover from description mode
need exactly one range
not a range
%s..%s
failed to infer range-diff origin of current series
using '%s' as range-diff origin of current series
requested automatic base selection but a commit was provided
unexpected automatic base selection method
failed to resolve '%s' as a valid ref
upstream base
could not find exact merge base
failed to get upstream, if you want to record base commit automatically,
please use git branch --set-upstream-to to track a remote branch.
Or you could specify base commit by --base=<base-commit-id> manually
failed to find exact merge base
base commit should be the ancestor of revision list
base commit shouldn't be in revision list
rev_list
cannot get patch id
insane in-reply-to: %s
%s.%ju.git.%s
cover letter needs email format
failed to create cover-letter file
*** SUBJECT HERE ***
*** BLURB HERE ***
--no-notes
--notes
--notes=%s
base-commit: %s
prerequisite-patch-id: %s
cannot open patch file %s
git cherry [-v] [<upstream> [<head> [<limit>]]]
%c %s
%c %s %s
tree-ish %s not found.
bad tree-ish %s
unable to read tree entries %s
identify the file status with tags
use lowercase letters for 'assume unchanged' files
use lowercase letters for 'fsmonitor clean' files
show cached files in the output (default)
deleted
show deleted files in the output
modified
show modified files in the output
show other files in the output
show ignored files in the output
show staged contents' object name in the output
killed
show files on the filesystem that need to be removed
show 'other' directories' names only
show line endings of files
empty-directory
don't show empty directories
show unmerged files in the output
resolve-undo
show resolve-undo information
skip files matching pattern
exclude-from
exclude patterns are read from <file>
exclude-per-directory
read additional per-directory exclude patterns in <file>
add the standard git exclusions
make the output relative to the project top directory
recurse through submodules
error-unmatch
if any <file> is not in the index, treat this as an error
with-tree
tree-ish
pretend that paths removed since <tree-ish> are still present
show debugging data
deduplicate
suppress duplicate entries
ls-files --recurse-submodules unsupported mode
ls-files --recurse-submodules does not support --error-unmatch
ls-files -i must be used with either -o or -c
ls-files --ignored needs some exclude pattern
ls-files --with-tree is incompatible with -s or -u
Did you forget to 'git add'?
builtin/ls-files.c
git ls-files [<options>] [<file>...]
cannot lstat '%s'
git ls-files: internal error - directory entry not superset of prefix
i/%-5s w/%-5s attr/%-17s
killed-file %.*s not found
git ls-files: internal error - cache entry not superset of prefix
%s%06o %s %d
  ctime: %u:%u
  mtime: %u:%u
  dev: %u
ino: %u
  uid: %u
gid: %u
  size: %u
flags: %x
do not print remote URL
path of git-upload-pack on the remote host
limit to tags
heads
limit to heads
do not show peeled tags
get-url
take url.<base>.insteadOf into account
exit with exit code 2 if no matching refs are found
symref
show underlying ref in addition to the object pointed by it
*/%s
bad repository '%s'
No remote configured to list refs from.
remote %s has no configured URL
From %s
ref: %s
git ls-remote [--heads] [--tags] [--refs] [--upload-pack=<exec>]
                     [-q | --quiet] [--exit-code] [--get-url]
                     [--symref] [<repository> [<refs>...]]
only show trees
recurse into subtrees
show trees when recursing
terminate entries with NUL byte
include object size
list only filenames
name-status
use full path names
list entire tree; not just current directory (implies --full-name)
not a tree object
git ls-tree [<options>] <tree-ish> [<path>...]
%06o %s %s %7s
keep subject
keep non patch brackets in subject
copy Message-ID to the end of commit message
re-code metadata to i18n.commitEncoding
disable charset re-coding of metadata
encoding
re-code metadata to this encoding
use scissors
<action>
action when quoted CR is found
inbody-headers
use headers in message's body
builtin/mailinfo.c
invalid meta_charset.policy
git mailinfo [<options>] <msg> <patch> < mail >info
unknown option: %s
cannot split patches from stdin
cannot stat %s
cannot split patches from %s
cannot open mbox %s
empty mbox: '%s'
cannot read mbox %s
corrupt mailbox
builtin/mailsplit.c
cannot open output file '%s'
cannot write output
cannot read mbox
cannot open mail %s
cannot read mail %s
cannot opendir %s
output all common ancestors
octopus
find ancestors for a single n-way merge
independent
list revs not reachable from others
is-ancestor
is the first one ancestor of the other?
fork-point
find where <commit> forked from reflog of <ref>
--is-ancestor cannot be used with --all
--independent cannot be used with --all
git merge-base [-a | --all] <commit> <commit>...
git merge-base [-a | --all] --octopus <commit>...
git merge-base --independent <commit>...
git merge-base --is-ancestor <commit> <commit>
git merge-base --fork-point <ref> [<commit>]
--is-ancestor takes exactly two commits
Not a valid object name: '%s'
Not a valid commit name %s
send results to standard output
diff3
use a diff3 based merge
for conflicts, use our version
for conflicts, use their version
union
for conflicts, use a union version
marker-size
for conflicts, use this marker size
do not warn about conflicts
set labels for file1/orig-file/file2
failed to redirect stderr to /dev/null
Cannot merge binary files: %s
Could not open %s for writing
Could not write to %s
Could not close %s
builtin/merge-file.c
too many labels on the command line
git merge-file [<options>] [-L <name1> [-L <orig> [-L <name2>]]] <file1> <orig-file> <file2>
git merge-index [-o] [-q] <merge-program> (-a | [--] [<filename>...])
git merge-index: unknown option %s
merge program failed
git merge-index: %s not in the cache
builtin/merge-index.c
read_cache failed
builtin/merge-ours.c
-subtree
could not parse object '%s'
cannot handle more than %d bases. Ignoring %s.
not handling anything other than two heads merge.
could not resolve ref '%s'
Merging %s with %s
GITHEAD_%s
unknown rev %s
%s is not a tree
result
their
  %-6s %o %s %s
added in remote
added in both
added in local
removed in both
changed in both
removed in local
removed in remote
unable to generate diff
GIT_TEST_MERGE_ALGORITHM
--abort expects no arguments
There is no merge to abort (MERGE_HEAD missing).
--quit expects no arguments
--continue expects no arguments
There is no merge in progress (MERGE_HEAD missing).
You have not concluded your merge (MERGE_HEAD exists).
Please, commit your changes before you merge.
You have not concluded your merge (MERGE_HEAD exists).
You have not concluded your cherry-pick (CHERRY_PICK_HEAD exists).
Please, commit your changes before you merge.
You have not concluded your cherry-pick (CHERRY_PICK_HEAD exists).
You cannot combine --squash with --no-ff.
You cannot combine --squash with --commit.
No commit specified and merge.defaultToUpstream not set.
Squash commit into empty head not supported yet
Non-fast-forward commit does not make sense into an empty head
%s - not something we can merge
Can merge only exactly one commit into empty head
initial pull
updating ORIG_HEAD
refusing to merge unrelated histories
Updating %s..%s
Fast-forward
 (no commit created; -m option ignored)
Not possible to fast-forward, aborting.
Trying merge strategy %s...
No merge strategy handled the merge.
Merge with strategy %s failed.
Using the %s to prepare resolving by hand.
Automatic merge went well; stopped before committing as requested
git merge [<options>] [<commit>...]
git merge --abort
git merge --continue
do not show a diffstat at the end of the merge
stat
show a diffstat at the end of the merge
(synonym to --stat)
add (at most <n>) entries from shortlog to merge commit message
create a single commit instead of doing a merge
perform a commit if the merge succeeds (default)
edit message before committing
allow fast-forward (default)
ff-only
abort if fast-forward is not possible
verify-signatures
verify that the named commit has a valid GPG signature
strategy
merge strategy to use
strategy-option
option=value
option for selected merge strategy
merge commit message (for a non-fast-forward merge)
abort the current in-progress merge
--abort but leave index and working tree alone
continue the current in-progress merge
allow-unrelated-histories
allow merging unrelated histories
autostash
automatically stash/stash pop before and after
bypass pre-merge-commit and commit-msg hooks
builtin/merge.c
git-merge-
Could not find merge strategy '%s'.
Available strategies are:
Available custom strategies are:
resolve
subtree
%s%s
switch `m' requires a value
-F cannot be negated
option `%s' requires a value
could not read file '%s'
branch.
.mergeoptions
merge.diffstat
merge.verifysignatures
merge.defaulttoupstream
gpg.mintrustlevel
merge.autostash
Bad branch.%s.mergeoptions string: %s
branch.*.mergeoptions
Bad value '%s' in environment '%s'
No current branch.
No remote for the current branch.
No default upstream defined for the current branch.
No remote-tracking branch for %s from %s
not something we can merge
could not close '%s'
not something we can merge in %s: %s
'%s' does not point to a commit
branch '%s' of .
tag '%s' of .
remote-tracking branch '%s' of .
branch '%s'%s of .
 (early part)
%s '%s'
commit '%s'
read-tree failed
Already up to date. (nothing to squash)
Already up to date.
Squashed commit of the following:
commit %s
Unable to write index.
In-index merge
the control must not reach here under --squash
Empty commit message.
Not committing merge; use 'git commit' to complete the merge.
Could not read from '%s'
could not run stash.
stash failed
not a valid object: %s
--reset
Not handling anything other than two heads merge.
Unknown option for merge-recursive: -X%s
unable to write %s
Merge made by the '%s' strategy.
Squash commit -- not updating HEAD
No merge message -- not updating HEAD
Wonderful.
Automatic merge failed; fix conflicts and then commit the result.
Rewinding the tree to pristine...
Trying really trivial in-index merge...
Nope.
could not read from stdin
tag on stdin did not pass our strict fsck check
tag on stdin did not refer to a valid object
unable to write tag file
git mktag
warning: tag input does not pass fsck: %s
error: tag input does not pass fsck: %s
builtin/mktag.c
could not read tagged object '%s'
object '%s' tagged as '%s', but is a '%s' type
input is NUL terminated
missing
allow missing objects
allow creation of more than one tree
input format error: (blank line only valid in batch mode)
builtin/mktree.c
git mktree [-z] [--missing] [--batch]
input format error: %s
invalid quoting
entry '%s' object type (%s) doesn't match mode type (%s)
entry '%s' object %s is unavailable
entry '%s' object %s is a %s but specified type was (%s)
path %s contains slash
unrecognized subcommand: %s
object directory containing set of packfile and pack-index pairs
git multi-pack-index [<options>] write [--preferred-pack=<pack>]
git multi-pack-index [<options>] verify
git multi-pack-index [<options>] expire
git multi-pack-index [<options>] repack [--batch-size=<size>]
batch-size
during repack, collect pack-files of smaller size into a batch that is larger than this size
builtin/multi-pack-index.c
preferred-pack
pack for reuse when computing a multi-pack bitmap
force move/rename even if target exists
skip move/rename errors
destination '%s' is not a directory
Checking rename of '%s' to '%s'
bad source
can not move directory into itself
cannot move directory over file
source directory is empty
not under version control
conflicted
destination exists
overwriting '%s'
Cannot overwrite
multiple sources for the same target
destination directory does not exist
%s, source=%s, destination=%s
Renaming %s to %s
renaming '%s' failed
cmd_mv
mv.c
pos >= 0
git mv [<options>] <source>... <destination>
Directory %s is in index and no submodule?
Please stage your changes to .gitmodules or stash them to proceed
%.*s is in index
print only ref-based names (no object names)
only use tags to name the commits
only use refs matching <pattern>
ignore refs matching <pattern>
list all commits reachable from all refs
read from stdin
allow to print `undefined` names (default)
peel-tag
dereference tags in the input (internal use)
Specify either a list, or --all, not both!
Could not get sha1 for %s. Skipping.
Could not get object for %s. Skipping.
Could not get commit for %s. Skipping.
git name-rev [<options>] <commit>...
git name-rev [<options>] --all
git name-rev [<options>] --stdin
%s^0
%.*s~%d^%d
%.*s^%d
%.*s%s
%.*s (%s)
cannot describe '%s'
undefined
notes-ref
use notes from <notes-ref>
GIT_NOTES_REF
remove
get-ref
unknown subcommand: %s
git notes [--ref <notes-ref>] [list [<object>]]
git notes [--ref <notes-ref>] add [-f] [--allow-empty] [-m <msg> | -F <file> | (-c | -C) <object>] [<object>]
git notes [--ref <notes-ref>] copy [-f] <from-object> <to-object>
git notes [--ref <notes-ref>] append [--allow-empty] [-m <msg> | -F <file> | (-c | -C) <object>] [<object>]
git notes [--ref <notes-ref>] edit [--allow-empty] [<object>]
git notes [--ref <notes-ref>] show [<object>]
git notes [--ref <notes-ref>] merge [-v | -q] [-s <strategy>] <notes-ref>
git notes merge --commit [-v | -q]
git notes merge --abort [-v | -q]
git notes [--ref <notes-ref>] remove [<object>...]
git notes [--ref <notes-ref>] prune [-n] [-v]
git notes [--ref <notes-ref>] get-ref
too many arguments
failed to resolve '%s' as a valid ref.
no note found for object %s.
git notes [list [<object>]]
refs/notes/
refusing to %s notes in %s (outside of refs/notes/)
note contents as a string
note contents in a file
reuse and edit specified note object
reuse specified note object
allow storing empty note
replace existing notes
Cannot add notes. Found existing notes for object %s. Use '-f' to overwrite existing notes
Overwriting existing notes for object %s
builtin/notes.c
combine_notes_overwrite failed
Notes added by 'git notes add'
Removing note for object %s
Notes removed by 'git notes add'
could not open or read '%s'
failed to read object '%s'.
cannot read note data from non-blob object '%s'.
git notes add [<options>] [<object>]
NOTES_EDITMSG
could not create file '%s'
please supply the note contents using either -m or -F option
--stat
unable to start 'show' for object '%s'
could not read 'show' output
failed to finish 'show' for object '%s'
unable to write note object
the note contents have been left in %s
read objects from stdin
for-rewrite
load rewriting config for <command> (implies --stdin)
too few arguments
Cannot copy notes. Found existing notes for object %s. Use '-f' to overwrite existing notes
missing notes on source object %s. Cannot copy.
Notes added by 'git notes copy'
git notes copy [<options>] <from-object> <to-object>
git notes copy --stdin [<from-object> <to-object>]...
malformed input line: '%s'.
failed to copy notes from '%s' to '%s'
The -m/-F/-c/-C options have been deprecated for the 'edit' subcommand.
Please use 'git notes add -f -m/-F/-c/-C' instead.
Notes added by 'git notes %s'
Notes removed by 'git notes %s'
git notes edit [<object>]
git notes append [<options>] [<object>]
git notes show [<object>]
General options
Merge options
resolve notes conflicts using the given strategy (manual/ours/theirs/union/cat_sort_uniq)
Committing unmerged notes
finalize notes merge by committing unmerged notes
Aborting notes merge resolution
abort notes merge
cannot mix --commit, --abort or -s/--strategy
must specify a notes ref to merge
unknown -s/--strategy: %s
local ref %s is outside of refs/notes/
notes.%s.mergeStrategy
notes: Merged notes from %s into %s
NOTES_MERGE_PARTIAL
NOTES_MERGE_REF
a notes merge into %s is already in-progress at %s
failed to store link to current notes ref (%s)
Automatic notes merge failed. Fix conflicts in %s and commit the result with 'git notes merge --commit', or abort the merge with 'git notes merge --abort'.
NOTES_MERGE_WORKTREE
git notes merge [<options>] <notes-ref>
git notes merge --commit [<options>]
git notes merge --abort [<options>]
failed to delete ref NOTES_MERGE_PARTIAL
failed to delete ref NOTES_MERGE_REF
failed to remove 'git notes merge' worktree
failed to read ref NOTES_MERGE_PARTIAL
could not find commit from NOTES_MERGE_PARTIAL.
could not parse commit from NOTES_MERGE_PARTIAL.
failed to resolve NOTES_MERGE_REF
failed to finalize notes merge
notes: 
unknown notes merge strategy %s
attempt to remove non-existent note is not an error
read object names from the standard input
Notes removed by 'git notes remove'
git notes remove [<object>]
Failed to resolve '%s' as a valid ref.
Object %s has no note
do not remove, show only
report pruned notes
Notes removed by 'git notes prune'
git notes prune [<options>]
git notes get-ref
unable to get size of %s
builtin/pack-objects.c
when e->type is a delta, it must belong to a pack
unable to parse object header of %s
index-version
<version>[,<offset>]
write the pack index file in the specified idx format version
max-pack-size
maximum size of each output pack file
ignore borrowed objects from alternate object store
ignore packed objects
window
limit pack window by objects
window-memory
limit pack window by memory in addition to object limit
maximum length of delta chain allowed in the resulting pack
reuse-delta
reuse existing deltas
reuse-object
reuse existing objects
delta-base-offset
use OFS_DELTA objects
use threads when searching for best delta matches
non-empty
do not create an empty pack output
revs
read revision arguments from standard input
unpacked
limit the objects to those that are not yet packed
include objects reachable from any reference
include objects referred by reflog entries
indexed-objects
include objects referred to by the index
read packs from stdin
output pack to stdout
include-tag
include tag objects that refer to objects to be packed
keep-unreachable
keep unreachable objects
pack-loose-unreachable
pack loose unreachable objects
unpack-unreachable
unpack unreachable objects newer than <time>
use the sparse reachability algorithm
thin
create thin packs
create packs suitable for shallow fetches
honor-pack-keep
ignore packs that have companion .keep file
keep-pack
ignore this pack
compression
pack compression level
keep-true-parents
do not hide commits by grafts
use-bitmap-index
use a bitmap index if available to speed up counting objects
write-bitmap-index
write a bitmap index together with the pack index
write-bitmap-index-quiet
write a bitmap index if possible
handling for missing objects
exclude-promisor-objects
do not pack objects in promisor packfiles
delta-islands
respect islands during delta compression
uri-protocol
protocol
exclude any configured uploadpack.blobpackfileuri with this protocol
GIT_TEST_PACK_SPARSE
delta chain depth %d is too deep, forcing %d
pack.deltaCacheLimit is too high, forcing %d
--objects-edge-aggressive
--objects-edge
--reflog
--indexed-objects
--unpacked
bad pack compression level %d
--max-pack-size cannot be used to build a pack for transfer
minimum pack size limit is 1 MiB
--thin cannot be used to build an indexable pack
--keep-unreachable and --unpack-unreachable are incompatible
cannot use --filter without --stdout
cannot use --filter with --stdin-packs
cannot use internal rev list with --stdin-packs
--topo-order
enumerate-objects
Enumerating objects
prepare-pack
write-pack-file
Total %u (delta %u), reused %u (delta %u), pack-reused %u
unsupported index version %s
bad index version '%s'
option_parse_missing_action
pack-objects.c
!unset
allow-any
allow-promisor
invalid value for --missing
./pack-objects.h
OBJ_ANY cannot be set in pack-objects code
delta
show_object__ma_allow_any
arg_missing_action == MA_ALLOW_ANY
show_object__ma_allow_promisor
arg_missing_action == MA_ALLOW_PROMISOR
pack.windowmemory
pack.deltacachelimit
pack.writebitmaphashcache
pack.usebitmaps
pack.allowpackreuse
uploadpack.blobpackfileuri
value of uploadpack.blobpackfileuri must be of the form '<object-hash> <pack-hash> <uri>' (got '%s')
object already configured in another uploadpack.blobpackfileuri (got '%s')
git pack-objects --stdout [<options>...] [< <ref-list> | < <object-list>]
git pack-objects [<options>...] <base-name> [< <ref-list> | < <object-list>]
could not find pack '%s'
stdin_packs_found
stdin_packs_hints
could not get type of object %s in pack %s
loose object at %s could not be examined
BUG: fgets returned NULL, not EOF, not error!
fgets
expected edge object ID, got garbage:
expected object ID, got garbage:
--shallow 
not an object name '%s'
not a rev '%s'
bad revision '%s'
unable to add recent objects
get_object_list_from_bitmap
reuse_packfile_objects
cannot open pack index
unable to force loose object
loosen_unused_packed_objects/loosened
unable to pack objects reachable from tag %s
unable to get type of object %s
Compressing objects
inconsistency with delta count
Counting objects
invalid type %d
delta base offset overflow in pack for %s
delta base offset out of bound for %s
'size' is supposed to be the object size!
confusing delta dfs state in first pass: %d
confusing delta dfs state in second pass: %d
Delta compression using up to %d threads
object %s cannot be read
object %s inconsistent object length (%ju vs %ju)
suboptimal pack - out of memory
configured exclusion wasn't configured
Writing objects
<stdout>
write_pack_file
pack_to_stdout
failed to stat %s
failed utime() on %s
%s.bitmap
wrote %u objects while expecting %u
write_pack_file/wrote
ordered %u objects, expected %u
write_reused_pack_one
type >= 0
base_offset != 0
expected object at offset %ju in pack %s
find_reused_offset
recursive delta detected for object %s
delta size changed
deflate error (%d)
write_reuse_object: could not locate %s, expected at offset %ju in pack %s
bad packed object CRC for %s
corrupt packed object for %s
--verbose
--alt-odb
--i-still-use-this
'git pack-redundant' is nominated for removal.
If you still use this command, please add an extra
option, '--i-still-use-this', on the command line
and let us know you still use it by sending an e-mail
to <git@vger.kernel.org>.  Thanks.
Zero packs found!
Bad object ID on stdin: %s
There are %lu packs available in alt-odbs.
The smallest (bytewise) set of packs is:
containing %lu duplicate objects with a total size of %lukb.
A total of %lu unique objects were considered.
Redundant packs (with indexes):
%luMB of redundant packs in total.
Bad pack filename: %s
Filename %s not found in packed_git
pack everything
prune loose refs (default)
git pack-refs [<options>]
--stable
--unstable
patchid.stable
diff-tree 
diff 
index 
--- 
@@ -
git prune-packed [-n | --dry-run] [-q | --quiet]
report pruned objects
expire objects older than <time>
limit traversal to objects outside promisor packfiles
cannot prune in a precious-objects repo
%s/pack
git prune [-n] [-v] [--progress] [--expire <time>] [--] [<head>...]
bad sha1 file: %s
Removing stale temporary file %s
Unable to open directory %s
tmp_
Updating an unborn branch with changes added to the index.
pull with rebase
please commit or stash them.
fetch updated the current branch head.
fast-forwarding your working tree from
commit %s.
Cannot fast-forward your working tree.
After making sure that you saved anything precious from
$ git diff %s
output, run
$ git reset --hard
to recover.
Cannot merge multiple branches into empty head.
Cannot rebase onto multiple branches.
cannot rebase with locally recorded submodule modifications
--ff-only
rebase.autostash
control for recursive fetching of submodules
Options related to merging
(false|true|merges|preserve|interactive)
incorporate changes by rebasing rather than merging
allow fast-forward
Options related to fetching
force overwrite of local branch
number of submodules pulled in parallel
--rebase
Invalid value for %s: %s
git pull [<options>] [<repository> [<refspec>...]]
--no-ff
--ff
Invalid value for pull.ff: %s
branch.%s.rebase
--fork-point
heads/
refs/remotes/%s/%s
get_upstream_branch
pull.c
curr_branch_remote
--recurse-submodules=on
builtin/pull.c
submodule recursion option not understood
--show-forced-updates
--no-show-forced-updates
refspecs without repo?
not-for-merge
There is no candidate for rebasing against among the refs that you just fetched.
There are no candidates for merging among the refs that you just fetched.
Generally this means that you provided a wildcard refspec which had no
matches on the remote end.
You asked to pull from the remote '%s', but did not specify
a branch. Because this is not the default configured remote
for your current branch, you must specify a branch on the command line.
You are not currently on a branch.
Please specify which branch you want to rebase against.
Please specify which branch you want to merge with.
See git-pull(1) for details.
    git pull %s %s
<remote>
<branch>
There is no tracking information for the current branch.
If you wish to set tracking information for this branch you can do so with:
    git branch --set-upstream-to=%s/%s %s
Your configuration specifies to merge with the ref '%s'
from the remote, but no such ref was fetched.
unable to access commit %s
Pulling without specifying how to reconcile divergent branches is
discouraged. You can squelch this message by running one of the following
commands sometime before your next pull:
  git config pull.rebase false  # merge (the default strategy)
  git config pull.rebase true   # rebase
  git config pull.ff only       # fast-forward only
You can replace "git config" with "git config --global" to set a default
preference for all repositories. You can also pass --rebase, --no-rebase,
or --ff-only on the command line to override the configured default per
invocation.
--cleanup=%s
--no-autostash
--autostash
--allow-unrelated-histories
--rebase-merges
--preserve-merges
--interactive
--verify-signatures
ignoring --verify-signatures for rebase
--onto
--checkout
repository
push all refs
mirror all refs
delete refs
push tags (can't be used with --all or --mirror)
force updates
force-with-lease
<refname>:<expect>
require old value of ref to be at this value
force-if-includes
require remote updates to be integrated locally
(check|on-demand|no)
control recursive pushing of submodules
use thin pack
receive pack program
set upstream for git pull/status
prune locally removed refs
bypass pre-push hook
follow-tags
push missing but relevant tags
signed
(yes|no|if-asked)
GPG sign the push
request atomic transaction on remote side
push-option
--delete is incompatible with --all, --mirror and --tags
--delete doesn't make sense without any refs
refs/tags/*
No configured push destination.
Either specify the URL from the command-line or configure a remote repository using
    git remote add <name> <url>
and then push using the remote name
    git push <name>
--all and --tags are incompatible
--all can't be combined with refspecs
--mirror and --tags are incompatible
--mirror can't be combined with refspecs
--all and --mirror are incompatible
push options must not have new line characters
push.followtags
push.gpgsign
if-asked
Invalid value for '%s'
push.recursesubmodules
push.pushoption
color.push.
push.useforceifincludes
git push [<options>] [<repository> [<refspec>...]]
tag shorthand without <tag>
:refs/tags/%s
--delete only accepts plain target ref names
%s%s:%s
%s:%s
You didn't specify any refspecs to push, and push.default is "nothing".
The current branch %s has no upstream branch.
To push the current branch and set the remote as upstream, use
    git push --set-upstream %s %s
The current branch %s has multiple upstream branches, refusing to push.
You are pushing to remote '%s', which is not the upstream of
your current branch '%s', without telling me what to push
to update which remote branch.
To choose either option permanently, see push.default in 'git help config'.
The upstream branch of your current branch does not match
the name of your current branch.  To push to the upstream branch
on the remote, use
    git push %s HEAD:%s
To push to the branch of the same name on the remote, use
    git push %s HEAD
receivepack
underlying transport does not support --%s option
Pushing to %s
builtin/push.c
transport_push
failed to push some refs to '%s'
no-dual-color
use simple diff colors
passed to 'git log'
left-only
only emit output related to the first range
right-only
only emit output related to the second range
not a commit range: '%s'
single arg format must be symmetric range
%s..%.*s
%.*s..%s
need two commit ranges
git range-diff [<options>] <old-base>..<old-tip> <new-base>..<new-tip>
git range-diff [<options>] <old-tip>...<new-tip>
git range-diff [<options>] <base> <old-tip> <new-tip>
index-output
write resulting index to <file>
empty
only empty the index
Merging
perform a merge in addition to a read
trivial
3-way merge if no file level merging required
3-way merge in presence of adds and removes
same as -m, but discard unmerged entries
<subdirectory>/
read the tree into the index under <subdirectory>/
update working tree with merge result
gitignore
allow explicitly ignored files to be overwritten
don't check the working tree after merging
don't update the index or the work tree
no-sparse-checkout
skip applying sparse checkout filter
debug-unpack
debug unpack-trees
suppress feedback messages
Which one? -m, --reset, or --prefix?
You need to resolve your current index first
failed to unpack tree object %s
read-tree: emptying the index with no arguments is deprecated; use --empty
passing trees as arguments contradicts --empty
-u and -i at the same time makes no sense
%s is meaningless without -m, --reset, or --prefix
--exclude-per-directory is meaningless unless -u
you must specify at least one tree to merge
builtin/read-tree.c
more than one --exclude-per-directory given.
git read-tree [(-m [--trivial] [--aggressive] | --reset | --prefix=<prefix>) [-u [--exclude-per-directory=<gitignore>] | -i]] [--no-sparse-checkout] [--index-output=<file>] (--empty | <tree-ish1> [<tree-ish2> [<tree-ish3>]])
I cannot read more than %d trees
* %d-way merge
ent#%d
%06o #%d %s %.8s
(missing)
(conflict)
keep-empty
keep commits which start empty
allow commits with empty messages
rebase-merges
rebase merge commits
rebase-cousins
keep original branch points of cousins
autosquash
move commits that begin with squash!/fixup!
sign commits
display a diffstat of what changed upstream
continue rebase
skip commit
edit-todo
edit the todo list
show the current patch
shorten-ids
shorten commit ids in the todo list
expand-ids
expand commit ids in the todo list
check-todo-list
check the todo list
rearrange-squash
rearrange fixup/squash lines
add-exec-commands
insert exec commands in todo list
onto
restrict-revision
restrict revision
squash-onto
squash onto
the upstream commit
head name
rebase strategy
strategy-opts
strategy options
switch-to
the branch or commit to checkout
onto-name
onto name
the command to run
reschedule-failed-exec
automatically re-schedule any `exec` that fails
--[no-]rebase-cousins has no effect without --rebase-merges
rebase onto given branch instead of upstream
keep-base
use the merge-base of upstream and branch as the current base
allow pre-rebase hook to run
be quiet. implies --no-stat
do not show diffstat of what changed upstream
add a Signed-off-by trailer to each commit
make committer date match author date
reset-author-date
ignore author date and use current date
synonym of --reset-author-date
passed to 'git apply'
ignore changes in whitespace
force-rebase
cherry-pick all commits, even if unchanged
skip current patch and continue
abort and check out the original branch
abort but keep HEAD where it is
edit the todo list during an interactive rebase
show the patch file being applied or merged
use apply strategies to rebase
use merging strategies to rebase
let the user edit the list of commits to rebase
preserve-merges
(DEPRECATED) try to recreate merges instead of ignoring them
{drop,keep,ask}
how to handle commits that become empty
move commits that begin with squash!/fixup! under -i
add exec lines after each commit of the editable list
allow rebasing commits with empty messages
try to rebase merges instead of skipping them
use 'merge-base --fork-point' to refine upstream
use the given merge strategy
option
pass the argument through to the merge strategy
rebase all reachable commits up to the root(s)
reapply-cherry-picks
apply all changes, even those already present upstream
%s/applying
It looks like 'git am' is in progress. Cannot rebase.
%s/rewritten
%s/interactive
git rebase --preserve-merges is deprecated. Use --rebase-merges instead.
cannot combine '--keep-base' with '--onto'
cannot combine '--keep-base' with '--root'
cannot combine '--root' with '--fork-point'
No rebase in progress?
The --edit-todo action can only be used during interactive rebase.
builtin/rebase.c
interactive-exec
Cannot read HEAD
could not read index
You must edit all merge conflicts and then
mark them as resolved using git add
could not discard worktree changes
could not move back to %s
could not remove '%s'
action: %d
git rebase (--continue | --abort | --skip)
rm -fr "%s"
It seems that there is already a %s directory, and
I wonder if you are in the middle of another rebase.  If that is the
case, please try
If that is not the case, please
and run me again.  I am stopping in case you still have something
valuable there.
--whitespace=fix
--whitespace=strip
switch `C' expects a numerical value
--whitespace=
error-all
Invalid whitespace option: '%s'
--empty
--reapply-cherry-picks
-S%s
--exec
exec %s
no-rebase-cousins
Unknown mode: %s
--ignore-whitespace
--committer-date-is-author-date
--ignore-date
 --%s
--strategy requires --merge or --interactive
unhandled rebase type (%d)
--root without --onto
 --progress
cannot combine apply options with merge options
Unknown rebase backend: %s
options.type was just set above; should be unreachable.
--reschedule-failed-exec requires --exec or --interactive
cannot combine '--signoff' with '--preserve-merges'
--signoff
cannot combine '--preserve-merges' with '--rebase-merges'
error: cannot combine '--preserve-merges' with '--reschedule-failed-exec'
invalid upstream '%s'
Could not create new root commit
--root
'%s': need exactly one merge base with branch
'%s': need exactly one merge base
Does not point to a valid commit '%s'
fatal: no such branch/commit '%s'
No such ref: %s
Could not resolve HEAD to a revision
unexpected number of arguments left to parse
Please commit or stash them.
%s: checkout %s
could not switch to %s
HEAD is up to date.
Current branch %s is up to date.
HEAD is up to date, rebase forced.
Current branch %s is up to date, rebase forced.
The pre-rebase hook refused to rebase.
Changes to %s:
Changes from %s to %s:
Could not detach HEAD
Fast-forwarded %s to %s.
rebase finished: %s onto %s
detached HEAD
Fast-forwarded
--no-keep-empty
--keep-empty
git rebase--interactive [<options>]
rebase.abbreviatecommands
a base commit must be provided with --upstream or --onto
invalid command '%d'
could not generate todo list
unusable todo list
%s...%s
could not create temporary %s
could not mark as interactive
rebase-merge/interactive
rebase-merge/squash-onto
could not read '%s'.
unusable todo list: '%s'
could not write '%s'.
unrecognized empty type '%s'; valid values are "drop", "keep", and "ask".
git rebase [-i] [options] [--exec <cmd>] [--onto <newbase> | --keep-base] [<upstream> [<branch>]]
git rebase [-i] [options] [--exec <cmd>] [--onto <newbase>] --root [<branch>]
git rebase --continue | --abort | --skip | --edit-todo
rebase.autosquash
rebase.reschedulefailedexec
rebase.forkpoint
rebase-merge
edit_todo
show_current_patch
rebase (%s)
could not get 'onto': '%s'
orig-head
invalid orig-head: '%s'
allow_rerere_autoupdate
--rerere-autoupdate
--no-rerere-autoupdate
ignoring invalid allow_rerere_autoupdate: '%s'
gpg_sign_opt
strategy_opts
exec commands cannot contain newlines
empty exec command
%s requires the merge backend
Please specify which branch you want to rebase against.
See git-rebase(1) for details.
    git rebase '<branch>'
If you wish to set tracking information for this branch you can do so with:
    git branch --set-upstream-to=%s/<branch> %s
GIT_CHERRY_PICK_HELP
GIT_SEQUENCE_EDITOR
state_dir
upstream_name
head_name
orig_head
onto_name
revisions
restrict_revision
git_am_opt
diffstat
force_rebase
switch_to
keep_empty
allow_empty_message
--allow-empty-message
rebase_merges
rebase_cousins
rebase_root
squash_onto
git_format_patch_opt
GIT_SEQUENCE_EDITOR=:; export GIT_SEQUENCE_EDITOR; 
git-rebase--preserve-merges
git_rebase__preserve_merges
Unhandled rebase type %d
. git-sh-setup && . %s && %s
stopped-sha
Nothing to do
Resolve all conflicts manually, mark them as resolved with
"git add/rm <conflicted_files>", then run "git rebase --continue".
You can instead skip this commit: run "git rebase --skip".
To abort and get back to the state before "git rebase", run "git rebase --abort".
--resolved
--resolvemsg=%s
--skip
--show-current-patch
rebased-patches
--stdout
--full-index
--cherry-pick
--right-only
--src-prefix=a/
--dst-prefix=b/
--no-renames
--no-cover-letter
--pretty=mboxrd
--no-base
git encountered an error while preparing the patches to replay
these revisions:
    %s
As a result, git cannot rebase them.
--rebasing
--patch-format=mboxrd
move_to_original_branch without onto
rebase finished: returning to %s
-%s-rerere-autoupdate
unset %s; 
First, rewinding head to replay your work on top of it...
stateless-rpc
advertise-refs
reject-thin-pack-for-testing
You must specify a directory.
'%s' does not appear to be a git repository
version 1
builtin/receive-pack.c
inconsistent push options
git receive-pack <git-dir>
receive
receive.denydeletes
receive.denynonfastforwards
receive.unpacklimit
receive.fsck.skiplist
%cskiplist=%s
receive.fsck.
%c%s=%s
Skipping unknown msg id '%s'
receive.fsckobjects
transfer.fsckobjects
receive.denycurrentbranch
receive.denydeletecurrent
repack.usedeltabaseoffset
receive.updateserverinfo
receive.shallowupdate
receive.certnonceseed
receive.certnonceslop
receive.advertiseatomic
receive.advertisepushoptions
receive.keepalive
receive.maxinputsize
receive.procreceiverefs
transfer.advertisesid
refuse
updateinstead
%s:%ju
%ju-%.*s
capabilities^{}
.have
report-status report-status-v2 delete-refs side-band-64k quiet
 atomic
 ofs-delta
 push-cert=%s
 push-options
 session-id=%s
 object-format=%s
 agent=%s
%s %s%c%s
shallow 
protocol error: expected shallow sha, got '%s'
report-status
report-status-v2
side-band-64k
push-options
error: unsupported object format '%s'
session-id
transfer
client-sid
push-cert
protocol error: got an unexpected packet
push-cert-end
protocol error: expected old/new/ref, got '%s'
protocol error: got both push certificate and unsigned commands
malformed push certificate %.*s
unable to create temporary object directory
--strict%s
--max-input-size=%ju
unpack-objects abnormal exit
localhost
--keep=receive-pack %ju on %s
index-pack fork failed
index-pack abnormal exit
eof before pack header was fully read
protocol error (pack signature mismatch detected)
protocol error (pack version unsupported)
unknown error in parse_pack_header
--pack_header=%u,%u
shallow update not allowed
GIT_SHALLOW_FILE
unpacker error
pre-receive hook declined
unable to migrate objects to permanent storage
fail to run proc-receive hook
missing necessary objects
deny deleting a hidden ref
deny updating a hidden ref
refusing update to broken symref '%s'
broken symref
refusing inconsistent update between symref '%s' (%s..%s) and its target '%s' (%s..%s)
inconsistent aliased update
error: 
proc-receive
cannot find hook 'proc-receive'
version=1%c%s
version=1
version=
fail to negotiate version with proc-receive hook
proc-receive version '%d' is not supported
%s %s %s
fail to write commands to proc-receive hook
fail to write push-options to proc-receive hook
proc-receive exited abnormally
proc-receive reported incomplete status line: '%s'
proc-receive reported 'option' without a matching 'ok/ng' directive
refname
old-oid
new-oid
fall-through
proc-receive reported bad status '%s' on ref '%s'
proc-receive reported status on unknown ref: %s
proc-receive reported status on unexpected ref: %s
failed
proc-receive failed to report status
atomic push failure
transaction failed to start
atomic transaction failed
refusing to create funny ref '%s' remotely
funny refname
updating the current branch
refusing to update checked out branch: %s
branch is currently checked out
unpack should have generated %s, but I can't find it!
bad pack
denying ref deletion for %s
deletion prohibited
deleting the current branch
refusing to delete the current branch: %s
deletion of the current branch prohibited
Invalid denyDeleteCurrent setting
bad sha1 objects for %s
bad ref
denying non-fast-forward %s (you should pull first)
hook declined to update %s
hook declined
Allowing deletion of corrupt ref.
Deleting a non-existent ref.
failed to delete
shallow error
failed to update ref
warning: 
By default, updating the current branch in a non-bare repository
is denied, because it will make the index and work tree inconsistent
with what you pushed, and will require 'git reset --hard' to match
the work tree to HEAD.
You can set the 'receive.denyCurrentBranch' configuration variable
to 'ignore' or 'warn' in the remote repository to allow pushing into
its current branch; however, this is not recommended unless you
arranged to update its work tree to match what you pushed in some
other way.
To squelch this message and still keep the default behaviour, set
'receive.denyCurrentBranch' configuration variable to 'refuse'.
By default, deleting the current branch is denied, because the next
'git clone' won't result in any file checked out, causing confusion.
You can set 'receive.denyDeleteCurrent' configuration variable to
'warn' or 'ignore' in the remote repository to allow deleting the
current branch, with or without a warning message.
To squelch this message, you can set it to 'refuse'.
denyCurrentBranch = updateInstead needs a worktree
GIT_DIR=%s
--ignore-submodules
--refresh
Up-to-date check failed
Working directory has unstaged changes
Working directory has staged changes
Could not update working tree to new HEAD
GIT_WORK_TREE=%s
push-to-checkout hook declined
shallow: update_shallow_ref %s
BUG: connectivity check has not been run on ref %s
connectivity check skipped???
unpack %s
ng %s %s
ok %s
option refname %s
option old-oid %s
option new-oid %s
option forced-update
GIT_PUSH_OPTION_%d=%s
GIT_PUSH_OPTION_COUNT=%d
GIT_PUSH_OPTION_COUNT
GIT_PUSH_CERT=%s
GIT_PUSH_CERT_SIGNER=%s
GIT_PUSH_CERT_KEY=%s
GIT_PUSH_CERT_STATUS=%c
GIT_PUSH_CERT_NONCE=%s
GIT_PUSH_CERT_NONCE_STATUS=%s
GIT_PUSH_CERT_NONCE_SLOP=%ld
nonce
MISSING
UNSOLICITED
SLOP
exists
--expire=
'%s' is not a valid timestamp
--expire-unreachable=
--stale-fix
--rewrite
--updateref
--single-worktree
Marking reachable objects...
%s points nowhere!
reflogexpire
reflogexpireunreachable
refs/stash
builtin/reflog.c
not a worktree ref: %s
no reflog specified to delete
not a reflog: %s
no reflog for '%s'
invalid ref format: %s
Command input error
builtin/remote-ext.c
capabilities
connect 
Bad command
Can't run specified command
GIT_EXT_SERVICE
GIT_EXT_SERVICE_NOPREFIX
Bad remote-ext placeholder '%%%c'.
remote-ext command has incomplete placeholder
%s %s%c
%s %s%chost=%s%c
*connect
Bad URL syntax
Input error
Copying data between file descriptors failed
Bad command: %s
rename
set-head
set-branches
set-url
git remote [-v | --verbose]
git remote add [-t <branch>] [-m <master>] [-f] [--tags | --no-tags] [--mirror=<fetch|push>] <name> <url>
git remote rename <old> <new>
git remote remove <name>
git remote set-head <name> (-a | --auto | -d | --delete | <branch>)
git remote [-v | --verbose] show [-n] <name>
git remote prune [-n | --dry-run] <name>
git remote [-v | --verbose] update [-p | --prune] [(<group> | <remote>)...]
git remote set-branches [--add] <name> <branch>...
git remote get-url [--push] [--all] <name>
git remote set-url [--push] <name> <newurl> [<oldurl>]
git remote set-url --add <name> <newurl>
git remote set-url --delete <name> <url>
%s (fetch)
%s (push)
fetch the remote branches
import all tags and associated objects when fetching
or do not fetch any tag at all (--no-tags)
branch(es) to track
master
master branch
(push|fetch)
set up remote as a mirror to push to or fetch from
specifying a master branch makes no sense with --mirror
specifying branches to track makes sense only with fetch mirrors
remote %s already exists.
builtin/remote.c
refs/remotes/%s/HEAD
remote add
Could not setup master '%s'
unknown mirror argument: %s
git remote add [<options>] <name> <url>
refs/%s:refs/%s
refs/heads/%s:refs/remotes/%s/%s
Updating %s
No such remote: '%s'
remote.%s
Could not rename config section '%s' to '%s'
:refs/remotes/%s/
Not updating non-default fetch refspec
Please update the configuration manually if necessary.
branch.%s.pushRemote
deleting '%s' failed
remote: renamed %s to %s
creating '%s' failed
remote.%s.push
remotes/%s
branches/%s
.remote
.merge
.rebase
.pushremote
more than one %s
could not set '%s'
could not unset '%s'
The %s configuration remote.pushDefault in:
%s:%d
now names the non-existent remote '%s'
remote.pushdefault
branch.%s.%s
branch.%s.pushremote
remote: remove
Note: A branch outside the refs/remotes/ hierarchy was not removed;
to delete it, use:
Note: Some branches outside the refs/remotes/ hierarchy were not removed;
to delete them, use:
  git branch -d %s
Could not remove config section '%s'
set refs/remotes/<name>/HEAD according to remote
delete refs/remotes/<name>/HEAD
Cannot determine remote HEAD
Multiple remote HEAD branches. Please choose one explicitly with:
  git remote set-head %s %s
Could not delete %s
Not a valid ref: %s
remote set-head
Could not setup %s
%s/HEAD set to %s
Could not get fetch map for refspec %s
refs/heads/*
(matching)
(delete)
add branch
no remote specified
git remote set-branches <name> <branch>...
git remote set-branches --add <name> <branch>...
No such remote '%s'
query push URLs rather than fetch URLs
return all URLs
no URLs configured for remote '%s'
manipulate push URLs
add URL
delete URLs
--add --delete doesn't make sense
remote.%s.pushurl
Invalid old URL pattern: %s
No such URL found: %s
Will not delete all non-push URLs
do not query remotes
* remote %s
  Fetch URL: %s
(no URL)
  Push  URL: %s
  HEAD branch: %s
(not queried)
    %s
  Remote branch:%s
  Remote branches:%s
 (status not queried)
  Local branch configured for 'git pull':
  Local branches configured for 'git pull':
  Local refs will be mirrored by 'git push'
  Local ref configured for 'git push'%s:
  Local refs configured for 'git push'%s:
git remote show [<options>] <name>
 new (next fetch will store in remotes/%s)
 tracked
 stale (use 'git remote prune' to remove)
 ???
    %-*s
invalid branch.%s.merge; cannot rebase onto > 1 branch
    %-*s 
rebases interactively onto remote %s
rebases interactively (with merges) onto remote %s
rebases onto remote %s
 merges with remote %s
merges with remote %s
%-*s    and with remote %s
up to date
fast-forwardable
local out of date
    %-*s forces to %-*s (%s)
    %-*s pushes to %-*s (%s)
    %-*s forces to %s
    %-*s pushes to %s
git remote prune [<options>] <name>
 %s will become dangling!
 %s has become dangling!
Pruning %s
URL: %s
remote: prune
 * [would prune] %s
 * [pruned] %s
prune remotes after fetching
--multiple
git remote update [<options>] [<group> | <remote>]...
remotes.default
  HEAD branch (remote HEAD is ambiguous, may be one of the following):
pack everything in a single pack
same as -a, and turn unreachable objects loose
remove redundant packs, and run git-prune-packed
pass --no-reuse-delta to git-pack-objects
pass --no-reuse-object to git-pack-objects
do not run git-update-server-info
pass --local to git-pack-objects
write bitmap index
pass --delta-islands to git-pack-objects
approxidate
with -A, do not loosen objects older than this
with -a, repack unreachable objects
size of the window used for delta compression
bytes
same as the above, but limit memory size instead of entries count
limits the maximum delta depth
limits the maximum number of threads
maximum size of each packfile
pack-kept-objects
repack objects in packs marked with .keep
do not repack this pack
geometric
find a geometric progression with factor <N>
cannot delete packs in a precious-objects repo
--keep-unreachable and -A are incompatible
--geometric is incompatible with -A, -a
.tmp-%d-pack
--keep-true-parents
--honor-pack-keep
--non-empty
--write-bitmap-index
--write-bitmap-index-quiet
--delta-islands
--keep-pack=%s-%s.pack
GIT_REF_PARANOIA=1
--unpack-unreachable
--keep-unreachable
--pack-loose-unreachable
--stdin-packs
--incremental
repack: Expecting full hex object ID lines only from pack-objects.
Nothing new to pack.
%s/pack-%s%s
%s-%s%s
missing required file: %s
could not unlink: %s
.pack
GIT_TEST_MULTI_PACK_INDEX
repack.packkeptobjects
repack.writebitmaps
pack.writebitmaps
repack.usedeltaislands
git repack [<options>]
cannot open index for %s
pack %s too large to consider in geometric progression
pack %s too large to roll up
--window=%s
--window-memory=%s
--depth=%s
--threads=%s
--max-pack-size=%s
--no-reuse-delta
--no-reuse-object
--local
--delta-base-offset
%s/%s.keep
%s-%s.promisor
could not finish pack-objects to repack promisor objects
could not start pack-objects to repack promisor objects
.idx
.rev
.bitmap
.promisor
%s.pack
list replace refs
delete replace refs
edit existing object
graft
change a commit's parents
convert-graft-file
convert existing graft file
replace the ref if it exists
do not pretty-print contents for --edit
use this format
--format cannot be used when not listing
-f only makes sense when writing a replacement
--raw only makes sense with --edit
-d needs at least one argument
bad number of arguments
-e needs exactly one argument
-g needs at least one argument
--convert-graft-file takes no argument
only one pattern can be given with -l
builtin/replace.c
invalid cmdmode %d
git replace [-f] <object> <replacement>
git replace [-f] --edit <object>
git replace [-f] --graft <commit> [<parent>...]
git replace [-f] --convert-graft-file
git replace -d <object>...
git replace [--format=<format>] [-l [<pattern>]]
replace ref '%s' not found
Deleted replace ref '%s'
Objects must be of the same type.
'%s' points to a replaced object of type '%s'
while '%s' points to a replacement object of type '%s'.
'%s' is not a valid ref name
replace ref '%s' already exists
not a valid object name: '%s'
unable to get object type for %s
REPLACE_EDITOBJ
editing object file failed
new object is the same as the old one: '%s'
replacement
unable to open %s for writing
cat-file reported failure
unable to open %s for reading
unable to spawn mktree
unable to read from mktree
mktree reported failure
mktree did not return an object name
unable to fstat %s
unable to write object to database
the original commit '%s' has a gpg signature
the signature will be removed in the replacement commit!
could not write replacement commit for: '%s'
graft for '%s' unnecessary
new commit is the same as the old one: '%s'
parent 
could not parse %s as a commit
bad mergetag in commit '%s'
malformed mergetag in commit '%s'
original commit '%s' contains mergetag '%s' that is discarded; use --edit instead of --graft
could not convert the following graft(s):
medium
invalid replace format '%s'
valid formats are 'short', 'medium' and 'long'
%s -> %s
%s (%s) -> %s (%s)
register clean resolutions in index
forget
'git rerere forget' without paths is deprecated
clear
remaining
preimage
unable to generate diff for '%s'
git rerere [clear | forget <path>... | status | remaining | diff | gc]
--- a/%s
+++ b/%s
be quiet, only report errors
mixed
reset HEAD and index
soft
reset only HEAD
hard
reset HEAD, index and working tree
reset HEAD but keep local changes
record only the fact that removed paths will be added later
Failed to resolve '%s' as a valid revision.
Failed to resolve '%s' as a valid tree.
--patch is incompatible with --{hard,mixed,soft}
builtin/reset.c
patch-interactive
--mixed with paths is deprecated; use 'git reset -- <paths>' instead.
Cannot do %s reset with paths.
%s reset is not allowed in a bare repository
-N can only be used with --mixed
Unstaged changes after reset:
It took %.2f seconds to enumerate unstaged changes after reset.  You can
use '--quiet' to avoid this.  Set the config setting reset.quiet to true
to make this the default.
Could not reset index file to revision '%s'.
Could not write new index file.
git reset [--mixed | --soft | --hard | --merge | --keep] [-q] [<commit>]
git reset [-q] [<tree-ish>] [--] <pathspec>...
git reset [-q] [--pathspec-from-file [--pathspec-file-nul]] [<tree-ish>]
git reset --patch [<tree-ish>] [--] [<pathspec>...]
Cannot do a %s reset in the middle of a merge.
You do not have a valid HEAD.
Failed to find tree of HEAD.
Failed to find tree of %s.
updating HEAD
reset: moving to %s
reset: %s
HEAD is now at %s
--missing=
cannot combine --exclude-promisor-objects and --missing
--header
--timestamp
--bisect
--bisect-all
--bisect-vars
--use-bitmap-index
--test-bitmap
--progress=
object filtering requires --objects
--filter-provided-objects
--filter-print-omitted
--no-object-names
--object-names
--disk-usage
rev-list does not support display of notes
marked counting is incompatible with --objects
print
bisect_rev
bisect_nr
bisect_good
bisect_bad
bisect_all
bisect_steps
%s='%s'
%s=%d
%ju 
unable to get disk usage of %s
missing %s object '%s'
unexpected missing %s object '%s'
builtin/rev-list.c
unhandled missing_action
------
--parseopt
--sq-quote
--local-env-vars
--resolve-git-dir
--resolve-git-dir requires an argument
not a gitdir '%s'
--git-path
--git-path requires an argument
-n requires an argument
--path-format
--path-format requires an argument
absolute
relative
unknown argument to --path-format: %s
--default
--default requires an argument
--prefix
--prefix requires an argument
--revs-only
--no-revs
--flags
--no-flags
--short
--sq
--symbolic
--symbolic-full-name
--abbrev-ref
loose
unknown mode for --abbrev-ref: %s
--disambiguate=
refs/bisect/bad
refs/bisect/good
--branches
--glob=
--remotes
--exclude=
--show-toplevel
this operation must be run in a work tree
--show-superproject-working-tree
--show-prefix
--show-cdup
--absolute-git-dir
%s%s.git
--git-common-dir
--is-inside-git-dir
--is-inside-work-tree
--is-bare-repository
--is-shallow-repository
--shared-index-path
sharedindex.%s
--since=
--max-age=
--after=
--before=
--min-age=
--until=
--show-object-format
storage
input
unknown mode for --show-object-format: %s
git rev-parse --parseopt [<options>] -- [<args>...]
keep-dashdash
keep the `--` passed as an arg
stop-at-non-option
stop parsing after the first non-option argument
stuck-long
output in stuck long form
*=?!
set --
premature end of input
no usage string given before the `--' separator
 --no-%s
 -%c
%s%ju
--dense
--branches=
--ignore-missing
--max-count=
--no-merges
--min-parents=
--no-min-parents
--max-parents=
--no-max-parents
--parents
--pretty
--remotes=
--sparse
--tags=
--date-order
builtin/rev-parse.c
Needed a single revision
%s^%d
refname '%s' is ambiguous
revert failed
cherry-pick failed
end revert or cherry-pick sequence
resume revert or cherry-pick sequence
cancel revert or cherry-pick sequence
skip current commit and continue
no-commit
don't automatically commit
edit the commit message
no-op (backward compatibility)
mainline
parent-number
select mainline parent
merge strategy
option for merge strategy
append commit name
preserve initially empty commits
keep-redundant-commits
keep redundant, empty commits
--quit
--continue
run_sequencer
revert.c
cmd == 'a'
--abort
--no-commit
--mainline
--strategy
--strategy-option
--edit
git revert [<options>] <commit-ish>...
git revert <subcommand>
git cherry-pick [<options>] <commit-ish>...
git cherry-pick <subcommand>
option `%s' expects a number greater than zero
%s: %s cannot be used with %s
No pathspec was given. Which files should I remove?
please stage your changes to .gitmodules or stash them to proceed
not removing '%s' recursively without -r
builtin/rm.c
rm '%s'
git rm: unable to remove %s
git rm: '%s'
do not list removed files
only remove from the index
override the up-to-date check
allow recursive removal
ignore-unmatch
exit with a zero status even if nothing matched
git rm [<options>] [--] <file>...
the following file has staged content different from both the
file and the HEAD:
the following files have staged content different from both the
file and the HEAD:
(use -f to force removal)
the following file has changes staged in the index:
the following files have changes staged in the index:
(use --cached to keep the file, or -f to force removal)
the following file has local modifications:
the following files have local modifications:
    %s
git-receive-pack
remote name
use stateless RPC protocol
read refs from stdin
helper-status
print status from remote helper
Destination %s is not a uri for %s
support for protocol v2 not implemented yet
builtin/send-pack.c
Everything up-to-date
git send-pack [--all | --mirror] [--dry-run] [--force] [--receive-pack=<git-receive-pack>] [--verbose] [--thin] [--atomic] [<host>:]<directory> [<ref>...]
  --all and explicit <ref> specification are mutually exclusive.
no match
non-fast forward
fetch first
needs force
stale info
remote ref updated since checkout
already exists
<none>
%cN <%cE>
committer
group by committer rather than author
sort output according to the number of commits per author
suppress commit descriptions, only provides commit count
show the email address of each author
<w>[,<i1>[,<i2>]]
linewrap output
group
field
group by field
builtin/shortlog.c
too many arguments given outside repository
%s (%d):
      %s
[PATCH
 <%.*s>
trailer:
unknown group type: %s
git shortlog [<options>] [<revision-range>] [[--] <path>...]
git log --pretty=short | git shortlog [<options>]
Commit: 
using multiple --group options with stdin is not supported
using --group=trailer with stdin is not supported
unhandled shortlog group
show remote-tracking and local branches
show remote-tracking branches
color '*!+-' corresponding to the branch
more
show <n> more commits after the common ancestor
synonym to more=-1
no-name
suppress naming strings
include the current branch
sha1-name
name commits with their object names
show possible merge bases
show refs unreachable from any other ref
topo-order
show commits in topological order
topics
show only commits not on the first branch
show merges reachable from only one tip
date-order
topologically sort, maintaining date order where possible
<n>[,<base>]
show <n> most recent ref-log entries starting at base
--reflog is incompatible with --all, --remotes, --independent or --merge-base
no branches given, and HEAD is not valid
--reflog option needs one branch name
only %d entries can be shown at one time.
no such ref %s
(%s) %s
%s@{%d}
No revs to be shown.
builtin/show-branch.c
cannot handle more than %d revs.
'%s' is not a valid ref.
cannot find commit %s (%s)
%c [%s] 
%s%c%s [%s] 
%s%c%s
unrecognized reflog param '%s'
showbranch.default
color.showbranch
git show-branch [-a | --all] [-r | --remotes] [--topo-order | --date-order]
[--current] [--color[=<when>] | --no-color] [--sparse]
[--more=<n> | --list | --independent | --merge-base]
[--no-name | --sha1-name] [--topics] [(<rev> | <glob>)...]
git show-branch (-g | --reflog)[=<n>[,<base>]] [--list] [<ref>]
ignoring %s; cannot handle more than %d refs
no matching refs with %s
bad sha1 reference %s
(unavailable)
[PATCH] 
[%s] 
%s~%d
hash-algorithm
Unknown hash algorithm
unable to read header
unknown index version
unable to read index
corrupt index file
unable to read entry %u/%u
%u %s
unable to read sha1 %u/%u
unable to read crc %u/%u
unable to read 32b offset %u/%u
inconsistent 64b offset index
unable to read 64b offset %u
%ju %s (%08x)
git show-index [--object-format=<hash-algorithm>]
--verify requires a reference
'%s' - not a valid ref
No match
only show tags (can be combined with heads)
only show heads (can be combined with tags)
stricter reference checking, requires exact ref path
show the HEAD reference, even if it would be filtered out
dereference
dereference tags into object IDs
only show SHA1 hash using <n> digits
do not print results to stdout (useful with --verify)
exclude-existing
show refs from stdin that aren't in local repository
builtin/show-ref.c
git show-ref [-q | --quiet] [--verify] [--head] [-d | --dereference] [-s | --hash[=<n>]] [--abbrev[=<n>]] [--tags] [--heads] [--] [<pattern>...]
git show-ref --exclude-existing[=<pattern>]
ref '%s' ignored
git show-ref: bad ref %s (%s)
%s %s^{}
reapply
disable
git sparse-checkout (init|list|set|add|reapply|disable) <options>
this worktree is not sparse (sparse-checkout file may not exist)
git sparse-checkout list
cone
initialize the sparse-checkout in cone mode
sparse-index
toggle the use of a sparse index
failed to modify sparse-index config
failed to open '%s'
!/*/
!/*/
git sparse-checkout init [--cone] [--[no-]sparse-index]
unable to upgrade repository format to enable worktreeConfig
extensions.worktreeConfig
failed to set extensions.worktreeConfig setting
failed to create directory for sparse-checkout file
!%s/*/
read patterns from standard in
git sparse-checkout (set|add) (--stdin | <patterns>)
unable to load existing sparse-checkout patterns
unable to unquote C-style string '%s'
could not normalize path %s
git sparse-checkout reapply
error while refreshing working directory
git sparse-checkout disable
GIT_TEST_STASH_USE_BUILTIN
the stash.useBuiltin support has been removed!
See its entry in 'git help config' for details.
%s.stash.%ju
save
stash.showstat
stash.showpatch
stash.showincludeuntracked
stash.usebuiltin
git stash list [<options>]
git stash show [<options>] [<stash>]
git stash drop [-q|--quiet] [<stash>]
git stash ( pop | apply ) [--index] [-q|--quiet] [<stash>]
git stash branch <branchname> [<stash>]
git stash clear
git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
          [-u|--include-untracked] [-a|--all] [-m|--message <message>]
          [--pathspec-from-file=<file> [--pathspec-file-nul]]
          [--] [<pathspec>...]]
git stash save [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
          [-u|--include-untracked] [-a|--all] [<message>]
keep-index
keep index
stash in patch mode
quiet mode
include-untracked
include untracked files in stash
include ignore files
stash message
subcommand wasn't specified; 'push' can't be assumed due to unexpected token '%s'
git stash [push [-p|--patch] [-k|--[no-]keep-index] [-q|--quiet]
          [-u|--include-untracked] [-a|--all] [-m|--message <message>]
          [--] [<pathspec>...]]
Can't use --patch and --include-untracked or --all at the same time
Did you forget to 'git add'?
No local changes to save
Cannot initialize stash
Cannot save the current status
Saved working directory and index state %s
--binary
--index
--hard
--no-recurse-submodules
--no-overlay
Cannot remove worktree changes
(no branch)
git stash
git@stash
You do not have the initial commit yet
%s: %s 
index on %s
Cannot save the current index state
Cannot save the untracked files
Cannot save the current worktree state
WIP on %s
On %s: 
Cannot record working tree state
--remove
untracked files on %s
No changes selected
--ignore-skip-worktree-entries
Created via "git stash store".
Cannot update %s with %s
attempt to recreate the index
git stash apply [--index] [-q|--quiet] [<stash>]
 '%s'
Too many revisions specified:%s
No stash entries found.
%s@{0}
0123456789
%s@{%s}
%s is not a valid reference
%s^3:
%s^1
%s^1:
%s^2:
'%s' is not a stash-like commit
cannot apply a stash in the middle of a merge
could not generate diff %s^!.
conflicts in index. Try without --index.
could not save index tree
could not restore untracked files from stash
Updated upstream
Stashed changes
Version stash was based on
Merging %s with %s
Index was not unstashed.
%s^2^..%s^2
%s.stash.XXXXXX
WARNING: Untracked file in way of tracked file!  Renaming
            %s -> %s
         to make room.
Failed to move %s to %s
git stash clear with arguments is unimplemented
'%s' is not a stash reference
builtin/stash.c
Dropped %s (%s)
%s: Could not drop stash entry
The stash entry is kept in case you need it again.
git stash pop [--index] [-q|--quiet] [<stash>]
No branch name specified
--format=%gd: %gs
include untracked files in the stash
only-untracked
only show untracked files in the stash
failed to parse tree
failed to unpack trees
"git stash store" requires one <commit> argument
git stash store [-m|--message <message>] [-q|--quiet] <commit>
strip-comments
skip and remove all lines starting with comment character
comment-lines
prepend comment character and space to each line
could not read the input
git stripspace [-s | --strip-comments]
git stripspace [-c | --comment-lines]
git submodule--helper <command>
'%s' is not a valid submodule--helper subcommand
update-module-mode
update-clone
ensure-core-worktree
relative-path
resolve-relative-url
resolve-relative-url-test
foreach
print-default-remote
sync
deinit
remote-branch
push-check
absorb-git-dirs
is-active
check-name
set-branch
alternative anchor for relative paths
git submodule--helper list [--prefix=<path>] [<path>...]
%06o %s U
%06o %s %d
git submodule--helper name <path>
no submodule mapping found in .gitmodules for path '%s'
where the new submodule will be cloned to
name of the new submodule
url where to clone the submodule from
depth for shallow clones
Suppress output for cloning a submodule
force cloning progress
require-init
disallow cloning into non-empty directory
git submodule--helper clone [--prefix=<path>] [--quiet] [--reference <repository>] [--name <name>] [--depth <depth>] [--single-branch] --url <url> --path <path>
%s/modules/%s
refusing to create/use '%s' in another submodule's git dir
clone of '%s' into submodule path '%s' failed
directory not empty: '%s'
%s/index
could not get submodule directory for '%s'
Value '%s' for submodule.alternateErrorStrategy is not recognized
superproject
Value '%s' for submodule.alternateLocation is not recognized
/modules/%s/
submodule '%s' cannot add alternate: %s
--reference
--dissociate
--separate-git-dir
submodule--helper update-module-clone expects <just-cloned> <path> [<update>]
just_cloned
submodule.%s.update
Invalid update mode '%s' for submodule path '%s'
Invalid update mode '%s' configured for submodule path '%s'
builtin/submodule--helper.c
how did we read update = !command from .gitmodules?
path into the working tree
recursive-prefix
path into the working tree, across nested submodule boundaries
rebase, merge, checkout or none
<depth>
create a shallow clone truncated to the specified number of revisions
parallel jobs
recommend-shallow
whether the initial clone should follow the shallow recommendation
don't print cloning progress
git submodule--helper update-clone [--prefix=<path>] [<path>...]
bad value for update parameter
parallel/update
BUG: submodule considered for cloning, doesn't need cloning any more?
Skipping unmerged submodule %s
Skipping submodule '%s'
submodule.%s.url
--path
--name
--url
Submodule path '%s' not initialized
Maybe you want to use 'update --init'?
could not look up configuration '%s'. Assuming this repository is its own authoritative upstream.
Expecting a full ref name, got %s
./%s
cannot strip one component off url '%s'
Failed to clone '%s'. Retry scheduled
Failed to clone '%s' a second time, aborting
dummy %s %d
submodule--helper ensure-core-worktree <path>
We could get the submodule handle before?
could not get a repository handle for submodule '%s'
submodule--helper relative-path takes exactly 2 arguments, got %d
resolve-relative-url only accepts one or two arguments
resolve-relative-url-test only accepts three arguments: <up_path> <remoteurl> <url>
(null)
suppress output of entering each submodule command
recurse into nested submodules
git submodule--helper foreach [--quiet] [--recursive] [--] <command>
No url found for submodule path '%s' in .gitmodules
name=%s
sm_path=%s
displaypath=%s
sha1=%s
toplevel=%s
path=%s; %s
Entering '%s'
run_command returned non-zero status for %s
run_command returned non-zero status while recursing in the nested submodules of %s
cannot have prefix '%s' and superprefix '%s'
suppress output for initializing a submodule
git submodule--helper init [<options>] [<path>]
submodule.%s.active
Failed to register url for submodule path '%s'
Submodule '%s' (%s) registered for path '%s'
warning: command update mode suggested for submodule '%s'
Failed to register update mode for submodule path '%s'
suppress submodule status output
use commit stored in the index instead of the one stored in the submodule HEAD
git submodule status [--quiet] [--cached] [--recursive] [<path>...]
--ignore-submodules=dirty
could not resolve HEAD ref inside the submodule '%s'
failed to recurse into submodule '%s'
%c%s %s
 (%s)
--contains
submodule--helper print-default-remote takes no arguments
suppress output of synchronizing submodule url
git submodule--helper sync [--quiet] [--recursive] [<path>]
Synchronizing submodule url for '%s'
failed to register url for submodule path '%s'
failed to get the default remote for submodule '%s'
/config
failed to update remote for submodule '%s'
remove submodule working trees even if they contain local changes
unregister all submodules
git submodule deinit [--quiet] [-f | --force] [--all | [--] [<path>...]]
pathspec and --all are incompatible
Use '--all' if you really want to deinitialize all submodules
Submodule work tree '%s' contains a .git directory (use 'rm -rf' if you really want to remove it including all of its history)
Submodule work tree '%s' contains local modifications; use '-f' to discard them
Cleared directory '%s'
Could not remove submodule work tree '%s'
could not create empty submodule directory %s
--get-regexp
submodule.%s\.
submodule.%s
Submodule '%s' (%s) unregistered for path '%s'
use the commit stored in the index instead of the submodule HEAD
files
to compare the commit in the index with that in the submodule HEAD
for-status
skip submodules with 'ignore_config' value set to 'all'
summary-limit
limit the summary size
git submodule--helper summary [<options>] [<commit>] [--] [<path>]
could not fetch a revision for HEAD
--cached and --files are mutually exclusive
submodule.%s.ignore
couldn't hash object from '%s'
unexpected mode %o
--count
  Warn: %s doesn't contain commits %s and %s
  Warn: %s doesn't contain commit %s
* %s %s(blob)->%s(submodule)
* %s %s(submodule)->%s(blob)
* %s %s...%s
 (%d):
--pretty=  %m %s
--pretty=  > %s
--pretty=  < %s
submodule--helper remote-branch takes exactly one arguments, got %d
submodule %s doesn't exist
submodule.%s.branch
Submodule (%s) branch configured to inherit branch from superproject, but the superproject is not on any branch
submodule--helper push-check requires at least 2 arguments
remote '%s' not configured
HEAD does not match the named branch in the superproject
src refspec '%s' must name a ref
recurse into submodules
git submodule--helper absorb-git-dirs [<options>] [<path>...]
submodule--helper is-active takes exactly 1 argument
check-writeable
check if it is safe to write to the .gitmodules file
unset the config in the .gitmodules file
git submodule--helper config <name> [<value>]
git submodule--helper config --unset <name>
git submodule--helper config --check-writeable
please make sure that the .gitmodules file is in the working tree
suppress output for setting url of a submodule
git submodule--helper set-url [--quiet] <path> <newurl>
set the default tracking branch to master
set the default tracking branch
git submodule--helper set-branch [-q|--quiet] (-d|--default) <path>
git submodule--helper set-branch [-q|--quiet] (-b|--branch) <branch> <path>
--branch or --default required
--branch and --default are mutually exclusive
suppress error message for non-symbolic (detached) refs
delete symbolic ref
shorten ref output
reason
reason of the update
Refusing to perform update with empty message
Cannot delete %s, not a symbolic ref
deleting '%s' is not allowed
Refusing to point HEAD outside of refs/
git symbolic-ref [<options>] <name> [<ref>]
git symbolic-ref -d [-q] <name>
ref %s is not a symbolic ref
list tag names
print <n> lines of each tag message
delete tags
verify tags
Tag creation options
annotated tag, needs a message
tag message
force edit of tag message
annotated and GPG-signed tag
local-user
use another key to sign the tag
replace the tag if exists
create a reflog
Tag listing options
show tag list in columns
print only tags that contain the commit
print only tags that don't contain the commit
print only tags that are merged
print only tags that are not merged
print only tags of the object
--column and -n are incompatible
-n option is only allowed in list mode
--contains option is only allowed in list mode
--no-contains option is only allowed in list mode
--points-at option is only allowed in list mode
--merged and --no-merged options are only allowed in list mode
only one -F or -m option is allowed.
'%s' is not a valid tag name.
tag '%s' already exists
Invalid cleanup mode %s
Updated tag '%s' (was %s)
builtin/tag.c
tag.gpgsign
tag.forcesignannotated
git tag [-a | -s | -u <key-id>] [-f] [-m <msg> | -F <file>]
<tagname> [<head>]
git tag -d <tagname>...
git tag -l [-n[<num>]] [--contains <commit>] [--no-contains <commit>] [--points-at <object>]
[--format=<format>] [--merged <commit>] [--no-merged <commit>] [<pattern>...]
git tag -v [--format=<format>] <tagname>...
%s %%(contents:lines=%d)
%(align:15)%(refname:lstrip=2)%(end)
%(refname:lstrip=2)
Deleted tag '%s' (was %s)
tag '%s' not found.
tag: tagging 
object of unknown type
commit object
, %s
tree object
blob object
other tag object
bad object type.
object %s
type %s
tag %s
tagger %s
TAG_EDITMSG
no tag message?
The tag message has been left in %s
unable to sign the tag
git unpack-file <sha1>
unable to read blob object %s
.merge_file_XXXXXX
unable to write temp-file
--strict=
final sha1 did not match
bad pack file
unknown pack file version %u
Unpacking objects
unresolved deltas left after unpacking
bad object type %d
builtin/unpack-objects.c
failed to write object
invalid blob object
object %s tried to add buffer twice!
offset value out of bound for delta base object
failed to read delta-pack base object %s
object type mismatch
object of unexpected type
Whoops! Cannot find object '%s'
Error on reachable objects of %s
failed to write object %s
continue refresh even when index needs update
refresh: ignore submodules
do not ignore new files
let files replace directories and vice-versa
notice files missing from worktree
refresh even if index contains unmerged entries
refresh stat information
really-refresh
like --refresh, but ignore assume-unchanged setting
cacheinfo
<mode>,<object>,<path>
add the specified entry to the index
assume-unchanged
mark files as "not changing"
no-assume-unchanged
clear assumed-unchanged bit
skip-worktree
mark files as "index-only"
no-skip-worktree
clear skip-worktree bit
ignore-skip-worktree-entries
do not touch index-only entries
info-only
add to index only; do not add content to object database
force-remove
remove named paths even if present in worktree
with --stdin: input lines are terminated by null bytes
read list of paths to be updated from standard input
index-info
add entries from standard input to the index
unresolve
repopulate stages #2 and #3 for the listed paths
again
only update entries that differ from HEAD
ignore files missing from worktree
report actions to standard output
clear-resolve-undo
(for porcelains) forget saved unresolved conflicts
write index in this format
split-index
enable or disable split index
untracked-cache
enable/disable untracked cache
test-untracked-cache
test if the filesystem supports untracked cache
force-untracked-cache
enable untracked cache without testing the filesystem
force-write-index
write out the index even if is not flagged as changed
fsmonitor
enable or disable file system monitor
fsmonitor-valid
mark files as fsmonitor valid
no-fsmonitor-valid
clear fsmonitor valid bit
cache corrupted
builtin/update-index.c
unknown option '%s'
unknown switch '%c'
index-version %d not in range: %d..%d
core.splitIndex is set to false; remove or change it, if you really want to enable split index
core.splitIndex is set to true; remove or change it, if you really want to disable split index
core.untrackedCache is set to true; remove or change it, if you really want to disable the untracked cache
Untracked cache disabled
core.untrackedCache is set to false; remove or change it, if you really want to enable the untracked cache
Untracked cache enabled for '%s'
bad untracked_cache value: %d
core.fsmonitor is unset; set it if you really want to enable fsmonitor
fsmonitor enabled
core.fsmonitor is set; remove it if you really want to disable fsmonitor
fsmonitor disabled
git update-index: --cacheinfo cannot add %s
option 'cacheinfo' expects <mode>,<sha1>,<path>
Invalid path '%s'
%s: cannot add to the index - missing --add option?
add '%s'
option 'chmod' expects "+x" or "-x"
option '%s' must be the last argument
git update-index: bad quoting of path name
Ignoring path %s
git update-index: unable to remove %s
git update-index: unable to update %s
malformed index info %s
No HEAD -- no initial commit yet?
MERGE_HEAD
Not in the middle of a merge.
%s: skipping still unmerged path.
%s: identical in both, skipping.
%s: cannot add our version to the index.
%s: cannot add their version to the index.
%s: not in %s branch.
%s: not a blob in %s branch.
git update-index [<options>] [--] [<file>...]
Unable to mark file %s
remove '%s'
Unable to process path %s
./fsmonitor.h
mark_fsmonitor_invalid '%s'
'%s' is beyond a symbolic link
%s: cannot remove from the index
lstat("%s"): %s
%s: does not exist and --remove not passed
%s: is a directory - add individual files instead
%s: is a directory - add files inside instead
chmod %cx '%s'
git update-index: cannot chmod %cx '%s'
mtime-test-XXXXXX
Could not make temporary directory
Testing mtime in '%s' 
newfile
directory stat info does not change after adding a new file
new-dir
directory stat info does not change after adding a new directory
data
directory stat info changes after updating a file
new-dir/new
directory stat info changes after adding a file inside subdirectory
directory stat info does not change after deleting a file
directory stat info does not change after deleting a directory
failed to delete directory %s
failed to create file %s
failed to create directory %s
failed to delete file %s
delete the reference
no-deref
update <refname> not the one it points to
stdin has NUL-terminated arguments
read updates from stdin
Refusing to perform update with empty message.
%s: not a valid SHA1
%s: not a valid old SHA1
git update-ref [<options>] -d <refname> [<old-val>]
git update-ref [<options>]    <refname> <new-val> [<old-val>]
git update-ref [<options>] --stdin [-z]
empty command in input
whitespace before command: %s
unknown command: %s
cannot restart ongoing transaction
prepared transactions can only be closed
transaction is closed
prepare
update: missing <ref>
update %s: missing <newvalue>
update %s: extra input: %s
badly quoted argument: %s
unexpected character after quoted argument: %s
%s %s: expected SP but got: %s
%s %s: expected NUL but got: %s
%s %s: missing <newvalue>, treating as zero
%s %s: invalid <oldvalue>: %s
%s %s: invalid <newvalue>: %s
%s %s: unexpected end of input when reading <oldvalue>
%s %s: unexpected end of input when reading <newvalue>
create: missing <ref>
create %s: missing <newvalue>
create %s: zero <newvalue>
create %s: extra input: %s
delete: missing <ref>
delete %s: zero <oldvalue>
delete %s: extra input: %s
verify: missing <ref>
verify %s: extra input: %s
option unknown: %s
start: extra input: %s
start: ok
prepare: extra input: %s
prepare: %s
prepare: ok
abort: extra input: %s
abort: %s
abort: ok
commit: extra input: %s
commit: %s
commit: ok
update the info files from scratch
git update-server-info [--force]
argument 
Too many options (>%d)
'argument' token or flush expected
NACK unable to spawn subprocess
upload-archive: %s
poll failed resuming
read error: %s
sent error to the client: %s
quit after a single request/response exchange
exit immediately after initial ref advertisement
do not try <directory>/.git/ if <directory> is no Git directory
interrupt transfer after <n> seconds of inactivity
builtin/upload-pack.c
git upload-pack [<options>] <dir>
%s=%s
GIT_COMMITTER_IDENT
GIT_AUTHOR_IDENT
GIT_EDITOR
Terminal is dumb, but EDITOR unset
print commit contents
print raw gpg status output
git verify-commit [-v | --verbose] <commit>...
commit '%s' not found.
%s: unable to read file.
%s: cannot verify a non-commit object of type %s.
stat-only
show statistics only
git verify-pack [-v | --verbose] [-s | --stat-only] <pack>...
--object-format=%s
%s: bad
%s: ok
print tag contents
git verify-tag [-v | --verbose] [--format=<format>] <tag>...
lock
unlock
repair
worktree.guessremote
git worktree add [<options>] <path> [<commit-ish>]
git worktree list [<options>]
git worktree lock [<options>] <path>
git worktree move <worktree> <new-path>
git worktree prune [<options>]
git worktree remove [<options>] <worktree>
git worktree unlock <path>
checkout <branch> even if already checked out in other worktree
create a new branch
create or reset a branch
populate the new working tree
keep the new working tree locked
set up tracking mode (see git-branch(1))
guess-remote
try to match the new branch name with a remote-tracking branch
-b, -B, and --detach are mutually exclusive
--[no-]track can only be used if a new branch is created
Preparing worktree (new branch '%s')
Preparing worktree (resetting branch '%s'; was at %s)
Preparing worktree (checking out '%s')
Preparing worktree (detached HEAD %s)
builtin/worktree.c
How come '%s' becomes empty after sanitization?
worktrees/%s
could not create directory of '%s'
%s/locked
initializing
added with --lock
%s/gitdir
gitdir: %s/worktrees/%s
%s/HEAD
%s/commondir
../..
%s=%s
'%s' already exists
unusable worktree destination '%s'
'%s' is a missing but locked worktree;
use '%s -f -f' to override, or 'unlock' and 'prune' or 'remove' to clear
'%s' is a missing but already registered worktree;
use '%s -f' to override, or 'prune' or 'remove' to clear
failed to delete '%s'
report pruned working trees
expire working trees older than <time>
worktrees
Removing %s/%s: %s
duplicate entry
show extended annotations and reasons, if available
add 'prunable' annotation to worktrees older than <time>
--verbose and --porcelain are mutually exclusive
worktree %s
HEAD %s
branch %s
locked %s
prunable %s
%-*s 
(bare)
(detached HEAD)
[%s]
(error)
locked: %s
 locked
prunable: %s
 prunable
reason for locking
'%s' is not a working tree
The main working tree cannot be locked or unlocked
'%s' is already locked, reason: %s
'%s' is already locked
worktrees/%s/locked
'%s' is not locked
force move even if worktree is dirty or locked
'%s' is a main working tree
could not figure out destination name from '%s'
cannot move a locked working tree, lock reason: %s
use 'move -f -f' to override or unlock first
cannot move a locked working tree;
use 'move -f -f' to override or unlock first
validation failed, cannot move working tree: %s
failed to move '%s' to '%s'
modules
working trees containing submodules cannot be moved or removed
force removal even if worktree is dirty or locked
cannot remove a locked working tree, lock reason: %s
use 'remove -f -f' to override or unlock first
cannot remove a locked working tree;
use 'remove -f -f' to override or unlock first
validation failed, cannot remove working tree: %s
%s=%s/.git
--porcelain
--ignore-submodules=none
failed to run 'git status' on '%s'
'%s' contains modified or untracked files, use --force to delete it
failed to run 'git status' on '%s', code %d
repair: %s: %s
error: %s: %s
locked
detached
git-write-tree
missing-ok
<prefix>/
write tree object for a subdirectory <prefix>
ignore-cache-tree
only useful for debugging
%s: error reading the index
%s: error building trees
%s: prefix %s not found
git write-tree [--missing-ok] [--prefix=<prefix>/]
common-main.c
The empty string is not a valid path
unable to get current working directory
More than %d nested symlinks on path '%s'
Invalid symlink '%s'
interactive.header
interactive.help
interactive.prompt
interactive.error
diff.frag
fall back
diff.plain
diff.old
diff.new
interactive.difffilter
interactive.singlekey
add untracked
%12s %12s %s
     
unstaged
could not refresh index
color.%s
 %2d: %s
 %2d: %s%.*s%s%s
Prompt help:
1          - %s
select a numbered item
foo        - %s
select item based on unique prefix
           - %s
(empty) select nothing
Update
could not stage '%s'
updated %d path
updated %d paths
Revert
Could not parse HEAD^{tree}
reverted %d path
reverted %d paths
note: %s is untracked now.
Add untracked
added %d path
added %d paths
ignoring unmerged: %s
Only binary files changed.
No changes.
Patch update
Review diff
status        - %s
show paths with changes
update        - %s
add working tree state to the staged set of changes
revert        - %s
revert staged set of changes back to the HEAD version
patch         - %s
pick hunks and update selectively
diff          - %s
view diff between HEAD and index
add untracked - %s
add contents of untracked files to the staged set of changes
%c%2d: %s
+%ju/-%ju
select a single item
3-5        - %s
select a range of items
2-3,6-9    - %s
select multiple ranges
-...       - %s
unselect specified items
*          - %s
choose all items
(empty) finish selecting
add-interactive.c
singleton requires immediate
Huh (%s)?
prefix_item_list in inconsistent state (%ju vs %ju)
No untracked files.
Stash mode change [y,n,q,a,d%s,?]? 
Stash deletion [y,n,q,a,d%s,?]? 
Stash addition [y,n,q,a,d%s,?]? 
Stash this hunk [y,n,q,a,d%s,?]? 
If the patch applies cleanly, the edited hunk will immediately be marked for stashing.
y - stash this hunk
n - do not stash this hunk
q - quit; do not stash this hunk or any of the remaining ones
a - stash this hunk and all later hunks in the file
d - do not stash this hunk or any of the later hunks in the file
Unstage mode change [y,n,q,a,d%s,?]? 
Unstage deletion [y,n,q,a,d%s,?]? 
Unstage addition [y,n,q,a,d%s,?]? 
Unstage this hunk [y,n,q,a,d%s,?]? 
If the patch applies cleanly, the edited hunk will immediately be marked for unstaging.
y - unstage this hunk
n - do not unstage this hunk
q - quit; do not unstage this hunk or any of the remaining ones
a - unstage this hunk and all later hunks in the file
d - do not unstage this hunk or any of the later hunks in the file
Apply mode change to index [y,n,q,a,d%s,?]? 
Apply deletion to index [y,n,q,a,d%s,?]? 
Apply addition to index [y,n,q,a,d%s,?]? 
Apply this hunk to index [y,n,q,a,d%s,?]? 
If the patch applies cleanly, the edited hunk will immediately be marked for applying.
y - apply this hunk to index
n - do not apply this hunk to index
q - quit; do not apply this hunk or any of the remaining ones
a - apply this hunk and all later hunks in the file
d - do not apply this hunk or any of the later hunks in the file
Discard mode change from worktree [y,n,q,a,d%s,?]? 
Discard deletion from worktree [y,n,q,a,d%s,?]? 
Discard addition from worktree [y,n,q,a,d%s,?]? 
Discard this hunk from worktree [y,n,q,a,d%s,?]? 
If the patch applies cleanly, the edited hunk will immediately be marked for discarding.
y - discard this hunk from worktree
n - do not discard this hunk from worktree
q - quit; do not discard this hunk or any of the remaining ones
a - discard this hunk and all later hunks in the file
d - do not discard this hunk or any of the later hunks in the file
Discard mode change from index and worktree [y,n,q,a,d%s,?]? 
Discard deletion from index and worktree [y,n,q,a,d%s,?]? 
Discard addition from index and worktree [y,n,q,a,d%s,?]? 
Discard this hunk from index and worktree [y,n,q,a,d%s,?]? 
y - discard this hunk from index and worktree
n - do not discard this hunk from index and worktree
q - quit; do not discard this hunk or any of the remaining ones
a - discard this hunk and all later hunks in the file
d - do not discard this hunk or any of the later hunks in the file
Apply mode change to index and worktree [y,n,q,a,d%s,?]? 
Apply deletion to index and worktree [y,n,q,a,d%s,?]? 
Apply addition to index and worktree [y,n,q,a,d%s,?]? 
Apply this hunk to index and worktree [y,n,q,a,d%s,?]? 
y - apply this hunk to index and worktree
n - do not apply this hunk to index and worktree
q - quit; do not apply this hunk or any of the remaining ones
a - apply this hunk and all later hunks in the file
d - do not apply this hunk or any of the later hunks in the file
y - apply this hunk to worktree
n - do not apply this hunk to worktree
q - quit; do not apply this hunk or any of the remaining ones
a - apply this hunk and all later hunks in the file
d - do not apply this hunk or any of the later hunks in the file
Stage mode change [y,n,q,a,d%s,?]? 
Stage deletion [y,n,q,a,d%s,?]? 
Stage addition [y,n,q,a,d%s,?]? 
Stage this hunk [y,n,q,a,d%s,?]? 
If the patch applies cleanly, the edited hunk will immediately be marked for staging.
y - stage this hunk
n - do not stage this hunk
q - quit; do not stage this hunk or any of the remaining ones
a - stage this hunk and all later hunks in the file
d - do not stage this hunk or any of the later hunks in the file
--diff-algorithm=%s
could not parse diff
--color
could not parse colored diff
failed to run '%s'
add-patch.c
diff starts with unexpected line:
%.*s
deleted file
new file
double mode change?
%.*s
mode change in the middle?
%.*s
'new mode' without 'old mode'?
%.*s
'new mode' does not immediately follow 'old mode'?
%.*s
diff can only contain delete *or* add *or* a mode change?!?
%.*s
mode change in hunk #%d???
mismatched output from interactive.diffFilter
Your filter must maintain a one-to-one correspondence
between its input and output lines.
could not parse hunk header '%.*s'
could not parse colored hunk header '%.*s'
,g,/
%s(%ju/%ju) 
No previous hunk
No next hunk
No other hunks to goto
go to which hunk (<ret> to see more)? 
go to which hunk? 
Invalid number: '%s'
Sorry, only %d hunk available.
Sorry, only %d hunks available.
No other hunks to search
search for regex? 
Malformed search regexp %s: %s
No hunk matches the given pattern
Sorry, cannot split this hunk
Split into %d hunks.
Sorry, cannot edit this hunk
'git apply' failed
@@ -%lu
,%lu
 +%lu
%c%2d: 
 -%lu,%lu +%lu,%lu 
looking for next line beyond buffer (%d >= %d)
invalid hunk index: %d (must be >= 0 and < %d)
buffer overrun while splitting hunks
unhandled diff marker: '%c'
counts are off: %d/%d
miscounted old_offset: %lu != %lu
miscounted new_offset: %lu != %lu
Your edited hunk does not apply. Edit again (saying "no" discards!) [y/n]? 
Manual hunk edit mode -- see bottom for a quick guide.
To remove '%c' lines, make them ' ' lines (context).
To remove '%c' lines, delete them.
Lines starting with %c will be removed.
If it does not apply cleanly, you will be given an opportunity to
edit again.  If all lines of the hunk are removed, then the edit is
aborted and the hunk is left unchanged.
addp-hunk-edit.diff
could not parse hunk header
--check
'git apply --cached' failed
failed to find %d context lines in:
%.*s
expected context line #%d in
%.*s
hunks do not overlap:
%.*s
does not end with:
%.*s
The selected hunks do not apply to the index!
Apply them to the worktree anyway? 
Nothing was applied.
color.advice.
advice.
Cherry-picking is not possible because you have unmerged files.
Committing is not possible because you have unmerged files.
Merging is not possible because you have unmerged files.
Pulling is not possible because you have unmerged files.
Reverting is not possible because you have unmerged files.
It is not possible to %s because you have unmerged files.
Fix them up in the work tree, and then use 'git add/rm <file>'
as appropriate to mark resolution and make a commit.
Exiting because of an unresolved conflict.
Please, commit your changes before merging.
Exiting because of unfinished merge.
The following pathspecs didn't match any eligible path, but they do match index
entries outside the current sparse checkout:
Disable or modify the sparsity rules if you intend to update such entries.
Note: switching to '%s'.
You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.
If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:
  git switch -c <new-branch-name>
Or undo this operation with:
  git switch -
Turn off this advice by setting config variable advice.detachedHead to false
%shint: %.*s%s
addEmbeddedRepo
amWorkDir
checkoutAmbiguousRemoteBranchName
commitBeforeMerge
detachedHead
fetchShowForcedUpdates
graftFileDeprecated
ignoredHook
implicitIdentity
nestedTag
objectNameWarning
pushAlreadyExists
pushFetchFirst
pushNeedsForce
pushNonFFCurrent
pushNonFFMatching
pushUnqualifiedRefName
pushNonFastForward
pushUpdateRejected
pushRefNeedsUpdate
resetQuiet
resolveConflict
rmHints
sequencerInUse
setUpstreamFailure
statusAheadBehindWarning
statusHints
statusUoption
submoduleAlternateErrorStrategyDie
updateSparsePath
waitingForEditor
hint
addIgnoredFile
addEmptyPathspec
cmdline ends with \
unclosed quote
%10s: %8u (%ju kB)
--reject and --3way cannot be used together.
--3way outside a repository
--index outside a repository
--cached outside a repository
+++ 
old mode 
new mode 
deleted file mode 
new file mode 
copy from 
copy to 
rename old 
rename new 
rename from 
rename to 
similarity index 
dissimilarity index 
git diff header lacks filename information when removing %d leading pathname component (line %d)
git diff header lacks filename information when removing %d leading pathname components (line %d)
git diff header lacks filename information (line %d)
<stdin>
can't open patch '%s': %s
squelched %d whitespace error
squelched %d whitespace errors
%d line adds whitespace errors.
%d lines add whitespace errors.
%d line applied after fixing whitespace errors.
%d lines applied after fixing whitespace errors.
don't apply changes matching the given path
apply changes matching the given path
remove <num> leading slashes from traditional diff paths
no-add
ignore additions made by the patch
instead of applying the patch, output diffstat for the input
allow-binary-replacement
show number of added and deleted lines in decimal notation
instead of applying the patch, output a summary for the input
instead of applying the patch, see if the patch is applicable
make sure the patch is applicable to the current index
mark new files with `git add --intent-to-add`
apply a patch without touching the working tree
unsafe-paths
accept a patch that touches outside the working area
also apply the patch (use with --stat/--summary/--check)
attempt three-way merge, fall back on normal patch if that fails
build-fake-ancestor
build a temporary index based on embedded index information
ensure at least <n> lines of context match
detect new or modified lines that have whitespace errors
ignore changes in whitespace when finding context
reverse
apply the patch in reverse
unidiff-zero
don't expect at least one line of context
leave the rejected hunks in corresponding *.rej files
allow-overlap
allow overlapping hunks
inaccurate-eof
tolerate incorrectly detected missing new-line at the end of file
recount
do not trust the line counts in the hunk headers
prepend <root> to all filenames
apply.ignorewhitespace
unrecognized whitespace option '%s'
change
unrecognized whitespace ignore option '%s'
git apply: bad git-diff - expected /dev/null, got %s on line %d
git apply: bad git-diff - inconsistent new filename on line %d
git apply: bad git-diff - inconsistent old filename on line %d
git apply: bad git-diff - expected /dev/null on line %d
invalid mode on line %d: %s
inconsistent header lines %d and %d
.gitattributes
Skipped patch '%s'.
unrecognized input
unable to read index file
git apply: failed to read
 differ
Binary files 
Files 
patch with only garbage at line %d
patch fragment without header at line %d: %.*s
diff --git 
unable to find filename in patch at line %d
^[0-2][0-9]:([0-5][0-9]):00(\.0+)? ([-+][0-2][0-9]:?[0-5][0-9])
1969-12-31 
1970-01-01 
Cannot prepare timestamp regexp %s
regexec returned %d for input: %s
corrupt patch at line %d
new file %s depends on old contents
deleted file %s still has contents
** warning: file %s becomes empty but is not deleted
recount: ignore empty hunk
recount: unexpected line: %.*s
%s:%d: %s.
%.*s
unrecognized binary patch at line %d
delta 
literal 
corrupt binary patch at line %d: %.*s
Checking patch %s...
%s: already exists in index
%s: does not match index
%s: already exists in working directory
new mode (%o) of %s does not match old mode (%o)
new mode (%o) of %s does not match old mode (%o) of %s
affected file '%s' is beyond a symbolic link
%s: patch does not apply
check_preimage
apply.c
patch->is_new <= 0
path %s has been renamed/deleted
%s: does not exist in index
%s: wrong type
%s has type %o, expected %o
cannot checkout %s
path_is_beyond_symlink
*name_ != '\0'
Falling back to direct application...
removal patch leaves file contents
failed to read %s
reading from '%s' beyond a symbolic link
Subproject commit %s
unable to read symlink %s
unable to open or read %s
repository lacks the necessary blob to perform 3-way merge.
Performing three-way merge...
cannot read the current contents of '%s'
Failed to perform three-way merge...
Applied patch to '%s' with conflicts.
Applied patch to '%s' cleanly.
patch failed: %s:%ld
cannot apply binary patch to '%s' without full index line
the patch applies to '%s' (%s), which does not match the current contents.
the patch applies to an empty '%s' but it is not empty
the necessary postimage %s for '%s' cannot be read
binary patch does not apply to '%s'
binary patch to '%s' creates incorrect result (expecting %s, got %s)
missing binary patch data for '%s'
cannot reverse-apply a binary patch without the reverse hunk to '%s'
invalid start of line: '%c'
Hunk #%d succeeded at %d (offset %d line).
Hunk #%d succeeded at %d (offset %d lines).
Context reduced to (%ld/%ld) to apply fragment at %d
while searching for:
%.*s
update_pre_post_images
postlen ? fixed_preimage.nr == preimage->nr : fixed_preimage.nr <= preimage->nr
caller miscounted postlen: asked %d, orig = %d, used = %d
size_t underflow: %ju - %ju
U %s
unable to remove %s from index
%s~%u
unable to write file '%s' mode %o
closing file '%s'
unable to add cache entry for %s
Subproject commit 
corrupt patch for submodule %s
unable to stat newly created file '%s'
unable to create backing store for newly created file %s
Applied patch %s cleanly.
internal error
Applying patch %%s with %d reject...
Applying patch %%s with %d rejects...
truncating .rej filename to %.*s.rej
.rej
diff a/%s b/%s
(rejected hunks)
Hunk #%d applied cleanly.
Rejected hunk #%d.
sha1 information is lacking or useless for submodule %s
mode change for %s, which is not in current HEAD
sha1 information is lacking or useless (%s).
could not add %s to temporary index
could not write temporary index to %s
 %-*s |  Bin
 %-*s |
%5d %.*s%.*s
 rewrite %s (%d%%)
 %s mode %06o %s
 %s %s
 %s %.*s{%s => %s} (%d%%)
 %s %s => %s (%d%%)
 mode change %06o => %06o %s
 mode change %06o => %06o
tar.tgz.command
gzip -cn
tar.tgz.remote
tar.tar.gz.command
tar.tar.gz.remote
comment
mtime
pax_global_header
%ju %s=
archive-tar.c
pax extended header length miscalculated as %ju, should be %ju
%07o
%011jo
%011lo
ustar
unsupported file mode: 0%o (SHA1: %s)
%s.data
see %s.paxheader
linkpath
%s.paxheader
cannot stream blob %s
tar-filter archiver called with no filter defined
 -%d
unable to start '%s' filter
unable to redirect descriptor
'%s' filter reported error
timestamp too large for this system: %ju
path is not valid UTF-8: %s
path too long (%d chars, SHA1: %s): %s
uploadarchive.allowunreachable
export-ignore
export-subst
%.*s%s/
cannot read %s
$Format:
archive format
prepend prefix to each pathname in the archive
add-file
add untracked file to archive
worktree-attributes
read .gitattributes in working directory
report archived files on stderr
set compression level
list supported archive formats
Unexpected option --remote
Option --exec can only be used together with --remote
Unexpected option --output
Options --add-file and --remote cannot be used together
archive.c
Unknown archive format '%s'
Argument not supported for format '%s': -%d
File not found: %s
Not a regular file: %s
git archive [<options>] <tree-ish> [<path>...]
git archive --list
git archive --remote <repo> [--exec <cmd>] [<options>] <tree-ish> [<path>...]
git archive --remote <repo> [--exec <cmd>] --list
no such ref: %.*s
not a valid object name: %s
not a tree object: %s
current working directory is untracked
attr.c
counted %d != ended at %d
non-INDEX attr direction in a bare repo
git_attr_internal
a->attr_nr == (hashmap_get_size(&g_attr_hashmap.map) - 1)
no entry found
prepare_attr_stack
(*stack)->origin
[builtin]
[attr]
%s not allowed: %s:%d
Negative patterns are ignored in git attributes
Use '\!' for literal leading exclamation.
%.*s is not a valid attribute name
%s: %s:%d
[attr]binary -diff -merge -text
GIT_ATTR_NOSYSTEM
share/git-core/gitattributes
/etc/gitattributes
attributes
info/attributes
interned attributes shouldn't be deleted
invalid base85 alphabet %c
invalid base85 sequence %.5s
reading bisect refs failed
%s was both %s and %s
No testable commit found.
Maybe you started with bad path arguments?
%s is the first %s commit
(roughly %d step)
(roughly %d steps)
Bisecting: %d revision left to test after this %s
Bisecting: %d revisions left to test after this %s
bisect: remove
bisect.c
shouldn't be calling count-distance in fp mode
dist=%d
skip-
a %s revision is needed
The merge base %s is bad.
This means the bug has been fixed between %s and [%s].
The merge base %s is new.
The property has changed between %s and [%s].
The merge base %s is %s.
This means the first '%s' commit is between %s and [%s].
Some %s revs are not ancestors of the %s rev.
git bisect cannot work properly in this case.
Maybe you mistook %s and %s revs?
the merge base between %s and [%s] must be skipped.
So we cannot be sure the first %s commit is between %s and %s.
We continue anyway.
bisect_rev_setup
Badly quoted content in file '%s': %s
There are only 'skip'ped commits left to test.
The first %s commit could be any of:
--summary
--cc
refs/bisect%s
BISECT_RUN
Bisecting: a merge base must be tested
We cannot bisect more!
internal error in blame_origin_decref
assign_blame
blame.c
commit == suspect->commit
--contents and --reverse do not blend well.
repo is NULL
cannot use --contents with final commit object name
--reverse and --first-parent together require specified latest commit
not unique item in first-parent chain
--reverse --first-parent together require range along first-parent chain
no such path %s in %s
cannot read blob %s for path %s
bloom/queries
bloom/response-no
%s in %s has negative refcnt %d
internal error in blame::find_origin
internal error in blame::find_origin (%c)
unable to generate diff (%s -> %s)
Cannot read blob %s for path %s
internal error in blame::blame_chunk_cb
find_best_line_matches
abs(i - closest_local_line_a) < 1000
get_similarity
abs(line_a - closest_line_a) <= max_search_distance_a
ignore_blame_entry
e->num_lines == entry_len
unable to generate diff (%s)
Non commit %s?
More than one commit to dig from %s and %s?
More than one commit to dig up from, %s and %s?
No commit to dig up from?
Not Committed Yet
not.committed.yet
tree 0000000000000000000000000000000000000000
author %s
committer %s
Version of %s from %s
standard input
Cannot stat '%s'
cannot open or read '%s'
unsupported file type %s
failed to read from stdin
no such commit %s
cannot open '%s' for reading
unknown line in '%s': %s
no such path '%s' in HEAD
Not setting branch %s as its own upstream.
Branch '%s' set up to track remote branch '%s' from '%s' by rebasing.
Branch '%s' set up to track remote branch '%s' from '%s'.
Branch '%s' set up to track local branch '%s' by rebasing.
Branch '%s' set up to track local branch '%s'.
Branch '%s' set up to track remote ref '%s' by rebasing.
Branch '%s' set up to track remote ref '%s'.
Branch '%s' set up to track local ref '%s' by rebasing.
Branch '%s' set up to track local ref '%s'.
Unable to write upstream branch configuration
'%s' is not a valid branch name.
A branch named '%s' already exists.
Cannot force update the current branch.
Not a valid object name: '%s'.
Ambiguous object name: '%s'.
Not a valid branch point: '%s'.
branch: Reset to %s
branch: Created from %s
'%s' is already checked out at '%s'
HEAD of working tree %s is not updated
Not tracking: ambiguous information for ref %s
cannot find the current offset
bulk-checkin.c
should not happen
cannot seek back
unable to write pack header
failed to read from '%s'
failed to read %d bytes from '%s'
%s/pack/pack-
Repository lacks these prerequisite commits:
need a repository to verify a bundle
verify_bundle
bundle.c
The bundle contains this ref:
The bundle contains these %d refs:
The bundle records a complete history.
The bundle requires this ref:
The bundle requires these %d refs:
unsupported bundle version %d
cannot write bundle version %d with algorithm %s
@object-format=
Refusing to create empty bundle.
cannot create '%s'
index-pack died
'%s' does not look like a v2 or v3 bundle file
unrecognized header: %s%s (%d)
object-format=
unrecognized bundle hash algorithm: %s
unknown capability '%s'
-%s 
ref '%s' is excluded by the rev-list options
unable to dup bundle descriptor
Could not spawn pack-objects
pack-objects died
cache-tree.c
cache_tree
cache_tree_update
read
BUG: There are unmerged index entries:
BUG: %d %.*s
unmerged index entries when writing inmemory index
cache-tree
prime_cache_tree
%s: unmerged (%s)
You have both %s and %s
update_one
!(dryrun && repair)
index cache-tree records empty sub-tree
cache-tree.c: '%.*s' in '%s' not found
invalid object %06o %s for '%.*s'
%c%d %d
fatal - unsorted cache subtree
cache-tree: internal error
%s with flags 0x%x should not be in cache-tree
bad subtree '%.*s'
cache-tree for path %.*s does not match. Expected %s got %s
directory '%s' is present in index, but not sparse
chdir-notify.c
setup: chdir from '%s' to '%s'
setup: reparent %s to '%s'
checkout.defaultremote
chunk-format.c
expected to write %lld bytes to chunk %x, but wrote %lld instead
terminating chunk id appears earlier than expected
improper chunk offset(s) %llx and %llx
duplicate chunk ID %x found
final chunk has non-zero id %x
[31m
[32m
[33m
[34m
[35m
[1;31m
[1;32m
[1;33m
[1;34m
[1;35m
[1;36m
color.c
color parsing ran out of space
invalid color value: %.*s
file descriptor out of range: %d
black
green
yellow
blue
magenta
cyan
white
bright
bold
italic
blink
strike
%d;5;%d
%d;2;%d;%d;%d
print_columns
column.c
(colopts & COL_ENABLE_MASK) != COL_AUTO
invalid layout mode %d
--raw-mode=%d
--width=%d
--indent=%s
--padding=%d
invalid column.%s mode %s
dense
unsupported option '%s'
%06o 
read error '%s'
early EOF '%s'
object '%s' is not a blob!
diff --cc 
diff --combined 
%s%sindex 
..%s%s
%s%snew file mode %06o
%s%sdeleted file 
mode 
%s%06o
..%06o
unable to generate combined diff for %s
 +%lu,%lu 
%s%s %s%s
 -%lu,%lu
%.*s%s%s
Binary files differ
GIT_TEST_COMMIT_GRAPH
failed to write commit-graph under GIT_TEST_COMMIT_GRAPH
%s/info/commit-graph
%s/info/commit-graphs/commit-graph-chain
commit-graph file is too small
commit-graph signature %X does not match signature %X
commit-graph version %X does not match version %X
commit-graph hash version %X does not match version %X
commit-graph file is too small to hold %u chunks
GIT_TEST_COMMIT_GRAPH_DIE_ON_PARSE
dying as requested by the '%s' variable on commit-graph parse!
Collecting referenced commits
attempting to write a commit-graph, but 'core.commitGraph' is disabled
GIT_TEST_BLOOM_SETTINGS_BITS_PER_ENTRY
GIT_TEST_BLOOM_SETTINGS_NUM_HASHES
GIT_TEST_BLOOM_SETTINGS_MAX_CHANGED_PATHS
too many commits to write graph
no commit-graph file loaded
the commit-graph file has incorrect checksum and is likely corrupt
commit-graph has incorrect OID order: %s then %s
commit-graph has incorrect fanout value: fanout[%d] = %u != %u
failed to parse commit %s from commit-graph
Verifying commits in commit graph
failed to parse commit %s from object database for commit-graph
root tree OID for commit %s in commit-graph is %s != %s
commit-graph parent list for commit %s is too long
commit-graph parent for %s is %s != %s
commit-graph parent list for commit %s terminates early
commit-graph has non-zero generation number for commit %s, but zero elsewhere
commit-graph generation for commit %s is %ju < %ju
commit date for commit %s in commit-graph is %ju != %ju
commitgraph.generationversion
commit-graph is missing the OID Fanout chunk
commit-graph is missing the OID Lookup chunk
commit-graph is missing the Commit Data chunk
invalid commit-graph chain: line '%s' not a hash
unable to find all commit-graph files
%s/info/commit-graphs/graph-%s.graph
commit-graph has no base graphs chunk
commit-graph chain does not match
invalid parent position %u
could not find commit %s
commit-graph.c
NULL commit-graph
invalid commit position. commit-graph is likely corrupt
commit-graph requires overflow generation data but has none
get_commit_tree_in_graph_one called from non-commit-graph commit
%s/pack/
Finding commits for commit graph in %d pack
Finding commits for commit graph in %d packs
error adding pack %s
error opening index for %s
Finding commits for commit graph among packed objects
Loading known commits in commit graph
Expanding reachable commits in commit graph
Clearing commit marks in commit graph
Finding extra edges in commit graph
Merging commit-graph
Scanning merged commits
Computing commit graph topological levels
Computing commit graph generation numbers
Computing commit changed paths Bloom filters
filter-computed
filter-not-computed
filter-trunc-empty
filter-trunc-large
%s/info/commit-graphs/tmp_graph_XXXXXX
unable to create temporary graph layer
unable to adjust shared permissions for '%s'
Writing out commit graph in %d pass
Writing out commit graph in %d passes
unable to open commit-graph chain file
failed to rename base commit-graph file
failed to rename temporary commit-graph file
missing parent %s for commit %s
hash_version
num_hashes
bits_per_entry
max_changed_paths
settings
failed to write correct number of base graph ids
/info/commit-graphs
.graph
a from object
commit-reach.c
bad generation skip %ju > %ju at %s
%s %s is not a commit!
bad graft data: %s
read_graft_line
commit.c
!graft
cannot read commit object %s
expected commit for %s, got %s
bogus commit object %s
bad tree pointer in commit %s
bad tree pointer %s in commit %s
bad parents in commit %s
bad parent %s in commit %s
bad graft parent %s in commit %s
Could not read %s
Object %s not a commit
No such ref: '%s'
Ambiguous refname: '%s'
Commit %s has an untrusted GPG signature, allegedly by %s.
Commit %s has a bad GPG signature allegedly by %s.
Commit %s does not have a GPG signature.
Commit %s has a good GPG signature by %s
mergetag
a NUL byte in commit log message not allowed.
GIT_EDITOR=:
Support for <GIT_DIR>/info/grafts is deprecated
and will be removed in a future Git version.
Please use "git replace --convert-graft-file"
to convert the grafts into replace refs.
Turn this message off by running
"git config advice.graftFileDeprecated false"
duplicate graft data: %s
compat/obstack.c
/dev/tty
reading single keystrokes not supported on this platform; reading line instead
infocmp
include.path
includeif
invalid config format: %s
missing environment variable name for configuration '%.*s'
missing environment variable '%s' for configuration '%.*s'
bogus config parameter: %s
bogus count in %s
too many entries in %s
GIT_CONFIG_KEY_%d
missing config key %s
GIT_CONFIG_VALUE_%d
missing config value %s
bad boolean config value '%s' for '%s'
failed to expand user dir in: '%s'
'%s' for '%s' is not a valid timestamp
core.
user.
author.
committer.
i18n.
push.
mailmap.
pager.color
unable to load config blob object '%s'
reference '%s' does not point to a blob
GIT_CONFIG_SYSTEM
/etc/gitconfig
GIT_CONFIG_GLOBAL
share/git-core/gitconfig
failed to parse %s
GIT_CONFIG_NOSYSTEM
git_configset_get_value
config.c
values->nr > 0
Invalid %s: '%s'
core.splitindex
splitindex.maxpercentchange
splitIndex.maxPercentChange value '%d' should be between 0 and 100
GIT_TEST_FSMONITOR
GIT_TEST_INDEX_THREADS
unable to parse '%s' from command-line config
bad config variable '%s' in file '%s' at line %d
could not lock config file %s
opening %s
invalid config file %s
fstat on %s failed
unable to mmap '%s'
chmod on %s failed
could not write config file %s
could not set '%s' to '%s'
missing value for '%s'
current_config_origin_type called outside config callback
submodule-blob
unknown config origin type
current_config_name called outside config callback
could not expand include path '%s'
relative config includes must come from files
the command line
gitdir:
gitdir/i:
onbranch:
relative config include conditionals must come from files
how is this possible?
key does not contain a section: %s
key does not contain variable name: %s
invalid key (newline): %s
empty config key
bogus format in %s
out of range
invalid unit
bad numeric config value '%s' for '%s': %s
bad numeric config value '%s' for '%s' in blob %s: %s
bad numeric config value '%s' for '%s' in file %s: %s
bad numeric config value '%s' for '%s' in standard input: %s
bad numeric config value '%s' for '%s' in submodule-blob %s: %s
bad numeric config value '%s' for '%s' in command line %s: %s
bad numeric config value '%s' for '%s' in %s: %s
core.checkstat
core.quotepath
core.attributesfile
core.hookspath
core.ignorestat
core.prefersymlinkrefs
core.warnambiguousrefs
abbrev length out of range: %d
core.disambiguate
core.loosecompression
bad zlib compression level %d
core.packedgitwindowsize
core.bigfilethreshold
core.packedgitlimit
core.deltabasecachelimit
crlf
native
core.checkroundtripencoding
core.notesref
core.commentchar
core.commentChar should only be one character
core.askpass
core.excludesfile
core.fsyncobjectfiles
core.preloadindex
core.createobject
link
invalid mode for object creation: %s
core.sparsecheckout
core.sparsecheckoutcone
core.precomposeunicode
core.protecthfs
core.protectntfs
core.usereplacerefs
i18n.commitencoding
i18n.logoutputencoding
branch.autosetupmerge
branch.autosetuprebase
malformed value for %s
nothing
tracking
malformed value for %s: %s
must be one of nothing, matching, simple, upstream or current
config_buf can only ungetc the same character
bad config line %d in blob %s
bad config line %d in file %s
bad config line %d in standard input
bad config line %d in submodule-blob %s
bad config line %d in command line %s
bad config line %d in %s
config error action unset
unable to resolve config blob '%s'
git_dir without commondir
unable to parse command-line config
configset_add_value has no source
unknown error occurred while reading the configuration files
[%.*s "
%s = %s
invalid section name '%s'
%s has multiple values
failed to write new configuration file %s
invalid section name: %s
server doesn't support '%s'
server doesn't support feature '%s'
connect.c
invalid packet
protocol error: unexpected '%s'
ls-refs
command=ls-refs
agent
agent=%s
unknown object format '%s' specified by server
object-format=%s
server-option=%s
peel
symrefs
unborn
ref-prefix %s
invalid ls-refs response: %s
expected flush after ref listing
expected response end packet after ref listing
Diag: url=%s
NULL
Diag: protocol=%s
Diag: hostandport=%s
Diag: path=%s
transport/git
strange pathname '%s' blocked
Diag: userandhost=%s
Diag: port=%s
NONE
transport/ssh
transport/file
GIT_PROTOCOL=version=%d
unable to fork
the remote end hung up upon initial contact
Could not read from remote repository.
Please make sure you have the correct access rights
and the repository exists.
expected flush after capabilities
protocol error: unexpected capabilities^{}
ignoring capabilities after first line '%s'
protocol error: expected shallow sha-1, got '%s'
repository on the other end cannot be shallow
symref-target:
peeled:
%s^{}
no path specified; see 'git help pull' for valid url syntax
git+ssh
ssh+git
protocol '%s' is not supported
unknown protocol
GIT_OVERRIDE_VIRTUAL_HOST
newline is forbidden in git:// hosts and repo paths
version=%d%c
GIT_PROXY_COMMAND
core.gitproxy
 for 
9418
strange hostname '%s' blocked
strange port '%s' blocked
cannot start proxy %s
Looking up %s ... 
unable to look up %s (port %s) (%s)
done.
Connecting to %s (port %s) ... 
%s[%d: %s]: errno=%s
unable to connect to %s:
done.
unable to set SO_KEEPALIVE on socket
GIT_SSH
GIT_SSH_COMMAND
core.sshcommand
ssh.exe
plink
plink.exe
tortoiseplink
tortoiseplink.exe
GIT_SSH_VARIANT
putty
simple
SendEnv=GIT_PROTOCOL
VARIANT_AUTO passed to push_ssh_options
ssh variant 'simple' does not support -4
ssh variant 'simple' does not support -6
-batch
ssh variant 'simple' does not support setting port
--progress=%s
Could not run 'git rev-list'
failed write to rev-list
failed to close rev-list's stdin
async_query_available_blobs
convert.c
subprocess_map_initialized
external filter '%s' is not available anymore although not all paths have been filtered
command=list_available_blobs
pathname=
working-tree-encoding
-text
text eol=lf
text eol=crlf
text=auto
text=auto eol=crlf
text=auto eol=lf
%s: clean filter '%s' failed
convert_to_git_filter_fd
ca.drv
external filter '%s' failed
smudge
process
required
true/false are no valid working-tree-encodings
read from external filter '%s' failed
cannot fork to run external filter '%s'
cannot feed the input to external filter '%s'
external filter '%s' failed %d
unexpected filter type
command=%s
path name too long for external filter
pathname=%s
ref=%s
treeish=%s
blob=%s
can-delay=1
delayed
delay
git-filter
failed to encode '%s' from %s to %s
destination
Checking roundtrip encoding for %s...
reencoded source
encoding '%s' from %s to %s and back is not the same
BOM is prohibited in '%s' if encoded as %s
The file '%s' contains a byte order mark (BOM). Please use UTF-%.*s as working-tree-encoding.
BOM is required in '%s' if encoded as %s
The file '%s' is missing a byte order mark (BOM). Please use UTF-%sBE or UTF-%sLE (depending on the byte order) as working-tree-encoding.
GIT_TRACE_WORKING_TREE_ENCODING
%s (%s, considered %s):
[2m%2i:
[0m %2x 
[2m%c
[0m%c
CRLF would be replaced by LF in %s
CRLF will be replaced by LF in %s.
The file will have its original line endings in your working directory
LF would be replaced by CRLF in %s
LF will be replaced by CRLF in %s.
The file will have its original line endings in your working directory
%s: smudge filter %s failed
Id: 
: %s $
$Id: 
illegal crlf_action %d
copy-fd: read returned
copy-fd: write returned
%s: close error
invalid credential line: %s
username
password
host
credential helper '%s' told us to quit
unable to get password from user
credential url cannot be parsed: %s
credential.c
credential value for %s is missing
credential value for %s contains newline
refusing to work with credential missing host field
refusing to work with credential missing protocol field
credential.
helper
usehttppath
skipping credential lookup for key: credential.%s
https
http
git credential-%s
Username
Password
%s for '%s': 
%s: 
url has no scheme: %s
url contains a newline in its %s component: %s
%s: sha1 file error on close
%s: error when reading the tail of sha1 file
%s: sha1 file has trailing garbage
unable to open /dev/null
%s: sha1 file read error
%s: sha1 file truncated
sha1 file '%s' validation error
sha1 file '%s' write error. Out of diskspace
sha1 file '%s' write error
in the future
%ju second ago
%ju seconds ago
%ju minute ago
%ju minutes ago
%ju hour ago
%ju hours ago
%ju day ago
%ju days ago
%ju week ago
%ju weeks ago
%ju month ago
%ju months ago
%ju year
%ju years
%s, %ju month ago
%s, %ju months ago
%ju year ago
%ju years ago
date.c
cannot create anonymous strftime date_mode struct
%ju %+05d
%04d-%02d-%02d
%04d-%02d-%02d %02d:%02d:%02d %+05d
%04d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d
%.3s, %d %.3s %d %02d:%02d:%02d %+05d
auto:
default-local
-local
date format missing colon separator: %s
unknown date format %s
GIT_TEST_DATE_NOW
Timestamp too large for this system: %ju
Timestamp+tz too large: %ju +%04d
Timestamp before Unix epoch: %ju %04d
Sundays
Mondays
Tuesdays
Wednesdays
Thursdays
Fridays
Saturdays
January
February
March
April
June
July
August
September
October
November
December
%.3s 
%.3s %d 
%02d:%02d
:%02d
 %+05d
IDLW
MEWT
MEST
CEST
MESZ
EEST
WAST
WADT
EAST
EADT
NZST
NZDT
IDLE
%ju %c%02d%02d
iso8601-strict
iso-strict
iso8601
human
unix
months
years
yesterday
noon
midnight
zero
three
four
five
seven
eight
nine
seconds
minutes
hours
days
weeks
Propagating island marks
bad tree object %s
Marked %d islands, done.
failed to load island regex for '%s': %s
pack.islandcore
island regex from config has too many capture groups (max=%d)
create_delta_index
diff-delta.c
packed_entry - (struct index_entry *)mem == entries
--no-diff-merges
--combined-all-paths
diff-merges
--combined-all-paths makes no sense without -c or --cc
separate
combined
dense-combined
unknown value for --diff-merges: %s
diff-lib.c
--merge-base does not work with ranges
--merge-base only works with commits
unexpected revs->pending.nr: %d
unable to get HEAD
no merge base found
multiple merge bases found
run_diff_index must be passed exactly one tree
check_removed
is_fsmonitor_refreshed(istate)
Not a git repository. Use --no-index to compare two paths outside a working tree
git diff --no-index [<options>] <path> <path>
Could not access '%s'
error while reading from stdin
Could not open directory %s
copies
myers
patience
histogram
diff.indentheuristic
diff.colormoved
diff.colormovedws
diff.interhunkcontext
diff.autorefreshindex
diff.mnemonicprefix
diff.statgraphwidth
diff.wordregex
diff.orderfile
Unknown value for 'diff.submodule' config variable: '%s'
diff.color.
color.diff.
diff.wserrorhighlight
diff.suppressblankempty
diff.suppress-blank-empty
Found errors in 'diff.dirstat' config variable:
internal error: asking to populate invalid file.
--name-only, --name-status, --check and -s are mutually exclusive
-G, -S and --find-object are mutually exclusive
--follow requires exactly one pathspec
Option '--%s' requires a value
%s%.*s
%s...
unable to read files to diff
diff.c
fill_textconv called with non-textconv driver
meta
frag
func
oldMoved
oldMovedAlternative
oldMovedDimmed
oldMovedAlternativeDimmed
newMoved
newMovedAlternative
newMovedDimmed
newMovedAlternativeDimmed
contextDimmed
oldDimmed
newDimmed
contextBold
oldBold
newBold
blocks
zebra
dimmed-zebra
dimmed_zebra
color moved setting must be one of 'no', 'default', 'blocks', 'zebra', 'dimmed-zebra', 'plain'
ignore-space-at-eol
ignore-all-space
allow-indentation-change
unknown color-moved-ws mode '%s', possible values are 'ignore-space-change', 'ignore-space-at-eol', 'ignore-all-space', 'allow-indentation-change'
color-moved-ws: allow-indentation-change cannot be combined with other whitespace modes
changes
lines
noncumulative
cumulative
  Failed to parse dirstat cut-off percentage '%s'
  Unknown dirstat parameter '%s'
 No newline at end of file
%s%s+++ %s%s%s
%s%s--- %s%s%s
%sGIT binary patch
%sdelta %s
%sliteral %s
%sSubmodule %s contains untracked content
%sSubmodule %s contains modified content
 0 files changed
 ...
unknown diff symbol
print_stat_summary_inserts_deletes
insertions == 0 && deletions == 0
 %d file changed
 %d files changed
, %d insertion(+)
, %d insertions(+)
, %d deletion(-)
, %d deletions(-)
Subproject commit %s%s
GIT_EXTERNAL_DIFF
ACDMRTXU*B
Diff output format options
generate patch
no-patch
unified
generate diffs with <n> lines context
generate the diff in raw format
patch-with-raw
synonym for '-p --raw'
patch-with-stat
synonym for '-p --stat'
numstat
machine friendly --stat
shortstat
output only the last line of --stat
dirstat
<param1,param2>...
output the distribution of relative amount of changes for each sub-directory
synonym for --dirstat=cumulative
dirstat-by-file
synonym for --dirstat=files,param1,param2...
check
warn if changes introduce conflict markers or whitespace errors
condensed summary such as creations, renames and mode changes
show only names of changed files
show only names and status of changed files
<width>[,<name-width>[,<count>]]
generate diffstat
stat-width
<width>
generate diffstat with a given width
stat-name-width
generate diffstat with a given name width
stat-graph-width
generate diffstat with a given graph width
stat-count
<count>
generate diffstat with limited lines
compact-summary
generate compact summary in diffstat
output a binary diff that can be applied
full-index
show full pre- and post-image object names on the "index" lines
show colored diff
ws-error-highlight
<kind>
highlight whitespace errors in the 'context', 'old' or 'new' lines in the diff
do not munge pathnames and use NULs as output field terminators in --raw or --numstat
src-prefix
<prefix>
show the given source prefix instead of "a/"
dst-prefix
show the given destination prefix instead of "b/"
line-prefix
prepend an additional prefix to every line of output
no-prefix
do not show any source or destination prefix
inter-hunk-context
show context between diff hunks up to the specified number of lines
output-indicator-new
<char>
specify the character to indicate a new line instead of '+'
output-indicator-old
specify the character to indicate an old line instead of '-'
output-indicator-context
specify the character to indicate a context instead of ' '
Diff rename options
break-rewrites
<n>[/<m>]
break complete rewrite changes into pairs of delete and create
detect renames
irreversible-delete
omit the preimage for deletes
find-copies
detect copies
find-copies-harder
use unmodified files as source to find copies
disable rename detection
rename-empty
use empty blobs as rename source
follow
continue listing the history of a file beyond renames
prevent rename/copy detection if the number of rename/copy targets exceeds given limit
Diff algorithm options
produce the smallest possible diff
ignore whitespace when comparing lines
ignore changes in amount of whitespace
ignore changes in whitespace at EOL
ignore-cr-at-eol
ignore carrier-return at the end of line
ignore-blank-lines
ignore changes whose lines are all blank
ignore-matching-lines
<regex>
ignore changes whose all lines match <regex>
indent-heuristic
heuristic to shift diff hunk boundaries for easy reading
generate diff using the "patience diff" algorithm
generate diff using the "histogram diff" algorithm
diff-algorithm
<algorithm>
choose a diff algorithm
anchored
<text>
generate diff using the "anchored diff" algorithm
word-diff
<mode>
show word diff, using <mode> to delimit changed words
word-diff-regex
use <regex> to decide what a word is
color-words
equivalent to --word-diff=color --word-diff-regex=<regex>
color-moved
moved lines of code are colored differently
color-moved-ws
how white spaces are ignored in --color-moved
Other diff options
when run from subdir, exclude changes outside and show relative paths
treat all files as text
swap two inputs, reverse the diff
exit with 1 if there were differences, 0 otherwise
disable all output of the program
ext-diff
allow an external diff helper to be executed
run external text conversion filters when comparing binary files
<when>
ignore changes to submodules in the diff generation
<format>
specify how differences in submodules are shown
ita-invisible-in-index
hide 'git add -N' entries from the index
ita-visible-in-index
treat 'git add -N' entries as real in the index
<string>
look for differences that change the number of occurrences of the specified string
look for differences that change the number of occurrences of the specified regex
pickaxe-all
show all changes in the changeset with -S or -G
pickaxe-regex
treat <string> in -S as extended POSIX regular expression
control the order in which files appear in the output
rotate-to
<path>
show the change in the specified path first
skip-to
skip the output to the specified path
find-object
<object-id>
look for differences that change the number of occurrences of the specified object
diff-filter
[(A|C|D|M|R|T|U|X|B)...[*]]
select files by diff type
<file>
Output to a specific file
--unified
how come --cumulative take a value?
Failed to parse --dirstat/-X option parameter:
invalid --stat value: %s
%s should not get here
unknown value after ws-error-highlight=%.*s
%s expects a character, got '%s'
%s expects <n>/<m> form
invalid argument to %s
invalid regex given to -I: '%s'
option diff-algorithm accepts "myers", "minimal", "patience" and "histogram"
bad --word-diff argument: %s
bad --color-moved argument: %s
invalid mode '%s' in --color-moved-ws
failed to parse --submodule option parameter: '%s'
unable to resolve '%s'
unknown change class '%c' in --diff-filter=%s
oid abbreviation out of range: %d
internal diff status error
diff--git
newfilemode
---/dev/null
+++b/
deletedfilemode
---a/
+++/dev/null
unable to generate patch-id diff for %s
stat '%s'
cannot hash %s
%06o
internal error in diff-resolve-rename-copy
unable to generate checkdiff for %s
%s:%d: %s.
checkdiff_consume
data->o
%s%s:%d: leftover conflict marker
%s%s:%d: %s.
:%06o %06o %s 
%c%03d%c
%c%c
 => 
 %s%-*s |
 %*s
 %s%ju%s
 -> 
%s%ju%s
 bytes
 Unmerged
 %*ju%s
%s%4d.%01d%% %.*s
 rewrite 
 (%d%%)
 %s mode %06o 
 %s %s (%d%%)
 mode change %06o => %06o
* Unmerged path %s
%s%ssimilarity index %d%%
%s%scopy from 
%s%scopy to 
%s%srename from 
%s%srename to 
%s%sdissimilarity index %d%%%s
%s%sindex %s..%s
 %06o
GIT_DIFF_PATH_COUNTER=%d
GIT_DIFF_PATH_TOTAL=%d
external diff died, stopping at %s
stat(%s)
readlink(%s)
cannot read data blob for %s
diff is failing to clean up its tempfiles
XXXXXX_
unable to create temp-file
%s%sdiff --git %s %s%s
%s%snew file mode %06o%s
%s%sdeleted file mode %06o%s
%s%sold mode %06o%s
%s%snew mode %06o%s
%sBinary files %s and %s differ
GIT_DIFF_OPTS
--unified=
unable to generate diff for %s
1,%d
invalid regular expression: %s
diff_words_show
unable to generate word diff
fn_out_diff_words_aux
feeding unmodified %s to diffcore
unable to generate diffstat for %s
new +l
new +x
gone
mode -l
mode +l
mode +x
mode -x
error reading from textconv command '%s'
internal error in merge #1
internal error in merge #2
internal error in merge #3
internal error in merge #4
failed to read orderfile '%s'
invalid regex: %s
diffcore-rename.c
setup
diffcore_rename_extended
!dir_rename_count || strmap_empty(dir_rename_count)
dirs_removed incompatible with break/copy detection
break detection incompatible with source specification
exact renames
cull after exact
GIT_BASENAME_FACTOR
factor >= 0.0 && factor <= 1.0
dir rename setup
basename matches
cull basename
inexact renames
Performing inexact rename detection
!one->rename_used || want_copies || break_idx
write back to queue
tracking failed somehow; failed to find associated dst for broken pair
internal error: dst already matched.
find_basename_matches
!rename_src[i].p->one->rename_used
src_index == -1 || src_index == i
handle_early_known_dir_renames
!one->rename_used
val != -1
res == RELEVANT_FOR_ANCESTOR
No such path '%s' in the diff
error reading directory '%s'
error closing directory '%s'
error opening directory '%s'
dir.c
DIR_SHOW_IGNORED and DIR_SHOW_IGNORED_TOO are exclusive
pathspec '%s' did not match any file(s) known to git
read_directory
GIT_FORCE_UNTRACKED_CACHE
do not know how to check file existence in arbitrary repo
dir_inside_of
dir && subdir && *dir && *subdir
.gitignore
info/sparse-checkout
could not create directories for %s
%s/config
could not migrate git directory from '%s' to '%s'
unrecognized pattern: '%s'
unrecognized negative pattern: '%s'
your sparse-checkout file may have issues: pattern '%s' is repeated
disabling cone pattern matching
cannot use %s as an exclude file
last_matching_pattern_from_list
pattern->baselen == 0 || pattern->base[pattern->baselen - 1] == '/'
oops in prep_exclude
prep_exclude
stk->baselen == dir->basebuf.len
failed to get kernel name and information
Location %s, system %s
GIT_DISABLE_UNTRACKED_CACHE
untracked cache is disabled on this system or location
Unhandled value for directory_exists_in_index: %d
could not open directory '%s'
directories-visited
paths-visited
node-creation
gitignore-invalidation
directory-invalidation
opendir
info/exclude
index file corrupt in repo %s
TERM
dumb
VISUAL
EDITOR
hint: Waiting for your editor to close the file...%c
editor
unable to start editor '%s'
There was a problem with the editor '%s'.
Filtering content
external filter '%s' signaled that '%s' is now available although it has not been delayed earlier
'%s' was not filtered properly
update_ce_after_write
entry.c
state->istate
Can't remove entry to a path
could not stat file '%s'
%s already exists, no checkout
unable to unlink old '%s'
unable to read sha1 file of %s (%s)
unable to create symlink %s
unable to create file %s
cannot create temporary submodule %s
cannot create submodule directory %s
unknown file mode for %s in index
unable to stat just-written file %s
.merge_link_XXXXXX
cannot rmdir '%s'
cannot create directory at '%s'
SHIFT-JIS
GIT_ALTERNATE_OBJECT_DIRECTORIES
GIT_CONFIG_COUNT
GIT_OBJECT_DIRECTORY
GIT_GRAFT_FILE
GIT_REPLACE_REF_BASE
GIT_PREFIX
GIT_COMMON_DIR
refs/replace/
environment.c
git environment hasn't been setup
internal error: work tree has already been set
Current worktree: %s
New worktree: %s
objects/%s
GIT_PRINT_SHA1_ELLIPSIS
refs/namespaces/%s
bad git namespace path "%s"
could not set GIT_DIR to '%s'
setup: move $GIT_DIR to '%s'
ewah_set
ewah_bitmap.c
i >= self->bit_size
ewah_iterator_next
it->literals < it->lw
it->pointer < it->buffer_size
add_empty_word
rlw_get_run_bit(self->rlw) == v
rlw_get_running_len(self->rlw) == 0
rlw_get_run_bit(self->rlw) == 0
rlw_get_literal_words(self->rlw) == 0
corrupt ewah bitmap: eof before bit size
corrupt ewah bitmap: eof before length
corrupt ewah bitmap: eof in data (%ju bytes short)
corrupt ewah bitmap: eof before rlw
exec-cmd.c
trace: could not determine executable path from: %s
trace: resolved executable dir: %s
GIT_EXEC_PATH
libexec/git-core
/usr/local/bin:/usr/bin:/bin
trace: exec failed: %s
too many args to run %s
trace: could not normalize path: %s
trace: resolved executable path from Darwin stack: %s
trace: resolved executable path from argv0: %s
system_prefix
executable_dirname
is_absolute_path(executable_dirname)
/Applications/Xcode.app/Contents/Developer/usr
RUNTIME_PREFIX requested, but prefix computation failed.  Using static fallback '%s'.
no matching remote head
fetch-pack.c
Protocol V2 does not provide shallows at this point in the fetch
wait-for-done
unable to write request to remote
acknowledgments
unexpected 'ready' from remote
no such remote ref %s
Server does not allow request for unadvertised object %s
fetch.unpacklimit
fetch.fsckobjects
fetch.uriprotocols
fetch.fsck.skiplist
fetch.fsck.
GIT_TEST_SIDEBAND_ALL
sideband-all
negotiation_v2
shallow-info
wanted-refs
packfile-uris
packfile
http-fetch
--packfile=%.*s
--index-pack-arg=%s
fetch-pack: unable to spawn http-fetch
fetch-pack: expected keep then TAB at start of http-fetch output
fetch-pack: expected hash then LF at end of http-fetch output
fetch-pack: unable to finish http-fetch
fetch-pack: pack downloaded from %s does not match expected hash %.*s
fsck failed
parse_remote_refs_and_find_cutoff
mark_complete_local_refs
mark_common_remote_refs
Marking %s as complete
want %s (%s)
already have %s (%s)
thin-pack
no-progress
ofs-delta
Server does not support shallow requests
Server supports filter
filter %s
filtering not recognized by server, ignoring
packfile-uris %s
done
deepen %d
deepen-since %ju
deepen-not %s
deepen-relative
ref-in-want
want %s
want-ref %s
have %s
invalid shallow line: %s
unshallow 
invalid unshallow line: %s
error in object: %s
no shallow found: %s
expected shallow/unshallow, got %s
error processing shallow info: %d
expected wanted-ref, got '%s'
unexpected wanted-ref: '%s'
error processing wanted refs: %d
expected '<hash> <uri>', got: %s
expected DELIM
fetch-pack: unable to fork off sideband demultiplexer
protocol error: bad pack header
--keep=fetch-pack %ju on %s
fetch-pack: unable to fork off %s
fetch-pack: invalid index-pack output
%s failed
error in sideband demultiplexer
name of pack lockfile should end with .keep (was '%s')
invalid length read %d
invalid hash
Server version is %.*s
Server supports %s
Server does not support shallow clients
multi_ack_detailed
no-done
multi_ack
side-band
allow-tip-sha1-in-want
allow-reachable-sha1-in-want
Server does not support --shallow-since
Server does not support --shallow-exclude
Server does not support --deepen
Server does not support this repository's object format
no common commits
--stateless-rpc requires multi_ack_detailed
 multi_ack_detailed
 multi_ack
 no-done
 side-band-64k
 side-band
 deepen-relative
 thin-pack
 no-progress
 include-tag
 deepen-since
 deepen-not
 filter
want %s%s
negotiation_v0_v1
have %s
got %s %d %s
invalid commit %s
giving up
got %s (%d) %s
unable to write to remote
git fetch-pack: expected shallow list
git fetch-pack: expected a flush packet after shallow list
git fetch-pack: expected ACK/NAK, got a flush packet
ACK 
ready
git fetch-pack: expected ACK/NAK, got '%s'
command=fetch
session-id=%s
mismatched algorithms: client %s; server %s
the server does not support algorithm '%s'
error reading section header '%s'
expected '%s', received '%s'
unexpected acknowledgment line: '%s'
error processing acks: %d
expected packfile to be sent after 'ready'
expected no other sections to be sent after no 'ready'
git fetch-pack: expected response end packet
merge.summary
%s: negative length %s
merge.suppressdest
No current branch
error in line %d: %.*s
 of 
branch 
remote-tracking branch 
%s of %s
branches 
remote-tracking branches 
tags 
commits 
 of %s
 into %s
 and %s
gpg verification failed.
^HEAD
* %s: (%d commits)
* %s:
  ...
  %s
%c %s 
%s (%d) and %s (%d)
%s (%d) and others
  : %.*s
Unhandled message id: %s
Cannot demote %s to %s
skiplist
skiplist requires a path
Missing '=': '%s'
Unknown object type for %s
invalid format - expected 'object' line
invalid 'object' line format - bad sha1
invalid format - expected 'type' line
invalid format - unexpected end after 'type' line
invalid 'type' value
invalid format - expected 'tag' line
invalid 'tag' name: %.*s
invalid format - expected 'tagger' line
invalid format - extra header(s) after 'tagger'
no valid object to fsck
unknown type '%d' (internal fsck error)
object %s: %s
unable to read .gitmodules blob
non-blob found at .gitmodules
fsck.skiplist
skiplist=%s
fsck.
NUL_IN_HEADER
UNTERMINATED_HEADER
BAD_DATE
BAD_DATE_OVERFLOW
BAD_EMAIL
BAD_NAME
BAD_OBJECT_SHA1
BAD_PARENT_SHA1
BAD_TAG_OBJECT
BAD_TIMEZONE
BAD_TREE
BAD_TREE_SHA1
BAD_TYPE
DUPLICATE_ENTRIES
MISSING_AUTHOR
MISSING_COMMITTER
MISSING_EMAIL
MISSING_NAME_BEFORE_EMAIL
MISSING_OBJECT
MISSING_SPACE_BEFORE_DATE
MISSING_SPACE_BEFORE_EMAIL
MISSING_TAG
MISSING_TAG_ENTRY
MISSING_TREE
MISSING_TREE_OBJECT
MISSING_TYPE
MISSING_TYPE_ENTRY
MULTIPLE_AUTHORS
TREE_NOT_SORTED
UNKNOWN_TYPE
ZERO_PADDED_DATE
GITMODULES_MISSING
GITMODULES_BLOB
GITMODULES_LARGE
GITMODULES_NAME
GITMODULES_SYMLINK
GITMODULES_URL
GITMODULES_PATH
GITMODULES_UPDATE
BAD_FILEMODE
EMPTY_NAME
FULL_PATHNAME
HAS_DOT
HAS_DOTDOT
HAS_DOTGIT
NULL_SHA1
ZERO_PADDED_FILEMODE
NUL_IN_COMMIT
GITMODULES_PARSE
GITIGNORE_SYMLINK
GITATTRIBUTES_SYMLINK
MAILMAP_SYMLINK
BAD_TAG_NAME
MISSING_TAGGER_ENTRY
EXTRA_HEADER_ENTRY
Unknown fsck message type: '%s'
fsck_msg_type
fsck.c
msg_id >= 0 && msg_id < FSCK_MSG_MAX
in tree %s: entry %s has bad mode %.6o
%.*s~%d
unterminated header: NUL at offset %ld
unterminated header
invalid author/committer line - missing space before email
invalid author/committer line - bad name
invalid author/committer line - missing email
invalid author/committer line - bad email
invalid author/committer line - missing space before date
invalid author/committer line - zero-padded date
invalid author/committer line - date causes integer overflow
invalid author/committer line - bad date
invalid author/committer line - bad time zone
.gitmodules too large to parse
could not parse gitmodules blob
disallowed submodule name: %s
disallowed submodule url: %s
disallowed submodule path: %s
disallowed submodule update setting: %s
git://
http::
https::
ftp::
ftps::
http://
https://
ftp://
ftps://
cannot be parsed as a tree
.gitmodules is a symbolic link
.gitignore is a symlink
.gitattributes is a symlink
.mailmap is a symlink
contains entries pointing to null sha1
contains full pathnames
contains empty pathname
contains '.'
contains '..'
contains '.git'
contains zero-padded file modes
contains bad file modes
contains duplicate file entries
not properly sorted
invalid format - expected 'tree' line
invalid 'tree' line format - bad sha1
invalid 'parent' line format - bad sha1
invalid format - expected 'author' line
invalid format - multiple 'author' lines
invalid format - expected 'committer' line
NUL byte in the commit object body
GIT_TRACE_FSMONITOR
corrupt fsmonitor extension (too short)
%llu
bad fsmonitor version %d
failed to parse ewah bitmap reading fsmonitor index extension
fsmonitor.c
extension/fsmn/read/token
read fsmonitor extension successful '%s'
extension/fsmn/write/token
write fsmonitor extension successful '%s'
refresh fsmonitor
Empty last update token.
fsmonitor process '%s'
fsmonitor process '%s' returned %s
success
failure
add fsmonitor
remove fsmonitor
fsmonitor_dirty has more entries than the index (%ju > %u)
core.fsmonitorhookversion
Invalid hook version '%i' in core.fsmonitorhookversion. Must be 1 or 2.
fsm_hook
query
query/failed
query/response-length
query/trivial-response
fsmonitor_refresh_callback '%s'
LANGUAGE
user.signingkey
unsupported value for %s: %s
gpg.openpgp.program
openpgp
gpg.x509.program
x509
--status-fd=2
-bsau
[GNUPG:] SIG_CREATED 
gpg failed to sign the data
.git_vtag_tmpXXXXXX
could not create temporary file
failed writing detached signature to '%s'
gpg-interface.c
bad signature '%s'
--status-fd=1
[GNUPG:] GOODSIG 
[GNUPG:] 
GOODSIG 
BADSIG 
ERRSIG 
EXPSIG 
EXPKEYSIG 
REVKEYSIG 
VALIDSIG 
TRUST_
gpgsm
--keyid-format=long
-----BEGIN PGP SIGNATURE-----
-----BEGIN PGP MESSAGE-----
-----BEGIN SIGNED MESSAGE-----
UNDEFINED
NEVER
MARGINAL
FULLY
ULTIMATE
log.graphcolors
diff_output_prefix_callback
graph.c
ignore invalid color '%.*s' in log.graphColors
graph_output_pre_commit_line
graph->num_parents >= 3
0 <= graph->expansion_row && graph->expansion_row < graph_num_expansion_rows(graph)
graph_output_commit_char
graph->revs->boundary
graph_output_post_merge_line
par_column >= 0
graph_output_collapsing_line
target * 2 <= i
graph->mapping[i] == -1
graph->mapping[i - 1] > target
graph->mapping[i - 2] < 0
grep.extendedregexp
grep.patterntype
grep.linenumber
grep.fullname
color.grep.match
color.grep.matchcontext
color.grep.matchselected
color.grep.
incomplete pattern expression: %s
function
lineNumber
matchContext
matchSelected
selected
separator
basic
extended
fixed
bad %s argument: %s
grep.c
a non-header pattern in grep header list.
unknown header field %d
malformed header expr
unmatched parenthesis
not a pattern expression %s
--and not followed by pattern expression
--not not followed by pattern expression
--not followed by non pattern expression
given pattern contains NULL byte (via -f <file>). This is only supported with -P under PCRE v2
cannot use Perl-compatible regexes when not compiled with USE_LIBPCRE
In '%s' at %d, 
%s, 
%s'%s': %s
grep_splice_or
x->node == GREP_NODE_OR
grep call which could print a name requires grep_source.name be non-NULL
unknown binary handling mode
Binary file 
 matches
invalid grep_source type to load
'%s': short read
'%s': unable to read %s
attempt to textconv something without a path?
pcre_exec failed with error code %d
regexec_buf
git-compat-util.h
nmatch > 0 && pmatch
Not a valid grep expression
Unexpected node type (internal error) %d
match_one_pattern
p->field < ARRAY_SIZE(header_field)
regexp returned nonsense
hash-lookup.c
assertion failed in binary search
PATH
available git commands in '%s'
git commands available from elsewhere on your $PATH
These are common Git commands used in various situations:
The Git concept guides are:
See 'git help <command>' to read about a specific subcommand
External commands
   %s
Command aliases
git: '%s' is not a git command. See 'git --help'.
help.c
Uh oh. Your system reports no Git commands at all.
WARNING: You called a Git command named '%s', which does not exist.
Continuing under the assumption that you meant '%s'.
Continuing in %0.1f seconds, assuming that you meant '%s'.
The most similar command is
The most similar commands are
git version %s
cpu: %s
arm64
built from commit: %s
no commit associated with this build
sizeof-long: %d
sizeof-size_t: %d
shell-path: %s
git version [<options>]
build-options
also print build options
%s: %s - %s
Did you mean this?
Did you mean one of these?
.exe
start a working area (see also: git help tutorial)
work on the current change (see also: git help everyday)
examine the history and state (see also: git help revisions)
grow, mark and tweak your common history
collaborate (see also: git help workflows)
ancillaryinterrogators
ancillarymanipulators
complete
foreignscminterface
guide
history
mainporcelain
plumbinginterrogators
plumbingmanipulators
purehelpers
synchelpers
synchingrepositories
git-add
Add file contents to the index
git-am
Apply a series of patches from a mailbox
git-annotate
Annotate file lines with commit information
git-apply
Apply a patch to files and/or to the index
git-archimport
Import a GNU Arch repository into Git
git-archive
Create an archive of files from a named tree
Use binary search to find the commit that introduced a bug
git-blame
Show what revision and author last modified each line of a file
git-branch
List, create, or delete branches
git-bugreport
Collect information for user to file a bug report
git-bundle
Move objects and refs by archive
git-cat-file
Provide content or type and size information for repository objects
git-check-attr
Display gitattributes information
git-check-ignore
Debug gitignore / exclude files
git-check-mailmap
Show canonical names and email addresses of contacts
git-checkout
Switch branches or restore working tree files
git-checkout-index
Copy files from the index to the working tree
git-check-ref-format
Ensures that a reference name is well formed
git-cherry
Find commits yet to be applied to upstream
git-cherry-pick
Apply the changes introduced by some existing commits
git-citool
Graphical alternative to git-commit
git-clean
Remove untracked files from the working tree
git-clone
Clone a repository into a new directory
git-column
Display data in columns
git-commit
Record changes to the repository
git-commit-graph
Write and verify Git commit-graph files
git-commit-tree
Create a new commit object
git-config
Get and set repository or global options
git-count-objects
Count unpacked number of objects and their disk consumption
git-credential
Retrieve and store user credentials
git-credential-cache
Helper to temporarily store passwords in memory
git-credential-store
Helper to store credentials on disk
git-cvsexportcommit
Export a single commit to a CVS checkout
git-cvsimport
Salvage your data out of another SCM people love to hate
git-cvsserver
A CVS server emulator for Git
git-daemon
A really simple server for Git repositories
git-describe
Give an object a human readable name based on an available ref
git-diff
Show changes between commits, commit and working tree, etc
git-diff-files
Compares files in the working tree and the index
git-diff-index
Compare a tree to the working tree or index
git-diff-tree
Compares the content and mode of blobs found via two tree objects
git-difftool
Show changes using common diff tools
git-fast-export
Git data exporter
git-fast-import
Backend for fast Git data importers
git-fetch
Download objects and refs from another repository
git-fetch-pack
Receive missing objects from another repository
git-filter-branch
Rewrite branches
git-fmt-merge-msg
Produce a merge commit message
git-for-each-ref
Output information on each ref
git-for-each-repo
Run a Git command on a list of repositories
git-format-patch
Prepare patches for e-mail submission
git-fsck
Verifies the connectivity and validity of the objects in the database
git-gc
Cleanup unnecessary files and optimize the local repository
git-get-tar-commit-id
Extract commit ID from an archive created using git-archive
git-grep
Print lines matching a pattern
git-gui
A portable graphical interface to Git
git-hash-object
Compute object ID and optionally creates a blob from a file
Display help information about Git
git-http-backend
Server side implementation of Git over HTTP
git-http-fetch
Download from a remote Git repository via HTTP
git-http-push
Push objects over HTTP/DAV to another repository
git-imap-send
Send a collection of patches from stdin to an IMAP folder
git-index-pack
Build pack index file for an existing packed archive
git-init
Create an empty Git repository or reinitialize an existing one
git-instaweb
Instantly browse your working repository in gitweb
git-interpret-trailers
Add or parse structured information in commit messages
gitk
The Git repository browser
git-log
Show commit logs
git-ls-files
Show information about files in the index and the working tree
git-ls-remote
List references in a remote repository
git-ls-tree
List the contents of a tree object
git-mailinfo
Extracts patch and authorship from a single e-mail message
git-mailsplit
Simple UNIX mbox splitter program
git-maintenance
Run tasks to optimize Git repository data
git-merge
Join two or more development histories together
git-merge-base
Find as good common ancestors as possible for a merge
git-merge-file
Run a three-way file merge
git-merge-index
Run a merge for files needing merging
git-merge-one-file
The standard helper program to use with git-merge-index
git-mergetool
Run merge conflict resolution tools to resolve merge conflicts
git-merge-tree
Show three-way merge without touching index
git-multi-pack-index
Write and verify multi-pack-indexes
git-mktag
Creates a tag object with extra validation
git-mktree
Build a tree-object from ls-tree formatted text
git-mv
Move or rename a file, a directory, or a symlink
git-name-rev
Find symbolic names for given revs
git-notes
Add or inspect object notes
git-p4
Import from and submit to Perforce repositories
git-pack-objects
Create a packed archive of objects
git-pack-redundant
Find redundant pack files
git-pack-refs
Pack heads and tags for efficient repository access
git-patch-id
Compute unique ID for a patch
git-prune
Prune all unreachable objects from the object database
git-prune-packed
Remove extra objects that are already in pack files
git-pull
Fetch from and integrate with another repository or a local branch
git-push
Update remote refs along with associated objects
git-quiltimport
Applies a quilt patchset onto the current branch
git-range-diff
Compare two commit ranges (e.g. two versions of a branch)
git-read-tree
Reads tree information into the index
git-rebase
Reapply commits on top of another base tip
Receive what is pushed into the repository
git-reflog
Manage reflog information
git-remote
Manage set of tracked repositories
git-repack
Pack unpacked objects in a repository
git-replace
Create, list, delete refs to replace objects
git-request-pull
Generates a summary of pending changes
git-rerere
Reuse recorded resolution of conflicted merges
git-reset
Reset current HEAD to the specified state
git-restore
Restore working tree files
git-revert
Revert some existing commits
git-rev-list
Lists commit objects in reverse chronological order
git-rev-parse
Pick out and massage parameters
git-rm
Remove files from the working tree and from the index
git-send-email
Send a collection of patches as emails
git-send-pack
Push objects over Git protocol to another repository
git-shell
Restricted login shell for Git-only SSH access
git-shortlog
Summarize 'git log' output
git-show
Show various types of objects
git-show-branch
Show branches and their commits
git-show-index
Show packed archive index
git-show-ref
List references in a local repository
git-sh-i18n
Git's i18n setup code for shell scripts
git-sh-setup
Common Git shell script setup code
git-sparse-checkout
Initialize and modify the sparse-checkout
git-stash
Stash the changes in a dirty working directory away
git-stage
Add file contents to the staging area
git-status
Show the working tree status
git-stripspace
Remove unnecessary whitespace
git-submodule
Initialize, update or inspect submodules
git-svn
Bidirectional operation between a Subversion repository and Git
git-switch
Switch branches
git-symbolic-ref
Read, modify and delete symbolic refs
git-tag
Create, list, delete or verify a tag object signed with GPG
git-unpack-file
Creates a temporary file with a blob's contents
git-unpack-objects
Unpack objects from a packed archive
git-update-index
Register file contents in the working tree to the index
git-update-ref
Update the object name stored in a ref safely
git-update-server-info
Update auxiliary info file to help dumb servers
Send archive back to git-archive
Send objects packed back to git-fetch-pack
git-var
Show a Git logical variable
git-verify-commit
Check the GPG signature of commits
git-verify-pack
Validate packed Git archive files
git-verify-tag
Check the GPG signature of tags
gitweb
Git web interface (web frontend to Git repositories)
git-whatchanged
Show logs with difference each commit introduces
git-worktree
Manage multiple working trees
Create a tree object from the current index
gitattributes
Defining attributes per path
gitcli
Git command-line interface and conventions
gitcore-tutorial
A Git core tutorial for developers
gitcredentials
Providing usernames and passwords to Git
gitcvs-migration
Git for CVS users
gitdiffcore
Tweaking diff output
giteveryday
A useful minimum set of commands for Everyday Git
gitfaq
Frequently asked questions about using Git
gitglossary
A Git Glossary
githooks
Hooks used by Git
Specifies intentionally untracked files to ignore
gitmailmap
Map author/committer names and/or E-Mail addresses
gitmodules
Defining submodule properties
gitnamespaces
Git namespaces
gitremote-helpers
Helper programs to interact with remote repositories
gitrepository-layout
Git Repository Layout
gitrevisions
Specifying revisions and ranges for Git
gitsubmodules
Mounting one repository inside another
gittutorial-2
A tutorial introduction to Git: part two
gittutorial
A tutorial introduction to Git
gitworkflows
An overview of recommended workflows with Git
Main Porcelain Commands
Ancillary Commands / Manipulators
Ancillary Commands / Interrogators
Interacting with Others
Low-level Commands / Manipulators
Low-level Commands / Interrogators
Low-level Commands / Syncing Repositories
Low-level Commands / Internal Helpers
alias.
   %s   
help.autocorrect
immediate
0123456789abcdef
EMAIL
no email was given and auto-detection is disabled
unable to auto-detect email address (got '%s')
no name was given and auto-detection is disabled
unable to auto-detect name (got '%s')
empty ident name (for <%s>) not allowed
name consists only of disallowed characters: %s
GIT_COMMITTER_DATE
user.useconfigonly
Unknown
/etc/mailname
cannot read /etc/mailname
cannot get host name
%s.(none)
Author identity unknown
Committer identity unknown
*** Please tell me who you are.
  git config --global user.email "you@example.com"
  git config --global user.name "Your Name"
to set your account's default identity.
Omit --global to set the identity only in this repository.
json-writer.c
json-writer: too many jw_end(): '%s'
json-writer: object: missing jw_object_begin(): '%s'
json-writer: object: not in object: '%s'
\u%04x
%%.%df
json-writer: object: missing jw_end(): '%s'
json-writer: array: missing jw_array_begin()
json-writer: array: not in array
memory exhausted
kwset.c
Cannot allocate a negative amount: %ld
range_set_append_unsafe
line-log.c
a <= b
range_set_append
rs->nr == 0 || rs->ranges[rs->nr-1].end <= a
sort_and_merge_range_set
o <= rs->nr
range_set_check_invariants
rs->ranges[0].start < rs->ranges[0].end
rs->ranges[i-1].end < rs->ranges[i].start
rs->ranges[i].start < rs->ranges[i].end
More than one commit to dig from: %s and %s?
No commit specified?
-L argument not 'start,end:file' or ':funcname:file': %s
malformed -L argument '%s'
There is no path %s in the commit
Cannot read blob %s
nth_line
d && line <= d->lines
d->spec && d->spec->data
range_set_union
out->nr == 0
%s%sdiff --git a/%s b/%s%s
%s%s+++ b/%s%s
%s%s@@ -%ld,%ld +%ld,%ld @@%s
\ No newline at end of file
line_log_data_copy
line_log_data_copy_one
queue_diffs
move_diff_queue
src != dst
process_all_files
process_diff_filepair
pair->two->path
rg->path
pair->two->oid_valid
parse_range_funcname
line-range.c
*arg == ':'
-L parameter '%s': %s
-L parameter '%s' starting at line %ld: no match
-L parameter '%s' matches at EOF
-L parameter: regexec() failed: %s
-L invalid empty range
-L invalid line number: %ld
-L parameter '%s' starting at line %ld: %s
linear-assignment.c
negative j: %d
blob:none
blob:limit
sparse:oid
object:type
combine
list-objects-filter-options.c
list_object_filter_config_name: invalid argument '%d'
multiple filter-specs cannot be combined
negative growth in ALLOC_GROW_BY
no filter_spec available for this filter
blob:limit=%lu
unable to upgrade repository format to support partial clone
remote.%s.promisor
remote.%s.partialclonefilter
filter_options already populated
blob:limit=
tree:
expected 'tree:<depth>'
sparse:oid=
sparse:path=
sparse:path filters support has been dropped
object:type=
'%s' for 'object:type=<type>' isnot a valid object type
combine:
invalid filter-spec '%s'
expected something after combine:
parse_combine_filter
subspecs[sub]->buf[last] == '+'
must escape char in sub-filter-spec: '%c'
~`!@#$^&*()[]{}\;'",<>?
Add to combine filter-spec: %s
list-objects-filter.c
invalid list-objects filter choice: %d
unknown filter_situation: %d
filter_blobs_none
obj->type == OBJ_TAG
obj->type == OBJ_COMMIT
obj->type == OBJ_TREE
obj->type == OBJ_BLOB
(obj->flags & SEEN) == 0
filter_blobs_limit
filter_trees_depth
unable to access sparse blob in '%s'
unable to parse sparse filter data in %s
filter_sparse
filter_data->nr > 1
filter_object_type
expected oidset to be cleared already
unable to load root tree for commit %s
traverse_trees_and_blobs
list-objects.c
base->len == 0
unknown pending object %s (%s)
bad tree object
Skipping contents of tree %s...
entry '%s' in tree %s has tree mode, but is not a tree
entry '%s' in tree %s has blob mode, but is not a blob
bad blob object
conflict-marker-size
merge.default
driver
%s: lacks value
ll_ext_merge
ll-merge.c
opts
custom merge driver %s lacks command line.
built-in binary merge
built-in 3-way text merge
built-in union merge
ll_binary_merge
Cannot merge binary files: %s (%s vs. %s)
ll_xdl_merge
ll_union_merge
Unable to create '%s.lock': %s.
Another git process seems to be running in this repository, e.g.
an editor opened by 'git commit'. Please make sure all processes
are terminated then try again. If it still fails, a git process
may have crashed in this repository earlier:
remove the file manually to continue.
Unable to create '%s.lock': %s
lockfile.c
get_locked_file_path() called for malformed lock object
tag: 
%04d-%s
Subject: [%s%s%0*d/%d] 
Subject: [%s] 
From %s Mon Sep 17 00:00:00 2001
Message-Id: <%s>
In-Reply-To: <%s>
%s<%s>
References: 
%sMIME-Version: 1.0
Content-Type: multipart/mixed; boundary="%s%s"
This is a multi-part message in MIME format.
--%s%s
Content-Type: text/plain; charset=UTF-8; format=fixed
Content-Transfer-Encoding: 8bit
--%s%s
Content-Type: text/x-patch; name="%s"
Content-Transfer-Encoding: 8bit
Content-Disposition: %s; filename="%s"
attachment
 (from %s)
log size %i
grafted
object names
invalid replace ref %s
replaced
No signature
%s%.*s%s%s
malformed mergetag
merged tag '%s'
tag %s names a non-parent %s
parent #%d, tagged '%s'
peel
symrefs
ref-prefix 
expected flush after ls-refs arguments
advertise
invalid value '%s' for lsrefs.unborn
unborn %s
 symref-target:%s
 peeled:%s
empty patch: '%s'
>From 
Content-Type
Content-Transfer-Encoding
Message-Id
Subject
cannot convert from %s to %s
format=
flowed
delsp=
boundary=
Too many boundaries to handle
charset=
base64
quoted-printable
mailinfo.c
Message-Id: %s
>From
[PATCH]
diff -
Index: 
quoted CRLF detected
Detected mismatched boundaries, can't recover
inbody_header_accum, if not empty, must always contain a valid in-body header
a NUL byte in '%s' is not allowed.
Author: %s
Email: %s
%s: %s
%s: %.*s
mailinfo.
mailinfo.quotedcr
HEAD:.mailmap
.mailmap
unable to open mailmap at %s
unable to read mailmap object at %s
mailmap is not a blob: %s
cannot find path %s in tree %s
cannot read tree %s
entry %s in tree %s is not a tree
entry %.*s not found in tree %s
.our
.their
merge_switch_to_result
merge-ort.c
record_conflicted
write_auto_merge
display messages
merge_finalize
incore_nonrecursive
merge_incore_nonrecursive
incore_recursive
merge_incore_recursive
opt->ancestor == NULL
record_conflicted_index_entries
ci && !ci->merged.clean
Conflicted %s but nothing in basic working tree or index; this shouldn't happen
cruft
Note: %s not up to date and in way of checking out conflicted version; old copy renamed to %s
sanity checks
opt->priv->call_depth == 0
!opt->priv->toplevel_dir || 0 == strlen(opt->priv->toplevel_dir)
allocate/init
collect_merge_info
collecting merge info failed for trees %s, %s, %s
renames
process_entries
Called collect_merge_info_callback wrong
collect_merge_info_callback
mbase_null == is_null_oid(&names[0].oid)
side1_null == is_null_oid(&names[1].oid)
side2_null == is_null_oid(&names[2].oid)
!mbase_null || !side1_null || !side2_null
mask > 0 && mask < 8
setup_path_info
!is_null || resolved
!df_conflict || !resolved
resolved == (merged_version != NULL)
collect_rename_info
renames->dir_rename_mask == 0 || renames->dir_rename_mask == (dirmask & ~1)
traverse_trees_wrapper
renames->dir_rename_mask == 2 || renames->dir_rename_mask == 4
traverse_trees_wrapper_callback
n==3
regular renames
directory renames
process renames
diffcore_rename
CONFLICT (directory rename split): Unclear where to rename %s to; it was renamed to multiple other directories, with no destination getting a majority of the files.
compute_collisions
new_path
Failed to apply directory rename!
c_info is NULL
apply_directory_rename_modifications
ci->filemask == 2 || ci->filemask == 4
ci->dirmask == 0
new_ci && !new_ci->merged.clean
(new_ci->filemask & ci->filemask) == 0
process_renames
base && !base->merged.clean
side1 && !side1->merged.clean
side2 && !side2->merged.clean
side1 == side2
CONFLICT (rename/rename): %s renamed to %s in %s and to %s in %s.
newinfo && !newinfo->merged.clean
target_index == 1 || target_index == 2
source_deleted || oldinfo->filemask & old_sidemask
CONFLICT (rename involved in collision): rename of %s -> %s has content conflicts AND collides with another path; this may result in nested conflict markers.
CONFLICT (rename/delete): %s renamed to %s in %s, but deleted in %s.
(S_IFMT & a->mode) == (S_IFMT & b->mode)
S_ISREG(a->mode)
unsupported object type in the tree: %06o for %s
pathnames[0] && pathnames[1] && pathnames[2] && opt->ancestor
Note: Fast-forwarding submodule %s to %s
Failed to merge submodule %s
Failed to merge submodule %s, but a possible merge resolution exists:
Failed to merge submodule %s, but multiple possible merges exist:
%h %s
process_entries setup
plist grow
plist copy
plist special sort
processing
process_entries cleanup
dir_metadata.offsets.nr = %d (should be 1)
dir_metadata.offsets.items[0].util = %u (should be 0)
dir_metadata accounting completely off; shouldn't happen
write_completed_directory
dir_info
record_entry_for_tree
strchr(basename, '/') == NULL
ci->match_mask == 0 || ci->match_mask == 3 || ci->match_mask == 5 || ci->match_mask == 6
ci->df_conflict
ci->filemask != 0
ci->merged.result.mode == S_IFDIR
CONFLICT (file/directory): directory in the way of %s from %s; moving it to %s instead.
othermask == 2 || othermask == 4
ci->merged.is_null == (ci->filemask == ci->match_mask)
CONFLICT (distinct types): %s had different types on each side; renamed both of them so each can be recorded somewhere.
CONFLICT (distinct types): %s had different types on each side; renamed one of them so each can be recorded somewhere.
rename_a || rename_b
df_file_index == 1 || df_file_index == 2
CONFLICT (modify/delete): %s deleted in %s and modified in %s.  Version %s of %s left in tree.
write_tree
offset <= versions->nr
merge_trees
merge-recursive.c
opt->ancestor != NULL
constructed merge base
merge_recursive
opt->ancestor == NULL || !strcmp(opt->ancestor, "constructed merge base")
Could not parse object '%s'
GIT_MERGE_VERBOSITY
subtree=
diff-algorithm=
no-renormalize
find-renames=
rename-threshold=
merge_start
opt->repo
opt->branch1 && opt->branch2
opt->detect_renames >= -1 && opt->detect_renames <= DIFF_DETECT_COPY
opt->detect_directory_renames >= MERGE_DIRECTORY_RENAMES_NONE && opt->detect_directory_renames <= MERGE_DIRECTORY_RENAMES_TRUE
opt->rename_limit >= -1
opt->rename_score >= 0 && opt->rename_score <= MAX_SCORE
opt->show_rename_progress >= 0 && opt->show_rename_progress <= 1
opt->xdl_opts >= 0
opt->recursive_variant >= MERGE_VARIANT_NORMAL && opt->recursive_variant <= MERGE_VARIANT_THEIRS
opt->verbosity >= 0 && opt->verbosity <= 5
opt->buffer_output <= 2
opt->obuf.len == 0
opt->priv == NULL
Your local changes to the following files would be overwritten by merge:
  %s
merging of trees %s and %s failed
unprocessed path??? %s
get_directory_renames
entry->new_dir.len == 0
CONFLICT (rename/rename): Rename directory %s->%s in %s. Rename directory %s->%s in %s
WARNING: Avoiding applying %s -> %s rename to %s, because %s itself was renamed.
entry->non_unqiue_dir not set and !new_path
CONFLICT (directory rename split): Unclear where to place %s because directory %s was renamed to multiple other directories, with no destination getting a majority of the files.
collision_ent is NULL
CONFLICT (implicit dir rename): Existing file/dir at %s in the way of implicit directory rename(s) putting the following path(s) there: %s.
CONFLICT (implicit dir rename): Cannot map more than one path to %s; implicit directory renames tried to put these paths there: %s
Refusing to lose dirty file at %s
ren1_src != ren2_src
ren1_dst != ren2_dst
blob expected for %s '%s'
failed to open '%s': %s
failed to symlink '%s': %s
do not know what to do with %06o %s '%s'
failed to create path '%s'%s
Removing %s to make room for subdirectory
: perhaps a D/F conflict?
refusing to lose untracked file at '%s'
add_cacheinfo failed for path '%s'; merge aborting.
add_cacheinfo failed to refresh for path '%s'; merge aborting.
process_entry
opt->branch1 == ci->ren1->branch
Removing %s
file/directory
directory/file
CONFLICT (%s): There is a directory with name %s in %s. Adding %s as %s
Adding %s
CONFLICT (add/add): Merge conflict in %s
fatal merge failure, shouldn't happen.
warn_about_dir_renamed_entries
opt->detect_directory_renames > MERGE_DIRECTORY_RENAMES_NONE
ren->dir_rename_original_type == 'A' || ren->dir_rename_original_type == 'R'
Path updated: %s added in %s inside a directory that was renamed in %s; moving it to %s.
CONFLICT (file location): %s added in %s inside a directory that was renamed in %s, suggesting it should perhaps be moved to %s.
Path updated: %s renamed to %s in %s, inside a directory that was renamed in %s; moving it to %s.
CONFLICT (file location): %s renamed to %s in %s, inside a directory that was renamed in %s, suggesting it should perhaps be moved to %s.
Impossible dir_rename_original_type/clean combination
handle_rename_via_dir
ren->dir_rename_original_dest
Error: Refusing to lose untracked file at %s; writing to %s instead.
CONFLICT (rename/add): Rename %s->%s in %s.  Added %s in %s
version of %s from %s
Failed to execute internal merge
unsupported object type in the tree
Auto-merging %s
merge_3way
a->path && b->path && o->path && opt->ancestor
Failed to merge submodule %s (not checked out)
Failed to merge submodule %s (commits not present)
Failed to merge submodule %s (commits don't follow merge-base)
Fast-forwarding submodule %s to the following commit:
Fast-forwarding submodule %s
Failed to merge submodule %s (merge following commits not found)
Failed to merge submodule %s (not fast-forward)
Found a possible merge resolution for the submodule:
If this is correct simply add it to the index for example
by using:
  git update-index --cacheinfo 160000 %s "%s"
which will accept this suggestion.
Failed to merge submodule %s (multiple merges found)
virtual %s
(bad commit)
print_commit
!merge_remote_util(commit)
 %h: %m %s
renamed
CONFLICT (%s/delete): %s deleted in %s and %s in %s. Version %s of %s left in tree.
CONFLICT (%s/delete): %s deleted in %s and %s to %s in %s. Version %s of %s left in tree.
CONFLICT (%s/delete): %s deleted in %s and %s in %s. Version %s of %s left in tree at %s.
CONFLICT (%s/delete): %s deleted in %s and %s to %s in %s. Version %s of %s left in tree at %s.
CONFLICT (rename/rename): Rename "%s"->"%s" in branch "%s" rename "%s"->"%s" in "%s"%s
 (left unresolved)
%s and %s, both renamed from %s
%s is a directory in %s adding as %s instead
Refusing to lose untracked file at %s; adding as %s instead
CONFLICT (rename/rename): Rename %s->%s in %s. Rename %s->%s in %s
cannot read object %s
object %s is not a blob
modify
Refusing to lose untracked file at %s, even though it's in the way.
content
add/add
handle_content_merge
o->path && a->path && b->path
Skipped %s (merged same as existing)
CONFLICT (%s): Merge conflict in %s
Adding as %s instead
merge.renamelimit
Merging:
found %u common ancestor:
found %u common ancestors:
ancestor
empty tree
merged common ancestors
Temporary merge branch 1
Temporary merge branch 2
merge returned no commit
merged tree
merge.directoryrenames
merge-%s
--%s
failed to read the cache
%s/pack/multi-pack-index-%s.rev
multi-pack-index file %s is too small
multi-pack-index signature 0x%08x does not match signature 0x%08x
multi-pack-index version %d not recognized
multi-pack-index hash version %u does not match version %u
multi-pack-index missing required pack-name chunk
multi-pack-index missing required OID fanout chunk
multi-pack-index missing required OID lookup chunk
multi-pack-index missing required object offsets chunk
multi-pack-index pack names out of order: '%s' before '%s'
midx.c
midx
load/num_packs
load/num_objects
bad pack-int-id: %u (%u total packs)
%s/pack/%s
failed to clear multi-pack-index at %s
multi-pack-index file exists, but failed to parse
Looking for referenced packfiles
failed to load pack in position %d
oid fanout out of order: fanout[%d] = %x > %x = fanout[%d]
the midx contains no oid
Verifying OID order in multi-pack-index
oid lookup out of order: oid[%d] = %s >= %s = oid[%d]
Sorting objects by packfile
Verifying object offsets
failed to load pack entry for oid[%d] = %s
failed to load pack-index for packfile %s
incorrect object offset for oid[%d] = %s: %llx != %llx
Counting referenced objects
Finding and deleting unreferenced packfiles
/pack/pack
could not start pack-objects
could not finish pack-objects
%s/pack/multi-pack-index
invalid hash version
multi-pack-index OID fanout is of the wrong size
Adding packfiles to multi-pack-index
did not see pack-file %s to drop
unknown preferred pack: '%s'
preferred pack '%s' is expired
no pack files to index.
failed to add packfile '%s'
failed to open pack-index '%s'
failed to locate object %d in packfile
incorrect pack-file order: %s before %s
OIDs not in order: %s >= %s
object %s is in an expired pack with int-id %d
object %s requires a large offset (%llx) but the MIDX is not writing large offsets!
too many large-offset objects
%s-%s.rev
multi-pack-index-%s%s
multi-pack-index-
name-hash.c
name-hash-init
initialize name hash
unable to create lazy_dir thread: %s
unable to join lazy_dir_thread
unable to create lazy_name thread: %s
unable to join lazy_name thread: %s
handle_range_dir
begin >= 0
cache entry out of order
hash_dir_entry_with_parent_and_prefix
(parent != NULL) ^ (strchr(prefix->buf, '/') == NULL)
negotiator/noop.c
ack with noop negotiator, which does not emit any commits
negotiator/skipping.c
missing parent in priority queue
received ack for commit %s not sent as 'have'
refs/notes/%s
update notes cache
notes_merge
notes-merge.c
o->local_ref && o->remote_ref
!strcmp(o->local_ref, local_tree->ref)
notes_merge(o->local_ref = %s, o->remote_ref = %s)
Failed to resolve local notes ref '%s'
Could not parse local commit %s (%s)
local commit: %.7s
Failed to resolve remote notes ref '%s'
Could not parse remote commit %s (%s)
remote commit: %.7s
Cannot merge empty notes ref (%s) into empty notes ref (%s)
One merge base found (%.7s)
Multiple merge bases found. Using the first (%.7s)
Merging remote commit %.7s into local commit %.7s with merge-base %.7s
notes_merge(): result = %i, result_oid = %.7s
Committing notes in notes merge worktree at %s
partial notes commit has empty message
could not open %s
Skipping non-SHA1 entry '%s%s'
Failed to stat '%s'
Failed to write blob object from '%s'
Failed to add resolved note '%s' to notes tree
Added resolved note for object %s: %s
Finalized notes merge commit: %s
Removing notes merge worktree at %s/*
merge_from_diffs(base = %.7s, local = %.7s, remote = %.7s)
Merge result: %i unmerged notes and a dirty notes tree
Merge result: %i unmerged notes and a clean notes tree
diff_tree_remote(base = %.7s, remote = %.7s)
Cannot merge entry '%s' (%c): %.7s -> %.7s. Skipping!
diff_tree_remote
oideq(&mp->obj, &obj)
is_null_oid(&mp->remote)
is_null_oid(&mp->base)
!"Invalid existing change recorded"
Stored remote change for %s: %.7s -> %.7s
verify_notes_filepair
p->one->mode == p->two->mode
!is_null_oid(&p->one->oid)
!is_null_oid(&p->two->oid)
is_null_oid(&p->one->oid)
is_null_oid(&p->two->oid)
!strcmp(p->one->path, p->two->path)
diff_tree_local(len = %i, base = %.7s, local = %.7s)
Ignoring local-only change for %s: %.7s -> %.7s
diff_tree_local
is_null_oid(&mp->local) || oideq(&mp->local, &uninitialized)
oideq(&p->one->oid, &mp->base)
oideq(&mp->local, &uninitialized)
Stored local change for %s: %.7s -> %.7s
merge_changes(num_changes = %i)
%.7s: %.7s -> %.7s/%.7s
skipping (no remote change)
skipping (local == remote)
no local change, adopted remote
need content-level merge
Using local notes for %s
Using remote notes for %s
Concatenating local and remote notes for %s
failed to concatenate notes (combine_notes_concatenate)
Concatenating unique lines in local and remote notes for %s
failed to concatenate notes (combine_notes_cat_sort_uniq)
Unknown strategy (%i).
local version
remote version
merge_one_change_manual(obj = %.7s, base = %.7s, local = %.7s, remote = %.7s)
Conflicts:
Auto-merging notes for %s
merge_one_change_manual
!is_null_oid(&p->remote)
CONFLICT (delete/modify): Notes for object %s deleted in %s and modified in %s. Version from %s left in tree.
!is_null_oid(&p->local)
CONFLICT (%s): Merge conflict in notes for object %s
removing from partial merge result
You have not concluded your previous notes merge (%s exists).
Please, use 'git notes merge --commit' or 'git notes merge --abort' to commit/abort the previous merge before you start a new notes merge.
NOTES_MERGE_*
You have not concluded your notes merge (%s exists).
NOTES_MERGE_WORKTREE/.test
unable to create directory %s
missing '%s'. This should not happen
cannot read note %s for object %s
blob expected in note %s for object %s
NOTES_MERGE_WORKTREE/%s
unable to create directory for '%s'
notes-merge
No merge base found; doing history-less merge
create_notes_commit
notes-utils.c
Failed to write notes tree to database
Failed to find/parse commit %s
Failed to commit notes tree to database
Cannot commit uninitialized/unreferenced notes tree
manual
cat_sort_uniq
GIT_NOTES_REWRITE_MODE
GIT_NOTES_REWRITE_REF
Bad %s value: '%s'
overwrite
concatenate
notes.rewrite.
notes.rewritemode
Bad notes.rewriteMode value: '%s'
notes.rewriteref
Refusing to rewrite notes in %s (outside of refs/notes/)
string_list_add_refs_by_glob
notes.c
list->strdup_strings
notes ref %s is invalid
refs/notes/commits
init_notes
!t->initialized
Cannot use notes ref %s
Failed to read notes tree referenced by %s (%s)
load_display_notes
!display_notes_trees
GIT_NOTES_DISPLAY_REF
add_note
t->initialized
remove_note
get_note
for_each_note
write_notes_tree
prune_notes
format_display_notes
display_notes_trees
notes/
Could not read %s for notes-index
prefix_len (%ju) is out of range
prefix_len (%ju) is too small
Failed to load %s %s into notes tree from %s
note
notes.displayref
note_tree_insert
GET_PTR_TYPE(entry) == 0
GET_PTR_TYPE(*p) == PTR_TYPE_NOTE || GET_PTR_TYPE(*p) == PTR_TYPE_SUBTREE
note_tree_remove
i == n && parent_stack[i] == tree
note_tree_consolidate
tree && parent
CLR_PTR_TYPE(parent->a[index]) == tree
for_each_note_helper
path_len < FANOUT_PATH_MAX - 1
construct_path_with_fanout
fanout < the_hash_algo->rawsz
write_each_note
note_path_len <= GIT_MAX_HEXSZ + FANOUT_PATH_SEPARATORS
write_each_note_helper
memchr(path + 3 * n, '/', path_len - (3 * n)) == NULL
tree_write_stack_init_subtree
!tws->next
tws->path[0] == '\0' && tws->path[1] == '\0'
%o %.*s%c
Notes:
Notes (%s):
sha1
sha256
raceproof_create_file
object-file.c
*path
unable to fdopen alternates lockfile
unable to read alternates file
unable to move new alternates file into place
path '%s' does not exist
%s/.git/objects
reference repository '%s' as a linked checkout is not supported yet.
reference repository '%s' is not a local repository.
reference repository '%s' is shallow
%s/info/grafts
reference repository '%s' is grafted
mmap failed
failed to read object %s
replacement %s not found for %s
loose object %s (stored in %s) is corrupt
packed object %s (stored in %s) is corrupt
unable to write file %s
unable to set permission to '%s'
cannot read object for %s
open("%s")
%s: failed to insert into database
readlink("%s")
%s: unsupported file type
%s is not a valid '%s' object
invalid loose object subdirectory: %x
%02x
unable to mmap %s
unable to unpack header of %s
unable to parse header of %s
unable to unpack contents of %s
hash mismatch for %s (expected %s)
trying to init unknown hash
trying to clone unknown hash
trying to update unknown hash
trying to finalize unknown hash
0123456789abcdef
%s: ignoring alternate object stores, nesting too deep
unable to normalize object directory: %s
unable to normalize alternate object path: %s
object directory %s does not exist; check .git/objects/info/alternates
/refs
invalid line while parsing alternate refs: %s
--git-dir=%s
--format=%(objectname)
%s/info/alternates
GIT_MMAP_LIMIT
attempting to mmap %ju over limit %ju
object file %s is empty
invalid object type
unable to unpack %s header with --allow-unknown-type
unable to unpack %s header
unable to parse %s header with --allow-unknown-type
unable to parse %s header
insufficient permission for adding an object to repository database %s
unable to create temporary file
unable to write loose object file
unable to deflate new object %s (%d)
deflateEnd on object %s failed (%d)
confused by unstable object source data for %s
tmp_obj_XXXXXX
/tmp_obj_XXXXXX
file write error
loose object file
error when closing loose object file
index_stream_convert_blob
would_convert_to_git_filter_fd(istate, path)
corrupt commit
corrupt tag
read error while indexing %s
<unknown>
short read while indexing %s
corrupt loose object '%s'
garbage at end of loose object '%s'
committish
treeish
unknown hint type for '%s': %s
%.*s: expected %s type, but the object dereferences to %s type
refs/heads/HEAD
object-name.c
incompatible flags for get_oid_with_context
0123456789abcdef
checkout: moving from 
 to 
@{upstream}
@{u}
@{push}
invalid object name '%.*s'.
commit}
tag}
tree}
blob}
object}
refname '%.*s' is ambiguous.
Git normally never creates a ref that ends with 40 hex characters
because it will be ignored when you just specify 40-hex. These refs
may be created by mistake. For example,
  git switch -c $br $(git rev-parse ...)
where "$br" is somehow empty and a 40-hex ref is created. Please
examine these refs and maybe delete them. Turn this message off by
running "git config advice.objectNameWarning false"
log for '%.*s' only goes back to %s
log for '%.*s' only has %d entries
multiple get_short_oid disambiguator flags
short object ID %s is ambiguous
The candidates are:
show_ambiguous_object shouldn't return non-zero
 %ad - %s
  %s %s%s
unknown type
relative path syntax can't be used outside working tree
path '%s' is in the index, but not at stage %d
hint: Did you mean ':%d:%s'?
path '%s' is in the index, but not '%s'
hint: Did you mean ':%d:%s' aka ':%d:./%s'?
path '%s' exists on disk, but not in the index
path '%s' does not exist (neither on disk nor in the index)
path '%s' exists on disk, but not in '%.*s'
path '%s' exists, but not '%s'
hint: Did you mean '%.*s:%s' aka '%.*s:./%s'?
path '%s' does not exist in '%.*s'
invalid object type "%s"
object %s is a %s, not a %s
object %s has unknown type id %d
unable to parse object: %s
hash mismatch %s
tree
could not open object name list: %s
invalid object name: %s
Could not read '%s'
Missing type information for %s (%d/%d)
Building bitmaps
pack-bitmap-write.c
pack-bitmap-write
building_bitmaps_total
Selecting bitmap commits
pack/tmp_bitmap_XXXXXX
unable to make temporary bitmap file readable
unable to rename temporary bitmap file to '%s'
num_selected_commits
num_maximal_commits
Failed to write bitmap index. Packfile doesn't have full closure (object %s is missing)
unable to load tree object %s
Duplicate entry when writing index: %s
Failed to write bitmap index
trying to write commit not in index
pack-bitmap.c
failed to perform bitmap walk
reuse_partial_packfile_from_bitmap
traverse_bitmap_commit_list
bitmap_git->result
count_bitmap_commit_list
failed to load bitmap indexes
you must specify exactly one commit to test
Bitmap v%d test (%d entries loaded)
Found bitmap for %s. %d bits / %08x checksum
Commit %s doesn't have an indexed bitmap
Verifying bitmap entries
mismatch in bitmap results
pack.preferbitmaptips
open_pack_bitmap
!bitmap_git->map
ignoring extra bitmap file: %s
%.*s.bitmap
Corrupted bitmap index (too small)
Corrupted bitmap index file (wrong header)
Unsupported version for bitmap index file (%d)
Unsupported options for bitmap index file (Git requires BITMAP_OPT_FULL_DAG)
corrupted bitmap index file (too short to fit hash cache)
load_pack_bitmap
bitmap_git->map
Failed to load bitmap index (corrupted?)
corrupt ewah bitmap: truncated header for entry %d
corrupt ewah bitmap: commit index %u out of range
Corrupted bitmap pack index
Invalid XOR offset in bitmap pack index
Duplicate entry in bitmap index: %s
object type %d not stored by bitmap type index
filter_bitmap_object_type given invalid object
Object not in bitmap: %s
packfile %s index not opened
Packfile index for %s hash mismatch
%s pack checksum mismatch
%s pack checksum does not match its index
pack-check.c
unable to get oid of object %lu from %s
index CRC mismatch for object %s from %s at offset %ju
cannot unpack %s from %s at offset %ju
packed %s from %s is corrupt
packing_data has already been converted to pack array
GIT_TEST_FULL_IN_PACK_ARRAY
GIT_TEST_OE_SIZE
GIT_TEST_OE_DELTA_SIZE
duplicate object inserted into hash
Duplicate object in hash
bad offset for revindex
pack-revindex.c
pack_pos_to_index: reverse index not yet loaded
pack_pos_to_index: out-of-bounds object at %u
pack_pos_to_offset: out-of-bounds object at %u
pack_pos_to_midx: reverse index not yet loaded
pack_pos_to_midx: out-of-bounds object at %u
midx_to_pack_pos: reverse index not yet loaded
midx_to_pack_pos: out-of-bounds object at %u
%.*s.rev
GIT_TEST_REV_INDEX_DIE_IN_MEMORY
dying as requested by '%s'
reverse-index file %s is too small
reverse-index file %s is corrupt
reverse-index file %s has unknown signature
reverse-index file %s has unsupported version %u
reverse-index file %s has unsupported hash id %u
write_idx_file
pack-write.c
index_name
pack/tmp_idx_XXXXXX
The same object %s appears twice in the pack
qsort_s() failed
cannot both write and verify reverse index
pack/tmp_rev_XXXXXX
could not stat: %s
failed to make %s readable
Unable to reread header of '%s'
Unexpected short read for header of '%s'
Failed to checksum '%s'
Unexpected checksum for %s (disk corruption?)
keep
%s/pack/pack-%s.keep
bad type %d
object size is too enormous to format
unable to make temporary pack file readable
unable to make temporary index file readable
unable to rename temporary pack file
%s.idx
unable to rename temporary index file
%s.rev
unable to rename temporary reverse-index file
could not write '%s' promisor file
write_rev_header: unknown hash version
%s/pack/pack-%s.%s
pack_report: getpagesize()            = %10ju
pack_report: core.packedGitWindowSize = %10ju
pack_report: core.packedGitLimit      = %10ju
pack_report: pack_used_ctr            = %10u
pack_report: pack_mmap_calls          = %10u
pack_report: pack_open_windows        = %10u / %10u
pack_report: pack_mapped              = %10ju / %10ju
index file %s is too small
empty data
index file %s is version %u and is not supported by this binary (try upgrading GIT to a newer version)
non-monotonic index %s
wrong index v1 file size in %s
wrong index v2 file size in %s
packfile.c
pack_name does not end in .pack
%.*s.idx
pack '%s' still has open windows to it
want to close pack marked 'do-not-close'
.keep
packfile %s cannot be accessed
offset beyond end of packfile (truncated pack?)
offset before end of packfile (broken .idx?)
packfile %s cannot be mapped
unable to open object pack directory: %s
bad object header
delta data unpack-initial failed
I am totally screwed
could not find object at offset %ju in pack %s
failed to validate delta base reference at offset %ju from %s
unpack_entry: left loop at a valid delta
unknown object type %i at offset %ju in %s
failed to read delta base object %s at offset %ju from %s
failed to unpack compressed delta at offset %ju from %s
bsearch_pack called without a valid pack-index
offset before start of pack index for %s (corrupt index?)
offset beyond end of pack index for %s (truncated index?)
unable to get sha1 of object %u in %s
packfile %s index unavailable
packfile %s not a regular file
packfile %s size changed
error reading from %s
file %s is far too short to be a packfile
file %s is not a GIT packfile
packfile %s is version %u and not supported (try upgrading GIT to a newer version)
packfile %s claims to have %u objects while index indicates %u objects
packfile %s signature is unavailable
packfile %s does not match index
%.*s.pack
GIT_TRACE_PACK_ACCESS
%s %ju
PAGER
COLUMNS
GIT_PAGER_IN_USE
LESS=FRX LV=-c
malformed build-time PAGER_ENV: %s
malformed build-time PAGER_ENV
pager.
GIT_TEST_CHECKOUT_WORKERS
invalid value for GIT_TEST_CHECKOUT_WORKERS: '%s'
parallel-checkout.c
parallel checkout already initialized
pcheckout
collision/dirname
collision/basename
failed to open file '%s'
unable to close file '%s'
unable to stat just-written file '%s'
cannot run parallel checkout: uninitialized or already running
unsupported conv_attrs classification '%d'
write_pc_item_to_fd
is_eligible_for_parallel_checkout(pc_item->ce, &pc_item->ca)
unable to write file '%s'
failed to rewind descriptor of '%s'
failed to truncate file '%s'
--prefix=%s
failed to spawn checkout worker
failed to poll checkout workers
error polling from checkout worker
too short result from checkout worker (got %dB, exp >=%dB)
received result from supposedly finished checkout worker
unexpected item id from checkout worker (got %ju, exp %ju)
wrong result size from checkout worker (got %dB, exp %dB)
checkout worker %d died of signal %d
unknown checkout item status in parallel checkout
parallel checkout finished with pending entries
cannot finish parallel checkout: not initialized yet
option `%s' expects a numerical value
malformed expiration date '%s'
option `%s' expects "always", "auto", or "never"
parse-options-cb.c
malformed object name '%s'
--no-
BUG: switch '%c' (--%s) %s
BUG: option '%s' %s
BUG: switch '%c' %s
--git-completion-helper
--git-completion-helper-all
parse-options.c
parse_short_opt() cannot return these
end-of-options
help-all
parse_long_opt() cannot return these
GIT_TEST_DISALLOW_ABBREVIATED_OPTIONS
unknown switch `%c'
unknown non-ascii option in string: `%s'
fatal: %s
switch `%c'
option `no-%s'
option `%s'
STOP_AT_NON_OPTION and KEEP_UNKNOWN don't go together
Can't keep argv0 if you don't have it
uses incompatible flags LASTARG_DEFAULT and OPTARG
invalid short name
short name already used
uses feature not supported for dashless options
should not accept an argument
OPTION_CALLBACK needs one callback
OPTION_CALLBACK can't have two callbacks
OPTION_LOWLEVEL_CALLBACK needs a callback
OPTION_LOWLEVEL_CALLBACK needs no high level callback
OPT_ALIAS() should not remain at this point. Are you using parse_options_step() directly?
That case is not supported yet.
multi-word argh should use dash to separate words
%s takes no value
%s isn't available
BITOP can't have unset form
%s expects a non-negative integer value with an optional k/m/g suffix
opt->type %d should not happen
%s is incompatible with %s
%s : incompatible with something else
%s requires a value
 --%s%s
did you mean `--%s` (with two dashes)?
disallowed abbreviated or ambiguous option '%.*s'
ambiguous option: %s (could be --%s%s or --%s%s)
An alias must have long option name
alias of --%s
No please. Nested aliases are not supported.
could not find source option '%s' of alias '%s'
cat <<\EOF
usage: %s
   or: %s
    %s
-NUM
%*s%s
()<>[]|
[=%s]
[=<%s>]
[<%s>]
 <%s>
unexpected delta opcode 0
delta replay has gone wild
Could not get patch ID for %s
ref:
HOME
path.c
Could not make %s writable by group
gi7eba
gi250a
gi7d29
maba30
xdg_config_home
filename
XDG_CONFIG_HOME
%s/git/%s
%s/.config/git/%s
xdg_cache_home
XDG_CACHE_HOME
%s/.cache/git/%s
SQUASH_MSG
MERGE_MSG
MERGE_RR
MERGE_MODE
MERGE_AUTOSTASH
AUTO_MERGE
branches
common
hooks
logs
logs/HEAD
logs/refs/bisect
logs/refs/rewritten
logs/refs/worktree
objects
refs/bisect
refs/rewritten
refs/worktree
packed-refs
grafts
.lock
pathspec.c
PATHSPEC_PREFER_CWD and PATHSPEC_PREFER_FULL are incompatible
PATHSPEC_PREFER_CWD requires arguments
empty string is not a valid pathspec. please use . instead if you meant to match all paths
pathspec '%s' is beyond a symbolic link
PATHSPEC_MAXDEPTH_VALID and PATHSPEC_KEEP_ORDER are incompatible
line is badly quoted: %s
'prefix' magic is supposed to be used at worktree's root
%s: 'literal' and 'glob' are incompatible
%s: '%s' is outside repository at '%s'
error initializing pathspec_item
prefix:
invalid parameter for pathspec magic 'prefix'
attr:
Invalid pathspec magic '%.*s' in '%s'
Missing ')' at the end of pathspec magic in '%s'
Only one 'attr:' specification is allowed.
attr spec must not be empty
invalid attribute name %s
should have same number of entries
Escape character '\' not allowed as last character in attr value
cannot use '%c' for value matching
literal
icase
attr
Unimplemented pathspec magic '%c' in '%s'
global 'glob' and 'noglob' pathspec settings are incompatible
global 'literal' pathspec setting is incompatible with all other global pathspec settings
,prefix:%d)
'%s' (mnemonic: '%c')
'%s'
%s: pathspec magic not supported by this command: %s
0000
unable to write flush packet
0001
unable to write delim packet
0002
unable to write stateless separator packet
flush packet write failed
0123456789abcdef
protocol error: impossibly long line
protocol error: bad line length character: %.4s
protocol error: bad line length %d
ERR 
pkt-line.c
unhandled incomplete sideband: '%s'
PACK
PACK
PACK ...
packet: %12s%c 
GIT_TRACE_PACKET
GIT_TRACE_PACKFILE
sideband
packet write with format failed
packet write failed - data exceeds max packet size
packet write failed: %s
multiple sources given to packet_read
read error
the remote end hung up unexpectedly
GIT_TEST_PRELOAD_INDEX
preload-index.c
preload
Refreshing index
unable to create threaded lstat: %s
unable to join threaded lstat
preload index
preload/sum_lstat
format:
tformat:
invalid --pretty format: %s
 <%.*s>
%s: %.*s%.*s <%.*s>
Date:   %s
%sDate: %s
key_value_separator
keyonly
valueonly
MIME-Version: 1.0
Content-Type: text/plain; charset=%s
Content-Transfer-Encoding: 8bit
fuller
%C(auto)%h (%s, %ad)
pretty.
invalid --pretty format: '%s' references an alias which points to itself
=?%s?q?
=%02X
 =?%s?q?
(auto)
(describe
marginal
fully
ultimate
(trailers
auto,
always,
unable to parse --pretty format
trunc)
ltrunc)
mtrunc)
--%s=%.*s
bad parent line in commit
Author
Commit
Merge:
prio-queue.c
prio_queue_reverse() on non-LIFO queue
progress.c
don't provide NULL to stop_progress
total_objects
total_bytes
don't provide NULL to stop_progress_msg
, %s.
%3u%% (%ju/%ju)%s
%ju%s
  %s%*s
%s:%*s
  %s%s
%s: %s%*s
GIT_PROGRESS_DELAY
partialclonefilter
promisor remote name cannot begin with '/': %s
fetch.negotiationAlgorithm=noop
--filter=blob:none
promisor-remote: unable to fork off fetch subprocess
promisor-remote: could not write to fetch subprocess
promisor-remote: could not close stdin to fetch subprocess
GIT_ASKPASS
SSH_ASKPASS
GIT_TERMINAL_PROMPT
terminal prompts disabled
could not read %s%s
unable to read askpass response from '%s'
GIT_TEST_PROTOCOL_VERSION
unknown value for config 'protocol.version': %s
unknown value for %s: %s
GIT_PROTOCOL
version 
server is speaking an unknown protocol
protocol error: server explicitly said version 0
object-info: unexpected line: '%s'
object-info: expected flush after arguments
oid 
object-info: protocol error, expected to get oid, not '%s'
 %lu
Removing duplicate objects
rm -f %s
--left-only and --right-only are mutually exclusive
could not parse log for '%s'
--no-color
--decorate=no
--no-prefix
--output-indicator-new=>
--output-indicator-old=<
--output-indicator-context=#
--pretty=medium
could not start `log`
could not read `log` output
could not parse first line of `log` output: did not start with 'commit ': '%s'
diff --git
could not parse git header '%.*s'
 ## 
%s (new)
%s (deleted)
%s => %s
 (mode change %06o => %06o)
 ## Metadata ##
 ## Commit message ##
Notes
 ## %.*s ##
 %s:
range-diff.c
already assigned!
failed to generate diff
%*s:  %s 
%*d:  %s 
 %*s:  %s
 %*d:  %s
^ ## (.*) ##$
^.?@@ (.*)$
unable to mark recent objects
unable to stat %s
unable to get object info for %s
unknown object type for %s: %s
unable to lookup %s
symbolic ref is dangling: %s
unable to create object '%s'
BUG: unknown object type %d
cannot create an empty blob in the object database
%s: can only add regular files, symbolic links or git-directories
'%s' does not have a commit checked out
unable to index file '%s'
unable to add '%s' to index
add '%s'
unable to stat '%s'
invalid path '%s'
Refresh index
%s: needs update
%s: needs merge
read-cache.c
refresh/sum_lstat
refresh/sum_scan
refresh index
%s: index file open failed
%s: cannot stat the open index
%s: index file smaller than expected
%s: unable to map index file
unable to create load_index_extensions thread: %s
unable to join load_index_extensions thread: %s
read/version
read/cache_nr
do_read_index
read cache %s
%s/sharedindex.%s
shared/do_read_index
broken index, expect %s in %s, got %s
cache entry is not allocated from expected memory pool
GIT_TEST_CHECK_CACHE_TREE
GIT_TEST_SPLIT_INDEX
sharedindex_XXXXXX
%s: cannot drop to stage #0
GIT_TEST_VALIDATE_INDEX_CACHE_ENTRIES
mark_fsmonitor_clean '%s'
unsupported ce_mode: %o
will not add file alias '%s' ('%s' already exists in index)
'%s' appears as both a file and as a directory
overflow: -1 - %ju
bad signature 0x%08x
bad index version %d
bad index file sha1 signature
index uses %.4s extension, which we do not understand
ignoring %.4s extension
the name hash isn't thread safe
unable to create load_cache_entries thread: %s
unable to join load_cache_entries thread: %s
unknown index entry format 0x%08x
malformed name field in the index, near path '%s'
unordered stage entries in index
multiple stage entries for merged file '%s'
unordered stage entries for '%s'
could not freshen shared index '%s'
failed to convert to a sparse-index
do_write_index
GIT_ALLOW_NULL_SHA1
write index, changed mask = %x
write/version
write/cache_nr
GIT_INDEX_VERSION
index.version set, but the value is invalid.
Using version %i
GIT_INDEX_VERSION set, but the value is invalid.
Using version %i
index.recordoffsettable
index.recordendofindexentries
shared/do_write_index
cannot fix permission bits on '%s'
unable to open git dir: %s
sharedindex.
unable to unlink: %s
could not stat '%s'
splitindex.sharedindexexpire
invalid IEOT version %d
invalid number of IEOT entries %d
Commands:
p, pick <commit> = use commit
r, reword <commit> = use commit, but edit the commit message
e, edit <commit> = use commit, but stop for amending
s, squash <commit> = use commit, but meld into previous commit
f, fixup [-C | -c] <commit> = like "squash" but keep only the previous
                   commit's log message, unless -C is used, in which case
                   keep only this commit's message; -c is same as -C but
                   opens the editor
x, exec <command> = run command (the rest of the line) using shell
b, break = stop here (continue rebase later with 'git rebase --continue')
d, drop <commit> = remove commit
l, label <label> = label current HEAD with a name
t, reset <label> = reset HEAD to a label
m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
.       create a merge commit using the original merge commit's
.       message (or the oneline, if no original merge commit was
.       specified); use -c <commit> to reword the commit message
These lines can be re-ordered; they are executed from top to bottom.
Rebase %s onto %s (%d command)
Rebase %s onto %s (%d commands)
Do not remove any line. Use 'drop' explicitly to remove a commit.
If you remove a line here THAT COMMIT WILL BE LOST.
You are editing the todo file of an ongoing interactive rebase.
To continue rebase after editing, run:
    git rebase --continue
However, if you remove everything, the rebase will be aborted.
 - %s %.*s
Warning: some commits may have been dropped accidentally.
Dropped commits (newer to older):
To avoid this message, use "drop" to explicitly remove a commit.
Use 'git config rebase.missingCommitsCheck' to change the level of warnings.
The possible behaviours are: ignore, warn, error.
rebase.missingcommitscheck
unrecognized setting %s for option rebase.missingCommitsCheck. Ignoring.
preserve
merges
ahead %d
behind %d
ahead %d, behind %d
malformed format string %s
color:
(no branch, rebasing %s)
(no branch, rebasing detached HEAD %s)
(no branch, bisect started on %s)
(HEAD detached at %s)
(HEAD detached from %s)
filter_refs: invalid type
ref-filter.c
format: %%(end) atom missing
version:
malformed object name %s
option `%s' must point to a commit
malformed field name: %.*s
unknown field name: %.*s
not a git repository, but the field '%.*s' requires access to object data
numparent
authorname
authoremail
authordate
committername
committeremail
committerdate
tagger
taggername
taggeremail
taggerdate
creator
creatordate
body
trailers
flag
worktreepath
align
then
else
lstrip=
strip=
Integer value expected refname:lstrip=%s
rstrip=
Integer value expected refname:rstrip=%s
unrecognized %%(%s) argument: %s
%%(objecttype) does not take arguments
disk
unrecognized %%(objectsize) argument: %s
short=
positive value expected '%s' in %%(%s)
unrecognized argument '%s' in %%(%s)
%%(deltabase) does not take arguments
trim
localpart
unrecognized email option: %s
sanitize
unrecognized %%(subject) argument: %s
%%(body) does not take arguments
expected %%(trailers:key=<value>)
unknown %%(trailers) argument: %s
size
trailers:
lines=
positive value expected contents:lines=%s
unrecognized %%(contents) argument: %s
push:
trackshort
nobracket
remotename
remoteref
expected format: %%(color:<color>)
unrecognized color: %%(color:%s)
expected format: %%(align:<width>,<position>)
position=
unrecognized position:%s
width=
unrecognized width:%s
unrecognized %%(align) argument: %s
positive width expected with the %%(align) atom
right
middle
left
equals=
notequals=
unrecognized %%(if) argument: %s
ignoring ref with broken name %s
malformed object at '%s'
ref_kind_from_refname() should only mark one ref as HEAD
should have died in the xor check above
,symref
,packed
missing object %s for %s
unhandled RR_* enum
unknown %%(%s) option
format: %%(end) atom used without corresponding atom
format: %%(if) atom used without a %%(then) atom
format: %%(then) atom used without an %%(if) atom
format: %%(then) atom used more than once
format: %%(then) atom used after %%(else)
format: %%(else) atom used without an %%(if) atom
format: %%(else) atom used without a %%(then) atom
format: %%(else) atom used more than once
Object size is less than zero.
parse_object_buffer failed on %s for %s
Eh?  Object of type %d?
    
unknown email option
cannot walk reflogs for %s
no current branch
%s@{
Reflog: %s (%s)
Reflog message: %s
refs/%s
refs.c
sanitizing refname '%s' check returned error
%s does not point to a valid object!
%sHEAD
pattern must not start with '/'
init.defaultbranch
GIT_TEST_DEFAULT_INITIAL_BRANCH_NAME
could not retrieve `%s`
invalid branch name: %s = %s
ignoring dangling symref %s
ignoring broken ref %s
core.filesreflocktimeout
log for %s is empty
ref_store_transaction_begin
free called on a prepared reference transaction
unexpected reference transaction state
update called for transaction that is not open
ref_transaction_update
refusing to update ref with bad name '%s'
illegal flags 0x%x passed to ref_transaction_update()
create called without valid new_oid
delete called with old_oid set to zeros
verify called with old_oid set to NULL
update_ref failed for ref '%s': %s
refs_shorten_unambiguous_ref
offset < total_len
transfer.hiderefs
hiderefs
GIT_REF_PARANOIA
reference iterator is not ordered
%srefs/
attempting to get main_ref_store outside of repository
ref_update_reject_duplicates
multiple updates for ref '%s' not allowed
ref_update_reject_duplicates() received unsorted list
prepare called twice on reference transaction
prepare called on a closed reference transaction
GIT_QUARANTINE_PATH
ref updates forbidden inside quarantine environment
prepared
ref updates aborted by hook
abort called on a closed reference transaction
aborted
commit called on a closed reference transaction
committed
refs_verify_refname_available
'%s' exists; cannot create '%s'
cannot process '%s' and '%s' at the same time
error while iterating over references
refs/%.*s
refs/tags/%.*s
refs/heads/%.*s
refs/remotes/%.*s
refs/remotes/%.*s/HEAD
refs/worktree/
refs/rewritten/
main-worktree/
worktrees/
log for ref %s has gap after %s
log for ref %s unexpectedly ended on %s
reference backend %s is unknown
%s ref_store '%s' initialized twice
reference-transaction
refs/debug.c
ref_store for %s
GIT_TRACE_REFS
init_db: %d
transaction_prepare: %d
finish: %d
transaction {
%d: %s %s -> %s (F=0x%x, T=0x%x) "%s"
pack_refs: %d
create_symref: %s -> %s "%s": %d
delete_refs {
}: %d
rename_ref: %s -> %s "%s": %d
copy_ref: %s -> %s "%s": %d
ref_iterator_begin: %s (0x%x)
iterator_advance: (%d)
iterator_advance: %s (0)
iterator_peel: %s: %d
iterator_abort: %d
read_raw_ref: %s: %s (=> %s) type %x: %d
read_raw_ref: %s: %d (errno %d)
for_each_reflog_iterator_begin
for_each_reflog: %s: %d
reflog_ent %s (ret %d): %s -> %s, %s %ld "%s"
for_each_reflog_reverse: %s: %d
reflog_exists: %s: %d
create_reflog: %s: %d
delete_reflog: %s: %d
reflog_expire: %s: %d
reflog_expire_prepare: %s
reflog_expire_should_prune: %s %ld: %d
%s/packed-refs
files-backend $GIT_DIR
files-backend $GIT_COMMONDIR
init_db
refs/heads
refs/tags
refs/files-backend.c
ref_store is type "%s" not "files" in %s
operation %s requires abilities 0x%x, but only have 0x%x
ref %s is not a main pseudoref
unknown ref type %d of ref %s
ref_transaction_prepare
files_transaction_prepare
files-backend.c
REF_IS_PRUNING set without REF_NO_DEREF
lock_ref_for_update
cannot lock ref '%s': %s
cannot lock ref '%s': error reading reference
cannot update ref '%s': %s
couldn't close '%s.lock'
operation %s only allowed for main ref store
multiple updates for 'HEAD' (including one via its referent '%s') are not allowed
%s unexpectedly not 'HEAD'
lock_raw_ref
unable to resolve reference '%s'
unable to create lock file %s.lock; non-directory in the way
unable to create directory for %s
there is a non-empty directory '%s' blocking reference '%s'
unable to resolve reference '%s': reference broken
unable to resolve reference '%s': %s
cannot lock ref '%s': reference already exists
cannot lock ref '%s': reference is missing but expected %s
cannot lock ref '%s': is at %s but expected %s
multiple updates for '%s' (including one via symref '%s') are not allowed
%s unexpectedly found in affected_refnames
trying to write ref '%s' with nonexistent object %s
trying to write non-commit object %s to branch '%s'
couldn't write '%s'
error aborting transaction: %s
ref_transaction_finish
files_transaction_finish
cannot update the ref '%s': %s
couldn't set '%s'
unable to append to '%s': %s
unable to create directory for '%s': %s
there are still logs under '%s'
%s/logs/%s
refname %s is not a other-worktree ref
%s/worktrees/%.*s/logs/%s
ref_transaction_abort
initial_ref_transaction_commit
files_initial_transaction_commit
commit called for transaction that is not open
initial ref transaction called with existing refs
initial ref transaction with old_sha1 set
pack_refs
failure preparing to create packed reference %s: %s
unable to write new packed-refs: %s
fill_ref_dir
loose refname is dangerous: %s
create_symref
lock_ref_oid_basic
there are still refs under '%s'
can't verify ref '%s'
ref '%s' is at %s but expected %s
unable to fdopen %s: %s
ref: %s
unable to write symref for %s: %s
no symlink - falling back to symbolic ref
delete_refs
could not remove reference %s
could not delete reference %s: %s
could not delete references: %s
rename_ref
refs/.tmp-renamed-log
reflog for %s is a symlink
refname %s not found
refname %s is a symbolic ref, copying it is not supported
refname %s is a symbolic ref, renaming it is not supported
unable to move logfile logs/%s to logs/refs/.tmp-renamed-log: %s
unable to copy logfile logs/%s to logs/refs/.tmp-renamed-log: %s
unable to delete old %s
Directory not empty: %s
unable to delete existing %s
unable to copy '%s' to '%s': %s
unable to rename '%s' to '%s': %s
unable to write current sha1 into %s: %s
unable to lock %s for rollback: %s
unable to restore logfile %s from %s: %s
unable to restore logfile %s from logs/refs/.tmp-renamed-log: %s
directory not empty: %s
unable to move logfile %s to %s: %s
commit_ref_update
ref_iterator_begin
read_raw_ref
reflog_iterator_begin
%s/logs
bad ref for %s
ref_iterator_peel() called for reflog_iterator
for_each_reflog_ent
for_each_reflog_ent_reverse
cannot seek back reflog for %s: %s
cannot read %d bytes from reflog for %s: %s
reverse reflog parser had leftover data
reflog_exists
create_reflog
delete_reflog
reflog_expire
cannot fdopen %s (%s)
couldn't write %s: %s
couldn't write %s
unable to write reflog '%s' (%s)
couldn't set %s
would prune %s
prune %s
%s %s %s %ju %+05d
keep %s
refs/iterator.c
overlay_ref_iterator requires ordered inputs
peel called for empty iterator
peel called before advance for merge iterator
attempt to trim too many characters
packed_refs_lock
core.packedrefstimeout
unable to close %s: %s
packed_refs_unlock
refs/packed-backend.c
packed_refs_unlock() called when not locked
packed_refs_is_locked
is_packed_transaction_needed
is_packed_transaction_needed() called while unlocked
packed
ref_store is type "%s" not "packed" in %s
unallowed operation (%s), requires %x, has %x
error ummapping packed-refs file %s
# pack-refs with:
fully-peeled
peeled
couldn't read %s
couldn't stat %s
unterminated line in %s: %.*s
unterminated line in %s: %.75s...
unexpected line in %s: %.*s
unexpected line in %s: %.75s...
unterminated line found in packed-refs
unterminated peeled line found in packed-refs
write_with_updates() called while unlocked
%s.new
unable to create file %s: %s
unable to fdopen packed-refs tempfile: %s
cannot update ref '%s': reference already exists
cannot update ref '%s': is at %s but expected %s
cannot update ref '%s': reference is missing but expected %s
unable to write packed-refs file: error iterating over old contents
error closing file %s: %s
error writing to %s: %s
error replacing %s: %s
packed reference store does not support symrefs
packed reference store does not support renaming references
packed reference store does not support copying references
packed refname is dangerous: %s
packed reference store does not support reflogs
get_ref_dir
ref-cache.c
entry->flag & REF_DIR
refs/ref-cache.c
incomplete ref_store without fill_ref_dir function
Reference directory conflict: %s
Duplicated ref, and SHA1s don't match: %s
Duplicated ref: %s
invalid refspec '%s'
refs/heads/test:refs/remotes/%s/test
remote.c
query_refspecs: need either src or dst
HEAD does not point to a branch
no such branch: '%s'
no upstream configured for branch '%s'
upstream branch '%s' not stored as a remote-tracking branch
couldn't find remote ref %s
* Ignoring funny ref '%s' locally
Your branch is based on '%s', but the upstream is gone.
  (use "git branch --unset-upstream" to fixup)
Your branch is up to date with '%s'.
Your branch and '%s' refer to different commits.
  (use "%s" for details)
git status --ahead-behind
Your branch is ahead of '%s' by %d commit.
Your branch is ahead of '%s' by %d commits.
  (use "git push" to publish your local commits)
Your branch is behind '%s' by %d commit, and can be fast-forwarded.
Your branch is behind '%s' by %d commits, and can be fast-forwarded.
  (use "git pull" to update your local branch)
Your branch and '%s' have diverged,
and have %d and %d different commit each, respectively.
Your branch and '%s' have diverged,
and have %d and %d different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)
refs/heads/master
make_remote
replaced == NULL
URL:
Push:
Pull:
refs/heads/%s:refs/heads/%s
HEAD:refs/heads/%s
pushremote
insteadof
pushinsteadof
pushdefault
config remote shorthand cannot begin with '/': %s
skipdefaultupdate
skipfetchall
prunetags
pushurl
more than one receivepack given, using the first
more than one uploadpack given, using the first
tagopt
proxy
proxyauthmethod
Cannot fetch both %s and %s to %s
%s usually tracks %s, not %s
%s tracks both %s and %s
Internal error
refspec->src should not be null here
key '%s' of pattern had no '*'
value '%s' of pattern has no '*'
src refspec %s does not match any
src refspec %s matches more than one
%s cannot be resolved to branch
unable to delete '%s': remote ref does not exist
dst refspec %s matches more than one
dst ref %s receives from more than one src
The destination you provided is not a full refname (i.e.,
starting with "refs/"). We tried to guess what you meant by:
- Looking for a ref that matches '%s' on the remote side.
- Checking if the <src> being pushed ('%s')
  is a ref in "refs/{heads,tags}/". If so we add a corresponding
  refs/{heads,tags}/ prefix on the remote side.
Neither worked, so we gave up. You must fully qualify the ref.
'%s' is not a valid object, match_explicit_lhs() should catch this!
The <src> part of the refspec is a commit object.
Did you mean to create a new branch by pushing to
'%s:refs/heads/%s'?
The <src> part of the refspec is a tag object.
Did you mean to create a new tag by pushing to
'%s:refs/tags/%s'?
The <src> part of the refspec is a tree object.
Did you mean to tag a new tree by pushing to
'%s:refs/tags/%s'?
The <src> part of the refspec is a blob object.
Did you mean to tag a new blob by pushing to
'%s:refs/tags/%s'?
'%s' should be commit/tag/tree/blob, is '%d'
branch '%s' has no remote for pushing
push refspecs for '%s' do not include '%s'
push has no destination (push.default is 'nothing')
cannot resolve 'simple' push to a single destination
unhandled push situation
push destination '%s' on remote '%s' has no local tracking branch
stat_branch_pair: invalid abf '%d'
query_refspecs_multiple: need either src or dst
cannot parse expected object name '%s'
replace depth too high for object %s
bad replace ref name: %s
duplicate replace ref: %s
commitgraph.readchangedpaths
gc.writecommitgraph
core.untrackedcache
fetch.negotiationalgorithm
skipping
pack.usesparse
feature.manyfiles
fetch.writecommitgraph
info/grafts
repository.c
repo's index should point back at itself
the repo hasn't been setup
rr-cache/%s
rr-cache/%s/%s
rr-cache/%s/%s.%d
gc.rerereresolved
gc.rerereunresolved
rr-cache
unable to open rr-cache directory
rerere.autoupdate
corrupt MERGE_RR
there were errors while writing '%s' (%s)
failed to flush '%s'
could not parse conflict hunks in '%s'
postimage
Recorded resolution for '%s'.
Resolved '%s' using previous resolution.
cannot unlink stray '%s'
Recorded preimage for '%s'
thisimage
failed utime() on '%s'
writing '%s' failed
rerere.c
Staged '%s' using previous resolution.
failed to update conflicted state in '%s'
no remembered resolution for '%s'
cannot unlink '%s'
Updated preimage for '%s'
Forgot resolution for '%s'
write_rr
rr->items[i].util != RERERE_RESOLVED
id->variant >= 0
%s.%d
%s%c
%s%c
unable to write rerere record
reset.c
Not a fully qualified branch: '%s'
could not determine HEAD revision
%o%c
Index records invalid resolve-undo information
cannot unmerge '%s'
unknown option `%s'
--stdin given twice?
revision.c
cannot combine --reverse with --walk-reflogs
cannot combine --walk-reflogs with history-limiting options
cannot combine --parents and --children
cannot combine --reverse with --graph
cannot combine --walk-reflogs with --graph
cannot combine --no-walk with --graph
cannot use --grep-reflog without --walk-reflogs
-L does not yet support diff formats besides -p and -s
treesame
bad object %s
reflog of '%s' references pruned commits
unable to add index blob to traversal
Invalid symmetric difference expression %s
Invalid revision range %s
--no-walk
--do-walk
--alternate-refs
--no-walk=
max-count
'%s': not a non-negative integer
max-age
since
after
min-age
before
until
--ancestry-path
--walk-reflogs
bad --default argument
--simplify-merges
--simplify-by-decoration
--author-date-order
--early-output
--early-output=
--remove-empty
--merges
--boundary
--left-right
--left-only
--left-only is incompatible with --right-only or --cherry
--right-only is incompatible with --left-only
--cherry
--cherry is incompatible with --left-only
--cherry-mark
--cherry-mark is incompatible with --cherry-pick
--cherry-pick is incompatible with --cherry-mark
--verify-objects
--unpacked=
--unpacked=<packfile> no longer supported
--no-kept-objects
--no-kept-objects=
in-core
on-disk
--pretty=
--format=
--expand-tabs
--no-expand-tabs
--expand-tabs=
--show-notes
--show-signature
--no-show-signature
--show-linear-break
                    ..........
--show-linear-break=
--show-notes=
--notes=
--standard-notes
--no-standard-notes
--oneline
oneline
--graph
--encode-email-headers
--no-encode-email-headers
--no-commit-id
--abbrev
--abbrev=
--abbrev-commit
--no-abbrev-commit
--full-diff
--show-pulls
--full-history
--relative-date
--log-size
grep-reflog
--basic-regexp
--extended-regexp
--regexp-ignore-case
--fixed-strings
--perl-regexp
--all-match
--invert-grep
children
exclude_promisor_objects can only be used when fetch_if_missing is 0
--show-linear-break and --graph are incompatible
--single-worktree cannot be used together with submodule
glob
sorted
unsorted
invalid argument to --no-walk
.alternate
options not supported in --stdin mode
--merge without HEAD?
--merge without MERGE_HEAD?
your current branch appears to be broken
your current branch '%s' does not have any commits yet
%s is unknown object
filter_not_present
maybe
definitely_not
false_positive
bloom
statistics
--ancestry-path given but there are no bottom commits
cannot simplify commit %s (because of %s)
cannot simplify commit %s (invalid %s)
bad tree compare for commit %s
update_treesame %s
count_explore_walked
count_indegree_walked
count_topo_walked
topo_walk
mark_redundant_parents %d %d %d %d
compact_treesame %u
compact_treesame parents mismatch
reflog 
%.*s <%.*s>
Failed to traverse parents of commit %s
Failed to simplify parents of commit %s
run-command.c
standard output
standard error
cannot create %s pipe for %s: %s
cannot run %s
open /dev/null failed
cannot fork() for %s
run_command with a pipe can cause deadlock
cannot create pipe
cannot create async thread: %s
pthread_join failed
hooks/%s
The '%s' hook was ignored because it's not set as executable.
You can disable this warning with `git config advice.ignoredHook false`.
max:%d
trace: run_command:
 cd 
 git
 unset
 %s=
command is empty
shell command is empty
|&;<>()$`\"' 
*?[#~=%
%s "$@"
blocking all signals
disabling cancellation
die() should not be called in child
error() should not be called in child
warn() should not be called in child
re-enabling cancellation
restoring signal mask
trace: run_command: running exit handler for pid %ju
waitpid for %s failed
waitpid is confused (%s)
%s died of signal %d
exec '%s': cd to '%s' failed
dup2() in child failed
close() in child failed
sigprocmask failed restoring signals
cannot exec '%s'
unable to block SIGPIPE in async thread
run_processes_parallel: preparing to run up to %d tasks
you need to specify a get_next_task function
bookkeeping is hard
poll
run_processes_parallel: done
delete-refs
no-thin
the receiving end does not support this repository's hash algorithm
the receiving end does not support --signed push
not sending a push certificate since the receiving end does not support --signed push
the receiving end does not support --atomic push
the receiving end does not support push options
 report-status
 report-status-v2
 quiet
atomic push failed for ref %s. status: %d
%s %s %s%c%s
send-pack: unable to fork off sideband demultiplexer
--negotiate-only
--negotiation-tip=%s
send-pack: unable to fork off fetch subprocess
push negotiation failed; proceeding anyway with push
the receiving end asked to sign an invalid nonce <%.*s>
certificate version 0.1
pusher %s 
pushee %s
nonce %s
push-option %s
failed to sign the push certificate
push-cert%c%s
--revs
--shallow
git pack-objects failed
error writing to pack-objects
pack-objects died of signal %d
invalid status line from remote: %s
'option' without a matching 'ok/ng' directive
invalid ref status from remote: %s
remote reported status on unknown ref: %s
remote reported status on unexpected ref: %s
unexpected flush packet while reading remote unpack status
unpack 
unable to parse remote unpack status: %s
remote unpack failed: %s
COMMIT_EDITMSG
rebase-merge/git-rebase-todo
rebase-merge/git-rebase-todo.backup
rebase-merge/dropped
(rebase) cleanup
could not delete '%s'
Conflicts:
'GIT_AUTHOR_NAME' already given
'GIT_AUTHOR_EMAIL' already given
'GIT_AUTHOR_DATE' already given
unknown variable '%s'
missing 'GIT_AUTHOR_NAME'
missing 'GIT_AUTHOR_EMAIL'
missing 'GIT_AUTHOR_DATE'
Notes added by 'git commit --amend'
couldn't look up newly created commit
could not parse newly created commit
format:%h] %s
%an <%ae>
%cn <%ce>
 Author: 
 Date: 
 Committer: 
unable to resolve HEAD after creating commit
[%s%s 
 (root-commit)
unable to open '%s'
invalid line %d: %.*s
cannot '%s' without a previous commit
cancelling a cherry picking in progress
REVERT_HEAD
cancelling a revert in progress
--rerere-autoupdate
--no-rerere-autoupdate
-S%s
--signoff
cannot read '%s': %s
unexpected end of file
stored pre-cherry-pick HEAD file '%s' is corrupt
cannot abort from a branch yet to be born
You seem to have moved HEAD. Not rewinding, check your HEAD!
no revert in progress
no cherry-pick in progress
sequencer.c
unexpected action in sequencer_skip
failed to skip the commit
there is nothing to skip
have you committed already?
try "git %s --continue"
Cannot autostash
Unexpected stash response: '%s'
Could not create directory for '%s'
Created autostash: %s
reset --hard
could not reset --hard
sequencer_pick_revisions
opts->revs
%s: can't cherry-pick a %s
%s: bad revision
empty commit set passed
unexpected extra commit from walk
can't revert as initial commit
pick
make_script: unhandled options
make_script: error preparing revisions
%s %s 
 %c empty
nothing to do
invalid todo list after expanding IDs:
could not skip unnecessary pick commands
the script was already rearranged.
fixup!
invalid commit message cleanup mode '%s'
rebase-merge/refs-to-delete
no key present in '%.*s'
unable to dequote value of '%s'
~/.gitconfig
sequencer/todo
label
noop
rebase-merge/done
%s does not accept arguments: '%s'
missing arguments for %s
could not parse '%s'
unknown command: %d
rebase-merge/head-name
rebase-merge/onto
rebase-merge/orig-head
rebase-merge/quiet
rebase-merge/verbose
rebase-merge/strategy
rebase-merge/strategy_opts
rebase-merge/allow_rerere_autoupdate
rebase-merge/gpg_sign_opt
rebase-merge/signoff
rebase-merge/drop_redundant_commits
rebase-merge/keep_redundant_commits
rebase-merge/cdate_is_adate
rebase-merge/ignore_date
rebase-merge/reschedule-failed-exec
rebase-merge/no-reschedule-failed-exec
sequencer/head
no cherry-pick or revert in progress
cannot resolve HEAD
sequencer/abort-safety
sequencer
Applied autostash.
cannot store %s
Your changes are safe in the stash.
You can run "git stash pop" or "git stash drop" at any time.
Applying autostash resulted in conflicts.
Autostash exists; creating a new stash entry.
git %s: failed to read the index
git %s: failed to refresh the index
unknown action: %d
unusable squash-onto
malformed options sheet: '%s'
rebase-merge/current-fixups
sequencer/opts
options.no-commit
options.edit
options.allow-empty
options.allow-empty-message
options.keep-redundant-commits
options.signoff
options.record-origin
options.allow-ff
options.mainline
options.strategy
options.gpg-sign
options.strategy-option
options.allow-rerere-auto
options.default-msg-cleanup
invalid key: %s
invalid value for %s: %s
please fix this using 'git rebase --edit-todo'.
unusable instruction sheet: '%s'
no commits parsed.
cannot cherry-pick during a revert.
cannot revert during a cherry-pick.
cannot rebase: You have unstaged changes.
cannot amend non-existing commit
invalid file: '%s'
invalid contents: '%s'
You have uncommitted changes in your working tree. Please, commit them
first and then run 'git rebase --continue' again.
Incorrect current_fixups:
could not write file: '%s'
squash 
squash 
could not remove CHERRY_PICK_HEAD
could not commit staged changes.
rebase-merge/amend
rebase-merge/message-fixup
rebase-merge/message-squash
could not parse HEAD
HEAD %s is not a commit!
CLEANUP_MSG and VERBATIM_MSG are mutually exclusive
GIT_COMMITTER_DATE=%s
--amend
--no-gpg-sign
--cleanup=strip
--cleanup=verbatim
--allow-empty
GIT_AUTHOR_NAME=%s
GIT_AUTHOR_EMAIL=%s
GIT_AUTHOR_DATE=%s
rebase-merge/author-script
GIT_AUTHOR_DATE missing from author script
rebase-merge/message
--no-edit
your local changes would be overwritten by %s.
commit your changes or stash them to proceed.
rebase-merge/stopped-sha
rebase-merge/rewritten-pending
%.*s %s
rebase-merge/rewritten-list
pick_commits
!(opts->signoff || opts->no_commit || opts->record_origin || should_edit(opts) || opts->committer_date_is_author_date || opts->ignore_date)
Rebasing (%d/%d)%s
Stopped at %s...  %.*s
unknown command %d
cannot read HEAD
could not read orig-head
could not read 'onto'
finish
%s onto %s
could not update %s
returning to %s
could not update HEAD to %s
--for-rewrite=rebase
Successfully rebased and updated %s.
could not lock '%s'
failed to finalize '%s'
rebase-merge/msgnum
Stopped at HEAD
Stopped at %s
%s (%s)
parent of %s
your index file is unmerged.
cannot fixup root commit
commit %s is a merge but no -m option was given.
commit %s does not have parent %d
%s: cannot parse parent commit %s
Revert "
This reverts commit 
, reversing
changes made to 
could not rename '%s' to '%s'
could not revert %s... %s
could not apply %s... %s
dropping %s %s -- patch contents already upstream
unable to parse commit author
GIT_AUTHOR_NAME='
'\%c'
GIT_AUTHOR_EMAIL='
GIT_AUTHOR_DATE='@
%s: fast-forward
need a HEAD to fixup
could not read HEAD
could not read HEAD's commit message
cannot write '%s'
could not read commit message of %s
%s%s %s
squash
# %s
squash!
(empty tree)
%s: Unable to write new index file
after resolving the conflicts, mark the corrected paths
with 'git add <paths>' or 'git rm <paths>'
after resolving the conflicts, mark the corrected paths
with 'git add <paths>' or 'git rm <paths>'
and commit the result with 'git commit'
could not resolve HEAD commit
unable to update cache tree
unable to read commit message from '%s'
invalid author identity '%s'
corrupt author: missing date information
@%.*s %.*s
'prepare-commit-msg' hook failed
unable to copy '%s' to '%s'
You can amend the commit now, with
  git commit --amend %s
Once you are satisfied with your changes, run
  git rebase --continue
Could not apply %s... %.*s
Could not merge %.*s
%s/patch
%s/message
Executing: %s
execution failed: %s
%sYou can fix the problem, and then run
  git rebase --continue
and made changes to the index and/or the working tree
execution succeeded: %s
but left changes to the index and/or the working tree
Commit or stash your changes, and then run
  git rebase --continue
illegal label name: '%.*s'
refs/rewritten/%.*s
rebase (label) '%.*s'
[new root]
writing fake root commit
writing squash-onto
failed to find tree of %s
could not write index
'%.*s'
cannot merge without a current revision
unable to parse '%.*s'
nothing to merge: '%.*s'
octopus merge cannot be executed on top of a [new root]
could not get commit message of '%s'
author %s
Merge %s '%.*s'
-X%s
--no-log
--no-stat
could not even attempt to merge '%.*s'
merge: Unable to write new index file
could not resolve '%s'
%s %s %.*s
revert is already in progress
try "git revert (--continue | %s--abort | --quit)"
cherry-pick is already in progress
try "git cherry-pick (--continue | %s--abort | --quit)"
unexpected action in create_seq_dir
--skip | 
could not create sequencer directory '%s'
could not lock HEAD
invalid cleanup_mode provided (%d)
Merge 
Merge pull request 
 from 
%s -C %s
 # %s
branch-point
%s onto
%c Branch %s
%s %s # %s
rev-
could not parse commit %s
could not parse parent commit %s
 %.*s
could not write eol to '%s'
rebase-merge/autostash
checkout %s
could not detach HEAD
GIT_REFLOG_ACTION=%s
could not parse commit '%s'
rebase-merge/end
fixup! 
version 2
object-info
serve.c
Should have already died when seeing EOF
unexpected stateless separator packet
no command requested
command=
command '%s' requested after already requesting command '%s'
invalid command '%s'
unknown object format '%s'
mismatched object format: server %s; client %s
info/rev-cache
info/refs
%s_XXXXXX
%s^{}
%s/info/packs
unrecognized: %s
P %s
'%s' is outside repository at '%s'
option '%s' must come before non-option arguments
ambiguous argument '%s': both revision and filename
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
is_nonbare_repository_dir
setup.c
orig_path_len != 0
unable to set up work tree using invalid config
cannot upgrade repository format from %d to %d: %s
cannot upgrade repository format: unknown extension %s
Expected git repo version <= %d, found %d
unknown repository extensions found:
repo version is 0, but v1-only extensions found:
error opening '%s'
too large to be a .git file: '%s'
error reading %s
invalid gitfile format: %s
no path in gitfile: %s
not a git repository: %s
unknown error code
%.*s%.*s
ignoring git dir '%s': %s
Unable to read current working directory
not a git repository (or any of the parent directories): %s
not a git repository (or any parent up to mount point %s)
Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set).
unhandled setup_git_directory_1() result
umask
world
everybody
problem with core.sharedRepository filemode value (0%.3o).
The owner of files must always have read and write permissions.
open /dev/null or dup failed
fork failed
setsid failed
%s: no such path in the working tree.
Use 'git <command> -- <path>...' to specify paths that do not exist locally.
ambiguous argument '%s': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
extensions.
preciousobjects
partialclone
worktreeconfig
noop-v1
objectformat
invalid value for 'extensions.objectformat'
GIT_CEILING_DIRECTORIES
GIT_DISCOVERY_ACROSS_FILESYSTEM
failed to stat '%*s%s%s'
'$%s' too big
not a git repository: '%s'
core.bare and core.worktree do not make sense
cannot chdir to '%s'
cannot come back to cwd
%s/config.worktree
shallow.c
is_repository_shallow must not be called before set_alternate_shallow_file
bad shallow line: %s
no commits selected for shallow requests
shallow_XXXXXX
failed to write to %s
GIT_TRACE_SHALLOW
shallow: prepare_shallow_info
shallow: remove_nonexistent_theirs_shallow
shallow: assign_shallow_commits_to_refs
Removing %s from .git/shallow
shallow %s
shallow must be initialized by now
shallow file has changed since we read it
shallow %s
pool size too small for %d in paint_alloc()
shallow: post_assign_shallow
        
%s%s: unexpected disconnect while reading sideband packet
sideband.c
negative length on non-eof packet read
%s%s: protocol error: missing sideband designator
remote error: %s
remote: 
%s%s: protocol error: bad band #%d
%04x
warning
sigchain.c
signal out of range: %d
GIT_TEST_SPARSE_INDEX
attempting to use sparse-index without cone mode
unable to update cache-tree, staying full
sparse-index.c
convert_to_sparse
ensure_full_index
index entry is a directory, but not sparse (%08x)
corrupt link extension (too short)
corrupt delete bitmap in link extension
corrupt replace bitmap in link extension
garbage at the end of link extension
corrupt link extension, entry %d should have non-zero length name
split-index.c
ce refers to a shared ce at %d, which is beyond the shared index size %d
prepare_to_write_split_index
!(ce->ce_flags & CE_STRIP_NAME)
position for replacement %d exceeds base index size %d
too many replacements (%d vs %d)
entry %d is marked as both replaced and deleted
corrupt link extension, entry %d should have zero length name
position for delete %d exceeds base index size %d
you want to use way too much memory
`pos' is too far after the end of the buffer
`pos + len' is too far after the end of the buffer
strbuf.c
your vsnprintf is broken (returned %d)
your vsnprintf is broken (returns inconsistent lengths)
your vsnprintf is broken (insatiable)
 <>"%{}|\^`:?#[]@!$&'()*+,;=
%%%02X
strbuf_getwholeline
r == -1
Out of memory, getdelim failed
"<>&
&quot;
&lt;
&gt;
&amp;
%+05d
could not edit '%s'
%%%02x
%u.%2.2u GiB
%u.%2.2u GiB/s
%u.%2.2u MiB
%u.%2.2u MiB/s
%u.%2.2u KiB
%u.%2.2u KiB/s
%u byte
%u bytes
%u byte/s
%u bytes/s
string-list.c
internal error in string_list_split(): list->strdup_strings must be set
internal error in string_list_split_in_place(): list->strdup_strings must not be set
status=
subprocess
cannot fork to run subprocess '%s'
initialization for subprocess '%s' failed
%s-client
Could not write client identification
version=%d
Could not write requested version
Could not write flush packet
-server
Unexpected line '%s', expected %s-server
<flush packet>
Unexpected line '%s', expected version
Unexpected line '%s', expected flush
Version %d not supported
capability=%s
Could not write requested capability
capability=
subprocess '%s' requested unsupported capability '%s'
negative values not allowed for submodule.fetchjobs
Could not update .gitmodules entry %s
fetchrecursesubmodules
Invalid parameter '%s' for config option 'submodule.%s.ignore'
invalid value for %s
ignoring suspicious submodule name: %s
ignoring '%s' which may be interpreted as a command-line option: %s
WORKTREE
%s:.gitmodules, multiple configurations found for 'submodule.%s.%s'. Skipping second one!
%s:.gitmodules
.gitmodules
:.gitmodules
HEAD:.gitmodules
Cannot change unmerged .gitmodules, resolve merge conflicts first
Could not find section in .gitmodules where path=%s
.path
Could not remove .gitmodules entry for %s
staging updated .gitmodules failed
objects/
in unpopulated submodule '%s'
Pathspec '%s' is in submodule '%.*s'
bad --ignore-submodules argument: %s
(revision walker failed)
--submodule=diff
--color=%s
never
--src-prefix=%s%s/
--dst-prefix=%s%s/
(diff failed)
find_unpushed_submodules
--remotes=%s
Pushing submodule '%s'
Unable to push submodule '%s'
--recurse-submodules-default
Errors during submodule fetch:
'%s' not recognized as a git repository
--porcelain=2
-uno
Could not run 'git status --porcelain=2' in submodule %s
submodule.c
invalid status --porcelain=2 line %s
S..U
'git status --porcelain=2' failed in submodule %s
test -f .git
-uall
--ignored
could not start 'git status' in submodule '%s'
could not run 'git status' in submodule '%s'
%s/modules/%s/config
Could not unset core.worktree setting in submodule '%s'
could not get submodule information for '%s'
submodule '%s' has dirty index
--super-prefix=%s%s/
Submodule '%s' could not be updated.
--no-deref
submodule name '%s' not a suffix of git dir '%s'
submodule git dir '%s' is inside git dir '%.*s'
could not lookup name for submodule '%s'
modules/%s
we don't know how to pass the flags down?
could not recurse into submodule '%s'
--stage
--full-name
could not start ls-files in ..
160000
returned path string doesn't match cwd?
ls-tree returned unexpected return code %d
GIT_CONFIG_PARAMETERS
(new submodule)
(submodule deleted)
(commits not present)
Submodule %s 
 (rewind)
Submodule in commit %s at path: '%s' collides with a submodule named the same. Skipping it.
Could not run 'git rev-list <commits> --not --remotes -n 1' command in submodule %s
submodule entry '%s' (%s) is a %s, not a commit
process for submodule '%s' failed
--push-option=%s
Fetching submodule %s%s
--submodule-prefix
%s%s/
%s/%s/
Could not access submodule '%s'
submodule.%s.fetchRecurseSubmodules
%s=.
callback cookie bogus
could not reset submodule index
relocate_gitdir for submodule '%s' with more than one worktree not supported
refusing to move '%s' into an existing git dir
Migrating git directory of '%s%s' from
'%s' to
'%s'
failed to lstat '%s'
%s: cannot verify a non-tag object of type %s.
missing object referenced by '%.*s'
type 
unknown tag type '%s' in %s
bad tag pointer to %s in %s
Object %s not a tag
bad tag
no signature found
cannot fix permission bits on %s
tempfile.c
fdopen_tempfile() called for inactive object
fdopen_tempfile() called for open object
get_tempfile_path() called for inactive object
get_tempfile_fd() called for inactive object
get_tempfile_fp() called for inactive object
reopen_tempfile called for an inactive object
reopen_tempfile called for an open object
rename_tempfile called for inactive object
activate_tempfile called for active object
tmp-objdir.c
only one tmp_objdir can be used at a time
%s/incoming-XXXXXX
%s=%s%c%s
GIT_TRACE
GIT_TRACE_PERFORMANCE
GIT_TRACE_SETUP
trace.c
Too deep indentation
setup: git_dir: %s
setup: git_common_dir: %s
setup: worktree: %s
setup: cwd: %s
setup: prefix: %s
could not open '%s' for tracing: %s
unknown trace value for '%s': %s
         If you want to trace into a file, then please set %s
         to an absolute pathname (starting with /)
unable to write trace for %s: %s
GIT_TRACE_BARE
%02d:%02d:%02d.%06ld 
%s:%d 
performance: %.9f s
:%.*s 
git command:%s
thread-proc on main: %s
thread-proc on main
GIT_TRACE2_PARENT_NAME
af_unix:
unable to write trace to '%s': %s
trace2: not opening %s trace file due to too many files in target directory %s
trace2: could not open '%.*s' for '%s' tracing: %s
git-trace2-discard
trace2: could not open '%s' for '%s' tracing: %s
af_unix:stream:
af_unix:dgram:
trace2: invalid AF_UNIX value '%s' for '%s' tracing
trace2: invalid AF_UNIX path '%s' for '%s' tracing
trace2: could not connect to socket '%s' for '%s' tracing: %s
trace2: unknown value for '%s': '%s'
GIT_TRACE2_PARENT_SID
Localhost
-P%08x
trace2/tr2_sysenv.c
tr2_sysenv_get invalid var '%d'
trace2.
GIT_TRACE2_CONFIG_PARAMS
trace2.configparams
GIT_TRACE2_ENV_VARS
trace2.envvars
GIT_TRACE2_DST_DEBUG
trace2.destinationdebug
GIT_TRACE2
trace2.normaltarget
GIT_TRACE2_BRIEF
trace2.normalbrief
GIT_TRACE2_EVENT
trace2.eventtarget
GIT_TRACE2_EVENT_BRIEF
trace2.eventbrief
GIT_TRACE2_EVENT_NESTING
trace2.eventnesting
GIT_TRACE2_PERF
trace2.perftarget
GIT_TRACE2_PERF_BRIEF
trace2.perfbrief
GIT_TRACE2_MAX_FILES
trace2.maxfiles
%02d:%02d:%02d.%06ld
%4d-%02d-%02dT%02d:%02d:%02d.%06ldZ
%4d%02d%02dT%02d%02d%02d.%06ldZ
event
atexit
line
too_many_files
t_abs
argv
code
signal
trace2/tr2_tgt_event.c
signo
cmd_path
cmd_name
hierarchy
cmd_mode
child_start
child_id
child_class
hook
hook_name
use_shell
child_exit
t_rel
thread_start
thread_exit
exec_id
exec_result
def_param
param
def_repo
region_enter
nesting
category
region_leave
data_json
version %s
start 
exit elapsed:%.6f code:%d
signal elapsed:%.6f code:%d
trace2/tr2_tgt_normal.c
atexit elapsed:%.6f code:%d
cmd_path %s
cmd_name %s
cmd_mode %s
alias %s -> 
child_start[%d]
git 
child_exit[%d] pid:%d code:%d elapsed:%.6f
exec[%d] 
exec_result[%d] code:%d
 err:%s
def_param %s=%s
worktree 
%s:%d
d%d | 
%-*s | %-*s | 
r%d 
%9.6f | 
%9s | 
%-*.*s | 
code:%d
signo:%d
trace2/tr2_tgt_perf.c
alias:%s argv:[
[ch%d] class:hook hook:%s
[ch%d] class:%s
 cd:
 argv:[
[ch%d] pid:%d code:%d
id:%d 
argv:[
id:%d code:%d
worktree:
label:%s
printf
th%02d:
trace2/tr2_tls.c
no open regions in thread '%s'
addIfDifferent
addIfDifferentNeighbor
doNothing
could not rename temporary file to %s
trailer.
unknown value '%s' for key '%s'
ifexists
ifmissing
separators
trailer.c
trailer.c: unhandled type %d
could not read input file '%s'
file %s is not a regular file
file %s is not writable by user
git-interpret-trailers-XXXXXX
could not open temporary file
empty trailer token in trailer '%.*s'
trailer.c: unhandled value %d
$ARG
running trailer command '%s' failed
%s%c %s
Signed-off-by: 
(cherry picked from commit 
GIT_TRANSPORT_HELPER_DEBUG
remote input
remote output
option %s 
remote-%s
unable to find remote helper for '%s'
transport-helper.c
can't dup helper output fd
capabilities
Debug: Got cap %s
import
bidi-import
export
check-connectivity
refspec 
connect
stateless-connect
export-marks 
import-marks 
no-private-update
unknown mandatory capability %s; this remote helper probably needs newer version of Git
this remote helper should implement refspec capability
Debug: Capabilities complete.
Debug: Remote helper: -> %s
full write to remote helper failed
Debug: Remote helper: Waiting...
Debug: Remote helper quit.
Debug: Remote helper: <- %s
verbosity
family
unsupported
%s unexpectedly said: '%s'
servpath
setting remote service path not supported by protocol
invalid remote service path
connect %s
stateless-connect %s
Debug: Smart transport connection ready.
fallback
Debug: Falling back to dumb transport.
unknown response to connect: %s
option object-format
list for-push
list
:object-format 
unsupported object format '%s'
malformed response in ref list: %s
unchanged
could not read ref %s
Debug: Read ref listing.
--negotiate-only requires protocol v2
cloning
fetch %s %s
lock 
%s also locked %s
couldn't run fast-import
import %s
error while running fast-import
--stats
--cat-blob-fd=%d
No refs in common and none specified; doing nothing.
Perhaps you should specify a branch.
push 
helper %s does not support dry-run
pushcert
helper %s does not support --signed
helper %s does not support --signed=if-asked
helper %s does not support --atomic
helper %s does not support --%s
helper %s does not support 'push-option'
update by helper
'option' without a matching 'ok/error' directive
error 
expected ok/error, helper said '%s'
helper reported unexpected status of %s
remote-helper doesn't support push; refspec needed
helper %s does not support 'force'
export
--refspec
couldn't run fast-export
error while running fast-export
%s.tmp
--use-done-feature
--signed-tags=verbatim
--signed-tags=warn-strip
--export-marks=%s.tmp
--import-marks=%s
operation not supported by protocol
can't connect to subservice %s
Debug: Disconnecting.
can't start thread for copying data: %s
Git to program copy
Program to git copy
%s is readable
read(%s) failed
%s EOF (with %i bytes in buffer)
Read %i bytes from %s (buffer now at %i)
GIT_TRANSLOOP_DEBUG
Transfer loop debugging: %s
%s is writable
write(%s) failed
Wrote %i bytes to %s (buffer now at %i)
Closed %s.
%s thread failed
%s thread failed to join: %s
could not parse transport.color.* config
transport.c
taking over transport requires non-NULL smart_options field.
GIT_PROTOCOL_FROM_USER
invalid protocol_allow_config type
transport '%s' not allowed
No remote provided to transport_get()
rsync:
git-over-rsync is no longer supported
file://
ssh://
git+ssh://
ssh+git://
get_refs_list
push_submodules
failed to push all needed submodules
check_submodules
push_refs
Done
updating local tracking ref '%s'
update by push
color.transport.reset
To %s
[no match]
remote does not support deleting refs
new shallow roots not allowed
[remote rejected]
[remote failure]
remote failed to report status
atomic push failed
%s:%s
%s (%s)
 %s%c %-*s%s 
%s -> %s
[new reference]
server-sid
buffer must be empty at the end of handshake()
see protocol.version in 'git help config' for more details
server options require protocol version 2 or later
server does not support wait-for-done
GIT_ALLOW_PROTOCOL
protocol.%s.allow
user
unknown value for config '%s': %s
could not read bundle '%s'
transport: invalid depth option '%s'
The following submodule paths contain changes that can
not be found on any remote:
Please try
git push --recurse-submodules=on-demand
or cd to the path and use
git push
to push them to a remote.
Aborting.
Would set upstream of '%s' to '%s' of '%s'
emit_path
tree-diff.c
t || tp
unable to read tree %s
tree-walk.c
too small buffer passed to make_traverse_path
traverse_info pathlen does not match strings
traverse_info ran out of list items
traverse_trees() called with too many trees (%d)
too-short tree object
malformed mode in tree entry
empty filename in tree entry
too-short tree file
traverse_trees_count
traverse_trees_max_depth
Commit %s in submodule path %s%s not found
Invalid commit %s in submodule path %s%s
Object %s not a tree
Your local changes to the following files would be overwritten by checkout:
%%sPlease commit your changes or stash them before you switch branches.
Your local changes to the following files would be overwritten by checkout:
Your local changes to the following files would be overwritten by merge:
%%sPlease commit your changes or stash them before you merge.
Your local changes to the following files would be overwritten by merge:
Your local changes to the following files would be overwritten by %s:
%%sPlease commit your changes or stash them before you %s.
Your local changes to the following files would be overwritten by %s:
Updating the following directories would lose untracked files in them:
The following untracked working tree files would be removed by checkout:
%%sPlease move or remove them before you switch branches.
The following untracked working tree files would be removed by checkout:
The following untracked working tree files would be removed by merge:
%%sPlease move or remove them before you merge.
The following untracked working tree files would be removed by merge:
The following untracked working tree files would be removed by %s:
%%sPlease move or remove them before you %s.
The following untracked working tree files would be removed by %s:
The following untracked working tree files would be overwritten by checkout:
%%sPlease move or remove them before you switch branches.
The following untracked working tree files would be overwritten by checkout:
The following untracked working tree files would be overwritten by merge:
%%sPlease move or remove them before you merge.
The following untracked working tree files would be overwritten by merge:
The following untracked working tree files would be overwritten by %s:
%%sPlease move or remove them before you %s.
The following untracked working tree files would be overwritten by %s:
Entry '%s' overlaps with '%s'.  Cannot bind.
Cannot update submodule:
The following paths are not up to date and were left despite sparse patterns:
The following paths are unmerged and were left despite sparse patterns:
The following paths were already present and thus not updated despite sparse patterns:
unpack_trees takes at most %d trees
unpack-trees.c
unpack_trees
traverse_trees
Merge requires file-level merging
update_sparsity() is for reflecting sparsity patterns in working directory
update_sparsity() called wrong
update_sparsity
Cannot do a twoway merge of %d trees
Cannot do a bind merge of %d trees
Cannot do a oneway merge of %d trees
invalid merge_size: %d
worktree and untracked commit have duplicate entries: %s
Updating index flags
clear_ce_flags(0x%08lx,0x%08lx)
* unpack mask %lu, dirmask %lu, cnt %d 
ent#%d %06o %s
programming error in a caller of mark_ce_used_same_name
Wrong condition to get here buddy
This is a directory and should not exist in index
pos %d doesn't point to the first entry of %s in index
We need cache-tree to do this optimization
Unpacked %d entries from %s to %s using cache-tree
%.*s/
After fixing the above paths, you may want to run `git sparse-checkout reapply`.
check_updates
both update and delete flags are set on %s
Updating files
the following paths have collided (e.g. case-sensitive paths
on a case-insensitive filesystem) and only one from the same
colliding group is in the working tree:
  '%s'
Aborting
Entry '%s' would be overwritten by merge. Cannot merge.
Entry '%s' not uptodate. Cannot merge.
Updating '%s' would lose untracked files in it
Untracked working tree file '%s' would be overwritten by merge.
Untracked working tree file '%s' would be removed by merge.
Submodule '%s' cannot checkout new HEAD.
Path '%s' not uptodate; will not remove from working tree.
Path '%s' unmerged; will not remove from working tree.
Path '%s' already present; will not overwrite with sparse update.
packfile
shallow wait-for-done
uploadpack.allowfilter
uploadpack.allowrefinwant
 ref-in-want
uploadpack.allowsidebandall
 sideband-all
 packfile-uris
uploadpack.allowtipsha1inwant
uploadpack.allowreachablesha1inwant
uploadpack.allowanysha1inwant
uploadpack.keepalive
uploadpack.packobjectshook
uploadpackfilter
allow
maxdepth
'%s' is a symref but it is not?
multi_ack thin-pack side-band side-band-64k ofs-delta shallow deepen-since deepen-not deepen-relative no-progress include-tag multi_ack_detailed
%s %s%c%s%s%s%s%s%s%s object-format=%s agent=%s
 allow-tip-sha1-in-want
 allow-reachable-sha1-in-want
 symref=%s:%s
filter 
git upload-pack: filtering capability not negotiated
want 
git upload-pack: protocol error, expected to get object ID, not '%s'
upload-pack.c
upload-pack: not our ref %s
git upload-pack: not our ref %s
invalid shallow object %s
deepen 
Invalid deepen: %s
deepen-since 
Invalid deepen-since: %s
deepen-not 
git upload-pack: ambiguous deepen-not: %s
filter '%s' not supported
tree filter allows max depth %lu, but got %lu
git upload-pack: deepen and deepen-since (or deepen-not) cannot be used together
--max-age=%ju
unshallow %s
ACK %s ready
ACK %s
have 
ACK %s continue
ACK %s common
git upload-pack: expected SHA1 list, got '%s'
git upload-pack: expected SHA1 object, got '%s'
oops (%s)
aborting due to possible repository corruption on the remote side.
--filter=%s
--uri-protocol=%s
git upload-pack: unable to fork git-pack-objects
--not
poll failed, resuming
git upload-pack: git-pack-objects died with error.
flushed.
git upload-pack: %s
--shallow %s
packfile
packfile_uris requires sideband-all
packfile-uris
packfile-uris 
unexpected line: '%s'
expected flush after fetch arguments
git upload-pack: protocol error, expected to get oid, not '%s'
want-ref 
unknown ref %s
acknowledgments
ready
wanted-refs
shallow-info
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+.-
invalid URL scheme name or missing '://' suffix
:/?#[]@!$&'()*+,;=
invalid %XX escape sequence
file:
missing host and scheme is not 'file:'
a 'file:' URL may not have a port number
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-[:]*
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.-[:]
invalid characters in host name
http:
https:
invalid port number
invalid '..' path segment
 <>"%{}|\^`
BUG!!! too long a prefix '%s'
fatal: recursion detected in die handler
usage.c
fatal: recursion detected in die_errno handler
die() called many times. Recursion error or racy threaded death!
usage: 
_usage_
BUG: %s:%d: 
BUG: 
funcname
xfuncname
cachetextconv
wordregex
textconv/%s
diff=true
!diff
!^(.*[ 
])?(is[ 
]+new|renames|is[ 
]+separate)([ 
].*)?$
!^[ 
]*with[ 
].*$
]*((procedure|function)[ 
]+.*)$
]*((package|protected|task)[ 
]+.*)$
[a-zA-Z][a-zA-Z0-9_]*|[-+]?[0-9][0-9#_.aAbBcCdDeEfF]*([eE][+-]?[0-9_]+)?|=>|\.\.|\*\*|:=|/=|>=|<=|<<|>>|<>|[^[:space:]]|[
bash
]*(([a-zA-Z_][a-zA-Z0-9_]*[ 
]*\([ 
]*\))|(function[ 
]+[a-zA-Z_][a-zA-Z0-9_]*(([ 
]*\([ 
]*\))|([ 
]+)))[ 
]*(\{|\(\(?|\[\[))
]+|[^[:space:]]|[
bibtex
(@[a-zA-Z]{1,}[ 
]*\{{0,1}[ 
]*[^ 
"@',\#}{~%]*).*$
[={}"]|[^={}" 
]+|[^[:space:]]|[
!^[ 
]*[A-Za-z_][A-Za-z_0-9]*:[[:space:]]*($|/[/*])
^((::[[:space:]]*)?[A-Za-z_].*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lLuU]*|[-+*/<>%&^|=!]=|--|\+\+|<<=?|>>=?|&&|\|\||::|->\*?|\.\*|[^[:space:]]|[
csharp
!^[ 
]*(do|while|for|if|else|instanceof|new|return|switch|case|throw|catch|using)
]*(((static|public|internal|private|protected|new|virtual|sealed|override|unsafe|async)[ 
]+)*[][<>@.~_[:alnum:]]+[ 
]+[<>@._[:alnum:]]+[ 
]*\(.*\))[ 
]*(((static|public|internal|private|protected|new|virtual|sealed|override|unsafe)[ 
]+)*[][<>@.~_[:alnum:]]+[ 
]+[@._[:alnum:]]+)[ 
]*(((static|public|internal|private|protected|new|unsafe|sealed|abstract|partial)[ 
]+)*(class|enum|interface|struct)[ 
]+.*)$
]*(namespace[ 
]+.*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lL]?|[-+*/<>%&^|=!]=|--|\+\+|<<=?|>>=?|&&|\|\||::|->|[^[:space:]]|[
![:;][[:space:]]*$
^[:[@.#]?[_a-z0-9].*$
-?[_a-zA-Z][-_a-zA-Z0-9]*|-?[0-9]+|\#[0-9a-fA-F]+|[^[:space:]]|[
]*((/[ 
]*\{|&?[a-zA-Z_]).*)
[a-zA-Z0-9,._+?#-]+|[-+*/%&^|!~]|>>|<<|&&|\|\||[^[:space:]]|[
elixir
]*((def(macro|module|impl|protocol|p)?|test)[ 
].*)$
[@:]?[a-zA-Z0-9@_?!]+|[-+]?0[xob][0-9a-fA-F]+|[-+]?[0-9][0-9_.]*([eE][-+]?[0-9_]+)?|:?(\+\+|--|\.\.|~~~|<>|\^\^\^|<?\|>|<<<?|>?>>|<<?~|~>?>|<~>|<=|>=|===?|!==?|=~|&&&?|\|\|\|?|=>|<-|\\\\|->)|:?%[A-Za-z0-9_.]\{\}?|[^[:space:]]|[
fortran
!^([C*]|[ 
]*!)
!^[ 
]*MODULE[ 
]+PROCEDURE[ 
]*((END[ 
]+)?(PROGRAM|MODULE|BLOCK[ 
]+DATA|([^!'" 
]+[ 
]+)*(SUBROUTINE|FUNCTION))[ 
]+[A-Z].*)$
[a-zA-Z][a-zA-Z0-9_]*|\.([Ee][Qq]|[Nn][Ee]|[Gg][TtEe]|[Ll][TtEe]|[Tt][Rr][Uu][Ee]|[Ff][Aa][Ll][Ss][Ee]|[Aa][Nn][Dd]|[Oo][Rr]|[Nn]?[Ee][Qq][Vv]|[Nn][Oo][Tt])\.|[-+]?[0-9.]+([AaIiDdEeFfLlTtXx][Ss]?[-+]?[0-9.]*)?(_[a-zA-Z0-9][a-zA-Z0-9_]*)?|//|\*\*|::|[/<>=]=|[^[:space:]]|[
fountain
^((\.[^.]|(int|ext|est|int\.?/ext|i/e)[. ]).*)$
-]+|[^[:space:]]|[
golang
]*(func[ 
]*.*(\{[ 
]*)?)
]*(type[ 
].*(struct|interface)[ 
]*(\{[ 
]*)?)
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.eE]+i?|0[xX]?[0-9a-fA-F]+i?|[-+*/<>%&^|=!:]=|--|\+\+|<<=?|>>=?|&\^=?|&&|\|\||<-|\.{3}|[^[:space:]]|[
]*(<[Hh][1-6]([ 
].*)?>.*)$
[^<>= 
]+|[^[:space:]]|[
java
!^[ 
]*(catch|do|for|if|instanceof|new|return|switch|throw|while)
]*(([A-Za-z_][A-Za-z_0-9]*[ 
]+)+[A-Za-z_][A-Za-z_0-9]*[ 
]*\([^;]*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[fFlL]?|0[xXbB]?[0-9a-fA-F]+[lL]?|[-+*/<>%&^|=!]=|--|\+\+|<<=?|>>>?=?|&&|\|\||[^[:space:]]|[
markdown
^ {0,3}#{1,6}[ 
matlab
^[[:space:]]*((classdef|function)[[:space:]].*)$|^(%%%?|##)[[:space:]].*$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|[=~<>]=|\.[*/\^']|\|\||&&|[^[:space:]]|[
objc
!^[ 
]*(do|for|if|else|return|switch|while)
]*([-+][ 
]*\([ 
]*[A-Za-z_][A-Za-z_0-9* 
]*\)[ 
]*[A-Za-z_].*)$
]*(([A-Za-z_][A-Za-z_0-9]*[ 
]+)+[A-Za-z_][A-Za-z_0-9]*[ 
]*\([^;]*)$
^(@(implementation|interface|protocol)[ 
].*)$
pascal
^(((class[ 
]+)?(procedure|function)|constructor|destructor|interface|implementation|initialization|finalization)[ 
]*.*)$
^(.*=[ 
]*(class|record).*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|<>|<=|>=|:=|\.\.|[^[:space:]]|[
^package .*
^sub [[:alnum:]_':]+[ 
]*(\([^)]*\)[ 
]*)?(:[^;#]*)?(\{[ 
]*)?(#.*)?$
^(BEGIN|END|INIT|CHECK|UNITCHECK|AUTOLOAD|DESTROY)[ 
]*(\{[ 
]*)?(#.*)?$
^=head[0-9] .*
[[:alpha:]_'][[:alnum:]_']*|0[xb]?[0-9a-fA-F_]*|[0-9a-fA-F_]+(\.[0-9a-fA-F_]+)?([eE][-+]?[0-9_]+)?|=>|-[rwxoRWXOezsfdlpSugkbctTBMAC>]|~~|::|&&=|\|\|=|//=|\*\*=|&&|\|\||//|\+\+|--|\*\*|\.\.\.?|[-+*/%.^&<>=!|]=|=~|!~|<<|<>|<=>|>>|[^[:space:]]|[
 ]*(((public|protected|private|static|abstract|final)[
 ]+)*function.*)$
 ]*((((final|abstract)[
 ]+)?class|interface|trait).*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|[-+*/<>%&^|=!.]=|--|\+\+|<<=?|>>=?|===|&&|\|\||::|->|[^[:space:]]|[
]*((class|(async[ 
]+)?def)[ 
].*)$
[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+[jJlL]?|0[xX]?[0-9a-fA-F]+[lL]?|[-+*/<>%&^|=!]=|//=?|<<=?|>>=?|\*\*=?|[^[:space:]]|[
ruby
]*((class|module|def)[ 
].*)$
(@|@@|\$)?[a-zA-Z_][a-zA-Z0-9_]*|[-+0-9.e]+|0[xXbB]?[0-9a-fA-F]+|\?(\\C-)?(\\M-)?.|//=?|[-+*/<>%&^|=!]=|<<=?|>>=?|===|\.{1,3}|::|[!=]~|[^[:space:]]|[
rust
 ]*((pub(\([^\)]+\))?[
 ]+)?((async|const|unsafe|extern([
 ]+"[^"]+"))[
 ]+)?(struct|enum|union|mod|trait|fn|impl|macro_rules!)[< 
]+[^;]*)$
[a-zA-Z_][a-zA-Z0-9_]*|[0-9][0-9_a-fA-Fiosuxz]*(\.([0-9]*[eE][+-]?)?[0-9_fF]*)?|[-+*\/<>%&^|=!:]=|<<=?|>>=?|&&|\|\||->|=>|\.{2}=|\.{3}|::|[^[:space:]]|[
scheme
 ]*(\(((define|def(struct|syntax|class|method|rules|record|proto|alias)?)[-*/ 
]|(library|module|struct|class)[*+ 
]).*)$
\|([^\\]*)\||([^][)(}{[ 
])+|[^[:space:]]|[
^(\\((sub)*section|chapter|part)\*{0,1}\{.*)$
\\[a-zA-Z@]+|\\.|[a-zA-Z0-9
]+|[^[:space:]]|[
utf-8
UTF-16LE-BOM
UTF-16
UTF-16LE
UTF-16BE-BOM
UTF-16BE
UTF-32BE
UTF-32LE
UTF-32
%-*s
%*s%-*s
latin-1
ISO-8859-1
GIT_USER_AGENT
git/2.32.0 (Apple Git-132)
versionsort.prereleasesuffix
ignoring versionsort.prereleasesuffix because versionsort.suffix is set
%s/worktrees
'%s' at main working tree is not the repository directory
'%s' file does not contain absolute path to the working tree location
worktrees/%s/gitdir
'%s' does not exist
'%s' is not a .git file, error code %d
'%s' does not point back to '%s'
worktree.c
can't relocate main worktree
worktrees/%s/
not a valid path
unable to locate repository; .git is not a file
unable to locate repository; .git file does not reference a repository
unable to locate repository; .git file broken
gitdir unreadable
gitdir incorrect
not a valid directory
gitdir file does not exist
unable to read gitdir file (%s)
short read (expected %ju bytes, read %ju)
invalid gitdir file
worktrees/%s/index
gitdir file points to non-existent location
not a directory
.git is not a file
.git file broken
.git file incorrect
Out of memory, strdup failed
Out of memory, realloc failed
data too large to fit into virtual memory space
Out of memory, calloc failed
could not open '%s' for reading and writing
Out of memory? fdopen failed
Unable to create temporary file '%s'
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789
unlink_or_msg
wrapper.c
unable to unlink '%s': %s
unlink
rmdir
unable to access '%s'
your snprintf is broken
attempt to snprintf into too-small buffer
could not write to '%s'
could not stat %s
Out of memory, malloc failed (tried to allocate %lu bytes)
Data too large to fit into virtual memory space.
GIT_ALLOC_LIMIT
attempting to allocate %ju over limit %ju
unable to %s '%s'
GIT_FLUSH
write failure on '%s'
write error
fsync error on '%s'
tabwidth=
tabwidth %.*s out of range
cannot enforce both tab-in-indent and indent-with-non-tab
trailing whitespace
new blank line at EOF
space before tab in indent
indent with spaces
tab in indent
trailing-space
space-before-tab
indent-with-non-tab
cr-at-eol
blank-at-eol
blank-at-eof
tab-in-indent
wt-status.c
initial
%c %s
Do not modify or remove the line above.
Everything below it will be ignored.
rebase-apply/applying
rebase-apply/patch
rebase-apply/head-name
rebase-apply/onto
count/changed
count/untracked
count/ignored
finalize_deferred_config() should have been called
cannot %s: You have unstaged changes.
additionally, your index contains uncommitted changes.
cannot %s: Your index contains uncommitted changes.
multiple renames on the same target? how?
unhandled diff-files status '%c'
unhandled diff-index status '%c'
No commits yet on 
HEAD (no branch)
different
behind 
ahead 
 %s%c
%s -> 
# branch.oid %s%c
(initial)
# branch.head %s%c
(detached)
# branch.upstream %s%c
# branch.ab +%d -%d%c
# branch.ab +? -?%c
# branch.ab +0 -0%c
2 %s %s %06o %06o %06o %s %s %c%d %s%c%s%c
1 %s %s %06o %06o %06o %s %s %s%c
wt_porcelain_v2_fix_up_changed
d->mode_head == 0
d->mode_worktree == 0
unhandled unmerged status %x
wt_porcelain_v2_print_unmerged_entry
pos < 0
observed stagemask 0x%x != expected stagemask 0x%x
%c %s %s %06o %06o %06o %06o %s %s %s %s%c
%c %s%c
On branch 
interactive rebase in progress; onto 
rebase in progress; onto 
HEAD detached at 
HEAD detached from 
Not currently on any branch.
Initial commit
No commits yet
Untracked files
Ignored files
add -f
It took %.2f seconds to enumerate untracked files. 'status -uno'
may speed it up, but you have to be careful not to forget to add
new files yourself (see 'git help status').
Untracked files not listed%s
 (use -u option to show untracked files)
No changes
no changes added to commit (use "git add" and/or "git commit -a")
no changes added to commit
nothing added to commit but untracked files present (use "git add" to track)
nothing added to commit but untracked files present
nothing to commit (create/copy files and use "git add" to track)
nothing to commit
nothing to commit (use -u to show untracked files)
nothing to commit, working tree clean
wt_longstatus_print_tracking
s->branch && !s->is_initial
It took %.2f seconds to compute the branch ahead/behind values.
You can use '--no-ahead-behind' to avoid this.
git-rebase-todo is missing.
No commands done.
Last command done (%d command done):
Last commands done (%d commands done):
   %s
  (see more in file %s)
No commands remaining.
Next command to do (%d remaining command):
Next commands to do (%d remaining commands):
  (use "git rebase --edit-todo" to view and edit)
Could not open file %s for reading
exec 
label 
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)
You are in the middle of an am session.
The current patch is empty.
  (fix conflicts and then run "git am --continue")
  (use "git am --skip" to skip this patch)
  (use "git am --abort" to restore the original branch)
  (fix conflicts and then run "git rebase --continue")
  (use "git rebase --skip" to skip this patch)
  (use "git rebase --abort" to check out the original branch)
  (all conflicts fixed: run "git rebase --continue")
You are currently splitting a commit while rebasing branch '%s' on '%s'.
You are currently splitting a commit during a rebase.
  (Once your working directory is clean, run "git rebase --continue")
You are currently editing a commit while rebasing branch '%s' on '%s'.
You are currently editing a commit during a rebase.
  (use "git commit --amend" to amend the current commit)
  (use "git rebase --continue" once you are satisfied with your changes)
You are currently rebasing branch '%s' on '%s'.
You are currently rebasing.
Cherry-pick currently in progress.
You are currently cherry-picking commit %s.
  (fix conflicts and run "git cherry-pick --continue")
  (run "git cherry-pick --continue" to continue)
  (all conflicts fixed: run "git cherry-pick --continue")
  (use "git cherry-pick --skip" to skip this patch)
  (use "git cherry-pick --abort" to cancel the cherry-pick operation)
Revert currently in progress.
You are currently reverting commit %s.
  (fix conflicts and run "git revert --continue")
  (run "git revert --continue" to continue)
  (all conflicts fixed: run "git revert --continue")
  (use "git revert --skip" to skip this patch)
  (use "git revert --abort" to cancel the revert operation)
You are currently bisecting, started from branch '%s'.
You are currently bisecting.
  (use "git bisect reset" to get back to the original branch)
You are in a sparse checkout with %d%% of tracked files present.
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
  (use "git restore --source=%s --staged <file>..." to unstage)
  (use "git rm --cached <file>..." to unstage)
new commits, 
modified content, 
untracked content, 
unhandled change_type %d in wt_longstatus_print_change_data
unhandled diff status %c
wt_longstatus_print_change_data
len >= 0
%s%.*s%s -> %s
%s%.*s%s
new file:
copied:
deleted:
modified:
renamed:
typechange:
unknown:
unmerged:
Unmerged paths:
  (use "git add <file>..." to mark resolution)
  (use "git add/rm <file>..." as appropriate to mark resolution)
  (use "git rm <file>..." to mark resolution)
%s%.*s%s
both deleted:
added by us:
deleted by them:
added by them:
deleted by us:
both added:
both modified:
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
  (commit or discard the untracked or modified content in submodules)
--files
--for-status
--summary-limit
HEAD^
Submodules changed but not updated:
Submodule changes to be committed:
%s%s
  (use "git %s <file>..." to include in what will be committed)
--------------------------------------------------
Your stash currently has %d entry
Your stash currently has %d entries
Could not stat %s
Could not open %s
xdiff-interface.c
mismatch between line count and parsing
Last expression must not be negated: %s
Invalid regexp to look for hunk header: %s
'%s' is not a boolean
unknown style '%s' given for '%s'
xdiff emitted hunk in the middle of a line
1.2.11
inflateInit: %s (%s)
no message
inflateInit2: %s (%s)
inflateEnd: %s (%s)
inflate: out of memory
inflate: %s (%s)
deflateInit: %s (%s)
deflateEnd: %s (%s)
deflate: out of memory
deflate: %s (%s)
zlib.c
total_out mismatch
total_in mismatch
out of memory
wrong version
needs dictionary
data stream error
stream consistency error
unknown error
deflateInit2: %s (%s)
unable to restore original working directory
iconv_open(%s,%s) failed, but needed:
    precomposed unicode is not supported.
    If you want to use decomposed unicode, run
    "git config core.precomposeunicode false"
UTF-8-MAC
LC_ALL
LC_CTYPE
LANG
alnum
space
parse_bracket_exp
regcomp.c
upper
lower
alpha
cntrl
digit
blank
graph
punct
xdigit
link_nfa_nodes
node->next == NULL
left > -1
right > -1
!IS_EPSILON_NODE (node->token.type)
re_search_stub
regexec.c
pmatch[0].rm_so == start
re_copy_regs
regs_allocated == REGS_FIXED
regs->num_regs >= nregs
re_search_internal
mctx.input.offsets_needed == 0
check_matching
err == REG_ESPACE
pop_fail_stack
num >= 0
group sync broken sliding up
group sync broken sliding down
match disappeared
group sync broken sliding to match
best shift unreached
group sync broken sliding to blank line
group sync broken moving to next group
group sync broken at end of file
BUG: %s
xdiff/xdiffi.c
\ No newline at end of file
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleShortVersionString</key>
<string>132</string>
<key>CFBundleVersion</key>
<string>132</string>
</dict>
</plist>
%s%s
1ahs
652s
git blame [<options>] [<rev-opts>] [<rev>] [--] <file>
[31m
[32m
[34m
[36m
[1;34m
[1;31m
[1;31m
[31m
[33m
[36m
[31m
[32m
[33m
[41m
[1;35m
[1;34m
[2;3m
[1;36m
[1;33m
[2;3m
[2;31m
[2;32m
[1;31m
[1;32m
[1;31m
[1;31m
[36m
[1;32m
[1;31m
[1;33m
[1;35m
[1;36m
[1;34m
/bad-path/
[33m
[1;33m
[1;32m
[1;31m
[31m
[32m
[31m
[31m
[31m
[31m
[32m
[31m
