%s[%d]: [fatal] unable to suspend target process: %s
%s[%d]: task_stop_peeking failed. (%s)
NSMutableArray
NSProcessInfo
processInfo
arguments
arrayWithArray:
objectAtIndexedSubscript:
setObject:atIndexedSubscript:
Command args:    %@
componentsJoinedByString:
appendFormat:
Target process:  %s [%u]
Parent process:  %s [%u]
Parent process:  unable to determine
appendString:
UTF8String
DYLD_INSERT_LIBRARIES=/usr/local/lib/libLeaksAtExit.dylib
DYLD_ROOT_PATH
DT_NO_RESPAWN
/usr/bin/%s
%s[%d]: [fatal] execve: %s could not be launched: %s (%d)
SAMPLING_TOOLS_TARGET_PID
NSNumber
class
isKindOfClass:
intValue
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: unable to get permission to examine process.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: Unable to deallocate target task port: %d (%s)
/usr/lib/system/libsystem_kernel.dylib
task_generate_corpse
%s[%d]: [fatal] Fail to generate corpse from the task, exiting
is64Bit
valueForEnvVar:
SIMULATOR_UDID
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
x86_64
i386
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
__check_mach_ports_lookup
stringValue
__check_parent_tool_v1
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal]  child process status could not be determined; exit code unavailable.
v4@?0
v16@?0I4I8I12
v8@?0I4
bytes
subdataWithRange:
NSJSONSerialization
JSONObjectWithData:options:error:
%s[%d]: [fatal] unable to parse json header: %s
NSDictionary
%s[%d]: [fatal] invalid IPS header
objectForKey:
%s[%d]: [fatal] IPS length is invalid
bug_type
isEqualToString:
%s[%d]: [fatal] invalid IPS bug type
retain
: terminated; resuming target task
: interrupted; resuming target task
system.privilege.taskport.debug
%s[%d]: [fatal] unable to ask for permission to examine process; run tool using sudo, or without redirecting stdin and stderr.
An admin user name and password is required to enter Developer Mode.
Admin user name (%s): 
Admin user name: 
Password:
username
password
shared
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
%s/usr/bin/%s
%s%s
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_msg_send' failed: %s (%d)
initWithFormat:arguments:
dictionaryWithObjects:forKeys:count:
NSError
VMUOptionParserDomain
errorWithDomain:code:userInfo:
NSMutableDictionary
initWithString:
dealloc
/Library/Caches/com.apple.xbs/Sources/SamplingTools/SamplingTools-62027/VMUOptionParser.m
NSAssertionHandler
Invalid parameter not satisfying: %@
block && longName || shortName
handleFailureInMethod:object:file:lineNumber:description:
characterAtIndex:
!longName || ([longName length] && [longName characterAtIndex:0] != '-')
Option's long-name '%@' is invalid or already in use.
setObject:forKey:
rangeOfString:
Option's short-name '%c' is invalid or already in use.
%s%@
%c%c%@%c
[@@@spacing@@@]%@
%s flag supplied with no argument
unrecognized option '%s'
removeAllObjects
userInfo
code
[invalid usage]: %s
%s: %s
Usage: %s %s
countByEnumeratingWithState:objects:count:
[@@@spacing@@@]
stringByReplacingOccurrencesOfString:withString:
@8@0:4
v8@0:4
registerOptionWithLongName:shortName:hasArgument:argumentName:optionDescription:handler:
v32@0:4@8c12i16@20@24@?28
parseArgumentsWithBlock:
@12@0:4@?8
v12@0:4@8
purposeDescription
syntaxDescription
setSyntaxDescription:
discussion
setDiscussion:
singleHyphenLongNames
c8@0:4
setSingleHyphenLongNames:
v12@0:4c8
parametersShowAsAssignment
setParametersShowAsAssignment:
NSObject
_purposeDescription
@"NSString"
_syntaxDescription
_discussionDescription
_optionDescriptions
@"NSMutableArray"
_optionBlockByString
@"NSMutableDictionary"
_longOptStructs
^{__CFArray=}
_shortOpts
@"NSMutableString"
_spacing
_singleHyphenLongNames
_parametersShowAsAssignment
T@"NSString",C,N,V_purposeDescription
T@"NSString",C,N,V_syntaxDescription
T@"NSString",C,N,V_discussionDescription
Tc,N,V_singleHyphenLongNames
Tc,N,V_parametersShowAsAssignment
v12@?0@"NSString"4^@8
NSAutoreleasePool
alloc
init
launchd
coresymbolicationd
coreservicesd
UserEventAgent
rpc.lockd
launchservicesd
Activity Monitor
mdworker
spindump_agent
NSArray
arrayWithObjects:count:
mutableCopy
autorelease
VMUOptionParser
Search through a process for leaked memory.
setPurposeDescription:
[-hq] [--nocontext] [--nostacks] [--outputGraph=<path>] [--fullContent] [--forkCorpse] [--trace=<address>] [--atExit] <pid | partial-process-name | memory-graph-file | -- process-and-arguments>
exclude
exclude leaked blocks whose backtraces include the specified symbol
NSMutableSet
addObject:
help
show this helpful usage message!
usage:
showTiming
DVT_VMUDebugTimer
initialization
startWithMessage:
quiet
suppress the process description header and footer
nocontext
do not print the binary contexts of discovered leaks
nostacks
do not print backtraces, even when available
outputGraph
save a memory graph file into the given directory or file
/tmp/
copy
compress
boolValue
fullContent
save allocation content descriptions into the memory graph file
nocontents
systemTest
length
conservative
noScanOverlay
DT_NO_SCAN_OVERLAY
forkCorpse
generate a corpse fork from process and run leaks on it
getCorpseFromParent
get_corpse
atExit
Launches the specified process and runs leaks when the process exits.  The process to launch must be the end of the command, and proceeded by '--'
trace
address
print chains of references from process 'roots' (e.g., global data) to the given block
traceTree
print a reverse tree of references, from the given block up to the process roots; can be imported into Instruments with Import Sampler Data
referenceTree
groupByType
debug
Modes of 'leaks <process> -debug'.  More than one different mode flag can be passed,
such as '-debug='.*Storage.*' -debug=references'.
    -debug            -- full output
    -debug=layout     -- full output, including object layout and values of ivars
    -debug=histogram  -- only show histogram of number of allocations having each reference count
    -debug=references -- only show references (not content or layout), and only if reference count > 1
    -debug=<address>  -- only show the allocation at or containing <address>
    -debug=<classes-pattern>  -- show allocations whose class name matches pattern
    -debug=<region-description-pattern>  -- show non-malloc nodes (e.g. VM regions, threads) whose description matches pattern
layout
histogram
references
hasPrefix:
error in -debug=<classes> pattern '%s': %s
Region
Thread
NSString
.*%@
stringWithFormat:
hasSuffix:
%@.*
error in -debug=<region-description> pattern '%s': %s
maxInteriorOffset
suppressOutput
blacklist
outputFile
unable to open output file "%s" for writing: %s (%d)
ipsIncidentID
rateLimit
nonIPSMemgraphCount
vmalso
novm
vmonly
vmPageStatistics
checkAbandoned
postprocessGraph
pathExtension
NSData
dataWithContentsOfFile:options:error:
unknown argument: %@
no process specified
dictionary
DVT_VMUProcessObjectGraph
initWithPlistRepresentation:
toolHeaderDescription
setObject:forKeyedSubscript:
processName
%s[%d]: [fatal] unable to read input graph
DVT_VMUStackLogReader
initWithTask:
setDebugTimer:
Note: Process %d is marked CS_RESTRICT.
For security, leaks will not show memory contents of restricted processes.
setSaveNodeLabelsInGraph:
setScanningMask:
-[scanner processSnapshotGraph]
processSnapshotGraph
DVT_VMUScanOverlay
defaultOverlay
refineTypesWithOverlay:
refineEdges:withOptions:markingInvalid:
removeMarkedEdges:
v8@?0^v4
withEdgeMarkingMap:
objectForKeyedSubscript:
setToolHeaderDescription:
setProcessName:
%s[%d]: [fatal] ignoring --outputGraph option as path provided would overwrite the source graph file
stop
leaks Report Version:  2.0
usesLiteMode
release
v12@?0i4I8
headerDescription
DVT_VMUProcessDescription
initWithPid:orTask:getBinariesList:
description
binaryImagesDescription
gather VM region data
DVT_VMUTaskMemoryScanner
initWithTask:options:
%s[%d]: [fatal] unable to instantiate a memory scanner.
addRootNodesFromTask
addMallocNodesFromTask
setExactScanningEnabled:
setAbandonedMarkingEnabled:
setMaxInteriorOffset:
%s[%d]: [fatal] target process no longer exists; abandoning...
archiving graph
plistRepresentationWithOptions:
numberWithUnsignedInteger:
setValue:forKey:
memgraph
name
incidentID
dataWithJSONObject:options:error:
%s[%d]: [fatal] unable to write JSON header: %s
localizedDescription
NSMutableData
dataWithData:
appendBytes:length:
appendData:
write graph to file
NSFileManager
defaultManager
fileExistsAtPath:isDirectory:
%@[%d].XXXXXX.%@
stringByAppendingPathComponent:
fileSystemRepresentation
%s[%d]: [fatal] unable to create file "%s" for memory graph: %d %s
stringWithUTF8String:
NSFileHandle
initWithFileDescriptor:closeOnDealloc:
writeData:
closeFile
stringByAppendingPathExtension:
writeToFile:options:error:
%s[%d]: [fatal] unable to write graph to output file "%s": %s
%@_%@
LogType
Output graph successfully written to '%s' [%3.2f MB]
stringByStandardizingPath
memgraph.%@
Will not upload memgraph. rate limits: global=%lf proc=%lf. rand=%lf
memgraph.CountLimit
memgraph.%@.CountLimit
Will not take memgraph, because the limit of %.0lf graphs has been reached
%@.t
%@.signal
%@.exponent
%@.numerator
%@.coef_denominator
com.apple.da
mobile
numberWithDouble:
NSScanner
scannerWithString:
scanDouble:
isAtEnd
invertedGraph
nodeDetails:
nodeDescription:
v48@?0I4I8I12{?=^{?}{?=QIQ}^{?}}16^c44
enumerateReferencesOfNode:withBlock:
SCANNING %s
REFERENCES TO THIS: %u
   STRONG: %u  CONSERVATIVE: %u  WEAK UU etc: %u
   SELF: %u
referenceInfoWithName:
nodeDescription:withDestinationNode:referenceInfo:
  SELF-REF
stringByAppendingString:
   %s
v20@?0I4I8I12^c16
enumerateEdgesOfNode:withBlock:
instanceSize
pointerSize
contentForNode:
LAYOUT (%s)
exact
offset
%llu bytes into 
--> %@%@
bitfieldWidth
descriptionOfFieldValueInObjectMemory:scanner:
scanType
%3u: %s%s%s  %s
typedDescription
v16@?0@"DVT_VMUFieldInfo"4I8^c12
enumerateAllFieldsWithBlock:
%3u: <extra space>[%llu]
CONTENTS:
referenceDescription:withSourceNode:destinationNode:alignmentSpacing:
%u POINTERS FROM %s
v12@?0I4^c8
enumerateNodesWithBlock:
i12@?0r^v4r^v8
NODE COUNT:  %u   OWNING-REFS COUNT: %u   AVERAGE OWNING-REFS PER NODE: %.2f
    %10u %s references
SELF-REFERENCES:  %u
%26lu   %8lu
   leaked blocks and VM regions
   %s
className
displayName
%s[%d]: [fatal] %s
v32@?0I4{?=Qb60b4@}8^c28
enumerateObjectsWithBlock:
invertEdges
%s[%d]: [fatal] address provided for reference tracing (%#llx) not found in target process' heap
Tracing: %s
nodeNamespaceSize
C12@?0I4C8
c20@?0I4I8I12*16
breadthFirstSearch:nodeVisitBlock:edgeVisitBlock:
DVT_VMUCallTreeRoot
initWithSymbolicator:sampler:options:
NSMutableString
string
addChildWithName:address:count:numBytes:toNode:
Found %u root%s referencing: %s
This is a reverse reference tree showing how the specified block is referenced.
The top node is the specified block, the next level down are blocks that reference that, and so on.
The number at the start of each line is the number of paths-to-roots going through that node.
This reverse reference tree can be imported into Instruments using Import Sample Data to allow data mining.
invertedNode
stringFromCallTreeIndentIfNoBranches:
withNodeMarkingMap:
nodeCount
printReferenceTree identifying root regions
vmuVMRegionForNode:
path
printReferenceTree building call tree from references
isSubmap
type
__DATA
lastPathComponent
%@ %@
Stack
Stack of %@
void printReferenceTree(DVT_VMUProcessObjectGraph *)
<Unknown Function>
/Library/Caches/com.apple.xbs/Sources/SamplingTools/SamplingTools-62027/leaks/leaks.m
<Unknown File>
currentHandler
Malloc blocks should not be root nodes of reference graph
handleFailureInFunction:file:lineNumber:description:
DVT_VMURangeArray
binarySectionRangeContainingAddress:
binarySectionNameForAddress:
__DATA __objc
regionSymbolRangeContainingAddress:
addRange:
sort
addUniqueChildWithName:address:count:numBytes:toNode:
rangeForLocation:
regionSymbolNameForAddress:
%@ %@: '%@[]'
is64bit
unaligned +%lld:  --> %@
 Storage)
fieldAtOrBeforeOffset:
ivarName
 + %llu
%@%s --> %@
%@  dirty: %s  swapped: %s
printReferenceTree addChildCountsIntoNode
addChildCountsIntoNode
printReferenceTree printing call tree
printCallTreeToFile:
printReferenceTree releasing tree
malloc-block
DVT_VMUVMRegionTracker
initWithTask:stackLogReader:
zoneNameForIndex:
isLiteZone:
vmRegionRangeInfoForRange:
stackIdentifier
getFramesForAddress:size:inLiteZone:stackFramesBuffer:
Call stack: 
stringWithString:
[thread %#llx]: 
initWithUTF8String:
containsObject:
| %s 
| 0x%llx 
%s:%u 
%s: %#llx  size=%llu  
VM: unknown region type
VM: %@
descriptionWithOptions:maximumLength:
zone: %s
   %s  %s  %s
typeName
binaryName
labelForNode:
  %s
v40@?0r*4I8{?=Qb60b4@}12@"DVT_VMUVMRegion"32^c36
%s[%d]: [fatal] unable to inspect heap ranges of target process; it may be using a malloc replacement library without the required support
Process %d: %u nodes malloced for %llu KB
scan for leaks
copyUserMarked
markReachableNodesFromRoots:inMap:
enumerateMarkedObjects:withBlock:
Process %d: %u leak%s for %llu total leaked bytes.
Process %d: %u object%s abandoned for %llu total abandoned bytes.
Leak
Abandoned
v36@?0I4{?=Qb60b4@}8@"DVT_VMUVMRegion"28^c32
%u leaks excluded (not printed)
0x%08x 
< content unavailable >
binaryImages
numberWithInt:
%5d: [%s]
v24@?0i4r*8B12I16I20
COUNT OF OWNING REFERENCES   NUMBER OF NODES WITH THAT COUNT
MbP?
@(#)PROGRAM:leaks  PROJECT:SamplingTools-62027
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.SamplingTools</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>SecTaskAccess</key>
<array>
<string>allowed</string>
<string>debug</string>
</array>
</dict>
</plist>
