containsString:
.memgraph
hasSuffix:
stringByResolvingSymlinksInPath
NSFileManager
defaultManager
isExecutableFileAtPath:
attributesOfItemAtPath:error:
fileSize
NSData
dataWithContentsOfFile:options:error:
%s[%d]: [fatal] unable to read input graph: %s
localizedDescription
UTF8String
%s[%d]: [fatal] unable to suspend target process: %s
%s[%d]: task_stop_peeking failed. (%s)
NSProcessInfo
processInfo
arguments
arrayWithArray:
objectAtIndexedSubscript:
setObject:atIndexedSubscript:
Command args:    %@
componentsJoinedByString:
appendFormat:
Target process:  %s [%u]
Parent process:  %s [%u]
Parent process:  unable to determine
appendString:
DYLD_INSERT_LIBRARIES=/usr/local/lib/libLeaksAtExit.dylib
DYLD_ROOT_PATH
DT_NO_RESPAWN
/usr/bin/%s
%s[%d]: [fatal] execve: %s could not be launched: %s (%d)
class
isKindOfClass:
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: Unable to deallocate target task port: %d (%s)
/usr/lib/system/libsystem_kernel.dylib
task_generate_corpse
%s[%d]: [fatal] Fail to generate corpse from the task, exiting
DVT_VMUProcessDescription
alloc
initWithTask:getBinariesList:
is64Bit
valueForEnvVar:
SIMULATOR_UDID
DT_FORCE_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
stringWithFormat:
x86_64
i386
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
__check_mach_ports_lookup
numberWithInt:
stringValue
__check_parent_tool_v1
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal]  child process status could not be determined; exit code unavailable.
v4@?0
v16@?0I4I8I12
v8@?0I4
: terminated; resuming target task
: interrupted; resuming target task
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
%s/usr/bin/%s
%s%s
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_msg_send' failed: %s (%d)
error in %@ <classes> pattern '%@': %s
Region
hasPrefix:
Thread
.*%@
%@.*
error in % <region-description> pattern '%@': %s
dealloc
%s[%d]: [fatal] %s
className
_regex:matchesName:
_matchesClassInfo:
_classesRegex
^{?=iI*^{re_guts}}
_vmRegionsRegex
_memoizedRegexResult
^{__CFDictionary=}
@20@0:4@8@12^@16
v8@0:4
c16@0:4^{?=iI*^{re_guts}}8@12
c12@0:4@8
c32@0:4{?=Qb60b4@}8@28
initWithFormat:arguments:
NSDictionary
dictionaryWithObjects:forKeys:count:
NSError
VMUOptionParserDomain
errorWithDomain:code:userInfo:
initWithString:
/Library/Caches/com.apple.xbs/Sources/SamplingTools/SamplingTools-64246.2/VMUOptionParser.m
NSAssertionHandler
Invalid parameter not satisfying: %@
block && (longName || shortName)
handleFailureInMethod:object:file:lineNumber:description:
characterAtIndex:
!longName || ([longName length] && [longName characterAtIndex:0] != '-')
objectForKey:
Option's long-name '%@' is invalid or already in use.
setObject:forKey:
rangeOfString:
Option's short-name '%c' is invalid or already in use.
stringWithString:
%s%@
%c%c%@%c
[@@@spacing@@@]%@
%s flag supplied with no argument
unrecognized option '%s'
removeAllObjects
userInfo
code
[invalid usage]: %s
%s: %s
Usage: %s %s
[@@@spacing@@@]
stringByReplacingOccurrencesOfString:withString:
_purposeDescription
@"NSString"
_syntaxDescription
_discussionDescription
_optionDescriptions
@"NSMutableArray"
_optionBlockByString
@"NSMutableDictionary"
_longOptStructs
^{__CFArray=}
_shortOpts
@"NSMutableString"
_spacing
_singleHyphenLongNames
_parametersShowAsAssignment
registerOptionWithLongName:shortName:hasArgument:argumentName:optionDescription:handler:
v32@0:4@8c12i16@20@24@?28
parseArgumentsWithBlock:
@12@0:4@?8
v12@0:4@8
.cxx_destruct
purposeDescription
syntaxDescription
setSyntaxDescription:
discussion
setDiscussion:
singleHyphenLongNames
c8@0:4
setSingleHyphenLongNames:
v12@0:4c8
parametersShowAsAssignment
setParametersShowAsAssignment:
T@"NSString",C,N,V_purposeDescription
T@"NSString",C,N,V_syntaxDescription
T@"NSString",C,N,V_discussionDescription
Tc,N,V_singleHyphenLongNames
Tc,N,V_parametersShowAsAssignment
v12@?0@"NSString"4^@8
NSObject
DVT_VMUCallTreeRoot
VMUCallTreeRootWithBacktrace
_backtraceString
backtraceString
@8@0:4
setBacktraceString:
T@"NSString",C,N,V_backtraceString
v12@?0I4^c8
enumerateMembersOfGroupNode:withBlock:
inverted
-[DVT_VMUDirectedGraph(Extensions) isRootNode:]
/Library/Caches/com.apple.xbs/Sources/SamplingTools/SamplingTools-64246.2/leaks/leaks.m
self.inverted
v20@?0I4I8I12^c16
enumerateEdgesOfNode:withBlock:
Extensions
DVT_VMUDirectedGraph
isGroupNode:
c12@0:4I8
isRootNode:
launchd
coresymbolicationd
coreservicesd
UserEventAgent
rpc.lockd
launchservicesd
Activity Monitor
mdworker
spindump_agent
NSArray
arrayWithObjects:count:
mutableCopy
VMUOptionParser
Search through a process for leaked memory.
setPurposeDescription:
[-hq] [--nocontext] [--nostacks] [--outputGraph=<path>] [--fullContent] [--forkCorpse] [--trace=<address>] [--atExit] <pid | partial-process-name | memory-graph-file | -- process-and-arguments>
exclude
exclude leaked blocks whose backtraces include the specified symbol
NSMutableSet
addObject:
help
show this helpful usage message!
usage:
showTiming
DVT_VMUDebugTimer
sharedTimer
initialization
startWithMessage:
quiet
suppress the process description header and footer
list
print the leaks as a list ("classic"-style) rather than as a tree
groupByType
in leak trees, group children by type rather than showing individual instances
nocontext
do not print the binary contexts of discovered leaks
nostacks
do not print backtraces or save them in the memory graph file, even when available
fullStacks
print backtraces with one line per frame
nosources
do not show sourceFile:lineNumber in backtraces
rawNames
outputGraph
path
save a memory graph file into the given directory or file
stringByExpandingTildeInPath
/tmp
phys_footprint
physFootprint
compress
boolValue
fullContent
save allocation content descriptions into the memory graph file
excludePersonalInformation
nocontents
show the hex content of leaked allocations, if there is no description of content
systemTest
conservative
noScanOverlay
DT_NO_SCAN_OVERLAY
forkCorpse
generate a corpse fork from process and run leaks on it
getCorpseFromParent
get_corpse
atExit
Launches the specified process and runs leaks when the process exits.  The process to launch must be the end of the command, and proceeded by '--'
trace
address
print chains of references from process 'roots' (e.g., global data) to the given block
traceTree
print a reverse tree of references, from the given block up to the process roots; can be imported into Instruments with Import Sampler Data
VMUClassPatternMatcher
-traceTree
initWithPattern:forArgument:error:
referenceTree
virtual
debug
isEqualToString:
Modes of 'leaks <process> -debug'.  More than one different mode flag can be passed,
such as '-debug='.*Storage.*' -debug=references'.
    -debug            -- full output
    -debug=layout     -- full output, including object layout and values of ivars
    -debug=histogram  -- only show histogram of number of allocations having each reference count
    -debug=references -- only show references to the allocation (not content or layout), and only if reference count > 1
    -debug=contents   -- only show contents (reference from the allocation)
    -debug=<address>  -- only show the allocation at or containing <address>
    -debug=<classes-pattern>  -- show allocations whose class name matches pattern
    -debug=<region-description-pattern>  -- show non-malloc nodes (e.g. VM regions, threads) whose description matches pattern
    -debug=stacks     -- show stack backtraces for nodes
layout
histogram
references
contents
stacks
-debug
maxInteriorOffset
suppressOutput
blacklist
outputFile
unable to open output file "%s" for writing: %s (%d)
ipsIncidentID
copy
rateLimit
nonIPSMemgraphCount
vmalso
novm
vmonly
vmPageStatistics
checkAbandoned
postprocessGraph
unknown argument: %@
Ignoring -fullContent flag because -excludePersonalInfo was specified.
SAMPLING_TOOLS_TARGET_PID
NSString
stringWithCString:encoding:
no process specified
DVT_VMUProcessObjectGraph
directedGraphWithData:error:
setDebugTimer:
setShowRawClassNames:
stackLogReader
DVT_VMUTaskStackLogReader
initWithTask:symbolicator:
setExcludedFrames:
setScanner:
%s[%d]: Process %d is not debuggable.
Due to security restrictions, leaks cannot show memory contents of restricted processes.
setScanningMask:
-[scanner processSnapshotGraph]
processSnapshotGraphWithOptions:
DVT_VMUScanOverlay
defaultOverlay
refineTypesWithOverlay:
refineEdges:withOptions:markingInvalid:
removeMarkedEdges:
v8@?0^v4
withEdgeMarkingMap:
completed setup of scanner and/or graph, proceeding to leaks analysis mode
%s[%d]: [fatal] ignoring --outputGraph option as path provided would overwrite the source graph file
processName
stop
processDescriptionString
leaks Report Version: 3.0
leaks Report Version: 4.0
, multi-line stacks
binaryImagesDescription
v12@?0i4I8
intValue
DVT_VMUTaskMemoryScanner
initWithTask:options:
%s[%d]: [fatal] unable to instantiate a memory scanner.
addRootNodesFromTask
addMallocNodesFromTask
setExactScanningEnabled:
setAbandonedMarkingEnabled:
setMaxInteriorOffset:
%s[%d]: [fatal] target process no longer exists; abandoning...
archiving graph
plistRepresentationWithOptions:
NSMutableDictionary
NSNumber
numberWithUnsignedInteger:
length
setValue:forKey:
bug_type
memgraph
name
incidentID
NSJSONSerialization
dataWithJSONObject:options:error:
%s[%d]: [fatal] unable to write JSON header: %s
NSMutableData
dataWithData:
appendBytes:length:
appendData:
write graph to file
fileExistsAtPath:isDirectory:
%@[%d].XXXXXX.%@
stringByAppendingPathComponent:
fileSystemRepresentation
%s[%d]: [fatal] unable to create file "%s" for memory graph: %d %s
stringWithUTF8String:
NSFileHandle
initWithFileDescriptor:closeOnDealloc:
writeData:
closeFile
pathExtension
stringByAppendingPathExtension:
writeToFile:options:error:
%s[%d]: [fatal] unable to write graph to output file "%s": %s
%@_%@
LogType
Output graph successfully written to '%s' [%3.2f MB]
stringByStandardizingPath
memgraph.%@
Will not upload memgraph. rate limits: global=%lf proc=%lf. rand=%lf
memgraph.CountLimit
memgraph.%@.CountLimit
Will not take memgraph, because the limit of %.0lf graphs has been reached
%@.t
%@.signal
%@.exponent
%@.numerator
%@.coef_denominator
com.apple.da
mobile
numberWithDouble:
NSScanner
scannerWithString:
scanDouble:
isAtEnd
invertedGraph
NSMapTable
mapTableWithKeyOptions:valueOptions:
nodeNamespaceSize
zoneNameForIndex:
usesLiteMode
nodeDetails:
nodeDescription:
matchesNodeDetails:orNodeDescription:
v48@?0I4I8I12{?=^{?}{?=QIQ}^{?}}16^c44
enumerateReferencesOfNode:withBlock:
SCANNING %s
symbolicatedBacktraceForNode:nodeDetails:isLiteZone:options:
Call stack: %s
REFERENCES TO THIS: %u
   STRONG: %u  CONSERVATIVE: %u  WEAK UU etc: %u
   SELF: %u
referenceInfoWithName:
nodeDescription:withDestinationNode:referenceInfo:
  SELF-REF
stringByAppendingString:
   %s
instanceSize
pointerSize
contentForNode:
LAYOUT OF %s (%s)
typeName
offset
%llu bytes into 
--> %@%@
bitfieldWidth
descriptionOfFieldValueInObjectMemory:scanner:
size
getLeafFieldAtOffset:leafOffset:
stride
scanType
infoType
fullIvarNameAtOffset:
typedDescription
%5u: %s%s%s  %s
v16@?0@"DVT_VMUFieldInfo"4I8^c12
enumerateTypeFieldsWithBlock:
v8@?0@"DVT_VMUClassInfo"4
enumerateClassHierarchyWithBlock:
%5u: <extra space>[%llu]
CONTENTS:
referenceDescription:withSourceNode:destinationNode:alignmentSpacing:
%u POINTERS FROM %s
v12@?0@"DVT_VMUVMRegion"4^c8
enumerateRegionsWithBlock:
count
i12@?0r^v4r^v8
NODE COUNT:  %u   OWNING-REFS COUNT: %u   AVERAGE OWNING-REFS PER NODE: %.2f
    %10u %s references
SELF-REFERENCES:  %u
%26lu   %8lu
   leaked blocks and VM regions
   %s
MallocStackLoggingLite
v32@?0I4{?=Qb60b4@}8^c28
enumerateObjectsWithBlock:
invertEdges
%s[%d]: [fatal] address provided for reference tracing (%#llx) not found in target process's heap
Tracing: %s
C12@?0I4C8
c20@?0I4I8I12*16
breadthFirstSearch:nodeVisitBlock:edgeVisitBlock:
initWithSymbolicator:sampler:options:
NSMutableString
string
addChildWithName:address:count:numBytes:toNode:
Found %u root%s referencing: %s
This is a reverse reference tree showing how the specified block is referenced.
The top node is the specified block, the next level down are blocks that reference that, and so on.
The number at the start of each line is the number of paths-to-roots going through that node.
This reverse reference tree can be imported into Instruments using Import Sample Data to allow data mining.
invertedNode
stringFromCallTreeIndentIfNoBranches:
withNodeMarkingMap:
printReferenceTree identifying root regions
vmuVMRegionForNode:
printReferenceTree building call tree from references
isSubmap
type
__DATA
lastPathComponent
%@ %@
Stack
Stack of %@
void printReferenceTree(DVT_VMUProcessObjectGraph *__strong)
<Unknown Function>
<Unknown File>
currentHandler
Malloc blocks should not be root nodes of reference graph
handleFailureInFunction:file:lineNumber:description:
DVT_VMURangeArray
init
binarySectionRangeContainingAddress:
binarySectionNameForAddress:
__DATA __objc
regionSymbolRangeContainingAddress:
addRange:
sort
addUniqueChildWithName:address:count:numBytes:toNode:
rangeForLocation:
regionSymbolNameForAddress:
%@ %@: '%@[]'
is64bit
%@  dirty: %s  swapped: %s
%@  purgableVolatile: %s
printReferenceTree addChildCountsIntoNode
addChildCountsIntoNode
printReferenceTree printing call tree
printCallTreeToFile:
printReferenceTree releasing tree
displayName
malloc<%s>
malloc-block
VM: %@
unaligned +%lld:  --> %@
Storage)
fieldAtOrBeforeOffset:
ivarName
 + %llu
%@%@%s --> %@
%s: %#llx  size=%llu  
VM: unknown region type
descriptionWithOptions:maximumLength:
zone: %s
   %s  %s  %s
binaryName
  %s
v40@?0r*4I8{?=Qb60b4@}12@"DVT_VMUVMRegion"32^c36
%s[%d]: [fatal] unable to inspect heap ranges of target process; it may be using a malloc replacement library without the required support
Process %d: %u nodes malloced for %llu KB
scan for leaks
copyUserMarked
markReachableNodesFromRoots:inMap:showLeakedVMregions:
enumerateMarkedObjects:withBlock:
Process %d: %u leak%s for %llu total leaked bytes.
Process %d: %u object%s abandoned for %llu total abandoned bytes.
Leak
Abandoned
v36@?0I4{?=Qb60b4@}8@"DVT_VMUVMRegion"28^c32
subgraphWithMarkedNodes:
%u leak%s excluded (not printed)
shortLabelForNode:
labelForNode:
  %@
0x%08x 
< content unavailable >
printLeakTree identifying strongly-connected-components (cycles) in the graph
addGroupNodeForNodes:count:
v12@?0r^I4I8
stronglyConnectedComponentSearch:withRecorder:
printLeakTree identifying root leaks and cycles
inspectingLiveProcess
zoneCount
Foundation
CoreFoundation
containsObject:
liteModeStackIDforAddress:size:
printLeakTree enumerate stack logs to populate rootLeakAddressToStackIDMap
v32@?0I4Q8Q16Q24
enumerateRecords:
NSMutableArray
printLeakTree invert rootLeakAddressToStackIDMap to produce stackID --> {size,count,root-leak-call-tree-root} map
symbolicatedBacktraceForStackID:isLiteZone:options:
ROOT LEAK: 
printLeakTree building call tree from references
parentGroupForNode:
parent
unsigned int printLeakTree(DVT_VMUProcessObjectGraph *__strong, DVT_VMUTaskMemoryScanner *__strong, __strong id<VMUStackLogReader>)_block_invoke
Expected node name to have 'ROOT CYCLE' prefix
substringFromIndex:
CYCLE BACK TO 
numChildren
printLeakTree addChildCountsIntoNode
countByEnumeratingWithState:objects:count:
comparePuttingRetainCycleNodesAtTop:
sortUsingSelector:
printLeakTree printing call tree
NSRegularExpression
(ROOT LEAK|CYCLE): <*(VM: \w+|\w+).*
regularExpressionWithPattern:options:error:
sortedChildren
$1: <$2>
stringByReplacingMatchesInString:options:range:withTemplate:
sumOfChildCounts
objectForKeyedSubscript:
unsignedIntValue
numberWithUnsignedInt:
setObject:forKeyedSubscript:
i12@?0@4@8
compare:
keysSortedByValueUsingComparator:
lastObject
STACK OF 
INSTANCES
INSTANCE
%u %s OF '%s'
NO STACK
====
printCallTreeToFile:options:
printLeakTree releasing tree
nodeDescription:withOffset:showLabel:
%@  %@
%5d: [%s]
v24@?0i4r*8B12I16I20
COUNT OF OWNING REFERENCES   NUMBER OF NODES WITH THAT COUNT
MbP?
@(#)PROGRAM:leaks  PROJECT:SamplingTools-64246.2
ffff
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>18A348</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.SamplingTools.leaks32</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>MacOSX</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>10A242</string>
<key>DTPlatformVersion</key>
<string>GM</string>
<key>DTSDKBuild</key>
<string>18A350</string>
<key>DTSDKName</key>
<string>macosx10.14internal</string>
<key>DTXcode</key>
<string>1000</string>
<key>DTXcodeBuild</key>
<string>10A242</string>
<key>SecTaskAccess</key>
<array>
<string>allowed</string>
<string>safe</string>
</array>
</dict>
</plist>
