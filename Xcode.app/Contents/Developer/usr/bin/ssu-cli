@(#)PROGRAM:ssu-cli  PROJECT:SiriSSUKit-1
NSFileHandle
ssu_cli
OutputBuffer
StringBuffer
ValidateOptionGroup
CodingKeys
BProgressBar
SSUCLI
Test
Build
Validate
CodingKeys
Build
Validate
CodingKeys
BuildOptionGroup
CodingKeys
NLTeamLogger
TestOptionGroup
CodingKeys
Archive
CodingKeys
parse locale
LocaleOptionGroup
CodingKeys
StandardOptionGroup
CodingKeys
RunOptionGroup
CodingKeys
ExpressibleByArgument
ParsableArguments
ArgumentSetProvider
StandardError
_WrappedParsableCommand
CodingKeys
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
libArgumentParser
ArgumentVisibility
Representation
help
HelpCommand
CodingKeys
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
ArrayWrapper
UnkeyedContainer
SingleValueContainer
Error
OptionGroup
Flag
FlagInversion
FlagExclusivity
Representation
Option
SingleValueParsingStrategy
ArrayParsingStrategy
ArgumentSet
ArgumentHelpOptionProvider
ArgumentDefinition
ParsingStrategy
Update
Help
Kind
Options
CompletionShell
ParsableCommand
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
Element
HelpGenerator
Section
DiscussionSection
Header
ToolInfoHeader
ToolInfoV0
CommandInfoV0
ArgumentInfoV0
NameInfoV0
KindV0
CodingKeys
InputIndex
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
ParsedValues
Element
InputKey
Tree
InitializationError
MessageInfo
ValidationError
ExitCode
CleanExit
Representation
InputOrigin
Element
NameSpecification
Element
Representation
version
AsyncParsableCommand
AsyncMainProtocol
Command
CommandConfiguration
Argument
ArgumentArrayParsingStrategy
ArgumentHelp
Name
ParserError
InternalParseError
CompletionKind
Kind
initWithString:
currentDirectoryPath
fileHandleWithNullDevice
fileHandleWithStandardError
fileHandleWithStandardOutput
init
stringByExpandingTildeInPath
writeData:
$s7ssu_cli12OutputBufferP
ySSG
ySbG
_pXpG
_p_G
Scsy
SaySSG
ySSG
ySaySSGG
ySSSgG
$s17libArgumentParser013ExpressibleByB0P
ySSG
yypG
$s17libArgumentParser17ParsableArgumentsP
$s17libArgumentParser0B11SetProviderP
SSSg5label_yp5valuet
_pSg
ypSg
SSypSgIeggr_
S2SSgIeggr_
$s17libArgumentParser22DecodableParsedWrapperP
5Value
ySaySSGG
SaySSGSg
$s17libArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
SayypG
yypG
_pXpGG
SaySSG_SSt
ySaySSG_SStG
_pXp_AA_pXpt
SayxG
$s17libArgumentParser13ParsedWrapperP
SbSg
Sbz_Xx
qd__
Sayqd__GSg
SSqd__
_pIeggrzo_
Sayqd__G
_pIeggrzo_
qd__XMT
$sST
SnySiG
$sSl
$sSK
$sSk
SSxSgIeggr_
xXMT
ySiG
_SStSg
$s17libArgumentParser0B18HelpOptionProviderP
ztKc
ztKc
SgSS
ztKc
$ss10SetAlgebraP
$ss9OptionSetP
$ss12CaseIterableP
$s17libArgumentParser15ParsableCommandP
_SitG
_Sit
_pXpG
ySsG
_SStG
_SSt
ySi_
_pXmTSg
_pSg
SSXMT
ySnySiGG
SaySsG
ySSSgG
yAAyABySaySSSgGACGGSSGG
yAAySaySSSgGACGGSSG
ySaySSSgGACGG
ySaySSSgGABG
SaySSSgG
ySay
GSSG
_SSt
_pXpGADG
yxGSgXw
yxGG
_pXpGACG
_pXpGACSgIegnr_
_pXpGG
yyXlG
_ypt
_pXp
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
$sSY
$ss25ExpressibleByArrayLiteralP
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
Sb8inserted_
17memberAfterInsertt
_pSg
$s17libArgumentParser20AsyncParsableCommandP
$s17libArgumentParser17AsyncMainProtocolP
7Command
_pXpG
_pXpSg
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SSSg
10visibility_t
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
SaySSG10extensions_t
SaySSGAAc
_TtC7ssu_cli12StringBuffer
string
Root Siri SSUKit YAML file.
If specified, no warnings are generated or contribute to the exit code.
Siri Self Service Understanding CLI
Natural Language Understanding Siri Subsystem
Validates the entity model of NLU.
Builds the custom NLU model, simulating the training/building on-device.
Run inference on an utterance.
Loads the NLU built model and executes locale-specific test cases from the entity model.
Not implemented yet
The utterance we need to run inference over.
Holds sub commands for all the subsystems together in order to run, test or archive SSU artifacts into the app bundle.
validates the entire entity model. Same as calling ssu-cli asr validate && ssu-cli nlu validate
builds all the models. Same as calling ssu-cli asr build && ssu-cli nlu build
SSU SDK assets location.
Specify build/cache directory. [default: ./.build]
localeOptionGroup
_TtC7ssu_cli12NLTeamLogger
nslog
Archives the SSU artifacts and exports them into the app bundle.
Could not parse 
Specify the output directory we should archive to (derived data, app bundle resource Metadata.appintents directory)
 isn't a valid locale.
list of locales that should be used. Optional, if this is none specified all locales in the ssu entity model will be used.
If specified, no output is generated. The exit code indicates success or failure.
Override the working directory with another directory path
workingDirectory
The locale to use for this operation.
positional
option
flag
long
short
longWithSingleDash
libArgumentParser/UsageGenerator.swift
preferredName cannot be nil for named arguments
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
. Please provide one of the following:
. Please provide one of 
libArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
Show subcommand help information.
function _swift_
_using_command
    set -l cmd (commandline -opc)
    if [ (count $cmd) -eq (count $argv) ]
        for i in (seq (count $argv))
            if [ $cmd[$i] != $argv[$i] ]
                return 1
            end
        end
        return 0
    end
    return 1
-f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-f -a '(__fish_complete_directories)'
-f -a '(for i in 
_TtC17libArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
libArgumentParser/ArgumentDecoder.swift
libArgumentParser/OptionGroup.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
OptionGroup(*definition*)
libArgumentParser/Flag.swift
Flag(*definition*)
offset element 
libArgumentParser/Option.swift
Option(*definition*)
SHELL
libArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
Fatal error
Down-casted Array element failed to match the target type
Expected 
Tree<ParsableCommand.Type>
NSArray element failed to match the Swift Array Element type
Expected 
libArgumentParser/Argument.swift
experimental-dump-help
libArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
 <subcommand>' for detailed help.
libArgumentParser/HelpGenerator.swift
serializationVersion
defaultSubcommand
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$("${COMP_WORDS[0]}" 
 "${COMP_WORDS[@]}")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
$("${COMP_WORDS[0]}" ---completion 
 "${COMP_WORDS[@]}")
element
parent
children
' for more information.
Unspecified version
--experimental-dump-help
libArgumentParser/NameSpecification.swift
' has not characters to form short option name.
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Show the version.
Show help information.
Argument(*definition*)
future reported an error, but wait cannot throw
swift_task_escalate
_Z19voucher_needs_adoptP9voucher_s
__tsan_acquire
__tsan_release
swift_task_enterThreadLocalContext
swift_task_exitThreadLocalContext
string
_standardOptions
_filename
_errors
standardOptions
filename
errors
width
output
_commonOptions
_input
commonOptions
input
_commonOptions
commonOptions
_standardOptions
_localeOptionGroup
_sdkPath
_file
_buildPath
standardOptions
localeOptionGroup
sdkPath
file
buildPath
nslog
_standardOptions
_localeOptionGroup
_sdkPath
_buildPath
_filename
standardOptions
localeOptionGroup
sdkPath
buildPath
filename
_standardOptions
_localeOptionGroup
_output
_filename
standardOptions
localeOptionGroup
output
filename
_locale
locale
_quiet
_workingDirectory
quiet
workingDirectory
_standardOptions
_locale
_sdkPath
_buildPath
standardOptions
locale
sdkPath
buildPath
_options
options
value
definition
base
default
hidden
private
_subcommands
_help
commandStack
visibility
subcommands
help
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
Value
_parsedValue
_visibility
_dummy
Value
_parsedValue
base
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
Value
_parsedValue
base
Element
Iterator
Index
SubSequence
Indices
content
namePositions
default
scanningForValue
unconditional
upToNextOption
allRemainingInput
kind
help
completion
parsingStrategy
update
initial
options
abstract
discussion
valueName
visibility
defaultValue
keys
allValues
isComposite
nullary
unary
named
positional
rawValue
ArrayLiteralElement
Element
RawValue
RawValue
AllCases
rawValue
commandStack
parserError
visibility
_generateCompletionScript
generateCompletionScript
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
positionalArguments
subcommands
options
title
content
RawValue
serializationVersion
command
superCommands
commandName
abstract
discussion
defaultSubcommand
subcommands
arguments
kind
shouldDisplay
isOptional
isRepeating
names
preferredName
valueName
defaultValue
allValues
name
long
short
longWithSingleDash
positional
option
flag
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
rawValue
RawValue
element
parent
children
recursiveSubcommand
help
validation
other
RawValue
message
rawValue
base
helpRequest
dumpRequest
_elements
ArrayLiteralElement
argumentIndex
defaultValue
ArrayLiteralElement
elements
base
customLong
customShort
long
short
commandName
_superCommandName
abstract
usage
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
Value
_parsedValue
base
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
visibility
long
short
longWithSingleDash
helpRequested
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
versionRequested
dumpHelpRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
kind
list
file
shellCommand
custom
default
directory
bash
fish
@(#)PROGRAM:ssu-cli  PROJECT:SiriSSUKit-1
NSFileHandle
ssu_cli
OutputBuffer
StringBuffer
ValidateOptionGroup
CodingKeys
ProgressBar
SSUCLI
Test
Build
Validate
CodingKeys
Build
Validate
CodingKeys
BuildOptionGroup
CodingKeys
NLTeamLogger
TestOptionGroup
CodingKeys
Archive
CodingKeys
parse locale
#(-27<AFKQV[`flrw|
#(-27<AFKQV[`flrw|
LocaleOptionGroup
CodingKeys
StandardOptionGroup
CodingKeys
RunOptionGroup
CodingKeys
ExpressibleByArgument
ParsableArguments
ArgumentSetProvider
StandardError
_WrappedParsableCommand
CodingKeys
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
libArgumentParser
ArgumentVisibility
Representation
help
HelpCommand
CodingKeys
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
ArrayWrapper
UnkeyedContainer
SingleValueContainer
Error
OptionGroup
Flag
FlagInversion
FlagExclusivity
Representation
Option
SingleValueParsingStrategy
ArrayParsingStrategy
ArgumentSet
ArgumentHelpOptionProvider
ArgumentDefinition
ParsingStrategy
Update
Help
Kind
Options
CompletionShell
ParsableCommand
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
Element
HelpGenerator
Section
DiscussionSection
Header
&-D5;
ToolInfoHeader
ToolInfoV0
CommandInfoV0
ArgumentInfoV0
NameInfoV0
KindV0
CodingKeys
InputIndex
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
ParsedValues
Element
InputKey
r/Ih
Tree
InitializationError
MessageInfo
ValidationError
ExitCode
CleanExit
Representation
InputOrigin
Element
NameSpecification
Element
Representation
version
AsyncParsableCommand
AsyncMainProtocol
Command
CommandConfiguration
Argument
ArgumentArrayParsingStrategy
ArgumentHelp
Name
ParserError
InternalParseError
CompletionKind
Kind
initWithString:
currentDirectoryPath
fileHandleWithNullDevice
fileHandleWithStandardError
fileHandleWithStandardOutput
init
stringByExpandingTildeInPath
writeData:
$s7ssu_cli12OutputBufferP
ySSG
ySbG
_pXpG
_p_G
Scsy
SaySSG
ySSG
ySaySSGG
ySSSgG
$s17libArgumentParser013ExpressibleByB0P
ySSG
yypG
$s17libArgumentParser17ParsableArgumentsP
$s17libArgumentParser0B11SetProviderP
SSSg5label_yp5valuet
_pSg
ypSg
SSypSgIeggr_
S2SSgIeggr_
$s17libArgumentParser22DecodableParsedWrapperP
5Value
ySaySSGG
SaySSGSg
$s17libArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
SayypG
yypG
_pXpGG
SaySSG_SSt
ySaySSG_SStG
_pXp_AA_pXpt
SayxG
$s17libArgumentParser13ParsedWrapperP
SbSg
Sbz_Xx
qd__
Sayqd__GSg
SSqd__
_pIeggrzo_
Sayqd__G
_pIeggrzo_
qd__XMT
$sST
SnySiG
$sSl
$sSK
$sSk
SSxSgIeggr_
xXMT
ySiG
_SStSg
$s17libArgumentParser0B18HelpOptionProviderP
ztKc
ztKc
SgSS
ztKc
$ss10SetAlgebraP
$ss9OptionSetP
$ss12CaseIterableP
$s17libArgumentParser15ParsableCommandP
_SitG
_Sit
_pXpG
ySsG
_SStG
_SSt
ySi_
_pXmTSg
_pSg
SSXMT
ySnySiGG
SaySsG
ySSSgG
yAAyABySaySSSgGACGGSSGG
yAAySaySSSgGACGGSSG
ySaySSSgGACGG
ySaySSSgGABG
SaySSSgG
ySay
GSSG
_SSt
_pXpGADG
yxGSgXw
yxGG
_pXpGACG
_pXpGACSgIegnr_
_pXpGG
yyXlG
_ypt
_pXp
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
$sSY
$ss25ExpressibleByArrayLiteralP
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
Sb8inserted_
17memberAfterInsertt
_pSg
$s17libArgumentParser20AsyncParsableCommandP
$s17libArgumentParser17AsyncMainProtocolP
7Command
_pXpG
_pXpSg
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SSSg
10visibility_t
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
SaySSG10extensions_t
SaySSGAAc
_TtC7ssu_cli12StringBuffer
string
Root Siri SSUKit YAML file.
If specified, no warnings are generated or contribute to the exit code.
Siri Self Service Understanding CLI
Natural Language Understanding Siri Subsystem
Validates the entity model of NLU.
Builds the custom NLU model, simulating the training/building on-device.
Run inference on an utterance.
Loads the NLU built model and executes locale-specific test cases from the entity model.
Not implemented yet
The utterance we need to run inference over.
Holds sub commands for all the subsystems together in order to run, test or archive SSU artifacts into the app bundle.
validates the entire entity model. Same as calling ssu-cli asr validate && ssu-cli nlu validate
builds all the models. Same as calling ssu-cli asr build && ssu-cli nlu build
SSU SDK assets location.
Specify build/cache directory. [default: ./.build]
localeOptionGroup
_TtC7ssu_cli12NLTeamLogger
nslog
Archives the SSU artifacts and exports them into the app bundle.
Could not parse 
Specify the output directory we should archive to (derived data, app bundle resource Metadata.appintents directory)
 isn't a valid locale.
list of locales that should be used. Optional, if this is none specified all locales in the ssu entity model will be used.
If specified, no output is generated. The exit code indicates success or failure.
Override the working directory with another directory path
workingDirectory
The locale to use for this operation.
positional
option
flag
long
short
longWithSingleDash
libArgumentParser/UsageGenerator.swift
preferredName cannot be nil for named arguments
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
. Please provide one of the following:
. Please provide one of 
libArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
Show subcommand help information.
function _swift_
_using_command
    set -l cmd (commandline -opc)
    if [ (count $cmd) -eq (count $argv) ]
        for i in (seq (count $argv))
            if [ $cmd[$i] != $argv[$i] ]
                return 1
            end
        end
        return 0
    end
    return 1
-f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-f -a '(__fish_complete_directories)'
-f -a '(for i in 
_TtC17libArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
libArgumentParser/ArgumentDecoder.swift
libArgumentParser/OptionGroup.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
OptionGroup(*definition*)
libArgumentParser/Flag.swift
Flag(*definition*)
offset element 
libArgumentParser/Option.swift
Option(*definition*)
SHELL
libArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
Fatal error
Down-casted Array element failed to match the target type
Expected 
Tree<ParsableCommand.Type>
NSArray element failed to match the Swift Array Element type
Expected 
libArgumentParser/Argument.swift
experimental-dump-help
libArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
 <subcommand>' for detailed help.
libArgumentParser/HelpGenerator.swift
serializationVersion
defaultSubcommand
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$("${COMP_WORDS[0]}" 
 "${COMP_WORDS[@]}")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
$("${COMP_WORDS[0]}" ---completion 
 "${COMP_WORDS[@]}")
element
parent
children
' for more information.
Unspecified version
--experimental-dump-help
libArgumentParser/NameSpecification.swift
' has not characters to form short option name.
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Show the version.
Show help information.
Argument(*definition*)
future reported an error, but wait cannot throw
swift_task_escalate
_Z19voucher_needs_adoptP9voucher_s
__tsan_acquire
__tsan_release
swift_task_enterThreadLocalContext
swift_task_exitThreadLocalContext
string
_standardOptions
_filename
_errors
standardOptions
filename
errors
width
output
_commonOptions
_input
commonOptions
input
_commonOptions
commonOptions
_standardOptions
_localeOptionGroup
_sdkPath
_file
_buildPath
standardOptions
localeOptionGroup
sdkPath
file
buildPath
nslog
_standardOptions
_localeOptionGroup
_sdkPath
_buildPath
_filename
standardOptions
localeOptionGroup
sdkPath
buildPath
filename
_standardOptions
_localeOptionGroup
_output
_filename
standardOptions
localeOptionGroup
output
filename
_locale
locale
_quiet
_workingDirectory
quiet
workingDirectory
_standardOptions
_locale
_sdkPath
_buildPath
standardOptions
locale
sdkPath
buildPath
_options
options
value
definition
base
default
hidden
private
_subcommands
_help
commandStack
visibility
subcommands
help
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
Value
_parsedValue
_visibility
_dummy
Value
_parsedValue
base
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
Value
_parsedValue
base
Element
Iterator
Index
SubSequence
Indices
content
namePositions
default
scanningForValue
unconditional
upToNextOption
allRemainingInput
kind
help
completion
parsingStrategy
update
initial
options
abstract
discussion
valueName
visibility
defaultValue
keys
allValues
isComposite
nullary
unary
named
positional
rawValue
ArrayLiteralElement
Element
RawValue
RawValue
AllCases
rawValue
commandStack
parserError
visibility
_generateCompletionScript
generateCompletionScript
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
positionalArguments
subcommands
options
title
content
RawValue
serializationVersion
command
superCommands
commandName
abstract
discussion
defaultSubcommand
subcommands
arguments
kind
shouldDisplay
isOptional
isRepeating
names
preferredName
valueName
defaultValue
allValues
name
long
short
longWithSingleDash
positional
option
flag
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
rawValue
RawValue
element
parent
children
recursiveSubcommand
help
validation
other
RawValue
message
rawValue
base
helpRequest
dumpRequest
_elements
ArrayLiteralElement
argumentIndex
defaultValue
ArrayLiteralElement
elements
base
customLong
customShort
long
short
commandName
_superCommandName
abstract
usage
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
Value
_parsedValue
base
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
visibility
long
short
longWithSingleDash
helpRequested
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
versionRequested
dumpHelpRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
kind
list
file
shellCommand
custom
default
directory
bash
fish
