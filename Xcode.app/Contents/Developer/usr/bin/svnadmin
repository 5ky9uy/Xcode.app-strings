svnadmin
svnadmin: 
Multiple revision arguments encountered; try '-r N:M' instead of '-r N -r M'
Syntax error in revision argument '%s'
Cannot create pre-1.0-compatible repositories
Cannot guarantee compatibility beyond the current running version (%s)
1.9.4
help
--version
subcommand argument required
Unknown subcommand: '%s'
Repository argument required
'%s' is a URL when it should be a local path
Subcommand '%s' doesn't accept option '%s'
Type 'svnadmin help %s' for usage.
Try 'svnadmin help' for more info
svn_subr
svn_repos
svn_fs
svn_delta
general usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS & OPTIONS ...]
Subversion repository administration tool.
Type 'svnadmin help <subcommand>' for help on a specific subcommand.
Type 'svnadmin --version' to see the program version and FS modules.
Available subcommands:
The following repository back-end (FS) modules are available:
show help on a subcommand
version
show program version information
revision
specify revision number ARG (or X:Y range)
transaction
specify transaction name ARG
incremental
dump or hotcopy incrementally
deltas
use deltas in dump output
bypass-hooks
bypass the repository hook system
bypass-prop-validation
bypass property validation logic
ignore-dates
ignore revision datestamps found in the stream
quiet
no progress (only errors to stderr)
ignore-uuid
ignore any repos UUID found in the stream
force-uuid
set repos UUID to that found in stream, if any
fs-type
type of repository:
                             'fsfs' (default), 'bdb' or 'fsx'
                             CAUTION: FSX is for EXPERIMENTAL use only!
parent-dir
load at specified directory in repository
bdb-txn-nosync
disable fsync at transaction commit [Berkeley DB]
bdb-log-keep
disable automatic log file removal [Berkeley DB]
config-dir
read user configuration files from directory ARG
clean-logs
remove redundant Berkeley DB log files
                             from source repository [Berkeley DB]
use-pre-commit-hook
call pre-commit hook before committing revisions
use-post-commit-hook
call post-commit hook after committing revisions
use-pre-revprop-change-hook
call hook before changing revision property
use-post-revprop-change-hook
call hook after changing revision property
wait
wait instead of exit if the repository is in
                             use by another process
pre-1.4-compatible
deprecated; see --compatible-version
pre-1.5-compatible
pre-1.6-compatible
keep-going
continue verification after detecting a corruption
memory-cache-size
size of the extra in-memory cache in MB used to
                             minimize redundant operations. Default: 16.
                             [used for FSFS repositories only]
compatible-version
use repository format compatible with Subversion
                             version ARG ("1.5.5", "1.7", etc.)
file
read repository paths from file ARG
check-normalization
report any names within the same directory or
                             svn:mergeinfo property value that differ only
                             in character representation, but are otherwise
                             identical
metadata-only
verify metadata only (ignored for BDB),
                             checking against external corruption in
                             Subversion 1.9+ format repositories.
crashtest
usage: svnadmin crashtest REPOS_PATH
Open the repository at REPOS_PATH, then abort, thus simulating
a process that crashes while holding an open repository handle.
create
usage: svnadmin create REPOS_PATH
Create a new, empty repository at REPOS_PATH.
delrevprop
usage: 1. svnadmin delrevprop REPOS_PATH -r REVISION NAME
                   2. svnadmin delrevprop REPO_PATH -t TXN NAME
1. Delete the property NAME on revision REVISION.
Use --use-pre-revprop-change-hook/--use-post-revprop-change-hook to
trigger the revision property-related hooks (for example, if you want
an email notification sent from your post-revprop-change hook).
NOTE: Revision properties are not versioned, so this command will
irreversibly destroy the previous value of the property.
2. Delete the property NAME on transaction TXN.
deltify
usage: svnadmin deltify [-r LOWER[:UPPER]] REPOS_PATH
Run over the requested revision range, performing predecessor delti-
fication on the paths changed in those revisions.  Deltification in
essence compresses the repository by only storing the differences or
delta from the preceding revision.  If no revisions are specified,
this will simply deltify the HEAD revision.
dump
usage: svnadmin dump REPOS_PATH [-r LOWER[:UPPER] [--incremental]]
Dump the contents of filesystem to stdout in a 'dumpfile'
portable format, sending feedback to stderr.  Dump revisions
LOWER rev through UPPER rev.  If no revisions are given, dump all
revision trees.  If only LOWER is given, dump that one revision tree.
If --incremental is passed, the first revision dumped will describe
only the paths changed in that revision; otherwise it will describe
every path present in the repository as of that revision.  (In either
case, the second and subsequent revisions, if any, describe only paths
changed in those revisions.)
freeze
usage: 1. svnadmin freeze REPOS_PATH PROGRAM [ARG...]
               2. svnadmin freeze -F FILE PROGRAM [ARG...]
1. Run PROGRAM passing ARGS while holding a write-lock on REPOS_PATH.
2. Like 1 except all repositories listed in FILE are locked. The file
   format is repository paths separated by newlines.  Repositories are
   locked in the same order as they are listed in the file.
usage: svnadmin help [SUBCOMMAND...]
Describe the usage of this program or its subcommands.
hotcopy
usage: svnadmin hotcopy REPOS_PATH NEW_REPOS_PATH
Make a hot copy of a repository.
If --incremental is passed, data which already exists at the destination
is not copied again.  Incremental mode is implemented for FSFS repositories.
info
usage: svnadmin info REPOS_PATH
Print information about the repository at REPOS_PATH.
list-dblogs
usage: svnadmin list-dblogs REPOS_PATH
List all Berkeley DB log files.
WARNING: Modifying or deleting logfiles which are still in use
will cause your repository to be corrupted.
list-unused-dblogs
usage: svnadmin list-unused-dblogs REPOS_PATH
List unused Berkeley DB log files.
load
usage: svnadmin load REPOS_PATH
Read a 'dumpfile'-formatted stream from stdin, committing
new revisions into the repository's filesystem.  If the repository
was previously empty, its UUID will, by default, be changed to the
one specified in the stream.  Progress feedback is sent to stdout.
If --revision is specified, limit the loaded revisions to only those
in the dump stream whose revision numbers match the specified range.
lock
usage: svnadmin lock REPOS_PATH PATH USERNAME COMMENT-FILE [TOKEN]
Lock PATH by USERNAME setting comments from COMMENT-FILE.
If provided, use TOKEN as lock token.  Use --bypass-hooks to avoid
triggering the pre-lock and post-lock hook scripts.
lslocks
usage: svnadmin lslocks REPOS_PATH [PATH-IN-REPOS]
Print descriptions of all locks on or under PATH-IN-REPOS (which,
if not provided, is the root of the repository).
lstxns
usage: svnadmin lstxns REPOS_PATH
Print the names of all uncommitted transactions.
pack
usage: svnadmin pack REPOS_PATH
Possibly compact the repository into a more efficient storage model.
This may not apply to all repositories, in which case, exit.
recover
usage: svnadmin recover REPOS_PATH
Run the recovery procedure on a repository.  Do this if you've
been getting errors indicating that recovery ought to be run.
Berkeley DB recovery requires exclusive access and will
exit if the repository is in use by another process.
rmlocks
usage: svnadmin rmlocks REPOS_PATH LOCKED_PATH...
Unconditionally remove lock from each LOCKED_PATH.
rmtxns
usage: svnadmin rmtxns REPOS_PATH TXN_NAME...
Delete the named transaction(s).
setlog
usage: svnadmin setlog REPOS_PATH -r REVISION FILE
Set the log-message on revision REVISION to the contents of FILE.  Use
--bypass-hooks to avoid triggering the revision-property-related hooks
(for example, if you do not want an email notification sent
from your post-revprop-change hook, or because the modification of
revision properties has not been enabled in the pre-revprop-change
hook).
NOTE: Revision properties are not versioned, so this command will
overwrite the previous log message.
setrevprop
usage: 1. svnadmin setrevprop REPOS_PATH -r REVISION NAME FILE
                   2. svnadmin setrevprop REPOS_PATH -t TXN NAME FILE
1. Set the property NAME on revision REVISION to the contents of FILE.
Use --use-pre-revprop-change-hook/--use-post-revprop-change-hook to
trigger the revision property-related hooks (for example, if you want
an email notification sent from your post-revprop-change hook).
NOTE: Revision properties are not versioned, so this command will
overwrite the previous value of the property.
2. Set the property NAME on transaction TXN to the contents of FILE.
setuuid
usage: svnadmin setuuid REPOS_PATH [NEW_UUID]
Reset the repository UUID for the repository located at REPOS_PATH.  If
NEW_UUID is provided, use that as the new repository UUID; otherwise,
generate a brand new UUID for the repository.
unlock
usage: svnadmin unlock REPOS_PATH LOCKED_PATH USERNAME TOKEN
Unlock LOCKED_PATH (as USERNAME) after verifying that the token
associated with the lock matches TOKEN.  Use --bypass-hooks to avoid
triggering the pre-unlock and post-unlock hook scripts.
upgrade
usage: svnadmin upgrade REPOS_PATH
Upgrade the repository located at REPOS_PATH to the latest supported
schema version.
This functionality is provided as a convenience for repository
administrators who wish to make use of new Subversion functionality
without having to undertake a potentially costly full repository dump
and load operation.  As such, the upgrade performs only the minimum
amount of work needed to accomplish this while still maintaining the
integrity of the repository.  It does not guarantee the most optimized
repository state as a dump and subsequent load would.
verify
usage: svnadmin verify REPOS_PATH
Verify the data stored in the repository.
Successfully opened repository '%s'.
Will now crash to simulate a crashing server process.
/Library/Caches/com.apple.xbs/Sources/subversion/subversion-71/subversion/subversion/svnadmin/svnadmin.c
fsfs-cache-deltas
fsfs-cache-fulltexts
fsfs-cache-revprops
fsfs-cache-namespace
fsfs-block-read
bdb-log-autoremove
%swarning: The "%s" repository back-end is deprecated, consider using "%s" instead.
fsfs
pre-1.8-compatible
%d.%d.%d%s%s
Repositories compatible with 1.0.x must use --fs-type=bdb
Repositories compatible with 1.8.x or earlier cannot use --fs-type=%s
args
Not enough arguments
Too many arguments
--revision (-r) and --transaction (-t) are mutually exclusive
Calling hooks is incompatible with --transaction (-t)
Missing revision
Only one revision allowed
First revision cannot be higher than second
Deltifying revision %ld...
done.
Invalid revision specifier
Revisions must not be greater than the youngest revision (%ld)
Caught signal
WARNING 0x%04x: %s
* Dumped revision %ld.
* Verified revision %ld.
* Verifying repository metadata ...
* Verifying metadata at revision %ld ...
%lld
Packing revisions in shard %s...
Packing revprops in shard %s...
------- Committed revision %ld >>>
------- Committed new rev %ld (loaded from original rev %ld) >>>
     * editing path : %s ...
     * deleting path : %s ...
     * adding path : %s ...
     * replacing path : %s ...
 done.
COPIED...
<<< Started new transaction, based on original revision %ld
<<< Skipped original revision %ld
 removing '\r' from %s ...
svn:mergeinfo
Repository lock acquired.
Please wait; recovering the repository may take some time...
Repository lock acquired.
Please wait; upgrading the repository may take some time...
Packed revision properties in shard %s
Removed non-packed revision properties in shard %s
Bumped repository format to %ld
* Copied revision %ld.
* Copied revisions from %ld to %ld.
Path '%s' is not a local path
Path: %s
UUID: %s
Repository Format: %d
repos_version->major == SVN_VER_MAJOR
fs_version->major == SVN_VER_MAJOR
repos_version->patch == 0
fs_version->patch == 0
Compatible With Version: %d.%d.0
Repository Capability: %s
Filesystem Type: %s
Filesystem Format: %d
FSFS Sharded: yes
FSFS Sharded: no
FSFS Shard Size: %d
FSFS Shards Packed: %ld/%ld
FSFS Logical Addressing: yes
FSFS Logical Addressing: no
Configuration File: %s
Invalid property value found in dumpstream; consider repairing the source or using --bypass-prop-validation while loading.
Invalid revision number (%ld) specified
Non-numeric revision specified
'%s' locked by user '%s'.
Too many arguments given
UUID Token: %s
Owner: %s
Created: %s
Expires: %s
Comment (%i line):
Comment (%i lines):
Failed to get exclusive repository access; perhaps another process
such as httpd, svnserve or svn has it open?
Waiting on repository lock; perhaps another process has it open?
Recovery completed.
The latest repos revision is %ld.
administrator
No paths to unlock provided
Path '%s' isn't locked.
Removed lock on '%s'.
Transaction '%s' removed.
svn:log
'%s' unlocked by user '%s'.
Upgrade of this repository's underlying versioned filesystem is not supported; consider dumping and loading the data elsewhere
Upgrade of this repository is not supported; consider dumping and loading the data elsewhere
Upgrade completed.
-----Summary of corrupt revisions-----
r%ld
%s: E%06d: %s
Failed to verify repository '%s'
* Error verifying repository metadata.
* Error verifying revision %ld.
No program provided
Can't open stdin
Can't open stdout
Can't open stderr
