@(#)PROGRAM:leaks  PROJECT:SamplingTools-64553.2
ffff&
DYLD_INSERT_LIBRARIES=
MbP?
.memgraph
%s[%d]: [fatal] unable to read input graph: %s
%s[%d]: [fatal] unable to suspend target process: %s
%s[%d]: task_stop_peeking failed. (%s)
Command args:    %@
Target process:  %@ [%u]
Parent process:  %@ [%u]
Target process of memgraph:  %@ [%u]
../lib/libLeaksAtExit.dylib
%s[%d]: [fatal] unable to locate required library: %s
DYLD_INSERT_LIBRARIES
DYLD_INSERT_LIBRARIES=%s:%s
DYLD_INSERT_LIBRARIES=%s
%s[%d]: [fatal] --atExit must be followed by " -- <command>"
%s[%d]: [fatal] No command specified after '--atExit -- '
%s[%d]: [fatal] Unable to launch --atExit command '%s': %s
%s[%d]: [fatal] Couldn't get task port for pid %u immediately after launch
%s[%d]: Unable to deallocate target task port: %d (%s)
%s[%d]: [fatal] Couldn't get task port for pid %u after receiving STOP signal
SAMPLING_TOOLS_TARGET_PID
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: [fatal] Target task not available for analysis
SAMPLING_TOOLS_ALL_PROCESSES
Target process is using %s so not generating corpse for better performance.
Target process is an ancestor and permitting live process for ancestors so not generating a corpse to save resources by default.
__check_mach_ports_lookup
i24@?0r^v8r^v16
%s-%d-%s
DT_RESPAWN_FOR_NONNATIVE
/tmp/%s-allProcesses[%d].XXXXXX
%s[%d]: [fatal] Couldn't create output directory from template %s, exiting
%s[%d]: [fatal] Couldn't change directory to %s
stderr.txt
Couldn't create error file stderr.txt (%s)
Couldn't replace stderr file with stderr.txt (%s)
Writing output files into %s
Skipping process of wrong architecture:  %d %s
ANALYZING PROCESS %5d: %s
.txt
Couldn't open output file %s (%s)
Couldn't replace output file with %s (%s)
    CHILD ANALYSIS TOOL CRASHED with %s
    %s for %5d: %s
Exception '%s', reason: '%s'
v16@?0i8I12
v40@?0i8r*12B20I24I28^B32
Child analysis tool crashed for these processes:
Wrote output files into %s
To print all files in pid order use:  (cd %s; cat `/bin/ls -tr1 *.txt`) 
v8@?0
: terminated; resuming target task
: interrupted; resuming target task
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
SIMULATOR_ROOT
SIMULATOR_SHARED_RESOURCES_DIRECTORY
libclang_rt.asan
Address Sanitizer
libclang_rt.tsan
Thread Sanitizer
v24@?0{_CSTypeRef=QQ}8
%s[%d]: [fatal] Corpse generated for the process is incomplete, which can happen with processes that use a lot of memory
%s[%d]: Failed to generate corpse from the process: corpse was incomplete which can happen for processes that use a lot of memory
Failed to generate corpse from the process: %d (%s)
%s[%d]: [fatal] %s, exiting
%s[%d]: %s - examining live process instead
BOOL _respawnToolIfNecessaryWithExitStatus(pid_t, task_read_t, VMURespawnToolOptions, int *)
sharedCode.m
Only one of kVMURespawnForAllProcesses and kVMURespawnForAllNonNativeProcesses can be set
DYLD_ROOT_PATH
SIMULATOR_UDID
DT_NO_RESPAWN
DT_FORCE_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
%s[%d]: respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but the analysis process does not match the SDK variant of the target process %d.
Analysis of malloc zones may fail.
DT_NO_RESPAWN_TO_OS
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
DYLD_FORCE_PLATFORM
arm64
x86_64
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
--al
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
v12@?0I8
com.apple.SymbolicationDT
Symbolication.framework/Symbolication
com.apple.CoreSymbolicationDT
CoreSymbolication.framework/CoreSymbolication
64544
/System/Library/PrivateFrameworks/%s
%s/usr/bin/%s
v20@?0I8@?<v@?>12
Running in DT_RESPAWN_FOR_NONNATIVE mode -- respawning only if necessary to match target process arch and/or platform.
message
unknown error
%s[%d]: [fatal] %s
Search through a process for leaked memory.
[options] pid | partial-process-name | memory-graph-file
       leaks [options] --atExit -- <command-and-arguments>
exclude
exclude leaked blocks whose backtraces include the specified symbol
v24@?0@"NSString"8^@16
help
show this helpful usage message!
showTiming
initialization
quiet
suppress the process description header and footer
list
print the leaks as a list ("classic"-style) rather than as a tree
groupByType
in leak trees, group children by type rather than showing individual instances
(for normal leak detection output, and --referenceTree, --dominatorTree, and --autoreleasePools modes)
nostacks
do not print backtraces or save them in the memory graph file, even when available
fullStacks
print backtraces with one line per frame
nosources
do not show sourceFile:lineNumber in backtraces
rawNames
show raw class names instead of display names.
fullStackHistory
collects all memory allocation call stacks that are available, including historical allocations that have been freed.
outputGraph
path
save a memory graph file into the given directory or file
/tmp
physFootprint
collect phys_footprint statistics for memory regions
compress
fullContent
print or save full allocation content descriptions
(this is the default for printing output for live processes)
readonlyContent
print or save just readonly allocation content descriptions
(this is the default for saving memory graphs)
noContent
do not save or print any allocation content descriptions
nocontext
excludePersonalInformation
nocontents
show the hex content of leaked allocations, if there is no description of content
conservative
don't attempt smart ivar-based scanning, go byte for byte
noScanOverlay
DT_NO_SCAN_OVERLAY
forkCorpse
generate a corpse fork from process and run leaks on it
getCorpseFromParent
diffFrom
memgraph
show only the new leaks since the specified memgraph
--diffFrom option can only be specified once
specified memgraph is invalid or nil
trace
address
print chains of references from process 'roots' (e.g., global data) to the given block
traceTree
print a reverse tree of references, from the given block up to the process roots
-traceTree
dominatorTree
print a dominator tree of allocated memory starting at root nodes. Provide an address to print only its subtree instead. Supports -virtual and -groupByType
-dominatorTree
referenceTree
print a reference tree of allocated memory starting at root nodes
virtual
show virtual size of referenced VM regions instead of dirty size
autoreleasePools
print contents of autorelease pools, by thread
debug
mode
enable additional debugging modes; list available modes with --debug=help
Modes of 'leaks <process> --debug'.  More than one different mode flag can be passed,
such as '--debug='.*Storage.*' --debug=references'.
    --debug            -- full output
    --debug=layout     -- full output, including object layout and values of ivars
    --debug=histogram  -- only show histogram of number of allocations having each reference count
    --debug=references -- only show references to the allocation (not content or layout), and only if reference count > 1
    --debug=contents   -- only show contents (reference from the allocation)
    --debug=<address>  -- only show the allocation at or containing <address>
    --debug=<classes-pattern>  -- show allocations whose class name matches pattern
    --debug=<region-description-pattern>  -- show non-malloc nodes (e.g. VM regions, threads) whose description matches pattern
    --debug=stacks     -- show stack backtraces for nodes
layout
histogram
references
contents
stacks
-debug
maxInteriorOffset
how far into large regions to scan to find outgoing references, in bytes
suppressOutput
outputFile
write output to given path instead of stdout
unable to open output file "%s" for writing: %s (%d)
ipsIncidentID
rateLimit
nonIPSMemgraphCount
vmalso
show leaked VM regions
novm
vmonly
vmPageStatistics
checkAbandoned
report abandoned memory
postprocessGraph
allProcesses
minimumPid
run leaks against all processes (or those >= minimumPid), with the given arguments
atExit
launch the specified command and run leaks when that process exits.
This should be the last argument; use '--atExit -- <command-and-arguments>'
processInfo
show only process description header and binary images list
debugSymbolicators
symbolicate
<dSYM-path>|<library-names>|all
symbolicate given memgraph
dSYM
showResymbolicationInfo
lzfse
use LZFSE compression
Cannot pass pid, process-name, or memgraph ('%@'), with '--atExit -- <command>'
unknown argument: %@
'--symbolicate' can only be combined with '--outputGraph' flag
com.apple.leaks
at most one mode should be specified (--outputGraph, --autoreleasePools, --traceTree, --referenceTree, --dominatorTree, --debug, --processInfo, --diffFrom)
at most one mode should be specified (--outputGraph, --traceTree, --diffFrom)
%s[%d]: --nocontext is deprecated, use --noContent instead
only one of --fullContent, --readonlyContent, --noContent, or --nocontext can be specified;  also, --nocontext is deprecated, use --noContent instead
only one of --fullContent, --readonlyContent, or --noContent can be specified
Ignoring --fullContent flag because --excludePersonalInfo was specified.
to generate memgraphs for all processes, use 'leaks -outputGraph -allProcesses <other arguments>'
no output graph path specified
no process specified
No memgraph specified. Cannot pass pid or process-name with '--symbolicate'
'--symbolicate' flag is missing
'--lzfse' compression algorithm specified when there is nothing to compress
No '--outputGraph' path specified. Flag '--fullStackHistory' can only be used while capturing a memgraph and saving it to the specified path.
Saving all memgraph files into output directory (ignoring path %s)
%s[%d]: [fatal] target process no longer exists; abandoning...
%s[%d]: [fatal] mach port for process %d not valid
%s[%d]: [fatal] process %d has not started
void checkForLeaks(pid_t, task_read_t)
leaks.m
Expected leaksGlobals.outputFile to be a valid FILE*
leaks
generate analysis task
%s[%d]: [fatal] Resymbolication failed. %s
%s[%d]: [fatal] Failed to create temporary file for writing resymbolicated memgraph.
DISKLOGS
v16@?0@?<i@?^vQ>8
%s[%d]: [fatal] Failed to write resymbolicated memgraph because of error: %s
%s[%d]: [fatal] Failed to write resymbolicated memgraph. %s
Memgraph was successfully resymbolicated and written to: '%s' [%3.2f MB]
%s[%d]: [fatal] Cannot save a memgraph with '--fullStackHistory' because MallocStackLogging was not enabled for pid %d. Please run the process with full MallocStackLogging.
%s[%d]: [fatal] Cannot save a memgraph with '--fullStackHistory' for pid %d because it ran with MallocStackLogging lite mode. Please run the process with full MallocStackLogging.
Process %d is not debuggable. Due to security restrictions, leaks can only show or save contents of readonly memory of restricted processes.
v16@?0^v8
%s[%d]: [fatal] memgraphs are from the same file [%s]
%s[%d]: [fatal] Invalid memgraph format passed in to --diffFrom: %s
%s[%d]: [fatal] Memgraphs are from different process identifiers [%d] and [%d]
No new leaks detected between memgraphs for process [%d].
%s[%d]: [fatal] ignoring --outputGraph option as path provided would overwrite the source graph file
Only showing unique leaks since %s.
leaks Report Version: 3.0
leaks Report Version: 4.0
, multi-line stacks
%s[%d]: [fatal] Invalid output graph path: %s
%s[%d]: [fatal] No permission to write to '%s'. Specify the writable path where to save the resymbolicated memgraph using '--outputGraph' option
unable to instantiate a memory scanner.
%s[%d]: %s
%s[%d]: [fatal] %s
adding root nodes from task
adding malloc nodes from task
%s[%d]: [fatal] cannot save a memgraph in IPS format and also save disk logs
length
bug_type
name
displayName
incidentID
%s[%d]: [fatal] unable to write JSON header: %s
write graph to file
%@[%d].XXXXXX.%@
%s[%d]: [fatal] unable to create file "%s" for memory graph: %d %s
%s[%d]: [fatal] unable to write graph to output file "%s": %s
url= <<%s>>
%@_%@
LogType
Output graph successfully written to '%s' [%3.2f MB]
memgraph.%@
Will not upload memgraph. rate limits: global=%lf proc=%lf. rand=%lf
memgraph.CountLimit
memgraph.%@.CountLimit
Will not take memgraph, because the limit of %.0lf graphs has been reached
%@.t
%@.signal
%@.exponent
%@.numerator
%@.coef_denominator
com.apple.da
mobile
%s[%d]: [fatal] Could not write the memgraph because of error: %s
v68@?0I8I12I16{?=^{?}{?=QIQ}^{?}}20^B60
SCANNING %s
Call stack: %s
REFERENCES TO THIS: %u
   STRONG: %u  CONSERVATIVE: %u  WEAK UU etc: %u
   SELF: %u
  SELF-REF
   %s
v28@?0I8I12I16^B20
LAYOUT OF %s (%s)
%llu bytes into 
--> %@%@
%5u: %s%s%s  %s
v32@?0@"DVT_VMUFieldInfo"8Q16^B24
v16@?0@"DVT_VMUClassInfo"8
%5u: <extra space>[%llu]
CONTENTS:
%u POINTERS FROM %s
v24@?0@"DVT_VMUVMRegion"8^B16
NODE COUNT:  %u   OWNING-REFS COUNT: %u   AVERAGE OWNING-REFS PER NODE: %.2f
    %10u %s references
SELF-REFERENCES:  %u
%26lu   %8lu
   leaked blocks and VM regions
   %s
MallocStackLoggingLite
v44@?0I8{?=Qb60b4@}12^B36
%s[%d]: [fatal] address provided for reference tracing (%#llx) not found in target process's heap
Tracing: %s
C16@?0I8C12
B28@?0I8I12I16*20
Found %u root%s referencing: %s
This is a reverse reference tree showing how the specified block is referenced.
The top node is the specified block, the next level down are blocks that reference that, and so on.
The number at the start of each line is the number of paths-to-roots going through that node.
This reverse reference tree can be imported into Instruments using Import Sample Data to allow data mining.
printReferenceTree
identifying root regions
building call tree from references
__DATA
%@ %@
Stack
Stack of %@
void printReferenceTree(DVT_VMUProcessObjectGraph *__strong)
Malloc blocks should not be root nodes of reference graph
__DATA __objc
void printReferenceTree(DVT_VMUProcessObjectGraph *__strong)_block_invoke
expected dstCallTreeNode to be nil since dstNode wasn't marked reachable previously
%@ %@: '%@[]'
expected to get VMUVMRegion for VM region node
%@  dirty: %s  swapped: %s
%@  purgableVolatile: %s
addChildCountsIntoNode
printing call tree
create call tree
This is a dominator tree showing dynamic memory for the process. In a dominator tree a node(X) can
be a descendant of node(Y) only if all paths of owning references from root nodes to node(X) go
through node(Y). When there are multiple paths a node will be promoted up the tree until it reaches
a node which satisfies this requirement or it becomes a root itself.
Each line shows:
  1. The total count of allocations for this node and all descendants.
  2. The total size of allocations for this node and all descendants.
  3. A description of the reference to the node. (optional)
  4. A description of the node itself.
The sizes for VM regions are calculated as dirty+compressed-purgeable unless --virtual was passed.
Any VM regions with zero size and no children are excluded. Also any VM regions which don't represent
dynamic memory owned by this process are also excluded. Examples are __AUTH_CONST, MALLOC metadata,
mapped files, and Owned unmapped memory.
print call tree
no posix thread
unsigned int printAutoreleasePools(DVT_VMUProcessObjectGraph *__strong, DVT_VMUTaskMemoryScanner *__strong, __strong id<VMUStackLogReader>)_block_invoke
dyld
_main_thread
%*s  %8u
Total entries in autoreleasepools:
Unique entries in autoreleasepools:
%*s  %8u block%s  %8s bytes
Memory size of autoreleasepool content blocks:
Memory directly held only by autorelease pools:
Memory indirectly held only by autorelease pools:
%*s    ======           ======
Total memory of autorelease pools and content blocks:
Thread %u  %s
    %s
Number of autoreleases coalesced into previous entries: %u
void printThreadAutoreleasePool(LeakDetector *__strong, uint32_t, NSMutableSet *__strong, VMUMarkingMap *)
expected autoreleasePoolChainCount %u to be less than autoreleasePoolChainMax %u
INCORRECT CHAIN OF @autoreleasepool content BLOCKS -- TRUNCATING THE CHAIN (autoreleasePoolChainCount %u, autoreleasePoolChainMax %u
   COALESCED AUTORELEASES: %u
     ** %u:  
        %u:  
%s%s
NSString *memoryTreeHeldByAutoreleasedNode(LeakDetector *__strong, VMUMarkingMap *, DVT_VMUCallTreeNode *__unsafe_unretained *, uint32_t)
Expected non-nil srcCallTreeNode
NSString *memoryTreeHeldByAutoreleasedNode(LeakDetector *__strong, VMUMarkingMap *, DVT_VMUCallTreeNode *__unsafe_unretained *, uint32_t)_block_invoke
COUNT OF OWNING REFERENCES   NUMBER OF NODES WITH THAT COUNT
Entries held only by autorelease pools are marked with **
Autorelease pool pages not associated with a thread
    no autorelease pool
No autorelease pools.
        Empty
      POOL BOUNDARY
__isPlatformOrVariantPlatformVersionAtLeast
os_version_check.c
Platform2 == PLATFORM_MACOS && "unexpected platform"
_availability_version_check
kCFAllocatorNull
CFDataCreateWithBytesNoCopy
CFPropertyListCreateWithData
CFPropertyListCreateFromXMLData
CFStringCreateWithCStringNoCopy
CFDictionaryGetValue
CFGetTypeID
CFStringGetTypeID
CFStringGetCString
CFRelease
/System/Library/CoreServices/SystemVersion.plist
ProductVersion
%d.%d.%d
containsString:
hasSuffix:
stringByResolvingSymlinksInPath
defaultManager
fileExistsAtPath:isDirectory:
isExecutableFileAtPath:
attributesOfItemAtPath:error:
fileSize
dataWithContentsOfFile:options:error:
localizedDescription
UTF8String
string
processInfo
arguments
arrayWithArray:
objectAtIndexedSubscript:
lastPathComponent
setObject:atIndexedSubscript:
count
componentsJoinedByString:
appendFormat:
initWithTask:getBinariesList:
executablePath
parentPid
parentProcessPath
processName
length
mainBundle
stringByDeletingLastPathComponent
stringByAppendingPathComponent:
stringByStandardizingPath
fileExistsAtPath:
class
isKindOfClass:
intValue
initWithTask:
shouldAnalyzeWithCorpse
numberWithInt:
stringValue
initWithPid:
name
reason
callStackSymbols
valueForEnvVar:
currentHandler
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:description:
is64Bit
stringWithFormat:
numberWithUnsignedInt:
componentsSeparatedByString:
bundleWithIdentifier:
objectForInfoDictionaryKey:
init
resymbolicationDsymPath
resymbolicationLibraryNames
resymbolicateAll
symbolicationMode
debugTimer
setDebugTimer:
returnCode
setReturnCode:
inputGraphPath
setInputGraphPath:
inputGraphData
setInputGraphData:
outputGraphPath
setOutputGraphPath:
preGenerationGraphData
setPreGenerationGraphData:
preGenerationGraphPath
setPreGenerationGraphPath:
parser
setParser:
argumentError
setArgumentError:
excludedFrames
setExcludedFrames:
normalMode
setNormalMode:
showProcessInfoMode
setShowProcessInfoMode:
debugMode
setDebugMode:
debugLayout
setDebugLayout:
debugHistogram
setDebugHistogram:
debugReferences
setDebugReferences:
debugContents
setDebugContents:
dominatorTreeMode
setDominatorTreeMode:
referenceTreeMode
setReferenceTreeMode:
groupByType
setGroupByType:
referenceTreeShowRegionVirtualSize
setReferenceTreeShowRegionVirtualSize:
traceMode
setTraceMode:
traceTree
setTraceTree:
autoreleasePoolMode
setAutoreleasePoolMode:
allProcesses
setAllProcesses:
maxInterior
setMaxInterior:
exactScanning
setExactScanning:
collectVMpageStatistics
setCollectVMpageStatistics:
collectPhysFootprintStatistics
setCollectPhysFootprintStatistics:
checkAbandoned
setCheckAbandoned:
forkCorpse
setForkCorpse:
collectFullDiskStackLogs
setCollectFullDiskStackLogs:
showListOfLeaks
setShowListOfLeaks:
showRawClassNames
setShowRawClassNames:
showStacks
setShowStacks:
fullStacks
setFullStacks:
showSourceInfo
setShowSourceInfo:
showBinaryContents
setShowBinaryContents:
showLeakedVMregions
setShowLeakedVMregions:
showOnlyVMregions
setShowOnlyVMregions:
quietMode
setQuietMode:
suppressOutput
setSuppressOutput:
compress
setCompress:
objectContentLevel
setObjectContentLevel:
nocontext
setNocontext:
excludePersonalInfo
setExcludePersonalInfo:
postprocessGraph
setPostprocessGraph:
atExit
setAtExit:
applyDiffFrom
setApplyDiffFrom:
desiredAddress
setDesiredAddress:
classesPatternMatcher
setClassesPatternMatcher:
ipsIncidentID
setIpsIncidentID:
nonIPSMemgraphCount
setNonIPSMemgraphCount:
rateLimit
setRateLimit:
outputFile
setOutputFile:
corpseWasGenerated
setCorpseWasGenerated:
targetIsAncestor
setTargetIsAncestor:
autoreleasePoolsExtraReleasesCount
setAutoreleasePoolsExtraReleasesCount:
setResymbolicationDsymPath:
setResymbolicationLibraryNames:
setResymbolicateAll:
showResymbolicationDetails
setShowResymbolicationDetails:
useLZFSEcompression
setUseLZFSEcompression:
.cxx_destruct
_normalMode
_showProcessInfoMode
_debugMode
_debugLayout
_debugHistogram
_debugReferences
_debugContents
_dominatorTreeMode
_referenceTreeMode
_groupByType
_referenceTreeShowRegionVirtualSize
_traceMode
_traceTree
_autoreleasePoolMode
_allProcesses
_exactScanning
_collectVMpageStatistics
_collectPhysFootprintStatistics
_checkAbandoned
_forkCorpse
_collectFullDiskStackLogs
_showListOfLeaks
_showRawClassNames
_showStacks
_fullStacks
_showSourceInfo
_showBinaryContents
_showLeakedVMregions
_showOnlyVMregions
_quietMode
_suppressOutput
_compress
_nocontext
_excludePersonalInfo
_postprocessGraph
_atExit
_applyDiffFrom
_rateLimit
_corpseWasGenerated
_targetIsAncestor
_resymbolicateAll
_showResymbolicationDetails
_useLZFSEcompression
_returnCode
_objectContentLevel
_nonIPSMemgraphCount
_autoreleasePoolsExtraReleasesCount
_debugTimer
_inputGraphPath
_inputGraphData
_outputGraphPath
_preGenerationGraphData
_preGenerationGraphPath
_parser
_argumentError
_excludedFrames
_maxInterior
_desiredAddress
_classesPatternMatcher
_ipsIncidentID
_outputFile
_resymbolicationDsymPath
_resymbolicationLibraryNames
T@"DVT_VMUDebugTimer",&,N,V_debugTimer
Ti,N,V_returnCode
T@"NSString",&,N,V_inputGraphPath
T@"NSData",&,N,V_inputGraphData
T@"NSString",&,N,V_outputGraphPath
T@"NSData",&,N,V_preGenerationGraphData
T@"NSString",&,N,V_preGenerationGraphPath
T@"DVT_VMUOptionParser",&,N,V_parser
T@"NSError",&,N,V_argumentError
T@"NSMutableSet",&,N,V_excludedFrames
TB,N,V_normalMode
TB,N,V_showProcessInfoMode
TB,N,V_debugMode
TB,N,V_debugLayout
TB,N,V_debugHistogram
TB,N,V_debugReferences
TB,N,V_debugContents
TB,N,V_dominatorTreeMode
TB,N,V_referenceTreeMode
TB,N,V_groupByType
TB,N,V_referenceTreeShowRegionVirtualSize
TB,N,V_traceMode
TB,N,V_traceTree
TB,N,V_autoreleasePoolMode
TB,N,V_allProcesses
TQ,N,V_maxInterior
TB,N,V_exactScanning
TB,N,V_collectVMpageStatistics
TB,N,V_collectPhysFootprintStatistics
TB,N,V_checkAbandoned
TB,N,V_forkCorpse
TB,N,V_collectFullDiskStackLogs
TB,N,V_showListOfLeaks
TB,N,V_showRawClassNames
TB,N,V_showStacks
TB,N,V_fullStacks
TB,N,V_showSourceInfo
TB,N,V_showBinaryContents
TB,N,V_showLeakedVMregions
TB,N,V_showOnlyVMregions
TB,N,V_quietMode
TB,N,V_suppressOutput
TB,N,V_compress
TI,N,V_objectContentLevel
TB,N,V_nocontext
TB,N,V_excludePersonalInfo
TB,N,V_postprocessGraph
TB,N,V_atExit
TB,N,V_applyDiffFrom
TQ,N,V_desiredAddress
T@"DVT_VMUClassPatternMatcher",&,N,V_classesPatternMatcher
T@"NSString",&,N,V_ipsIncidentID
Ti,N,V_nonIPSMemgraphCount
TB,N,V_rateLimit
T^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq},N,V_outputFile
TB,N,V_corpseWasGenerated
TB,N,V_targetIsAncestor
TI,N,V_autoreleasePoolsExtraReleasesCount
T@"NSString",&,N,V_resymbolicationDsymPath
T@"NSArray",&,N,V_resymbolicationLibraryNames
TB,N,V_resymbolicateAll
TB,N,V_showResymbolicationDetails
TB,N,V_useLZFSEcompression
initWithTask:graph:scanner:stackLogReader:
doNormalLeakDetection
task
setOutputString:
doNormalLeakDetectionWithError:
scanner
detachFromTask
outputString
userInfo
objectForKeyedSubscript:
doNormalLeakDetectionWithTask:graph:scanner:stackLogReader:
checkTaskExistence
setPurposeDescription:
setSyntaxDescription:
addObject:
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:handler:
usage:
sharedTimer
startWithMessage:
stringByExpandingTildeInPath
boolValue
hasPrefix:
initWithPattern:forArgument:error:
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:flags:handler:
isEqualToString:
copy
optind
parseArguments:withBlock:
stringWithCString:encoding:
characterAtIndex:
resetCachedMatches
directedGraphWithData:error:
processDescriptionString
binaryImagesDescription
description
usage:shouldExit:
signpostID
logHandle
endEvent:
startWithCategory:message:
setObjectContentLevelForNodeLabels:
stackLogReader
diskLogs
resymbolicateWithDsymPath:libraryNames:all:progress:showDebugInfo:error:
plistRepresentationWithOptions:
UUID
UUIDString
stringByAppendingString:
createFileAtPath:contents:attributes:
fileHandleForWritingAtPath:
truncateFileAtOffset:
bytes
encapsulateData:to:withSupplementalDataTag:error:dataGeneratorBlock:
closeFile
removeItemAtPath:error:
moveItemAtPath:toPath:error:
writeToFile:options:error:
initWithTask:symbolicator:
usesLiteMode
setScanner:
setScanningMask:
processSnapshotGraphWithOptions:
setSerializationOptions:
defaultOverlay
refineTypesWithOverlay:
refineEdges:withOptions:markingInvalid:
removeMarkedEdges:
withEdgeMarkingMap:
nodeNamespaceSize
markReachableNodesFromRoots:inMap:options:
subgraphWithMarkedNodes:
nodeCount
createMapForMinusGraph:
setGraph:
stop
initWithTask:options:
setExactScanningEnabled:
setAbandonedMarkingEnabled:
setMaxInteriorOffset:
addRootNodesFromTask
addMallocNodesFromTask
numberWithUnsignedInteger:
setValue:forKey:
dataWithJSONObject:options:error:
dataWithData:
appendBytes:length:
appendData:
fileSystemRepresentation
initWithFileDescriptor:closeOnDealloc:
pathExtension
stringByAppendingPathExtension:
fileURLWithPath:
fileHandleForWritingToURL:error:
absoluteString
numberWithDouble:
scannerWithString:
scanDouble:
isAtEnd
streamFullStackLogsToBlock:
writeData:error:
invertedGraph
mapTableWithKeyOptions:valueOptions:
zoneNameForIndex:
nodeDetails:
nodeDescription:
matchesNodeDetails:orNodeDescription:
enumerateReferencesOfNode:withBlock:
symbolicatedBacktraceForNode:nodeDetails:isLiteZone:options:
referenceInfoWithName:
nodeDescription:withDestinationNode:referenceInfo:
enumerateEdgesOfNode:withBlock:
instanceSize
pointerSize
contentForNode:
className
typeName
offset
bitfieldWidth
size
descriptionOfFieldValueInObjectMemory:scanner:
getLeafFieldAtOffset:leafOffset:
stride
scanType
infoType
fullIvarNameAtOffset:
typedDescription
enumerateTypeFieldsWithBlock:
enumerateClassHierarchyWithBlock:
referenceDescription:withSourceNode:destinationNode:alignmentSpacing:
enumerateRegionsWithBlock:
enumerateObjectsWithBlock:
invertEdges
breadthFirstSearch:nodeVisitBlock:edgeVisitBlock:
initWithSymbolicator:sampler:options:
addChildWithName:address:count:numBytes:toNode:
appendString:
invertedNode
stringFromCallTreeIndentIfNoBranches:
withNodeMarkingMap:
vmuVMRegionForNode:
path
isSubmap
type
binarySectionRangeContainingAddress:
binarySectionNameForAddress:
regionSymbolRangeContainingAddress:
addRange:
sort
addUniqueChildWithName:address:count:numBytes:toNode:
rangeForLocation:
regionSymbolNameForAddress:
nodeTypeDescription:details:mallocBySize:
is64bit
referenceDescription:dstDescription:is64bit:
addChildCountsIntoNode
printCallTreeToFile:
numberWithUnsignedLongLong:
callTreeWithGraph:groupByType:showRegionVirtualSize:desiredClassesPattern:debugTimer:
callTreeWithGraph:groupByType:showRegionVirtualSize:desiredAddress:debugTimer:
printCallTreeToFile:cumulativeOutput:options:
markReachableNodesFromRoots:inMap:
threadNameForAddress:
nodeIsAutoreleasePoolContentPage:
rangeForSymbolName:inRegion:
nodeDetailIsAutoreleasePoolContentPage:
countByEnumeratingWithState:objects:count:
unsignedIntValue
graph
removeObject:
srcAddressToExtraAutoreleaseCountDict
nodeDescription:usingDetails:
stringFromCallTreeWithOptions:
examining %@ [%u]
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_port_deallocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
generate analysis task
adding root nodes from task
adding malloc nodes from task
write graph to file
leaks
identifying root regions
building call tree from references
addChildCountsIntoNode
printing call tree
printReferenceTree
LeaksGlobals
LeakDetector
@16@0:8
B16@0:8
v24@0:8@16
i16@0:8
v20@0:8i16
v20@0:8B16
Q16@0:8
v24@0:8Q16
I16@0:8
v20@0:8I16
^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}16@0:8
v24@0:8^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}16
v16@0:8
@"DVT_VMUDebugTimer"
@"NSString"
@"NSData"
@"DVT_VMUOptionParser"
@"NSError"
@"NSMutableSet"
@"DVT_VMUClassPatternMatcher"
^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}
@"NSArray"
I44@0:8I16@20@28@36
@44@0:8I16@20@28@36
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>21E160</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.dt.SamplingTools.leaks</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>MacOSX</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>21E185d</string>
<key>DTPlatformName</key>
<string>macosx</string>
<key>DTPlatformVersion</key>
<string>12.3</string>
<key>DTSDKBuild</key>
<string>21E185d</string>
<key>DTSDKName</key>
<string>macosx12.3.internal</string>
<key>DTXcode</key>
<string>1340</string>
<key>DTXcodeBuild</key>
<string>13F17a</string>
<key>LSMinimumSystemVersion</key>
<string>10.14.6</string>
</dict>
</plist>
zPLR
