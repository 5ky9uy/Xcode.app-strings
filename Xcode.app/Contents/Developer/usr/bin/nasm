__OUTPUT_FORMAT__=%s
%s: %s
unable to open output file `%s'
%%line %ld+%d %s
prefix
postfix
NASMENV
out of memory
unable to open response file `%s'
no input file specified
option `-%c' requires an argument
unrecognised output format `%s' - use -hf for a list
command line optimization level must be 'v', 0..3 or <nn>
cannot open file `%s' for error messages
unrecognized debug format `%s' for output format `%s'
unrecognized error reporting format `%s'
    %-23s %s (default %s)
valid debug formats for '%s' output format are ('*' denotes default):
NASM version 0.98.40 (Apple Computer, Inc. build 11) compiled on Aug  3 2017
invalid option to `-w'
option `--%s' requires an argument
unrecognised option `--%s'
unrecognised option `-%c'
more than one input file specified
nasm: 
%s(%ld) : 
warning: 
error: 
fatal: 
panic: 
debug: 
macro-params
macro-selfref
orphan-labels
number-overflow
gnu-elf-extensions
macro calls with wrong no. of params
cyclic macro self-references
labels alone on lines without trailing `:'
numeric constants greater than 0xFFFFFFFF
using 8- or 16-bit relocation in ELF, a GNU extension
unable to open input file `%s'
%line
%ld+%d %s
segment name `%s' not recognised
identifier expected after EXTERN
identifier expected after GLOBAL
identifier expected after COMMON
invalid size specified in COMMON declaration
no size specified in COMMON declaration
cannot use non-relocatable expression as ABSOLUTE address
invalid ABSOLUTE address in pass two
identifier expected after DEBUG
invalid warning id in WARNING directive
invalid parameter to "list" directive
unrecognised directive [%s]
EQU not preceded by label
bad syntax for EQU
phase error detected at end of assembly.
info:: assembly required 1+%d+1 passes
segment
section
extern
bits
global
common
absolute
debug
warning
list
cannot specify 32-bit segment on processor below a 386
`%s' is not a valid segment size; must be 16 or 32
8086
pentium
ppro
pentiumpro
katmai
willamette
prescott
ia64
ia-64
itanium
itanic
merced
unknown 'cpu' type
%s:%ld: 
type `nasm -h' for help
usage: nasm [-@ response file] [-o outfile] [-f format] [-l listfile]
            [options...] [--] filename
    or nasm -r   for version info (obsolete)
    or nasm -v   for version info (preferred)
    -t          assemble in SciTech TASM compatible mode
    -g          generate debug information in selected format.
    -e          preprocess only (writes output to stdout by default)
    -a          don't preprocess (assemble only)
    -M          generate Makefile dependencies on stdout
    -E<file>    redirect error messages to file
    -s          redirect error messages to stdout
    -F format   select a debugging format
    -I<path>    adds a pathname to the include file path
    -O<digit>   optimize branch offsets (-O0 disables, default)
    -P<file>    pre-includes a file
    -D<macro>[=<value>] pre-defines a macro
    -U<macro>   undefines a macro
    -X<format>  specifies error reporting format (gnu or vc)
    -w+foo      enables warnings about foo; -w-foo disables them
where foo can be:
response files should contain command line parameters, one per line.
For a list of valid output formats, use -hf.
For a list of debug formats, use -f <form> -y.
valid output formats for -f are (`*' denotes default):
numeric constant %s does not fit in 32 bits
file name already ends in `%s': output will be in `nasm.out'
file name already has no extension: output will be in `nasm.out'
nasm.out
negative position in raa_write
SAA with huge elements
Null debug format
null
segr6
segr7
xmm0
xmm1
xmm2
xmm3
xmm4
xmm5
xmm6
xmm7
addpd
addps
addsd
addss
addsubpd
addsubps
andnpd
andnps
andpd
andps
arpl
bound
bswap
call
clflush
clts
cmpeqpd
cmpeqps
cmpeqsd
cmpeqss
cmplepd
cmpleps
cmplesd
cmpless
cmpltpd
cmpltps
cmpltsd
cmpltss
cmpneqpd
cmpneqps
cmpneqsd
cmpneqss
cmpnlepd
cmpnleps
cmpnlesd
cmpnless
cmpnltpd
cmpnltps
cmpnltsd
cmpnltss
cmpordpd
cmpordps
cmpordsd
cmpordss
cmppd
cmpps
cmpsb
cmpsd
cmpss
cmpsw
cmpunordpd
cmpunordps
cmpunordsd
cmpunordss
cmpxchg
cmpxchg486
cmpxchg8b
comisd
comiss
cpuid
cvtdq2pd
cvtdq2ps
cvtpd2dq
cvtpd2pi
cvtpd2ps
cvtpi2pd
cvtpi2ps
cvtps2dq
cvtps2pd
cvtps2pi
cvtsd2si
cvtsd2ss
cvtsi2sd
cvtsi2ss
cvtss2sd
cvtss2si
cvttpd2dq
cvttpd2pi
cvttps2dq
cvttps2pi
cvttsd2si
cvttss2si
cwde
divpd
divps
divsd
divss
emms
enter
f2xm1
fabs
fadd
faddp
fbld
fbstp
fchs
fclex
fcmovb
fcmovbe
fcmove
fcmovnb
fcmovnbe
fcmovne
fcmovnu
fcmovu
fcom
fcomi
fcomip
fcomp
fcompp
fcos
fdecstp
fdisi
fdiv
fdivp
fdivr
fdivrp
femms
feni
ffree
ffreep
fiadd
ficom
ficomp
fidiv
fidivr
fild
fimul
fincstp
finit
fist
fistp
fisttp
fisub
fisubr
fld1
fldcw
fldenv
fldl2e
fldl2t
fldlg2
fldln2
fldpi
fldz
fmul
fmulp
fnclex
fndisi
fneni
fninit
fnop
fnsave
fnstcw
fnstenv
fnstsw
fpatan
fprem
fprem1
fptan
frndint
frstor
fsave
fscale
fsetpm
fsin
fsincos
fsqrt
fstcw
fstenv
fstp
fstsw
fsub
fsubp
fsubr
fsubrp
ftst
fucom
fucomi
fucomip
fucomp
fucompp
fwait
fxam
fxch
fxrstor
fxsave
fxtract
fyl2x
fyl2xp1
haddpd
haddps
hsubpd
hsubps
ibts
icebp
idiv
imul
incbin
insb
insd
insw
int01
int03
int1
int3
into
invd
invlpg
iret
iretd
iretw
jcxz
jecxz
jmpe
lahf
lddqu
ldmxcsr
leave
lfence
lgdt
lidt
lldt
lmsw
loadall
loadall286
lodsb
lodsd
lodsw
loop
loope
loopne
loopnz
loopz
maskmovdqu
maskmovq
maxpd
maxps
maxsd
maxss
mfence
minpd
minps
minsd
minss
monitor
movapd
movaps
movd
movddup
movdq2q
movdqa
movdqu
movhlps
movhpd
movhps
movlhps
movlpd
movlps
movmskpd
movmskps
movntdq
movnti
movntpd
movntps
movntq
movq
movq2dq
movsb
movsd
movshdup
movsldup
movss
movsw
movsx
movupd
movups
movzx
mulpd
mulps
mulsd
mulss
mwait
orpd
orps
outsb
outsd
outsw
packssdw
packsswb
packuswb
paddb
paddd
paddq
paddsb
paddsiw
paddsw
paddusb
paddusw
paddw
pand
pandn
pause
paveb
pavgb
pavgusb
pavgw
pcmpeqb
pcmpeqd
pcmpeqw
pcmpgtb
pcmpgtd
pcmpgtw
pdistib
pextrw
pf2id
pf2iw
pfacc
pfadd
pfcmpeq
pfcmpge
pfcmpgt
pfmax
pfmin
pfmul
pfnacc
pfpnacc
pfrcp
pfrcpit1
pfrcpit2
pfrsqit1
pfrsqrt
pfsub
pfsubr
pi2fd
pi2fw
pinsrw
pmachriw
pmaddwd
pmagw
pmaxsw
pmaxub
pminsw
pminub
pmovmskb
pmulhriw
pmulhrwa
pmulhrwc
pmulhuw
pmulhw
pmullw
pmuludq
pmvgezb
pmvlzb
pmvnzb
pmvzb
popa
popad
popaw
popf
popfd
popfw
prefetch
prefetchnta
prefetcht0
prefetcht1
prefetcht2
prefetchw
psadbw
pshufd
pshufhw
pshuflw
pshufw
pslld
pslldq
psllq
psllw
psrad
psraw
psrld
psrldq
psrlq
psrlw
psubb
psubd
psubq
psubsb
psubsiw
psubsw
psubusb
psubusw
psubw
pswapd
punpckhbw
punpckhdq
punpckhqdq
punpckhwd
punpcklbw
punpckldq
punpcklqdq
punpcklwd
push
pusha
pushad
pushaw
pushf
pushfd
pushfw
pxor
rcpps
rcpss
rdmsr
rdpmc
rdshr
rdtsc
resb
resd
resq
rest
resw
retf
retn
rsdc
rsldt
rsqrtps
rsqrtss
rsts
sahf
salc
scasb
scasd
scasw
sfence
sgdt
shld
shrd
shufpd
shufps
sidt
sldt
smint
smintold
smsw
sqrtpd
sqrtps
sqrtsd
sqrtss
stmxcsr
stosb
stosd
stosw
subpd
subps
subsd
subss
svdc
svldt
svts
syscall
sysenter
sysexit
sysret
test
ucomisd
ucomiss
umov
unpckhpd
unpckhps
unpcklpd
unpcklps
verr
verw
vmcall
vmclear
vmlaunch
vmptrld
vmptrst
vmread
vmresume
vmwrite
vmxoff
vmxon
wait
wbinvd
wrmsr
wrshr
xadd
xbts
xchg
xlat
xlatb
xorpd
xorps
xstore
cmov
lock
repe
repne
repnz
repz
times
byte
dword
long
near
nosplit
qword
short
strict
tword
word
strange value %d passed to float_const
overflow in floating-point constant
too many periods in floating-point constant
floating-point constant: `%c' is invalid character
instruction->times < 0 (%ld) in assemble()
one-byte relocation attempted
integer supplied to a D%c instruction
`incbin': unable to open file `%s'
`incbin': unable to seek on file `%s'
`incbin': unexpected EOF while reading file `%s'
errors made it through from pass one
segr6 and segr7 cannot be used as prefixes
invalid instruction prefix
operation size not specified
mismatch in operand sizes
no instruction for this cpu level
invalid combination of opcode and operands
attempt to reserve non-constant quantity of BSS space
invalid effective address
internal instruction table corrupt: instruction code 0x%02X given
bizarre 8086 segment register received
bizarre 386 segment register received
signed byte value exceeds bounds
byte value exceeds bounds
unsigned byte value exceeds bounds
word value exceeds bounds
value referenced by FAR is not relocatable
short relative jump outside segment
short jump is out of range
non-constant BSS size in pass two
invalid operand passed to regval()
can't find label `%s' on pass two
%s%s%s
symbol `%s' redefined
attempt to define a local label before any non-local labels
attempt to define a local label as a common variable
attempt to declare local symbol `%s' as global
label or instruction expected at start of line
label alone on a line without a colon might be in error
non-constant argument supplied to TIMES
TIMES value %d is negative
instruction has more than %d prefixes
parser: instruction expected
floating-point constant encountered in `D%c' instruction
operand %d: expression is not simple or relocatable
comma expected after operand %d
`incbin' expects a file name
`incbin': second parameter is
 non-numeric
`incbin': third parameter is
`incbin': more than three parameters
no operand for data declaration
invalid operand size specification
invalid size specification in effective address
invalid use of FAR operand specifier
invalid segment override
parser: expecting ]
comma or end of line expected
beroset-p-592-invalid effective address
beroset-p-603-invalid effective address
beroset-p-630-invalid effective address
beroset-p-637-invalid effective address
beroset-p-650-invalid effective address
invalid operand type
register size specification ignored
  %c %-10s%s
No output drivers given at compile time
flat-form binary files (e.g. DOS .COM, .SYS)
%define __SECT__ [section .text]
%imacro org 1+.nolist
[org %1]
%endmacro
%macro __NASM_CDecl__ 1
.text
WRT not supported by binary output format
attempt to assemble code in [ABSOLUTE] space
code directed to nonexistent segment?
attempt to initialise memory in a nobits section: ignored
binary output format does not support segment base references
binary output format does not support external references
uninitialised space declared in %s section: zeroing
binary format does not support any special symbol types
unrecognised special symbol `%s'
binary output format does not support common variables
.data
.bss
section name must be .text, .data, or .bss
section.
.start
.vstart
ignoring unknown section attribute: "%s"
attempt to change section type from progbits to nobits
attempt to change section type from nobits to progbits
cannot specify an alignment to the .text section
argument to `align' is not a power of two
`align' value conflicts with section start address
argument to `valign' is not a power of two
`valign' value conflicts with `vstart' address
cannot combine `start' and `follows' section attributes
section start address redefined
`start' address conflicts with section alignment
cannot combine `vstart' and `vfollows' section attributes
section virtual start address (vstart) redefined
`vstart' address conflicts with `valign' value
expecting section name for `follows' attribute
expecting section name for `vfollows' attribute
align=
start=
follows=
vstart=
valign=
vfollows=
nobits
progbits
()'"
invalid syntax in `section' directive
expecting `)'
No value given to attribute in `section' directive
section attribute value must be a critical expression
Invalid attribute value specified in `section' directive.
org value must be a critical expression
program origin redefined
No or invalid offset specified in ORG directive.
brief
sections
segments
symbols
stdout
stderr
unable to open map file `%s'
map file already specified
cannot mix real and virtual attributes in nobits section (%s)
section %s follows an invalid or unknown section (%s)
sections %s and %s can't both follow section %s
section %s begins before program origin
sections %s ~ %s and %s overlap!
sections %s and %s overlap!
section %s vfollows unknown section (%s)
cannot compute vstart for section %s
circular vfollows path detected
not defined
- NASM Map file 
Source file:  %s
Output file:  %s
-- Program origin 
%08lX
-- Sections (summary) 
Vstart    Start     Stop      Length    Class     Name
%08lX  %08lX  %08lX  %08lX  
progbits  
nobits    
-- Sections (detailed) 
---- Section %s 
class:     
length:    %08lX
start:     %08lX
align:     
%08lX
follows:   
vstart:    %08lX
valign:    
vfollows:  
-- Symbols 
---- No Section 
Value     Name
%08lX  %s
Real      Virtual   Name
%08lX  %08lX  %s
Linux a.out object files
aout
NetBSD/FreeBSD a.out object files
aoutb
attempt to assemble code in segment %d: defaulting to `.text'
attempt to initialise memory in the BSS section: ignored
code
data
OUT_RAWDATA with other than NO_SEG
a.out format does not support segment base references
Linux a.out format does not support any use of WRT
a.out format cannot produce non-PC-relative PLT references
a.out format does not support this use of WRT
intra-segment OUT_REL2ADR
a.out format cannot produce PC-relative GOT references
intra-segment OUT_REL4ADR
`..gotoff' relocations require a non-global symbol in the section
unable to find a suitable global symbol for this reference
..gotpc
..gotoff
..got
..plt
..sym
cannot use relocatable expression as symbol size
function
object
unrecognised symbol type `%.*s'
Linux a.out does not support symbol size information
no special symbol features supported here
.drectve
-export:%s 
COFF (i386) object files (e.g. DJGPP for DOS)
coff
Microsoft Win32 (i386) object files
win32
%imacro export 1+.nolist
[export %1]
WRT not supported by COFF output formats
strange segment conditions in COFF driver
attempt to initialise memory in BSS section `%s': ignored
uninitialised space declared in non-BSS section `%s': zeroing
COFF format does not support non-32-bit relocations
COFF format does not support segment base references
COFF format does not support 16-bit relocations
Win32 COFF does not correctly support relative references to absolute addresses
COFF section names limited to 8 characters: truncating
text
rdata
standard COFF does not support read-only data sections
info
standard COFF does not support informational sections
standard COFF does not support section alignment specification
0123456789
argument to `align' is not numeric
Win32 cannot align sections to better than 64-byte boundaries
.rdata
section attributes ignored on redeclaration of section `%s'
export
`export' directive requires export name
unrecognised export qualifier `%s'
.file
.absolut
.obj
ELF32 (i386) object files (e.g. Linux)
ELF32 (i386) stabs debug format for Linux
stabs
%define $_%1 $%1
strange segment conditions in ELF driver
ELF format does not support segment base references
ELF format cannot produce non-PC-relative PLT references
ELF format does not support this use of WRT
16-bit relocations in ELF is a GNU extension
Unsupported non-32-bit ELF relocation
ELF format cannot produce PC-relative GOT references
alignment constraint `%s' is not a valid number
alignment constraint `%s' is not a power of two
section alignment %d is not a power of two
alloc
noalloc
exec
noexec
write
nowrite
.comment
.shstrtab
.symtab
.strtab
attempt to redefine reserved sectionname `%s'
.rodata
.rel
.stab
.stabstr
The Netwide Assembler %s
0.98.40 (Apple Computer, Inc. build 11)
MS-DOS 16-bit/32-bit OMF object files
Borland Debug Records
borland
__NASMDEFSEG
strange segment conditions in OBJ driver
lineno directed to nonexistent segment?
%imacro group 1+.nolist
[group %1]
%imacro uppercase 0+.nolist
[uppercase %1]
%imacro import 1+.nolist
[import %1]
relative call to absolute address not supported by OBJ format
far-absolute relocations not supported by OBJ format
OBJ format cannot handle complex dword-size segment base references
`obj' output driver does not support one-byte relocations
OBJ: 4-byte segment base fixup got through sanity check
unrecognised segment value in obj_write_fixup
default WRT specification for external `%s' unresolved
unrecognised WRT value in obj_write_fixup
..start
OBJ supports no special symbol features for this symbol type
`:' expected in special symbol text for `%s'
`%s': `far' keyword may only be applied to common variables
cannot use relocatable expression as common-variable element size
`%s': element-size specifications only apply to common variables
segment attributes specified on redeclaration of segment: ignoring
private
public
stack
use16
use32
flat
FLAT
group
failure to define FLAT?!
class=
overlay=
segment alignment should be numeric
OBJ format does not support alignment of 8: rounding up to 16
OBJ format does not support alignment of %d: rounding up to 256
OBJ format does not support alignment of %d: rounding up to 4096
invalid alignment value %d
absolute=
argument to `absolute' segment attribute should be numeric
segment `%s' is already part of a group: first one takes precedence
group `%s' defined twice
uppercase
import
`import' directive requires symbol name and library name
resident
nodata
parm=
value `%s' for `parm' is non-numeric
segment `%s' requires more alignment than OBJ format supports
group `%s' contains undefined segment `%s'
entry point is not in this module
start_of_program
Linux as86 (bin86 version 0.3) object files
as86
WRT not supported by as86 output format
as86 format does not support segment base references
as86 format does not support any special symbol types
bizarre relocation size %d
Relocatable Dynamic Object File Format v2.0
%imacro library 1+.nolist
[library %1]
%imacro module 1+.nolist
[module %1]
rdf segment numbers not allocated as expected (%d,%d,%d)
attempt to assemble code in ABSOLUTE space
specified segment not supported by rdf output format
WRT not supported by rdf output format
BSS segments may not be initialised
erm... 4 byte segment base ref?
can't find segment %d
label size exceeds %d bytes
zero-length label
proc
unrecognised symbol type `%s'
symbol type conflict - EXTERN cannot be EXPORT
symbol type conflict - GLOBAL cannot be IMPORT
value following comma must be numeric
unrecognised RDF segment type (%s)
segment attributes specified on redeclaration of segment
new segment declared without type code
seg_alloc() returned odd number
comment
lcomment
pcomment
symdebug
linedebug
name size exceeds %d bytes
library
module
.rdf
RDOFF2
??LINE
IEEE-695 (LADsoft variant) object file format
ieee
LADsoft Debug Records
ladsoft
Source of WRT must be an offset
unrecognised WRT value in ieee_write_fixup
target of WRT must be a section 
Segment of a rel not supported in ieee_write_fixup
unrecognised segment value in ieee_write_fixup
IEEE format can only handle 2-byte segment base references
strange segment conditions in IEEE driver
relative call to absolute address not supported by IEEE format
MBFNASM,%02X%s.
CO0,%02X%s.
AD8,4,L.
DT%04d%02d%02d%02d%02d%02d.
C0105,%02X%s.
CO101,07ENDHEAD.
ST%X,A,%02X%s.
ASL%X,%lX.
ST%X,%c,%02X%s.
SA%X,%lX.
ASS%X,%X.
Start address records are incorrect
ASG,R%X,%lX,+.
NI%X,%02X%s.
ASI%X,R%X,%lX,+.
ASI%X,%lX,%lX,+.
ATI%X,T%X.
ATI%X,%X.
NX%X,%02X%s.
CO100,06ENDSYM.
TY%X,20,%X,%lX.
NN%X,%02X%s.
ASN%X,R%X,%lX,+.
ASN%X,%lX,%lX,+.
ATN%X,T%X.
ATN%X,%X.
SB%X.
CS%02X.
%02X
L%lX,10,/
R%lX,%lX,+
R%lX,%lX,+,P,-,%X,-
R%lX,%lX,+,L%lX,+,%lX,-
R%lX,%lX,+,L%lX,+,L%lX,-
X%lX
X%lX,P,-,%lX,-
Y%lX,10,/
X%lX,Y%lX,+,%lX,-
X%lX,Y%lX,+,L%lX,-
LR(%s,%lX).
NeXTstep/OpenStep/Rhapsody/Darwin/MacOS X object files
macho
WRT not supported by Mach-O output format
attempt to assemble code in section %d: defaulting to `.text'
__TEXT
__text
text section not found
__DATA
__bss
Mach-O format does not support section base references
intra-section OUT_REL2ADR
intra-section OUT_REL4ADR
unknown output type?
too many sections (>255) - clipped by fileindex
The Mach-O output format does not support any special symbol types
The Mach-O format does not (yet) support forward reference fixups.
in-file index for section %d not found
unknown or missing alignment value "%s" specified for section "%s"
alignment of %d (for section "%s") is not a power of two
section "%s" has already been specified with alignment %d, conflicts with new alignment of %d
unknown section attribute %s for section %s
invalid section name %s
__data
__const
no sections?
%include
%define
%undef
unterminated string
(%s:%d) %s
..@%lu.
`%s': context stack is empty
`%s': context stack is only %d level%s deep
__FILE__
__LINE__
macro call expects terminating `)'
braces do not enclose all of macro parameter
macro `%s' exists, but not taking %d parameters
%idefine IDEAL
%idefine JUMPS
%idefine P386
%idefine P486
%idefine P586
%idefine END
%define __FILE__
%define __LINE__
%define __SECT__
%imacro section 1+.nolist
%define __SECT__ [section %1]
__SECT__
%imacro segment 1+.nolist
%define __SECT__ [segment %1]
%imacro absolute 1+.nolist
%define __SECT__ [absolute %1]
%imacro struc 1.nolist
%push struc
%define %$strucname %1
[absolute 0]
%$strucname:
%imacro endstruc 0.nolist
%{$strucname}_size:
%pop
%imacro istruc 1.nolist
%push istruc
%$strucstart:
%imacro at 1-2+.nolist
times %1-($-%$strucstart) db 0
%imacro iend 0.nolist
times %{$strucname}_size-($-%$strucstart) db 0
%imacro align 1-2+.nolist nop
times ($$-$) & ((%1)-1) %2
%imacro alignb 1-2+.nolist resb 1
%imacro extern 1-*.nolist
%rep %0
[extern %1]
%rotate 1
%endrep
%imacro bits 1+.nolist
[bits %1]
%imacro use16 0.nolist
[bits 16]
%imacro use32 0.nolist
[bits 32]
%imacro global 1-*.nolist
[global %1]
%imacro common 1-*.nolist
[common %1]
%imacro cpu 1+.nolist
[cpu %1]
%define __NASM_MAJOR__ 0
%define __NASM_MINOR__ 98
%define __NASM_SUBMINOR__ 40
%define __NASM_PATCHLEVEL__ 0
%define __NASM_VERSION_ID__ 000622800h
%define __NASM_VER__ "0.98.40 (Apple Computer, Inc. build 11)"
defining with name in expansion
`%%rep' without `%%endrep' within expansion of macro `%s'
expected `%%endif' before end of file
0123456789 
%%line %d %.*s
ifdef BOGUS
elif
else
endif
ifdef
ifdifi
ifndef
include
local
`%s': not in a macro call
macro parameter %d is not a condition code
condition code `%s' is not invertible
ecxz
unknown preprocessor directive `%s'
`%%stacksize' missing size parameter
large
small
`%%stacksize' invalid size type
`%%arg' missing argument parameter
Syntax error processing `%%arg' directive
`%%arg' missing size type parameter
Invalid size type for `%%arg' missing directive
%%define %s (%s+%d)
`%%local' missing argument parameter
Syntax error processing `%%local' directive
`%%local' missing size type parameter
Invalid size type for `%%local' missing directive
%%define %s (%s-%d)
%%assign %%$localsize %%$localsize+%d
trailing garbage after `%%clear' ignored
`%%include' expects a file name
trailing garbage after `%%include' ignored
`%%push' expects a context identifier
trailing garbage after `%%push' ignored
`%%repl' expects a context identifier
trailing garbage after `%%repl' ignored
`%%repl': context stack is empty
trailing garbage after `%%pop' ignored
`%%pop': context stack is already empty
`%s': no matching `%%if'
trailing garbage after `%%else' ignored
`%%else': no matching `%%if'
trailing garbage after `%%endif' ignored
`%%endif': no matching `%%if'
`%%%smacro': already defining a macro
`%%%smacro' expects a macro name
`%%%smacro' expects a parameter count
unable to parse parameter count `%s'
`%%%smacro' expects a parameter count after `-'
minimum parameter count exceeds maximum
.nolist
redefining multi-line macro `%s'
`%s': not defining a macro
`%%rotate' missing rotate count
trailing garbage after expression ignored
non-constant value given to `%%rotate'
`%%rotate' invoked outside a macro call
`%%rotate' invoked within macro without parameters
non-constant value given to `%%rep'
`%%rep' expects a repeat count
`%%endrep': no matching `%%rep'
`%%exitrep' not within `%%rep' block
`%%%s%sdefine' expects a macro identifier
parameter identifier expected
`%s': parameter identifier expected
`)' expected to terminate macro template
single-line macro `%s' defined both with and without parameters
`%%undef' expects a macro identifier
trailing garbage after macro name ignored
`%%strlen' expects a macro identifier as first parameter
`%%strlen` requires string as second parameter
`%%substr' expects a macro identifier as first parameter
`%%substr` requires string as second parameter
non-constant value given to `%%substr`
`%%%sassign' expects a macro identifier
non-constant value given to `%%%sassign'
`%%line' expects line number
`%%line' expects line increment
preprocessor directive `%s' not yet implemented
%arg
%assign
%clear
%elif
%elifctx
%elifdef
%elifid
%elifidn
%elifidni
%elifmacro
%elifnctx
%elifndef
%elifnid
%elifnidn
%elifnidni
%elifnmacro
%elifnnum
%elifnstr
%elifnum
%elifstr
%else
%endif
%endm
%error
%exitrep
%iassign
%idefine
%ifctx
%ifdef
%ifid
%ifidn
%ifidni
%ifmacro
%ifnctx
%ifndef
%ifnid
%ifnidn
%ifnidni
%ifnmacro
%ifnnum
%ifnstr
%ifnum
%ifstr
%imacro
%ixdefine
%local
%macro
%push
%rep
%repl
%rotate
%stacksize
%strlen
%substr
%xdefine
unable to open include file `%s'
`%s' expects context identifiers
`%s' expects macro identifiers
`%s' expects two comma-separated arguments
`%s': more than one comma on line
`%s' expects a macro name
`%s' expects a parameter count or nothing
`%s' expects a parameter count after `-'
non-constant value given to `%s'
character constant too long
end of file while still defining macro `%s'
unable to open listing file `%s'
%6ld 
%08lX %-*s
%s<%d>
    
0123456789ABCDEF
<res %08lX>
<incbin>
<rept>
invalid right-hand operand to WRT
`|' operator may only be applied to scalar values
`^' operator may only be applied to scalar values
`&' operator may only be applied to scalar values
`%s': operands differ by a non-scalar
shift operator may only be applied to scalar values
division operator may only be applied to scalar values
division by zero
unable to multiply two non-scalar objects
`~' operator may only be applied to scalar values
unable to determine segment base
%s not supported in preprocess-only mode
symbol references
`$$'
symbol `%s' undefined
symbol `%s' not defined before use
expression syntax error
cannot apply SEG to a non-relocatable value
SEG applied to something which is already a segment base
The Netwide Assembler 0.98.40 (Apple Computer, Inc. build 11)
The Netwide Assembler 0.98.40 (Apple Computer, Inc. build 11)
