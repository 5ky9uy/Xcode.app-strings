0000000000000000
                                                                                !
[0;30m
[0;31m
[0;32m
[0;33m
[0;34m
[0;35m
[0;36m
[0;37m
[0;1;30m
[0;1;31m
[0;1;32m
[0;1;33m
[0;1;34m
[0;1;35m
[0;1;36m
[0;1;37m
[0;40m
[0;41m
[0;42m
[0;43m
[0;44m
[0;45m
[0;46m
[0;47m
[0;1;40m
[0;1;41m
[0;1;42m
[0;1;43m
[0;1;44m
[0;1;45m
[0;1;46m
[0;1;47m
Driver
file specified in --source (-s) option doesn't exist: '%s'
command source -s %i '%s'
file specified in --core (-c) option doesn't exist: '%s'
target.load-cwd-lldbinit
true
file specified in --file (-f) option doesn't exist: '%s'
invalid architecture in the -a or --arch option: '%s'
Could not convert process PID: "%s" into a pid.
Unrecognized language name: "%s"
program arguments are ignored when attaching.
<PATH TOO LONG>
<COULD NOT FIND PATH>
target create --arch=%s %s
target create %s
 --core %s
settings set -- target.run-args 
target create --core %s
process attach --name %s
 --waitfor
process attach --pid %llu
commands specified to run after file load (via -o or -s) are ignored in REPL mode.
reproducer replay failed: 
-capture-path specified without -capture
reproducer capture failed: 
ignoring unknown option: 
initialization failed: 
<lldb.driver.main-thread>
write(%i, %p, %llu) failed (errno = %i) when trying to open LLDB commands pipe
fdopen(%i, "r") failed (errno = %i) when trying to open LLDB commands pipe
can't create pipe file descriptors for LLDB commands
attaching
ATTACHING
command
COMMANDS
repl
REPL
scripting
SCRIPTING
<input>
<unknown>
arch
Tells the debugger to use the specified architecture when starting and running the program.
<architecture>
attach-name
Tells the debugger to attach to a process with the given name.
<name>
attach-pid
Tells the debugger to attach to a process with the given pid.
<pid>
Alias for --arch
batch
Tells the debugger to run the commands from -s, -S, -o & -O, and then quit.
Alias for --batch
capture-path
Tells the debugger to use the given filename for the reproducer.
<filename>
capture
Tells the debugger to capture a reproducer.
core
Tells the debugger to use the full path to <filename> as the core file.
Alias for --core
debug
Tells the debugger to print out extra information for debugging itself.
Alias for --debug
editor
Tells the debugger to open source files using the host's "external editor" mechanism.
Alias for --editor
file
Tells the debugger to use the file <filename> as the program to be debugged.
Alias for --file
help
Prints out the usage information for the LLDB debugger.
Alias for --help
Alias for --source-on-crash
Alias for --one-line-on-crash
local-lldbinit
Allow the debugger to parse the .lldbinit files in the current working directory, unless --no-lldbinit is passed.
Alias for --script-language
no-lldbinit
Do not automatically parse any '.lldbinit' files.
no-use-colors
Do not use colors.
Alias for --attach-name
one-line-before-file
Tells the debugger to execute this one-line lldb command before any file provided on the command line has been loaded.
<command>
one-line-on-crash
When in batch mode, tells the debugger to source this file of lldb commands if the target crashes.
one-line
Tells the debugger to execute this one-line lldb command after any file provided on the command line has been loaded.
Alias for --one-line-before-file
Alias for --one-line
python-path
Prints out the path to the lldb.py file for this version of lldb.
Alias for --python-path
Alias for --attach-pid
Alias for --source-quietly
Alias for --repl=<flags>
<flags>
repl-language
Chooses the language for the REPL.
<language>
repl=
Runs lldb in REPL mode with a stub process with the given flags.
replay
Tells the debugger to replay a reproducer from <filename>.
Runs lldb in REPL mode with a stub process.
Alias for --repl-language
Alias for --repl
script-language
Tells the debugger to use the specified scripting language for user-defined scripts.
source-before-file
Tells the debugger to read in and execute the lldb commands in the given file, before any file has been loaded.
<file>
source-on-crash
source-quietly
Tells the debugger to execute this one-line lldb command before any file has been loaded.
source
Tells the debugger to read in and execute the lldb commands in the given file, after any file has been loaded.
Alias for --source-before-file
Alias for --source
version
Prints out the current version number of the LLDB debugger.
Alias for --version
wait-for
Tells the debugger to wait for a process with the given pid or name to launch before attaching.
Alias for --wait-for
Alias for --no-use-color
Alias for --no-lldbinit
options
LLDB
EXAMPLES:
  The debugger can be started in several modes.
  Passing an executable as a positional argument prepares lldb to debug the
  given executable. Arguments passed after -- are considered arguments to the
  debugged executable.
    lldb --arch x86_64 /path/to/program -- --arch arvm7
  Passing one of the attach options causes lldb to immediately attach to the
  given process.
    lldb -p <pid>
    lldb -n <process-name>
  Passing --repl starts lldb in REPL mode.
    lldb -r
  Passing --core causes lldb to debug the core file.
    lldb -c /path/to/core
  Command options can be combined with these modes and cause lldb to run the
  specified commands before or after events, like loading the file or crashing,
  in the order provided on the command line.
    lldb -O 'settings set stop-disassembly-count 20' -o 'run' -o 'bt'
    lldb -S /source/before/file -s /source/after/file
    lldb -K /source/before/crash -k /source/after/crash
  Note: In REPL mode no file is loaded, so commands specified to run after
  loading the file (via -o or -s) will be ignored.
OVERVIEW: 
USAGE: 
OPTIONS
 <value>
<value>
General options
: for the -
 option: 
may only occur zero or one times!
must occur exactly one time!
>...
' is invalid value for boolean argument! Try 0 or 1
 (default: 
*no default*
= *cannot print option value*
Generic Options
help-list
Display list of available options (-help-list-hidden for more)
help-list-hidden
Display list of all available options
Display available options (-help-hidden for more)
help-hidden
Display all available options
print-options
Print non-default options after command line parsing
print-all-options
Print all option values after command line parsing
Display the version of this program
: CommandLine Error: Option '
' registered more than once!
inconsistency in registered CommandLine options
Cannot specify more than one option with cl::ConsumeAfter!
  This option category has no options.
 [subcommand]
 [options]
SUBCOMMAND '
SUBCOMMANDS:
  Type "
 <subcommand> -help" to get more help on a specific subcommand
OPTIONS:
LLVM (http://llvm.org/):
LLVM
 version 
7.0.0
Optimized build
generic
(unknown)
  Default target: 
  Host CPU: 
SmallVector capacity overflow during allocation
LLVM ERROR: 
LLVM ERROR: out of memory
Allocation failed
Program arguments: 
Stack dump:
Color Options
color
Use colors in output (default=autodetect)
error: 
warning: 
IO failure on output stream: 
nehalem
westmere
sandybridge
amdfam10
bdver1
bdver2
bdver3
bdver4
znver1
ivybridge
haswell
broadwell
skylake
skylake-avx512
cannonlake
icelake-client
core2
penryn
cascadelake
k6-2
k6-3
geode
bonnell
silvermont
btver1
btver2
goldmont
goldmont-plus
i386
i486
pentium
pentium-mmx
pentiumpro
pentium2
pentium3
pentium4
pentium-m
yonah
nocona
prescott
athlon
athlon-xp
k8-sse3
-darwin
colors
PATH
disable-symbolication
Disable symbolizing crash backtraces.
llvm-symbolizer
%-2d
 %-*s
 %#0*lx
 + %u
LLVM_DISABLE_CRASH_REPORT
too many signal callbacks already registered
cl::location(x) specified more than once!
%LaL
invocation function for block in 
vtable for 
VTT for 
typeinfo for 
typeinfo name for 
covariant return thunk to 
thread-local wrapper routine for 
thread-local initialization routine for 
virtual thunk to 
non-virtual thunk to 
guard variable for 
reference temporary for 
auto
decltype(
alignof (
const_cast
dynamic_cast
noexcept (
reinterpret_cast
static_cast
sizeof (
sizeof... (
typeid (
throw
wchar_t
char
signed char
unsigned char
short
unsigned short
__int128
unsigned __int128
false
(anonymous namespace)
operator&&
operator&
operator&=
operator=
operator()
operator,
operator~
operator delete[]
operator*
operator delete
operator/
operator/=
operator^
operator^=
operator==
operator>=
operator>
operator[]
operator<=
operator<<
operator<<=
operator<
operator-
operator-=
operator*=
operator--
operator new[]
operator!=
operator!
operator new
operator||
operator|
operator|=
operator->*
operator+
operator+=
operator++
operator->
operator?
operator%
operator%=
operator>>
operator>>=
operator<=>
std::basic_string<char, std::char_traits<char>, std::allocator<char> >
allocator
basic_string
basic_istream
basic_ostream
basic_iostream
string literal
string
istream
ostream
iostream
void
bool
unsigned int
long
unsigned long
long long
unsigned long long
float
double
long double
__float128
decimal64
decimal128
decimal32
decimal16
char32_t
char16_t
decltype(auto)
std::nullptr_t
 complex
 imaginary
noexcept
struct
union
enum
objc_object
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.lldb</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>lldb</string>
<key>CFBundleVersion</key>
<string>1100.0.27.4</string>
<key>SecTaskAccess</key>
<array>
<string>allowed</string>
<string>debug</string>
</array>
</dict>
</plist>
