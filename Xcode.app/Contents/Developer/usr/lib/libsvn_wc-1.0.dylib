The existing node '%s' can not be restored.
The node '%s' can not be restored.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/adm_crawler.c
svn_dirent_is_absolute(local_abspath)
Error aborting report
Checksum mismatch for text base of '%s'
While preparing '%s' for commit
The node '%s' was not found.
Pristine checksum for file '%s' is missing
_svn
'%s' is not a valid administrative directory name
Can only get the pristine contents of files; '%s' is not a file
Cannot get the pristine contents of '%s' because its delete is already committed
Cannot get the pristine contents of '%s' because it has an unexpected status
Node '%s' has no pristine text
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/adm_files.c
svn_dirent_is_absolute(dir_abspath)
url != NULL
repos_root_url != NULL
repos_uuid != NULL
repos_relpath != NULL
Revision %ld doesn't match existing revision %ld in '%s'
URL '%s' (uuid: '%s') doesn't match existing URL '%s' (uuid: '%s') in '%s'
svn_dirent_is_absolute(adm_abspath)
pristine
entries
format
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/adm_ops.c
The URL '%s' has a different repository root than its parent
Can't schedule the working copy at '%s' from repository '%s' with uuid '%s' for addition under a working copy from repository '%s' with uuid '%s'.
Can't add '%s' with URL '%s', but with the data from '%s'
svn:mime-type
'%s' is not under version control
svn:needs-lock
! (new_changelist && new_changelist[0] == '\0')
!copyfrom_url || (svn_uri_is_canonical(copyfrom_url, scratch_pool) && SVN_IS_VALID_REVNUM(copyfrom_rev))
Can't create an entry with a reserved name while trying to add '%s'
'%s' not found
Unsupported node kind for path '%s'
'%s' is an existing item in conflict; please mark the conflict as resolved before adding a new item here
'%s' is already under version control
Can't find parent directory's node while trying to add '%s'
Can't add '%s' to a parent directory scheduled for deletion
Can't schedule an addition of '%s' below a not-directory node
svn:executable
nonexistent-path
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/ambient_depth_filter_editor.c
svn_dirent_is_absolute(anchor_abspath)
path || (! pb)
kind != NULL
path
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/cleanup.c
wc_ctx != NULL
'%s' is not a working copy directory
Log format too old, please use Subversion 1.6 or earlier
Not a conflict skel
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/conflicts.c
conflict_skel && conflict_skel->children && conflict_skel->children->next && !conflict_skel->children->next->is_atom
why == NULL
update
switch
merge
text
!text_conflict
prop
!prop_conflict
tree
!tree_conflict
reason == svn_wc_conflict_reason_moved_away || !move_src_op_root_abspath
Not a completed conflict skel
Conflict not set
conflict_skel != NULL
dir_conflicts
.prej
Conflict callback violated API: returned no results
err != NULL
Unable to resolve pending conflict on '%s'
Unable to resolve conflicts on '%s'
subversion
edited
added
deleted
replaced
obstructed
missing
unversioned
moved-away
moved-here
Conflict callback violated API: returned no merged file
choice == svn_wc_conflict_choose_postpone
Conflict on '%s' could not be resolved because the chosen version of the file is not available.
.edited
Tree conflict can only be resolved to 'working' or 'mine-conflict' state; '%s' not resolved
action == svn_wc_conflict_action_delete || action == svn_wc_conflict_action_replace
Tree conflict can only be resolved to 'working' state; '%s' is no longer moved
Tree conflict can only be resolved to 'working' state; '%s' not resolved
Invalid 'conflict_result' argument
No conflict-callback and no pre-defined conflict-choice provided
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/copy.c
svn_dirent_is_absolute(src_abspath)
svn_dirent_is_absolute(dst_abspath)
Deleted node '%s' can't be copied.
'%s' is the root of a working copy and cannot be moved
'%s' represents the repository root and cannot be moved
Cannot copy to '%s', as it is not from repository '%s'; it is from '%s'
Cannot copy to '%s' as it is scheduled for deletion
'%s' is already under version control but is excluded.
There is already a versioned item '%s'
'%s' already exists and is in the way
Cannot move mixed-revision subtree '%s' [%ld:%ld]; try updating it first
Source '%s' is unexpected kind
cannot handle node kind for '%s'
Cannot handle status of '%s'
info->status == svn_wc__db_status_server_excluded
Cannot copy '%s' excluded by server
Cannot exclude '%s': it is a working copy root
Cannot exclude '%s': it is a switched path
Cannot exclude '%s': it is to be added to the repository. Try commit instead
Cannot exclude '%s': it is to be deleted from the repository. Try commit instead
Can only crop a working copy with a restrictive depth
Can only crop directories
Cannot crop '%s': it is going to be removed from repository. Try commit instead
Cannot crop '%s': it is to be added to the repository. Try commit instead
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/crop.c
new_depth >= svn_depth_empty && new_depth <= svn_depth_infinity
'%s' cannot be deleted
'%s' is the root of a working copy and cannot be deleted
'%s' represents the repository root and cannot be deleted
'%s' does not exist
File '%s' has local modifications
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/deprecated.c
fp || new_name
strcmp(svn_dirent_basename(name, NULL), name) == 0
Unexpectedly found '%s': path is marked 'missing'
base_merge=TRUE is no longer supported; see notes/api-errata/1.7/wc006.txt
svn:special
svn:keywords
svn:eol-style
switch_url && svn_uri_is_canonical(switch_url, pool)
switch_url
Non-recursive relocation not supported
originalprops
svn_wc__diff_base_working_diff
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/diff_editor.c
status == svn_wc__db_status_normal || status == svn_wc__db_status_added || (status == svn_wc__db_status_deleted && diff_pristine)
checksum
svn_wc__diff_local_only_file
kind == svn_node_file && (status == svn_wc__db_status_normal || status == svn_wc__db_status_added || (status == svn_wc__db_status_deleted && diff_pristine))
diff_pristine
svn_wc__diff_local_only_dir
kind == svn_node_dir && (status == svn_wc__db_status_normal || status == svn_wc__db_status_incomplete || status == svn_wc__db_status_added || (status == svn_wc__db_status_deleted && diff_pristine))
status == svn_wc__db_status_normal && kind == svn_node_file && checksum
handle_local_only
!strchr(name, '/')
!pb->added || eb->ignore_ancestry
walk_local_nodes_diff
info->status == svn_wc__db_status_normal || info->status == svn_wc__db_status_added || info->status == svn_wc__db_status_deleted
Checksum mismatch for '%s'
close_file
fb->base_checksum
wrap_dir_opened
left_source || right_source
!left_source || !copyfrom_source
wrap_dir_changed
left_source && right_source
wrap_file_changed
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/diff_local.c
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/entries.c
entry->schedule == svn_wc_schedule_add || entry->schedule == svn_wc_schedule_normal
*entry != NULL && (*entry)->kind == svn_node_dir
Admin area of '%s' is missing
'%s' is not of the right kind
No default entry in directory '%s'
old_root_abspath[0]
'%s' has an unrecognized node kind
(wcroot) != NULL && (wcroot)->format == SVN_WC__VERSION
'%s' is not a versioned working copy
read_one_entry
parent_entry != NULL
entry->revision == SVN_INVALID_REVNUM
work_status == svn_wc__db_status_copied || work_status == svn_wc__db_status_moved_here
repos_relpath != NULL || entry->schedule == svn_wc_schedule_delete || status == svn_wc__db_status_not_present || status == svn_wc__db_status_server_excluded || status == svn_wc__db_status_excluded
checksum->kind == svn_checksum_md5
work_del_relpath != NULL
Unable to upgrade '%s' at line %d
No copyfrom URL for '%s'
Bad base MD5 checksum for '%s'; expected: '%s'; found '%s'; 
node->op_depth > 0 || node->repos_relpath
isdsnnnnsn
unknown
The file '%s' has no checksum
normal
server-excluded
excluded
not-present
incomplete
base-deleted
file
symlink
Directory '%s' has no THIS_DIR entry
Can't split line into components: '%s'
Error parsing %s property on '%s': '%s'
svn:externals
Invalid %s property on '%s': cannot use two absolute URLs ('%s' and '%s') in an external; one must be a path where an absolute or relative URL is checked out to
Invalid %s property on '%s': cannot use a URL '%s' as the target directory for an external definition
dummy
Invalid %s property on '%s': target '%s' is an absolute path or involves '..'
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/externals.c
kind == svn_node_dir
Illegal parent directory URL '%s'
Illegal repository root URL '%s'
The external relative URL '%s' cannot have backpaths, i.e. '..'
Unrecognized format for the relative external URL '%s'
-r%s
This editor can only update '%s'
Node '%s' is no existing file external
Base checksum mismatch for '%s'
svn:entry:last-author
svn:entry:committed-rev
svn:entry:committed-date
URL '%s' does not begin with a scheme
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/info.c
info->wc_info != NULL
Working copy '%s' locked
'%s' is not a working copy
Unable to check path existence for '%s'
Expected '%s' to be a directory but found a file
Can't retrieve an access baton for non-directory '%s'
Directory '%s' is missing
Working copy '%s' is not locked
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/lock.c
associated != NULL
No write-lock in '%s'
Can't obtain lock on non-directory '%s'.
lock_root_abspath != NULL
!strcmp(required_abspath, obtained_abspath) || svn_dirent_skip_ancestor(obtained_abspath, required_abspath)
!IS_MISSING(lock)
wc_format == SVN_WC__VERSION
Path '%s' ends in '%s', which is unsupported for this operation
existing_adm == NULL
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/merge.c
svn_dirent_is_absolute(left_abspath)
svn_dirent_is_absolute(right_abspath)
svn_dirent_is_absolute(target_abspath)
Can't merge into conflicted node '%s'
The property '%s' may not be merged into '%s'.
.tmp
=======
<<<<<<< %s
<<<<<<< .working
||||||| %s
||||||| .old
>>>>>>> %s
>>>>>>> .new
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/node.c
walk_depth >= svn_depth_empty && walk_depth <= svn_depth_infinity
!revision || SVN_IS_VALID_REVNUM(*revision)
!repos_relpath || *repos_relpath
!repos_root_url || *repos_root_url
!repos_uuid || *repos_uuid
Incomplete copy information on path '%s'.
'%s' is not the root of the working copy '%s'
Invalid version line in entries file of '%s'
Missing entry terminator
Invalid entry terminator
Error at entry %d in entries file for '%s':
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/old-and-busted.c
opt_rev
Found an unexpected \0 in the file external '%s'
HEAD:
endptr == s
HEAD
Illegal file external revision kind %d for path '%s'
XML parser failed in '%s'
entry
name
revision
repos
Entry for '%s' has invalid repository root
kind
Entry '%s' has invalid node kind
schedule
delete
replace
Entry '%s' has invalid 'schedule' value
prop-reject-file
conflict-old
conflict-new
conflict-wrk
copied
copyfrom-url
copyfrom-rev
absent
text-time
uuid
committed-date
committed-rev
last-author
lock-token
lock-owner
lock-comment
lock-creation-date
working-size
true
false
Entry '%s' has invalid '%s' value
Unexpected end of entry
keep-local
Entry '%s' has invalid 'depth' value
Entry contains non-canonical path '%s'
Invalid escape sequence
Invalid escaped character
Invalid value for field '%s'
Missing default entry
Default entry has no revision number
Default entry is missing URL
The node '%s' does not have properties in this state.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/props.c
new_actual_props != NULL
pristine_props != NULL
actual_props != NULL
props != NULL
receiver_func
Property '%s' is an entry property
kind != svn_prop_entry_kind
Failed to load properties
depth == svn_depth_empty
Can't set properties on '%s': invalid status for updating properties.
Unrecognized line ending style '%s' for '%s'
svn:ignore
svn:global-ignores
svn:auto-props
 (%d more duplicate targets found)
Invalid %s property on '%s': target '%s' appears more than once%s
svn:mergeinfo
Cannot set non-inheritable mergeinfo on a non-directory ('%s')
<<<<<<< (local property value)
>>>>>>> (incoming 'changed to' value)
||||||| (incoming 'changed from' value)
Local property value:
Cannot display: property value is binary data
Incoming property value:
incoming != NULL
!svn_string_compare(mine, incoming)
Trying to add new property '%s'
but the property already exists.
original != NULL
Trying to add new property '%s'
but the property has been locally deleted.
Trying to delete property '%s'
but the property has been locally added.
Trying to delete property '%s'
but the property has been locally modified.
Trying to delete property '%s'
but the property has been locally deleted and had a different value.
!svn_string_compare(original, incoming_base)
Trying to delete property '%s'
but the local property value is different.
!mine || !svn_string_compare(mine, incoming_base)
Trying to change property '%s'
but the local property value conflicts with the incoming change.
Trying to change property '%s'
but the property has already been locally changed to a different value.
Trying to change property '%s'
but the property has been locally deleted.
Trying to change property '%s'
but the property has been locally added with a different value.
Trying to change property '%s'
but the property does not exist locally.
Failed to load current properties
Property '%s' is a WC property, not a regular property
Cannot set '%s' on a directory ('%s')
Cannot set '%s' on a file ('%s')
'%s' is not a file or directory
Can't set '%s': file '%s' has binary mime type property
File '%s' has inconsistent newlines
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/questions.c
svn_dirent_is_absolute(versioned_file_abspath)
Cannot relocate '%s' as it is not the root of a working copy
Cannot relocate '%s' as it is not the root of a working copy; try relocating '%s' instead
Cannot relocate a single file
Invalid source URL prefix: '%s' (does not overlap target's URL '%s')
Invalid relocation destination: '%s' (not a URL)
Invalid relocation destination: '%s' (does not point to target)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/relocate.c
svn_path_is_url(url)
svn_relpath_is_canonical(relpath)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/revert.c
depth == svn_depth_empty || depth == svn_depth_infinity
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/revision_status.c
config
miscellany
global-ignores
*.o *.lo *.la *.al .libs *.so *.so.[0-9]* *.a *.pyc *.pyo __pycache__ *.rej *~ #*# .#* .*.swp .DS_Store [Tt]humbs.db
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/status.c
hash_stash
! svn_hash_gets(stat_hash, path)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/translate.c
svn_dirent_is_absolute(versioned_abspath)
CRLF
none
Invalid conflict info '%s' in tree conflict description
(null)
Empty 'victim' field in tree conflict description
Invalid 'node_kind' field in tree conflict description
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/tree_conflicts.c
conflict->node_kind == svn_node_dir || conflict->node_kind == svn_node_file || conflict->node_kind == svn_node_none
victim_basename[0]
conflict
is_valid_conflict_skel(c_skel)
svn_dirent_is_absolute(victim_abspath)
conflict != NULL
conflict->operation == svn_wc_operation_merge || (conflict->reason != svn_wc_conflict_reason_moved_away && conflict->reason != svn_wc_conflict_reason_moved_here)
Attempt to add tree conflict that already exists at '%s'
version
Unknown enumeration value in tree conflict description
Invalid version info in tree conflict description
is_valid_version_info_skel(skel)
.r%ld%s%s
.mine%s%s
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/update_editor.c
switch_url && svn_uri_is_canonical(switch_url, scratch_pool)
new_base_contents != NULL
new_base_props != NULL
Node '%s' exists.
repos_root_url
Copyfrom-url '%s' has different repository root than '%s'
'%s' is not an unmodified copied directory
Copyfrom '%s' doesn't match original location of '%s'
repos_root != NULL && repos_uuid != NULL
'%s'
is not the same repository as
'%s'
Path '%s' is not in the working copy
'%s' is not valid as filename in directory '%s'
pb != NULL
new_repos_relpath
action == svn_wc_conflict_action_add
action == svn_wc_conflict_action_delete
Unexpected attempt to add a node at path '%s'
Unexpected attempt to edit, delete, or replace a node at path '%s'
! (copyfrom_path || SVN_IS_VALID_REVNUM(copyfrom_rev))
Failed to add directory '%s': object of the same name as the administrative directory
conflicted
wc_kind == svn_node_file || wc_kind == svn_node_symlink
reason == svn_wc_conflict_reason_deleted || reason == svn_wc_conflict_reason_moved_away || reason == svn_wc_conflict_reason_replaced || reason == svn_wc_conflict_reason_obstructed
Couldn't do property merge
new_base_props != NULL && new_actual_props != NULL
db->propchanges->nelts == 0
Failed to add file '%s': object of the same name as the administrative directory
Checksum mismatch for '%s':
   expected:  %s
   recorded:  %s
!fb->original_checksum || fb->original_checksum->kind == svn_checksum_sha1
hb->expected_source_checksum->kind == hb->actual_source_checksum->kind
Checksum mismatch while updating '%s':
   expected:  %s
     actual:  %s
svn:entry:lock-token
prop->value == NULL
lock_state == svn_wc_notify_lock_state_unlocked
! fb->shadowed && ! fb->obstruction_found && ! fb->edit_obstructed
<=1.3
(unreleased development version)
Working copy '%s' is too old (format %d, created by Subversion %s)
Working copy '%s' is an old development version (format %d); to upgrade it, use a format 18 client, then use 'tools/dev/wc-ng/bump-to-19.py', then use the current client
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/upgrade.c
result_format == SVN_WC__VERSION
wcng
wc.db
empty-file
README.txt
dir-wcprops
wcprops
all-wcprops
text-base
props
prop-base
dir-props
dir-prop-base
dir-prop-revert
lock
Error parsing tree conflict skel
The working copy at '%s' is format 22 with WORKING nodes; use a format 22 client to diff/revert before using this client
The working copy at '%s' is format 26 with conflicts; use a format 26 client to resolve before using this client
.svn-base
isssssis
conflict_data != NULL
inherited_props
Can't upgrade '%s' as it is not a working copy
Can't upgrade '%s' as it is not a working copy root, the root is '%s'
Working copy '%s' can't be upgraded because the repository root is not available and can't be retrieved
Working copy '%s' can't be upgraded because the repository uuid is not available and can't be retrieved
Working copy '%s' can't be upgraded because it doesn't have a url
Cannot upgrade with existing logs; run a cleanup operation on this working copy using a client version which is compatible with this working copy's format (such as the version you are upgrading from), then retry the upgrade with the current version
This working copy is corrupt and cannot be upgraded. Please check out a new working copy.
.svn-revert
wcprops != NULL
Missing end of line in wcprops file for '%s'
.svn-work
The properties of '%s' are in an indeterminate state and cannot be upgraded. See issue #2530.
Insufficient NODES rows for '%s'
affected_rows == 1
'%s' is not a directory
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/util.c
@(#)1.9.4 (r1740329)
svn_uri_is_canonical(repos_url, result_pool) && svn_relpath_is_canonical(repos_relpath) && SVN_IS_VALID_REVNUM(revision)
No REPOSITORY table entry for id '%ld'
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/wc_db.c
depth == svn_depth_empty || depth == svn_depth_files || depth == svn_depth_immediates || depth == svn_depth_infinity
working-copy
exclusive-locking
The node '%s' is not in a working copy.
svn_uri_is_canonical(repos_root_url, scratch_pool)
SVN_IS_VALID_REVNUM(revision)
SVN_IS_VALID_REVNUM(changed_rev)
repos_relpath && repos_root_url && repos_uuid
checksum != NULL
target != NULL
status == svn_wc__db_status_server_excluded || status == svn_wc__db_status_excluded
Path '%s' is not moved
!repos_id || *repos_id != INVALID_REPOS_ID
The node '%s' has a corrupt checksum value.
svn_wc__db_base_get_info_internal
svn_sqlite__column_is_null(stmt, 13)
repos_id != INVALID_REPOS_ID
The node '%s' has a BASE status that has no properties.
svn_wc__db_depth_get_info
svn_sqlite__column_is_null(stmt, 12)
svn_dirent_is_ancestor(wcroot->abspath, record_ancestor_abspath)
svn_dirent_is_ancestor(wcroot->abspath, local_abspath)
The node '%s' is not an external.
db_kind == svn_node_file || db_kind == svn_node_dir
svn_dirent_is_absolute(dst_op_root_abspath)
(ocb.src_wcroot) != NULL && (ocb.src_wcroot)->format == SVN_WC__VERSION
(ocb.dst_wcroot) != NULL && (ocb.dst_wcroot)->format == SVN_WC__VERSION
isdsd
isdsds
(! original_repos_relpath && ! original_root_url && ! original_uuid && ! checksum && original_revision == SVN_INVALID_REVNUM) || (original_repos_relpath && original_root_url && original_uuid && checksum && original_revision != SVN_INVALID_REVNUM)
Not implemented.
is_complete
Unsupported depth for revert of '%s'
depth >= svn_depth_empty && depth <= svn_depth_infinity
(moved_to_wcroot) != NULL && (moved_to_wcroot)->format == SVN_WC__VERSION
Cannot move '%s' to '%s' because they are not in the same working copy
(target_wcroot) != NULL && (target_wcroot)->format == SVN_WC__VERSION
wcroot->wc_id == target_wcroot->wc_id
svn_wc__db_read_pristine_info
svn_sqlite__column_is_null(stmt, 14)
The node '%s' is not in working copy '%s'
The node '%s' is not installable
(depth == svn_depth_files) || (depth == svn_depth_immediates) || (depth == svn_depth_infinity)
svn_dirent_is_absolute(local_dir_abspath)
SVN_IS_VALID_REVNUM(new_revision)
lock != NULL
repos_id_p == NULL || repos_id != INVALID_REPOS_ID
Path '%s' was not moved here
local_relpath[0]
Node '%s' is not shadowed
issstsis
svn_dirent_is_absolute(wri_abspath)
id != NULL
work_item != NULL
wcroot != NULL
wcroot->format >= 1
svn_hash_gets(wcroot->access_cache, local_dir_abspath) == NULL
temp_dir_abspath != NULL
levels_to_lock >= -1
'%s' is already locked via '%s'.
Working copy not locked at '%s'.
SVN_IS_VALID_REVNUM(new_rev)
svn_relpath_is_canonical(new_repos_relpath)
Modification of '%s' already exists
isdd
affected_rows > 0
last_repos_root_url != NULL
Can't upgrade '%s' as it is not a working copy root
Working copy '%s' is too old and must be upgraded to at least format %d, as created by Subversion %s
Working copy upgrade failed
wcroot->sdb
The path '%s' is not in the working copy '%s'
isdsisrtst
pibb->repos_relpath != NULL
isdsisrtstrisnnnnns
The file '%s' has no checksum.
insert_base_node
pibb->status == svn_wc__db_status_normal || pibb->status == svn_wc__db_status_incomplete || pibb->props == NULL
repos_path != NULL || op_depth > 0
(repos_id != INVALID_REPOS_ID) == (repos_path != NULL)
isdsnnrsnsnnnnnnnnnnsn
status == svn_wc__db_status_server_excluded || status == svn_wc__db_status_excluded || status == svn_wc__db_status_not_present
!skel->is_atom
empty
files
immediates
infinity
ieb->presence == svn_wc__db_status_normal || ieb->presence == svn_wc__db_status_excluded
issttsis
Expected node '%s' to be deleted.
have_row
current_relpath[0] != '\0'
moved_child_relpath && strlen(moved_child_relpath) > 0
kind == svn_node_file || kind == svn_node_dir
issdst
isdsisrtnt
issbs
isdst
*ocb->src_relpath && *ocb->dst_relpath
issdstd
presence == svn_wc__db_status_normal
piwb->op_depth > 0
*local_relpath != '\0'
isdsnnntstrisnnnnnsns
insert_working_node
piwb->presence == svn_wc__db_status_normal || piwb->presence == svn_wc__db_status_incomplete || piwb->props == NULL
isii
Can't revert '%s' without reverting children
Can't revert '%s' without reverting parent
!destroy_wc || db != NULL
The node '%s' is not a committed directory
work_status == svn_wc__db_status_normal || work_status == svn_wc__db_status_not_present || work_status == svn_wc__db_status_base_deleted || work_status == svn_wc__db_status_incomplete || work_status == svn_wc__db_status_excluded
delete_node
*local_relpath
Cannot delete '%s' as '%s' is excluded by server
Cannot delete '%s' as it is excluded by server
Cannot delete '%s' as it is excluded
isds
Corrupt data for '%s'
Error reading node '%s'
Encountered invalid node state in column %d of info query to working copy database
The node '%s' comes from unexpected repository '%s', expected '%s'; if this node is a file external using the correct URL in the external definition can fix the problem, see issue #4087
find_conflict_descendants
local_relpath[0] != '\0'
The node '%s' has a status that has no properties.
repos_uuid
!svn_sqlite__column_is_null(stmt_info, 1)
!svn_sqlite__column_is_null(stmt_info, 2)
repos_id == svn_sqlite__column_int64(stmt_info, 1)
strcmp(repos_relpath, svn_sqlite__column_text(stmt_info, 2, NULL)) == 0
op_depth == relpath_depth(local_relpath)
issisrtstrisnbn
isss
op_depth == 0
!svn_sqlite__column_is_null(stmt, 1)
!svn_sqlite__column_is_null(stmt, 2)
*local_relpath != '\0' && *repos_relpath != '\0'
isdisr
to_op_depth > 0
isis
Expected node '%s' to be added.
child_relpath && strlen(child_relpath) > 0
'%s' is already locked.
Working copy '%s' locked.
Failed to lock working copy '%s'.
base_status == svn_wc__db_status_incomplete
istrs
database inconsistency at local_relpath='%s' verifying expression '%s'
(parent_relpath == NULL) ? (local_relpath[0] == '\0') : (strcmp(svn_relpath_dirname(local_relpath, iterpool), parent_relpath) == 0)
op_depth <= relpath_depth(local_relpath)
have_a_parent_row
status == svn_wc__db_status_normal || status == svn_wc__db_status_incomplete || status == svn_wc__db_status_added || status == svn_wc__db_status_deleted
old_checksum != NULL
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/wc_db_pristine.c
pristine_abspath != NULL
sha1_checksum != NULL
sha1_checksum->kind == svn_checksum_sha1
The pristine text with checksum '%s' was not found
contents != NULL
Can't read '%s' from pristine store because no checksum supplied
Unable to create pristine install stream
md5_checksum != NULL
md5_checksum->kind == svn_checksum_md5
(*md5_checksum)->kind == svn_checksum_md5
The pristine text with MD5 checksum '%s' was not found
(*sha1_checksum)->kind == svn_checksum_sha1
(src_wcroot) != NULL && (src_wcroot)->format == SVN_WC__VERSION
(dst_wcroot) != NULL && (dst_wcroot)->format == SVN_WC__VERSION
svn_dirent_is_absolute(wcroot_abspath)
hexdigest != NULL
Pristine text '%s' not present
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/wc_db_update_move.c
src_repos_relpath != NULL
svn_relpath_skip_ancestor(delete_relpath, local_relpath)
The node '%s' has not been moved away
Cannot apply update because move source %s' is a mixed-revision working copy
Cannot apply update because move source '%s' is a switched subtree
nmb && nmb->pb
nmb->shadowed && !nmb->pb->shadowed
child_relpath != NULL
'%s' already in conflict
create_tree_conflict
operation == svn_wc_operation_switch
sdtdd
'%s' is not in conflict
'%s' is not a valid tree-conflict victim
'%s' is already a moved away tree-conflict
'%s' is not deleted
Missing a row in WCROOT.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/wc_db_util.c
!svn_sqlite__column_is_null(stmt, 0)
Working copy database '%s' not found
relpath_depth
SELECT op_depth, repos_id, repos_path, presence, kind, revision, checksum,   translated_size, changed_revision, changed_date, changed_author, depth,   symlink_target, last_mod_time, properties, moved_here, inherited_props,   moved_to FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 ORDER BY op_depth DESC 
SELECT op_depth, nodes.repos_id, nodes.repos_path, presence, kind, revision,   checksum, translated_size, changed_revision, changed_date, changed_author,   depth, symlink_target, last_mod_time, properties, moved_here,   inherited_props,   lock_token, lock_owner, lock_comment, lock_date FROM nodes LEFT OUTER JOIN lock ON nodes.repos_id = lock.repos_id   AND nodes.repos_path = lock.repos_relpath WHERE wc_id = ?1 AND local_relpath = ?2 ORDER BY op_depth DESC 
SELECT repos_id, repos_path, presence, kind, revision, checksum,   translated_size, changed_revision, changed_date, changed_author, depth,   symlink_target, last_mod_time, properties, file_external FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
SELECT nodes.repos_id, nodes.repos_path, presence, kind, revision,   checksum, translated_size, changed_revision, changed_date, changed_author,   depth, symlink_target, last_mod_time, properties, file_external,   lock_token, lock_owner, lock_comment, lock_date FROM nodes LEFT OUTER JOIN lock ON nodes.repos_id = lock.repos_id   AND nodes.repos_path = lock.repos_relpath WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
SELECT local_relpath, nodes.repos_id, nodes.repos_path, presence, kind,   revision, depth, file_external FROM nodes WHERE wc_id = ?1 AND parent_relpath = ?2 AND op_depth = 0 
SELECT local_relpath, nodes.repos_id, nodes.repos_path, presence, kind,   revision, depth, file_external,   lock_token, lock_owner, lock_comment, lock_date FROM nodes LEFT OUTER JOIN lock ON nodes.repos_id = lock.repos_id   AND nodes.repos_path = lock.repos_relpath WHERE wc_id = ?1 AND parent_relpath = ?2 AND op_depth = 0 
SELECT op_depth, presence, kind, checksum, translated_size,   changed_revision, changed_date, changed_author, depth, symlink_target,   repos_id, repos_path, revision,   moved_here, moved_to, last_mod_time, properties FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth > 0 ORDER BY op_depth DESC LIMIT 1 
SELECT repos_id, repos_path, presence, kind, revision, checksum,   translated_size, changed_revision, changed_date, changed_author, depth,   symlink_target, properties, moved_to, moved_here FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = ?3 
SELECT op_depth, presence, kind, moved_to FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth > ?3 ORDER BY op_depth LIMIT 1 
SELECT op_depth FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth < ?3 ORDER BY op_depth DESC LIMIT 1 
SELECT changelist, properties, conflict_data FROM actual_node WHERE wc_id = ?1 AND local_relpath = ?2 
SELECT op_depth, nodes.repos_id, nodes.repos_path, presence, kind, revision,   checksum, translated_size, changed_revision, changed_date, changed_author,   depth, symlink_target, last_mod_time, properties, lock_token, lock_owner,   lock_comment, lock_date, local_relpath, moved_here, moved_to, file_external FROM nodes LEFT OUTER JOIN lock ON nodes.repos_id = lock.repos_id   AND nodes.repos_path = lock.repos_relpath AND op_depth = 0 WHERE wc_id = ?1 AND parent_relpath = ?2 ORDER BY local_relpath DESC, op_depth DESC 
SELECT op_depth, nodes.repos_id, nodes.repos_path, presence, kind, revision,   checksum, translated_size, changed_revision, changed_date, changed_author,   depth, symlink_target, last_mod_time, properties, lock_token, lock_owner,   lock_comment, lock_date, local_relpath, moved_here, moved_to, file_external FROM nodes LEFT OUTER JOIN lock ON nodes.repos_id = lock.repos_id   AND nodes.repos_path = lock.repos_relpath AND op_depth = 0 WHERE wc_id = ?1 AND parent_relpath = ?2 AND op_depth = 0 ORDER BY local_relpath DESC 
SELECT local_relpath, op_depth, presence, kind FROM nodes_current WHERE wc_id = ?1 AND parent_relpath = ?2 ORDER BY local_relpath 
SELECT local_relpath, changelist, properties, conflict_data FROM actual_node WHERE wc_id = ?1 AND parent_relpath = ?2 
SELECT root, uuid FROM repository WHERE id = ?1 
SELECT id FROM wcroot WHERE local_abspath IS NULL 
SELECT id FROM repository WHERE root = ?1 
INSERT INTO repository (root, uuid) VALUES (?1, ?2) 
INSERT OR REPLACE INTO nodes (   wc_id, local_relpath, op_depth, parent_relpath, repos_id, repos_path,   revision, presence, depth, kind, changed_revision, changed_date,   changed_author, checksum, properties, translated_size, last_mod_time,   dav_cache, symlink_target, file_external, moved_to, moved_here,   inherited_props) VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14,         ?15, ?16, ?17, ?18, ?19, ?20, ?21, ?22, ?23) 
SELECT local_relpath, kind, checksum, translated_size, last_mod_time FROM nodes n WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND presence in ('normal', 'incomplete')   AND op_depth = (SELECT MAX(op_depth)                   FROM NODES w                   WHERE w.wc_id = ?1                     AND w.local_relpath = n.local_relpath) ORDER BY local_relpath DESC 
DELETE FROM NODES WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)) 
DELETE FROM NODES WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = ?3 
DELETE FROM actual_node WHERE wc_id = ?1 AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND EXISTS(SELECT 1 FROM NODES b              WHERE b.wc_id = ?1                AND b.local_relpath = actual_node.local_relpath                AND op_depth = 0)   AND NOT EXISTS(SELECT 1 FROM NODES w                  WHERE w.wc_id = ?1                    AND w.local_relpath = actual_node.local_relpath                    AND op_depth > 0                    AND presence in ('normal', 'incomplete', 'not-present')) 
DELETE FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2   AND presence = 'base-deleted'   AND op_depth > ?3   AND op_depth = (SELECT MIN(op_depth) FROM nodes n                     WHERE n.wc_id = ?1                       AND n.local_relpath = nodes.local_relpath                       AND op_depth > ?3) 
DELETE FROM nodes WHERE wc_id = ?1 AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND presence = 'base-deleted'   AND op_depth > ?3   AND op_depth = (SELECT MIN(op_depth) FROM nodes n                     WHERE n.wc_id = ?1                       AND n.local_relpath = nodes.local_relpath                       AND op_depth > ?3) 
DELETE FROM nodes WHERE wc_id = ?1 AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth > 0 
DELETE FROM nodes WHERE wc_id = ?1 AND (local_relpath = ?2                       OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND op_depth = 0 
DELETE FROM nodes WHERE wc_id = ?1   AND (local_relpath = ?2 OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND op_depth = ?3 
SELECT s.local_relpath, s.kind,   (CASE WHEN (?2) = '' THEN (CASE WHEN (?4) = '' THEN (s.local_relpath) WHEN (s.local_relpath) = '' THEN (?4) ELSE (?4) || '/' || (s.local_relpath) END) WHEN (?4) = '' THEN (CASE WHEN (?2) = '' THEN (s.local_relpath)  WHEN SUBSTR((s.local_relpath), 1, LENGTH(?2)) = (?2)  THEN CASE WHEN LENGTH(?2) = LENGTH(s.local_relpath) THEN '' WHEN SUBSTR((s.local_relpath), LENGTH(?2)+1, 1) = '/' THEN SUBSTR((s.local_relpath), LENGTH(?2)+2) END END) WHEN SUBSTR((s.local_relpath), 1, LENGTH(?2)) = (?2) THEN CASE WHEN LENGTH(?2) = LENGTH(s.local_relpath) THEN (?4) WHEN SUBSTR((s.local_relpath), LENGTH(?2)+1, 1) = '/' THEN (?4) || SUBSTR((s.local_relpath), LENGTH(?2)+1) END END) drp, 'normal' FROM nodes s WHERE s.wc_id = ?1 AND s.local_relpath = ?2 AND s.op_depth = ?3 UNION ALL SELECT s.local_relpath, s.kind,   (CASE WHEN (?2) = '' THEN (CASE WHEN (?4) = '' THEN (s.local_relpath) WHEN (s.local_relpath) = '' THEN (?4) ELSE (?4) || '/' || (s.local_relpath) END) WHEN (?4) = '' THEN (CASE WHEN (?2) = '' THEN (s.local_relpath)  WHEN SUBSTR((s.local_relpath), 1, LENGTH(?2)) = (?2)  THEN CASE WHEN LENGTH(?2) = LENGTH(s.local_relpath) THEN '' WHEN SUBSTR((s.local_relpath), LENGTH(?2)+1, 1) = '/' THEN SUBSTR((s.local_relpath), LENGTH(?2)+2) END END) WHEN SUBSTR((s.local_relpath), 1, LENGTH(?2)) = (?2) THEN CASE WHEN LENGTH(?2) = LENGTH(s.local_relpath) THEN (?4) WHEN SUBSTR((s.local_relpath), LENGTH(?2)+1, 1) = '/' THEN (?4) || SUBSTR((s.local_relpath), LENGTH(?2)+1) END END) drp, d.presence FROM nodes s LEFT OUTER JOIN nodes d ON d.wc_id= ?1 AND d.op_depth = ?5      AND d.local_relpath = drp WHERE s.wc_id = ?1   AND (((s.local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((s.local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND s.op_depth = ?3 ORDER BY s.local_relpath 
SELECT local_relpath, kind FROM nodes WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth = ?3   AND presence in ('normal', 'incomplete') ORDER BY local_relpath DESC 
INSERT OR REPLACE INTO nodes (     wc_id, local_relpath, op_depth, parent_relpath, repos_id, repos_path,     revision, presence, depth, kind, changed_revision, changed_date,     changed_author, checksum, properties, translated_size, last_mod_time,     symlink_target, moved_here, moved_to ) SELECT     s.wc_id, ?4 , ?5 , ?6 ,     s.repos_id,     s.repos_path, s.revision, s.presence, s.depth, s.kind, s.changed_revision,     s.changed_date, s.changed_author, s.checksum, s.properties,     CASE WHEN d.checksum=s.checksum THEN d.translated_size END,     CASE WHEN d.checksum=s.checksum THEN d.last_mod_time END,     s.symlink_target, 1, d.moved_to FROM nodes s LEFT JOIN nodes d ON d.wc_id=?1 AND d.local_relpath=?4 AND d.op_depth=?5 WHERE s.wc_id = ?1 AND s.local_relpath = ?2 AND s.op_depth = ?3 
SELECT d.local_relpath, (CASE WHEN (?2) = '' THEN (CASE WHEN (?4) = '' THEN (d.local_relpath) WHEN (d.local_relpath) = '' THEN (?4) ELSE (?4) || '/' || (d.local_relpath) END) WHEN (?4) = '' THEN (CASE WHEN (?2) = '' THEN (d.local_relpath)  WHEN SUBSTR((d.local_relpath), 1, LENGTH(?2)) = (?2)  THEN CASE WHEN LENGTH(?2) = LENGTH(d.local_relpath) THEN '' WHEN SUBSTR((d.local_relpath), LENGTH(?2)+1, 1) = '/' THEN SUBSTR((d.local_relpath), LENGTH(?2)+2) END END) WHEN SUBSTR((d.local_relpath), 1, LENGTH(?2)) = (?2) THEN CASE WHEN LENGTH(?2) = LENGTH(d.local_relpath) THEN (?4) WHEN SUBSTR((d.local_relpath), LENGTH(?2)+1, 1) = '/' THEN (?4) || SUBSTR((d.local_relpath), LENGTH(?2)+1) END END) srp,        b.presence, b.op_depth FROM nodes d LEFT OUTER JOIN nodes b ON b.wc_id = ?1 AND b.local_relpath = d.local_relpath             AND b.op_depth = (SELECT MAX(x.op_depth) FROM nodes x                               WHERE x.wc_id = ?1                                 AND x.local_relpath = b.local_relpath                                 AND x.op_depth < ?3) WHERE d.wc_id = ?1   AND (((d.local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((d.local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND d.op_depth = ?3   AND NOT EXISTS(SELECT * FROM nodes s                  WHERE s.wc_id = ?1                    AND s.local_relpath = srp                    AND s.op_depth = ?5) ORDER BY d.local_relpath DESC 
SELECT local_relpath, kind FROM nodes WHERE wc_id = ?1   AND parent_relpath = ?2   AND op_depth = ?3   AND presence != 'base-deleted'   AND file_external is NULL ORDER BY local_relpath 
SELECT local_relpath, kind FROM nodes WHERE wc_id = ?1   AND parent_relpath = ?2   AND op_depth = ?3   AND presence IN ('normal', 'incomplete') ORDER BY local_relpath 
SELECT 1 FROM nodes WHERE wc_id = ?1 AND parent_relpath = ?2   AND (op_depth > ?3 OR (op_depth = ?3                          AND presence IN ('normal', 'incomplete'))) UNION ALL SELECT 1 FROM ACTUAL_NODE a WHERE wc_id = ?1 AND parent_relpath = ?2   AND NOT EXISTS (SELECT 1 FROM nodes n                    WHERE wc_id = ?1 AND n.local_relpath = a.local_relpath) 
DELETE FROM nodes WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND (op_depth < ?3        OR (op_depth = ?3 AND presence = 'base-deleted')) 
UPDATE NODES SET moved_to = NULL WHERE wc_id = ?1   AND moved_to = ?2 
SELECT local_relpath FROM nodes WHERE wc_id = ?1 AND op_depth = ?3   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND presence = 'not-present' 
UPDATE NODES SET op_depth = 0,                  repos_id = ?4,                  repos_path = (CASE WHEN (?2) = '' THEN (CASE WHEN (?5) = '' THEN (local_relpath) WHEN (local_relpath) = '' THEN (?5) ELSE (?5) || '/' || (local_relpath) END) WHEN (?5) = '' THEN (CASE WHEN (?2) = '' THEN (local_relpath)  WHEN SUBSTR((local_relpath), 1, LENGTH(?2)) = (?2)  THEN CASE WHEN LENGTH(?2) = LENGTH(local_relpath) THEN '' WHEN SUBSTR((local_relpath), LENGTH(?2)+1, 1) = '/' THEN SUBSTR((local_relpath), LENGTH(?2)+2) END END) WHEN SUBSTR((local_relpath), 1, LENGTH(?2)) = (?2) THEN CASE WHEN LENGTH(?2) = LENGTH(local_relpath) THEN (?5) WHEN SUBSTR((local_relpath), LENGTH(?2)+1, 1) = '/' THEN (?5) || SUBSTR((local_relpath), LENGTH(?2)+1) END END),                  revision = ?6,                  dav_cache = NULL,                  moved_here = NULL,                  moved_to = NULL,                  presence = CASE presence                               WHEN 'normal' THEN 'normal'                               WHEN 'excluded' THEN 'excluded'                               ELSE 'not-present'                             END WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth = ?3 
SELECT DISTINCT local_relpath FROM nodes WHERE wc_id = ?1 AND parent_relpath = ?2 ORDER BY local_relpath 
SELECT DISTINCT local_relpath FROM nodes WHERE wc_id = ?1 AND parent_relpath = ?2   AND (op_depth > (SELECT MAX(op_depth) FROM nodes                    WHERE wc_id = ?1 AND local_relpath = ?2)        OR        (op_depth = (SELECT MAX(op_depth) FROM nodes                     WHERE wc_id = ?1 AND local_relpath = ?2)         AND presence IN ('normal', 'incomplete'))) ORDER BY local_relpath 
SELECT local_relpath FROM nodes WHERE wc_id = ?1 AND parent_relpath = ?2 AND op_depth = 0   AND presence = 'not-present' ORDER BY local_relpath 
SELECT properties, presence FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 ORDER BY op_depth DESC 
SELECT properties FROM actual_node WHERE wc_id = ?1 AND local_relpath = ?2 
UPDATE actual_node SET properties = ?3 WHERE wc_id = ?1 AND local_relpath = ?2 
INSERT INTO actual_node (wc_id, local_relpath, parent_relpath, properties) VALUES (?1, ?2, ?3, ?4) 
INSERT OR REPLACE INTO lock (repos_id, repos_relpath, lock_token, lock_owner, lock_comment,  lock_date) VALUES (?1, ?2, ?3, ?4, ?5, ?6) 
SELECT nodes.repos_id, nodes.repos_path, lock_token FROM nodes LEFT JOIN lock ON nodes.repos_id = lock.repos_id   AND nodes.repos_path = lock.repos_relpath WHERE wc_id = ?1 AND op_depth = 0   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)) 
INSERT INTO wcroot (local_abspath) VALUES (?1) 
UPDATE nodes SET dav_cache = ?3 WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
SELECT dav_cache FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
SELECT b.presence, w.presence, w.op_depth, w.moved_to FROM nodes w LEFT JOIN nodes b ON b.wc_id = ?1 AND b.local_relpath = ?2 AND b.op_depth = 0 WHERE w.wc_id = ?1 AND w.local_relpath = ?2   AND w.op_depth = (SELECT MAX(op_depth) FROM nodes d                     WHERE d.wc_id = ?1 AND d.local_relpath = ?2                       AND d.op_depth > 0) LIMIT 1 
SELECT op_depth, moved_to FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND moved_to IS NOT NULL ORDER BY op_depth DESC 
SELECT op_depth, moved_to FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth > ?3   AND EXISTS(SELECT * from nodes              WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = ?3              AND presence IN ('normal', 'incomplete')) ORDER BY op_depth ASC LIMIT 1 
SELECT moved_to FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = ?3 
SELECT u.local_relpath,        u.presence, u.repos_id, u.repos_path, u.revision,        l.presence, l.repos_id, l.repos_path, l.revision,        u.moved_here, u.moved_to FROM nodes u LEFT OUTER JOIN nodes l ON l.wc_id = ?1                        AND l.local_relpath = u.local_relpath                        AND l.op_depth = ?3 WHERE u.wc_id = ?1   AND u.local_relpath = ?2   AND u.op_depth = ?4 UNION ALL SELECT u.local_relpath,        u.presence, u.repos_id, u.repos_path, u.revision,        l.presence, l.repos_id, l.repos_path, l.revision,        u.moved_here, NULL FROM nodes u LEFT OUTER JOIN nodes l ON l.wc_id=?1                        AND l.local_relpath=u.local_relpath                        AND l.op_depth=?3 WHERE u.wc_id = ?1   AND (((u.local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((u.local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND u.op_depth = ?4 
DELETE FROM lock WHERE repos_id = ?1 AND repos_relpath = ?2 
DELETE FROM lock WHERE repos_id = ?1 AND (repos_relpath = ?2 OR (((repos_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((repos_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))) 
UPDATE nodes SET dav_cache = NULL WHERE dav_cache IS NOT NULL AND wc_id = ?1 AND op_depth = 0   AND (local_relpath = ?2        OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))) 
UPDATE nodes SET repos_id = ?4, dav_cache = NULL WHERE (wc_id = ?1 AND local_relpath = ?2 AND repos_id = ?3)    OR (wc_id = ?1 AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))        AND repos_id = ?3) 
UPDATE lock SET repos_id = ?2 WHERE repos_id = ?1 
UPDATE nodes SET translated_size = ?3, last_mod_time = ?4 WHERE wc_id = ?1 AND local_relpath = ?2   AND op_depth = (SELECT MAX(op_depth) FROM nodes                   WHERE wc_id = ?1 AND local_relpath = ?2) 
INSERT INTO actual_node (wc_id, local_relpath, conflict_data, parent_relpath) VALUES (?1, ?2, ?3, ?4) 
UPDATE actual_node SET conflict_data = ?3 WHERE wc_id = ?1 AND local_relpath = ?2 
UPDATE actual_node SET changelist = ?3 WHERE wc_id = ?1   AND (local_relpath = ?2 OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND local_relpath = (SELECT local_relpath FROM targets_list AS t                        WHERE wc_id = ?1                          AND t.local_relpath = actual_node.local_relpath                          AND kind = 'file') 
UPDATE actual_node SET changelist = NULL  WHERE wc_id = ?1 AND local_relpath = ?2 
INSERT INTO changelist_list (wc_id, local_relpath, notify, changelist) SELECT wc_id, local_relpath, 7, ?3 FROM targets_list WHERE wc_id = ?1   AND (local_relpath = ?2 OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND kind = 'dir' 
REPLACE INTO actual_node (   wc_id, local_relpath, parent_relpath, changelist) VALUES (?1, ?2, ?3, ?4) 
DROP TABLE IF EXISTS changelist_list; CREATE TEMPORARY TABLE changelist_list (   wc_id  INTEGER NOT NULL,   local_relpath TEXT NOT NULL,   notify INTEGER NOT NULL,   changelist TEXT NOT NULL,   PRIMARY KEY (wc_id, local_relpath, notify DESC) ) 
DROP TRIGGER IF EXISTS   trigger_changelist_list_change; CREATE TEMPORARY TRIGGER trigger_changelist_list_change BEFORE UPDATE ON actual_node WHEN old.changelist IS NOT new.changelist BEGIN   INSERT INTO changelist_list(wc_id, local_relpath, notify, changelist)   SELECT old.wc_id, old.local_relpath, 27, old.changelist    WHERE old.changelist is NOT NULL;   INSERT INTO changelist_list(wc_id, local_relpath, notify, changelist)   SELECT new.wc_id, new.local_relpath, 26, new.changelist    WHERE new.changelist IS NOT NULL; END 
DROP TRIGGER trigger_changelist_list_change; DROP TABLE changelist_list; DROP TABLE targets_list 
SELECT wc_id, local_relpath, notify, changelist FROM changelist_list ORDER BY wc_id, local_relpath ASC, notify DESC 
DROP TABLE IF EXISTS targets_list; CREATE TEMPORARY TABLE targets_list (   wc_id  INTEGER NOT NULL,   local_relpath TEXT NOT NULL,   parent_relpath TEXT,   kind TEXT NOT NULL,   PRIMARY KEY (wc_id, local_relpath)   ); 
DROP TABLE targets_list 
INSERT INTO targets_list(wc_id, local_relpath, parent_relpath, kind) SELECT wc_id, local_relpath, parent_relpath, kind FROM nodes_current WHERE wc_id = ?1   AND local_relpath = ?2 
INSERT INTO targets_list(wc_id, local_relpath, parent_relpath, kind) SELECT wc_id, local_relpath, parent_relpath, kind FROM nodes_current WHERE wc_id = ?1   AND parent_relpath = ?2   AND kind = 'file' 
INSERT INTO targets_list(wc_id, local_relpath, parent_relpath, kind) SELECT wc_id, local_relpath, parent_relpath, kind FROM nodes_current WHERE wc_id = ?1   AND parent_relpath = ?2 
INSERT INTO targets_list(wc_id, local_relpath, parent_relpath, kind) SELECT wc_id, local_relpath, parent_relpath, kind FROM nodes_current WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)) 
INSERT INTO targets_list(wc_id, local_relpath, parent_relpath, kind) SELECT N.wc_id, N.local_relpath, N.parent_relpath, N.kind   FROM actual_node AS A JOIN nodes_current AS N     ON A.wc_id = N.wc_id AND A.local_relpath = N.local_relpath  WHERE N.wc_id = ?1    AND N.local_relpath = ?2    AND A.changelist = ?3 
INSERT INTO targets_list(wc_id, local_relpath, parent_relpath, kind) SELECT N.wc_id, N.local_relpath, N.parent_relpath, N.kind   FROM actual_node AS A JOIN nodes_current AS N     ON A.wc_id = N.wc_id AND A.local_relpath = N.local_relpath  WHERE N.wc_id = ?1    AND N.parent_relpath = ?2    AND kind = 'file'    AND A.changelist = ?3 
INSERT INTO targets_list(wc_id, local_relpath, parent_relpath, kind) SELECT N.wc_id, N.local_relpath, N.parent_relpath, N.kind   FROM actual_node AS A JOIN nodes_current AS N     ON A.wc_id = N.wc_id AND A.local_relpath = N.local_relpath  WHERE N.wc_id = ?1    AND N.parent_relpath = ?2   AND A.changelist = ?3 
INSERT INTO targets_list(wc_id, local_relpath, parent_relpath, kind) SELECT N.wc_id, N.local_relpath, N.parent_relpath, N.kind   FROM actual_node AS A JOIN nodes_current AS N     ON A.wc_id = N.wc_id AND A.local_relpath = N.local_relpath  WHERE N.wc_id = ?1    AND (((N.local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((N.local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))    AND A.changelist = ?3 
INSERT OR IGNORE INTO actual_node (      wc_id, local_relpath, parent_relpath) SELECT wc_id, local_relpath, parent_relpath FROM targets_list 
INSERT OR IGNORE INTO actual_node (      wc_id, local_relpath, parent_relpath) SELECT wc_id, local_relpath, parent_relpath FROM targets_list WHERE kind='file' 
DELETE FROM actual_node WHERE wc_id = ?1 AND local_relpath = ?2   AND properties IS NULL   AND conflict_data IS NULL   AND changelist IS NULL   AND text_mod IS NULL   AND older_checksum IS NULL   AND right_checksum IS NULL   AND left_checksum IS NULL 
DELETE FROM actual_node WHERE wc_id = ?1   AND (local_relpath = ?2 OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND properties IS NULL   AND conflict_data IS NULL   AND changelist IS NULL   AND text_mod IS NULL   AND older_checksum IS NULL   AND right_checksum IS NULL   AND left_checksum IS NULL 
DELETE FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
DELETE FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2   AND op_depth = (SELECT MAX(op_depth) FROM nodes                   WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth > 0) 
DELETE FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2   AND op_depth = (SELECT MIN(op_depth) FROM nodes                   WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth > ?3)   AND presence = 'base-deleted' 
DELETE FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 
DELETE FROM nodes WHERE wc_id = ?1   AND (local_relpath = ?2        OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND op_depth >= ?3 
DELETE FROM actual_node WHERE wc_id = ?1 AND local_relpath = ?2 
DELETE FROM actual_node WHERE wc_id = ?1   AND (local_relpath = ?2        OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))) 
DELETE FROM actual_node WHERE wc_id = ?1   AND local_relpath = ?2   AND (changelist IS NULL        OR NOT EXISTS (SELECT 1 FROM nodes_current c                       WHERE c.wc_id = ?1 AND c.local_relpath = ?2                         AND c.kind = 'file')) 
DELETE FROM actual_node WHERE wc_id = ?1   AND (local_relpath = ?2        OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND (changelist IS NULL        OR NOT EXISTS (SELECT 1 FROM nodes_current c                       WHERE c.wc_id = ?1                         AND c.local_relpath = actual_node.local_relpath                         AND c.kind = 'file')) 
UPDATE actual_node SET properties = NULL,     text_mod = NULL,     conflict_data = NULL,     tree_conflict_data = NULL,     older_checksum = NULL,     left_checksum = NULL,     right_checksum = NULL WHERE wc_id = ?1 AND local_relpath = ?2 
UPDATE actual_node SET properties = NULL,     text_mod = NULL,     tree_conflict_data = NULL,     older_checksum = NULL,     left_checksum = NULL,     right_checksum = NULL,     changelist = NULL WHERE wc_id = ?1 AND local_relpath = ?2 
UPDATE actual_node SET properties = NULL,     text_mod = NULL,     conflict_data = NULL,     tree_conflict_data = NULL,     older_checksum = NULL,     left_checksum = NULL,     right_checksum = NULL WHERE wc_id = ?1   AND (local_relpath = ?2        OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))) 
UPDATE nodes SET depth = ?3 WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0   AND kind='dir'   AND presence IN ('normal', 'incomplete') 
UPDATE nodes SET presence = ?3 WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
UPDATE nodes SET presence = ?3, revision = ?4, repos_path = ?5 WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
SELECT id FROM work_queue LIMIT 1 
INSERT INTO work_queue (work) VALUES (?1) 
SELECT id, work FROM work_queue ORDER BY id LIMIT 1 
DELETE FROM work_queue WHERE id = ?1 
INSERT OR IGNORE INTO pristine (checksum, md5_checksum, size, refcount) VALUES (?1, ?2, ?3, 0) 
INSERT INTO pristine (checksum, md5_checksum, size, refcount) VALUES (?1, ?2, ?3, 0) 
SELECT md5_checksum FROM pristine WHERE checksum = ?1 
SELECT size FROM pristine WHERE checksum = ?1 LIMIT 1 
SELECT checksum FROM pristine WHERE md5_checksum = ?1 
SELECT checksum FROM pristine WHERE refcount = 0 
DELETE FROM pristine WHERE checksum = ?1 AND refcount = 0 
SELECT n.checksum, md5_checksum, size FROM nodes_current n LEFT JOIN pristine p ON n.checksum = p.checksum WHERE wc_id = ?1   AND n.local_relpath = ?2   AND n.checksum IS NOT NULL UNION ALL SELECT n.checksum, md5_checksum, size FROM nodes n LEFT JOIN pristine p ON n.checksum = p.checksum WHERE wc_id = ?1   AND (((n.local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((n.local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth >=       (SELECT MAX(op_depth) FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2)   AND n.checksum IS NOT NULL 
VACUUM 
SELECT local_relpath, conflict_data FROM actual_node WHERE wc_id = ?1 AND parent_relpath = ?2 AND   NOT (conflict_data IS NULL) 
INSERT INTO wc_lock (wc_id, local_dir_relpath, locked_levels) VALUES (?1, ?2, ?3) 
SELECT locked_levels FROM wc_lock WHERE wc_id = ?1 AND local_dir_relpath = ?2 
SELECT local_dir_relpath, locked_levels FROM wc_lock WHERE wc_id = ?1   AND ((local_dir_relpath >= ?3 AND local_dir_relpath <= ?2)        OR local_dir_relpath = '') 
DELETE FROM wc_lock WHERE wc_id = ?1 AND local_dir_relpath = ?2 
SELECT local_dir_relpath FROM wc_lock WHERE wc_id = ?1   AND (((local_dir_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_dir_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)) 
SELECT 1 FROM actual_node WHERE wc_id = ?1   AND local_relpath > (?2 || '/')   AND local_relpath < (?2 || '0')   AND conflict_data IS NOT NULL LIMIT 1 
DELETE FROM wc_lock WHERE wc_id = ?1 AND local_dir_relpath = ?2 AND NOT EXISTS (SELECT 1 FROM nodes                  WHERE nodes.wc_id = ?1                    AND nodes.local_relpath = wc_lock.local_dir_relpath) 
DELETE FROM wc_lock WHERE wc_id = ?1   AND (local_dir_relpath = ?2        OR (((local_dir_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_dir_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND NOT EXISTS (SELECT 1 FROM nodes                    WHERE nodes.wc_id = ?1                      AND nodes.local_relpath = wc_lock.local_dir_relpath) 
INSERT OR REPLACE INTO nodes (   wc_id, local_relpath, op_depth, parent_relpath, repos_id, repos_path,   revision, presence, depth, kind, changed_revision, changed_date,   changed_author, checksum, properties, dav_cache, symlink_target,   inherited_props, file_external ) VALUES (?1, ?2, 0,         ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16, ?17,         (SELECT file_external FROM nodes           WHERE wc_id = ?1             AND local_relpath = ?2             AND op_depth = 0)) 
INSERT INTO nodes (     wc_id, local_relpath, op_depth,     parent_relpath, presence, kind) VALUES(?1, ?2, ?3, ?4, 'base-deleted', ?5) 
INSERT OR REPLACE INTO nodes (wc_id, local_relpath, op_depth, parent_relpath,                               kind, moved_to, presence) SELECT wc_id, local_relpath, op_depth, parent_relpath,        kind, moved_to, 'base-deleted'   FROM nodes  WHERE wc_id = ?1    AND local_relpath = ?2    AND op_depth = ?3 
INSERT INTO nodes (     wc_id, local_relpath, op_depth, parent_relpath, presence, kind) SELECT wc_id, local_relpath, ?4 , parent_relpath, 'base-deleted',        kind FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = ?3 UNION ALL SELECT wc_id, local_relpath, ?4 , parent_relpath, 'base-deleted',        kind FROM nodes WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth = ?3   AND presence NOT IN ('base-deleted', 'not-present', 'excluded', 'server-excluded')   AND file_external IS NULL ORDER BY local_relpath 
INSERT OR REPLACE INTO nodes (     wc_id, local_relpath, op_depth, parent_relpath, repos_id, repos_path,     revision, presence, depth, kind, changed_revision, changed_date,     changed_author, checksum, properties, translated_size, last_mod_time,     symlink_target, moved_to ) SELECT wc_id, local_relpath, ?3 , parent_relpath, repos_id,     repos_path, revision, presence, depth, kind, changed_revision,     changed_date, changed_author, checksum, properties, translated_size,     last_mod_time, symlink_target,     (SELECT moved_to FROM nodes      WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = ?3) moved_to FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
INSERT INTO nodes (     wc_id, local_relpath, op_depth, parent_relpath, presence, kind) SELECT wc_id, local_relpath, ?3 , parent_relpath,     'base-deleted', kind FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
UPDATE nodes SET op_depth = ?3 + 1 WHERE wc_id = ?1  AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))  AND op_depth = ?3 
INSERT INTO nodes (     wc_id, local_relpath, op_depth, parent_relpath, repos_id, repos_path,     revision, presence, depth, kind, changed_revision, changed_date,     changed_author, checksum, properties, translated_size, last_mod_time,     symlink_target, moved_here, moved_to ) SELECT     wc_id, local_relpath, ?4, parent_relpath, repos_id,     repos_path, revision, presence, depth, kind, changed_revision,     changed_date, changed_author, checksum, properties, translated_size,     last_mod_time, symlink_target, NULL, NULL FROM nodes WHERE wc_id = ?1 AND op_depth = ?3 AND local_relpath = ?2 UNION ALL SELECT     wc_id, local_relpath, ?4, parent_relpath, repos_id,     repos_path, revision, presence, depth, kind, changed_revision,     changed_date, changed_author, checksum, properties, translated_size,     last_mod_time, symlink_target, NULL, NULL FROM nodes WHERE wc_id = ?1 AND op_depth = ?3   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)) ORDER BY local_relpath 
SELECT 1 FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 LIMIT 1 
SELECT local_relpath FROM nodes WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth = 0 AND presence = 'server-excluded' LIMIT 1 
SELECT local_relpath FROM nodes WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth = 0   AND (presence = 'server-excluded' OR presence = 'excluded') 
INSERT OR REPLACE INTO nodes (     wc_id, local_relpath, op_depth, parent_relpath, repos_id,     repos_path, revision, presence, depth, moved_here, kind, changed_revision,     changed_date, changed_author, checksum, properties, translated_size,     last_mod_time, symlink_target, moved_to ) SELECT wc_id, ?3 , ?4 , ?5 ,     repos_id, repos_path, revision, ?6 , depth,     ?7, kind, changed_revision, changed_date,     changed_author, checksum, properties, translated_size,     last_mod_time, symlink_target,     (SELECT dst.moved_to FROM nodes AS dst                          WHERE dst.wc_id = ?1                          AND dst.local_relpath = ?3                          AND dst.op_depth = ?4) FROM nodes_current WHERE wc_id = ?1 AND local_relpath = ?2 
INSERT OR REPLACE INTO nodes (     wc_id, local_relpath, op_depth, parent_relpath, repos_id,     repos_path, revision, presence, depth, moved_here, kind, changed_revision,     changed_date, changed_author, checksum, properties, translated_size,     last_mod_time, symlink_target, moved_to ) SELECT wc_id, ?3 , ?4 , ?5 ,     repos_id, repos_path, revision, ?6 , depth,     ?8 , kind, changed_revision, changed_date,     changed_author, checksum, properties, translated_size,     last_mod_time, symlink_target,     (SELECT dst.moved_to FROM nodes AS dst                          WHERE dst.wc_id = ?1                          AND dst.local_relpath = ?3                          AND dst.op_depth = ?4) FROM nodes WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = ?7 
UPDATE nodes SET revision = ?3 WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
UPDATE nodes SET repos_id = ?3, repos_path = ?4 WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0 
SELECT 1 FROM actual_node WHERE wc_id = ?1 AND parent_relpath = ?2 LIMIT 1 
INSERT OR REPLACE INTO externals (     wc_id, local_relpath, parent_relpath, presence, kind, def_local_relpath,     repos_id, def_repos_relpath, def_operational_revision, def_revision) VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10) 
SELECT presence, kind, def_local_relpath, repos_id,     def_repos_relpath, def_operational_revision, def_revision FROM externals WHERE wc_id = ?1 AND local_relpath = ?2 LIMIT 1 
DELETE FROM nodes WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth = 0   AND file_external IS NOT NULL 
DELETE FROM externals WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND kind != 'dir' 
DELETE FROM externals WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)) 
SELECT local_relpath, kind, def_repos_relpath,   (SELECT root FROM repository AS r WHERE r.id = e.repos_id) FROM externals e WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND def_revision IS NULL   AND repos_id = (SELECT repos_id                   FROM nodes AS n                   WHERE n.wc_id = ?1                     AND n.local_relpath = ''                     AND n.op_depth = 0)   AND ((kind='dir')        OR EXISTS (SELECT 1 FROM nodes                   WHERE nodes.wc_id = e.wc_id                   AND nodes.local_relpath = e.parent_relpath)) 
SELECT local_relpath, kind, def_repos_relpath,   (SELECT root FROM repository AS r WHERE r.id = e.repos_id) FROM externals e WHERE wc_id = ?1   AND (((e.local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((e.local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND parent_relpath = ?2   AND def_revision IS NULL   AND repos_id = (SELECT repos_id                     FROM nodes AS n                     WHERE n.wc_id = ?1                       AND n.local_relpath = ''                       AND n.op_depth = 0)   AND ((kind='dir')        OR EXISTS (SELECT 1 FROM nodes                   WHERE nodes.wc_id = e.wc_id                   AND nodes.local_relpath = e.parent_relpath)) 
SELECT local_relpath, def_local_relpath FROM externals WHERE (wc_id = ?1 AND def_local_relpath = ?2)    OR (wc_id = ?1 AND (((def_local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((def_local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))) 
DELETE FROM externals WHERE wc_id = ?1 AND local_relpath = ?2 
SELECT IFNULL((SELECT properties FROM actual_node a                WHERE a.wc_id = ?1 AND A.local_relpath = n.local_relpath),               properties),        local_relpath, depth FROM nodes_current n WHERE wc_id = ?1 AND local_relpath = ?2   AND kind = 'dir' AND presence IN ('normal', 'incomplete') UNION ALL SELECT IFNULL((SELECT properties FROM actual_node a                WHERE a.wc_id = ?1 AND A.local_relpath = n.local_relpath),               properties),        local_relpath, depth FROM nodes_current n WHERE wc_id = ?1 AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND kind = 'dir' AND presence IN ('normal', 'incomplete') 
SELECT IFNULL((SELECT properties FROM actual_node a                WHERE a.wc_id = ?1 AND A.local_relpath = n.local_relpath),               properties),        local_relpath FROM nodes_current n WHERE (wc_id = ?1 AND local_relpath = ?2)    OR (wc_id = ?1 AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))) 
PRAGMA locking_mode = exclusive; PRAGMA journal_mode = DELETE 
INSERT OR REPLACE INTO actual_node (   wc_id, local_relpath, parent_relpath, properties, changelist, conflict_data) VALUES (?1, ?2, ?3, ?4, ?5, ?6) 
SELECT local_relpath FROM nodes_current WHERE wc_id = ?1 AND parent_relpath = ?2 AND kind = 'file' 
UPDATE nodes SET properties = ?4 WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = ?3 
PRAGMA table_info("NODES") 
DROP TABLE IF EXISTS target_prop_cache; CREATE TEMPORARY TABLE target_prop_cache (   local_relpath TEXT NOT NULL PRIMARY KEY,   kind TEXT NOT NULL,   properties BLOB ); 
INSERT INTO target_prop_cache(local_relpath, kind, properties)  SELECT n.local_relpath, n.kind,         IFNULL((SELECT properties FROM actual_node AS a                  WHERE a.wc_id = n.wc_id                    AND a.local_relpath = n.local_relpath),                n.properties)    FROM targets_list AS t    JOIN nodes AS n      ON n.wc_id = ?1     AND n.local_relpath = t.local_relpath     AND n.op_depth = (SELECT MAX(op_depth) FROM nodes AS n3                       WHERE n3.wc_id = ?1                         AND n3.local_relpath = t.local_relpath)   WHERE t.wc_id = ?1     AND (presence='normal' OR presence='incomplete')   ORDER BY t.local_relpath 
INSERT INTO target_prop_cache(local_relpath, kind, properties)  SELECT n.local_relpath, n.kind,         CASE n.presence           WHEN 'base-deleted'           THEN (SELECT properties FROM nodes AS p                  WHERE p.wc_id = n.wc_id                    AND p.local_relpath = n.local_relpath                    AND p.op_depth < n.op_depth                  ORDER BY p.op_depth DESC )           ELSE properties END   FROM targets_list AS t   JOIN nodes AS n     ON n.wc_id = ?1    AND n.local_relpath = t.local_relpath    AND n.op_depth = (SELECT MAX(op_depth) FROM nodes AS n3                      WHERE n3.wc_id = ?1                        AND n3.local_relpath = t.local_relpath)   WHERE t.wc_id = ?1     AND (presence = 'normal'          OR presence = 'incomplete'          OR presence = 'base-deleted')   ORDER BY t.local_relpath 
SELECT local_relpath, properties FROM target_prop_cache ORDER BY local_relpath 
DROP TABLE target_prop_cache; 
DROP TABLE IF EXISTS revert_list; CREATE TEMPORARY TABLE revert_list (    local_relpath TEXT NOT NULL,    actual INTEGER NOT NULL,    conflict_data BLOB,    notify INTEGER,    op_depth INTEGER,    repos_id INTEGER,    kind TEXT,    PRIMARY KEY (local_relpath, actual)    ); DROP TRIGGER IF EXISTS   trigger_revert_list_nodes; CREATE TEMPORARY TRIGGER trigger_revert_list_nodes BEFORE DELETE ON nodes BEGIN    INSERT OR REPLACE INTO revert_list(local_relpath, actual, op_depth,                                       repos_id, kind)    SELECT OLD.local_relpath, 0, OLD.op_depth, OLD.repos_id, OLD.kind; END; DROP TRIGGER IF EXISTS   trigger_revert_list_actual_delete; CREATE TEMPORARY TRIGGER trigger_revert_list_actual_delete BEFORE DELETE ON actual_node BEGIN    INSERT OR REPLACE INTO revert_list(local_relpath, actual, conflict_data,                                       notify)    SELECT OLD.local_relpath, 1, OLD.conflict_data,           CASE             WHEN OLD.properties IS NOT NULL             THEN 1             WHEN NOT EXISTS(SELECT 1 FROM NODES n                             WHERE n.wc_id = OLD.wc_id                               AND n.local_relpath = OLD.local_relpath)             THEN 1           END notify    WHERE OLD.conflict_data IS NOT NULL       OR notify IS NOT NULL; END; DROP TRIGGER IF EXISTS   trigger_revert_list_actual_update; CREATE TEMPORARY TRIGGER trigger_revert_list_actual_update BEFORE UPDATE ON actual_node BEGIN    INSERT OR REPLACE INTO revert_list(local_relpath, actual, conflict_data,                                       notify)    SELECT OLD.local_relpath, 1, OLD.conflict_data,           CASE             WHEN OLD.properties IS NOT NULL             THEN 1             WHEN NOT EXISTS(SELECT 1 FROM NODES n                             WHERE n.wc_id = OLD.wc_id                               AND n.local_relpath = OLD.local_relpath)             THEN 1           END notify    WHERE OLD.conflict_data IS NOT NULL       OR notify IS NOT NULL; END 
DROP TRIGGER trigger_revert_list_nodes; DROP TRIGGER trigger_revert_list_actual_delete; DROP TRIGGER trigger_revert_list_actual_update 
SELECT actual, notify, kind, op_depth, repos_id, conflict_data FROM revert_list WHERE local_relpath = ?1 ORDER BY actual DESC 
SELECT local_relpath, kind FROM revert_list WHERE (((local_relpath) > (CASE (?1) WHEN '' THEN '' ELSE (?1) || '/' END)) AND ((local_relpath) < CASE (?1) WHEN '' THEN X'FFFF' ELSE (?1) || '0' END))   AND op_depth >= ?2   AND repos_id IS NOT NULL ORDER BY local_relpath 
DELETE FROM revert_list WHERE local_relpath = ?1 
SELECT p.local_relpath, n.kind, a.notify, a.kind FROM (SELECT DISTINCT local_relpath       FROM revert_list       WHERE (local_relpath = ?1         OR (((local_relpath) > (CASE (?1) WHEN '' THEN '' ELSE (?1) || '/' END)) AND ((local_relpath) < CASE (?1) WHEN '' THEN X'FFFF' ELSE (?1) || '0' END)))) p LEFT JOIN revert_list n ON n.local_relpath=p.local_relpath AND n.actual=0 LEFT JOIN revert_list a ON a.local_relpath=p.local_relpath AND a.actual=1 ORDER BY p.local_relpath 
DELETE FROM revert_list WHERE (local_relpath = ?1        OR (((local_relpath) > (CASE (?1) WHEN '' THEN '' ELSE (?1) || '/' END)) AND ((local_relpath) < CASE (?1) WHEN '' THEN X'FFFF' ELSE (?1) || '0' END))) 
DROP TABLE IF EXISTS revert_list 
DROP TABLE IF EXISTS delete_list; CREATE TEMPORARY TABLE delete_list (    local_relpath TEXT PRIMARY KEY NOT NULL UNIQUE    ) 
INSERT INTO delete_list(local_relpath) SELECT ?2 UNION ALL SELECT local_relpath FROM nodes AS n WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth >= ?3   AND op_depth = (SELECT MAX(s.op_depth) FROM nodes AS s                   WHERE s.wc_id = ?1                     AND s.local_relpath = n.local_relpath)   AND presence NOT IN ('base-deleted', 'not-present', 'excluded', 'server-excluded')   AND file_external IS NULL ORDER by local_relpath 
SELECT local_relpath FROM delete_list ORDER BY local_relpath 
DROP TABLE IF EXISTS delete_list 
DROP TABLE IF EXISTS update_move_list; CREATE TEMPORARY TABLE update_move_list (   local_relpath TEXT PRIMARY KEY NOT NULL UNIQUE,   action INTEGER NOT NULL,   kind TEXT NOT NULL,   content_state INTEGER NOT NULL,   prop_state  INTEGER NOT NULL   ) 
INSERT INTO update_move_list(local_relpath, action, kind, content_state,   prop_state) VALUES (?1, ?2, ?3, ?4, ?5) 
SELECT local_relpath, action, kind, content_state, prop_state FROM update_move_list ORDER BY local_relpath 
DROP TABLE IF EXISTS update_move_list 
INSERT INTO revert_list (local_relpath, notify, kind, actual)        SELECT local_relpath, 2, kind, 1 FROM update_move_list; DROP TABLE update_move_list 
SELECT MIN(revision), MAX(revision),        MIN(changed_revision), MAX(changed_revision) FROM nodes   WHERE wc_id = ?1     AND (local_relpath = ?2          OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))     AND presence IN ('normal', 'incomplete')     AND file_external IS NULL     AND op_depth = 0 
SELECT 1 FROM nodes WHERE wc_id = ?1   AND (local_relpath = ?2        OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND op_depth = 0   AND (presence IN ('server-excluded', 'excluded')         OR depth NOT IN ('infinity', 'unknown'))   AND file_external IS NULL LIMIT 1 
SELECT 1 FROM nodes WHERE wc_id = ?1   AND (local_relpath = ?2        OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND op_depth > 0 LIMIT 1 
SELECT 1 FROM actual_node WHERE wc_id = ?1   AND (local_relpath = ?2        OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND properties IS NOT NULL LIMIT 1 
SELECT 1 FROM nodes WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth = 0   AND file_external IS NULL   AND presence IN ('normal', 'incomplete')   AND repos_path IS NOT (CASE WHEN (?2) = '' THEN (CASE WHEN (?3) = '' THEN (local_relpath) WHEN (local_relpath) = '' THEN (?3) ELSE (?3) || '/' || (local_relpath) END) WHEN (?3) = '' THEN (CASE WHEN (?2) = '' THEN (local_relpath)  WHEN SUBSTR((local_relpath), 1, LENGTH(?2)) = (?2)  THEN CASE WHEN LENGTH(?2) = LENGTH(local_relpath) THEN '' WHEN SUBSTR((local_relpath), LENGTH(?2)+1, 1) = '/' THEN SUBSTR((local_relpath), LENGTH(?2)+2) END END) WHEN SUBSTR((local_relpath), 1, LENGTH(?2)) = (?2) THEN CASE WHEN LENGTH(?2) = LENGTH(local_relpath) THEN (?3) WHEN SUBSTR((local_relpath), LENGTH(?2)+1, 1) = '/' THEN (?3) || SUBSTR((local_relpath), LENGTH(?2)+1) END END) LIMIT 1 
SELECT local_relpath, op_depth FROM nodes WHERE wc_id = ?1 AND moved_to = ?2 AND op_depth > 0 
UPDATE nodes SET moved_to = ?4 WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = ?3 
UPDATE nodes SET moved_to = NULL WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth = ?3 
UPDATE nodes SET moved_here = NULL WHERE wc_id = ?1  AND (local_relpath = ?2 OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))  AND op_depth = ?3 
SELECT moved_to, local_relpath FROM nodes WHERE wc_id = ?1 AND op_depth > 0   AND (((moved_to) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((moved_to) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)) 
SELECT local_relpath, moved_to, op_depth,        (SELECT CASE WHEN r.moved_here THEN r.op_depth END FROM nodes r         WHERE r.wc_id = ?1           AND r.local_relpath = n.local_relpath           AND r.op_depth < n.op_depth         ORDER BY r.op_depth DESC LIMIT 1) AS moved_here_op_depth  FROM nodes n WHERE wc_id = ?1   AND (local_relpath = ?2 OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND moved_to IS NOT NULL   AND op_depth >= ?3 
SELECT local_relpath, op_depth,        (SELECT CASE WHEN r.moved_here THEN r.op_depth END FROM nodes r         WHERE r.wc_id = ?1           AND r.local_relpath = n.local_relpath           AND r.op_depth < n.op_depth         ORDER BY r.op_depth DESC LIMIT 1) AS moved_here_op_depth  FROM nodes n WHERE wc_id = ?1 AND moved_to = ?2 AND op_depth > 0 
UPDATE nodes SET moved_to = (CASE WHEN (?2) = '' THEN (CASE WHEN (?3) = '' THEN (moved_to) WHEN (moved_to) = '' THEN (?3) ELSE (?3) || '/' || (moved_to) END) WHEN (?3) = '' THEN (CASE WHEN (?2) = '' THEN (moved_to)  WHEN SUBSTR((moved_to), 1, LENGTH(?2)) = (?2)  THEN CASE WHEN LENGTH(?2) = LENGTH(moved_to) THEN '' WHEN SUBSTR((moved_to), LENGTH(?2)+1, 1) = '/' THEN SUBSTR((moved_to), LENGTH(?2)+2) END END) WHEN SUBSTR((moved_to), 1, LENGTH(?2)) = (?2) THEN CASE WHEN LENGTH(?2) = LENGTH(moved_to) THEN (?3) WHEN SUBSTR((moved_to), LENGTH(?2)+1, 1) = '/' THEN (?3) || SUBSTR((moved_to), LENGTH(?2)+1) END END)  WHERE wc_id = ?1    AND (((moved_to) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((moved_to) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)) 
UPDATE nodes SET moved_to = NULL  WHERE wc_id = ?1    AND (((moved_to) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((moved_to) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)) 
SELECT n.local_relpath, d.moved_to, d.op_depth, n.kind FROM nodes n JOIN nodes d ON d.wc_id = ?1 AND d.local_relpath = n.local_relpath  AND d.op_depth = (SELECT MIN(dd.op_depth)                     FROM nodes dd                     WHERE dd.wc_id = ?1                       AND dd.local_relpath = d.local_relpath                       AND dd.op_depth > ?3) WHERE n.wc_id = ?1 AND n.local_relpath = ?2 AND n.op_depth = ?3   AND d.moved_to IS NOT NULL UNION ALL SELECT n.local_relpath, d.moved_to, d.op_depth, n.kind FROM nodes n JOIN nodes d ON d.wc_id = ?1 AND d.local_relpath = n.local_relpath  AND d.op_depth = (SELECT MIN(dd.op_depth)                     FROM nodes dd                     WHERE dd.wc_id = ?1                       AND dd.local_relpath = d.local_relpath                       AND dd.op_depth > ?3) WHERE n.wc_id = ?1 AND (((n.local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((n.local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND n.op_depth = ?3   AND d.moved_to IS NOT NULL ORDER BY n.local_relpath 
SELECT local_relpath, moved_to, op_depth FROM nodes WHERE wc_id = ?1   AND (local_relpath = ?2 OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND op_depth >= ?3   AND moved_to IS NOT NULL   AND NOT (((moved_to) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((moved_to) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)) 
SELECT s.op_depth, n.local_relpath, n.kind, n.repos_path, s.moved_to FROM nodes n JOIN nodes s ON s.wc_id = n.wc_id AND s.local_relpath = n.local_relpath  AND s.op_depth = (SELECT MIN(d.op_depth)                     FROM nodes d                     WHERE d.wc_id = ?1                       AND d.local_relpath = s.local_relpath                       AND d.op_depth > ?3) WHERE n.wc_id = ?1 AND n.op_depth = ?3   AND (n.local_relpath = ?2 OR (((n.local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((n.local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND s.moved_to IS NOT NULL 
UPDATE nodes SET repos_id = ?4,                  repos_path = (CASE WHEN (?2) = '' THEN (CASE WHEN (?5) = '' THEN (local_relpath) WHEN (local_relpath) = '' THEN (?5) ELSE (?5) || '/' || (local_relpath) END) WHEN (?5) = '' THEN (CASE WHEN (?2) = '' THEN (local_relpath)  WHEN SUBSTR((local_relpath), 1, LENGTH(?2)) = (?2)  THEN CASE WHEN LENGTH(?2) = LENGTH(local_relpath) THEN '' WHEN SUBSTR((local_relpath), LENGTH(?2)+1, 1) = '/' THEN SUBSTR((local_relpath), LENGTH(?2)+2) END END) WHEN SUBSTR((local_relpath), 1, LENGTH(?2)) = (?2) THEN CASE WHEN LENGTH(?2) = LENGTH(local_relpath) THEN (?5) WHEN SUBSTR((local_relpath), LENGTH(?2)+1, 1) = '/' THEN (?5) || SUBSTR((local_relpath), LENGTH(?2)+1) END END),                  revision = ?6 WHERE wc_id = ?1   AND (local_relpath = ?2        OR (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END)))   AND op_depth = ?3 
SELECT 1 FROM NODES WHERE wc_id = ?1 AND local_relpath = ?2 AND op_depth > ?3 AND op_depth < ?4 
SELECT local_relpath, repos_path, revision FROM nodes WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth = 0 ORDER BY local_relpath 
SELECT 1 FROM nodes WHERE wc_id = ?1 AND parent_relpath = ?2 AND op_depth = ?3 AND kind != 'file' LIMIT 1 
SELECT 1 FROM nodes WHERE wc_id = ?1   AND (((parent_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((parent_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth = ?3   AND file_external IS NULL LIMIT 1 
SELECT op_depth, local_relpath, parent_relpath, file_external FROM nodes WHERE wc_id = ?1 
SELECT inherited_props FROM nodes WHERE wc_id = ?1   AND local_relpath = ?2   AND op_depth = 0 
UPDATE nodes SET inherited_props = ?3 WHERE (wc_id = ?1 AND local_relpath = ?2 AND op_depth = 0) 
SELECT local_relpath, repos_path FROM nodes WHERE wc_id = ?1   AND local_relpath = ?2   AND op_depth = 0   AND (inherited_props not null) 
SELECT local_relpath, repos_path FROM nodes WHERE wc_id = ?1   AND (((local_relpath) > (CASE (?2) WHEN '' THEN '' ELSE (?2) || '/' END)) AND ((local_relpath) < CASE (?2) WHEN '' THEN X'FFFF' ELSE (?2) || '0' END))   AND op_depth = 0   AND (inherited_props not null) 
SELECT local_relpath, repos_path FROM nodes WHERE wc_id = ?1   AND parent_relpath = ?2   AND op_depth = 0   AND (inherited_props not null) 
SELECT 1 FROM sqlite_master WHERE name='sqlite_stat1' AND type='table' LIMIT 1 
CREATE TABLE REPOSITORY (   id INTEGER PRIMARY KEY AUTOINCREMENT,   root  TEXT UNIQUE NOT NULL,   uuid  TEXT NOT NULL   ); CREATE INDEX I_UUID ON REPOSITORY (uuid); CREATE INDEX I_ROOT ON REPOSITORY (root); CREATE TABLE WCROOT (   id  INTEGER PRIMARY KEY AUTOINCREMENT,   local_abspath  TEXT UNIQUE   ); CREATE UNIQUE INDEX I_LOCAL_ABSPATH ON WCROOT (local_abspath); CREATE TABLE PRISTINE (   checksum  TEXT NOT NULL PRIMARY KEY,   compression  INTEGER,   size  INTEGER NOT NULL,   refcount  INTEGER NOT NULL,   md5_checksum  TEXT NOT NULL   ); CREATE INDEX I_PRISTINE_MD5 ON PRISTINE (md5_checksum); CREATE TABLE ACTUAL_NODE (   wc_id  INTEGER NOT NULL REFERENCES WCROOT (id),   local_relpath  TEXT NOT NULL,   parent_relpath  TEXT,   properties  BLOB,   conflict_old  TEXT,   conflict_new  TEXT,   conflict_working  TEXT,   prop_reject  TEXT,   changelist  TEXT,   text_mod  TEXT,   tree_conflict_data  TEXT,   conflict_data  BLOB,   older_checksum  TEXT REFERENCES PRISTINE (checksum),   left_checksum  TEXT REFERENCES PRISTINE (checksum),   right_checksum  TEXT REFERENCES PRISTINE (checksum),   PRIMARY KEY (wc_id, local_relpath)   ); CREATE UNIQUE INDEX I_ACTUAL_PARENT ON ACTUAL_NODE (wc_id, parent_relpath,                                                     local_relpath); CREATE TABLE LOCK (   repos_id  INTEGER NOT NULL REFERENCES REPOSITORY (id),   repos_relpath  TEXT NOT NULL,   lock_token  TEXT NOT NULL,   lock_owner  TEXT,   lock_comment  TEXT,   lock_date  INTEGER,   PRIMARY KEY (repos_id, repos_relpath)   ); CREATE TABLE WORK_QUEUE (   id  INTEGER PRIMARY KEY AUTOINCREMENT,   work  BLOB NOT NULL   ); CREATE TABLE WC_LOCK (   wc_id  INTEGER NOT NULL  REFERENCES WCROOT (id),   local_dir_relpath  TEXT NOT NULL,   locked_levels  INTEGER NOT NULL DEFAULT -1,   PRIMARY KEY (wc_id, local_dir_relpath)  ); PRAGMA user_version = 31; 
CREATE TABLE NODES (   wc_id  INTEGER NOT NULL REFERENCES WCROOT (id),   local_relpath  TEXT NOT NULL,   op_depth INTEGER NOT NULL,   parent_relpath  TEXT,   repos_id  INTEGER REFERENCES REPOSITORY (id),   repos_path  TEXT,   revision  INTEGER,   presence  TEXT NOT NULL,   moved_here  INTEGER,   moved_to  TEXT,   kind  TEXT NOT NULL,   properties  BLOB,   depth  TEXT,   checksum  TEXT REFERENCES PRISTINE (checksum),   symlink_target  TEXT,   changed_revision  INTEGER,   changed_date      INTEGER,   changed_author    TEXT,   translated_size  INTEGER,   last_mod_time  INTEGER,   dav_cache  BLOB,   file_external  INTEGER,   inherited_props  BLOB,   PRIMARY KEY (wc_id, local_relpath, op_depth)   ); CREATE UNIQUE INDEX I_NODES_PARENT ON NODES (wc_id, parent_relpath,                                              local_relpath, op_depth); CREATE UNIQUE INDEX I_NODES_MOVED ON NODES (wc_id, moved_to, op_depth); CREATE VIEW NODES_CURRENT AS   SELECT * FROM nodes AS n     WHERE op_depth = (SELECT MAX(op_depth) FROM nodes AS n2                       WHERE n2.wc_id = n.wc_id                         AND n2.local_relpath = n.local_relpath); CREATE VIEW NODES_BASE AS   SELECT * FROM nodes   WHERE op_depth = 0; 
CREATE TRIGGER nodes_insert_trigger AFTER INSERT ON nodes WHEN NEW.checksum IS NOT NULL BEGIN   UPDATE pristine SET refcount = refcount + 1   WHERE checksum = NEW.checksum; END; CREATE TRIGGER nodes_delete_trigger AFTER DELETE ON nodes WHEN OLD.checksum IS NOT NULL BEGIN   UPDATE pristine SET refcount = refcount - 1   WHERE checksum = OLD.checksum; END; CREATE TRIGGER nodes_update_checksum_trigger AFTER UPDATE OF checksum ON nodes WHEN NEW.checksum IS NOT OLD.checksum BEGIN   UPDATE pristine SET refcount = refcount + 1   WHERE checksum = NEW.checksum;   UPDATE pristine SET refcount = refcount - 1   WHERE checksum = OLD.checksum; END; 
CREATE TABLE EXTERNALS (   wc_id  INTEGER NOT NULL REFERENCES WCROOT (id),   local_relpath  TEXT NOT NULL,   parent_relpath  TEXT NOT NULL,   repos_id  INTEGER NOT NULL REFERENCES REPOSITORY (id),   presence  TEXT NOT NULL,   kind  TEXT NOT NULL,   def_local_relpath         TEXT NOT NULL,   def_repos_relpath         TEXT NOT NULL,   def_operational_revision  TEXT,   def_revision              TEXT,   PRIMARY KEY (wc_id, local_relpath) ); CREATE UNIQUE INDEX I_EXTERNALS_DEFINED ON EXTERNALS (wc_id,                                                       def_local_relpath,                                                       local_relpath); 
ANALYZE sqlite_master; DELETE FROM sqlite_stat1 WHERE tbl in ('NODES', 'ACTUAL_NODE', 'LOCK', 'WC_LOCK', 'EXTERNALS'); INSERT INTO sqlite_stat1(tbl, idx, stat) VALUES     ('NODES', 'sqlite_autoindex_NODES_1',               '8000 8000 2 1'); INSERT INTO sqlite_stat1(tbl, idx, stat) VALUES     ('NODES', 'I_NODES_PARENT',                         '8000 8000 10 2 1'); INSERT INTO sqlite_stat1(tbl, idx, stat) VALUES     ('NODES', 'I_NODES_MOVED',                          '8000 8000 1 1'); INSERT INTO sqlite_stat1(tbl, idx, stat) VALUES     ('ACTUAL_NODE', 'sqlite_autoindex_ACTUAL_NODE_1',   '8000 8000 1'); INSERT INTO sqlite_stat1(tbl, idx, stat) VALUES     ('ACTUAL_NODE', 'I_ACTUAL_PARENT',                  '8000 8000 10 1'); INSERT INTO sqlite_stat1(tbl, idx, stat) VALUES     ('LOCK', 'sqlite_autoindex_LOCK_1',                 '100 100 1'); INSERT INTO sqlite_stat1(tbl, idx, stat) VALUES     ('WC_LOCK', 'sqlite_autoindex_WC_LOCK_1',           '100 100 1'); INSERT INTO sqlite_stat1(tbl, idx, stat) VALUES     ('EXTERNALS','sqlite_autoindex_EXTERNALS_1',        '100 100 1'); INSERT INTO sqlite_stat1(tbl, idx, stat) VALUES     ('EXTERNALS','I_EXTERNALS_DEFINED',                 '100 100 3 1'); ANALYZE sqlite_master; 
UPDATE BASE_NODE SET checksum = (SELECT checksum FROM pristine                                  WHERE md5_checksum = BASE_NODE.checksum) WHERE EXISTS (SELECT 1 FROM pristine WHERE md5_checksum = BASE_NODE.checksum); UPDATE WORKING_NODE SET checksum = (SELECT checksum FROM pristine                                     WHERE md5_checksum = WORKING_NODE.checksum) WHERE EXISTS (SELECT 1 FROM pristine               WHERE md5_checksum = WORKING_NODE.checksum); INSERT INTO NODES (        wc_id, local_relpath, op_depth, parent_relpath,        repos_id, repos_path, revision,        presence, depth, moved_here, moved_to, kind,        changed_revision, changed_date, changed_author,        checksum, properties, translated_size, last_mod_time,        dav_cache, symlink_target, file_external ) SELECT wc_id, local_relpath, 0 , parent_relpath,        repos_id, repos_relpath, revnum,        presence, depth, NULL , NULL , kind,        changed_rev, changed_date, changed_author,        checksum, properties, translated_size, last_mod_time,        dav_cache, symlink_target, file_external FROM BASE_NODE; INSERT INTO NODES (        wc_id, local_relpath, op_depth, parent_relpath,        repos_id, repos_path, revision,        presence, depth, moved_here, moved_to, kind,        changed_revision, changed_date, changed_author,        checksum, properties, translated_size, last_mod_time,        dav_cache, symlink_target, file_external ) SELECT wc_id, local_relpath, 2 , parent_relpath,        copyfrom_repos_id, copyfrom_repos_path, copyfrom_revnum,        presence, depth, NULL , NULL , kind,        changed_rev, changed_date, changed_author,        checksum, properties, translated_size, last_mod_time,        NULL , symlink_target, NULL FROM WORKING_NODE; DROP TABLE BASE_NODE; DROP TABLE WORKING_NODE; PRAGMA user_version = 20; 
PRAGMA user_version = 21; 
SELECT wc_id, local_relpath, tree_conflict_data FROM actual_node WHERE tree_conflict_data IS NOT NULL 
UPDATE actual_node SET tree_conflict_data = NULL 
UPDATE actual_node SET tree_conflict_data = conflict_data; UPDATE actual_node SET conflict_data = NULL; PRAGMA user_version = 22; 
PRAGMA user_version = 23; 
SELECT 1 FROM nodes WHERE op_depth > 0 LIMIT 1 
UPDATE pristine SET refcount =   (SELECT COUNT(*) FROM nodes    WHERE checksum = pristine.checksum ); PRAGMA user_version = 24; 
DROP VIEW IF EXISTS NODES_CURRENT; CREATE VIEW NODES_CURRENT AS   SELECT * FROM nodes     JOIN (SELECT wc_id, local_relpath, MAX(op_depth) AS op_depth FROM nodes           GROUP BY wc_id, local_relpath) AS filter     ON nodes.wc_id = filter.wc_id       AND nodes.local_relpath = filter.local_relpath       AND nodes.op_depth = filter.op_depth; PRAGMA user_version = 25; 
DROP VIEW IF EXISTS NODES_BASE; CREATE VIEW NODES_BASE AS   SELECT * FROM nodes   WHERE op_depth = 0; PRAGMA user_version = 26; 
PRAGMA user_version = 27; 
SELECT 1 FROM actual_node WHERE NOT ((prop_reject IS NULL) AND (conflict_old IS NULL)            AND (conflict_new IS NULL) AND (conflict_working IS NULL)            AND (tree_conflict_data IS NULL)) LIMIT 1 
UPDATE NODES SET checksum = (SELECT checksum FROM pristine                              WHERE md5_checksum = nodes.checksum) WHERE EXISTS (SELECT 1 FROM pristine WHERE md5_checksum = nodes.checksum); PRAGMA user_version = 28; 
DROP TRIGGER IF EXISTS nodes_update_checksum_trigger; DROP TRIGGER IF EXISTS nodes_insert_trigger; DROP TRIGGER IF EXISTS nodes_delete_trigger; CREATE TRIGGER nodes_update_checksum_trigger AFTER UPDATE OF checksum ON nodes WHEN NEW.checksum IS NOT OLD.checksum BEGIN   UPDATE pristine SET refcount = refcount + 1   WHERE checksum = NEW.checksum;   UPDATE pristine SET refcount = refcount - 1   WHERE checksum = OLD.checksum; END; CREATE TRIGGER nodes_insert_trigger AFTER INSERT ON nodes WHEN NEW.checksum IS NOT NULL BEGIN   UPDATE pristine SET refcount = refcount + 1   WHERE checksum = NEW.checksum; END; CREATE TRIGGER nodes_delete_trigger AFTER DELETE ON nodes WHEN OLD.checksum IS NOT NULL BEGIN   UPDATE pristine SET refcount = refcount - 1   WHERE checksum = OLD.checksum; END; PRAGMA user_version = 29; 
CREATE UNIQUE INDEX IF NOT EXISTS I_NODES_MOVED ON NODES (wc_id, moved_to, op_depth); CREATE INDEX IF NOT EXISTS I_PRISTINE_MD5 ON PRISTINE (md5_checksum); UPDATE nodes SET presence = "server-excluded" WHERE presence = "absent"; UPDATE nodes SET file_external=1 WHERE file_external IS NOT NULL; 
SELECT wc_id, local_relpath,   conflict_old, conflict_working, conflict_new, prop_reject, tree_conflict_data FROM actual_node WHERE conflict_old IS NOT NULL    OR conflict_working IS NOT NULL    OR conflict_new IS NOT NULL    OR prop_reject IS NOT NULL    OR tree_conflict_data IS NOT NULL ORDER by wc_id, local_relpath 
UPDATE actual_node SET conflict_data = ?3, conflict_old = NULL,   conflict_working = NULL, conflict_new = NULL, prop_reject = NULL,   tree_conflict_data = NULL WHERE wc_id = ?1 and local_relpath = ?2 
ALTER TABLE NODES ADD COLUMN inherited_props BLOB; 
DROP INDEX IF EXISTS I_ACTUAL_CHANGELIST; DROP INDEX IF EXISTS I_EXTERNALS_PARENT; DROP INDEX I_NODES_PARENT; CREATE UNIQUE INDEX I_NODES_PARENT ON NODES (wc_id, parent_relpath,                                              local_relpath, op_depth); DROP INDEX I_ACTUAL_PARENT; CREATE UNIQUE INDEX I_ACTUAL_PARENT ON ACTUAL_NODE (wc_id, parent_relpath,                                                     local_relpath); PRAGMA user_version = 31; 
SELECT l.wc_id, l.local_relpath FROM nodes as l LEFT OUTER JOIN nodes as r ON l.wc_id = r.wc_id    AND r.local_relpath = l.parent_relpath    AND r.op_depth = 0 WHERE l.op_depth = 0   AND l.repos_path != ''   AND ((l.repos_id IS NOT r.repos_id)        OR (l.repos_path IS NOT (CASE WHEN (r.local_relpath) = '' THEN (CASE WHEN (r.repos_path) = '' THEN (l.local_relpath) WHEN (l.local_relpath) = '' THEN (r.repos_path) ELSE (r.repos_path) || '/' || (l.local_relpath) END) WHEN (r.repos_path) = '' THEN (CASE WHEN (r.local_relpath) = '' THEN (l.local_relpath)  WHEN SUBSTR((l.local_relpath), 1, LENGTH(r.local_relpath)) = (r.local_relpath)  THEN CASE WHEN LENGTH(r.local_relpath) = LENGTH(l.local_relpath) THEN '' WHEN SUBSTR((l.local_relpath), LENGTH(r.local_relpath)+1, 1) = '/' THEN SUBSTR((l.local_relpath), LENGTH(r.local_relpath)+2) END END) WHEN SUBSTR((l.local_relpath), 1, LENGTH(r.local_relpath)) = (r.local_relpath) THEN CASE WHEN LENGTH(r.local_relpath) = LENGTH(l.local_relpath) THEN (r.repos_path) WHEN SUBSTR((l.local_relpath), LENGTH(r.local_relpath)+1, 1) = '/' THEN (r.repos_path) || SUBSTR((l.local_relpath), LENGTH(r.local_relpath)+1) END END))) 
DROP INDEX IF EXISTS I_ACTUAL_CHANGELIST; DROP INDEX IF EXISTS I_EXTERNALS_PARENT; CREATE INDEX I_EXTERNALS_PARENT ON EXTERNALS (wc_id, parent_relpath); DROP INDEX I_NODES_PARENT; CREATE UNIQUE INDEX I_NODES_PARENT ON NODES (wc_id, parent_relpath,                                              local_relpath, op_depth); DROP INDEX I_ACTUAL_PARENT; CREATE UNIQUE INDEX I_ACTUAL_PARENT ON ACTUAL_NODE (wc_id, parent_relpath,                                                     local_relpath); -- format: YYY 
CREATE TEMPORARY TRIGGER no_repository_updates BEFORE UPDATE ON repository BEGIN   SELECT RAISE(FAIL, 'Updates to REPOSITORY are not allowed.'); END; CREATE TEMPORARY TRIGGER validation_01 BEFORE INSERT ON nodes WHEN NOT ((new.local_relpath = '' AND new.parent_relpath IS NULL)           OR (relpath_depth(new.local_relpath)               = relpath_depth(new.parent_relpath) + 1)) BEGIN   SELECT RAISE(FAIL, 'WC DB validity check 01 failed'); END; CREATE TEMPORARY TRIGGER validation_02 BEFORE INSERT ON nodes WHEN NOT new.op_depth <= relpath_depth(new.local_relpath) BEGIN   SELECT RAISE(FAIL, 'WC DB validity check 02 failed'); END; CREATE TEMPORARY TRIGGER validation_03 BEFORE INSERT ON nodes WHEN NOT (     (new.op_depth = relpath_depth(new.local_relpath))     OR     (EXISTS (SELECT 1 FROM nodes               WHERE wc_id = new.wc_id AND op_depth = new.op_depth                 AND local_relpath = new.parent_relpath))   )  AND NOT (new.file_external IS NOT NULL AND new.op_depth = 0) BEGIN   SELECT RAISE(FAIL, 'WC DB validity check 03 failed'); END; CREATE TEMPORARY TRIGGER validation_04 BEFORE INSERT ON actual_node WHEN NOT (new.local_relpath = ''           OR EXISTS (SELECT 1 FROM nodes                        WHERE wc_id = new.wc_id                          AND local_relpath = new.parent_relpath)) BEGIN   SELECT RAISE(FAIL, 'WC DB validity check 04 failed'); END; 
SELECT local_relpath, op_depth, 1, 'Invalid parent relpath set in NODES' FROM nodes n WHERE local_relpath != ''  AND (parent_relpath IS NULL       OR NOT (((local_relpath) > (CASE (parent_relpath) WHEN '' THEN '' ELSE (parent_relpath) || '/' END)) AND ((local_relpath) < CASE (parent_relpath) WHEN '' THEN X'FFFF' ELSE (parent_relpath) || '0' END))       OR relpath_depth(local_relpath) != relpath_depth(parent_relpath)+1) UNION ALL SELECT local_relpath, -1, 2, 'Invalid parent relpath set in ACTUAL' FROM actual_node a WHERE local_relpath != ''  AND (parent_relpath IS NULL       OR NOT (((local_relpath) > (CASE (parent_relpath) WHEN '' THEN '' ELSE (parent_relpath) || '/' END)) AND ((local_relpath) < CASE (parent_relpath) WHEN '' THEN X'FFFF' ELSE (parent_relpath) || '0' END))       OR relpath_depth(local_relpath) != relpath_depth(parent_relpath)+1) UNION ALL SELECT local_relpath, -1, 10, 'No ancestor in ACTUAL' FROM actual_node a WHERE local_relpath != ''  AND NOT EXISTS(SELECT 1 from nodes i                 WHERE i.wc_id=a.wc_id                   AND i.local_relpath=a.parent_relpath)  AND NOT EXISTS(SELECT 1 from nodes i                 WHERE i.wc_id=a.wc_id                   AND i.local_relpath=a.local_relpath) UNION ALL SELECT a.local_relpath, -1, 11, 'Bad or Unneeded actual data' FROM actual_node a LEFT JOIN nodes n on n.wc_id = a.wc_id AND n.local_relpath = a.local_relpath    AND n.op_depth = (SELECT MAX(op_depth) from nodes i                      WHERE i.wc_id=a.wc_id AND i.local_relpath=a.local_relpath) WHERE (a.properties IS NOT NULL        AND (n.presence IS NULL             OR n.presence NOT IN ('normal', 'incomplete')))    OR (a.changelist IS NOT NULL AND (n.kind IS NOT NULL AND n.kind != 'file'))    OR (a.conflict_data IS NULL AND a.properties IS NULL AND a.changelist IS NULL)  AND NOT EXISTS(SELECT 1 from nodes i                 WHERE i.wc_id=a.wc_id                   AND i.local_relpath=a.parent_relpath) UNION ALL SELECT local_relpath, op_depth, 20, 'No ancestor in NODES' FROM nodes n WHERE local_relpath != ''  AND file_external IS NULL  AND NOT EXISTS(SELECT 1 from nodes i                 WHERE i.wc_id=n.wc_id                   AND i.local_relpath=n.parent_relpath                   AND i.op_depth <= n.op_depth) UNION ALL SELECT local_relpath, op_depth, 21, 'Unneeded node data' FROM nodes WHERE presence NOT IN ('normal', 'incomplete') AND (properties IS NOT NULL      OR checksum IS NOT NULL      OR depth IS NOT NULL      OR symlink_target IS NOT NULL      OR changed_revision IS NOT NULL      OR (changed_date IS NOT NULL AND changed_date != 0)      OR changed_author IS NOT NULL      OR translated_size IS NOT NULL      OR last_mod_time IS NOT NULL      OR dav_cache IS NOT NULL      OR file_external IS NOT NULL      OR inherited_props IS NOT NULL) UNION ALL SELECT local_relpath, op_depth, 22, 'Unneeded base-deleted node data' FROM nodes WHERE presence IN ('base-deleted') AND (repos_id IS NOT NULL      OR repos_path IS NOT NULL      OR revision IS NOT NULL) UNION ALL SELECT local_relpath, op_depth, 23, 'Kind specific data invalid on normal' FROM nodes WHERE presence IN ('normal', 'incomplete') AND (kind IS NULL      OR (repos_path IS NULL          AND (properties IS NOT NULL               OR changed_revision IS NOT NULL               OR changed_author IS NOT NULL               OR (changed_date IS NOT NULL AND changed_date != 0)))      OR (CASE WHEN kind = 'file' AND repos_path IS NOT NULL                                    THEN checksum IS NULL                                    ELSE checksum IS NOT NULL END)      OR (CASE WHEN kind = 'dir' THEN depth IS NULL                                   ELSE depth IS NOT NULL END)      OR (CASE WHEN kind = 'symlink' THEN symlink_target IS NULL                                       ELSE symlink_target IS NOT NULL END)) UNION ALL SELECT local_relpath, op_depth, 24, 'Invalid op-depth for local add' FROM nodes WHERE presence IN ('normal', 'incomplete')   AND repos_path IS NULL   AND op_depth != relpath_depth(local_relpath) UNION ALL SELECT local_relpath, op_depth, 25, 'Node missing op-depth ancestor' FROM nodes n WHERE op_depth < relpath_depth(local_relpath)   AND file_external IS NULL   AND NOT EXISTS(SELECT 1 FROM nodes p                  WHERE p.wc_id=n.wc_id AND p.local_relpath=n.parent_relpath                    AND p.op_depth=n.op_depth                    AND (p.presence IN ('normal', 'incomplete')                         OR (p.presence IN ('base-deleted', 'not-present')                             AND n.presence = 'base-deleted'))) UNION ALL SELECT n.local_relpath, n.op_depth, 26, 'Copied descendant mismatch' FROM nodes n JOIN nodes p   ON p.wc_id=n.wc_id AND p.local_relpath=n.parent_relpath   AND n.op_depth=p.op_depth WHERE n.op_depth > 0 AND n.presence IN ('normal', 'incomplete')    AND (n.repos_id != p.repos_id         OR n.repos_path !=            (CASE WHEN (n.parent_relpath) = '' THEN (CASE WHEN (p.repos_path) = '' THEN (n.local_relpath) WHEN (n.local_relpath) = '' THEN (p.repos_path) ELSE (p.repos_path) || '/' || (n.local_relpath) END) WHEN (p.repos_path) = '' THEN (CASE WHEN (n.parent_relpath) = '' THEN (n.local_relpath)  WHEN SUBSTR((n.local_relpath), 1, LENGTH(n.parent_relpath)) = (n.parent_relpath)  THEN CASE WHEN LENGTH(n.parent_relpath) = LENGTH(n.local_relpath) THEN '' WHEN SUBSTR((n.local_relpath), LENGTH(n.parent_relpath)+1, 1) = '/' THEN SUBSTR((n.local_relpath), LENGTH(n.parent_relpath)+2) END END) WHEN SUBSTR((n.local_relpath), 1, LENGTH(n.parent_relpath)) = (n.parent_relpath) THEN CASE WHEN LENGTH(n.parent_relpath) = LENGTH(n.local_relpath) THEN (p.repos_path) WHEN SUBSTR((n.local_relpath), LENGTH(n.parent_relpath)+1, 1) = '/' THEN (p.repos_path) || SUBSTR((n.local_relpath), LENGTH(n.parent_relpath)+1) END END)         OR n.revision != p.revision         OR p.kind != 'dir'         OR n.moved_here IS NOT p.moved_here) UNION ALL SELECT n.local_relpath, n.op_depth, 27, 'Invalid op-root presence' FROM nodes n WHERE n.op_depth = relpath_depth(local_relpath)   AND presence NOT IN ('normal', 'incomplete', 'base-deleted') UNION ALL SELECT n.local_relpath, s.op_depth, 28, 'Incomplete shadowing' FROM nodes n JOIN nodes s ON s.wc_id=n.wc_id AND s.local_relpath=n.local_relpath  AND s.op_depth = relpath_depth(s.local_relpath)  AND s.op_depth = (SELECT MIN(op_depth) FROM nodes d                    WHERE d.wc_id=s.wc_id AND d.local_relpath=s.local_relpath                      AND d.op_depth > n.op_depth) WHERE n.presence IN ('normal', 'incomplete')   AND EXISTS(SELECT 1              FROM nodes dn              WHERE dn.wc_id=n.wc_id AND dn.op_depth=n.op_depth                AND dn.presence IN ('normal', 'incomplete')                AND (((dn.local_relpath) > (CASE (n.local_relpath) WHEN '' THEN '' ELSE (n.local_relpath) || '/' END)) AND ((dn.local_relpath) < CASE (n.local_relpath) WHEN '' THEN X'FFFF' ELSE (n.local_relpath) || '0' END))                AND dn.file_external IS NULL                AND NOT EXISTS(SELECT 1                               FROM nodes ds                               WHERE ds.wc_id=n.wc_id AND ds.op_depth=s.op_depth                                 AND ds.local_relpath=dn.local_relpath)) UNION ALL SELECT s.local_relpath, s.op_depth, 29, 'Invalid base-delete' FROM nodes s LEFT JOIN nodes n ON n.wc_id=s.wc_id AND n.local_relpath=s.local_relpath  AND n.op_depth = (SELECT MAX(op_depth) FROM nodes d                    WHERE d.wc_id=s.wc_id AND d.local_relpath=s.local_relpath                      AND d.op_depth < s.op_depth) WHERE s.presence = 'base-deleted'   AND (n.presence IS NULL        OR n.presence NOT IN ('normal', 'incomplete')        ) UNION ALL SELECT n.local_relpath, n.op_depth, 30, 'Invalid data for BASE' FROM nodes n WHERE n.op_depth = 0   AND (n.moved_to IS NOT NULL        OR n.moved_here IS NOT NULL) UNION ALL SELECT d.local_relpath, d.op_depth, 60, 'Moved here without origin' FROM nodes d WHERE d.op_depth = relpath_depth(d.local_relpath)   AND d.moved_here IS NOT NULL   AND NOT EXISTS(SELECT 1 FROM nodes s                  WHERE s.wc_id = d.wc_id AND s.moved_to = d.local_relpath) UNION ALL SELECT s.local_relpath, s.op_depth, 61, 'Moved to without target' FROM nodes s WHERE s.moved_to IS NOT NULL   AND NOT EXISTS(SELECT 1 FROM nodes d                  WHERE d.wc_id = s.wc_id AND d.local_relpath = s.moved_to                    AND d.op_depth = relpath_depth(d.local_relpath)                    AND d.moved_here =1 AND d.repos_path IS NOT NULL) 
busy-timeout
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/wc_db_wcroot.c
format >= 1
Working copy format of '%s' is too old (%d); please check out your working copy again
This client is too old to work with the working copy at
'%s' (format %d).
You need to get a newer Subversion client. For more details, see
  http://subversion.apache.org/faq.html#working-copy-format-change
Cleanup with an older 1.7 client before upgrading with this client
The working copy at '%s'
is too old (format %d) to work with client version '%s' (expects format %d). You need to upgrade the working copy first.
1.9.4 (r1740329)
Missing a row in WCROOT for '%s'.
The working copy at '%s' is corrupt.
The working copy database at '%s' is missing.
The working copy database at '%s' is corrupt.
'%s' is not a working copy root
wcroot->sdb != NULL
The symlink at '%s' points nowhere
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/wcroot_anchor.c
file-commit
postupgrade
file-install
file-remove
dir-remove
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_wc/workqueue.c
file-move
file-translate
dir-install
sync-file-flags
prej-install
Failed to run the WC DB work queue associated with '%s', work item %d %s
Unrecognized work item in the queue
base-remove
record-fileinfo
tmp-set-text-conflict-markers
tmp-set-property-conflict-marker
Can't install '%s' from pristine store, because no checksum is recorded for this file
SVN_WC__VERSION <= 28
.svn
