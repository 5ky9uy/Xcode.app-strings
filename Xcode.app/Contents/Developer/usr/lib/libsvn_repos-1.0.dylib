Error reading authz file '%s' with groups file '%s':
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/authz.c
path[0] == '/'
groups
aliases
Section name '%s' contains non-canonical fspath '%s'
An authz rule refers to group '%s', which is undefined
Circular dependency between groups '%s' and '%s'
An authz rule refers to alias '%s', which is undefined
Rule '%s' has more than one inversion; double negatives are not permitted.
Authz rules with match string '~*' are not allowed, because they never match anyone.
anonymous
authenticated
Unrecognized authz token '%s'.
The character '%c' in rule '%s' is not allowed in authz rules
Unable to find repository at '%s'
'/' is not a file in repo '%s'
'%s' path not found in repo '%s'
'%s' is not a file in repo '%s'
Error while parsing config file: '%s' in repo '%s':
Authz file cannot contain any groups when global groups are being used.
$anonymous
$authenticated
Error reading authz file '%s' with groups file '%s':Authz file cannot contain any groups when global groups are being used.
(no error)
post-commit hook failed with no error message.
post commit FS processing had error:
(no error message)
post commit FS processing had error:
Not authorized to open a commit editor.
svn:author
No such revision %ld (HEAD is %ld)
Access denied
Directory '%s' is out of date
File '%s' is out of date
'%s' is out of date
Got source path but no source revision for '%s'
Source url '%s' is from different repository
Path '%s' not present
Checksum mismatch for resulting fulltext
(%s)
No valid transaction supplied to close_edit
svn:date
Conflict at '%s'
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/commit.c
SVN_IS_VALID_REVNUM(revision)
Commit succeeded, but post-commit hook failed
db/current
Invalid source parent directory '(null)'
Invalid target path
Delta depth 'exclude' not supported
Invalid editor anchoring; at least one of the input paths is not a directory and there was no source entry
Unable to open root of edit
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/delta.c
target_path && edit_path
edit_path
target_path
svn:entry:committed-rev
svn:entry:committed-date
svn:entry:last-author
svn:entry:uuid
target_path && source_path && edit_path
svn:log
* Dumped revision %ld.
* Verified revision %ld.
------- Committed revision %ld >>>
------- Committed new rev %ld (loaded from original rev %ld) >>>
     * editing path : %s ...
     * deleting path : %s ...
     * adding path : %s ...
     * replacing path : %s ...
 done.
COPIED...
<<< Started new transaction, based on original revision %ld
 removing '\r' from %s ...
svn:mergeinfo
%s: %s
Revision-number
PROPS-END
Prop-content-length
Content-length
Text-content-length
%lld
Start revision %ld is greater than end revision %ld
End revision %ld is invalid (youngest revision is %ld)
SVN-fs-dump-format-version: %d
UUID: %s
The range of revisions dumped contained references to copy sources outside that range.
The range of revisions dumped contained mergeinfo which reference revisions outside that range.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/dump.c
!path || pb
E%06d: While validating fspath '%s': %s
Node-path
Node-kind
file
Change invalid path '%s' in r%ld
Node-action
change
Deleting invalid path '%s' in r%ld
delete
Replacing non-existent path '%s' in r%ld
replace
Adding already existing path '%s' in r%ld
Copying from invalid path to '%s' in r%ld
Referencing data in revision %ld, which is older than the oldest dumped revision (r%ld).  Loading this dump into an empty repository will fail.
Node-copyfrom-rev
Node-copyfrom-path
Text-copy-source-md5
Text-copy-source-sha1
Prop-delta
true
Text-delta
Text-delta-base-md5
Text-delta-base-sha1
Text-content-md5
Text-content-sha1
Path '%s' not found in r%ld.
Unexpected node kind %d for '%s' at r%ld. Expected kind was %d.
Path '%s' exists in r%ld.
Mergeinfo referencing revision(s) prior to the oldest dumped revision (r%ld). Loading this dump may result in invalid mergeinfo.
Duplicate representation of path '%s' in %s property of '%s'
Node '%s' is not a directory.
Node '%s' is not a file.
Unexpected node kind %d for '%s'
Duplicate representation of path '%s'
svn:txn-
Storage of non-regular property '%s' is disallowed through the repository interface, and could indicate a bug in your client
Cannot accept '%s' property because it is not encoded in UTF-8
Cannot accept non-LF line endings in '%s' property
Write denied:  not authorized to read all of revision %ld
Cannot lock path, no authenticated username available.
Locking succeeded, but post-lock hook failed
Cannot unlock, no authenticated username available
Unlock succeeded, but post-unlock hook failed
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/fs-wrap.c
(depth == svn_depth_empty) || (depth == svn_depth_files) || (depth == svn_depth_immediates) || (depth == svn_depth_infinity)
Commit rejected because mergeinfo on '%s' contains unexpected string terminator
Commit rejected because mergeinfo on '%s' is syntactically invalid
pack_action >= svn_fs_pack_notify_start && pack_action <= svn_fs_pack_notify_end_revprop
start-commit
/dev/null
pre-commit
post-commit
pre-revprop-change
Repository has not been enabled to accept revision propchanges;
ask the administrator to create a pre-revprop-change hook
post-revprop-change
pre-lock
post-lock
pre-unlock
post-unlock
Failed to run '%s' hook; broken symlink
Can't create null stdout for hook '%s'
default
Failed to start '%s' hook
Error closing null file
%s=%s
'%s' hook succeeded, but error output could not be read
[Error output could not be translated from the native locale to UTF-8.]
[Error output could not be read.]
'%s' hook failed (did not exit cleanly: apr_exit_why_e was %d, exitcode was %d).  
Commit
Revprop change
Lock
Unlock
%s hook failed (exit code %d)
%s blocked by %s hook (exit code %d)
 with output:
 with no output.
LOCK-TOKENS:
%s|%s
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/load-fs-vtable.c
(SVN_IS_VALID_REVNUM(start_rev) && SVN_IS_VALID_REVNUM(end_rev)) || ((! SVN_IS_VALID_REVNUM(start_rev)) && (! SVN_IS_VALID_REVNUM(end_rev)))
start_rev <= end_rev
Malformed dumpstream: Revision 0 must not contain node records
Unrecognized node-action on node '%s'
Relative source revision %ld is not available in current repository
Copy source checksum mismatch on copy from '%s'@%ld
to '%s' in rev based on r%ld
Invalid svn:mergeinfo value
Invalid svn:mergeinfo value; leaving unchanged
UUID
SVN-fs-dump-format-version
Unrecognized record type in stream
Sum of subblock sizes larger than total block content length
Premature end of content data in dumpstream
Malformed dumpfile header '%s'
Unsupported dumpfile version: %d
Dump stream contains a malformed header (with no ':') at '%.20s'
Dump stream contains a malformed header (with no value) at '%.20s'
Incomplete or unterminated property block
Dumpstream data appears to be malformed
Unexpected EOF writing contents
No such revision %ld
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/log.c
SVN_IS_VALID_REVNUM(start_rev)
SVN_IS_VALID_REVNUM(end_rev)
added_mergeinfo && deleted_mergeinfo
combined_list != NULL
'%s' not found in filesystem
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/node_tree.c
parent_baton && path
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/replay.c
!svn_dirent_is_absolute(base_repos_relpath)
Filesystem path '%s' is neither a file nor a directory
Root directory already exists.
parent_baton
relpath && *relpath
SVN_IS_VALID_REVNUM(inquire_rev)
Depth 'exclude' not supported for link
Request depth 'exclude' not supported
+%lu:%s
+%ld:
Unsupported report depth '%s'
+%lu:%s%s%s%s%c%s
Invalid report for top level of working copy
Two top-level reports with no target
Invalid length (%%%s) when about to read a string
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/reporter.c
amt == size
Invalid depth (%c) for path '%s'
Not authorized to open root of edit operation
Target path '%s' does not exist
Cannot replace a directory from within
svn:entry:lock-token
Working copy path '%s' does not exist in repository
svnserve.conf
db.lock
db-logs.lock
hooks-env
fs-type
fsfs
pre-1.4-compatible
'%s' is an existing repository
'%s' is a subdirectory of an existing repository rooted at '%s'
Repository creation failed
format
mergeinfo
unknown capability '%s'
Hotcopy source and destination are equal
@(#)1.9.4 (r1740329)
conf
hooks
locks
Could not create top-level directory
pre-1.5-compatible
Creating DAV sandbox dir
This is a Subversion repository; use the 'svnadmin' and 'svnlook' 
tools to examine it.  Do not add, delete, or modify files here 
unless you know how to avoid corrupting the repository.
The directory "db" contains a Berkeley DB environment.
you may need to tweak the values in "db/DB_CONFIG" to match the
requirements of your site.
Visit http://subversion.apache.org/ for more information.
README.txt
'%s' exists and is non-empty
Creating hook directory
# START-COMMIT HOOK
# The start-commit hook is invoked immediately after a Subversion txn is
# created and populated with initial revprops in the process of doing a
# commit. Subversion runs this hook by invoking a program (script, 
# executable, binary, etc.) named 'start-commit' (for which this file
# is a template) with the following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] USER         (the authenticated user attempting to commit)
#   [3] CAPABILITIES (a colon-separated list of capabilities reported
#                     by the client; see note below)
#   [4] TXN-NAME     (the name of the commit txn just created)
# Note: The CAPABILITIES parameter is new in Subversion 1.5, and 1.5
# clients will typically report at least the "mergeinfo" capability.
# If there are other capabilities, then the list is colon-separated,
# e.g.: "mergeinfo:some-other-capability" (the order is undefined).
# Note: The TXN-NAME parameter is new in Subversion 1.8.  Prior to version
# 1.8, the start-commit hook was invoked before the commit txn was even
# created, so the ability to inspect the commit txn and its metadata from
# within the start-commit hook was not possible.
# The list is self-reported by the client.  Therefore, you should not
# make security assumptions based on the capabilities list, nor should
# you assume that clients reliably report every capability they have.
# If the hook program exits with success, the commit continues; but
# if it exits with failure (non-zero), the commit is stopped before
# a Subversion txn is created, and STDERR is returned to the client.
REPOS="$1"
USER="$2"
commit-allower.pl --repository "$REPOS" --user "$USER" || exit 1
special-auth-check.py --user "$USER" --auth-level 3 || exit 1
# All checks passed, so allow the commit.
exit 0
Creating start-commit hook
# PRE-COMMIT HOOK
# The pre-commit hook is invoked before a Subversion txn is
# committed.  Subversion runs this hook by invoking a program
# (script, executable, binary, etc.) named 'pre-commit' (for which
# this file is a template), with the following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] TXN-NAME     (the name of the txn about to be committed)
#   [STDIN] LOCK-TOKENS ** the lock tokens are passed via STDIN.
#   If STDIN contains the line "LOCK-TOKENS:\n" (the "\n" denotes a
#   single newline), the lines following it are the lock tokens for
#   this commit.  The end of the list is marked by a line containing
#   only a newline character.
#   Each lock token line consists of a URI-escaped path, followed
#   by the separator character '|', followed by the lock token string,
#   followed by a newline.
# If the hook program exits with success, the txn is committed; but
# if it exits with failure (non-zero), the txn is aborted, no commit
# takes place, and STDERR is returned to the client.   The hook
# program can use the 'svnlook' utility to help it examine the txn.
#   ***  NOTE: THE HOOK PROGRAM MUST NOT MODIFY THE TXN, EXCEPT  ***
#   ***  FOR REVISION PROPERTIES (like svn:log or svn:author).   ***
#   This is why we recommend using the read-only 'svnlook' utility.
#   In the future, Subversion may enforce the rule that pre-commit
#   hooks should not modify the versioned data in txns, or else come
#   up with a mechanism to make it safe to do so (by informing the
#   committing client of the changes).  However, right now neither
#   mechanism is implemented, so hook writers just have to be careful.
REPOS="$1"
TXN="$2"
# Make sure that the log message contains some text.
SVNLOOK=/Applications/Xcode.app/Contents/Developer/usr/bin/svnlook
$SVNLOOK log -t "$TXN" "$REPOS" | \
   grep "[a-zA-Z0-9]" > /dev/null || exit 1
# Check that the author of this commit has the rights to perform
# the commit on the files and directories being modified.
commit-access-control.pl "$REPOS" "$TXN" commit-access-control.cfg || exit 1
# All checks passed, so allow the commit.
exit 0
Creating pre-commit hook
# PRE-REVPROP-CHANGE HOOK
# The pre-revprop-change hook is invoked before a revision property
# is added, modified or deleted.  Subversion runs this hook by invoking
# a program (script, executable, binary, etc.) named 'pre-revprop-change'
# (for which this file is a template), with the following ordered
# arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the revision being tweaked)
#   [3] USER         (the username of the person tweaking the property)
#   [4] PROPNAME     (the property being set on the revision)
#   [5] ACTION       (the property is being 'A'dded, 'M'odified, or 'D'eleted)
#   [STDIN] PROPVAL  ** the new property value is passed via STDIN.
# If the hook program exits with success, the propchange happens; but
# if it exits with failure (non-zero), the propchange doesn't happen.
# The hook program can use the 'svnlook' utility to examine the 
# existing value of the revision property.
# WARNING: unlike other hooks, this hook MUST exist for revision
# properties to be changed.  If the hook does not exist, Subversion 
# will behave as if the hook were present, but failed.  The reason
# for this is that revision properties are UNVERSIONED, meaning that
# a successful propchange is destructive;  the old value is gone
# forever.  We recommend the hook back up the old value somewhere.
REPOS="$1"
REV="$2"
USER="$3"
PROPNAME="$4"
ACTION="$5"
if [ "$ACTION" = "M" -a "$PROPNAME" = "svn:log" ]; then exit 0; fi
echo "Changing revision properties other than svn:log is prohibited" >&2
exit 1
Creating pre-revprop-change hook
# PRE-LOCK HOOK
# The pre-lock hook is invoked before an exclusive lock is
# created.  Subversion runs this hook by invoking a program 
# (script, executable, binary, etc.) named 'pre-lock' (for which
# this file is a template), with the following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] PATH         (the path in the repository about to be locked)
#   [3] USER         (the user creating the lock)
#   [4] COMMENT      (the comment of the lock)
#   [5] STEAL-LOCK   (1 if the user is trying to steal the lock, else 0)
# If the hook program outputs anything on stdout, the output string will
# be used as the lock token for this lock operation.  If you choose to use
# this feature, you must guarantee the tokens generated are unique across
# the repository each time.
# If the hook program exits with success, the lock is created; but
# if it exits with failure (non-zero), the lock action is aborted
# and STDERR is returned to the client.
REPOS="$1"
PATH="$2"
USER="$3"
COMMENT="$4"
STEAL="$5"
# If a lock exists and is owned by a different person, don't allow it
# to be stolen (e.g., with 'svn lock --force ...').
# (Maybe this script could send email to the lock owner?)
SVNLOOK=/Applications/Xcode.app/Contents/Developer/usr/bin/svnlook
GREP=/bin/grep
SED=/bin/sed
LOCK_OWNER=`$SVNLOOK lock "$REPOS" "$PATH" | \
            $GREP '^Owner: ' | $SED 's/Owner: //'`
# If we get no result from svnlook, there's no lock, allow the lock to
# happen:
if [ "$LOCK_OWNER" = "" ]; then
  exit 0
# If the person locking matches the lock's owner, allow the lock to
# happen:
if [ "$LOCK_OWNER" = "$USER" ]; then
  exit 0
# Otherwise, we've got an owner mismatch, so return failure:
echo "Error: $PATH already locked by ${LOCK_OWNER}." 1>&2
exit 1
Creating pre-lock hook
# PRE-UNLOCK HOOK
# The pre-unlock hook is invoked before an exclusive lock is
# destroyed.  Subversion runs this hook by invoking a program 
# (script, executable, binary, etc.) named 'pre-unlock' (for which
# this file is a template), with the following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] PATH         (the path in the repository about to be unlocked)
#   [3] USER         (the user destroying the lock)
#   [4] TOKEN        (the lock token to be destroyed)
#   [5] BREAK-UNLOCK (1 if the user is breaking the lock, else 0)
# If the hook program exits with success, the lock is destroyed; but
# if it exits with failure (non-zero), the unlock action is aborted
# and STDERR is returned to the client.
REPOS="$1"
PATH="$2"
USER="$3"
TOKEN="$4"
BREAK="$5"
# If a lock is owned by a different person, don't allow it be broken.
# (Maybe this script could send email to the lock owner?)
SVNLOOK=/Applications/Xcode.app/Contents/Developer/usr/bin/svnlook
GREP=/bin/grep
SED=/bin/sed
LOCK_OWNER=`$SVNLOOK lock "$REPOS" "$PATH" | \
            $GREP '^Owner: ' | $SED 's/Owner: //'`
# If we get no result from svnlook, there's no lock, return success:
if [ "$LOCK_OWNER" = "" ]; then
  exit 0
# If the person unlocking matches the lock's owner, return success:
if [ "$LOCK_OWNER" = "$USER" ]; then
  exit 0
# Otherwise, we've got an owner mismatch, so return failure:
echo "Error: $PATH locked by ${LOCK_OWNER}." 1>&2
exit 1
Creating pre-unlock hook
# POST-COMMIT HOOK
# The post-commit hook is invoked after a commit.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-commit' (for which this file is a template) with the 
# following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the number of the revision just committed)
#   [3] TXN-NAME     (the name of the transaction that has become REV)
# Because the commit has already completed and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# newly-committed tree.
REPOS="$1"
REV="$2"
TXN_NAME="$3"
mailer.py commit "$REPOS" "$REV" /path/to/mailer.conf
Creating post-commit hook
# POST-LOCK HOOK
# The post-lock hook is run after a path is locked.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-lock' (for which this file is a template) with the 
# following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] USER         (the user who created the lock)
# The paths that were just locked are passed to the hook via STDIN.
# Because the locks have already been created and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to examine the paths in the repository
# but since the hook is invoked asyncronously the newly-created locks
# may no longer be present.
REPOS="$1"
USER="$2"
# Send email to interested parties, let them know a lock was created:
mailer.py lock "$REPOS" "$USER" /path/to/mailer.conf
Creating post-lock hook
# POST-UNLOCK HOOK
# The post-unlock hook runs after a path is unlocked.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-unlock' (for which this file is a template) with the 
# following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] USER         (the user who destroyed the lock)
# The paths that were just unlocked are passed to the hook via STDIN.
# Because the lock has already been destroyed and cannot be undone,
# the exit code of the hook program is ignored.
REPOS="$1"
USER="$2"
# Send email to interested parties, let them know a lock was removed:
mailer.py unlock "$REPOS" "$USER" /path/to/mailer.conf
Creating post-unlock hook
# POST-REVPROP-CHANGE HOOK
# The post-revprop-change hook is invoked after a revision property
# has been added, modified or deleted.  Subversion runs this hook by
# invoking a program (script, executable, binary, etc.) named
# 'post-revprop-change' (for which this file is a template), with the
# following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the revision that was tweaked)
#   [3] USER         (the username of the person tweaking the property)
#   [4] PROPNAME     (the property that was changed)
#   [5] ACTION       (the property was 'A'dded, 'M'odified, or 'D'eleted)
#   [STDIN] PROPVAL  ** the old property value is passed via STDIN.
# Because the propchange has already completed and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# new property value.
REPOS="$1"
REV="$2"
USER="$3"
PROPNAME="$4"
ACTION="$5"
mailer.py propchange2 "$REPOS" "$REV" "$USER" "$PROPNAME" "$ACTION" /path/to/mailer.conf
Creating post-revprop-change hook
%s%s
.tmpl
#!/bin/sh
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
# On a Unix system, the normal procedure is to have '
# invoke other programs to do the real work, though it may do the
# work itself too.
# Note that '
' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
# On a Windows system, you should name the hook program
.bat' or '
.exe',
# but the basic idea is the same.
# The hook program runs in an empty environment, unless the server is
# explicitly configured otherwise.  For example, a common problem is for
# the PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
# CAUTION:
# For security reasons, you MUST always properly quote arguments when
# you use them, as those arguments could contain whitespace or other
# problematic characters. Additionally, you should delimit the list
# of options with "--" before passing the arguments, so malicious
# clients cannot bootleg unexpected options to the commands your
# script aims to execute.
# For similar reasons, you should also add a trailing @ to URLs which
# are passed to SVN commands accepting URLs with peg revisions.
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# the Subversion repository at
# http://svn.apache.org/repos/asf/subversion/trunk/tools/hook-scripts/ and
# http://svn.apache.org/repos/asf/subversion/trunk/contrib/hook-scripts/
Creating conf directory
### This file controls the configuration of the svnserve daemon, if you
### use it to allow access to this repository.  (If you only allow
### access through http: and/or file: URLs, then this file is
### irrelevant.)
### Visit http://subversion.apache.org/ for more information.
[general]
### The anon-access and auth-access options control access to the
### repository for unauthenticated (a.k.a. anonymous) users and
### authenticated users, respectively.
### Valid values are "write", "read", and "none".
### Setting the value to "none" prohibits both reading and writing;
### "read" allows read-only access, and "write" allows complete 
### read/write access to the repository.
### The sample settings below are the defaults and specify that anonymous
### users have read-only access to the repository, while authenticated
### users have read and write access to the repository.
# anon-access = read
# auth-access = write
### The password-db option controls the location of the password
### database file.  Unless you specify a path starting with a /,
### the file's location is relative to the directory containing
### this configuration file.
### If SASL is enabled (see below), this file will NOT be used.
### Uncomment the line below to use the default password file.
# password-db = passwd
### The authz-db option controls the location of the authorization
### rules for path-based access control.  Unless you specify a path
### starting with a /, the file's location is relative to the
### directory containing this file.  The specified path may be a
### repository relative URL (^/) or an absolute file:// URL to a text
### file in a Subversion repository.  If you don't specify an authz-db,
### no path-based access control is done.
### Uncomment the line below to use the default authorization file.
# authz-db = authz
### The groups-db option controls the location of the file with the
### group definitions and allows maintaining groups separately from the
### authorization rules.  The groups-db file is of the same format as the
### authz-db file and should contain a single [groups] section with the
### group definitions.  If the option is enabled, the authz-db file cannot
### contain a [groups] section.  Unless you specify a path starting with
### a /, the file's location is relative to the directory containing this
### file.  The specified path may be a repository relative URL (^/) or an
### absolute file:// URL to a text file in a Subversion repository.
### This option is not being used by default.
# groups-db = groups
### This option specifies the authentication realm of the repository.
### If two repositories have the same authentication realm, they should
### have the same password database, and vice versa.  The default realm
### is repository's uuid.
# realm = My First Repository
### The force-username-case option causes svnserve to case-normalize
### usernames before comparing them against the authorization rules in the
### authz-db file configured above.  Valid values are "upper" (to upper-
### case the usernames), "lower" (to lowercase the usernames), and
### "none" (to compare usernames as-is without case conversion, which
### is the default behavior).
# force-username-case = none
### The hooks-env options specifies a path to the hook script environment 
### configuration file. This option overrides the per-repository default
### and can be used to configure the hook script environment for multiple 
### repositories in a single file, if an absolute path is specified.
### Unless you specify an absolute path, the file's location is relative
### to the directory containing this file.
# hooks-env = hooks-env
[sasl]
### This option specifies whether you want to use the Cyrus SASL
### library for authentication. Default is false.
### This section will be ignored if svnserve is not built with Cyrus
### SASL support; to check, run 'svnserve --version' and look for a line
### reading 'Cyrus SASL authentication is available.'
# use-sasl = true
### These options specify the desired strength of the security layer
### that you want SASL to provide. 0 means no encryption, 1 means
### integrity-checking only, values larger than 1 are correlated
### to the effective key length for encryption (e.g. 128 means 128-bit
### encryption). The values below are the defaults.
# min-encryption = 0
# max-encryption = 256
Creating svnserve.conf file
### This file is an example password file for svnserve.
### Its format is similar to that of svnserve.conf. As shown in the
### example below it contains one section labelled [users].
### The name and password for each user follow, one account per line.
[users]
# harry = harryssecret
# sally = sallyssecret
passwd
Creating passwd file
### This file is an example authorization file for svnserve.
### Its format is identical to that of mod_authz_svn authorization
### files.
### As shown below each section defines authorizations for the path and
### (optional) repository specified by the section name.
### The authorizations follow. An authorization line can refer to:
###  - a single user,
###  - a group of users defined in a special [groups] section,
###  - an alias defined in a special [aliases] section,
###  - all authenticated users, using the '$authenticated' token,
###  - only anonymous users, using the '$anonymous' token,
###  - anyone, using the '*' wildcard.
### A match can be inverted by prefixing the rule with '~'. Rules can
### grant read ('r') access, read-write ('rw') access, or no access
### ('').
[aliases]
# joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average
[groups]
# harry_and_sally = harry,sally
# harry_sally_and_joe = harry,sally,&joe
# [/foo/bar]
# harry = rw
# &joe = r
# * =
# [repository:/baz/fuz]
# @harry_and_sally = rw
# * = r
authz
Creating authz file
### This file is an example hook script environment configuration file.
### Hook scripts run in an empty environment by default.
### As shown below each section defines environment variables for a
### particular hook script. The [default] section defines environment
### variables for all hook scripts, unless overridden by a hook-specific
### section.
### This example configures a UTF-8 locale for all hook scripts, so that 
### special characters, such as umlauts, may be printed to stderr.
### If UTF-8 is used with a mod_dav_svn server, the SVNUseUTF8 option must
### also be set to 'yes' in httpd.conf.
### With svnserve, the LANG environment variable of the svnserve process
### must be set to the same value as given here.
[default]
LANG = en_US.UTF-8
### This sets the PATH environment variable for the pre-commit hook.
[pre-commit]
PATH = /usr/local/bin:/usr/bin:/usr/sbin
hooks-env.tmpl
Creating hooks-env file
Error opening db lockfile
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/repos.c
Creating db logs lock file
DB logs lock file, representing locks on the versioned filesystem logs.
All log manipulators of the repository's Berkeley DB environment
take out exclusive locks on this file to ensure that only one
accessor manipulates the logs at a time.
You should never have to edit or remove this file.
This file is not used by Subversion 1.3.x or later.
However, its existence is required for compatibility with
Subversion 1.2.x or earlier.
Creating lock dir
Creating db lock file
DB lock file, representing locks on the versioned filesystem.
All accessors -- both readers and writers -- of the repository's
Berkeley DB environment take out shared locks on this file, and
each accessor removes its lock when done.  If and when the DB
recovery procedure is run, the recovery code takes out an
exclusive lock on this file, so we can be sure no one else is
using the DB during the recovery.
You should never have to edit or remove this file.
Expected repository format '%d' or '%d'; found format '%d'
Invalid start revision %ld
Invalid end revision %ld
/BuildRoot/Library/Caches/com.apple.xbs/Sources/subversion/subversion-74/subversion/subversion/libsvn_repos/rev_hunt.c
location_revisions_orig->elt_size == sizeof(svn_revnum_t)
end_rev <= start_rev
start_rev <= peg_revision
mainline_path_revisions->nelts > 0
Failed to find time on revision %ld
Unreadable path encountered; access denied
fs_path != NULL
'%s' is not a file in revision %ld
%s:%ld
normalized_unique
normalized_collision
