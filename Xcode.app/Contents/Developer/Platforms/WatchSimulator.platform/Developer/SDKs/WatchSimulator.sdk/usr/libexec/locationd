GyroCalibrationForceDoubleEntry
38CLGyroCalibrationDatabaseLocalMultiRun
NSt3__120__shared_ptr_emplaceIN30CLGyroCalibrationDatabase_Type16NotificationDataENS_9allocatorIS2_EEEE
N16CLMotionNotifier14SiloDispatcherIN14CLDeviceMotion6SampleEEE
N16CLMotionNotifier10DispatcherE
N14CLDeviceMotion6SampleE
1475
30CLGyroCalibrationDatabaseLocal
NSt3__118basic_stringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
N16CLMotionNotifier18CallbackDispatcherIN15CLAccelerometer6SampleEEE
N16CLMotionNotifier18CallbackDispatcherIN6CLGyro6SampleEEE
N16CLMotionNotifier18CallbackDispatcherIN6CLGyro11TemperatureEEE
N16CLMotionNotifier18CallbackDispatcherIN14CLMagnetometer6SampleEEE
N16CLMotionNotifier14SiloDispatcherIN28CLMotionCoprocessorInterface16NotificationDataEEE
N28CLMotionCoprocessorInterface16NotificationDataE
14CLNotifierBase
34CLGyroCalibrationDatabaseLocalBase
23CLCompassDatabaseDaemon
27CLCompassDatabaseController
NSt3__120__shared_ptr_emplaceIN22CLCompassDatabase_Type16NotificationDataENS_9allocatorIS2_EEEE
20CLRunningBufferStatsIdE
17CLRunningVector3dIfE
20CLRunningBufferStatsIfE
NSt3__120__shared_ptr_pointerIP23CLCompassBiasClusteringNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI23CLCompassBiasClusteringEE
10CLVector3dIfE
30CLGyroBiasEstimatorClientLocal
CA32CLGeomagneticModelProviderDaemon
NSt3__120__shared_ptr_emplaceIN31CLGeomagneticModelProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
Q8>\
39CLGyroCalibrationDatabaseLocalNonlinear
18CLCoverStateDaemon
19CLGestureDataLogger
10CLNotifierIN24CLGestureDataLogger_Type12NotificationENS0_16NotificationDataEccE
@(#)PROGRAM:locationd  PROJECT:CoreLocation-2101.0.54.1
BNSt3__110__function6__funcIZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_0NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
NSt3__110__function6__baseIFvNS_8functionIFbvEEEEEE
ZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_0
NSt3__110__function6__funcIZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_1NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_1
NSt3__110__function6__funcIZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_2NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN25CLMicroLocationAWDMetricsC1ER23CLMicroLocationDatabaseE3$_2
31CLMicroLocationWifiScanStrategy
N13CLWifiScanner21IWifiScanningStrategyE
NSt3__110__function6__funcIN12_GLOBAL__N_124LocalizerChannelIteratorENS_9allocatorIS3_EEFNS_6vectorIiNS4_IiEEEEvEEE
NSt3__110__function6__baseIFNS_6vectorIiNS_9allocatorIiEEEEvEEE
N12_GLOBAL__N_124LocalizerChannelIteratorE
NSt3__110__function6__funcIZN31CLMicroLocationWifiScanStrategy9Recording19makeChannelIteratorENS_6vectorI35CLMicroLocationWiFiChannelHistogramNS_9allocatorIS5_EEEEE3$_0NS6_IS9_EEFNS4_IiNS6_IiEEEEvEEE
ZN31CLMicroLocationWifiScanStrategy9Recording19makeChannelIteratorENSt3__16vectorI35CLMicroLocationWiFiChannelHistogramNS1_9allocatorIS3_EEEEE3$_0
NSt3__120__shared_ptr_emplaceIN13CLWifiScanner16WifiScanSettingsENS_9allocatorIS2_EEEE
ePs(@5
f(<=4
. Bc
m\R
%$rD
zeA,@
`>j'5
i+8h6
27aI
F)d;[F
N5boost2io18basic_altstringbufIcNSt3__111char_traitsIcEENS2_9allocatorIcEEEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_2io17bad_format_stringEEEEE
N5boost16exception_detail19error_info_injectorINS_2io17bad_format_stringEEE
N5boost2io17bad_format_stringE
N5boost2io12format_errorE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_2io13too_many_argsEEEEE
N5boost16exception_detail19error_info_injectorINS_2io13too_many_argsEEE
N5boost2io13too_many_argsE
N5boost2io22basic_oaltstringstreamIcNSt3__111char_traitsIcEENS2_9allocatorIcEEEE
N5boost16base_from_memberINS_10shared_ptrINS_2io18basic_altstringbufIcNSt3__111char_traitsIcEENS4_9allocatorIcEEEEEELi0EEE
N5boost6detail18sp_counted_impl_pdIPNS_2io18basic_altstringbufIcNSt3__111char_traitsIcEENS4_9allocatorIcEEEENS2_22basic_oaltstringstreamIcS6_S8_E5No_OpEEE
N5boost2io22basic_oaltstringstreamIcNSt3__111char_traitsIcEENS2_9allocatorIcEEE5No_OpE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_2io12too_few_argsEEEEE
N5boost16exception_detail19error_info_injectorINS_2io12too_few_argsEEE
N5boost2io12too_few_argsE
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt14overflow_errorEEEE
N5boost16exception_detail19error_info_injectorISt14overflow_errorEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt12domain_errorEEEE
N5boost16exception_detail19error_info_injectorISt12domain_errorEE
N5boost4math14rounding_errorE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_4math14rounding_errorEEEEE
N5boost16exception_detail19error_info_injectorINS_4math14rounding_errorEEE
Egk~)
=*.`
N12_GLOBAL__N_121BufferedInserterErrorE
NSt3__110__function6__funcIZN23CLMicroLocationDatabase9DbFlusherC1ERS2_E4$_22NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN23CLMicroLocationDatabase9DbFlusherC1ERS_E4$_22
40CLMicroLocationFingerprintDatabaseSource
N37CLMicroLocationFingerprintDataSources24IInterruptibleDataSourceE
?25CLLaplacianKernelFunction
16CLKernelFunction
27CLEuclideanDistanceFunction
18CLDistanceFunction
34CLEuclideanSquaredDistanceFunction
24CLGaussianKernelFunction
27CLExponentialKernelFunction
23CLUniformKernelFunction
NSt3__110__function6__funcIPFdRK26CLMicroLocationFingerprintS4_ENS_9allocatorIS6_EES5_EE
NSt3__110__function6__baseIFdRK26CLMicroLocationFingerprintS4_EEE
PFdRK26CLMicroLocationFingerprintS1_E
FdRK26CLMicroLocationFingerprintS1_E
NSt3__110__function6__funcIZN25CLMicroLocationAlgorithms33createFingerprintDistanceFunctionERK25CLMicroLocationDictionaryE3$_0NS_9allocatorIS6_EEFdRK26CLMicroLocationFingerprintSB_EEE
ZN25CLMicroLocationAlgorithms33createFingerprintDistanceFunctionERK25CLMicroLocationDictionaryE3$_0
NSt3__110__function6__funcIZN25CLMicroLocationAlgorithms33createFingerprintDistanceFunctionERK25CLMicroLocationDictionaryE3$_1NS_9allocatorIS6_EEFdRK26CLMicroLocationFingerprintSB_EEE
ZN25CLMicroLocationAlgorithms33createFingerprintDistanceFunctionERK25CLMicroLocationDictionaryE3$_1
NSt3__110__function6__funcIPFfRK24CLDistanceMatrixTemplateI24CLSymmetricMatrixStorageIfEENS_4pairImmEES9_S9_ENS_9allocatorISB_EESA_EE
NSt3__110__function6__baseIFfRK24CLDistanceMatrixTemplateI24CLSymmetricMatrixStorageIfEENS_4pairImmEES9_S9_EEE
PFfRK24CLDistanceMatrixTemplateI24CLSymmetricMatrixStorageIfEENSt3__14pairImmEES7_S7_E
FfRK24CLDistanceMatrixTemplateI24CLSymmetricMatrixStorageIfEENSt3__14pairImmEES7_S7_E
NSt3__110__function6__funcIZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_0NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_0
NSt3__110__function6__funcIZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_1NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_1
NSt3__110__function6__funcIZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_2NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN26CLMicroLocationMaintenanceC1ER23CLMicroLocationDatabaseE3$_2
39CLMicroLocationNearestNeighborAlgorithm
34CLMicroLocationDendrogramAlgorithm
30CLMicroLocationKMeansAlgorithm
N25CLMicroLocationAlgorithms8ILearnerE
N20CLMicroLocationProto8WiFiRssiE
N20CLMicroLocationProto9WiFiRangeE
N20CLMicroLocationProto23ATVAirplayBluetoothRssiE
N20CLMicroLocationProto20HomeKitBluetoothRssiE
N20CLMicroLocationProto11MeasurementE
N20CLMicroLocationProto11FingerprintE
N20CLMicroLocationProto17ClusterRecordingsE
N20CLMicroLocationProto5ModelE
N20CLMicroLocationProto16AccelerometerXYZE
N20CLMicroLocationProto19LocalizationRequestE
N20CLMicroLocationProto9AppLaunchE
N20CLMicroLocationProto14SiriInvocationE
N20CLMicroLocationProto11BacklightOnE
N20CLMicroLocationProto23BatteryChargerConnectedE
N20CLMicroLocationProto9StepCountE
N20CLMicroLocationProto15ForcedRecordingE
N20CLMicroLocationProto14FirstWakeOfDayE
N20CLMicroLocationProto16HomeKitAccessoryE
N20CLMicroLocationProto12HomeKitSceneE
N20CLMicroLocationProto14RecordingEventE
N20CLMicroLocationProto15ChannelAndCountE
N20CLMicroLocationProto13WifiHistogramE
N20CLMicroLocationProto13ConfigurationE
25CLMicroLocationDictionary
N37CLMicroLocationFingerprintDataSources24IInterruptibleDataSource18CancelledExceptionE
NSt3__110__function6__funcIZN22CLMicroLocationLearnerC1ERNS2_16ILearnerDelegateER23CLMicroLocationDatabaseE3$_0NS_9allocatorIS7_EEFvNS_8functionIFbvEEEEEE
ZN22CLMicroLocationLearnerC1ERNS_16ILearnerDelegateER23CLMicroLocationDatabaseE3$_0
NSt3__110__function6__funcIZN22CLMicroLocationLearnerC1ERNS2_16ILearnerDelegateER23CLMicroLocationDatabaseE3$_1NS_9allocatorIS7_EEFvNS_8functionIFbvEEEEEE
ZN22CLMicroLocationLearnerC1ERNS_16ILearnerDelegateER23CLMicroLocationDatabaseE3$_1
NSt3__110__function6__funcIZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN25CLMicroLocationModelTable5EntryEEEbNS_6vectorIT_NS_9allocatorIS7_EEEEENKUlvE_clEvEUlvE_NS8_ISC_EEFbvEEE
ZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN25CLMicroLocationModelTable5EntryEEEbNSt3__16vectorIT_NS3_9allocatorIS5_EEEEENKUlvE_clEvEUlvE_
NSt3__110__function6__funcIZN24CLMicroLocationAnalyticsC1ERNS2_18IAnalyticsDelegateER23CLMicroLocationDatabaseE3$_0NS_9allocatorIS7_EEFvNS_8functionIFbvEEEEEE
ZN24CLMicroLocationAnalyticsC1ERNS_18IAnalyticsDelegateER23CLMicroLocationDatabaseE3$_0
NSt3__110__function6__funcIZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN33CLMicroLocationConfigurationTable5EntryEEEbNS_6vectorIT_NS_9allocatorIS7_EEEEENKUlvE_clEvEUlvE_NS8_ISC_EEFbvEEE
ZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN33CLMicroLocationConfigurationTable5EntryEEEbNSt3__16vectorIT_NS3_9allocatorIS5_EEEEENKUlvE_clEvEUlvE_
ffffff
33CLMicroLocationNullSpaceAlgorithm
N25CLMicroLocationAlgorithms10ILocalizerE
NSt3__110__function6__funcIPFdRKNS_8multisetIdNS_4lessIdEENS_9allocatorIdEEEEENS5_ISB_EEFdS7_EEE
NSt3__110__function6__baseIFdNS_8multisetIdNS_4lessIdEENS_9allocatorIdEEEEEEE
PFdRKNSt3__18multisetIdNS_4lessIdEENS_9allocatorIdEEEEE
FdRKNSt3__18multisetIdNS_4lessIdEENS_9allocatorIdEEEEE
NSt3__110__function6__funcIZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN35CLMicroLocationRecordingEventsTable5EntryEEEbNS_6vectorIT_NS_9allocatorIS7_EEEEENKUlvE_clEvEUlvE_NS8_ISC_EEFbvEEE
NSt3__110__function6__baseIFbvEEE
ZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN35CLMicroLocationRecordingEventsTable5EntryEEEbNSt3__16vectorIT_NS3_9allocatorIS5_EEEEENKUlvE_clEvEUlvE_
NSt3__110__function6__funcIZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN31CLMicroLocationMeasurementTable5EntryEEEbNS_6vectorIT_NS_9allocatorIS7_EEEEENKUlvE_clEvEUlvE_NS8_ISC_EEFbvEEE
ZZN23CLMicroLocationDatabase23bufferedInsertOrReplaceIN31CLMicroLocationMeasurementTable5EntryEEEbNSt3__16vectorIT_NS3_9allocatorIS5_EEEEENKUlvE_clEvEUlvE_
20CLMicroLocationLogic
44CLMicroLocationSettledStateEstimatorDelegate
NSt3__120__shared_ptr_emplaceI31CLMicroLocationWifiScanStrategyNS_9allocatorIS1_EEEE
NSt3__110__function6__funcIPFNS_8functionIFNS_6vectorIiNS_9allocatorIiEEEEvEEENS3_I35CLMicroLocationWiFiChannelHistogramNS4_IS9_EEEEENS4_ISD_EESC_EE
NSt3__110__function6__baseIFNS_8functionIFNS_6vectorIiNS_9allocatorIiEEEEvEEENS3_I35CLMicroLocationWiFiChannelHistogramNS4_IS9_EEEEEEE
PFNSt3__18functionIFNS_6vectorIiNS_9allocatorIiEEEEvEEENS1_I35CLMicroLocationWiFiChannelHistogramNS2_IS7_EEEEE
FNSt3__18functionIFNS_6vectorIiNS_9allocatorIiEEEEvEEENS1_I35CLMicroLocationWiFiChannelHistogramNS2_IS7_EEEEE
NSt3__110__function6__funcIZN20CLMicroLocationLogic15onForegroundAppENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILx1ELx1EEEEEEENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE3$_5NSG_ISJ_EEFN20CLMicroLocationProto14RecordingEventEvEEE
NSt3__110__function6__baseIFN20CLMicroLocationProto14RecordingEventEvEEE
ZN20CLMicroLocationLogic15onForegroundAppENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILx1ELx1EEEEEEENS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE3$_5
NSt3__110__function6__funcIZN20CLMicroLocationLogic25onForceRecordNotificationENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILx1ELx1EEEEEEEE3$_7NS_9allocatorISD_EEFN20CLMicroLocationProto14RecordingEventEvEEE
ZN20CLMicroLocationLogic25onForceRecordNotificationENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILx1ELx1EEEEEEEE3$_7
NSt3__110__function6__funcIZN20CLMicroLocationLogic16onFirstWakeOfDayENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILx1ELx1EEEEEEEE3$_8NS_9allocatorISD_EEFN20CLMicroLocationProto14RecordingEventEvEEE
ZN20CLMicroLocationLogic16onFirstWakeOfDayENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILx1ELx1EEEEEEEE3$_8
NSt3__110__function6__funcIZN20CLMicroLocationLogic14onHomeKitSceneENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILx1ELx1EEEEEEERKN20CLMicroLocationProto12HomeKitSceneEE4$_10NS_9allocatorISH_EEFNSD_14RecordingEventEvEEE
ZN20CLMicroLocationLogic14onHomeKitSceneENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILx1ELx1EEEEEEERKN20CLMicroLocationProto12HomeKitSceneEE4$_10
NSt3__110__function6__funcIZN20CLMicroLocationLogic18onHomeKitAccessoryENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS3_8durationIeNS_5ratioILx1ELx1EEEEEEERKN20CLMicroLocationProto16HomeKitAccessoryEE4$_11NS_9allocatorISH_EEFNSD_14RecordingEventEvEEE
ZN20CLMicroLocationLogic18onHomeKitAccessoryENSt3__16chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS1_8durationIeNS0_5ratioILx1ELx1EEEEEEERKN20CLMicroLocationProto16HomeKitAccessoryEE4$_11
N5boost6detail17sp_counted_impl_pINS_6random23mersenne_twister_engineIjLm32ELm624ELm397ELm31ELj2567483615ELm11ELj4294967295ELm7ELj2636928640ELm15ELj4022730752ELm18ELj1812433253EEEEE
N5boost6detail15sp_counted_baseE
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt16invalid_argumentEEEE
N5boost16exception_detail19error_info_injectorISt16invalid_argumentEE
41CLMicroLocationFingerprintStdVectorSource
N30CLMicroLocationDatabaseColumns20InvalidDatabaseValueE
]R`)@K
?A/E
__'o
@*G%1
@BCt
a_'o
@)G%1
@BCt
u]g"
H+{5
__'o
@~5g
?)G%1
??Ct
s]g"
H+{5
`_'o
@~5g
?+G%1
?ACt
v]g"
H+{5
?enm
?g(EF
`_'o
?+G%1
?@Ct
Yp;#
B}z}
?$g!G
?46CLLogNormalNormalHypothesisTestUnlockEstimator
18CLIUnlockEstimator
15CLSwimDataStore
19CLSwimDataInterface
NSt3__110__function6__funcIZNK15CLSwimDataStore16getStrokesPerLapE15CLSwimStyleTypeiE3$_0NS_9allocatorIS4_EEFbRK11CLSwimEntryEEE
NSt3__110__function6__baseIFbRK11CLSwimEntryEEE
ZNK15CLSwimDataStore16getStrokesPerLapE15CLSwimStyleTypeiE3$_0
NSt3__110__function6__funcIZNK15CLSwimDataStore32reverseEntryLookupCurrentSessionEjNS_8functionIFbRK11CLSwimEntryEEEE3$_1NS_9allocatorIS9_EES7_EE
ZNK15CLSwimDataStore32reverseEntryLookupCurrentSessionEjNSt3__18functionIFbRK11CLSwimEntryEEEE3$_1
NSt3__110__function6__funcIZN15CLSwimDataStore6addLapERK17CLSwimDetectedLapE3$_7NS_9allocatorIS6_EEFbRK11CLSwimEntryEEE
ZN15CLSwimDataStore6addLapERK17CLSwimDetectedLapE3$_7
@17CLTileSyncManager
18CLITileSyncManager
NSt3__120__shared_ptr_emplaceI19CLConnectionMessageNS_9allocatorIS1_EEEE
52CLStreamingAwareLocationProviderLocalGPSStateMachine
26CLStreamedLocationProvider
N31CLStreamedLocationProvider_Type6ClientE
N23CLLocationProvider_Type6ClientE
N18CLLocationProvider6ClientE
N10CLNotifierIN23CLLocationProvider_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE6ClientE
20CLNotifierClientBase
NSt3__120__shared_ptr_emplaceIN23CLLocationProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
NSt3__120__shared_ptr_pointerIP26CLActivityLoggerSizePolicyNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI26CLActivityLoggerSizePolicyEE
NSt3__120__shared_ptr_pointerIP25CLActivityLoggerMsgPolicyNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI25CLActivityLoggerMsgPolicyEE
NSt3__120__shared_ptr_pointerIP26CLActivityLoggerRatePolicyNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI26CLActivityLoggerRatePolicyEE
31CLFenceMonitorWifiLogicExternal
32CLIFenceMonitorWifiLogicExternal
333333
18CLOdometerNotifier
10CLNotifierIN23CLOdometerNotifier_Type12NotificationENS0_16NotificationDataEccE
N23CLOdometerNotifier_Type6ClientE
N10CLNotifierIN23CLOdometerNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_pointerIP21CLElevationRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI21CLElevationRecorderDbEE
NSt3__120__shared_ptr_emplaceIN23CLOdometerNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
$@14CLNatalieInputI22CLElevationChangeEntryE
vHGB(knN
55CLStreamingAwareLocationProviderPassthroughStateMachine
Afffff
@<@A
15CLNameValuePair
14CLFileDownload
NSt3__110__function6__funcIZN23CLMicroLocationPowerLogC1ER23CLMicroLocationDatabaseE3$_0NS_9allocatorIS5_EEFvNS_8functionIFbvEEEEEE
ZN23CLMicroLocationPowerLogC1ER23CLMicroLocationDatabaseE3$_0
24CLSedentaryTimerNotifier
10CLNotifierIN29CLSedentaryTimerNotifier_Type12NotificationENS0_16NotificationDataEccE
N29CLSedentaryTimerNotifier_Type6ClientE
N10CLNotifierIN29CLSedentaryTimerNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_pointerIP26CLSedentaryAlarmRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI26CLSedentaryAlarmRecorderDbEE
NSt3__120__shared_ptr_emplaceIN29CLSedentaryTimerNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
30CLMotionStateObserverCompanion
33CLNetworkLocationProviderExternal
34CLINetworkLocationProviderExternal
18CLNatalieYogaModel
10BasicMutex
5Mutex
11NonCopyable
21DestructionAwareMutex
NSt3__120__shared_ptr_pointerIP29DestructionAwareMutexInternalNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI29DestructionAwareMutexInternalEE
16CLDaemonSettings
NSt3__120__shared_ptr_pointerIP16CLDaemonSettingsN12_GLOBAL__N_112null_deleterENS_9allocatorIS1_EEEE
N12_GLOBAL__N_112null_deleterE
N13CLPreferences10OtherPrefsE
13CLPreferences
12CLDataSource
@13CLDaemonCache
zt?{
zt?{
?21CLSensorFusionService
17CLPersistentStore
17CLHomeKitProvider
10CLNotifierIN22CLHomeKitProvider_Type12NotificationENS0_16NotificationDataEccE
N22CLHomeKitProvider_Type6ClientE
N10CLNotifierIN22CLHomeKitProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN22CLHomeKitProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
18CLTelephonyService
10CLNotifierIN23CLTelephonyService_Type12NotificationENS0_16NotificationDataEccE
N23CLTelephonyService_Type6ClientE
N10CLNotifierIN23CLTelephonyService_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN23CLTelephonyService_Type16NotificationDataENS_9allocatorIS2_EEEE
13CLWifiService
10CLNotifierIN18CLWifiService_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE
21CLWifiServiceExternal
N13CLWifiService9IExternalE
N18CLWifiService_Type6ClientE
N10CLNotifierIN18CLWifiService_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE6ClientE
NSt3__120__shared_ptr_emplaceIN18CLWifiService_Type16NotificationDataENS_9allocatorIS2_EEEE
5CLSPU
54CLStreamingAwareLocationProviderNoLocalGPSStateMachine
13CLMotionState
10CLNotifierIN18CLMotionState_Type12NotificationENS0_16NotificationDataEccE
N18CLMotionState_Type6ClientE
N10CLNotifierIN18CLMotionState_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN18CLMotionState_Type16NotificationDataENS_9allocatorIS2_EEEE
12CLFileUpdate
18CLDataSourceSerial
20CLDataSourceBuffered
25CLGyroCalibrationDatabase
10CLNotifierIN30CLGyroCalibrationDatabase_Type12NotificationENS0_16NotificationDataEccE
N30CLGyroCalibrationDatabase_Type6ClientE
N10CLNotifierIN30CLGyroCalibrationDatabase_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_pointerIP7NSErrorZN21CLObjNotificationDataIS1_EC1ES2_EUlS2_E_NS_9allocatorIS1_EEEE
ZN21CLObjNotificationDataI7NSErrorEC1EPS0_EUlS2_E_
19CLCompanionNotifier
10CLNotifierIN24CLCompanionNotifier_Type12NotificationENS0_16NotificationDataEcNS0_16RegistrationInfoEE
N24CLCompanionNotifier_Type6ClientE
N10CLNotifierIN24CLCompanionNotifier_Type12NotificationENS0_16NotificationDataEcNS0_16RegistrationInfoEE6ClientE
NSt3__120__shared_ptr_emplaceIN24CLCompanionNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
333333
25CLNoSqliteConnectionError
16CLSqliteDatabase
14CLDaemonStatus
10CLNotifierIN19CLDaemonStatus_Type12NotificationENS0_16NotificationDataEccE
N19CLDaemonStatus_Type6ClientE
N10CLNotifierIN19CLDaemonStatus_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN19CLDaemonStatus_Type16NotificationDataENS_9allocatorIS2_EEEE
29CLNetworkLocationRequesterALS
26CLNetworkLocationRequester
18CLLocationDatabase
;23CMGyroBiasEstimatorImplILb0EE
18CLTimeZoneDatabase
17CLPolygonDatabase
13CLTimeManager
10CLNotifierIN18CLTimeManager_Type12NotificationENS0_16NotificationDataEccE
N18CLTimeManager_Type6ClientE
N10CLNotifierIN18CLTimeManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN18CLTimeManager_Type16NotificationDataENS_9allocatorIS2_EEEE
19CLNatalieDummyModel
NSt3__120__shared_ptr_pointerIP27CLNatalieCrossTrainingModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI27CLNatalieCrossTrainingModelEE
NSt3__120__shared_ptr_pointerIP19CLNatalieCycleModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLNatalieCycleModelEE
NSt3__120__shared_ptr_pointerIP19CLNatalieDanceModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLNatalieDanceModelEE
NSt3__120__shared_ptr_pointerIP19CLNatalieDummyModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLNatalieDummyModelEE
NSt3__120__shared_ptr_pointerIP24CLNataliePedestrianModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI24CLNataliePedestrianModelEE
NSt3__120__shared_ptr_pointerIP22CLNatalieSemiStatModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI22CLNatalieSemiStatModelEE
NSt3__120__shared_ptr_pointerIP18CLNatalieYogaModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18CLNatalieYogaModelEE
NSt3__120__shared_ptr_pointerIP24CLNatalieEllipticalModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI24CLNatalieEllipticalModelEE
NSt3__120__shared_ptr_pointerIP20CLNatalieRowingModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI20CLNatalieRowingModelEE
NSt3__120__shared_ptr_pointerIP27CLNatalieStairClimbingModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI27CLNatalieStairClimbingModelEE
NSt3__120__shared_ptr_pointerIP27CLNatalieHighIntensityModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI27CLNatalieHighIntensityModelEE
NSt3__120__shared_ptr_pointerIP29CLNatalieStationaryCycleModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI29CLNatalieStationaryCycleModelEE
NSt3__120__shared_ptr_pointerIP22CLCalorieClimbingModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI22CLCalorieClimbingModelEE
NSt3__120__shared_ptr_pointerIP22CLCalorieSwimmingModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI22CLCalorieSwimmingModelEE
NSt3__120__shared_ptr_pointerIP28CLCalorieWheelchairPushModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI28CLCalorieWheelchairPushModelEE
NSt3__120__shared_ptr_pointerIP31CLCalorieOutdoorWheelchairModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI31CLCalorieOutdoorWheelchairModelEE
<20CLLocationController
N25CLLocationController_Type6ClientE
NSt3__114basic_ofstreamIcNS_11char_traitsIcEEEE
NSt3__113basic_filebufIcNS_11char_traitsIcEEEE
N7cntimer11CNTimerBaseE
N12cnnavigation12GravityModelE
N12cnnavigation40SphericalHarmonicsGravityModelParametersILj10EEE
N12cnestimation21TimedMeasurementCacheILj350EN5raven19RateGyroMeasurementEEE
N12cnestimation25TimedMeasurementCacheBaseIN5raven19RateGyroMeasurementEEE
N12cnestimation16TimedMeasurementIN5raven19RateGyroMeasurementEEE
10CNTimeSpan
14CNSerializable
N5raven19RateGyroMeasurementE
N12cnestimation21TimedMeasurementCacheILj350EN5raven24AccelerometerMeasurementEEE
N12cnestimation25TimedMeasurementCacheBaseIN5raven24AccelerometerMeasurementEEE
N12cnestimation16TimedMeasurementIN5raven24AccelerometerMeasurementEEE
N5raven24AccelerometerMeasurementE
N8cnconfig12ConfigLoaderILj1024EEE
N5raven25RavenSolutionActiveObjectE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEEE
N20cnframeworknothreads16ActiveObjectBaseE
N5raven32RavenIMUPreprocessorActiveObjectE
N5raven37RavenConvergenceEstimatorActiveObjectE
N8cnmatrix8CNMatrixILj100ELj1EN11cnframework17CNAllocatorHandleEEE
N8cnmatrix12CNMatrixBaseIN11cnframework17CNAllocatorHandleEEE
N8cnmatrix8CNMatrixILj10ELj1EPvEE
N8cnmatrix12CNMatrixBaseIPvEE
N8cnmatrix8CNMatrixILj10ELj1EPFiRKNS0_ILj6ELj1EdEERKNS0_ILj3ELj1EdEEPvRS4_RNS0_ILj3ELj6EdEERNS0_ILj3ELj3EdEEEEE
N8cnmatrix12CNMatrixBaseIPFiRKNS_8CNMatrixILj6ELj1EdEERKNS1_ILj3ELj1EdEEPvRS5_RNS1_ILj3ELj6EdEERNS1_ILj3ELj3EdEEEEE
N8cnmatrix8CNMatrixILj10ELj1ENS0_ILj3ELj3EdEEEE
N8cnmatrix12CNMatrixBaseINS_8CNMatrixILj3ELj3EdEEEE
N8cnmatrix8CNMatrixILj3ELj3EdEE
N8cnmatrix12CNMatrixBaseIdEE
N8cnmatrix8CNMatrixILj10ELj1ENS0_ILj3ELj1EdEEEE
N8cnmatrix12CNMatrixBaseINS_8CNMatrixILj3ELj1EdEEEE
N8cnmatrix8CNMatrixILj3ELj1EdEE
N8cnmatrix8CNMatrixILj10ELj1EiEE
N8cnmatrix12CNMatrixBaseIiEE
N8cnmatrix8CNMatrixILj10ELj1EdEE
N8cnmatrix8CNMatrixILj10ELj1E6CNTimeEE
N8cnmatrix12CNMatrixBaseI6CNTimeEE
N8cnmatrix8CNMatrixILj100ELj1EPvEE
N8cnmatrix8CNMatrixILj100ELj1EPFiRKNS0_ILj6ELj1EdEERKNS0_ILj3ELj1EdEEPvRS4_RNS0_ILj3ELj6EdEERNS0_ILj3ELj3EdEEEEE
N8cnmatrix8CNMatrixILj100ELj1ENS0_ILj3ELj3EdEEEE
N8cnmatrix8CNMatrixILj100ELj1ENS0_ILj3ELj1EdEEEE
N8cnmatrix8CNMatrixILj100ELj1EiEE
N8cnmatrix8CNMatrixILj100ELj1EdEE
N8cnmatrix8CNMatrixILj100ELj1E6CNTimeEE
N11cnframework11CNAllocatorIN5raven31h_VelocityArgs_RavenConvergenceENS1_24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesELj10EEE
N11cnframework15CNAllocatorBaseIN5raven24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesEEE
N11cnframework25CNAllocatorDeallocateBaseE
N11cnframework22CNAllocatorGetTypeBaseIN5raven21RavenMeasurementTypesEEE
N11cnframework27CNAllocatorItemAllocateBaseIN5raven24RavenMeasurementArgsBaseEEE
N5raven24RavenMeasurementArgsBaseE
N11cnframework11CNAllocatorIN5raven31h_PositionArgs_RavenConvergenceENS1_24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesELj10EEE
N11cnframework11CNAllocatorIN5raven49h_HorizontalDistanceTraveledArgs_RavenConvergenceIdEENS1_24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesELj10EEE
N11cnframework11CNAllocatorIN5raven37h_AltitudeChangeArgs_RavenConvergenceIdEENS1_24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesELj10EEE
N12cnestimation24EstimatorFailureDetectorIdEE
N12cnestimation21DiscreteEventDetectorIdEE
N12cnestimation11WahbaSolverIdEE
N8cnmatrix8CNMatrixILj4ELj1EdEE
N12cnestimation12WahbaOptionsIdEE
N13cnintegration16CNIntegratorBaseI6CNTimeLj4ELj3EdEE
N8cnmatrix8CNMatrixILj4ELj3EdEE
N8cnmatrix8CNMatrixILj4ELj4EdEE
N8cnmatrix8CNMatrixILj4ELj1EjEE
N8cnmatrix12CNMatrixBaseIjEE
N8cnmatrix8CNMatrixILj4ELj2EdEE
N8cnmatrix8CNMatrixILj4ELj2EjEE
N12cnestimation27SquareRootInformationFilterILj6ELj6ELj1ELj3ELj3ELj10ELj1EdEE
N12cnestimation21LeastSquaresEstimatorILj6ELj3ELj3ELj10EdEE
N8cnmatrix8CNMatrixILj6ELj6EdEE
N8cnmatrix8CNMatrixILj6ELj1EdEE
N12cnestimation19LeastSquaresOptionsILj6ELj3ELj3ELj10EdEE
N8cnmatrix8CNMatrixILj6ELj1EiEE
N8cnmatrix8CNMatrixILj24ELj1EdEE
N5raven35RavenBodyFixedEstimatorActiveObjectE
N8cnmatrix8CNMatrixILj10ELj1EPFiRKNS0_ILj15ELj1EdEERKNS0_ILj3ELj1EdEEPvRS4_RNS0_ILj3ELj15EdEERNS0_ILj3ELj3EdEEEEE
N8cnmatrix12CNMatrixBaseIPFiRKNS_8CNMatrixILj15ELj1EdEERKNS1_ILj3ELj1EdEEPvRS5_RNS1_ILj3ELj15EdEERNS1_ILj3ELj3EdEEEEE
N8cnmatrix8CNMatrixILj100ELj1EPFiRKNS0_ILj15ELj1EdEERKNS0_ILj3ELj1EdEEPvRS4_RNS0_ILj3ELj15EdEERNS0_ILj3ELj3EdEEEEE
N11cnframework11CNAllocatorIN5raven46h_VelocityChangeDiscrepancyArgs_RavenBodyFixedIdEENS1_24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesELj10EEE
N5raven46h_VelocityChangeDiscrepancyArgs_RavenBodyFixedIdEE
N11cnframework11CNAllocatorIN5raven29h_VelocityArgs_RavenBodyFixedIdEENS1_24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesELj10EEE
N5raven29h_VelocityArgs_RavenBodyFixedIdEE
N11cnframework11CNAllocatorIN5raven29h_PositionArgs_RavenBodyFixedIdEENS1_24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesELj10EEE
N5raven29h_PositionArgs_RavenBodyFixedIdEE
N11cnframework11CNAllocatorIN5raven47h_HorizontalDistanceTraveledArgs_RavenBodyFixedIdEENS1_24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesELj10EEE
N5raven47h_HorizontalDistanceTraveledArgs_RavenBodyFixedIdEE
N11cnframework11CNAllocatorIN5raven35h_AltitudeChangeArgs_RavenBodyFixedIdEENS1_24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesELj10EEE
N5raven35h_AltitudeChangeArgs_RavenBodyFixedIdEE
N11cnframework11CNAllocatorIN5raven33h_AccelerationArgs_RavenBodyFixedIdEENS1_24RavenMeasurementArgsBaseENS1_21RavenMeasurementTypesELj10EEE
N5raven33h_AccelerationArgs_RavenBodyFixedIdEE
N12cnestimation27SquareRootInformationFilterILj15ELj13ELj1ELj3ELj3ELj10ELj1EdEE
N12cnestimation21LeastSquaresEstimatorILj15ELj3ELj3ELj10EdEE
N8cnmatrix8CNMatrixILj13ELj13EdEE
N8cnmatrix8CNMatrixILj13ELj1EdEE
N8cnmatrix8CNMatrixILj13ELj15EdEE
N12cnestimation19LeastSquaresOptionsILj15ELj3ELj3ELj10EdEE
N8cnmatrix8CNMatrixILj15ELj1EdEE
N8cnmatrix8CNMatrixILj15ELj15EdEE
N8cnmatrix8CNMatrixILj15ELj1EiEE
N8cnmatrix8CNMatrixILj60ELj1EdEE
N8cnmatrix8CNMatrixILj17ELj17EdEE
N8cnmatrix8CNMatrixILj17ELj1EdEE
N13cnintegration16CNIntegratorBaseI6CNTimeLj17ELj13EdEE
N8cnmatrix8CNMatrixILj17ELj13EdEE
N8cnmatrix8CNMatrixILj17ELj1EjEE
N8cnmatrix8CNMatrixILj17ELj2EdEE
N8cnmatrix8CNMatrixILj17ELj2EjEE
22CLWifiLocationProvider
N27CLWifiLocationProvider_Type6ClientE
NSt3__120__shared_ptr_emplaceI18CLBatchedLocationsNS_9allocatorIS1_EEEE
A21CLMotionStateMediator
10CLNotifierIN26CLMotionStateMediator_Type12NotificationENS0_16NotificationDataEccE
N26CLMotionStateMediator_Type6ClientE
N10CLNotifierIN26CLMotionStateMediator_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN26CLMotionStateMediator_Type16NotificationDataENS_9allocatorIS2_EEEE
18CLLocationProvider
10CLNotifierIN23CLLocationProvider_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE
22CLCellLocationDatabase
?22CLNmeaLocationProvider
N12CLDataSource8ListenerE
N27CLNmeaLocationProvider_Type6ClientE
22CLWifiLocationDatabase
@25CLNetworkLocationProvider
10CLNotifierIN30CLNetworkLocationProvider_Type12NotificationENS0_16NotificationDataEccE
N30CLNetworkLocationProvider_Type6ClientE
N10CLNotifierIN30CLNetworkLocationProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN30CLNetworkLocationProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
N23CLTelephonyService_Type4CellE
N23CLTelephonyService_Type8CdmaCellE
N23CLTelephonyService_Type7LteCellE
27CLAccessoryLocationProvider
N32CLAccessoryLocationProvider_Type6ClientE
@13CLDaemonStats
28CLFilteredLocationController
N23CLLastConfidentLocation9INotifierE
N33CLFilteredLocationController_Type6ClientE
27CLRegionPreloadManifestTile
14CLPlatformInfo
31CLCalorieOutdoorWheelchairModel
18CLOperatorSettings
10CLNotifierIN23CLOperatorSettings_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE
?10CLCompass6
N16CLMotionNotifier26SingleSamplePollDispatcherIN15CLAccelerometer6SampleEEE
N16CLMotionNotifier26SingleSamplePollDispatcherIN14CLDeviceMotion6SampleEEE
30CLWifiLocationProviderExternal
N22CLWifiLocationProvider9IExternalE
26CLBTLEFenceManagerConcrete
19CLNatalieDanceModel
@23CLOdometerNotifierWatch
`OzkASBParentalControlsCapabilities
15CLClientManager
10CLNotifierIN20CLClientManager_Type12NotificationENS0_16NotificationDataEccE
N15CLClientManager6ClientE
N10CLNotifierIN20CLClientManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
N20CLClientManager_Type6ClientE
NSt3__120__shared_ptr_emplaceIN20CLClientManager_Type16NotificationDataENS_9allocatorIS2_EEEE
23CLTileFileWithTraversal
17CLCarrierSettings
10CLNotifierIN22CLCarrierSettings_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE
N22CLCarrierSettings_Type6ClientE
N10CLNotifierIN22CLCarrierSettings_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN15CLNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
30CLFitnessTrackingNotifierWatch
N4swan29BatchedGNSSDataSmootherConfigE
N8cnconfig12ConfigLoaderILj256EEE
?20CLNatalieRowingModel
34CLWatchOrientationSettingsNotifier
10CLNotifierIN39CLWatchOrientationSettingsNotifier_Type12NotificationENS0_16NotificationDataEccE
N39CLWatchOrientationSettingsNotifier_Type6ClientE
N10CLNotifierIN39CLWatchOrientationSettingsNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN39CLWatchOrientationSettingsNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
fffff
S@6CNTime
N8cnmatrix8CNMatrixILj3ELj2EdEE
N8cnmatrix8CNMatrixILj2ELj2EdEE
N8cnmatrix8CNMatrixILj2ELj3EdEE
N8cnmatrix8CNMatrixILj1ELj1EiEE
N8cnmatrix8CNMatrixILj3ELj1EiEE
N8cnmatrix11CNSubMatrixILj1ELj1ELj3ELj1EdEE
N8cnmatrix8CNMatrixILj1ELj3EdEE
N8cnmatrix8CNMatrixILj1ELj1EdEE
?ffffff
333333
B24CLNatalieEllipticalModel
16CMOnBodyDetector
23CLSensorFusionServiceAP
26CLCachedLocationController
N15CLRouteListener9INotifierE
10CLNotifierIN31CLCachedLocationController_Type12NotificationENS0_16NotificationDataEccE
N31CLCachedLocationController_Type6ClientE
N10CLNotifierIN31CLCachedLocationController_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN31CLCachedLocationController_Type16NotificationDataENS_9allocatorIS2_EEEE
MbP?
22CLGeoAccessMapGeometry
NSt3__117bad_function_callE
9CLMapRoad
NSt3__120__shared_ptr_pointerIP9CLMapRoadNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI9CLMapRoadEE
NSt3__110__function6__funcIZN22CLGeoAccessMapGeometry19roadsWithinDistanceERNS_4listIN13CLMapGeometry19DistanceQueryResultENS_9allocatorIS5_EEEERK10CLMapCrumbdbE3$_0NS6_ISD_EEFP13GEOMapRequestU13block_pointerFvSG_EEEE
NSt3__110__function6__baseIFP13GEOMapRequestU13block_pointerFvS3_EEEE
ZN22CLGeoAccessMapGeometry19roadsWithinDistanceERNSt3__14listIN13CLMapGeometry19DistanceQueryResultENS0_9allocatorIS3_EEEERK10CLMapCrumbdbE3$_0
NSt3__120__shared_ptr_emplaceI17RoadFeatureObjectNS_9allocatorIS1_EEEE
NSt3__110__function6__funcIZNK22CLGeoAccessMapGeometry22roadsConnectedInternalERNS_4listIN13CLMapGeometry20ConnectedQueryResultENS_9allocatorIS5_EEEEPK17RoadFeatureObjectbddiE3$_1NS6_ISD_EEFP13GEOMapRequestU13block_pointerFvSG_EEEE
ZNK22CLGeoAccessMapGeometry22roadsConnectedInternalERNSt3__14listIN13CLMapGeometry20ConnectedQueryResultENS0_9allocatorIS3_EEEEPK17RoadFeatureObjectbddiE3$_1
NSt3__110__function6__funcIZNK22CLGeoAccessMapGeometry19roadsAtIntersectionER10CLMapCrumbPNS_4listIN13CLMapGeometry23IntersectionQueryResultENS_9allocatorIS7_EEEESB_bRKNS_10shared_ptrI9CLMapRoadEEbddRdE3$_2NS8_ISI_EEFP13GEOMapRequestU13block_pointerFvSL_EEEE
ZNK22CLGeoAccessMapGeometry19roadsAtIntersectionER10CLMapCrumbPNSt3__14listIN13CLMapGeometry23IntersectionQueryResultENS2_9allocatorIS5_EEEES9_bRKNS2_10shared_ptrI9CLMapRoadEEbddRdE3$_2
NSt3__110__function6__funcIZNK22CLGeoAccessMapGeometry19roadsAtIntersectionER10CLMapCrumbPNS_4listIN13CLMapGeometry23IntersectionQueryResultENS_9allocatorIS7_EEEESB_bRKNS_10shared_ptrI9CLMapRoadEEbddRdE3$_3NS8_ISI_EEFP13GEOMapRequestU13block_pointerFvSL_EEEE
ZNK22CLGeoAccessMapGeometry19roadsAtIntersectionER10CLMapCrumbPNSt3__14listIN13CLMapGeometry23IntersectionQueryResultENS2_9allocatorIS5_EEEES9_bRKNS2_10shared_ptrI9CLMapRoadEEbddRdE3$_3
NSt3__120__shared_ptr_emplaceI17RoadWithDirectionNS_9allocatorIS1_EEEE
NSt3__110__function6__funcIZNK22CLGeoAccessMapGeometry18moveOnRoadInternalEbddRNS_4listIN13CLMapGeometry8RoadInfoENS_9allocatorIS5_EEEERNS4_19DistanceQueryResultEibE3$_4NS6_ISC_EEFP13GEOMapRequestU13block_pointerFvSF_EEEE
ZNK22CLGeoAccessMapGeometry18moveOnRoadInternalEbddRNSt3__14listIN13CLMapGeometry8RoadInfoENS0_9allocatorIS3_EEEERNS2_19DistanceQueryResultEibE3$_4
vq+A
@NSt3__120__shared_ptr_pointerIP30CLWorkloadCalibratorRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI30CLWorkloadCalibratorRecorderDbEE
27CLOdometerNotifierCompanion
27CLNatalieHighIntensityModel
N5boost16exception_detail10clone_implINS0_19error_info_injectorISt13runtime_errorEEEE
N5boost16exception_detail19error_info_injectorISt13runtime_errorEE
N5boost9exceptionE
N5boost16exception_detail10clone_baseE
N5boost5uuids4uuidE
NSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__121__basic_string_commonILb1EEE
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_16bad_lexical_castEEEEE
N5boost16exception_detail19error_info_injectorINS_16bad_lexical_castEEE
N5boost16bad_lexical_castE
CAUUUUUU
?ffffff
Q@StrideCalibrationLastCalibration
StrideCalibrationLastCalibrationAttempt
LastStrideCalibrationConverge
24CLMapRouteHintController
25CLFitnessTrackingNotifier
10CLNotifierIN30CLFitnessTrackingNotifier_Type12NotificationENS0_16NotificationDataEccE
N30CLFitnessTrackingNotifier_Type6ClientE
N10CLNotifierIN30CLFitnessTrackingNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN30CLFitnessTrackingNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
r@14CLFenceManager
10CLNotifierIN19CLFenceManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N19CLFenceManager_Type6ClientE
N10CLNotifierIN19CLFenceManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
NSt3__120__shared_ptr_emplaceIN19CLFenceManager_Type16NotificationDataENS_9allocatorIS2_EEEE
CSavedInitialMotionCalsToWatch
22CLMotionSyncStoreWatch
20CMFiniteStateMachine
@18CLFenceMonitorCell
N23CLFenceMonitorCell_Type6ClientE
?19CLSwimAlgController
>StrideCalAWD0
StrideCalAWD1
26CLCdmaCellLocationDatabase
"!"!"
%/<=:3+
1A<9/)
-?>;/0*
!;4340#(!
5<:.$
!:IJ?2 $
#4DL@43
-:9?.
"'--&'
27CLSimulatedLocationProvider
N32CLSimulatedLocationProvider_Type6ClientE
16CLMotionNotifier
NSt3__120__shared_ptr_pointerIP10CLSettingsNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI10CLSettingsEE
18CLSensorRecorderDb
20CLActivityRecorderDbI26CLSensorRecorderDataPacketE
6CLGyro
17CLSensorInterface
19CLCatherineNotifier
10CLNotifierIN24CLCatherineNotifier_Type12NotificationENS0_16NotificationDataEccE
N24CLCatherineNotifier_Type6ClientE
N10CLNotifierIN24CLCatherineNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN24CLCatherineNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
27CLTelephonyServiceSimulated
22CLWifiServiceSimulated
14CLFallNotifier
10CLNotifierIN19CLFallNotifier_Type12NotificationENS0_16NotificationDataEccE
NSt3__120__shared_ptr_emplaceIN19CLFallNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
LastKeyboardDisconnect
9CLCompass
@333C
ff&?
16CLRunningMaximumIfE
17CLCompassDatabase
10CLNotifierIN22CLCompassDatabase_Type12NotificationENS0_16NotificationDataEccE
N22CLCompassDatabase_Type6ClientE
N10CLNotifierIN22CLCompassDatabase_Type12NotificationENS0_16NotificationDataEccE6ClientE
29CLSensorFusionService6AxisSPU
20CLTilesManagerServer
N8cnmatrix8CNMatrixILj40ELj3EdEE
N8cnmatrix8CNMatrixILj40ELj40EdEE
N8cnmatrix8CNMatrixILj6665ELj1EdEE
N8cnmatrix11CNSubMatrixILj3ELj1ELj1ELj1EdEE
N8cnmatrix8CNMatrixILj1ELj20EiEE
N8cnmatrix11CNSubMatrixILj1ELj20ELj3ELj1EdEE
N8cnmatrix8CNMatrixILj20ELj3EdEE
N8cnmatrix8CNMatrixILj20ELj20EdEE
N8cnmatrix8CNMatrixILj2645ELj1EdEE
PAff
31CLAttitudeDependentKFCalibrator
19CLCompassCalibrator
10CLVector3dIjE
10CLMatrix3dIfE
13CLPlosMatcher
uBA333333
5CLLog
NSt3__120__shared_ptr_pointerIP19CLCircularLogBufferNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLCircularLogBufferEE
10CLSettings
32CLSwimDistanceEstimatorOpenWater
yU>UUUUUU
@333333
18CLSensorFusionMekf
14CLSensorFusion
17CLRunningVector3dIdE
14CLMagnetometer
N16CLMotionNotifier18CallbackDispatcherI19CLMotionTypeVector3EE
22CLEmptyMacAddressError
22CLMacAddressParseError
29CLMacAddressStrictLengthError
26CLMalformedMacAddressError
29CLCompassDaemonClientNotifier
10CLNotifierIN34CLCompassDaemonClientNotifier_Type12NotificationENS0_16NotificationDataEccE
N16CLMotionNotifier14SiloDispatcherIN14CLCompass_Type6SampleEEE
N14CLCompass_Type6SampleE
NSt3__120__shared_ptr_emplaceIN34CLCompassDaemonClientNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
>(-DT
NSt3__114basic_ifstreamIcNS_11char_traitsIcEEEE
N12cnnavigation10GPSAlmanacE
34CLFitnessTrackingNotifierCompanion
22CLTilesManagerExternal
23CLITilesManagerExternal
@@18CLSwimAlgSimulator
?333333
A21CLCallbackDropManager
NSt3__120__shared_ptr_emplaceIiNS_9allocatorIiEEEE
kCLConnectionMessage
NSt3__120__shared_ptr_pointerIP19CLConnectionMessageNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLConnectionMessageEE
NSt3__120__shared_ptr_pointerIP17CLPersistentTimerNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI17CLPersistentTimerEE
24CLBundleLocationProvider
N29CLBundleLocationProvider_Type6ClientE
NSt3__120__shared_ptr_pointerIP18CLBatchedLocationsNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18CLBatchedLocationsEE
27CLNatalieCrossTrainingModel
SentInitialMotionCalsToWatch
26CLMotionSyncStoreCompanion
339B
Afff@ff
17CLNatalieRunModel
?333333
@18CLBluetoothService
10CLNotifierIN23CLBluetoothService_Type12NotificationENS0_16NotificationDataEccE
N23CLBluetoothService_Type6ClientE
N10CLNotifierIN23CLBluetoothService_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN23CLBluetoothService_Type16NotificationDataENS_9allocatorIS2_EEEE
A23CLSensorFusion9AxisMekf
28CLMotionCoprocessorInterface
33CLMotionCoprocessorAlarmInterface
20CLStepCountInterface
17CLOnBodyInterface
22CLNatalimetryInterface
25CLSedentaryAlarmInterface
19CLOdometerInterface
18CLCompassInterface
19CLGyroBiasInterface
15CLFallInterface
ForceAPOnBodyDetection
16CLOnBodyNotifier
10CLNotifierIN21CLOnBodyNotifier_Type12NotificationENS0_16NotificationDataEccE
N21CLOnBodyNotifier_Type6ClientE
N10CLNotifierIN21CLOnBodyNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN21CLOnBodyNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
@w+A
?333333
 E@333333:@
;E@T
MbP?
>@22CLDualModeKalmanFilter
N14CLKalmanFilter16KalmanTuningInfoE
N14CLKalmanFilter16KalmanParametersE
14CLKalmanFilter
26CLMotionStateObserverWatch
29CLPressureCalibrationDatabase
10CLNotifierIN34CLPressureCalibrationDatabase_Type12NotificationENS0_16NotificationDataEccE
N16CLMotionNotifier14SiloDispatcherIN10CLPressure6SampleEEE
N10CLPressure6SampleE
NSt3__120__shared_ptr_emplaceIN34CLPressureCalibrationDatabase_Type16NotificationDataENS_9allocatorIS2_EEEE
25CLGyroBiasEstimatorClient
NSt3__110__function6__funcIZN26CLLocationFilterControllerC1EP6CLSiloE3$_0NS_9allocatorIS5_EEFvRKNS_6vectorIxNS6_IxEEEEEEE
NSt3__110__function6__baseIFvRKNS_6vectorIxNS_9allocatorIxEEEEEEE
ZN26CLLocationFilterControllerC1EP6CLSiloE3$_0
 |@9
21CLWifiFenceCalculator
@26CLSignificantChangeManager
N19CLWifiServiceClient9IReceiverE
N31CLSignificantChangeManager_Type6ClientE
V3fff?
D;.L
22CMSensorFusionSwimMekf
14CMSensorFusion
29CLGeoAccess3dBuildingGeometry
4@333
PCq=
21CLNatalimetryNotifier
10CLNotifierIN26CLNatalimetryNotifier_Type12NotificationENS0_16NotificationDataEccE
N26CLNatalimetryNotifier_Type6ClientE
N10CLNotifierIN26CLNatalimetryNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
14CLMedianFilterIdE
20CLNatalieInputBufferIN26CLMotionStateMediator_Type22MediatedMotionActivityEE
NSt3__120__shared_ptr_pointerIP23CLNatalimetryRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI23CLNatalimetryRecorderDbEE
NSt3__120__shared_ptr_pointerIP26CLExerciseMinuteRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI26CLExerciseMinuteRecorderDbEE
27CLNatalieSourceFromNotifierI15CLOdometerEntryE
14CLNatalieInputI15CLOdometerEntryE
20CLNatalieInputBufferI15CLOdometerEntryE
27CLNatalieSourceFromNotifierI22CLElevationChangeEntryE
20CLNatalieInputBufferI22CLElevationChangeEntryE
27CLNatalieSourceFromNotifierI28CLCoarseElevationChangeEntryE
14CLNatalieInputI28CLCoarseElevationChangeEntryE
20CLNatalieInputBufferI28CLCoarseElevationChangeEntryE
27CLNatalieSourceFromNotifierI15CLCatherineDataE
14CLNatalieInputI15CLCatherineDataE
20CLNatalieInputBufferI15CLCatherineDataE
27CLNatalieSourceFromNotifierI16CLStepCountEntryE
14CLNatalieInputI16CLStepCountEntryE
20CLNatalieInputBufferI16CLStepCountEntryE
14CLNatalieInputIN26CLMotionStateMediator_Type22MediatedMotionActivityEE
27CLNatalieSourceFromNotifierI11CLSwimEntryE
14CLNatalieInputI11CLSwimEntryE
20CLNatalieInputBufferI11CLSwimEntryE
NSt3__120__shared_ptr_pointerIP19CLNatalieModelInputNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI19CLNatalieModelInputEE
NSt3__120__shared_ptr_emplaceIN26CLNatalimetryNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
N7cntimer7CNTimerE
N7cntimer10AppleTimerE
N5raven13RavenSolutionE
N5raven11RavenStatusE
N5raven10TimerEventE
N20cnframeworknothreads20TimeStampedEventBaseE
N5raven13PositionEventE
N5raven13VelocityEventE
N5raven18AccelerometerEventE
N5raven13RateGyroEventE
N5raven13OdometerEventE
N5raven14AltimeterEventE
27CNMemorySerializationStream
21CNSerializationStream
N5raven18RavenSolutionEventE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_18RavenSolutionEventES5_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE16EventHandlerBaseE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_18RavenSolutionEventES7_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_18RavenSolutionEventES9_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_18RavenSolutionEventESB_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_10TimerEventES5_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_10TimerEventES7_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_10TimerEventES9_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_10TimerEventESB_EE
N16CLMotionNotifier20SiloBufferDispatcherIN15CLAccelerometer6SampleEEE
N16CLMotionNotifier20SiloBufferDispatcherIN6CLGyro6SampleEEE
N16CLMotionNotifier20SiloBufferDispatcherIN10CLPressure6SampleEEE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13PositionEventES5_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13PositionEventES7_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13PositionEventES9_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13PositionEventESB_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13VelocityEventES5_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13VelocityEventES7_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13VelocityEventES9_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13VelocityEventESB_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_18AccelerometerEventES5_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_18AccelerometerEventES7_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_18AccelerometerEventES9_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_18AccelerometerEventESB_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13RateGyroEventES5_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13RateGyroEventES7_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13RateGyroEventES9_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13RateGyroEventESB_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13OdometerEventES5_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13OdometerEventES7_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13OdometerEventES9_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_13OdometerEventESB_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_14AltimeterEventES5_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_14AltimeterEventES7_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_14AltimeterEventES9_EE
N20cnframeworknothreads25ActiveObjectBaseTemplatedINS_14SupervisorBaseINSt3__15tupleIJPN5raven35RavenBodyFixedEstimatorActiveObjectEPNS4_37RavenConvergenceEstimatorActiveObjectEPNS4_32RavenIMUPreprocessorActiveObjectEPNS4_25RavenSolutionActiveObjectEEEEEEE12EventHandlerINS4_14AltimeterEventESB_EE
17CLGestureNotifier
44CLAccelerometerIntegrationSamplingDispatcher
N16CLMotionNotifier18CallbackDispatcherIN17CLRestingNotifier16NotificationDataEEE
26CLSensorFusionService9Axis
N16CLMotionNotifier18CallbackDispatcherIN14CLCompass_Type6SampleEEE
N16CLMotionNotifier18CallbackDispatcherIbEE
?14CLDtwPrototype
 @:F
20CLEarGestureNotifier
N16CLMotionNotifier18CallbackDispatcherIN17CLGestureNotifier16NotificationDataEEE
26CLActivityLoggerSizePolicy
NSt3__120__shared_ptr_pointerIP22CLActivityLoggerWriterNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI22CLActivityLoggerWriterEE
22CLCalorieClimbingModel
ffffff
$@20CLNatalieInputBufferI24CLExtendedStepCountEntryE
14CLNatalieInputI24CLExtendedStepCountEntryE
15CLKeyboardState
?kCMActivityAlarmId
kCMActivityAlarmTrigger
kCMActivityAlarmDuration
14CMFFTProcessor
33CLNataliePedestrianModelInterface
033333
@333333
24CLNataliePedestrianModel
NSt3__120__shared_ptr_pointerIP17CLNatalieRunModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI17CLNatalieRunModelEE
NSt3__120__shared_ptr_pointerIP18CLNatalieWalkModelNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18CLNatalieWalkModelEE
A26CLFenceDataDownloadManager
10CLNotifierIN31CLFenceDataDownloadManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N31CLFenceDataDownloadManager_Type6ClientE
N10CLNotifierIN31CLFenceDataDownloadManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
NSt3__120__shared_ptr_emplaceIN31CLFenceDataDownloadManager_Type16NotificationDataENS_9allocatorIS2_EEEE
27CLFenceAuthorizationManager
10CLNotifierIN32CLFenceAuthorizationManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N32CLFenceAuthorizationManager_Type6ClientE
N10CLNotifierIN32CLFenceAuthorizationManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
NSt3__120__shared_ptr_emplaceIN32CLFenceAuthorizationManager_Type16NotificationDataENS_9allocatorIS2_EEEE
14CLFenceMonitor
10CLNotifierIN19CLFenceMonitor_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N19CLFenceMonitor_Type6ClientE
N10CLNotifierIN19CLFenceMonitor_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
NSt3__110__function6__funcIZN14CLFenceMonitor20getRequiredTechLevelERKNS_14__map_iteratorINS_15__tree_iteratorINS_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS_11__tree_nodeISA_PvEEiEEEERK16CLDaemonLocationE3$_0NS_9allocatorISM_EEFbRKS7_SL_EEE
NSt3__110__function6__baseIFbRKN19CLFenceManager_Type5FenceERK16CLDaemonLocationEEE
ZN14CLFenceMonitor20getRequiredTechLevelERKNSt3__114__map_iteratorINS0_15__tree_iteratorINS0_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS0_11__tree_nodeIS8_PvEEiEEEERK16CLDaemonLocationE3$_0
NSt3__110__function6__funcIZN14CLFenceMonitor20getRequiredTechLevelERKNS_14__map_iteratorINS_15__tree_iteratorINS_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS_11__tree_nodeISA_PvEEiEEEERK16CLDaemonLocationE3$_1NS_9allocatorISM_EEFbRKS7_SL_EEE
ZN14CLFenceMonitor20getRequiredTechLevelERKNSt3__114__map_iteratorINS0_15__tree_iteratorINS0_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS0_11__tree_nodeIS8_PvEEiEEEERK16CLDaemonLocationE3$_1
NSt3__110__function6__funcIZN14CLFenceMonitor20getRequiredTechLevelERKNS_14__map_iteratorINS_15__tree_iteratorINS_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS_11__tree_nodeISA_PvEEiEEEERK16CLDaemonLocationE3$_2NS_9allocatorISM_EEFbRKS7_SL_EEE
ZN14CLFenceMonitor20getRequiredTechLevelERKNSt3__114__map_iteratorINS0_15__tree_iteratorINS0_12__value_typeIN19CLFenceManager_Type5FenceEN19CLFenceMonitorLogic21FenceMonitoringStatusEEEPNS0_11__tree_nodeIS8_PvEEiEEEERK16CLDaemonLocationE3$_2
NSt3__120__shared_ptr_emplaceIN19CLFenceMonitor_Type16NotificationDataENS_9allocatorIS2_EEEE
24CLFenceMonitorContinuous
N29CLFenceMonitorContinuous_Type6ClientE
18CLFenceMonitorWifi
N23CLFenceMonitorWifi_Type6ClientE
NSt3__110__function6__funcIZN18CLFenceMonitorWifi21calculateAPsForFencesERKNS_3mapIN19CLFenceManager_Type5FenceEbNS_4lessIS5_EENS_9allocatorINS_4pairIKS5_bEEEEEERNS_6vectorIN18CLWifiService_Type11AccessPointENS8_ISI_EEEESL_RKSK_dRbE3$_0NS8_ISP_EEFvRSA_EEE
NSt3__110__function6__baseIFvRKN19CLFenceManager_Type5FenceEEEE
ZN18CLFenceMonitorWifi21calculateAPsForFencesERKNSt3__13mapIN19CLFenceManager_Type5FenceEbNS0_4lessIS3_EENS0_9allocatorINS0_4pairIKS3_bEEEEEERNS0_6vectorIN18CLWifiService_Type11AccessPointENS6_ISG_EEEESJ_RKSI_dRbE3$_0
13CLSqliteError
26CLGeomagneticModelProvider
10CLNotifierIN31CLGeomagneticModelProvider_Type12NotificationENS0_16NotificationDataEccE
N31CLGeomagneticModelProvider_Type6ClientE
N10CLNotifierIN31CLGeomagneticModelProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
20CLAWDMetricCollector
21CLMetricCollectorBase
KA27CLSignalEnvironmentProvider
10CLNotifierIN32CLSignalEnvironmentProvider_Type12NotificationENS0_16NotificationDataEccE
N32CLSignalEnvironmentProvider_Type6ClientE
N10CLNotifierIN32CLSignalEnvironmentProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN32CLSignalEnvironmentProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
N22CLWifiLocationDatabase8WifiDataE
17CLRestingNotifier
9@33
23CLNatalieModelInterface
29CLUnifiedCellLocationProvider
N34CLUnifiedCellLocationProviderLogic21ICellLocationProviderE
N34CLUnifiedCellLocationProvider_Type6ClientE
18CLNatalieWalkModel
25CLLteCellLocationDatabase
"?`E
?50CLSensorCalibrationStaticDetectorMotionCoprocessor
33CLSensorCalibrationStaticDetector
38CLSensorCalibrationStaticDetectorAccel
10CLVector3dIdE
ffffff
v.L@
z$@{
@17CLSwimPersistence
20CLActivityRecorderDbI11CLSwimEntryE
12CLGestureLog
19CLCircularLogBuffer
12CLCoverState
?333333
@333333
@ffffff
(@NSt3__110__function6__funcIZN27CLSubHarvesterMicroLocationC1ERNS2_16IHarvestDelegateEP6CLSiloR23CLMicroLocationDatabaseE3$_0NS_9allocatorIS9_EEFvNS_8functionIFbvEEEEEE
ZN27CLSubHarvesterMicroLocationC1ERNS_16IHarvestDelegateEP6CLSiloR23CLMicroLocationDatabaseE3$_0
N25CLManagedLocationDatabaseI22CLWifiLocationDatabaseNS0_8WifiDataEE8ExternalE
N25CLManagedLocationDatabaseI22CLWifiLocationDatabaseNS0_8WifiDataEE9IExternalE
N25CLManagedLocationDatabaseI22CLCellLocationDatabaseN23CLTelephonyService_Type4CellEE8ExternalE
N25CLManagedLocationDatabaseI22CLCellLocationDatabaseN23CLTelephonyService_Type4CellEE9IExternalE
N25CLManagedLocationDatabaseI26CLCdmaCellLocationDatabaseN23CLTelephonyService_Type8CdmaCellEE8ExternalE
N25CLManagedLocationDatabaseI26CLCdmaCellLocationDatabaseN23CLTelephonyService_Type8CdmaCellEE9IExternalE
N25CLManagedLocationDatabaseI25CLLteCellLocationDatabaseN23CLTelephonyService_Type7LteCellEE8ExternalE
N25CLManagedLocationDatabaseI25CLLteCellLocationDatabaseN23CLTelephonyService_Type7LteCellEE9IExternalE
44CLStreamingAwareLocationProviderStateMachine
NSt3__110__function6__funcIN44CLStreamingAwareLocationProviderStateMachine17fLocationCallbackMUlT_T0_T1_T2_E_ENS_9allocatorIS7_EEFvNS2_14LocationSourceEN23CLLocationProvider_Type12NotificationEbRKNSB_7RegInfoEEEE
N44CLStreamingAwareLocationProviderStateMachine17fLocationCallbackMUlT_T0_T1_T2_E_E
NSt3__110__function6__funcIN44CLStreamingAwareLocationProviderStateMachine20fMotionAlarmCallbackMUlT_E_ENS_9allocatorIS4_EEFvbEEE
N44CLStreamingAwareLocationProviderStateMachine20fMotionAlarmCallbackMUlT_E_E
NSt3__110__function6__funcIN44CLStreamingAwareLocationProviderStateMachine14fTimerCallbackMUlT_E_ENS_9allocatorIS4_EEFvdEEE
N44CLStreamingAwareLocationProviderStateMachine14fTimerCallbackMUlT_E_E
NSt3__110__function6__funcIN44CLStreamingAwareLocationProviderStateMachine18fStepCountCallbackMUlT_E_ENS_9allocatorIS4_EEFvbEEE
N44CLStreamingAwareLocationProviderStateMachine18fStepCountCallbackMUlT_E_E
23CLDataProtectionManager
10CLNotifierIN28CLDataProtectionManager_Type12NotificationENS0_16NotificationDataEccE
N28CLDataProtectionManager_Type6ClientE
N10CLNotifierIN28CLDataProtectionManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN28CLDataProtectionManager_Type16NotificationDataENS_9allocatorIS2_EEEE
_)K;
*>,<
=jZ:
}A.@
>16CLPowerAssertion
33CLMagnetometerCoexistenceNotifier
32CLStreamingAwareLocationProvider
N37CLStreamingAwareLocationProvider_Type6ClientE
NSt3__110__function6__funcIZN32CLStreamingAwareLocationProviderC1EP6CLSiloE3$_0NS_9allocatorIS5_EEFvN44CLStreamingAwareLocationProviderStateMachine14LocationSourceEN23CLLocationProvider_Type12NotificationEbRKNSA_7RegInfoEEEE
NSt3__110__function6__baseIFvN44CLStreamingAwareLocationProviderStateMachine14LocationSourceEN23CLLocationProvider_Type12NotificationEbRKNS4_7RegInfoEEEE
ZN32CLStreamingAwareLocationProviderC1EP6CLSiloE3$_0
NSt3__110__function6__funcIZN32CLStreamingAwareLocationProviderC1EP6CLSiloE3$_1NS_9allocatorIS5_EEFvbEEE
NSt3__110__function6__baseIFvbEEE
ZN32CLStreamingAwareLocationProviderC1EP6CLSiloE3$_1
NSt3__110__function6__funcIZN32CLStreamingAwareLocationProviderC1EP6CLSiloE3$_2NS_9allocatorIS5_EEFvdEEE
NSt3__110__function6__baseIFvdEEE
ZN32CLStreamingAwareLocationProviderC1EP6CLSiloE3$_2
NSt3__110__function6__funcIZN32CLStreamingAwareLocationProviderC1EP6CLSiloE3$_3NS_9allocatorIS5_EEFvbEEE
ZN32CLStreamingAwareLocationProviderC1EP6CLSiloE3$_3
28CLWifiServerResponseListener
N25CLNetworkLocationProvider22ServerResponseListenerE
25CLServiceLocationProvider
N30CLServiceLocationProvider_Type6ClientE
26CLExerciseMinuteRecorderDb
20CLActivityRecorderDbI20CLExerciseMinuteDataE
f@10CLCompass7
21CMDeviceMotionVisitor
N20CMDeviceMotionReport7VisitorE
39CLMagnetometerCoexistenceNotifierCpasV5
28CLCompanionNotifierCompanion
25CLEarGestureClientManager
N16CLMotionNotifier18CallbackDispatcherIN20CLEarGestureNotifier16NotificationDataEEE
17CLSqliteStatement
27CLSqliteFinalizingStatement
26CLSqliteResettingStatement
39CLMagnetometerCoexistenceNotifierCpasV6
30CLCompassSessionStatsCollector
N16CLMotionNotifier18CallbackDispatcherIN24CMMotionCoprocessorReply18CompassCalibrationEEE
N16CLMotionNotifier18CallbackDispatcherIN28CLMotionCoprocessorInterface16NotificationDataEEE
ffffff
GyroCalibrationMinBatteryLevel
GyroCalibrationStaticWait
GyroCalibrationMinimumInterval
GyroCalibrationDoubleCalInterval
GyroCalibrationOutOfBoxTimeout
GyroCalibrationUrgentMinBatteryLevel
GyroCalibrationUrgentStaticWait
GyroCalibrationUrgentAttemptMinimumInterval
GyroCalibrationRetryCalInterval
GyroCalibrationLastCalibration
GyroCalibrationLastUnpluggedCalibration
29CLSensorCalibrationController
10CLNotifierIN34CLSensorCalibrationController_Type12NotificationENS0_16NotificationDataEccE
N34CLSensorCalibrationController_Type6ClientE
N10CLNotifierIN34CLSensorCalibrationController_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN34CLSensorCalibrationController_Type16NotificationDataENS_9allocatorIS2_EEEE
16CLOutdoorMatcher
N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_19bad_optional_accessEEEEE
N5boost16exception_detail19error_info_injectorINS_19bad_optional_accessEEE
N5boost19bad_optional_accessE
23CLMicroLocationNotifier
10CLNotifierIN28CLMicroLocationNotifier_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE
N35CLMicroLocationBackgroundActivities29IBackgroundActivitiesDelegateE
N22CLMicroLocationLearner16ILearnerDelegateE
N24CLMicroLocationAnalytics18IAnalyticsDelegateE
N20CLMicroLocationLogic14ILogicDelegateE
N24CLMicroLocationLocalizer18ILocalizerDelegateE
N28CLMicroLocationNotifier_Type6ClientE
N10CLNotifierIN28CLMicroLocationNotifier_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE6ClientE
NSt3__120__shared_ptr_emplaceINS_6vectorI29CLMicroLocationResultInternalNS_9allocatorIS2_EEEENS3_IS5_EEEE
NSt3__120__shared_ptr_emplaceIN28CLMicroLocationNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
40CLMagnetometerCoexistenceNotifierCpasV10
26CLWifiTileAccessPointEntry
27CLIWifiTileAccessPointEntry
43CLMagnetometerCoexistenceNotifierCpasCamera
23CLOutdoorMatchingEngine
NSt3__120__shared_ptr_emplaceI29CLGeoAccess3dBuildingGeometryNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI16CLOutdoorMatcherNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI13CLPlosMatcherNS_9allocatorIS1_EEEE
A19CLAutopauseProvider
10CLNotifierIN24CLAutopauseProvider_Type12NotificationENS0_16NotificationDataEccE
N24CLAutopauseProvider_Type6ClientE
N10CLNotifierIN24CLAutopauseProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN24CLAutopauseProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
10CLTileFile
21CLPeerRangingNotifier
10CLNotifierIN26CLPeerRangingNotifier_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE
28CLPeerRangingManagerDelegate
N26CLPeerRangingNotifier_Type6ClientE
N10CLNotifierIN26CLPeerRangingNotifier_Type12NotificationENS0_16NotificationDataEcNS0_7RegInfoEE6ClientE
NSt3__110__function6__funcINS_6__bindIM21CLPeerRangingNotifierFviRKN18CLWifiService_Type12NotificationERKNS4_16NotificationDataEEJRPS3_RNS_12placeholders4__phILi1EEERNSG_ILi2EEERNSG_ILi3EEEEEENS_9allocatorISN_EEFviS7_SA_EEE
NSt3__110__function6__baseIFviRKN18CLWifiService_Type12NotificationERKNS2_16NotificationDataEEEE
NSt3__16__bindIM21CLPeerRangingNotifierFviRKN18CLWifiService_Type12NotificationERKNS2_16NotificationDataEEJRPS1_RNS_12placeholders4__phILi1EEERNSE_ILi2EEERNSE_ILi3EEEEEE
NSt3__118__weak_result_typeIM21CLPeerRangingNotifierFviRKN18CLWifiService_Type12NotificationERKNS2_16NotificationDataEEEE
NSt3__120__shared_ptr_emplaceIN26CLPeerRangingNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
?14CLTilesManager
10CLNotifierIN19CLTilesManager_Type12NotificationENS0_16NotificationDataEccE
N19CLTilesManager_Type6ClientE
N10CLNotifierIN19CLTilesManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
12CLEntryCacheINSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE16CLDaemonLocationE
16CLEntryCacheBase
NSt3__120__shared_ptr_emplaceIN19CLTilesManager_Type16NotificationDataENS_9allocatorIS2_EEEE
14CLWifiTileFile
N2CL3Log17logfile_streambufE
17CLOnBodyNotifier7
HC21CLAutopauseCalculator
24CLCompanionNotifierWatch
5CLBTA
10CLNotifierIN10CLBTA_Type12NotificationENS0_16NotificationDataEccE
N10CLBTA_Type6ClientE
N10CLNotifierIN10CLBTA_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN10CLBTA_Type16NotificationDataENS_9allocatorIS2_EEEE
b*J@k
M@\z
S@t9
tdV@u
K]@ 
)c@!3I
`fp@
#l@ffff
;q@G
@9W
19CLMotionCoprocessor
N24CMMotionCoprocessorReply7VisitorE
pB9CLDEMTile
O@vO
h2P@
+QW@w-!
XAX@
17CLOdometerQuality
?19NoopTileSyncManager
@oDA
NSt3__120__shared_ptr_pointerIP11AccountInfoNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI11AccountInfoEE
NSt3__120__shared_ptr_pointerIP17CLPersistentStoreNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI17CLPersistentStoreEE
32CLProcessWifiScanResultsExternal
N24CLProcessWifiScanResults9IExternalE
N12_GLOBAL__N_115HarvestDelegateE
N27CLSubHarvesterMicroLocation16IHarvestDelegateE
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI26CLMicroLocationMaintenanceZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_0EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__baseIFvN33CLMicroLocationXPCActivityHelpers11XPCActivityEEEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE26CLMicroLocationMaintenanceEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE26CLMicroLocationMaintenanceEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI26CLMicroLocationMaintenanceZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_0EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI24CLMicroLocationAnalyticsZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_1EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE24CLMicroLocationAnalyticsEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE24CLMicroLocationAnalyticsEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI24CLMicroLocationAnalyticsZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_1EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI22CLMicroLocationLearnerZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_2EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE22CLMicroLocationLearnerEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE22CLMicroLocationLearnerEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI22CLMicroLocationLearnerZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_2EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI27CLSubHarvesterMicroLocationZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_3EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE27CLSubHarvesterMicroLocationEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE27CLSubHarvesterMicroLocationEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI27CLSubHarvesterMicroLocationZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_3EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI23CLMicroLocationPowerLogZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_4EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE23CLMicroLocationPowerLogEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE23CLMicroLocationPowerLogEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI23CLMicroLocationPowerLogZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_4EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityIN23CLMicroLocationDatabase9DbFlusherEZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_5EEvP6CLSiloSM_RNS6_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSJ_15XPCRegistrationENS_14default_deleteISX_EEEENSE_IS10_EEEESP_T0_EUlNSJ_11XPCActivityEE_NSE_IS16_EEFvS15_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityEN23CLMicroLocationDatabase9DbFlusherEEC1ES5_RS7_EUlvE_NS_9allocatorISA_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityEN23CLMicroLocationDatabase9DbFlusherEEC1ES2_RS4_EUlvE_
ZN12_GLOBAL__N_116registerActivityIN23CLMicroLocationDatabase9DbFlusherEZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_5EEvP6CLSiloSK_RNS3_29IBackgroundActivitiesDelegateERNS7_6vectorINS7_10unique_ptrINSH_15XPCRegistrationENS7_14default_deleteISV_EEEENSC_ISY_EEEESN_T0_EUlNSH_11XPCActivityEE_
NSt3__110__function6__funcIZN12_GLOBAL__N_116registerActivityI25CLMicroLocationAWDMetricsZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINS_8functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_6EEvP6CLSiloSL_RNS5_29IBackgroundActivitiesDelegateERNS_6vectorINS_10unique_ptrINSI_15XPCRegistrationENS_14default_deleteISW_EEEENSD_ISZ_EEEESO_T0_EUlNSI_11XPCActivityEE_NSD_IS15_EEFvS14_EEE
NSt3__110__function6__funcIZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE25CLMicroLocationAWDMetricsEC1ES5_RS6_EUlvE_NS_9allocatorIS9_EEFbvEEE
ZN35CLMicroLocationBackgroundActivities14ActivityRunnerIN33CLMicroLocationXPCActivityHelpers11XPCActivityE25CLMicroLocationAWDMetricsEC1ES2_RS3_EUlvE_
ZN12_GLOBAL__N_116registerActivityI25CLMicroLocationAWDMetricsZN35CLMicroLocationBackgroundActivities24registerForXPCActivitiesENSt12experimental15fundamentals_v18optionalINSt3__18functionIFvRKNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEERKN33CLMicroLocationXPCActivityHelpers11XPCCriteriaEEEEEEE3$_6EEvP6CLSiloSJ_RNS2_29IBackgroundActivitiesDelegateERNS6_6vectorINS6_10unique_ptrINSG_15XPCRegistrationENS6_14default_deleteISU_EEEENSB_ISX_EEEESM_T0_EUlNSG_11XPCActivityEE_
27CLVehicleConnectionNotifier
10CLNotifierIN32CLVehicleConnectionNotifier_Type12NotificationENS0_16NotificationDataEccE
NSt3__111__end_stateIcEE
NSt3__16__nodeIcEE
NSt3__120__shared_ptr_pointerIPNS_13__empty_stateIcEENS_14default_deleteIS2_EENS_9allocatorIS2_EEEE
NSt3__114default_deleteINS_13__empty_stateIcEEEE
NSt3__113__empty_stateIcEE
NSt3__116__owns_one_stateIcEE
NSt3__115__has_one_stateIcEE
NSt3__110__l_anchorIcEE
NSt3__110__r_anchorIcEE
NSt3__115__word_boundaryIcNS_12regex_traitsIcEEEE
NSt3__111__lookaheadIcNS_12regex_traitsIcEEEE
NSt3__123__match_any_but_newlineIcEE
NSt3__118__match_char_icaseIcNS_12regex_traitsIcEEEE
NSt3__120__match_char_collateIcNS_12regex_traitsIcEEEE
NSt3__112__match_charIcEE
NSt3__116__back_ref_icaseIcNS_12regex_traitsIcEEEE
NSt3__118__back_ref_collateIcNS_12regex_traitsIcEEEE
NSt3__110__back_refIcEE
NSt3__120__bracket_expressionIcNS_12regex_traitsIcEEEE
NSt3__128__begin_marked_subexpressionIcEE
NSt3__126__end_marked_subexpressionIcEE
NSt3__16__loopIcEE
NSt3__117__owns_two_statesIcEE
NSt3__117__repeat_one_loopIcEE
NSt3__111__alternateIcEE
NSt3__121__empty_non_own_stateIcEE
NSt3__111__match_anyIcEE
NSt3__120__shared_ptr_emplaceIN32CLVehicleConnectionNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
sA-C
Zw+?(
Zwk?
TXA{
17CLMotionSyncStore
10CLNotifierIN22CLMotionSyncStore_Type12NotificationENS0_16NotificationDataEccE
NSt3__120__shared_ptr_emplaceIN22CLMotionSyncStore_Type16NotificationDataENS_9allocatorIS2_EEEE
Hn?^
28CLCalorieWheelchairPushModel
13CLMapGeometry
12CLMapMatcher
NSt3__120__shared_ptr_pointerIP18CLSimpleMapMatcherNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18CLSimpleMapMatcherEE
NSt3__120__shared_ptr_pointerIP18CLScoredMapMatcherNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18CLScoredMapMatcherEE
NSt3__120__shared_ptr_pointerIP20CLParticleMapMatcherNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI20CLParticleMapMatcherEE
NSt3__120__shared_ptr_pointerIP13CLPlosMatcherNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI13CLPlosMatcherEE
NSt3__120__shared_ptr_pointerIP16CLOutdoorMatcherNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI16CLOutdoorMatcherEE
21CLElevationRecorderDb
20CLActivityRecorderDbI22CLSignificantElevationE
18CLSimpleMapMatcher
`f@fffff
833&@
@fffff
@18CLScoredMapMatcher
@ffffff
20CLParticleMapMatcher
27CLNatalieStairClimbingModel
23CLMapMatchingEngineBase
19CLMapMatchingEngine
L@]m
12CLAppMonitor
10CLNotifierIN17CLAppMonitor_Type12NotificationENS0_16NotificationDataEccE
N17CLAppMonitor_Type6ClientE
N10CLNotifierIN17CLAppMonitor_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN17CLAppMonitor_Type16NotificationDataENS_9allocatorIS2_EEEE
fff>
21CMStrideCalRecorderDb
20CLActivityRecorderDbI16CLStrideCalEntryE
19CLNatalieCycleModel
LogMotionStateReplay
21CLMotionStateObserver
10CLNotifierIN26CLMotionStateObserver_Type12NotificationENS0_16NotificationDataEccE
N26CLMotionStateObserver_Type6ClientE
N10CLNotifierIN26CLMotionStateObserver_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN26CLMotionStateObserver_Type16NotificationDataENS_9allocatorIS2_EEEE
@@33
Ga=fff?
l@33s?
 Aff&?
27CLAutopauseProviderConcrete
23CLAutopauseProviderMock
MotionCalibration
com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle
14CLDeviceMotion
26CLActivityLoggerRatePolicy
?18CLTileParsingError
18CLWifiTilesManager
10CLNotifierIN23CLWifiTilesManager_Type12NotificationENS0_16NotificationDataEccE
15CLITilesManager
N23CLWifiTilesManager_Type6ClientE
N10CLNotifierIN23CLWifiTilesManager_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_emplaceIN23CLWifiTilesManager_Type16NotificationDataENS_9allocatorIS2_EEEE
N11CLBinaryLog5AccelE
N11CLBinaryLog4GyroE
N11CLBinaryLog12GyroOscarEmuE
N11CLBinaryLog15GyroTemperatureE
N11CLBinaryLog11GyroBiasFitE
N11CLBinaryLog6GyroDtE
N11CLBinaryLog12MagnetometerE
N11CLBinaryLog7CompassE
N11CLBinaryLog11GyroCompassE
N11CLBinaryLog12DeviceMotionE
N11CLBinaryLog15SessionOverrideE
N11CLBinaryLog20EnhancedDeviceMotionE
N11CLBinaryLog11NatalieDataE
N11CLBinaryLog18OnsetHeartRateDataE
N11CLBinaryLog12StrideCalBinE
N11CLBinaryLog8MetsInfoE
N11CLBinaryLog9FallStatsE
11CLBinaryLog
N11CLBinaryLog13AccelOscarEmuE
N11CLBinaryLog19GyroBiasAndVarianceE
N11CLBinaryLog16CompassAlignmentE
29CLBTLEFenceManagerUnsupported
25CLActivityLoggerMsgPolicy
22CLActivityLoggerPolicy
24CLAutopauseProviderDummy
N@ffffff*
Q=@fffff
a@fffff
`@fffff
9b@33333
m`@333333
33333
 @HP
s;V@333333L
`c@33333
f@33333
p=J:@
V@fffff&=@
uS@`
.8@J
@@L7
A`eQ@
&@33333
fffff
V~D@
s(S?@
zT<@d;
W'@j
K7)O
 %vmo
 @33333s1@33333
X@Nb
+Z@33333s3@fffff
(<Y@~
g$2@
P2@R
u=1@XSY
*Ral! P
~VV@J
|?5^
3*A@7
PSA@
QI-5
333333(
36@R
a\@ffffff\@
A@}?5^
33333sL@333333M@\
0@)\
0@fffff&O
333333
333333e
|?5^
ffffff0
0@5^
333333
@K@ffffffL@
ffffff-
+'@C
6@J
6@X9
v>6@b
`\@9
Mbp4@/
+wS@
nZ@=
QHQ@fffff.T@
8@fffff
\N@F
 P8@
@fffff
GAE@
?333333!@
@fffff6`@
33333
,@ffffff9@
LogGyro
19CLGyroBiasEstimator
N16CLMotionNotifier18CallbackDispatcherIN28CLMotionCoprocessorInterface19GyroBiasAndVarianceEEE
EnablePmOnBodyDetection
ForceNoThrottlingOnBody
17CLOnBodyNotifier6
30CLCompassBiasClusteringMinDiam
18CLClusterAlgorithmI23CLCompassDatabaseRecordE
23CLCompassBiasClustering
NSt3__120__shared_ptr_pointerIPNS_6vectorI23CLCompassDatabaseRecordNS_9allocatorIS2_EEEENS_14default_deleteIS5_EENS3_IS5_EEEE
NSt3__114default_deleteINS_6vectorI23CLCompassDatabaseRecordNS_9allocatorIS2_EEEEEE
NSt3__120__shared_ptr_pointerIP20CLCompassBiasClusterNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI20CLCompassBiasClusterEE
20CLCompassBiasCluster
15CLSimpleClusterI23CLCompassDatabaseRecordE
KeepAllSensorCalibrationRoundsInDb
27CLSensorCalibrationDatabase
40CLMagnetometerCoexistenceNotifierCpasV11
9CLLogBase
9CLGSMTile
23CLKeyLatLonTileTemplateIN19CLTilesManager_Type23KeyLatLonIndexEntry_GSMENS0_18KeyLatLonEntry_GSMEE
10CLCDMATile
23CLKeyLatLonTileTemplateIN19CLTilesManager_Type24KeyLatLonIndexEntry_CDMAENS0_19KeyLatLonEntry_CDMAEE
9CLLTETile
23CLKeyLatLonTileTemplateIN19CLTilesManager_Type23KeyLatLonIndexEntry_LTEENS0_18KeyLatLonEntry_LTEEE
@22CLNatalieSemiStatModel
24CLSensorRecorderNotifier
10CLNotifierIN29CLSensorRecorderNotifier_Type12NotificationENS0_16NotificationDataEccE
NSt3__120__shared_ptr_pointerIPhNS_14default_deleteIA_hEENS_9allocatorIhEEEE
NSt3__114default_deleteIA_hEE
NSt3__120__shared_ptr_emplaceIN29CLSensorRecorderNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
29CLNatalieStationaryCycleModel
24CLBTLEBeaconProviderMock
NSt3__120__shared_ptr_emplaceIN25CLBTLEBeaconProvider_Type16NotificationDataENS_9allocatorIS2_EEEE
18CLBTLEFenceManager
10CLNotifierIN23CLBTLEFenceManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N18CLBTLEFenceManager6ClientE
N10CLNotifierIN23CLBTLEFenceManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
N23CLBTLEFenceManager_Type6ClientE
NSt3__120__shared_ptr_emplaceIN23CLBTLEFenceManager_Type16NotificationDataENS_9allocatorIS2_EEEE
23CLNatalimetryRecorderDb
20CLActivityRecorderDbI13CLNatalieDataE
28CLBTLEBeaconProviderConcrete
14CLGpsAssistant
10CLNotifierIN19CLGpsAssistant_Type12NotificationENS0_16NotificationDataEccE
NSt3__120__shared_ptr_emplaceIN19CLGpsAssistant_Type16NotificationDataENS_9allocatorIS2_EEEE
20CLBTLEBeaconProvider
10CLNotifierIN25CLBTLEBeaconProvider_Type12NotificationENS0_16NotificationDataEccE
N25CLBTLEBeaconProvider_Type6ClientE
N10CLNotifierIN25CLBTLEBeaconProvider_Type12NotificationENS0_16NotificationDataEccE6ClientE
16CLDarwinNotifier
10CLNotifierIN21CLDarwinNotifier_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE
N21CLDarwinNotifier_Type6ClientE
N10CLNotifierIN21CLDarwinNotifier_Type12NotificationEN15CLNotifier_Type16NotificationDataEccE6ClientE
N11CLBinaryLog10BinaryDataE
33CLBeaconFenceAuthorizationManager
10CLNotifierIN38CLBeaconFenceAuthorizationManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE
N38CLBeaconFenceAuthorizationManager_Type6ClientE
N10CLNotifierIN38CLBeaconFenceAuthorizationManager_Type12NotificationENS0_16NotificationDataEcNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE6ClientE
N23CLBTLEBeaconRegion_Type15MonitoredRegionE
N23CLBTLEBeaconRegion_Type6RegionE
NSt3__119basic_ostringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__120__shared_ptr_emplaceIN38CLBeaconFenceAuthorizationManager_Type16NotificationDataENS_9allocatorIS2_EEEE
>26CLBTLERangeManagerConcrete
N26CLBTLERangeManagerConcrete16RegisteredRegionE
22CLCalorieSwimmingModel
18CLBTLERangeManager
10CLNotifierIN23CLBTLERangeManager_Type12NotificationENS0_16NotificationDataEcNSt3__14listIN23CLBTLEBeaconRegion_Type15MonitoredRegionENS3_9allocatorIS6_EEEEE
N23CLBTLERangeManager_Type6ClientE
N10CLNotifierIN23CLBTLERangeManager_Type12NotificationENS0_16NotificationDataEcNSt3__14listIN23CLBTLEBeaconRegion_Type15MonitoredRegionENS3_9allocatorIS6_EEEEE6ClientE
29CLBTLERangeManagerUnsupported
NSt3__120__shared_ptr_emplaceIN23CLBTLERangeManager_Type16NotificationDataENS_9allocatorIS2_EEEE
333?
11CLTurnState
10CLNotifierIN16CLTurnState_Type12NotificationENS0_16NotificationDataEccE
14CLMedianFilterIfE
NSt3__120__shared_ptr_emplaceIN16CLTurnState_Type16NotificationDataENS_9allocatorIS2_EEEE
24CMTemperatureFitReceiver
26CLSwimDistanceEstimatorLap
23CLSwimDistanceEstimator
b*J@k
M@\z
S@t9
tdV@u
K]@ 
)c@!3I
`fp@
#l@ffff
;q@G
@9W
@MinSessionLengthAWD
$@26CLSedentaryAlarmRecorderDb
20CLActivityRecorderDbI20CLSedentaryAlarmDataE
37CLSensorFusionService3AxisDynamicGyro
#@q=
;,{@;T
i;'4
:<IkO<
d<yvz<
<yvz<
d<IkO<
i;,{@;
0?23CLMemoryMappedFileError
NSt3__120__shared_ptr_emplaceI32CLWifiAccessPointLocationServiceNS_9allocatorIS1_EEEE
NSt3__110__function6__funcIZN32CLWifiAccessPointLocationService31_saveWifiTileAccessPointEntriesERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENSB_8durationIeNS_5ratioILx1ELx1EEEEEEEE3$_3NS6_ISL_EEFvRKN19CLTilesManager_Type10TileHeaderEiEEE
NSt3__110__function6__baseIFvRKN19CLTilesManager_Type10TileHeaderEiEEE
ZN32CLWifiAccessPointLocationService31_saveWifiTileAccessPointEntriesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS9_8durationIeNS0_5ratioILx1ELx1EEEEEEEE3$_3
NSt3__110__function6__funcIZN32CLWifiAccessPointLocationService31_saveWifiTileAccessPointEntriesERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENSB_8durationIeNS_5ratioILx1ELx1EEEEEEEE3$_4NS6_ISL_EEFvRKN19CLTilesManager_Type16AccessPointEntryEEEE
NSt3__110__function6__baseIFvRKN19CLTilesManager_Type16AccessPointEntryEEEE
ZN32CLWifiAccessPointLocationService31_saveWifiTileAccessPointEntriesERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_6chrono10time_pointIN2cl6chrono19CFAbsoluteTimeClockENS9_8durationIeNS0_5ratioILx1ELx1EEEEEEEE3$_4
26CLWifiTilesManagerExternal
27CLIWifiTilesManagerExternal
25CLTileSyncManagerExternal
N17CLTileSyncManager9IExternalE
?30CLWorkloadCalibratorRecorderDb
20CLActivityRecorderDbI25CLWorkloadCalibratorEntryE
30CLTransitTilePreloaderExternal
31CLITransitTilePreloaderExternal
16CLCoarseCellTile
23CLKeyLatLonTileTemplateIN19CLTilesManager_Type30KeyLatLonIndexEntry_CoarseCellENS0_25KeyLatLonEntry_CoarseCellEE
23CLAppRecommendationTile
25CLSpatialDataTileTemplateIN19CLTilesManager_Type27AppRecommendationIndexEntryENS0_22AppRecommendationEntryEE
NSt3__110__function6__funcIZ13wrap_receiverPN19CLWifiServiceClient9IReceiverEE3$_0NS_9allocatorIS5_EEFviRKN18CLWifiService_Type12NotificationERKNS8_16NotificationDataEEEE
Z13wrap_receiverPN19CLWifiServiceClient9IReceiverEE3$_0
21CLStepCountRecorderDb
20CLActivityRecorderDbI16CLStepCountEntryE
19CLStepCountNotifier
10CLNotifierIN24CLStepCountNotifier_Type12NotificationENS0_16NotificationDataEccE
N24CLStepCountNotifier_Type6ClientE
N10CLNotifierIN24CLStepCountNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
NSt3__120__shared_ptr_pointerIP21CLStepCountRecorderDbNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI21CLStepCountRecorderDbEE
NSt3__120__shared_ptr_emplaceIN24CLStepCountNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
o@14CLSwimNotifier
10CLNotifierIN19CLSwimNotifier_Type12NotificationENS0_16NotificationDataEccE
N19CLSwimNotifier_Type6ClientE
N10CLNotifierIN19CLSwimNotifier_Type12NotificationENS0_16NotificationDataEccE6ClientE
N16CLMotionNotifier14SiloDispatcherIN6CLGyro6SampleEEE
N6CLGyro6SampleE
N16CLMotionNotifier14SiloDispatcherIN15CLAccelerometer6SampleEEE
N15CLAccelerometer6SampleE
N16CLMotionNotifier14SiloDispatcherIN6CLGyro11TemperatureEEE
N6CLGyro11TemperatureE
NSt3__120__shared_ptr_emplaceIN19CLSwimNotifier_Type16NotificationDataENS_9allocatorIS2_EEEE
CleanShutdown
CLDaemonCore
CLDaemonCore::CLDaemonCore()
multiple instances created - last instance %p
AutoShutdownDelay
ObsoleteDataCheckDelay
v8@?0^{CLNetworkLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal> >={__compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal> >=^{CLINetworkLocationProviderExternal}}}B{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true> >=L}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true> >=L}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true> >=L}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true> >=L}}}idddii{map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >={__tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true> >=L}}}B^{CLNetworkLocationRequester}BBBB{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{__CFRunLoopTimer}iB^{CLPersistentTimer}dddiiiii{set<CLNetworkLocationProvider::ServerResponseListener *, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *>, std::__1::allocator<CLNetworkLocationProvider::ServerResponseListener *> >={__tree<CLNetworkLocationProvider::ServerResponseListener *, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *>, std::__1::allocator<CLNetworkLocationProvider::ServerResponseListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationProvider::ServerResponseListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *> >=L}}}i{CLDistanceCalc=ddddd}BB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}4
CLFilteredLocationController
CLTimeZoneManager
CLApplicationLifecycleManager
CLFenceManager
CLSpeedProvider
CLStatusBarIconManager
CLSimulationController
CLClientManager
CLWifiTilesManager
CLTilesManager
CLRoutineMonitor
CLSmootherMonitor
CLSignificantVisitManager
CLSuggestedActionManager
CLLocationStreamer
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Core/CLDaemonCore.mm
bool CLDaemonCore::startInitialize()
com.apple.locationd.synchronous
Could not create MIG background server dispatch source
v4@?0
com.apple.locationd.simulation
Could not create MIG simulation server dispatch source
com.apple.locationd.spi
could not create MIG SPI server run loop source
wrapRunLoopWithAutoreleasePoolHandler
count > 0
static void CLDaemonCore::profileObserverCallback(CFRunLoopObserverRef, CFRunLoopActivity, void *)
OBSERVER: TIMEOUT: %s => %s RunLoop is really busy time(%.8lf) tdiff(%.8lf)
void CLDaemonCore::installProfileObserver(CFStringRef)
Can't read mach_timebase_info = %d
sTimebaseInfo.denom %d sTimebaseInfo.numer %d
void CLDaemonCore::startRun()
locationd was started after an unclean shutdown
com.apple.locationd.registration
RunLoopProfileObserver
OBSERVER: ProfileObserver = %d
starting idle shutdown timer of %d seconds
void CLDaemonCore::startCleanup()
bool CLDaemonCore::shutdown(bool)
daemon shutting down
killed by %d
CLTelephonyService
CLWifiService
CLTimeManager
CLCarrierSettings
CLDarwinNotifier
void CLDaemonCore::onShutdownTimer(CFRunLoopTimerRef)
linger requested - not shutting down
void CLDaemonCore::scheduleShutdown(int)
no more clients, %d second(s) to auto-shutdown
ObsoleteDataDeleted
static void CLDaemonCore::deleteObsoleteData(bool)
Obsolete data has already been deleted; not deleting again
Deleting obsolete data
Obsolete data deleted in %.2f seconds
/System/Library/LaunchDaemons/com.apple.locationd.plist
LaunchEvents
void launchServicesWithLaunchEvents()
no LaunchEvents found
com.apple.xpc.activity
no xpc activities registered
 kCFRunLoopEntry
 kCFRunLoopBeforeTimers
 kCFRunLoopBeforeSources
 kCFRunLoopBeforeWaiting
 kCFRunLoopAfterWaiting
 kCFRunLoopExit
PreviousLocation
WifiLocationNearby
LocationEnabled
cells.plist
cells-local.plist
h-cells.plist
h-wifis.plist
clients-b.plist
c-trained.plist
cells.db
cells.db-journal
wifis.db
wifis.db-journal
cells-local.db
cells-local.db-journal
h-locations.db
h-locations.db-journal
h-cells.db
h-cells.db-journal
h-wifis.db
h-wifis.db-journal
compass.db
compass.db-journal
history.db
history.db-journal
glgps_nvs.bin
Deleting %s if present
void _deleteObsoleteData()
wifi
Deleting obsolete wifi subdirectory
void _deleteObsoleteData()_block_invoke
Deleting %s
Could not delete file %s
C8@?0r*4
SBLastSystemVersion
v8@?0^{CLFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@^{CLFenceDatabase}B{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}B@}{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?}{CLFenceMonitorWifiLogic=}}{CLFenceMonitorContinuous=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >={__tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence> >=L}}}}{CLFenceMonitorLogic=}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorContinuous_Type::Client, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >={__compressed_pair<CLFenceMonitorContinuous_Type::Client *, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >=^{Client}}}@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}{CLFenceDataDownloadManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client> >={__compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client> >=^{Client}}}^{CLPersistentTimer}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}dBB{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}ddddddidddiQi}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}{CLDistanceCalc=ddddd}B^{CLPersistentTimer}dd{map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client> >={__compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >={__compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >={__compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >=^{Client}}}}4
CLSignificantChangeManager
int main(int, const char **)
locationd does not take any command-line arguments. Use CFPreferences instead.
Setting location services to %d
LastSystemVersion
locationd.log
logs
locationd
EnableLockTimeDebugging
Lock time debugging is enabled
/cache_encryptedA.db
-journal
-shm
-wal
CLDaemonCore stopped.
LowWaterLoopProtectionInterval
main.low-water-loop-protection
GyroCalibration
GyroMultiCalibration
virtual bool CLGyroCalibrationDatabaseLocalMultiRun::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)
CLGyroCalibrationDatabaseLocalMultiRun insert x,%f,y,%f,z,%f,temperature,%f
fBuilding,%d
virtual bool CLGyroCalibrationDatabaseLocalMultiRun::wipeDatabase()
Wipe database during a build.
DELETE FROM GyroMultiCalibration
virtual void CLGyroCalibrationDatabaseLocalMultiRun::startFactoryGYTT()
CLGyroCalibrationDatabaseLocalMultiRun startFactoryGYTT
virtual bool CLGyroCalibrationDatabaseLocalMultiRun::getLastMiniCalibration(CFAbsoluteTime &) const
CLGyroCalibrationDatabaseLocalMultiRun getLastMiniCalibration
com.apple.CoreMotion.GyroCalibration.PostCal
com.apple.CoreMotion.GyroCalibration.PreCal
com.apple.CoreMotion.GyroCalibration.FactoryCal
com.apple.CoreMotion.GyroCalibration.UnknownCal
Intercept.X
Intercept.Y
Intercept.Z
Slope.X
Slope.Y
Slope.Z
TimeSinceLastCal
UrgentFlag
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalMultiRun.mm
void CLGyroCalibrationDatabaseLocalMultiRun::initializeWithFactoryData()
SELECT MAX(Round) FROM GyroMultiCalibration
SELECT Round, Temperature, BiasX, BiasY, BiasZ FROM GyroMultiCalibration WHERE Round = ? OR (Round > ? AND Round <= ?)
void CLGyroCalibrationDatabaseLocalMultiRun::loadFromDatabase()
SQL error: %s
DELETE FROM GyroMultiCalibration WHERE Round <= ? AND Round <> ?
Round
Temperature
BiasX
BiasY
BiasZ
void CLGyroCalibrationDatabaseLocalMultiRun::updatePoints(int)
virtual void CLGyroCalibrationDatabaseLocalMultiRun::beginRun(bool)
fNextRound,%d,fIsUrgentCal,%d
virtual void CLGyroCalibrationDatabaseLocalMultiRun::abortRun()
virtual void CLGyroCalibrationDatabaseLocalMultiRun::endRun()
nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d,fIsUrgentCal,%d
Ending UrgentCal run, double entering this round
Double entry: nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d,secondRoundNum,%d
virtual bool CLGyroCalibrationDatabaseLocalMultiRun::registerForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)
virtual bool CLGyroCalibrationDatabaseLocalMultiRun::unregisterForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)
static CLMotionTypeRotationRate CLGyroCalibrationDatabaseLocalMultiRun::getMedians(std::vector<CLMotionTypeRotationRate> &)
B12@?0r^{?=fff}4r^{?=fff}8
static bool CLGyroCalibrationDatabaseLocalMultiRun::computeFullBias(const std::vector<BiasTemperatureRound>::const_iterator, const std::vector<BiasTemperatureRound>::const_iterator, const std::deque<BiasTemperatureRound> *, CLMotionTypeGyroBiasFit &)
ComputeFullBias: x,%f,y,%f,z,%f
static bool CLGyroCalibrationDatabaseLocalMultiRun::computeIntercept(const std::vector<BiasTemperatureRound>::const_iterator, const std::vector<BiasTemperatureRound>::const_iterator, const std::deque<BiasTemperatureRound> *, CLMotionTypeGyroBiasFit &)
ComputeIntercept: x,%f,y,%f,z,%f
virtual void CLGyroCalibrationDatabaseLocalMultiRun::startCalibration(bool)
Starting gyro calibration, user initiated, %d
virtual void CLGyroCalibrationDatabaseLocalMultiRun::teardown()
Stopped gyro calibration
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLNotifier.h
virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%s; client %d has deregistered, not notifying %s
void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%s; unknown client %d
void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
B4@?0
virtual void CLMotionNotifier::SiloDispatcher<CLDeviceMotion::Sample>::dispatchData(int, const void *, size_t) [T = CLDeviceMotion::Sample]
SIZE MISMATCH: %s=%lu vs sz=%zu
virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%s; client %d does not exist
virtual bool CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::listClients() [Notification_T = CLGyroCalibrationDatabase_Type::Notification, NotificationData_T = CLGyroCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%s; already shutdown; not listing clients
%s; clients, id: %d, notification: %d
CLLocationStreamerSilo
hash
superclass
description
T@"NSString",R,C
valid
TB,N
Active location client on remote device
Remote device is considering this device as a location source
CLLocationStreamingConnectionManager
currentGranularity
Ti,N,V_currentGranularity
locationUpdatesIncludeMotionState
TB,N,V_locationUpdatesIncludeMotionState
clientIsInFitnessSession
TB,N,V_clientIsInFitnessSession
fitnessSessionNotificationClients
T@"NSMutableSet",&,N,V_fitnessSessionNotificationClients
motionAlarmActive
TB,N,V_motionAlarmActive
isSubscribedForMotion
TB,N,V_isSubscribedForMotion
resendMotionStateTimer
T@"CLTimer",&,N,V_resendMotionStateTimer
emergencyEnablementAssertionCount
Ti,N,V_emergencyEnablementAssertionCount
streamingConnection
T@"<CLLocationStreamingConnectionManagerServiceProtocol>",&,N,V_streamingConnection
aliveAgainThrottleTimer
T@"CLTimer",&,N,V_aliveAgainThrottleTimer
kCLLocationStreamerLastAliveAgainMessageTimestamp
CLLocationStreamer::RollingPowerAssertion
LocationStreamerMotionOverride
SensorReplayMode
CLGyroCalibrationDatabaseLocal::CLGyroCalibrationDatabaseLocal(CLSilo *)
Removing outliers from database.
virtual bool CLGyroCalibrationDatabaseLocal::insert(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &, float, CFAbsoluteTime)
Insert into uncached database.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocal.mm
virtual bool CLGyroCalibrationDatabaseLocal::registerForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)
Client registered, caching database
virtual bool CLGyroCalibrationDatabaseLocal::unregisterForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)
No more clients, flushing cache to database
Database should be cached
SELECT 
 FROM 
 WHERE 
>=? AND 
<=? ORDER BY 
void CLGyroCalibrationDatabaseLocal::insert(const CLMotionTypeRotationRate &, float)
CLGyroCalibrationDatabaseLocal insert x,%f,y,%f,z,%f,temperature,%f
void CLGyroCalibrationDatabaseLocal::cacheEntriesBetweenTemperatures(float, float, CLGyroCalibrationCache &)
void CLGyroCalibrationDatabaseLocal::cacheAllEntries(CLGyroCalibrationCache &)
Reading database into non-empty cache.
void CLGyroCalibrationDatabaseLocal::writeCacheToDatabase()
Attempting to write zero entries to Gyro database.
DELETE FROM 
Could not prepare cached insert statement
EnableGyroNonlinearCalibration
EnableGyroMultiRunCalibration
Time
reset
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/smart_ptr/scoped_ptr.hpp
p == 0 || p != px
assert
unentitled
_CLDaemonSetAuthorizationStatusByType
com.apple.locationd.authorizeapplications
kern_return_t _CLDaemonSetAuthorizationStatusByType(mach_port_t, const char *, const char *, int, audit_token_t)
Must provide a bundle identifier or bundle path for which to set location authorization status
v8@?0^{CLClientManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client> >={__compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}B@{map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *> > >={__tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true> >=L}}}@{unordered_multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}i{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=L}}}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=L}}}iB^{CLConnectionServer}{map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *> > >={__tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true> >=L}}}@i{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector<CLClientManager::DaemonAppCoupling, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}^{DaemonAppCoupling}{__compressed_pair<CLClientManager::DaemonAppCoupling *, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}}}{vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}^{ImproveAccuracyNotification}{__compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}}}BBBBii{unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name> >={__compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name> >=^{Name}}}@B@@{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}d{map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}@@@@}4
_CLDaemonSetAuthorizationStatus
kern_return_t _CLDaemonSetAuthorizationStatus(mach_port_t, const char *, const char *, uint8_t, audit_token_t)
_CLDaemonResetAllClients
_CLDaemonConfigure
com.apple.locationd.configure
kern_return_t _CLDaemonConfigure(mach_port_t, CLMotionTypeCommandConfigure, audit_token_t)
Oscar not available
Unable to send configuration to Oscar
kern_return_t _CLDaemonOscarTimeSync(mach_port_t, uint64_t *, uint64_t *)
Unexpected null pointer. machTimestamp,%p,oscarTimestamp,%p
_CLDaemonGetAppsUsingLocation
com.apple.locationd.status
_CLDaemonGetTechnologiesInUse
kern_return_t _CLDaemonGetTechnologiesInUse(mach_port_t, cl_property_list_data_t *, mach_msg_type_number_t *, audit_token_t)
#warning Couldn't create active location technologies array
Could not serialize tech data (%s, %ld)
Could not serialize tech data
_CLDaemonSetPrivateMode
com.apple.CoreLocation.PrivateMode
_CLDaemonGetPrivateMode
_CLDaemonSetLocationServicesEnabled
enabled
disabled
kern_return_t _CLDaemonSetLocationServicesEnabled(mach_port_t, uint8_t, audit_token_t)
%s is setting location services to %s
_CLDaemonSetGestureServiceEnabled
kern_return_t _CLDaemonSetGestureServiceEnabled(mach_port_t, uint8_t, audit_token_t)
%s is setting ear gesture service to %s
kern_return_t _CLDaemonPingDaemon(mach_port_t, audit_token_t)
Pinged by external process %s
_CLDaemonGetAuthorizationStatus
com.apple.locationd.effective_bundle
kern_return_t _CLDaemonGetAuthorizationStatus(mach_port_t, const char *, const char *, uint32_t *, audit_token_t)
Authorization status for %s is %s
_CLDaemonGetAuthorizationStatusForService
CLClientAuthorizationCache
_CLDaemonPerformMigration
com.apple.locationd.integritycheck
elapsed
v20@?0Q4Q12
kern_return_t _CLDaemonShutdownDaemon(mach_port_t, audit_token_t)
Daemon shutdown requested by %s
kern_return_t _CLDaemonDisplayStatistics(mach_port_t, audit_token_t)
Daemon stats requested by %s
kern_return_t _CLDaemonDumpLogs(mach_port_t, const char *, audit_token_t)
Log dump requested by %s: %s
kern_return_t _CLDaemonCopyLastLog(mach_port_t, uint32_t, audit_token_t)
%s requested to copy locationd's last %u logs to crash reporter
_CLDaemonGetMonitoredRegions
kern_return_t _CLDaemonGetMonitoredRegions(mach_port_t, const char *, const char *, cl_property_list_data_t *, mach_msg_type_number_t *, audit_token_t)_block_invoke
#warning Couldn't get fences for client key %s
kCLConnectionMessageNameKey
kCLConnectionMessageOnBehalfOfKey
kCLConnectionMessageRegionTypeKey
kCLConnectionMessageLatitudeKey
kCLConnectionMessageLongitudeKey
kCLConnectionMessageRadiusKey
kCLConnectionMessageReferenceFrameKey
kCLConnectionMessageNotifyOnEntryKey
kCLConnectionMessageNotifyOnExitKey
kCLConnectionMessageConservativeEntry
kCLConnectionMessageCircularRegionKey
v8@?0^{CLBTLEFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}4
kCLConnectionMessageRegionDefinitionKey
kCLConnectionMessageProximityUUIDKey
kCLConnectionMessageMajorKey
kCLConnectionMessageMinorKey
kCLConnectionMessageNotifyEntryStateOnDisplayKey
kCLConnectionMessageBeaconRegionKey
_CLDaemonGetLocation
com.apple.locationd.preauthorized
kern_return_t _CLDaemonGetLocation(mach_port_t, const char *, const char *, uint8_t, uint8_t, CLClientLocation *, audit_token_t)_block_invoke
MiG GetLocation rejected for '%s(%d)': no way to establish effective authorization
kern_return_t _CLDaemonGetLocation(mach_port_t, const char *, const char *, uint8_t, uint8_t, CLClientLocation *, audit_token_t)
MiG GetLocation rejected for '%s': insufficient effective authorization
v8@?0^{CLLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{CLDistanceCalc=ddddd}cc{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}BdII{map<unsigned long, CLLocationController::ProviderClient, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CLLocationController::ProviderClient> > >={__tree<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::less<unsigned long>, true> >=L}}}{map<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<unsigned long>, true> >=L}}}{CLLocationFilterController={CLIntegrityMonitor={CLDistanceCalc=ddddd}{MotionInfo=dii}{MotionInfo=dii}{deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >={__split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}^^{MotionInfo}^^{MotionInfo}{__compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{IM_AllSources={IMPara=BBBdd}{IMPara=BBBdd}{IMPara=BBBdd}i}}@{CLDualModeKalmanFilter=^^?{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLDistanceCalc=ddddd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{CLMapMatchingEngine}{unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine> >={__compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine> >=^{CLOutdoorMatchingEngine}}}BBBB{CLVehicleSpeedFilter={SpeedAndTime=dd}{SpeedAndTime=dd}{SpeedAndTime=dd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dddddBB{MapMatcherNetworkUsage=iiiBBBBi}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >={__compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}IIIIIII@^{__CFRunLoopTimer}^{__CFRunLoopTimer}BBBBBBBBd^{__CFRunLoopSource}^{__CFRunLoopSource}B{unique_ptr<CLRavenEstimator, std::__1::default_delete<CLRavenEstimator> >={__compressed_pair<CLRavenEstimator *, std::__1::default_delete<CLRavenEstimator> >=^{CLRavenEstimator}}}BB[8{StateTransition=*Bd}]d{PropagationDataHistory={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dd}}4
v164@?0{?=ii{?=dd}ddddddddddidi{?=dd}diIii}4
_CLDaemonSetLocationDefault
com.apple.locationd.defaults_access
kern_return_t _CLDaemonSetLocationDefault(mach_port_t, char *, cl_property_list_data_t, mach_msg_type_number_t, audit_token_t)
Setting default %s from %s
_CLDaemonGetLocationDefault
kern_return_t _CLDaemonGetLocationDefault(mach_port_t, char *, cl_property_list_data_t *, mach_msg_type_number_t *, audit_token_t)
Getting default %s for %s
_CLDaemonSetAutopauseState
com.apple.locationd.mock_testing
kern_return_t _CLDaemonSetAutopauseState(mach_port_t, cl_property_list_data_t, mach_msg_type_number_t, audit_token_t)_block_invoke
Attempted set autopause state but mocking not enabled
v8@?0^{CLAutopauseProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}4
_CLDaemonGetStatusBarIconState
_CLDaemonSetStatusBarIconEnabledForEntityClass
kern_return_t _CLDaemonSetStatusBarIconEnabledForEntityClass(mach_port_t, uint32_t, uint8_t, audit_token_t)
%s is setting the status bar icon enabled state for %d to %d
_CLDaemonGetStatusBarIconEnabledForEntityClass
kern_return_t _CLDaemonGetStatusBarIconEnabledForEntityClass(mach_port_t, uint32_t, uint8_t *, audit_token_t)
%s retrieved the status bar icon enabled state for %d
_CLDaemonSetMapMatchingRouteHint
com.apple.locationd.route_hint
kern_return_t _CLDaemonSetMapMatchingRouteHint(mach_port_t, cl_binary_data_t, mach_msg_type_number_t, audit_token_t)
Received %d route hints from %s
_CLDaemonGetActivities
kern_return_t _CLDaemonGetActivities(mach_port_t, cl_property_list_data_t *, mach_msg_type_number_t *, audit_token_t)
#warning _CLDaemonGetActivityAlarms called without support for activity alarms
_CLDaemonTimeZoneAtLocation
com.apple.locationd.time_zone
MIGResponseSilo
ctor
MotionLoggerGyroLoggingInterval
CLMotionDefaultsWrite<bool>::CLMotionDefaultsWrite(const char *, const T &) [T = bool]
motion default,%s,set,%d,value,%s
CLMotionDefaultsWrite<double>::CLMotionDefaultsWrite(const char *, const T &) [T = double]
virtual void CLMotionNotifier::SiloDispatcher<CLMotionCoprocessorInterface::NotificationData>::dispatchData(int, const void *, size_t) [T = CLMotionCoprocessorInterface::NotificationData]
CLSimulationDaemonSetLocationSimulationScenario
kern_return_t CLSimulationDaemonSetLocationSimulationScenario(mach_port_t, char *, audit_token_t)
Entitlement %s required to use %s
Simulation API called, but location simulation not supported
Got simulation request with invalid URL %s
CLSimulationDaemonSetLocationSimulationType
kern_return_t CLSimulationDaemonSetLocationSimulationType(mach_port_t, uint32_t, audit_token_t)
CLSimulationDaemonSetIntermediateLocationDistance
kern_return_t CLSimulationDaemonSetIntermediateLocationDistance(mach_port_t, double, audit_token_t)
CLSimulationDaemonSetLocationInterval
kern_return_t CLSimulationDaemonSetLocationInterval(mach_port_t, CFTimeInterval, audit_token_t)
CLSimulationDaemonSetLocationTravellingSpeed
kern_return_t CLSimulationDaemonSetLocationTravellingSpeed(mach_port_t, double, audit_token_t)
CLSimulationDaemonSetLocationRepeatBehavior
kern_return_t CLSimulationDaemonSetLocationRepeatBehavior(mach_port_t, unsigned int, audit_token_t)
CLSimulationDaemonClearSimulatedLocations
kern_return_t CLSimulationDaemonClearSimulatedLocations(mach_port_t, audit_token_t)
CLSimulationDaemonAppendSimulatedLocations
kern_return_t CLSimulationDaemonAppendSimulatedLocations(mach_port_t, cl_property_list_data_t, mach_msg_type_number_t, audit_token_t)
CLSimulationDaemonStartLocationSimulation
kern_return_t CLSimulationDaemonStartLocationSimulation(mach_port_t, audit_token_t)
CLSimulationDaemonStopLocationSimulation
kern_return_t CLSimulationDaemonStopLocationSimulation(mach_port_t, audit_token_t)
CLSimulationDaemonClearSimulatedCells
kern_return_t CLSimulationDaemonClearSimulatedCells(mach_port_t, audit_token_t)
Simulation API called, but cell simulation not supported
CLSimulationDaemonStartCellSimulation
kern_return_t CLSimulationDaemonStartCellSimulation(mach_port_t, audit_token_t)
CLSimulationDaemonStopCellSimulation
kern_return_t CLSimulationDaemonStopCellSimulation(mach_port_t, audit_token_t)
CLSimulationDaemonAppendSimulatedCells
kern_return_t CLSimulationDaemonAppendSimulatedCells(mach_port_t, cl_property_list_data_t, mach_msg_type_number_t, audit_token_t)
%lu keys in dictionary
Received invalid cell dictionary
Key is not an NSDate (%s)
CLSimulationDaemonSetCellRegistrationStatus
kern_return_t CLSimulationDaemonSetCellRegistrationStatus(mach_port_t, uint8_t, audit_token_t)
CLSimulationDaemonStartWifiSimulation
kern_return_t CLSimulationDaemonStartWifiSimulation(mach_port_t, audit_token_t)
Simulation API called, but WiFi simulation not supported
CLSimulationDaemonStopWifiSimulation
kern_return_t CLSimulationDaemonStopWifiSimulation(mach_port_t, audit_token_t)
CLSimulationDaemonAppendSimulatedWifiScanResults
kern_return_t CLSimulationDaemonAppendSimulatedWifiScanResults(mach_port_t, cl_property_list_data_t, mach_msg_type_number_t, audit_token_t)
Received invalid MAC in scan results
CLSimulationDaemonSetWifiPower
kern_return_t CLSimulationDaemonSetWifiPower(mach_port_t, uint8_t, audit_token_t)
CLSimulationDaemonFlush
kern_return_t CLSimulationDaemonFlush(mach_port_t, audit_token_t)
Location simulation flush requested
CLPrivacyManagerSilo
CLPrivacyManager.B
CLPrivacyManager.C
CLPrivacyManager.D
-[CLPrivacyManager onClientManagerNotification:data:]
CLISP bug: CLPrivacyManager still receiving messages after invalidation by the service vendor
-[CLPrivacyManager scheduleVacuum]
Deferring previously scheduled vacuum
Scheduling vacuum
-[CLPrivacyManager vacuumAll]
Vacuuming all
v8@?0@"NSObject<OS_xpc_object>"4
CLPrivacyManager
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Core/CLPrivacyManager.mm
-[CLPrivacyManager onActivity:withIdentifier:]
Unexpected activity state. XPC bug?
silo
T@"CLDispatchSilo",R,D,N
bool vacuumEncryptionClass(NSString *)
Unexpected encryption class '%@'
CLGyroCalibrationDatabaseLocalBaseSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalBase.mm
-[CLGyroCalibrationDatabaseLocalBaseAdapter beginService]
virtual void CLGyroCalibrationDatabaseLocalBase::dumpDatabase(const char *)
Dumping gyro calibration database
/bin/cp
IOPropertyMatch
static void CLGyroCalibrationDatabaseLocalBase::readFactoryData(std::vector<std::pair<float, CLMotionTypeRotationRate> > &)
Cannot get GYTT property
data not long enough to get version properly
GYTT version (%u) does not match expected version (%u)
Adding entry to database: %f,%f,%f,%f;
NOT adding entry to database: %f,%f,%f,%f;
GyroCalDbFile
static const CLSqliteDatabase::SqliteProperties CLGyroCalibrationDatabaseLocalBase::getSqlProperties()
No gyroCal database file set in preferences. Using the default database.
Using gyroCal database file: %s.
name
gyro
gyro-temp-table
CLCompassDatabaseDaemonSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/CLCompassDatabaseDaemon.mm
-[CLCompassDatabaseDaemonAdapter beginService]
virtual void CLCompassDatabaseDaemon::getBiasInternal(CLMotionTypeMagneticField, CLMotionTypeAcceleration)
 MOTIONREPLAY, getBias, %f, %f, %f, %f, %f, %f
virtual void CLCompassDatabaseDaemon::setBiasInternal(CLMotionTypeMagneticField, CLMotionTypeVector3, int, float, float)
MOTIONREPLAY, setBias, %f, %f, %f, %f, %f, %f, %d, %f, %f
CompassCalibration
ClusterCompassCalibration
CompassDatabaseMaximumMagnitudeDifference
CompassDatabaseMaximumInclinationDifference
CompassBiasClusteringEnabled
CompassBiasClusteringRadius
CompassBiasTemporalVarianceCheck
CompassCachedEntryLifetime
void CLCompassDatabaseController::init()
Max magnitude difference (%f), Max inclination difference (%f), CompassBiasClusteringEnabled (%d), CompassBiasTemporalVarianceCheck (%d)
CompassDatabaseDaemonClearBiasTimer
bool CLCompassDatabaseController::lookupBias(const CLMotionTypeMagneticField &, const CLMotionTypeAcceleration &, CFAbsoluteTime, CLMotionTypeVector3 &, int &, bool &)
CompassBiasDB, begin lookups
Compass recently calibrated.  Using cached bias: (%f, %f, %f) with level: (%d).
search found: bestfit (%+.3f/%+.3f/%+.3f) bias (%+.3f/%+.3f/%+.3f) level (%d) using magneticField (%+.3f/%+.3f/%+.3f) acceleration (%+.3f/%+.3f/%+.3f) from %d entries. No: %llu. IsCluster: %d, 2D Check,%d
search failure: no result, saw bestfit (%+.3f/%+.3f/%+.3f) bias (%+.3f/%+.3f/%+.3f) level (%d) using magneticField (%+.3f/%+.3f/%+.3f) acceleration (%+.3f/%+.3f/%+.3f) from %d entries
search complete failure: no results from %d entries
void CLCompassDatabaseController::setBias(CLMotionTypeMagneticField, CLMotionTypeVector3, int, float, float)
CompassBiasDB, setBias has novel information, countdown to clustering: %d
CompassBiasDB, setBias is not novel.
void CLCompassDatabaseController::dumpDatabase(const char *)
Dumping compass database
void CLCompassDatabaseController::clusterBiasEntries()
CompassBiasDB, clusteralgo, started
CompassBiasDB, clusteralgo, finished, numbers of clusters found, %zu,  %d
bool CLCompassDatabaseController::temporalBiasVarianceCheckPassed(CFAbsoluteTime, bool, const CLCompassDatabaseRecord &)
search complete failure: too much variation in bias within a short time period, mean (%.3f) max (%.3f)
bool CLCompassDatabaseController::lookupBiasByCluster(const CLMotionTypeMagneticField &, const CLMotionTypeAcceleration &, bool, CLCompassDatabaseRecord &, float &, unsigned int &, sqlite3_int64 &)
CompassBiasDB, lookup, rowid, %llu, bias, %.3f, %.3f, %.3f, mag, %.3f, %.3f, incl, %.3f, %.3f, magDiff, %.3f, inclDiff, %.3f, score, %.3f, betterMatch, %d
bool CLCompassDatabaseController::lookupBiasIndividually(const CLMotionTypeMagneticField &, const CLMotionTypeAcceleration &, bool, CLCompassDatabaseRecord &, float &, unsigned int &, sqlite3_int64 &)
CompassBiasDB, lookupBiasIndividually
bool CLCompassDatabaseController::findClosestEntry(const CLMotionTypeMagneticField &, const CLMotionTypeAcceleration &, bool, sqlite3_int64 &)
Best fit values (will update timestamp): %llu, %f, %f
INSERT INTO 
void CLCompassDatabaseController::clearBias()
Clearing obsolete bias entries
float CLCompassDatabaseController::compareCalibration(const CLMotionTypeMagneticField &, const CLMotionTypeAcceleration &, bool, const CLCompassDatabaseRecord &, float &, float &)
search comparison: db level (%d) db age (%.3f), db mag (%.3f) est mag (%.3f) delta mag (%.3f), db inc (%.3f) est inc (%.3f) delta inc (%.3f)
virtual void CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::listClients() [Notification_T = CLCompassDatabase_Type::Notification, NotificationData_T = CLCompassDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLGyroBiasEstimatorClientLocal::registerWithGyroBiasEstimatorPrivate(CLGyroBiasEstimatorClientCallback, bool, void *)_block_invoke
GyroBias received by DeviceMotion in daemon
v8@?0r^{?={?=fff}{?=fff}B}4
+[CLVisit(CLSignificantVisitManagerExtensions) _visitWithVisit:authDate:]
SLV: Malformed visit, %s
CLSignificantVisitManagerSilo
significantVisitInterest
significantVisitAuth
-[CLSignificantVisitManager beginService]
#SLV key (%{private}s) not found after we were told it was there
-[CLSignificantVisitManager flushAuthDates]
SLV: Could not store client auth dates
-[CLSignificantVisitManager flushInterest]
SLV: Could not store significant location visit clients
-[CLSignificantVisitManager ensureMonitoring]
SLV: Begin monitoring
-[CLSignificantVisitManager stopMonitoring]
SLV: Stop monitoring
-[CLSignificantVisitManager removeOldVisits]
SLV: About to drop old visits, count, %lu
-[CLSignificantVisitManager removeOldVisits]_block_invoke
SLV: Dropping old visit, %s
B12@?0@4@"NSDictionary"8
SLV: Done dropping old visits, count, %lu
-[CLSignificantVisitManager isClientWithKeyInterested:]
SLV: Client, %s, in store with no interest.
-[CLSignificantVisitManager sendVisitsToClient:]
SLV: Can't deliver visit to client that hasn't connected.
SLV: Client, %s, has no interest.
SLV: Client, %s, is interested
-[CLSignificantVisitManager deliverVisit:toClient:]_block_invoke
SLV: Cannot deliver a visit to a client without a key
SLV: Not delivering visit to client, %s, not interested
SLV: Client, %s, authDate, %s, not authorized for visit
SLV: Delivering visit to client, %s, authDate, %s, mangled, %s
-[CLSignificantVisitManager connectClient:withKey:]
SLV: Client, %s, is connecting.
-[CLSignificantVisitManager startMonitoringSignificantVisitsForClient:]
SLV: Tried to start monitoring for a client that isn't connected
SLV: client, %s, start
-[CLSignificantVisitManager stopMonitoringSignificantVisitsForClient:]
SLV: Tried to stop monitoring for a client that isn't connected
SLV: client, %s, stop
-[CLSignificantVisitManager actOnPendingDeleteForClientKey:]
#SLV programmer error.  Only call this function after setting client interest to PendingDelete
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLSignificantVisitManager.mm
-[CLSignificantVisitManager notifyClientsOfVisit:]_block_invoke
SLV: Sending out visit %s
SLV: Launching %s
SLV: Sending to clients, visit, %s
-[CLSignificantVisitManager authorizationDateForClientWithKey:]
SLV: Can't produce a meaningful authorization date before arming is complete.  Returning nil.
-[CLSignificantVisitManager checkForMonitoring]
SLV: Not checking for monitoring... not armed.
SLV: Checking if SLV should be active.
SLV: should be off
SLV: should be on
-[CLSignificantVisitManager onVisit:]
SLV: Received visit, %s, from routined
-[CLSignificantVisitManager onClientManagerNotification:data:]
received unhandled notification, %d
SpoofSignificantVisit
Latitude
Longitude
Accuracy
ArrivalTimestamp
DepartureTimestamp
DetectionTimestamp
-[CLSignificantVisitManager onDarwinNotifierNotification:data:]
SLV: Spoofing a Significant Visit: %s
clientsActive
TB,N,V_clientsActive
clientInterest
T^{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i},N,V_clientInterest
clientAuthDate
T^{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i},N,V_clientAuthDate
clientAuthorizationCache
T@"<CLClientAuthorizationCacheProtocol>",&,N,V_clientAuthorizationCache
recentVisits
T@"NSMutableArray",&,N,V_recentVisits
routineMonitor
T@"<CLRoutineMonitorServiceProtocol>",&,N,V_routineMonitor
clientManager
T@"<CLClientManagerProtocol>",&,N,V_clientManager
armed
TB,N,V_armed
currentJournalIdentifier
TQ,N,V_currentJournalIdentifier
WMM.dat
https://iphone-ld.apple.com/wmm/WMM.dat
CLGeomagneticModelProviderDaemonSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/CLGeomagneticModelProviderDaemon.mm
-[CLGeomagneticModelProviderDaemonAdapter beginService]
LogCompass
CLGeomagneticModelProviderDaemon::CLGeomagneticModelProviderDaemon(CLSilo *)
could not setup geomagnetic file download from %s
void CLGeomagneticModelProviderDaemon::setLocation(const CLDaemonLocation &)
geomagnetic provider received a stale location <%+.8f,%+.8f,%+.3f> @ %.3f
geomagnetic information calculated for <%+.8f,%+.8f,%+.3f> @ %.3f, declination %f inclination %f will expire @ %.3f
Compass-Geomagnetic
Type,%s,lat,%+.8f,long,%+.8f,alt,%+.3f,x,%.3f,y,%.3f,z,%.3f,m,%.3f,h,%.3f,dec,%+.3f,inc,%+.3f,
no geomagnetic information available for <%+.8f,%+.8f,%+.3f>
virtual bool CLGeomagneticModelProviderDaemon::registerForNotificationInternal(const CLGeomagneticModelProvider_Type::Notification &)
Client requested notification %d
registered as location spectator to compute geomagnetic data
virtual bool CLGeomagneticModelProviderDaemon::unregisterForNotificationInternal(const CLGeomagneticModelProvider_Type::Notification &)
bool CLGeomagneticModelProviderDaemon::getGeomagneticField(const CLDaemonLocation &)
calculating geomagnetic information for year (%ld) month (%ld) day (%ld) decimal year (%f)
geomagnetic file expired, downloading new file now
void CLGeomagneticModelProviderDaemon::invalidateGeomagneticField()
Geomagnetic model data invalidated. Sending notification with timestamp %f
void CLGeomagneticModelProviderDaemon::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
location services is now disabled; invalidating geomagnetic field data
void CLGeomagneticModelProviderDaemon::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Set location
SENSOR
virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLGeomagneticModelProvider_Type::Notification, NotificationData_T = CLGeomagneticModelProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
GyroNonlinearTargetExpirationAge
GyroNonlinearMaxExpirationAge
GyroNonlinearFactoryDataAge
GyroNonlinearFlushTimeout
GyroNonlinearFirstPruneTimeout
GyroNonlinearPruneTimeout
com.apple.CoreMotion.NonlinearGyro
GyroNonlinearCalibration
DELETE FROM GyroNonlinearCalibration
virtual void CLGyroCalibrationDatabaseLocalNonlinear::startFactoryGYTT()
Start factory GYTT
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Motion/SensorCalibration/CLGyroCalibrationDatabaseLocalNonlinear.mm
virtual bool CLGyroCalibrationDatabaseLocalNonlinear::registerForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)
virtual bool CLGyroCalibrationDatabaseLocalNonlinear::unregisterForNotificationInternal(const CLGyroCalibrationDatabase_Type::Notification &)
virtual void CLGyroCalibrationDatabaseLocalNonlinear::startCalibration(bool)
virtual void CLGyroCalibrationDatabaseLocalNonlinear::teardown()
SELECT Id, Timestamp, Temperature, BiasX, BiasY, BiasZ FROM GyroNonlinearCalibration WHERE Active > 0
void CLGyroCalibrationDatabaseLocalNonlinear::loadFromDatabase()
Nonlinear gyro database load, SQL error: %s
Active
Timestamp
void CLGyroCalibrationDatabaseLocalNonlinear::flushPendingSamples()
flushPendingError: %s
Nonlinear gyro database flushed, %zu samples added.
void CLGyroCalibrationDatabaseLocalNonlinear::thinPendingSamples(CFTimeInterval)
Nonlinear gyro pending samples thinned.  %zu samples reduced to %zu.
Thinned
Inserted
UPDATE GyroNonlinearCalibration SET Active = 0 WHERE Id = ?
DELETE FROM GyroNonlinearCalibration WHERE Id = ?
TemperatureSpan
void CLGyroCalibrationDatabaseLocalNonlinear::prune()
Nonlinear gyro database prune, deleted %zu samples, %zu remain.
void CLGyroCalibrationDatabaseLocalNonlinear::computeFit()
Nonlinear gyro database computed fit.
void CLGyroCalibrationDatabaseLocalNonlinear::addAgeError(CMMotionCoprocessorCommand::NonlinearGyroBiasFit &) const
void CLGyroCalibrationDatabaseLocalNonlinear::notifyClientsWithBiasFit()
MaxAgeOut
Overpopulated
NormalAgeOut
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/GyroBiasEstimator/CLNonlinearGyroBiasFitter.h
std::vector<Sample> CLNonlinearGyroBiasFitter::detail::stratifiedRandomSample(It, It) [It = std::__1::__wrap_iter<CLGyroCalibrationDatabaseLocalNonlinear::Sample *>]
virtual void CLCoverStateDaemon::setLastCoverStateChangeTimestamp(const CFAbsoluteTime &)
Setting property %s to %f
virtual CFAbsoluteTime CLCoverStateDaemon::getLastCoverStateChangeTimestamp()
Last cover open timestamp = %f
PreviousCoverOpenTimestamp
CLGestureDataLoggerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/CLGestureDataLogger.mm
-[CLGestureDataLoggerAdapter beginService]
v8@?0^{CLTelephonyService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFRunLoopTimer}^{__CFRunLoopSource}^vBi^{__CTServerConnection}i}4
void CLClusterCompassCalibrationTable::setup(bool)
%s table creation.
 ORDER BY 
 DESC
 LIMIT 
UPDATE 
 SET 
MagneticX
MagneticY
MagneticZ
Level
Magnitude
Inclination
MagnitudeStd
InclinationStd
Count
void CLCompassCalibrationTable::setup(bool)
 AND 
 DESC LIMIT 100
MachineLearning
CLHierarchicalClustering::CLHierarchicalClustering(CLDistanceMatrix &&, LinkageFunction)
min_dist should not be infinity
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/MachineLearning/CLHierarchicalClustering.mm
size_t CLHierarchicalClustering::getClusterLabels(std::vector<CLClusterLabel> &, const std::vector<double> &, size_t) const
distanceThresholdVector must not be empty
minNumCluster must be greater than zero
TB,N,V_valid
CLMicroLocationAWDMetrics
void CLMicroLocationAWDMetrics::computeMetrics()
AWD Metrics is not enabled so not computing microlocation metrics
Computing AWD metrics
void CLMicroLocationAWDMetrics::logMetrics() const
AWD Metrics is not enabled so not logging microlocation metrics
void CLMicroLocationAWDMetrics::pushMetrics()
AWD Metrics is not enabled so not pushing microlocation metrics
Pushing AWD metrics
MicroLocationsAWDMetricsEnabled
truncatedUUID
category
microLocationId
Null Microlocation
numberOfMicroLocations
cl::chrono::CFAbsoluteTimeClock::time_point CLMicroLocationWifiScanStrategy::getExpectedNextScanEndTime(cl::chrono::CFAbsoluteTimeClock::time_point) const
Next scan expected to take %.3Lfs (ending at %0.3fs). Expected time that the scan timer will end: %.03fs
cl::chrono::secondsf CLMicroLocationWifiScanStrategy::getScanDelay(cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::CFAbsoluteTimeClock::time_point, CL::optional<WifiNotificationResults>) const
Not enough time for another scan
No wifi results so issue a scan without delay
Ignoring a cached notification
Got a scan error so returning a scan delay of %0.3Lfs
Got a scan busy error so returning a scan delay of %0.3Lfs
results are 
relevant
%s. returning scan delay: %03Lfs
%s. issuing a scan without delay
%s. scan type %d, our scan is already in-flight
%s. scan type %d, returning scan delay: %03Lfs
%s. scan type %d, returning scan delay: %03LFs
virtual std::shared_ptr<CLWifiScanner::WifiScanSettings> CLMicroLocationWifiScanStrategy::getNextScanSettings(cl::chrono::CFAbsoluteTimeClock::time_point, CL::optional<WifiNotificationResults>)
Setting channels to scan: %s
MicroLocationsLocalizing80211ScanType
MicroLocationsLocalizing80211Modes
MicroLocationsLocalizingScanLowPriority
MicroLocationsLocalizingWifiMaxAgeFirstScan
MicroLocationsRecording80211ScanType
MicroLocationsRecording80211Modes
MicroLocationsRecordingScanLowPriority
MicroLocationsRecordingWifiMaxAgeFirstScan
MicroLocationsWifiMaxAgeNextScan
MicroLocationsWifiBusyRetryDelay
MicroLocationsWifiErrorRetryDelay
MicroLocationsLocalizingTopChannels
CFGetTypeID(cfType) == CFArrayGetTypeID()
CFGetTypeID(cfType) == CFNumberGetTypeID()
didConvert
bool CLMicroLocationsMeasurementFilters::isGoodAp(cl::chrono::CFAbsoluteTimeClock::time_point, const CLWifiService_Type::AccessPoint &, cl::chrono::CFAbsoluteTimeClock::duration)
wifiScanResults
isValid
isNotTooOld
isGood
bool CLMicroLocationAccelerometerPowerDetector::configure(const CLMicroLocationAccelerometerPowerDetector::ConfigurationParameters &)
deltaAcceleration,%f
boost::math::tgamma<%1%>(%1%)
numeric overflow
Unknown function operating on type %1%
Cause unknown
Error in function 
seekpos
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/format/alt_sstream_impl.hpp
parse
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/format/parsing.hpp
static_cast<unsigned int>(cur_item) < items_.size() || cur_item==0
compute_states
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/format/internals.hpp
!(fmtstate_.flags_ &(std::ios_base::adjustfield ^std::ios_base::left))
boost::bad_format_string: format-string is ill-formed
clear
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/format/format_implementation.hpp
bound_.size()==0 || num_args_ == static_cast<int>(bound_.size())
boost::too_many_args: format-string referred to less arguments than were passed
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/format/feed_args.hpp
res.size() == static_cast<size_type>(w)
double
item.pad_scheme_ & format_item_t::tabulation
boost::too_few_args: format-string referred to more arguments than were passed
Evaluation of tgamma at a negative integer %1%.
Result of tgamma is too large to represent.
Evaluation of function at pole %1%
Cause unknown: error caused by bad argument with value %1%
long double
sinpx
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/math/special_functions/gamma.hpp
fl >= 0
Overflow Error
boost::math::itrunc<%1%>(%1%)
boost::math::trunc<%1%>(%1%)
Value %1% can not be represented in the target integer type.
RecordingTimestamp
MicroLocationMeasurements
 WHERE RecordingUUID in ( SELECT RecordingUUID FROM 
MicroLocationRecordingEvents
MicroLocationModels
GenerationTimestamp
MicroLocationConfiguration
Unable to insert
com.apple.locationd.MicroLocationDatabase
CLMicroLocationDatabase::CLMicroLocationDatabase(std::string)
Failed to connect to database
onQueueOpenTransaction
CLSqliteTransaction CLMicroLocationDatabase::onQueueOpenTransaction()
Attempt to call %s without a backing database
No valid connection to microlocation database.
void CLMicroLocationDatabase::dropTables()
Attempt to drop tables without a backing database
uint32_t CLMicroLocationDatabase::onQueueNumEntriesFromTriggerTable(const char *const)
Unable to get column count from trigger table
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationDatabase.mm
bool CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes)
Attempt to deleteDataOlderThan without a backing database
bool CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes)_block_invoke
MicroLocation database has no connection. %s
MicroLocation database sqlite error. %s
bool CLMicroLocationDatabase::deleteUnneededModels(uint32_t)
Attempt to deleteUnneededModels without a backing database
No LOIs found. Not deleting any models
std::vector<boost::uuids::uuid> CLMicroLocationDatabase::selectAllRecordingUUIDsForLearningMeasurementsByLOI(const std::string &, CLMicroLocationProto::Model::ModelType)
Attempt to getUUIDsForAllLearningMeasurementsByLOI without a backing database
std::vector<CLMicroLocationMeasurementTable::Entry> CLMicroLocationDatabase::selectLearningMeasurementsByLOIBetweenTimes(const std::string &, const std::string &, const std::string &)
Attempt to selectLearningMeasurementsByLOIBetweenTimes without a backing database
uint32_t CLMicroLocationDatabase::numLocalizationScansBetweenTimes(const std::string &, const std::string &)
Attempt to numLocalizationScansBetweenTimes without a backing database
uint32_t CLMicroLocationDatabase::numRecordingScansBetweenTimes(const std::string &, const std::string &)
Attempt to numRecordingScansBetweenTimes without a backing database
CL::optional<CLMicroLocationModelTable::Entry> CLMicroLocationDatabase::getMostRecentModelForLOI(const std::string &)
Attempt to getMostRecentModelForLOI without a backing database
std::vector<std::string> CLMicroLocationDatabase::selectAllLOIs()
std::vector<CLMicroLocationMeasurementTable::Entry> CLMicroLocationDatabase::selectMeasurementsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &)
Attempt to selectMeasurementsFromRecordingUUIDs without a backing database
std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationDatabase::selectRecordingEventsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &)
CL::optional<CLMicroLocationConfigurationTable::Entry> CLMicroLocationDatabase::getMostRecentWifiChannelHistogramForLOI(const std::string &)
void CLMicroLocationDatabase::connectIfNecessary()
bool CLMicroLocationDatabase::onQueueFlushBufferedInserts()
Flushing buffered inserts (%llu)
Unable to save buffered entries into the MicroLocation database. Entries have been lost. %s
bool CLMicroLocationDatabase::freeDatabaseSpace()
Attempt to freeDatabaseSpace() without a backing database
auto CLMicroLocationDatabase::deleteDataOlderThan(std::chrono::minutes)::(anonymous class)::operator()(const std::string &) const
Deleting microlocation data older than %.3Lf days
Error getting a prepared statement
Error binding to statement for sql %{private}s
MicroLocationsDatabaseRecordingUUIDSelectionLimit
MicroLocationsDatabaseSelectionLimit
auto CLMicroLocationDatabase::flushBufferedInsertsIfAppropriate()::(anonymous class)::operator()() const
Database buffer is full. Flushing buffered entries to disk
MicroLocationsDatabaseMaxBufferedEntries
bool CLMicroLocationDatabase::onQueueFreeTableSpace() [Table = CLMicroLocationMeasurementTable]
Need to clear %llu rows from the %s table
uint32_t CLMicroLocationDatabase::onQueueNumEntriesFromTriggerTable() [Table = CLMicroLocationMeasurementTable]
Attempt to get numEntries without a backing database
MicroLocationsMeasurementTableMaxRows
!std::isnan(freePercent) && freePercent >= 0 && freePercent <= 1.0
MicroLocationsDatabaseFreeSpacePercentage
bool CLMicroLocationDatabase::onQueueFreeTableSpace() [Table = CLMicroLocationRecordingEventsTable]
uint32_t CLMicroLocationDatabase::onQueueNumEntriesFromTriggerTable() [Table = CLMicroLocationRecordingEventsTable]
MicroLocationsRecordingEventsTableMaxRows
bool CLMicroLocationDatabase::onQueueFreeTableSpace() [Table = CLMicroLocationModelTable]
uint32_t CLMicroLocationDatabase::onQueueNumEntriesFromTriggerTable() [Table = CLMicroLocationModelTable]
MicroLocationsModelTableMaxRows
bool CLMicroLocationDatabase::onQueueFreeTableSpace() [Table = CLMicroLocationConfigurationTable]
uint32_t CLMicroLocationDatabase::onQueueNumEntriesFromTriggerTable() [Table = CLMicroLocationConfigurationTable]
MicroLocationsConfigurationTableMaxRows
bool CLMicroLocationSettledStateEstimator::update(cl::chrono::CFAbsoluteTimeClock::time_point, const std::vector<CLMicroLocationProto::WiFiRssi> &)
Settled State
modeName
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationSettledStateEstimator.mm
void CLMicroLocationSettledStateEstimator::updateCurrentStateAndOptionallyCallback()
Aggregated Settled State
motionSettledState
wifiSettledState
accelSettledStateValid
accelIsPowerful
previousSettledState
currentSettledState
Low Power
High Power
Not Determined
Not Settled
Semi-Settled
Fully-Settled
MicroLocationsNumberOfWiFiSamplesInWindowThreshold
MicroLocationsAccelUpdateInterval
Data Source Cancelled at index 
fFingerprintCache optional is empty, database likely changed since data source construction
MicroLocationsMinimumDurationForFingerprint
MicroLocationsMinimumNumberOfApsForFingerprint
MicroLocationsMinimumScanTimeDifferenceForFingerprintMeasurements
MicroLocationsMaximumScanTimeDifferenceForFingerprintMeasurements
(static_cast<uint32_t>(learnerType) < static_cast<uint32_t>(LearnerType::kAlgorithmCount))
(static_cast<uint32_t>(localizerType) < static_cast<uint32_t>(LocalizerType::kAlgorithmCount))
dict.get("type", primitiveType)
(primitiveType < static_cast<uint32_t>(KernelFunctionType::kTypeCount))
sigma
dict.get("sigma", sigma)
dict.get("power", power)
(primitiveType < static_cast<uint32_t>(FingerprintDistanceFunctionType::kTypeCount))
jaccard_threshold
dict.get("jaccard_threshold", jaccard_threshold)
jaccard_scale_factor
dict.get("jaccard_scale_factor", jaccard_scale_factor)
tanimoto_base
dict.get("tanimoto_base", tanimoto_base)
(static_cast<uint32_t>(type) < static_cast<uint32_t>(LinkageFunctionType::kTypeCount))
CLLaplacianKernelFunction
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/MachineLearning/CLKernelFunction.h
sigma > 0.0
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/MachineLearning/CLDistanceFunction.h
a.size() == b.size()
CLGaussianKernelFunction
CLExponentialKernelFunction
power > 0.0
CLUniformKernelFunction
void CLMicroLocationConfigurationTable::initTable()
bool CLMicroLocationConfigurationTable::insertOrReplace(const std::vector<CLMicroLocationConfigurationTable::Entry> &)
CL::optional<CLMicroLocationConfigurationTable::Entry> CLMicroLocationConfigurationTable::getMostRecentWifiChannelHistogramForLOI(const std::string &)
Table is not valid so we can't get the most recent wifi channel histogram
AND 
ConfigurationType
bool CLMicroLocationConfigurationTable::deleteOldestRows(uint64_t)
Configuration
std::vector<CLMicroLocationConfigurationTable::Entry> (anonymous namespace)::selectEntries(CLSqliteDatabase &, const std::string &, uint32_t)
static std::enable_if_t<std::is_base_of<google::protobuf::MessageLite, ProtobufType>::value, ProtobufType> CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Configuration>::convert(sqlite3_stmt *, int32_t) [T = CLMicroLocationProto::Configuration, ProtobufType = CLMicroLocationProto::Configuration]
void CLMicroLocationMaintenance::deleteOldEntries()
Did %sdelete old data
MicroLocation database sqlite error. error: %s
void CLMicroLocationMaintenance::deleteUnneededModels()
Did %sdelete unneeded models
void CLMicroLocationMaintenance::freeDatabaseSpace()
Did %sfree database space
MicroLocationsRecordingPurgeAge
MicroLocationsNumModelsToKeepPerLOI
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationNearestNeighborAlgorithm.mm
virtual std::vector<CLMicroLocationResultInternal> CLMicroLocationNearestNeighborAlgorithm::localize(const CLMicroLocationModel &, const CLMicroLocationFingerprint &) const
MicroLocationsMaximumNearestNeighbors
!clusterDistanceThresholdVector.empty()
pruneDistanceThreshold <= *std::min_element(clusterDistanceThresholdVector.begin(), clusterDistanceThresholdVector.end())
fingerprintVector.size() > 0
MicroLocationsClusterDistanceThresholdVector
MicroLocationsPruneDistanceThreshold
MicroLocationsLinkageFunction
virtual CLMicroLocationModel CLMicroLocationKMeansAlgorithm::learn(const CLMicroLocationFingerprintVector &, CLMicroLocationProto::Model::ModelType) const
error in mean shift algorithm
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationKMeansAlgorithm.mm
error in kmeans algorithm
MicroLocationsUseKMeansClusterCenters
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/proto/gen-cpp/microlocation.pb.cc
CHECK failed: (&from) != (this): 
CLMicroLocationProto.WiFiRssi
CLMicroLocationProto.WiFiRange
CLMicroLocationProto.ATVAirplayBluetoothRssi
CLMicroLocationProto.HomeKitBluetoothRssi
CLMicroLocationProto.Measurement
CLMicroLocationProto.Fingerprint
CLMicroLocationProto.ClusterRecordings
CLMicroLocationProto.Model
CLMicroLocationProto.AccelerometerXYZ
CLMicroLocationProto.LocalizationRequest
CLMicroLocationProto.AppLaunch
CLMicroLocationProto.SiriInvocation
CLMicroLocationProto.BacklightOn
CLMicroLocationProto.BatteryChargerConnected
CLMicroLocationProto.StepCount
CLMicroLocationProto.ForcedRecording
CLMicroLocationProto.FirstWakeOfDay
CLMicroLocationProto.HomeKitAccessory
CLMicroLocationProto.HomeKitScene
CLMicroLocationProto.RecordingEvent
CLMicroLocationProto.ChannelAndCount
CLMicroLocationProto.WifiHistogram
CLMicroLocationProto.Configuration
set_devicetype
::CLMicroLocationProto::HomeKitBluetoothRssi_DeviceType_IsValid(value)
set_hapversion
::CLMicroLocationProto::HomeKitBluetoothRssi_HAPVersion_IsValid(value)
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/google/protobuf/repeated_field.h
CHECK failed: (index) < (size()): 
set_generationalgorithm
::CLMicroLocationProto::Model_GenerationAlgorithm_IsValid(value)
set_modeltype
::CLMicroLocationProto::Model_ModelType_IsValid(value)
set_type
::CLMicroLocationProto::ConfigurationType_IsValid(value)
down_cast
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/google/protobuf/stubs/common.h
f == NULL || dynamic_cast<To>(f) != NULL
static CLMicroLocationModel CLMicroLocationModel::fromProtobuf(const CLMicroLocationProto::Model &)
The protobuf fingerprint does not have a valid cluster label uuid
The protobuf fingerprint is using a deprecated uint64 cluster label
The protobuf fingerprint does not have a cluster identifer
The protobuf cluster recording does not have a valid cluster label uuid
The protobuf cluster recording does not have a valid recording uuid
newClusterIterAndBool.second
MicroLocationsFingerprintDistanceFunction
{"type" : 2, "jaccard_threshold" : 0.75, "jaccard_scale_factor" : 20.0}
MicroLocationsClusterPersistenceDistanceThreshold
MicroLocationsUseClusterSizeRatio
MicroLocationsClusterSizeRatio
MicroLocationsClusterSizeThreshold
void CLMicroLocationLearner::learnFromModelType(CLMicroLocationLearner::ShouldCancelFunction, CLMicroLocationProto::Model::ModelType)
Tried to run learning, but learning is disabled
Learning
LOI UUID
ModelType
Fingerprint vector empty for model type %d
model
numClusters
modelFingerprint
clusterUUID
Learning cancelled
Model generated successfully for type %d
Model was not generated properly. Inserted: %d, Flushed: %d
No models were generated for model type %d
MicroLocationsEnableLearning
MicroLocationsNumberOfModelIterations
MicroLocationsLearnerAlgorithm
MicroLocationsFingerprintDataSource
bool CLMicroLocationDatabase::insertOrReplace(std::vector<TableEntry>) [TableEntry = CLMicroLocationModelTable::Entry]
bool CLMicroLocationDatabase::onQueueFreeSpaceIfFull() [Table = CLMicroLocationModelTable]
void CLMicroLocationAnalytics::analyzeWiFiChannels(ShouldCancelFunction)
analyzing WiFi channels
no LOIs found
found LOIs
Wifi Channel Histogram generated successfully for type
Wifi Channel Histogram was not generated properly. Inserted: %d, Flushed: %d
MicroLocationsNumberDaysToAnalyzeWiFiChannels
bool CLMicroLocationDatabase::insertOrReplace(std::vector<TableEntry>) [TableEntry = CLMicroLocationConfigurationTable::Entry]
bool CLMicroLocationDatabase::onQueueFreeSpaceIfFull() [Table = CLMicroLocationConfigurationTable]
com.apple.mobileme.fmip1
com.apple.gamecenter
com.apple.facetime
com.apple.camera
com.apple.mobiletimer
com.apple.purplebuddy
com.apple.Preferences
com.apple.MobileAddressBook
com.apple.VoiceMemos
com.apple.Bridge
com.apple.MobileStore
com.apple.TapToRadar
com.apple.mobilesafari
com.apple.mobilemail
com.apple.MobileSMS
com.apple.quicklook.quicklookd
com.apple.airplaydiagnostics.app.EmbeddedAirPlayDiagnostics
com.apple.tips
void CLMicroLocationMeasurementTable::initTable()
bool CLMicroLocationMeasurementTable::insertOrReplace(const std::vector<Entry> &)
RecordingUUID
 in 
(SELECT 
EventType
std::vector<CLMicroLocationMeasurementTable::Entry> CLMicroLocationMeasurementTable::selectLearningMeasurementsByLOIBetweenTimes(const std::string &, const std::string &, const std::string &, uint32_t)
std::vector<CLMicroLocationMeasurementTable::Entry> CLMicroLocationMeasurementTable::selectMeasurementsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &, uint32_t)
!recordingUUIDs.empty()
bool CLMicroLocationMeasurementTable::deleteOldestRows(uint64_t)
ScanMCTimestamp
uint32_t CLMicroLocationMeasurementTable::numLocalizationScansBetweenTimes(const std::string &, const std::string &)
Table is not valid so we can't numLocalizationScansBetweenTimes
SELECT COUNT(DISTINCT 
uint32_t CLMicroLocationMeasurementTable::numRecordingScansBetweenTimes(const std::string &, const std::string &)
Table is not valid so we can't numRecordingScansBetweenTimes
ScanCFTimestamp
std::vector<CLMicroLocationMeasurementTable::Entry> (anonymous namespace)::selectEntries(CLSqliteDatabase &, const std::string &, uint32_t)
signedValue >= 0
static std::enable_if_t<std::is_base_of<google::protobuf::MessageLite, ProtobufType>::value, ProtobufType> CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Measurement>::convert(sqlite3_stmt *, int32_t) [T = CLMicroLocationProto::Measurement, ProtobufType = CLMicroLocationProto::Measurement]
signedValue <= std::numeric_limits<IntType>::max()
com.apple.locationd.MicroLocation-localizer
fQ != nullptr
LocalizationScan
void CLMicroLocationLocalizer::reloadModel(CL::optional<std::string>)
Told to reload the model for the current LOI but we don't have a current LOI. Ignoring request
{ModelAndLOI={CLMicroLocationModel={vector<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid>, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}{__compressed_pair<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> *, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}}}ii{unordered_map<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> >, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<std::__1::pair<const boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={__hash_table<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true>, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true>, std::__1::allocator<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true> >=f}}}}{unordered_set<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={__hash_table<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>, std::__1::allocator<std::__1::__hash_node<boost::uuids::uuid, void *> > >={__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>=^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<boost::uuids::uuid> >=L}{__compressed_pair<float, std::__1::equal_to<boost::uuids::uuid> >=f}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}4@?0
void CLMicroLocationLocalizer::reloadModel(CLMicroLocationLocalizer::ModelAndLOI (^)())_block_invoke
Reloaded a new model for LOI: %s
Told to reload the model but it is invalid. Not changing current model
LocalizationProcessing
auto CLMicroLocationLocalizer::localize(std::unique_ptr<CLMicroLocationFingerprint::MultiSet>)::(anonymous class)::operator()() const
Localizer has invalid model. Returning only the null microlocation
Localizer doesn't have any WiFi measurements to use. Returning a uniform distribution across all known microlocations
testFingerprint
microlocation probability vector should sum to 1.0
probabilitySum
MicroLocationsLocalizerAlgorithm
auto CLMicroLocationLocalizer::localize(std::unique_ptr<CLMicroLocationFingerprint::MultiSet>)::(anonymous class)::operator()()::(anonymous class)::operator()(type-parameter-0-0, const type-parameter-0-1 &) const
microlocation probability should be non-negative
(anonymous namespace)::TimeProfile::~TimeProfile()
TimeProfile
durationSecs
static_cast<uint32_t>(type) < static_cast<uint32_t>(DataSourceType::kTypeCount)
com.apple.locationd.
void CLMicroLocationXPCActivityHelpers::XPCActivity::setState(xpc_activity_state_t)
Unable to mark activity as %ld. current state is %ld
auto CLMicroLocationXPCActivityHelpers::XPCRegistration::XPCRegistration(std::string, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, XPCActivityHandler)::(anonymous class)::operator()(xpc_activity_t) const
Checking in for %s
bool CLMicroLocationWiFiSettledStateSequentialEstimator::update(cl::chrono::CFAbsoluteTimeClock::time_point, const std::vector<CLMicroLocationProto::WiFiRssi> &)
prunedWifiMap size, %lu,currentTime, %f
access point results, t, %f, mac, 0x%012llx, exp, %f, std, %f, valid Samples, %d, invalid Samples, %d, settled Feature, %.2f
access point results, overall Duty Cycle, %f
Settled State, %hu, PassCount,%d, measuredOverallDutyCycle,%f
Removing 0x%012llx at time:%f from time %f
configuration.type() == CLMicroLocationProto::WIFI_HISTOGRAM
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationFingerprintDistanceFunction.mm
double CLMicroLocationFingerprintDistanceFunction::computeDifference(const CLMicroLocationProto::Measurement &, const CLMicroLocationProto::Measurement &)
Computing distances between datatype %d not supported
ii >= 0 && ii < size()
static CLMicroLocationProto::Measurement CLMicroLocationProtobufHelper::setMeasurementValue(const CLMicroLocationProto::Measurement &, double)
did not expect measurement type %d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationProtobufHelper.mm
static double CLMicroLocationProtobufHelper::getMeasurementValue(const CLMicroLocationProto::Measurement &)
static double CLMicroLocationProtobufHelper::getMeasurementSentinelValue(const CLMicroLocationProto::Measurement &)
model.isValid()
MicroLocationsNullSpaceDistanceReductionFunction
MicroLocationsNullSpaceKernelFunction
{"type" : 2, "sigma" : 12.5, "power" : 3.0}
(static_cast<uint32_t>(type) < static_cast<uint32_t>(ReducerFunctionType::kTypeCount))
minimumValueSorted
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/MachineLearning/CLReducerFunction.h
container.size()>0
minimumValue
meanValue
maximumValueSorted
maximumValue
firstQuartileValueSorted
medianValueSorted
truncatedMeanValueSorted
numElements>0
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationRecorder.mm
void CLMicroLocationRecorder::recordMeasurementBatch(CLMicroLocationRecorder::ScanMetadata, const std::vector<CLMicroLocationProto::Measurement> &)
void CLMicroLocationRecorder::recordEvent(const CLMicroLocationProto::RecordingEvent &)
bool CLMicroLocationDatabase::insertOrReplace(std::vector<TableEntry>) [TableEntry = CLMicroLocationRecordingEventsTable::Entry]
Can't insert because the database is invalid
bool CLMicroLocationDatabase::onQueueFreeSpaceIfFull() [Table = CLMicroLocationRecordingEventsTable]
%s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem
bool CLMicroLocationDatabase::insertOrReplace(std::vector<TableEntry>) [TableEntry = CLMicroLocationMeasurementTable::Entry]
bool CLMicroLocationDatabase::onQueueFreeSpaceIfFull() [Table = CLMicroLocationMeasurementTable]
newState == ScanningState::RequestingRTLOI
newState == ScanningState::Spectating
static_cast<bool>(currentRTLOI())
newState == ScanningState::Localizing || newState == ScanningState::Recording
void CLMicroLocationLogic::State::advance(CLMicroLocationLogic::State::ScanningState)
Advanced from %s to %s
void CLMicroLocationLogic::State::reverse()
Reversed from %s to %s
void CLMicroLocationLogic::State::updateWifiScanStrategiesIfNecessary()
Updating localizing scan strategy
Updating recording scan strategy
NotScanning
RequestingRTLOI
Spectating
Localizing
Recording
void CLMicroLocationLogic::reloadSettings()
Settings updated so updating wifi strategies and checking enabled flags
void CLMicroLocationLogic::startProvidingMicroLocations()
MicroLocations are not enabled, so it won't start
Starting MicroLocation provider
Attempting to start MicroLocations but we're already started. In state '%s'
void CLMicroLocationLogic::stopProvidingMicroLocations()
Stopping MicroLocations
bool CLMicroLocationLogic::registerForNotification(std::chrono::steady_clock::time_point, const CLMicroLocationNotifier_Type::Notification &)
Client is registering for MicroLocations but we have been set to disable. Ignoring registration.
bool CLMicroLocationLogic::canLocalize()
Requested to localize but there aren't any interested clients. Ignoring request
Notifier is not in a state where it can localize. It's in %s. Ignoring request
Got request to localize but we don't know what LOI we're in so ignoring the request
void CLMicroLocationLogic::startSpectating()
Starting spectating mode
No LOI set so not transitioning to spectating
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationLogic.mm
void CLMicroLocationLogic::startLocalizing(const CLMicroLocationProto::LocalizationRequest &)
Localization started
void CLMicroLocationLogic::stopLocalizing()
Localization stopped
void CLMicroLocationLogic::startRecordingIfAppropriate(const CLMicroLocationProto::RecordingEvent &)
Not recording since we're in low power mode
Received a recording trigger but we're not settled
void CLMicroLocationLogic::startRecording(const CLMicroLocationProto::RecordingEvent &)
Recording started
void CLMicroLocationLogic::stopRecording()
Rolling back recording because we weren't fully settled
Recording stopped
void CLMicroLocationLogic::setCurrentRTLOIString(CL::optional<boost::uuids::uuid>, CL::optional<std::string>)
Got an LOI from an old request. Request ID: %s. Current request ID: %s
Setting the current LOI to %s
Not setting the LOI to %s since we're in %s state. Current LOI is %s
!rtLOI
void CLMicroLocationLogic::onATVDevices(const std::vector<CLATVAirplayDeviceInternal> &)
Receiving ATV notifications but we shouldn't be subscribed to them! State %{public}s
void CLMicroLocationLogic::onResetLocationData()
Got request to reset Location data. Dropping microlocation tables
void CLMicroLocationLogic::onForegroundApp(cl::chrono::CFAbsoluteTimeClock::time_point, std::string)
appLaunch
void CLMicroLocationLogic::onForceRecordNotification(cl::chrono::CFAbsoluteTimeClock::time_point)
Force Recording received
void CLMicroLocationLogic::onFirstWakeOfDay(cl::chrono::CFAbsoluteTimeClock::time_point)
First Wake of Day received
void CLMicroLocationLogic::onHomeKitDevices(const std::vector<CLHomeKitProvider_Type::HomeKitDevice> &)
Receiving homekit notifications but we shouldn't be subscribed to them! State %{public}s
void CLMicroLocationLogic::onHomeKitScene(cl::chrono::CFAbsoluteTimeClock::time_point, const CLMicroLocationProto::HomeKitScene &)
HomeKit Scene
scene
void CLMicroLocationLogic::onHomeKitAccessory(cl::chrono::CFAbsoluteTimeClock::time_point, const CLMicroLocationProto::HomeKitAccessory &)
HomeKit Accessory
virtual void CLMicroLocationLogic::onSettledStateChanged(CLMicroLocationSettledState)
Aggregated settled state
previousState
currentState
void CLMicroLocationLogic::onModelGenerated(CLMicroLocationProto::Model::ModelType)
Model has been regenerated. Telling localizer to reload
Model has been regenerated for type %d. Localizer does not currently support multiple model types.
void CLMicroLocationLogic::onMicroLocationsLocalized(const std::vector<CLMicroLocationResultInternal> &, dispatch_block_t)
Localizer results
microlocation results
void CLMicroLocationLogic::reloadWifiChannelHistogram()
Don't have a current LOI so not updating the current wifi channel histogram
Don't have a current wifi channel histogram for this LOI %s
Reloaded wifi channel histogram
void CLMicroLocationLogic::updateEnabled()
Enabled state: microlocations defaults enabled: %d; location services enabled: %d; any system service enabled: %d; overall enabled: %d
MicroLocations have been disabled. Clients will no longer get notifications until we are enabled again.
MicroLocations are now re-enabled. Clients should begin getting notifications again
MicroLocationsLocalizingDuration
MicroLocationsRecordingDuration
set_localizationrequesttype
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/proto/gen-cpp/microlocation.pb.h
::CLMicroLocationProto::LocalizationRequestType_IsValid(value)
MicroLocationsEnableStationaryRecordingPrerequisite
MicroLocationsHomeKitScanDutyCycle
set_datatype
::CLMicroLocationProto::DataType_IsValid(value)
MicroLocationsMaximumAgeForValidity
auto CLMicroLocationLogic::onATVDevices(const std::vector<CLATVAirplayDeviceInternal> &)::(anonymous class)::operator()() const
AppleTV detected
device
set_recordingeventtype
::CLMicroLocationProto::RecordingEventType_IsValid(value)
auto CLMicroLocationLogic::onHomeKitDevices(const std::vector<CLHomeKitProvider_Type::HomeKitDevice> &)::(anonymous class)::operator()() const
HomeKit accessory detected
MicroLocationsEnabled
/dev/urandom
sha1 too many bytes
void boost::uuids::detail::sha1::process_byte(unsigned char)
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/uuid/sha1.hpp
Not enough elements in call to seed.
operator*
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/smart_ptr/shared_ptr.hpp
px != 0
nsObject != nullptr && [nsObject isKindOfClass:[NSDictionary class]]
size_t CLMicroLocationFingerprint::HashMeasurement::operator()(const CLMicroLocationProto::Measurement &) const
This measurement is not tied to a unique id so it can't be used in a hash table
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationFingerprint.mm
bool CLMicroLocationFingerprint::PredicateMeasurement::operator()(const CLMicroLocationProto::Measurement &, const CLMicroLocationProto::Measurement &) const
CLMicroLocationFingerprint::CLMicroLocationFingerprint(const CLMicroLocationProto::Fingerprint &)
The protobuf fingerprint does not have a valid recording uuid
CLMicroLocationFingerprint::CLMicroLocationFingerprint(const MultiSet &, const CL::optional<boost::uuids::uuid> &)
This fingerprint does not have any measurements, you have probably done something wrong
minimumScanTimeDifference < maximumScanTimeDifference
fingerprintVector.size() <= 1
static std::vector<CLMicroLocationFingerprint> CLMicroLocationFingerprint::convertDoubleVectorToFingerprint(const std::vector<std::vector<double> > &, const CLMicroLocationFingerprint::Set &)
void (anonymous namespace)::WeightedAccumulator::accumulate(const CLMicroLocationProto::Measurement &)
Accumulating datatype %d not supported
double (anonymous namespace)::WeightedAccumulator::mean() const
fAccumulatedWeight (%f) is not positive
void (anonymous namespace)::reduce(CLMicroLocationProto::Measurement &, double)
Reducing datatype %d not supported
void CLMicroLocationRecordingEventsTable::initTable()
bool CLMicroLocationRecordingEventsTable::insertOrReplace(const std::vector<Entry> &)
Failed to bind on INSERT OR REPLACE with sql %{private}s
std::vector<boost::uuids::uuid> CLMicroLocationRecordingEventsTable::selectAllRecordingUUIDsForLearningMeasurementsByLOI(const std::string &, CLMicroLocationProto::Model::ModelType, uint32_t)
No recording events for model type %d
std::vector<std::string> CLMicroLocationRecordingEventsTable::selectAllLOIs(uint32_t)
Table is not valid so we can't select all LOIs
std::vector<CLMicroLocationRecordingEventsTable::Entry> CLMicroLocationRecordingEventsTable::selectRecordingEventsFromRecordingUUIDs(const std::vector<boost::uuids::uuid> &, uint32_t)
bool CLMicroLocationRecordingEventsTable::deleteOldestRows(uint64_t)
ReceivedTimestamp
Event
std::vector<CLMicroLocationRecordingEventsTable::Entry> (anonymous namespace)::selectEntries(CLSqliteDatabase &, const std::string &, uint32_t)
static std::enable_if_t<std::is_base_of<google::protobuf::MessageLite, ProtobufType>::value, ProtobufType> CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::RecordingEvent>::convert(sqlite3_stmt *, int32_t) [T = CLMicroLocationProto::RecordingEvent, ProtobufType = CLMicroLocationProto::RecordingEvent]
MicroLocationsRecordingEventsForAllEventsModel
CLMicroLocationFingerprintStdVectorSource::CLMicroLocationFingerprintStdVectorSource(CLMicroLocationFingerprintDataSources::ShouldCancelFunction, const std::vector<boost::uuids::uuid> &, CLMicroLocationDatabase &)
Data source cancelled learning
void CLMicroLocationModelTable::initTable()
Database is not connected so we can't intialize our table
Failed to create table: %s
Sucessfully created table if necessary: %s
bool CLMicroLocationModelTable::insertOrReplace(const std::vector<Entry> &)
Table is not valid so we can't insert or replace
Failed to bind on INSERT OR REPLACE for sql %{private}s
Failed to execute statement. %s
Table is not valid so we can't select all
CL::optional<CLMicroLocationModelTable::Entry> CLMicroLocationModelTable::getMostRecentModelForLOI(const std::string &)
Table is not valid so we can't get the most recent model
RTLOI
bool CLMicroLocationModelTable::deleteUnneededModels(const std::vector<std::string> &, uint32_t)
Table is not valid so we can't deleteUnneededModels()
Keeping %d models per LOI per model type
ModelUUID
 NOT IN (
bool CLMicroLocationModelTable::deleteOldestRows(uint64_t)
Table is not valid so we can't deleteOldestRows
 IN (
Model
RowId
SELECT * FROM (
 DESC LIMIT 
) ORDER BY 
std::vector<CLMicroLocationModelTable::Entry> (anonymous namespace)::selectEntries(CLSqliteDatabase &, const std::string &, uint32_t)
Error converting database values. %s
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationDatabaseColumns.h
static auto CLMicroLocationDatabaseColumns::convert_from_sql<std::__1::basic_string<char> >::convert(sqlite3_stmt *, int32_t)
static std::enable_if_t<std::is_base_of<google::protobuf::MessageLite, ProtobufType>::value, ProtobufType> CLMicroLocationDatabaseColumns::convert_from_sql<CLMicroLocationProto::Model>::convert(sqlite3_stmt *, int32_t) [T = CLMicroLocationProto::Model, ProtobufType = CLMicroLocationProto::Model]
Unable to parse protobuf
auto CLMicroLocationModelTable::deleteUnneededModels(const std::vector<std::string> &, uint32_t)::(anonymous class)::operator()(const std::string &) const
VALUES (
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationTimeUtils.mm
CFAbsoluteTime CLMicroLocationTimeUtils::getTimeDeltaDaysAgo(NSDate *, int32_t)
double CLLogNormalNormalHypothesisTestUnlockEstimator::getScaleFactor(size_t, double) const
Error in numberOfMeasurements,%zu
Error in rangeIndex calculation, rangeIndex,%d
Error in index calculation, tableIndex,%d
%@ %@
entryTime
exitTime
hasEntryTime
Td,N,V_entryTime
hasExitTime
Td,N,V_exitTime
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/PeerRanging/CLPeerRangingUnlockDecision.mm
UnlockResult CLPeerRangingUnlockDecision::shouldUnlock(const std::vector<double> &)
00000000-0000-0000-0000-000000000000
bool CLSwimDataStore::reloadStateFromPersistentStore()
Historical-Distributions, loiUuid, %s, style, %d, poolLength, %f, median, %f, mean, %f, stddev, %f, min, %f, max, %f, samples, %d, prctile10, %f, prctile90, %f, uuid, %s
Historical median turns per session, median, %f, Nsessions, %lu
bool CLSwimDataStore::setFirstEntry()
Set first session entry
bool CLSwimDataStore::loadedStateFromPersistentStore()
Did not successfully load state from db!
bool CLSwimDataStore::setupSessionPersistence()
Cannot yet set first session entry
void CLSwimDataStore::setCurrentLOI(NSArray *)
Got %d LOIs.
Checking LOI with id '%s'.
Found distributions for LOI with id '%s'.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Swimming/CLSwimDataStore.mm
bool CLSwimDataStore::addTurn(CLMotionTypeTimestamp, CLSwimDetectedTurn &)
void CLSwimDataStore::updateDistribution(CLSwimStyleType, CLSwimStrokesPerTurnDistribution)
bool CLSwimDataStore::addLap(const CLSwimDetectedLap &)
void CLSwimDataStore::persistSwimEntry(const CLSwimEntry &)
Failure to store lap due to database inaccessibility.
kSYDictionaryObjectSyncIDKey
-[CLTileSyncSyChange setChangeType:]
@GtsSync, Unexpected change type, %{public}ld, set
objectIdentifier
T@"NSString",R,N
sequencer
changeType
Ti,R,N
syncKey
T@"NSString",&,V_syncKey
properties
T@"NSDictionary",&,V_properties
Tc,V_aud
-[CLTileSyncSySerializer dataFromChange:]
@GtsSync, CsSerial, dataFromChange, isKind, %{public}d
-[CLTileSyncSySerializer changeFromData:ofType:]
@GtsSync, CsSerial, changeFromData
-[CLTileSyncDelegate service:startSession:error:]
@GtsFlow, CS, startSession, 2
-[CLTileSyncDelegate service:sessionEnded:error:]
@GtsFlow, CS, endSession, 6
-[CLTileSyncDelegate serviceDidPairDevice:]
@GtsSync, CsService, serviceDidPairDevice, state, %{public}c
-[CLTileSyncDelegate serviceDidUnpairDevice:]
@GtsSync, CsService, serviceDidUnpairDevice, state, %{public}c
-[CLTileSyncDelegate service:encounteredError:context:]
@GtsSync, CsError, 2, service, %{public}s, underlying, %{public}s
-[CLTileSyncDelegate syncSession:enqueueChanges:error:]
@GtsSync, CsSession, enqueue failed
@GtsFlow, CS, enqueueComplete, 4
-[CLTileSyncDelegate syncSession:applyChanges:completion:]
@GtsSync, CsSession, applyChanges, %{public}lu
@GtsSync, CsSession, More than 1 incoming change, %{public}lu
-[CLTileSyncDelegate syncSession:didEndWithError:]
@GtsSync, CsError, 0, didEndWithError, %{public}s, underlying, %{public}s
@GtsFlow, CS, sessionDidEnd, 5, error, %{public}d, synctrap, %{public}d
@GtsFlow, PS, syncDidCompleteTx, 2
-[CLTileSyncDelegate syncSession:resetDataStoreWithError:]
@GtsSync, CsSession, resetDataStoreWithError
-[CLTileSyncDelegate service:willSwitchFromPairingID:toPairingID:]
@GtsSync, CsService, willSwitchPairing, old, %{public}s, new, %{public}s
-[CLTileSyncDelegate service:didSwitchFromPairingID:toPairingID:]
@GtsSync, CsService, didSwitchPairing, old, %{public}s, new, %{public}s
-[CLTileSyncDelegate syncCoordinator:beginSyncSession:]
@GtsSync, PsCoord, beginSyncSession, %{public}lu
Initial
Reunion
-[CLTileSyncDelegate syncCoordinator:beginSyncSession:]_block_invoke
@GtsFlow, PS, handleSyncTrapTurn%s, 1
@GtsFlow, PS, syncDidCompleteTx, 2, skipped
-[CLTileSyncDelegate syncCoordinator:didInvalidateSyncSession:]
@GtsSync, PsCoord, didInvalidateSyncSession, %{public}d
@GtsFlow, PS, didInvalidateSession, 3, restriction, %{public}d
-[CLTileSyncDelegate syncCoordinatorDidChangeSyncRestriction:]
@GtsSync, PsCoord, syncCoordinatorDidChangeSyncRestriction, %{public}d
-[CLTileSyncDelegate syncCoordinatorDidChangeSyncRestriction:]_block_invoke
@GtsSync, PsCoord, RestrictionUnknown, %{public}ld
-[CLTileSyncDelegate initialSyncStateObserver:initialSyncDidCompleteForPairingIdentifier:]
@GtsSync, PsObserver, initialSyncDidCompleteForPairingID
-[CLTileSyncDelegate initialSyncStateObserver:syncDidCompleteForPairingIdentifier:]
@GtsSync, PsObserver, syncDidCompleteForPairingID
@GtsFlow, PS, syncDidCompleteRx, 4
-[CLTileSyncDelegate initialSyncStateObserver:syncDidResetForPairingIdentifier:]
@GtsSync, PsObserver, syncDidResetForPairingID
-[CLTileSyncDelegate initialSyncStateObserverClientCanRetryFailedRequests:]
@GtsSync, PsObserver, initialSyncStateObserverClientCanRetryFailedRequests
void CLTileSyncAWD::loadMetrics(CFAbsoluteTime)
GtsAwd, plist, error, load, %lu
GtsAwd, plist, clear, %.1f, thresh, %.0f, last, %.1f
GtsAwd, plist, error, time, %.1f, now, %.1f
loadcache
void CLTileSyncAWD::startSession(CFAbsoluteTime)
GtsAwd, started, %d
void CLTileSyncAWD::tilesRequested(CFAbsoluteTime, int)
GtsAwd, request, tiles, %d, total, %d, sessions, %d
void CLTileSyncAWD::tileSynced(CFAbsoluteTime, int)
GtsAwd, serialized, %d, totalmb, %.1f
report
void CLTileSyncAWD::weekLongLogging(const char *, CFAbsoluteTime)
GtsAwd, %s, sessions, %d, empty, %d, completed, %d, errored, %d, requested, %d, synced, %d, sizemb, %.1f, week, %d, %.1f, sinceweekly, %0.1f, reset, %d, lastSave, %0.1f, %0.1f
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLTileSyncManager.mm
CLTileSyncManager::CLTileSyncManager(CLITilesManager *, CLSilo *, BasicMutex *, std::unique_ptr<IExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)
ManifestRate
QwsPeriod
@GtsInit, CG, %{public}d, %{public}d, preDay, %{public}d, rate, %{public}0.0f, state, %{public}d, %{public}d, %{public}c
CLTileSyncManager::CLTileSyncManager(CLITilesManager *, CLSilo *, BasicMutex *, std::unique_ptr<IExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)_block_invoke
@GtsTimer, fired, %{public}s
Timer
virtual CLTileSyncManager::~CLTileSyncManager()
@GtsMgr, dtor
com.apple.pairedsync.locationd
bool CLTileSyncManager::psInitialize()
@GtsInit, PsObjects failed, C, %{public}d, O, %{public}d
com.apple.private.alloy.location.wifitilesync
bool CLTileSyncManager::csInitialize()
@GtsInit, CsObjects failed
void CLTileSyncManager::csRelease()
@GtsMgr, release
void CLTileSyncManager::csResume()
@GtsSync, CsError, 1, resume, %{public}s
bool CLTileSyncManager::handleSyncTrapTurn(bool)
@GtsSync, since last switched, hours, %{public}0.1f, days, %{public}0.1f
@GtsMgr, skip SyncTrap, days inactive, %{public}0.1f, thresh, %{public}0.1f, pending, %{public}d
@GtsFlow, CS, setNeedsReset, 1, BeginPair, state, %{public}c, %{public}c, queuewas, %{public}ld, inactive, %{public}0.1f
void CLTileSyncManager::handleRestrictionChange(bool)
@GtsSync, PsCoord, RestrictionLimitPush
@GtsSync, PsCoord, RestrictionNone
@GtsMgr, restriction, state was, %{public}c, now, %{public}c, restricted, %{public}d
CS Session
Control
Request
GizmoReq
NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)
@GtsMgr, Mismatching keys, syncId, %{public}s, request, %{public}s
@GtsMgr, Crossing sessions, %{public}c, WARNING
@GtsManif, CompTx, %{public}ld
@GtsMgr, Unexpected Companion startSession flow, type, %{public}d, preDaytona, %{public}d
@GtsSync, CsService, startSession, %{public}c, mdin, %{public}ld, queue, %{public}ld, mdout, %{public}ld
NSDictionary *CLTileSyncManager::handleStartSessionGizmo(NSDictionary *)
@GtsManif, GizRx, %{public}ld, tilesInMap, %{public}ld
@GtsManif, GizTx, %{public}ld
@GtsMgr, Unexpected Gizmo startSession flow, type, %{public}c, hasIn, %{public}d, WARNING
CsErrorShort
CsErrorLong
bool CLTileSyncManager::handleSessionDidEnd(bool)
@GtsMgr, handleSessionDidEnd, error, %{public}d, %{public}d, change, %{public}c, pending, %{public}d, psActive, %{public}d, syncState, %{public}c, queue, %{public}ld, exchanged, %{public}d
NSDictionary *CLTileSyncManager::formRequestFromMetadata(NSDictionary *)
@GtsManif, nil request
@GtsManif, BadId, formG, %{public}s
Assert Failed, %s, %d, %s
locationd assert: %s, %d, %s
@GtsManif, GizRequest, %{public}s, found, %{public}d, cggen, %{public}0.1f, %{public}0.1f, refresh, %{public}d, ReqSize, %{public}ld
NSDictionary *CLTileSyncManager::requestForManifest()
@GtsManif, GizMetaRequest
std::tuple<bool, bool, bool> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)
@GtsManif, CompRx, %{public}ld, queue, %{public}lu, metadata
@GtsManif, BadId, enqueueC, %{public}s
@GtsManif, CompReply, %s, have, %{public}d
@GtsFlow, CS, metadataX, 3
@GtsFlow, CS, enqueueChanges, 3, Manifest, %{public}c
@GtsFlow, CS, enqueueChanges, 3, TileData, %{public}c, queue, %{public}ld
@GtsSync, CsSession, %{public}c, llsw, %{private}.2lf, %{private}.2lf, queue, %{public}ld
@GtsFlow, CS, enqueueChanges, 3, SyncTrap
@GtsFlow, CS, enqueueChanges, 3, Unexpected change type, %{public}c
@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d
std::tuple<bool, bool, bool> CLTileSyncManager::handleEnqueueChangesGizmo(NSDictionary *)
void CLTileSyncManager::handleApplyChanges(CLTileSyncSyChange *)
@GtsMgr, change, syncId, %{public}s, type, %{public}ld, preDaytona, %{public}d
@GtsCont, change with no data!!!
void CLTileSyncManager::handleSyncTrapEnd()
@GtsMgr, SyncTrapEnd, oldstate, %{public}c, preDay, %{public}d
ClosePS
void CLTileSyncManager::handleWillSwitch(NSUUID *)
@GtsMgr, willSwitch, new, %{public}s, days inactive, %{public}0.1f
void CLTileSyncManager::handlePairingSwitch(bool, bool)
@GtsMgr, handlePairSwitch, ids ,%{public}d, %{public}d, resume/suspend, %{public}c, state, %{public}c, %{public}c, restricted, %{public}d, inactive, %{public}0.1f
void CLTileSyncManager::handleServiceError()
@GtsSync, CsSync, handleServiceError, %{public}c
Indexed
void CLTileSyncManager::handleFirstUnlockGizmo()
@GtsGiz, reclearing
void CLTileSyncManager::handleNearbyCompanion()
@GtsMgr, Nearby, queue, %{public}lu, sessionErrors, %{public}d
Nearby
void CLTileSyncManager::handleToggleResetCompanion(int)_block_invoke
@GtsCont, ToggleReset, %{public}d, queuewas, %{public}ld
void CLTileSyncManager::handleToggleResetGizmo(int)
@GtsGiz, reclear pending
Toggle
Reset
virtual void CLTileSyncManager::handleTileAdded(const char *, double, double)
@GtsCont, %{public}s, llsw, %{private}.2lf, %{private}.2lf
void CLTileSyncManager::addTileSync(CLTileFile *)
@GtsPair, skipevent, add, blocking sync state, %{public}c
@GtsCont, replaceadd, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld
@GtsCont, add, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld, current, {public}%d
void CLTileSyncManager::setManifestFire(const char *, CFTimeInterval)
@GtsTimer, nextfire, %{public}.0f, %{public}s, state, %{public}c
virtual void CLTileSyncManager::sendCompanionManifest(const char *)
@GtsManif, return, not companion
@GtsManif, check, %{public}s, state, %{public}d, %{public}c, %{public}lu, sync, %{public}lu
@GtsManif, skip, %{public}s, state, %{public}d, sync, %{public}d
@GtsFlow, CS, setHasChanges, 1, SendManifest
void CLTileSyncManager::createManifestInSyChange(bool)
@GtsManif, PrepTx, %{public}s, tiles, %{public}lu, %d, currentOnly, %{public}d
@GtsManif, entry, %{private}s, gentime, %{public}.1f
sendEventToGizmo
bool CLTileSyncManager::sendEventToGizmo(TileId &)
@GtsCont, addlost, llsw, %{private}.2lf, %{private}.2lf
TILE_SYNC
Unable to send tile. It is missing.
tileId
v12@?0^v4I8
@GtsComp, add, llsw, %{private}.2lf, %{private}.2lf, tile_x, %{private}d, tile_y, %{private}d, tilesize, %{public}ld, queue, %{public}lu
void CLTileSyncManager::processGizmoRequestFromManifest(NSArray *)
@GtsManif, CompRx, %{public}d, queue, %{public}lu
@GtsManif, BadId, gizmoRequestC, %{private}s, %{public}d, of, %{public}lu
@GtsManif, CompReply, %{private}s, have, %{public}d
@GtsMgr, CsSync, setHasChanges, %{public}d, %{public}lu
void CLTileSyncManager::sendGizmoManifestRequest(const char *)
@GtsManif, skip, %{public}s, state, %{public}c, indexed, %{public}d, ls, %{public}d
@GtsManif, GizmoRequest, %{public}s
void CLTileSyncManager::addTile(const TileId &, NSData *, const CFAbsoluteTime &)
@GtsLock, drop add on LS off
@GtsSync, drop older add, timestamp, %{public}0.1f, toggle/reset, %{public}0.1f
@GtsError, Adding non-Wifi tile, %{public}d
Failed writing tile to file.
filePath
fIndexedAvailableFiles
Successfully wrote tile file to disk.
Deleting added wifi tile.
filepath
Failed creating wifi tile object
TILES_MANAGER
Failed to save wifi tile in to database.
filename
@GtsGiz, add, llsw, %{private}.2lf, %{private}.2lf, sizes, %{public}lu, %{public}lu
WtmList, add, sync, size, %lu, llsw, %.2lf, %.2lf
@GtsLock, add, llsw, %{private}.2lf, %{private}.2lf, mapsize, %{public}ld
SYDictionaryObject
/System/Library/PrivateFrameworks/CompanionSync.framework/CompanionSync
TileSyncAwd
PSYSyncCoordinator
/System/Library/PrivateFrameworks/PairedSync.framework/PairedSync
PSYInitialSyncStateObserver
SYService
kCLTileSyncControlRequest
kCLTileSyncControlManifestDict
kCLTileSyncObjectDataKey
kCLTileSyncObjectSyncTimestampKey
kCLTileSyncObjectAccessTimestampKey
No value written for object
true
rtLOIUUID
rtLOIType
visits
rtVisitTimesAreQuantized
hasRtLOIUUID
T@"NSString",&,N,V_rtLOIUUID
hasRtLOIType
Ti,N,V_rtLOIType
hasUncertaintyInMeters
Td,N,V_uncertaintyInMeters
Td,N,V_confidence
hasTypeSource
Ti,N,V_typeSource
T@"NSMutableArray",&,N,V_visits
hasRtVisitTimesAreQuantized
TB,N,V_rtVisitTimesAreQuantized
MeCard
AggregateInferred
PatternBased
TopMedian
elevationAscended
elevationDescended
gradeType
verticalSpeed
rawGradeType
source
TI,N,V_elevationAscended
hasElevationDescended
TI,N,V_elevationDescended
hasGradeType
Ti,N,V_gradeType
hasVerticalSpeed
Tf,N,V_verticalSpeed
hasRawGradeType
Ti,N,V_rawGradeType
hasSource
Ti,N,V_source
Unknown
Uphill
Flat
Downhill
(unknown: %i)
Phone
Watch
CoreMotion
com.apple.CoreMotion.CMMotionUtils.MessageQueue
kCLConnectionMessageRegistration
v12@?0{shared_ptr<CLConnectionMessage>=^{CLConnectionMessage}^{__shared_weak_count}}4
+[CMMotionUtils sendMessageWithReplySync:]
Timeout (after 5 seconds) occurred during wait!
com.apple.locationd.activity
+[CMMotionUtils tccServiceMotionAccessWithLabel:]
Warning - invoking %@ on main may lead to deadlock.
v8@?0C4
+[CMMotionUtils tccServiceMotionAccessWithLabel:]_block_invoke
TCCServiceMotionAccess timeouts!
com.apple.CoreMotion.tcc
+[CMMotionUtils tccServiceMotionAccessWithBlock:]_block_invoke
CoreMotion.log
+[CMMotionUtils featureAvailability:]
Response invalid.
CLStreamedLocationProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Streaming/CLStreamedLocationProvider.mm
-[CLStreamedLocationProviderAdapter beginService]
Streamed location provider
void CLStreamedLocationProvider::logGPS(const CLLocationProvider_Type::NotificationData &)
Streamed,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf,lat,%.8lf,lon,%.8lf,hunc,%.3lf,alt,%.3lf,vunc,%.3lf,speed,%.3lf,sunc,%.3lf,course,%.3lf,cunc,%.3lf
fFitnessAssertionCount >= 0
fFitnessAssertionCount > 0
fDisablementAssertionCount >= 0
fDisablementAssertionCount > 0
fEmergencyEnablementAssertionCount >= 0
fEmergencyEnablementAssertionCount > 0
proxy
T@"<CLStreamedLocationProviderProtocol>",&,N,V_proxy
CLStreamedLocationProvider
void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::removeClient(int) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
virtual bool CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
timestamp
motion
natalieFeatures
regularEntry
-[ALMotionState writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/ActivityLogger/ALMotionState.m
self->_motion != nil
hasTimestamp
Td,N,V_timestamp
T@"ALCMMotionContextMotionState",&,N,V_motion
hasNatalieFeatures
TB,R,N
T@"ALCLNatalieFeatures",&,N,V_natalieFeatures
TB,N,V_regularEntry
type
confidence
mounted
mountedConfidence
turn
isVehicular
isMoving
exitState
startTime
Ti,N,V_type
Ti,N,V_confidence
hasMounted
Ti,N,V_mounted
hasMountedConfidence
Ti,N,V_mountedConfidence
hasTurn
Ti,N,V_turn
hasIsVehicular
TB,N,V_isVehicular
hasIsMoving
TB,N,V_isMoving
hasExitState
Ti,N,V_exitState
hasStartTime
TQ,N,V_startTime
kTypeUnknown
kTypeFrozen
kTypeStatic
kTypeMoving
kTypeSemiStationary
kTypeWalking
kTypeWalkingSlow
kTypeRunning
kTypeCycling
kTypeInVehicleFrozen
kTypeInVehicleStatic
kTypeDriving
kTypeVehicularInHand
kTypeDrivingOther
kTypeDrivingMounted
kTypeDrivingOrWalkingSlow
kTypeCyclingSeat
kTypeCyclingChassis
kTypeCyclingLeg
kTypeCyclingArm
kTypeCyclingTorso
kTypeDrivingSeat
kTypeDrivingArm
kTypeDrivingStowed
kTypeRunningLeg
kTypeRunningArm
kTypeWalkingLeg
kTypeWalkingArm
kTypeSemiStationaryPocket
kTypeSemiStationaryArm
kConfidenceLow
kConfidenceMedium
kConfidenceHigh
kNotMounted
kMounted
kTurnStateUnknown
kTurnStateStatic
kTurnStateTurning
kNoDetection
kExitPreheat
kExitDetected
recordId
pacebin
kvalue
kvalueTrack
score
endTime
distance
steps
session
speed
hasRecordId
Ti,N,V_recordId
Td,N,V_startTime
hasPacebin
TI,N,V_pacebin
Tf,N,V_kvalue
Tf,N,V_kvalueTrack
Tf,N,V_score
Td,N,V_endTime
Tf,N,V_distance
Ti,N,V_steps
Ti,N,V_session
Tf,N,V_speed
hasRegularEntry
count
floorsAscended
floorsDescended
pace
TI,N,V_count
Td,N,V_distance
TI,N,V_floorsAscended
TI,N,V_floorsDescended
hasPace
Td,N,V_pace
firedTime
didWake
Td,N,V_firedTime
TB,N,V_didWake
kAlarmTypeReminder
kAlarmTypeFinal
kAlarmTypeReset
kAlarmTypeActiveReminder
kAlarmTypeDeskReminder
kAlarmTypeDrivingReminder
kAlarmTypeTestSedentary
kAlarmTypeTestActive
fVectorMagnitude
fIQRX
fIQRY
fIQRZ
fMachineFrequency
fEpochType
fStanding
Tf,N,V_fVectorMagnitude
Tf,N,V_fIQRX
Tf,N,V_fIQRY
Tf,N,V_fIQRZ
Tf,N,V_fMachineFrequency
Ti,N,V_fEpochType
TB,N,V_fStanding
kInvalidEpoch
K2560MsType
k10240MsType
heightM
weightKG
vo2max
hrmin
hrmax
hronset
Ti,N,V_gender
Tf,N,V_heightM
Tf,N,V_weightKG
Tf,N,V_vo2max
Tf,N,V_age
Tf,N,V_hrmin
Tf,N,V_hrmax
Tf,N,V_hronset
Tf,N,V_pal
kGenderMale
kGenderFemale
mountedState
isStanding
tilt
estExitTime
isVehicleConnected
hasMountedState
Ti,N,V_mountedState
hasIsStanding
TB,N,V_isStanding
hasTilt
Tf,N,V_tilt
hasEstExitTime
Td,N,V_estExitTime
hasIsVehicleConnected
TB,N,V_isVehicleConnected
overrideAction
activity
-[ALActivityOverrideMsg writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/ActivityLogger/ALActivityOverrideMsg.m
self->_activity != nil
Ti,N,V_overrideAction
T@"ALCLMotionActivity",&,N,V_activity
kOverrideActionNone
kOverrideActionClear
kOverrideActionSet
activityOverrideMsg
bodyMetrics
motionState
stepCountData
sessionCatherineData
jacksonData
strideCalData
sedentaryAlarmData
allDayHeartRate
calorieData
coarseElevation
fitnessTracking
odometer
idsStatus
stairClimbingModel
rowingModel
exerciseMinute
workoutEvent
elevation
natalieData
sedentaryAlarmDataDeprecated
strideCalDataDeprecated
elevationDeprecated
hasActivityOverrideMsg
T@"ALActivityOverrideMsg",&,N,V_activityOverrideMsg
hasBodyMetrics
T@"ALCLBodyMetrics",&,N,V_bodyMetrics
hasMotionState
T@"ALMotionState",&,N,V_motionState
hasStepCountData
T@"ALCLStepCountEntry",&,N,V_stepCountData
hasSessionCatherineData
T@"ALCLSessionCatherine",&,N,V_sessionCatherineData
hasJacksonData
T@"ALCLJacksonData",&,N,V_jacksonData
hasStrideCalData
T@"ALCLStrideCalEntry",&,N,V_strideCalData
hasSedentaryAlarmData
T@"ALCLSedentaryAlarmData",&,N,V_sedentaryAlarmData
hasAllDayHeartRate
T@"ALCLAllDayHeartRate",&,N,V_allDayHeartRate
hasCalorieData
T@"ALCMCalorieData",&,N,V_calorieData
hasCoarseElevation
T@"ALCMCoarseElevation",&,N,V_coarseElevation
hasFitnessTracking
T@"ALCMFitnessTracking",&,N,V_fitnessTracking
hasOdometer
T@"ALCLOdometer",&,N,V_odometer
hasIdsStatus
T@"ALCLIDSStatus",&,N,V_idsStatus
hasStairClimbingModel
T@"ALCLStairClimbingModel",&,N,V_stairClimbingModel
hasRowingModel
T@"ALCLRowingModel",&,N,V_rowingModel
hasExerciseMinute
T@"ALCMExerciseMinute",&,N,V_exerciseMinute
hasWorkoutEvent
T@"ALCMWorkoutEvent",&,N,V_workoutEvent
hasElevation
T@"ALCMElevation",&,N,V_elevation
hasNatalieData
T@"ALCLNatalieDataDeprecated",&,N,V_natalieData
hasSedentaryAlarmDataDeprecated
T@"ALCLSedentaryAlarmDataDeprecated",&,N,V_sedentaryAlarmDataDeprecated
hasStrideCalDataDeprecated
T@"ALCLStrideCalEntryDeprecated",&,N,V_strideCalDataDeprecated
hasElevationDeprecated
T@"ALCLElevationDeprecated",&,N,V_elevationDeprecated
ActLogger
CLActivityLoggerWriter::CLActivityLoggerWriter(NSString *)
MsgEnabledBitMask is %s
bool CLActivityLoggerWriter::open()
CLActivityLoggerWriter open log file filePath is %s, file is %p.
bool CLActivityLoggerWriter::logData(PBCodable *)
CLActivityLoggerWriter logData, prepare to log %d bytes
CLActivityLoggerWriter failed to log data: %s
MsgEnableBitMask
MsgRateMask
activityLog.pb
CLActivityLoggerAdapterSilo
logger
T^{CLActivityLogger=@{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{CLActivityLoggerWriter=@@{shared_ptr<CLActivityLoggerPolicy>=^{CLActivityLoggerPolicy}^{__shared_weak_count}}{BasicMutex=^^?^{MutexInfo}}}{CLActivityDbExportAdapter=B@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}},N,V_logger
CMActivityLog
CLActivityLogger::CLActivityLogger(CLSilo *)
CLActivityLogger being constructed.
void CLActivityLogger::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
CLActivityLogger, kNotificationActivityOverride,overrideAction,%d,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f}
CLActivityLogger,log kNotificationActivityOverride:%s
CLActivityLogger, Unhandled notification %d
void CLActivityLogger::onFitnessDataCollectionSettingChangedNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
CLActivityLogger, dataCollection setting changed
NanoLifestyleEnableFitnessDataCollectionSettingDidChangeNotification
com.apple.managedconfiguration.defaultsdidchange
CLOdometerNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Odometer/CLOdometerNotifier.mm
-[CLOdometerNotifierAdapter beginService]
CLOdometerNotifier
WorkoutSignificantElevation
MotionCalibration
CLOdometerNotifier::CLOdometerNotifier(CLSilo *)
CLOdometerNotifier is being constructed
virtual CLOdometerNotifier::~CLOdometerNotifier()
CLOdometerNotifier is shutting down
Cycling
Elevation
CyclingSpectator
CoarseElevation
ElevationSpectator
MotionOdometer
action
Unregistration
client
notificationClientCount
notificationString
void CLOdometerNotifier::logClient(int, const CLOdometerNotifier_Type::Notification &, bool)
%s, %s, %s, %s, %s, %s, %d, %s, %d, %s, %s
void CLOdometerNotifier::setUpDbUpdateFinishedHandler()_block_invoke
SignificantElevation,startTime,%.3f,endTime,%.3f,ascended,%d,descended,%d
v48@?0{CLSignificantElevation=i[16C]ddII}4
bool CLOdometerNotifier::checkAuthorization() const
Location services are disabled for motion classification
Motion calibration system service is disabled.
LocationBundles/
bundle
void CLActivityAggregator<CLSignificantElevation>::setExpirationRule(CFTimeInterval) [T = CLSignificantElevation]
Programmer error, this expiration rule with time %fis not valid.
virtual bool CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
long CLActivityAggregator<CLSignificantElevation>::aggregateRecords() [T = CLSignificantElevation]
Aggregating records start %f, count ~%d
Aggregating records stop %f, count ~%d
Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d
int CLActivityRecorderDb<CLSignificantElevation>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSignificantElevation]
No expiration rule was added so the number of records will be unbounded.
virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNatalieInputBuffer<CLCatherineData>::add(const CLCatherineData &) [Data_T = CLCatherineData]
Updating Catherine, catherine = %.8f, timestamp = %.8lf, starttime = %.8lf, source = %d, interpolation = %d, srcName = %s
virtual void CLNatalieInputBuffer<CLOdometerEntry>::add(const CLOdometerEntry &) [Data_T = CLOdometerEntry]
Updating Odometer, time stamp, %.8lf, distance, %.8f, GPS altitude, %.8lf, estimated speed(m/s), %.8lf, odometer, %.8lf, accuracy, %.8lf, speed accuracy, %.8lf, timestampGps, %.8lf, rawSpeed, %.8f, srcName, %s
virtual void CLNatalieInput<CLElevationChangeEntry>::add(const CLElevationChangeEntry &)
Updating Elevation, time stamp, %.2lf, elevationAscended, %d, elevationDescended, %d, srcName, %s, source, %d
Updating Elevation, beyond time window, buffer size, %lu, deltaTime, %f
Online grade estimation regime change, time start, %.2lf, elevationAscended, %d, elevationDescended, %d,input_altitude, %.4f, Prediction Error, %.4f
Online grade estimation, gradeType, %d, time start, %.2lf, altitude delta, %.2f, vspeed, %.2f, param_m, %f, param_b, %f,xbufferFront, %f,xbufferBack, %f, elevationAscended, %d, elevationDescended, %d, input_altitude, %.4f
Hardware gradeTypeFilter, rawGradeType, %d, gradeType, %d, vspeed, %.4f
virtual bool CLNatalieInput<CLElevationChangeEntry>::isReady(CFAbsoluteTime)
ElevationSrc ready at time, %.2f, no data point
ElevationSrc not ready at time, %.2f 
ElevationSrc ready at time, %.2f, nearest data point at time, %.2f
recordingUUID
recordingTimestamp
rtLOI
receivedTimestamp
recordingEventProtobuf
recordingEventType
hasRecordingUUID
T@"NSString",&,N,V_recordingUUID
hasRecordingTimestamp
Td,N,V_recordingTimestamp
hasRtLOI
T@"NSString",&,N,V_rtLOI
hasReceivedTimestamp
Td,N,V_receivedTimestamp
hasRecordingEventProtobuf
T@"NSData",&,N,V_recordingEventProtobuf
hasRecordingEventType
Ti,N,V_recordingEventType
LOCALIZATION_REQUEST
APP_LAUNCH
HEY_SIRI_INVOCATION
BACKLIGHT_ON
BATTERY_CHARGER_CONNECTED
STEP_COUNT
FORCED_RECORDING
FIRST_WAKE_OF_DAY
HOMEKIT_ACCESSORY
HOMEKIT_SCENE
void CLNavModeEstimator::logStateChange(CLNavModeClassification, CLNavModeClassification) const
Changed from %s to %s:,
bool hasValidSpeedEstimate(const CLDaemonLocation &)
Latest speed is %lf but no information about speed uncertainty
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Indoor/CLNavModeEstimator.mm
void CLVehicularPedestrianActivityStateEstimator::feedActivityState(const CLMotionActivity &)
Uninitialized
RecentlyVehicular
RecentlyPedestrian
std::string cl::to_string(CLNavModeClassification)
CLNavModeClassification
unknown enum 
tileType
isAllowOverCellular
secKey
hasTileType
TI,N,V_tileType
TI,N,V_tileX
TI,N,V_tileY
hasIsAllowOverCellular
TB,N,V_isAllowOverCellular
hasSecKey
TQ,N,V_secKey
ERROR
WARNING
STATUS
INFO
VERBOSE
NONE
Direct
LocationServicesEnabledIn8.0
GestureServiceEnabled
LocationServicesAvailable
PrivateMode
com.apple.locationd/Prefs
com.apple.ManagedConfiguration.profileListChanged
com.apple.locationd.DumpDiagnostics
OscarEmulation
com.apple.locationd.notbackedup
com.apple.carrier
com.apple.operator
NSLocationUsageDescription
NSLocationAlwaysUsageDescription
NSLocationWhenInUseUsageDescription
gpsUtcLeapSeconds
CFRunLoopRef CLCommonGetRunLoop()
***no run loop available***
void CLCommonSetRunLoop(CFRunLoopRef)
Changing CLCommon's runloop after it was already established
Setting CLCommon's runloop after it was already established
CLCommonSetRunLoop, %p
int CLCommonCopyFile(const char *, const char *)
cannot open source file: %s, errno %d
cannot open target file: %s, errno %d
error reading source file: %s
error writing target file: %s
int CLCommonBzipFile(const char *, const char *)
cannot open compression stream: %s, bzerror %d
error writing target file: %s, bzerror: %d
error closing target file: %s, bzerror: %d
decompress:%@
bool CLCommonGzipDecompressFile(const char *, const char *)
CLCommonGzipDecompressFile, can't stat, %s
CLCommonGzipDecompressFile, from, %s, to, %s, size, %llu, cTime, %.1lf, isOK, %d
CLCommonGzipDecompressFile, can't open, file_path_to, %s, errno %d
CLCommonGzipDecompressFile, can't open, file_path_from, %s, errno, %d
CLCommonGzipDecompressFile, error reading source file: %s, errno, %d, read, %d
CLCommonGzipDecompressFile, can't write, %s, errno, %d, write, %zu
CLCommonGzipDecompressFile, from, %s, to, %s, isOK, %d, fileSize, %llu, totalReadBytes, %u, totalWrittenBytes, %u, compression, %.4lf
compress:%@
%a, %d %b %Y %T %Z
Date
int CLCommonGetTimeFromHttpHeaderAndRtt(CFDictionaryRef, const CFTimeInterval *, CFAbsoluteTime *)
http date string is converted to timestamp %.3f and adjusted to %.3f by %.3fs RTT (%.3fs diff from systime)
bool CLCommonIsGpsNetworkTestMode()
GPS_NETWORK: enabled %d found %d
void CLCommonSetTimerNowPlusDelay(CFRunLoopTimerRef, CFTimeInterval)
Timer set loop: %d %f %f %f %f
CFRunLoopTimerRef CLCommonCreateIntervalRunLoopTimer(CFTimeInterval, CFRunLoopTimerContext *, CFRunLoopTimerCallBack)
bool CLCommonGetFileTimestamps(const char *, CFAbsoluteTime *, CFAbsoluteTime *, CFAbsoluteTime *, off_t *)
CLCommonGetFileTimestamps, failed to stat file, %s, ret, %d
void CLCommonDeleteFileIfExists(const char *)
TILE: delete file, %s
TILE: stat, %s, ret, %d, mtime, %lu, ctime, %lu, size, %lld
TILE: unlink, %s, ret, %d
bool CLCommonSetFileProtectionClass(const char *, int)
failed, invalid filename
failedToOpen, errno, %d
failed,fd,%d,origProtectionClass,%d,newProtectionClass,%d,ret,%d,errno,%d
done,fd,%d,origProtectionClass,%d,newProtectionClass,%d,ret,%d
kCLClientRegistrationResultAllowedAlways
kCLClientRegistrationResultAllowedWhenInUse
kCLClientRegistrationResultFailedUserDenied
kCLClientRegistrationResultFailedBlacklisted
kCLClientRegistrationResultFailedUnavailable
kCLClientRegistrationResultRequiresAgent
kCLClientRegistrationResultMissing
UNKNOWN
kCLClientAuthorizationStatusNotDetermined
kCLClientAuthorizationStatusRestricted
kCLClientAuthorizationStatusDenied
kCLClientAuthorizationStatusAuthorizedAlways
kCLClientAuthorizationStatusAuthorizedWhenInUse
GpsNetworkCtrl
__TEXT
Binary Images:
armv6
armv7
%16p - %lld %c%s %s <
%02X
> %s
triggerEvent
locations
accessPoints
-[CRPoiHarvest writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRPoiHarvest.m
self->_triggerEvent != nil
T@"CRPoiTriggerEvent",&,N,V_triggerEvent
T@"NSMutableArray",&,N,V_locations
T@"NSMutableArray",&,N,V_accessPoints
static bool CLNameValuePair::encodeBase64(const void *, unsigned long, std::string &)
processed %p %d to (%s)
CLNameValuePair::CLNameValuePair()
could not create new mutable dictionary
CLNameValuePair::CLNameValuePair(CFDictionaryRef)
CLNameValuePair::CLNameValuePair(const CLNameValuePair &)
CLNameValuePair &CLNameValuePair::operator=(const CLNameValuePair &)
virtual bool CLNameValuePair::loadFromFile(const char *)
could not deserialize property list from %s
file %s does not exist... clearing, error, %s
Error reading file %s: %s
bool CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const
Could not create NSURL for file: %s
Could not write data to disk %s
virtual bool CLNameValuePair::saveToFile(const char *) const
Could not serialize data for file %s
virtual bool CLNameValuePair::saveToBinaryFile(const char *, CLNVPDataProtection) const
virtual void CLNameValuePair::clearInternal(const CFStringRef, int)
key %s does not have element %d in array of size %ld
key %s does not have element %d in non-array type %lu
virtual bool CLNameValuePair::get(CFStringRef, CFArrayRef &) const
type IDs do not match for key %s - %lu vs %lu
virtual bool CLNameValuePair::get(CFStringRef, CFDataRef &, int) const
virtual bool CLNameValuePair::get(CFStringRef, CFStringRef &, int) const
virtual bool CLNameValuePair::copyInternal(CFStringRef, CFTypeRef &, int) const
specified index is out of range for key %s (%d of %ld)
specified index %d not applicable to type %lu for key %s
virtual bool CLNameValuePair::set(CFStringRef, const bool &)
could not create cf type for key %s
virtual bool CLNameValuePair::set(CFStringRef, const uint16_t &)
virtual bool CLNameValuePair::set(CFStringRef, const short &)
virtual bool CLNameValuePair::set(CFStringRef, const uint32_t &)
virtual bool CLNameValuePair::set(CFStringRef, const int64_t &)
virtual bool CLNameValuePair::set(CFStringRef, const int &)
virtual bool CLNameValuePair::set(CFStringRef, const long &)
virtual bool CLNameValuePair::set(CFStringRef, const double &)
virtual bool CLNameValuePair::set(CFStringRef, const char *)
virtual bool CLNameValuePair::set(CFStringRef, const CLNameValuePair &)
virtual bool CLNameValuePair::insert(CFStringRef, const bool &)
virtual bool CLNameValuePair::insert(CFStringRef, const uint16_t &)
virtual bool CLNameValuePair::insert(CFStringRef, const short &)
virtual bool CLNameValuePair::insert(CFStringRef, const uint32_t &)
virtual bool CLNameValuePair::insert(CFStringRef, const int64_t &)
virtual bool CLNameValuePair::insert(CFStringRef, const int &)
virtual bool CLNameValuePair::insert(CFStringRef, const long &)
virtual bool CLNameValuePair::insert(CFStringRef, const double &)
virtual bool CLNameValuePair::insert(CFStringRef, const char *)
virtual bool CLNameValuePair::insert(CFStringRef, const CLNameValuePair &)
virtual bool CLNameValuePair::serializeBinary(CFDataRef *) const
could not create write stream
could not open write stream
could not write data, error code, %ld, error domain, %s
unknown error
virtual bool CLNameValuePair::deserialize(const CFDataRef)
could not create intermediate property list - %ld (%s)
virtual void CLNameValuePair::print() const
<empty>
static void CLNameValuePair::printKeyValue(const void *, const void *, void *)
%s = <dictionary (%ld entries)>:
%s = %s
%s = %0.6f
%s = %d
%s = <unhandled value type %lu>
type ID does not match - %lu vs %lu
%s = <dictionary (%ld entries)>:
%s = %s
%s = %0.6f
%s = %d
%s = <unhandled value type %lu>
%s[%d]
static bool CLNameValuePair::fromCfType(const CFTypeRef, short &)
could not get value
static bool CLNameValuePair::fromCfType(const CFTypeRef, int64_t &)
static bool CLNameValuePair::fromCfType(const CFTypeRef, int &)
static bool CLNameValuePair::fromCfType(const CFTypeRef, long &)
static bool CLNameValuePair::fromCfType(const CFTypeRef, double &)
type IDs do not match - %lu vs %lu
static bool CLNameValuePair::fromCfType(const CFTypeRef, std::string &)
could not convert to C string
can't convert %u data bytes
type IDs do not match - %lu
static bool CLNameValuePair::fromCfType(const CFTypeRef, const char *&, unsigned int &)
static bool CLNameValuePair::fromCfType(const CFTypeRef, CLNameValuePair &)
v16@?0@"NSURL"4@"NSURLResponse"8@"NSError"12
CLHttpRequest
void CLMicroLocationPowerLog::logMetrics(CL::optional<ObserverPowerLogFunction>) const
PowerLog is not enabled so not writing microlocation metrics
FootprintsMetricsStart
FootprintsMetricsEnd
FootprintsNumChannelsAt50msDwell
FootprintsNumChannelsAt110msDwell
FootprintsTotalDurationActiveScansSecs
FootprintsTotalDurationPassiveScansSecs
FootprintsActiveScanDutyCycle
FootprintsPassiveScanDutyCycle
FootprintsTotalDurationWPHomeKitSecs
FootprintsTotalDurationWPAirplaySoloSecs
Footprints
Wrote microlocation metrics to power log: %s
MicroLocationsPowerLogEnabled
MicroLocationsLocalizingWifiDutyCyclePercentage
MicroLocationsRecordingWifiDutyCyclePercentage
CLSedentaryTimerNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/SedentaryTimer/CLSedentaryTimerNotifier.mm
-[CLSedentaryTimerNotifierAdapter beginService]
CLSedentaryTimerNotifier
CLSedentaryTimerNotifier::CLSedentaryTimerNotifier(CLSilo *)
CLSedentaryTimerNotifier is being constructed
SedentaryTimerActiveWindow
SedentaryTimerActiveThreshold
SedentaryTimerHapticFeedback
SedentaryTimerStepCountThreshold
SedentaryTimerPushCountThreshold
fActiveWindowSize,%d,fActiveThreshold,%d,fStepCountThreshold,%d,fEnableHapticFeedback,%d,fPushCountThreshold,%d
v28@?0d4d12i20B24
virtual CLSedentaryTimerNotifier::~CLSedentaryTimerNotifier()
CLSedentaryTimerNotifier is shutting down
SedentaryTimerDisableAggregation
SedentaryTimerDisableExpiration
SedentaryTimerEmulationTimeRate
SedentaryTimerDetailedLogging
void CLSedentaryTimerNotifier::setupAggregation()
Configuration: speedUpRate %f, aggregationDisabled %d, expirationDisabled %d, detailedLogging %d
SedentaryTimerAggregateInterval
CLActivityLogger
v36@?0{CLSedentaryAlarmData=ddiBd}4
com.apple.locationd.sedentarytimer
virtual bool CLSedentaryTimerNotifier::registerForNotificationInternal(const CLSedentaryTimerNotifier_Type::Notification &)
Client Registered
Un-handled notification,%d
CMError CLSedentaryTimerNotifier::startTimer(const std::string &, NSDictionary *)
Error starting sedentary timer for %s,fFitnessTrackingEnabled,%d
Error starting sedentary timer for %s,fArmed,%d
client,%s,offset,%d,period,%d,reminder,%d,autoReschedule,%d
CMError CLSedentaryTimerNotifier::stopTimer(const std::string &)
stopTimer
com.apple.locationd.sedentarytimer.testsedentary
com.apple.locationd.sedentarytimer.testactive
com.apple.locationd
void CLSedentaryTimerNotifier::onSedentaryAlarm(const CFAbsoluteTime, const CFAbsoluteTime, const CLSedentaryAlarmType, const bool)
Stopping timer,fFitnessTrackingEanbled,%d
void CLSedentaryTimerNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)
void CLActivityAggregator<CLSedentaryAlarmData>::setExpirationRule(CFTimeInterval) [T = CLSedentaryAlarmData]
long CLActivityAggregator<CLSedentaryAlarmData>::aggregateRecords() [T = CLSedentaryAlarmData]
int CLActivityRecorderDb<CLSedentaryAlarmData>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSedentaryAlarmData]
virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CL database error, invalid time, %lf
bool CLActivityRecorderDb<CLSedentaryAlarmData>::isValidTime(CFAbsoluteTime &) const [T = CLSedentaryAlarmData]
virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLMotionStateObserverCompanion::CLMotionStateObserverCompanion(CLSilo *)
Restoring session timer since we have a current activity.
virtual void CLMotionStateObserverCompanion::receiveMotionStateUpdate(NSData *)
Invalid data received.
void CLMotionStateObserverCompanion::startSessionTimer()_block_invoke
Timing out session since we have not heard a response in %f seconds.
void CLMotionStateObserverCompanion::startSessionTimer()
Starting update timer.
void CLMotionStateObserverCompanion::stopSessionAndTimer()
nPairs
lsest
sumest
fPal
TI,N,V_nPairs
hasLsest
Tf,N,V_lsest
hasSumest
Tf,N,V_sumest
hasFPal
TI,N,V_fPal
version
tileX
tileY
securityKey
generationTimeSecs
expirationAgeSecs
DEPRECATED_fingerprints
fingerprints
marketId
hasVersion
Ti,N,V_version
hasTileX
Ti,N,V_tileX
hasTileY
Ti,N,V_tileY
hasSecurityKey
TQ,N,V_securityKey
hasGenerationTimeSecs
Td,N,V_generationTimeSecs
hasExpirationAgeSecs
Ti,N,V_expirationAgeSecs
hasDEPRECATEDFingerprints
dEPRECATEDFingerprints
T@"TRANSITPbLocationFingerprintsV1",&,N,V_dEPRECATEDFingerprints
hasFingerprints
T@"TRANSITPbLocationFingerprints",&,N,V_fingerprints
hasMarketId
TQ,N,V_marketId
-[CLMescalSigner initInSilo:]
MESCAL: Could not derive hardware info for SAPInit
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLMescalSigner.m
-[CLMescalSigner dealloc]
-[CLMescalSigner signData:withCompletion:]
dataIn
hdlr
-[CLMescalSigner signData:withCompletion:]_block_invoke
v8@?0B4
-[CLMescalSigner _doSigningWhenReady]
MESCAL: SAPSign failed with: %ld
-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke
MESCAL: churn failure: signing disabled
-[CLMescalSigner _initializeMescalWithCompletion:]
MESCAL: SAPInit failed with: %ld
-[CLMescalSigner _churnMescalExchangeData:withCompletion:]
MESCAL: SAPExchange failed with: %ld
replaceAfter
Td,R,N,V_replaceAfter
bundleId
T@"NSString",&,N,V_bundleId
launchReason
T@"NSString",&,N,V_launchReason
homeUUID
T@"NSString",&,N,V_homeUUID
actionSetUUID
T@"NSString",&,N,V_actionSetUUID
actionSetName
T@"NSString",&,N,V_actionSetName
actionSetType
T@"NSString",&,N,V_actionSetType
clientName
T@"NSString",&,N,V_clientName
sceneName
T@"NSString",&,N,V_sceneName
accessoryUUID
T@"NSString",&,N,V_accessoryUUID
accessoryName
T@"NSString",&,N,V_accessoryName
serviceName
T@"NSString",&,N,V_serviceName
serviceType
T@"NSString",&,N,V_serviceType
characteristicType
T@"NSString",&,N,V_characteristicType
viewUUID
T@"NSString",&,N,V_viewUUID
viewName
T@"NSString",&,N,V_viewName
viewInformation
T@"NSString",&,N,V_viewInformation
-[CLKeychainItemWrapper initWithIdentifier:]
nil identifier given to CLKeychainItemWrapper
-[CLKeychainItemWrapper dictionaryToSecItemFormat:]
nil dictionary passed for converstion
Conversion of dictionary without kSecValueData key requested.
-[CLKeychainItemWrapper writeToKeychain]
Couldn't update the Keychain Item.
Couldn't add the Keychain Item.
keychainItemData
T@"NSMutableDictionary",&,N,V_keychainItemData
genericPasswordQuery
T@"NSMutableDictionary",&,N,V_genericPasswordQuery
write_escaped_str
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Logging/CLJsonLogging.cpp
next.first[0] == '\0'
nullptr != escapedControlChar(next.first[0])
meta
pressure
pressureLocation
-[CRPressureCollectionRequest writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRPressureCollectionRequest.m
self->_meta != nil
self->_pressure != nil
self->_pressureLocation != nil
T@"CRMeta",&,N,V_meta
T@"CRPressure",&,N,V_pressure
T@"CRLocation",&,N,V_pressureLocation
virtual CLMetsInfo CLNatalieYogaModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, Yoga Compendium METS, METS, %f
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Intersilo/CLTimer.m
-[CLTimer shouldFire]
nextFireTime
Td,N,V_nextFireTime
fireInterval
Td,N,V_fireInterval
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/CSI/CLMachThreadSupport.mm
virtual void BasicMutex::lock()
<unnamed>
TIMEOUT: Waited %f seconds to aquire lock '%s' (%p)
virtual void BasicMutex::unlock()
TIMEOUT: Held lock '%s' (%p) for %f seconds
virtual DestructionAwareMutex::~DestructionAwareMutex()
Condition::WaitStatus Condition::wait(Mutex *, int)
kCLLocationStreamingMessageTypeRequestLocation
kCLLocationStreamingMessageGranularityKey
kCLLocationStreamingMessageIncludeMotionKey
kCLLocationStreamingMessageInFitnessSessionKey
kCLLocationStreamingMessageEmergencyEnablementKey
kCLLocationStreamingMessageTypeLocation
kCLLocationStreamingMessageLocationKey
kCLLocationStreamingMessageLocationPrivateKey
kCLLocationStreamingMessageLocationInternalKey
kCLLocationStreamingMessageTypeAliveAgain
kCLLocationStreamingMessageTypeSetMotionAlarm
kCLLocationStreamingMessageMotionAlarmStateKey
kCLLocationStreamingMessageTypeMotionAlarmUpdate
kCLLocationStreamingMessageInMotionKey
messageType
T@"NSString",&,N,V_messageType
payload
T@"NSDictionary",&,N,V_payload
priority
Ti,N,V_priority
idsOptions
T@"NSDictionary",&,N,V_idsOptions
protocolVersion
Ti,N,V_protocolVersion
CLLocationStreamingConnectionManagerSilo
com.apple.private.alloy.location.stream
v8@?0@"<CLLocationStreamingConnectionManagerClientProtocol>"4
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Streaming/CLLocationStreamingConnectionManager.mm
-[CLLocationStreamingConnectionManager service:account:identifier:didSendWithSuccess:error:]
service
T@"IDSService",&,N,V_service
unacknowledgedMessages
T@"NSMutableDictionary",&,N,V_unacknowledgedMessages
clients
T@"NSMutableSet",&,N,V_clients
pairIsNearby
TB,N,V_pairIsNearby
kCLLocationStreamingMessageKeyType
kCLLocationStreamingMessageKeyVersion
kCLLocationStreamingMessageKeyPayload
virtual bool CLPreferences::serialize(CFDataRef *) const
***not supported***
virtual bool CLPreferences::serializeBinary(CFDataRef *) const
virtual bool CLPreferences::deserialize(const CFDataRef)
virtual void CLPreferences::print() const
<empty>
virtual void CLPreferences::merge(const CLPreferences &, bool)
virtual bool CLPreferences::loadFromFile(const char *)
virtual bool CLPreferences::saveToFile(const char *) const
virtual bool CLPreferences::saveToBinaryFile(const char *) const
virtual void CLPreferences::setInternal(const CFStringRef, const CFTypeRef)
Attempt to set key %s for read-only preferences %s/%s!
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLPreferences.mm
virtual bool CLPreferences::containsInternal(CFStringRef) const
IoManager Mutex
IoManager Thread Parking
IoManager Shutdown Sync
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/IO/CLIoManager.cpp
bool CLIoManager::registerSource(CLDataSource *, bool)
bool CLIoManager::deregisterSource(CLDataSource *)
Poll count underflow!!!
CLDataSource:
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/IO/CLDataSource.cpp
virtual void CLDataSource::setDevice_nl(const std::string &)
std::string CLDataSource::getDevice_nl() const
virtual void CLDataSource::watchBlock()
%s: Need to override this method
virtual void CLDataSource::watchUnblock()
CLDataSource::State CLDataSource::getState_nl() const
void CLDataSource::setState_nl(CLDataSource::State)
Trying to set the same state '%s' for device '%s'
virtual int CLDataSource::close_nl()
virtual int CLDataSource::forceClosing_nl()
virtual int CLDataSource::handleReadData_nl(const char *, int)
virtual int CLDataSource::getWriteData_nl(char *, int)
int CLDataSource::processWrite_nl(unsigned int)
kClosing
kClosed
kStopped
kStarted
kOpening
kOpened
static void CLDaemonCache::shutdownInstance()
could not store cached data 
cache
CLDaemonCache
ClearLocationCache
CLDaemonCache::CLDaemonCache()
clearing location cache
CLSensorFusionService::CLSensorFusionService(int)
Starting device motion service 0x%x
DeviceMotionUseThrottledInterval
DeviceMotionAccelerometerUpdateInterval
DeviceMotionGyroUpdateInterval
DeviceMotionCompassUpdateInterval
Type,%s,dt,%20.20f
Type,%s,interval,%f
DumpGyroCalibrationDatabaseOnDeviceMotionStart
Dumped gyro cal database with id %s
virtual CLSensorFusionService::~CLSensorFusionService()
Stopping device motion service 0x%x
void CLSensorFusionService::publishSensorFusion(const CLSensorFusionService::Sample *)
Type,%s,q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,magneticFieldCalibrationLevel,%d,timestamp,%20.20f,doingBiasEstimation,%d,doingYawCorrection,%d
void CLSensorFusionService::updateSensorStatus(const CLSensorFusionService::SensorStatus &)
Set device motion sensor status %ld
adamId
displayName
T@"NSNumber",R,C,N,V_adamId
T@"NSString",R,C,N,V_bundleId
T@"NSString",R,C,N,V_displayName
developerName
T@"NSString",R,C,N,V_developerName
lastUpdateTime
Td,R,N,V_lastUpdateTime
Metadata was incomplete for adam id: %@, bundle id: %@, display name: %@, artist name: %@
-[CLStoreServicesRequestor onStoreLookupResponse:error:adamIds:requestorResponse:]_block_invoke
SAMSSR: Resolved adamId, %s, name, %s, bundleId, %s, developerName, %s.
SAMSSR: Added adamId, %s, to cache.
SAMSSR: Missing response for adamId, %s in lookup request but not in the response
Missing response for adamId, %@ in lookup request but not in the response
v16@?0@"NSNumber"4I8^B12
An adam ID is required to perform a item lookup.
-[CLStoreServicesRequestor performItemLookupWithAdamIds:response:]_block_invoke
SAMSSR: Result for adamid, %ld, in cache.
SAMSSR: Result for adamid, %ld, in cache but expired.
SAMSSR: Result for adamid, %ld, not in cache.
-[CLStoreServicesRequestor performItemLookupWithAdamIds:response:]_block_invoke_2
SAMSSR: Error performing lookup, %s
-[CLStoreServicesRequestor performItemLookupWithAdamIds:response:]_block_invoke_3
SAMSSR: Error parsing lookup response, %s
v12@?0@"NSArray"4@"NSError"8
v12@?0@"SSLookupResponse"4@"NSError"8
-[CLStoreServicesRequestor onPurgeTimer]
SAMSSR: Removing adamId, %ld, from cache since the entry has expired.
resultsCache
T@"NSMutableDictionary",&,N,V_resultsCache
purgeTimer
T@"CLTimer",&,N,V_purgeTimer
hero-app-item
void CLMapDataUtil::CovarInvDet::init(const double &, const double &, const double &)
invalid hunc
void CLMapDataUtil::CovarInvDet::init(const double &, const double &, const double &, const double &, const double &)
invalid inputs
void CLMapDataUtil::CovarInvDet::calcInvAndDet()
fVarEast <= 0.0
fVarNorth <= 0.0
fVarEastNorth < 0.0
CLMM, Unexpected determinant of 0
void CLMapDataUtil::calculateScoreAndVarFactor(const CLMapDataUtil::CovarInvDet &, const double &, const double &, const double &, const double &, double &, double &)
determinant <= 0.0
/Library/Caches/locationd/
root
static std::string CLPersistentStore::getMutableStorePath(CLPersistentStoreType)
could not get mutable store path for type, %d
/System/Library/Frameworks/CoreLocation.framework/Support/
/System/Library/Frameworks/CoreLocation.framework
/Library/locationd/
CLPersistentStore::CLPersistentStore(CLSilo *, const char *, CLPersistentStore::Domain, CLPersistentStoreType, CLPersistentStoreDataProtection)
Unknown persistent domain: %d
virtual bool CLPersistentStore::refresh()
persistent store %s has been modified - refreshing will lose changes
virtual bool CLPersistentStore::store()
data set %s is not changeable - not storing
%s stored to disk %s
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLPersistentStore.mm
virtual void CLPersistentStore::setStoreInterval(const CFTimeInterval &, CFRunLoopTimerCallBack, void *)
scheduling to auto-store %s every %.3fs
disabling auto-store for %s
CLHomeKitProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLHomeKitProvider.mm
-[CLHomeKitProviderAdapter beginService]
CLHomeKitProvider
void CLHomeKitProvider::startScan(CLHomeKitProvider::ScanningPolicy)
void CLHomeKitProvider::onHomeKitDeviceFound(NSUUID *, CLHomeKitProvider_Type::HAPVersion, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point)
found device %s, data: %s, rssi: %d
Got a device notification but not device data
HomeKit Power Notification
HomeKit Scan Notification
HomeKit Buffered Scan Notification
FED4
Invalid Configuration Number
 (out of range [
]): 
Invalid Compatible Version
 got 
 expected 
Invalid Global State Number
Invalid Accessory Category Identifier
Invalid Advertising Interval and Length
Invalid Remaining Length
 got: 
 expected: 
Invalid Status Flags
Invalid Type
 exptected: 
Invalid Company Identifier
Valid
virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
bool (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point) [HomeKitType = (anonymous namespace)::HomeKitServiceData]
Found invalid HomeKit device: %s
bool (anonymous namespace)::addToScanCache(std::vector<CLHomeKitProvider_Type::HomeKitDevice> &, NSUUID *, NSData *, int, cl::chrono::CFAbsoluteTimeClock::time_point) [HomeKitType = (anonymous namespace)::HomeKitManufacturerData]
virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLHomeKitProvider_Type::Notification, NotificationData_T = CLHomeKitProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
hasType
hasConfidence
TypeUnknown
TypeFrozen
TypeStatic
TypeMoving
TypeWalking
TypeDriving
TypeCycling
TypeSemiStationary
TypeRunning
TypeMovingCoarse
TypeInVehicleFrozen
TypeInVehicleStatic
TypeWalkingSlow
TypeVehicularInHand
TypeDrivingOther
TypeCyclingLeg
TypeYoga
TypeDancing
TypeCrossTraining
TypeElliptical
TypeRowing
TypeStairClimbing
TypeStationaryCycling
TypeIndoorRunning
TypeIndoorWalking
TypeSwimming
TypePushingWheelchair
TypeOutdoorWheelchair
ConfidenceLow
ConfidenceMedium
ConfidenceHigh
kCLTelephonyServiceConnectedNotification
kCLTelephonyServiceDisconnectedNotification
kCLTelephonyServiceResetNotification
kCLTelephonyServiceSimulatedNotification
CLTelephonyServiceSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLTelephonyService.mm
-[CLTelephonyServiceAdapter beginService]
int CLTelephonyService_Type::Notification::operator int() const
CLTelephonyService::CLTelephonyService(CLSilo *)
CELL_LOC: fHardwareType, %d
virtual void CLTelephonyService::notifyClients(CFStringRef, CFDictionaryRef)
notifyAllClients
[expected containsObject:(NSString *)notification]
!notificationInfo
sending notification for %s
bool CLTelephonyService::onTelephonyInvalid(bool)
currently not connected to telephony service
virtual bool CLTelephonyService::getIsRegisteredOnCell()
Registration status: %d
virtual bool CLTelephonyService::getRegistrationStatus(CFStringRef &)
Serving
Neighbor
Monitor
Detected
Invalid
GSMCompact
UMTS
UTRAN
CDMA1x
CDMAEVDO
CDMAHybrid
SCDMA
virtual bool CLTelephonyService::getServingMcc(int &)
virtual bool CLTelephonyService::getLastKnownServingMcc(int &)
virtual bool CLTelephonyService::getServingMnc(int &)
virtual bool CLTelephonyService::getServingCellLacCi(int &, int &)
bool CLTelephonyService::getActiveCall(bool &)
bool CLTelephonyService::refreshCellMonitor()
Refresh Cell Monitor
CLTelephonyService.NotificationMap
i4@?0
CFStringRef (anonymous namespace)::NotificationMap::notificationFromInt(int)_block_invoke
Request to decode unknown integer is a programmer error
r^{__CFString=}4@?0
virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::listClients() [Notification_T = CLTelephonyService_Type::Notification, NotificationData_T = CLTelephonyService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
motionActivity
hasMotionActivity
T@"CRMotionActivity",&,N,V_motionActivity
CLWifiServiceSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLWifiService.mm
-[CLWifiServiceAdapter beginService]
60:c5:47:4f:51:1d
60:c5:47:4d:cd:6f
60:c5:47:4f:51:1c
CLWifiService internal state
WifiServiceLogScanResults
CLWifiService::CLWifiService(CLSilo *, std::unique_ptr<IExternal>)
dCOLLECT: fLogWifiScanResults =%d
fWifiDataCollection
dCOLLECT: fWifiDataCollection =%d
FenceWifiScannerEnabled
dCOLLECT: fWifiScannerEnable =%d
FenceWifiScannerEntryHysteresis
dCOLLECT: fWifiScannerEnterHystr =%d
FenceWifiScannerExitHysteresis
dCOLLECT: fWifiScannerExitHystr =%d
FenceWifiScannerScanInterval
dCOLLECT: fWifiScannerSecondsBetweenWifiScans =%d
FenceWifiScannerNumIntermediateScans
dCOLLECT: fWifiScannerOverScan =%d
FenceWifiScannerShowUINotifications
dCOLLECT: fWifiScannerShowUINotifications = %d
WifiBlackListedAp
WIFI: gBlackListedAP = %s
dCOLLECT: fWifiScannerOverScan can't be zero, or less than zero, %d
CLWifiService scanning
could not create dpc source
WifiMaxAge
WifiPassiveScansOnly
forcing to use passive WiFi scans only
virtual bool CLWifiService::unregisterForNotificationInternal(const CLWifiService_Type::Notification &)
WRTT: no active listeners
virtual bool CLWifiService::getPower(bool &)
fDpcSource is NULL - shutting down?
bool CLWifiService::queryPowerState(bool &)
void CLWifiService::setExitAndEntryScanNetworks(const std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &)
setExitAndEntryScanNetworks, entry, %lu, exit, %lu
FenceEnableWifiTracking
void CLWifiService::processTrackingAndPower()
Overriding fence WiFi tracking enabled to %d
WiFi tracking available now %d (was %d) (%d %d)
Start
Stop
WltNotify, Scanner, %s
starting scanner
stopping scanner
void CLWifiService::resetScanner()
dCOLLECT: resetScanner
void CLWifiService::setScannerEntryScanNetworks(const std::vector<CLWifiService_Type::AccessPoint> &)
dCOLLECT: Set EntryNetworks, entryListSize, %3lu, %3lu
dCOLLECT: EntryNetworks, Index, %2zu, %2lu, mac, %s
void CLWifiService::setScannerExitScanNetworks(const std::vector<CLWifiService_Type::AccessPoint> &)
dCOLLECT: Set ExitNetworks, exitList, %3lu, %3lu
dCOLLECT: ExitNetworks, Index, %2zu, %2lu, mac, %s
scanStats, numOfScan, S1, 
, S2, 
, Fast, 
, Cached, 
, numOfScanErrors, 
, numOfScanBusies, 
, numOfReceivedScans, 
virtual bool CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
virtual bool CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::removeClient(int) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
virtual bool CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
virtual void CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::listClients() [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]
Td,N,V_kvalue
Td,N,V_kvalueTrack
Td,N,V_score
com.apple.locationd.Motion
Calorimetry
Motion
Pocket
Orientation
EarGesture
WakeGesture
DeviceMotion
Sensors
Compass
Gyro
Accel
Fall
com.apple.locationd.Position
Position
Proximity
GeneralCLX
WifiPosition
GeoFencing
Gnss
Emergency
com.apple.locationd.Core
Client
Core
Harvester
com.apple.locationd.Utility
Database
Utility
com.apple.locationd.Legacy
Sensor
Fence
int declinationCalc(const float, const float, const float, const float, GeomagneticData *)
could not open geomagnetic data file
geomagnetic data file appears to be empty
geomag() encountered an error
geomg1() encountered an error
9999
%d%d%f%f%f%f
LogMotionStateReplay
CLMotionStateSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Context/CLMotionState.mm
-[CLMotionStateAdapter beginService]
CLMotionState::CLMotionState(CLSilo *)
DisableMotionStateNotifyDefaultsWrite,%d
virtual bool CLMotionState::registerForNotificationInternal(const CLMotionState_Type::Notification &)
DOMINANT ACTIVITY: start monitoring dominant activity
virtual bool CLMotionState::unregisterForNotificationInternal(const CLMotionState_Type::Notification &)
DOMINANT ACTIVITY: stop monitoring dominant activity
DisableMotionStateNotify
virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::listClients() [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLFileUpdate
CLFileUpdate::CLFileUpdate(CLSilo *, OnUpdated, void *)_block_invoke
Ignore reachability on nearby Companion
data reachability is not available - not downloading %s
could not download from %s to %s
void CLFileUpdate::onDownloaded(CLFileDownload *, bool)
***could not rename %s to %s***
download completed to %s
could not get modified time for %s
data reachability is not available - not retrying %s
retry count %d, will re-download for %s after delay of %f
virtual bool CLFileUpdate::setUpdateSource(const char *, const char *, const CFTimeInterval &)
%s downloading in progress, cannot change update settings
FileUpdate.
.temp
virtual bool CLFileUpdate::setUpdateRate(const CFTimeInterval &, const CFTimeInterval &)
update rate %.3fs is shorter than WiFi update rate %.3fs - overriding WiFi update rate
virtual int CLDataSourceSerial::processError()
"%s"
virtual int CLDataSourceSerial::processRead()
could not read from %s (errno 0x%x)
virtual int CLDataSourceSerial::processWrite()
"%s": Failed to write entire buffer! (errno 0x%x) written=%d, processed=%d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/IO/CLDataSourceSerial.cpp
virtual int CLDataSourceSerial::stop_nl()
virtual int CLDataSourceSerial::open_nl()
failed to open device "%s" with fd %d
virtual int CLDataSourceSerial::forceClosing_nl()
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/IO/CLDataSourceBuffered.cpp
virtual char *CLDataSourceBuffered::getReadBuffer_nl() const
virtual int CLDataSourceBuffered::getReadBufferLength_nl() const
virtual int CLDataSourceBuffered::processRead_nl(unsigned int)
"%s": Out of buffer space!
CLGyroCalibrationDatabaseLocalBase
CLGyroCalibrationDatabaseRemote
virtual bool CLGyroCalibrationDatabase::getGyroStats(CLMotionTypeRotationRate &, CLMotionTypeRotationRate &, CLMotionTypeRotationRate &, bool)
Warning: Not implemented.
virtual int CLGyroCalibrationDatabase::getMaxDynamicTemperature()
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/PeerRanging/CLPeerRangingManager.mm
!isIMac
CLPeerRangingManager::CLPeerRangingManager(CLPeerRangingManagerDelegate &, bool, bool, bool)
WRTT: device type,%{public}d
void CLPeerRangingManager::requestRanging(const CLPeerRangeRequest &)
WRTT: request while wifi is off!
WRTT: mgr received request as initiator, timeout, %{public}lf [s]
WRTT: mgr received request as target
void CLPeerRangingManager::cancelRanging(const CLPeerRangeRequest &)
WRTT: mgr received cancel session
void CLPeerRangingManager::onTimerFired()
WRTT: timed out
void CLPeerRangingManager::onWifiPower(bool)
WRTT: WiFi power %{public}s
NSData *CLPeerRangingManager::findKeyID(const CLMacAddress &)
Multiple Peers in request with matching mac address, %s
void CLPeerRangingManager::onWifiRangeMeasurements(const std::vector<CLWifiRangeResult> &)
WRTT: RTT measurements for %{public}ld peer(s)
WRTT: error status code %{public}d (%{public}#x) reported from WiFi, report kCLErrorPrivateRangingLowLevelError
WRTT: no individual measurements in burst
WRTT,range,%f
void CLPeerRangingManager::onWifiError(NSString *, NSInteger, const std::vector<CLRangingPeerInternal> &)
WRTT: recieved Wifi error %{public}ld for %{public}ld peers
void CLPeerRangingManager::onWifiError(NSString *, NSInteger, const std::vector<CLWifiRangeResult> &)
CLIdentity
CLCompanionNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Companion/CLCompanionNotifier.mm
-[CLCompanionNotifierAdapter beginService]
CLCompanionNotifier
CLCompanionNotifier::CLCompanionNotifier(CLSilo *)
CLCompanionNotifier is being constructed
CompanionStateSyncInterval
v8@?0^{CLDataProtectionManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBii@}4
v12@?0S4@"NSData"8
SimulateCompanionPackets
virtual CLCompanionNotifier::~CLCompanionNotifier()
CLCompanionNotifier is shutting down
iPhone5
iPhone6
iPhone8,4
Watch1
void CLCompanionNotifier::sendCompanionMessage(CLCompanionNotifier_Type::Type, NSData *, IDSMessagePriority, BOOL, BOOL, BOOL, CFTimeInterval) const
Sending message,type,%d,size,%lu,priority,%ld,fireAndForget,%d,encrypt,%d,bypassConnectionCheck,%d,timeout,%f
void CLCompanionNotifier::setStateSyncTimer(bool)
timer interval,%f
void CLCompanionNotifier::connectionUpdate(bool)
IDS connection update,status,%d,prevDisconnection,%f,modelID,%s,uniqueIDOverride,%s,localDeviceID,%s
void CLCompanionNotifier::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
void CLCompanionNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)
virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::removeClient(int) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
virtual bool CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
virtual bool CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
virtual bool CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
virtual void CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::listClients() [Notification_T = CLCompanionNotifier_Type::Notification, NotificationData_T = CLCompanionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLCompanionNotifier_Type::RegistrationInfo]
Counts
ROWID
void CLSqliteDatabase::logStmtStatus(sqlite3_stmt *, bool)
Query: %s, full table scans: %d, sorts: %d, File: %s
DatabaseIdentifier
SELECT * FROM DatabaseIdentifier;
INSERT INTO DatabaseIdentifier (uuid) VALUES ("
_encryptedA
_encryptedB
_encryptedC
:memory:
factory
_unencrypted
consolidated
gyroCal
timezone
lockCache
AUTOINCREMENT
Index
CREATE INDEX 
 ON 
DROP INDEX 
DROP TRIGGER 
IncrementRowCount
DecrementRowCount
Increment
Decrement
INSERT
CREATE TRIGGER IF NOT EXISTS 
RowCount
 AFTER 
 FOR EACH ROW BEGIN
 UPDATE 
1 WHERE rowid=1; END
SELECT COUNT(*) FROM 
 VALUES (
SELECT sql FROM 
=? AND 
SELECT name FROM 
 WHERE name='
PRAGMA table_info(
_tmp
CREATE TEMPORARY TABLE 
 SELECT 
DROP TABLE 
dstName
CREATE TABLE 
DROP TABLE IF EXISTS 
INSERT 
OR REPLACE 
INTO 
) VALUES (?
) VALUES (
WHERE 
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLSqliteDatabase.mm
sqlite3_stmt *CLSqliteDatabase::prepareStatementNoCache(const char *) const
void CLSqliteDatabase::cacheStatement(sqlite3_stmt *)
BEGIN TRANSACTION
END TRANSACTION
fTransactionCount == 0
int CLSqliteDatabase::endTransaction()
No valid connection to CLSqliteDatabase database.
no database
sqlite3_step()
sqlite3_reset()
com.apple.locationd.CLSqliteDatabase.vacuum
VACUUM
pragma incremental_vacuum
pragma page_count;
pragma freelist_count;
pragma secure_delete = 1;
pragma secure_delete = 0;
pragma auto_vacuum = 2;
pragma auto_vacuum = 0;
pragma auto_vacuum;
CREATE VIRTUAL TABLE 
 USING 
INTEGER
FLOAT
BLOB
NULL
TEXT
, PRIMARY KEY (
std::string CLSqliteDatabase::getCurrentErrorMessage() const
No database
 PRIMARY KEY
 AUTOINCREMENT
TableName
SoftwareVersion
SerialNumber
TableInfo
table
sqlite_master
Type
CLDaemonStatusSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLDaemonStatus.mm
-[CLDaemonStatusAdapter beginService]
CLDaemonStatus
v8@?0^{CLWifiService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFNumber}^{__CFNumber}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}BiiBBI{array<CLMacAddress, 3>=[3{CLMacAddress=Q}]}iI^{__CFRunLoopSource}^v^v^vBddddcd{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}^{__CFArray}^{__CFArray}B{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}@BBBiiiiidi{ScanStats=III[17I]}Bd{map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint> > >={__tree<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true> >=L}}}{map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint> > >={__tree<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true> >=L}}}{map<CLMacAddress, bool, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, bool> > >={__tree<std::__1::__value_type<CLMacAddress, bool>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, bool>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, bool>, std::__1::less<CLMacAddress>, true> >=L}}}iidI^{__CFRunLoopTimer}{BasicMutex=^^?^{MutexInfo}}{unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal> >={__compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal> >=^{IExternal}}}}4
void CLDaemonStatus::airplaneModeChanged()
airplane mode not supported on non-embedded
void CLDaemonStatus::onPowerNotification(io_connect_t *, io_service_t, natural_t, void *)
PM Connection not the same as in the instance class
system has powered on
#warning No sleep state tranaction on has powered on
system can sleep request
system entering sleep
Already holding sleep state transaction on will sleep
CLDaemonStatus.sleeping
system will power on
system exiting sleep
#warning No sleep state tranaction on will not sleep
void CLDaemonStatus::migrationPerformed()
Notifying clients that migration is being performed
virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::listClients() [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
$GPGGA
$GPGSA
$GPGSV
$GPRMC
$PASCD
$PAGCD
$GPHDT
CLNmeaSentenceType CLNmeaParserParseSCD(CLNmeaData *, const char *, int)
STARK,PASCD,invalid fields
STARK,PASCD,invalid timestamp
STARK,PASCD,invalid sensorType
STARK,PASCD,invalid transmissionState
STARK,PASCD,invalid sampleCount
STARK,PASCD,sampleCount==0
STARK,PASCD,invalid sampleCount,%d,max,%d
STARK,PASCD,unexpected empty timeOffset field
STARK,PASCD,unexpected empty sample field
CLNmeaSentenceType CLNmeaParserParseGCD(CLNmeaData *, const char *, int)
STARK,PAGCD,invalid fields
STARK,PAGCD,invalid timestamp
STARK,PAGCD,invalid sampleCount
STARK,PAGCD,invalid sampleCount,%d,max,%d
STARK,PAGCD,invalid sample time offset
STARK,PAGCD,invalid sample set, all empty
CLNmeaSentenceType CLNmeaParserParseHDT(CLNmeaData *, const char *, int)
STARK,GPHDT,invalid fields
STARK,GPHDT,invalid heading
STARK,GPHDT,invalid degrees true indication
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Framework/CoreMotion/CMSwimData.mm
<Unknown File>
Invalid parameter not satisfying: %@
sourceId && sessionId && startDate && endDate && strokeType < kCMSwimStrokeTypeMax
sessionId
Freestyle
Backstroke
Breaststroke
Butterfly
Mixed
%@, <sessionId %@, startDate %@, endDate %@, strokeCount %lu, distance %.2f, avgPace %.2f, lapCount %lu, strokeType %@>
supportsSecureCoding
TB,R
TI,R,N
sourceId
T@"NSUUID",R,N
startDate
T@"NSDate",R,N
endDate
strokeCount
Td,R,N
avgPace
lapCount
strokeType
kCMSwimDataCodingKeyRecordId
kCMSwimDataCodingKeySourceId
kCMSwimDataCodingKeySessionId
kCMSwimDataCodingKeyStartDate
kCMSwimDataCodingKeyEndDate
kCMSwimDataCodingKeyStrokeCount
kCMSwimDataCodingKeyDistance
kCMSwimDataCodingKeyAvgPace
kCMSwimDataCodingKeyLapCount
kCMSwimDataCodingKeyStrokeType
HARMAN
MIB2
CLU4_MMX2_VW
CLU4_MMX2_SK
CLU4_MMX2_SE
+[CLAccessoryObserverHelper isBlackListedAccessory:name:model:serialNumber:firmware:hardwareRevision:]
Rejecting blacklisted accessory: HARMAN
VOLKSWAGEN AG
MIB STD
1.0.0
EP.2015.1
Rejecting blacklisted accessory: Volkswagen AG, 1.0.0
SKODA AUTO a.s.
SEAT S.A.
2.0.0
Rejecting blacklisted accessory: Volkswagen AG, 2.0.0
BENTLEY
AISIN
CLU5_
Rejecting blacklisted accessory: BENTLEY
https://gs-loc.apple.com/clls/wloc
T@"NSArray",&,N,V_data
requester
T@"CLALSRequester",&,N,V_requester
-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]
query: response, tag, %d, RTT, %.3fs, gsmCells, %lu cdmaCels, %lu, lteCells, %lu, scdmaCells, %lu, wifis, %lu
WltALS, reply, %lu, tag, %d, RTT, %.1fs
GnrALS, reply, %d, cellGLCS, %lu, %lu, %lu, %lu, wifi, %lu, RTT, %.1fs
-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke
GnrWifi, background, 0, reply
didReceiveResponse
-[ALSLocationDelegate requester:didReceiveResponse:forRequest:]_block_invoke_2
query: received unknown cdma index %d, %lu, cell, %s, location, %s
query: received cdma index %d, %lu, cell, %s, location, %s
query: received unknown lte index %d, %lu, cell, %s
query: received lte index %d, %lu, cell, %s, location, %s
requesterDidFinish
-[ALSLocationDelegate requesterDidFinish:]
download payload size is %lu bytes
-[ALSLocationDelegate requester:didFailWithError:]
query: response_error, domain %s code %ld
WltALS, error, tag, %d, RTT, %.1lf, error, %s, %ld, type, %c%c
GnrALS, error, tag, %d, RTT, %.1lf, error, %s, %ld, type, %c%c
-[ALSLocationDelegate requester:didFailWithError:]_block_invoke
GnrWifi, background, 0, error
query: received error for unknown requester type (tag %d)
didFailWithError
-[ALSLocationDelegate processCells:inRange:timeReceived:requestType:tag:]_block_invoke
query: unknown cell - MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
-[ALSLocationDelegate processScdmaCells:inRange:timeReceived:requestType:tag:]_block_invoke
query: unknown scdma cell - MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
-[ALSLocationDelegate processWireless:inRange:timeReceived:requestType:tag:]
zero entries in range to process
query: received wifiResponse, %lu, unknown wifi - MAC, %s, infoMask, 0x%x, hasInfoMask, %d
AppleLocationServer
AppleLocationServer_Nearby
AppleLocationServerRequiresCert
AppleLocationServerTimeout
AppleLocationServerRequestLog
AppleLocationServerResponseLog
CLNetworkLocationRequesterALS::CLNetworkLocationRequesterALS(const CLNetworkLocationRequester::Listener &, CLSilo *)
query: server %s / %s (requires cert %d timeout %d log request %d / response %d)
final
virtual int CLNetworkLocationRequesterALS::queryLocation(const CLDaemonLocation &, int, CLTelephonyService_Type::RadioAccessTechnology)
query: queryLocation, location, %14.8lf, %14.8lf, timeout, %d
query: could not get client certificates
query: using client-side cert
queryLocation
query: queryLocation, tag, %d, location, %14.8lf, %14.8lf, timeout, %d, payload, %lu, reachability, %d
GnrALS, request, %d, location, %0.2lf, %0.2lf, reach, %d
virtual int CLNetworkLocationRequesterALS::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLMacAddress> &, int)
query: unifiedQuery, %lu, %lu, %lu, %lu, wifis, %lu, timeout, %d
query: don't have derivedMcc - using %d
Bytes: query: unifiedQuery, query, cell-cdma, index, %u, %lu, key, %s
query: Adding single derivedMcc %d
query: Adding multi derivedMcc %d
query: max cells %d exceeded for cell %d - not querying %03d %03d %03d %03d %03d %03d %03d%03d 
Bytes: query: unifiedQuery, query, cell-gsm, index, %u, %lu, key, %s
query: max cells %d exceeded for cell %d - not querying MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
Bytes: query: unifiedQuery, query, cell-scdma, index, %u, %lu, key, %s
query: max cells %d exceeded for cell-scdma %d - not querying MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
Bytes: query: unifiedQuery, query, cell-lte, index, %u, %lu, key, %s
query: ignore cell, max cells %d / %d exceeded for cell, %s
Bytes: query: unifiedQuery, query, wifi, index, %u, %lu, key, %s
query: max wifis %d exceeded for wifi %d - not querying MAC,%s,
unifiedQuery
Bytes: query: tag, %d, GSMs, %lu, CDMAs, %lu, LTEs, %lu, surrounding, %lu, wifis, %lu, surrounding, %lu, payload, %lu, reachability, %d
WltALS, request, %lu, surrounding, %lu, tag, %d
GnrALS, request, %d, cellGLC, %lu, %lu, %lu, %lu, wifi, %lu, %lu, reach, %d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Network/CLNetworkLocationRequester.h
virtual void CLNetworkLocationRequester::onResponse(const CFTimeInterval &, const CFDictionaryRef, RequestType, int)
virtual void CLNetworkLocationRequester::onCellLocationSeries(RequestType, int, void (^)())
virtual void CLNetworkLocationRequester::onLocationError(RequestType, int)
virtual void CLNetworkLocationRequester::onNearbyError(RequestType, int)
virtual void CLNetworkLocationRequester::onFinished(RequestType, int)
virtual void CLNetworkLocationRequester::onWifiLocationSeriesComplete(const std::vector<CLAlsWifiAccessPoint> &, const std::vector<CLAlsWifiAccessPoint> &, RequestType, int)
virtual int CLNetworkLocationRequester::unifiedQuery(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLMacAddress> &, int)
Unimplemented CDMA NetworkLocationRequester
virtual int CLNetworkLocationRequester::queryLocation(const CLDaemonLocation &, int, CLTelephonyService_Type::RadioAccessTechnology)
nearby data query not supported
static void CLLocationCalculator::calculateWifiCentroidRssiMaxreach(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, double)
WIFI_LOC: filtered by location hint, ap, %s, hint, %s
WIFI_LOC: revert hint, %lu, %lu
WIFI_LOC: apply b360repr, min, %.1lf, max, %.1lf
WIFI_LOC: apply b360repr, %14.8lf, %14.8lf
Altitude
VerticalAccuracy
Course
Confidence
Score
Reach
Boxes
ClearDatabaseTablesByAge
void CLLocationDatabase::prepareStatements()
Overriding clear tables by age to %d for %s
 WHERE rowid=
bool CLLocationDatabase::getLocation(const sqlite3_int64 &, CLDaemonLocation &) const
could not bind
Bounding boxes not enabled for this database
bool CLLocationDatabase::setBoundingBox(const sqlite3_int64 &, const CLDaemonLocation &)
Couldn't bind row ID %lld
can't create bounding box for location, %s
) VALUES (?, ?, ?, ?, ?)
Couldn't bind bounding box %lld (<%+.8f,%+.8f>,<%+.8f,%+.8f>)
Could not prepare cached insert statement
could not bind %.3f <%+.8f,%+.8f> %.2f
UPDATE OR REPLACE 
=?, 
bool CLLocationDatabase::setLocation(const sqlite3_int64 &, const CLDaemonLocation &)
Could not prepare cached update statement
failed to setLocation, numModRows, %d, %s
bool CLLocationDatabase::clearLocation(const sqlite3_int64 &)
Can't clear location for read-only database
could not bind %lld
static void CLLocationDatabase::clearLocations(CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &, bool)
Can't clear locations in read-only database
static void CLLocationDatabase::clearLocationsByAge(const CFTimeInterval &, CLSqliteDatabase &, const CLSqliteDatabase::SqliteProperties &, const std::string &)
Can't clear locations by age in read-only database
 < ? OR 
 > ?
Clearing locations older than %.3f from %s
%lld total entries deleted
Performing incremental vacuum on %s
void CLLocationDatabase::prepareBoundingBoxTable()
No associated bounding box table
DeleteBoundingBoxes
 AFTER DELETE ON 
 DELETE FROM 
= OLD.
; END
Couldn't create bounding box deletion trigger for table %s
rtree
%s, %s, %s, %d, %s, %f, %s, %f
void CLSuggestedActionDatabase::initDatabase()
initalizing database table, %s
INSERT OR REPLACE INTO %s (%s) VALUES (%s)
SELECT * FROM %s WHERE %s == ?
SELECT * FROM %s
DELETE FROM %s
DELETE FROM %s WHERE %s <= ?
ResultCode CLSuggestedActionDatabase::setRecord(const CLSuggestedActionRecord &)
issue getting scoped statement
set suggested action, %s
ResultCode CLSuggestedActionDatabase::getRecord(std::string, CLSuggestedActionRecord &)
cannot get record of suggested action without identifier
ResultCode CLSuggestedActionDatabase::deleteAllRecordsNotConsideredSince(CFAbsoluteTime)
delete all suggested actions not considered since, %f
suggestedCount
lastSuggestedTimestamp
lastConsideredTimestamp
SuggestedAction
CMGyroBiasEstimatorImpl<false>::CMGyroBiasEstimatorImpl() [relaxed = false]
CMGyroBiasEstimator::CMGyroBiasEstimator: cold start
CMGyroBiasEstimator::CMGyroBiasEstimator: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e
void CMGyroBiasEstimatorImpl<false>::reset(const uint64_t) [relaxed = false]
CMGyroBiasEstimator::reset: cold start
CMGyroBiasEstimator::reset: warm start [%f < %f]
CMGyroBiasEstimator::reset: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e
virtual void CMGyroBiasEstimatorImpl<false>::biasFitReset() [relaxed = false]
CMGyroBiasEstimator::CMGyroBiasEstimator: biasFitReset
void CMGyroBiasEstimatorImpl<false>::notifyClients(uint64_t) [relaxed = false]
CMGyroBiasEstimator::feedGyro: converged!
CLTimeZoneDatabase
bool CLTimeZoneDatabase::getTimeZoneAndDistance(const CLDaemonLocation &, std::string &, double &)
Couldn't get time zone for point <%+.8f,%+.8f>
Point <%+.8f,%+.8f> not in any time zone polygon; closest polygon is %f meters away; default time zone is %s, but we're not using it
Not in any polygons; falling back to closest nearby time zone ID %lld (distance %f, %ld possibilities)
Point <%+.8f,%+.8f> not in any time zone polygon; default time zone is %s, but we're not using it
Point <%+.8f,%+.8f> in multiple time zone polygons
Could not get time zone name for zone ID %lld
BoundingBoxes
MinimumLatitude
MaximumLatitude
MinimumLongitude
MaximumLongitude
Names
ZoneName
Points
ZoneID
PointID
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLPolygonDatabase.mm
CLPolygonDatabase::CLPolygonDatabase(const CLSqliteDatabase::SqliteProperties &)
bool CLPolygonDatabase::polygonsAndDistancesForPointWithUncertainty(const double &, const double &, const double &, std::vector<std::pair<sqlite3_int64, double> > &, const bool &)
Couldn't get list of candidates for point <%+.8f,%+.8f>
Couldn't determine if point <%+.8f,%+.8f> is in polygon %lld
bool CLPolygonDatabase::polygonCandidatesForPointWithUncertainty(const double &, const double &, const double &, std::vector<sqlite3_int64> &)
Getting polygons for point <%+.8f,%+.8f> acc %.2f
fBoundingBoxesSelectNearbyStatement not available - rtree module missing or db unavailable
Ignoring bogus location <%+.8f,%+.8f>
Could not bind <%+.8f,%+.8f> - <%+.8f,%+.8f>
bool CLPolygonDatabase::getPolygonName(const sqlite3_int64 &, std::string &)
fNamesSelectStatement not available - rtree module missing or db unavailable
Could not bind %lld
Could not get polygon name
No entry in names table for polygon ID %lld
bool CLPolygonDatabase::getPolygonId(const std::string &, sqlite3_int64 &)
fNamesSelectOnNameStatement not available - rtree module missing or db unavailable
Could not bind %s
Polygon %s not found in names table
bool CLPolygonDatabase::pointInPolygon(const std::string &, const double &, const double &, bool &, double &)
No bounding box found for polygon %s
bool CLPolygonDatabase::pointInPolygon(const sqlite3_int64 &, const double, const double, bool &, double &)
fPointsSelectStatement not available - rtree module missing or db unavailable
No points data found for polygon Id %lld
<=? AND 
CLTimeManagerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLTimeManager.mm
-[CLTimeManagerAdapter beginService]
virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTimeManager_Type::Notification, NotificationData_T = CLTimeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual CLMetsInfo CLNatalieDummyModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, Static, step count: %d, step distance: %f, activity: %d, type: %d, vm: %f
CLLocationControllerSilo
TI,R
T#,R
debugDescription
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/CLLocationController.mm
-[CLLocationControllerAdapter beginService]
Assert Failed, %s, %d
Location %s
locationd assert: %s, %d
bool PropagationDataHistory::shallPropagate(const double)
%.2lf,shallPropagate,fLastVelocityNotificationTime,%.2lf,fLastAccessoryLocation,%.2lf,fLastGPSLocationTime,%.2lf
void PropagationDataHistory::saveData(const CLLocationProvider_Type::NotificationData &)
Save GPS time,%.1lf
Saved Accessory location at time,%.1lf,%d,%.8lf,%.8lf
controller
RescalePipelinedRadiusForComparisonOnly
DynamicLocationProviders
ForcedHorizontalAccuracy
DisableIntegrityMonitoring
CLLocationController::CLLocationController(CLSilo *)
Integrity Monitoring is Disabled
GpsWifiKeepAlive
GpsWifiKeepAlive is no longer supported! If you want to leave all providers actively subscribed to, set DynamicLocationProviders to false
UseLocationKFAsDefaultProvider
UseLocationKFAsDefaultProvider is set
EnableMapMatching
CLMM, EnableMapMatching, %d
ForceMapMatching
CLMM, ForceMapMatching, %d
GpsConformanceTestMode
Warning: Conformance mode is enabled, this disables client based GPS applications.
GPS Conformance Mode
NotifyAllLocations
dynamic location providers %d, accuracy %.2f, gps test mode %d, always notify %d
EnableRavenEstimator
UseRavenEstimatorOutput
RAVEN: Use Raven Estimator Output: %d
IgnoreDenseUrbanCheck
RAVEN: Ignore Dense Urban Check: %d
ForceRavenEstimatorPedestrianMode
RAVEN: Force Pedestrian Mode: %d
EnableRavenEstimatorLogger
RAVEN: Logging: %d
EnableRavenDataFeed
RAVEN: Data Feed: %d
EnableRavenStepCountFeed
RAVEN: Enable Step Count Feed: %d
EnableRavenAltimeterFeed
RAVEN: Enable Altimeter Feed: %d
RAVEN: Raven Estimator Enabled: %d
could not create tech status run loop source
could not create check active run loop source
CLLC
virtual bool CLLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &)
Registration
notification
virtual bool CLLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)
virtual bool CLLocationController::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)
virtual bool CLLocationController::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)
CLIENT: registerForNotificationInternal, notification, %d, %s, granularity, %d
Before register, required granularity is %d; active granularity is %d
BATCH: unsupported platform
CLMM, RunMapMatching is turned on
registering notification %d with %s location provider
wifi location batch, unsupported platform
CLIENT: registerForNotificationInternal, propagate desiredAccuracy, %.1lf, name, %s, active, %d, operating mode %d
virtual bool CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)
CLIENT: unregisterForNotificationInternal, notification, %d, %s, granularity, %d
Unregistered for notification %d; new required location granularity is %d
After unregister, required granularity is %d; active granularity is %d
CLMM, RunMapMatching is turned off
unregistering notification %d with %s location provider
CLIENT: unregisterForNotificationInternal, propagate desiredAccuracy, %.1lf, name, %s, active, %d
void CLLocationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Device going to sleep, stop location unavailable timer
Device wake setting location unavailable timer to fire at %.3f
Unhandled status notification %u
void CLLocationController::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
void CLLocationController::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
Local
virtual void CLLocationController::start()
@ClxVersion, Init, os, %{public}s, model, %{public}s, build, %{public}s, triage, %{public}d
v8@?0^{CLWifiLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{unique_ptr<CLWifiLocationProvider::IExternal, std::__1::default_delete<CLWifiLocationProvider::IExternal> >={__compressed_pair<CLWifiLocationProvider::IExternal *, std::__1::default_delete<CLWifiLocationProvider::IExternal> >=^{IExternal}}}{WifiLocationState={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iiddddd{map<CLWifiService_Type::AccessPoint, CLWifiAPLocation, std::__1::less<CLWifiService_Type::AccessPoint>, std::__1::allocator<std::__1::pair<const CLWifiService_Type::AccessPoint, CLWifiAPLocation> > >={__tree<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::__map_value_compare<CLWifiService_Type::AccessPoint, std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::less<CLWifiService_Type::AccessPoint>, true>, std::__1::allocator<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLWifiService_Type::AccessPoint, std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::less<CLWifiService_Type::AccessPoint>, true> >=L}}}{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}di{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLWifiLocationUpdateRequest=iBdiB}ii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}IIiBddddddd}i^{__CFRunLoopTimer}dBB{vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}{__compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > *, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}}}{set<CLMacAddress, std::__1::less<CLMacAddress>, std::__1::allocator<CLMacAddress> >={__tree<CLMacAddress, std::__1::less<CLMacAddress>, std::__1::allocator<CLMacAddress> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMacAddress, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMacAddress> >=L}}}id@B{CLDistanceCalc=ddddd}BB{CLMotionActivity=iiiiBfdBiddii}BBddi{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{optional<CLWifiAPLocation>=(?=c{CLWifiAPLocation={CLMacAddress=Q}dddddiiIdiidB{RuntimeMetadata=B}})B}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLProcessWifiScanResults::IExternal, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >={__compressed_pair<CLProcessWifiScanResults::IExternal *, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >=^{IExternal}}}{CLProcessWifiScanResults={unique_ptr<CLProcessWifiScanResults::IExternal, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >={__compressed_pair<CLProcessWifiScanResults::IExternal *, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >=^{IExternal}}}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}B}4
v8@?0^{CLSimulatedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB}4
CLWifiLocationProvider
v8@?0^{CLUnifiedCellLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFRunLoopSource}B{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}BB^{CLPersistentTimer}}4
CLUnifiedCellLocationProvider
v8@?0^{CLNmeaLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?^{CLDataSource}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}ddd}4
CLNmeaLocationProvider
v8@?0^{CLAccessoryLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFRunLoopTimer}{CLAccessoryHeadingCorrector=iddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client> >={__compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client> >=^{Client}}}BBB{GgaRmcInfo=iB}dddiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB}4
CLAccessoryLocationProvider
CLSimulatedLocationProvider
virtual void CLLocationController::shutdown()
shutting down %s location provider
void CLLocationController::startLocation(const CLLocationController::Granularity &)
Starting all location providers up to threshold %d, desiredAccuracy, %.1lf
@ClxProvider, start, %s, granularity, %d, active, %d, desiredAccuracy, %.1f
Not starting %s location provider; doesn't meet threshold requirements (fRequiredLocationGranularity=%d, fActiveLocationGranularity=%d)
void CLLocationController::stopLocation(const CLLocationController::Granularity &)
Stopping all location providers above threshold %d
@ClxProvider, stop, %s, granularity, %d, active, %d, desiredAccuracy, %.1f
void CLLocationController::stopLessDesirableProviders(const CLLocationController::DynamicLocationProvider &, bool)
Stopping all location providers that are worse than kDynamicLocationProvider %d
got better location provider %d,NOT stopping worse location provider %d,isAccessorySpecialCase,1
got better location provider %d, stopping worse location provider %d
void CLLocationController::restartLessDesirableProviders(const CLLocationController::DynamicLocationProvider &)
lost location from kDynamicLocationProvider=%d, restarting all worse providers
restarting worse location provider kDynamicLocationProvider=%d
void CLLocationController::startLocation(LocationProvider, const CLLocationController::Granularity &)
CLIENT: startLocation, registerForNotification, start reg info, client, %p, desiredAccuracy, %.1lf, name, %s
registering %s location provider as a bystander only
starting %s location provider in mode %d
void CLLocationController::stopLocation(LocationProvider)
Unregistering %s location provider as bystander
stopping %s location provider
void CLLocationController::onLocationUnavailableTimer(CFRunLoopTimerRef)
catch-all location unavailable timer fired
Location unavailable timer fired, but required granularity is none; ignoring
v8@?0^{CLDaemonStatus=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBII^{IONotificationPort}^{__CFRunLoopSource}^{IONotificationPort}^{__CFRunLoopSource}i^{__SCNetworkReachability}^{__SCDynamicStore}^{__CFRunLoopSource}iB{Battery=dBBiB}^v{set<long, std::__1::less<long>, std::__1::allocator<long> >={__tree<long, std::__1::less<long>, std::__1::allocator<long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<long> >=L}}}@B@ld^vBiii^{__SCPreferences}}4
Location unavailable fired while sleeping
void CLLocationController::onLifespanTimer(CFRunLoopTimerRef)
Lifespan timer fired
Lifespan timer fired, but required granularity is none; ignoring
Current location is not expired; not searching for alternative locations
CL-lifespanReIssue
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf
bool CLLocationController::notifyLocationUnavailable(LocationProvider)
could not find provider from list
Got location unavailable notification for non-active provider %s; ignoring
Got location unavailable notification for %s location provider
location still available from %s (potentially <%+.8f,%+.8f> lifespan %.3fs age %.3fs)
No location is available from any provider; notifying clients
bool CLLocationController::shouldNotify(CFAbsoluteTime, LocationProvider, const CLLocationProvider_Type::NotificationData &)
Got location <+%.8f,%+.8f> for non-active location provider %s; ignoring
Got future location <+%.8f,%+.8f> from provider %s (age %.3fs); correcting to %.3fs
Got expired location <+%.8f,%+.8f> from provider %s (age %.3fs lifespan %.3fs); ignoring
current most confident provider is %s at %d
new %s location <+%.8f,%+.8f> acc %.2f conf %d conflicts with confident %s location <+%.8f,%+.8f> acc %.2f conf %d from %.3fs ago (distance %.2fm)- discarding
new %s location <+%.8f,%+.8f> acc %.2f conf %d conflicts with current %s location <+%.8f,%+.8f> acc %.2f conf %d (distance %.2fm) - notifying
new %s location <+%.8f,%+.8f> acc %.2f conf %d is coarser and agrees with current %s location <+%.8f,%+.8f> acc %.2f conf %d (distance %.2fm) - discarding
new %s location <+%.8f,%+.8f> acc %.2f conf %d conflicts with current %s location <+%.8f,%+.8f> acc %.2f conf %d (distance %.2fm) - discarding
new %s location <+%.8f,%+.8f> acc %.2f conf %d is coarser than current %s location <+%.8f,%+.8f> acc %.2f conf %d (distance %.2fm) - discarding
got accessory location,stopping everything less preferred,isAccessoryChinaShifted,%d,isPropagatedSolution,%d
(none)
changing to provider %s from %s
bool CLLocationController::notifyLocation(LocationProvider, const CLLocationProvider_Type::NotificationData &)
location rejected by IM,locationType,%d,lat,%.8lf,lon,%.8lf
CL-filtered
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d
location rejected by KF,%d,%.8lf,%.8lf
CL-raven
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.3lf,Course,%.5lf,Confidence,%d,Lifespan,%.3lf,LocationTimestamp,%.3lf,Age,%.3lf,Altitude,%.3lf,AltitudeAccuracy,%.3lf,SpeedAccuracy,%.3lf,CourseAccuracy,%.5lf,timestampGps,%.3lf,integrity,%d
Notifying using Raven; but no location available!
Notifying using location KF; but no location available!
CL-mapmatched
@ClxClient, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d
virtual void CLLocationController::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, bool, int, bool)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,LocationTimestamp,%.3f,Age,%.3f,timestampGps,%.3lf,floor,%d,SpeedAccuracy,%.3lf,CourseAccuracy,%.1lf,integrity,%d,rawLat,%.7lf,rawLon,%.7lf,rawCourse,%.2f,refFrame,%d,rawRefFrame,%d,propagated,%d
Notifying clients of an already-expired location (from %.3fs ago)
void CLLocationController::gpsOdometerHelper(const CLLocationProvider_Type::NotificationData &)
GPSODOM,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf,lat,%.8lf,lon,%.8lf,hunc,%.3lf,alt,%.3lf,vunc,%.3lf,speed,%.3lf,sunc,%.3lf,course,%.3lf,cunc,%.3lf
CL-unfiltered
void CLLocationController::notifyUnfilteredLocation(const CLLocationProvider_Type::NotificationData &)
void CLLocationController::onAccessoryNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Accessory-DR,%.2lf,Propagating accessory solution,lastAccessoryTime,%.2lf,lastGPSTime,%.2lf
Accessory,propagated on-device GPS,lat,%.7lf,lon,%.7lf,hunc,%.1lf
virtual void CLLocationController::setSimulationEnabled(bool)
Setting simulation to %d for all location providers
void CLLocationController::sendTechStatusNotification()
Posting tech status change notification
void CLLocationController::checkActiveProviders()
Notifying clients of providers active update to %d
void CLLocationController::clearAllLocationData()
Clearing all location data from the controller
void CLLocationController::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Location Services reset, clearing local cache
ClxNotify, LpReset, 0
Location Services state changed, clearing local cache
float CLLocationController::getDesiredAccuracy()
CLIENT: clients, %d, %d, %d, desiredAccuracy, %.1lf
void CLLocationController::handleStateEvent(NegativeEvent, bool)
@ClxEvent, %{public}s, %{public}d, last, %{public}.1f
void CLLocationController::checkStateLogging()
@ClxVersion, Timer, os, %{public}s, model, %{public}s, build, %{public}s, triage, %{public}d
ClxSnapshot, %{public}s, %{public}d, last, %{public}.1f
CLLocationController
LOCATION
WifiOff
ApSleep
Locked
NoReach
Unassociated
Airplane
ToggleOff
BatterySaver
Error using Serialize: data type does not support serialization.
Error using Deserialize: data type does not support serialization.
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/System/Library/PrivateFrameworks/CoreNavigation.framework/Headers/cnmatrix/cnmatrix.h
Allocate
operator=
this->max_num_rows_ >= A.num_rows_
d == 1 || d == 2
i.max_num_cols_ >= A.num_cols_
i.max_num_rows_ >= A.num_rows_
in_nr >= 0
in_nc <= max_nc
operator double
num_elements_ == 1
C.max_num_rows_ >= A.num_rows_
&A != &C
operator()
idx < num_elements_
Zeros
this->num_rows_ <= this->max_num_rows_
nr <= Z.MaxNumRows()
WriteValue
&Work != &B
A.num_rows_ == A.num_cols_
Work.max_num_rows_ * Work.max_num_cols_ >= 4 * A.num_rows_
B.max_num_cols_ >= A.num_cols_
this->allocated_data_ != NULL
this->allocated_scratch_ != NULL
A.num_cols_ == B.num_rows_
&(B) != &(C)
RavenConvergenceEstimatorActiveObject
RavenBodyFixedEstimatorActiveObject
null
Attempt to write value multiple times
value
virtual bool CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
virtual bool CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
%s; notification %s not found
map::at:  key not found
%s; listing clients, num clients: %zu
Warning: matrix is singular to working precision.
Error using SetIndexing: trying to set matrix to OneIndexed when CNMATRIX_NO_ONEINDEXING is defined.
CLWifiLocationProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/WiFi/CLWifiLocationProvider.mm
-[CLWifiLocationProviderAdapter beginService]
fMinIntervalBetweenLocationRequests
CLWifiLocationProvider::CLWifiLocationProvider(CLSilo *, std::unique_ptr<IExternal>, std::unique_ptr<CLProcessWifiScanResults::IExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)
WIFI_LOC: fMinIntervalBetweenLocationRequests = %f
fMinIntervalBetweenScanCalculations
WIFI_LOC: fMinIntervalBetweenScanCalculations = %f
EmergencyTestAPs
TlurTest, TestAPs, %d
WIFI_LOC: fIsUseNetworkLocationProvider = %d
IgnoreSignalEnvironment
float CLWifiLocationProvider::getCombinedDesiredAccuracy()
WIFI_LOC: getCombinedDesiredAccuracy, no location clients, desiredAccuracy, %lf
WIFI_LOC: updating reginfo for, client, %d, from clientDesiredAccuracy, %.1lf, desiredAccuracy, %.1lf
WIFI_LOC: getCombinedDesiredAccuracy, returning, desiredAccuracy, %lf
virtual bool CLWifiLocationProvider::updateRegistrationInfoForClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)
WIFI_LOC: wifi, updateRegistrationInfoForClient, desiredAccuracy, %.1lf
virtual bool CLWifiLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)
WIFI_LOC: registerForNotificationInternal, notification, %d, %s, desiredAccuracy, %.1lf
WIFI_LOC: wifi is currently powered on, scanning to get wifi location
WIFI_LOC: wifi is currently powered off, cannot get wifi location
bool CLWifiLocationProvider::isUsePassiveWifiScan()
WIFI LOC: isPassiveScan, %d
void CLWifiLocationProvider::resetAPCollection_nl()
WIFI_LOC: reset
int CLWifiLocationProvider::refreshLocation()
WiFi
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TTF,%.3lf,sinceReg,%.3lf,Confirmed,%d,Altitude,%.2lf,VerticalAccuracy,%.2lf,locationSimulated,%d,notifiedLocationAge,%lf,integrity,%d
@ClxWifi, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0
WIFI_LOC: kNotificationLocationUnavailable, last known, %s
@ClxWifi, Fix, 0, ll, N/A
wifiLocType
scanSize
apsInSolution
int CLWifiLocationProvider::processScanResult(const std::vector<CLWifiService_Type::AccessPoint> &, CLDaemonLocation *, cl::chrono::CFAbsoluteTimeClock::time_point)
TlurEmer, refreshLoc, aps, %d, accu, %0.2f, state, %d
WiFi-CentroidReachRssi
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TotalAPs,%d,SolutionAPs,%d,AccuracyGoal,%.2f,AccuracyMin,%.2f,AccuracyMax,%.2f,Altitude,%.2lf,VerticalAccuracy,%.2lf,
void CLWifiLocationProvider::onWifiTimer(CFRunLoopTimerRef)
WIFI_LOC: onWifiTimer, sinceLastScanRequest, %.1f, lastScanRequestTimestamp, %.1lf, isWifiPowered, %d, erroredRequestType, %d
TlurError, Re-Scan, %d
void CLWifiLocationProvider::wsbCreateScanGroups(const std::vector<CLWifiService_Type::AccessPoint> &, std::vector<std::vector<CLWifiService_Type::AccessPoint> > &)
@WsbGroup, add, %{public}lu, aps, %{public}lu, time, %{public}.1f
@WsbGroup, last, %{public}lu, aps, %{public}lu, time, %{public}.1f
void CLWifiLocationProvider::wsbComputeLocations(const std::vector<std::vector<CLWifiService_Type::AccessPoint> > &, bool)
@WsbCalc, groups, %{public}lu, isReproc, %{public}d, reprocGroups, %{public}lu, unknownAPs, %{public}lu
@WsbIter, AP, %{private}s, time, %{public}.1f, locKnown, %{public}d, hAcc, %{public}.1f, size, %{public}lu
@WsbLoc, fix, aps, %{public}lu, reproc, %{public}d, time, %{public}.3f, hAcc, %{public}.1f, %{public}d, ll, %{private}.3lf, %{private}.3lf
@WsbLoc, none, aps, %{public}lu, %{public}lu, reproc, %{public}d, time, %{public}.3f, hAcc, %{public}.1f
@WsbReproc, drops, groups, %{public}d, aps, %{public}d
@WsbReproc, nofix, groups, %{public}lu, time, %{public}.3f, unknownAPs, %{public}lu, %{public}lu
@WsbReproc, delete, %{public}d, maxAPs, remain, %{public}ld, dropAPs, %{public}d
Invalid batched location, (<%+.8f,%+.8f>)
Batched locations are supposed to be ordered from oldest to more recent,t0,%lf,t1,%lf
@WsbCalc, isReproc, %{public}d, notify, %{public}lu, reproc, %{public}lu, aps, %{public}lu, nextquery, %{public}.1f
Associated
@WsbALS, dtcheck, %{public}.1f, thresh, %{public}.0f
@WsbALS, settime, empty, %{public}.1f
void CLWifiLocationProvider::wsbReprocessGroups(const char *)
@WsbReproc, reason, %{public}s, size, %{public}lu
@WsbReproc, deltick, %{public}.1f, count, %{public}d, dt, %{public}.1f
@WsbReproc, discard, %{public}.1f, count, %{public}d
@WsbReproc, delete, %{public}d, newsize, %{public}lu
void CLWifiLocationProvider::wsbQueryALS(const char *)
@WsbALS, reason, %{public}s, size, %{public}lu, isquery, 1
@WsbALS, query, %{public}s, size, %{public}lu, tag, %{public}d, next, %{public}.1f
bool CLWifiLocationProvider::requestLocationUpdate(CLWifiLocationUpdateRequest)
WIFI_LOC: Wifi powered off
WIFI_LOC: requestLocationUpdate, sinceLastScanRequest, %.1lf, sinceLastScanResult, %.1lf, isWifiPowered, %d, currentRequest, %s
WIFI_LOC: requestLocationUpdate, newRequest, %s, input, %d
WIFI_LOC: aged location request, %s
WIFI_LOC: location request already in progress, requestAge, %.1lf, fWifiScanInterval, %.1lf, currentRequest, %s
WIFI_LOC: reqCheck, inprogress, %d, typecomp, %d, priority, %d, cpi, %d
WIFI_LOC: requestLocationUpdate, allowing another Atypical request, %d, sinceLastScanRequest, %.2lf, %.2lf
WIFI_LOC: cached calculation, numOfAPsInSolution, %d, isStopCriteriaSatisfied, %d, loc, %s
WIFI_LOC, scan request blocked
TlurEmer, Request, %d, urgent, %d, tte, %.1f, type, %s
TlurAssoc, Request, %d, urgent, %d, type, %s
WltStep, ScanReqLoc, %d, %s, incoming, %d
WIFI_LOC: requestLocationUpdate, startScan, %d, %s, isUrgent, %d, lowPriority, %d, isPassiveScan, %d
Frozen
Static
Retry
void CLWifiLocationProvider::setNextScanInterval(const CLMotionActivity &)
WIFI_LOC: In emergency mode, scanning %.2lf
WIFI_LOC: currently associated with, %s, %d, scan interval, %.3lf
WIFI_LOC: setNextScanInterval, fCurrentAssociatedAP, %s
WIFI_LOC: setNextScanInterval, isAssociated, %d, isAssociatedScanInterval, %d, fWifiScanInterval, %.1lf, motion.state, %d, '%s', numOfAPsInScan, %lu
void CLWifiLocationProvider::issueNextScan(CLWifiService_Type::ScanType)
WIFI_LOC: issueNextScan, numOfAPsInSolution, %d, scanType, %d, %s, loc, %s
WIFI_LOC: issueNextScan, currentRequest, %s
TlurState, Skip 2nd scan
WIFI_LOC: issueNextScan, startScan, %d, %s, lowPriority, %d, isPassiveScan, %d
WltStep, ScanReqNext, %d, %s, passive, %d
WIFI_LOC: could not get an accurate wifi location
void CLWifiLocationProvider::scheduleNextTimer(const char *, CFTimeInterval)
WIFI_LOC: scheduleNextTimer, reason, %s, timeInterval, %.2lf
void CLWifiLocationProvider::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
WIFI_LOC: onWifiNotification, notification, %d, kNotificationPower, isWifiPowered, %d
WIFI_LOC: location services are disabled, ignore scan result, notification type, %d
WltNotify, %d, %s, clients S/B, %d, %d
WIFI_LOC: onWifiNotification, notification, %d, kNotificationScanReady, isHaveLocationClients, %d, %d
WIFI_LOC: onWifiNotification, notification, %d, kNotificationScanErrorBusy, isAssociated, %d, isHaveLocationClients, %d, isHighIntegrityInProgress, %d
kNotificationScanError
TlurError, ScanErrorBusy, %s, retry in, %f
WIFI_LOC: onWifiNotification, notification, %d, kNotificationScanCache
WIFI_LOC: onWifiNotification, notification, %d, kNotificationPower
wifiPowerOn
wifiPowerOff
WIFI_LOC: onWifiNotification, notification, %d, kNotificationScan, scanType, %d, %s, inProg, %d
WIFI_LOC: scan result, scanType, %d, %s, currentRequest, %s
TlurCheck, scan notify, erroredRequestType, %d
TlurState, ScanNotify, %s, aps, %lu, state, %d, tte, %.1f
TlurState, unexpected emergency state, onWifiNotification, %d, WARNING
TlurState, Skip Process, %s
WltStep, ScanResultAps, %lu, clients?, %d, doCalc, %d, knownAps, %lu
WIFI_LOC: onWifiNotification, notification, %d, kNotificationScanError
TlurError, ScanError, %s, retry in, %f
WIFI_LOC: terminate current location request, %s
WIFI_LOC: scan failed, scheduling next scan at %.3fs out, type, %d
WIFI_LOC: just disassociated, scanning to update wifi location
kNotificationLinkStatus
WIFI_LOC: Simulation status changed; clearing previous locations and initiating new scan
kNotificationSimulation
WIFI_LOC: unhandled WifiService notification, %d
std::vector<CLWifiService_Type::AccessPoint> CLWifiLocationProvider::accessPointsWithoutCachedLocation(const std::vector<CLWifiService_Type::AccessPoint> &) const
WIFI_LOC: accessPointsWithoutCachedLocation, fIsUseNetworkLocationProvider, %d, fIsUseTileManager, 1, size, %lu, start, locationHint, %s
static std::map<CLWifiService_Type::AccessPoint, CLWifiAPLocation> CLWifiLocationProvider::lookupScanResult(const CLWifiAccessPointLocationService &, const CLDaemonLocation &, const std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, CFAbsoluteTime)
WIFI_LOC: lookupScanResult, foundAPs, %lu, %lu, not_found_APS, %lu
void CLWifiLocationProvider::calculateLocation(CLWifiService_Type::ScanType)
WIFI_LOC: kNotificationScan, numOfAPsInSolution, %d, currentRequest, %s
WIFI_LOC: next scan in, %.3f, seconds
kNotificationScan
void CLWifiLocationProvider::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)
next scan is %.3fs away
kNotificationMovementCoarse
void CLWifiLocationProvider::onSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)
priorSignalEnvironment,%d,newSignalEnvironment,%d
void CLWifiLocationProvider::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
onDataProtectionNotification, %p, notification, %d
Unlock
void CLWifiLocationProvider::onWifiTileDownloadNotification(int, const CLWifiTilesManager_Type::Notification &, const CLWifiTilesManager_Type::NotificationData &)
onTileDownloadNotification, %p, notification, %d
TileDL
void CLWifiLocationProvider::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
void CLWifiLocationProvider::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
WIFI_LOC: onClientNotification, %p, notification, %d
WIFI_LOC: kNotificationReset
@WsbReproc, delete, %{public}ld, reset
WIFI_LOC: kNotificationLocationServicesStatus, areLocationServicesEnabled, %d, wsbgroups, %ld
WIFI_LOC: location services off, delete location state
@WsbReproc, delete, %{public}ld, toggle, %{public}d
TlurEmer, ToggleOn, tte, %.1f
void CLWifiLocationProvider::updateAssociatedAccessPoint(const CLWifiService_Type::AssociationState &)
WIFI_LOC: updateAssociatedAccessPoint: %s
WIFI_LOC: updateAssociatedAccessPoint, check associated AP
WIFI_LOC: updateAssociatedAccessPoint, gotLocation, %d, associatedTo, %s
WIFI_LOC: updateAssociatedAccessPoint, query associated AP, %s, tag, %d
void CLWifiLocationProvider::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)
WIFI_LOC: no location clients, ignoring notification
WIFI_LOC: onNetworkLocationNotification, %d, kNotificationQueryResponseError, tag, %d, %d, %d
WIFI_LOC: location services disabled
WIFI_LOC: onNetworkLocationNotification, %d, kNotificationQueryResponseFinishedWifis, scanAge, %.2lf, interval, %.2lf, tag, %d, aps, %d, highinteg, %d
WIFI_LOC: scan outdated, %.2lf, %.2lf, try to rescan... 
kNotificationQueryResponseFinishedWifis
TlurEmer, unexpected emergency state, onNetworkNotification, %d, WARNING
TlurState, AlsReply, aps, %d, tag, %d, state, %d, queryType, %d, tte, %.1f
@WsbALS, tags, %{public}d, %{public}d, groups, %{public}lu, unknowns, %{public}lu
WIFI_LOC: onNetworkLocationNotification, %d, kNotificationQueryResponseFinished, scanAge, %.2lf, interval, %.2lf, tag, %d, cells, %d, wifis, %d
void CLWifiLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
WIFI_LOC: kNotificationReachability, previous, %d, current, %d, aboutToSleep, %d
kNotificationReachability, association
kNotificationReachability, dissociation
kNotificationReachability, association-
Reachability
WIFI_LOC: kNotificationWake
WIFI_LOC: onStatusNotification, kNotificationWake, notification, %d
kNotificationWake
void CLWifiLocationProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
WIFI_LOC: onLocationNotification, leech location, %s
WIFI_LOC: low reliability wifi location, not using as a hint, %s
WIFI_LOC: onLocationNotification, unknown notificaiton, %d, %s
bool CLWifiLocationProvider::shouldRequestEmergencyScan()
HELO not enabled (ECPI setting in carrier bundle). Not attempting to turn ON wifi if it is OFF
GPS Test mode. Not attempting to turn ON wifi if it is OFF
void CLWifiLocationProvider::onEmergencyStateChange(CLEmergencyController::EmergencyState_t)
TlurEmer, StateChange, new, %d, prev, %d, now, %d
TlurEmer, Wifi, On
TlurEmer, EmergencyOff, ttff, %.1f, session, %.1f
TlurEmer, Wifi, Off
fIsQueryLocationServer
fIsSlowDownScansWhileAssociated
IsFeedInCPIScans
fIsQueryAllAPs
fIsInjectingScanResults
fIsActivelyScheduleWifiScans
void errorOnDeprecatedDefaultWrites()
%s is deprecated. setting this has no effect
fWifiScanForcedInterval
fScanTypeStage1
fScanTypeStage2
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Emergency/CLEmergencyController.h
void CLEmergencyController::EmergencyStateHandler<CLWifiLocationProvider>::operator()(AdapteeTypeT *, CLEmergencyController::EmergencyState_t) const [AdapteeTypeT = CLWifiLocationProvider]
static bool CLUnifiedCellLocationProviderLogic::shouldBeQueried(CLTelephonyService_Type::RadioAccessTechnology)
CELL_LOC: Invalid rat, %d, %s
CLMotionStateOverride
CLMotionStateOverride::CLMotionStateOverride()
Taking power assertion due to session start.
v8@?0^{CLMotionStateMediator=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB{CLCalorieActivityFilter={CLMotionActivity=iiiiBfdBiddii}{CLMotionActivity=iiiiBfdBiddii}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=L}}}B{CLWorkoutManager={WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}i}{CLBodyMetrics=iffffffffif}^{Dispatcher}^{Dispatcher}^{Dispatcher}@{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}4
CLMotionStateOverride::~CLMotionStateOverride()
Releasing power assertion due to session end.
CLMotionStateMediatorSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Workout/CLMotionStateMediator.mm
-[CLMotionStateMediatorAdapter beginService]
AutoPauseTestHaptic
virtual void CLMotionStateMediator::shutdown()
CLMotionStateMediator is shutting down.
virtual bool CLMotionStateMediator::registerForNotificationInternal(const CLMotionStateMediator_Type::Notification &)
virtual bool CLMotionStateMediator::unregisterForNotificationInternal(const CLMotionStateMediator_Type::Notification &)
void CLMotionStateMediator::addClientForPrepareSessionEnd(id<CLMotionStateMediatorClientProtocol>, CMWorkoutType)
Receiving addClientForPrepareSessionEnd after client list has been deleted!
void CLMotionStateMediator::removeClientForPrepareSessionEnd(id<CLMotionStateMediatorClientProtocol>, CMWorkoutType)
Client for PrepareSessionEnd of session type %d does not exist!
void CLMotionStateMediator::prepareForSessionEnd(CMWorkoutType)
Prepared session client, end for session, %d, duration (s), %f, success, %d
void CLMotionStateMediator::overrideActivity(CLMotionStateMediator_Type::WorkoutSettings)
Setting activity override, %d, session, %lu,sessionId,%s,location,%lu,length,%f
void CLMotionStateMediator::clearActivityOverride(CLMotionStateMediator_Type::WorkoutSettings)
Clearing activity override
void CLMotionStateMediator::notifyWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)
WORKOUT event,time,%.3f,type,%lu
void CLMotionStateMediator::onUserInfoNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)
gender,%d,height,%.2f,weight,%.1f,age,%.0f,pal,%.0f,hrmin,%.0f,hrmax,%.0f,vo2max,%.0f,condition,%d
virtual void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::listClients() [Notification_T = CLMotionStateMediator_Type::Notification, NotificationData_T = CLMotionStateMediator_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
-[CLLocationProviderAdapter updateNotification:withRegistrationInfo:forClient:]
Failed to updateRegistrationInfoForClient %p (%d)
LocationProviders
bool CLLocationProvider::checkEnable(const char *)
provider %s disabled - will run but not send locations to clients
 Location Provider (%s) set to (%d)
virtual bool CLLocationProvider::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)
CLIENT: registerForNotification, register for notification, %d, %s, desiredAccuracy, %.1lf, operatingMode, %d
virtual bool CLLocationProvider::updateRegistrationInfoForClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)
CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s
CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s, from desiredAccuracy, %.1lf, to, %.1lf
CLIENT: updateRegistrationInfoForClient, no notification, client, %d, notification, %d, %s
Restored-
virtual bool CLLocationProvider::getNotification(const CLLocationProvider_Type::Notification &, CLLocationProvider_Type::NotificationData &)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,LocationTimestamp,%.3f,Age,%.3f,Lifespan,%.3f,
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/CLLocationProvider.mm
virtual void CLLocationProvider::notifyClientsWithData(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, bool, int, bool)
Ignoring location for %s
Provider %s is notifying clients (type=%d) of an invalid position (<%+.8f,%+.8f>)
Provider %s is notifying clients (type=%d) of an invalid altitude %.2f (accuracy %.2f)
Provider %s is notifying clients (type=%d) of a <0,0> position
Should not be sending coarse and fine notifications directly
Sending location unavailable notification through for %s
virtual void CLLocationProvider::sendSimulatedLocation(const CLDaemonLocation &)
Sending through simulated location for %s
virtual void CLLocationProvider::setSimulationEnabled(bool)
Simulation is now %s for %s
Notifying
virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]
CLCellLocationDatabase::CLCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)
Database is not valid; not initializing
bool CLCellLocationDatabase::getLocation(const CLTelephonyService_Type::Cell &, sqlite3_int64 &)
failed to bind %s
INSERT OR REPLACE INTO 
) VALUES (?, ?, ?, ?, ?, ?)
bool CLCellLocationDatabase::setLocation(const CLTelephonyService_Type::Cell &, const CLDaemonLocation &)
CELL_LOC: fInsertStatement [%s]
bool CLCellLocationDatabase::getLocation(sqlite3_int64, CLTelephonyService_Type::Cell &) const
UARFCN
CLNmeaLocationProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/NMEA/CLNmeaLocationProvider.mm
-[CLNmeaLocationProviderAdapter beginService]
nmea
NmeaDeviceName
CLNmeaLocationProvider::CLNmeaLocationProvider(CLSilo *)
reading from %s
NmeaHorizontalAccuracy
NmeaSpeedAccuracy
NmeaCourseAccuracy
virtual int CLNmeaLocationProvider::sourceClosed()
data source closed
virtual int CLNmeaLocationProvider::handleReadData(const char *, int)
CL-NMEA
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,
Request, type, 
 lowPriority, 
 urgent, 
 numOfRequestedScans, 
 timestatmp, 
CLWifiLocationDatabase::CLWifiLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)
platform supports WiFi location monitoring - creating bounding boxes, tableName, %s
read only database - not creating bounding boxes, tableName, %s
platform does not support WiFi location monitoring - not creating bounding boxes, tableName, %s
 VALUES 
(?,?,?,?,?,?,?,?,?,?,?,?,?,?);
WIFI_LOCATION_DATABASE
Failed to bind SELECT statment.
wifiData
 WHERE ROWID=?
bool CLWifiLocationDatabase::getLocation(sqlite3_int64, CLWifiLocationDatabase::WifiData &) const
rowid
) VALUES (?,?,?,?,?)
bool CLWifiLocationDatabase::setLocation(const CLWifiLocationDatabase::WifiData &, const CLDaemonLocation &)
 / 2.0 
bool CLWifiLocationDatabase::blacklistAPByScore(const CLMacAddress &)
fBlacklistAPByScore = [%s]
Fence: Where is fBlacklistAPByScore
Fence: blacklistAPByScore, failed bind, %s, error, %s
Fence: blacklisted AP by score, mac, %s
Fence: blacklistAPByScore, failed execute, %s, ret, %d, error, %s
std::vector<CLWifiAPLocation> CLWifiLocationDatabase::getNearbyWifisCoarse(double, double, double, int, bool, double)
Coarse wifi query center, %+.8lf, %+.8lf, nw, %+.8lf, %+.8lf, se, %+.8lf,%+.8lf, radius, %.8lf, bb, %d
.ROWID = 
.rowid  AND 
 >=? AND 
 <=? AND 
 <=?
 ORDER BY Score DESC LIMIT 
fSelectCoarseWifiStatementRTree = [%s]
  <= ? AND 
 >= ? AND 
  >= ? AND 
 <= ? 
fSelectCoarseWifiStatement = [%s]
BIND FAILED : coarse wifi query for <%+.8f,%+.8f> between <%+.8f,%+.8f> and <%+.8f,%+.8f> (%.2f from target)
Unknown WiFi AP. %s
Coarse wifi query center, %+.8lf, %+.8lf, nw, %+.8lf, %+.8lf, se, %+.8lf,%+.8lf, radius, %.8lf, aps, %ld
uint32_t CLWifiLocationDatabase::count()
invalid return value getting size of WifiLocation table
 IS NULL OR 
 = '' 
InfoMask
CellLocationLocal
CellLocation
ScdmaCellLocationLocal
ScdmaCellLocation
CdmaCellLocationLocal
CdmaCellLocation
LteCellLocationLocal
LteCellLocation
CLNetworkLocationProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Network/CLNetworkLocationProvider.mm
-[CLNetworkLocationProviderAdapter beginService]
static CLNetworkLocationProvider *CLNetworkLocationProvider::instanceForSilo(CLSilo *)
CLNetworkLocationProvider
NetworkProvider
DisableTransactions
IgnoreServerWifiUpdates
CLNetworkLocationProvider::CLNetworkLocationProvider(CLSilo *, std::unique_ptr<CLINetworkLocationProviderExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)
NETWORK: fIsIgnoreServerWifiUpdates = %d
UseEVDOTransmittedLocations
NETWORK: fIsUseEVDOTransmittedLocations = %d
IsExponentialRetryTimer
NETWORK: fIsExponentialRetryTimer, %d
fIsUseNetworkLocationProvider
NETWORK_LOCATION_PROVIDER
Data protection status
dataProtectionEnabled
NetworkLocationServerRefreshInterval
fServerRefreshInterval, %.1lf
NetworkLocationDebugSQLQueries
Scheduling purge for %.3f and checking every %.3fs for older than %.3fs
NetworkLocationPurgeTimer
void CLNetworkLocationProvider::getMetric(CLDaemonStats_Type::LocationNetworkQueries &)
NETWORK: stats: cellsQueried, %d, wifisQueried, %d, locationsQueried, %d, totalRequests, %d, totalRequestsSuccessful, %d
bool CLNetworkLocationProvider::blockGizmoRequest(bool)
GnrALS, block, %d, nearbyRequest, %d, compNearby, %d
bool CLNetworkLocationProvider::blockGizmoRequest(bool)_block_invoke
GnrWifi, background, 1
void CLNetworkLocationProvider::rescheduleOnReachability()
NETWORK: check reschedule, fQueryRetries, %d, sinceLastRetry, %.1lf
rescheduleOnReachability
bool CLNetworkLocationProvider::getLocation_GSM(const CLTelephonyService_Type::Cell &, CLDaemonLocation &)
cell %03d %03d 0x%x 0x%x is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote - querying
CELL_LOC: found, %d, server, %d, cell, %s, location, %s
bool CLNetworkLocationProvider::getLocation_SCDMA(const CLTelephonyService_Type::ScdmaCell &, CLDaemonLocation &)
CELL_LOC: scdma, found, %d, server, %d, cell, %s, location, %s
CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation(const CLCell &, CLDaemonLocation &)
CELL_LOC: best match cell, %s, bestMatch, %d
CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation_SCDMA(const CLTelephonyService_Type::ScdmaCell &, CLDaemonLocation &)
CELL_LOC: SCDMA full match 0, %s, %s
CELL_LOC: SCDMA match 1, %s, %s
CELL_LOC: SCDMA match 2, %s, %s
CELL_LOC: SCDMA match 3, %s, %s
CELL_LOC: SCDMA match 4, %s, %s
CELL_LOC: SCDMA NO MATCH, %s
CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation_GSM(const CLTelephonyService_Type::Cell &, CLDaemonLocation &)
CELL_LOC: GSM full match 0, %s, %s
CELL_LOC: GSM match 1, %s, %s
CELL_LOC: GSM match 2, %s, %s
CELL_LOC: GSM match 3, %s, %s
CELL_LOC: GSM match 4, %s, %s
CELL_LOC: GSM NO MATCH, %s
CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation_LTE(const CLTelephonyService_Type::LteCell &, CLDaemonLocation &)
CELL_LOC: LTE full match 0, %s, %s
CELL_LOC: LTE match 1, %s, %s
CELL_LOC: LTE match 2, %s, %s
CELL_LOC: LTE match 3, %s, %s
CELL_LOC: LTE match 4, %s, %s
CELL_LOC: LTE NO MATCH, %s
CLNetworkLocationProvider::BestMatchLevel CLNetworkLocationProvider::getBestMatchLocation_CDMA(const CLTelephonyService_Type::CdmaCell &, CLDaemonLocation &)
CELL_LOC: match 8 (%s)
CELL_LOC: match 5.1 (%s)
CELL_LOC: match 7 (%s)
CELL_LOC: match 4.1 (%s)
CELL_LOC: match 4.2 (%s)
CELL_LOC: match 3 (%s)
CELL_LOC: match 2 (%s)
CELL_LOC: match 1 (%s)
CELL_LOC: match sector location, %s, location, %s
CELL_LOC: avoid using transmitted locations
CELL_LOC: NO MATCH (%s)
bool CLNetworkLocationProvider::getLocation_CDMA(const CLTelephonyService_Type::CdmaCell &, CLDaemonLocation &)
CELL_LOC: found in DB (%s) loc (%lf %lf) acc (%lf)
CELL_LOC: cell %03d %03d 0%03d %03d %03d is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote - not querying, server doesn't server these
CELL_LOC: cell, %s, has local, but no remote -  pending query
bool CLNetworkLocationProvider::getLocation_LTE(const CLTelephonyService_Type::LteCell &, CLDaemonLocation &)
CELL_LOC: cell, [%s], is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote -  querying
Location Services disabled, not storing location entry
int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLMacAddress> &, bool, bool, bool)
Unified query
gsmCellCount
scdmaCellCount
cdmaCellCount
macAddresses
piggybackNearbyWifis
piggybackNearbyCells
in private location mode; not querying for unknown cdmaCells or unknown wifis
Location Services disabled, not querying location
NETWORK: block Gizmo ALS locations
NETWORK: can't query, no reachability, %d
CELL_LOC: cdma cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: cdma cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: cdma cell, %s, re-querying
CELL_LOC: gsm cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: gsm cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: gsm cell, %s, re-querying
CELL_LOC: scdma cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: scdma cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: scdma cell, %s, re-querying
CELL_LOC: lte cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: lte cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: lte cell, %s, re-querying
Will not query ALS, timestamp is too recent.
minAgeBeforeRequery
Will not query ALS, because mac is already in the queue.
timeSpentInQueue
Adding mac address to queue to query ALS.
Ignoring ALS server queries.
CELL_LOC: query gsm cells, %lu
CELL_LOC: query scdma cells, %lu
CELL_LOC: query cdma cells, %lu
CELL_LOC: query lte cells, %lu
CELL_LOC: query wifi cells, %lu
WIFI_LOC: isPiggybackNearby, %d, %d, isBroadConnection, %d, nearbyWifis, %d, nearbyCells, %d
int CLNetworkLocationProvider::queryLocations(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLMacAddress> &, bool, bool, bool)_block_invoke
GnrWifi, background, 0, empty
%ld pending wifis, clearing
pending %s from %.3f (%.3fs ago)
CELL_LOC: %ld pending gsm cells, clearing
CELL_LOC: pending gsm cell, %s, from, %.3f, %.3f, ago)
CELL_LOC: %ld pending scdma cells, clearing
CELL_LOC: pending scdma cell, %s, from, %.3f, %.3f, ago)
CELL_LOC: %ld pending cdma cells, clearing
CELL_LOC: pending cdma cell, %s, from, %.3f, %.3f, ago)
CELL_LOC: %ld pending lte cells, clearing
CELL_LOC: pending lte cell, %s, from, %.3f, %.3f, ago)
NETWORK: requery, %lu, %lu, %lu, %lu, %lu, items, fQueryRetries, %d, fLastRetryTimestamp, %.1lf
void CLNetworkLocationProvider::requeryLocations()
NETWORK: in private location mode; not querying for unknown cells or unknown wifis
NETWORK: Location Services disabled, not querying location
requeryLocations
NETWORK: re-querying cells, %lu, %lu, %lu, %lu, wifis, %lu, retry count, %d
bool CLNetworkLocationProvider::isBroadConnection()
isBroadConnection, reachability, %d, %d, dataAccessTech, %d, %d, tunnel, %d, isBroadConnection, %d
int CLNetworkLocationProvider::queryNearbys(const CLDaemonLocation &)
in private location mode; not querying for unknown cells or unknown wifis
NETWORK: block Gizmo ALS nearbys
queryNearbys
void CLNetworkLocationProvider::onLocationRequesterCellLocationSeries(CLNetworkLocationRequester *, bool, CLNetworkLocationRequester::RequestType, int)
CELL_LOC: start sequence, This, %p
transaction
series
CELL_LOC: beginning cell database %s
CELL_LOC: ending cell database %s (%lu cells still pending)
Network-Cell
void CLNetworkLocationProvider::onLocationRequesterScdmaCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::ScdmaCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d
void CLNetworkLocationProvider::onLocationRequesterScdmaCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::ScdmaCell &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
void CLNetworkLocationProvider::onLocationRequesterCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::Cell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)
void CLNetworkLocationProvider::onLocationRequesterCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::Cell &, CLNetworkLocationRequester::RequestType, int)
void CLNetworkLocationProvider::onLocationRequesterCdmaCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d,Confidence,%d,Count,%d,lock,%d
CELL_LOC: server response cell(%s) loc (%lf %lf) acc(%lf)
void CLNetworkLocationProvider::onLocationRequesterCdmaCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::CdmaCell &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d
void CLNetworkLocationProvider::onLocationRequesterLteCellLocation(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &, CLNetworkLocationRequester::RequestType, int)
CELL_LOC: server response lte cell, %s, location, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d
NETWORK: pending, known, before, %lu, cell, %s
NETWORK: pending, known, after, %lu, cell, %s
void CLNetworkLocationProvider::onLocationRequesterLteCellLocationUnknown(CLNetworkLocationRequester *, const CLTelephonyService_Type::LteCell &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,
NETWORK: pending, unknown, before, %lu, cell, %s
NETWORK: pending, unknown, after, %lu, cell, %s
Network-WiFi
void CLNetworkLocationProvider::onLocationRequesterWifiLocationSeriesComplete(CLNetworkLocationRequester *, const std::vector<CLAlsWifiAccessPoint> &, const std::vector<CLAlsWifiAccessPoint> &, CLNetworkLocationRequester::RequestType, int)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MAC,%s,infoMask,0x%x
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MAC,%s,Confidence,%d,Altitude,%.2f,VerticalAccuracy,%.2f,Count,%d,Score,%d,Channel,%d,Altitude,%.2lf,reach,%d,infoMask,%u,lock,%d,isNearbyQuery,%d
Ignoring #als response, mac, %s, channel, %d, isNearbyQuery, %d, fDataProtectionEnabled, %d
Partial numer of ALS aps saved
Location Services disabled, not storing location entries
void CLNetworkLocationProvider::onLocationRequesterResponse(CLNetworkLocationRequester *, const CFTimeInterval &, CFDictionaryRef, CLNetworkLocationRequester::RequestType, int)
NETWORK: stats: onLocationRequesterResponse, %d
NETWORK: no response from server, reachability, %d, queryRetries, %d
void CLNetworkLocationProvider::onLocationRequesterLocationError(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)
queryFailed
NETWORK: data reachability is not available - not retrying
no.data.reachability
NETWORK: retry query, %d, %d
retry.query
NETWORK: retry count %d exceeded %d - not retrying
max.retries
void CLNetworkLocationProvider::onLocationRequesterNearbyError(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)
NETWORK: query failed for nearbys - not retrying
void CLNetworkLocationProvider::onLocationRequesterFinished(CLNetworkLocationRequester *, CLNetworkLocationRequester::RequestType, int)
NETWORK: query: finished, tag, %d, cells, %d, wifis, %d
onLocationRequesterFinished
void CLNetworkLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
NETWORK: onStatusNotification, kNotificationReachability, from, %d, to, %d, tunnel, %d
ClxLink, reach, %d, last, %d, retries, %d, tunnel, %d
void CLNetworkLocationProvider::trimPendingQueries()
trimming pending gsm, %lu, scdma, %lu, cdma, %lu, lte, %lu, wifis, %lu, to, %d
int CLNetworkLocationProvider::query(const std::vector<CLTelephonyService_Type::Cell> &, const std::vector<CLTelephonyService_Type::ScdmaCell> &, const std::vector<CLTelephonyService_Type::CdmaCell> &, const std::vector<CLTelephonyService_Type::LteCell> &, const std::vector<CLMacAddress> &, bool, bool)
query
CELL_LOC: gsmCells, %lu, %lu, lteCells, %lu, cdmaCells, %lu
data protection currently enabled - don't request surroundings
query, broadDataConnection, %d, timeout, %d
NETWORK: query, cells, %lu, %lu, %lu, %lu, wifis, %lu
queryLoc
void CLNetworkLocationProvider::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Location Services reset, clearing all local cache
Location Services disabled, clearing all local cache
void CLNetworkLocationProvider::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
onCompanionNotification, notification, %d
ClxLink, Nearby, %d
void CLNetworkLocationProvider::handleDataProtectionStatusChanged(CLDataProtectionManager_Type::DataAvailability)
Data protection is now %s
clearAlsDatabaseEntries
void CLNetworkLocationProvider::clearDatabaseEntries()
Clear database entries
void CLNetworkLocationProvider::clearDatabaseEntriesByAge(CFTimeInterval)
Purging entries older than %.2fs.
Clear database entries by age
onRetryTimer
void CLNetworkLocationProvider::onRetryTimer(CFRunLoopTimerRef)
NETWORK: onRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu
bool CLNetworkLocationProvider::isRetryTimerNeeded()
NETWORK: areQueryRetriesNeeded, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, currentRetry, %d, sinceRetrySequenceStart, %.2lf, needed, %d
void CLNetworkLocationProvider::scheduleRetryTimer(const char *)
NETWORK: scheduleRetryTimer, retry timer already scheduled
scheduleRetryTimer
NETWORK: scheduleRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, timerInterval, %.1lf, isTimerNeeded, %d
void CLNetworkLocationProvider::cancelRetryTimer(const char *)
NETWORK: cancelRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu
NETWORK: cancelRetryTimer, no retry timer
void CLNetworkLocationProvider::resetRetryCounters(const char *)
NETWORK: resetRetryCounters, sinceLastReset, %.1lf
NETWORK: resetRetryCounters, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, sinceLastReset, %.1lf
resetRetryCounters
void CLNetworkLocationProvider::dropAbandonedCellAlsTables()
Dropping cell ALS tables from class A databases
/lockCache_encryptedA.db
NetworkLocationPurgeThreshold
NetworkLocationPurgeInterval
NetworkLocationFirstPurge
 AND LAC=
 AND PSC=
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLCell.h
const CLTelephonyService_Type::CdmaCell &CLCell::cdmaCell() const
const CLTelephonyService_Type::Cell &CLCell::gsmCell() const
const CLTelephonyService_Type::ScdmaCell &CLCell::scdmaCell() const
const CLTelephonyService_Type::LteCell &CLCell::lteCell() const
 AND SID=
 AND NID=
 AND BSID=
 AND ZONEID=
 AND PNOFFSET=
 AND BANDCLASS=
 AND CHANNEL=
 AND SectorID='
void CLTelephonyService_Type::CdmaCell::applyDerivedMcc()
ignoring second MCC %d %d
virtual void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::__1::map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >]
NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf
void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::__1::map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >]
void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::__1::map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >]
void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::__1::map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >]
void CLNetworkLocationProvider::cleanPendingListByAge(Container &, CFTimeInterval, CFAbsoluteTime) [Container = std::__1::map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >]
void CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::onDataAvailable() [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]_block_invoke
Failed to find entry from in-memory database, table, %s, type %s, rowid, %lld
Failed to save entry to persisted database, table %s
v20@?0r^{CLLocationDatabase=^^?{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}Bd{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}}4r^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}8q12
sqlite
void CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::onDataAvailable() [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]
Failed to migrate in-memory database to persisted.
Successfully migrated %u rows from in-memory database to persisted for table %s
void CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::onDataAvailable() [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]_block_invoke
void CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::onDataAvailable() [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]
void CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::onDataAvailable() [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]_block_invoke
void CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::onDataAvailable() [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]
virtual void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLNetworkLocationProvider_Type::Notification, NotificationData_T = CLNetworkLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLAccessoryLocationProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Accessory/CLAccessoryLocationProvider.mm
-[CLAccessoryLocationProviderAdapter beginService]
accessory
ephemeris/
CLAccessoryLocationProvider::CLAccessoryLocationProvider(CLSilo *)
could not create path %s
StarkNmeaPipeEnabled
%X%X
NMEA
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Sentence,"%s",
v8@?0^{CLGpsAssistant=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLTimeOffsetFilter=BBdddddI{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d}B{CLTimeOffsetFilter=BBdddddI{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d}}4
v8@?0^{CLTimeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBiid}4
void CLAccessoryLocationProvider::sendReferenceTime()
no reference time available, not sending reference time
void CLAccessoryLocationProvider::sendReferenceLocation()
location services is disabled, not sending reference location
no reference location available, not sending reference location
void CLAccessoryLocationProvider::sendReferenceEphemeris()
ephemeris %s not available
could not create input stream for ephemeris file, %s
could not create data from file %s
void CLAccessoryLocationProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
received an unknown location notification %d
void CLAccessoryLocationProvider::openNmeaPipe()
Unable to open nmea fifo FD %d %s.
/tmp/pty.nmea
static void CLDaemonStats::shutdownInstance()
could not store stats data 
stats
CLDaemonStats
Location Stats
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationServicesState &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,enabled,%d,event,%d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationServicesApproval &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,bundleIdApproved,%s,approved,%d,authorization,%d,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationUpdateSession &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,reachability,%d,accessoryConnected,%d,powered,%d,gpsCoexWifi,%d,gpsCoexBt,%d,timestampEnd,%.3f,duration,%.3f,desiredAccuracy,%.2f,achievedAccuracy,%.2f,ttff,%.3f,ttffGps,%.3f,achievedSpeed,%.2f,autoStopped,%d,deferredLocations,%d,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationMonitorSession &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,fenceRadiusMin,%.2f,fenceRadiusMax,%.2f,numFences,%d,numFencesRemoved,%d,slc,%d,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationMonitorTrigger &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,eventType,%d,eventRadius,%.2f,eventDistance,%.2f,eventLatency,%.3f,eventMask,0x%x,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationNetworkQueries &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellsQueried,%d,wifisQueried,%d,locationsQueried,%d,totalRequests,%d,totalRequestsSuccessful,%d,wifiTilesDownloaded,%d,wifiTilesDownloaded3G,%d,wifiTilesCached,%d,cellTilesDownloaded,%d,cellTilesDownloaded3G,%d,cellTilesCached,%d,demTilesDownloaded,%d,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationWifiUsage &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,totalScans,%d,triggeredScans,%d,totalScansS2,%d,scanFailures,%d,scanBusies,%d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationWifiTileSync &)
GtsAwd, submit, metric.valid, %d, metric.timestamp, %.3f, metric.bundleId, %s, sessions, %d, empty, %d, completed, %d, errored, %d, syncedN, %d, syncedMBs, %d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::LocationMapMatching &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,attempts,%d,noMatch,%d,noData,%d,
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::CompassSession &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,timestampEnd,%.3f,duration,%.3f,uncalibrations,%d,achievedCalibration,%d,minMagnetometerMagnitude,%.1f,maxMagnetometerMagnitude,%.1f,gyroDataValid,%d,gyroAge,%d,gyroFactoryBias,%f,%f,%f,gyroFactorySlope,%f,%f,%f,gyroFactoryL2Error,%f,%f,%f,gyroDeltaBias,%f,%f,%f,gyroDeltaSlope,%f,%f,%f,gyroDynamicL2Error,%f,%f,%f,gyroDynamicMaxTemp,%d,gyroMagnitudeMax,%d,quality2DMin,%f,quality2DMax,%f,quality2DMean,%f,quality3DMin,%f,quality3DMax,%f,quality3DMean,%f,num2dTo3dTransitions,%d,num3dTo2dTransitions,%d,isLocationAvailable,%d,initState,%d,initAccuracy,%f,percentSession2D,%d,percentSessionUncalibrated,%d,percentSessionOther,%d,percentSessionStill,%d,percentSessionPedestrian,%d,percentSessionDriving,%d,percentSessionCycling,%d,percentSessionIndoor,%d,percentSessionDrivingHC,%d,coverKeyboardState,%d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionState &)
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,motionType,%d,enabled,%d,
MotionTriggerMaxPrototypes
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionTrigger &)
Max prototypes overriden to %d
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,timestampEnd,%.3f,duration,%.3f,motionType,%d,numTriggers,%d,prototypes,%zu,%s
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionGyroMiniCal &)
metric.valid,%d,metric.timestamp,%.3f,hoursElapsed,%d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionPedometerCalibration &)
metric.valid,%d,metric.timestamp,%.3f,step,%d,distance,%.2f,timeLength,%.2f,score,%.2f,trackdistance,%.2f,kfactor,%.2f,kfactorupdated,%.2f
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionGyroBias &)
metric.valid,%d,metric.timestamp,%.3f,imageCaptures,[%d,%d,%d,%d,%d,%d],endConditions,[%d,%d,%d,%d,%d,%d],biasChanges,[%d,%d,%d,%d,%d,%d,%d,%d],minDuration,%llu,maxDuration,%llu,meanDuration,%llu,minTemperature,%5.2f,maxTemperature,%5.2f
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::CompassSaturations &)
metric.valid,%d,metric.timestamp,%.3f,numSaturations,%d,meanDeltaTimeSaturationsMsec,%d,magMagnitudeMin,%d,magMagnitudeMax,%d,maxCalibrationQuality3D,%f,deltaBiasHighQuality3D,%d,deltaRadiusHighQuality3D,%d,numCoverAttachments,%d
void CLDaemonStats::submitMetric(const CLDaemonStats_Type::MotionGyroDaily &)
metric.valid,%d,metric.timestamp,%.3f,gyroMagMin,%d,gyroMagMax,%d,minsGyroActive,%d
static void CLDaemonStats::submitMetric(CLDaemonStats_Type::MetricId, const std::string &)
submitting metric %x for %s
v8@?0^{CLWifiTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}dBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal> >={__compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal> >=^{CLIWifiTilesManagerExternal}}}{CLTileDownloadPolicy=@dI}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager> >={__compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager> >=^{CLITileSyncManager}}}BB{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}}4
stats: %s
stats: type, %d, %s, count, %d
CLRunningAggregatorAWD
CLCompanionActivityAWDAggregator
CLCompanionPedometerAWDAggregator
v8@?0^{CLPressureCalibrationDatabase=^^?{unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >={__compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >=^{Client}}}B^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{MotionBarometerCalibration={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}Ifff}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}i{TemperatureOffsetCoefficientRound=ffi}{vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}^{TemperatureOffsetCoefficientRound}{__compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}}}B{?=ffd}^{Dispatcher}i{CLRobustSlopeEstimator=f{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{map<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > > > >={__tree<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::less<int>, true> >=L}}}}}4
unknown metric %x requested for %s
CLFilteredLocationControllerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/CLFilteredLocationController.mm
-[CLFilteredLocationControllerAdapter beginService]
filtered
virtual bool CLFilteredLocationController::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)
CLIENT: %d, registerForNotification, distanceFilter, %.1lf, checkInterval, %.1lf, sleepProof, %d, operatingMode, %d
CLIENT: Clearing cached notification for %d
v8@?0^{CLStreamingAwareLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >={__compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >=^{CLStreamingAwareLocationProviderStateMachine}}}@@{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >={__compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double> > >={__tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true> >=L}}}}4
CLIENT: register for notification, %d, %s
virtual bool CLFilteredLocationController::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)
CLIENT: unregister for notification, %d, %s, wasRegistered, %d
virtual bool CLFilteredLocationController::shouldNotifyClient(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, const char &, CLLocationProvider_Type::RegInfo &)
<%+.8f,%+.8f> is stale from %.3fs ago, not using for distance filtering
distance filter %.2f not exceeded by <%+.8f,%+.8f> and <%+.8f,%+.8f> (distance %.2f)
regular
fine
coarse
void CLFilteredLocationController::onLocationTimer(CFRunLoopTimerRef)
Now registered for %s location notifications, operating mode %d
no more location clients - not re-registering
void CLFilteredLocationController::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
leaving location as it would turn on in %.3fs anyway
turning off location requests and re-scheduling for %.3fs later
void CLFilteredLocationController::logRequiredNotificationLevel(bool)
Best
Fine
Coarse
None
@ClxClient, accuracy, %{public}d, %{public}d, %{public}d, level, %{public}s, reg?, %{public}d
void CLFilteredLocationController::checkMinimumDistanceFilter()
kNotificationLocation
kNotificationLocationCoarse
kNotificationLocationFine
CLIENT: notification, %s, clients, %lu, distanceFilter, %.1lf, sleepProof, %d
Ignoring request for sleep-proof location updates with no check interval
CLIENT: distanceFilter, %.1lf, fDistanceFilter, %.1lf
minimum distance unchanged from %.3f, still requesting location at %.3f (%.3fs away)
minimum distance changed to %.3f from %.3f
scheduling location requests for %.3fs later
no location currently available, starting it immediately
wake interval unchanged from %.3f, still waking at %.3f (%.3fs away)
wake interval changed to %.3f from %.3f
void CLFilteredLocationController::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
virtual void CLFilteredLocationController::lastConfidentLocationNotification(const CLDaemonLocation &)
Cached location,%.8lf,%.8lf,HorAcc,%.1lf,Type,%s,Confidence,%d,Timestamp,%.3f,Lifespan,%.3f,Age,%.3f,integrity,%d
No valid last confident location
CLRegionPreloadManifestTile-Mutex
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLRegionPreloadManifestTile.mm
virtual bool CLRegionPreloadManifestTile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)
Traversing preload manifest file
Preload manifest tile size = %lu
failed to allocate transit tile
failed to decode transit tile protobuf, encrypted=%lu tile=%s
failed to get fields in manifest
ver,%d,x,%d,y,%d,generated,%.01lf,age,%.01f,ageThresh,%d
Reading new market, {%.06lf,%.06lf}, {%.06lf,%.06lf}
Adding new tile to market, [%.06lf,%.06lf]
loaded transit tile %s with %lu regions
CLRegionPreloadManifestTile(
super=
, numMarkets=
IsSimulator
%@ %@ (%@)
<null>
<name>
<version>
<build>
hw.model
IOPlatformExpertDevice
IOPlatformSerialNumber
CLPlatformInfo::Provider CLPlatformInfo::getProviders()_block_invoke
unknown hardware type %{private}d
watch-companion
ReleaseType
NonUI
InternalBuild
GpsForcePlosSupport
bool CLPlatformInfo::supportsPLOS()
PLOS: ignoring hw. forceSupport,%d
GpsForceSupportOutdoorMatching
bool CLPlatformInfo::supportsOutdoorMatching()
#warning OBM, ignoring hw. forceSupport,%d
com.apple.demo-settings
StoreDemoMode
FProgramNumber
virtual CLMetsInfo CLCalorieOutdoorWheelchairModel::computeMETS(const CLNatalieModelInput &)
Natalie Model,OutdoorWheelchair, beginTime, %f, endTime, %f, duration(s), %f,gpsSpeed,%.2f, gpsAvail, %d, elevAvail, %d, pushVM,%.1f, verticalSpeed, %.3f, gradeType, %d, metsFromGps,%.1f, metsFromPushes, %.1f, mets, %.1f
CLOperatorSettingsSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLOperatorSettings.mm
-[CLOperatorSettingsAdapter beginService]
CLOperatorSettings
void CLOperatorSettings::onOperatorChangeNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
Could not refresh settings
virtual void CLOperatorSettings::setInternal(const CFStringRef, const CFTypeRef)
should not write to operator bundle
NewOperatorNotification
virtual void CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLOperatorSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%@, <recordId %lu, startDate %@, sourceId %@>
kExerciseMinuteDataCodingKeyStartDate
kExerciseMinuteDataCodingKeyRecordId
kExerciseMinuteDataCodingKeySourceId
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Transit/CLRouteListener.mm
void CLRouteListener::enable()
void CLRouteListener::enable()_block_invoke
Received a route
Starting route without an appoximate location
v8@?0@"GEONavigationRouteSummary"4
void CLRouteListener::enable()_block_invoke_2
Received a transit route
v8@?0@"GEONavigationRouteTransitSummary"4
void CLRouteListener::enable()_block_invoke_3
Received a navigation state change
v8@?0@"GEONavigationGuidanceState"4
void CLRouteListener::disable()
Auto
Transit
Bicycle
Ferry
void CLRouteListener::logRoute(GEONavigationRouteSummary *)
Route type        : %s
Has origin
Route origin      : %s
Has destination
Route destination : %s
Route dest name   : %s
Route travel time : %.01lf
void CLRouteListener::logTransitRoute(GEONavigationRouteTransitSummary *)
Transit Stop:
    ID  : %llu
    LAT : %lf
    LON : %lf
Transit Link:
    DEP : %lf
    ARR : %lf
    Stop From :
        ID  : %llu
        LAT : %lf
        LON : %lf
    Stop To :
void CLRouteListener::logState(GEONavigationGuidanceState *)
Guidance Level   : %s
Navigation State : %s
Transport Type   : %s
PREPARE_TO_TRAVEL
TRACKING
TURN_BY_TURN
NOT_NAVIGATING
PROCEEDING_TO_ROUTE
ON_ROUTE
OFF_ROUTE
BAD_ROUTE
RECALCULATING
END_OF_ROUTE
END_OF_LEG
AUTOMOBILE
TRANSIT
WALKING
BICYCLE
UNKNOWN_TRANSPORT_TYPE
FERRY
-[CRCellTowerLocation writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRCellTowerLocation.m
cellTowerLocation
cdmaCellTowerLocation
lteCellTowerLocation
wifiAPLocation
scdmaCellTowerLocation
-[CRCellWifiCollectionRequest writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRCellWifiCollectionRequest.m
cellTowerLocations
T@"NSMutableArray",&,N,V_cellTowerLocations
cdmaCellTowerLocations
T@"NSMutableArray",&,N,V_cdmaCellTowerLocations
lteCellTowerLocations
T@"NSMutableArray",&,N,V_lteCellTowerLocations
wifiAPLocations
T@"NSMutableArray",&,N,V_wifiAPLocations
scdmaCellTowerLocations
T@"NSMutableArray",&,N,V_scdmaCellTowerLocations
DumpCompassCalibrationDatabaseOnCompassStart
CompassInterval
CompassIgnoreGyro
CLCompass6::CLCompass6()
legacy compass, interval (%.3f) gyro (%d)
%.0f
virtual void CLCompass6::start(bool)
Dumped compass cal database with id %s
Compass is requesting device motion with mode 0x%x
static void CLCompass6::onMagnetometerData(const CLMagnetometer::Sample *, void *)
Notify after %.3f seconds of no event.
CompassAlignment
Type,%s,compassJustAlignedToStableField,%d,timestamp,%20.20f
Type,%s,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f
notified clients. sampleCount,%d,compass.compass.calibrationLevel,%d,compass.timestamp,%f
markets
T@"NSMutableArray",&,N,V_markets
success
TB,N,V_success
hasMsg
T@"NSString",&,N,V_msg
latitude
longitude
horizontalAccuracy
altitude
verticalAccuracy
course
motionActivityType
motionActivityConfidence
provider
floor
appBundleIdIndices
motionVehicleConnectedStateChanged
motionVehicleConnected
rawMotionActivity
dominantMotionActivity
Td,N,V_latitude
Td,N,V_longitude
Tf,N,V_horizontalAccuracy
hasAltitude
Tf,N,V_altitude
hasVerticalAccuracy
Tf,N,V_verticalAccuracy
hasSpeed
hasCourse
Tf,N,V_course
hasContext
Ti,N,V_context
hasMotionActivityType
Ti,N,V_motionActivityType
hasMotionActivityConfidence
Ti,N,V_motionActivityConfidence
hasProvider
Ti,N,V_provider
hasFloor
Ti,N,V_floor
T@"NSMutableArray",&,N,V_appBundleIdIndices
hasMotionVehicleConnectedStateChanged
TB,N,V_motionVehicleConnectedStateChanged
hasMotionVehicleConnected
TB,N,V_motionVehicleConnected
hasRawMotionActivity
T@"CRMotionActivity",&,N,V_rawMotionActivity
hasDominantMotionActivity
T@"CRMotionActivity",&,N,V_dominantMotionActivity
location
appBundleId
tripId
appBundleIds
-[CRLocationCollectionRequest writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRLocationCollectionRequest.m
nil != self->_tripId
hasAppBundleId
T@"NSString",&,N,V_appBundleId
T@"NSString",&,N,V_tripId
hasRat
Ti,N,V_rat
hasMcc
Ti,N,V_mcc
hasMnc
Ti,N,V_mnc
T@"NSMutableArray",&,N,V_appBundleIds
%@.%@
CMAvailable
CMAuthorized
CMErrorMessage
CMReturnCode
CMOnBodyStatusManagerClassifierTheta0
CMOnBodyStatusManagerClassifierTheta1
CMOnBodyStatusManagerClassifierTheta2
CMOnBodyStatusManagerClassifierTheta3
CMOnBodyStatusManagerClassifierTheta4
CMOnBodyStatusManagerClassifierTheta5
CMOnBodyStatusManagerClassifierMinLowPower
CMOnBodyStatusManagerClassifierMaxLowPower
CMOnBodyStatusManagerClassifierMaxHighPower
CMOnBodyStatusManagerLowBandStart
CMOnBodyStatusManagerLowBandStop
CMOnBodyStatusManagerHighBandStart
CMOnBodyStatusManagerHighBandStop
CMOnBodyStatusManagerWakeThreshold
CMOnBodyStatusManagerOddsThreshold
CMOnBodyStatusManagerMedianFilterSize
CMOnBodyStatusManagerConfidenceThreshold
CMOnBodyStatusManagerUseHysteresis
CMOnBodyStatusManagerUseAngleOverride
CMOnBodyStatusManagerAngleMetricThreshold
CMOnBodyStatusManagerManufacturer
CMPedometerDataObject
CMPedometerDataArray
CMPedometerStartTime
CMPedometerStopTime
CMNatalimetrySessionId
CMNatalimetryRecordId
CMNatalimetryNatalieDataStartDate
CMNatalimetryNatalieDataMets
CMNatalimetryNatalieDataNatalies
CMNatalimetryNatalieDataBasalNatalies
CMNatalimetryNatalieDataSourceId
CMNatalimetryNatalieDataArray
CMNatalimeterSetUserHeightMeter
CMNatalimeterSetUserWeightKG
CMNatalimeterSetUserAgeYr
CMNatalimeterSetUserBiologicalSex
CMNatalimeterSetUserCondition
CMNatalimeterSetUserPal
CMNatalimeterSetUserHrmin
CMNatalimeterSetUserHronset
CMNatalimeterSetUserVo2max
CMNatalimeterSetUserRunVo2max
CMNatalimeterSetUserOnsetVo2max
CMOnBodyStatusData
CMSedentaryTimerIsArmed
CMSedentaryTimerStartTime
CMSedentaryTimerPeriodInterval
CMSedentaryTimerReminderInterval
CMSedentaryTimerAutoReschedule
CMSedentaryTimerAlarmData
CMMotionActivityStartTime
CMMotionActivityStopTime
CMMotionActivityData
CMMotionActivityDataArray
CMActivityData
CMOverrideSidebandOverride
CMStateSidebandState
CMOverrideResult
CMSidebandSensorFusionEnable
CMSidebandSensorFusionLatency
CMSidebandSensorFusionSnoop
CMSidebandSensorFusionSuccess
CMMotionStateSim
CMMotionStateSimState
CMMotionStateSimResult
CMVehicleConnectionStartTime
CMVehicleConnectionEndTime
CMVehicleStateDeviceId
CMDeviceHasOriginalBackCamera
CMCameraVcmActuatorId
CMCompassCalibrationData
CMExerciseMinuteRecordId
CMExerciseMinuteStartDate
CMExerciseMinuteSourceId
CMExerciseMinuteDataArray
CMWorkoutKeyType
CMWorkoutKeySessionId
CMWorkoutKeyLocation
CMWorkoutKeyPoolLength
CMSwimKeyDataRecord
CMSwimKeyDataArray
CMSignificantElevationKeyQueryTimeRange
CMSignificantElevationKeySample
CMCaptureModeData
CMFallSetStatsEnabled
CMFallSetStatsNumberOfAvailableFiles
CMFallSetStatsNameOfCurrentFile
CMFallSetStatsSizeOfCurrentFile
quaternion
magneticAccuracy
magneticCalibration
hasQuaternion
T@"CRQuaternion",&,N,V_quaternion
hasMagneticAccuracy
Tf,N,V_magneticAccuracy
hasMagneticCalibration
Ti,N,V_magneticCalibration
Unreliable
_2DWeak
_2DStrong
_3DWeak
_3DStrong
productId
softwareVersion
submissionId
probeId
-[CRMeta writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRMeta.m
nil != self->_productId
nil != self->_softwareVersion
T@"NSString",&,N,V_productId
T@"NSString",&,N,V_softwareVersion
hasSubmissionId
Tq,N,V_submissionId
hasProbeId
T@"NSString",&,N,V_probeId
scanTimestamp
-[CRWifiAPLocation writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRWifiAPLocation.m
hasScanTimestamp
Td,N,V_scanTimestamp
virtual CLWifiService_Type::AssociationState CLWifiLocationProviderExternal::getAssociatedState(bool) const
WIFI_LOC: failed to get power state
v8@?0^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLMotionActivity=iiiiBfdBiddii}BBB{CLMotionActivity=iiiiBfdBiddii}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=L}}@}4
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Framework/CoreMotion/CMElevationData.mm
sample
sourceId && startDate && endDate
%@, <startDate, %@, endDate, %@, elevationAscended, %lu, elevationDescended, %lu>
kCMElevationDataCodingKeyRecordId
kCMElevationDataCodingKeySourceId
kCMElevationDataCodingKeyStartDate
kCMElevationDataCodingKeyEndDate
kCMElevationDataCodingKeyElevationAscended
kCMElevationDataCodingKeyElevationDescended
activityType
nCatherine
nVeryLowCatherine
nLowCatherine
nHighCatherine
nVeryHighCatherine
nGoodCatherine
nInterpolatedCatherine
nSampleAndHoldCatherine
minGoodCatherine
maxGoodCatherine
meanCatherine
meanGoodCatherine
firstCatherine
firstCatherineStartTime
longestDropout
totalDropoutTime
nDropout
onsetReason
onsetCatherine
userMaxCatherine
persistedMinHR
Ti,N,V_activityType
hasNCatherine
TI,N,V_nCatherine
hasNVeryLowCatherine
TI,N,V_nVeryLowCatherine
hasNLowCatherine
TI,N,V_nLowCatherine
hasNHighCatherine
TI,N,V_nHighCatherine
hasNVeryHighCatherine
TI,N,V_nVeryHighCatherine
hasNGoodCatherine
TI,N,V_nGoodCatherine
hasNInterpolatedCatherine
TI,N,V_nInterpolatedCatherine
hasNSampleAndHoldCatherine
TI,N,V_nSampleAndHoldCatherine
hasMinGoodCatherine
Tf,N,V_minGoodCatherine
hasMaxGoodCatherine
Tf,N,V_maxGoodCatherine
hasMeanCatherine
Tf,N,V_meanCatherine
hasMeanGoodCatherine
Tf,N,V_meanGoodCatherine
hasFirstCatherine
Tf,N,V_firstCatherine
hasFirstCatherineStartTime
Tf,N,V_firstCatherineStartTime
hasLongestDropout
Tf,N,V_longestDropout
hasTotalDropoutTime
Tf,N,V_totalDropoutTime
hasNDropout
TI,N,V_nDropout
hasOnsetReason
Ti,N,V_onsetReason
hasOnsetCatherine
Tf,N,V_onsetCatherine
hasUserMaxCatherine
Tf,N,V_userMaxCatherine
hasPersistedMinHR
Tf,N,V_persistedMinHR
kOnsetNotSet
kOnsetElevated
kOnsetActive
kOnsetNotElevated
kOnsetTimeout
CLBTLEFenceManagerConcrete::CLBTLEFenceManagerConcrete(CLSilo *)
Overriding FenceStartDelay,%.2f.
Scheduling initialization delay,%.2f, silo,%p.
void CLBTLEFenceManagerConcrete::unlockedInitialize()
Initializing.
Already initialized.
virtual void CLBTLEFenceManagerConcrete::addMonitoredRegion(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
Adding monitored region,%s.
v8@?0^{CLBeaconFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >={__compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{CLBeaconFenceDatabase={CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}}i@}4
btle_fence_installed
virtual void CLBTLEFenceManagerConcrete::getMonitoredRegions(const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)
Retrieved monitored regions,%lu, for bundle,%s.
virtual void CLBTLEFenceManagerConcrete::removeMonitoredRegion(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
Removing monitored region,%s.
btle_fence_uninstalled
virtual void CLBTLEFenceManagerConcrete::requestRegionState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
Region,%s, has state,%d.
Unable to find region,%s, in the cache.
Authorization error,%d, while requesting state for region,%s.
void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)
Resuming monitoring for fence,%s.
void CLBTLEFenceManagerConcrete::onAuthorizationNotification(int, const CLBeaconFenceAuthorizationManager_Type::Notification &, const CLBeaconFenceAuthorizationManager_Type::NotificationData &)_block_invoke
Unable to monitor the zone for region,%s.
v8@?0^{CLBTLEBeaconProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}4
Already resumed monitoring for fence,%s.
Suspending monitoring for fence,%s.
Unable to unmonitor the zone for fence,%s.
Fence,%s, is not being monitored, the suspension request will be ignored.
btle_fence_resume
btle_fence_suspend
void CLBTLEFenceManagerConcrete::onBeaconNotification(int, const CLBTLEBeaconProvider_Type::Notification &, const CLBTLEBeaconProvider_Type::NotificationData &)
Zone,%s, transitioned from state,%d, to state,%d, notifying all clients.
Launching application (if necessary),%s, for notification.
void CLBTLEFenceManagerConcrete::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)_block_invoke
Reauthorization requested, forcing initialization.
void CLBTLEFenceManagerConcrete::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Received display on notification.
Display turned on, notifying region,%s, has been entered.
virtual bool CLBTLEFenceManagerConcrete::registerForNotification(int, const CLBTLEFenceManager_Type::Notification &, const std::string &)
Pending notification for fence,%s, state,%d, has expired.
Sending cached notification for fence,%s, state,%d, type,%d.
Pending iBeacon notification
metSource
meanAngleX
energyMagnitude
metsHR
metsWR
Td,N,V_mets
Ti,N,V_metSource
Tf,N,V_meanAngleX
Tf,N,V_energyMagnitude
hasMetsHR
Tf,N,V_metsHR
hasMetsWR
Tf,N,V_metsWR
kWorkRate
kHeartRate
kCalibratedWorkRate
kDefaultValue
-[CRCollectionDelegate requester:didFailWithError:]
#warning: domain %s code %ld
tolerateIncompatibleData
TB,N,V_tolerateIncompatibleData
Connection
close
MicroLocation
uncertaintyInMeters
typeSource
v16@?0@4I8^B12
v16@?0@4@8^B12
 MCC=
 AND MNC=
 AND TAC=
 AND CI=
 AND UARFCN=
 AND PID=
 AND RSCP=
 AND ECN0=
 AND BANDINFO=
Infinity
-Infinity
CLWifiTileHeaderDatabase::CLWifiTileHeaderDatabase(const std::string &, const std::string &)
not connected to wifi #tile header table
No connection to database when attempting to open transaction.
bool CLWifiTileHeaderDatabase::saveWifiTileHeader(const CLWifiTileHeaderEntry &)
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Network/CLWifiTileHeaderDatabase.mm
bool CLWifiTileHeaderDatabase::deleteByTileXY(std::tuple<int, int>)
 = ? AND 
 = ? 
CL::optional<CLWifiTileHeaderEntry> CLWifiTileHeaderDatabase::selectByTileXY(std::tuple<int, int>)
int CLWifiTileHeaderDatabase::countTileHeaders()
failed to select count(*) from wifi #tile header table
isTimestampColumn
bool CLWifiTileHeaderDatabase::updateTimestampByTileXY(cl::chrono::CFAbsoluteTimeClock::time_point, std::tuple<int, int>, const std::string &)
 = ? WHERE 
 = ?
failed to update timestamp of #tile header
CL::optional<cl::chrono::CFAbsoluteTimeClock::time_point> CLWifiTileHeaderDatabase::selectAccessTimestampByTileXY(std::tuple<int, int>)
std::vector<CLWifiTileHeaderEntry> CLWifiTileHeaderDatabase::selectAll()
static std::unique_ptr<CLSqliteDatabase> CLWifiTileHeaderDatabase::connectAndCreateTableIfNotExistsIfNecessary(const std::string &, const CLSqliteDatabase::ColumnInfo *, const CLSqliteDatabase::SqliteProperties &)
failed to connect to wifi #tile header database
failed to connect to wifi #tile heeaders table
successfully created wifi #tile headers table
TileX
TileY
SouthwestLatitude
SouthwestLongitude
DeltaLatitude
DeltaLongitude
MinimumAltitude
MaximumAltitude
ExpirationAge
Version
Flags
NumberOfIndexEntries
AccessTimestamp
GizmoSyncTimestamp
NumberOfInputPoints
Reminder
Final
ActiveReminder
%@, <startDate %@, firedDate %@, alarmType %@, didWake %@>
firedDate
alarmType
kSedentaryTimerDataCodingKeyStartDate
kSedentaryTimerDataCodingKeyFiredDate
kSedentaryTimerDataCodingKeyAlarmType
kSedentaryTimerDataCodingKeyDidWake
virtual CLMetsInfo CLNatalieDanceModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, Dancing Compendium METS, METS, %f
passTypeId
associatedStoreId
passSource
serverHash
-[CRPassLocation writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRPassLocation.m
nil != self->_passTypeId
self->_location != nil
T@"NSString",&,N,V_passTypeId
associatedStoreIds
T@"NSMutableArray",&,N,V_associatedStoreIds
Ti,N,V_passSource
hasAge
Td,N,V_age
T@"CRLocation",&,N,V_location
hasServerHash
Ti,N,V_serverHash
AWD_PhoneSignificantElevation
AWD_WatchSignificantElevation
v12@?0{shared_ptr<std::__1::vector<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> > >=^{vector<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >}^{__shared_weak_count}}4
PressureSensorSettlingTime
ElevationSourceTimeoutInterval
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Odometer/CLOdometerNotifierWatch.mm
void CLOdometerNotifierWatch::updateElevationSubscription()
Elevation source switch, companionAvailable, %d, hasClients, %d
virtual void CLOdometerNotifierWatch::toggleCoarseElevation(bool)
virtual void CLOdometerNotifierWatch::updateOdometerState()
Take power assertion
streaming odometer
Release power assertion
void CLOdometerNotifierWatch::updateStateOnAuthorization(bool)
Update location authorization, current, %d, new, %d
void CLOdometerNotifierWatch::enableGPS()
Enable GPS; Start GPS subscription
void CLOdometerNotifierWatch::disableGPS()
Disable GPS; Stop GPS subscription
void CLOdometerNotifierWatch::enableCompanion(const CLOdometerNotifier_Type::Notification &)
void CLOdometerNotifierWatch::disableCompanion(const CLOdometerNotifier_Type::Notification &)
void CLOdometerNotifierWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
onElevation,startTime,%.3f,ascended,%d,descended,%d
onCoarseElevation,startTime,%.3f,ascended,%d
Received unhandled notification, %d
void CLOdometerNotifierWatch::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Received location notification, %d
Location batch notification size %ld
Location notification size 1
void CLOdometerNotifierWatch::onMotionStateObserverNotification(int, const CLMotionStateObserver_Type::Notification &, const CLMotionStateObserver_Type::NotificationData &)
Workout elevation suppressed from, %.3f, to, %.3f
void CLOdometerNotifierWatch::notifyElevation(std::shared_ptr<CLElevationVector>)
static bool CLOdometerNotifierWatch::updateOdometerWithEntry(CLOdometerEntry &, double &, CLOdometerEntry &, CFAbsoluteTime)
onCompanionNotification -- Received type: %d, distance, %.8f, startTime, %.8f, gps altitude, %.8f, odometer, %.8f, accuracy, %.8f, gpsSpeed, %.8f, gpsSpeedAccuracy, %.8f, timestampGps, %.8f, rawSpeed, %.8f, originDevice, %d
Current odometer sample fails time check. Gps,%.2lf,%.2lf,startTime,%.2lf,%.2lf,odometer,%.2lf,%.2lf
Source may have reset. Gps,%.2lf,%.2lf,startTime,%.2lf,%.2lf,odometer,%.2lf,%.2lf
Odometer source change,previous,%lf,current,%lf
void CLOdometerNotifierWatch::notifyLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)
Drop entry! distance, %.8f, startTime, %.8f, gps altitude, %.8f, odometer, %.8f, accuracy, %.8f, gpsSpeed, %.8f, gpsSpeedAccuracy, %.8f, timestampGps, %.8f, rawSpeed, %.8f, originDevice, %d, locationType: %d
Notifying odometer clients, distance, %.8f, startTime, %.8f, gps altitude, %.8f, odometer, %.8f, accuracy, %.8f, gpsSpeed, %.8f, gpsSpeedAccuracy, %.8f, timestampGps, %.8f, rawSpeed, %.8f, originDevice, %d
avgInterCalibrationTime
pctTurnsRejected
avgLapCorrection
numLaps
numLapInsertions
numLapsForConvergence
pctStrokesFailCurvature
pctStrokesFailMA
pctStrokesFailAccel
static void CLMetricCollectorBase::logStats(const CLSwimSessionStats &)
SessionStats,%s,%f,%s,%f,%s,%u,%s,%u,%s,%u,%s,%f,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u
authmap.plist
com.apple.locationd.bundle-/System/Library/PrivateFrameworks/Weather.framework
v16@?0@"NSString"4I8^B12
void CLClientManager::addAuth(const std::string &, uint32_t, bool)
#authsync addAuth %{public}s %{public}u %{public}d
authsync: Setting location services to %u
#authsync addAuth using key %{public}s
void CLClientManager::updateAuth(const std::string &, uint32_t, bool)
#authsync updateAuth %{public}s %{public}u %{public}d
authsync: Updating location services to %u
#authsync updateAuth using key %{public}s
void CLClientManager::deleteAuth(const std::string &)
#authsync deleteAuth using key %{public}s
void CLClientManager::deleteAllAuth()
#authsync deleteAllAuth
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Core/CLClientManager.mm
void CLClientManager::updateRemoteClientUsage(const std::string &, NSDictionary *)
void CLClientManager::deleteAuthSync(const std::string &)
#authsync deleteObject: %{public}s
void CLClientManager::sendResetNotification()
#authsync sending kNotificationReset to the watch
void CLClientManager::receiveResetNotification()
#authsync received kNotificationReset from the companion
void CLClientManager::requestRemotePromptForClient(CLDaemonClient *, CLClientManager_Type::AuthorizationRequestType)
#warning Cannot request always upgrade for client, %{public}s, client is not authorized when in use.
com.apple.locationd.bundle-/System/Library/PrivateFrameworks/FindMyDevice.framework
CLClientManagerSilo
-[CLClientManagerAdapter beginService]
CLClientManager::ImproveAccuracyNotification::ImproveAccuracyNotification(CLClientManagerTechnology)
last improve accuracy notification for %s, %f, retry interval, %f
Wifi
Bluetooth
void CLClientManager::ImproveAccuracyNotification::clear()
clear %s improve accuracy notification
static CLClientManager *CLClientManager::instanceForSilo(CLSilo *)
static void CLClientManager::shutdownInstance()_block_invoke
could not store clients data
com.apple.watchkit
CLCapabilityMonitor
CLClientManager::CLClientManager(CLSilo *)
#authsync initializing sync store
CLAuthSyncManager
CLUsageSyncManager
#authsync isWatch: %{public}d, isCompanion: %{public}d
v8@?0i4
Could not register for lock state darwin notification error %{public}d
com.apple.springboard.homescreenunlocked
Could not register for homescreen unlocked darwin notification error %{public}d
DisableAppInstallationChecks
NumEnablePromptsPerApplication
#warning Maximum location services enabled prompts per application overridden to %{public}d
v8@?0^{CLConnection=@@@@?@?@?@?}4
Twitter
com.atebits.Tweetie2
Weibo
com.sina.Weibo
Facebook
com.facebook.Facebook
airplane mode enabled, %d.
failed to fetch airplane mode state.
/System/Library/PrivateFrameworks/Weather.framework
com.apple.weather
/Applications/AdSheet.app
/System/Library/PrivateFrameworks/iAdCore.framework
/System/Library/Frameworks/Twitter.framework
/System/Library/Frameworks/Weibo.framework
/System/Library/Frameworks/Facebook.framework
/System/Library/SocialServices/Twitter.socialplugin
/System/Library/SocialServices/Weibo.socialplugin
/System/Library/SocialServices/Facebook.socialplugin
com.apple.Shoebox
/System/Library/PrivateFrameworks/PassKitCore.framework
com.apple.Passbook
/System/Library/PrivateFrameworks/Parsec.framework
/System/Library/PrivateFrameworks/CoreParsec.framework
#warning Can't migrate "%{public}s" to "%{public}s": client already exists with an auth of "%{public}d"
Can't migrate "%{public}s" to "%{public}s": NVP failure
Migrated "%{public}s" to "%{public}s"
"%{public}s" not found, skipping migration
void CLClientManager::prepareForReconnectionOfClients()
#warning Can't get clients for filing crash-grace CLInUseAssertions
#warning Can't get client state for key:%{public}s to file crash-grace CLInUseAssertions
Client %s had ongoing background location, taking temporary crash-grace CLInUseAssertion
crash-grace
void CLClientManager::sendAppStatusNotification()_block_invoke
Sending app status change notification
void CLClientManager::onWatchdogTimer()
#warning no watchdog event from %{public}s, deleting
void CLClientManager::handleNewConnection(CLConnection *)
Client %{public}s connected
void CLClientManager::handleDisconnection(CLConnection *)
Got disconnection for unknown client
Client %{public}s disconnected
void CLClientManager::disconnectAllClients()
void CLClientManager::resetClients()
#warning location services settings are frozen by restrictions - resetting
resetting and disconnecting all clients from daemon
Client %{public}s missing for authorization update, but didn't we just create it?
void CLClientManager::markAlwaysAuthorizationUsedForClient(const CLClientManager_Type::Name &)
Considering whether to mark client, %s, for always power use
Not marking client %s as having used Always-powers (not Always authorized (%s))
void CLClientManager::updateClientLocation(const CLClientManager_Type::Name &, CLClientManager_Type::OneShotEventType)
active location client %s retrieved location
non-active location client %s retrieved location, updating stop time
void CLClientManager::setClientLocation(const CLClientManager_Type::Name &, const CLClientManager_Type::Location &)
currently %{public}lu non-system location clients
void CLClientManager::updateClientService(const CLClientManager_Type::Name &, CLClientServiceType, CLClientManager_Type::OneShotEventType)
client,%s, service,%lu, is already active.
non-active client,%s, service,%lu, updating stop time
bool CLClientManager::setClientServiceActiveAtTime(const CLClientManager_Type::Name &, CLClientServiceType, bool, bool, double)
Service: name, %s, type, %s, active, %d
void CLClientManager::markClientServiceUsed(const CLClientManager_Type::Name &, CLClientServiceType)
Service: name, %s, type, %s, marked as used
void CLClientManager::clearAllClientsRemoteLocation()
couldn't get keys for client dictionary
bool CLClientManager::wakeupLaunchdManagedClient(const std::string &)
Wakeup Launchd Managed Client: <%{public}s>
/usr/libexec/UserEventAgent
Can't find %{public}s connection
void CLClientManager::clearClientRegions(const std::string &)
clearing regions for client '%s'
void CLClientManager::clearClientSignificantLocationChange(const std::string &)
clearing significant location change for client '%s'
void CLClientManager::setClientMissingTime(const std::string &, const CFAbsoluteTime &)
How can an app be missing if we don't have an entry for it?
void CLClientManager::repromptOneEligibleAlwaysApp()
Should never be executed in this context
Skipping #reprompt iteration because one is already underway
Couldn't get keys for client dictionary
Not iterating for #reprompt: disabled
System Service %{public}s shouldn't be eligible for a reprompt, but is
Could not create trial period reprompt notification for %{public}s
Could not create runloop source for trial period reprompt notification for %{public}s
Creating trial period #reprompt notification for %{public}s
bool CLClientManager::isClientWhitelisted(const CLClientManager_Type::Name &)
isClientWhitelisted, %{public}s, %{public}s, %{public}s
Un-whitelisting anything that has explicitly specified a bundle path: %{public}s
executable, %{public}s, strippedName, %{public}s, systemBase, %{public}s
CLTypeRegistrationResult CLClientManager::getClientEffectiveRegistrationResult(const CLClientManager_Type::Name &)
getClientEffectiveRegistrationResult, %{public}s, %{public}s, %{public}s, CLClientRegistrationResult, %{public}s, CLCommonLocationServicesEnabled, %{public}d
location disabled system-wide, denying internal executable %{public}s
location disabled system-wide, denying executable %{public}s
void CLClientManager::cacheStatusOfClients()
Couldn't get keys for client dictionary, deauthorizing all clients
CLTypeRegistrationResult CLClientManager::getClientStaticRegistrationResult(const CLClientManager_Type::Name &)
allowing internal executable %{public}s
no bundle ID or bundle path found - denying %{public}s
platform does not support system service, %{public}s, required capabilities.
already denied executable %{public}s
already authorized WhenInUse executable %{public}s
already authorized Always executable %{public}s
CFStringRef CLClientManager::copyClientPurposeForRegistrationResult(const CLClientManager_Type::Name &, CLClientRegistrationResult)
Requesting client (%{public}s) purpose for unsupported registration type %{public}d
purpose string from %s's bundle: '%s'
purpose string from %s's property: '%s'
unable to copy purpose string from client '%{public}s'
LOCATION_ACCURACY
wapi
IMPROVE_LOCATION_ACCURACY_WLAN
IMPROVE_LOCATION_ACCURACY_WIFI
IMPROVE_LOCATION_ACCURACY_BLUETOOTH
SETTINGS
void CLClientManager::ensureTechnologyEnabled(CLClientManagerTechnology, CLDaemonClient *)
ImproveAccuracyNotification object not created for technology, %{public}s
v8@?0^{CLAppMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}4
post improve accuracy notification, technology, %s, client, %s
LOCATION_CLIENT_PERMISSION_REPROMPT
CONTINUE
LOCATION_CLIENT_PERMISSION_ALWAYS
LOCATION_CLIENT_PERMISSION_OK
DONT_ALLOW
LOCATION_CLIENT_PERMISSION_WHENINUSE
LOCATION_CLIENT_PERMISSION_UPGRADE_WHENINUSE_ALWAYS
LOCATION_CLIENT_PERMISSION_CANCEL
CLTypeRegistrationResult CLClientManager::requestClientAuthorization(CLDaemonClient *, CLClientManager_Type::AuthorizationRequestType)
#warning Droping authorization request.  This function shouldn't be used on this device.
CLTypeAuthorizationStatus CLClientManager::registrationResultToAuthorizationStatus(const CLTypeRegistrationResult &)
unknown registsration result %{public}d
void CLClientManager::cancelClientNotification(CLDaemonClient *)
canceling notification for %s
void CLClientManager::setClientAuthorization(const CLClientManager_Type::Name &, CLClientAuthorizationStatus, const char *)
location services settings are frozen by restrictions - denying %{public}s
Never(because_invalid)
Invalid(Unset)
Never
WhenInUse
Always
Setting executable: %{public}s, bundle: %{public}s, bundle path: %{public}s authorization to %{public}d (%{public}s)
%{public}s application deauthorized; deauthorizing daemon as well
%{public}s application deauthorized; daemon not yet used
%{public}s daemon deauthorized; deauthorizing application as well
%{public}s daemon deauthorized; app not yet used
starting
stopping
void CLClientManager::markClientInUseTransition(const std::string &, const std::string &, bool)
CLIUA: clientKey:%s  reason:%s  assertion:%s
CLIUA: Could not find InUseAssertion with reason '%{public}s' for '%{public}s' to remove it
CLEmergencyController
void CLClientManager::checkRestrictions(bool)
Location services available %d; parental controls enabled %d (refresh %d)
#warning location is restricted; freezing client states
location is not restricted
bool CLClientManager::areParentalControlsEnabled(bool)
SBParentalControlsEnabled
NameValuePair::get failed despite our bounds checking
bool CLClientManager::checkServiceStopped(const std::string &, CLClientServiceType)
#warning %{public}s time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
void CLClientManager::checkLocationStopped(bool)
Resuming client '%s'
locationd-resume-on-crash
void CLClientManager::checkLocationStopped(bool)_block_invoke
Failed to resume '%{public}s': assertion not acquired
Failed to resume '%{public}s': init failure
Non-app client is was a background client?
void CLClientManager::scheduleAppStatusEvent()
Scheduling pending app status event
void CLClientManager::checkRegionsStopped()
#warning %{public}s region time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
void CLClientManager::checkSignificantLocationChangeStopped()
v8@?0^{CLSignificantChangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{CLDistanceCalc=ddddd}B^{CLPersistentTimer}{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}^{CLPersistentTimer}ddd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBdiddd{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}i{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}BcBBd^{__CFRunLoopTimer}B{list<CLSignificantChangeManager::PendingLaunch, std::__1::allocator<CLSignificantChangeManager::PendingLaunch> >={__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>=^{__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>}^{__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSignificantChangeManager::PendingLaunch, void *> > >=L}}@}4
#warning Significant time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
void CLClientManager::checkRangeStopped()
stop range for client '%s'
void CLClientManager::checkAppInstallationStatus()
could not retrieve bundle IDs
installation check found %ld uninstalled apps (amongst %ld total clients and %ld bundle IDs)
%s is missing
%s was explicitly uninstalled
%s has been missing for %.3fs (safe harbor threshold: %.3fs) - clearing
Deleting entry for %s
%s has been missing for %.3fs (safe harbor thershold: %.3fs)
%s was missing for %.3fs (safe harbor threshold: %.3fs) - clearing
%s restored within safe harbor time of %.3fs - keeping
updated AppUninstallTimer; next timer will fire in %.3fs
void CLClientManager::getAggregateLocationAppInfo(CLDaemonClient *, bool, CLClientManager_Type::Location &)
client, '%s', app's client cnt, %d, active, %d, spectator, %d, batchEnabled, %d, desiredAccuracy, %.2f, distanceFilter, %.2f
void CLClientManager::getAggregateRangeAppInfo(CLDaemonClient *, bool, bool &)
client, '%s', app's client cnt, %d, active, %d
void CLClientManager::markClientsAsAuthorized(const CLClientManager_Type::Name &)
void CLClientManager::markSystemServicesAsAuthorized()
bool CLClientManager::mayTakeProcessAssertion(CLDaemonClient *)
mayTakeProcessAssertion,%d,background,%d,slc,%d
void CLClientManager::onClientTrialRepromptNotification(CFUserNotificationRef, CFOptionFlags)
Received trial reprompt notification without a designated promptee
User has authorized continued access for %s at reprompt
User has selected 'settings' on reprompt for %{public}s... taking them there
#warning No user response to client %{public}s (flags 0x%{public}lx)
void CLClientManager::openPreferences(const char *const)
open preferences with url, %{public}s
Couldn't create Preferences URL, %{public}s
void CLClientManager::openPreferences(const char *const)_block_invoke
could not launch Preferences
void CLClientManager::onImproveAccuracyPrefsNotification(CFUserNotificationRef, CFOptionFlags)
ImproveAccuracyNotification object not created for notification, %p
#warning no user response for improve accuracy prefs notification %{public}s (flags 0x%{public}lx)
void CLClientManager::checkLocationServicesEnabledState()
GPS_NETWORK: currentStatus(%d) isGpsControlledByNetwork(%d)
static bool CLClientManager::getClientNameFromPid(const pid_t &, CLClientManager_Type::Name &)
Setting executable %s
Setting bundle ID %s and executable %s
void CLClientManager::onDarwinNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)
Keep Apps Up To Date changed
Unknown notification: %{public}d
void CLClientManager::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)
Received state request for region,'%s/%s'.
Received state transition for region,'%s/%s'.
void CLClientManager::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)
void CLClientManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)
AppMonitor notification, %d, %s, pid, %d, bundleId, %s
User force quit '%{public}s'
@ClxClient, quit, %{public}s
AppMonitor notification, %d, %s, pid, %d, bundleId, %s, client, %s, connection, %p
'%{public}s' task suspended: removing client
void CLClientManager::onWifiServiceNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
wifi power state, %d.
wifi enabled
void CLClientManager::onBluetoothServiceNotification(int, const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &)
bluetooth power state, %d.
bluetooth enabled
com.apple.webapp
com.apple.AdSheet
com.apple.AdSheetPad
com.apple.AdSheetPhone
com.apple.springboard
/System/Library/PrivateFrameworks/Assistant.framework
/System/Library/PrivateFrameworks/AOSNotification.framework
void CLClientManager::performMigration()
Removing entry for bundle ID %{public}s if present
location-reminders
%{public}s not supported, removing entry for bundle ID %{public}s if present
Removing entry for bundle path %{public}s if present
#warning bundle path, '%{public}s', does not exist on disk;  clearing.
AuthMigrate(%{public}s): Skipping: could not get client nvp
AuthMigrate(%{public}s): Skipping: no Authorized key
AuthMigrate(%{public}s): Preserving Authorization over Authorized
AuthMigrate(%{public}s): Y => Always
AuthMigrate(%{public}s): N => Never
Unable to save clients list after migration, data loss due to crash possible
void CLClientManager::enumerateBundles()
void CLClientManager::enumerateBundles()_block_invoke_2
Setting client for bundle path %s
bool CLClientManager::updateStaticAuthorizationMaskForClient(const CLClientManager_Type::Name &, CLLocationDictionaryUtilitiesAuthorizationMask, bool)
#warning New authMask %{public}lu for client %{public}s implicitly extends its supported mask (%{public}d) until next connection & slide
#warning Never auth of novel client %{public}s... providing default of SomeKindOfYes until next connection & slide
void CLClientManager::getKeysForServiceType(CLClientServiceType, CFStringRef &, CFStringRef &)
Unsupported CLClientServiceType: %{public}lu
DARmap.plist
void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)
DAR: could not read map file %s
i12@?0@4@8
DAR map: %s
DAR map sorted keys: %s
void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)_block_invoke_2
DAR: original location: %.8f, %.8f, %.2f
DAR:  reduced location: %.8f, %.8f, %.2f
v172@?0{?=ii{?=dd}ddddddddddidi{?=dd}diIii}4d164
DAR: applying default quantization %f
void CLClientManager::reduceAccuracy(const CLClientLocation &, CLClientManagerReduceAccuracyReplyBlock)_block_invoke
DAR: applying new quantization %f based on ap count %d
DAR: applying cached quantization %f
static bool CLClientManager::isAlteredAccessoryLocation(const CLClientLocation &)
ALTERED: location: %.8f, %.8f, %.2f, %d, %d
static bool CLClientManager::unalterAccessoryLocation(CLClientLocation &, const CLDaemonLocationPrivate &)
ALTERED: original location: %.8f, %.8f, %.2f, %d, %d
ALTERED:  unaltered location: %.8f, %.8f, %.2f, %d, %d
Authorization
lastWifiImproveAccuracyNotification
WifiImproveAccuracyNotificationInterval
lastBluetoothImproveAccuracyNotification
BluetoothImproveAccuracyNotificationInterval
SPCompanionConnection
/System/Library/PrivateFrameworks/SockPuppetGizmo.framework/SockPuppetGizmo
com.apple.locationd.executable-
com.apple.locationd.bundle-
com.apple.locationd/Restrictions
/System/Library/Frameworks/Social.framework/XPCServices/com.apple.twitter.xpc
/System/Library/Frameworks/Social.framework/XPCServices/com.apple.weibo.xpc
/System/Library/Frameworks/Social.framework/XPCServices/com.apple.facebook.xpc
BundleId
BundlePath
Executable
BackgroundLocationTimeStarted
BackgroundLocationTimeStopped
CFStringRef _copyDisplayNameFromBundlePath(CFStringRef)
#warning could not get localized string '%{public}s'!
could not get UN localized bundle name from bundle at '%{public}s'; soup cannot be given to them.
Registered
Whitelisted
TimeMissing
SupportedAuthorizationMask
TrialPeriodBegin
TrialPeriodNeedsReprompt
Purpose
LocationTimeStarted
LocationTimeStopped
LocationDesiredAccuracy
LocationTechnologiesInUse
LocationDistanceFilter
BatchEnabled
AppSwitcherQuitAppTime
Beacon
Circular
Ranging
Location
BackgroundLocation
RemoteLocation
RemoteCircular
CLClientServiceType (anonymous namespace)::serviceForRegion(CLClientRegionType)
SignificantTimeStarted
ClientRepromptAlwaysNotificationInterval
/usr/
/AppleInternal/
/System/
/Applications/AdSheet.app/
/Applications/AdSheet~ipad.app/
SignificantTimeStopped
RangeTimeStarted
RangeTimeStopped
prefs:root=Privacy&path=LOCATION
prefs:root=WIFI
prefs:root=Bluetooth
com.apple.reminders
Authorized
/System/Library/LocationBundles
/AppleInternal/Library/LocationBundles
BeaconRegionTimeStarted
BeaconRegionTimeStopped
FenceTimeStarted
FenceTimeStopped
VisitTimeStarted
VisitTimeStopped
RemoteLocationTimeStarted
RemoteLocationTimeStopped
MicroLocationTimeStarted
MicroLocationTimeStopped
RemoteFenceTimeStarted
RemoteFenceTimeStopped
virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLClientManager_Type::Notification, NotificationData_T = CLClientManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%@ @ %f,<startDate,%@,confidence,%ld,unknown,%d,stationary,%d,walking,%d,running,%d,automotive,%d,cycling,%d>
vehicleConnected
TB,R,N,GisVehicleConnected
unknown
stationary
walking
running
automotive
cycling
kCMMotionActivityCodingKeyType
kCMMotionActivityCodingKeyConfidence
kCMMotionActivityCodingKeyStartTime
kCMMotionActivityCodingKeyVehicleConnected
void *CLTileFileWithTraversal::mmapTile(size_t &, int &)
TILE: mmapTile, prefer local file name because it exists, %s
TILE: mmapTile, can't open, %s, errno, %d, %s
TILE: can't stat, %s, errno, %d, %s
bool CLTileFileWithTraversal::fileGetNextSection(CLTileFileWithTraversal::CLMappedFile &, CLTilesManager_Type::SectionHeader &)
TILE: corrupt header, fileGetNextSection, size, %zd, readto, %lld, %d
virtual bool CLTileFileWithTraversal::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)
TILE: traverseTileFile, start, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx
TILE: traverseTileFile, can't open tile
TILE: traverseTileFile, file is empty
TILE: thisSection, message, %s, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d, name, %s
TILE: invalid tile file, bad allocation size, totalBytesInSection, %lu, maxAllocationSize, %lu
TILE: failed to read pSectionH, %lu, %lu
TILE: section, signature, 0x%x, sectionId, %d, headerSizeBytes, %u, sizeBytes, %u
TILE: ERROR: failed to fseek to, currentFileOffset, %lu, %u
TILE: traverseTileFile, done
virtual void CLTileFileWithTraversal::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &)
TILE: CLTileFile, sectionId, %d, %s
virtual void CLTileFileWithTraversal::onTraversingTileHeader(const CLTilesManager_Type::TileHeader &)
TILE: tile, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, altitude, %f,  minAltitude, %f, maxAltitude, %f, numOfInputPoints, %d, generationTime, %.1f, expirationAge, %d, %d, age, %.1lf
virtual void CLTileFileWithTraversal::onTraversingTileHeaderKeyLatLon(const CLTilesManager_Type::TileHeaderKeyLatLon &)
TILE: onTraversingTileHeaderKeyLatLon, tileid, %s
TILE: tile.keylatlon, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf, sec_key, %016llx
virtual void CLTileFileWithTraversal::onTraversingTileHeaderLocation(const CLTilesManager_Type::TileHeaderLocation &)
TILE: tile.location, tileid, %s, serverName, %s
TILE: tile.location, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf
virtual void CLTileFileWithTraversal::onTraversingTileIndexHeader(const CLTilesManager_Type::TileIndexMacHeader &)
TILE: tileMacIndexHeader, headerSizeBytes, %u, tileMacIndexHeader, entrySizeInBytes, %u, numOfEntries, %u
virtual void CLTileFileWithTraversal::onTraversingTileIndexEntry(const CLTilesManager_Type::AccessPointIndexEntry &)
TILE: idx, %3u, mac,%x:%x:%x:%x:%x:%x, offset, %u
virtual void CLTileFileWithTraversal::onTraversingTileAPTableHeader(const CLTilesManager_Type::TileAccessPointTable &)
TILE: tileAccessPointTable, headerSizeBytes, %u, tileAccessPointTable, entrySizeInBytes, %u, numOfEntries, %u
virtual void CLTileFileWithTraversal::onTraversingTileAPTableEntry(const CLTilesManager_Type::AccessPointEntry &)
TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf
void *CLTileFileWithTraversal::readDataEntries(FILE *, const CLTilesManager_Type::SectionHeader &, unsigned int, unsigned int, unsigned int)
TILE: read data, sectionId, %d, entriesOffset, %u, entriesNumToRead, %u
TILE: ERROR: failed to skip entries pre read, %u, ret, %d
TILE: ERROR: failed to read bytes, %u, %u
CLLocalization
static void CLLocalization::onLanguageChanged(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)
language changed - refreshing
AppleLanguages
CFDictionaryRef CLLocalization::copyStringsDictionaryForBundle(CFBundleRef, CFStringRef)
could not use english as default language
could not get localizations array from bundle
could not get localizations for preferred languages
no localizations for preferred languages
getting '%s' localized strings for '%s'
could not get resource URL for %s
could not create input stream for %s
could not deserialize data from URL for %s, error, %s
CFStringRef CLLocalization::copyStringFromBundle(CFBundleRef, CFStringRef)
issue retrieving localized strings for bundle '%s'
key %s does not contain a string value
CFStringRef CLLocalization::copyString(CFStringRef)
no corresponding string for %s
com.apple.language.changed
.GlobalPreferences
strings
InfoPlist
CLCarrierSettingsSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLCarrierSettings.mm
-[CLCarrierSettingsAdapter beginService]
void CLCarrierSettings::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)
received unknown notification %s from telephony service
virtual void CLCarrierSettings::setInternal(const CFStringRef, const CFTypeRef)
should not write to carrier bundle
virtual void CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLCarrierSettings_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
Overriding device activation status check.
virtual bool CLFitnessTrackingNotifierWatch::isDeviceActivated() const
Unable to query pairing id, suspending activity tracking.
Unable to obtain pairing id, suspending activity tracking.
virtual bool CLFitnessTrackingNotifierWatch::isFitnessTrackingEnabled() const
Failed to get fitness tracking state in Bridge->Motion&Fitness. It may not have been set yet. Assuming default.
Fitness tracking is disabled, suspending activity tracking.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/FitnessTracking/CLFitnessTrackingNotifierWatch.mm
virtual void CLFitnessTrackingNotifierWatch::notifyClients()
Device on-charger, suspending activity tracking.
void CLFitnessTrackingNotifierWatch::onBatteryNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
NanoLifestylePrivacyPreferencesChangedNotification
NRPairedDeviceRegistryDeviceDidPairDarwinNotification
NRPairedDeviceRegistryDeviceDidUnpairDarwinNotification
EnableFitnessTracking
com.apple.nanolifestyle.privacy
locationFingerprint
locationFingerprints
T@"NSMutableArray",&,N,V_locationFingerprints
static bool CLWindowedSmoother::smoothPoints(const std::vector<swan::stGPSsa> &, std::vector<CLClientLocation> &, bool)
HEALTH_SMOOTH,too few points to smooth
HEALTH_SMOOTH, corner detection failed
HEALTH_SMOOTH: Corner found at %d, %.7f, %.7f
CLWindowedSmoother.smoothPoints
HEALTH_SMOOTH, Indexing error
HEALTH_SMOOTH,Smoother Run Failed
HEALTH_SMOOTH,Indexing error
HEALTH_SMOOTH,Conversion Failed, excluding point at gpsSec %f
use_input_locationd_data_file
input_locationd_data_file
Invalid input_locationd_batched_data_file
load_batched_data_from_locationd
use_input_ascii_batched_data_file
input_ascii_batched_data_file
Invalid input_ascii_batched_data_file
save_results_to_disk
save_results_path
Invalid save_results_path
load_matlab_inputs
load_matlab_inputs_path
Invalid load_matlab_inputs_path
temp_writable_path
Invalid temp_writable_path
use_truth_reference
truth_reference_filename
Invalid truth_reference_filename
enable_data_editing
data_editing_sigma_threshold
Invalid data_editing_sigma_threshold
horizontal_position_process_noise
vertical_position_process_noise
velocity_sigma_fudge_factor
vertical_speed_limit
minimum_single_component_speed_standard_deviation
mimimum_driving_speed_that_requires_speed_uncertainty_inflation
minimum_driving_speed_standard_deviation
For config option 
 loaded value "
 using default "
INFINITY
infinity
bool runSmoother(swan::BatchedGNSSDataSmoother &, const std::vector<swan::stGPSsa> &, size_t, std::vector<f64> &, std::vector<f64> &, std::vector<s32> &, std::vector<swan::details::Vector<6> > &, std::vector<swan::details::Matrix<6, 6> > &, std::vector<bool> &)
HEALTH_SMOOTH,smoother is unhealthy
HEALTH_SMOOTH,samples rejected,%lu
nr >= 0
nc >= 0
RowingModelMetsScale
virtual CLMetsInfo CLNatalieRowingModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, Rowing Speed Model, timestamp, %f, stroke power, %f, strokes amplitude, %f, stroke rate (spm), %f, height (m), %f, gender, %d, speed, %f
Natalie Model, Rowing WR Model, timestamp, %f, stroke speed (m/s), %f, strokes amplitude, %f, weight (KG), %f, METS, %f, fMetsScaling, %f
numberOfSteps
firstStepTime
activeTime
hasDistance
hasNumberOfSteps
Ti,N,V_numberOfSteps
hasFloorsAscended
Ti,N,V_floorsAscended
hasFloorsDescended
Ti,N,V_floorsDescended
hasFirstStepTime
Td,N,V_firstStepTime
hasActiveTime
Tf,N,V_activeTime
idx (%ld) is out of range (%ld)
macs
channels
rssis
hiddens
T@"NSMutableArray",&,N,V_macs
channelsCount
rssisCount
hiddensCount
T@"CRWifiLocation",&,N,V_location
CLWatchOrientationSettingsNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/WatchOrientationSettings/CLWatchOrientationSettingsNotifier.mm
-[CLWatchOrientationSettingsNotifierAdapter beginService]
CLWatchOrientationSettingsNotifier
CLWatchOrientationSettingsNotifier::CLWatchOrientationSettingsNotifier(CLSilo *)
Orientation Notifier Instantiated
virtual void CLWatchOrientationSettingsNotifier::shutdown()
CLWatchOrientationSettingsNotifier is shutting down.
virtual bool CLWatchOrientationSettingsNotifier::registerForNotificationInternal(const CLWatchOrientationSettingsNotifier_Type::Notification &)
virtual bool CLWatchOrientationSettingsNotifier::unregisterForNotificationInternal(const CLWatchOrientationSettingsNotifier_Type::Notification &)
void CLWatchOrientationSettingsNotifier::queryOrientationSettings()
Crown orientation setting key is invalid, defaulting to crown on right (not inverted)
Wrist orientation setting key is invalid, defaulting to left wrist
Watch Orientation,crown,%d,wrist,%d
invertUI
com.apple.nano
wornOnRightArm
com.apple.nano.invertUIChangedNotification
com.apple.nano.wristOrientationChangedNotification
virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLWatchOrientationSettingsNotifier_Type::Notification, NotificationData_T = CLWatchOrientationSettingsNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLElevationArbiter::reset()
Resetting elevation arbiter
void CLElevationArbiter::update(const CLElevationChangeEntry &)
Time rollback compared to fPrevStepCountElevation, currentTime, %f, previousTime, %f
Time rollback, currentTime compared to fFinalElevation, %f, previousTime, %f
void CLRavenEventConverter::ConvertLocation(const CFTimeInterval &, CLSignalEnvironmentProvider_Type::SignalEnvironmentType, const CLRavenEventConverter::AccuracyBounds &, const CLDaemonLocation &, const CLDaemonLocationPrivate &, raven::PositionEvent &, raven::VelocityEvent &, bool &, bool &)
RAVEN: Could not convert LLA Coordinate %.7lf,%.7lf to ECEF
int CLRavenEventConverter::ConvertRavenSolution(const CFAbsoluteTime &, const CLDaemonLocation &, const CLDaemonLocationPrivate &, const raven::RavenSolution &, CLDaemonLocation &)
RAVEN: position solution numerically invalid.
RAVEN: velocity solution numerically invalid.
RAVEN: direction of travel solution numerically invalid.
RAVEN: attitude solution numerically invalid.
RAVEN: rate gyro bias solution numerically invalid.
RAVEN: accelerometer bias solution numerically invalid.
RAVEN: Could not convert ECEF Coordinate %.7lf, %.7lf, %.7lf to LLA
RAVEN: Could not convert ECEF Coordinate %.7lf, %.7lf, %.7lf to ENU
RAVEN: Could not convert ECEF Vector %.7lf, %.7lf, %.7lf to ENU
bool CLRavenEventConverter::ConvertStepCount(const CLStepCountEntry &, const CLStepCountEntry &, raven::OdometerEvent &)
RAVEN: Time not increasing between step count events
RAVEN: distance not increasing between step count events
bool CLRavenEventConverter::ConvertAltimeter(const CLPressure::Sample &, const CLPressure::Sample &, const double, raven::AltimeterEvent &)
RAVEN: Time not increasing between pressure events
strcmp(c, ":") == 0
CNSubMatrix
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/System/Library/PrivateFrameworks/CoreNavigation.framework/Headers/cnmatrix/cnsubmatrix.h
A.num_cols_ == B.num_cols_
ForceVo2maxCal
CLVo2Estimator::CLVo2Estimator()
Force Vo2max Cal set to %d
void CLVo2Estimator::feedCalorieUpdate(CFAbsoluteTime, double, CLMetsSource, GradeType, double, bool)
mets,%f,metsOK,%d,hasGPS,%d,hasStrideCal,%d,grade,%f,rawGradeType,%d,deltaMETS,%f,timeSinceStart,%f,metSource,%d,numMets,%d,hr,%f,hrStartTime,%f,metComputeTime,%f
float CLVo2Estimator::feedWorkoutEvent(const CLMotionStateMediator_Type::WorkoutEvent &)
workoutEvent,%ld,workoutType,%ld
Vo2EstimationError CLVo2Estimator::endSession(float &)
Vo2Max,%f,numPairs,%d,status,%d,LSEst,%f,SumEst,%f,divergence,%f,consistency,%f
MetStats,total,%d,usable,%d,totalGoodDistance,%d,totalGPS,%d,totalStrideCal,%d,totalKnownGrade,%d,totalFlatGrade,%d,totalWR,%d,totalDeltaOK,%d,totalPostWarmup,%d,totalLargeEnough,%d,totalWithGoodCloseHR,%d
HRStats,total,%d,usable,%d,totalGood,%d,totalAboveMin,%d,totalBelowMax,%d
void CLVo2Estimator::logSessionStats(double, double, double, Vo2EstimationError)
pctHRSamplesValidMin,%d,pctHRSamplesValidMax,%d,pctHRSamplesWithRecentHR,%d,pctMETSamplesWithValidDelta,%d
longitudinalConsistency,%d,old,%f,new,%f
void CLVo2Estimator::feedStreamingHeartRate(const CLCatherineData &)
hr,%f,hrOK,%d,startTime,%f,source,%d,interpolation,%d,conf,%f,minThresh,%f,maxThresh,%f
void CLVo2Estimator::feedOnsetHeartRate(const CLCatherineData &)
EnableEllipticalLoadCal
EllipticalModelMetsScale
EllipticalModelSwitchMargin
CLNatalieEllipticalModel::CLNatalieEllipticalModel()
Ellptical Load Calibration Enabled status : %d 
WR-HR Model Switch Margin : %f 
virtual CLMetsInfo CLNatalieEllipticalModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, Elliptical Linear Regression, timestamp, %f, duration, %f, stepcount, %d, steprate, %f, resistance, %f, weight, %f, feature2, %f, mets, %f
Natalie Model, Elliptical DT Regression, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
Natalie Model, Elliptical METs, timestamp, %f, hrMets, %f, wrMets, %f, calibrationValue, %f, calibrated wrMets, %f, HR-WR diff, %f, mets, %f, metsSource, %d, fMetsScaling, %f, loadCalStatus, %d
-[CLDiagnosticManager beginService]
#diagnosticManager beginService
com.apple.locationd.diagnostic
-[CLDiagnosticManager endService]
#diagnosticManager endService
-[CLDiagnosticManager registerFileForCollection:]
Add file to #diagnosticManager: %{public}@
Trying to register a nil NSURL
-[CLDiagnosticManager unregisterFileForCollection:]
Remove file to #diagnosticManager: %{public}@
Trying to unregister a nil NSURL
-[CLDiagnosticManager copyRegisteredFilesWithHandler:]
Client requested #diagnosticManager file copy to dest: %@
diagnosticManager trying to copy file: %@
-[CLDiagnosticManager listener:shouldAcceptNewConnection:]
#diagnosticManager received new XPC Connection request
Why didn't we get a connection?
-[CLDiagnosticManager listener:shouldAcceptNewConnection:]_block_invoke
#diagnosticManager Interruption handler called
#diagnosticManager Invalidation handler called
#diagnosticManager Resuming XPC Connection: %@
-[CLDiagnosticManager fileManager:shouldCopyItemAtURL:toURL:]
#diagnosticManager fileManager asking if should copy from %@ to %@
Trying to move a file that is not in our cache directory: %@
mobile
Library
Logs
CrashReporter
yyyy-MM-dd_HH-mm-ss
mobileCrashReporterPath
T@"NSURL",R,N
listener
T@"NSXPCListener",&,N,V_listener
registeredFiles
T@"NSMutableSet",&,N,V_registeredFiles
fileManager
T@"NSFileManager",&,N,V_fileManager
connection
T@"NSXPCConnection",&,N,V_connection
CMIirFilter::CMIirFilter(const CMIirFilterParams *)
Assertion failed: (fIirFilterParams != __null) && (fIirFilterParams->filterOrder <= kMaxFilterOrder), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMIirFilter.cpp, line 20,IirFilterParams,%p,filterOrder,%d,maxFilterOrder,%d.
void CMOnBodyDetector::printParameters() const
configuration: low band = [%d %d] high band [%d %d]
configuration: classifierMinLowPower = %f, classifierMaxLowPower = %f, classifierMaxHighPower = %f
configuration: theta = [%.2f %.2f %.2f %.2f %.2f %.2f]
configuration: oddsThreshold = %f, medianFilterSize = %zu, confidenceThreshold = %f, useHysteresis = %d, useAngleOverride = %d, angleMetricThreshold = %f
void CMQueue<bool>::setCapacity(size_t) [T = bool]
Assertion failed: fHeadAndSize.fSize == 0 && fHeadAndSize.fHead == 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMQueue.h, line 93,size,%u,head,%u.
const T &CMQueue<bool>::operator[](const size_t) const [T = bool]
GyroBias
void CLSensorFusionServiceAP::onBiasAndVariance(const CLMotionTypeGyroBiasAndVariance)_block_invoke
Type,%s,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d
compass
compass-calibration
CFDataRef CLMagnetometerCoexistenceLocal::copyCompassCalibrationData()
Invalid cpas data.
The cpas data is not a CFData type.
BOOL CLMagnetometerCoexistenceLocal::deviceStillHasOriginalCamera()
Cpas data is NULL.
Cpas pointer is NULL.
Unexpected cpas version: %u.
Original serial number data is NULL.
Original serial number pointer is NULL.
BackCameraSerialNumber
Invalid back camera serial number data.
Incorrect back camera serial number length. Actual length %ld. Expected length %lu.
Current serial number data is NULL.
BackCameraModuleFocusActuatorID
NSNumber *CLMagnetometerCoexistenceLocal::cameraVcmId()
Bailing while checking VCM actuator ID.
VCM actuator ID data type %d does not match expected type %d
NSData *CLMagnetometerCoexistenceLocal::sanitizedCompassCalibrationData()
CPAS data is NULL.
CPAS pointer is NULL.
AppleH4CamIn
northWestLatitude
northWestLongitude
southEastLatitude
southEastLongitude
tiles
hasNorthWestLatitude
Td,N,V_northWestLatitude
hasNorthWestLongitude
Td,N,V_northWestLongitude
hasSouthEastLatitude
Td,N,V_southEastLatitude
hasSouthEastLongitude
Td,N,V_southEastLongitude
T@"NSMutableArray",&,N,V_tiles
indoorWifis
indoorLocations
indoorCMAttitude
indoorCMPedometer
indoorMotionActivity
indoorPressure
-[CRIndoorCollectionRequest writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRIndoorCollectionRequest.m
T@"NSMutableArray",&,N,V_indoorWifis
T@"NSMutableArray",&,N,V_indoorLocations
indoorCMAttitudes
T@"NSMutableArray",&,N,V_indoorCMAttitudes
indoorCMPedometers
T@"NSMutableArray",&,N,V_indoorCMPedometers
indoorMotionActivitys
T@"NSMutableArray",&,N,V_indoorMotionActivitys
indoorPressures
T@"NSMutableArray",&,N,V_indoorPressures
%@,<startDate %@, endDate %@, distance %@, currentSpeed %@, averageSpeed %@>
T@"NSDate",R,N,V_startDate
T@"NSDate",R,N,V_endDate
T@"NSNumber",R,N,V_distance
currentSpeed
T@"NSNumber",R,N,V_currentSpeed
averageSpeed
T@"NSNumber",R,N,V_averageSpeed
kCMOdometerDataCodingKeyStartDate
kCMOdometerDataCodingKeyEndDate
kCMOdometerDataCodingKeyDistance
kCMOdometerDataCodingKeyCurrentSpeed
kCMOdometerDataCodingKeyAverageSpeed
generationTimestamp
configurationType
configurationProtobuf
hasGenerationTimestamp
Td,N,V_generationTimestamp
hasConfigurationType
Ti,N,V_configurationType
hasConfigurationProtobuf
T@"NSData",&,N,V_configurationProtobuf
WIFI_HISTOGRAM
com.apple.locationd.bundle-/System/Library/LocationBundles/Traffic.bundle
CLCachedLocationControllerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Transit/CLCachedLocationController.mm
-[CLCachedLocationControllerAdapter beginService]
CLCachedLocationController
CachedLocationController
Traffic
CLCachedLocationController::CLCachedLocationController(CLSilo *)
Init power state: off
const std::string CLCachedLocationController::stateToString(CLCachedLocationController_Type::CachedLocationState) const
void CLCachedLocationController::setStateAndUpdateDebounceTimout(CLCachedLocationController_Type::CachedLocationState, CFTimeInterval)
Debounce changed to %lf [s]
Already in state %s, %lf
Cached Location changed state from %s to %s
void CLCachedLocationController::onTransitDebounceTimer()
Debounce timer fired, stopping
virtual void CLCachedLocationController::onStartTransitRoute(CFTimeInterval, const CLClientLocationCoordinate &)
Received start transit route
virtual void CLCachedLocationController::onEndTransitRoute()
Received end transit route
void CLCachedLocationController::onLocationUpdateNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Received unknown notification, %d
void CLCachedLocationController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Recevied kNotificationAuthorization for %s
Received Location Services status %d
void CLCachedLocationController::resumeForException(CLCachedLocationController::CacheException)
Resume for exception, %#x, oldExceptions %#x
Resume
void CLCachedLocationController::suspendForException(CLCachedLocationController::CacheException)
Suspend for exception, %#x, oldExceptions %#x
Suspend
virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::listClients() [Notification_T = CLCachedLocationController_Type::Notification, NotificationData_T = CLCachedLocationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
allowsNetworkTileLoad
isNetworkTileLoadAllowed
TB,V_isNetworkTileLoadAllowed
CLGeoAccessMapGeometry::CLGeoAccessMapGeometry()_block_invoke
CLMM, Tile Error Reported:%s
v12@?0r^{_GEOTileKey=b6b26b26b6b8b8b8b1b7[4C]}4@"NSError"8
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MapMatching/CLGeoAccessMapGeometry.mm
CLGeoAccessMapGeometry::CLGeoAccessMapGeometry()
virtual void CLGeoAccessMapGeometry::disable()
CLMM, disabling tile loader
virtual void CLGeoAccessMapGeometry::enable()
CLMM, enabling tile loader
v8@?0@"GEOMapRequest"4
virtual bool CLGeoAccessMapGeometry::roadsWithinDistance(CLMapGeometry::DistanceQueryResultList &, const CLMapCrumb &, double, bool)
CLMM, GeoMapAccess did not have sufficient data available (roadsWithinDistance)
v8@?0@"<GEOMapRoad>"4
CLMM, query failed (roadsWithinDistance)
bool CLGeoAccessMapGeometry::roadsConnectedInternal(CLMapGeometry::ConnectedQueryResultList &, const RoadFeatureObject *, bool, double, double, int) const
CLMM, GeoMapAccess did not have sufficient data available (roadsConnected)
CLMM, query failed (roadsConnected)
virtual bool CLGeoAccessMapGeometry::roadsAtIntersection(CLMapCrumb &, CLMapGeometry::IntersectionQueryResultList *, CLMapGeometry::IntersectionQueryResultList *, bool, const CLMapRoadPtr &, bool, double, double, double &) const
CLMM, GeoMapAccess did not have sufficient data available (roadsAtIntersection)
v12@?0@"<GEOMapRoad>"4B8
CLMM, outgoing roads query failed (roadsAtIntersection)
CLMM, incoming roads query failed (roadsAtIntersection)
bool CLGeoAccessMapGeometry::moveOnRoadInternal(bool, double, double, CLMapGeometry::RoadInfoList &, CLMapGeometry::DistanceQueryResult &, int, bool) const
CLMM, GeoMapAccess did not have sufficient data available (moveOnRoad)
CLMM, query failed (moveOnRoad)
cl_geo_access_map_geometry_queue
bool performQuery(QueryFunction, GEOMapAccess *)
CLMM, GeoMapAccess query timed out
void FindClosestPointOnRoad(CLDistanceCalc *, const id<GEOMapRoad>, const GEOLocationCoordinate2D &, int &, double &, double &)
void getSegmentLengths(CLDistanceCalc *, const id<GEOMapRoad>, std::vector<double> &, double &)
CLMapRoadPtr makeRoadFromGEOMapRoad(id<GEOMapRoad>, int, const std::vector<double> &, double)
bool isConnectedToStartOfRoad(CLDistanceCalc *, id<GEOMapRoad>, const GEOLocationCoordinate2D &)
CLMM, disconnected road
void interpolateProjections(CLDistanceCalc &, const RoadFeatureObject *, double, GEOLocationCoordinate2D &, double &)
%@,Track,%@,Session,%@,Gradient,%0.6f,GradientValid,%ld
track
T@"CalibrationTrack",R,&,N,V_track
Ti,R,N,V_session
gradient
Td,N,V_gradient
gradientValidity
Ti,R,N,V_gradientValidity
kCMStrideCalDataContainerKeyTrack
kCMStrideCalDataContainerKeySession
kCMStrideCalDataContainerKeyGradient
kCMStrideCalDataContainerKeyGradientValidity
float CLWorkloadCalibrator::computeCalibrationValue(const CLNatalieModelInput *, const CFAbsoluteTime, const float, const float, bool &)
WorkloadCalibration, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, calibratedMets, %f
void CLWorkloadCalibrator::bootstrapCalibrationValueFromDb()
Workload Calibrator, DB Delete Records Before, expirationTime, %f
Workload Calibrator, DB Get All Records By Activity Type And Maximum Standard Deviation, activityType, %u, standardDeviation, %f
Workload Calibrator, Bootstraping Calibration, Value, %f
void CLWorkloadCalibrator::persistCalibration(const float, const float)
Workload Calibrator, DB Insert, activityType, %u, valueAverage, %f, standardDeviation, %f, entry.startTime, %f
Workload Calibrator, DB Delete Keep Last N, kMaximumDbHistorySize, %lu, activityType, %u
Workload Calibrator, DB Update, activityType, %u, valueAverage, %f, standardDeviation, %f, entry.startTime, %f
v12@?0{shared_ptr<std::__1::vector<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> > >=^{vector<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >}^{__shared_weak_count}}4
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Odometer/CLOdometerNotifierCompanion.mm
virtual void CLOdometerNotifierCompanion::updateOdometerState()
void CLOdometerNotifierCompanion::updateStateOnAuthorization(bool)
void CLOdometerNotifierCompanion::enableGPS()
Enable GPS; Start GPS subscription
void CLOdometerNotifierCompanion::disableGPS()
Disable GPS; Stop GPS subscription
void CLOdometerNotifierCompanion::notifyCoarseElevation(std::shared_ptr<CLCoarseElevationVector>)
onCoarseElevation,startTime,%f,ascended,%d
void CLOdometerNotifierCompanion::notifyLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)
Odometer(GPS),%f,%f,%f,%f,%f
void CLOdometerNotifierCompanion::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
virtual CLMetsInfo CLNatalieHighIntensityModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, High Intensity CR DT Regression, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
state
Ti,N,V_state
rssi
uuid
ipv4
channel
T{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}},R,N,V_timestamp
RSSI
Ti,R,N,V_RSSI
T@"NSUUID",R,N,V_uuid
TI,R,N,V_ipv4
Ti,R,N,V_channel
WPPuckType
WPPuckTypeAirPlaySoloTargetPresence
CLATVAirplayMonitorSilo
-[CLATVAirplayMonitor startScan]
Got a request for a scan but no one is interested. Ignoring
Bluetooth is OFF, ignoring request to scan
v8@?0@"<CLATVAirplayMonitorClientProtocol>"4
-[CLATVAirplayMonitor airPlaySolo:foundDevice:withData:]
Found device %s withData: %s
Found a device but its UUID is nil
No IP address provided. Ignoring device
-[CLATVAirplayMonitor airPlaySoloStartedScanning:]
AirPlaySolo started scanning
-[CLATVAirplayMonitor airPlaySoloStoppedScanning:]
AirPlaySolo stopped scanning
-[CLATVAirplayMonitor airPlaySolo:failedToStartScanningWithError:]
Failed to start AirPlaySolo scanning. %@
airplaySolo
T@"WPAirPlaySolo",&,N,V_airplaySolo
power
TB,N,V_power
scanDeliveryDelayTimer
T@"CLTimer",&,N,V_scanDeliveryDelayTimer
bufferedDevices
T@"NSMutableArray",&,N,V_bufferedDevices
invalid uuid string
void boost::uuids::string_generator::throw_invalid() const
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/uuid/string_generator.hpp
0123456789abcdefABCDEF
WPPuckTypeAirPlaySoloAdvertisingData
WPPuckTypeAirPlaySoloRSSI
WPPuckTypeAirPlaySoloAdvertisingChannel
bad lexical cast: source type value could not be interpreted as target
ElevationLabel
void CLSignificantElevationEstimator::init()
init %s, %s
void CLSignificantElevationEstimator::reset()
Resetting significant elevation %s, %s
ReferenceAltitude
ElevationStartTime
ElevationEndTime
AscendedElevation
DescendedElevation
BufferedAscendedElevation
BufferedTimeStamp
AscendingState
ElevationDeviceSource
void CLSignificantElevationEstimator::update(CFAbsoluteTime, uint32_t, uint32_t, CLElevationSource)
%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%d,%s,%s,%s,%f
-[CMStrideCalibrator initInSilo:stepCountDb:]
Not companion or watch. Returning.
AutomaticStrideCalibration,Pass,CreatingDaemonCacheForCalibrationBins
AutomaticStrideCalibration,Success,AllChecksPassed
-[CMStrideCalibrator setSession:]
setSession,oldSession,%ld,newSession,%ld
-[CMStrideCalibrator addLatestCalData:]
A new calData is added: %s
-[CMStrideCalibrator checkForLocationStateTransition]
ForcingLocationDueToGizmoRequest,session,%ld,%s
StepRunNotification,Pass,LeechingLocation,Steps,%d
StepRunNotification,Pass,AttemptingToForceLocation,Steps,%d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/StrideCalibration/CMStrideCalibrator.mm
-[CMStrideCalibrator attemptForcedLocation]
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastCalibrationSuccess,TimeSinceLastCalibrationSuccess,%0.3f
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastCalibrationAttempt,TimeSinceLastCalibrationAttempt,%0.3f
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastConverged,TimeSinceLastCalibrationAttempt,%0.3f
AttemptForcedLocation,Success,AllChecksPassed
-[CMStrideCalibrator quitForcedLocationState]
Terminated forced calibration.
-[CMStrideCalibrator fsm:didTransitionFromState:toState:]
LocationStateOld,%d,LocationStateNew,%d
-[CMStrideCalibrator fsm:didUpdateLocationAtTime:]
TrackClose,Pass,LocationTimeout,TimeSinceLastPosition,%0.3f
TrackClose,Pass,ForcedNotSufficientSteps,Steps,%d
TrackClose,Pass,EnabledNotSufficientSteps,Steps,%d
-[CMStrideCalibrator checkValidTrack:associatedEntry:]
TrackCalibration,Fail,Pedometer distance is zero,startTime,%f,endTime,%f
ZeroDistance
TrackCalibration,Fail,speed %f out of bounds,startTime,%f,endTime,%f
SpeedOutOfBounds
TrackCalibration,Fail,KFactorOutOfBounds,%s,KFactor,%0.6f,Speed,%f,startTime,%f,endTime,%f
GainOutOfBounds
SessionMetrics,Fail,Pedometer,GainOutOfBounds,DistanceFusion,%0.6f,startTime,%f,endTime,%f
SessionMetrics,Fail,GPS,GainOutOfBounds,DistanceFusion,%0.6f,startTime,%f,endTime,%f
-[CMStrideCalibrator updateCalibrationBins:]
CalData, %s, stepEntryEpochTime, %f
GradientOutOfBounds
SessionMetrics,Fail,Gradient,DistanceFusion,startTime,%f,endTime,%f
FloorsAscended,%d,FloorsDescended,%d
Yay!
void CLTilesMap::erase(CLTilesMap::ConstIterator)
Erasing tileId from tiles maps.
void CLTilesMap::erase(const TileId &)
Erasing tileId from tiles map.
void CLTilesMap::unprotectedErase(const TileId &)
TileId doesn't not exist in tiles map.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLTilesMap.mm
Removing tileId from unprotected map.
void CLTilesMap::unprotectedAdd(const TileId &)
bool CLDemTileAvailability::isTileAvailableBasedOnAvlFile(const std::string &, double, double, bool &)
DEM,Reading,%s
DEM,could not open,%s
DEM,avl byte index,%d,is larger than the data available in the availabilty file
DEM,Invalid CLDEM availability file - unable to get data byte
DEM,Unexpected case
DEM,availability file has expired - redownload
DEM,availability file version does not match expected
DEM,finished
static bool CLDemTileAvailability::readAvlHelper(FILE *, unsigned char *, CLDemTileAvailability::CLDEMTileAvailabilityData &, size_t &, size_t &)
DEM,fseek returned non-zero
DEM,Invalid CLDEM availability file - header string
DEM,Invalid CLDEM availability file - invalid header string
DEM,Invalid CLDEM availability file - version
DEM,Invalid CLDEM availability file - headerLength
DEM,Invalid CLDEM availability file - minLat
DEM,Invalid CLDEM availability file - maxLat
DEM,Invalid CLDEM availability file - binsize
DEM,coarse avl file is not 0.1 deg by 0.1 deg,spacing unexpected,%.1f,re-download needed
DEM,Invalid CLDEM availability file - timestamp
DEM,Invalid CLDEM availability file - expiration age
DEM,Invalid CLDEM availability file - data size
DEM,Invalid CLDEM availability file - crc
DisableMapMatchingRouteHints
CLMapRouteHintController::CLMapRouteHintController()
CLMM, DisableMapMatchingRouteHints, %d
CLFitnessTrackingNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/FitnessTracking/CLFitnessTrackingNotifier.mm
-[CLFitnessTrackingNotifierAdapter beginService]
CLFitnessTrackingNotifier
AllowUnactivatedFitnessTracking
CLFitnessTrackingNotifier::CLFitnessTrackingNotifier(CLSilo *)
Finished constructing CLFitnessTrackingNotifier
virtual bool CLFitnessTrackingNotifier::registerForNotificationInternal(const CLFitnessTrackingNotifier_Type::Notification &)
CLFitnessTrackingNotifier::client count [%d]: %d
CLFitnessTrackingNotifier::Invalid notification: %d
virtual bool CLFitnessTrackingNotifier::unregisterForNotificationInternal(const CLFitnessTrackingNotifier_Type::Notification &)
virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLFitnessTrackingNotifier_Type::Notification, NotificationData_T = CLFitnessTrackingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
dataPayload
T@"NSDictionary",&,N,V_dataPayload
message
T@"CLClientManagerUsageSyncMessage",&,N,V_message
error
T@"NSError",&,N,V_error
recoverable
TB,N,V_recoverable
CLUsageSyncManagerSilo
usage-
-[CLUsageSyncManager handleMessagePromptWithMessageData:]
#USESYNC Missing an expected argument.  Client %p, authorization %p
manager
T@"<CLClientManagerProtocol>",&,N,V_manager
dirtyUsageSyncState
TB,N,V_dirtyUsageSyncState
needFullResync
TB,N,V_needFullResync
highestReceivedSequenceNumber
Tq,N
pairedDeviceID
T@"NSUUID",&,N,V_pairedDeviceID
pairedDeviceRegistry
T@,&,N,V_pairedDeviceRegistry
retryTimerSet
TB,N,V_retryTimerSet
retryTimer
T@"CLTimer",&,N,V_retryTimer
errorQueue
T@"NSMutableArray",&,N,V_errorQueue
messagesWaitingForAck
T@"NSMutableDictionary",&,N,V_messagesWaitingForAck
activeDeviceNearbyStatus
Ti,N,V_activeDeviceNearbyStatus
com.apple.private.alloy.location.usage
NRPairedDeviceRegistry
/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry
NRPairedDeviceRegistryDeviceDidUnpairNotification
NRPairedDeviceRegistryDeviceDidPairNotification
NRPairedDeviceRegistryDeviceDidBecomeActive
NRPairedDeviceRegistryDeviceDidBecomeInactive
kCLUsageSyncPairedDeviceID
NRDevicePropertyPairingID
NRDevicePropertySerialNumber
kCLUsageSyncMessageTypeKey
kCLUsageSyncMessageDataKey
kCLUsageSyncNextSequenceNumberKey
kCLUsageSyncMessageSequenceNumberKey
kCLUsageSyncMessageUsageUpdateKey
kCLUsageSyncClientKey
kCLUsageSyncMessagePromptKey
kCLUsageSyncMessageResyncResponseKey
kCLUsageSyncMessageResyncRequestKey
kCLUsageSyncResyncRequestQueueIdentifierKey
kCLUsageSyncHighestReceivedSequenceNumberKey
kCLUsageSyncUsageKey
kCLUsageSyncAuthorizationStatusKey
kCLUsageSyncForcePromptKey
kCLUsageSyncResyncResponseQueueIdentifierKey
void DPPoint::convertLatLon()
Lat/lon is out of range for conversion.
void DouglasPeuckerPolygonSimplify(PointList &, const PointList &, double, int, int)
Input to Douglas-Peucker algorithm must have at least one vertex.
double curveSegmentCompare(const PointList &, int, int, SimplifyType, int &)
DynamicProgramArea distance is not implemented
void DynamicProgramPolygonSimplify(PointList &, const PointList &, double, SimplifyType)
Never achieved the desired simplification. Using the original curve.
Programming error. Number of points in backtrack do not match expected (1).
Programming error. Number of points in backtrack do not match expected (2): %d, %d
CLTimeZoneManager.MaximumTimeZoneChangeSpeed
CLTimeZoneManager.MaximumTimeZoneChangeAccuracy
CLTimeZoneManager.StartDelay
CLTimeZoneManager.MaxLocationDelay
CLTimeZoneManager.MaxFailures
CLTimeZoneManager.MinimumRetryDelay
CLTimeZoneManager.MaximumRetryDelay
CLTimeZoneManager.MaximumVerifyInterval
CLTimeZoneManager.MaximumCheckInterval
CLTimeZoneManager.EarlyCheckProportion
CLTimeZoneManager.ContinuousLocationDuration
CLTimeZoneManager.ReportPreviousTimezoneInterval
CLTimeZoneManager.ReachabilityRetryInterval
Network
Etc/GMT
CLTimeZoneManagerSilo
T^{CLTimeZoneManager=^{CLTimeZoneDatabase}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@dd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}d{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}iiBB^{__CFRunLoopTimer}^{CLPersistentTimer}^{__CFRunLoopTimer}id^{__CFRunLoopTimer}ddddiddddddddd{CLDistanceCalc=ddddd}[26B]},N,V_manager
TimeZone
CLTimeZoneManager::CLTimeZoneManager(CLSilo *)
Loaded previous time zone %s
TimeZoneManager.ActiveModeTimer
void CLTimeZoneManager::setStartTimer(const CFTimeInterval &)
Setting start timer to fire at %.2f (%.2fs away)
void CLTimeZoneManager::setActiveModeTimer(const CFTimeInterval &)
Setting active mode timer to fire at %.2f (%.2fs away)
void CLTimeZoneManager::setContinuousLocationTimer(const CFTimeInterval &)
Setting continuous location timer to fire at %.2f (%.2fs away)
void CLTimeZoneManager::onReachabilityTimer(CFRunLoopTimerRef)
ReachabilityTimer fired
void CLTimeZoneManager::onContinuousLocationTimer(CFRunLoopTimerRef)
Continuous location timer fired
Failed to get any fix while in continuous location mode
void CLTimeZoneManager::checkStatus()
Location services are disabled; stopping automatic time zone
Time Zone system service disabled; stopping automatic time zone
Automatic time zone starting in passive mode
Automatic time zone starting in active mode
Automatic time zone disabled
void CLTimeZoneManager::startActive()
Starting automatic time zone in active mode
Already have previous border distance and timestamp
void CLTimeZoneManager::enterActiveMode()
Entering active location mode
void CLTimeZoneManager::exitActiveMode()
Exiting active location mode
void CLTimeZoneManager::startPassive()
Starting automatic time zone in passive mode
void CLTimeZoneManager::stop()
Stopping automatic time zone
bool CLTimeZoneManager::shouldSetSystemTimeZone(const std::string &, const CLDaemonLocation &, double &)
We ran point-in-polygon on a location we threw out anyway!
Current time zone %s not in database; changing time because of acceptable location accuracy %.3f
bool CLTimeZoneManager::setSystemTimeZone(const std::string &)
Telling timed the time zone is "%s".
bool CLTimeZoneManager::setTimeZoneIfAppropriate(const std::string &, const CLDaemonLocation &)
bystander location, used to set time zone, billed to 'TimeZone' system service
Time Zone failed to retrieve location.
Potentially setting system time zone to %s based on <%+.8lf,%+.8lf> acc %.2f timestamp %.2f confidence %d
Potentially setting system time zone to %s
void CLTimeZoneManager::handleNewLocation(const CLDaemonLocation &, bool)
Received invalid location for time zone
Disregarding location with accuracy: %.1f (> %.1f)
Received invalid location <%+.8f,%+.8f> for time zone
Disregarding location for timezone with speed: %.1f (> %.1f)
Handling new location <%+.8lf,%+.8lf>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d
Couldn't get time zone for location <%+.8lf,%+.8lf>
Time zone from database was %s
Not using <%+.8lf,%+.8lf> (timestamp %.2f) because interval has not elapsed
Unconfirmed border distance is <= 0 yet we have an unconfirmed timezone label.
void CLTimeZoneManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Got data mode change notification; entering continuous location mode
Got data mode change notification, but haven't exceeded reachability interval(%.3f s).  Will try again in %.3f s
Got airplane entered notification
Got airplane mode exited notification; entering continuous location mode
void CLTimeZoneManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Ignoring expired location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f
Ignoring unsure location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d
Got kNotificationLocationUnavailable
Got kNotificationServiceAuthorization
Got unknown notification %d
void CLTimeZoneManager::onLocationTimeZoneActiveNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
Automatic time is now in mode %d
void CLTimeZoneManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
location status reset; removing all clients
void CLTimeZoneManager::onImmediateCheckNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
Got immediate check notification
void CLTimeZoneManager::enterContinuousLocationMode(ContinuousLocationMode, bool)
Transition from continuous active to continuous active with retry
Already in continuous location mode; not re-entering
Location services are disabled; not starting continuous location
Time Zone system service disabled; not starting continuous location
In bystander-only mode; not starting continuous location
Entering continuous location mode
Timezone is not confirmed.
void CLTimeZoneManager::exitContinuousLocationMode()
Not in continuous location mode; not exiting
Exiting continuous location mode
void CLTimeZoneManager::locationFailed(bool)
Not registered for location or fine location; ignoring location failure
Got location unavailable while in continuous location mode; ignoring location failure
Location failed for time zone (exiting continuous mode %d; failure count now %d)
Maximum failure count not exceeded; retrying in %.2f seconds
Exceeded maximum failures; not retrying for %.2f seconds
PreviousTimeZone
AutomaticTimeZoneUpdateNeeded
TimeZoneBorderDistance
TimeZoneBorderDistanceTimestamp
AutomaticTimeZoneUpdateFailed
%@ @ %f,<startDate,%@,type,%s,confidence,%s,mountedState,%d,mountedConfidence,%s,isStanding,%d,tiltAngle,%f,exitState,%d,estExitTime,%f>
isWalking
isRunning
isDriving
maybeExitingVehicle
hasExitedVehicle
kCMActivityCodingKeyType
kCMActivityCodingKeyConfidence
kCMActivityCodingKeyMounted
kCMActivityCodingKeyMountedConfidence
kCMActivityCodingKeyIsStanding
kCMActivityCodingKeyTiltAngle
kCMActivityCodingKeyTimestamp
kCMActivityCodingKeyVehicleExitState
kCMActivityCodingKeyEstExitTime
kCMActivityCodingKeyStartTime
CLFenceManagerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLFenceManager.mm
-[CLFenceManagerAdapter beginService]
static CLFenceManager *CLFenceManager::instanceForSilo(CLSilo *)
FenceManager
FenceStartDelay
void CLFenceManager::init()
Overriding fence start delay to %{private}.2f
FenceShowTriggerDialog
setting FenceStartShowDialog to %{private}d
Setting fence start timer to fire at %.3f (%.2f seconds away)
FenceManagerStart
void CLFenceManager::start()
Fence: Starting fence monitoring
Fence: Already started fence monitoring
virtual void CLFenceManager::shutdown()
Fence: CLFenceManager, shutdown
void CLFenceManager::resetFenceMonitoring_nl()
Fence: resetFenceMonitoring_nl
void CLFenceManager::startMonitoringAllFences_nl()
Fence: startMonitoringAllFences_nl
Starting to monitor all %{public}ld authorized fences
void CLFenceManager::startMonitoringFences_nl(CLFenceManager_Type::FencesVector)
Fence: startMonitoringFences_nl
void CLFenceManager::stopMonitoringFences_nl(CLFenceManager_Type::FencesVector)
Fence: stopMonitoringFences_nl
com.apple.mobileme.fmf1
com.apple.locationd.bundle-/System/Library/PrivateFrameworks/FMF.framework
com.apple.locationd.bundle-/System/Library/LocationBundles/RemindersAlerts.bundle
bool CLFenceManager::addFence(const CLFenceManager_Type::Fence &)
Fence: fence not added, too many fences, %{private}s, %{private}lu, %{private}u
Fence: monitoring is not supported on this platform; not adding fence %{private}s/%{private}s
Not adding fence %{private}s/%{private}s because coordinate is invalid
Fence: canPerformMonitoringForFence is true, fence, %{private}s
Fence: canPerformMonitoringForFence is false, fence, %{private}s
Fence: Adding fence %{private}s/%{private}s <%{private}+.8f,%{private}+.8f>
Fence: sending kNotificationFenceFailure, fence, %{private}s
Fence: sending kNotificationFenceSetupCompleted, fence, %{private}s
bool CLFenceManager::removeFence(const CLFenceManager_Type::Fence &)
Fence: Removing fence %{private}s/%{private}s
void CLFenceManager::requestRegionState(const CLFenceManager_Type::Fence &)
Fence: requestRegionState, %{private}s/%{private}s, registered, %{public}d, authorized, %{public}d
Fence: requestRegionState, fence, %{private}s/%{private}s, status, %{private}d, %{private}s
Fence: requestRegionState, fence, %{private}s/%{private}s, not authorized
Fence: requestRegionState, fence, %{private}s/%{private}s, not registered
Fence: requestRegionState, fence, %{private}s/%{private}s, error.
void CLFenceManager::fenceStatusChanged(const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &)
Fence: fence, %{private}s, new status, %{private}s, isIssueNotification, %{private}d, fenceAge, %{private}.1lf, fLocationUpdatesStopTimestamp, %{private}.1lf, fLocationUpdatesStartTimestamp, %{private}.1lf
Fence: fence, %{private}s, new status, %{private}s, bundleId, %{private}s, not authorized, avoiding notification
bool CLFenceManager::sendFenceStatusNotification(const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &, int)
Fence: avoid sending an unknown notification, fence, %s
Fence: pending, status, %{private}s, fence, %{private}s, timestamp, %{private}.1lf
entered
exited
 (all)
Sending %{private}s notification for %{private}s/%{private}s to client %{private}d%{private}s
void CLFenceManager::notifyFenceStatusChanged(const CLFenceManager_Type::Fence &, const CLFenceManager_Type::FenceStatus &, const CLDaemonLocation &)
Unknown fence status
ENTER
EXIT
Fence, %s, name, %s, date, %ld/%ld, time,%ld:%ld:%ld, loc, %.8lf, %.8lf, acc, %.2lf, distance, %.1lf
Fence Trigger
virtual bool CLFenceManager::registerForNotification(int, const CLFenceManager_Type::Notification &, const std::string &)
Fence: avoid sendFenceStatusNotification, fence, %s, status, %s, searchStatus, %s, client, %d, timestamp,%.1lf
Fence: sendFenceStatusNotification,fence,%s,fenceStatus,%s,searchStatus %s,client,%d
void CLFenceManager::onMonitorNotification(int, const CLFenceMonitor_Type::Notification &, const CLFenceMonitor_Type::NotificationData &)
Fence: got kNotificationFenceStatusChange
Fence: got kNotificationFenceDownloadRequest, fence, %s
void CLFenceManager::onDataDownloadNotification(int, const CLFenceDataDownloadManager_Type::Notification &, const CLFenceDataDownloadManager_Type::NotificationData &)
Fence: Got data downloaded notification for [%s]/%s/%s
Fence: Got data download failure notification for [%s]/%s/%s
Fence: Got data download invalidated notification
void CLFenceManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Got kNotificationLocationServicesStatus, enabled, %{public}d
Got fLocationUpdatesStopTimestamp, %.1lf, fLocationUpdatesStartTimestamp, %.1lf
Reauthorization requested, forcing start.
Got unknown client notification %d
void CLFenceManager::onAuthorizationNotification(int, const CLFenceAuthorizationManager_Type::Notification &, const CLFenceAuthorizationManager_Type::NotificationData &)
Got fence addition notification for %ld fences
Fence [%s]/%s/%s is authorized
Fence [%s]/%s/%s is not authorized
Got fence removal notification for %ld fences
Got fence reset notification
FENCE
(Unknown)
(Inside)
(Outside)
(Invalid)
Pending geofence notification
virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLFenceManager_Type::Notification, NotificationData_T = CLFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLMotionStateUtils::logChange(const CLMotionActivity &, const CLMotionActivity &)
MotionState,Motion,From,%d,To,%d,conf,%d,Mounted,From,%d,To,%d,conf,%d,tilt,%.1f,exitC,%d,exitTime,%f,startTime,%f,standing,%d,rawMotionType,%d,rawConfidence,%d
MotionSyncFireIntervalInSeconds
CLMotionSyncStoreWatch::CLMotionSyncStoreWatch(CLSilo *)
MotionSyncSendCalsFireIntervalInSeconds set to %f seconds.
CLMotionSyncStoreWatch::CLMotionSyncStoreWatch(CLSilo *)_block_invoke
Timer fired.
virtual void CLMotionSyncStoreWatch::deviceUnlocked()
void CLMotionSyncStoreWatch::updateCalibrations()
Watch retrieved calibrations and saved them in memory, current version, %d
void CLMotionSyncStoreWatch::sendMotionCalsToCompanion()
%s, current version, %d, timestamp, %lf
v8@?0^{CLCompanionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBd@B{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}@}4
void CLMotionSyncStoreWatch::persistCachedValues()
Watch did not persist Motion Cals, waiting until unlock, current version, %d, isDeviceCurrentlyUnlocked, %d
Begin persisting calibrations to disk on watch, current version, %d.
void CLMotionSyncStoreWatch::persistCachedValues()_block_invoke
Persisted a reset Motion Cals
Finished setting user profile on watch = %s
Persisted stride calibration bins
Completed persistence of motion cals to disk on watch. %s
virtual void CLMotionSyncStoreWatch::receiveMotionCals(NSDictionary *)
Watch received motion calibrations from companion, %s, version, %d, timestamp, %lf, udid, %s
void CLMotionSyncStoreWatch::onUserInfoNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)
void CLMotionSyncStoreWatch::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
Workout session ended on watch.
Unhandled notification %d
void CLMotionSyncStoreWatch::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
notification, %d
Unhandled notification
virtual void CLMotionSyncStoreWatch::strideCalBinsHaveChanged()
void CLMotionSyncStoreWatch::doRestoreBackupMotionCals(const CLMotionSyncStoreWatch::EDeviceUnlocked *)
void CLMotionSyncStoreWatch::doConnected(const CLMotionSyncStoreWatch::ECompanionConnected *)
void CLMotionSyncStoreWatch::doUpdateMotionCals(const CLMotionSyncStoreWatch::EMotionCalsUpdated *)
void CLMotionSyncStoreWatch::doRestoreBackupMotionCalsArbitrate(const CLMotionSyncStoreWatch::EDeviceUnlocked *)
void CLMotionSyncStoreWatch::doBufferMotionCalsFromCompanion(const CLMotionSyncStoreWatch::ECalibrationFromCompanion *)
void CLMotionSyncStoreWatch::doDisconnected(const CLMotionSyncStoreWatch::ECompanionDisconnected *)
void CLMotionSyncStoreWatch::doArbitrateMotionCals(const CLMotionSyncStoreWatch::ECalibrationFromCompanion *)
void CLMotionSyncStoreWatch::restoreBackupMotionCals()
Restored backup calibrations, %s, version, %d, timestamp, %lf
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/MotionSync/CLMotionSyncStoreWatch.mm
void CLMotionSyncStoreWatch::updateCalsBasedOnResult(NSMutableDictionary *, NSMutableDictionary *, CLMotionSyncStoreWatch::ArbitrateResult)
CLMotionSyncStoreWatch::ArbitrateResult CLMotionSyncStoreWatch::arbitrateMotionCals(NSDictionary *, NSDictionary *) const
No buffered Motion Cals, no arbitration
Ignoring update.  Phone Motion Cals UDID %s is different from current UDID %s, but version %d is not larger than current version %d
Buffered Motion Cals, version, %d, timestamp, %lf, udid, %s, Current Motion Cals, version, %d, timestamp, %lf, udid, %s, result, %d
void CLMotionSyncStoreWatch::scheduleFastSendToCompanion()
CLFenceMonitorCell
virtual void CLFenceMonitorCell::shutdown()
Fence: CLFenceMonitorCell, shutdown
bool CLFenceMonitorCell::lacMonitoringSufficient(const CLFenceManager_Type::Fence &, const CLDaemonLocation &)
Fence: distance = %.2f; compare = %.2f
not 
Fence: LAC monitoring is %ssufficient for %s/%s
bool CLFenceMonitorCell::cellMonitoringSufficient(const CLFenceManager_Type::Fence &, const CLDaemonLocation &)
distance = %.2f; compare = %.2f
Fence: no allowing wifi monitor for, %.1lf, fence, %s
Cell monitoring is %ssufficient for %s/%s
kCMCatherineDataCodingKeyCatherine
kCMCatherineDataCodingKeyConfidence
%@,<catherine %f confidence %f @ %f>
catherine
Td,R,N,V_catherine
Td,R,N,V_confidence
bool CLFenceDatabase::addFence(const CLFenceManager_Type::Fence &)
Fence: addFence, %s
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Fence: Couldn't bind statement for adding fence (bundle ID %s, name %s)
bool CLFenceDatabase::removeFence(const CLFenceManager_Type::Fence &)
Fence: Removing fence %s/%s
Fence: Couldn't bind statement for deleting fence (bundle ID %s, name %s)
bool CLFenceDatabase::removeAllFencesForBundleIncludingOnBehalf(const std::string &)
Fence: Couldn't bind statement for deleting fences for bundle ID %s
bool CLFenceDatabase::getAllFences(CLFenceManager_Type::FencesVector &)
Fence: Couldn't get fences from database
Fence: fetched fence, %s
Fence: Error in retrieving fences from database
bool CLFenceDatabase::getFencesForBundle(const std::string &, CLFenceManager_Type::FencesVector &)
Fence: Couldn't bind bundle ID %s
Fence: fetched bundle fence, %s
Fence: Error in retrieving fences from database for bundle ID %s
bool CLFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, CLFenceManager_Type::FencesVector &)
bool CLFenceDatabase::getFenceWithBundleAndOnBehalf(const std::string &, const std::string &, const std::string &, CLFenceManager_Type::Fence &)
Fence: Couldn't bind fence [%s]/%s/%s
int CLFenceDatabase::numFencesForBundle(const std::string &)
Fence: Couldn't get number of fences for bundle ID %s
void CLFenceDatabase::clearAllFenceStatus()
Fence: Clearing status for all fences
= 0.0
void CLFenceDatabase::lastDownloadTimeChanged(const std::string &, const std::string &, const std::string &, const double)
Fence: Recording [%s]/%s/%s last download time change to %.2f
Fence: Couldn't update last download time for %s/%s in database
void CLFenceDatabase::markDataDownloadInvalid()
Fence: Marking all fence data download times as invalid
void CLFenceDatabase::markDataDownloadInvalidForBundleAndOnBehalf(const std::string &, const std::string &)
Fence: invalidate download date for, %s
UPDATE OR IGNORE 
Fence: failed to bind bundleId, %s
bool CLFenceDatabase::getBundleIds(std::vector<std::string> &)
Fence: Couldn't get bundle IDs from database
Fence: Error in retrieving bundle IDs from database
void CLFenceDatabase::addMonitoredFlagsColumnIfNotExists()
Fence: addMonitoredFlagsColumnIfNotExists
Fence: addMonitoredFlagsColumnIfNotExists, table doesn't even exist
Fence: addMonitoredFlagsColumnIfNotExists, MonitorFlags already exists
void CLFenceDatabase::addOnBehalfBundleIdColumnIfNotExists()
void CLFenceDatabase::addReferenceFrameColumnIfNotExists()
Fence: addReferenceFrameColumnIfNotExists
Fence: addReferenceFrameColumnIfNotExists, table doesn't even exist
Fence: addReferenceFrameColumnIfNotExists, ReferenceFrame already exists
Distance
DesiredAccuracy
SetupComplete
LastStatus
MonitorFlags
OnBehalfBundleId
ReferenceFrame
Fences
idx (%tu) is out of range (%tu)
bsid
bsLatitude
bsLongitude
zoneid
sectorid
sectorLatitude
sectorLongitude
bandclass
celltype
pnoffset
operatorName
ltmOffset
dayLightSavings
derivedMcc
ecn0
rscp
neighbor
neighborGroup
-[CRCdmaCellTowerLocation writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRCdmaCellTowerLocation.m
Ti,N,V_sid
Ti,N,V_nid
Ti,N,V_bsid
hasBsLatitude
Td,N,V_bsLatitude
hasBsLongitude
Td,N,V_bsLongitude
hasZoneid
Ti,N,V_zoneid
hasSectorid
T@"NSString",&,N,V_sectorid
hasSectorLatitude
Td,N,V_sectorLatitude
hasSectorLongitude
Td,N,V_sectorLongitude
hasBandclass
Ti,N,V_bandclass
hasCelltype
Ti,N,V_celltype
hasPnoffset
Ti,N,V_pnoffset
hasChannel
Ti,N,V_channel
hasOperatorName
T@"NSString",&,N,V_operatorName
hasLtmOffset
Ti,N,V_ltmOffset
hasDayLightSavings
Ti,N,V_dayLightSavings
derivedMccsCount
derivedMccs
T^i,R,N
hasEcn0
Ti,N,V_ecn0
hasRscp
Ti,N,V_rscp
neighbors
T@"NSMutableArray",&,N,V_neighbors
hasNeighborGroup
T@"CRCellNeighborsGroup",&,N,V_neighborGroup
machineFrequency
Tf,N,V_machineFrequency
virtual CLSwimAlgResultFlags CLSwimAlgController::processFusion(const CLSwimFusionInput &, CLSwimEntry &)
Stroke detected,timestamp,%.3f,count,%lu,startTime,%f,isSwim,%d
Turn detected,timestamp,%f,startTime,%f,isSwimming,%d
void CLSwimAlgController::feedOdometer(const CLOdometerNotifier_Type::NotificationData &)
[SwimOdom] Received an odometer update,distance,%lf,accuracy,%lf,speed,%lf,rawspeed,%lf,odometer,%lf,gpsSpeedAccuracy,%lf,timestampGps,%lf
bool CLSwimAlgController::commitLaps(const std::vector<CLSwimDetectedLap> &, CLMotionTypeTimestamp)
New lap entry, identifier, %llu, uuid, %s, sourceId, %s, startTime, %f, endTime, %f, timestamp, %f, pace, %f, distance, %f, paceSource, %d, style, %d, numberOfStrokes, %d, totalLaps, %d, inserted, %d
void CLSwimAlgController::logDistributionParameters(CLSwimStyleType, CLMotionTypeTimestamp, CLMotionTypeTimestamp, CLSwimStrokesPerTurnDistribution) const
style,%d,currentTimestamp,%f,turnTimestamp,%f,turnStartTime,%f,mean,%f,stddev,%f,min,%f,max,%f,median,%f,samples,%d,prctile10,%f,prctile90,%f
bool CLSwimAlgController::sessionUpdate(const CLMotionStateMediator_Type::MotionOverride &, CFAbsoluteTime, CLSwimSessionStats &)
Invalid pool length %f for pool swim.  Assuming pool swim but with invalid distances.
const T &CMQueue<CLSwimFusionInput>::operator[](const size_t) const [T = CLSwimFusionInput]
const T &CMQueue<CLSwimAlgController::BufferedStroke>::operator[](const size_t) const [T = CLSwimAlgController::BufferedStroke]
T@"NSString",R,C,N,V_serviceName
activeSyncSession
T@"PSYServiceSyncSession",R,N,V_activeSyncSession
delegate
T@"<PSYSyncCoordinatorDelegate>",N,V_delegate
syncRestriction
TI,N,V_syncRestriction
didComplete
TB,N,V_didComplete
syncSessionType
TI,N,V_syncSessionType
CLStrideCalibrationSessionMetrics::CLStrideCalibrationSessionMetrics(CFTimeInterval, int32_t)
SessionMetrics,Start
-[CMStrideCalibrationStats endSessionMetrics:]
SessionMetrics,End,Summary,DistanceFusionSuccess,%0.6f,DistanceFusionOther,%0.6f,DistanceFusionGPS,%0.6f,DistanceFusionPedometer,%0.6f,DistanceFusionGradient,%0.6f,DistanceFusionGain,%0.6f,DistanceFusionSpeed,%0.6f,DistanceFusionLength,%0.6f,startTime,%0.6f,endTime,%0.6f
NoFailReason
Pedometer
Gradient
Gain
Speed
Length
Other
Success
Fail
-[CMStrideCalibrationStats awdLogDistance:status:description:]
SessionMetrics,%s,%s,%s,DistanceFusion,%0.6f
-[CMStrideCalibrationStats awdMotionFitnessStrideCalibration:]
Trying to send track with startTime %f. a %u b %u a == b %d
Trying to send track with startTime %f. now %f 2 %f 1 %f
const T &CMQueue<double>::operator[](const size_t) const [T = double]
Assertion failed: i < fCapacity, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMQueue.h, line 174,i,%zu,capacity,%u.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLPersistentTimer.mm
-[CLPersistentTimerInternal initWithFireDate:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:]
-[CLPersistentTimerInternal setTimerWithInterval:]
setTimerWithInterval, %s, interval, %.1lf
interval, %s, %.5lf, flooring to 1.0, interval
setTimerWithInterval, %s, interval, DBL_MAX
-[CLPersistentTimerInternal dealloc]
-[CLPersistentTimerInternal timerFired:]
timerFired: timer, _clTimer, %s, %p, %p
-[CLPersistentTimerInternal invalidate]
Scheduling invalidation, %s, %p
-[CLPersistentTimerInternal invalidate]_block_invoke
invalidate, %s, %p
void CLPersistentTimer::setNextFireDate(CFAbsoluteTime)
setNextFireDate, %s, %.1lf
void CLPersistentTimer::timerFired()
timerFired, fIdentifier, %s, f, %p
void CLPersistentTimer::invalidate()
Invalidate, %s
mode
heartRate
TI,N,V_mode
Tf,N,V_confidence
Tf,N,V_heartRate
CLCdmaCellLocationDatabase::CLCdmaCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)
virtual CLCdmaCellLocationDatabase::~CLCdmaCellLocationDatabase()
Delete CLCdmaCellLocationDatabase
bool CLCdmaCellLocationDatabase::getLocation(const CLTelephonyService_Type::CdmaCell &, sqlite3_int64 &)
GET could not bind %d %d %d %d %d %d %d %d %d
bool CLCdmaCellLocationDatabase::setLocation(const CLTelephonyService_Type::CdmaCell &, const CLDaemonLocation &)
SET could not bind %d %d %d %d %d %d %d %d %d
bool CLCdmaCellLocationDatabase::getLocation(sqlite3_int64, CLTelephonyService_Type::CdmaCell &) const
getCell SID %d NID %d
BSID
ZONEID
BANDCLASS
CHANNEL
PNOFFSET
bool CLGeoidModel::_static_check_dma_index(int)
Bad index into kkDefenseMappingAgencyTenByTenGeoid.
bool CLGeoidModel::getUndulationFromDefenseMappingAgency10by10Geoid(double, double, float &)
Input latitude = %.9lf is out of possible range
longitude %.9lf is not valid.
latitude %.9lf is not valid.
strokePower
strokeAmp
strokeFrequency
Tf,N,V_strokePower
hasStrokeAmp
Tf,N,V_strokeAmp
hasStrokeFrequency
Tf,N,V_strokeFrequency
CLSimulatedLocationProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Simulation/CLSimulatedLocationProvider.mm
-[CLSimulatedLocationProviderAdapter beginService]
simulated
com.fitbit.FitbitMobile
com.aliphcom.armstrong
com.aliphcom.upopen
com.getpebble.pebbletime
com.getpebble.ios
com.garmin.connect.mobile
com.strava.stravaride
com.nike.nikeplus-gps
RunKeeperPro
CLCompanionActivityAWDAggregatorSilo
-[CLCompanionActivityAWDAggregator beginService]
Starting service
CLCompanionActivityAWDAggregator tracking enabled
HK data is available
HK data is NOT available
CLMotionState
CLAppMonitor
CLCompanionActivityAWDAggregator tracking NOT enabled
CompanionAWD
-[CLCompanionActivityAWDAggregator endService]
Tearing down service
-[CLCompanionActivityAWDAggregator syncgetActivityStats]
Received data pull from AWD
CLCompanionActivityAWDAggregator tracking enabled, looking for data: %s
Data for day to submit found: %s
CLCompanionActivityAWDAggregator tracking NOT enabled, clearing cache
-[CLCompanionActivityAWDAggregator setupStoreCacheTimer]
Starting storeCache timer
CompanionActivityCacheStoreInterval
Using cache store timer of %f
-[CLCompanionActivityAWDAggregator createCache]
Creating cache for CLCompanionActivityAWDAggregator metrics
-[CLCompanionActivityAWDAggregator loadCache]
Loading cache for CLCompanionActivityAWDAggregator metrics
UUID is valid
UUID is invalid, creating new one and re-initializing cache
-[CLCompanionActivityAWDAggregator storeCache:]
Saving cache for CLCompanionActivityAWDAggregator metrics
-[CLCompanionActivityAWDAggregator ageOutCache:]
Removing data from cache for day: %s
-[CLCompanionActivityAWDAggregator createUUID]
Creating new UUID: %s
-[CLCompanionActivityAWDAggregator onDataCollectionChangedNotification]
Received fitness tracking notification fServiceEnabled: %d
-[CLCompanionActivityAWDAggregator onLocationNotification:data:]
Received location: %f, %f
Received unhandled notification, %d
-[CLCompanionActivityAWDAggregator onCompanionNotification:data:]
Received Companion connection update: %d
Start of Watch connected time: %f
End of Watch connected time: %f
-[CLCompanionActivityAWDAggregator onDataProtectionNotification:data:]
Received Data protection availability notification -- was: %d now: %d
-[CLCompanionActivityAWDAggregator onAppMonitorNotification:data:]
Received AppMonitor update: %s
Using wearable app! %s
Using fitness app! %s
-[CLCompanionActivityAWDAggregator setupQueryTimer]
Starting HK query timer
CompanionActivityHKQueryInterval
Using HK query timer of %f
-[CLCompanionActivityAWDAggregator runQueries]
HK Query attempt fEncryptedDataAvailable:%d fHKQueryState:%d isHealthDataAvailable:%d
-[CLCompanionActivityAWDAggregator querySources]
Querying HK for sources
-[CLCompanionActivityAWDAggregator querySources]_block_invoke_2
HK query encountered error,%ld
iPhone
-[CLCompanionActivityAWDAggregator querySources]_block_invoke
No step count / workouts from first party sources.
v16@?0@"HKSourceQuery"4@"NSSet"8@"NSError"12
-[CLCompanionActivityAWDAggregator queryWatchWorkouts]
Querying HK for workouts
-[CLCompanionActivityAWDAggregator queryWatchWorkouts]_block_invoke
workouts: %lu, workoutMinutes:%f
v16@?0{pair<unsigned long, double>=Ld}4
-[CLCompanionActivityAWDAggregator queryWorkouts:endDate:workoutsHandler:]_block_invoke_2
v16@?0@"HKSampleQuery"4@"NSArray"8@"NSError"12
-[CLCompanionActivityAWDAggregator queryWatchDailyStepCount]
Querying HK for Watch step counts
-[CLCompanionActivityAWDAggregator queryWatchDailyStepCount]_block_invoke
Watch Steps Query -- dayKey: %s numStepsInDay:%f
v16@?0{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}4
-[CLCompanionActivityAWDAggregator queryPhoneDailyStepCount]
Querying HK for Phone step counts
-[CLCompanionActivityAWDAggregator queryPhoneDailyStepCount]_block_invoke
Phone Steps Query -- dayKey: %s numStepsInDay:%f, activeMinutes:%d, activeHours:%d
-[CLCompanionActivityAWDAggregator queryStepCount:endDate:sources:stepCountHandler:]
Performing step count query
-[CLCompanionActivityAWDAggregator queryStepCount:endDate:sources:stepCountHandler:]_block_invoke_2
v12@?0@"HKStatistics"4^B8
v16@?0@"HKStatisticsCollectionQuery"4@"HKStatisticsCollection"8@"NSError"12
-[CLCompanionActivityAWDAggregator queryWatchStandHours]
Querying HK for Watch stand hours
-[CLCompanionActivityAWDAggregator queryWatchStandHours]_block_invoke
Watch Stand hours -- day:%s count:%zu
v8@?0L4
-[CLCompanionActivityAWDAggregator queryStandHours:endDate:standHoursHandler:]_block_invoke_2
-[CLCompanionActivityAWDAggregator queryPhoneFlightsClimbed]
Querying HK for Phone flights climbed
-[CLCompanionActivityAWDAggregator queryPhoneFlightsClimbed]_block_invoke
Phone Flights climbed -- day:%s count:%zu
-[CLCompanionActivityAWDAggregator queryFlightsClimbed:endDate:flightsClimbedHandler:]_block_invoke_2
v16@?0@"HKStatisticsQuery"4@"HKStatistics"8@"NSError"12
-[CLCompanionActivityAWDAggregator queryPhoneStaticTime]
Querying Motion db for Phone static times
-[CLCompanionActivityAWDAggregator queryPhoneStaticTime]_block_invoke
Phone Static Time -- day:%s duration:%f
All queries finished succssfully
v12@?0d4
kAccessoryModelKey
kCompanionStepsPerDayKey
kHoursActiveKey
kMinutesActiveKey
kWatchStepsPerDayKey
kWatchNonPedWorkoutsKey
kWatchNonPedWorkoutMinutesKey
kIphoneStaticnessKey
kCoarseLocationLatKey
kCoarseLocationLongKey
kFlightsClimbedKey
kCompanionAWDUUIDKey
kCompanionAWDUUIDTimestampKey
com.apple.locationd.motionfitnessdailytokenchanged
MotionFitnessDailyToken
kWearableTypeKey
kWearableActiveKey
kWatchConnectivityKey
kWatchConnectedTimeKey
kFitnessAppUserKey
ssize_t CLMotionNotifier::numberOfClients(int)
Unknown notification %d
CFTimeInterval CLMotionNotifier::minimumUpdateInterval(int)
bool CLMotionNotifier::addDispatcherPrivate(int, CLMotionNotifier::Dispatcher *, const CFTimeInterval &)
Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.
CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!
CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)
void CLMotionNotifier::updateSamplePeriods(int)
CLMotionNotifier::updateSamplePeriod UpdateInterval:%f
CLAuthSyncManagerSilo
CLAuthSyncSessionTypeDelta
CLAuthSyncSessionTypeReset
iPhoneSimulator
fullPathForSyncState
T@"NSString",&,N,V_fullPathForSyncState
syncService
T@"SYService",&,N,V_syncService
fullSyncObjectsInCompanionQueue
T@"NSMutableArray",&,N,V_fullSyncObjectsInCompanionQueue
fullSyncObjectsInGizmoQueue
T@"NSMutableArray",&,N,V_fullSyncObjectsInGizmoQueue
deltaSyncObjectsInCompanionQueue
T@"NSMutableArray",&,N,V_deltaSyncObjectsInCompanionQueue
deltaSyncObjectsInGizmoQueue
T@"NSMutableArray",&,N,V_deltaSyncObjectsInGizmoQueue
notificationsInCompanionQueue
T@"NSMutableArray",&,N,V_notificationsInCompanionQueue
notificationsInGizmoQueue
T@"NSMutableArray",&,N,V_notificationsInGizmoQueue
preDaytonaMapping
T@"NSDictionary",&,N,V_preDaytonaMapping
shouldConfirmHandlingPairingNotification
TB,N,V_shouldConfirmHandlingPairingNotification
shouldConfirmHandlingQuickSwitchNotification
TB,N,V_shouldConfirmHandlingQuickSwitchNotification
shouldSendMoreDataInCurrentSyncSession
TB,N,V_shouldSendMoreDataInCurrentSyncSession
resetRecoveryMode
TB,N,V_resetRecoveryMode
recoverySyncInProgress
TB,N,V_recoverySyncInProgress
isThereAWatch
TB,N,V_isThereAWatch
isQuickSwitchModeOn
TB,N,V_isQuickSwitchModeOn
isWatchBuildVersionPreDaytona
watchProductVersion
TI,N,V_watchProductVersion
authSyncStoreState
T@"NSMutableDictionary",&,N,V_authSyncStoreState
reunionSyncListPaths
T@"NSMutableDictionary",&,N,V_reunionSyncListPaths
reunionSyncLists
T@"NSMutableDictionary",&,N,V_reunionSyncLists
isQuickSwitchInProgress
TB,N,V_isQuickSwitchInProgress
numberOfConsecutiveSyncSessionRetries
Ti,N,V_numberOfConsecutiveSyncSessionRetries
SYServiceOptionDiskBufferProtectionClass
com.apple.private.alloy.location.auth
kCLVersionOfLastFullSync
/System/Library/Frameworks/CoreMotion.framework/Support
static void CLMotionCore::create()
Could not get parent thread parameters
Motion runloop ref still not set!
Could not get scheduling parameters for motion thread, error = %d
LogSensorAscii
bool CLMotionCore::shouldLogSensorAscii()_block_invoke
LogSensorAscii,%d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Motion/CLMotionCore.mm
com.apple.CoreMotion.MotionThread
MotionThreadPriority
static void *CLMotionCore::runMotionThread(void *)
could not create runloop source
Motion thread exiting
com.apple.CoreMotion
Unrecognized notification
CLSensorRecorderDb
SensorRecorder
Data
Meta
SensorRecorderCacheSizeBytes
CLSensorRecorderDb::CLSensorRecorderDb(bool, const std::string, CLSensorRecorder_Types::DataType)
SensorRecorderCacheSizeBytes, %d
SensorRecorderType, %s
virtual void CLSensorRecorderDb::prepareSQLStatements()
On root, skip purge.
1834
Table version is older than 1834. Purging.
Device is locked and we are unable to open the database
 WHERE dataId = 0
void CLSensorRecorderDb::storeToDb(bool)
Flushing to memory. %zu, %zu
 (startTime, timestamp, dataId, offset, size, movement) VALUES (?, ?, ?, ?, ?, ?)
Unable to insert meta data.
 (data) VALUES (?)
Unable to insert data.
Unable to get last accel data id.
 SET dataId = ? WHERE dataId = 0
Unable to update meta records dataId.
SELECT * FROM 
 WHERE id = ?
bool CLSensorRecorderDb::getSensorRecordMeta(uint64_t, CLSensorRecorderSensorMeta *)
Database is inaccessible
bool CLSensorRecorderDb::getSensorRecordData(CLSensorRecorderSensorData &, uint64_t) const
Invalid query, both data id and meta id are 0
 WHERE id >= ? ORDER BY id ASC
bool CLSensorRecorderDb::getSensorRecordMetaSinceId(uint64_t, CLSensorRecorderSensorMeta *)
bool CLSensorRecorderDb::getSensorRecordMetaIds(CFAbsoluteTime, CFAbsoluteTime, NSMutableArray *)
Data requested is in memory.  Writing incremental data out to disk.
 WHERE startTime >= ? ORDER BY id ASC LIMIT 1
 WHERE startTime < ? ORDER BY id DESC LIMIT 1
 WHERE ? <= id AND id <= ? ORDER BY id ASC
Database upper and/or lower time bound query failed.
SELECT dataId FROM 
 WHERE startTime < ? ORDER BY dataId DESC LIMIT 1
 WHERE id < ?
 WHERE dataId < ?
dataId
ActivityInMemoryBufferSize
%s.InMemoryTransaction
bool CLActivityRecorderDb<CLSensorRecorderDataPacket>::isValidTime(CFAbsoluteTime &) const [T = CLSensorRecorderDataPacket]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/SensorRecorder/CLSensorRecorderDb.mm
void formatFromStatement(const CLSqliteScopedStatement &, CLSensorRecorderSensorData &)
Potential CM database inconsistency, time jump %lf %lf
virtual void CLActivityRecorderDb<CLSensorRecorderDataPacket>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLSensorRecorderDataPacket]
Potential CM database inconsistency, time jump
Entry being recorded has a startTime in the recent past.  Deleting records after %f.
Entry being recorded has a startTime in the substantial past.  Shift records by %f.
Failed to insert record due to failure from reading the most recent entry.
LogGyro
CLGyro
virtual CFTimeInterval CLGyro::minimumUpdateIntervalChanged(int, const CFTimeInterval &)
Setting gyro data update interval to %f
GyroDt
Type,%s,dt,%f
Setting gyro temperature update interval to %f
Unrecognized gyro notification %d
static void CLGyro::onGyroData(void *, const CLMotionTypeRotationRate &, const CLMotionTypeTimestamp &, unsigned int)
[CLGyro] ret=%d
GyroTemperature
Type,%s,temperature,%f
Type,%s,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,subType,%d,sampleNum%%3,%d,triggerEnabled,%d,triggerOn,%d
CLOldWifiScanner::WifiConfiguration::WifiConfiguration(CLWifiService_Type::ScanType, CLOldWifiScanner::WifiConfiguration::PassiveActiveType, CLOldWifiScanner::WifiConfiguration::PriorityType, cl::chrono::secondsf, std::vector<CLWifiService_Type::Notification>, cl::chrono::secondsf, cl::chrono::secondsf)
%p Scan delay of %Lf secs is invalid. Setting to the minimum of %Lf secs
CLOldWifiScanner::CLOldWifiScanner(CLSilo *, CLOldWifiScanner::ScanningPolicy)
%p INITIAL isWifiPowered=%d
void CLOldWifiScanner::start()
%p Start monitor for active scanning
void CLOldWifiScanner::stop()
%p Stop monitor for active scanning
void CLOldWifiScanner::onTimerTrigger()
%p TIMER TRIGGERED
void CLOldWifiScanner::scheduleNextScan(cl::chrono::secondsf)
%p WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f
%p WIFI SCAN SCHEDULED FOR %f
CLCatherineNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Catherine/CLCatherineNotifier.mm
-[CLCatherineNotifierAdapter beginService]
CLCatherineNotifier
virtual void CLCatherineNotifier::shutdown()
CLCatherineNotifier is shutting down.
virtual bool CLCatherineNotifier::registerForNotificationInternal(const CLCatherineNotifier_Type::Notification &)
virtual bool CLCatherineNotifier::unregisterForNotificationInternal(const CLCatherineNotifier_Type::Notification &)
void CLCatherineNotifier::turnOnActiveCatherine()
void CLCatherineNotifier::turnOffActiveCatherine()
void CLCatherineNotifier::setHLCatherineMode(CLCatherineNotifier::HLCatherineMode)
void CLCatherineNotifier::notifyClientsWithCatherineData(const CLCatherineData &)
catherine,%.0f,timestamp,%.3f,source,%d,mode,%d,error,%d
void CLCatherineNotifier::logHeartRateData(const CLCatherineData &)
raw HR,startTime,%f,sinceLastGood,%f,conf,%f,hr,%f,mode,%d,source,%d,interpolationType,%d
virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLCatherineNotifier_Type::Notification, NotificationData_T = CLCatherineNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLTelephonyServiceSimulated.mm
void CLTelephonyServiceSimulated::sendSimulationNotification()
void CLTelephonyServiceSimulated::startSimulation()
Starting cell simulation
void CLTelephonyServiceSimulated::stopSimulation()
Stopping cell simulation
void CLTelephonyServiceSimulated::setRegistered(const bool &)
Simulating %sregistered status
void CLTelephonyServiceSimulated::checkNextCell_nl()
No pending cells
Current time is %.2f, next time is %.2f
Notifying clients (next check at %.2f, %.2f seconds away)
virtual bool CLTelephonyServiceSimulated::getRegistrationStatus(CFStringRef &)
Forcing registration status to %sregistered
virtual bool CLTelephonyServiceSimulated::getServingMcc(int &)
Forcing serving MCC to %d
virtual bool CLTelephonyServiceSimulated::getServingMnc(int &)
Forcing serving MNC to %d
virtual bool CLTelephonyServiceSimulated::getServingCell(int &, int &)
Forcing serving cell to 0x%x 0x%x
void CLTelephonyServiceSimulated::notifyClients(CFStringRef, CFDictionaryRef, const bool &)
virtual void CLTelephonyServiceSimulated::notifyAllClients(CFStringRef, CFDictionaryRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLWifiServiceSimulated.mm
void CLWifiServiceSimulated::sendSimulationNotification()
void CLWifiServiceSimulated::startSimulation()
Starting WiFi simulation
void CLWifiServiceSimulated::stopSimulation()
Stopping WiFi simulation
void CLWifiServiceSimulated::setSimulationPower(const bool &)
Simulating WiFi %s
void CLWifiServiceSimulated::notifyPower_nl()
virtual bool CLWifiServiceSimulated::getPower(bool &)
Reporting simulated WiFi power status of %s
virtual bool CLWifiServiceSimulated::startScan(CLWifiService_Type::ScanType, bool, bool)
Starting scan (simulation active %d, fPendingScanResults %lu)
Simulating fast scan
Simulating normal scan
Simulating exhaustive scan
Can't simulate unknown scan type!
Simulator target doesn't support selecting scan channels -- assuming exhaustive scan requested
Notifying clients of %lu scan results
virtual void CLWifiServiceSimulated::notifyClientsWithData(const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &, bool, int, bool)
CLFallNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Fall/CLFallNotifier.mm
-[CLFallNotifierAdapter beginService]
FallStatsRequestors
CLFallNotifier
virtual bool CLFallNotifier::registerForNotificationInternal(const CLFallNotifier_Type::Notification &)
virtual bool CLFallNotifier::unregisterForNotificationInternal(const CLFallNotifier_Type::Notification &)
watchkitapp
virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLFallNotifier_Type::Notification, NotificationData_T = CLFallNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLSimulationWifiAccessPointMacAddress
CLSimulationWifiAccessPointRssi
CLSimulationWifiAccessPointMode
CLSimulationWifiAccessPointChannel
CLSimulationWifiAccessPointAge
CLCompass
CLCompass::CLCompass()
Registered for keyboard state notifications
CompassForceCoverAttach
Forcing
NOT forcing
%s cover attached logic to %d
Registered for cover state notifications
virtual CFTimeInterval CLCompass::minimumUpdateIntervalChanged(int, const CFTimeInterval &)
Could not create timer
void CLCompass::startCompass()
starting apple compass
Cover is %sattached
void CLCompass::stopCompass()
stopping apple compass
static void CLCompass::onCoverState(const bool *, void *)
Cover Open: %d
void CLCompass::updateKeyboardState(bool, bool)
keyboard,isConnected,%d
CLCompassCalculator::CLCompassCalculator(const CFTimeInterval &, bool, bool)
using attitude dependent KF calibrator
CompassIgnoreDatabase
compass ignoring database (%d)
CompassManualCalibration
CompassOffsetManualX
CompassOffsetManualY
CompassOffsetManualZ
compass using manual bias (%.3f/%.3f/%.3f)
CompassIgnoreCalibration
compass ignoring calibration (%d)
CompassInputFilter
compass input filter is using (%zuu) samples
CompassOutputFilterSize
CompassOutputFilterScale
compass heading output filter samples (%d) scale (%f)
apple compass calculator, sample rate (%.3f) ignoreDatabase (%d) manual (%d)
bool CLCompassCalculator::feedMagnetometerData(const CLMotionTypeMagneticField &)
XYDevice not stable. %d, %d, %.3f, Clearing search buffers.
storing new compass calibration, magneticField (%+.3f,%+.3f,%+.3f), bias (%+.3f/%+.3f/%+.3f), level (%d) magnitude (%+.3f) inclination (%+.3f)
bool CLCompassCalculator::getCompassData(CLMotionTypeCompass &)
rawHeading, %.3f, gyroHeading, %.3f, deltaRaw, %.3f, deltaGyro, %.3f, rawHeadingU, %.3f, gyroHeadingU, %.3f, filteredHeading, %.3f, alpha, %.3f, gamma, %.3f, rotVar, %.5f, rotMag, %.3f, deltaFiltered, %.3f
Heading  %.2f, is not in bound [0 360]
void CLCompassCalculator::updateInterferenceChecks()
magnitude max threshold exceeded (%+.3f), resetting calibration
magnitude threshold exceeded (%f) with (%f) from base value (%f), resetting calibration
inclination threshold exceeded (%f) with (%f) from base value (%f), resetting calibration
void CLCompassCalculator::feedCompassDatabaseNotificationWithData(int, const CLCompassDatabase_Type::Notification &, const CLCompassDatabase_Type::NotificationData &)
CompassDB restored bias (%+.3f/%+.3f/%+.3f)
connectionStatus
pairedModelId
TI,N,V_connectionStatus
hasPairedModelId
T@"NSString",&,N,V_pairedModelId
bool CLCachedLocationScanMode::setScanMode(CachedLocationScanPowerMode)
Already correct power mode, %d
Changing cached location power mode from %d to %d
CLCompassAccuracy::CLCompassAccuracy(const float, const float, const size_t, const size_t, const bool)
mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd), coverAttached (%d)
void CLCompassAccuracy::init(const float, const float, const size_t, const size_t)
mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd)
CLCompassDatabaseDaemon
CLCompassDatabaseClient
void CLThreshold::init(const float &, const float &, const float &, const unsigned int, const unsigned int, const unsigned int, const float &, const bool)
sample rate (%.3f) observation rate (%.3f) observation threshold (%.3f) deviation count threshold (%d) standard deviation threshold (%.3f)
bool CLThreshold::update(const float &)
threshold (%f) was exceeded with observed value (%f) and base value (%f) and standard deviation (%f) and count of (%d)
CLTilesManagerServerErrorDomain
static bool CLTilesManagerServer::isAuthorizedForLocationServices()
TILE_SER: g_isAppAvailabilityAuthorized, %d, isAuthorized, %d
static void CLTilesManagerServer::onAppAvailabilityAuthorized(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)_block_invoke
TILE_SER: onAppAvailabilityAuthorized, %d, authorizerd, %d
com.apple.locationd.CLTilesManagerClient
void CLTilesManagerServer::beginService()_block_invoke_2
TILE_SER: Removing request since it timed out, lat, %f, lon, %f, radius, %f.
void CLTilesManagerServer::setupXpcConnection()
TILE_SER: setupXpcConnection
EnableTilesManagerServer
TILE_SER: setupXpcConnection, g_isEnableTilesManagerServer, %d
TILE_SER: setupXpcConnection, tiles server is disabled by default, g_isEnableTilesManagerServer, %d
TILE_SER: setupXpcConnection, was already called
AppGenius
void CLTilesManagerServer::setupXpcConnection()_block_invoke
TILE_SER: setupXpcConnection, %p, %p
void CLTilesManagerServer::setupXpcConnection()_block_invoke_3
TILE_SER: server received connection, %p
TILE_SER : dictionary, XPC_TYPE_CONNECTION, %d, XPC_TYPE_ERROR, %d, XPC_TYPE_DICTIONARY, %d
TILE_SER : XPC_ERROR_CONNECTION_INTERRUPTED, %d, XPC_ERROR_CONNECTION_INVALID, %d, %s
TILE_SER: XPC_TYPE_CONNECTION, incomingConnection, %p
TILE_SER: posting, CLTILES_MANAGER_SHARED_NOTIFICATION_CLIENTS_RECONNECT
com.apple.locationd.CLTilesManagerClient.reconnect
static void CLTilesManagerServer::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)
TILE_SER: onLocationNotification, notification, %d, loc, %s
TILE_SER: onLocationNotification, ignore, shutdown, notification, %d, loc, %s
TILE_SER: why am i receiving this notification: %d
static void CLTilesManagerServer::checkAvailabilityStatus(bool, const CLDaemonLocation &)
TILE_SER: checkAvailabilityStatus, isAuthorized, %d, lastLocation, %s
TILE_SER: checkAvailabilityStatus, force, %d, newLocation, %s
TILE_SER: checkAvailabilityStatus, not authorized
TILE_SER: checkAvailabilityStatus, ignoring cell location
TILE_SER: checkAvailabilityStatus, ignoring uncertain location, %.1lf
TILE_SER: checkAvailabilityStatus, ignoring uncertain location, horizontalAccuracy, %.1lf
TILE_SER: checkAvailabilityStatus, ignoring close location, distanceFromPreviousLocation, %.1lf
v8@?0^{CLTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}dBBdddd^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiiBB{unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal> >={__compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal> >=^{CLITilesManagerExternal}}}{CLTileDownloadPolicy=@dI}BIIB{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}{CLDemTileAvailability={list<unsigned int, std::__1::allocator<unsigned int> >={__list_node_base<unsigned int, void *>=^{__list_node_base<unsigned int, void *>}^{__list_node_base<unsigned int, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *> > >=L}}{LastAvlLookup=BIB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}4
TILE_SER: checkAvailabilityStatus, availabilityList, %lu
TILE_SER: checkAvailabilityStatus, loc, %.8lf, %.8lf, radius, %.3f, age, %d, %d, %d, %d, distance, %.3lf
TILE_SER: appAvailabilityUpdate, loc, %.8lf, %.8lf, radius, %.3f, age, %d, %d, %d, %d, hasChanged, %d
static void CLTilesManagerServer::handleIncomingConnection(xpc_connection_t)
TILE_SER: handleIncomingConnection, incomingConnection, %p
TILE_SER: handleIncomingConnection, token, 0x%08X-0x%08X, pid, %d
static void CLTilesManagerServer::handleIncomingMessage(xpc_connection_t, xpc_object_t)
TILE_SER: incoming, incomingConnection, %p, XPC_TYPE_CONNECTION, %d, XPC_TYPE_ERROR, %d, XPC_TYPE_DICTIONARY, %d
TILE_SER: release, incomingConnection, %p
rc.ok
requestType
notificationType
requestType.register
requestType.unregister
TILE_SER: processing request, locationd, %.8lf, %.8lf, requestType, %s, notificationType, %s, isRegister, %d, isUnRegister, %d
notification.app.availability.changed
TILE_SER: unknown notification, %s
rc.error
TILE_SER: client, %s, not authorized to, requestType, %s
rc.not_authorized
requestType.query
dataType.apps_availability
dataType.apps
TILE_SER: CLTILES_MANAGER_SHARED_DATA_TYPE_APPS - un-supported
requestType.precache
TILE_SER: invalid requestType, %s
static NSArray *CLTilesManagerServer::getAppsForArea(double, double, float, bool)
TILE_SER: getAppsForArea, examining %zu candidate grids.
TILE_SER: getAppsForArea, query for exact grid containing lat = %f, lon = %f, gridLat = %f, gridLon = %f
TILE_SER: getAppsForArea, invalid age rating, lat, %f, lon, %f, adamId, %d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLTilesManagerServer.mm
static void CLTilesManagerServer::fetchAppsForArea(double, double, float, bool, CLTilesManagerServerAppReplyHandler)_block_invoke
TILE_SER: fetchAppsForArea, tile is available for lat = %f, lon = %f.
TILE_SER: fetchAppsForArea, found %lu apps.
TILE_SER: fetchAppsForArea, tile does not exist on the server for lat = %f, lon = %f.
TILE_SER: fetchAppsForArea, tile is not available for lat = %f, lon = %f. Request for download.
static void CLTilesManagerServer::onTileWasDownloadedNotification(int, const CLTilesManager_Type::Notification &, const CLTilesManager_Type::NotificationData &, void *)
TILE_SER: onTileWasDownloadedNotification, activeRequests.count = %lu
TILE_SER: onTileWasDownloadedNotification, tile is available (or tile is 404) for lat = %f, lon = %f.
TILE_SER: onTileWasDownloadedNotification, found %lu apps.
TILE_SER: Got unexpected notification, %d
radius
static void CLTilesManagerServer::handleIncomingMessage_QUERY_AVAILABILITY(xpc_connection_t, xpc_object_t, xpc_object_t)
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, loc, %.8lf, %.8lf, radius, %.2lf
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, query for lat = %f, lon = %f, radius = %f.
Found 
 App(s)
hUnc
details
availability.age1
availability.age2
availability.age3
availability.age4
static void CLTilesManagerServer::handleIncomingMessage_QUERY_AVAILABILITY(xpc_connection_t, xpc_object_t, xpc_object_t)_block_invoke
TILE_SER: Got fetchAppsForArea response for lat = %f, lon = %f, %s.
Query specified lat/lon.
Query internal state.
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, failed to blip icon for, %s
static void CLTilesManagerServer::sendAppAvailabilityChangedNotification()
TILE_SER: no registrations to, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
TILE_SER: not authorized to receive, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
TILE_SER: sending, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
static void CLTilesManagerServer::handleIncomingMessage_PRECACHE(xpc_connection_t, xpc_object_t, xpc_object_t)
requestDownload, %2.6f, %2.6f
void CLTilesManagerServer::terminateXpcConnection()
TILE_SER: terminateXpcConnection
void CLTilesManagerServer::terminateXpcConnection()_block_invoke
TILE_SER: terminateXpcConnection, already called
void CLTilesManagerServer::shutdown()
TILE_SER: shutdown
TILE_SER: shutdown, tiles server is disabled by default
ageRating
TI,N,V_ageRating
touristApp
TB,N,V_touristApp
TI,N,V_adamId
effectiveRadiusMetersIfInstalled
TI,N,V_effectiveRadiusMetersIfInstalled
heroAppRankInstalled
TI,N,V_heroAppRankInstalled
heroAppRankUnInstalled
TI,N,V_heroAppRankUnInstalled
spanLat
Td,N,V_spanLat
spanLon
Td,N,V_spanLon
Td,N,V_lat
Td,N,V_lon
radiusMeters
Tf,N,V_radiusMeters
includeRegionalApps
TB,N,V_includeRegionalApps
T@?,C,N,V_handler
com.apple.locationd.bundle-/System/Library/LocationBundles/NearbyApps.bundle
bool CLSmootherCornerFinder::findCorners(const std::vector<swan::stGPSsa> &, std::vector<int> &)
HEALTH_SMOOTH: Could not convert LLA Coordinate %.7lf,%.7lf to ECEF
HEALTH_SMOOTH: Could not convert ECEF Coordinate %.3lf,%.3lf,%.3lf to ENU
HEALTH_SMOOTH: No corners found, input segment too short.
this->num_rows_ == A.num_rows_
this->num_cols_ == A.num_cols_
Subtract
&A != &Acopy
&A != &U
&A != &S
&A != &V
&Acopy != &Work
&Acopy != &U
&Acopy != &S
&Acopy != &V
&Work != &U
&Work != &S
&Work != &V
&U != &S
&U != &V
&S != &V
ne >= 1
ne >= 3*minnrnc + maxnrnc
ne >= 5*minnrnc
Acopy.max_num_rows_ >= nrA
Acopy.max_num_cols_ >= ncA
U.max_num_rows_ >= nrA
U.max_num_cols_ >= nrA
S.max_num_rows_ >= nrA
S.max_num_cols_ >= ncA
V.max_num_rows_ >= ncA
V.max_num_cols_ >= ncA
Error using Svd: input argument %d invalid in gesvd.
Error using Svd: gesvd failed to converge on %d superdiagonals.
Warning: Svd optimal workspace size %u is greater than provided workspace size %u; performance may suffer.
info == 0
TransposeInPlace
A.max_num_rows_ >= A.num_cols_
A.max_num_cols_ >= A.num_rows_
strcmp(r, ":") == 0
Colon
idx.MaxNumRows() > 0
idx.MaxNumCols() > 0
static_cast<s32>(idx.MaxNumCols()) >= n
latitudesCount
latitudes
T^d,R,N
longitudesCount
longitudes
hasW
Tf,N,V_w
Tf,N,V_x
Tf,N,V_y
Tf,N,V_z
CLDuetMonitor
-[CLDuetRegistration registerCallback]
This class doesn't have a callback to register -- you must assign one first
file
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLDuetMonitor.mm
line
Registered with CoreDuet for %s with predicate %s
-[CLDuetRegistration deregisterCallback]
This class doesn't have a callback to deregister -- you must assign one first
Deregistered with CoreDuet for %s with predicate %s
context
T@"<_CDContext>",&,N,V_context
cdRegistration
T@"_CDContextualChangeRegistration",&,N,V_cdRegistration
NSString *clduetEventTypeToString(CLDuetEventType)
Couldn't find a string for event type
event type
CLDuetEventTypeAudioOutputRouteConnected
CLDuetEventTypeBluetoothConnected
CLDuetEventTypeDeviceFirstWakeOfDay
CLDuetEventTypeForegroundApp
CLDuetEventTypeHomeKitAppView
CLDuetEventTypeHomeKitAccessory
CLDuetEventTypeHomeKitScene
CLDuetEventTypeMicroLocations
%@/%@/%lu
Ti,N,V_event
predicate
T@"_CDContextualPredicate",&,N,V_predicate
duetIdentifier
T@"NSString",&,N,V_duetIdentifier
CLDuetMonitorSilo
-[CLDuetMonitor registerClient:forEvent:withPredicate:]
Unable to register for a CoreDuet notification
Added %s client to the list of listeners for event type %ld with predicate %s
-[CLDuetMonitor registerWithDuetForEvent:andPredicate:]
Attempting to register for Duet event but already registered
event
-[CLDuetMonitor registerWithDuetForEvent:andPredicate:]_block_invoke
Received callback for %s
B8@?0@"NSString"4
-[CLDuetMonitor stopMonitoringEvent:withPredicate:forClient:]
Client %s is not registered for event %ld
-[CLDuetMonitor keypathForEvent:]
Couldn't find a keypath for event type
-[CLDuetMonitor predicateForEvent:withKeyPath:]
Couldn't find a predicate for event type
handler
-[CLDuetMonitor fetchAllEventsForEventType:startDate:endDate:handler:]
Start date isn't before end date
Invalid duet stream type. %ld
v16@?0@"_DKEventQuery"4@"NSArray"8@"NSError"12
-[CLDuetMonitor eventTypeFromNSNumber:]
Event is nil
Invalid event value
eventType
-[CLDuetMonitor notifyClient:ofEvent:withValue:]
Event type (%d) does not have a corresponding notification.
-[CLDuetMonitor notifyClient:ofForegroundAppWithValue:]
The app dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetForegroundApp class
bundleId or launchReason were nil so not processing this notification
-[CLDuetMonitor notifyClient:ofHomeKitScene:]
The scene dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitScene class
some of the expected keys were not found so not processing this notification. %s
-[CLDuetMonitor notifyClient:ofHomeKitAccessory:]
The accessory dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitAccessory class
-[CLDuetMonitor notifyClient:ofHomeKitAppView:]
The app view dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitAppView class
registeredEvents
T@"NSMutableDictionary",&,N,V_registeredEvents
self.%@.value = %@
com.apple.locationd.CLDuetMonitor
(self.%@.value != NULL) AND (self.%@.value.%@ IN %@)
(self.%@.value != NULL) AND NOT (self.%@.value.%@ IN %@)
void CMLinearTemperatureFit::feedGyroTemperature(float)
Assertion failed: temperature != 3.40282347e+38F, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMLinearTemperatureFit.cpp, line 39,temperature,%f.
void CLAttitudeDependentKFCalibrator::init()
RotationStability buffer not set.
virtual void CLAttitudeDependentKFCalibrator::setBias(const CLVector3d<float> &, const CLMotionTypeCompassCalibrationLevel &, const CLVector3d<float> &, const CLClientQuaternion *)
Could not set bias retrieved from database
setting bias (%.3f/%.3f/%.3f) level (%d)
void CLAttitudeDependentKFCalibrator::resetInternal(const CLVector3d<float> &, const CLMatrix3d<float> &, CLMotionTypeCompassCalibrationLevel)
reset internal. levels-data(%d %d %d), pScale=%.3f 
virtual void CLAttitudeDependentKFCalibrator::reset()
compass calibrator reset
void CLAttitudeDependentKFCalibrator::resetCalibration(const CLVector3d<float> &, const CLMatrix3d<float> &)
Resetting calibrator states.
bool CLAttitudeDependentKFCalibrator::resync(float, bool, bool, bool, float, float, float, const CLVector3d<float> &, float, float, float, const CLVector3d<float> &)
Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)
DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d),deltaTime(%.3f)
fBackupInfoSet(%d), syncAge(%d)
Likely bad resync. Backup. 
RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)
numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)
bool CLAttitudeDependentKFCalibrator::handleInterference(const CLVector3d<float> &, const CLVector3d<float> &, bool, bool)
Coasting vector not set.
Prolonged high magDiff. Likely bad calibration. Resetting.
Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%.3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d
Likely bad database lookup. Resetting. 
******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)
Steep inclination. Likely bad interference or bad database lookup. Resetting. 
Interference is gone.
**INTERFERENCE-1 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f
**INTERFERENCE-0 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f
void CLAttitudeDependentKFCalibrator::handleDivergence(const CLVector3d<float> &)
Divergence!!! Resetting.
int CLAttitudeDependentKFCalibrator::calcCalibrationLevel(const CLVector3d<float> &)
new internal estimates (%.3f %.3f %.3f)
taking new estimates, Internal. fIsCoasting (%d)
new estimates denied, fIsCoasting (%d)
taking new estimates, reached database. (%d)
new esitmates disagree with database. (%d,%d,%.3f)
calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)
taking new estimates, fIsCoasting (%d)
estimates improved.(%.3f/%.3f/%.3f), numImprov=%d 
new estimates needed, fIsCoasting (%d)
first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)
bool CLAttitudeDependentKFCalibrator::sanityCheck(unsigned int *, CLMotionTypeCompassCalibrationLevel, float &)
new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d 
void CLAttitudeDependentKFCalibrator::resetAfterCoasting()
Bad heading divergence for too long. Prompt user to re-calibrate.
Waiting too long for internal re-calibration. Prompt user.
Waiting too long for high magnitude interference to go away. Exit coasting.
Coasting for too long. Exit coasting.
virtual void CLAttitudeDependentKFCalibrator::referenceAttitudeChanged(bool, const CLMotionTypeMagneticField &)
fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f
virtual void CLAttitudeDependentKFCalibrator::addSample(const CLVector3d<float> &, const CLClientQuaternion *, const CFTimeInterval &)
Attitude data not set.
Compass-withFusion
Type,%s,Updating reference frame.
Updating during coasting, fIsResetInternal(%d)
BACKUP resync coasting vector
resync coasting vector. rotM,%.3f,rotV,%.3f
device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)
coasting vector is mature, no more updating
numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)
void CLAttitudeDependentKFCalibrator::setCalibrationValues()
bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f
void CLAttitudeDependentKFCalibrator::setCoastingVector(bool)
set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)
void CLAttitudeDependentKFCalibrator::enterCoasting()
enters coasting
CLCompassCalibrator::CLCompassCalibrator(const CFTimeInterval &)
compass calibrator logging (%d)
void CLAttitudeDependentKFCalibrator::exitCoasting()
exits coasting
CLPlosMatcher::CLPlosMatcher(CLMapGeometryPtr, const std::string &)
PLOS:kLowestElevationInDegrees,%.2f,kTallestBuildingHeight,%.2f,kLargestDistance,%.2f
GpsForcePlos
PLOS,GpsForcePlos,%d
virtual bool CLPlosMatcher::match(CLMapCrumb &)
PLOS, cannot estimate nav mode, disabling
PLOS, non-pedestrian, not matching
PLOS: no mapGeometry!
PLOS: no geometry!
PLOS: buildingsWithinDistance,%lf returned false!
PLOS: buildings.size() %ld > 500. too many buildings. Aborting
PLOS: no candidate svs for time %lf
PLOS: polyPoint == candidatePoint
PLOS: unexpected to not find SV, %d in fSvPlosMap!
static std::tuple<double, double, double> CLPlosMatcher::getSearchParameters(const CLMapCrumb &)
PLOS: majorAxis,%lf < minorAxis,%lf
PLOS: Clamping majorAxis,minorAxis,%fm
operator->
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/optional/optional.hpp
this->is_initialized()
Home
Work
School
result
T@"CLTilesManagerServerAppRecommendationResult",&,N,V_result
distanceToCurrentLocation
Td,N,V_distanceToCurrentLocation
appProxy
T@"LSApplicationProxy",&,N,V_appProxy
+[CLSuggestedActionManager(IsSupported) isSupported]_block_invoke
SAM: %s not supported because no application with bundle identifier, %s, is installed
ContinuityCapability
SAM: %s not supported because device doesn't support continuity
SAM: %s not supported on this device type
CLSuggestedActionManagerSilo
AppSuggestions
_appStoreBundleLocationProvider
v8@?0@4
SuggestedActionPurgeDelay
SuggestedActionPurgeInterval
-[CLSuggestedActionManager beginService]
SAM: suggested actions purge timer, delay, %.1f, interval, %.1f
-[CLSuggestedActionManager endService]
SAM: notify_cancel did not succeed, %d
-[CLSuggestedActionManager _registerForZeroKeywordDisabledNotification]
SAM: notify_register_dispatch failed, %d
v12@?0@"NSSet"4@"NSError"8
-[CLSuggestedActionManager _updatePredictedApplicationExtensions:error:]
SAM: error matching extensions with attributes, %s
discovered app prediction extension
app prediction extension is %s
-[CLSuggestedActionManager handleNudge]
SAM: Nudged
SAM: Nudged while preparing a recommendation, state, %d
SAM: Hero apps disabled, ignoring nudge.
SAM: Not checking beacons since installed apps are switched off.
-[CLSuggestedActionManager handleNudge]_block_invoke
SAM: Got reply from CLBTLEFenceManager
SAM: Active beacons are nearby.  Using beacon-based recommendation.
SAM: No active beacons.  Looking for a location-based recommendation.
v8@?0@"NSSet"4
-[CLSuggestedActionManager suggestLocationApp]
SAM: %f seconds since last location request. Not refreshing suggestions.
SAM: AppSuggestions not authorized. Ignoring nudge.
SAM: App store not authorized. Ignoring nudge.
-[CLSuggestedActionManager onLocation:]
SAM: Received, location, %s
SAM: Received an unexpected location, state, %d
SAM: Location is stale, age, %f
SAM: Location uncertainty too large, horizontalAccuracy, %f
-[CLSuggestedActionManager onLocation:]_block_invoke
SAM: Clear RR key...
v12@?0i4@"NSError"8
-[CLSuggestedActionManager _suggestWithLocation:]
SAM: cannot suggest with nil location, returning.
-[CLSuggestedActionManager _suggestWithLocation:]_block_invoke_2
SAM: FetchAppsForArea error, %s, reset state.
SAM: Got app list, count, %lu
SAM: Received an unexpected app recommendation, state, %d
SAM: appMaxRating, %ld, isAppInstallAllowed, %d
SAM: Not considering app %d due to age restrictions, ageRating, %d, maxRating, %ld
SAM: Converted adamId %d to bundleId %s
SAM: Not considering installed app %d (bundleId = %s) since it's out of range.
SAM: Not considering non-installed app %d since it's not in the grid.
SAM: candidateAppList count, %ld
SAM: %lu app recommendation candidate%s at location, <%f, %f>
-[CLSuggestedActionManager _suggestWithLocation:]_block_invoke_3
SAM: %lu, adamId, %d, score, %f, installed, %s
-[CLSuggestedActionManager _suggestWithLocation:]_block_invoke_5
SAM: returned %lu loi%s of type %s
-[CLSuggestedActionManager _suggestWithLocation:]_block_invoke_6
SAM: location, <%f, %f>, is within %.1fm of loi ,%s, with type, %s
-[CLSuggestedActionManager _suggestWithLocation:]_block_invoke
SAM: routine mode: %ld
SAM: suppressing suggestions because device is too close to an loi of type home or work
SAM: Recommendation complete
SAM: Create RR key...
SAM: Already started RR since %f, %f
SAM: Allowing tourist apps.
SAM: Ignoring tourist app %d.
SAM: Not recommending %s since installed apps are switched off.
SAM: Not recommending %d since uninstalled apps are switched off.
SAM: Candidate suggestion, %d
SAM: Recent suggestions: 
SAM: Adam ID, %ld, time since first recommended, %f
SAM: Not recommending hero apps since we've been recommending this app for >15 mins, timeSinceFirstRecommended, %f.
SAM: Performing store lookup for adam id %d
v16@?0@"CLSuggestedActionManagerAppRecommendationResult"4I8^B12
SAM: Error performing store lookup for adam id %lld, dropping. Error %s
SAM: Finished store lookup for adam id %lld
v16@?0@"CLStoreServicesRequestorResult"4I8^B12
SAM: Recommending installed app %s...
SAM: adamId, %u, identifier, %s, suggested, %s
SAM: Recommending uninstalled app %s...
com.apple.AppStore
Recommended App!
itms-apps://?action=lookup&ids=%u
SAM: Not recommending the uninstalled app with adamId, %d, since it's blacklisted
SAM: Recent suggestions: %lu
SAM: %lu apps recommended
SAM: adam id: %ld, bundle id: %s
v16@?0@"CLPredictedApplication"4I8^B12
SAM: notifying %lu clients of %lu apps.
-[CLSuggestedActionManager shouldSuggestActionWithIdentifier:]
SAM: activity, %s, reached max attempts, %d, time until suggested again, %.2fs
-[CLSuggestedActionManager identifierForAdamId:atLocation:]
SAM: could not get device identifier for vendor
%@%@%.1f%.1f
%02x
-[CLSuggestedActionManager onUAUserActivityDidContinueToAppStoreNotification:]_block_invoke
SAM: Swipe-up into App Store with adamId, %s
SAM: Swipe-up into App Store with ... no adamId? Best guess is adamId, %s
SAM: Blipping the icon while App Store has been de-authorized.
-[CLSuggestedActionManager suggestBeaconAppWithBundleIdentifierSet:]
SAM: Got empty bundle identifier set
SAM: Most recent app is still active.
SAM: Most recent app is no longer active.  Suggesting arbitrary beacon app
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/SuggestedAction/CLSuggestedActionManager.mm
SAM: Suggesting iBeacon bundle identifier, %s
-[CLSuggestedActionManager beaconRegion:didTransitionToState:]
SAM: Setting bundle identifier, %s, to most recent
-[CLSuggestedActionManager _updateAppSuggestionsAllowed]
SAM: isInstalledAppSuggestionsAllowed, %d, isUninstalledAppSuggestionsAllowed, %d
SuggestedActionOldestAge
-[CLSuggestedActionManager onPurgeTimer]
SAM: delete all suggested actions not considered in %f wks
-[CLSuggestedActionManager onDaemonStatusDisplayOff]
SAM: Display off, invalidating previous activity.
-[CLSuggestedActionManager fetchPredictedApplicationsAtLocation:reply:]_block_invoke
SAM: returning app, adamid, %ld, bundleId, %s, name, %s.
-[CLSuggestedActionManager fetchPredictedApplicationsAtLocation:reply:]
SAM: returning no apps.
-[CLSuggestedActionManager startMonitoringPredictedApplicationsForClient:]
SAM: adding suggested application client, total clients, %lu.
-[CLSuggestedActionManager stopMonitoringPredictedApplicationsForClient:]
SAM: removing suggested application client, total clients, %lu.
T@,&,N,V_context
T@"NSUserActivity",&,N,V_activity
nudgeHandler
T@?,C,N,V_nudgeHandler
mostRecentBundleIdentifier
T@"NSString",C,N,V_mostRecentBundleIdentifier
isInstalledAppSuggestionsAllowed
TB,N,V_isInstalledAppSuggestionsAllowed
isUninstalledAppSuggestionsAllowed
TB,N,V_isUninstalledAppSuggestionsAllowed
tilesManagerProxy
T@"<CLTilesManagerProtocol>",&,N,V_tilesManagerProxy
mostRecentSuggestLocation
T@"CLLocation",C,N,V_mostRecentSuggestLocation
shouldUpdateRegionalRecommendationState
TB,N,V_shouldUpdateRegionalRecommendationState
recentlySuggestedAdamIds
T@"NSMutableArray",&,N,V_recentlySuggestedAdamIds
dateStartedSuggestingAdamIds
T@"NSMutableDictionary",&,N,V_dateStartedSuggestingAdamIds
storeRequestor
T@"CLStoreServicesRequestor",&,N,V_storeRequestor
mostRecentCachedLocation
T@"CLLocation",&,N,V_mostRecentCachedLocation
currentSuggestedApplications
T@"NSMutableArray",&,N,V_currentSuggestedApplications
suggestedApplicationClients
T@"NSMutableSet",&,N,V_suggestedApplicationClients
mostRecentLocationRequestTime
Td,N,V_mostRecentLocationRequestTime
spotlightPrefsChangedNotifyToken
Ti,N,V_spotlightPrefsChangedNotifyToken
driver
T@,&,N,V_driver
zeroKeywordEnabled
TB,N,V_zeroKeywordEnabled
applicationPredictionExtensionEnabled
TB,N,V_applicationPredictionExtensionEnabled
AppStore
com.apple.spotlightui
SBSearchDisabledDomains
DOMAIN_ZKWS
com.apple.spotlightui.prefschanged
com.apple.AppPredictionWidget.extension
System
User
LocationRequestCooldownInterval
SAMStartRegionalRecommendation
void onServiceLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)
SAM: Got unexpected notification: %d
void onBundleLocationNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)
SAM: This should never be executed.
void onBTLEFenceNotification_bounce(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &, void *)
void onDaemonStatusNotification_bounce(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &, void *)
LogFile
LogFileDirectory
LogFilePrefix
LogFileFlush
ShowError
LogFence
LogBufferSize
LogShowUI
LogBufferLevel
LogConsoleLevel
LogStackLevel
LogLocations
LogLocationsFile
LogLocationsFlush
.log
com.apple.locationd.log.compression
vlog
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Logging/CLLog.mm
newFullContentLength == fullContentLength
fullContentLength + 1 < bufferLength
%s,%s,Time,%08.3f,Function,"%s",
%s,%s,Time,%08.3f,
RotationEnabled
LogLevel
%s,%s,logging locations to %s%s
 and flushing immediately
 no flush
%s,%s,logging locations to an internal buffer with capacity %d
%s,%s,Failed to move aside log file %s (%d)
.log.bz2
%s/%s
Failed to delete log
%s,%s,Rotation path is too long, could not delete old logs.
%s,%s,Failed to write %s
%s,%s,could not open locations log %s, errno %d
Unplugged!
void CLLog::logHeader()
CoreLocation-%s
locationd was compiled on %s at %s
Jan 30 2017
21:12:59
%s @ system model %s / version %s
/usr/libexec/locationd @ system model %s / version %s
IOPlatformSerialNumber: %s
Begin settings dump (read at construction of CLSettings or upon darwin notification 'com.apple.locationd/prefs')
End settings dump
com.apple.timed
%s,%s,dumping internal buffer
.txt
%s,%s,copying gll.log
/cache_encryptedC.db
.plist.log
%s,%s,could not copy %s log
%s,%s,could not dump log file
%s,%s,Time,%08.3f,%d
0x%08lx %s + %lu
STACK
%s,%s,Time,%08.3f,%d
0x%08lx 0x%08lx + %lu
%s,%s,Time,%08.3f,%d
0x%08lx
PaceFusion_Epoch_Time
PaceFusion_Epoch_PedometerPace
PaceFusion_Epoch_PedometerPaceUncalibrated
PaceFusion_Epoch_SmoothOdometerPace
PaceFusion_Epoch_SmoothShortOdometerPace
PaceFusion_Epoch_LongMeanOdometerPace
PaceFusion_Epoch_ShortMeanOdometerPace
PaceFusion_Epoch_PaceResetTime
PaceFusion_Epoch_FinalFusedPace
PaceFusion_Epoch_OdometerPaceQuality
PaceFusion_Epoch_MeanPaceState
PaceFusion_Epoch_PaceFusionOutput
double CLPedometerPaceFusion::computeFusedPace(CFAbsoluteTime, const CLExtendedStepCountEntry &, CLPedometerPaceFusion::PaceSignalQuality)
%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f
double CLPedometerPaceFusion::computeMeanPace(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]
Odometer failed to compute a mean pace.
double CLPedometerPaceFusion::getOdometerDistance(const T_buffer &, CFAbsoluteTime, CFAbsoluteTime) const [T_buffer = CLNatalieInput<CLOdometerEntry>]
Time didn't move! time,%f
virtual CLSwimDistanceEstimator::Estimates CLSwimDistanceEstimatorOpenWater::estimate() const
Session distance estimate,odometer,%lf,generic stroke lengths,%lf
CLCircularLogBuffer
LogSensorFusion
CLSensorFusionMekf::CLSensorFusionMekf(const CFTimeInterval &, const CFTimeInterval &, bool)
Doing crude accel measurement update.
rotBufferSize, %zu, accelBufferSize, %zuu, peakCount, %d, fMaxStd, %.3f
gyroDt, %.4f, doAccelCheck, %d
virtual void CLSensorFusionMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)
omegaMag6, %.3f, omega, %.3f, %.3f, %.3f
[AppleQuaternion] x,%f,y,%f,z,%f,w,%f,timestamp,%f
virtual void CLSensorFusionMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)
[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f
virtual void CLSensorFusionMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)
[Accelerometer6] x,%.4f,y,%.4f,z,%.4f,lpf, %.4f, %.4f, %.4f, timestamp,%lf
[RotationRate6X] %.3f, %.3f, %.3f, %.3f, %.3f
rotating and going through.
it's been too long. go through.
grabing gravity, %.4f, %.4f, %.4f
std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f
sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f
===========Skip ahead.
Skip ahead------.
Taking another look.
using mean accel
accM, (%.4f, %.4f, %.4f), mag, %.3f
Doing some crude updates to catch up.
[KalmanFilterStates] %f,%f,%f,%f,%f,%f,%f
LogMagnetometer
CLMagnetometer
virtual CFTimeInterval CLMagnetometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)
Setting magnetometer update interval to %f
Unrecognized magnetometer notification %d
Magnetometer
static void CLMagnetometer::onMagnetometerData(void *, const CLMotionTypeMagneticField &, const CLMotionTypeTimestamp &)
Type,%s,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f
static void CLMagnetometer::onOffset(const CLMotionTypeMagneticField *, void *)
Received magnetometer offset (%f, %f, %f)
empty mac address error
malformed mac address error
CLMalformedMacAddressError::CLMalformedMacAddressError(std::string)
malformed mac address error: %s
mac address strict length error
CLMacAddressStrictLengthError::CLMacAddressStrictLengthError(std::string)
mac address strict length error: %s
com.apple.locationd.appreset
com.apple.locationd.appstatus
com.apple.locationd.techstatus
com.apple.locationd.started
com.apple.locationd.statusbar
com.apple.locationd.authorization
CLCompassDaemonClientNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/CLCompassDaemonClientNotifier.mm
-[CLCompassDaemonClientNotifierAdapter beginService]
static void CLCompassDaemonClientNotifier::create(CLSilo *)
CLCompassDaemonClientNotifier
virtual void CLMotionNotifier::SiloDispatcher<CLCompass_Type::Sample>::dispatchData(int, const void *, size_t) [T = CLCompass_Type::Sample]
virtual void CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLCompassDaemonClientNotifier_Type::Notification, NotificationData_T = CLCompassDaemonClientNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
uint16_t(header.endian)
uint16_t(header.headerLen)
header.warnVersion
uint16_t(header.xtraVersion)
header.cksum
header.fileSize
header.fileGpsWeek
header.fileMsec
header.dataGpsWeek
header.dataGpsMsec
uint16_t(header.lengthOfFitIntervalsInHours)
uint16_t(header.numFitGps)
uint16_t(header.contentMask)
header.glonassGpsWeek
header.glonassGpsMsec
uint16_t(header.numHoursInGloFitInterval)
uint16_t(header.numGloFits)
header.sp3file
header.sp3fileglonass
uint16_t(alm.prn)
uint16_t(alm.health)
alm.eccentircity
uint32_t(alm.toa)
alm.deltai
alm.omegadot
alm.sqrtA
alm.omega0
alm.omegaArgPer
alm.M0
alm.Af0
alm.Af1
alm.weekNumber
uint32_t(alm.prn)
uint32_t(alm.health)
alm.toa
uint16_t(alm.svSlotNumber)
uint16_t(alm.svType)
alm.tau_na
alm.longAsending
alm.inclCorrect
alm.orbitEcc
alm.perigee
alm.firstAscend
alm.dracCorrect
uint16_t(alm.dracRate)
uint16_t(alm.freqNum)
alm.nan4
alm.dracRate
int16_t(alm.freqNum)
alm.na
alm.n4
gpsalm.prn
bool CLParseXtra::readGpsAlmanac(std::istream &, CLParseXtra::GpsAlmanacInt &, CLParseXtra::Endian)
failed to read [%s]
gpsalm.health
gpsalm.eccentircity
gpsalm.toa
gpsalm.deltai
gpsalm.omegadot
gpsalm.sqrtA
gpsalm.omega0
gpsalm.omegaArgPer
gpsalm.M0
gpsalm.Af0
gpsalm.Af1
gpsalm.weekNumber
gloalm.health
bool CLParseXtra::readGlonassAlmanac(std::istream &, CLParseXtra::GlonassAlmanacInt &, CLParseXtra::Endian)
gloalm.svType
gloalm.svSlotNumber
gloalm.tau_na
gloalm.longAsending
gloalm.inclCorrect
gloalm.orbitEcc
gloalm.perigee
gloalm.firstAscend
gloalm.dracCorrect
gloalm.dracRate
gloalm.freqNum
gloalm.nan4
bool CLParseXtra::readXtraHeader(std::istream &, CLParseXtra::XtraHeader &)
PLOS: can't open file 
PLOS: endian
header.headerLen
header.xtraVersion
header.lengthOfFitIntervalsInHours
header.numFitGps
header.contentMask
header.numHoursInGloFitInterval
header.numGloFits
PLOS: sp3file
PLOS: sp3fileglonass
PLOS: header
bool CLParseXtra::readXtraData(std::istream &, CLParseXtra::GpsAlmanacXtraVector &, GlonassAlmanacXtraVector &, CLParseXtra::XtraHeader &)
PLOS_XTRA: header
PLOS: id
PLOS: id,%d,dataSize,%d
PLOS: GPS ALM
GpsAlmancInt:
PLOS: GLO ALM
GlonassAlmancInt:
void CLParseXtra::parse()
can't open [%s]
PLOS: failed to parse [%s]
Xtraheader:
PLOS:%s
GpsAlmanac:
GlonassAlmanac:
bool CLParseXtra::read_from_file(std::istream &, DataType &, CLParseXtra::Endian) [DataType = unsigned char]
eof,n,%ld,requested,%ld
bool CLParseXtra::read_from_file(std::istream &, DataType &, CLParseXtra::Endian) [DataType = unsigned short]
bool CLParseXtra::read_from_file(std::istream &, DataType &, CLParseXtra::Endian) [DataType = unsigned int]
submissionTimestamp
deviceKey
measurements
recordingEvents
models
duetEvents
rtLOITypes
configurations
-[CRMicroLocationCollectionRequest writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRMicroLocationCollectionRequest.m
hasSubmissionTimestamp
Td,N,V_submissionTimestamp
hasDeviceKey
T@"NSString",&,N,V_deviceKey
T@"NSMutableArray",&,N,V_measurements
T@"NSMutableArray",&,N,V_recordingEvents
T@"NSMutableArray",&,N,V_models
T@"NSMutableArray",&,N,V_duetEvents
T@"NSMutableArray",&,N,V_rtLOITypes
T@"NSMutableArray",&,N,V_configurations
com.apple.private.alloy.location.motion
-[CLCompanionTransport updateIDSStatus]
Fitness: Companion model is %s
-[CLCompanionTransport updateIDSStatusAndNotify]
prevConnectedState,%s,currConnectedState,%s
-[CLCompanionTransport sendMessage:type:priority:fireAndForget:encrypt:bypassConnectionCheck:timeout:]
Sending protobuf ID:%s size: %zd type: %d over IDSService - Status %d, md5 %s
No device locally connected - Ignore sending data
-[CLCompanionTransport receivedMessage:data:identifierString:]
Received message ID:%s, type:%d, size %zd, md5 %s
Unexpected message received while disconnected. Updating status
-[CLCompanionTransport service:account:incomingData:fromID:context:]
Received data over IDSService size : %ld
-[CLCompanionTransport service:account:incomingUnhandledProtobuf:fromID:context:]
Received unhandledprotobuf ID:%s, size:%zd
-[CLCompanionTransport service:nearbyDevicesChanged:]
-[CLCompanionTransport service:activeAccountsChanged:]
IDSService activeAccountsChanged
-[CLCompanionTransport service:account:identifier:didSendWithSuccess:error:]
Service sent data with ID:%s with success %d error %s
-[CLCompanionTransport service:account:identifier:hasBeenDeliveredWithContext:]
Service data ack on otherside with ID:%s
idsService
T@"IDSService",&,N,V_idsService
receivedMessageHandler
T@?,C,V_receivedMessageHandler
connectionUpdateHandler
T@?,C,V_connectionUpdateHandler
isConnected
TB,V_isConnected
pairedDevice
T@"IDSDevice",&,V_pairedDevice
pairedDeviceLastSeenTimestamp
Td,V_pairedDeviceLastSeenTimestamp
kCMLogItemCodingKeyTimestamp
gsmNeighbors
scdmaNeighbors
cdmaNeighbors
lteNeighbors
T@"NSMutableArray",&,N,V_gsmNeighbors
T@"NSMutableArray",&,N,V_scdmaNeighbors
T@"NSMutableArray",&,N,V_cdmaNeighbors
T@"NSMutableArray",&,N,V_lteNeighbors
virtual bool CLFitnessTrackingNotifierCompanion::isDeviceActivated() const
Device is not activated, suspending activity tracking.
Failed to get TCC for motion, suspending activity tracking.
virtual bool CLFitnessTrackingNotifierCompanion::isFitnessTrackingEnabled() const
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/FitnessTracking/CLFitnessTrackingNotifierCompanion.mm
virtual void CLFitnessTrackingNotifierCompanion::notifyClients()
com.apple.tcc.access.changed
CleanupInterval
CLTilesManagerExternal::CLTilesManagerExternal(CLTilesManager *, CLSilo *)
Defaults write: fCleanupInterval.
cleanupInterval
Failed to allocate run loop timer.
virtual CLDaemonStatus_Type::Reachability CLTilesManagerExternal::getCurrentReachability() const
TILE: Override reachability on Watch
void CLTilesManagerExternal::onCleanupAgedTiles(CFRunLoopTimerRef)
Timer ref mismatch.
GPS-coarse
pipelined
CLTypeLocation, 
, type, 
, latitude, 
, longitude, 
, altitude, 
, hAcc, 
, vAcc, 
, course, 
, speed, 
, timstamp, 
, lifespan, 
, confidence, 
<error>
static bool CMOQuaternion::northAndGravity(CMVector<float, 3>, CMVector<float, 3>, const float *, CMOQuaternion &, CMMatrix<float, 3> &)
n and g are too close %f
Assertion failed: lambda != 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMOQuaternion.cpp, line 223,invalid weights.
kappa zero!
modes
TQ,N,V_locationId
macsCount
T^Q,R,N
modesCount
CLSwimAlgSimulator::CLSwimAlgSimulator(CLSwimDataStore *, float)
SimulateSwimmingStyle
SimulateSwimmingLapInsertion
virtual CLSwimAlgResultFlags CLSwimAlgSimulator::processFusion(const CLSwimFusionInput &, CLSwimEntry &)
Simulated stroke
Simulated turn
lastStatus, 
, started, 
, monitoring settled, 
, activeTech, 
, lastDistance, 
, lastTechCheckDis, 
, lastLocCheck, 
, settledInsideStatus, 
MonitoringTechOptions CLFenceMonitorLogic::getRequiredTechLevel(const MonitoredFencesIter &, const CLDaemonLocation &, const MonitoringTechOptions, std::function<bool (const CLFenceManager_Type::Fence &, const CLDaemonLocation &)>, std::function<bool (const CLFenceManager_Type::Fence &, const CLDaemonLocation &)>, std::function<bool (const CLFenceManager_Type::Fence &, const CLDaemonLocation &)>)
Fence: fence, %s, is large, requesting, kFenceMonitoringOpportunistic
double CLFenceMonitorLogic::calcAdjustedHorizontalAccuracy(const CLLocationType &, const CLDaemonLocation &, const CLFenceManager_Type::FenceStatus &, const bool)
GPS: normalize unc value, %.1lf, %.1lf
CLFenceMonitorLogic
unsupported location type
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLFenceMonitorLogic.mm
void CLFenceMonitorLogic::adjustEntryExitRadius(double &, double &, const bool, const bool, const CLFenceManager_Type::FenceStatus &, const CLLocationType &, const double)
double CLFenceMonitorLogic::adjustDistanceToFenceCenter(const double, const double, const CLLocationType &, const CLFenceManager_Type::FenceStatus &, const bool, const bool)
CLFenceManager_Type::FenceStatus CLFenceMonitorLogic::getStatusFromLocation(const CLDaemonLocation &, const MonitoredFencesIter &, const double, const bool)
Fence: location, why are you unknown?, %s
Fence: getStatusFromLocation, %s, fix, %c%c%c%c%c, isWifiPowered, %d,  effectiveDistance, %.2lf, distance, %.1f, entryRadius, %.1f, exitRadius, %.1f, adjDist, %.1lf, adjHorAcc, %.1lf, origHorAcc, %.1lf
Fence status changed to Inside, distToCenter, %.1lf, %s
Fence status changed to Outside, distToCenter, %.1lf, %s
Fence status remained unchanged, distToCenter, %.1lf, %s
void initialize()
CANDY: Could not derive hardware info for Init
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLCandy.m
+[CLCandy signData:]
CANDY: Compute failed with: %ld
+[CLCandy verifyData:matchesSignature:]
CANDY: Verify failed with: %ld
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Core/CLConnection.mm
CLConnection::~CLConnection()
void CLConnection::handleMessage(std::shared_ptr<CLConnectionMessage>)
Unhandled message %s
bool CLConnection::sendMessageInternal(std::shared_ptr<CLConnectionMessage>, xpc_handler_t)
Couldn't create XPC message
kCLConnectionMessageInfoKey
kCLConnectionMessageFileDescriptorKey
id<NSSecureCoding> CLConnectionMessage::getObject() const
The received data object is invalid.
bool CLConnectionMessage::sendReply(const std::string &, id<NSSecureCoding>)
Unable to send reply, a reply message does not exist.
bool CLConnectionMessage::sendReply(const std::string &, xpc_object_t)
void setEventHandler(xpc_connection_t, CLConnectionMessageHandler, CLConnectionEventHandler, CLConnectionEventHandler, CLConnectionEventHandler *)_block_invoke
Connection interrupted!
Location connection invalid!
Got unexpected location event
void handleXPCEvent(xpc_object_t, CLConnectionMessageHandler, CLConnection *)
Error on message reply (%s)
Ignoring unexpected event
CLDaemonClient.AutopauseThreshold
com.apple.Maps
CLDaemonClient::CLDaemonClient(CLConnection *, BasicMutex &, CLSilo *)
Couldn't get information from PID %u
PID %u either doesn't specify UIBackgroundModes, or SB timed out fetching them
client '%s' supports background location
platform does not support multitasking
bool CLDaemonClient::init()
Failed to become client of CLClientManager
RttBurstSize
WRTT: overriding burst size to %{public}d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Core/CLDaemonClient.mm
PAUSE: BATCH: '%s' (%d, %p) started in the unknown state. Daemon?
PAUSE: BATCH: '%s' (%d, %p) started in unexpected state: %s
AutoPauseOverride
PAUSE: Override AutoPause to On for all clients
PAUSE: Override AutoPause to On for all clients linked with SDK that predates 6.0
PAUSE: Override AutoPause to Off for all clients
PAUSE: Override AutoPause to None
AutoPauseLogUI
PAUSE: AutoPause log UI Enabled
AutoPauseActivityType
PAUSE: activity type defaulted to %ld
OnBodyStatusOverride
void CLDaemonClient::setClientName(const CLClientManager_Type::Name &)
CLDisableAuthorizationRequests
kCLConnectionMessageDesiredAccuracyKey
(!!value) != (!!fStatusBarAssertion)
StatusBarOverride
CLClientServiceTypeMask CLDaemonClient::getEffectiveServiceTypeMask()
void CLDaemonClient::dispatchMessageToHandler(std::shared_ptr<CLConnectionMessage>)
message '%{public}s' received from client '%{public}s'
DaemonClient for %s received %s before kCLConnectionMessageRegistration. Ignore it...
kCLConnectionMessageAllowsLocationPrompts
kCLConnectionMessageShowLocationPrompt
kCLConnectionMessageWatchdog
kCLConnectionMessagePurpose
kCLConnectionMessageIsActuallyAWatchKitExtension
kCLConnectionMessageProxyForRemoteClient
kCLConnectionMessageRequestAuthorization
kCLConnectionMessageMarkAsHavingReceivedLocation
kCLConnectionMessageActivityType
kCLConnectionMessageMatchInfoEnabled
kCLConnectionMessagePersistentMonitoringEnabled
kCLConnectionMessageRegisterAsLocationClient
kCLConnectionMessagePausesLocationUpdatesAutomatically
kCLConnectionMessageAllowsBackgroundLocationUpdates
kCLConnectionMessageBatch
kCLConnectionMessageAllowsMapCorrection
kCLConnectionMessageRegionState
kCLConnectionMessageInUseAssertion
kCLConnectionMessageEmergencyEnablementAssertion
kCLConnectionMessageLocationIndependenceAssertion
kCLConnectionMessageRegisterLaunchdManagedClients
kCLConnectionMessageLocation
kCLConnectionMessageHeading
kCLConnectionMessageRegionMonitoring
kCLConnectionMessageRanging
kCLConnectionMessagePeerRanging
kCLConnectionMessageSignificantLocationChange
kCLConnectionMessageSignificantLocationVisit
kCLConnectionMessageVehicleHeading
kCLConnectionMessageVehicleSpeed
kCLConnectionMessageMicroLocation
kCLConnectionMessageRequestMicroLocation
kCLConnectionMessageMotionState
kCLConnectionMessageMotionActivityUpdate
kCLConnectionMessageMotionActivityQuery
kCLConnectionMessageMotionActivityAvailable
kCLConnectionMessageActivityAlarmStart
kCLConnectionMessageActivityAlarmAvailable
kCLConnectionMessageSidebandOverride
kCLConnectionMessageMotionStateSim
kCLConnectionMessageStartStepCountAvailable
kCLConnectionMessageStartStepCountUpdate
kCLConnectionMessageStepCountQuery
kCLConnectionMessageStepCountRecordQuery
kCLConnectionMessageStepCountReset
kCLConnectionMessageFloorCountAvailable
kCLConnectionMessagePaceAndCadenceAPIAvailable
kCLConnectionMessagePedometerEvent
kCLConnectionMessageStrideCalibrationDump
kCLConnectionMessageSidebandSensorFusionEnable
kCLConnectionMessageGesture
kCLConnectionMessageGmm
kCLConnectionMessageGyroBiasEstimation
kCLConnectionMessageOnBodyDetection
kCLConnectionMessageOnBodyDetectionParams
kCLConnectionMessageNatalimetryAvailable
kCLConnectionMessageNatalimetryUpdate
kCLConnectionMessageNatalimetryQuery
kCLConnectionMessageNatalimetryGetUserProfile
kCLConnectionMessageNatalimetrySetUserProfile
kCLConnectionMessageNatalimetrySetSession
kCLConnectionMessageNatalimetryCalibrationPromptsNeeded
kCLConnectionMessageNatalimetryResetCalibration
kCLConnectionMessageOdometerGpsAvailability
kCLConnectionMessageStartOdometerUpdate
kCLConnectionMessageSedentaryTimerIsAvailable
kCLConnectionMessageSedentaryTimerIsArmed
kCLConnectionMessageSedentaryTimerStart
kCLConnectionMessageSedentaryTimerStop
kCLConnectionMessageSedentaryTimerQuery
kCLConnectionMessageSedentaryTimerAlarm
kCLConnectionMessageHasRunMiniCal
kCLConnectionMessageStartMiniCal
kCLConnectionMessageSetUrgentCalFlag
kCLConnectionMessageCatherineData
kCLConnectionMessageVehicleConnectionMostRecent
kCLConnectionMessageVehicleStateIsAvailable
kCLConnectionMessageVehicleStateMostRecentVehicleConnection
kCLConnectionMessageVehicleStateMostRecentInVehicle
kCLConnectionMessageSensorRecorderAuthorized
kCLConnectionMessageSensorRecorderSensorAvailable
kCLConnectionMessageSensorRecorderGetMetaByID
kCLConnectionMessageSensorRecorderGetMetaSinceID
kCLConnectionMessageSensorRecorderGetMetasByDateRange
kCLConnectionMessageSensorRecorderGetDataByID
kCLConnectionMessageSensorRecorderRecordFor
kCLConnectionMessageSensorRecorderWriteSensorDataToFileByDateRange
kCLConnectionMessageSensorRecorderSetSensorSampleRate
kCLConnectionMessageDeviceHasOriginalCamera
kCLConnectionMessageCameraVcmActuatorId
kCLConnectionMessageCompassCalibrationData
kCLConnectionMessageExerciseMinuteUpdate
kCLConnectionMessageExerciseMinuteQuery
kCLConnectionMessageWorkoutStart
kCLConnectionMessageWorkoutStop
kCLConnectionMessageWorkoutEvent
kCLConnectionMessageSwimDataUpdate
kCLConnectionMessageSwimDataQuery
kCLConnectionMessageSignificantElevationUpdate
kCLConnectionMessageSignificantElevationDeltaQuery
kCLConnectionMessageCaptureMode
kCLConnectionMessageFallStatsAvailable
kCLConnectionMessageFallStatsSetEnabled
kCLConnectionMessageFallStatsSendStats
void CLDaemonClient::shutdown()
#CLIUA Releasing InUseAssertion for %{public}s on behalf of %{public}s with reason %{public}s
#CLEEA Releasing EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s
ending metric session (LocationUpdateSession) for %s
ending metric session (LocationMonitorSession) for %s
ending metric session (MotionTrigger) for %s
Releasing status bar assertion at EOL for %s (%d)
Client %s disconnected before delayed unvisibility transition
void CLDaemonClient::fetchLocationSystemStateWithReply(void (^)(const CLDaemonStats_Type::LocationSystemState &))_block_invoke
location system state, cell available, %d, wifi available, %d, passcode locked, %d, airplane mode enabled, %d, accessory connected, %d, reachability, %d, powered, %d, gpsCoexWifi, %d, gpsCoexBt, %d
kCLConnectionMessageDynamicAccuracyReductionKey
kCLConnectionMessageAlteredAccessoryLocationsKey
int CLDaemonClient::locationDataToNvp(const CLLocationProvider_Type::NotificationData &, CLNameValuePair &)
ALTERED: toNvp: %.8f, %.8f, %.2f, %d, %d, %lf, %lf, %d, %.8f, %.8f, %.2f
IsFitnessMatch
Failed to convert location to nvp
LocationsPrivate
Failed to convert location private to nvp
void CLDaemonClient::deliverLocationToClient(const CLLocationProvider_Type::NotificationData &)
Sending location to client <%{public}s>
ClxClient, location, %s, type, %d, accuracy, %.1f
%s started actively spectating
void CLDaemonClient::deliverLocationToClient(const CLLocationProvider_Type::NotificationData &)_block_invoke
%s stopped actively spectating
BATCH: successfully ended for %s
v8@?0r^{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}i}4
kCLConnectionMessageLocationUnavailable
void CLDaemonClient::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
BATCH: location unavailable caused batch failure
kCLConnectionMessageVehicleSpeedKey
Sending,vehicle speed,to client,%{public}s,time,%{public}.3lf,speed,%{private}.3lf
kCLConnectionMessageVehicleHeadingKey
Sending,vehicle heading,to client,%{public}s,time,%{public}.3lf,heading,%{private}.3lf
Got active change notification; updating requests
void CLDaemonClient::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)
Sending kCLConnectionMessageRegionMonitoringError for region,'%s/%s'.
kCLConnectionMessageErrorKey
kCLConnectionMessageRegionMonitoringError
Sending kCLConnectionMessageRegionMonitoringSetupCompleted for region,'%s/%s'.
kCLConnectionMessageRegionMonitoringSetupCompleted
Sending kCLConnectionMessageRegionState for region,'%s/%s'.
kCLConnectionMessageStatusKey
Sending kCLConnectionMessageRegionMonitoring for region,'%s/%s'.
kCLConnectionMessageEventKey
Unsupported region transition state,%d will not be reported.
void CLDaemonClient::onBTLERangeNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLERangeManager_Type::NotificationData &)
Unable to find ranged region,%s.
Sending kCLConnectionMessageRangingError for region,%s with error,%d.
kCLConnectionMessageRangingError
kCLConnectionMessageBeaconsKey
Sending kCLConnectionMessageRanging for region,%s, with beacons,%d.
void CLDaemonClient::onPeerRangeNotification(int, const CLPeerRangingNotifier_Type::Notification &, const CLPeerRangingNotifier_Type::NotificationData &)
WRTT: %s received PeerRanging notification %d (fRegistrationResult %d)
void CLDaemonClient::sendPeerRangesAndErrors(const std::vector<CLPeerRangingResult> &, const std::vector<CLPeerRangingError> &)
WRTT: Send PeerRanges, %ld, Errors, %ld
void CLDaemonClient::sendPeerRangingErrors(NSArray *, NSArray *)
WRTT: send Errors (%{public}lu) to client '%s'
kCLConnectionMessageErrorsKey
kCLConnectionMessageRangingPeersKey
kCLConnectionMessagePeerRangingError
void CLDaemonClient::sendPeerRangeResults(const std::vector<CLPeerRangingResult> &)
WRTT: send Results (%{public}ld) to client '%s'
WRTT: Sending PeerRanging info to client '%s'
void CLDaemonClient::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)
Fence: received, kNotificationRegionStateRequest, %s, state, %d, %s
Fence: unknown state, %d
kCLConnectionMessageLocationKey
entry
exit
Notifying client of fence %s for %s/%s (location <%+.8f,%+.8f> acc %.2f type %d)
v8@?0r^{LocationSystemState=BBBBBiBii}4
Sending setup delayed message for %s/%s
Sending setup completed message for %s/%s
Fence: received, kNotificationFenceNotAuthorized
Fence: kNotificationFenceNotAuthorized, bundle not authorized for location, %s, fence, %s
Fence: received, kNotificationFenceFailure
Sending region monitoring error message for %s/%s
kCLConnectionMessageAlternateRegionKey
No alternate region available
kCLConnectionMessageRegionMonitoringResponseDelayed
void CLDaemonClient::sendSignificantLocationChange(const CLLocationProvider_Type::NotificationData &, bool)
Sending significant location change <%{private}+.8f,%{private}+.8f> acc %{private}.2f for %{public}s (pid %{public}04d)
v20@?0d4d12
Not notifying client %{public}s (pid %{public}04d) of significant location change because regular location updates are enabled
void CLDaemonClient::onActivityAlarm(int, CMActivityAlarm *, NSError *)
activity alarm triggered. (internal id %d)
void CLDaemonClient::onSedentaryTimerAlarm(int, const CLSedentaryTimerNotifier_Type::Notification &, const CLSedentaryTimerNotifier_Type::NotificationData &)
void CLDaemonClient::onEarGestureNotification(const CLEarGestureNotifier::CMEarGestureData &)
GestureDetected
GestureCanceled
Sent ear gesture message (prototype %s)
com.apple.mobilephone
ignoring metric for phone pick-up
counting metric for non-phone pick-up
starting metric session (MotionTrigger) for %s
void CLDaemonClient::onGyroBiasEstimatorNotification(const CLMotionTypeGyroBiasAndVariance &)
Sent gyro bias estimation message
void CLDaemonClient::onGmmNotification(int, const CLGeomagneticModelProvider_Type::Notification &, const CLGeomagneticModelProvider_Type::NotificationData &)
Received GMM notification %d
 overridden
void CLDaemonClient::onOnBodyNotification(int, const CLOnBodyNotifier_Type::Notification &, const CLOnBodyNotifier_Type::NotificationData &)
Sent%s onBodyDetection message to %s, %s
void CLDaemonClient::onPauseNotification(int, const CLAutopauseProvider_Type::Notification &, const CLAutopauseProvider_Type::NotificationData &)
PAUSE: %s received pause notification %d
v8@?0^{CLCompassDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{BasicMutex=^^?^{MutexInfo}}i}4
void CLDaemonClient::onProactiveCompass(const CLCompass_Type::Sample *)
Compass calibration achieved (L%d) for client '%s'
void CLDaemonClient::onSignificantLocationVisit(CLVisit *)
SLV: Client, %{public}s, fRegistrationResult, %{public}d
SLV: Sending visit, %{private}s, to client, %{public}s
kCLConnectionMessageSignificantLocationVisitKey
SLV: Not delivering visit, %{private}s, to client, %{public}s, not authorized
void CLDaemonClient::onBatchTimer(CLPersistentTimer *)
BATCH: Time criterion met, waiting for location event to notify client %s
void CLDaemonClient::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
'%{public}s' received unknown notification: %{public}d
void CLDaemonClient::onMicroLocationNotification(int, const CLMicroLocationNotifier_Type::Notification &, const CLMicroLocationNotifier_Type::NotificationData &)
MicroLocation: %s received microlocation notification %d (fRegistrationResult %d)
void CLDaemonClient::sendMicroLocations(const std::vector<CLMicroLocationResultInternal> &)
kCLConnectionMessageError
bool CLDaemonClient::checkEntitlement(const std::string &, bool &)
Couldn't get CFString for entitlement
entitled
not entitled
%s is %s for %s
void CLDaemonClient::setRegistrationResult(CLTypeRegistrationResult)
Authorization status for %s is now %s (was %s)
client authorized; sending out cached message %s
client authorized but no longer interested in cached message %s; discarding cache
%s is still not authorized for %s, dropping
void CLDaemonClient::handleAuthorizationStatusChange()
fRegistrationResult != CLClientManager->getClientEffectiveRegistrationResult for %{public}s: %{public}d != %{public}d
kCLConnectionMessageAuthorizationStatus
void CLDaemonClient::sendDeniedErrorMessage()
Sending denied error message to %s
void CLDaemonClient::enteredBackground()
PAUSE: Client %s entered background at %.1f
Client %s will transition to unvisible after grace period
void CLDaemonClient::enteredBackground()_block_invoke
Client %s is now unvisible
 (belayed outstanding transition to invisible)
void CLDaemonClient::enteredForeground()
Client %s now visible, was %svisible%s
PAUSE: Client %s entered foreground (from %.1f)
PAUSE: Client '%s' was paused but not in the background
no longer 
void CLDaemonClient::setInUseAssertion(bool)
#CLIUA Client %{public}s now %{public}sbenefitting from an InUseAssertion
kCLConnectionMessageDistanceFilterKey
void CLDaemonClient::sendMessage(MessageRef)
Client not authorized for message %{public}s
Client '%s' is not interested in %s
didPause
willResume
void CLDaemonClient::sendAutopauseStatusMessage(bool)
PAUSE: AutoPause is overridden to off, reject %s message to client '%s'
locationd paused updates to '%s' at %ld:%ld:%ld %ld-%ld-%ld (%.2f). If you believe this was in error, file a radar with a screenshot and your locationd.log
Autopause
locationd paused updates to '%s' at %.2f. client autopause setting: %d, override setting: %d
PAUSE: Sending %s message to client '%s'
kCLConnectionMessageAutopauseStatusKey
kCLConnectionMessageAutopauseOverrideKey
kCLConnectionMessageAutopauseStatus
void CLDaemonClient::sendBatchDidFinish(int)
BATCH: Not batching but tried to finish with error %d
BATCH: Sending didFinishDeferredUpdatesWithError:%d message to client '%s'
void CLDaemonClient::wakeupDaemonClient(const std::string &)
Sending kCLConnectionMessageWakeClient for %{public}s to client '%{public}s'
kCLConnectionMessageClientNameKey
kCLConnectionMessageWakeClient
kCLConnectionMessageBundleIdentifierKey
kCLConnectionMessageBundlePathKey
kCLConnectionMessageClientSDKKey
void CLDaemonClient::handleMessageRegistration(std::shared_ptr<CLConnectionMessage>)
Client '%{public}s' does not have required entitlement '%{public}s' to set effective bundle identifier, '%{public}s', or effective bundle, '%{public}s'
Client '%{public}s' is setting effective bundle identifier to '%{public}s'
com.apple.webapp-
Client '%{public}s' is attempting to masquerade as uninstalled app with effective bundle identifier '%{public}s'
Client '%{public}s' is setting effective bundle path to '%{public}s'
Client '%{public}s' is registering as a system service
Client %{public}s is attempting to masquerade as uninstalled app with effective bundle path <%{public}s>
Client '%{public}s' is a plugin, auto-masquerading as its containing app
OpaqueTags
CLDaemonClient registered
kCLConnectionMessagePurposeKey
void CLDaemonClient::handleMessagePurpose(std::shared_ptr<CLConnectionMessage>)
Couldn't get value for key %s
void CLDaemonClient::handleMessageIsActuallyAWatchKitExtension(std::shared_ptr<CLConnectionMessage>)
Unentitled entity '%s' trying to tell us they are WatchKit
kCLConnectionMessageEnabledKey
Setting client, %s, is actually a WatchKit extension, %d
void CLDaemonClient::handleMessageProxyForRemoteClient(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageMarkAsHavingReceivedLocation(std::shared_ptr<CLConnectionMessage>)
Unentitled entity '%s' trying to mark itself as having received location?!
Request to mark '%s' as having received location while it is not authorized
does not have
Marking '%s' as having received location without regard to authorization (it is %s, and presently %s authorization)
void CLDaemonClient::handleMessageRequestAuthorization(std::shared_ptr<CLConnectionMessage>)
Malformed authorization request from '%s'
void CLDaemonClient::requestAuthorization(CLClientAuthorizationStatus)
Unrecognized authorization value (%d) requested by '%s'
Dropping -request%sAuthorization from '%s': NSLocation%sUsageDescription Info.plist key not available?
Authorization value %{public}s requested by '%{public}s' ignored because not in its allowable mask (%{public}lu)
Authorization value %{public}s requested by '%{public}s' ignored because another authorization effort (%{public}d) is already in flight
kCLConnectionMessageActivityTypeKey
void CLDaemonClient::handleMessageActivityType(std::shared_ptr<CLConnectionMessage>)
Client '%s' changed activity type from %ld to %ld
void CLDaemonClient::handleMessageWatchdog(std::shared_ptr<CLConnectionMessage>)
received watchdog from client '%s'
void CLDaemonClient::handleMessageMatchInfoEnabled(std::shared_ptr<CLConnectionMessage>)
Client %s does not have appropriate entitlement to enable match info
Client %s is setting match info enabled to %d
void CLDaemonClient::handleMessagePersistentMonitoringEnabled(std::shared_ptr<CLConnectionMessage>)
Setting persistent monitoring enabled to %d
Client now interested in persistent monitoring; adding as a significant change client
Client no longer interested in persistent monitoring; removing as a significant change client
void CLDaemonClient::handleMessageAllowsLocationPrompts(std::shared_ptr<CLConnectionMessage>)
Client %s does not have appropriate entitlement to change prompt behaviour
Client %s is setting location prompt allowed to %d
void CLDaemonClient::handleMessageShowLocationPrompt(std::shared_ptr<CLConnectionMessage>)
Client %s is setting location prompt show to %d
void CLDaemonClient::handleMessageRegisterAsLocationClient(std::shared_ptr<CLConnectionMessage>)
Client %{public}s is registering as a location client and will show up in Settings
kCLConnectionMessagePausesLocationUpdatesAutomaticallyKey
void CLDaemonClient::handleMessagePausesLocationUpdatesAutomatically(std::shared_ptr<CLConnectionMessage>)
Client %s is setting AutoPause to %d
kCLConnectionMessageAllowsBackgroundLocationUpdatesKey
void CLDaemonClient::handleMessageAllowsBackgroundLocationUpdates(std::shared_ptr<CLConnectionMessage>)
Client %s is setting ContinuousBackgroundLocationRequested to %d
void CLDaemonClient::startBatching(CLTypeOdometer, CFAbsoluteTime, CLClientLocationOperatingMode)
BATCH: startBatching called but we're already batching
BATCH: starting client %s
BATCH: scheduling odometer alarm for %.1f
void CLDaemonClient::startBatching(CLTypeOdometer, CFAbsoluteTime, CLClientLocationOperatingMode)_block_invoke_2
BATCH: Odometer errored (%s) for client (%s)
BATCH: Odometer criterion met, waiting for location event to notify client %s
BATCH: Odometer fired (%.1f,%s) but no longer relevant to us
v20@?0@"CLOdometerAlarm"4d8@"NSError"16
BATCH: scheduling timer for %.1f
BatchAlarm.
void CLDaemonClient::stopBatching()
BATCH: stopBatching called but we're not batching
BATCH: stopping client %s
kCLConnectionMessageBatchAllowedKey
void CLDaemonClient::handleMessageBatch(std::shared_ptr<CLConnectionMessage>)
BATCH: client %s disallowed Batch
kCLConnectionMessageBatchDistanceKey
kCLConnectionMessageBatchTimeoutKey
kCLConnectionMessageOperatingModeKey
BATCH: request (%.1fm, %.1fs) will be based on %.1fm (%.1fs), %.1fs for client %s
BATCH: How were we not updating location?
BATCH: How were we batching accuracy was too low?
BATCH: How were we batching if a distance filter was on?
BATCH: distance or timeout was <= 0 (techincally exit criteria has already been satisfied.)
Location uncertainty too high to allow deferred updates now
BATCH: odometer is not running, we have no way to know what distance is relative to
BATCH: scheduled batch exit but not off-boarding
void CLDaemonClient::handleMessageRegisterLaunchdManagedClients(std::shared_ptr<CLConnectionMessage>)
Client %s is allowing message kCLConnectionMessageWakeClient
kCLConnectionMessageAllowsMapCorrectionKey
void CLDaemonClient::handleMessageAllowsMapCorrection(std::shared_ptr<CLConnectionMessage>)
CLMM,Client,'%s',pid,%u,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d
void CLDaemonClient::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)
Couldn't get value for key %s, %s/%s
Client %s does not have appropriate entitlement to act as a proxy service to %s
Fence: requesting, kCLClientRegionCircular for, [%s]/%s/%s
Fence: requesting, kCLClientRegionBeacon for, [%s]/%s/%s
void CLDaemonClient::handleMessageUnknown(std::shared_ptr<CLConnectionMessage>)
Got unhandled mesage of type %{public}s
void CLDaemonClient::handleMessageInUseAssertion(std::shared_ptr<CLConnectionMessage>)
#warning #CLIUA Not entitled as usage oracle... ignoring InUseAssertion taken by %{public}s
#CLIUA InUseAssertion taken by %{public}s malformed: lacking required argument
#CLIUA Neither bundleIdentifier nor bundlePath specified... ignoring InUseAssertion taken by %{public}s
#CLIUA Assertion requested with no reason... ignoring InUseAssertion taken by %{public}s
#CLIUA Taking InUseAssertion for %{public}s on behalf of %{public}s with reason %{public}s
void CLDaemonClient::handleMessageEmergencyEnablementAssertion(std::shared_ptr<CLConnectionMessage>)
#warning #CLEEA Not entitled as emergency enabler... ignoring EmergencyEnablementAssertion taken by %{public}s
#CLEEA InUseAssertion taken by %{public}s malformed: lacking required argument
#CLEEA Taking EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s
kCLConnectionMessageSubscribeKey
void CLDaemonClient::handleMessageLocation(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageHeading(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageRegionMonitoring(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageRanging(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessagePeerRanging(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageSignificantLocationChange(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageSignificantLocationVisit(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageVehicleSpeed(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageVehicleHeading(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageMicroLocation(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageMotionState(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageStepCountUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessagePedometerEvent(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageMotionActivityUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageActivityAlarm(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageGesture(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageGyroBiasEstimation(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageGmm(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageOnBodyDetection(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageNatalimetryUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageOdometerGpsAvailability(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageOdometerUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageSedentaryTimerAlarm(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageExerciseMinuteUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageWorkoutEvent(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageSwimDataUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageSignificantElevationUpdate(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleRequestLocation(bool, const CLNameValuePair &)
client '%s' subscribing to location desiredAccuracy %.2f distanceFilter %.2f operatingMode %d dynamicAccuracyReductionEnabled %d allowsAlteredAccessoryLocations %d
client '%{public}s' unsubscribing from location
@ClxClient, unsubscribe, %{public}s
void CLDaemonClient::handleRequestRegionMonitoring(bool, const CLNameValuePair &)
starting metric session (LocationMonitorSession) for %s
Adding geographic fence [%s]/%s/%s
Removing geographic fence [%s]/%s/%s
Adding beacon region,%s, options,%d.
Invalid beacon region request [%s]/%s/%s.
Removing beacon fence [%s]/%s/%s.
kCLConnectionMessageRegionsKey
kCLConnectionMessageIdentifierKey
void CLDaemonClient::handleRequestRanging(bool, const CLNameValuePair &)
Client %s is attempting ranging as a proxy service to %s
Ranging any region,%s, requires an entitlement.
Unable to parse ranged region,%d.
Unable to subscribe to ranging.
bool CLDaemonClient::isEntitledForPeerRanging()
WRTT: couldn't get entitlement for Client %s
WRTT: client %s does not have appropriate entitlement to access SPI
void CLDaemonClient::handleRequestPeerRanging(bool, const CLNameValuePair &)
WRTT: daemon client received request,client,%s,subscribe,%{public}d
kCLConnectionMessageRangingPeerInitiatorKey
kCLConnectionMessageRangingPeerTimeoutKey
WRTT: peer %#llX, timeout %lf, len(keyID) %lu
WRTT: client '%s' subscribing to PeerRanging
WRTT: Client '%s' registered for PeerRanging notifications
v8@?0^{CLPeerRangingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?{CLPeerRangingManager=^{CLPeerRangingManagerDelegate}{CLPeerRangeRequest={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}Bd{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}}BBi}^{CLPersistentTimer}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}}4
WRTT: client '%s' unsubscribing from PeerRanging
WRTT: Client '%s' unregistered from PeerRanging notifications
bool CLDaemonClient::isAuthorizedForMotionActivity()
Client %s did not pass entitlement/tcc checks.
bool CLDaemonClient::isAuthorizedForSensorRecorder()
Client %s cannot access sensor recorder, invalid target.
void CLDaemonClient::handleRequestMotionState(bool, const CLNameValuePair &)
Received MotionState request,client,%s,subscribe,%d
void CLDaemonClient::handleRequestMotionActivityUpdate(bool, const CLNameValuePair &)
Received MotionActivityUpdate request,client,%s,subscribe,%d
Cannot subscribe to motion activity updates, motion activity is not available
void CLDaemonClient::handleMessageMotionActivityQuery(std::shared_ptr<CLConnectionMessage>)
query for motion activity was received but motion activity is not available
Programmer error: Wrong parameters were passed!
CLDaemonClient.MotionActivityQuery
void CLDaemonClient::handleRequestActivityAlarm(bool, const CLNameValuePair &)
Activity alarms not available.  Requested alarm will not be listened for.
Primed for activity alarm %d with duration %f (internal id %d)
void CLDaemonClient::handleRequestActivityAlarm(bool, const CLNameValuePair &)_block_invoke
CLDaemonClient got activity alarm callback after destruction... ignoring
Invalidated activity alarm %d with duration %f (internal id %d)
void CLDaemonClient::handleRequestStepCountUpdate(bool, const CLNameValuePair &)
StepCount subscription changed, %s, %d, %p, %d
Cannot subscribe to step count updates, step counting is not available
Cannot subscribe to step count updates as step counting is not enabled
void CLDaemonClient::handleRequestPedometerEvent(bool, const CLNameValuePair &)
PedometerEvent subscription changed, %s, %d, %p, %d
void CLDaemonClient::handleRequestOdometerGpsAvailability(bool, const CLNameValuePair &)
Received OdometerGpsAvailability request,client,%s
void CLDaemonClient::handleRequestOdometerUpdate(bool, const CLNameValuePair &)
Odometer subscription changed, %s, %d, %p, %d
bool CLDaemonClient::isEntitledForSedentaryTimer()
Client %s does not have appropriate entitlement to access Sedentary Timer SPI
bool CLDaemonClient::isEntitledForUserInfoAccess()
Client %s does not have appropriate entitlement to access user info spi
v8@?0^{CLSedentaryTimerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}BiiiiB{shared_ptr<CLSedentaryAlarmRecorderDb>=^{CLSedentaryAlarmRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSedentaryAlarmData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData> >=^{CLActivityRecorderDb<CLSedentaryAlarmData>}^{__shared_weak_count}}BB}d@}4
void CLDaemonClient::handleMessageSedentaryTimerStart(std::shared_ptr<CLConnectionMessage>)
nil dictionary received from client
void CLDaemonClient::handleMessageSedentaryTimerQuery(std::shared_ptr<CLConnectionMessage>)
Error querying sedentary alarm data, %d
void CLDaemonClient::handleRequestSedentaryTimerAlarm(bool, const CLNameValuePair &)
Received SedentaryTimerAlarm request,client,%s,subscribe,%d
void CLDaemonClient::handleMessageSidebandOverride(std::shared_ptr<CLConnectionMessage>)
Invalid message recieved from framework.
void CLDaemonClient::handleMessageMotionStateSim(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageVehicleConnectionMostRecent(std::shared_ptr<CLConnectionMessage>)
Client %s does not have appropriate entitlement to access motion activity spi
v8@?0^{CLVehicleConnectionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@iiiB@{CLVehicleConnection=dd[256c]d}(NotificationData={CLVehicleConnection=dd[256c]d}){unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}}4
void CLDaemonClient::handleMessageVehicleStateMostRecentInVehicle(std::shared_ptr<CLConnectionMessage>)
Client %s does not have access to motion activity spi because the platform is not supported
void CLDaemonClient::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)
query for step count was received but step counts were not available
Error querying step count data
void CLDaemonClient::handleMessageStepCountRecordQuery(std::shared_ptr<CLConnectionMessage>)
CLDaemonClient.StepCountRecordQuery
Error querying pedometer data, %d
void CLDaemonClient::handleMessageStepCountReset(std::shared_ptr<CLConnectionMessage>)
Step count reset failed as it was not available!
void CLDaemonClient::handleMessageStrideCalibrationDump(std::shared_ptr<CLConnectionMessage>)
CLDaemonClient received StrideCalibrationDump request,client,%s
Step counts notifier not available
percentGrade
history
bins
void CLDaemonClient::handleMessageSidebandSensorFusionEnable(std::shared_ptr<CLConnectionMessage>)
[SidebandSensorFusion], Wrong parameters were passed!
[SidebandSensorFusion], Request failed, enabled, %d, snoop, %d, latency, %d, success, %d
void CLDaemonClient::handleRequestGesture(bool, const CLNameValuePair &)
Received Gesture request,client,%s,subscribe,%d
kCLConnectionMessagePriorityKey
Priority not set
Got gesture subscription request, priority = %d, Client = %s
void CLDaemonClient::handleRequestGesture(bool, const CLNameValuePair &)_block_invoke_2
CLDaemonClient got ear gesture callback after destruction... ignoring
v24@?0{?=[16c]i}4
Got gesture unsubscription request, Client = %s
void CLDaemonClient::handleRequestGyroBiasEstimation(bool, const CLNameValuePair &)
CLDaemonClient received GyroBiasEstimation request,client,%s,subscribe,%d
kCLConnectionMessageBuildGYTTKey
isBuildingGYTT not set
CLDaemonClient got gyro bias estimation subscription request,isBuildingGYTT,%d
void CLDaemonClient::handleRequestGyroBiasEstimation(bool, const CLNameValuePair &)_block_invoke_3
Warning: CLDaemonClient got gyro bias callback after destruction... ignoring
CLDaemonClient got gyro bias estimation unsubscription request
void CLDaemonClient::handleRequestGmm(bool, const CLNameValuePair &)
Received GMM request,client,%s,subscribe,%d
bool CLDaemonClient::isEntitledForOnBodyDetection()
Client %s does not have appropriate entitlement to access on body detection SPI
void CLDaemonClient::handleRequestOnBodyDetection(bool, const CLNameValuePair &)
Received OnBodyDetection request,client,%s,subscribe,%d
void CLDaemonClient::handleMessageOnBodyDetectionParams(std::shared_ptr<CLConnectionMessage>)
Wrong parameters were passed!
v8@?0^{CLOnBodyNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB}4
bool CLDaemonClient::isEntitledForNatalimetry()
Client %s does not have appropriate entitlement to access natalimetry SPI
com.apple.locationd.bundle-/System/Library/LocationBundles/MotionCalibration.bundle
bool CLDaemonClient::isNatalimetryCalibrationAuthorized()
Location services are disabled preventing motion calibration.
void CLDaemonClient::handleRequestNatalimetryUpdate(bool, const CLNameValuePair &)
Calorie subscription changed, %s, %d, %p, %d
void CLDaemonClient::handleMessageNatalimetryQuery(std::shared_ptr<CLConnectionMessage>)
CLDaemonClient.NatalimetryQuery
Error querying natalimetry data, %d
void CLDaemonClient::handleMessageNatalimetryGetUserProfile(std::shared_ptr<CLConnectionMessage>)
handleMessageNatalimetryGetUserProfile,profile,%s
void CLDaemonClient::handleMessageNatalimetrySetUserProfile(std::shared_ptr<CLConnectionMessage>)
handleMessageNatalimetrySetUserProfile,profile,%s
Setting calorie session %d %p %p
void CLDaemonClient::handleMessageNatalimetrySetSession(std::shared_ptr<CLConnectionMessage>)
Unable to clear activity when session was not previously set.
Unable to override activity.  Another client has already requested an activity session.
void CLDaemonClient::handleMessageWorkoutStart(std::shared_ptr<CLConnectionMessage>)
Duplicate workout start received, type, %d, sessionId, %s, %p, %p
STARTING workout, type, %lu, sessionId, %s, %p, %p
Unable to start workout, another client has an active workout.
void CLDaemonClient::handleMessageWorkoutStop(std::shared_ptr<CLConnectionMessage>)
No active workouts to stop, type, %lu, sessionId, %s, %p, %p
STOPPING workout, type, %lu, sessionId, %s, %p, %p
void CLDaemonClient::handleRequestWorkoutEvent(bool, const CLNameValuePair &)
WorkoutEvent subscription changed, %s, %d, %p, %d
void CLDaemonClient::handleMessageNatalimetryCalibrationPromptsNeeded(std::shared_ptr<CLConnectionMessage>)
isConnectedToCompanion: %d, promptsNeeded: %ld.
void CLDaemonClient::handleMessageNatalimetryResetCalibration(std::shared_ptr<CLConnectionMessage>)
handleMessageNatalimetryResetCalibration Resetting calibration.
Calibrations were successfully cleared.
void CLDaemonClient::handleMessageNatalimetryResetCalibration(std::shared_ptr<CLConnectionMessage>)_block_invoke
void CLDaemonClient::handleRequestExerciseMinuteUpdate(bool, const CLNameValuePair &)
ExerciseMinute subscription changed, %s, %d, %p, %d
void CLDaemonClient::handleMessageExerciseMinuteQuery(std::shared_ptr<CLConnectionMessage>)
CLDaemonClient.ExerciseMinuteQuery
Error querying exercise minute data, %d
void CLDaemonClient::handleRequestSwimDataUpdate(bool, const CLNameValuePair &)
SwimData subscription changed, %s, %d, %p, %d
Failed to subscribe to swim updates.
void CLDaemonClient::handleMessageSwimDataQuery(std::shared_ptr<CLConnectionMessage>)
Programmer error: Wrong parameters were passed.
CLDaemonClient.SwimNotifierQuery
void CLDaemonClient::handleMessageSwimDataQuery(std::shared_ptr<CLConnectionMessage>)_block_invoke
Query: id, %llu, session, %s, db, %s, Response (numel): %lu
void CLDaemonClient::handleRequestSignificantElevationUpdate(bool, const CLNameValuePair &)
SignificantElevation subscription changed, %s, %d, %p, %d
Failed to subscribe to significant elevation updates.
void CLDaemonClient::handleMessageSignificantElevationDeltaQuery(std::shared_ptr<CLConnectionMessage>)
CLDaemonClient.OdometerNotifier.SignificantElevationDeltaQuery
v8@?0@"CMSignificantElevationSample"4
void CLDaemonClient::handleMessageHasRunMiniCal(std::shared_ptr<CLConnectionMessage>)
bool CLDaemonClient::isEntitledToProvideCatherine()
Client %s does not have appropriate entitlement to access catherine provider SPI
void CLDaemonClient::handleMessageCatherineData(std::shared_ptr<CLConnectionMessage>)
kCLConnectionMessageCatherineDataKey
Packet contains nil catherine data
v8@?0^{CLCatherineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLBodyMetrics=iffffffffif}@B{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}4
bool CLDaemonClient::isEntitledForMiniCal()
Client %s does not have appropriate entitlement to run miniCal
void CLDaemonClient::handleMessageStartMiniCal(std::shared_ptr<CLConnectionMessage>)
v8@?0^{CLSensorCalibrationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary> >={__compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary> >=^{CLAggregateDictionary}}}dddddddddB^{Dispatcher}BBBBBfBdd{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}d@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}iBfdfB{unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController> >={__compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController> >=^{CLSensorTemperatureController}}}d@^{Dispatcher}{CLPowerAssertion=^^?i^v^{__CFString}dd@}{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}}4
v8@?0^{CLSensorRecorderNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=L}}if{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=L}}Ii{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=L}}if{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=L}}Ii{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}@@{vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}{__compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > *, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}}}ddddIIIIBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}}4
void CLDaemonClient::handleMessageSensorRecorderGetMetasByDateRange(std::shared_ptr<CLConnectionMessage>)_block_invoke
(%f, %f), %d records returned
void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)
Allocating mmap buffer.
CLDaemonClient.SensorRecorderAccel
void CLDaemonClient::handleMessageSensorRecorderGetDataByID(std::shared_ptr<CLConnectionMessage>)_block_invoke
Requesting id, %llu, meta id, %llu
void CLDaemonClient::handleMessageSetUrgentCalFlag(std::shared_ptr<CLConnectionMessage>)
void CLDaemonClient::handleMessageCaptureMode(std::shared_ptr<CLConnectionMessage>)
[CaptureMode], Wrong parameters were passed!
v8@?0^{CLFallNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@^{Dispatcher}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}4
kCLConnectionMessageHeadingFilterKey
void CLDaemonClient::handleRequestHeading(bool, const CLNameValuePair &)
client '%s' subscribing to compass filter %.2f
client '%s' unsubscribing from compass
void CLDaemonClient::handleRequestSignificantLocationChange(bool, const CLNameValuePair &)
client '%{public}s' subscribing to significant location change notifications (persistent %{public}d)
client '%s' starting significant location changes
client '%{public}s' unsubscribing from significant location change notifications (persistent %{public}d)
client '%s' stopping significant location changes
void CLDaemonClient::handleRequestSignificantLocationVisit(bool, const CLNameValuePair &)
SLV: Client, %{public}s, subscribe, %{public}d
bool CLDaemonClient::isEntitledForVehicleData()
Client %s does not have appropriate entitlement to access vehicle data SPI
void CLDaemonClient::handleRequestVehicleSpeed(bool, const CLNameValuePair &)
Received VehicleSpeed request,client,%s,subscribe,%d
client '%s' subscribing to vehicle speed
client '%s' unsubscribing from vehicle speed
void CLDaemonClient::handleRequestVehicleHeading(bool, const CLNameValuePair &)
Received VehicleHeading request,client,%s,subscribe,%d
client '%s' subscribing to vehicle heading
client '%s' unsubscribing from vehicle heading
bool CLDaemonClient::isEntitledForMicroLocations()
Client %s does not have appropriate entitlement to access MicroLocation SPI
void CLDaemonClient::handleRequestMicroLocation(bool, const CLNameValuePair &)
Received MicroLocation request,client,%s,subscribe,%d
MicroLocations are not available on this platform. %s
client '%s' subscribing to MicroLocations
client '%s' unsubscribing from MicroLocations
void CLDaemonClient::handleMessageRequestCurrentMicroLocation(std::shared_ptr<CLConnectionMessage>)
Received Current MicroLocation request from client '%s'
void CLDaemonClient::startMicroLocationMode()
Client '%s' not authorized for microlocation notifications
Client '%s' registered for MicroLocation notifications
void CLDaemonClient::stopMicroLocationMode()
Client '%s' unregistered from MicroLocation notifications
CLDC.%p.%s
bool CLDaemonClient::modifySubscription(const char *const, bool)
Client %{public}s (%{public}p) is %{public}ssubscribing to notification %{public}s
void CLDaemonClient::startRanging_nl()
fRegistrationResult != CLClientManager->getClientEffectiveRegistrationResult for %s: %d != %d
client '%s' has an incomplete registration result; not starting ranging yet
missing client '%s' is attempting to start ranging updates
client '%s' not authorized for ranging; not starting yet
Starting ranging for regions,%lu.
There are no regions to range.
void CLDaemonClient::stopRanging_nl()
Stopping ranging.
void CLDaemonClient::startLocation_nl()
client '%{public}s' has an incomplete registration result; not starting location yet
missing client '%s' is attempting to start location updates
client '%{public}s' not authorized for location; not starting yet
Client '%{public}s' paused, not starting location
client '%{public}s' authorized for location; starting now
client '%{public}s' authorized for location; starting now, desiredAccuracy, %{public}.1lf, distanceFilter, %{public}.1lf, operatingMode %{public}d, dynamicAccuracyReductionEnabled %{public}d, allowsAlteredAccessoryLocations %{public}d
@ClxClient, register, %{public}s, accuracy, %{public}.1lf
@WsbReg, DaemonOpportunistic, %{public}s
@WsbReg, DaemonActive, %{public}s
Not registering for location updates for %s; the planets don't align
Not registering for location updates for %s; desiredAccuracy is too high
BATCH: stop because accuracy changed %s
register for notification, %d, %s, desiredAccuracy, %.1f
BATCH: stop because distance filtered %s
starting metric session (LocationUpdateSession) for %s
void CLDaemonClient::startLocation_nl()_block_invoke
received location system state of LocationUpdateSession for %s
void CLDaemonClient::stopLocation_nl()
BATCH: stop because stopping location for %s
void CLDaemonClient::registerForAutopause()
Client %s registered for autopause notifications
'%s' failed to become client of CLAutopauseProvider
void CLDaemonClient::unregisterForAutopause()
PAUSE: Client '%s' unregistered for autopause notifications
PAUSE: Unregistering for autopause notification when client '%s' does not exist
void CLDaemonClient::checkPauseState()
PAUSE: '%s' not a location client (%d), or not authorized (%d).
PAUSE: '%s' overridden to off.
PAUSE: '%s' not allowed to pause.
PAUSE: '%s' not backgrounded right now (%.1f).
PAUSE: now clock %f timestamp %f thresh %f.
PAUSE: client: '%s' type: %ld states: veh %d fit %d oth %d
PAUSE: '%s' not changing state wasPaused: %d lastState: %d now clock: %f timestamp: %f thresh: %f.
PAUSE: %s (%p) changed from %d to %d
PAUSE: Pausing client '%s'
PAUSE: Resuming client '%s' (This should be handled on framework side)
void CLDaemonClient::performProcessAssertion(CLClientProcessAssertionReasons)
initializing process assertion to support background location for client '%s' (pid %u)
Couldn't initialize process assertion for client '%s' (pid %u)!
Client,%s, pid,%u, is performing batch location, allowing idle sleep.
Client,%s, pid,%u, is performing batch without location.
Client,%s, pid,%u, is not performing batch location, preventing task suspend.
void CLDaemonClient::releaseProcessAssertion(CLClientProcessAssertionReasons)
void CLDaemonClient::releaseProcessAssertion(CLClientProcessAssertionReasons)_block_invoke
Releasing process assertion for pid %u
Acquiring
void CLDaemonClient::updateStatusBarAssertion()_block_invoke
Completed async acquire of status bar assertion for %{public}s (PID:%{public}d)
Failed async acquire of status bar assertion for %s (PID:%d)
oldValue == nullptr
void CLDaemonClient::updateStatusBarAssertion()
Creation of status bar assertion failed synchronously for %s (PID:%d)
Acquire Failed
Completing async release of status bar assertion for %{public}s (PID:%{public}d)
For %s (PID:%d)  Background:%s  Started:%s  WhenInUse:%s > Needed:%s  Action:%s
bool CLDaemonClient::mayTakeProcessAssertion()
Allowing process assertion for %s in foreground.
Allowing process assertion for %s because they are in use.
Allowing process assertion for %s due to client manager.
Denying process assertion to %s
void CLDaemonClient::startProactiveCompass()
Scheduling proactive compass start for client '%{public}s' with delay %{public}.2f
void CLDaemonClient::startProactiveCompassForReal()
Starting compass proactively for client '%{public}s'
void CLDaemonClient::startProactiveCompassForReal()_block_invoke
Proactive compass timer fired
void CLDaemonClient::stopProactiveCompass()
Stopped proactive compass timer for client '%{public}s'
Stopped proactive compass for client '%{public}s'
bool CLDaemonClient::isBatching_nl()
bool CLDaemonClient::hasProcessAssertion_nl()
void CLDaemonClient::setBatching_nl(const bool)
BATCH: client, '%s', batchEnabled, %d
UIBackgroundModes
NSData *CLRangingPeerInternal::getSecureRangingKeyID() const
WRTT: No key when retrieving data
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/PeerRanging/CLRangingPeerInternal.h
com.apple.locationd.private_info
com.apple.locationd.prompt_behavior
com.apple.locationd.usage_oracle
com.apple.locationd.emergency_enabler
com.apple.locationd.independence_declarer
com.apple.locationd.region_proxy_service
com.apple.locationd.ranging
com.apple.locationd.peer_ranging
com.apple.locationd.sedentary_timer
com.apple.locationd.userprofile
com.apple.locationd.on_body_detection
com.apple.locationd.natalimetry
com.apple.locationd.catherine_provider
com.apple.locationd.rebuild_gytt
com.apple.locationd.vehicle_data
com.apple.locationd.spectator
CLRangingPeerInternal::CLRangingPeerInternal(uint64_t, NSData *, int)
WRTT: peer without a key
secondaryKey
TileId(
type=
, typeStr=
, corner=(
, tileY=
, tileX=
, skey=
, path=
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLTileId.mm
bool TileId::operator<(const TileId &) const
std::string TileId::getServerFileName() const
TmmFile, name, path, %s, servername, %s
kern_return_t get_serialized_nvp(CLNameValuePair *, cl_property_list_data_t *, mach_msg_type_number_t *)
Could not serialize data
TB,R,N,GisValid
T^{CLBundleLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B},R,N,V_provider
CLBundleLocationProvider::CLBundleLocationProvider(const char *, CLSilo *, CFStringRef, CFStringRef)
#BLP attempting to create bundle location provider with NULL bundle path and NULL bundle identifier
#BLP bundle path does not exist, %{public}s
#BLP no application installed backed by bundle identifier, %{public}s
CLClientRef CLBundleLocationProvider::createClient()
BLP: Need a bundle path or a bundle identifier.
CLClientRef CLBundleLocationProvider::createClient()_block_invoke
BLP: Couldn't create client for bundle path %s
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLBundleLocationProvider.mm
void CLBundleLocationProvider::registerForAppropriateLocationAccuracy()
BLP: Registering with desired accuracy %d (%s)
BLP: Location distance filter is now %.2f (%s)
BLP: Stopping location updates (%s)
BLP: CLBundleLocationProvider does not support spectators (%s)
BLP: Bystander distance filter is now %.2f (%s)
BLP: Stopping bystander location updates (%s)
@WsbReg, bundleId, %{public}s, active, %{public}d, clients, %{public}ld
BLP: starting wifi location batch, bundleId, %s
BLP: stopping wifi location batch, bundleId, %s
virtual bool CLBundleLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)
void CLBundleLocationProvider::handleClientEvent(CLClientRef, CLClientEvent)
Could not get location from location event (%s)
BLP: Could not get authorization status (%s)
LocationCount
CLTypeAuthorizationStatus CLBundleLocationProvider::authorizationStatus()
BLP: Couldn't retrieve authorization status for %s
bool CLBundleLocationProvider::retrieveLocation(CLDaemonLocation *)
BLP: Couldn't retrieve location for %s
bundleIdentifier, %@, bundlePath, %@
B12@?0@"RTLocationOfInterest"4r^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}8
v16@?0@"RTLocationOfInterest"4I8^B12
T@"CLSilo",&,N,V_silo
seedLocationsAtIndex
T@"NSMutableDictionary",&,N,V_seedLocationsAtIndex
wifi_tile_
wifi_tile_([0-9]{7})_([0-9]{7})
WIFI_TILES_DATABASE
static std::string CLWifiTileTableName::getTableName(std::tuple<int, int>)
tile x bound violation
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Network/CLWifiTileDatabase.mm
tile y bound violation
wifi_tile_%07d_%07d
CLWifiTileRepository::CLWifiTileRepository(const std::string &)
not connected to wifi #tile tables database
std::unique_ptr<CLSqliteDatabase> CLWifiTileRepository::openConnection(const CLSqliteDatabase::SqliteProperties &)
bool CLWifiTileRepository::tileExists(const CLWifiTileTableName &) const
bool CLWifiTileRepository::deleteTile(const CLWifiTileTableName &)
int CLWifiTileRepository::countAccessPointsInTile(const CLWifiTileTableName &)
bool CLWifiTileRepository::createTableForTile(const CLWifiTileTableName &)
CL::optional<CLWifiAccessPointInserter> CLWifiTileRepository::accessPointInserter(const CLWifiTileTableName &)
CL::optional<CLWifiTileAccessPointEntry> CLWifiTileRepository::selectAccessPointEntry(const CLWifiTileTableName &, CLMacAddress)
std::vector<CLWifiTileTableName> CLWifiTileRepository::selectAll() const
SELECT NAME FROM sqlite_master WHERE type='table' AND name LIKE 'wifi_tile_%'
MacAddress
AccessPointData
fDatabase && fStatement && fStatement->getStatement()
virtual CLMetsInfo CLNatalieCrossTrainingModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, Cross Training Compendium METS, METS, %f
CLConnectionServer::CLConnectionServer(std::string, dispatch_queue_t, CLConnectionServerConnectHandler, CLConnectionServerDisconnectHandler)
Couldn't create XPC service
void CLConnectionServer::handleEvent(xpc_object_t)
Got error: %s
Unexpected event type %s
XPC_TYPE_CONNECTION
XPC_TYPE_NULL
XPC_TYPE_BOOL
XPC_TYPE_INT64
XPC_TYPE_UINT64
XPC_TYPE_DOUBLE
XPC_TYPE_DATE
XPC_TYPE_DATA
XPC_TYPE_STRING
XPC_TYPE_UUID
XPC_TYPE_FD
XPC_TYPE_SHMEM
XPC_TYPE_ARRAY
XPC_TYPE_DICTIONARY
XPC_TYPE_ERROR
Unknown type
CLFitnessTrackingAllDayAWD
static void CLFitnessTrackingAllDayAWD::create()
Creating instance
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/FitnessTracking/CLFitnessTrackingAllDayAWD.mm
void CLFitnessTrackingAllDayAWD::resetStats()
Clearing stats
void CLFitnessTrackingAllDayAWD::collectStats()
Collecting stats
void CLFitnessTrackingAllDayAWD::incrementWheelchairEMCredit(const CFTimeInterval, const ALCMExerciseMinute_Mode)
Incrementing vulcan exercise minutes -- creditTime:%f exerciseMinuteMode:%d
void CLFitnessTrackingAllDayAWD::incrementWheelchairCalories(const float, const float, const uint32_t, const CLMotionStateMediator_Type::MediatedMotionActivity)
Incrementing vulcan calories -- calories:%f rawMets:%f pushes:%d activityType:%d
void CLFitnessTrackingAllDayAWD::incrementWheelchairPushFailures()
Incrementing vulcan push failures
void CLFitnessTrackingAllDayAWD::incrementExerciseMinutes(const bool)
Incrementing exercise minutes -- onGrade:%d
void CLFitnessTrackingAllDayAWD::incrementMETs(const float, const float)
Incrementing METs -- mets:%f metsFromGrade:%f
void CLFitnessTrackingAllDayAWD::setWheelchairDataCollectionEnabled()
static void CLFitnessTrackingAllDayAWD::handleWheelchairDataCollectionNotification(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)
CLSimulationControllerSilo
T^{CLSimulationController={BasicMutex=^^?^{MutexInfo}}@{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}Bd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{__CFRunLoopTimer}dddddii^{__CFURL}},N,V_controller
SimulationController
SimulatedLocationLatitude
SimulatedLocationLongitude
SimulatedLocationAccuracy
SimulatedLocationType
SimulatedLocationAltitude
SimulatedLocationAltitudeAccuracy
CLSimulationController::CLSimulationController(CLSilo *)
Using simulated location <%+.8f,%+.8f> acc %.2f alt %.1f vacc. %.2f type %d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Simulation/CLSimulationController.mm
void CLSimulationController::startScenarioInternal_nl()
Attempt to start scenario, but no scenario is loaded!
Couldn't set simulation scenario
Couldn't parse simulation scenario data
Locations
Options
Couldn't get locations array for simulation scenario
Applying new simulation scenario with %ld locations
Location %d for simulation scenario is of incorrect format
Location %d for simulation scenario is of incorrect type (%s)
Simulation-Received
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,
LocationDeliveryBehavior
LocationRepeatBehavior
LocationInterval
LocationSpeed
LocationIntermediateDistance
Setting simulation type to %d
Setting repeat behaviour to %d
Setting location interval to %.2f
Setting location speed to %.2f
Setting intermediate distance to %.2f
void CLSimulationController::sendFirstLocation_nl()
fNextLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
Time delta is %.2fs
void CLSimulationController::clearScenario_nl()
void CLSimulationController::startSimulation()
Simulation start request received
void CLSimulationController::stopSimulation()
Simulation stop request received
void CLSimulationController::adjustSimulationType_nl()
void CLSimulationController::setSimulationType(CLSimulationDaemonCommLocationSimulationType)
Simulation type changed from %d to %d
void CLSimulationController::setRepeatBehavior(CLSimulationDaemonCommLocationRepeatBehavior)
Repeat behaviour changed from %d to %d
void CLSimulationController::addPendingLocationsInternal_nl(const std::list<CLDaemonLocation> &)
void CLSimulationController::setIntermediateLocationDistance(const double &)
Intermediate distance changed from %.2f to %.2f
void CLSimulationController::setLocationInterval(const CFTimeInterval &)
Interval changed from %.2f to %.2f
void CLSimulationController::setTravellingSpeed(const double &)
Travelling speed changed from %.2f to %.2f
double CLSimulationController::getCurrentSpeed_nl()
double CLSimulationController::getEffectiveNotificationInterval_nl()
interval = %.2f, fNextLocation.timestamp = %.2f, time = %.2f
bool CLSimulationController::isInterpolationEnabled_nl()
void CLSimulationController::clearPendingLocationsInternal_nl(bool)
Clearing all pending locations and settings
void CLSimulationController::prepareNextLocation_nl()
Preparing next location
No more pending locations
void CLSimulationController::handleNoMoreLocations_nl()
Scheduling send of location unavailable notification
void CLSimulationController::handleNoMoreLocations_nl()_block_invoke
Sending appropriate location unavailable notification
Repeat location behavior selected; repeating last location
Looping repeat behavior selected; starting scenario again
void CLSimulationController::sendNextLocation()
Simulation is not running
Nowhere to go; not preparing next location
Adjusting next location timestamp (%.2f) forward by %.2fs
snl: fNextLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
snl: fCurrentLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
snl: speed is %.2f, timeElapsed = %.2f
distance is %.2f
Reached location <%+.8f,%+.8f>, preparing next
Next location is <%+.8f,%+.8f>
Propogating <%+.8f,%+.8f> acc %.2f for %.2f seconds at %.2f m/s course %.2f
Notify location is %+.8f,%+.8f (speed %.2f, course %.2f, timestamp %.2f)
Notifying in %.2f seconds
void CLSimulationController::notifySimulatedLocation_nl(const CLDaemonLocation &)
Unknown simulation type %d
No location provider found for <%+.8f,%+.8f> acc %.2f timestamp %.2f type %d
Sent simulated location to provider %p
CLMotionSyncStoreCompanion::CLMotionSyncStoreCompanion(CLSilo *)
CLMotionSyncStoreCompanion::CLMotionSyncStoreCompanion(CLSilo *)_block_invoke
Timer fired on companion,currentMotionCalsVersion,%d
user
void CLMotionSyncStoreCompanion::onPalUpdateNotification(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)
void CLMotionSyncStoreCompanion::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
void CLMotionSyncStoreCompanion::sendMotionCalsToWatch()
Companion sent calibrations to watch: %s
virtual void CLMotionSyncStoreCompanion::deviceUnlocked()
void CLMotionSyncStoreCompanion::restoreBackupMotionCals()
Clearing a stale vo2max of 0 value.
Loaded Motion Cals from backup: fMotionCals, %s, current version, %d
No motion cal backup file was found at path: %s. Restore PAL.
void CLMotionSyncStoreCompanion::doRestoreBackupMotionCals(const CLMotionSyncStoreCompanion::EDeviceUnlocked *)
void CLMotionSyncStoreCompanion::doConnected(const CLMotionSyncStoreCompanion::EWatchConnected *)
quickswitch protocol %d
void CLMotionSyncStoreCompanion::doUpdatePAL(const CLMotionSyncStoreCompanion::EPalUpdated *)
PAL is updated from %f to %f
PAL not loaded or changed.
void CLMotionSyncStoreCompanion::doRestoreBackupArbitrate(const CLMotionSyncStoreCompanion::EDeviceUnlocked *)
void CLMotionSyncStoreCompanion::doBufferMotionCalsFromWatch(const CLMotionSyncStoreCompanion::ECalibrationFromWatch *)
void CLMotionSyncStoreCompanion::doDisconnected(const CLMotionSyncStoreCompanion::EWatchDisconnected *)
void CLMotionSyncStoreCompanion::doArbitrateMotionCals(const CLMotionSyncStoreCompanion::ECalibrationFromWatch *)
void CLMotionSyncStoreCompanion::restoreBackupPal()
Loaded Motion Cals from PAL: fMotionCals, %s, current version, %d.
void CLMotionSyncStoreCompanion::persistCachedValues()
Asked to persist Motion Cals, current version, %d, isDeviceCurrentlyUnlocked, %d
Companion did not persist Motion Cals, waiting until next unlock, current version, %d, isDeviceCurrentlyUnlocked, %d
Companion persisted calibrations to disk, fMotionCals = %s
virtual void CLMotionSyncStoreCompanion::receiveMotionCals(NSDictionary *)
Companion received calibrations from watch: %s
void CLMotionSyncStoreCompanion::clearMotionCalibrations()
Failed to retreive default stride bins.
CLMotionSyncStoreCompanion::ArbitrateResult CLMotionSyncStoreCompanion::arbitrateMotionCals(NSDictionary *, NSDictionary *) const
Buffered: version, %d, UDID, %s, timestamp, %lf, Current: version, %d, UDID, %s, timestamp, %lf, result, %d
void CLMotionSyncStoreCompanion::scheduleFastSendToWatch()
user.plist
RunModelMetsScale
RunVMThreshold
virtual float CLNatalieRunModel::computeWorkRateMETS(const CLNatalieModelInput &)
Run Linear Regression, WorkRate, %f, distance(m), %f, duration(s), %f, mets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f
Run Grade correction applied, Grade type, %d, vertical speed %f, interval %f, workrate %f, mets %f, mets + grade %f, percent grade %f
Run Model, energy, %.1f,mets from intensity, %.1f
-[CLStepDistanceEstimator updateEntryDistanceAndPace:]
Step count went backwards (%u -> %u). locationd starting? Motion Co-processor reboot?
lastEntry.timestamp,%f,entry.timestamp,%f,incrementalStep,%u,rawDistance,%f,calibratedDistance,%f,calibratedPace,%f,totalCalibratedDistance,%f,kvalue,%f,calibratedSpeedMph,%f,sigma,%f,lowerBound,%f,upperBound,%f
CLBluetoothServiceSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLBluetoothService.mm
-[CLBluetoothServiceAdapter beginService]
CLBluetoothService
CLBluetoothService::CLBluetoothService(CLSilo *)
virtual void CLBluetoothService::notifyClientsWithData(const CLBluetoothService_Type::Notification &, const CLBluetoothService_Type::NotificationData &, bool, int, bool)
virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::listClients() [Notification_T = CLBluetoothService_Type::Notification, NotificationData_T = CLBluetoothService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
harvests
-[CRPoiCollectionRequest writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRPoiCollectionRequest.m
T@"NSMutableArray",&,N,V_harvests
%@,<startDate %@ endDate %@ steps %@ distance %@ floorsAscended %@ floorsDescended %@ currentPace %@ currentCadence %@ averageActivePace %@>
numberOfPushes
currentPace
currentCadence
averageActivePace
Pause
Resume
%@,<eventDate, %@, eventType, %@>
date
T@"NSDate",R,N,VfDate
Ti,R,N,VfType
kCMPedometerDataCodingKeyStartDate
kCMPedometerDataCodingKeyEndDate
kCMPedometerDataCodingKeyNumberOfSteps
kCMPedometerDataCodingKeyDistance
kCMPedometerDataCodingKeyFloorAscended
kCMPedometerDataCodingKeyFloorDescended
kCMPedometerDataCodingKeyRecordId
kCMPedometerDataCodingKeyPace
kCMPedometerDataCodingKeyCurrentCadence
kCMPedometerDataCodingKeyActiveTime
kCMPedometerDatacodingKeyUUID
kCMPedometerDataCodingKeyIsOdometerDistance
kCMPedometerDataCodingKeyIsOdometerPace
kCMPedometerDataCodingKeyNumberOfPushes
kCMPedometerDataCodingKeyWorkoutType
kCMPedometerEventKeyEventDate
kCMPedometerEventKeyEventType
CLSensorFusion9AxisMekf::CLSensorFusion9AxisMekf(const CFTimeInterval &, const CFTimeInterval &, const CFTimeInterval &, bool)
rotBufferSize9, %zu, accelBufferSize, %zuu, peakCount, %d, compassBufferSize, %zu
gyroDt9, %.4f, doAccelCheck, %d
virtual void CLSensorFusion9AxisMekf::reset()
fAccelBuffer,size,%zu
virtual void CLSensorFusion9AxisMekf::feedGyroData(const double &, const double &, const double &, const CFTimeInterval &)
omegaMag9, %.3f, omega, %.3f, %.3f, %.3f
[AppleQuaternion9] x,%f,y,%f,z,%f,w,%f,timestamp,%f
virtual void CLSensorFusion9AxisMekf::feedGyroBias(const CLMotionTypeRotationRate &, const CLMotionTypeVector3 &)
virtual void CLSensorFusion9AxisMekf::feedAccelerometerData(const double &, const double &, const double &, const CFTimeInterval &)
[Accelerometer9] x,%f,y,%f,z,%f,timestamp,%lf
[RotationRate9] %.3f, %.3f, %.3f, %.3f
[KalmanFilterStates9] %f,%f,%f,%f,%f,%f,%f
void CLSensorFusion9AxisMekf::doAccelerometerMeasurementUpdate(double *, double)
[KalmanFilterStates9-AccelUpdate] %f,%f,%f,%f,%f,%f,%f
virtual bool CLSensorFusion9AxisMekf::feedCompassData(const CLMotionTypeCompass &, const bool &, const bool &, const CFTimeInterval &)
[CompassIntoKF] timestamp,%f,calibration level %d, compassHasAlignedToStableField %d, useMagneticRefX %d
[CompassIntoKF] fLastAccelTime,%f
[CompassIntoKF] magneticFieldAdjusted!
rotAroundGrav, %.3f, sum, %.3f
[CompassIntoKF] omegaMag, %.3f, omegaVar, %.3f
FieldDiff, %.3f, %.3f, %.3f, %.3f
Aborted yawUpdate.
Checking again for magField. checkcount, %d
fCorrected, %.3f, %.3f, %.3f
[!!!CompassInertialReference] x,%f,y,%f,z,%f,calibrationLevel,%d,timestamp,%lf
Warning: Compass outputs field magnitude 0.
[!!!CompassInertialReference] x,%f,y,%f,z,%f
UpdatingYaw!
[Magnetometer9] x,%f,y,%f,z,%f,timestamp,%lf
Warning: Hey! Compass outputs field magnitude 0.
float CLSensorFusion9AxisMekf::doCompassMeasurementUpdate(double *, double, int, bool)
[ExpectedCompass] %f,%f,%f,%f
[TrueCompass] %f,%f,%f,%d,%f
[MagCCross] %f,%f,%f,%f,%f,%f,%f,%f,%f,%f
[MagCorrectionDX] %f,%f,%f,angle,%.3f,sumRot,%.3f,%f
static void CLMotionCoprocessorInterface::create(bool)
OscarEmulation,%d
LogOnBody
CLOnBodyNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/OnBody/CLOnBodyNotifier.mm
-[CLOnBodyNotifierAdapter beginService]
CLOnBodyNotifier
virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLOnBodyNotifier_Type::Notification, NotificationData_T = CLOnBodyNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
com.apple.CoreLocation.ConnectionClient.%p
com.apple.CoreLocation.ConnectionClient.%p.events
static void CLConnectionClient::handleDaemonStart(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)
received daemon start notification for service %s
void CLConnectionClient::createConnection_onQueue()
Creating connection
void CLConnectionClient::destroyConnection_onQueue()
Destroying connection
void CLConnectionClient::sendCachedMessages_onQueue()
Sending cached messages to daemon
No cached registration message
bool CLDualModeKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &)
KF:Attempting update,%d,%.8f,%.8f,hunc,%.1f,conf,%d
KF:Single AP: Dual input rejection of %.7f %.7f
KF:input should not be rejected after a hard reset
airTravelMode,ltn
KF:Dual rejection of %d, %.7f %.7f, blunder detected
intervalOfInterest,ltn
KF:longTermStatic should not fail if longTermNormal succeeded
unexpected,ltn
staticAssumed,lts
notStatic,ltn
bool CLDualModeKalmanFilter::debugPrint(const CLDaemonLocation &, const CLDaemonLocation &, const char *)
KF:Dual,%.3f,%d,%d,%d,%.8f,%.8f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%s
KF:calcTPTQ failed
KF:calc_dNdE failed
KF:boundLatitude failed
KF:boundLongitude failed
bool CLKalmanFilter::updateMotion(const CFAbsoluteTime &, const CLMotionActivity::Type &, const CLMotionActivity::Confidence &)
KF:updateMotion failed unexpectedly
KF:Prediction failed
propagation for motion
KF:re-init,uncertainty growth>%.0lf
motion update
activeCellUpdate complete
bool CLKalmanFilter::zupt()
KF:ZUPT failed
KF:ZUPT innovation update failed
KF:updateP failed
zupt, vn update
ZUPT, ve update
bool CLKalmanFilter::update(const CLDaemonLocation &, CLDaemonLocation &, bool &, bool)
KF:Cannot update KF with <0.0,0.0> position
KF:input horizontal accuracy == 0. Using horizontalAccuracy = 9999000.0 m
KF:P is not dimensioned
KF:x is not dimensioned
KF:input horizontalAccuracy < 0
lts rejected by distance check
KF:too many consecutive update rejections,KF reset
KF:update with same cell location ignored
KF:increment num rejections by half
KF:re-init,dT>%.0lf
KF: non-GPS within %.1f of GPS, ignoring.
KF:diverged compared to med/high conf WiFi, resetting.
KF:seedTheFilter failed
prediction
KF:Transition from coarse GPS to WiFi detected. Position uncertainty bumped to %.1f m
KF:computePht_and_hPht failed
KF:sigma2_v <= 0
KF:diverged,%.3lf,reseeding,inputType,%d,latitude flagged,%.1lf
KF:reseed,type,%d,%.8lf,%.8lf,%.3lf,hunc,%.3lf,vunc,%.3lf,conf,%d
KF:lts,%.3lf,inputType,%d,latitude rejected,%.1lf
KF:ltn,%.3lf,inputType,%d,latitude rejected,%.1lf
KF:Input is not consistent with prior input. Filter reseeding.
KF:lat innovation update failed
lat update
KF:sanityTestP failed
KF:diverged,%.3lf,reseeding,inputType,%d,longitude flagged,%.1lf
KF:lts,%.3lf,inputType,%d,longitude rejected,%.1lf
KF:ltn,%.3lf,inputType,%d,longitude rejected,%.1lf
KF:lon innovation update failed
lon update
KF:lts,%.3lf,inputType,%d,velocity north rejected,%.1lf
KF:ltn,%.3lf,inputType,%d,velocity north rejected,%.1lf
KF:vn innovation update failed
vn update
KF:lts,%.3lf,inputType,%d,velocity east rejected,%.1lf
KF:ltn,%.3lf,inputType,%d,velocity east rejected,%.1lf
KF:ve innovation update failed
ve update
Applying uncertainty floor to stop averaging
KF:Not applying the uncertainty floor.
KF:lts,%.3lf,inputType,%d,altitude rejected,singleAP fix rejected,%.1lf
KF:ltn,%.3lf,inputType,%d,altitude rejected,singleAP fix rejected,%.1lf
KF:getResult failed
KF:Filter corrobarated by type,rejects now allowed
KF:Filter corrobarated by position,rejects now allowed
bool CLKalmanFilter::areRejectedLocationsConsistentAndIndependent()
KF:rejected cell and wifi locations are consistent,filter should reset
KF:rejected cell and coarse-gps locations are consistent,filter should reset
KF:rejected wifi and coarse-gps locations are consistent,filter should reset
bool CLKalmanFilter::sanityTestP()
KF:diagonal element of P < 0
bool CLKalmanFilter::getResult(CLDaemonLocation &, bool)
bool CLKalmanFilter::applyInnovation(const double &, const std::vector<double> &, const double &, const double &, std::vector<double> &)
KF:dN == 0
KF:x is not dimensioned, innovation not applied
KF:k is not dimensioned, innovation not applied
bool CLKalmanFilter::boundLatitude(double &)
KF:latitude, %.7f rads, is out of bounds
bool CLKalmanFilter::boundLongitude(double &)
KF:longitude, %.7f rads, is out of bounds
bool CLKalmanFilter::seedTheFilter(CLDaemonLocation &)
KF:init P failed
init
bool CLKalmanFilter::computePht_and_hPht(const std::vector<double> &, const unsigned int &, std::vector<double> &, double &)
KF:Pht is not dimensioned
KF:h_index exceeds bounds
bool CLKalmanFilter::updateP(std::vector<double> &, std::vector<double> &, const unsigned int &)
KF:k is not dimensioned
bool CLKalmanFilter::initP(std::vector<double> &, const double &, const double &)
KF:hunc == 0
KF:speedUnc == 0
P was not dimensioned
bool CLKalmanFilter::setQ(const bool &, std::vector<double> &, const CLKalmanFilter::KalmanTuningInfo &, const double &)
KF:dT < 0
KF:tuning invalid
KF:Q was not dimensioned
KF:tuning invalid, beta == 0
bool CLKalmanFilter::predictAhead(const CFAbsoluteTime &)
KF:fKalman.dN == 0.0 || fKalman.dE == 0.0
bool CLKalmanFilter::calcTPTQ(const double &, const bool &, std::vector<double> &, std::vector<double> &, const CLKalmanFilter::KalmanTuningInfo &, double &, double &)
Q is not dimensioned
KF:beta is zero
KF:setQ failed
KF:P is not symmetric
static bool CLKalmanFilter::isLocationTypeNotFiltered(CLLocationType)
unsupported location type, type=%d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLKalmanFilter.cpp
bool CLKalmanFilter::debugPrint(const char *, double)
%%1:KF:,2:lts-or-ltn,3:timestamp(s),4:inType,5:outType,6:motionState,7:latitude(deg),8:longitude(deg),9:altitude(m),10:speed(km/hr),11:course(deg),12:hunc(m),13:vunc(m),14:sunc(m/s),15:cunc(deg),16:v_standardized^2
KF:,lts,%.3f,%d,%d,%d,%.8f,%.8f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%s
KF:,ltn,%.3f,%d,%d,%d,%.8f,%.8f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%s
com.apple.store.Jolly
Fence, 
, refFrame, 
, distance, 
, eFistance, 
, lStatus, 
, lDown, 
, time, 
, ctime, 
, flags, 
double CLFenceManager_Type::CombinedFence::distanceTo(double, double) const
Fence: why is this used?, %s, %lf
bool CLFenceManager_Type::CombinedFence::removeFence(const std::string &, const std::string &, const std::string &)
Fence: fence, %s, became empty
southwestLatitude
southwestLongitude
deltaLatitude
deltaLongitude
minimum_altitude
maximum_altitude
expiration_age
accessTimestamp
gizmoTimestamp
numberOfInputPoints
com.apple.locationd.vehicle.exit
void CLMotionStateObserverWatch::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
Unhandled notification %d.
void CLMotionStateObserverWatch::stopSessionAndTimer()
Disabling update timer.
void CLMotionStateObserverWatch::sendSessionUpdate()
Sending session update.
clientKey
authMask
clearClient
operationType
-[CLCompanionSyncAuthObject writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/SyncObjects/CLCompanionSyncAuthObject.m
nil != self->_clientKey
T@"NSString",&,N,V_clientKey
hasAuthMask
TI,N,V_authMask
hasClearClient
TB,N,V_clearClient
hasNotification
Ti,N,V_notification
Ti,N,V_operationType
RESET
UPDATE
DELETE
CLPressureCalibrationDatabaseSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Motion/SensorCalibration/CLPressureCalibrationDatabase.mm
-[CLPressureCalibrationDatabaseAdapter beginService]
CLPressureCalibrationDatabase
PressureCalibration
virtual bool CLPressureCalibrationDatabase::registerForNotificationInternal(const CLPressureCalibrationDatabase_Type::Notification &)
virtual bool CLPressureCalibrationDatabase::unregisterForNotificationInternal(const CLPressureCalibrationDatabase_Type::Notification &)
virtual void CLPressureCalibrationDatabase::startCalibration(bool)
Starting pressure calibration, user initiated, %d
Pressure dispatcher was expected to be null.
virtual void CLPressureCalibrationDatabase::beginRun(bool)
virtual void CLPressureCalibrationDatabase::endRun()
temperatureOffsetCoefficient,%f,medianAbsoluteDeviation,%f,minTemp,%d,maxTemp,%d,valid,%d
virtual void CLPressureCalibrationDatabase::teardown()
Stopped pressure calibration
SELECT Round, TemperatureOffsetCoefficient, MedianAbsoluteDeviation FROM PressureCalibration WHERE Round IN (SELECT DISTINCT Round FROM PressureCalibration ORDER BY Round DESC LIMIT ?) ORDER BY Round
void CLPressureCalibrationDatabase::loadFromDatabase()
static void CLPressureCalibrationDatabase::readFactoryData(CLMotionTypePressureBiasFit &)
Cannot get PRTT property
PRTT version (%u) does not match expected versions (%u, %u)
factory calibrated temperature from syscfg: %f
Warning: factory calibrated temperature (%f) is not within acceptable bounds: [%f, %f], using default: %f
Warning: using default factory calibrated temperature: %f
DELETE FROM PressureCalibration WHERE Round <= ?
TemperatureOffsetCoefficient
MedianAbsoluteDeviation
void CLPressureCalibrationDatabase::updatePoints(int)
static bool CLPressureCalibrationDatabase::computeMedianTemperatureOffsetCoefficient(const std::vector<TemperatureOffsetCoefficientRound>, CLMotionTypePressureBiasFit &)
size of tco list (%lu) is less than minimum (%d) required for median computation
void CLPressureCalibrationDatabase::computeTemperatureOffsetCoefficientDrift(const std::vector<TemperatureOffsetCoefficientRound>)
TocMedian,%f,TocDrift,%f,TocDriftMAD,%f,TocCount,%u
void CLPressureCalibrationDatabase::onPressureData(const CLPressure::Sample *)
pressure,%f,temperature,%f,timestamp,%f
pressure-offset-calibration
virtual void CLMotionNotifier::SiloDispatcher<CLPressure::Sample>::dispatchData(int, const void *, size_t) [T = CLPressure::Sample]
getMedianInPlace
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMPressureUtilities.h
size > 0
virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::listClients() [Notification_T = CLPressureCalibrationDatabase_Type::Notification, NotificationData_T = CLPressureCalibrationDatabase_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLCapabilityMonitorSilo
-[CLCapabilityMonitor setSupervised:]
supervised capability changed from, %d, to, %d
v16@?0@"ACAccount"4I8^B12
v12@?0@"ACAccountType"4@"NSError"8
-[CLCapabilityMonitor setICloudManagedAppleID:]
iCloud managed apple ID capability changed from, %d, to, %d
com.apple.education
v16@?0@"MCPayload"4I8^B12
-[CLCapabilityMonitor setInstalledEducationProfile:]
installed education profile capability changed from, %d, to, %d
-[CLCapabilityMonitor setITunesManagedAppleID:]
iTunes managed apple ID capability changed from, %d, to, %d
-[CLCapabilityMonitor onDarwinNotification:data:]
CLNONEDU
CLSupervised
CLNonSupervised
CLInstalledProfileEducation
CLNonManagedAppleID
v12@?0@"<CLCapabilityMonitorClientProtocol>"4^B8
supervised
TB,N,V_supervised
iCloudManagedAppleID
TB,N,V_iCloudManagedAppleID
iTunesManagedAppleID
TB,N,V_iTunesManagedAppleID
installedEducationProfile
TB,N,V_installedEducationProfile
mobileGestaltAnswersCache
T@"NSMutableDictionary",&,N,V_mobileGestaltAnswersCache
capabilityChangeClients
T@"NSMutableSet",&,N,V_capabilityChangeClients
EnableAlwaysOnActivityContext
CLLocationFilterController::CLLocationFilterController(CLSilo *)
registered for kNotificationContext
registered for kNotificationContextSpectator
geoaccess
MapMatchingGeometryType
CLMM,MapMatchingGeometryType,%s
CLMM, PlatformSupportsMapMatching, %d
OBM,fPlatformSupportsOutdoorMatching,%d
EnableNMEAMapMatching
CLMM, EnableNMEAMapMatching, %d
EnableVerboseMapMatching
CLMM, EnableVerboseMapMatching, %d
ObmVerboseLogging
PLOS, ObmVerboseLogging, %d
MapMatchingNetworkUsageThermalLevelHighThreshold
CLMM, MapMatchingNetworkUsageThermalLevelHighThreshold, %d
MapMatchingNetworkUsageThermalLevelLowThreshold
CLMM, MapMatchingNetworkUsageThermalLevelLowThreshold, %d
void CLLocationFilterController::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)
unexpected kNotificationMovementCoarse
Unhandled case
Going to sleep. Not providing motion state, %d, to the location KF
CLMM, MotionState,type,%d,confidence,%d,mountedState,%d,mountedConfidence,%d
OBM, MotionState,type,%d,confidence,%d,mountedState,%d,mountedConfidence,%d
Unknown notification %d
void CLLocationFilterController::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
device entering sleep - no longer has active cell
device wake - checking for corresponding sleep
wake detected with no prior sleep known, sending unknown motion to location KF at time, %.3lf
void CLLocationFilterController::onSignalEnvironmentNotification(int, const CLSignalEnvironmentProvider_Type::Notification &, const CLSignalEnvironmentProvider_Type::NotificationData &)
void CLLocationFilterController::MapMatcherNetworkUsage::log() const
CLMM,AllowNetworkUsage,%d,batterySaverMode,%d,thermalVoteToAllow,%d,signalEnv,%d,isMapsForeground,%d
static void CLWifiFenceCalculator::initStaticGlobals()
FenceCal: init globals
WifiFenceCalculatorDebug
FenceCal: WifiFenceCalculatorDebug =%d
WifiFenceCalculatorDebugVerbose
FenceCal: WifiFenceCalculatorDebugVerbose =%d
WifiFenceCalculatorMinNumAPs
FenceCal: WifiFenceCalculatorMinNumAPs =%d
WifiFenceCalculatorSTDFactorMeters
FenceCal: WifiFenceCalculatorSTDFactorMeters = %5.1lf
WifiFenceCalculatorRadiusFactor
FenceCal: WifiFenceCalculatorRadiusFactor = %5.1lf
WifiFenceCalculatorMaxFenceRadius
FenceCal: WifiFenceCalculatorMaxFenceRadius = %5.1lf
WifiFenceCalculatorMaxChosenAPs
FenceCal: WifiFenceCalculatorMaxChosenAPs = %d
WifiFenceCalculatorMaxApsPerTileFactor
FenceCal: WifiFenceCalculatorMaxApsPerTileFactor = %lf
WifiFenceCalculatorSignificantScoreUpdateThresh
FenceCal: WifiFenceCalculatorSignificantScoreUpdateThresh = %lf
WifiFenceCalculatorGroupWeightForExit
FenceCal: WifiFenceCalculatorGroupWeightForExit = %d
WifiFenceCalculatorMinApsPerFence
FenceCal: WifiFenceCalculatorMinApsPerFence = %d
WifiFenceCalculatorDefaultMaxChannelSetSize
FenceCal: WifiFenceCalculatorDefaultMaxChannelSetSize = %d
WifiFenceCalculatorDefaultChannelFilter
FenceCal: WifiFenceCalculatorDefaultChannelFilter = %d
WifiFenceCalculatorAPsScoreFilter
FenceCal: WifiFenceCalculatorAPsScoreFilter = %d
FenceCal: gBlackListedAP = %s
FenceCal: init globals - done
CLWifiFenceCalculator::CLWifiFenceCalculator(unsigned int, int)
FenceCal: fMaxChannelSetSize, %d, kMaxChannel, %d, fChannelFilter, 0x%X, fDefaultChannelFilter, 0x%X
bool CLWifiFenceCalculator::calculateScore(CLWifiFenceCalculator::Score &)
bad CLStandardNormalDistribution(%lf) = %lf
bool CLWifiFenceCalculator::addScore()
FenceCal: Adding score, fence, %20s, score, %.8lf, min, %.8lf, avg, %.8lf, max, %.8lf, scores, %lu, aps, %zu
fChosenAPs is empty
bool CLWifiFenceCalculator::calculate(CLWifiAccessPointLocationService &, const CLFenceManager_Type::Fence &, bool, bool)
FenceCal: start calculate fence, %-24s, C, center, %.8lf, %.8lf, radius, %.8lf, isMonitorForExit, %d
FenceCal: isExit, %d, fRadiusFactor, %.1lf, fenceRadius, %.1lf
FenceCal: really bad fence, %s
FenceCal: limit ePNO fence size, fence, %s, fMaxRadius, %.1lf
calculate
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLWifiFenceCalculator.mm
dTileLon > 0.0
Invalid fence name, %s, latitude, %lf, longitude, %lf, radius, %lf
FenceCal: tile, y, %d, x, %d, index, %d, distanceFromCenter, %5.5lf, maxApsPerTile, %d, ApsFactor, %.5lf
FenceCal: fetch APs start
FenceCal: fetched, %ld, APs, forceFetchingExpectedAps, %d
FenceCal: expectedAp, %s
FenceCal: Where did you come from : %s
FenceCal: ap2Tile, %s, maxApsPerTile, %2d, left, %4d, top, %4d, tile, %4d, mac, %-24s, numAPs %4zu
FenceCal: calTile, %2zu : %3d / %3zu, %.8lf, %.8lf, FF0000FF
FenceCal: end calculate fence, %-24s, C, center, %.8lf, %.8lf, radius, %.8lf, isMonitorForExit, %d
static bool CLWifiFenceCalculator::addAPToOutput(const CLWifiAPLocation &, bool, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const std::map<CLMacAddress, CLWifiAPLocation> &, unsigned int, const char *)
FenceCal: ignore black listed AP, %s
FenceCal: avoid adding moving AP as an exit AP, %s
FenceCal: adding non-2GHz, reason: %s, %s
FenceCal: reason, %s, no budget / channel for, currentCount, %zu, apsBudget, %u, channelFilter, 0x%08x, isAddChannel, %d, isBlacklisted, %d, apLocation, %s
FenceCal: Adding AP, reason, %s, channelFilter, 0x%08x, isExit, %d, currentCount, %zu, apsBudget, %u , mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, added, %d
static unsigned int CLWifiFenceCalculator::calculateChannelHistogram(const std::vector<CLWifiFenceCalculator> &, ChannelHistogram &)
FenceCal: isAddChannel, %d, maxChannelSetSize, %d, totalAps, %.0lf, channelHistogram, sorted, channel, %2d, weight, %.3lf
FenceCal: addedChannels, %d, channelFilter, 0x%08x, totalWeight, %.3lf
bool CLWifiFenceCalculator::calculateGroup(CLWifiAccessPointLocationService &, std::vector<CLWifiFenceCalculator> &, const unsigned int, const std::vector<CLWifiService_Type::AccessPoint> &, CL::optional<CLWifiService_Type::AccessPoint>, std::map<CLMacAddress, CLWifiAPLocation> &, std::map<CLMacAddress, CLWifiAPLocation> &, const CLDaemonLocation &, double)
FenceCal: calculateGroup, start, group size, %zu, apsBudget, %u, currentlySeen, %zu, minScoreThresh, %.4lf
FenceCal: calculateGroupLocation, %s
FenceCal: channelFilter, 0x%08X,countNumOfSetBits,%d
associated
FenceCal: CurrentlySeen, %2d, %2lu, known, %2d, reached, %2u, %2d, isUseAP, %d, channels, %d, %s
CurrentlySeen
FenceCal: before Blacklist, apLocation, %s
FenceCal: Blacklist, distanceToExpectedApLocation, %.1lf, distanceToFenceCenter, %.1lf
FenceCal: after Blacklist, apLocation, %s
FenceCal: Blacklist, fence, %s, result.fChosenAPs, %lu, isExit, %d
FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, score, %+.4lf, newScore, %+.4lf, minScoreThresh, %+.4lf, totalChosenAps, %d, apsBudget, %d
FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, upgrading score from, %.4lf, to, %.4lf, from, %4zu, to, %4zu, APs, index, %2d, totalChosenAps, %d, apsBudget, %d
FenceCal: fence, %s, score too close, currentScore, %lf, newScore, %lf, significantUpdateThresh, %lf, updating next step to, %d
FenceCal: passNum, %d, commitedAPs, %d, totalChosenAps, %d, numOfAps, %zu
FenceCal: group result, %30s, totalChosenAps, %4d, apsBudget, %4d, index, %4zu , %4zu, aps, %4zu, %4zu, score, %.2lf, index, %4d, dbgCounter, %4d
FenceCal: group result, %30s, can't be monitored
FenceCal: no score for, %s, fChosenAps, %4zu
FenceCal: chosenScore, %-16s, fChosenScoreIndex, %4d, numOfAps, %4zu, %4zu, score, %.2lf
FenceCal: topping, %zu, apsBudget, %u
FenceCal: Topping, %s, fChosenScoreIndex, %d, total, %zu
FenceCal: topping, from APs, %zu, to APs, %zu
FenceCal: finised topping, %zu, apsBudget, %u
FenceCal: fence, %s, isExit, %d, fChosenScoreIndex, %d, fChosenAPs, %zu, fChosenAPsScores, %zu, canBeMonitored, %d, canBeMonitoredInGroup, %d, numOfExitFences, %u
FenceCal: calculateGroup, end, return val, isOK, %d, numOfFences, %zu, numOfExitFences, %d, combinedCanMonitor, %d, combinedCanMonitorGroup, %d, combinedCanMonitorExitGroup, %d
Return entry AP, index, %2zu, %2zu, %s
Return exit AP, index, %2zu, %2zu, %s
static bool CLWifiFenceCalculator::removeFenceFromCombinedList(CLFenceManager_Type::CombinedFencesList &, const std::string &, const std::string &)
Fence: remove %s/%s from %s, remaining fences, %lu
Fence: kill combinedFence, %s, remaining fences, %lu
static bool CLWifiFenceCalculator::addFenceToCombinedList(CLFenceManager_Type::CombinedFencesList &, const CLFenceManager_Type::Fence &, bool)
FenceCal: combining fence, %s
FenceCal: combine fine fence, distance, %.1lf, %s
FenceCal: combine large fences, distance, %.1lf, %s
FenceCal: combine non-fine non-large fence, distance, %.1lf, %s
FenceCal: do not combine combine fence, distance, %.1lf
FenceCal: creating a new combined fence for, %s
FenceCal: adding to, %s, isExit, %d
static bool CLWifiFenceCalculator::finalizeCombinedFencesList(CLFenceManager_Type::CombinedFencesList &)
FenceCal: No fences
FenceCal: finalizedCombinedFence, %s
static void CLWifiFenceCalculator::sortCalculatorGroup(const CLDaemonLocation &, std::vector<CLWifiFenceCalculator> &)
FenceCal: fDistanceFromCurrentLocation, %.2lf, %s
calculateWeightedScore
uncertainty > 0.0f
score > -1.0f
const CLWifiFenceCalculator::Score &CLWifiFenceCalculator::getChosenGroupScore() const
dCOLLECT: no chosen score, was calculateGroup called?
wtwLocation
-[CRWtwCollectionRequest writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRWtwCollectionRequest.m
wtwLocations
T@"NSMutableArray",&,N,V_wtwLocations
CLSignificantChangeManagerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLSignificantChangeManager.mm
-[CLSignificantChangeManagerAdapter beginService]
significant
CLSignificantChangeManager::CLSignificantChangeManager(CLSilo *)
SLC: fIsUseCellLocation, %d
void CLSignificantChangeManager::init()
SLC: init
SLCWakeInterval
SLC: fWakeInterval, %.1lf
SLCShowUI
SLC: gSLCShowUI, %d
SLCStartDelay
SLC: Overriding fence start delay to %.2f
SignificantChange
SignificantChangeStart
%d significant location change clients at %.3fs wake interval
SLCLowPriorityScan
SLC: fLowPriorityScan, %d
SLC: can't check airplane mode
SLCConsolidateTriggersEnabled
SLC: fIsConsolidateTriggersEnabled, %d
SLCConsolidatedTriggersTimeInterval
SLC: fConsolidatedTriggersTimeInterval, %.1lf
SLC: failed to allocate, fConsolidatedTrigger
virtual void CLSignificantChangeManager::shutdown()
SLC: shutdown
Could not store significant change clients
virtual bool CLSignificantChangeManager::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)
SLC: registerForNotificationInternal, notification, %d
SLC: An internal client has registered for significant location change notifications
virtual bool CLSignificantChangeManager::registerForNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::RegInfo &)
SLC: Got registration for %s (client %d)
virtual bool CLSignificantChangeManager::unregisterForNotification(int, const CLLocationProvider_Type::Notification &)
SLC: No registration info for client %d
SLC: Got unregistration for client %d (%s)
virtual bool CLSignificantChangeManager::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)
SLC: unregisterForNotificationInternal, notification, %d
SLC: All internal clients have unregistered for significant location change notifications
void CLSignificantChangeManager::logSLC(const CLDaemonLocation &, const double)
SLC: location changed, date, %ld/%ld, time,%ld:%ld:%ld, loc, %.8lf, %.8lf, acc, %.2lf, distance, %.1lf
void CLSignificantChangeManager::handleSignificantLocationChange(CLDaemonLocation)
SLC: handleSignificantLocationChange, location, %s
SLC: Currently sending significant location changes read from defaults.
SLC: Delete 'SpoofSignificantLocationChange' from defaults to continue monitoring SLC updates.
SLC: AirplaneMode is enabled, ignoring location
SLC: location services is disabled, ignoring location
SLC: Significant location change got invalid location!
SLC: Ignoring inaccurate location, %s
SLC: Ignoring inaccurate GPS location, %s
SLC: Ignoring inaccurate WIFI location, %s
SLC: Significant location change monitoring not active; not handling <%+.8f,%+.8f> acc %.2f
SLC: Adjusting accuracy for <%+.8f,%+.8f> type %d from %.2fm to %.2fm
SLC: Adjusting lifespan to be finite
SLC: handleSignificantLocationChange, distance, %.1lf, timeDelta, %.1lf, maxFactor, %.1lf
SLC: <%+.8f,%+.8f> acc %.2f timestamp %.2f is stale, discarding
SLC: <%+.8f,%+.8f> acc %.2f moved only %.2fm from previous significant location <%+.8f,%+.8f> acc %.2f, discarding
SLC: Lifespan of previous significant location <%+.8f,%+.8f> acc %.2f has not expired (timestamp %.2f, lifespan %.2f), discarding <%+.8f,%+.8f> acc %.2f
SLC: Timestamp %.2f of previous significant location <%+.8f,%+.8f> is less than %.2f seconds ago; discarding <%+.8f,%+.8f> acc %.2f
SLC: Location <%+.8f,%+.8f> acc %.2f is too far (distance %.2f) from previous location <%+.8f,%+.8f> acc %.2f from %.3fs ago, discarding
SLC: avoiding too frequent SLC notificaitons, age, %.1f, prev location, <%+.8f,%+.8f>, acc, %.2lf, new location, <%+.8f,%+.8f>, acc, %.2f
SLC: issue notificaiton, distance, %.1lf
SLC: got first location, not sending SLC notificaiton
SLC: no location change
SLC: register to FenceMonitor, make sure the wake timer is off
SLC: unregister from FenceMonitor, make sure the wake time is on
SLC: reporting a location change 
SLC: new location is not useful
SLC: slcUpdate, slc, %d, staticLocations, %2d, %2d, distance, %5.1lf, requestFence, %d, type, %s, loc, %.8lf, %.8lf, acc, %4.0lf, staticInterval, %5.1lf, statThresh, %5.1lf, sinceLast, %5.1lf
slcUpdate
hAcc
secondsSinceLastSLC
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Lifespan,%.2f,LocationType,%d,PrevLocation,%+.8f,%+.8f,%.2f,Distance,%.2f,DeltaTime,%.3f,Clients,%d,
int CLSignificantChangeManager::numClientsMonitoringSignificantLocationChanges()
Couldn't get list of significant location change clients
SLC: numClientsMonitoringSignificantLocationChanges, clients, %lu
SLC: numClientsMonitoringSignificantLocationChanges, %s
void CLSignificantChangeManager::startAllSignificantLocationChangeClients()
SLC: num clients, %lu, airplane, %d
SLC: Starting monitoring for %s
bool CLSignificantChangeManager::isClientMonitoringSignificantLocationChanges(const std::string &)
SLC: %s: monitoring active %d, current clients %d
void CLSignificantChangeManager::checkClientStatusInternal(const std::string &, bool)
SLC: %s: monitoring active %d, monitoring added %d, airplane, %d
SLC: can't get name, bundleId, %s, name, %s, %s, %s
SLC: %s is no longer a significant change client, airplane
SLC: %s is now a significant change client
SLC: %s is no longer a significant change client
void CLSignificantChangeManager::stopAllSignificantLocationChangeClients()
SLC: Stopping all significant location change clients, clients, %lu, airplane, %d
Stopping monitoring for %s
void CLSignificantChangeManager::addSignificantLocationChangeClientInternal(const std::string &)
SLC: client, %s, is already monitored internal, %d
SLC: Added significant location change client %s; now %d (%d monitored)
void CLSignificantChangeManager::addSignificantLocationChangeClient(const CLClientManager_Type::Name &)
SLC: Location services is not enabled; not adding significant location change client %s
SLC: client, %s, is already monitored, %d
void CLSignificantChangeManager::removeSignificantLocationChangeClient(const CLClientManager_Type::Name &)
SLC: Removed significant location change client %s; now %d
void CLSignificantChangeManager::checkSignificantChangeStatusForClient(const std::string &)
SLC: %s is no longer authorized; stopping monitoring
SLC: %s is now authorized; starting monitoring
void CLSignificantChangeManager::removeAllSignificantChangeClients()
SLC: Removing all %ld significant location change clients
void CLSignificantChangeManager::checkSignificantLocationChangeMonitoringStatusInternal()
SLC: checkSignificantLocationChangeMonitoringStatusInternal, locationServicesEnabled, %d, airplane, %d, active, %d, hasLocationClients, %d, numOfClients, %d
void CLSignificantChangeManager::startSignificantLocationChangeMonitoring()
SLC: Starting significant location change monitoring
void CLSignificantChangeManager::stopSignificantLocationChangeMonitoring()
SLC: Stopping significant location change monitoring
void CLSignificantChangeManager::updateSystemWakeTime()
SLC: updateSystemWakeTime
SLC: Significant location change isn't active; not updating system wake time
SLC: updateSystemWakeTime, staticCount, %d, staticInterval, %.0lf, next wake in, %.1lf, seconds, wifi, %d
SLC: updateSystemWakeTime, no more wakes, wifi is, %d
void CLSignificantChangeManager::onStartSLC(CLPersistentTimer *)
SLC: starting significant location change monitoring
void CLSignificantChangeManager::onWakeTimer(CLPersistentTimer *)
SLC: System wake timer fired, elapsed time, %.1lf
void CLSignificantChangeManager::enableBackgroundWakeServices_nl()
SLC: enableBackgroundWakeServices_nl, %d
void CLSignificantChangeManager::disableBackgroundWakeServices_nl()
SLC: disableBackgroundWakeServices_nl
void CLSignificantChangeManager::onSettingsNotification(int, const CLDarwinNotifier_Type::Notification &, const CLDarwinNotifier_Type::NotificationData &)
SLC: onSettingsNotification
SpoofSignificantLocationChange
HorizontalAccuracy
SLC: Spoofing a Significant Location Change: %s
void CLSignificantChangeManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
SLC: onLocationNotification, location, %s
void CLSignificantChangeManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
SLC: kNotificationUninstallation, %d
SLC: kNotificationAuthorization, %d
SLC: Removing all significant location change clients
SLC: Location services is now disabled; stopping significant location change monitoring
SLC: Location services is now enabled; starting significant location change monitoring
SLC: Reauthorizing clients by toggling significant location change
SLC: Got unknown client notification %d
void CLSignificantChangeManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
SLC: Got kNotificationAirplaneMode, airplane, %d, %d, %d
SLC: Got kNotificationMigration, locationServicesEnabled, %d
SLC: unknown notification, %d
void CLSignificantChangeManager::resetStaticLocationReports()
SLC: resetStaticLocationReports
virtual void CLSignificantChangeManager::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
SLC: onWifiNotification, notofication, %d
SLC: Got kNotificationPower
SLC: Got kNotificationBackgroundEntry, requesting a scan
SLC: Got kNotificationBackgroundExit, requesting a scan
void CLSignificantChangeManager::requestLocationUpdate()
SLC: requestLocationUpdate, scnType, %d, %s
void CLSignificantChangeManager::onStoreTimer(CFRunLoopTimerRef)
SLC: onStoreTimer, info, %p
void CLSignificantChangeManager::onConsolidatedTrigger(CFRunLoopTimerRef)
SLC: ignore, onConsolidatedTrigger, shutdown?
SLC: onConsolidatedTrigger, calling requestLocationUpdate
bool CMSensorFusionSwimMekf::initializeAttitude(const CMVector3d &, float)
northAndGravity failed
invalid initializeDown covariance !(P > 0), reseting
FitChecker
bool CMSensorFusionSwimMekf::FitChecker::add(float, const CMCompassCalibrationMatrix &, const CMVector3d &, const CMOQuaternion &, uint64_t)
Type,%s,poseMisMatch,deltaGrav,%.3f,refPose,%.3f,%.3f,%.3f,quality,%.3f
bool CMSensorFusionSwimMekf::FitChecker::shouldCorrect(float, const CMVector3d &, const CMOQuaternion &, const CMCompassCalibrationMatrix &, uint64_t)
Type,%s,reset,deltaT,%f,fFittedCount,%d
Type,%s,size,%d,calQuality,%.2f,hasConsistency,%d,level,%d
Type,%s,headingDiffVar,%.3f,headingDiffMean,%.2f,headingDiff,%.2f,headingDiffMaxMinusMin,%.4f
virtual void CMSensorFusionSwimMekf::feedMagnetometerData(const CMVector3d &, uint64_t)
zero/max magnitude raw field, ignoring.
zero magnitude calibrated field, ignoring.
Type,%s,large correction,%.3f,calLevel,%d,quality,%.3f
virtual void CMSensorFusionSwimMekf::feedCompassCalibration(const CMCompassCalibrationMatrix &)
Type,%s,reset on arrival of new cal. level,%d
CompassCorrection
void CMSensorFusionSwimMekf::doCompassMeasurementUpdate(const CMVector3d &, const CMVector3d &)
Type,%s,requested correction,%.2f,got,%.2f
T CMMatrix<float, 3, 4>::operator()(size_t, size_t) const [T = float, M = 3, N = 4]
Assertion failed: row < M, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMMatrix.h, line 64,invalid row %zu > %zu.
Assertion failed: col < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMMatrix.h, line 65,invalid col %zu > %zu.
T CMVector<float, 4>::operator[](const size_t) const [T = float, N = 4]
const T &CMQueue<float>::operator[](const size_t) const [T = float]
const Element CMVectorBufferBase<float, 3>::mean(size_t, size_t) const [T = float, N = 3]
Assertion failed: !empty(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMVectorBuffer.h, line 96,mean() on empty buffer.
bool CMFactoredMatrix<float, 3>::factor(const CMMatrix<T, N, N> &) [T = float, N = 3]
D(%zu) == 0 semidefinite matrix
T CMMatrix<float, 3, 3>::operator()(size_t, size_t) const [T = float, M = 3, N = 3]
T &CMFactoredMatrix<float, 3>::U(size_t, size_t) [T = float, N = 3]
Assertion failed: col > row, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMFactoredMatrix.h, line 123,invalid element %zu <= %zu.
Element CMVectorBufferBase<float, 3>::back() const [T = float, N = 3]
Assertion failed: !empty(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMVectorBuffer.h, line 148,back() on empty buffer.
T CMFactoredMatrix<float, 3>::U(size_t, size_t) const [T = float, N = 3]
Assertion failed: col > row, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMFactoredMatrix.h, line 117,invalid element %zu <= %zu.
T CMMatrix<float, 3, 3>::operator[](size_t) const [T = float, M = 3, N = 3]
Assertion failed: ldx < M*N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMMatrix.h, line 78,invalid element %zu >= %zu.
T &CMMatrix<float, 3, 3>::operator()(size_t, size_t) [T = float, M = 3, N = 3]
Assertion failed: row < M, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMMatrix.h, line 71,invalid row %zu > %zu.
Assertion failed: col < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMMatrix.h, line 72,invalid col %zu > %zu.
void CMFactoredMatrix<float, 3>::thorntonTemporalUpdate(CMMatrix<T, N, N> &, const CMVector<T, N> &) [T = float, N = 3]
newPd[%zu] == 0 semidefinisemidefinite matrix
T &CMVector<float, 3>::operator[](const size_t) [T = float, N = 3]
Assertion failed: i < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMVector.h, line 278,invalid index %zu >= %zu.
CMVector<T, N> CMFactoredMatrix<float, 3>::biermanObservationalUpdate(const CMMatrix<T, P, N> &, const CMVector<T, P> &, const CMVector<T, P> &) [T = float, N = 3, P = 3]
%zu: alpha == 0 sensitivity matrix semidefinite
T CMQueue<float>::getMax() const [T = float]
Assertion failed: n > 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMQueue.h, line 235,.
T CMQueue<float>::getMin() const [T = float]
Assertion failed: n > 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMQueue.h, line 251,.
bool CLGeoAccess3dBuildingGeometry::buildingsWithinDistance(ExtrudedFootprintsList &, const double &, const double &, const double &)
CLMM, GeoMapAccess did not have sufficient data available (buildingsWithinDistance)
v8@?0@"<GEOMapBuilding>"4
CLNatalimetryNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Natalimetry/CLNatalimetryNotifier.mm
-[CLNatalimetryNotifierAdapter beginService]
CLNatalimetryNotifier
LogBinaryNatalimetryOutputs
Catherine
StepCount
Activity
Swim
CLNatalimetryNotifier::CLNatalimetryNotifier(CLSilo *)
CLNatalimetryNotifier being constructed.
LogNatalimetry
LogCalorimetry
ActiveJacksonCalibration
Found vo2max calibration override flag : %d 
virtual void CLNatalimetryNotifier::shutdown()
CLNatalimetryNotifier is shutting down.
NatalimetryAggregateTimerInterval
void CLNatalimetryNotifier::setUpAggregateOnTimer()_block_invoke
Aggregating records due to timer!
void CLNatalimetryNotifier::setUpdateFinishedHandler()_block_invoke
Natalie:recordId,%d,startTime,%lf,activityType,%d,mets,%lf,basalMETs,%f,natalies,%lld,basalNatalies,%lld
v112@?0{CLNatalieData=idiBdiiidddfqqdd^{__CFString}BB}4
void CLNatalimetryNotifier::setUpdateFinishedHandler()_block_invoke_2
Exercise Minute:recordId,%d,startTime,%lf
v20@?0{CLExerciseMinuteData=id^{__CFString}}4
void CLNatalimetryNotifier::setUserProfile(NSDictionary *, bool)
TimeFirstPAL
void CLNatalimetryNotifier::sanitizeUserProfile()
Error in user info.
CLBodyMetrics CLNatalimetryNotifier::setUserProfileToBodyMetrics(NSDictionary *, const CLBodyMetrics &, bool) const
runVo2maxVal,%f,runVo2maxFlag,%d,runVo2maxUpdatedFlag,%d,hronsetVo2max,%f,hronsetVo2maxFlag,%d,derivedVo2max,%f,derivedVo2maxFlag,%d,oldVo2max,%f,estimatedVo2max,%f,mergedVo2max,%f,boundedVo2max,%f,doMerge,%d
setUserProfileToBodyMetrics completed with result: %s
NumActiveCalibrations
float CLNatalimetryNotifier::mergeVo2max(float, float) const
Number of active vo2max calibrations : %d 
First PAL estimate obtained at : %f 
Change in vo2max : %f 
bool CLNatalimetryNotifier::readFromDisk(CLBodyMetrics &)
Before unlocked 
userinfo
void CLNatalimetryNotifier::updateBodyMetrics(const CLBodyMetrics &)
UserInfo: %f,%f,%f,%d,%f,%f,%f,%f,%d,%f 
NSDictionary *CLNatalimetryNotifier::getUserProfile() const
available, %d
NSDictionary *CLNatalimetryNotifier::getUserProfileInternal() const
void CLNatalimetryNotifier::resetUserProfileForKeys(NSArray<NSString *> *)
Resetting user profile to defaults for keys %s.
CMNatalimeterSetUserVo2maxReset is resetting ActiveVo2Calibration, NumActiveCalibrations, and TimeFirstPAL.
bool CLNatalimetryNotifier::persistCachedValues()
Persistent store for userinfo should've been initialized 
void CLNatalimetryNotifier::readUserProfile()
UserCondition
Unexpected unable to read from disk!
void CLNatalimetryNotifier::setActiveVo2maxOverride(bool)
fActiveVo2maxOverride has been set to %d
void CLNatalimetryNotifier::sendActivitySessionOverride(CMMotionContext::ActivitySession)
Sending activity override %d
void CLNatalimetryNotifier::checkAndNotifyGpsAvailability()
GPS availability at time %lf, companion time, %lf, GPS timestamp, %lf, %d
GPS not available at time %lf
void CLNatalimetryNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
kNotificationMediatedActivitySpectator,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f},nataliFeatures{fVectorMagnitude,%f,fEpochType,%d,fStanding,%d,fMachineFrequency,%f,fRowStrokeFrequency,%f,fRowStrokeAmplitude,%f,fRowStrokePower,%f,fPushVectorMagnitude,%f}
Vo2MaxCalLevel
Unhandled notification %d
void CLNatalimetryNotifier::onCatherineNotification(int, const CLCatherineNotifier_Type::Notification &, const CLCatherineNotifier_Type::NotificationData &)
Received Onset notification from CatherineNotifier (%f bpm)!
Received Min notification from CatherineNotifier! (%f bpm)
Updating Catherine, catherine = %.2f, timestamp = %.2lf, starttime = %.2lf, source = %d, interpolation = %d
void CLNatalimetryNotifier::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d
void CLNatalimetryNotifier::onSessionTrackerAppLaunchNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
Proactively running HR and Odometer
void CLNatalimetryNotifier::onStoredUserInfo(const CLMotionCoprocessorInterface::NotificationData *)
Received user info from SPU, data protection enabled %d
void CLNatalimetryNotifier::refreshMetrics()
Forcing a pal update.
Forcing a vo2max clear.
Forcing a vo2max update.
Forcing a run vo2max clear.
Forcing a run vo2max update.
NanolifestyleSessionTrackerForegroundTransitionNotification
NatalieInputSrc
void CLNatalieSourceFromNotifier<CLOdometerEntry>::startSpectator() [Data_T = CLOdometerEntry]
Start spectator for src %s
virtual void CLNatalieInput<CLOdometerEntry>::update(CFAbsoluteTime) [Data_T = CLOdometerEntry]
CLNatalieInput: Time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
virtual bool CLNatalieSourceFromNotifier<CLOdometerEntry>::startActive() [Data_T = CLOdometerEntry]
Activate src %s
virtual bool CLNatalieSourceFromNotifier<CLOdometerEntry>::stopActive() [Data_T = CLOdometerEntry]
Inactivate src %s
void CLNatalieSourceFromNotifier<CLElevationChangeEntry>::startSpectator() [Data_T = CLElevationChangeEntry]
virtual void CLNatalieInput<CLElevationChangeEntry>::update(CFAbsoluteTime)
CLNatalieInput<CLElevationChangeEntry>: Time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
virtual bool CLNatalieSourceFromNotifier<CLElevationChangeEntry>::startActive() [Data_T = CLElevationChangeEntry]
virtual bool CLNatalieSourceFromNotifier<CLElevationChangeEntry>::stopActive() [Data_T = CLElevationChangeEntry]
void CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>::startSpectator() [Data_T = CLCoarseElevationChangeEntry]
virtual void CLNatalieInput<CLCoarseElevationChangeEntry>::update(CFAbsoluteTime)
CLNatalieInput<CLCoarseElevationChangeEntry>: Time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
virtual bool CLNatalieInput<CLCoarseElevationChangeEntry>::isReady(CFAbsoluteTime)
%s is not ready at, %f, timeout, %f
%s is ready at, %f, timeout, %f
void CLNatalieSourceFromNotifier<CLCatherineData>::startSpectator() [Data_T = CLCatherineData]
virtual void CLNatalieInput<CLCatherineData>::update(CFAbsoluteTime) [Data_T = CLCatherineData]
virtual bool CLNatalieSourceFromNotifier<CLCatherineData>::startActive() [Data_T = CLCatherineData]
virtual bool CLNatalieSourceFromNotifier<CLCatherineData>::stopActive() [Data_T = CLCatherineData]
void CLNatalieSourceFromNotifier<CLStepCountEntry>::startSpectator() [Data_T = CLStepCountEntry]
virtual void CLNatalieInput<CLStepCountEntry>::update(CFAbsoluteTime) [Data_T = CLStepCountEntry]
virtual void CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>::update(CFAbsoluteTime) [Data_T = CLMotionStateMediator_Type::MediatedMotionActivity]
virtual void CLNatalieInput<CLSwimEntry>::update(CFAbsoluteTime) [Data_T = CLSwimEntry]
virtual bool CLNatalieSourceFromNotifier<CLSwimEntry>::startActive() [Data_T = CLSwimEntry]
virtual bool CLNatalieSourceFromNotifier<CLSwimEntry>::stopActive() [Data_T = CLSwimEntry]
void CLActivityAggregator<CLNatalieData>::setExpirationRule(CFTimeInterval) [T = CLNatalieData]
void CLActivityAggregator<CLExerciseMinuteData>::setExpirationRule(CFTimeInterval) [T = CLExerciseMinuteData]
long CLActivityAggregator<CLNatalieData>::aggregateRecords() [T = CLNatalieData]
int CLActivityRecorderDb<CLNatalieData>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLNatalieData]
long CLActivityAggregator<CLExerciseMinuteData>::aggregateRecords() [T = CLExerciseMinuteData]
int CLActivityRecorderDb<CLExerciseMinuteData>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLExerciseMinuteData]
virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
bool CLActivityRecorderDb<CLExerciseMinuteData>::isValidTime(CFAbsoluteTime &) const [T = CLExerciseMinuteData]
bool CLActivityRecorderDb<CLNatalieData>::isValidTime(CFAbsoluteTime &) const [T = CLNatalieData]
virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/RavenEstimator/CLRavenEstimator.mm
CLRavenEstimator::CLRavenEstimator(CLSilo *, BasicMutex *, bool, bool, bool, bool, bool, bool)
RAVEN: Configuring supervisor
RAVEN: Unable to configure supervisor
RAVEN: Configuring predictor
RAVEN: Unable to configure predictor
bool CLRavenEstimator::predictLocation(CFTimeInterval, const CFAbsoluteTime &, const CLDaemonLocation &, const CLDaemonLocationPrivate &, CLDaemonLocation &)
RAVEN: invalid solution
RAVEN: soulution state,%d,health,%d,age,%lf
RAVEN: solution too old
RAVEN: predictor return,%d,predictor state,%d,predictor health,%d
RAVEN: position prediction unavailable
RAVEN: converting solution failed: %d
RAVEN: prediction accuracy less then PDR limit
void CLRavenEstimator::updateNeighborhood(const CLOutdoorNeighborhood::Character &)
RAVEN: dense urban update
RAVEN: dense urban age,%.1lf,distance,%.1lf
void CLRavenEstimator::setState(CLRavenEstimator::RavenState)
RAVEN: Entering State %d
void CLRavenEstimator::handleEventWaiting(CLRavenEstimator::RavenEvent)
RAVEN: Waiting to start,didReceiveRecentGPSFix,%d,didReceiveRecentIndoorFix,%d,isRavenPedestrian,%d,isDenseUrban,%d,timeSinceLastStart,%f
void CLRavenEstimator::handleEventRunning(CLRavenEstimator::RavenEvent)
RAVEN: indoor running, stopping raven
RAVEN: no longer pedestrian
RAVEN: max PDR time with no GPS reached
RAVEN: no longer dense urban
void CLRavenEstimator::startRaven()
RAVEN: Starting Raven
void CLRavenEstimator::stopRaven()
RAVEN: Stopping Raven
void CLRavenEstimator::startNewLog()
RAVEN: Binary log already open, now closing
RAVEN: Could not create log file: %s
RAVEN: Creating binary output log: %s
void CLRavenEstimator::turnOnInertialSensorAiding()
RAVEN: Enabling Inertial Aiding
RAVEN: accel data notifications registered,Accel,enabled,1
RAVEN: Could not create accel dispatcher.
RAVEN: gyro data notifications registered,Gyro,enabled,1
RAVEN: Could not create gyro dispatcher.
void CLRavenEstimator::turnOffInertialSensorAiding()
RAVEN: Disabling Inertial Aiding
RAVEN: gyro data notifications unregistered,Gyro,enabled,0
RAVEN: accel data notifications unregistered,Accel,enabled,0
void CLRavenEstimator::turnOnPressureSensorAiding()
RAVEN: Pressure sensor unavailable.
RAVEN: Pressure data notifications registered,Pressure Sensor,enabled,1
RAVEN: Could not create pressure sensor dispatcher.
void CLRavenEstimator::turnOffPressureSensorAiding()
RAVEN: Pressure data notifications unregistered,Pressure Sensor,enabled,0
void CLRavenEstimator::enableMotionMonitoring()
RAVEN: Enabling Raven
RAVEN: Enabling Motion Context
RAVEN: Motion Context is NOT supported!
RAVEN: Enabling Step Count
RAVEN: Step Count is NOT supported!
void CLRavenEstimator::disableMotionMonitoring()
RAVEN: Disabling Raven
RAVEN: Disabling Motion Context
RAVEN: Disabling Step Count
yyyy-MM-dd-HH-mm-ss
ravenlog-%s_%@.bin
void CLRavenEstimator::onStepCountNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)
RAVEN: steps too close together
void CLRavenEstimator::setPressureSensorData(const CLPressure::Sample *, unsigned int)
RAVEN: unexpected pressure window size,%d
Generic
RavenSolutionActiveObject
RavenIMUPreprocessorActiveObject
CNMatrixSerialize
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/System/Library/PrivateFrameworks/CoreNavigation.framework/Headers/cnmatrix/cnmatrixhelper.h
false
SetIndexing
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/System/Library/PrivateFrameworks/CoreNavigation.framework/Headers/cnmatrix/cnmatrixbase.h
new_indexing != OneIndexed
CNMatrixDeserialize
CNMatrix
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/System/Library/PrivateFrameworks/CoreNavigation.framework/Headers/cnframework/cnallocator.h
a==b
this->max_num_cols_ >= A.num_cols_
y.max_num_cols_ >= A.num_cols_
y.max_num_rows_ >= A.num_rows_
FastResize
in_nr <= max_nr
in_nc >= 0
HorzCat
A.num_rows_ == B.num_rows_
C.max_num_cols_ >= A.num_cols_ + B.num_cols_
&B != &C
data_ != __null
idx >= 0
this->num_cols_ <= this->max_num_cols_
nc <= Z.MaxNumCols()
&A != &Work
&A != &B
Ipiv.max_num_rows_ * Ipiv.max_num_cols_ >= A.num_rows_
B.max_num_rows_ >= A.num_rows_
Error using Inv: input argument %d invalid in getrf.
info >= 0
Error using Inv: input argument %d invalid in getri.
Warning: Inv optimal workspace size %d is greater than provided workspace size %d; performance may suffer.
this != &(A)
Multiply
&(A) != &(C)
Transpose
&(A) != &(B)
TimerEvent
Logging not initialized: 
Logging started to: 
FAILED TO START LOGGING: 
PositionEvent
VelocityEvent
AccelerometerEvent
RateGyroEvent
OdometerEvent
AltimeterEvent
void CLRavenEstimator::processEvent(const T &, eventtypes::EventTypes) [T = raven::TimerEvent]
RAVEN: Event %s has timestamp %lf seconds in the future
RAVEN: Processing too long %lfs
Warning: %s failed to handle event of type %s.
Warning: %s estimator unhealthy; resetting...
RavenSolutionEvent
RaiseEvent
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/System/Library/PrivateFrameworks/CoreNavigation.framework/Headers/cnframeworknothreads/activeobjectbase.h
super_ptr_!=nullptr
Dropping old 
 from 
 event time= 
 current time= 
%.16lg, 
%d, 
%.16lg
void CLRavenEstimator::processEvent(const T &, eventtypes::EventTypes) [T = raven::PositionEvent]
void CLRavenEstimator::processEvent(const T &, eventtypes::EventTypes) [T = raven::VelocityEvent]
void CLRavenEstimator::processEvent(const T &, eventtypes::EventTypes) [T = raven::AccelerometerEvent]
Warning: %s emptying event history of type %s.
deque
void CLRavenEstimator::processEvent(const T &, eventtypes::EventTypes) [T = raven::RateGyroEvent]
void CLRavenEstimator::processEvent(const T &, eventtypes::EventTypes) [T = raven::OdometerEvent]
operator[]
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/array.hpp
(i < N)&&("out of range")
void CLRavenEstimator::processEvent(const T &, eventtypes::EventTypes) [T = raven::AltimeterEvent]
Warning: timer has been started while already running.
Warning: timer has been stopped while already stopped.
Warning: timer has been reset while running.
CLApplicationLifecycleManagerSilo
T^{CLApplicationLifecycleManager=@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch> >={__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>=^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *> > >=L}}B},N,V_manager
void CLApplicationLifecycleManager::takeProcessAssertion(const pid_t &)
Taking process assertion for process ID %u
locationd.fence
void CLApplicationLifecycleManager::takeProcessAssertion(const pid_t &)_block_invoke
Releasing process assertion for process ID %u
Couldn't create assertion for process ID %u
void CLApplicationLifecycleManager::launchApplication(const std::string &)
%s doesn't have a bundle ID; not going to bug SpringBoard.
failed attempt to launch %s before device unlocked since boot
CLLaunchOptionsLocation
%s isn't running; launching...
Couldn't launch application %s (%d)
Application state for %s is %d
Got PID %d for bundle ID %s, but application is terminated!
Couldn't get application state for bundle ID %s
Application %s was task-suspended
Taking process assertion for %s...
void CLApplicationLifecycleManager::onAppMonitorNotification(int, const CLAppMonitor_Type::Notification &, const CLAppMonitor_Type::NotificationData &)
notification, %d, %s, pid, %d, bundleId, %s
unhandled app monitor notification, %d, %s
void CLApplicationLifecycleManager::onDataProtectionManagerNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
device unlocked since boot, %s, application launch capability, %sabled
CLGestureNotifier
GestureRecognitionAccelerometerInterval
GestureRecognitionEnableDynamicAccelerometerRate
CLGestureNotifier::CLGestureNotifier()
Enable dynamic accelerometer rate = %d
.dat
void CLGestureNotifier::setGestureClassifier(const std::string &)_block_invoke
Using prototype: %s
void CLGestureNotifier::startDetectingGestures()
Not starting gesture detection since requested accelerometer interval < 0
No accelerometer; not detecting gestures
Gesture prototype was not setup. Using default prototype
STATUS,GESTURE,DetectingGestures,1
fRestingDispatcher != NULL
void CLGestureNotifier::stopDetectingGestures()
STATUS,GESTURE,DetectingGestures,0
virtual void CLGestureNotifier::numberOfSpectatorsChanged(int, size_t)
Unrecognized notification
STATUS,SENSOR,Time,%f,Function,"%s",Type,Accelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f
static void CLGestureNotifier::onAccelerometer(const CLAccelerometer::Sample *, void *)
STATUS,GESTURE,Resting,%d
virtual void CLAccelerometerIntegrationSamplingDispatcher::dispatchData(int, const void *, size_t)
NatalimetryMaxDelay
std::vector<CLNatalieData> CLCalorieController::updateCalorimetry(CFAbsoluteTime)
METS consumed,startTime,%lf,activity,%d,mets,%f,rawMets,%f,fractionalGrade,%lf,elevationAvailability,%d,duration,%lf,natalies,%f,basalMets,%f,basalNatalies,%f,computeTime,%f,now,%f,expired,%d,historic,%d,stored,%d,%s
Popping out an activity since there's no activity associated with current time.  This shouldn't happen
float CLCalorieController::filterMets(const float)
Stale Sample for Active Median Filter, flushing
float CLCalorieController::sanitizeMets(float, float)
MET spike,%f,setting to basal,%f
In-human MET spike,%f,setting to upper bound,%f
CFTimeInterval CLCalorieController::averageMets(bool, CFTimeInterval, float, std::deque<std::pair<CFTimeInterval, float> > &, float &)
Average mets (%fs,%f): %f
CLSensorFusionService9Axis::CLSensorFusionService9Axis(bool, int, bool)
9-axis sensor fusion is not supported on this platform.  Returning.
void CLSensorFusionService9Axis::onBiasAndVariance(const CLMotionTypeGyroBiasAndVariance)_block_invoke
void CLSensorFusionService9Axis::onCompass(const CLCompass_Type::Sample *)
correctedCompassExt, %.3f, %.3f, %.3f, %u, %u
void CLPrototypeSet::addSampleToSubset(const CLDtwSample &, int, int, float &, float &, const char *&, double &)
Cost of match %f exceeds max of %f allowed for prototype %s
void CLPrototypeSet::readFromFile(const char *)
Could not open prototype file
Error reading magic number or number (%x) does not match expected number (0x%x)
Error reading number of prototypes
Error reading name length of prototype %d
Error reading name of prototype %d
Error reading rawName length of prototype %d
Error reading rawName of prototype %d
Error reading max distance
You are reading an older prototype file.
Error reading number of accelerometer samples for prototype %d
Error reading %d accelerometer samples for prototype %d
Could not initialize prototype instance %d
-[CMStrideCalLocationFSM requestTransitionToLocationState:]
fLocationState %d state %d
v8@?0@"CalibrationTrack"4
T@"<CMStrideCalLocationFSMDelegate>",N,V_delegate
locationState
Ti,R,N,VfLocationState
LogProx
CLEarGestureNotifier
EnableEarGesture
CLEarGestureNotifier::CLEarGestureNotifier()
Ear gesture enabled: %d
EarGestureIgnoreProx
Ignoring prox: %d
EarGestureMaxProxBeforeMotionInterval
Max prox before motion interval = %f
EarGestureMaxMotionBeforeProxInterval
Max motion before prox interval = %f
void CLEarGestureNotifier::startDetectingGestures()
Starting ear gesture detection
Could not create timer
Setting prox mode to PassiveMonitoring
Could not create log timer
void CLEarGestureNotifier::stopDetectingGestures()
Stopping ear gesture detection. Setting prox mode to none
void CLEarGestureNotifier::hasBlankedScreenOrIsLockedUpdated()
Has blanked screen = %d, Is locked = %d
Screen is blanked and device is locked. Stopping gesture detection.
Screen is unblanked or device is not locked. Starting gesture detection if necessary.
virtual void CLEarGestureNotifier::numberOfSpectatorsChanged(int, size_t)
%@.%@.%@
void CLEarGestureNotifier::checkEndPoseInReadyState(const CLAccelerometer::Sample *)
endPose,%.2f,%.2f,%.2f,tilt,%.2f,timestamp,%.3f
Failed end pose sanity check. Set state to %s
FailedEndPoseCheck
Sending gesture notification. Matched prototype name, %s
MatchFound
Set log timer for %f seconds.
void CLEarGestureNotifier::detectCancelAfterSend(const CLAccelerometer::Sample *)
Sending gesture notification. Gesture cancelled due to unlikely end pose, %.2f, %.2f, %.2f
CancelledPose
Sending gesture notification. Gesture cancelled due to high dynamics, %.3f, %.3f, %.3f
CancelledDynamics
Waiting for Motion
Detected Motion Waiting For Prox
Ready To Send Notification
Sent Notification
static void CLEarGestureNotifier::onGestureNotification(const CLGestureNotifier::NotificationData *, void *)
Readying gesture notification. Ignoring prox
Setting prox mode to PassiveEngaged.
Readying gesture notification. Prox triggered before motion. dt = %.3f
ProxToEarGestureDelta
Set timer for %f seconds.
static void CLEarGestureNotifier::onTimer(CFRunLoopTimerRef, void *)
Gesture timer expired. State = %s
Timer fired while in state %s.
Prox timer expired. Setting prox mode to PassiveMonitoring
ProxTimerExpired
static void CLEarGestureNotifier::onLogTimer(CFRunLoopTimerRef, void *)
Log time fired. State = %s
GestureCaptureAuto_
virtual bool CLActivityLoggerSizePolicy::shouldILog(NSData *)
currentSize is %llu, log msg size is %lu
Log msg size exceeds limit %d, skip loging %lu bytes
Log size exceeded %llu, skip log of %lu bytes
float CLCalorieClimbingModel::estimateClimbingMETs(CFAbsoluteTime, const CLCoarseElevationChangeEntry &, bool)
deltaElevation,%f,ascentDuration,%f,climbingMets,%f,len,%lu
epochMets,%f,bufferLength,%lu
epochMets,%f,historicalBufferLength,%lu
CLDebugBytes::CLDebugBytes(const char *)
Bytes: construct, name, %s
void CLDebugBytes::clear()
Bytes: clear, name, %s
void CLDebugBytes::log(const std::string &, CLDaemonStatus_Type::Reachability)
Bytes: log, name, %s, m, %s, s, %d, r, %d, t, %d, ts, %d, reachability, %d
PedestrianStepCountBuffer
std::vector<CLStepCountEntry> CLStepDistanceFusion::feedStepCountEntry(const CLExtendedStepCountEntry &)
StepCount, %f, %f, %d, %f, %f, %u, %f, %f, %f, %f
time
deltaCount
deltaDist(m)
calPed
fused
totalDist(m)
usedGps
pace(s/m)
StepDistancePedometerFusedPace
rawGps
StepDistanceFinalFusedPace
StepDistanceUsedOdometerPace
odometerPaceStdError
pedometerPaceStdError
residual
output
tolerance
ratio
vehicular
lastStepTime
unified,%s,%0.3f,%s,%u,%s,%u,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%u,%s,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%u,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.3f,%s,%0.4f,%s,%0.2f,%s,%u,%s,%0.3f,%s,%0.3f
rawDistance
calDistance
odomDistance
fusedDistance
odometerDistanceForSlowPaceCheckWindow
pedometerRawDistanceForSlowPaceCheckWindow
odometerError
rawPace
calPace
odomPace
fusedPace
Potential StepDistanceFusion error. File a radar if you are not walking/running in place. %s, %f, %s, %u, %s, %u, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %d, %s, %f, %s, %f, %s, %f, %s, %f
Inconsistency found between steps and clock. Ignoring.
void CLStepDistanceFusion::feedSession(const CLMotionStateMediator_Type::MotionOverride &)
action,%d,type,%d
bool CLStepDistanceFusion::isOdometerQualityUsable(CFAbsoluteTime, bool)
Classifying %lu odometer entries
bool CLStepDistanceFusion::getOdometerDistance(CFAbsoluteTime, CFAbsoluteTime, double &) const
Time rolled back! t1,%f,t2,%f
bool CLStepDistanceFusion::shouldUseOdometerPace(CFAbsoluteTime, bool, double &, double &)
No way!
bool CLStepDistanceFusion::updateVehicularStateMachine(double, double, double)
How can we generate pedometer distance with no time at all?
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/StepCount/CLStepDistanceFusion.mm
virtual void CLNatalieInput<CLExtendedStepCountEntry>::update(CFAbsoluteTime) [Data_T = CLExtendedStepCountEntry]
frozen
static
moving
driving
semi-stationary
moving coarse
in vehicle frozen
in vehicle static
walking slow
vehicular in hand
driving other
cycling leg
Stationary Cycling
Cross Training
Stair Climbing
Indoor Running
Indoor Walking
Pushing Wheelchair
Outdoor Wheelchair Activity
medium
high
ssid
isApplePersonalHotspot
isAssociated
accessPoint
Available
Power
ScanReady
Scan
ScanError
ScanErrorBusy
LinkStatus
Roam
Simulation
BgExit
BgEntry
TrackingAvailable
ScanCache
UnthrottledScan
PeerRanging
Harvest2GhzSet1
Harvest2GhzSet2
Harvest5GhzSet1
Harvest5GhzSet2
Harvest5GhzSet3
Cached
LowPriority
Channel
Fast
Stage1
Stage2
Thorough
Normal
Exhaustive
Passive
PassiveExhaustive
CustomScanParameters
CLKeyboardState
void CLKeyboardState::registerForKeyboardUpdates()
registering for keyboard updates
IOServiceFirstMatch
AppleHIDKeyboardEventDriverV2
IOServiceTerminate
void CLKeyboardState::registerForKeyboardUpdates()_block_invoke
Failed to register for keyboard updates. Could not register for AppleHIDKeyboardEventDriverV2 service kIOFirstMatchNotification and kIOTerminatedNotification.
Failed to register for keyboard updates. Could not create KeyboardConnectNotificationPort and KeyboardConnectNotificationPort
void CLKeyboardState::unregisterForKeyboardUpdates()
unregistering for keyboard updates
void CLWriteStackshot(const char *, _Bool)
stackshot only available on device
-[CMStrideCalibrationDatabase initWithSilo:]
StrideCalDb init
-[CMStrideCalibrationDatabase initWithSilo:]_block_invoke
Finished insertion startTime %f
v96@?0{CLStrideCalEntry=idIdddddiiddid}4
-[CMStrideCalibrationDatabase addEntry:]
insertion startTime %f
-[CMStrideCalibrationDatabase isCalibrationConvergedStdForBinWithSpeed:]
Speed,%f,KFactorStd,%0.4f
-[CMStrideCalibrationDatabase isCalibrationConvergedMedianForSpeed:]
Median kValue pacebin with speed %f: %f
T@"<CMStrideCalibrationDatabaseDelegate>",N,V_delegate
bool CLActivityRecorderDb<CLStrideCalEntry>::isValidTime(CFAbsoluteTime &) const [T = CLStrideCalEntry]
-[CMStrideCalibrator(DataInput) onLocationNotification:data:]
kCLMotionTypeGeomagneticModelDataXKey
kCLMotionTypeGeomagneticModelDataYKey
kCLMotionTypeGeomagneticModelDataZKey
kCLMotionTypeGeomagneticModelDataMagnitudeKey
kCLMotionTypeGeomagneticModelDataHorizontalKey
kCLMotionTypeGeomagneticModelDataDeclinationKey
kCLMotionTypeGeomagneticModelDataInclinationKey
kCLMotionTypeGeomagneticModelDataTimestampKey
kCLBiasXKey
kCLBiasYKey
kCLBiasZKey
kCLVarianceXKey
kCLVarianceYKey
kCLVarianceZKey
KCLDoingBiasEstimationKey
virtual CMFFTProcessor::~CMFFTProcessor()
CMFFTProcessor is being cleaned up.  Subsequent calls to CMAccelerometerProcessor::computeFrequencyFeatures will lead to undefined behavior.
RTRoutineManager
CLRoutineMonitorSilo
LocationBundles/Routine.bundle
Routine
com.apple.locationd.routine
VisitMonitor
v16@?0@"NSNumber"4@"NSMutableArray"8^B12
-[CLRoutineMonitor startMonitoringVisitsForClient:]
#slv telling routined to start visit monitoring
-[CLRoutineMonitor startMonitoringVisitsForClient:]_block_invoke_2
#slv got error from routined: %@
#slv received visit from routined
v12@?0@"CLVisit"4@"NSError"8
-[CLRoutineMonitor stopMonitoringVisitsForClient:]
#slv telling routined to stop visit monitoring
-[CLRoutineMonitor startLeechingVisitsForClient:]
SLV: Telling routined to start visit leeching
-[CLRoutineMonitor startLeechingVisitsForClient:]_block_invoke_2
SLV: Got error from routined: %s
SLV: Received leeched visit from routined, visit, %@
-[CLRoutineMonitor stopLeechingVisitsForClient:]
SLV: Telling routined to stop visit leeching
-[CLRoutineMonitor setVisitMonitorWakeTimerEnabled:]
#slv visit monitor wake timer enabled, %{public}s
-[CLRoutineMonitor onVisitMonitorWakeTimerExpiry]
#slv wake timer expiry, request wifi position
-[CLRoutineMonitor addLocation:]
dropping duplicate location, %{private}@
received location, %{private}@
#warning in-memory cache has exceeded threshold of %{public}lu, removing oldest fix
-[CLRoutineMonitor onClientManagerNotification:data:]
received unhandled notification %{public, location:CLClientManager_Type::Notification}d
-[CLRoutineMonitor onLocationNotification:data:]
received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d
-[CLRoutineMonitor flush]
flushing routine data
-[CLRoutineMonitor checkAuthorization]
Location services are disabled; stopping routine data collection
Routine system service disabled; stopping routine data collection
-[CLRoutineMonitor onWifiServiceNotification:data:]
#slv wifi power enabled, %s
-[CLRoutineMonitor listener:shouldAcceptNewConnection:]
LocationServer received incoming connection
Why didn't we get a connection
-[CLRoutineMonitor listener:shouldAcceptNewConnection:]_block_invoke
Connection interrupted
-[CLRoutineMonitor startUpdatingLocation]
start updating location
-[CLRoutineMonitor stopUpdatingLocation]
stop updating location
-[CLRoutineMonitor sendLocations]_block_invoke
#warning locations not delivered %@
v8@?0@"NSError"4
-[CLRoutineMonitor startWakeRoutinedTimer]
start wakeRoutinedTimer
-[CLRoutineMonitor stopWakeRoutinedTimer]
stop wakeRoutinedTimer
-[CLRoutineMonitor onWakeRoutinedTimer]
wake routined
-[CLRoutineMonitor setDiminishedMode:]
entering diminished mode; starting data collection
exiting diminished mode; stopping data collection
-[CLRoutineMonitor startMonitoringScenarioTriggerOfType:forClient:]
#scenarioTrigger Telling routined to start monitoring trigger of type, %lu
-[CLRoutineMonitor startMonitoringScenarioTriggerOfType:forClient:]_block_invoke_2
#scenarioTrigger Got error from routined, %@
#scenarioTrigger Received trigger of type %lu from routined
v12@?0@"RTScenarioTrigger"4@"NSError"8
-[CLRoutineMonitor stopMonitoringScenarioTriggerOfType:forClient:]
#scenarioTrigger Telling routined to stop monitoring trigger of type, %lu
-[CLRoutineMonitor startUpdatingPredictedApplications]
start updating predicted applications
-[CLRoutineMonitor stopUpdatingPredictedApplications]
stop updating predicted applications
-[CLRoutineMonitor _sendPredictedApplications]_block_invoke
predicted applications not delivered %p
-[CLRoutineMonitor fetchPredictedApplicationsAtLocation:reply:]
fetch predicted applications at location %{private}@
v8@?0@"NSArray"4
lastLocation
T@"CLLocation",&,N,V_lastLocation
predictedApplications
T@"NSArray",&,N,V_predictedApplications
updating
TB,N,V_updating
updatingPredictedApplications
TB,N,V_updatingPredictedApplications
authorized
TB,N,V_authorized
diminishedMode
TB,N,V_diminishedMode
routineManager
T@"RTRoutineManager",&,N,V_routineManager
visitClients
T@"NSMutableSet",&,N,V_visitClients
leechClients
T@"NSMutableSet",&,N,V_leechClients
visitMonitorWakeTimerEnabled
TB,N,V_visitMonitorWakeTimerEnabled
wifiPowerEnabled
TB,N,V_wifiPowerEnabled
scenarioTriggerClients
T@"NSMutableDictionary",&,N,V_scenarioTriggerClients
lastUpdateVisitMonitorWakeTimerDate
T@"NSDate",&,N,V_lastUpdateVisitMonitorWakeTimerDate
suggestedActionManager
T@"<CLSuggestedActionServiceProtocol>",&,N,V_suggestedActionManager
virtual CLMetsInfo CLNataliePedestrianModelInterface::computeMETS(const CLNatalieModelInput &)
wrMets, %f, hrMets, %f, hrwrDiff, %f, hrConfidence, %f, useHrMets, %d, output, %f
Walk
virtual CLMetsInfo CLNataliePedestrianModel::computeMETS(const CLNatalieModelInput &)
Using %s model
CLFenceDataDownloadManager
FenceDownloadTimer
virtual CLFenceDataDownloadManager::~CLFenceDataDownloadManager()
Fence: delete CLFenceDataDownloadManager
void CLFenceDataDownloadManager::addFencesForDataDownload(CLFenceManager_Type::FenceDownloadMap)
Fence: Adding %{public}ld fences for download
Fence: Adding fence to download, %{private}s
Fence: Adding fence to download, restored fence, %{private}s
Fence: first fence added, enable download timer
void CLFenceDataDownloadManager::removeFencesForDataDownload(CLFenceManager_Type::FencesVector)
Fence: Removing %{public}ld fences for download
Fence: Removing fence from download, %{private}s
Fence: last fence removed, disabled download timer
void CLFenceDataDownloadManager::refreshDataForFence(const CLFenceManager_Type::Fence &)
Fence: refreshDataForFence, %{private}s
void CLFenceDataDownloadManager::removeAllFencesForDataDownload()
Fence: Removing all fences for download, fences, %{public}lu
Fence: disable download timer
void CLFenceDataDownloadManager::checkDownloadState()
Fence: avoid download check, isLocationServicesEnabled, %{public}d
Fence: no reachability, download not possbile
Download error too fresh, avoid new downloads, dt, %{private}.1lf
Fence: checkDownloadState, currentQueries, %{private}d, dataAvail, %{private}d, locked, %{private}d
Fence: avoiding more concurrent downloads, %{private}d, max, %{private}d
Fence: already downloading fence, %{private}s
FenceDownloadState, %{private}s, r, %{private}.1lf, age, %{private}.1lf, reachability, %{private}d, l, %{private}d
Fence: ignoring fence, %s, downloads, %d, max, %d, reachability, %d
Fence: request tile download, %{private}s
Fence: fence, %s, urgent refresh, distance, %.1lf
Fence: Urgent refresh, %{private}s
Fence: fence, %s, is fresh for reachability, %d, age, %.1lf, thresh, %.1lf
Fence: fence, %s, need refresh, %d, age, %.1lf, isLockedState, %d, num %d, %d, isRealtime, %d, isLarge, %d, isUrgentDownload, %d
Fence: request ALS/tile download, %{private}s
Fence: can't start query, %s, tag, %d
Fence: can't start query
Fence: request tile download, %s
Fence: checkDownloadState, currentNumOfQueries, %d, newNumOfQueries, %d, numOfStartedQueries, %d, isLockedState, %d, nSmall, %d, nLarge, %d
int CLFenceDataDownloadManager::queryNearbyDataForFence(const CLFenceManager_Type::Fence &)
Fence: startQuery, fence, %s, tag, %d
Fence: Not querying nearbys for %s/%s; location services is disabled
unsigned int CLFenceDataDownloadManager::getNumOfPendingQueries()
Fence: getNumOfPendingQueries, numOfQueries, %u
void CLFenceDataDownloadManager::networkQueryDone(int, bool, int, int)
Fence: done tag, %d, isSuccess, %d, isLockedState, %d, numOfAps, %d, numOfCells, %d
Fence: networkQueryDone, tag, %d, %s, dataAvailability, %d, isSuccess, %d
Fence: networkQueryDone, %{private}d, %{private}s, fence, %{private}s, a, %{private}d, success, %{private}d
Fence: networkQueryDone, newNumOfQueries, %u, dataAvailability, %d, isAvoidUpcomingFenceDownloads, %d, doesTagBelongToFence, %d
void CLFenceDataDownloadManager::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)
Fence: notificaiton, %d
Fence: Got kNotificationQueryResponseError tag %d
Fence: Got kNotificationQueryResponseFinished tag %d
void CLFenceDataDownloadManager::onFenceDownloadTimer(CLPersistentTimer *)
Fence: ignore onFenceDownloadTimer, shutdown?
Fence: onFenceDownloadTimer, since last, %{private}.1lf, availability, %{private}d
void CLFenceDataDownloadManager::scheduleNextTimer()
Fence: scheduleNextTimer, interval, %.1lf, isLocaationServicesEnabled, %d
Schedule next download timer
Cancel next download timer
void CLFenceDataDownloadManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Fence: kNotificationReachability, notification, %{private}d, reachability, from, %{private}d, to, %{private}d
Fence: kNotificationMigration
void CLFenceDataDownloadManager::onManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Fence: kNotificationLocationServicesStatus, locationd services, %d
void CLFenceDataDownloadManager::onBTANotification(int, const CLBTA_Type::Notification &, const CLBTA_Type::NotificationData &)
Fence: onBTANotifications, notification, %d
Fence: onBTANotifications, kNotificationConnectionState, realtime, %d, %d, large, %d, %d
void CLFenceDataDownloadManager::startMonitoringDownloadConditions()
Fence: startMonitoringDownloadConditions
void CLFenceDataDownloadManager::stopMonitoringDownloadConditions()
Fence: stopMonitoringDownloadConditions
virtual void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLFenceDataDownloadManager_Type::Notification, NotificationData_T = CLFenceDataDownloadManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
FenceAuthorizationManager
CLFenceAuthorizationManager
CLFenceAuthorizationManager::CLFenceAuthorizationManager(CLSilo *)
Fence: can't check airplane mode
void CLFenceAuthorizationManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Fence: sMessage, %s, fFenceDatabase is NULL
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLFenceAuthorizationManager.mm
Fence: Got kNotificationAirplaneMode, airplaneMode, %d, %d
kNotificationMigration
Fence: Got kNotificationMigration
void CLFenceAuthorizationManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Fence: onClientNotification, %s
kNotificationUninstallation
Removing fences for uninstalled app %s
kNotificationAuthorization
Fence: kNotificationAuthorization, exec, %s, bundleId, %s, bundlePath, %s, clientKey, %s
Could not retrieve fences from database for client %s
There are no fences for client %s
Fence: kNotificationAuthorization cleaning, %s
Removing fences,%lu, for bundle,%s.
Disabling all fences for denied app %s
Enabling all fences for newly authorized app %s
Adding fences,%lu, for bundle,%s.
kNotificationReset
Reset received; sending reset notification
kNotificationLocationServicesStatus
Location services is now %s; sending reset notification
Fence: Location services is now disabled; clearing fence status
Fence: invalidating download date
Reauthorizing clients by triggering fence reset
void CLFenceAuthorizationManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
Fence: notification, kNotificationEncryptedDataAvailability, data.availability, %d, unlockedSinceBoot, from, %d, to, %d, isStartMonitoring, %d
kNotificationEncryptedDataAvailability
void CLFenceAuthorizationManager::updateAuthorizedClients()
Fence: updateAuthorizedClients, can't add fence before the first unlock
Fence: updateAuthorizedClients, locationServicesEnabled, %d
Fence: checkClientStatus, %s
bool CLFenceAuthorizationManager::addFence(const CLFenceManager_Type::Fence &)
Fence: addFence, can't add fence before the first unlock
Adding fence, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Add,1,BundleId,%s,Name,%s,
bool CLFenceAuthorizationManager::removeFence(const CLFenceManager_Type::Fence &)
Fence: removeFence, can't remove fence before the first unlock
Removing fence %s/%s
bool CLFenceAuthorizationManager::removeFences(const std::string &)
Fence: removeFences, can't remove fence before the first unlock
Removing all fences for %s
numFences
int CLFenceAuthorizationManager::numFences(const std::string &, bool)
void CLFenceAuthorizationManager::getAuthorizedFences(CLFenceManager_Type::FencesVector &)
Fence: getAuthorizedFences, no region monitoring before the first unlock
Location services are disabled; no monitored fences
Retrieved %ld fences from database
%s/%s is not authorized; removing from authorized fences list
void CLFenceAuthorizationManager::getFencesForBundle(const std::string &, CLFenceManager_Type::FencesVector &)
Fence: getFencesForBundle, no region monitoring before the first unlock
void CLFenceAuthorizationManager::getAllFencesForBundle(const std::string &, CLFenceManager_Type::FencesVector &)
Fence: getAllFencesForBundle, no region monitoring before the first unlock
void CLFenceAuthorizationManager::isFenceAuthorized(const CLFenceManager_Type::Fence &, bool &, bool &)
Fence: isFenceAuthorized, no region monitoring before the first unlock
Fence: isFenceAuthorized, [%s]/%s/%s, isRegistered, %d, isAuthorized, %d
void CLFenceAuthorizationManager::lastDownloadTimeChanged(const std::string &, const std::string &, const std::string &, const double &)
Fence: lastDownloadTimeChanged, no region monitoring before the first unlock
void CLFenceAuthorizationManager::markDataDownloadInvalid()
Fence: markDataDownloadInvalid, no region monitoring before the first unlock
bool CLFenceAuthorizationManager::isClientAuthorized(const std::string &)
Fence: isClientAuthorized, %s, %s, %s, CLClientRegistrationResult, %d
bool CLFenceAuthorizationManager::isOnBehalfBundleAuthorized(const std::string &)
Empty bundle identifier should be passed in here
bool CLFenceAuthorizationManager::hasMonitoredFences(const std::string &)
Fence: hasMonitoredFences, no region monitoring before the first unlock
%d fences for %s; authorized %d
void CLFenceAuthorizationManager::checkClientStatusInternal(const std::string &, bool)
%s: hasMonitoredFences %d, monitoringAdded %d airplane %d
%s is now a fence client, airplane, %d
%s is no longer a fence client, airplane, %d
void CLFenceAuthorizationManager::createFenceDatabase(const char *)
Fence: releaseFenceDatabase, fFenceDatabase, %p, fWasUnlockedSinceBoot, %d, reason, %s
virtual void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLFenceAuthorizationManager_Type::Notification, NotificationData_T = CLFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
LastFenceActivityTimestamp
fenceMonitor
T^{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?}{CLFenceMonitorWifiLogic=}}{CLFenceMonitorContinuous=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >={__tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence> >=L}}}}{CLFenceMonitorLogic=}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorContinuous_Type::Client, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >={__compressed_pair<CLFenceMonitorContinuous_Type::Client *, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >=^{Client}}}@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@},N,V_fenceMonitor
FenceMonitor
com.apple.locationd.FenceMonitor.LowPriority
FenceMonitorWatchdog
CLFenceMonitor::CLFenceMonitor(CLSilo *)
Fence: Couldn't create low priority queue!
FenceUseCellPositioning
Fence: Overriding cell positioning usage to %{private}d
FenceUseWifiPositioning
Fence: Overriding WiFi positioning usage to %{private}d
FenceUseGpsPositioning
Fence: Overriding GPS positioning usage to %{private}d
FenceUsePipelinePositioning
Fence: Overriding Pipeline positioning usage to %{private}d
FenceUseContinuousPositioning
Fence: Overriding continuous positioning usage to %{private}d
FenceIssueDelayedTriggers
Fence: Overriding FenceIssueDelayedTriggers to %{private}d
FenceContinousTrackingInterval
Fence: fWakeIntervalSeconds, %.1lf
FenceMonitorDelayedTriggerCountMax
Fence: fDelayedTriggerCountMax, %d
FenceMonitorDelayedTriggerIntervalSeconds
Fence: fDelayedTriggerIntervalSeconds, %.1lf
FenceMonitorNormalScan
Fence: fNormalScan, %d
FenceMonitorLowPriorityScan
Fence: fLowPriorityScan, %d
FenceMonitorIsConsolidateTriggersEnabled
Fence: fIsConsolidateTriggersEnabled, %d
FenceMonitorConsolidatedTriggersTimeInterval
Fence: fConsolidatedTriggersTimeInterval, %.1lf
FenceMonitorIsScheduleContTrackingWakes
Fence: fIsScheduleContTrackingWakes, %d
FenceMonitorIsTriggerOnTether
Fence: fIsTriggerOnTether, %d
FenceMonitorUseActivityAlarm
Fence: fIsUseActivityAlarm, %d, activityAlarmAvailable, %d
FenceTrigger
FenceTriggerDeAss
FenceContTrack
FenceLocWatchdog
FenceSettledTimer
Fence: failed to allocate, fConsolidatedTrigger
Fence: can't check airplane mode
~CLFenceMonitor
void CLFenceMonitor::startMonitoringFences(const CLFenceManager_Type::FencesVector &)
Fence: startMonitoringFences, fences, %{public}lu, status, %{private}s
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLFenceMonitor.mm
void CLFenceMonitor::restartMonitoringForAllFences()
Fence: restartMonitoringForAllFences
void CLFenceMonitor::stopMonitoringFences(const CLFenceManager_Type::FencesVector &)
Fence: stopMonitoringFences, fences, %{public}lu
void CLFenceMonitor::startMonitoring(const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &, bool)
Fence: startMonitoring, fence, %{private}s
void CLFenceMonitor::onExecuteLowPriorityAction(void *)
Fence: Where is _pLowPriorityAction?
Fence: Where is pLowPriorityAction->pThis, delete pLowPriorityAction?
Fence: onExecuteLowPriorityAction, kRequiredActionNone
Fence: onExecuteLowPriorityAction, kRequiredActionHanldeLocation
Fence: onExecuteLowPriorityAction, kRequiredActionStartMonitorNow, fence, %s, status, %s
Fence: onExecuteLowPriorityAction, kRequiredActionHandleNoApsArea
Fence: onExecuteLowPriorityAction, kRequiredActionCheckContinousEngagement
Fence: onExecuteLowPriorityAction, kRequiredActionStopMonitoring
Fence: onExecuteLowPriorityAction, Invalid pLowPriorityAction->requiredAction, %d
Fence: registerForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu
Fence: unregisterForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu
void CLFenceMonitor::stopMonitoringAFenceNow(CLFenceMonitor::FenceMonitorLowPriorityAction *)
Fence: stopMonitoringNow, fence, %{private}s
Fence: stopMonitoringNow, no such fence, %{private}s
void CLFenceMonitor::startMonitoringNow(const CLFenceManager_Type::Fence &, const CLFenceMonitorLogic::FenceMonitoringStatus &)
Fence: startMonitoringNow, fence, %{private}s, status, %{private}s
Fence: startMonitoringNow, fence, %{private}s, is already in fMonitoredFences
Fence: crirital error!
Fence: Location services is disabled; not starting monitoring for %{private}s/%{private}s
Fence: startMonitoringNow, %{private}s
Fence: filtered fLastLocation, %{private}s
Fence: Seeding fence %s/%s with location <%+.8f,%+.8f> acc %.2f timestamp %.2f lifespan %.1lf
Fence: request scan, current location, %{private}s
Fence: Started monitoring fence, %s
Fence: Started monitoring monitoringStatus, %s
Fence: Started monitoring fence %s/%s (<%+.8f,%+.8f>, radius %.3f, eff radius %.3f, accuracy %.3f, eff accuracy %.3f, active tech %d)
Fence: fence is already monitored, %{private}s
void CLFenceMonitor::stopMonitoringAFence(CLFenceMonitorLogic::MonitoredFencesIter &)
Fence: stopMonitoring, %{private}s
void CLFenceMonitor::handleMonitoringDataChanged(const CLFenceManager_Type::Fence &)
Fence: Got monitoring data changed for %{private}s/%{private}s
MonitoringTechOptions CLFenceMonitor::getAvailableTech()
Fence: location services is disabled, no tech available
MonitoringTechOptions CLFenceMonitor::getRequiredTechLevel(const CLFenceMonitorLogic::MonitoredFencesIter &, const CLDaemonLocation &)
Fence: fence, %s, requiredTech, %s, fine, %d, large, %d
void CLFenceMonitor::adjustTechLevel(const CLFenceMonitorLogic::MonitoredFencesIter &, MonitoringTechOptions, bool)
Fence: adjustTechLevel, fence, %s, newOptions, %s, availableTech, %s, statusChanged, %d
Fence: stopOptions, %s
Fence: Stopping tech 0x%x (active is 0x%x) for %s/%s
Fence: startOptions, %s
Fence: Starting tech 0x%x (active is 0x%x) for %s/%s
Fence: fence, %s, newTech, %s, status, %s
Fence: Tech level for, %s, adjusted to, 0x%x, %s
void CLFenceMonitor::handleLocation(const CLDaemonLocation &)
Fence: handleLocation, location, %{private}s, services, %{private}d, airplane, %{private}d, connected, %{private}d
Fence: handleLocation, Ignoring cell or LAC position as per defaults
Fence: handleLocation, Ignoring WiFi position as per defaults
Fence: handleLocation, Ignoring GPS position as per defaults
Fence: handleLocation, Ignoring Pipeline position as per defaults
Fence: cancelLocationWatchdog, num fences, %lu, location type, %s
Fence: Handling location, %{private}+.8f, %{private}+.8f, acc, %{private}.2f, timestamp, %{private}.1lf
Fence: dispatch, handleLocation, fence, %s, monitoringStarted, %d, slc, %d, distanceFromPrevHandledLocaiton, %.1lf
Fence: ignore location update, kFenceMonitorFarFarAway, %lf
Fence: ignore location update, locationChangedSignificantly, %d
Fence: request a scan to comfirm cell location, fences, %lu
Fence: cancelLocationWatchdog, wifi off, minDistance, %lf
Fence: requesting a scan, numOfFencesNeedScan, %d, minDistanceToFence, %.1lf
handleLocation.cell2wifi
Fence: avoid a scan, numOfFencesNeedScan, %d, minDistanceToFence, %.1lf
fenceUpdate
numOfDispatchedChecks
minDistanceToFence
void CLFenceMonitor::handleLocationFence(const CLDaemonLocation &, const CLFenceManager_Type::Fence &)
Fence: Attempt to handle location <%+.8f,%+.8f> acc %.2f for non-present fence %s/%s
void CLFenceMonitor::handleLocationMonitoredFence(const CLDaemonLocation &, CLFenceMonitorLogic::MonitoredFencesIter &)
Fence: %s, filtering unwanted, %s, nofitication, not interested in entry
Fence: %s, filtering unwanted, %s, nofitication, not interested in exit
Fence: %s, filtering unwanted, %s, nofitication, has not achieved settled state yet
Fence: %s, filtering unwanted, %s, nofitication, never achieved settled state for entry notification
Fence: %s, filtering unwanted, %s, nofitication, not interested in conservative entry
Fence: fenceUpdate, %s, bundle, %s, type, %-16s, loc, %12.7lf, %12.7lf, acc, %4.0lf, distance, %9.0lf, tech, %4s%s, change, %d, cont, %d, fence, %12.8lf, %12.8lf, %.1lf, %.1lf, sCount, %d, %d, trig, %d, %d, sinceLastLoc, %.1lf, events, 0x%08x, status, %-10s => %-10s, settled state, %s ==> %s, cantShiftButNeedTo, %d
Fence: Adjusting technologies based on, %+.8f,%+.8f, acc, %.2f, distance, %.1lf
CLFenceMonitor
skyhook is no longer supported
void CLFenceMonitor::handleNoWifiApsArea(CLFenceMonitor::FenceMonitorLowPriorityAction *)
Fence: handleNoWifiApsArea, recalculated, %d, fMinDistanceToFence, %.1lf, fMinDistanceToFenceTimestamp, %.1lf
void CLFenceMonitor::checkPostponeContinuousTracking(const CLLocationType &, const bool)
Fence: postpone tracking timer
void CLFenceMonitor::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Fence: Ignoring expired location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f
Fence: Got unknown location notification %d
void CLFenceMonitor::onCellMonitorNotification(int, const CLFenceMonitor_Type::Notification &, const CLFenceMonitor_Type::NotificationData &)
Fence: Cell monitoring is disabled; ignoring cell monitor notification %d
Fence: Got kNotificationTriggerReceived from cell
cell.kNotificationTriggerReceived
Fence: Got kNotificationDelayTriggerReceived from cell
Fence: Got cell kNotificationMonitoringAvailable, available, %d
cell.kNotificationMonitoringAvailable
Got unknown cell monitor notification %d
void CLFenceMonitor::onWifiMonitorNotification(int, const CLFenceMonitor_Type::Notification &, const CLFenceMonitor_Type::NotificationData &)
WiFi monitoring is disabled; ignoring cell monitor notification %d
Fence: Got kNotificationTriggerReceived from WIFI, cancelDelayedDeAssociationTrigger, %d
wifi.kNotificationTriggerReceived
Fence: Got kNotificationDelayTriggerReceived from WIFI
Fence: Got WiFi kNotificationMonitoringAvailable, available, %d
wifi.kNotificationMonitoringAvailable
Fence: Got kNotificationReCheckContinuousEngagement
Fence: Got kNotificationNoLocationAfterScan
Fence: Got kNotificationFenceDownloadRequest
Fence: Got unknown WiFi monitor notification %d
void CLFenceMonitor::engageContinuousTrackingIfNeeded()
Fence: engageContinuousTrackingIfNeeded, now, %d, FenceMonitoWifi, %d, kNotoficationLocationChanged, %d, wifiTracking, %d, isLocationEnabled, %d, isWifiPowered , %d
Fence: location services disabled, no continous tracking, %d, isAirplaneMode, %d, cConnected, %d
Fence: FenceMonitorWifi needs tracking
Fence: SLC wants to track the current location
Fence: numOfMonitoredFences, %d, simple, enable cont tracking
Fence: engageContinuousTrackingIfNeeded, isEngageContinousTracking, %d, numOfMonitoredFences, %d
Fence: engageContinuousTrackingIfNeeded, timeToNextTimer, %lf
engageContinuousTrackingIfNeeded
void CLFenceMonitor::onContinuousMonitorNotification(int, const CLFenceMonitor_Type::Notification &, const CLFenceMonitor_Type::NotificationData &)
Fence: Continuous monitoring is disabled; ignoring continuous monitor notification %d
Fence: Got kNotificationTriggerReceived from Continuous
kNotificationTriggerReceived
void CLFenceMonitor::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Fence: Got kNotificationAirplaneMode, airplaneMode, %{public}d, %{public}d, %{public}d
kNotificationAirplaneMode
Fence: invalidate location watchdog
Fence: Got kNotificationBattery, level, %{private}lf, charged, %{private}d, connected, %{private}d, wasConnected, %{private}d
kNotificationBattery
Fence: tether triggers are disabled
Fence: unknown notification, %d
void CLFenceMonitor::onWifiNotificationScan(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
Fence: cached isWifiPowered, %d, isLocationEnabled, %d, numOfFences, %lu, notificaiton, %d, fIsWaitingForLocationCount, %d, fScanRetryCounter, %d, reachability, %d
scan result, count, wait, %{public}d, retry, %{public}d, error
Fence: monitor, got kNotificationScanError
Fence: monitor, got kNotificationScan, scanResultVector, %{private}lu, scanTimestamp, %{private}.1lf, age, %{private}.1lf
Fence: monitor, got unhandled, %d
Fence: no reachability, expedite watchdog, %.1lf
Fence: no urgent watchdog, GPS client, %p, urgentWatchdogActivation, %.1lf
Fence: startScan, requesting a scan due to an error / empty scan, fScanRetryCounter, %d
onWifiNotification
Fence: expedite location watchdog due to empty / error scan , %d, %d, urgentWatchdogActivation, %.1lf
void CLFenceMonitor::onWifiNotificationState(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
Fence: cached isWifiPowered, %{public}d, isLocationEnabled, %{public}d, numOfFences, %{public}lu, notification, %{public}d, wait, %{public}d, count, %{public}d, reachability, %{public}d
Fence: Got kNotificationPower, isWifiPowered, %{public}d
void CLFenceMonitor::triggerReceived(const char *, bool)
Fence: triggerReceived, reason, %{private}s, schedule a consolidated trigger, %{private}p, fIsConsolidatedTriggerPending, %{private}d, fConsolidatedTriggersTimeInterval, %{private}.2lf, isLocationWatchdogNeeded, %{private}d, %{private}d
void CLFenceMonitor::triggerReceivedNow()
Fence: triggerReceivedNow, isWifiPowered, %{public}d, isLocationEnabled, %{public}d, numOfFences, %{public}lu, airplane, %{public}d, connected, %{private}d, watchdogNeeded, %{private}d, minDist, %{private}.1lf, %{private}.1lf, minDistNextWake, %{private}.1lf
Fence: triggerReceivedNow, isWifiPowered, %d, isLocationEnabled, %d, numOfFences, %lu, airplane, %d, fIsLocationWatchdogNeeded, %d, fMinDistanceToFence, %.1lf, %.1lf, minDistanceToFencesOnNextWake, %.1lf
Fence: Trigger received; performing WiFi scan, minDistanceToFence, %.1lf
Fence: ignoring trigger event, isWifiPowered, %d, locationServicesEnabled, %d, airplane, %d, cConnected, %d, numOfFences, %zu, fMinDistanceToFence, %.1lf, %.1lf
bool CLFenceMonitor::canPerformMonitoringForFence(const CLFenceManager_Type::Fence &, CLFenceManager_Type::Fence &)
Fence: Cannot monitor %{public}s/%{private}s because the radius is too large, suggesting, %{private}.1lf
void CLFenceMonitor::requestScan()
Fence: last watchdog fired, %.1lf, ago, watchdogInterval, %1lf
need a scan, count, %{public}d, %{public}d, lwatchdog, %{private}.1lf, interval, %{private}.1lf, needWatchdog, %{public}d
Fence: startScan, type, %d, requesting a scan, %.1lf, %.1lf, since last scan, watchdog armed in, %.1lf, at, %.1lf, numOfFences, %lu, fIsWaitingForLocationCount, %d, isWifiPowered, %d, fScanRetryCounter, %d, airplane, %d, cConnected, %d
requestScan
Fence: startScan, type, %d, requesting a scan, %.1lf, %.1lf, since last scan, watchdog armed in, %.1lf, at, %.1lf, numOfFences, %lu, fIsWaitingForLocationCount, %d, isWifiPowered, %d, fScanRetryCounter, %d, airplane, %d, cConnected, %d, scan rejected ! 
Fence: startScan, requesting a receovery scan
requestScan.recovery
void CLFenceMonitor::scheduleLocationWatchdog(CFTimeInterval)
Fence: scheduleLocationWatchdog, at %{private}.1lf, in, %{private}.1lf, seconds
Fence: scheduleLocationWatchdog, ignore, shutdown?
void CLFenceMonitor::cancelLocationWatchdog()
Fence: loc watchdog cancel, count, %{public}d, %{public}d, client, %{public}p
Fence: cancelLocationWatchdog
Fence: cancelLocationWatchdog, ignore, shutdown?
void CLFenceMonitor::onLocationWatchdogExpired(CLPersistentTimer *)
loc watchdog expired, count, %{public}d, %{public}d
Fence: onLocationWatchdogExpired, since last, %.1lf, isLocationEnabled, %d, last scan, %.1lf, fIsWaitingForLocationCount, %d, sinceLastGpsSession, %.1lf, %.1lf, sinceLastContTimer, %.1lf, %.1lf, fScanRetryCounter, %d
onLocationWatchdogExpired
sinceLastGpsSession
kSecondsBetweenGPSSessions
sinceLastContTimer
Fence: startScan, fIsWaitingForLocationCount, %d, request one more scan, next date, %.1lf, watchDogInterval, %.1lf
Fence: onLocationWatchdogExpired, increment fIsWaitingForLocationCount, %d
void CLFenceMonitor::onDelayedTriggerTimer(CLPersistentTimer *)
Fence: onDelayedTriggerTimer, sleep period, %.1lf, isLocationEnabled, %d, count, %d, %d, sinceLastTrigger, %.1lf
onDelayedTriggerTimer
Fence: onDelayedTriggerTimer, trigger already processed, sinceLastTrigger, %.1lf
void CLFenceMonitor::onDeAssTriggerTimer(CLPersistentTimer *)
Fence: onDeAssTriggerTimer, sleep period, %.1lf, isLocationEnabled, %d, count, %d, %d, sinceLastTrigger, %.1lf
onDeAssTriggerTimer
Fence: onDeAssTriggerTimer, trigger already processed, sinceLastTrigger, %.1lf
void CLFenceMonitor::onContinousTrackingTimer(CLPersistentTimer *)
Fence: onContinousTrackingTimer, sleep period, %.1lf, isLocationEnabled, %d, sinceLastTrigger, %.1lf
onContinousTrackingTimer
Fence: onContinousTrackingTimer, trigger already processed, sinceLastTrigger, %.1lf
virtual void CLFenceMonitor::shutdown()
Fence: CLFenceMonitor, shutdown
void CLFenceMonitor::onConsolidatedTrigger(CFRunLoopTimerRef)
Fence: where is my timer?
Fence: ignore, onConsolidatedTrigger, shutdown?
Fence: onConsolidatedTrigger, calling triggerReceivedNow
bool CLFenceMonitor::requestWifiLocationUpdate(const char *)
Fence: requestWifiLocationUpdate, reason, %s
Fence: request update, reason, %{private}s
CLFenceManager_Type::FenceStatus CLFenceMonitor::getCurrentFenceState(const CLFenceManager_Type::Fence &)
Fence: requestRegionState, %{private}s/%{private}s
Fence: requestRegionState, %s/%s, NOT FOUND
Fence: requestRegionState, %s/%s, currentState, %d, %s
void CLFenceMonitor::createActivityAlarm(const char *)
Fence: createActivityAlarm, %{private}s, %{private}p, fIsUseActivityAlarm, %{private}d
void CLFenceMonitor::createActivityAlarm(const char *)_block_invoke
Fence: activityAlarmHandler, %{private}p, %{private}s, trigger, %{private}d
activityAlarmHandler
createActivityAlarm-cleanup
Fence: createActivityAlarm, %s, created, %p, trigger, %d
void CLFenceMonitor::releaseActivityAlarm(const char *)
Fence: releaseActivityAlarm, %{private}s, %{private}p
void CLFenceMonitor::monitorSettled(bool)
Fence: start monitoring scenario trigger settled
Fence: stop monitoring scenario trigger settled
void CLFenceMonitor::onScenarioTrigger(RTScenarioTrigger *)
Fence: received scenario trigger, %{private}s
void CLFenceMonitor::onSettledTimerExpired(CLPersistentTimer *)
Fence: settled timer expired
void CLFenceMonitor::handleSettled()
Fence: dispatch, handleSettled, fence, %s, monitoringStarted, %d, monitoringSettled, %d
void CLFenceMonitor::stopGps()
Fence: unregister gps client, %{private}p
CombinedFence
(No)
(Yes)
virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLFenceMonitor_Type::Notification, NotificationData_T = CLFenceMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
CLFenceMonitorContinuous
CLFenceMonitorWifi
FenceWiFiScanOnWake
CLFenceMonitorWifi::CLFenceMonitorWifi(CLSilo *)
Performing WiFi scan on system wake
Fence: failed to getAssociatedNetwork
Fence: failed to determine airplane mode
virtual void CLFenceMonitorWifi::shutdown()
Fence: CLFenceMonitorWifi, shutdown
void CLFenceMonitorWifi::setAirplaneMode(bool)
Fence: airplane mode is now, %d, was, %d
bool CLFenceMonitorWifi::startMonitoring(const CLFenceManager_Type::Fence &, bool)
Fence: Starting to monitor %{private}s/%{private}s for %{private}s
bool CLFenceMonitorWifi::stopMonitoring(const CLFenceManager_Type::Fence &)
Fence: Stopping monitoring for %{private}s/%{private}s
void CLFenceMonitorWifi::handleMonitoringDataChanged(const CLFenceManager_Type::Fence &)
Fence: Got monitoring data changed for %{private}s/%{private}s; recalculating
bool CLFenceMonitorWifi::recalculateIfNeeded()
Fence: isRecalculate, %{private}d, fIsRecalculationPending, %{private}d, sinceLastRecalculationTrigger, %{private}.1lf
Fence: power assertion no longer needed
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLFenceMonitorWifi.mm
void CLFenceMonitorWifi::recalculate()
Fence: recalculate, take power assertion
recalculate
Fence: ignore recalculation, shut down?
void CLFenceMonitorWifi::resetConsecutiveExits()
Fence: resetConsecutiveExits start, %.1lf, count, %d
void CLFenceMonitorWifi::resetScanResult()
void CLFenceMonitorWifi::calculateAPsForFences(const MonitoredFences &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, double, bool &)
void CLFenceMonitorWifi::recalculateNow()
Fence: ignoring recalculateNow, shut down?
void CLFenceMonitorWifi::recalculateNow()_block_invoke
Fence: Recalculating monitored WiFis for %{private}ld monitored fences
Fence: Visible APs are stale (from %{private}.2f), not using for fence calculation
Fence: Last visible APs are stale (from %{private}.2f), not using for fence calculation
Fence: Including %{private}ld visible APs in fence calculation (from %{private}.2f)
Fence: avoid fence calculateAPsForFences, numOfFences, %{private}lu, airplane, %{public}d
Fence: isWifiTrackingAvailable is false
Fence: no visible APs, need continuous tracking
Fence: fIsContinuousMonitoringNeeded, %d
Fence: exit sequence is too long, reset, sinceSequenceStart, %.1lf, %.1lf
Fence: countUpdate, countUpdated, %d, sinceSequenceStart, %6.1lf, sequenceThresh, %6.1lf, sequenceCount, %3d, newCount, %3d, airplane, %d, e, %lu, x, %lu, v, %lu
Fence: Setting %{private}ld background scan entry networks
Fence: Setting %{private}ld background scan exit networks
Fence: recalculate, release power assertion
Fence: sending kNotificationReCheckContinuousEngagement
void CLFenceMonitorWifi::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Fence: Device woke; sending trigger
Fence: WiFi just lost (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recentlyWoke, %{private}d,
Disconnection
Fence: kNotificationReachability, aboutToSleep, request a delayed trigger as well, sinceLastDelayedTrigger, %f, isDeAssTriggerWanted, %d
Fence: about to sleep or recently woke without WoW, ignoring, kNotificationReachability
Fence: WiFi just connected (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recentlyWoke, %{private}d,
void CLFenceMonitorWifi::takePowerAssertionIfNeeded_nl(bool, const char *)
Fence: take power assertion, reason, %{private}s, airplane, %{private}d
Fence: power assertion not needed, reason, %{private}s, airplane, %{private}d, isMonitoringFences, %{private}d
db != nullptr
BEGIN EXCLUSIVE TRANSACTION
void CLSqliteTransaction::beginTransaction()
#sqlitetransaction, begin exclusive transaction failed
COMMIT
void CLSqliteTransaction::commit()
#sqlitetransaction, commit failed
void CLSqliteTransaction::rollback()
rollback #sqlitetransaction
ROLLBACK TRANSACTION
#sqlitetransaction, rollback transaction failed
resultCode
path
main
Path unavailable
CLGeomagneticModelProviderDaemon
CLGeomagneticModelProviderClient
const T &CMQueue<CLSwimStrokeCounter::VectorSample>::operator[](const size_t) const [T = CLSwimStrokeCounter::VectorSample]
POST
static void CLDataUploader::uploadSynchronously(const char *, char *, int)
Could not upload data
temperature
Tf,N,V_pressure
hasTemperature
Tf,N,V_temperature
com.apple.locationd.CLSEUnzipQueue
https://cl3.apple.com/1/v1/
clsef.bin.gz
clsef.bin
CLSignalEnvironmentProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/SignalEnvironment/CLSignalEnvironmentProvider.mm
-[CLSignalEnvironmentProviderAdapter beginService]
CLSignalEnvironmentProvider
virtual bool CLSignalEnvironmentProvider::registerForNotificationInternal(const CLSignalEnvironmentProvider_Type::Notification &)
CLSE, Client registered for notification %d
virtual bool CLSignalEnvironmentProvider::unregisterForNotificationInternal(const CLSignalEnvironmentProvider_Type::Notification &)
CLSE, Client unregistered for notification %d
void CLSignalEnvironmentProvider::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
CLSE,fromSignalEnv,%d,toSignalEnv,%d
void CLSignalEnvironmentProvider::downloadFileIfNeeded()
CLSE,download request,url,%s,storeTo,%s,retryInterval,%.1lf
CLSE,could not setUpdateSource AVL file updater
CLSE,could not setUpdateRate AVl file updater
void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)
CLSE,download status,STARTED
CLSE,downloaded,%s
Cannot set protection class for CLSE downloaded file,%s
void CLSignalEnvironmentProvider::onSignalEnvironmentUpdated(CLFileUpdate *, CLFileUpdate::UpdateStatus)_block_invoke
CLSE,decompressed,%s,to,%s
Cannot set protection class for CLSE decompressed file,%s
CLSE,download request failed,%s,retryMultiplier,%d
virtual void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLSignalEnvironmentProvider_Type::Notification, NotificationData_T = CLSignalEnvironmentProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::onDataAvailable() [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]_block_invoke
void CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::onDataAvailable() [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]
CLRestingNotifier
virtual void CLRestingNotifier::numberOfSpectatorsChanged(int, size_t)
static void CLRestingNotifier::onAccelerometer(const CLAccelerometer::Sample *, void *)
CLRemoteMotionAlarmSilo
motionAlarmClients
T@"NSMutableSet",&,N,V_motionAlarmClients
lastKnownMotionState
Ti,N,V_lastKnownMotionState
resendTimer
T@"CLTimer",&,N,V_resendTimer
revertToUnknownTimer
T@"CLTimer",&,N,V_revertToUnknownTimer
CLUnifiedCellLocationProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Cell/CLUnifiedCellLocationProvider.mm
-[CLUnifiedCellLocationProviderAdapter beginService]
+[CLUnifiedCellLocationProviderAdapter(IsSupported) isSupported]
@ClxCell, supported, %{public}d
static CLUnifiedCellLocationProvider *CLUnifiedCellLocationProvider::instanceForSilo(CLSilo *)
UnifiedCell
cell
CellShowUIUnknownCell
CLUnifiedCellLocationProvider::CLUnifiedCellLocationProvider(CLSilo *)
CELL_LOC: fCellShowUIUnknownCell (%d)
CellIsUseNetworkLocationProvider
CELL_LOC: fIsUseNetworkLocationProvider, %d
CellIsUseTilesManager
CELL_LOC: fIsUseTilesManager, %d
@ClxCell, enabled, %{public}d
CellLocDelayedCellLocationPropagationTimer
virtual CLUnifiedCellLocationProvider::~CLUnifiedCellLocationProvider()
CELL_LOC: delete CLUnifiedCellLocationProvider
virtual bool CLUnifiedCellLocationProvider::registerForNotificationInternal(const CLLocationProvider_Type::Notification &)
CELL_LOC: registerForNotificationInternal, notification, %d
virtual bool CLUnifiedCellLocationProvider::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)
CELL_LOC: unregisterForNotificationInternal, notification, %d
virtual void CLUnifiedCellLocationProvider::shutdown()
CELL_LOC: shutdown
void CLUnifiedCellLocationProvider::onDpcSource()
CELL_LOC: onDpcSource
CELL_LOC: calling onDpcSource, refreshCellMonitor
Cell 
acc 
virtual void CLUnifiedCellLocationProvider::showCellUIDialog(const CLCell &, const CLDaemonLocation &, bool)
CELL_LOC: SHOW CELL UI : (%s) <%lf, %lf> acc %lf
CELL_LOC
Unknown Cell 
CELL_LOC: SHOW UNKNOWN CELL UI : (%s)
Unknown Cell
void CLUnifiedCellLocationProvider::refreshCellState(bool)
CELL_LOC: refresh cell state
virtual CLNetworkLocationProvider::BestMatchLevel CLUnifiedCellLocationProvider::getCellFromTilesManager(const CLCell &, CLDaemonLocation &)
CELL_LOC: getCellFromTilesManager, fIsUseTilesManager, is false
CELL_LOC: getCellFromTilesManager, isFound, %d, cell, %s, location, %s
virtual void CLUnifiedCellLocationProvider::handleLocationFailed()
@ClxCell, Fix, 0, ll, N/A, Failed
bool CLUnifiedCellLocationProvider::isRegisteredOnNetwork()
CELL_LOC: TelephonyService is ready
not registered, cannot deduce cell fix
virtual bool CLUnifiedCellLocationProvider::getCurrentCells()
CELL_LOC: Failed to get current cells
CELL_LOC: current cell, size, %zu
CELL_LOC: current cell, isUse, %d, index, %zu, %s
Cell
void CLUnifiedCellLocationProvider::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
ClientManager notification received.
Location privacy reset, clearing location data.
Location services disabled, clearing location data.
Unhandled ClientManagerNotification.
void CLUnifiedCellLocationProvider::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Fence: CLDaemonStatus_Type::kNotificationWake, hasLocationClients, %d
Fence: CLDaemonStatus_Type::kNotificationReachability, reachability, %d, %d, clients, %d
CELL_LOC: refresh cell monitor on wake / reachability
void CLUnifiedCellLocationProvider::onTelephonyNotification(int, const CLTelephonyService_Type::Notification &, const CLTelephonyService_Type::NotificationData &)
CELL_LOC: received %s
telNotification
CELL_LOC: location services are disabled, ignore scan result
disconnected from CT, cannot deduce cell fix
CELL_LOC: unknown CT notification %s
refresh cell monitor
void CLUnifiedCellLocationProvider::onDelayedCellPropagationTimer(CLPersistentTimer *)
CELL_LOC: ignoring, onDelayedCellPropagationTimer, timer, %p, %p
CELL_LOC: call refreshCellState
CELL_LOC: onDelayedCellPropagationTimer,since last trigger,%.1lf,nextWakeDate,%.1lf
void CLUnifiedCellLocationProvider::onNetworkLocationNotification(int, const CLNetworkLocationProvider_Type::Notification &, const CLNetworkLocationProvider_Type::NotificationData &)
CELL_LOC: cell queries failed
CELL_LOC: recalculating current cell location, by waking the DPC, %p
WalkModelMetsScale
virtual float CLNatalieWalkModel::computeWorkRateMETS(const CLNatalieModelInput &)
Natalie Model, Walk Linear Regression, WorkRate, %f, distance(m), %f, duration(s), %f, mets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f
Natalie Model, Grade correction applied, Grade type, %d, vertical speed %f, interval %f, workrate %f, mets %f, mets + grade %f, percent grade %f 
CLLteCellLocationDatabase::CLLteCellLocationDatabase(const char *, const CLSqliteDatabase::SqliteProperties &, double)
bool CLLteCellLocationDatabase::getLocation(const CLTelephonyService_Type::LteCell &, sqlite3_int64 &)
CELL_LOC: failed to bind %s
bool CLLteCellLocationDatabase::setLocation(const CLTelephonyService_Type::LteCell &, const CLDaemonLocation &)
CELL_CEN: adding cell, %s, rowid, %lld
bool CLLteCellLocationDatabase::getLocation(sqlite3_int64, CLTelephonyService_Type::LteCell &) const
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Motion/DeviceMotion/CLSensorCalibrationStaticDetector.mm
CLSensorCalibrationStaticDetectorMotionCoprocessor::CLSensorCalibrationStaticDetectorMotionCoprocessor(CLSensorCalibrationStaticDetector::TriggerType, NSTimeInterval, dispatch_queue_t, Handler)
CLSensorCalibrationStaticDetectorAccel
CLSensorCalibrationStaticDetectorAccel::CLSensorCalibrationStaticDetectorAccel(CLSensorCalibrationStaticDetector::TriggerType, NSTimeInterval, CLSilo *, Handler)
LogGyroCalibrationStaticDetectorAccelState
void CLSensorCalibrationStaticDetectorAccel::processStaticMoving(bool, CLMotionTypeTimestamp)
moving,%d,now,%f
void CLSensorCalibrationStaticDetectorAccel::fire()
CLSensorCalibrationStaticDetectorAccel::fire()
void CLSensorCalibrationStaticDetectorAccel::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)
RawAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f
FilteredAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,readyX,%d
Variance,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,Moving,%d
Accepted
Rejected
Replaced
AcceptedAndInsertMissing
std::vector<CLSwimDetectedLap> CLSwimLapDetect::addTurn(CLSwimDetectedTurn)
(stddev samples) w/ turn, %f, %d, w/o turn, %f, %d, threshold, %f, %f
Turn, %s, Time, %f, Total Strokes, %d, Current Strokes, %d, Style, %d, Result, %d
Converged,freestyle,%d,backstroke,%d,breaststroke,%d,butterfly,%d
bool CLSwimLapDetect::convergedHistoricalSessionTurns(CLSwimDetectedTurn, CLSwimStrokesPerTurnDistribution &) const
searchMedian, %f, historicalDistributionCount, %lu, historicalMatchingDistributionCount, %lu
std::pair<float, float> CLSwimLapDetect::getLapStrokeThreshold(CLSwimDetectedTurn) const
distribution,localLimits,min,%f,max,%f
distribution,historicalSessionLimits,min,%d,max,%f
distribution,lastGood-populationLimits,min,%d,max,%f
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Swimming/CLSwimLapDetect.cpp
float CLSwimLapDetect::SwimStats::prctile(float)
merge_azimuth_ranges
merged=
, mergedRange 
blockedAzimuth
origin 
, point 
, az,
, prev point,
merging start range 
 and end range 
blockedRanges has following contents:
getClosestPointOnPolygon
point,
, prev_point,
, point_iter,
, distanceSqr,
,min distance,
,closest,
,minClosestPoint,
std::vector<CLPlosPolygon::Particle> CLPlosPolygon::sampleExteriorPoints(const PolygonReal2D &, const float &, const float &)
PLOS: invalid outside offset %f
PLOS: bad poly, bad!
std::vector<CLPlosPolygon::Particle> CLPlosPolygon::sampleParticlesOnPolygon(const PolygonReal2D &, float)
PLOS: invalid step size %f
PLOS: miniscule edge!
CLPlosPolygon::PolygonReal2D CLPlosPolygon::inflatePolygon(const PolygonReal2D &, float)
PLOS: invalid distance %F
PLOS: invalid polygon size %d
PLOS: edge too small!
Verbose
hidden
-[CRIndoorWifiScan writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRIndoorWifiScan.m
nil != self->_mac
T@"NSString",&,N,V_mac
hasHidden
Ti,N,V_hidden
hasBundleId
NatalimetryUserInfoAge
NatalimetryUserInfoHeightM
NatalimetryUserInfoWeightKG
NatalimetryUserInfoGender
NatalimetryUserInfoHrmin
NatalimetryUserInfoHrmax
NatalimetryUserInfoPal
NatalimetryUserInfoVo2max
NatalimetryUserInfoRunVo2max
NatalimetryUserCondition
static float CLNatalieModelInput::computeDerivedVo2max(const CLBodyMetrics)
Derived Vo2max, %.1f, Revised Vo2max, %.1f, Minimum Vo2max, %.1f 
static float CLNatalieModelInput::estimateHRmin(const CLBodyMetrics &)
Estimated HRmin, %.1f 
void CLNatalieModelInput::setTime(CFAbsoluteTime)
Larger than expected gap between begin and end ts.  Setting end ts to some sane default. (%f, %f)
Event time, %.2f, GPS sample time, %.2f, distance, %.2f, speed, %.2f, altitude, %.2f
Act Dur(s), %.2f, Step Dur(s), %.2f, Step Counts, %d, Step Begin, %.2f, Step End, %.2f, distance, %.2f, Speed, %.2f, Grade type, %d, vertical speed, %.2f, HR, %f, coarse elevation, %d
void CLNatalieModelInput::updateBodyMetrics(const CLBodyMetrics &)
gender,%d,height,%f,weight,%f,vo2max,%f,age,%f,hrmin,%f,hrmax,%f,hronset,%f,pal,%f,condition,%d,runVo2max,%f
CLRunningAggregatorAWDSilo
-[CLRunningAggregatorAWD beginService]
Not companion. Returning.
CLStepCountNotifier
-[CLRunningAggregatorAWD endService]
Ending service
-[CLRunningAggregatorAWD syncgetCompanionOnlyNoGPSRun]
Reset to init state
-[CLRunningAggregatorAWD onStepNotification:data:]
Received steps
-[CLRunningAggregatorAWD updateSession:]
Received session update: %ld
-[CLRunningAggregatorAWD checkForRunningThreshold]
Minimum running time met
CLSwimPersistence
SELECT * FROM SwimDistributions ORDER BY id DESC
INSERT INTO SwimDistributions (loiUuid, poolLength, style, mean, median, min, max, stddev, samples, prctile10, prctile90, uuid) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
bool CLSwimPersistence::insertDistribution(const CLSwimStrokesPerTurnDistribution &)
Unable to persist distribution
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Swimming/CLSwimPersistence.mm
void CLSwimPersistence::purgeDistributions(int, int)
DELETE From SwimDistributions WHERE id <= (SELECT MAX(id) From SwimDistributions) - ?
Unable to purge old records.
SELECT COUNT(*) FROM SwimDistributions
int CLSwimPersistence::countDistributions() const
Unable to get the number of distributions
DELETE FROM SwimDistributions
void CLSwimPersistence::deleteAllDistributions()
Unable to delete all distributions!
SELECT * from SwimHistory ORDER by rowid DESC limit ?
CMError CLSwimPersistence::getEntries(int, std::vector<CLSwimEntry> &) const
Unable to get entries
SELECT * from SwimHistory WHERE uuid = ?
CMError CLSwimPersistence::getEntries(unsigned char *, std::vector<CLSwimEntry> &) const
Unable to get entries for uuid %s
SELECT * from SwimHistory WHERE id >= ?
CMError CLSwimPersistence::querySince(const CLSwimEntry &, std::vector<CLSwimEntry> &) const
Failed to bind id in query, %llu
SELECT * from SwimHistory ORDER BY rowid DESC LIMIT 1
DELETE from SwimHistory WHERE startTime < ?
long CLSwimPersistence::aggregateRecordsInternal(const CLAggregationRules &, CFAbsoluteTime)
Unable to get purge records.
SELECT * from SwimHistory
SwimHistory
SwimDistributions
DELETE FROM SwimHistory
INSERT INTO SwimHistory (uuid, startTime, endTime, timestamp, pace, distance, poolLength, entryType, style, numberOfStrokes, totalLaps) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
virtual void CLSwimPersistence::insertRecordUL(const CLSwimEntry &, bool)
Unable to insert swim record.
entryType
style
numberOfStrokes
totalLaps
loiUuid
mean
median
stddev
samples
prctile10
prctile90
bool CLActivityRecorderDb<CLSwimEntry>::isValidTime(CFAbsoluteTime &) const [T = CLSwimEntry]
virtual void CLActivityRecorderDb<CLSwimEntry>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLSwimEntry]
gestures
EnableEarGestureLogging
static void CLGestureLog::create(unsigned int)
Release type = %d. %s gesture logging
Enabling gesture logging
NOT enabling gesture logging
GestureLogUploadUrl
CLGestureLog::CLGestureLog(unsigned int)
Uploading logs to %s
STATUS,DEVICE,Version,%s
STATUS,DEVICE,Model,%s
STATUS,DEVICE,UDID,%s
STATUS,DEVICE,SerialNumber,%s
%s%s%.1f.log
static void CLGestureLog::onButton(void *, int, bool, const CFTimeInterval)
type,%d,down,%d
%s%s
static void CLGestureLog::removeLogIfTooOld(const char *)
File %s was created %f days ago. Removing
Could not get file creation time for %s
https://cl-dev.apple.com/cm/cmdata1/6J4ZRPT9XAD_3.php
GestureCaptureManual_
GestureCapture
CLCoverState
<(%.2f,%.2f],State,%ld,kValue,%f>
kValue
Td,N,V_kValue
begin
Td,N,V_begin
lowerQuartile
center
upperQuartile
Td,N,V_end
StrideCalibrationDataBins
StrideCalibrationBins
Bin,%02lu,(%.2f,%.2f],State,%ld,kValue,%f,RetrievedKValue,%f
%@, <
-[CMStrideCalibrationBins logBins]
-[CMStrideCalibrationBins kValueForSpeed:]
bin %lu for speed %f invalid
-[CMStrideCalibrationBins updateBinsWithTrack:]
binIndex %lu invalid
TrackCalibration,Success,AllChecksPassed,%s,oldBinCalibrationData,%s,newBinCalibrationData,%s,PaceBin,%lu,Speed,%f
CLMotionSyncStore
v8@?0^{CLMotionSyncStore=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}4
-[CMStrideCalibrationBins resetBins]
Resetting stride calibration bins.
kCMStrideCalibrationDataCodingKeyBegin
kCMStrideCalibrationDataCodingKeyEnd
kCMStrideCalibrationDataCodingKeyState
kCMStrideCalibrationDataCodingKeyKValue
muid
providerIdentifier
triggerType
triggerTimestamp
triggerSubType
TQ,N,V_muid
hasProviderIdentifier
Ti,N,V_providerIdentifier
hasTriggerType
Ti,N,V_triggerType
hasTriggerTimestamp
Td,N,V_triggerTimestamp
hasTriggerSubType
Ti,N,V_triggerSubType
Type_Unknown
Passbook
Visit
void SqliteDatabase_Helper_performIntegrityCheck()
Database isn't valid; not perfomring integrity check
performIntegrityCheck took %f seconds.
void SqliteDatabase_Helper_recoverFromCorruptionIfNecessary(const std::string &, bool)
Database doesn't exist yet; not performing integrity check
Failed to close connection after integrity check: %d
Failed to open database '%s' after restoring from backup: %d
Killing locationd to resolve corrupted database.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLSqliteDatabase_Helper.mm
void SqliteDatabase_Helper_dropObsoleteTablesFromConsolidatedDatabase()
Database isn't valid; not dropping obsolete tables
Couldn't setSecureDeleteEnabled(%d) for old database!
CellLocationCounts
CellLocationBoxes
CellLocationLocalCounts
CellLocationLocalBoxes
CdmaCellLocationCounts
CdmaCellLocationBoxes
CdmaCellLocationLocalCounts
CdmaCellLocationLocalBoxes
WifiLocation
WifiLocationCounts
WifiLocationBoxes
WifiLocationLocal
WifiLocationLocalCounts
WifiLocationLocalBoxes
CellLocationHarvest
CellLocationHarvestCounts
CdmaCellLocationHarvest
CdmaCellLocationHarvestCounts
WifiLocationHarvest
WifiLocationHarvestCounts
WtwLocationHarvest
WtwLocationHarvestCounts
LocationHarvest
LocationHarvestCounts
CompassSettings
UPDATE Fences SET LastStatus = -1
Couldn't vacuum old database!
void CLSubHarvesterMicroLocation::collectAndSubmit(ShouldCancelFunction)
Harvest should only be running on an internal install
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Harvester/MicroLocation/CLSubHarvesterMicroLocation.mm
MicroLocation harvest was cancelled
CLGnssProviderSilo
-[CLGnssProviderAdapter initInSilo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/GPS/CLGnssProviderStub.mm
-[CLGnssProviderAdapter beginService]
-[CLGnssProviderAdapter endService]
-[CLGnssProviderAdapter resetControlPlaneStatus]
-[CLGnssProviderAdapter syncgetControlPlaneStatusReport:]
-[CLGnssProviderAdapter emergencyStateChange:]
addClient
CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::CLManagedLocationDatabase(std::string, bool, std::unique_ptr<IExternal>, std::string) [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]
void CLManagedLocationDatabase<CLWifiLocationDatabase, CLWifiLocationDatabase::WifiData>::beginInMemoryTransaction() [Database = CLWifiLocationDatabase, DataType = CLWifiLocationDatabase::WifiData]
CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::CLManagedLocationDatabase(std::string, bool, std::unique_ptr<IExternal>, std::string) [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]
Creating managed location database %s (count triggers %d, use cache %d)
Data protection is enabled, creating in-memory database for table %s
Persistent database failed to create despite data protection not enabled. Falling back to in-memory database
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLManagedLocationDatabase.h
void CLManagedLocationDatabase<CLCellLocationDatabase, CLTelephonyService_Type::Cell>::beginInMemoryTransaction() [Database = CLCellLocationDatabase, DataType = CLTelephonyService_Type::Cell]
-InMemoryDatabase
CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::CLManagedLocationDatabase(std::string, bool, std::unique_ptr<IExternal>, std::string) [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]
void CLManagedLocationDatabase<CLCdmaCellLocationDatabase, CLTelephonyService_Type::CdmaCell>::beginInMemoryTransaction() [Database = CLCdmaCellLocationDatabase, DataType = CLTelephonyService_Type::CdmaCell]
CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::CLManagedLocationDatabase(std::string, bool, std::unique_ptr<IExternal>, std::string) [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]
void CLManagedLocationDatabase<CLLteCellLocationDatabase, CLTelephonyService_Type::LteCell>::beginInMemoryTransaction() [Database = CLLteCellLocationDatabase, DataType = CLTelephonyService_Type::LteCell]
CLDataProtectionManagerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLDataProtectionManager.mm
-[CLDataProtectionManagerAdapter beginService]
-[CLDataProtectionManagerAdapter postDataAvailability]
client of CLDataProtectionManager is requesting a re-broadcast of data availability
DataProtectionManager
void CLDataProtectionManager::postDataAvailability()
Data availability is now %d
bool CLDataProtectionManager::deviceUnlockedSinceBoot()
device unlocked since boot, %d
CLDataProtectionManager
virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLDataProtectionManager_Type::Notification, NotificationData_T = CLDataProtectionManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
static CLOnBodyNotifier_Type::Params CLOnBodyNotifier_Type::Params::getParams(NSDictionary *, NSString *)
Using the manufacturer specific parameters (%s): %s
Using the default parameters: %s
Using the hardcoded parameters
static bool CLOnBodyNotifier_Type::Params::isValid(NSDictionary *)
Invalid parameters received:
com.apple.locationd.%s.%lx
bool CLPowerAssertion::takePowerAssertion(std::string)
Took, inc ref, %d, %s, thisReason, %s
%@(%s)
Took
%s, %s
bool CLPowerAssertion::releasePowerAssertion()
Release power assertion, %s, heldFor, %.2lf
Release power assertion, dec ref, %d, %s
CLStatusBarIconManagerSilo
T^{CLStatusBarIconManager={BasicMutex=^^?^{MutexInfo}}@{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}^{__CFRunLoopTimer}BB[6B]i{CLNameValuePair=^^?^{__CFDictionary}}[6[3d]]B},N,V_manager
StatusBarIconManager
SLCShowHollowIcon
void CLStatusBarIconManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Got client notification
void CLStatusBarIconManager::onDelayTimer(CFRunLoopTimerRef)
Delay timer fired
void CLStatusBarIconManager::sendStatusBarIconNotification()
Posting status bar icon visibility change notification
void CLStatusBarIconManager::handleReset()
Clearing status bar icon enabled states
StatusBarIconState CLStatusBarIconManager::iconStateFromClients()
%s is in state '%s'.
Notify delay of %.2fs for state '%s'; upgrading icon state
Waiting %.2f seconds for location indicator to change states
iconStateFromClients, overallIconState, '%s', overallNotifyDelay, %.4lf
void CLStatusBarIconManager::checkIconVisibleStatus(bool)
E911 is active; forcing icon on.
Location icon should now be in state '%s'
StatusBarIconStates
Application
Bundle
SystemService
FindMyiPhone
EmergencyService
Inactive
Region Monitoring
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Framework/CoreMotion/CMWorkout.mm
type < kCMWorkoutTypeMax
Swimming
OutdoorWheelchairWalk
OutdoorWheelchairRun
Unhandled workout type
%@, <sessionId %@, type, %@>
type >= kCMWorkoutTypeNone && type <= kCMWorkoutTypeMax
session >= kCMNatalieDataSessionNone && session <= kCMNatalieDataSessionMax
location < kCMSwimWorkoutLocationMax
-[CMSwimWorkout initWithSessionId:location:poolLength:]
pool length %f for workout is too small and may lead to undefined behavior.
Pool
OpenWater
%@, <sessionId %@, type, kCMWorkoutTypeSwimming, location, %@, poolLength, %f>
poolLength
kCMWorkoutDataCodingKeySessionId
kCMWorkoutDataCodingKeyType
kCMWorkoutDataCodingKeySwimLocation
kCMWorkoutDataCodingKeyPoolLength
CLMagnetometerCoexistenceNotifier
EnableMagnetometerCoexistenceCompensation
static void CLMagnetometerCoexistenceNotifier::create()
CPAS data response was invaild.
CPAS data is NULL
cpas version is %u, length is %ld bytes
Warning: cpas data was found but did not match any versions. version (%u) length (%ld)
Magnetometer coexistence compensation is disabled
CLStreamingAwareLocationProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/CLStreamingAwareLocationProvider.mm
-[CLStreamingAwareLocationProviderAdapter beginService]
CLStreamingAwareLocationProvider
Streaming aware location provider
CLRemoteMotionAlarm
auto CLStreamingAwareLocationProvider::CLStreamingAwareLocationProvider(CLSilo *)::(anonymous class)::operator()(bool) const
Turning on step count notifications
Turning off step count notifications
void CLWifiServerResponseListener::beginSeries()
TILE: beginSeries
void CLWifiServerResponseListener::endSeries()
TILE: endSeries, size, %lu
TILE: endSeries, checking tile, count, %u,  localLocation, %14.8lf, %14.8lf
TILES: requestDownload, %.8f, %.8f
virtual void CLWifiServerResponseListener::onWifiAlsResponse(const std::vector<CLAlsWifiAccessPoint>, bool)
TILE: macAddressResolved, invalid hash value, %s
WifiServerResponseListener
Adding tile
WifiServerResponseListner
Increment count tile
NSString *bundlePathFromServiceName(const char *)
attempting to create service location provider with NULL service name
CLExerciseMinuteRecorderDb
virtual long CLExerciseMinuteRecorderDb::aggregateRecords(const CLAggregationRules &)
CMError CLExerciseMinuteRecorderDb::queryExerciseMinuteDataSince(CLExerciseMinuteData &, std::vector<CLExerciseMinuteData> &) const
ExerciseMinuteHistory not accessible
Potential DB reset / roll back, returning all records to clients,mru.recordId,%d,record.recordId,%d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Natalimetry/ExerciseMinute/CLExerciseMinuteRecorderDb.mm
void CLExerciseMinuteRecorderDb::setFinishedInsertHandler(CLSilo *, CLExerciseMinuteDataFinishedInsertHandler)
ExerciseMinuteHistory
SELECT COUNT(*) FROM ExerciseMinuteHistory
SELECT * FROM ExerciseMinuteHistory ORDER BY startTime ASC
SELECT * FROM ExerciseMinuteHistory WHERE id >= ? ORDER BY id ASC LIMIT ?
DELETE FROM ExerciseMinuteHistory WHERE startTime < ?
DELETE FROM ExerciseMinuteHistory WHERE startTime > ?
DELETE FROM ExerciseMinuteHistory
INSERT INTO ExerciseMinuteHistory (startTime) VALUES (?)
UPDATE ExerciseMinuteHistory SET startTime = startTime + ?
SELECT * FROM ExerciseMinuteHistory ORDER BY startTime DESC LIMIT 1
virtual void CLExerciseMinuteRecorderDb::prepareSQLStatements()
virtual void CLExerciseMinuteRecorderDb::deleteRecordsAfterInsertUL(const CLExerciseMinuteData &)
virtual void CLExerciseMinuteRecorderDb::shiftRecordsByUL(CFTimeInterval)
virtual void CLActivityRecorderDb<CLExerciseMinuteData>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLExerciseMinuteData]
SqliteDatabaseManager
_SqliteDatabaseUseSecureDelete
_SqliteDatabaseUseIncrementalVacuum
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLSqliteDatabaseManager.mm
int CLSqliteDatabaseManager::openDatabase(CLSqliteDatabase::SqliteProperties, const std::string &, sqlite3 *&)
Attempted to open an encrypted database
pragma page_size = 4096;
pragma journal_mode=WAL;
pragma secure_delete = 
pragma cache_size = 5;
pragma cache_size = 100;
pragma cache_spill = 1000;
pragma recursive_triggers = true;
_SqliteTrace
virtual void CLCompass7::start(bool)
Compass for AOP started. CoverAttached %d
virtual void CLCompass7::stop()
Compass for AOP stopped.
virtual CFTimeInterval CLCompass7::minimumUpdateIntervalChanged(int, const CFTimeInterval &)
Setting compass update interval to %f
GyroCompass
CLMotionTypeCompass CLCompass7::populateMotionType(const CMDeviceMotionReport::Compass &, const CFTimeInterval &)
Type,%s,attitude.x,%.8f,.y,%.8f,.z,%.8f,.w,%.8f,calibrated.x,%.8f,.y,%.8f,.z,%.8f,uncalibrated.x,%.8f,.y,%.8f,.z,%.8f,gravity.x,%.8f,.y,%.8f,.z,%.8f,heading,%.1f,trueheading,%.1f,accuracy,%.1f,level,%d,status,%u,timestamp,%f
bool CLCompass7::populateAlignmentType(const CMDeviceMotionReport::Compass &, const CFTimeInterval &)
void CLMagnetometerCoexistenceNotifierCpasV5::initializeCalibrationParamaters(const UInt8 *, int)
Device still has original rear camera. Using unit-specific calibration info
Rear camera was replaced. VCM actuator ID is %d
Using generic Mitsumi calibration info
Using generic Alps calibration info
Unrecongized VCM actuator. Not performing compensation
CLCompanionNotifierCompanion::CLCompanionNotifierCompanion(CLSilo *)
CLCompanionNotifierCompanion is being constructed
CompanionConnectionKeepAliveInterval
virtual CLCompanionNotifierCompanion::~CLCompanionNotifierCompanion()
CLCompanionNotifierCompanion is shutting down
virtual void CLCompanionNotifierCompanion::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)
Error deserializing session override: %s
void CLCompanionNotifierCompanion::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)
error serializing Odometer(GPS) entry
error serializing Odometer(Elevation) entry
error serializing Odometer(Coarse Elevation) entry
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Companion/CLCompanionNotifierCompanion.mm
virtual void CLCompanionNotifierCompanion::stateSync(bool)
virtual void CLCompanionNotifierCompanion::handleStateSyncTimerExpiry()
Time to the last received message from Gizmo is %lf. Lost connection to gizmo
void CLCompanionNotifierCompanion::checkAndSendCompanionPing()
void CLCompanionNotifierCompanion::checkAndToggleSpectatorSources()
void CLCompanionNotifierCompanion::toggleCoarseElevationSource(bool)
coarse elevation src,enable,%d
v8@?0^{CLOdometerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLElevationRecorderDb>=^{CLElevationRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSignificantElevation>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSignificantElevation> >=^{CLActivityRecorderDb<CLSignificantElevation>}^{__shared_weak_count}}BB}{CLSignificantElevationEstimator={CLSignificantElevation=i[16C]ddII}{FirstOrderFilter<double>=idd}didi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}@@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__list_node_base<CLOdometerEntry, void *>=^{__list_node_base<CLOdometerEntry, void *>}^{__list_node_base<CLOdometerEntry, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *> > >=L}}}4
Enabling
Disabling
void CLEarGestureClientManager::setEnabledInternal(bool)
%s ear gesture
std::string CLEarGestureClientManager::getClassifierForSiri() const
hwType, %d
EarGesture_Prototypes_Siri_0
EarGesture_Prototypes_Siri_1
Device should not have instantiated this.
EarGesture_Prototype_Msgs_1
void CLEarGestureClientManager::removeClientInternal(const void *)
Removing client %p
Unknown client instance %p
void CLEarGestureClientManager::addClientInternal(const void *, int, CLEarGestureClientManager::Handler)
Adding client %p with priority %d
void CLEarGestureClientManager::refreshDispatcherIfNecessaryInternal()
Registering for ear gesture notifications
Unregistering for ear gesture notifications
void CLEarGestureClientManager::updateEnabledStatusForTopClient()
Ear Gesture EnabledForTopClient: %d (%s)
SiriCalled
KeyboardCalled
MessagesTranscriptCalled
MessagesSpringBoardCalled
PriorityNotSupported!
static void CLEarGestureClientManager::onEarGesture(const CLEarGestureNotifier::NotificationData *, void *)
Dispatching ear gesture to instance %p from prototype %s
sqlite3_finalize()
sqlite3_clear_bindings()
void CLMagnetometerCoexistenceNotifierCpasV6::initializeCalibrationParamaters(const UInt8 *, int)
void CLCompassSessionStatsCollector::start(const std::string &)_block_invoke
starting metric session (CompassSession) for %s
void CLCompassSessionStatsCollector::stop()_block_invoke
ending metric session (CompassSession) for %s
void CLCompassSessionStatsCollector::submit()_block_invoke_2
submitting metric session (CompassSession) for %s
UUID
startTimestamp
endTimestamp
localizationResults
hasUUID
uUID
T@"NSString",&,N,V_uUID
hasStartTimestamp
Td,N,V_startTimestamp
hasEndTimestamp
Td,N,V_endTimestamp
hasValue
T@"NSString",&,N,V_value
T@"NSMutableArray",&,N,V_localizationResults
bool CLNmeaLocation(const char *, CLDaemonLocation &, CLDaemonLocationPrivate &)
Accessory,bad checksum for NMEA sentence '%s' - expected %s
Accessory,only GPGGA GPRMC supported
Accessory,repeated GPRMC timestamp at,hhmmss,%02d%02d%02.1f
Accessory,null island,not allowed
Invalid speed,%.3lf
Invalid course,%.3lf
bool extractLocationInfoFromGga(const CLNmeaGGA &, CLDaemonLocation &, bool, CLNmeaTimestamp &)
Accessory,repeated GPGGA timestamp at,hhmmss,%02d%02d%02.1f
Accessory,invalid altitude,%.3lf
hasSid
hasNid
hasBsid
T@"ALSLocation",&,N,V_location
CLSensorCalibrationControllerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Motion/SensorCalibration/CLSensorCalibrationController.mm
-[CLSensorCalibrationControllerAdapter beginService]
CLSensorCalibrationController
com.apple.CoreMotion.GyroCalibration
CLSensorCalibrationController::CLSensorCalibrationController(CLSilo *)
fStaticWait,%f,fMinimumInterval,%f,fDoubleCalInterval,%f,fOutOfBoxTimeout,%f,fMinBatteryLevel,%f,fRetryCalInterval,%f,fUrgentStaticWait,%f,fUrgentMinBatteryLevel,%f,fUrgentAttemptMinimumInterval,%f,fUrgentCalScheduled,%d,fLastCalibration,%f
bool CLSensorCalibrationController::start(bool)
fState,%d
Status
MotionSensorCalibration
UrgentCal.Start
RegularCal.Start
void CLSensorCalibrationController::tryStartCalibration()
is already running
never
BatteryReady,%d,ThermalReady,%d,DisplayReady,%d,StaticReady,%d,MinimumIntervalReady,%d,UrgentMiniCalScheduled,%d,timeToIntervalReady,%f,sinceLastCal,%s,sinceLastUnpluggedCal,%s
Still waiting for long wait timer
Starting long wait timer for %llu seconds
void CLSensorCalibrationController::tryStartCalibration()_block_invoke
Long wait timer trigger.
Resetting static timer. Wait duration changed %f -> %f
Still waiting for static timer of %f
Starting static timer for %f
void CLSensorCalibrationController::tryStartCalibration()_block_invoke_2
Static timer fired
BatteryDisconnected
Movement
Thermal
Shutdown
void CLSensorCalibrationController::abort(CLSensorCalibrationController_Type::AbortReason)
reason,%d,%s
Ignoring abort for user initiated calibration
UrgentCal.Abort
RegularCal.Abort
void CLSensorCalibrationController::teardown(bool)
Stopped sensor calibration, fState, %d, successful, %d
FinishFlag
VirusRunTime.PluggedIn
VirusRunTime.OnBattery
Scheduling double calibration,fLastCalibration,%f,expectedNextCalibration,%f
UrgentCal.Finish
RegularCal.Finish
Scheduling retry calibration after previous aborted run,fLastCalibration,%f,expectedNextCalibration,%f
void CLSensorCalibrationController::onGyroTemperature(const CLGyro::Temperature *)
state,%d,temperature,%f
Warning: Bad state,%d
void CLSensorCalibrationController::onTimer()
state,%d,elapsed,%f
void CLSensorCalibrationController::forceBatteryUpdate(double, bool)
level,%f,connected,%d
void CLSensorCalibrationController::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Warning: Unexpected notification %d
void CLSensorCalibrationController::setUrgentCalFlag(bool)
UrgentFlag,%d
UrgentCal.Request
com.apple.CoreMotion.gyrocal.start
com.apple.CoreMotion.gyrocal.abort
virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::listClients() [Notification_T = CLSensorCalibrationController_Type::Notification, NotificationData_T = CLSensorCalibrationController_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
[notification: %d, globalAuth: %d]
[clientKey: %@, auth: %d]
CLWifiService_Type::ScanParameters
void CLWifiService_Type::ScanParameters::setChannels(std::vector<int>)
Can't have a scan of no channels
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLWifiServiceScanParameters.mm
CLWifiServiceScanParameters
cl::chrono::secondsf (anonymous namespace)::computeExpectedScanDelay(float, cl::chrono::milliseconds, uint64_t)
Duty cycle percentage should be between 0 and 1
dutyCycle
Duty cycle is NaN
static void CLGeoMapAccessTileLoader::enable()
CLMM, first client enabled openning tile loader
CLMM, enabled count: %d
static void CLGeoMapAccessTileLoader::disable()
CLMM, Trying to disable tile loader when none enabled
CLMM, no clients remaining, closing tile loader
geomapaccess_loader
GpsForceOutdoorMatching
ObmAllowPositionOverride
ObmSearchRadius
ObmMinHorizontalUncertaintyAmidstBuildings
ObmAverageBuildingHeightForUncertaintyBump
ObmBumpHorizontalUncertaintyAmidstBuildings
ObmMinBuildingsForUncBump
CLOutdoorMatcher::CLOutdoorMatcher(CLMapGeometryPtr, const std::string &)
OBM,GpsForceOutdoorMatching,%d,ObmAllowPositionOverride,%d,fBumpHorizontalUncertaintyAmidstBuildings,%d,fMinBuildingsForBump,%u,fSearchRadiusInMeters,%f,fMinHorizontalUncertaintyAmidstBuildings,%f,fMinAverageBuildingHeightForUncertaintyBump,%f
CLOutdoorMatcher::CLOutdoorMatcher(std::shared_ptr<CLGeoAccess3dBuildingGeometry>, const std::string &)
OBM, forcing building geometry
virtual bool CLOutdoorMatcher::match(CLMapCrumb &)
OBM, cannot estimate nav mode, disabling
OBM, non-pedestrian, not matching
OBM, no mapGeometry!
OBM, no geometry!
OBM, buildingsWithinDistance,%lf returned false!
OBM, buildings.size() %ld > 500. too many buildings. Aborting
OBM,averageBuildingHeight,%.2lf,fNeighborhoodCharacter.type,%d
OBM, not in any building
OBM, a-priori,%.6lf,%.6lf,hacc,%.2lf,a-posteriori,hacc,%.2lf
OBM, no building but point in building!
OBM, initialSize,%ld,finalSize,%ld
OBM, no exterior particles remaining
OBM, LonLat conversion failed,point,%lf,%lf
OBM, inflatedHacc, %.2lf, fMinHorizontalUncertaintyAmidstBuildings, %.2lf. choosing max
OBM, a-priori,%.6lf,%.6lf,course,%.2lf,hacc,%.2lf,a-posteriori,%.6lf,%.6lf,course,%.2lf,hacc,%.2lf,bestScore,%.6lg,bestLonLat,%.6lf,%.6lf,bestCourseInDegrees,%.2lf,fAllowPositionOverride,%d,
Attempted to access the value of an uninitialized optional object.
accuracy
locationType
reach
infoMask
Ti,N,V_accuracy
hasLocationType
Ti,N,V_locationType
Ti,N,V_altitude
Ti,N,V_verticalAccuracy
hasScore
TI,N,V_score
hasReach
Ti,N,V_reach
hasInfoMask
TI,N,V_infoMask
cellTowers
wirelessAPs
numberOfSurroundingCells
numberOfSurroundingWifis
cdmaCellTowers
cdmaEvdoTowers
numberOfSurroundingCdmaCells
numberOfSurroundingCdmaEvdoCells
lteCellTowers
numberOfSurroundingLteCells
scdmaCellTowers
numberOfSurroundingScdmaCells
T@"NSMutableArray",&,N,V_cellTowers
T@"NSMutableArray",&,N,V_wirelessAPs
hasNumberOfSurroundingCells
Ti,N,V_numberOfSurroundingCells
hasNumberOfSurroundingWifis
Ti,N,V_numberOfSurroundingWifis
T@"NSMutableArray",&,N,V_cdmaCellTowers
T@"NSMutableArray",&,N,V_cdmaEvdoTowers
hasNumberOfSurroundingCdmaCells
Ti,N,V_numberOfSurroundingCdmaCells
hasNumberOfSurroundingCdmaEvdoCells
Ti,N,V_numberOfSurroundingCdmaEvdoCells
T@"NSMutableArray",&,N,V_lteCellTowers
hasNumberOfSurroundingLteCells
Ti,N,V_numberOfSurroundingLteCells
T@"NSMutableArray",&,N,V_scdmaCellTowers
hasNumberOfSurroundingScdmaCells
Ti,N,V_numberOfSurroundingScdmaCells
cellID
tacID
uarfcn
hasCellID
Ti,N,V_cellID
hasTacID
Ti,N,V_tacID
hasUarfcn
Ti,N,V_uarfcn
hasPid
Ti,N,V_pid
needCellsTowers
technology
wifiGranularity
Tq,N,V_latitude
Tq,N,V_longitude
hasNeedCellsTowers
TB,N,V_needCellsTowers
hasTechnology
Ti,N,V_technology
hasWifiGranularity
Ti,N,V_wifiGranularity
hasRadius
Ti,N,V_radius
CLMicroLocationNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationNotifier.mm
-[CLMicroLocationNotifierAdapter beginService]
CLMicroLocationNotifier
virtual void CLMicroLocationNotifier::shutdown()
MicroLocation: shutdown
CLATVAirplayMonitor
NotificationMicroLocation
virtual void CLMicroLocationNotifier::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
Location services are disabled, ignore WiFi scan result
Received wifi notification %d
Received link status notification
associatedState
Received unknown wifi service notification %d
startScanning
virtual void CLMicroLocationNotifier::startScanning(CLMicroLocationLogic::ILogicDelegate::ScanActivity)
Not scanning Wifi RSSI because it's not enabled
Not scanning Wifi RTT because it's not enabled
Not scanning HomeKit because it's not enabled
Not scanning for Apple TVs because it's not enabled
void CLMicroLocationNotifier::turnOnAccelerometer()
MicroLocation: Enabling accelerometer
void CLMicroLocationNotifier::turnOffAccelerometer()
MicroLocation: Disabling accelerometer
void CLMicroLocationNotifier::startWifiRssiScanning(CLMicroLocationLogic::ILogicDelegate::ScanActivity)
Wifi is powered off - not scanning
void CLMicroLocationNotifier::startHomeKitScanning()
HomeKit is powered off - not scanning
v8@?0^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}4
void CLMicroLocationNotifier::onNotificationCenterNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
Received a forced localization request
Got a notification center notification that we weren't expecting: %s
void CLMicroLocationNotifier::onHomeKitNotification(int, const CLHomeKitProvider_Type::Notification &, const CLHomeKitProvider_Type::NotificationData &)
Received unhandled homekit notification
virtual void CLMicroLocationNotifier::startRecordingTimer()
RecordingStarted
durationInSeconds
virtual void CLMicroLocationNotifier::cancelRecordingTimer()
Recording timer cancelled
void CLMicroLocationNotifier::stopRecordingTimer()
Recording timer stopped
void CLMicroLocationNotifier::onForegroundAppLaunched(CLDuetForegroundApp *)
bundle: %s, launch reason: %s
!microlocationResults.empty()
(Null Microlocation)
void CLMicroLocationNotifier::saveLocalizationResultsToDuet(const std::vector<CLMicroLocationResultInternal> &)_block_invoke
Unable to save localization results to duet. %s
Successfully logged to duet
v12@?0B4@"NSError"8
void CLMicroLocationNotifier::clearDuetStream()
Deleting all entries in the MicroLocation CoreDuet event stream
Unable to clear MicroLocation CoreDuet Event Stream. %s
Deleted %lu events from MicroLocation Event Stream
com.apple.locationd.MicroLocationAction-localize
com.apple.locationd.MicroLocationAction-record
com.apple.locationd.MicroLocationAction-purge
RTLocationsOfInterestDidChangeNotification
MicroLocationsOverrideCurrentRTLOI
MicroLocationsAppBlacklist
CFGetTypeID(cfType) == CFStringGetTypeID()
MicroLocationsUseAccelForSettledEstimation
MicroLocationsScanWifiRSSIEnabled
MicroLocationsScanWifiRTTEnabled
MicroLocationsScanHomeKitEnabled
MicroLocationsScanATVEnabled
virtual void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
virtual void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::removeClient(int) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
virtual bool CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
virtual bool CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
virtual bool CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
virtual void CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::listClients() [Notification_T = CLMicroLocationNotifier_Type::Notification, NotificationData_T = CLMicroLocationNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLMicroLocationNotifier_Type::RegInfo]
macID
-[ALSWirelessAP writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/ALS/ALSWirelessAP.m
nil != self->_macID
T@"NSString",&,N,V_macID
TI,N,V_channel
Market, Bounds
, nwLat, 
, nwLon, 
, seLat, 
, seLon, 
Ti,Vtag
Ti,Vtype
Td,Vtimestamp
processingCellTowers
TB,VprocessingCellTowers
processingWirelessAPs
TB,VprocessingWirelessAPs
finished
TB,Vfinished
bandInfo
cellLatitude
cellLongitude
-[CRLteCellTowerLocation writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRLteCellTowerLocation.m
Ti,N,V_tac
hasBandInfo
Ti,N,V_bandInfo
hasCellLatitude
Td,N,V_cellLatitude
hasCellLongitude
Td,N,V_cellLongitude
coordinate
lifespan
referenceFrame
suitability
speeed
speedAccuracy
courseAccuracy
rawCoordinate
rawCourse
integrity
Medium
High
CLLocationIntegrity
WGS84
ChinaShifted
CLClientLocationReferenceFrame
RouteGuidance
CLClientLocationSuitability
Accessory
Skyhook
GPSCoarse
Pipeline
CLLocationType
JSON_SERIALIZATION
void recordInvalidEnum(CL::Log::JSON::value_ostream &, std::string, T) [T = CLLocationIntegrity]_block_invoke
Uninitialized variable.
enum
void recordInvalidEnum(CL::Log::JSON::value_ostream &, std::string, T) [T = CLClientLocationReferenceFrame]_block_invoke
void recordInvalidEnum(CL::Log::JSON::value_ostream &, std::string, T) [T = CLClientLocationSuitability]_block_invoke
void recordInvalidEnum(CL::Log::JSON::value_ostream &, std::string, T) [T = CLLocationType]_block_invoke
locationId
macModes
hasLocationId
T@"NSString",&,N,V_locationId
hasLatitude
hasLongitude
T@"NSMutableArray",&,N,V_macModes
void CLMagnetometerCoexistenceNotifierCpasV10::chooseOffsetData()
Setting calibration data %d, %d, %d, %d, %d, %d from sensor mode %d
Walking
Running
OutdoorCycling
IndoorCycling
Yoga
Dancing
CrossTraining
Elliptical
Climbing
StairClimbing
Rowing
ResistanceTraining
GenericWorkout
OutdoorWalking
IndoorWalking
OutdoorRunning
IndoorRunning
%@, <recordId %lu, startDate %@, session %@, mets %@, natalies %@, basalNatalies %@, sourceId %@> @ %f
mets
T@"NSNumber",R,N
natalies
basalNatalies
kNatalieDataCodingKeyStartDate
kNatalieDataCodingKeyRecordId
kNatalieDataCodingKeySession
kNatalieDataCodingKeyMets
kNatalieDataCodingKeyNatalies
kNatalieDataCodingKeyBasalNatalies
kNatalieDataCodingKeySourceId
CLEmergencyControllerAdapterSilo
Releasing
void CLEmergencyController::updateEmergencyCarrierBundleSettings()
fIsHELOEnabledFlag,%d
bool CLEmergencyController::getHELOEnabled()
HELO enabled due to CLEEA
bool CLEmergencyController::getHELOEnabledFromCT()
void CLEmergencyController::onCLEmergencyEnablementAssertion(bool)
CLEEA,%d
void CLMagnetometerCoexistenceNotifierCpasCamera::setCoexistenceInfo(const CLMagnetometerCoexistenceNotifierCpasCamera::CameraCoexistenceInfo &)
VCM Delta.x,%f,VCM Delta.y,%f,VCM Delta.z,%f
Rear camera offset.x,%f,Rear camera offset.y,%f,Rear camera offset.z,%f
com.apple.isp.focusing
void CLMagnetometerCoexistenceNotifierCpasCamera::registerForNotificationsIfNecessary()
Could not register for notification %s
com.apple.isp.backcamerapower
com.apple.isp.backcamerasensorconfig
void CLMagnetometerCoexistenceNotifierCpasCamera::updateFocusPosition()
Could not get state for %s
focus position = %d
void CLMagnetometerCoexistenceNotifierCpasCamera::updateCameraState()
camera state = %d
void CLMagnetometerCoexistenceNotifierCpasCamera::updateCameraMode()
camera mode = %d
void CLMagnetometerCoexistenceNotifierCpasCamera::onFocusingNotification()
Received focusing notification
void CLMagnetometerCoexistenceNotifierCpasCamera::onCameraStateNotification()
Received camera state notification
void CLMagnetometerCoexistenceNotifierCpasCamera::onCameraModeNotification()
Received camera mode notification
CLOutdoorMatchingEngine
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MapMatching/CLOutdoorMatchingEngine.mm
CLOutdoorMatchingEngine::CLOutdoorMatchingEngine(CLSilo *)
plos
PLOS, fPlatformSupportsPlosEstimation, %d
virtual bool CLOutdoorMatchingEngine::match(CLDaemonLocation &, CLDaemonLocationPrivate &)
PLOS: match returned false!
virtual void CLOutdoorMatchingEngine::setForceNetworkUsage(bool)
OBM, ForceNetworkUsage %d
virtual void CLOutdoorMatchingEngine::setDisallowNetworkUsage(bool)
OBM, DisallowNetworkUsage %d
void CLOutdoorMatchingEngine::onGpsNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
handling notification %s
const CLOutdoorNeighborhood::Character &CLOutdoorMatchingEngine::getLastNeighborhoodCharacter() const
void CLTransitTilePreloader::makeRequestIfNeeded(bool, const CLDaemonLocation &, const CFAbsoluteTime &)
Request region preload manifest, no manifest
isStart,%d,manifest,%d,LastTime,%lf,LastLat,%.05lf,LastLon,%.05lf
Request region preload manifest, update
Found a preload region %s
void CLTransitTilePreloader::requestDownloadManifest(const bool, const CFAbsoluteTime &)
Requesting download of preload manifest, allowCell,%d
void CLTransitTilePreloader::requestDownloadWifiTile(const bool, const CLDaemonLocation &, const CFAbsoluteTime &)
Request tiles at lat,%.06lf,lon,%.06lf, allowCell,%d
CLAutopauseProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Autopause/CLAutopauseProvider.mm
-[CLAutopauseProviderAdapter beginService]
CLAutopauseProvider.Mock
CLAutopauseProvider
virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLAutopauseProvider_Type::Notification, NotificationData_T = CLAutopauseProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
DontSkip
InProgress
WifiNotPowered
Attempts
TileHeader
TileIndex_Mac
TileAccessPointTable
TileHeaderLocation
TileHeaderKeyLatLon
TileKeyLatLonIndex
TileKeyLatLonEntriesTable
TileApplicationsIndex
TileApplicationsEntries
TileApplicationsRegionalEntries
?unknown?
mcc, 
, mnc, 
, lac, 
, subY, 
, subX, 
, hUnc, 
, offset, 
, ci, 
, tac, 
, sid, 
, bsid, 
TileDownloadCoolOffPeriod
static void CLTileFile::initStaticGlobals()
TILE: fTileDownloadCoolOffPeriod, %.1lf
TileDownloadExtendedCoolOffPeriod
TILE: fTileDownloadExtendedCoolOffPeriod, %.1lf
TileForceExpirationPeriod
TILE: fTileForceExpirationPeriod, %.1lf
TileMinExpirationPeriod
TILE: fTileMinExpirationPeriod, %.1lf
bool CLTileFile::hasDataExpired(CFAbsoluteTime, bool, float)
TILE: hasDataExpired, %d, isLargeConnectivity, %d, fExpirationAge, %d, dataExpirationPeriod, %.1lf, dataAge, %.1lf, tile, %s
bool CLTileFile::canRequestBasedOnAttempts(bool, float, CFAbsoluteTime)
TILE: canRequestBasedOnAttempts, tile, %s, age, %.1lf, needs to be refreshed - retry
1stTry
TILE: canRequestBasedOnAttempts,tile,%s,age,%.1lf,expirationAge,%d
Aged
TILE: canRequestBasedOnAttempts, tile, %s, sinceLastDownload, %.1lf, %d, needs to be refreshed, TileDoesNotExistOnTheServer
DoesntExist
Empty
WtmDl, attempts, llsw, %.2lf, %.2lf, lastSuccess, %d, existsOnServer, %d, sinceLastDownload, %.1lf, expired, %d, path, %s
bool CLTileFile::startDownloading(CFTimeInterval, const std::string &, CLFileDownload *)
TILE: startDownloading, tile, %s, timeout, %.1lf, localFilename, %s, tempFilename, %s
TILE: startDownloading, failed to download without a downloadRequest, %s
TILE: startDownloading, tile is already being downloaded, %s
TILE: startDownloading, tile, %s, started, %d, strFileUrl, %s
virtual bool CLTileFile::decompress(unsigned int &)
TILE: decompress, failed to move, %s, %s, errno, %d, %s
TILE: decompress, from, %s, to, %s, failed, errno, %d, %s
TILE: decompress, in, %.6lf, seconds, size, %u, to, %u, tile, %s
TILE: decompress, from, %s, to, %s, failed, %u byte file
TILE: decompress, file is not compressed, %s
bool CLTileFile::generateUniqueFileName(const std::string &)
TILE: generateUniqueFileName, trying, %s, tile, %s
TILE: generateUniqueFileName, end, localFilename, %s, temp, %s
void CLTileFile::deleteFile()
TILE: deleteFile, unlink, %s
void CLTileFile::deleteTempFile()
TILE: deleteTempFile, unlink, %s
bool CLTileFile::onDownloadCompleted(bool, bool, CFAbsoluteTime)
TILE: onDownloadCompleted, success, %d, fDownloadRequest, %p, tileDoesNotExist, %d, details, %s
TILE: copy from, %s, to, %s, start
CLTileFile::onDownloadCompleted
TILE: onDownloadCompleted, tile version, %d, min version, %d, isVersionOk, %d, tile, %s
TILE: onDownloadCompleted, tile version, %d, min version, %d, isVersionOk, %d, type, %d, %s
TILE: tile, %s, download failed
TILE: failed to move from, %s, to, %s, errno, %d, %s
void CLTileFile::setLocalfilename(const char *)
TILE: setLocalfilename, localFilename, %s, tempFilename, %s
void CLTileFileUtility::initTileIdWithLatitudeAndLongitude(TileId &, double, double, double, double, sec_key_t)
TILE: Delta lat/lon zero, %d, %d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLTileFile.mm
tileType == CLTilesManager_Type::TileType::WIFI_Location
void CLTileFile::extractPropertiesFromTileHeader(CLTilesManager_Type::TileType, const CLWifiTileHeaderEntry &, CFAbsoluteTime)
bool CLTileFile::extractTileIdFromFile(const char *, const char *, CLTilesManager_Type::TileType, bool, CFAbsoluteTime)
TILE: extractTileIdFromFile, prefer local file name because it exists, %s
extractTileIdFromFile
TILE: extractTileIdFromFile, directory, %s, filename, %s, absFilename, %s, type, %d, isHeadersOnly, %d
TILE: extractTileIdFromFile, failed, %s
TILE: extractTileIdFromFile, failed to open file, %s, errno, %d, %s
TILE: extractTileIdFromFile, tile version, %d, min version, %d, isVersionOk, %d, dLat, %.5lf, dLon, %.5lf
TILE: extractTileIdFromFile, invalid hash value for, %s
TILE: extractTileIdFromFile, read tileid from file, %s
TILE: extractTileIdFromFile, read, absFilenameParams, %s
bool CLTileFile::readTileFileByFileName(const std::string &, const CLTileFile::TraverseDetails &)
TILE: readTileFileByFileName, start, file, %s, isHeadersOnly, %d, isBinarySearch, %d
TILE: readTileFileByFileName, reading input from stdin
TILE: failed to open : %s, errno, %d, %s
TILE: readTileFileByFileName, done, file, %s, isHeadersOnly, %d, isBinarySearch, %d, isOK, %d
static bool CLTileFile::setProtectionClass(const char *, CLTileFile::ProtectionClass)
TILE: setProtectionClass, failed to open, %s, fd, %d, errno, %d, %s
TILE: setProtectionClass, unable to open for protected file change, %s, %d, fd, %d, errno, %d, %s
TILE: setProtectionClass, failed to set protection class, %d
TILE: setProtectionClass, failed to set class, %s, %d, %d
bool CLTileFile::setProtectionClass(CLTileFile::ProtectionClass)
TILE: setProtectionClass, tile, %s, newClass, %d, curClass, %d
TILE: setProtectionClass, invalid protectionClass, %d
CLTileFile::ProtectionClass CLTileFile::getProtectionClass()
TILE: getProtectionClass, failed to open, %s
TILE: getProtectionClass, failed to set protection class, %d
bool CLTileFile::doesLocationIntersectWithTile(const CLDaemonLocation &, float)
TILE: no location / coordinates, tile, %s, scaledLocation, %.8lf, %.8lf
TILE: doesLocationIntersectWithTile, distance, %.1lf, deltas, %.1lf, %.1lf
getTileId().tileType != CLTilesManager_Type::TileType::WIFI_Location
void CLTileFile::touchMTime(const CFAbsoluteTime &, const CFAbsoluteTime &, bool &)
void CLTileFile::savePersistentPropertiesToFile()
TILE: saving, %s
void CLTileFile::loadPersistentPropertiesFromFile(const std::string &)
TILE: paramsFileExist, %d, loading, %s, accessTimestamp, %.1lf
void CLTileFile::setSkipDownloadReason(char)
WtmDl, skip, llsw, %.2lf, %.2lf, reason, %s, last, %s
atime
stime
CLTileFile(
tileId=
, localFilename=
, tempFilename=
virtual bool CLTileFile::TEST_testBinarySearch(const char *)
This instance has no : TEST_testBinarySearch
CLPeerRangingNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/PeerRanging/CLPeerRangingNotifier.mm
-[CLPeerRangingNotifierAdapter beginService]
CLPeerRangingNotifier
-[CLPeerRangingNotifierAdapter(CLPeerRangingNotifierProtocol) newRequest:]
WRTT: No peer range notifier.
-[CLPeerRangingNotifierAdapter(CLPeerRangingNotifierProtocol) cancelRequest:]
PeerRangeRequestTimeout
NotificationPeerRanging
void CLPeerRangingNotifier::newRequest(const CLPeerRangingNotifier_Type::RegInfo &)
WRTT: start ranging request
void CLPeerRangingNotifier::cancelRequest(const CLPeerRangingNotifier_Type::RegInfo &)
WRTT: stop ranging session
virtual void CLPeerRangingNotifier::sendRangeMeasurements(const std::vector<CLPeerRangingResult> &, const std::vector<CLPeerRangingError> &)
WRTT: send range meas, %ld, and errors, %ld
virtual void CLPeerRangingNotifier::initiateRanging(const std::vector<CLRangingPeerInternal> &, double)
WRTT: request, numPeers, %ld
virtual void CLPeerRangingNotifier::allowBeingRanged(const std::vector<CLRangingPeerInternal> &, bool)
WRTT: rangeable, numPeers, %ld
virtual void CLPeerRangingNotifier::setTimer(CFAbsoluteTime)
WRTT: scheduling timer
void CLPeerRangingNotifier::onTimer(CLPersistentTimer *)
WRTT: timeout
virtual void CLPeerRangingNotifier::registerForRangeMeasurements()
WRTT: register
virtual void CLPeerRangingNotifier::unregisterForRangeMeasurements()
WRTT: unregister
void CLPeerRangingNotifier::onWifiRangeMeasurements(const CLWifiService_Type::NotificationData &)
WRTT: received meas, %ld, or error %s
void CLPeerRangingNotifier::onWifiPower(const CLWifiService_Type::NotificationData &)
WRTT: received wifi power, %d
virtual void CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
void CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
void CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
virtual void CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::removeClient(int) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
virtual bool CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
virtual bool CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::clientRegistered(int, const Notification_T &) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
virtual bool CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
virtual void CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::listClients() [Notification_T = CLPeerRangingNotifier_Type::Notification, NotificationData_T = CLPeerRangingNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLPeerRangingNotifier_Type::RegInfo]
adsf
https://cl3.apple.com/3/v2
tiles_cell
https://cl2.apple.com
tiles_app_v2
https://cl5.apple.com/
tiles_preload_manifest
https://cl2.apple.com/9/v2
CLTilesManagerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLTilesManager.mm
-[CLTilesManagerAdapter beginService]
TILES
-[CLTilesManagerAdapter requestTileDownloadByType:lat:lon:seckey:details:]
Wifi tile requested through CLTilesManagerProtocol
-[CLTilesManagerAdapter requestTileDownloadByType:path:details:]
MaxDownloadListSize
CLTilesManager::CLTilesManager(CLSilo *, std::unique_ptr<CLITilesManagerExternal>, CL::optional<CLTilesSetCollection>)
TILE: fDefaultMaxDownloadListSize, %d
MTimeModificationPeriod
TILE: MTimeModificationPeriod, %.1lf
CLTilesManager::CLTilesManager(CLSilo *, std::unique_ptr<CLITilesManagerExternal>, CL::optional<CLTilesSetCollection>)_block_invoke
TILE: registered, tilesSet, %s
v8@?0^{CLTilesSet=Bi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}ddfIBdfiddIIBBB{CLTilesMap={map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{set<TileId, std::__1::less<TileId>, std::__1::allocator<TileId> >={__tree<TileId, std::__1::less<TileId>, std::__1::allocator<TileId> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TileId, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<TileId> >=L}}}}{CLDebugBytes={BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}IIII}ii{unique_ptr<CLEntryCacheBase, std::__1::default_delete<CLEntryCacheBase> >={__compressed_pair<CLEntryCacheBase *, std::__1::default_delete<CLEntryCacheBase> >=^{CLEntryCacheBase}}}{unique_ptr<CLEntryCacheBase, std::__1::default_delete<CLEntryCacheBase> >={__compressed_pair<CLEntryCacheBase *, std::__1::default_delete<CLEntryCacheBase> >=^{CLEntryCacheBase}}}}4
TmmMgr, ctor
TILE: fMinEncryptionGracePeriod, %.2lf
ExpiredLocationTimer
Small
Large
CLTilesSetCollection CLTilesManager::initializeProductionTilesSetCollection()
GnrTiles, no download over cell
CellTilesActive
TILE: isCellTilesActive, %d
AppTilesActive
TILE: isAppTilesActive, %d
TilePreloadManifestTilesActive
TILE: isTilePreloadManifestActive, %d
DEMTilesServerUrl
TILE: fDefaultDEMTilesServerUrl, %s
DEMTilesRootDirectory
TILE: fDefaultDEMTilesRootDirectory, %s
CellTilesServerUrl
TILE: fDefaultCellTilesServerUrl, %s
CellTilesRootDirectory
TILE: fDefaultCellTilesRootDirectory, %s
AppTilesServerUrl
TILE: fDefaultAppTilesServerUrl, %s
AppTilesRootDirectory
TILE: fDefaultAppTilesRootDirectory, %s
TilePreloadManifestServerUrl
TILE: fDefaultTilePreloadManifestServerUrl, %s
TilePreloadManifestRootDirectory
TILE: fDefaultTilePreloadManifestRootDirectory, %s
MaxTileAge
TILE: fDefaultMaxTileAge, %.1lf
AncientTilesThreshold
TILE: fDefaultMaxTileDataAge, %.1lf
EncryptionGracePeriod
TILE: fDefaultEncryptionGracePeriod, %.1lf
MaxNumOfTiles
TILE: fMaxNumOfTiles, %d
DisableTilesWhileLocked
TILE: fDefaultDisableTilesWhileLocked, %d
TILE: mkdir, %s, ret, %d
/gsm
/3/v1
gsm-known
gsm-unknown
/cdma
/5/v1
cdma-known
cdma-unknown
/lte
/4/v1
lte-known
lte-unknown
/coarse-gsm
/6/v1
/coarse-cdma
/8/v1
/coarse-lte
/7/v1
void CLTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
TILE: onDataProtectionNotification, %p, notification, %d
TILE: onDataProtectionNotification, kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d
onDataProtectionNotification
TILE: updateProtectionClass, skip on unlock
onDataProtectionNotification.cleanUnknownCache
void CLTilesManager::onCleanupAgedTiles(CFRunLoopTimerRef)
TILE: onCleanupAgedTiles, %p
Cleanup timer- Attempting to add raw wifi tiles to the database if unlocked.
onCleanupAgedTiles
clearLocationInformation
void CLTilesManager::clearLocationInformation()
TILE: clearLocationInformation
void CLTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
onCompanionNotification, notification, %d, Tiles
void CLTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
TILE: onClientNotification, %p, notification, %d
TILE: kNotificationReset
TILE: kNotificationLocationServicesStatus, areLocationServicesEnabled, %d
TILE: location services off, remove all the tiles
void CLTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile> > &, CFAbsoluteTime)
TILE: deleteAgedDownloadItems, start
TILE: deleteAgedDownloadItems, delete, age, %.1lf, %.1lf, tile, %s
TILE: deleteAgedDownloadItems, deleted, %u, done
void CLTilesManager::agedTileDeleter(CLTilesSet &, CFAbsoluteTime)
TILE: deleteAgedTiles, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s
TILE: deleteAgedTiles, delete, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, tile, %s
TILE: deleteAgedTiles, too many tiles, %lu, tile, %s
TILE: deleteAgedTiles, end, numOfDeletedTiles, %u, remain, %lu, name, %s
void CLTilesManager::deleteAgedTilesForTilesSet(CLTilesSet &, CFAbsoluteTime)
TILE: deleteAgedTiles, start, name, %s, size, %lu
bool CLTilesManager::isCurrentTile(CLTileFile *)
TILE: checkDownloadSchedule, degreesFromCornerLat, %.8lf, degreesFromCornerLon, %.8lf, inside, %d, %d, isCurrentTile, %d, %d, isCurrentLocationKnown, %d, %s
void CLTilesManager::traverseAllTilesSets(const char *, CLTileManagerTraverseTilesSetBlock)
TILE: performing, sAction, %s, tilesSet, %s
void CLTilesManager::deleteAgedTiles(CFAbsoluteTime)_block_invoke
TILE: dispatch, deleteAgedTiles, for, %s
deleteAgedTiles
void CLTilesManager::deleteAgedTiles(CFAbsoluteTime)
TILE: deleteAgedTiles, fTilesToDownload
void CLTilesManager::cancelAllDownloads()
TILE: cancelAllDownloads, planned, %lu
void CLTilesManager::removeAllTiles(bool, CLTilesManager_Type::TileType)
TILE: removeAllTiles, cleaning map, %d, %s
TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu, downloadSize, %lu
bool CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)
TILE: listAvailableFilesAllTypes, start
TILE: listAvailableFilesAllTypes, can't list tiles while locked, wait for unlock
bool CLTilesManager::listAvailableFilesAllTypes(CFAbsoluteTime)_block_invoke
TILE: convert to class A, first unlock, %s
TILE: convert to class C, first unlock, %s
B16@?0r*4I8B12
listerSetClass
listAvailableFilesAllTypes
TILE: listAvailableFilesAllTypes, done
bool CLTilesManager::listAvailableFilesByLister(const char *, CLTilesSet &, CLTileManagerFilesListerBlock)
TILE: listAvailableFilesByLister, reason, %s, rootDirectory, %s, name, %s
TILE: listAvailableFilesByLister, reason, %s, can't open dir, %s
TILE: listAvailableFilesByLister, start
TILE: listAvailableFilesByLister, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d
bool CLTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)
Listing available wifi tiles.
TILE: listAvailableFiles, can't open dir, %s
TILE: listAvailableFiles, start
TILE: listAvailableFiles, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d
TILE: listAvailableFiles, failed to stat file, %s, ret, %d
TILE: listAvailableFiles, end
refreshTilesDataIfNeeded
void CLTilesManager::refreshTilesDataIfNeeded()_block_invoke_2
TILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s
void CLTilesManager::checkDownloadSchedule(CFAbsoluteTime)
TILE: checkDownloadSchedule, location services disabled - no tile downloads
TILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: checkDownloadSchedule, no tiles while locked
TILE: checkDownloadSchedule, no data connectivity, avoiding downloads, reachability, %d
TILE: checkDownloadSchedule, no download on none broadband cellular connections
TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d, realtime, %d, wifiPower, %d
TILE: checkDownloadSchedule, numOfActiveDownloads, %d, not scheduling more
TILE: checkDownloadSchedule, both download requests are already in use
fDownloadState_small.downloadRequest is a nullptr
fDownloadState_large.downloadRequest is a nullptr
TILE: checkDownloadSchedule, isLocationValid, %d, isDeviceLocked, %d
TILE: checkDownloadSchedule, lastLocation, %s
TILE: checkDownloadSchedule, isShouldDownload is not true, exists on server, %d
TILE: checkDownloadSchedule, rule, isCurrent, isAllowCellularIfCurrent,  IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, isCurrent, fDownloadCurrentTileOverCell, IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, isCurrent, IsOkToDownloadLarge, %s
TILE: checkDownloadSchedule, rule, isAllowCellularIfNotCurrent, IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, IsOkToDownloadLarge, %s
TILE: checkDownloadSchedule, isShouldDownload, %d, isAllowDownload, %d, isCurrentTile, %d, isAllowCellular, %d, check, %s, details, %s
TILE: checkDownloadSchedule, chose, downloadState, %s
TILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %d, tile, %s
startDownloading
getTile
protection
isCurrentTile
isAllowCellular
TILE: checkDownloadSchedule, numOfActiveDownloads, %d, tilesToDownload, %lu, small, %d, large, %d
TILE: checkDownloadSchedule, kNotificationNoActiveDownloads
void CLTilesManager::tileDownloadCompleted(CLFileDownload *, bool, void *)
TILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d, locked, %d, fileSize, %d
tileDownloadCompleted
TILE: where did this download request come from?, download, %p
void CLTilesManager::tileDecompressionCompleted(CLFileDownload *, bool, void *, CFAbsoluteTime)
Null pointer in fTilesToDownload.
TILE: tileDecompressionCompleted, no tile for download, %p
TILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d
TILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloadState, %s, progress, s, %d, l, %d
decompressed completed.
gotTile
TILE: tileDecompressionCompleted, replacing from, %s
TILE: tileDecompressionCompleted, replacing to, %s
TILE: tileDecompressionCompleted, where the file, was it deleted, %s
TILE: tileDecompressionCompleted, added, tileid, %s, tilesMap.size, %lu
void CLTilesManager::sendNotificationTileWasDownloaded(bool, const CLTileFile &, const CLTilesSet &)
TILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilename, %s, absoluteLocalFilename, %s
static void CLTilesManager::_tileDownloadCompleted(CLFileDownload *, bool, void *)
TILE: _tileDownloadCompleted, success, %d
static void CLTilesManager::_tileDownloadCompleted(CLFileDownload *, bool, void *)_block_invoke
unsigned int CLTilesManager::getNumOfActiveDownloads()
TILE: getNumOfActiveDownloads, tile, %s, is being downloaded, %d, total, %d, download, %p
bool CLTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, sec_key_t, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)
TILE: requestDownload, type, %d, %s, not active
TILE: requestDownload, type, %d, %s, location, %14.8lf, %14.8lf, id, %s, reachbility, %d, details, %s
TILE: requestDownload, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: requestDownload, ignoring request, no sec_key
TILE: requestDownload, tileId=%s isAlreadyDownloaded, %d, isBeingDownloaded, %d, shouldDownloadedBasedOnPermissions, %d, isAlreadyDownloaded, %d
TILE: requestDownload, tileid, %s, already available, isUpdateMTimestamp, %d, isShouldBeRefreshed, %d, isBeingDownloaded, %d
TILE: requestDownload, refresh download, %s
TILE: requestDownload, tileid, %s, will be downloaded, details, %s
TILE: requestDownload, tileid, %s, is locked will be redownloaded, details, %s, allowRedownload, %d, isAddToDownloadList, %d
TILE: requestDownload, tileid, %.8lf, %8lf, will be downloaded, details, %s
TILE: requestDownload, out of boundaries, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s
TILE: requestDownload, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s
TILE: requestDownload, adding neighbour, %s
CLTileFile *CLTilesManager::getRawTileFile(const CLTilesManager_Type::TileType &, const double &, const double &, std::string &, bool &, bool &)
TILE: getTileFile, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: getTileFile, tile, %s, isAvailable, %d, isFileAccessible, %d
TILE: getTileFile, tileid, %s, not available
bool CLTilesManager::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, const CLTileFileDownloadDetails &)
TILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu
void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, bool)
TILE: updateProtectionClass, called on when not locked
void CLTilesManager::updateProtectionClass(const char *, const CLDaemonLocation &, bool)_block_invoke
TILE: updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s
TILE: tile ptr is NULL
TILE: updateProtectionClass, failed unlocking tileid, %s, size, %lu
TILE: updateProtectionClass, unable to lock tile, locking tileid, %s
updateProtectionClass, lockstats, %s, lock, %d, unlock, %d, size, %lu
TILE: updateProtectionClass, location moved, locking tileid, %s
Locking tiles.
numberOfTilesToLock
tileIdsToLock
TILE: updateProtectionClass, clearing unprotected map
TILE: Unable to lock all unprotected files!
TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d
updateProtectionClass
TILE: updateProtectionClass, done, isAboutToLock, %d, numOfUnProtectedTiles, %d
void CLTilesManager::scheduleExpiredLocationTimer(const char *)
TILE: scheduleExpiredLocationTimer, no valid location
TILE: scheduleExpiredLocationTimer, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s
void CLTilesManager::cancelExpiredLocationTimer()
TILE: cancelExpiredLocationTimer
void CLTilesManager::onExpiredLocationTimerFired()
TILE: onExpiredLocationTimerFired, isLocked, %d
TILE: onExpiredLocationTimerFired
onExpiredLocationTimerFired
void CLTilesManager::onPCTimerFired(CLPersistentTimer *)
TILE: onPCTimerFired
void CLTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %.1lf, isForceLocationCheck, %d, fLastLocationProtectionCheckTimestamp, %.1f, leech location, %s
onLocationNotification
TILE: onLocationNotification, unknown notificaiton, %d, %s
void CLTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
TILE: onStatusNotification, kNotificationReachability, from, %d, to, %d, tunnel, %d
TILE: onStatusNotification, unknown notification, %d
void CLTilesManager::cleanUpDownloadList(CFAbsoluteTime)
TILE: cleanUpDownloadList, start, isLocked, %d
TILES: cleanUpDownloadList, download list is too large, %lu
TILE: cleanUpDownloadList, tileid, %s, available on disc, no need to download
TILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u
virtual void CLTilesManager::shutdown()
TILE: CLTilesManager::shutdown
void CLTilesManager::getTileStats(CLDaemonStats_Type::LocationNetworkQueries &)
TILE: stats: getTileStats, wifiTilesDownloaded, %d, wifiTilesDownloaded3G, %d, demTilesDownloaded, %d, wifiTilesCached, %d
resetStats
CLTilesSet &CLTilesManager::getTilesSet(CLTilesManager_Type::TileType)
TILE: invalid tileType, %d
predownloadTilesForLocation
void CLTilesManager::predownloadTilesForLocation(const CLDaemonLocation &, CFAbsoluteTime)_block_invoke
Predownloading tiles.
tileSet
numberOfCircles
download
location.horizontalAccuracy > 0.0
void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)
updateTileLocationRelevancy
void CLTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke
TILE: tiles, %s, not active
TILE: location not relevant
TILE: updating mtime, %d, type, %d, tileid, %s
TILE: updating dem neighbor mtime, %d, type, %d, tileid, %s
Invalid dem neighbor tile id!
Invalid tile id!
bool CLTilesManager::getLocationByCellFromTile(CLTileFile *, const CLCell &, CLTilesManager::SearchContext &, CLDaemonLocation &)
TILE: getLocationByCellFromTile, searching, sec_key, %016llX, %s
TILE: getLocationByCellFromTile, in tile, accessible, %d, %s
TILE: no lac tile for, %s
TILE: no cell tiles for, %s
TILE: getLocationByCellFromTile, isFound, %d, locationd, %s
bool CLTilesManager::getLocationByCell(const CLCell &, const CLDaemonLocation &, CLTilesManager::SearchContext &, CLDaemonLocation &)
TILE: getLocationByCell, index is not available, can't search tiles (locationd launched when device was locked?), fDataProtectionEnabled, %d
TILE: no tiles for, %s
TILE: getLocationByCell, un-supported cell type, %s
TILE: getLocationByCell, tiles, %d, are not active on this device
TILE: getLocationByCell, isInKnownCache, %d, isInUnKnownCache, %d
TILE: getLocationByCell, using locationHint, %s
TILE: getLocationByCell, out of boundary, %s
TILE: getLocationByCell, search neighbor, step, %2d, y, %+2d, x, %+2d
TILE: getLocationByCell, search remaining tiles, %s
TILE: getLocationByCell, search for LAC
TILE: getLocationByCell, search for LAC, isFound, %d
TILE: getLocationByCell, LAC tiles for, %s, are not active
bool CLTilesManager::getAppAvailabilityForArea(double, double, float, CLTilesManager::SearchContext &, std::list<AppAvailability> &, bool)
TILE: getAppAvailabilityForArea, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: getAppAvailabilityForArea, tiles, %d, %s, are not active on this device
TILE: getAppAvailabilityForArea, loc, %.8lf, %.8lf, radius, %.3f
TILE: getAppAvailabilityForArea, tile, %s
TILE: getAppAvailabilityForArea, ctile, %s
TILE: already been searched
TILE: getAppAvailabilityForArea, y, %d, x, %d, ntile, %s
TILE: getAppAvailabilityForArea, appRecommendation, %lu, %s, loc, %.10lf, %.10lf, span, %.10lf, %.10lf
143441
std::string CLTilesManager::composeFullAppTilesServerUrl()
TILE: fullAppTilesServerUrl, %s
void CLTilesManager::storeFrontDidChange()
TILE: onStoreFrontDidChangeNotification, new fServerUrl, %s
void CLTilesManager::enableAppTilesDownload(bool)
TILE: shouldEnableAppTiles, %d, fAppTilesEnabled, %d
bool CLTilesManager::getRegionPreloadManifest(std::vector<CLMarketRegion> *)
Get manifest tile, %lu
Invalid tile type
([0-9]{8})
static std::tuple<bool, bool> CLTilesManager::isValidTileFilename(const std::string &)
Ignoring file- contiains ignore suffix.
Ignoring file- plist.
Invalid file name found in a tiles directory not otherwise specific- deleting.
fileName
static bool CLTilesManager::isValidTileFilenameWithPossibleDeletion(const std::string &, const std::string &)
Deleting invalid file found in tiles directory.
rootDirectory
Skipping non-tile file.
std::tuple<bool, CLTileFile *> CLTilesManager::createTileFileObject(CLTilesManager_Type::TileType, const std::string &, const std::string &, CFAbsoluteTime)
method was not designed for wifi tiles.
Unable to read tile file.
directory
void CLTilesManager::lockTileIfNeeded(CLTileFile *, CLTilesSet &, CFAbsoluteTime)
TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu
TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu
TILE: tileDecompressionCompleted, unlocked tile type, tileid, %s, unlocked, %d
Failed to read directory.
cldavl.avl
.plist
CLTileFileDownloadDetails(
cellIfCurrent=
, cellIfNotCurrent=
, redownload=
, timeout=
, numNeighbors=
, timestamp=
, age=, 
, decompress=
sw_cor, 
, adamId, 
, radiusIns, 
, rankIns, 
, rankUnIns, 
, age, 
, touristApp, 
.ignore
virtual void CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::clear() [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, clear, size, %lu
virtual void CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::deleteAgedEntries() [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, deleteAgedEntries, size, %lu
void CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::evict() [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, evict, aged, age, %.1lf, size, %lu, %lu, key, %s
CACHE: name, %s, evict, size, age, %.1lf, size, %lu, %lu, key, %s
virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
bool CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::getEntry(const Key_T &, DataEntry_T &) [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, getEntry, end, size, %lu, %s, entry, %s
void CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::insertToAgeSet(const CLEntryCache::SetDataEntry &, CLEntryCache::MapDataEntry &) [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, colision...
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLEntryCache.h
void CLEntryCache<std::__1::basic_string<char>, CLDaemonLocation>::addEntry(const Key_T &, const DataEntry_T &) [Key_T = std::__1::basic_string<char>, DataEntry_T = CLDaemonLocation]
CACHE: name, %s, bad set iterator - recovering, size, %lu, %s
CACHE: name, %s, cache too large, evicting, size, %lu
CACHE: name, %s, addEntry, end, size, %lu, %s, entry, %s
virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLTilesManager_Type::Notification, NotificationData_T = CLTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
mac, 
, lat, 
, lon, 
, alt, 
, acc, 
, vacc, 
, channel, 
, score, 
, reach, 
, rssi, 
, qTime, 
, sTime, 
, flg, -
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/XPlatformAppliedMath/CLWifiAPLocation.cpp
fScore != UNINITIALIZED_SCORE
queryTimestamp
runtimeMetadata
locationWasFoundInTile
static const std::string &CLTilesSetGlobalProperties::getRootDirectoryForTileType(CLTilesManager_Type::TileType)
No root directory set for tile type.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLTilesSetGlobalProperties.cpp
static void CLWifiTileFile::initStaticGlobals()
TILE: running initStaticGlobals
kMinimumSupportedTilesVersion
TILE: fMinimumSupportedTilesVersion, %d
CLWifiTileFile-Mutex
virtual void CLWifiTileFile::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &)
TILE: CLWifiTileFile, sectionId, %d, %s
TILE: tileMacIndexHeader, entrySizeInBytes, %u
TILE: headers only, avoid reading SectionID_TileIndex_Mac
TILE: headers only, avoid reading SectionID_TileAccessPointTable
virtual void CLWifiTileFile::onTraversingTileIndexEntry(const CLTilesManager_Type::AccessPointIndexEntry &)
TILE: idx, %3lu, %3u, mac, %s, offset, %u
virtual void CLWifiTileFile::onTraversingTileAPTableEntry(const CLTilesManager_Type::AccessPointEntry &)
TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf, unc, %.1lf, reach, %.1lf
bool CLWifiTileFile::binarySearchAP(CLTilesManager_Type::AccessPointEntry *, unsigned int, const CLTileFile::TraverseDetails &, const CLTilesManager_Type::TileAccessPointTable &)
TILE: binarySearchAP, match, %012llx, %012llx
bool CLWifiTileFile::binarySearchIndex(const CLTilesManager_Type::AccessPointIndexEntryVector &, const CLTileFile::TraverseDetails &, unsigned int &, unsigned int &)
TILE: binarySearchIndex, ==================> indexFailed <==================, size, %4lu, a, %4lu, b, %4lu, c, %4lu,  A, %012llx,  S, %012llx, B, %012llx
TILE: binarySearchIndex, indexFound, isFound, %d, wasSearched, %d, size, %4lu, a, %4lu, b, %4lu, c, %4lu, searchAr, %4u, A, %012llx,  S, %012llx, B, %012llx
virtual bool CLWifiTileFile::traverseTileFile(FILE *, const CLTileFile::TraverseDetails &)
TILE: traverseTileFile, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx, cachedIndex, %d
TILE: traverseTileFile, indexVector cached, seek to the APs table, %lld
TILE: traverseTileFile, re-using cached index vector
TILE: traverseTileFile, searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search
TILE: Invalid section signature, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d
TILE: message, %s, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d, sectionId, %d
TILE: traverseTileFile, invalid tile file, bad allocation size, bytesToAllocate, %lu, maxAllocationSize, %lu
TILE: skip section, message, %s, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d
TILE: failed to allocate memory for, %lu
TILE: failed to read, %lu, %lu
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLWifiTileFile.mm
TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search
TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu
TILE: headers only, avoid reading the APs
TILE: unknown section : %d
TILE: traverseTileFile, finished traversing, file, index entries, %lu, apEntries, %lu
_lvl
_cat
_msg
rawCoordinateLatitude
rawCoordinateLongitude
hasRawCoordinateLatitude
Td,N,V_rawCoordinateLatitude
hasRawCoordinateLongitude
Td,N,V_rawCoordinateLongitude
CLWifiScanner::CLWifiScanner(CLSilo *, std::shared_ptr<IWifiScanningStrategy>)
%s INITIAL isWifiPowered=%d
void CLWifiScanner::start()
%s Start monitor for active scanning
void CLWifiScanner::stop()
%s Stop monitor for active scanning
void CLWifiScanner::onTimerTriggered()
%s TIMER TRIGGERED
void CLWifiScanner::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
%p WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLWifiScanner.mm
void CLWifiScanner::scheduleNextScan(std::shared_ptr<WifiScanSettings>)
%s WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f
%s WIFI SCAN SCHEDULED FOR %f
bool CLWifiScanner::requestScan(std::shared_ptr<WifiScanSettings>)
%s WIFI IS POWERED OFF - NOT ISSUING SCAN REQUEST
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/OnBody/CLOnBodyNotifier7.mm
virtual void CLOnBodyNotifier7::startOnBodyDetection()
Registering with Motion Coprocessor
virtual void CLOnBodyNotifier7::stopOnBodyDetection()
Unregistering with Motion Coprocessor
void CLOnBodyNotifier7::onMotionCoprocessorData(const CLMotionCoprocessorInterface::NotificationData *)
onBodyStatusData->onBodyStatus,%d,onBodyStatusData->confidence,%d,onBodyStatusData->timestamp,%f
AutopauseRequiredDuration
static bool CLAutopauseCalculator::isLocationTypeSupported(CLLocationType)
Unknown whether or not provider %d is a candidate for autopause
void CLAutopauseCalculator::aggregation(CLAutopauseCalculator::AggregateCoord &, const std::deque<CoordAndMotion> &)
PKAUTOPAUSE MEAN coord: %f %f %f %f %f %f %f %d %d 
cmAttitude
cmPedometer
wifiScan
hasCmAttitude
T@"CRIndoorCMAttitude",&,N,V_cmAttitude
hasCmPedometer
T@"CRIndoorCMPedometer",&,N,V_cmPedometer
hasLocation
T@"CRIndoorMotionActivity",&,N,V_motionActivity
hasPressure
T@"CRIndoorPressure",&,N,V_pressure
hasWifiScan
T@"CRIndoorWifiScan",&,N,V_wifiScan
CMAttitude
CMPedometer
MotionActivity
Pressure
WifiScan
CLCompanionNotifierWatch::CLCompanionNotifierWatch(CLSilo *)
CLCompanionNotifierWatch is being constructed
virtual CLCompanionNotifierWatch::~CLCompanionNotifierWatch()
CLCompanionNotifierWatch is shutting down
virtual void CLCompanionNotifierWatch::receiveCompanionMessage(CLCompanionNotifier_Type::Type, NSData *)
Received message,type,%d,size,%lu
error serializing OdometerCyclingData
error deserializing OdometerElevationData
error deserializing CoarseElevationData
v8@?0^{CLMotionStateObserver=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBid@B}4
Unhandled msg,type,%d
virtual bool CLCompanionNotifierWatch::registerForNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::RegistrationInfo &)
CLCompanionNotifierWatch::register for notification %d
fLastOverriddenSession,%ld, registrationInfo.overriddenSession,%ld
Unsupported notification,%d
virtual bool CLCompanionNotifierWatch::unregisterForNotification(int, const CLCompanionNotifier_Type::Notification &)
CLCompanionNotifierWatch::unregister for notification %d
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Companion/CLCompanionNotifierWatch.mm
virtual void CLCompanionNotifierWatch::stateSync(bool)
virtual void CLCompanionNotifierWatch::handleStateSyncTimerExpiry()
Sync state with Companion
void CLCompanionNotifierWatch::sendLastOverriddenSession() const
Error serializing session override (%ld): %s
void CLCompanionNotifierWatch::checkAndToggleSpectatorSubscriptions()
Spectator subscriptions expired
void CLCompanionNotifierWatch::toggleCoarseElevationSubscription(bool)
void CLCompanionNotifierWatch::simulatePackets()
CLBTASilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLBTA.mm
-[CLBTAAdapter beginService]
CLBTA
IsUseBTA
CLBTA::CLBTA(CLSilo *)
BTA: fIsUseBTA, %d
virtual bool CLBTA::unregisterForNotificationInternal(const CLBTA_Type::Notification &)
BTA: unregisterForNotificationInternal, notificaiton, %d
void CLBTA::startMonitoringAll()
BTA: startMonitoringAll
BTA: startMonitoringAll, isActive, %d, fIsMonitoringActive, %d
bool CLBTA::startMonitoring(const bool, const bool)
BTA: startMonitoring, jobName, no BTA in the simulator
void CLBTA::setUseBTA(bool)
BTA: setUseBTA, isUseBTA, %d
virtual void CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::listClients() [Notification_T = CLBTA_Type::Notification, NotificationData_T = CLBTA_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLWifiTileParser.cpp
bool CLWifiTileParser::parseWifiTile(CLWifiTileParser::MemoryMappedFileHandle *, std::function<void (const CLTilesManager_Type::TileHeader &, int)>, std::function<void (const CLTilesManager_Type::AccessPointEntry &)>)
Section signature does not match required value.
actual
expected
SectionID_TileHeader headerSizeBytes field is incorrect.
Not enough data left to read a TileHeader.
SectionID_TileIndex_Mac headerSizeBytes field is incorrect.
Not enough data left to read a TileIndexMacHeader.
SectionID_TileAccessPointTable headerSizeBytes field is incorrect.
Not enough data left to read a TileAccessPointTable.
Skip reading tile access point index table
Not enough data left to read an AccessPointEntry.
currentIndex
totalIndices
Invalid SectionId value.
sectionId
static std::unique_ptr<CLWifiTileParser::MemoryMappedFileHandle> CLWifiTileParser::MemoryMappedFileHandle::openMemoryMappedFile(const std::string &)
Opening and memory mapping %s
errorMessage
errno
WifiTileBuilder
void CLSerializedWifiTileBuilder::addOrderedAccessPointEntry(const CLWifiTileAccessPointEntry &)
Tile Header must be written before adding access points.
std::unique_ptr<std::vector<uint8_t> > CLSerializedWifiTileBuilder::build()
Tile Header never written
Number of APs written does not match expected
Tiles
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLTileFile_Types.h
void CLTilesManager_Type::AccessPointEntry::setX(unsigned int)
void CLTilesManager_Type::AccessPointEntry::setY(unsigned int)
DataBlock CLWifiTileParser::readNextBlock(CLWifiTileParser::MemoryMappedFileHandle *, off_t) const [DataBlock = CLTilesManager_Type::SectionHeader]
Not enough data left to read block.
bytesRead
bytesNeeded
filesSize
Not enough data left to read block of size 
 in wifi tile: 
DataBlock CLWifiTileParser::readNextBlock(CLWifiTileParser::MemoryMappedFileHandle *, off_t) const [DataBlock = CLTilesManager_Type::TileHeader]
DataBlock CLWifiTileParser::readNextBlock(CLWifiTileParser::MemoryMappedFileHandle *, off_t) const [DataBlock = CLTilesManager_Type::TileIndexMacHeader]
DataBlock CLWifiTileParser::readNextBlock(CLWifiTileParser::MemoryMappedFileHandle *, off_t) const [DataBlock = CLTilesManager_Type::TileAccessPointTable]
DataBlock CLWifiTileParser::readNextBlock(CLWifiTileParser::MemoryMappedFileHandle *, off_t) const [DataBlock = CLTilesManager_Type::AccessPointEntry]
static void CLWifiLocationProvider_Type::WifiLocationProviderHelpers::resetWifiLocationUpdateRequest(CLWifiLocationUpdateRequest *)
TlurState, End or Reset, %s
WIFI_LOC: done processing, request, %s
static std::vector<CLWifiAPLocation> CLWifiLocationProvider_Type::WifiLocationProviderHelpers::deleteStaleApsFromInMemoryCache(CFAbsoluteTime, const std::chrono::duration<double>, std::map<CLWifiService_Type::AccessPoint, CLWifiAPLocation> *)
Deleted aged access points in in-memory cache.
deletedAps
static bool CLWifiLocationProvider_Type::WifiLocationProviderHelpers::isStopCriteriaSatisfied(const CLWifiLocationProvider_Type::WifiLocationState &, bool, bool, int, float)
TlurState, isStop, %d, aps, %d, %d, state, %d
Stop criteria is NOT satisfied; no location.
WIFI_LOC: stop criteria satisfied due to iProd, numFixAps, %d
WIFI_LOC: stop criteria satisfied due to desiredAccuracy, desiredAccuracy, %.1f, horizontalAccuracy, %.1lf
Stop criteria is satisfied; all other cases
Finished decided if stop criteria is satisfied
lastCalculatedLocationNumOfAPS
desiredAccuracy
isStop
lastCalculatedLocation
Use the designated initializer
CLOdometerAlarmManager
odometerTarget
Td,N,VodometerTarget
T@?,C,N,Vhandler
invalid
TB,N,Vinvalid
T@"<CLOdometerAlarmManagerProtocol>",&,N,V_manager
CLSpeedProviderSilo
ShowActivityVehicular
ShowActivityStationary
-[CLSpeedProvider beginService]
%s, %d, %s, %d
-[CLSpeedProvider handleMotionStateNotification:]
MotionState, %s, type, %d, conf, %d
-[CLSpeedProvider feedLocation:]
leeched location, %s
disqualified leeched location
qualified leeched location
location timestamp out of order
renew previous location
previous location, %s
distanceMoved, %f, elapsedTime, %f
drop qualified leeched location
accept qualified leeched location
speedVehicular, %d, conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanceMoved, %f, elapsedTime, %f
-[CLSpeedProvider onLocationNotification:data:]
received unhandled notification %d
-[CLSpeedProvider onWifiServiceNotification:data:]
notification ScanCache received %d
received unhandled WifiService notification %d
-[CLSpeedProvider onNotification:withData:]
motionStateProxy
T@"<CLMotionStateProtocol>",&,N,V_motionStateProxy
prevLoc
T@"CLLocation",&,N,V_prevLoc
-[CLOdometerAlarmManager handleLocationData:]
BATCH: received locations w/ odometer: %f, %f
BATCH: odometer ran from %f to %f
BATCH: Received a location (%s) without an odometer while odometer alarm was set
-[CLOdometerAlarmManager handleOdometerData:]
BATCH: odometer reset: %.2f
BATCH: received odometer: %f
lastOdometer
Td,N,VlastOdometer
currentlyScheduled
T@"CLOdometerAlarm",N,VcurrentlyScheduled
firstAlarm
T@"CLOdometerAlarm",R,N
void (anonymous namespace)::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)
BATCH: Should not be registered for location
BATCH: Unexpected notification: %d
CLBatchedLocations
CLDaemonLocation CLBatchedLocations::daemonLocationForIndex(size_t) const
Out of bounds index entry
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLBatchedLocations.cpp
batchedLocationsSize
CLDaemonLocationPrivate CLBatchedLocations::daemonLocationPrivateForIndex(size_t) const
-[CLCompanionPedometerAWDAggregator beginService]
Service start!
-[CLCompanionPedometerAWDAggregator endService]
-[CLCompanionPedometerAWDAggregator setupQueryTimer]
CompanionPedometerHKQueryInterval
-[CLCompanionPedometerAWDAggregator onDataProtectionNotification:data:]
-[CLCompanionPedometerAWDAggregator resetQueryState]
Resetting HK query state
-[CLCompanionPedometerAWDAggregator runQueries]
HK Query attempt _encryptedDataAvailable,%d,_HKQueryState,%d,isHealthDataAvailable,%d
-[CLCompanionPedometerAWDAggregator queryHKForSources]
-[CLCompanionPedometerAWDAggregator queryHKForSources]_block_invoke_2
-[CLCompanionPedometerAWDAggregator queryHKForSources]_block_invoke
No steps from first party sources.
-[CLCompanionPedometerAWDAggregator queryWatchSteps]
Querying HK for watch steps
-[CLCompanionPedometerAWDAggregator queryWatchSteps]_block_invoke
Not enough steps from watch.
No steps from watch.
-[CLCompanionPedometerAWDAggregator queryWatchWorkouts]
-[CLCompanionPedometerAWDAggregator queryWatchStepMinutes]
Querying HK for watch step minute intervals
v8@?0@"HKStatisticsCollection"4
-[CLCompanionPedometerAWDAggregator queryPhoneStepMinutes]
Querying HK for phone step minute intervals
-[CLCompanionPedometerAWDAggregator queryWatchDistanceMinutes]
Querying HK for watch distance minute intervals
-[CLCompanionPedometerAWDAggregator queryPhoneDistanceMinutes]
Querying HK for phone distance minute intervals
-[CLCompanionPedometerAWDAggregator queryHKForWatchSamples:queryHandler:]
Querying HK for watch samples
-[CLCompanionPedometerAWDAggregator queryHKForWatchSamples:queryHandler:]_block_invoke_2
-[CLCompanionPedometerAWDAggregator queryHKForStatsCollection:quantityType:queryHandler:]
Performing HK stats collection query
-[CLCompanionPedometerAWDAggregator queryHKForStatsCollection:quantityType:queryHandler:]_block_invoke_2
-[CLCompanionPedometerAWDAggregator collectStatistics]
All queries finished successfully
lengths of watchStepMinutes,%lu,phoneStepMinutes,%lu,watchDistanceMinutes,%lu,phoneDistanceMinutes,%lu
-[CLCompanionPedometerAWDAggregator collectGradientStats:watchDistanceIntervals:phoneDistanceIntervals:]
totalSteps,%f,steepInclineSteps,%f,gradualInclineSteps,%f,flatSteps,%f,gradualDeclineSteps,%f,steepDeclineSteps,%f
-[CLCompanionPedometerAWDAggregator logDailyStats]
pctStepsIndoorRun,%d,pctStepsIndoorWalk,%d,pctStepsOutdoorRun,%d,pctStepsOutdoorWalk,%d,pctStepsOtherSession,%d,pctStepsOutOfSessionRun,%d,pctStepsOutOfSessionWalkShort,%d,pctStepsOutOfSessionWalkMedium,%d,pctStepsOutOfSessionWalkLong,%d,pctStepErrorBetweenGizmoCompanionWalk,%d,pctStepErrorBetweenGizmoCompanionRun,%d,pctDistanceErrorBetweenGizmoCompanionWalk,%d,pctDistanceErrorBetweenGizmoCompanionRun,%d,pctStepsSteepIncline,%d,pctStepsGradualIncline,%d,pctStepsFlat,%d,pctStepsGradualDecline,%d,pctStepsSteepDecline,%d
CLDEMTile-Mutex
virtual void CLDEMTile::clear()
TILE: clear, tile, %sd
CLBundleKeyValueCache
CLSystemService
CLHarvestableSystemService
CLIsFindMyiPhone
CLIsCoreRoutine
CLEmergencyService
CLRequiredCapabilities
%@,TimeStart,%0.2f,TimeEnd,%0.2f,DistanceGps,%0.2f,DistanceRawPed,%0.2f,Steps,%0.2f,GpsSource,%ld
start
T@"NSDate",&,N,V_start
stop
T@"NSDate",&,N,V_stop
distanceGps
Td,N,V_distanceGps
distanceRawPed
Td,N,V_distanceRawPed
Td,N,V_steps
gpsSource
Ti,N,V_gpsSource
-[CalTrackFinder init]
initialize
-[CalTrackFinder stop]
CloseTrack,Stop
CL-GPS-UnfilteredMultipleSources
-[CalTrackFinder updateGpsLocationBuffer:gpsSource:]
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%0.3f,Course,%0.3f,Altitude,%0.3f,VerticalAccuracy,%0.3f,Timestamp,%0.3f,Source,%d
CloseTrack,GpsSourceChange,GpsSourceOld,%ld,GpsSourceNew,%ld
CL-GPS-Filtered
-[CalTrackFinder _filterGpsLocationBuffer]
-[CalTrackFinder _closeTrackCheckGpsLocation]
CloseTrack,GpsLocationEntryTimeOut,TimeSinceLastEntry,%0.2f
-[CalTrackFinder _closeTrackCheckGpsLocationFiltered]
CloseTrack,GpsFilteredHorizontalAccuracyOutOfBounds,HorizontalAccuracy,%0.2f
CloseTrack,GpsFilteredSpeedOutOfBounds,Speed,%0.2f
CloseTrack,NumSamplesMaxGpsFilteredLocation,NumSamples,%d
-[CalTrackFinder _closeTrackCheckGpsOdometer]
CloseTrack,GpsOdometerEntryTimeOut,TimeSinceLastEntry,%0.2f
CloseTrack,DistanceGpsRoughMax,DistanceGpsRough,%0.2f
CloseTrack,TimeSpanMax,Timespan,%0.2f
CloseTrack,NumSamplesMaxGpsOdometer,NumSamples,%d
-[CalTrackFinder _closeTrackCheckPedometer]
CloseTrack,PedometerEntryTimeOut,TimeSinceLastEntry,%0.2f
CloseTrack,NoStepsForTwoPedometerEntries
CloseTrack,PedometerSpeedCurrentZero
CloseTrack,PedometerSpeedCurrentJump,SpeedCurrentPrev,%0.2f,SpeedCurrent,%0.2f,SpeedCurrentJumpPercent,%0.2f
CloseTrack,NumSamplesMaxPedometer,NumSamples,%d
-[CalTrackFinder _closeCurrentTrack]
CloseTrack,NumAdditionalPedometerEntriesRemoved,%ld
CloseTrack,TrackMetrics,TimeStartGpsLocationSegment,%0.2f,TimeEndGpsLocationSegment,%0.2f,%s
CloseTrack,Fail,DistanceGpsNotSufficient,DistanceGps,%0.2f
CloseCurrentTrack,Fail,GpsSpeedDiscrepancyDetected,SpeedGpsRawMean,%0.2f,GpsDistanceOverTime,%0.2f,SpeedErrorPercent,%0.2f
CloseTrack,Success
gpsLocationBuffer
T@"NSMutableArray",&,V_gpsLocationBuffer
gpsLocationBufferFiltered
T@"NSMutableArray",&,V_gpsLocationBufferFiltered
gpsOdometerBuffer
T@"NSMutableArray",&,V_gpsOdometerBuffer
pedometerBuffer
T@"NSMutableArray",&,V_pedometerBuffer
timeStart
T@"NSDate",&,V_timeStart
timeEnd
T@"NSDate",&,V_timeEnd
timeStartGpsLocationSegment
T@"NSDate",&,V_timeStartGpsLocationSegment
timeEndGpsLocationSegment
T@"NSDate",&,V_timeEndGpsLocationSegment
Td,V_distanceGps
Td,V_distanceRawPed
Td,V_steps
Ti,V_gpsSource
calTrackHandler
T@?,C,V_calTrackHandler
kCMCalibrationTrackCodingKeyStart
kCMCalibrationTrackCodingKeyStop
kCMCalibrationTrackCodingKeyDistanceGps
kCMCalibrationTrackCodingKeyDistanceRawPed
kCMCalibrationTrackCodingKeySteps
kCMCalibrationTrackCodingKeyGpsSource
basalMETs
hasMets
hasBasalMETs
Tf,N,V_basalMETs
Tq,N,V_natalies
hasBasalNatalies
Tq,N,V_basalNatalies
hasDuration
Td,N,V_duration
bool CLOdometerQuality::cdfCalculator(const std::vector<unsigned int> &, const double &, std::vector<double> &)
noSamples < 1 || hist.empty()
void CLOdometerQuality::classifySamples(std::vector<double> &)
unexpected trained cdf data size issue
OdometerQualityIndicator,%d,r2,%f
%@:%@
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLCustomAuthPBRequester.m
-[CLCustomAuthPBRequester start]
Host
kCFURLConnectionSocketStreamProperties
kCFStreamPropertySSLSettings
kCFStreamSSLPeerName
-[CLCustomAuthPBRequester connection:willSendRequestForAuthenticationChallenge:]
Unable to create SecPolicyRef
Unable to create policy list
SecTrustEvaluate() failed with securityResult=%u
SecTrustEvaluate() failed with status=%d
sslHostname
T@"NSString",&,N,V_sslHostname
fConnectionSession
T@"CLURLConnectionSession",&,N,VfConnectionSession
static std::unique_ptr<CLITileSyncManager> CLITileSyncManager::createProduction(CLWifiTilesManager *, CLSilo *, BasicMutex *, std::shared_ptr<CLWifiAccessPointLocationService>)
Instantiating CLTileSyncManager
Instantiating NoopTileSyncManager
-[CLURLConnection cancelAuthenticationChallenge:]
_authCb is NULL!
-[CLURLConnection continueWithoutCredentialForAuthenticationChallenge:]
-[CLURLConnection useCredential:forAuthenticationChallenge:]
-[CLURLConnection performDefaultHandlingForAuthenticationChallenge:]
-[CLURLConnection rejectProtectionSpaceAndContinueWithChallenge:]
v12@?0^{__CFURLConnectionSession=}4^{__CFString=}8
void connection_delegate(CLURLConnectionSession *, _CFURLConnectionSessionRef, CFStringRef, va_list)
Error converting connection event string
B20@?0@"NSObject<OS_dispatch_data>"4L8r^v12L16
com.apple.locationd.budget.~default
CLNetByteBank
CLNetByteBank::CLNetByteBank()
NBB-Could not create a dispatch queue for the CLNetByteBank
NBB-Could not create tracking update timer... billing will be done at connection termination only
Could not get interface addresses to build index-to-name mapping...
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLNetByteBank.mm
void CLNetByteBank::defineAccount(std::string, const sockaddr *, int64_t, CFTimeInterval)
NBB-Cannot define an account with zero refill interval... ignoring
com.apple.locationd.budget
NBB-Account names must begin with "%s"... ignoring %s
abcdefghijklmnopqrstuvwxyz0123456789.
NBB-Account name may contain only characters in %s... ignoring %s
void CLNetByteBank::defineAccount(std::string, const sockaddr *, int64_t, CFTimeInterval)_block_invoke
void CLNetByteBank::startTrackingTransfers()_block_invoke
NBB-Tracking is dummied-out while running non-embedded
void CLNetByteBank::stopTrackingTransfers()_block_invoke
NBB-Transfer tracking stop-request unmatched by start... ignoring
%lld
void CLNetByteBank::persistTryReadBalance(const std::string &, int64_t &)
NBB-Error restoring persisted budget level for account %s
network
ComparableSockaddr::ComparableSockaddr(const sockaddr *)
NotAvailable
void AccountInfo::configure(const ComparableSockaddr &, int64_t, CFAbsoluteTime)
NBB-Could not get UDID for stable refill timing, falling back on random
deltaDistance
deltaDistanceAccuracy
Td,N,V_odometer
hasDeltaDistance
Td,N,V_deltaDistance
hasDeltaDistanceAccuracy
Td,N,V_deltaDistanceAccuracy
T^{CLDaemonClient={DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BB}BBBBIiB@BBi{list<std::__1::shared_ptr<CLConnectionMessage>, std::__1::allocator<std::__1::shared_ptr<CLConnectionMessage> > >={__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>=^{__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>}^{__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<CLConnectionMessage>, void *> > >=L}}@I{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@iiBi@BB@^{SBSProcessAssertion}iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BBBB@iiBBBBB@@^{CLConnection}iid@i@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=L}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}ddiiB}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=L}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di},N,V_client
com.apple.locationd.MicroLocationBackgroundActivities
MicroLocationsMaintenanceInterval
MicroLocationsAnalyticsInterval
MicroLocationsLearningInterval
MicroLocationsHarvestEnabled
MicroLocationsHarvestInterval
MicroLocationsPowerLogInterval
MicroLocationsDatabaseFlushInterval
MicroLocationsDatabaseFlushGracePeriod
MicroLocationsAWDMetricsInterval
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLSubHarvesterMicroLocation>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLSubHarvesterMicroLocation]
Activity didn't complete before the runner was destroyed. Most likely this means there was an exception during the activity. Please check the logs.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.h
MicroLocationMaintenance
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationMaintenance, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:138:15)]
Registering for XPC Activity %s
Attempting to run %s but Microlocations are disabled.
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationMaintenance>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationMaintenance]
MicroLocationAnalytics
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationAnalytics, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:157:16)]
auto (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:157:16))::(anonymous class)::operator()(CLMicroLocationXPCActivityHelpers::XPCActivity)::(anonymous class)::operator()()
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationAnalytics>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationAnalytics]
MicroLocationLearning
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationLearner, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:176:14)]
auto (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:176:14))::(anonymous class)::operator()(CLMicroLocationXPCActivityHelpers::XPCActivity)::(anonymous class)::operator()()
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationLearner>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationLearner]
MicroLocationHarvest
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLSubHarvesterMicroLocation, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:204:16)]
auto (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:204:16))::(anonymous class)::operator()(CLMicroLocationXPCActivityHelpers::XPCActivity)::(anonymous class)::operator()()
MicroLocationPowerLog
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationPowerLog, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:222:15)]
auto (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:222:15))::(anonymous class)::operator()(CLMicroLocationXPCActivityHelpers::XPCActivity)::(anonymous class)::operator()()
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationPowerLog>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationPowerLog]
MicroLocationDatabaseFlusher
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationDatabase::DbFlusher, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:244:10)]
auto (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:244:10))::(anonymous class)::operator()(CLMicroLocationXPCActivityHelpers::XPCActivity)::(anonymous class)::operator()()
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationDatabase::DbFlusher>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationDatabase::DbFlusher]
MicroLocationAWDMetrics
void (anonymous namespace)::registerActivity(CLSilo *, const CLMicroLocationXPCActivityHelpers::XPCCriteria &, CLMicroLocationBackgroundActivities::IBackgroundActivitiesDelegate &, std::vector<std::unique_ptr<XPCRegistration> > &, CL::optional<ObserverRegistrationFunction>, RunActivity) [WorkT = CLMicroLocationAWDMetrics, RunActivity = (lambda at /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/MicroLocation/CLMicroLocationBackgroundActivities.mm:264:16)]
CLMicroLocationBackgroundActivities::ActivityRunner<CLMicroLocationXPCActivityHelpers::XPCActivity, CLMicroLocationAWDMetrics>::~ActivityRunner() [ActivityT = CLMicroLocationXPCActivityHelpers::XPCActivity, WorkT = CLMicroLocationAWDMetrics]
Name
CLVehicleConnectionNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/VehicleConnection/CLVehicleConnectionNotifier.mm
-[CLVehicleConnectionNotifierAdapter beginService]
CLVehicleConnectionNotifier
CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(CLSilo *)
CLVehicleConnectionNotifier is being constructed
CLStarkManager
CLVehicleConnectionNotifier::CLVehicleConnectionNotifier(CLSilo *)_block_invoke_2
#fmc CarKit connection status, %d
v12@?0B4@"NSString"8
virtual CLVehicleConnectionNotifier::~CLVehicleConnectionNotifier()
CLVehicleConnectionNotifier is shutting down
virtual bool CLVehicleConnectionNotifier::registerForNotificationInternal(const CLVehicleConnectionNotifier_Type::Notification &)
virtual bool CLVehicleConnectionNotifier::unregisterForNotificationInternal(const CLVehicleConnectionNotifier_Type::Notification &)
void CLVehicleConnectionNotifier::setCarKitConnectionStatus(ConnectionStatus, NSString *)
CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d
void CLVehicleConnectionNotifier::postVehicleExitNotification()
#fmc Posting notification upon vehicle exit
#fmc startTime,%f,endTime,%f,exitTime,%f
void CLVehicleConnectionNotifier::stopListeningForPedestrian()
bool CLVehicleConnectionNotifier::setVehicleConnectionStatus(ConnectionStatus, ConnectionStatus, NSString *)
CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d,new VehicleConnectionStatus,%d
void CLVehicleConnectionNotifier::setPedestrianAlarm()
v12@?0@"CMActivityAlarm"4@"NSError"8
void CLVehicleConnectionNotifier::notifyClients()
LastVehicleConnection
virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLVehicleConnectionNotifier_Type::Notification, NotificationData_T = CLVehicleConnectionNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
double CLDistanceCalc::calculateDistance(const CLDaemonLocation &, const CLDaemonLocation &)
refAlt < %.1lf,refAlt,%.1lf,using the min
refAlt > %.1lf,refAlt,%.1lf,using the max
bool CLDistanceCalc::calc_dNdE(double, double, double &, double &)
latitude,%.7lf,is out of bounds
CLMotionSyncStoreSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/MotionSync/CLMotionSyncStore.mm
-[CLMotionSyncStoreAdapter beginService]
DebugMotionSync
v8@?0^{CLNatalimetryNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLNatalimetryRecorderDb>=^{CLNatalimetryRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLNatalieData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLNatalieData> >=^{CLActivityRecorderDb<CLNatalieData>}^{__shared_weak_count}}BB}{shared_ptr<CLExerciseMinuteRecorderDb>=^{CLExerciseMinuteRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLExerciseMinuteData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData> >=^{CLActivityRecorderDb<CLExerciseMinuteData>}^{__shared_weak_count}}BB}B{CLMotionDefaultsWrite<bool>=BB}@{unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore> >={__compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore> >=^{CLPersistentStore}}}(NotificationData={CLNatalieData=idiBdiiidddfqqdd^{__CFString}BB}B{CLBodyMetrics=iffffffffif}f{CLExerciseMinuteData=id^{__CFString}})BB@Bii^{Dispatcher}B{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=L}}BdBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLElevationChangeEntry>=^^?*d{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >={__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >=L}}BdBdddd{CLElevationChangeEntry=ddIIiidi}dddfBdi{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}BB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>=^^?*d{deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >={__split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}{__compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry> >=L}}BdBddddBBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCatherineData>=^^?*d{deque<CLCatherineData, std::__1::allocator<CLCatherineData> >={__split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}^^{CLCatherineData}^^{CLCatherineData}{__compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLCatherineData> >=L}}BdBddddBB@{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLStepCountEntry>=^^?*d{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=L}}BdBddddBB@{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}}{CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>=^^?*d{deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >={__split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}^^{MediatedMotionActivity}^^{MediatedMotionActivity}{__compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >=L}}BdBddddBB}{CLNatalieSourceFromNotifier<CLSwimEntry>=^^?*d{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}BdBddddBB@{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{CLCalorieController=B{CLNatalieModelChooser={shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=L}}{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=L}}dB{CLExerciseMinuteEstimator=BB{CLCoarseElevationChangeEntry=dI}fddd{deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >={__split_buffer<CLExerciseMinuteEstimator::IntensityEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}^^{IntensityEpoch}^^{IntensityEpoch}{__compressed_pair<CLExerciseMinuteEstimator::IntensityEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >=L}}dBdddddd{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=L}}{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=L}}}{CLMotionDefaultsWrite<bool>=BB}}id{CLCatherineData=iiddBdddi}dB{CLCaloriePalEstimator=@@@{CLBodyMetrics=iffffffffif}Bi@@@i{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CLVo2Estimator=ff{CLBodyMetrics=iffffffffif}{CLCircularQueue<CLCatherineData>={vector<CLCatherineData, std::__1::allocator<CLCatherineData> >=^{CLCatherineData}^{CLCatherineData}{__compressed_pair<CLCatherineData *, std::__1::allocator<CLCatherineData> >=^{CLCatherineData}}}III}{CLStepCountRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=L}}if{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}i@{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}BB@?@IIIdiiidBI}BddBfffIffff{list<CLVo2Estimator::CLVo2Tuple, std::__1::allocator<CLVo2Estimator::CLVo2Tuple> >={__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>=^{__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>}^{__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLVo2Estimator::CLVo2Tuple, void *> > >=L}}i{MetStats=IIIIIIIIIIII}{HRStats=IIIII}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}4
CLMotionSyncStore::CLMotionSyncStore(CLSilo *)_block_invoke_5
Forcing a stride calibration update.
v8@?0^{CLStepCountNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLStepCountEntry>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLStepCountEntry> >=^{CLActivityRecorderDb<CLStepCountEntry>}^{__shared_weak_count}}BB}@@{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=L}}BdBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLStepDistanceFusion={CLOdometerQuality=^^?{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}{deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >={__split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}{__compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > **, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >=L}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii}i{WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}{CLNatalieInput<CLExtendedStepCountEntry>=^^?*d{deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry> >={__split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}{__compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry> >=L}}BdBddddBB}^{CLNatalieInput<CLOdometerEntry>}i{CLPedometerPaceFusion=^{CLNatalieInput<CLOdometerEntry>}ddddddd{FirstOrderFilter<double>=idd}{FirstOrderFilter<double>=idd}iiB}iIddiiddddB}B@(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})Bi{CLBodyMetrics=iffffffffif}Bi{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}^{Dispatcher}^{Dispatcher}}4
void CLMotionSyncStore::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
Received CLDataProtectionManager_Type %d, data availability %d
CalibrationVersion,
CalibrationUDID,
CalibrationTimestamp,
CMNatalimeterSetUserPal,
CMNatalimeterSetUserVo2max,
StrideCalibrationDataBins,
avail
CalibrationResetRequested,
CalibrationResetRequested
HasSavedInitialMotionCalsToDisk,
HasSavedInitialMotionCalsToDisk
CalibrationUDID
unset
static void CLMotionSyncStore::setCurrentVersion(NSMutableDictionary *, int)
Setting the current Motion Cals version to, %d
CalibrationVersion
CalibrationTimestamp
virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::listClients() [Notification_T = CLMotionSyncStore_Type::Notification, NotificationData_T = CLMotionSyncStore_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
pushEMThreshold
virtual CLMetsInfo CLCalorieWheelchairPushModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, WheelchairPush, computeTime, %f, speedFromPushes, %.1f, metsFromPushes, %.1f, Push Count, %d, pushEM, %.1f, pushEMthreshold, %.1f
modelUUID
modelProtobuf
hasAnonymizedMeasurements
modelType
hasModelUUID
T@"NSString",&,N,V_modelUUID
hasModelProtobuf
T@"NSData",&,N,V_modelProtobuf
hasHasAnonymizedMeasurements
TB,N,V_hasAnonymizedMeasurements
hasModelType
Ti,N,V_modelType
ALL_EVENTS
HOMEKIT_ONLY
simple
scored
CLElevationRecorderDb
virtual long CLElevationRecorderDb::aggregateRecords(const CLAggregationRules &)
Programmer error, we expect an expiration record!
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Odometer/CLElevationRecorderDb.mm
void CLElevationRecorderDb::setFinishedInsertHandler(CLSilo *, CLSignificantElevationFinishedInsertHandler)
ElevationHistory
SELECT * FROM ElevationHistory WHERE ? <= startTime AND endTime <= ? ORDER BY startTime ASC
SELECT * FROM ElevationHistory ORDER BY startTime ASC
DELETE FROM ElevationHistory WHERE startTime < ?
DELETE FROM ElevationHistory
INSERT INTO ElevationHistory (startTime, endTime, elevationAscended, elevationDescended) VALUES (?, ?, ?, ?)
SELECT * FROM ElevationHistory ORDER BY startTime DESC LIMIT 1
UPDATE ElevationHistory SET startTime = startTime + ?, endTime = endTime + ?
virtual void CLElevationRecorderDb::prepareSQLStatements()
virtual void CLElevationRecorderDb::shiftRecordsByUL(CFTimeInterval)
Failed to shift records.
virtual void CLElevationRecorderDb::insertRecordUL(const CLSignificantElevation &, bool)
Error setting elevation offsets.
bool CLActivityRecorderDb<CLSignificantElevation>::isValidTime(CFAbsoluteTime &) const [T = CLSignificantElevation]
virtual void CLActivityRecorderDb<CLSignificantElevation>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLSignificantElevation]
arfcn
transmit
-[CRSCdmaCellTowerLocation writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRSCdmaCellTowerLocation.m
Ti,N,V_lac
Ti,N,V_ci
Ti,N,V_rssi
hasArfcn
Ti,N,V_arfcn
hasPsc
Ti,N,V_psc
hasTransmit
Ti,N,V_transmit
debug_output_enabled: 
void CLGyroCalibrationCache::removeOutliers()
Begin.
Too few points.  End.
temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,1
temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,0
End.
CLScoredMapMatcher::CLScoredMapMatcher(CLMapGeometryPtr, const std::string &)
CLMM, m_fSkipRMSECheckForScalingEntryThresholds,%d
bool CLScoredMapMatcher::shouldOverrideCourseUnc(double &)
CLMM, holdCourseEngaged,%d,fabsCourseDiffWithPriorSnap,%.1lf,rawCourseUnc,%.1lf,newCourseUnc, %.1f
void CLScoredMapMatcher::prefilterCourse(CLMapCrumb &)
%.1lf CLMM, high course rate,course,%.1lf,priorCourse,%.1lf,speed,%.1lf,fabsCourseRate,%.1lf
CLMM, course,%.1lf,courseUnc,%.1lf,lastSnapCourse,%.1lf,speed,%.1lf,acrossTrack,%.1f,onRoad,%d,widthUsed,%.1lf
CLMM, Detected course swing after a recent dismount,intervalSinceDismount,%.1lf
CLMM, holdCourse,engaged, large course diff when static,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, holdCourse,engaged,%d,speed,%.1lf,distance,%.1lf
CLMM, holdCourse,using prior snap,course,%.1lf,courseUnc,%.1lf,fabsCourseDiff,%.1lf
bool CLScoredMapMatcher::evaluateMatch(const CLMapCrumb &, bool)
CLMM, varFactorCheck,oldOffRoadCount,%d,newOffRoadCount,%d
CLMM, courseCheck,oldOffRoadCount,%d,newOffRoadCount,%d
CLMM, stopSnapping,timeout,dT,%.1lf,threshold1,%.1lf,threshold2,%.1lf,static,%d
CLMM, stopSnapping,distance > 100m
CLMM, jumpDistanceCheck,oldOffRoadCount,%d,newOffRoadCount,%.0f
CLMM, stopSnapping,varFactor,%.1lf,threshold,%.1lf
CLMM, stopSnapping,offRoadCount,%d,threshold,%.0f
CLMM, stopSnapping,isAmbiguous,1,acrossTrack,%.1lf,acrossTrackThreshold,%.1lf
CLMM, reseting offRoadCount,%d
CLMM, startSnapping
void CLScoredMapMatcher::calculateScoreAndVarFactor(const struct CLMapGeometry::DistanceQueryResult &, const CLMapCrumb &, double &, double &, double &, double &, double &, double &, bool)
CLMM, NULL road
bool CLParticleMapMatcher::ActivityContextHandler::shallMapMatch(CLMapCrumb &, bool, bool)
CLMM, not matching, activity context, running
CLMM, not matching, activity context, walking, confidence, %d
CLMM, not starting matching due to low speed threshold,speed,%.3lf,thres,%.3lf
bool CLParticleMapMatcher::SolutionPropagator::propagateSolution(CLDaemonLocation &, CLMapGeometryPtr, bool)
CLMM,%.2lf,NotPropagating,isTunnel,%d,isSnapUsable,%d,particleTime,%.2lf,particleTimeOut,%.1lf,speed,%.2lf,speedTime,%.2lf,speedTimeOut,%.1lf
CLMM,%.2lf,NotPropagating, shifting is required but accessory is outputting  unshifted coordinates
CLMM,%.2lf,NotPropagating,time lower than particleTime, %.2lf
CLMM,%.2lf,limit distance to propagate,orig,%.1lf,new,%.1lf
CLMM,NotPropagating,multi-outbound,%lu,intersection within the distance,%.2lf, needed to be travelled returned
CLMM,NotPropagating,moveOnRoad returned false
CLMM,NotPropagating,NULL road
CLMM,NotPropagating,solution moved away from tunnel
CLMM,%.2lf,Propagating,lat,%.8lf,lon,%.8lf,course,%.8lf
CLParticleMapMatcher::CLParticleMapMatcher(CLMapGeometryPtr, const std::string &)
CLMM, Constructor, fUseSpeedCheckForDOT,%d,fMaxDistanceForTIntersectionForDOT,%.1lf
void CLParticleMapMatcher::updateCandidate(const CLMapRoadPtr &, bool, double, double, double)
CLMM, Unexpected out of bounds array access attempt
bool CLParticleMapMatcher::assessCandidates()
CLMM, Assessing candidates
CLMM, NULL road, bad candidate
CLMM, interpolateOnRoad returned false, determining mean road position
CLMM, Time,%.1lf,candidate,roadID,%llu,fwd,%d,countAroundMean,%d
CLMM, roadsAtIntersection returned false, searching for connected candidates
CLMM, unexpected incomingCount < 1
CLMM, Time,%.1lf,roadID,%llu,incoming,countAroundMean,%d
CLMM, Time,%.1lf,combinedBest,roadID,%llu,incomingCount,%d,outgoingCount,%d
CLMM, interpolateOnRoad returned false, determining outgoing road position
CLMM, Time,%.1lf,roadID,%llu,no particles after the intersection
CLMM, Time,%.1lf,roadID,%llu,isCombined,%d,isMulti,%d
bool CLParticleMapMatcher::StuckAtEndOfRoad::isStuckAtEndOfRoad()
CLMM, %.1lf,detected stuck,alongTrackRawToSnap,%.1lf,deltaPosChange,%.1lf,deltaSnapChange,%.1lf,thresholdDiff,%.1lf
CLMM, %.1lf,isMovingAway,%d,deltaPosChange,%.1lf,deltaSnapChange,%.1lf,thresholdDiff,%.1lf
bool CLParticleMapMatcher::predictionAndUpdate()
CLMM, Position jump(m),%.1lf,dT(s),%.1lf
CLMM,%.1lf,predictionAndUpdate, distance,%.1lf,distBasedOnSpeed,%.1lf,distBasedOnPos,%.1lf
CLMM, dT2 limited
CLMM, unexpected,dT,%.1lf,minMoreThan,0,threshold1,%.1lf,threshold2,%.1lf
CLMM, railway search, roadsWithinDistance returned false
CLMM, railwayParticle,timestamp,%.3lf,lat,%.8lf,lon,%.8lf,course,%.3lf,rseg,%lld
CLMM, prediction,NrParticles,%d,NrStandard,%d,NrNew,%d,NrPriorIntersectionParticles,%d,NrNewAlternateCandidateNoiseParticles,%d,NrNewFwdIntersectionParticles,%d,NrNewBiasedToPrior,%d,NrNewAmbiguous,%d,NrNewRouteParticles,%d
CLMM, moveOnRoad returned false, standard particles
CLMM, moveOnRoad returned false, prior intersection particles
CLMM, moveOnRoad returned false, fwd intersection particles
CLMM, moveOnRoad returned false, prior snap particles
CLMM, moveOnRoad returned false, alternate ambiguous particles
CLMM, Unexpected particle with snapLat == snapLon == 0
CLMM, totalScore<=0,%.1lf
bool CLParticleMapMatcher::resample()
CLMM, resample
CLMM, Unexpected number of particles after resampling,%d
bool CLParticleMapMatcher::extractSolution()
CLMM, extractSolution
CLMM, Unexpected bestCount<=0
CLMM, Unexpected no best candidate found
CLMM, Unexpected. There should be an outgoing road
CLMM, Unexpected NULL outgoing road candidate
CLMM, Unexpected outgoing snapLat==snapLon==0
CLMM,Time,%.1lf,snapCourse,%.2lf,outgoingSnapCourse,%.2lf, crumbCourse,%.2lf, outgoingDistanceFromIntersection,%.2lf,outgoingCondition,%d,crumbCourseUnc,%.2lf,significantCourseChange,%d,isCourseAligned,%d, isMeanCandidateAlignedWithCourse,%d
CLMM, Time,%.1lf,exit distance check,distance,%.2lf,exitDistance,%.2lf
CLMM, Time,%.1lf,outgoing condition,%d
CLMM, %.1lf, Using outgoing,incomingID,%lld,outgoingID,%lld
CLMM, %.1lf, Using particle on outgoing,incomingID,%lld,outgoingID,%lld
CLMM, %.1lf, bestParticleRoadID,%lld
CLMM, ambiguous solution not detected,fabsCourseDiff,%.1lf,acrossTrack,%.1lf,ratio,%.3lf,alongTrackToAlt,%.1lf
CLMM, ambiguous solution detected,fabsCourseDiff,%.1lf,acrossTrack,%.1lf,ratio,%.3lf,alongTrackToAlt,%.1lf
CLMM, ambiguous solution hysteresis
CLMM, dismounted recently,doNotSnapCourse,%d
CLMM, distToNextMulti,%.1lf, distFromPriorCrumb,%.1lf
CLMM, not snapping course,reason,distanceToIntersection,%.1lf
CLMM, not snapping course,reason,at intersection,fabsCourseDifference,%.1lf
CLMM, not snapping course,reason,turning,fabsCourseDifference,%.1lf
CLMM, %.1lf, snapping course, reason, gps course not reliable,%.1lf,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, %.1lf, overwriting unreliable GPS course, static case, priorCourse,%.1lf, newCourse,%.1lf
CLMM, %.1lf, snapping course, reason, gps course flipping at low speeds,%.1lf,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, %.1lf, overwriting unreliable GPS course, low speed case, priorCourse,%.1lf, newCourse,%.1lf
void CLParticleMapMatcher::adjustSolutionforRoadWidth()
CLMM, adjustSolutionforRoadWidth
void CLParticleMapMatcher::performPartialMatching()
CLMM, performPartialMatching
CLMM, partial snapping,poorVarFactorCount,%d,weightGPS,%.2lf,weightSnap,%.2lf
bool CLParticleMapMatcher::assessParallelRoadsWithinDist(const double &, const double &, bool &)
CLMM, roadsWithinDistance returned false
CLMM, Unexpected roadsWithinDistance returned empty list
CLMM, Unexpected NULL road
CLMM, Unexpected roadsWithinDistance returned only railways
bool CLParticleMapMatcher::prepareSeeding()
CLMM, prepareSeeding
CLMM, Unexpected crumb lat==lon==0
CLMM, Unexpected crumb snapLat==snapLon==0
CLMM, Unexpected maxDistance,%.1lf
CLMM, including railway
bool CLParticleMapMatcher::assessMatchAndNeedForReseed(bool &)
CLMM, assessMatchAndNeedForReseed
CLMM, postEvaluateMatch,%s
CLMM, Reseeding due to varFactor,%.1lf,max,%.1lf
CLMM, Reseeding due to badMatchCount,max,%d
CLMM, Reseeding due to Neff
CLMM, Reseeding due to stuck at dead-end while observations move away
bool CLParticleMapMatcher::reseed()
CLMM, reseed
bool CLParticleMapMatcher::shallMapMatch(CLMapCrumb &)
CLMM, not matching, speedMps,%.1lf,threshold,%.1lf
CLMM, matching, routetime,%.1lf
virtual bool CLParticleMapMatcher::match(CLMapCrumb &)
CLMM, aPriori,%s
CLMM, %.1lf, not matching
CLMM, opportunistic tile download only, favorable GPS conditions
CLMM, opportunistic tile download only, high speed threshold
CLMM, match,%.1lf, allowsNetworkUsage, %d
CLMM, Time difference between updates is zero. Update ignored.
CLMM, %.1lf,hopping check,connecting roads,%d, current road %lld,prior road %lld
CLMM, %.1lf,hopping check,prior road, %lld, connected to the incoming road, %lld, of the current solution road, %lld
CLMM, %.1lf,hopping between roads detected,reset,%d,priorfullSnapCourse,%.1lf,currentFullSnapCourse,%.1lf,priorId,%llu,currentId,%llu
CLMM, holdCourse engaged but not snapping course
CLMM, aPosteriori, %s
bool CLParticleMapMatcher::runDirectionOfTravelHelper(double, double, double, double &)
CLMM, no DOT, course is not aligned
CLMM, across track too large, not suitable DOT assistance
bool CLParticleMapMatcher::computeDirectionOfTravelCoordinates(const std::string, double, double, double &, double &)
CLMM, %.1lf, DOT Coordinates,%s,snapLat,%.8lf,snapLon,%.8lf,dotLat,%.8lf,dotLon,%.8lf
virtual bool CLParticleMapMatcher::getDirectionOfTravelAssistance(CLGpsAssistant_Type::DirectionOfTravelAssistance &)
CLMM, no DOT,feedback interval check
CLMM, no DOT,frc,0
CLMM, no DOT, too close to prior intersection
CLMM, no DOT, course not aligned to full snap
CLMM, no DOT, assessParallelRoadsWithinDist returned false, unexpected
CLMM, no DOT, too close to a road with similar course
CLMM, no DOT, too close to next intersection
CLMM, no DOT, too slow when nearing intersection
CLMM, moveOnRoad returned false, DOT particle assistance
CLMM, no DOT, too close large road direction change
CLMM, no DOT, computeDirectionOfTravelCoordinates lookBehind returned false
CLMM, no DOT, predicted point is too close to intersection
CLMM, Unexpected calculateNewPosUsingAcrossTrack fail
Predicted
CLMM, no DOT, computeDirectionOfTravelCoordinates predicted returned false
CLMM, DOT,%.1lf,lat,%.7lf,lon,%.7lf,course,%.1lf,courseUnc,%.1lf,rw,%.1lf,startLat,%.7lf,startLon,%.7lf,length,%.1lf,speed,%.3lf,isOneWay,%d,isRailWay,%d,isTunnel,%d,isBridge,%d
virtual bool CLParticleMapMatcher::getPosAssistanceForGps(CLGpsAssistant_Type::MapMatchedPositionAssistance &)
CLMM, MMPA,%.1lf,lat,%.7lf,lon,%.7lf,a,%.2lf,b,%.2lf,az,%.3lf,course,%.3lf
Trip,%lld
,Time,%.1lf
,Lat,%.8lf
,Lon,%.8lf
,Alt,%.1lf
,hunc,%.1lf
,vunc,%.1lf
,speedKph,%.3lf
,course,%.1lf
,rseg,%lld
,frc,%d
,fow,%d
,rname,"%s"
,snapLat,%.8lf
,snapLon,%.8lf
,snapCourse,%.1lf
,score,%.1lf
,ratio,%.1lf
,speedUncMps,%.1lf
,courseUnc,%.1lf
,a95,%.1lf
,b95,%.1lf
,theta,%.1lf
,ActivityContext,%d
,isStatic,%d
,isMounted,%d
,varFactor,%.7g
,deltaAzimuth,%.3lf
,alongTrack,%.3lf
,acrossTrack,%.3lf
,isSnapUsable,%d
,isAmbiguous,%d
,snapProj,%.3lf
,snapType,%d
,fullSnapLat,%.8lf
,fullSnapLon,%.8lf
,fullSnapCourse,%.3lf
,rwSnapLat,%.8lf
,rwSnapLon,%.8lf
,partialSnapLat,%.8lf
,partialSnapLon,%.8lf
,ActivityConfidence,%d
,isFavorableGps,%d
,isRailway,%d
,isFitnessMatch,%d
,isShifted,%d
,gpsWeek,%d
,gpsTowMs,%d
,staticActivitySetTime,%.lf
,rawLat,%.8lf
,rawLon,%.8lf
,isMatchedPropagated,%d
EnableStepperLoadCal
EnableStepperHRModel
StairModelMetsScale
StepperVO2MaxScalingFactor
CLNatalieStairClimbingModel::CLNatalieStairClimbingModel()
Stepper load calibration enabled status : %d 
Stepper HR model enabled status : %d 
Stepper final mets scaling factor : %f 
Stepper VO2 max scaling factor : %f 
virtual CLMetsInfo CLNatalieStairClimbingModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, Stair Climbing Work Rate Model, timestamp, %f, step frequency, %f, WRMETS, %f, sinceLastGood, %f
Natalie Model, Stair Climbing HR Rate Model, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
Natalie Model, Stair Workload Calibration, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, loadCalStatus, %d
Natalie Model, Stair Climbing Final Output, timestamp, %f, finalMETS, %f, fMetsScaling, %f
int CLActivityDbExportAdapter::readIntValueForMotionPreferenceKey(const char *)
CLActivityLogger read %s as CFStringRef failed
LastDumped
MotionMetricsExportDetailedLogging
void CLActivityDbExportAdapter::startExportTimerIfNeeded()
CLActivityLogger managed should enable data collection setting is %s.
CLActivityLogger Failed to get data collections enabled setting. It may not have been set yet.
CLActivityLogger exporting %s is disabled MotionMetricsExportInterval, %d, MotionMetricsExportTimerInterval, %d
CLActivityLogger should enable data collection is is %s.
CLActivityLogger exporting %s is disabled 
CLActivityLogger exporting %s is already enabled 
CLActivityLogger exporting %s is only enabled in internal build
CLActivityLogger exporting %s: MotionMetricsExportTimerInterval = %d, MotionMetricsExportInterval = %d
Skipping
Dumping
void CLActivityDbExportAdapter::startExportTimerIfNeeded()_block_invoke
CLActivityLogger exporting %s is %f, currentTime is %f, next dumping time is %f, %s
CLActivityLogger exporting %s metrics with OSAWriteLogForSubmission
CLActivityLogger failed to submit iOS data analysis with type kOSAProblemTypeMotionState
CLActivityLogger exporting timer enabled 
MotionMetricsExportInterval
MotionMetricsExportTimerInterval
/Library/Managed Preferences/mobile/com.apple.nanolifestyle.plist
AppleInternalDataCollectionEnabled
com.apple.nanolifestyle
MapMatchingEngine
particle
UseFullSnap
CLMapMatchingEngine::CLMapMatchingEngine(CLSilo *, const std::string &)
CLMM, UseFullSnap, %d
enableDotGpsFeedback
CLMM, enableDotGpsFeedback,%d
virtual void CLMapMatchingEngineBase::setForceNetworkUsage(bool)
CLMM, ForceNetworkUsage %d
virtual void CLMapMatchingEngineBase::setDisallowNetworkUsage(bool)
CLMM, DisallowNetworkUsage %d
virtual bool CLMapMatchingEngineBase::match(CLDaemonLocation &, CLDaemonLocationPrivate &, CLMapCrumb &)
CLMM, calling match()
CLMM, shift() returned false
CLMM, match() returned false
void CLCaloriePalEstimator::setUpPalUpdateTimer()
Starting PAL update timer
PalEstimationInterval
void CLCaloriePalEstimator::querySources()_block_invoke_2
PAL estimation encountered error,%ld
void CLCaloriePalEstimator::querySources()_block_invoke
void CLCaloriePalEstimator::queryWorkouts()_block_invoke_2
void CLCaloriePalEstimator::queryStepCount(NSDate *, NSDate *, StepCountQueryHandler)_block_invoke_2
void CLCaloriePalEstimator::estimateDailyStepCount()
Daily steps,%f,Session type,%lu,startTime,%f,duration,%f,mean mets,%f,in-system steps,%f,met-converted steps,%f
Day index,%zu,stepCount,%f
void CLCaloriePalEstimator::estimatePal()
Estimated PAL,%d,current PAL,%.0f,total steps,%f,valid days,%d,avg steps,%f,timeToEstimate,%f
LSApplicationProxy *getLSApplicationProxy(CFStringRef)
no app proxy available for %s
CLAppMonitorSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLAppMonitor.mm
-[CLAppMonitorAdapter beginService]
CLAppMonitor::CLAppMonitor(CLSilo *)_block_invoke
App foregrounded for %.2fs.  Post %s (%d), pid, %d, bundleId, %s
com.apple.LaunchServices.applicationRegistered
com.apple.LaunchServices.applicationUnregistered
Terminated
BackgroundTaskSuspended
BackgroundRunning
ForegroundRunning
ProcessServer
ForegroundRunningObscured
Unregistered
AppSwitcherQuitApp
ForegroundRunningForSomeTime
void CLAppMonitor::onApplicationStateChanged(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
cannot find SBApplicationStateKey
unknown application state %d
failed to retrieve pid
failed to retrieve bundle ID
Post Application State Change Notification, %d, %s, pid, %d, bundleId, %s
bundleIDs
void CLAppMonitor::onApplicationRegistered(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
cannot find bundle ID for %d
void CLAppMonitor::onApplicationUnregistered(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)
virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::listClients() [Notification_T = CLAppMonitor_Type::Notification, NotificationData_T = CLAppMonitor_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLTransitWsbClient::startWsb()
Start active dynamic Wsb
void CLTransitWsbClient::stopWsb()
Stop active dynamic Wsb
void CLTransitWsbClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
Received kNotificationPower, isWifiPowered, %d
Received kNotificationScanCache
Unknown notification received, %d
void CLExerciseMinuteEstimator::recordExerciseMinute(CFAbsoluteTime, double, ALCMExerciseMinute_Mode)
Exercise Minute,startTime,%.3f,avgIntensity,%f,mode,%d
double CLExerciseMinuteEstimator::computeExerciseMinutesUsingIntensity(double, const CLNatalieModelInput &)
Exercise Intensity,computeTime,%.3f,raw,%f,scaled,%f,elevationAdjusted,%f,elevationCredit,%f,historicalElevationCredit,%f,windowSize,%lu,avgIntensity,%f
double CLExerciseMinuteEstimator::slideIntensityWindow(CFAbsoluteTime, CFTimeInterval, double)
Time rolled back,past.front,%.3f,past.back,%.3f,current,%.3f
double CLExerciseMinuteEstimator::computeWheelchairPushExerciseMinutesAdjustedIntensity(double, const CLNatalieModelInput &)
ComputeTime,%.3f,awardedExerciseMinuteMode,%d,fBurstBufferCount,%.3f,fBurstBufferDuration,%.3f,fPushBufferCount,%.3f,fPushBufferDuration,%.3f,BurstModelDuration,%.3f,BurstModelCount,%.3f,BurstModelThreshold,%d,ThresholdModelDuration,%.3f,ThresholdModelCount,%.3f,ThresholdModelThreshold,%d,CoverageModelDuration,%.3f,CoverageModelCount,%.3f,CoverageModelThreshold,%d
float CLExerciseMinuteEstimator::getUserMetsScalingFactor(const CLBodyMetrics &) const
Exercise Intensity,threshold speed,%f,METs scaling factor,%f
appLocation
-[CRAppCollectionRequest writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRAppCollectionRequest.m
appLocations
T@"NSMutableArray",&,N,V_appLocations
CMStrideCalRecorderDb
CMStrideCalRecorderDb::CMStrideCalRecorderDb(bool)
CMStrideCalRecorderDb init
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/StrideCalibration/CMStrideCalRecorderDb.mm
void CMStrideCalRecorderDb::setFinishedInsertHandler(CLSilo *, CLStrideCalEntryFinishedInsertHandler)
void CMStrideCalRecorderDb::deleteRecordsBefore(CFTimeInterval)
Failed to delete records
StrideCalHistory
SELECT COUNT(*) FROM StrideCalHistory
SELECT * FROM StrideCalHistory ORDER BY startTime ASC
SELECT * FROM StrideCalHistory WHERE pacebin == ? ORDER BY startTime DESC
SELECT * FROM StrideCalHistory WHERE speed > ? AND speed <= ? ORDER BY startTime DESC
DELETE FROM StrideCalHistory WHERE startTime < ?
DELETE FROM StrideCalHistory WHERE startTime > ?
DELETE FROM StrideCalHistory
INSERT INTO StrideCalHistory (startTime, pacebin, kvalue, kvalueTrack, score, endTime, distance, steps, session, speed, percentGrade, gpsSource) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SELECT * FROM StrideCalHistory ORDER BY startTime DESC LIMIT 1
UPDATE StrideCalHistory SET startTime = startTime + ?
virtual void CMStrideCalRecorderDb::prepareSQLStatements()
Device is locked and we are unable to open the database
void CMStrideCalRecorderDb::alterTableIfNecessary()
StrideCalHistory table doesn't even exist
ALTER TABLE StrideCalHistory
UPDATE StrideCalHistory SET 
 = CAST(pacebin AS FLOAT);
virtual void CMStrideCalRecorderDb::deleteRecordsAfterInsertUL(const CLStrideCalEntry &)
virtual void CMStrideCalRecorderDb::shiftRecordsByUL(CFTimeInterval)
Failed to shift records
virtual void CMStrideCalRecorderDb::insertRecordUL(const CLStrideCalEntry &, bool)
StrideCalDb (%f,%d,%f,%f,%f,%f,%f,%d,%d,%f,%f,%d).
virtual void CLActivityRecorderDb<CLStrideCalEntry>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLStrideCalEntry]
appState
routineMode
loiType
-[CRAppLocation writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRAppLocation.m
nil != self->_appBundleId
Ti,N,V_appState
hasRoutineMode
Ti,N,V_routineMode
hasLoiType
Ti,N,V_loiType
float CLNatalieCycleModel::computeHRMets(const CLNatalieModelInput &) const
Natalie Model, Cycle CR DT Regression, %f, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f
virtual CLMetsInfo CLNatalieCycleModel::computeMETS(const CLNatalieModelInput &)
GPS speed at time, %f, %f is too high,  set to maximum default, %f
Uphill vertical speed at time, %f, %f is too high, set to maximum default %f
Natalie Model, Cycle WR Linear Regression, %f, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, WR METS, %f
Model switcher input availability, StartTime, %f, EndTime, %f, ModelSwitcherInputCase, %d, gradeType, %d, hspeed, %f, vspeed, %f, isCatherineAvailable, %d, isCatherineReliable, %d, isGpsAvailable, %d, HRstaleness, %f
Natalie Model, Cycle Fused, %f, %f, HR METS, %f, WR METS, %f, Fused METS, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, Steps, %d, ModelSwitcherInputCase, %d, distance, %f, altitude, %f, HRstaleness, %f, HR, %f, metSource, %d
float CLNatalieCycleModel::computeLinearRegressionWR(float, float, const CLNatalieModelInput &) const
RollingResistance,%f,gravity,%f,wind,%f,totalWR,%f,startTime,%f,endTime,%f
CLMotionStateObserverSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/MotionState/CLMotionStateObserver.mm
-[CLMotionStateObserverAdapter beginService]
CLMotionStateObserver
void CLMotionStateObserver::startSession(const CLMotionActivity::Type, const CFAbsoluteTime)
Started session type,%d,startTime,%f,activity,%s
void CLMotionStateObserver::stopSession()
Stopped session type,%d,startTime,%f,activity,%s
virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
bool CLSwimClassifier::estimatePeriod(int &, float) const
Period Estimate Update,period,%f,confidence,%f,timestamp,%f,startTime,%f
CLSwimStyleType CLSwimClassifier::classify(float)
ClassificationResult,%d,startTime,%f,timestamp,%f
void CLSwimClassifier::setDeviceOrientation(const CLGizmoOrientation &)
wrist,%d,crown,%d
tier1_0
tier1_1
tier1_2
tier2_0
tier2_1
CLSwimStyleType CLSwimClassifier::runTieredClassifiers(const float (&)[14]) const
Classification,%s,%d,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f
const T &CMQueue<CMVector<float, 3> >::operator[](const size_t) const [T = CMVector<float, 3>]
T CMVector<float, 3>::operator[](const size_t) const [T = float, N = 3]
Assertion failed: i < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMVector.h, line 272,invalid index %zu >= %zu.
CLAutopauseProviderConcrete::CLAutopauseProviderConcrete(CLSilo *)
PAUSE: Constructing CLAutopauseProviderConcrete
void CLAutopauseProviderConcrete::startMonitoringPauseState()
PAUSE: Starting auto-pause monitoring.
void CLAutopauseProviderConcrete::stopMonitoringPauseState()
PAUSE: Stopping auto-pause monitoring.
void CLAutopauseProviderConcrete::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
PAUSE: Batched notification response in auto-pause with %zu locations.
void CLAutopauseProviderConcrete::onLocationNotificationHelper(const CLDaemonLocation &)
PAUSE: Pause state changed, notifying - fitness: %d navigation: %d other: %d
void CLAutopauseProviderConcrete::onMotionNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)
PAUSE: unexpected notification %d
PAUSE: Unknown notification %d
void CLAutopauseProviderConcrete::onLocationTimer(CFRunLoopTimerRef)
PAUSE: Autopause provider has no location updates for 15 minutes.
void CLAutopauseProviderConcrete::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
PAUSE: got kNotificationSleep.
PAUSE: got kNotificationWake.
CLAutopauseProviderMock::CLAutopauseProviderMock(CLSilo *)
PAUSE: Constructing CLAutopauseProviderMock
void CLAutopauseProviderMock::setState(id)
PAUSE: Invalid data: %s
PAUSE: Mocking state: %s
virtual bool CLAutopauseProviderMock::registerForNotificationInternal(const CLAutopauseProvider_Type::Notification &)
PAUSE: Client registered for %s
virtual bool CLAutopauseProviderMock::unregisterForNotificationInternal(const CLAutopauseProvider_Type::Notification &)
PAUSE: Client unregistered for %s
other
vehicularNavigation
fitness
void CLVehicleSpeedFilter::update(const CFAbsoluteTime &, const double &, bool &, double &)
unexpected,vehicleSpeed < 0
-[CMStrideCalibrator(CLNotifiers) checkLocationAuthorization]
EnableLocationServices,Success,AllChecksPassed
-[CMStrideCalibrator(CLNotifiers) isAuthorizedForLocation]
EnableLocationServices,Fail,AllLocationServicesDisabled
EnableLocationServices,Fail,PedometerCalibrationLocationServicesDisabled
EnableLocationServices,Success
-[CMStrideCalibrator(Callbacks) onMotionStateMediatorNotification:data:]
StrideCal - Register tracks activity %d, override action, %d, session, %s
void onCompanionNotification_bounce(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &, void *)
pilotPhase
hasPilotPhase
Ti,N,V_pilotPhase
hasRssi
CDMA
LAC_GSM
LAC_CDMA
LAC_LTE
AppRecommendation
PreloadManifest
Last
TransitManifest
Invalid enum value CLDaemonStatus_Type::ThermalLevel(
cdma
coarse-gsm
coarse-cdma
coarse-lte
preload manifest
LogDeviceMotion
GyroOnly
6Axis
9Axis
9AxisWithNorthReference
BuildGYTT
3AxisDynamicGyro
6AxisThrottledGyro
CLDeviceMotionProperties<DeviceMotion=%@>
Ti,N,VfMode
CLDeviceMotion
static CLDeviceMotion::CLDeviceMotionNotification CLDeviceMotion::CLMotionTypeDeviceMotionModeToCLDeviceMotionNotification(const CLMotionTypeDeviceMotionMode)
No viable convertion for mode 0x%x
static CLMotionTypeDeviceMotionMode CLDeviceMotion::CLDeviceMotionNotificationToCLMotionTypeDeviceMotionMode(const int)
No viable convertion for notification 0x%x
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Motion/Notifiers/CLDeviceMotion.mm
void CLDeviceMotion::addDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *, CFTimeInterval)_block_invoke
CLDeviceMotion::addDeviceMotionDispatcher adding dispatcher with property: %s
void CLDeviceMotion::removeDeviceMotionDispatcher(CLDeviceMotion::Dispatcher *)_block_invoke
CLDeviceMotion::removeDeviceMotionDispatcher removing dispatcher with property: %s
virtual CFTimeInterval CLDeviceMotion::minimumUpdateIntervalChanged(int, const CFTimeInterval &)
CLDeviceMotion::minimumUpdateIntervalChanged,notification,%d,minimumUpdateInterval,%f
virtual void CLDeviceMotion::numberOfClientsChanged(int, size_t, size_t)
CLDeviceMotion::numberOfClientsChanged notification:%d, from:%zu, to:%zu
numberOfClients GyroOnly:%zd, 3AxisDynamicGyro:%zd, 6Axis:%zd, 6AxisThrottledGyro:%zd, 9Axis:%zd, 9AxisWithNorthReference:%zd, BuildGYTT:%zd
Device motion mode not supported: %d
bool CLDeviceMotion::isModeValid(const CLMotionTypeDeviceMotionMode &) const
Unsupported mode (%d). Returning.
Unsupported mode (%d). Compass not found. Returning.
Unsupported mode (%d). Couldn't do DeviceMotion without Gyro. Returning.
void CLDeviceMotion::enableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)
Starting device motion, mode=0x%{public}x,useAccelerometer=%{public}d,useGyro=%{public}d,useCompass=%{public}d,fUseNorthRef=%{public}d,buildingGYTT=%{public}d
void CLDeviceMotion::disableSensorFusionWithMode(const CLMotionTypeDeviceMotionMode &)
Stopping device motion, mode=0x%x
void CLDeviceMotion::processSensorFusion(const CLSensorFusionService::Sample *, int)
CLSensorFusionService::Sample q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,magneticFieldCalibrationLevel,%d,timestamp,%20.20f,doingBiasEstimation,%d,doingYawCorrection,%d
virtual bool CLActivityLoggerRatePolicy::shouldILog(NSData *)
shouldILog returned %d for tag %d, last %f now %f, threshold is %lu
https://cl2.apple.com/1/v1
CLWifiTilesManagerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLWifiTilesManager.mm
-[CLWifiTilesManagerAdapter beginService]
CLWifiTilesManager::CLWifiTilesManager(CLSilo *, std::unique_ptr<CLIWifiTilesManagerExternal>, std::shared_ptr<CLWifiAccessPointLocationService>, CL::optional<CLTilesSetCollection>, CL::optional<std::unique_ptr<CLITileSyncManager> >)
WifiTilesServerUrl
CLTilesSetCollection CLWifiTilesManager::initializeProductionTilesSetCollection()
TILE: fDefaultWifiTilesServerUrl, %s
WifiTilesRootDirectory
TILE: fDefaultWifiTilesRootDirectory, %s
void CLWifiTilesManager::onDataProtectionNotification(int, const CLDataProtectionManager_Type::Notification &, const CLDataProtectionManager_Type::NotificationData &)
@GtsLock, lock, unprotected, %{public}lu, total, %{public}lu
void CLWifiTilesManager::onCompanionNotification(int, const CLCompanionNotifier_Type::Notification &, const CLCompanionNotifier_Type::NotificationData &)
KvgLink, Nearby, %d
void CLWifiTilesManager::onCleanupAgedTiles(CFRunLoopTimerRef)
virtual void CLWifiTilesManager::clearLocationInformation()
void CLWifiTilesManager::onClientNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
@GtsPair, LS Toggle, %{public}d
void CLWifiTilesManager::deleteAgedDownloadItems(std::map<TileId, std::unique_ptr<CLTileFile> > &, CFAbsoluteTime)
WtmDl, xlist, llsw, %.2lf, %.2lf, aged, size, %ld
void CLWifiTilesManager::deleteTilesExceedingLimits(CFAbsoluteTime)
Missing wifi #tile, x, %d, y, %d
Deleted wifi #tile isFileExistsOnServer is false. x, %d, y, %d
WtmList, delete, limits, size, %lu, llsw, %.2lf, %.2lf
TILE: deleteAgedTiles, end, numOfDeletedTiles, %lu, remain, %lu, name, %s
virtual bool CLWifiTilesManager::isCurrentTile(CLTileFile *)
TILE: isCurrentTile, degreesFromCornerLat, %.8lf, degreesFromCornerLon, %.8lf, inside, %d, %d, isCurrentTile, %d, %d, isCurrentLocationKnown, %d, %s
virtual void CLWifiTilesManager::deleteAgedTiles(CFAbsoluteTime)
void CLWifiTilesManager::cancelAllDownloads()
virtual void CLWifiTilesManager::removeAllTiles(bool, CLTilesManager_Type::TileType)
WtmList, delete, all, size, %lu, llsw, %.2lf, %.2lf
void CLWifiTilesManager::populateTilesSet(CFAbsoluteTime)
wifi #tiles, populateTilesSet
KvgEvent, Indexed
WtmList, indexed, %lu
bool CLWifiTilesManager::listAvailableFiles(const std::string &, CLTilesManager_Type::TileType, CFAbsoluteTime)
Done listing wifi tiles.
numberOfTilesInMap
void CLWifiTilesManager::refreshTilesDataIfNeeded()
void CLWifiTilesManager::checkDownloadSchedule(CFAbsoluteTime)
WtmDl, start, llsw, %.2lf, %.2lf
int CLWifiTilesManager::getDownloadConnectionType(CLTileFile *)
void CLWifiTilesManager::tileDownloadCompleted(CLFileDownload *, bool, void *)
WtmDl, downloaded, llsw, %.2lf, %.2lf, success, %d, NSURLErrorCode, %d
void CLWifiTilesManager::tileDecompressionCompleted(CLFileDownload *, bool, void *, CFAbsoluteTime)
decompressed wifi tile
saving access points in wifi tile.
Download
WtmDl, dbinsert, llsw, %.2lf, %.2lf
WtmList, add, download, size, %lu, llsw, %.2lf, %.2lf
void CLWifiTilesManager::sendNotificationTileWasDownloaded(bool, const CLTileFile &, const CLTilesSet &)
static void CLWifiTilesManager::_tileDownloadCompleted(CLFileDownload *, bool, void *)
static void CLWifiTilesManager::_tileDownloadCompleted(CLFileDownload *, bool, void *)_block_invoke
unsigned int CLWifiTilesManager::getNumOfActiveDownloads()
bool CLWifiTilesManager::requestDownload(CLTilesManager_Type::TileType, double, double, const std::string &, const CLTileFileDownloadDetails &, CFAbsoluteTime)
GnrTiles, block request
WtmDl, request, llsw, %.2lf, %.2lf
WtmDl, onlist, llsw, %.2lf, %.2lf, center, size, %ld
WtmDl, onlist, llsw, %.2lf, %.2lf, neighbor, size, %ld
bool CLWifiTilesManager::addToDownloadList(std::unique_ptr<CLTileFile>, const TileId &, const CLTileFileDownloadDetails &)
void CLWifiTilesManager::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
void CLWifiTilesManager::onStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
void CLWifiTilesManager::cleanUpDownloadList(CFAbsoluteTime)
virtual void CLWifiTilesManager::shutdown()
TILE: CLWifiTilesManager::shutdown
void CLWifiTilesManager::getTileStats(CLDaemonStats_Type::LocationNetworkQueries &)
TILE: stats: getTileStats, wifiTilesDownloaded, %d, wifiTilesDownloaded3G, %d, wifiTilesCached, %d
virtual CLTilesSet &CLWifiTilesManager::getTilesSet()
void CLWifiTilesManager::predownloadTilesForLocation(const CLDaemonLocation &, CFAbsoluteTime)
void CLWifiTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)
Updating neighbor tiles access timestamps if necessary.
neighborTiles
void CLWifiTilesManager::addAnyRawWifiTilesToDatabaseThenDeleteRecursive(CFAbsoluteTime, std::vector<std::string>)
Data protection enabled, ending side load.
Finished side-loading raw wifi tiles from disk.
Side loading wifi tile from disk.
void CLWifiTilesManager::addAnyRawWifiTilesToDatabaseThenDelete(CFAbsoluteTime)
Side loading already in progress.
Files found in tiles directory
files
void CLWifiTilesManager::addWifiTileToDatabaseAndDelete(const std::string &, CFAbsoluteTime)
Failed to unlock wifi tile.
Added raw wifi tile from disk to database.
tileHeader
plistExisted
updateGizmoSyncTimestamp
WtmList, add, rawfile, size, %lu, llsw, %.2lf, %.2lf
RawFile
static std::string CLWifiTilesManager::generateUniqueTileFileName(const TileId &)
std::map<TileId, CLTileFile *> CLWifiTilesManager::discoverWifiTilesAvailable(cl::chrono::CFAbsoluteTimeClock::time_point)
Failed to create tile file object for wifi tile.
WtmList, add, database, size, %lu, llsw, %.2lf, %.2lf
TILE: db to map, %lu, %lu
bool CLWifiTilesManager::updateTileFileObject(std::unique_ptr<CLTileFile>, const CLWifiTileHeaderEntry &, CFAbsoluteTime)
static std::vector<std::string> CLWifiTilesManager::listFilesInDirectory(const std::string &)
virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
%13.3lf
.download
virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::listClients() [Notification_T = CLWifiTilesManager_Type::Notification, NotificationData_T = CLWifiTilesManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
BinaryLogDirectory
static void CLBinaryLog::create()
creating the BinaryLog instance
creating fInstance = new CLBinaryLog()
Logging binary sensor data to %s
CLBinaryLog::CLBinaryLog()
com.apple.locationd.binlog.compression
STATUS,SENSOR,Time,%.3lf,Type,AccelOscarEmu,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20lf
STATUS,SENSOR,Time,%.3lf,Type,GyroOscarEmu,x,%20.20f,y,%20.20f,z,%20.20f,sampleNum,%d,fsync,%d,timestamp,%20.20lf
void CLBinaryLog::rotateIfNeeded(const double &)
Failed to determine if log rotation is needed. errno, %d, %s
.bz2
Failed to move aside log file %s to %s (%d)
%s,%s,Failed to delete log: %s
NOTICE
CLLog
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Shared/Logging/CLBinaryLog.mm
void CLBinaryLog::open()
Unable to open %s
void CLBinaryLog::close()
STATUS,SENSOR,Time,%.3lf,Type,Gyro,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,subType,%d,sampleNum%%3,%d,triggerEnabled,%d,triggerOn,%d
STATUS,SENSOR,Time,%.3lf,Type,GyroTemperature,temperature,%f
STATUS,SENSOR,Time,%.3lf,Type,GyroBias,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d
STATUS,SENSOR,Time,%.3lf,Type,GyroBiasFit,slope.x,%20.20f,slope.y,%20.20f,slope.z,%20.20f,intercept.x,%20.20f,intercept.y,%20.20f,intercept.z,%20.20f, lastMiniCal,%20.20f
STATUS,SENSOR,Time,%.3lf,Type,GyroDt,dt,%20.20f
STATUS,SENSOR,Time,%.3lf,Type,Magnetometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20lf
STATUS,SENSOR,Time,%.3lf,Type,Compass,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f
STATUS,SENSOR,Time,%.3lf,Type,CompassAlignment,compassJustAlignedToStableField,%d,timestamp,%20.20f
STATUS,SENSOR,Time,%.3lf,Type,CLDeviceMotion,q.x,%20.20f,q.y,%20.20f,q.z,%20.20f,q.w,%20.20f,userAccel.x,%20.20f,userAccel.y,%20.20f,userAccel.z,%20.20f,rotationRate.x,%20.20f,rotationRate.y,%20.20f,rotationRate.z,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,magneticFieldCalibrationLevel,%d,timestamp,%20.20f,doingBiasEstimation,%d,doingYawCorrection,%d
STATUS,SENSOR,Time,%.3lf,Type,GyroCompass,attitude.x,%.8f,.y,%.8f,.z,%.8f,.w,%.8f,calibrated.x,%.8f,.y,%.8f,.z,%.8f,uncalibrated.x,%.8f,.y,%.8f,.z,%.8f,gravity.x,%.8f,.y,%.8f,.z,%.8f,heading,%.1f,trueheading,%.1f,accuracy,%.1f,level,%d,timestamp,%20.20lf
STATUS,SENSOR,Time,%.3lf,Type,SessionOverride,sessionType,%d,timestamp,%.3lf
STATUS,SENSOR,Time,%.3lf,Type,CLDeviceMotion,q.x,%20.20f,q.y,%20.20f,q.z,%20.20f,q.w,%20.20f,userAccel.x,%20.20f,userAccel.y,%20.20f,userAccel.z,%20.20f,rotationRate.x,%20.20f,rotationRate.y,%20.20f,rotationRate.z,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,magneticFieldCalibrationLevel,%d,timestamp,%20.20f,doingBiasEstimation,%d,doingYawCorrection,%d,type,%d
STATUS,SENSOR,Time,%.3lf,Type,NatalieData,startTime,%.3lf,activityType,%u,isStanding,%d,fractionalGrade,%f,gradeType,%u,rawGradeType,%u,metSource,%u,hrmin,%f,mets,%f,duration,%.3lf,fGpsAvailability,%d
STATUS,SENSOR,Time,%.3lf,Type,OnsetHeartRateData,dataSource,%u,interpolation,%u,HeartRate,%f,confidence,%f,error,%d,timestamp,%.3lf,startTime,%.3lf,sinceLastGood,%.3lf,mode,%u
STATUS,SENSOR,Time,%.3lf,Type,StrideCalBin,bin,%d,begin,%.3lf,end,%.3lf,state,%d,kValue,%.3lf
STATUS,SENSOR,Time,%.3lf,Type,MetsInfo,mets,%f,metsHR,%f,metsWR,%f,source,%u,metsDiff,%f
%s,%s,Failed to write CLBinaryLog Buffer to disk
%s,%s,Failed to move file %s to %s (%d)
.bin
locationdSensors
LogFileRotationSizeBinary
LogFileStorageCountBinary
CLBTLEFenceManagerUnsupported::CLBTLEFenceManagerUnsupported(CLSilo *)
BTLE fencing is not supported on this device.
virtual void CLBTLEFenceManagerUnsupported::addMonitoredRegion(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
virtual void CLBTLEFenceManagerUnsupported::getMonitoredRegions(const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)
virtual bool CLBTLEFenceManagerUnsupported::hasMonitoredRegions(const std::string &)
virtual void CLBTLEFenceManagerUnsupported::removeMonitoredRegion(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
virtual void CLBTLEFenceManagerUnsupported::requestRegionState(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
virtual void CLBTLEFenceManagerUnsupported::queryBundleIdentifiersWithEnteredRegions(CLBTLEFenceManager_Type::BundleIdentifierReply)
virtual bool CLBTLEFenceManagerUnsupported::isSupported()
virtual bool CLBTLEFenceManagerUnsupported::registerForNotificationInternal(const CLBTLEFenceManager_Type::Notification &)
virtual bool CLBTLEFenceManagerUnsupported::unregisterForNotificationInternal(const CLBTLEFenceManager_Type::Notification &)
virtual bool CLActivityLoggerMsgPolicy::shouldILog(NSData *)
tagEnabled returns %d for tag %d
CLAutopauseProviderDummy::CLAutopauseProviderDummy(CLSilo *)
PAUSE: Autopause not suppored on this platform, constructing CLAutopauseProviderDummy
virtual bool CLAutopauseProviderDummy::registerForNotificationInternal(const CLAutopauseProvider_Type::Notification &)
virtual bool CLAutopauseProviderDummy::unregisterForNotificationInternal(const CLAutopauseProvider_Type::Notification &)
com.apple.locationd.CoreMotion.CLGyroBiasEstimator
DisableDynamicGyroBias
void CLGyroBiasEstimator::removeClientInternal(const void *)
CLGyroBiasEstimator removing client %p
CLGyroBiasEstimator unknown client instance %p
void CLGyroBiasEstimator::addClientInternal(const void *, const bool, CLGyroBiasEstimator::Handler)
CLGyroBiasEstimator adding client %p, sending out cached gyro bias,bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f
CLGyroBiasEstimator adding client %p, no cached gyro bias available
void CLGyroBiasEstimator::refreshDispatchersIfNecessaryInternal()
CLGyroBiasEstimator,SPUEnabled,%d,BuildingGYTT,%d,NumClients,%lu
AOP/SPU gyro bias not available on this platform.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/GyroBiasEstimator/CLGyroBiasEstimator.mm
void CLGyroBiasEstimator::registerInputNotificationsInternal()
GyroBiasFit,slope.x,%20.20f,slope.y,%20.20f,slope.z,%20.20f,intercept.x,%20.20f,intercept.y,%20.20f,intercept.z,%20.20f, lastMiniCal,%20.20f
Registering for gyro notifications
Registering for gyro temperature notifications
Registering for magnetometer notifications
void CLGyroBiasEstimator::unregisterInputNotificationsInternal()
Unregistering for gyro notifications
Unregistering for gyro temperature notifications
Unregistering for magnetometer notifications
void CLGyroBiasEstimator::feedGyroTemperature(const CLGyro::Temperature *)
Notifying clients on temperature update,temperature,%f
void CLGyroBiasEstimator::notifyClients(CFTimeInterval)
GyroBias,time,%f,temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,dbias.x,%f,dbias.y,%f,dbias.z,%f,var.x,%f,var.y,%f,var.z,%f,client,%p
void CLGyroBiasEstimator::tryBuildGYTT(CLVector3d<float>, float)
Warning: Temperature is changing too quickly, clearing GYTT buffers
Warning: Could not insert GYTT because bump was detected.
void CLGyroBiasEstimator::tryBuildGYTT(CLVector3d<float>, float)_block_invoke
Bias estimate inserted: bias,%f,%f,%f,variance,%f,%f,%f,temperature,%f
v8@?0^{CLGyroCalibrationDatabaseLocalBase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}4
void CLGyroBiasEstimator::feedGyroBiasFit(CLMotionTypeGyroBiasFit)
Expected linear fit.
GyroBiasFit: slope,%f,%f,%f,intercept,%f,%f,%f,seconds,%f
void CLGyroBiasEstimator::notifySPUClients(const CLMotionCoprocessorInterface::GyroBiasAndVariance *)
SPUGyroBias,temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f,client,%p
void CLGyroBiasEstimator::notifySPUClients(const CLMotionCoprocessorInterface::GyroBiasAndVariance *)_block_invoke
SPU bias estimate inserted: bias,%f,%f,%f,variance,%f,%f,%f,temperature,%f
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLRunningBufferStats.h
T CLRunningBufferStats<float>::getMax() const [T = float]
T CLRunningBufferStats<float>::getMin() const [T = float]
probability
hasIdentifier
T@"NSString",&,N,V_identifier
hasProbability
Td,N,V_probability
CLOnBodyNotifier6::CLOnBodyNotifier6(CLSilo *)
configuration: wake threshold = %f
Registering with daemon status
virtual void CLOnBodyNotifier6::feedParams(NSDictionary *)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/OnBody/CLOnBodyNotifier6.mm
void CLOnBodyNotifier6::startOnBodyDetectionHelper(bool)
Registering with CLAccelerometer
Registering throttledDispatcher with CLAccelerometer
void CLOnBodyNotifier6::stopOnBodyDetectionHelper(bool)
Unregistering with CLAccelerometer
Unregistering throttleDispatcher with CLAccelerometer
void CLOnBodyNotifier6::onAccelerometerData(const CLAccelerometer::Sample *, unsigned int)
detection @ %llu : low %f high %f status %d confidence %d odds %.2f
Failed to add throttled dispatcher
void CLOnBodyNotifier6::onThrottledAccelerometerData(const CLAccelerometer::Sample *)
throttled @ %llu: accel = [%.2f %.2f %.2f] = %.2f ? %.2f
Failed to add dispatcher
void CLOnBodyNotifier6::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
kNotificationSleep. Turning off on body detector
kNotificationWake. Turning on on body detector
virtual void CLClusterAlgorithm<CLCompassDatabaseRecord>::buildClusterAroundIndex(const std::list<int> &, int, std::list<int> &, std::list<int> &, float) const [T = CLCompassDatabaseRecord]
Unable to find index (%d) to value on which we want to build a cluster around!  Returning from function.
Cluster Size 
void CLMagnetometerCoexistenceNotifierCpasV11::chooseOffsetData()
CMLinearTemperatureFit::CMLinearTemperatureFit(CMTemperatureFitReceiver *)
Assertion failed: receiver, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMLinearTemperatureFit.h, line 27,receiver must not be null..
void CLLastConfidentLocation::onNewLocations(const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
Received kNotificationWifiLocationBatched, num,%u,Size, %lu
Received unknown notification %d
bool CLLastConfidentLocation::isQualifiedAsConfident(const CLDaemonLocation &)
Skipping new location with infinite lifespan,accuracy,%.01lf,type,%s
Skipping new location with invalid coordinate
Skipping new location with invalid rawCoordinate
Skipping new location with coordinate in null-island
Skipping new location with rawCoordinate in null-island
bool CLLastConfidentLocation::isPreviousLocationPreferred(const CLDaemonLocation &)
Skipping new location with an older timestamp,%.03lf,cached,%.03lf
Skipping new location, since having recent more confident location
void CLLastConfidentLocation::notifyConfidentLocationIfNecessary()
Last confident location not available
Last confident location too old, maxAge = %.1lf
We don't expect any infinite lifespan locations in confident locations,acc,%.01lf,type,%s
Notifying cached location,num,%u,accuracy,%.01lf,timestamp,%.03lf,lifespan,%.04lf
void CLLastConfidentLocation::onCachedLocationControllerNotification(int, const CLCachedLocationController_Type::Notification &, const CLCachedLocationController_Type::NotificationData &)
Received a kNotificationCachedLocationControllerStateUpdate notification, state, %d
Recieved unknown notification %d
LogFileRotationSize
LogFileStorageCount
CLLogBase
/Library/Logs/CrashReporter
Caches
move
%s,%s,could not %s log file %s to %s
%s,%s,could not stat %s
%s,%s,failed to open %s
LogDumpOnUnload
LogDumpOnLoad
CLCellTile-Mutex
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s
tilestool: mmap, %lu, file, %lu
TEST_testBinarySearch
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLKeyLatLonTileTemplate.h
isFound == isFoundMmap
TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s
isFound
TILE: result: tilestool: pass, %d, tests, %lu, %lu
virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: index entry, %3lu, %3u, %s
TILE: searched, numOfEntries, %u, offsetEntries, %d
onTraversingSection
offsetEntries + numOfEntries <= entriesHeader.numOfEntries
TILE: avoid data search
TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u
TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d
TILE: index search, match, %s
TILE: index search, not found
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: ......................................................................., getLocationByKey_mmap, key, %s
TILE: getLocationByKey_mmap, failed to mmap
TILE: getLocationByKey_mmap, not found in index, a, %u, b, %u, %s
TILE: getLocationByKey_mmap, nothing to search, a, %u, b, %u, %s
TILE: getLocationByKey_mmap, isFound, %d, searchedArea, %u, key, %s, entry, %s
search
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_GSM, CLTilesManager_Type::KeyLatLonEntry_GSM>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_GSM, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_GSM]
TILE: ......................................................................., getLocationByKey_traverse, key, %s
TILE: getLocationByKey_traverse, prefer local file name because it exists, %s
TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, CLTilesManager_Type::KeyLatLonEntry_CDMA>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CDMA, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CDMA]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_LTE, CLTilesManager_Type::KeyLatLonEntry_LTE>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_LTE, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_LTE]
CLTilesSet::CLTilesSet(CLTilesManager_Type::TileType, const std::string &, const std::string &)
TILE: creating directory, %s, ret, %d
CLTilesSetCollection::CLTilesSetCollection()
Initialize CLTilesSetCollection.
CLTilesSet *CLTilesSetCollection::getTilesSet(CLTilesManager_Type::TileType)
Invalid TileType value.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLTilesSet.mm
Index out of bounds
size
void CLTilesSetCollection::addTilesSet(CLTilesManager_Type::TileType, std::unique_ptr<CLTilesSet>)
Mismatch of tile type inserting CLTilesSet.
avgIntensity
Td,N,V_avgIntensity
Ti,N,V_mode
kModeThreshold
kModeBurst
kModeCoverage
SemiStatVMThreshold
virtual CLMetsInfo CLNatalieSemiStatModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, Semistationary, Standing, %d, metsFromIntensity, %.1f, metsFromSteps, %.1f, metsFromPosture, %.1f, metsFinal, %.1f, metsFromPushes, %.1f, computeTime, %f
CLSensorRecorderNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/SensorRecorder/CLSensorRecorderNotifier.mm
-[CLSensorRecorderNotifierAdapter beginService]
CLSensorRecorderNotifier
SensorRecorderAggregationInterval
SensorRecorderAggregationExpiration
SensorRecorderAccelSamplingRate
SensorRecorderGyroSamplingRate
SensorRecorderAccelAlwaysSubscribed
SensorRecorderGyroAlwaysSubscribed
v28@?0d4Q12r*20I24
CLSensorRecorderNotifier::CLSensorRecorderNotifier(CLSilo *)_block_invoke
Aggregating accel sensor recorder samples.
CLSensorRecorderNotifier::CLSensorRecorderNotifier(CLSilo *)_block_invoke_2
Aggregating gyro sensor recorder samples.
bool CLSensorRecorderNotifier::recordSensorData(CLSensorRecorder_Types::DataType, CFTimeInterval)
Record %s data for %f
bool CLSensorRecorderNotifier::setSensorSampleRate(CLSensorRecorder_Types::DataType, unsigned int)
requested sampling rate of %d is greater than the max allowed of %d
setting desired accel sampling rate to %dhz
bool CLSensorRecorderNotifier::writeSensorRecordDataToFile(CLSensorRecorder_Types::DataType, NSFileHandle *, CFAbsoluteTime, CFAbsoluteTime)
Error accessing sensor recorder data from %{private}f, %{private}f
Error occurred while retrieving data record %{private}llu
Wrote %lu meta records across %d data containers to %s
void CLSensorRecorderNotifier::updateSubscriptionType(CLSensorRecorder_Types::DataType)
Updating %s sampling rate %d, fitness tracking enabled, %d
Updated %s subscription due to invalid time.
kAccelSampleRate
kGyroSampleRate
kAccelAlwaysSubscribed
kGyroAlwaysSubscribed
kAccelBufferSubscription
kGyroBufferSubscription
virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLSensorRecorderNotifier_Type::Notification, NotificationData_T = CLSensorRecorderNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
StatCycleModelMetsScale
virtual CLMetsInfo CLNatalieStationaryCycleModel::computeMETS(const CLNatalieModelInput &)
Natalie Model, Stationary Cycle, Begin Time, %f, End Time, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f, HRstaleness, %f
Natalie Model, Stationary Cycle, Fused, Begin Time, %f, End Time, %f, HR METS, %f, Fused METS, %f, Duration, %f, Weight(kg), %f, fMetsScaling, %f
CLBTLEBeaconProviderMock-Notifier
void CLBTLEBeaconProviderMock::onEventSource()
Attempting to fulfill scan requests,%lu.
Fulfilled scan requests,%d.
Processing events for %lu proximity zones.
Processed %d proximity zone events.
Bluetooth is powered off, no events will be processed.
virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::listClients() [Notification_T = CLBTLEBeaconProvider_Type::Notification, NotificationData_T = CLBTLEBeaconProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
-[CMStrideCalibrationElevationBuffer feedElevationData:]
Elevation, %f, %f, %d, %d
-[CMStrideCalibrationElevationBuffer updateGradient:]
TrackCalibration,%s,CalData,%s,ElevationAscended,%d,ElevationDescended,%d
CLBTLEFenceManagerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLBTLEFenceManager.mm
-[CLBTLEFenceManagerAdapter beginService]
CLBTLEFenceManager-Notifier
CLBTLEFenceManager
virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
scanCFTimestamp
scanMCTimestamp
measurementProtobuf
flags
hasScanCFTimestamp
Td,N,V_scanCFTimestamp
hasScanMCTimestamp
TQ,N,V_scanMCTimestamp
hasMeasurementProtobuf
T@"NSData",&,N,V_measurementProtobuf
hasFlags
Ti,N,V_flags
NO_FLAGS
USING_SETTLED_FLAGS
FULLY_SETTLED
ACCEL_IS_VALID
ACCEL_IS_POWERFUL
CLNatalimetryRecorderDb
virtual long CLNatalimetryRecorderDb::aggregateRecords(const CLAggregationRules &)
Programmer error, we expect an expiration record!
CMError CLNatalimetryRecorderDb::queryNatalieDataSince(CLNatalieData &, std::vector<CLNatalieData> &) const
NatalieHistory not accessible
DB UUID un-initialized
Potential DB reset, returning all records to clients
Calorie history has rolled back, returning mru to clients,mru.recordId,%d,record.recordId,%d,mru.natalies,%lld,record.natalies,%lld
Calorie history has rolled back!!
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Natalimetry/CLNatalimetryRecorderDb.mm
void CLNatalimetryRecorderDb::setFinishedInsertHandler(CLSilo *, CLNatalieDataFinishedInsertHandler)
NatalieHistory
SELECT COUNT(*) FROM NatalieHistory
SELECT * FROM NatalieHistory ORDER BY startTime ASC
SELECT * FROM NatalieHistory WHERE id >= ? ORDER BY id ASC LIMIT ?
DELETE FROM NatalieHistory WHERE startTime < ?
DELETE FROM NatalieHistory WHERE startTime > ?
DELETE FROM NatalieHistory
INSERT INTO NatalieHistory (startTime, activityType, isStanding, mets, natalies, basalNatalies, overrideSet) VALUES (?, ?, ?, ?, ?, ?, ?)
UPDATE NatalieHistory SET startTime = startTime + ?
SELECT * FROM NatalieHistory ORDER BY startTime DESC LIMIT 1
SELECT * FROM NatalieHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC
virtual void CLNatalimetryRecorderDb::prepareSQLStatements()
void CLNatalimetryRecorderDb::alterTableIfNecessary()
NatalieHistory doesn't exist yet.
ALTER TABLE NatalieHistory
UPDATE NatalieHistory SET 
virtual void CLNatalimetryRecorderDb::deleteRecordsAfterInsertUL(const CLNatalieData &)
virtual void CLNatalimetryRecorderDb::shiftRecordsByUL(CFTimeInterval)
void CLNatalimetryRecorderDb::insertNataliesForGap(const CFAbsoluteTime, const CFAbsoluteTime)
Inserting basal natalies %f for gap (%lf - %lf, %lfs)
overrideSet
bool CLActivityRecorderDb<CLNatalieData>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLNatalieData]
virtual void CLActivityRecorderDb<CLNatalieData>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLNatalieData]
CLBTLEBeaconProviderConcrete-Notifier
CLBTLEBeaconProviderConcrete
BTLEBeaconProvider
BeaconFenceBestEffortScheduleEnabled
CLBTLEBeaconProviderConcrete::CLBTLEBeaconProviderConcrete(CLSilo *)
Overriding BeaconFenceBestEffortScheduleEnabled,%d.
BeaconFenceBestEffortInterval
Overriding BeaconFenceBestEffortInterval,%.2f.
com.apple.locationd.beaconprovider
virtual bool CLBTLEBeaconProviderConcrete::addProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)
Adding zone,%s.
Invalid region definition for zone monitoring.
Zone,%s, already registered, incremented reference count,%d.
Device doesn't support background monitoring, performing best effort zone detection.
Registering zone,%s, with Bluetooth.
virtual bool CLBTLEBeaconProviderConcrete::removeProximityZone(const CLBTLEBeaconProvider_Type::ProximityZone &)
Removing zone,%s.
Unregistering zone,%s, with Bluetooth, this is the last client.
Decremented zone,%s, reference count,%d, there are still other clients.
Unable to remove zone,%s, it wasn't found.
void CLBTLEBeaconProviderConcrete::onZoneDetectionTimer(CLPersistentTimer *)
Zone detection timer woke up.
void CLBTLEBeaconProviderConcrete::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Received a wake event.
void CLBTLEBeaconProviderConcrete::unlockedPerformZoneDetectionWithCache()
Best effort zone,%s, firstExit,%f, now,%f, has not reached exitThreshold,%f.
Best effort zone,%s, subject to exit.
Best effort zone,%s, stateTransition,%d.
void CLBTLEBeaconProviderConcrete::unlockedResetBestEffortExitStates()
Resetting best effort zone,%s, exit state
venues
T@"NSMutableArray",&,N,V_venues
CLGpsAssistantSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/CLGpsAssistant.mm
-[CLGpsAssistantAdapter beginService]
CLGpsAssistant
virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::listClients() [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
result %d confidence %d timestamp %f
kCMOnBodyStatusResult
kCMOnBodyStatusConfidence
CLActivityAlarmConcentrator
d20@?0I4d8B16
void CLActivityAlarmConcentrator::removeAlarm(CMActivityAlarm *)
Removing an alarm which has not been added.
Remove
NSTimeInterval CLActivityAlarmConcentrator::alarmHandler(CMActivityAlarmTrigger, NSTimeInterval, bool)
Invalid trigger.trigger,%u
Wake
Fire
Action
MotionActivityAlarm
BundleID
AlarmTrigger
AlarmDuration
hasMac
hasMode
Td,N,V_mode
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/ActivityAlarm/CMActivityAlarmLocal.mm
-[CMActivityAlarm initWithTrigger:duration:onQueue:withHandler:]
<locationd internal>
-[CMActivityAlarm initWithTrigger:duration:onQueue:forClient:withHandler:]
-[CMActivityAlarm initWithTrigger:duration:onRunLoop:withHandler:]
trigger
TI,N,V_trigger
T@"NSString",C,N,V_bundleId
executable
T@"NSString",C,N,V_executable
CLBTLEBeaconProvider-Class
CLBTLEBeaconProviderSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLBTLEBeaconProvider.mm
-[CLBTLEBeaconProviderAdapter beginService]
static CLBTLEBeaconProvider *CLBTLEBeaconProvider::instanceForSilo(CLSilo *)_block_invoke
Mode,%d is not supported, defaulting to the concrete service mode.
CLBTLEBeaconProvider
CLDarwinNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLDarwinNotifier.mm
-[CLDarwinNotifierAdapter beginService]
virtual bool CLDarwinNotifier::registerForNotificationInternal(const CLDarwinNotifier_Type::Notification &)
Unknown registration requested: %d
virtual bool CLDarwinNotifier::unregisterForNotificationInternal(const CLDarwinNotifier_Type::Notification &)
Unknown unregistration requested: %d
void CLDarwinNotifier::registerForDaemonSettings(bool)
Attempted to re-register for daemon settings while already registered
Attempted to unregister for daemon settings while not registered
com.apple.locationd.appleAccountDidChange
void CLDarwinNotifier::registerForAppleAccountDidChange(bool)
Attempted to re-register for AppleAccountDidChange while already registered
Attempted to unregister for AppleAccountDidChange while not registered
virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLDarwinNotifier_Type::Notification, NotificationData_T = CLNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLBTLERSSIRangeCalculator-Mutex
VerboseRangeLoggingEnabled
bool CLBTLERSSIRangeCalculator::getRangeMeasurement(const CLMotionActivity &, CFTimeInterval, CLBTLERSSIRangeCalculator_Type::RangeMeasurement &, const std::string &, const uint16_t &, const uint16_t &)_block_invoke
Overriding VerboseRangeLoggingEnabled,%d.
time,%f,
uuid,%s,
major,%hd,
observable,%d,
range,%d,
unc,%f,
filteredRSSI,%d,
activity,%d,
confidence,%d,
activityFactor,%f,
fFilterPk_pre,%f,
tx,%f,
cntImmediate,%d,
cntNear,%d,
cntMid,%d,
cntFar,%d,
pImmediate,%f,
pNear,%f,
pMid,%f,
pFar,%f,
number rssi,%lu,
rssi,
%f,%d,%d,
bool CLBTLERSSIRangeCalculator::getRangeMeasurement(const CLMotionActivity &, CFTimeInterval, CLBTLERSSIRangeCalculator_Type::RangeMeasurement &, const std::string &, const uint16_t &, const uint16_t &)
CLFallLogger
-[CLFallLogger logFallStats:]
STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f
%@.v%d.%lld.%@
%@/%@
/var/root/Library/Caches/locationd/logs/newtonStats
newtonStats
void CLBeaconFenceDatabase::cleanDatabase()
Cleaning DB: invalid proximity zone for fence, %s.
bool CLBeaconFenceDatabase::addFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
Adding fence,%s.
Error, invalid proximity zone for fence,%s.
) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
Unable to bind SQL for adding fence,%s.
bool CLBeaconFenceDatabase::removeFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
Removing fence,%s.
Unable to bind SQL for removing fence,%s.
bool CLBeaconFenceDatabase::removeAllFencesForBundleIncludingOnBehalf(const std::string &)
Removing all fences for bundle,%s.
=? OR 
Unable to bind SQL for removing all fences for bundle,%s.
SELECT DISTINCT 
bool CLBeaconFenceDatabase::getAllFences(CLBTLEBeaconRegion_Type::MonitoredRegions &)
Retrieving all fences.
Unable to get fences from the database.
An error was encountered when retrieving fences from the database.
bool CLBeaconFenceDatabase::getFencesForBundle(const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)
Retrieving fences for bundle,%s.
Unable to bind SQL for retrieving fences for bundle,%s.
An error was encountered when retrieving fences from the database for bundle,%s.
bool CLBeaconFenceDatabase::getFencesForBundleIncludingOnBehalf(const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)
bool CLBeaconFenceDatabase::getFenceForBundleAndOnBehalf(const std::string &, const std::string &, const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegion &)
Retrieving fence,%s/%s.
Unable to bind SQL for retrieving fence,[%s]/%s/%s.
Unable to get fence,[%s]/%s/%s, from database.
int CLBeaconFenceDatabase::fenceCountForBundle(const std::string &)
Unable to get the fence count for bundle,%s.
void CLBeaconFenceDatabase::addOnBehalfBundleIdColumnIfNotExists()
addOnBehalfBundleIdColumnIfNotExists
addOnBehalfBundleIdColumnIfNotExists, table doesn't even exist
ALTER TABLE 
 ADD COLUMN 
addOnBehalfBundleIdColumnIfNotExists, OnBehalfBundleId already exists
Re-create primary key to include OnBehalfBundleId
BundleIdentifier
Identifier
ProximityUUID
Major
Minor
DefinitionMask
OnBehalfBundleIdentifier
BeaconFences
CLBeaconFenceAuthorizationManagerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLBeaconFenceAuthorizationManager.mm
-[CLBeaconFenceAuthorizationManagerAdapter beginService]
CLBeaconFenceAuthorizationManager-Notifier
CLBeaconFenceAuthorizationManager::CLBeaconFenceAuthorizationManager(CLSilo *)
Unable to initialize authorization manager with airplane mode status.
Initializing authorization manager with exceptions,%d.
bool CLBeaconFenceAuthorizationManager::addFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
Unable to get fences for bundle,%s. Fence,%s, will not be added.
com.apple.locationd.bundle-/AppleInternal/Library/LocationBundles/FenceTester.bundle
com.apple.locationd.bundle-/AppleInternal/Library/Frameworks/CoreAutomationDevice.framework
com.apple.locationd.bundle-/System/Library/PrivateFrameworks/BulletinBoard.framework
Bundle,%s, exceeds its fence limit,%d. Fence,%s, will not be added.
Added fence,%s, to the database.
Unable to add fence,%s, to the database.
bool CLBeaconFenceAuthorizationManager::removeFence(const CLBTLEBeaconRegion_Type::MonitoredRegion &)
Removed fence,%s, from the database.
Unable to remove fence,%s, from the database.
void CLBeaconFenceAuthorizationManager::onBeaconNotification(int, const CLBTLEBeaconProvider_Type::Notification &, const CLBTLEBeaconProvider_Type::NotificationData &)
Received Bluetooth LE power,%d.
void CLBeaconFenceAuthorizationManager::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)
Received uninstall for bundle,%s.
Received authorization for bundle,%s.
Received location services status,%d.
Reauthorizing clients by toggling beacon fences
void CLBeaconFenceAuthorizationManager::onDaemonStatusNotification(int, const CLDaemonStatus_Type::Notification &, const CLDaemonStatus_Type::NotificationData &)
Received airplane status,%d.
Unable to update authorization manager with airplane mode status.
com.apple.CooLtool
bool CLBeaconFenceAuthorizationManager::unlockedIsOnBehalfBundleAuthorized(std::string)
Empty bundle identifier should not be passed in here
void CLBeaconFenceAuthorizationManager::unlockedSetFenceIconStateForBundle(const std::string &, bool)
Setting icon state,%d, for bundle,%s.
void CLBeaconFenceAuthorizationManager::unlockedRemoveAllFencesForBundle(const std::string &)
Unable to get fences from database for bundle,%s.
Unable to remove all fences from the database for bundle,%s.
Removed all fences for bundle,%s.
void CLBeaconFenceAuthorizationManager::unlockedNotifyAllWithResumeFences()
Unable to retrieve all fences from the database.
No fences will be resumed due to exception,%d.
Resuming fences,%lu, for bundles,%lu.
void CLBeaconFenceAuthorizationManager::unlockedNotifyResumeFence(const std::string &, const std::string &, const std::string &)
Unable to get fence,[%s]/%s/%s, from the database.
Bundle(s) not authorized, fence,[%s]/%s/%s, will not be resumed.
Fence,[%s]/%s/%s, will not be resumed due to exception,%d.
Resuming fence,[%s]/%s/%s.
void CLBeaconFenceAuthorizationManager::unlockedNotifyAllWithSuspendFences()
Unable to get all fences from database.
Suspending fences,%lu, for bundles,%lu.
void CLBeaconFenceAuthorizationManager::unlockedNotifyBundleAppropriatelyWithFences(const std::string &)
There are no fences for bundle,%s.
Suspending fences (exception),%lu, for bundle,%s.
Suspending fences (authorization1),%lu, for bundle,%s.
Suspending fences,%lu, for bundle,%s.
Resuming fences,%lu, for bundle,%s.
void CLBeaconFenceAuthorizationManager::unlockedSuspendForException(MonitoringExceptions)
Adding exception,%#x, to stored exceptions %#x.
void CLBeaconFenceAuthorizationManager::unlockedResumeForException(MonitoringExceptions)
Removing exception,%#x, from stored exceptions %#x.
CLBeaconFenceAuthorizationManager
virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::removeClient(int) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::clientRegistered(int, const Notification_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual void CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::listClients() [Notification_T = CLBeaconFenceAuthorizationManager_Type::Notification, NotificationData_T = CLBeaconFenceAuthorizationManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::basic_string<char>]
virtual bool CLBTLERangeManagerConcrete::registerForNotification(int, const CLBTLERangeManager_Type::Notification &, const CLBTLEBeaconRegion_Type::MonitoredRegions &)
Registered regions,%zu
ranging_register
Unable to register with base-class.
virtual bool CLBTLERangeManagerConcrete::unregisterForNotification(int, const CLBTLERangeManager_Type::Notification &)
Unregistered regions,%zu
ranging_unregister
Unable to retrieve registration info for client,%d.
virtual bool CLBTLERangeManagerConcrete::unregisterForNotificationInternal(const CLBTLERangeManager_Type::Notification &)
Range manager has lost its last connection.
void CLBTLERangeManagerConcrete::onBeaconNotification(int, const CLBTLEBeaconProvider_Type::Notification &, const CLBTLEBeaconProvider_Type::NotificationData &)
Received proximity scan, updating beacon cache with devices,%zu
Caching new beacon identifier,%s, proximityUUID,'%s', major,%d, minor,%d, mask,%d.
Removed expired beacons,%d.
Notifying beacon clients of new scan.
Notifying region proximityUUID,'%s', major,%d, minor,%d, mask,%d with beacons,%zu.
void CLBTLERangeManagerConcrete::onMotionStateNotification(int, const CLMotionState_Type::Notification &, const CLMotionState_Type::NotificationData &)
Received activity update of activity,%d.
Unexpected notification %d
void CLBTLERangeManagerConcrete::unlockedStart()
Starting the manager.
void CLBTLERangeManagerConcrete::unlockedStop()
Stopping the manager.
void CLBTLERangeManagerConcrete::unlockedStartIfInterested()
Starting the manager if there's an interest in ranging.
There's no interest in ranging, the manager wont be started.
The manager is already started.
void CLBTLERangeManagerConcrete::unlockedStopIfNotInterested()
Stopping the manager if there's no interest in ranging.
There's an interest in ranging, the manager wont be stopped.
The manager is already stopped.
void CLBTLERangeManagerConcrete::unlockedSuspendForException(RangingExceptions)
void CLBTLERangeManagerConcrete::unlockedResumeForException(RangingExceptions)
lacID
Ti,N,V_lacID
virtual CLMetsInfo CLCalorieSwimmingModel::computeMETS(const CLNatalieModelInput &)
startTime,%f,endTime,%f,numberOfStrokes,%d,strokeType,%d,epochMets,%f,timestamp,%f,speed,%f,metSource,%d,strokeLength,%f,strokeRate,%f,entryStartTime,%f,entryEndTime,%f,distance,%f,scaledMets,%f,historicalTurnsPerSession,%f
motionContext
hasMotionContext
Ti,N,V_motionContext
CLBTLERangeManagerSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Fence/CLBTLERangeManager.mm
-[CLBTLERangeManagerAdapter beginService]
CLBTLERangeManager-Notifier
CLBTLERangeManager
CLBTLERangeManagerUnsupported::CLBTLERangeManagerUnsupported(CLSilo *)
This device does not support BTLE ranging.
virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::removeClient(int) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
virtual bool CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::clientRegistered(int, const Notification_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
virtual bool CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
virtual void CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::listClients() [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
virtual bool CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLBTLERangeManager_Type::Notification, NotificationData_T = CLBTLERangeManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >]
void CLIntegrityMonitor::crossCheck(const CLDaemonLocation &, const CLDaemonLocation &, double &, bool &, double &)
deltaTime = %0.3f, but most negative allowed is %0.3lf, resetting Integrity Monitor
bool CLIntegrityMonitor::updateIM(CLDaemonLocation &)
locationType,integrityPrior,%d,integrityNew,%d
location type,%d,not supported
not reliable or very low reliable,locationType,%d,lat,%.8lf,lon,%.8lf
Location rejected by IM,Reason,disagrees with GPS,location type,%d
huncBump,fromHunc,%.1lf,toHunc,%.1lf
Location rejected by IM,Reason,disagrees with high confidence wifi,location type,%d
Location rejected by IM,Reason,low confidence wifi strongly disagrees with cell,location type,%d
CLTurnStateSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Context/CLTurnState.mm
-[CLTurnStateAdapter beginService]
CLTurnState
virtual bool CLTurnState::registerForNotificationInternal(const CLTurnState_Type::Notification &)
Client registered for notification %d
virtual bool CLTurnState::unregisterForNotificationInternal(const CLTurnState_Type::Notification &)
Client unregistered for notification %d
virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::listClients() [Notification_T = CLTurnState_Type::Notification, NotificationData_T = CLTurnState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
bool CLWorkoutManager::stopWorkout(CLMotionStateMediator_Type::WorkoutEvent &)
No active workouts to stop!
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/GyroBiasEstimator/CLNonlinearGyroBiasFitter.cpp
const CLNonlinearGyroBiasFitter::Sample *CLNonlinearGyroBiasFitter::detail::nearestSample(const std::vector<Sample> &, float, int)
Fit::SubFit CLNonlinearGyroBiasFitter::detail::computeSubFit(std::vector<Sample>::const_iterator, std::vector<Sample>::const_iterator)
Fit CLNonlinearGyroBiasFitter::detail::windowFit(std::vector<Sample> &&)
CLSignalEnvironmentProvider_Type::SignalEnvironmentType CLSignalEnvironmentDataManager::GetSignalEnvironment(double, double, std::string, bool &)
CLSE,Reading,%s
CLSE,could not open,%s
CLSE,file has expired - redownload
CLSE,file version does not match expected
CLSE,avl byte index,%d,is larger than the data available in the availabilty file
CLSE,Invalid CLDEM file - unable to get data byte
CLSE,Unexpected case
CLSE,finished
static bool CLSignalEnvironmentDataManager::readSignalEnvHelper(CLSignalEnvironmentDataManager::SignalEnvironment &)
CLSE,fseek returned non-zero
CLSE,Invalid CLSE file - header string
CLSE,Invalid CLSE file - version
CLSE,Invalid CLSE file - headerLength
CLSE,Invalid CLSE file - minLat
CLSE,Invalid CLSE file - maxLat
CLSE,Invalid CLSE file - binsize
CLSE,coarse avl file is not %f deg by %f deg,spacing unexpected,%f,re-download needed
CLSE,Invalid CLSE file - timestamp
CLSE,Invalid CLSE file - expiration age
CLSE,Invalid CLSE file - data size
CLSE,Invalid CLSE file - crc
CLCell::CLCell(const CLTelephonyService_Type::Cell &, CLTelephonyService_Type::RadioAccessTechnology)
bad RAT for GSM: %s
CLCell::CLCell(const CLTelephonyService_Type::ScdmaCell &, CLTelephonyService_Type::RadioAccessTechnology)
bad RAT for SCDMA: %s
CLCell::CLCell(const CLTelephonyService_Type::CdmaCell &, CLTelephonyService_Type::RadioAccessTechnology)
bad RAT for CDMA: %s
CLCell::CLCell(const CLTelephonyService_Type::LteCell &, CLTelephonyService_Type::RadioAccessTechnology)
bad RAT for LTE: %s
Cell, RAT, 
, valid , 
, cellType , 
, Unknow / Invalid Cell
void CLCell::overrideUarfcnPsc(int, int, int, int)
CELL_LOC: override to, %s
bad-key
unsigned long long CLCell::getSecKey() const
CELL_LOC: which cell is that, %s
CELL_LOC: sec_key, 0x%016llX
Td,N,V_value
Td,N,V_std
com.apple.CLFitnessTrackingAWD
void CLFitnessTrackingAWD::clearSessionStats()
Clearing Fitness stats
void CLFitnessTrackingAWD::describe()
Fitness AWD: workoutType:%d, CompanionAvailable:%d, %s, GPS:%u, HR:%u, Onset:%d, HRUtil:%u, VO2Avail:%d, HRSrc:%d, VO2Cons:%u, PALStat:%d, VO2Stat:%d, loadUtil:%u, strideAvail:%u, walkAvail:%d, runAvail:%d, walkStat:%d, runStat:%d, vo2maxGradeAvailability:%d, idsAvail:%d, defaultUtil:%d, ratioWRHR:%d, pctPedestrianGPSAvailable:%d, pctDistanceTrackUsed:%d, pctDistanceTrackInvalidGradient:%d, pctDistanceTrackInvalidGain:%d, pctDistanceTrackInvalidSpeed:%d, pctDistanceTrackInvalidLength:%d, histSessionDuration:%d, pctPedestrianCalibrated:%d, pctPaceFailure:%d, avgPedestrianMetSourceDiff:%f, stdPedestrianMetSourceDiff:%f, boolDidHrBoundsFail:%d, pctSessionUphill:%d, pctSessionDownhill:%d, pctSessionCaloriesFromGrade:%d, pctSessionGPSSourcePhone:%d, pctSessionGPSSourceWatch:%d, workoutElevationError:%lld, pctHRSamplesValidMin: %d, pctHRSamplesValidMax: %d, pctMETSamplesWithRecentHR: %d, pctMETSamplesValidDelta: %d, vo2MaxDeltaPercentage: %d, numValidHRMetPairs: %d
Fitness AWD Swimmming: pctSessionFree:%d, pctSessionBreast:%d, pctSessionButter:%d, pctSessionBack:%d, pctSessionOther:%d, pctSessionSwimming:%d
Fitness AWD Auto-pause: autoPauseEnabled:%d, numAutoWillResume:%d, numAutoWillPause:%d, numPauseFast:%d, numPauseNormal:%d, numPauseSlow:%d, numResumeFast:%d, numResumeNormal:%d, numResumeFalse:%d
NOT 
void CLFitnessTrackingAWD::submitSessionStats()
%sSubmitted session stats; session length, %f
void CLFitnessTrackingAWD::queryHKForWorkoutType()_block_invoke
HealthKit query error,%ld
HealthKit Inaccessible error,%ld
B12@?0@"HKWorkout"4@"NSDictionary"8
void CLFitnessTrackingAWD::queryHKForWorkoutType()_block_invoke_3
Setting otherWorkoutLabel: %d
void CLFitnessTrackingAWD::setAutoPauseEnabled()_block_invoke
Setting fAutoPauseEnabled: %d
EnableWheelchairAWDCollection
void CLFitnessTrackingAWD::setWheelchairDataCollectionEnabled()_block_invoke
fWheelchairStatsCollectionEnabled set to %d
static void CLFitnessTrackingAWD::handleWheelchairDataCollectionNotification(CFNotificationCenterRef, void *, CFStringRef, const void *, CFDictionaryRef)
received wheelchair data collection notification for service
EnableAutoPause
com.apple.nanolifestyle.sessiontrackerapp
/BuildRoot/Applications/Xcode.app/Contents/Developer/Platforms/WatchSimulator.platform/Developer/SDKs/WatchSimulator3.2.sdk/usr/local/include/boost/range/iterator_range_core.hpp
at >= 0
static_cast<typename base_type::size_type>(at) < size()
CLSedentaryAlarmRecorderDb
virtual long CLSedentaryAlarmRecorderDb::aggregateRecords(const CLAggregationRules &)
CMError CLSedentaryAlarmRecorderDb::querySedentaryAlarmDataSince(const CFAbsoluteTime, std::vector<CLSedentaryAlarmData> &) const
SedentaryAlarmHistory not accessible
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/SedentaryTimer/CLSedentaryAlarmRecorderDb.mm
void CLSedentaryAlarmRecorderDb::setFinishedInsertHandler(CLSilo *, CLSedentaryAlarmDataFinishedInsertHandler)
SedentaryAlarmHistory
SELECT COUNT(*) FROM SedentaryAlarmHistory
SELECT * FROM SedentaryAlarmHistory ORDER BY startTime ASC
DELETE FROM SedentaryAlarmHistory WHERE startTime < ?
DELETE FROM SedentaryAlarmHistory WHERE startTime > ?
DELETE FROM SedentaryAlarmHistory
INSERT INTO SedentaryAlarmHistory (startTime, firedTime, alarmType, didWake) VALUES (?, ?, ?, ?)
SELECT * FROM SedentaryAlarmHistory ORDER BY startTime DESC LIMIT 1
SELECT * FROM SedentaryAlarmHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC
virtual void CLSedentaryAlarmRecorderDb::prepareSQLStatements()
virtual void CLSedentaryAlarmRecorderDb::deleteRecordsAfterInsertUL(const CLSedentaryAlarmData &)
virtual void CLSedentaryAlarmRecorderDb::shiftRecordsByUL(CFTimeInterval)
Time rolled back, deleting records in the future
virtual void CLSedentaryAlarmRecorderDb::sanitizeAndStoreRecordUL(const CLSedentaryAlarmData &, bool)
virtual void CLActivityRecorderDb<CLSedentaryAlarmData>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLSedentaryAlarmData]
CLSilo: %@
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Intersilo/CLSilo.m
-[CLSilo assertInside]
-[CLSilo assertOutside]
-[CLSilo newTimer]
-[CLSilo async:]
-[CLSilo sync:]
-[CLSilo afterInterval:async:]
T@"NSString",R,N,V_identifier
-[CLDispatchTimerScheduler reflectNextFireTime:fireInterval:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Intersilo/CLDispatchSilo.m
_source
timer
T@"CLTimer",W,N
T@"NSObject<OS_dispatch_source>",&,N,V_source
T@"CLTimer",W,N,Vtimer
MainSilo
%@.NSOperationQueue
CLDispatchSilo: %s
static std::unique_ptr<CLTileFile> CLTilesManagerSharedLogic::allocateTile(CLTilesManager_Type::TileType, CLTileDownloadPolicy *)
TILE: allocate tile type, %d
Attempting to assert invalid tile type.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Tiles/CLTilesManagerSharedLogic.mm
TILE: failed to allocate a tile for type, %d
-[CRPoiWifiAccessPoint writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRPoiWifiAccessPoint.m
passLocation
signature
-[CRPassCollectionRequest writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/External/Collection/CRPassCollectionRequest.m
passLocations
T@"NSMutableArray",&,N,V_passLocations
hasSignature
T@"NSData",&,N,V_signature
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Intersilo/CLIntersiloInterface.mm
-[CLIntersiloInterfaceSelectorInfo initWithSelector:andMethodSignature:]
syncget
withReply:
T:,R,N,V_sel
numArguments
Ti,R,N,V_numArguments
replyBlockIndex
Ti,R,N,V_replyBlockIndex
returnAddressIndex
Ti,R,N,V_returnAddressIndex
returnValueSize
Ti,R,N,V_returnValueSize
T@"NSMethodSignature",R,&,N,V_sig
T@"NSString",R,&,N,V_str
Protocol: %p
Name: %s
Selectors: (
protocol
T@"Protocol",R,N,V_protocol
virtual void CLSensorFusionService3AxisDynamicGyro::start()
%s is enabling power conservative device motion for parallax.
virtual void CLSensorFusionService3AxisDynamicGyro::stop()
%s is disabling power conservation for parallax.
void CLSensorFusionService3AxisDynamicGyro::onAccelerometerData(const CLAccelerometer::Sample *)_block_invoke_3
Device is stationary and Timeout exceeded, turning off device motion gyro heartbeat and bias estimator.
void CLSensorFusionService3AxisDynamicGyro::onBiasAndVariance(const CLMotionTypeGyroBiasAndVariance)_block_invoke
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Intersilo/CLIntersiloProxy.m
+[CLIntersiloProxy proxyForRecipientObject:inSilo:withInboundInterface:andOutboundInterface:]
-[CLIntersiloProxy forwardInvocation:]
CLService: Block was not compiled using a compiler that inserts type information about arguments. (%@)
v8@?0@"NSInvocation"4
-[CLIntersiloProxy registerDelegate:inSilo:]
<%@: peer silo:%@, peer tag:%lu>
-[CLIntersiloProxy setOpaqueTag:]
T@"<CLIntersiloProxyDelegateProtocol>",R,W,N,V_delegate
delegateSilo
T@"CLSilo",R,W,N,V_delegateSilo
delegateInterface
T@"CLIntersiloInterface",R,C,N,V_delegateInterface
proxiedInterface
T@"CLIntersiloInterface",R,C,N,V_proxiedInterface
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Intersilo/CLIntersiloService.m
+[CLIntersiloService getSilo]
+[CLIntersiloService becameFatallyBlocked:]
+[CLIntersiloService performSyncOnSilo:invoker:]
-[CLIntersiloService init]
-[CLIntersiloService initInSilo:]
-[CLIntersiloService initWithInboundProtocol:outboundProtocol:andSilo:]
Silo: %@
Inbound: %@
Outbound: %@
inboundInterface
T@"CLIntersiloInterface",R,N,V_inboundInterface
outboundInterface
T@"CLIntersiloInterface",R,N,V_outboundInterface
CLWifiAccessPointLocationService
WifiTileHeader
void CLWifiAccessPointLocationService::processDefaultsWrites()
Defaults applied.
const std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const
Tile not available to search, but wasn't previously identified as missing
tile_x
tile_y
Mac address location found in tile.
apLocation
Mac addresses found in neighbor list, will not search remaining tiles
Remaining tile not available to search, but wasn't previously identified as missing
Mac address location found in remaining tile.
Finished searching tiles of mac addresses
numberOftilesWithMacsFoundInside
tilesWithMacsFoundInside
Mac address found in both ALS and Tiles. Will use ALS location
tileLocation
alsLocation
WtmFind, results, searched, %ld, neighbor, %d, remaining, %d, ALS, %d
const std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddressesFromAls(const std::vector<CLMacAddress> &) const
Mac address found in ALS database.
uint32_t CLWifiAccessPointLocationService::saveAlsAccessPoints(const std::vector<CLAlsWifiAccessPoint> &)
no sqilte connection
sqlite error.
upgrade-wifi-tiles-schema
CL::optional<CLWifiTileHeaderEntry> CLWifiAccessPointLocationService::saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)
no connection to database.
error memory mapping file.
Failed to delete tile.
bool CLWifiAccessPointLocationService::deleteByTileId(const TileId &)
runtime error.
no connection error.
sqlite error; failed to delete tile.
sqliteError
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/WiFi/CLWifiAccessPointLocationService.mm
bool CLWifiAccessPointLocationService::updateAccessTimestampIfNecessary(const TileId &, cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::seconds) const
Attempted to update timestamp for tile that does not exist.
Will not update timestamp; too early.
durationNecessaryInSeconds
actualDurationInSeconds
std::vector<CLWifiTileHeaderEntry> CLWifiAccessPointLocationService::updateNeighborTilesAccessTimestampsIfNecessary(const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::seconds)
Tile header missing after updating access timestamp.
bool CLWifiAccessPointLocationService::updateGizmoSyncTimestampForTile(const TileId &, cl::chrono::CFAbsoluteTimeClock::time_point)
int CLWifiAccessPointLocationService::numberOfInputApsUsedInWifiTileForCoordinate(const CLClientLocationCoordinate &) const
Tile for coordintes does not exist.
coordinates
std::unique_ptr<std::vector<uint8_t> > CLWifiAccessPointLocationService::getTileForTileId(const TileId &)
Cannot serialize unavailable tile
bool CLWifiAccessPointLocationService::_deleteByTileIdNoTransaction(const TileId &)
Deleting tile by id results.
headerDeleted
tileDeleted
fWifiTileHeaderRepository->isConnected()
fWifiTileRepository->isConnected()
void CLWifiAccessPointLocationService::dropTilesIfWifiTilesHeaderSchemaChanged()
Error upgrading wifi #tile database schemas
newTileHeaderCount == 0 && newTileTableCount == 0
std::tuple<int, int, int> CLWifiAccessPointLocationService::errorOnRemainingAndDelete()
Remaining tile header still in database. Will now delete.
header
Failed to delete tile header
Remaining tile still in database. Will now delete.
tableName
Failed to delete tile table: 
Remaining entries still in ALS database. Will now delete.
runtime error deleting.
sqlite error deleting remaining tiles.
std::vector<CLWifiTileHeaderEntry> CLWifiAccessPointLocationService::deleteTilesExceedingLimits(cl::chrono::CFAbsoluteTimeClock::time_point)
Deleting aged wifi tiles based on age of access timestamp
Deleting  aged wifi tiles based on age of download timestamp
Decision to delete wifi tiles because we're over the limit
tileCount
removeCount
Failed to successfully read and parse wifi tile
CLWifiTileHeaderEntry CLWifiAccessPointLocationService::_saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)
Parse complete
parseIsSuccessful
NewTile
void CLWifiTileQueryLogic::resetScanMisses(const char *)
WtmMiss, reset, %s
void CLWifiTileQueryLogic::incrementScanMisses()
WtmMiss, count, %d
Rollover
std::tuple<std::vector<TileId>, std::vector<TileId>, std::vector<TileId> > CLWifiTileQueryLogic::getTilesToSearch(const std::vector<CLWifiTileHeaderEntry>, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point)
Invalid location provided and complete miss, will not return any tiles to search.
No valid location provided, finished deciding which are neighbor tiles and what's left over.
remainingTilesToSearch
WtmFind, nrx, %ld, %ld, %ld, loc, 0, completemiss, %d
Using location to determine tiles to search.
Finished deciding which are neighbor tiles and what's left over.
neighborTilesToSearch
tilesNotAvailable
tileSetIsCompleteMiss
WtmFind, nrx, %ld, %ld, %ld, loc, 1, completemiss, %d
void CLWifiAccessPointLocationService::deleteEmptyOrNullMacAddressFromALSDatabase()
Deleting empty or null mac addresses in database if found.
entries
unordered_map::at: key not found
auto CLWifiAccessPointLocationService::_saveWifiTileAccessPointEntries(const std::string &, cl::chrono::CFAbsoluteTimeClock::time_point)::(anonymous class)::operator()(const CLTilesManager_Type::TileHeader &, int) const
This callback should only be invoked once
Failed to delete previous tile before inserting new one.
Failed to save tile header.
Tile doesn't exist, creating new table.
Failed to create new wifi tile table
Tile exists, will not create new table.
Couldn't create batch inserter
CLWifiTilesManagerExternal::CLWifiTilesManagerExternal(CLWifiTilesManager *, CLSilo *)
void CLWifiTilesManagerExternal::onCleanupAgedTiles(CFRunLoopTimerRef)
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Intersilo/CLServiceVendor.mm
-[CLServiceVendorHeartbeatRecord initTrackingService:]
T@"CLSilo",R,N,V_silo
T@"<CLIntersiloServiceProtocol>",R,W,N,V_service
synCount
Ti,R,N,V_synCount
ackCount
Ti,R,N,V_ackCount
+[_Locationd becameFatallyBlocked:]
+[_Locationd performSyncOnSilo:invoker:]
void validateTrackedSilos()_block_invoke
v16@?0@"CLSilo"4@"CLServiceVendorHeartbeatRecord"8^B12
HeartAttack
CLServiceVendorQueue
_CLMainService
CLServiceVendor.HeartbeatCheckInterval
LogFileLevel
Adapter
+[CLServiceVendor getServiceWithName:]
Tried to look up a service by name that doesn't exist: %{public}@.
workoutType
Ti,N,V_workoutEvent
hasWorkoutType
Ti,N,V_workoutType
hasSessionId
T@"NSData",&,N,V_sessionId
kDidStart
kDidStop
kWillPause
kWillResume
kTypeMovingCoarse
kTypeYoga
kTypeDancing
kTypeCrossTraining
kTypeElliptical
kTypeRowing
kTypeStairClimbing
kTypeStationaryCycling
kTypeIndoorRunning
kTypeIndoorWalking
kTypeSwimming
kTypePushingWheelchair
kTypeOutdoorWheelchair
data
T^v,N,V_data
destructor
T@?,C,N,V_destructor
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLNotifierClientAdapter.mm
-[CLNotifierClientAdapter init]
-[CLNotifierClientAdapter onNotification:withData:]
CLNotifierClientBase: %p
virtual bool CLTileSyncManagerExternal::isPairingActive() const
@GtsMgr, nrIsPairingActive, %{public}d
virtual CFTimeInterval CLTileSyncManagerExternal::getWatchInactiveTime() const
@GtsSync, inactive nil
NRWatchOSVersionForRemoteDevice
NRDevicePropertyLastInactiveDate
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLNotifierServiceAdapter.mm
-[CLNotifierServiceAdapter setAdaptedNotifier:]
-[CLNotifierServiceAdapter notifierClientNumForCoparty:]
ClientIntegerMap: (
%p = %d
notifier
T^{CLNotifierBase=^^?},R,N,V_notifier
void kf_work(kiss_fft_cpx *, const CMQueue<scalar_32> &, int, const size_t, int, int *, const kiss_fft_cfg)
Error in FFT,p,%d
class
<%@: %p>
v16@?0@"NSObject"4@"NSObject"8^B12
code
domain
userInfo
nullptr key not allowed
CLWorkloadCalibratorRecorderDb
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/WorkloadCalibration/CLWorkloadCalibratorRecorderDb.mm
void CLWorkloadCalibratorRecorderDb::setFinishedInsertHandler(CLSilo *, CLWorkloadCalibratorEntryFinishedInsertHandler)
void CLWorkloadCalibratorRecorderDb::deleteRecordsBefore(CFTimeInterval)
WorkloadCalibratorHistory
SELECT COUNT(*) FROM WorkloadCalibratorHistory WHERE activityType == ?
SELECT * FROM WorkloadCalibratorHistory ORDER BY startTime ASC
SELECT * FROM WorkloadCalibratorHistory WHERE activityType == ? AND standardDeviation <= ? ORDER BY startTime ASC
DELETE FROM WorkloadCalibratorHistory WHERE startTime < ?
DELETE FROM WorkloadCalibratorHistory WHERE startTime > ?
DELETE FROM WorkloadCalibratorHistory
INSERT INTO WorkloadCalibratorHistory (activityType, valueAverage, standardDeviation, startTime) VALUES (?, ?, ?, ?)
SELECT * FROM WorkloadCalibratorHistory ORDER BY startTime DESC LIMIT 1
UPDATE WorkloadCalibratorHistory SET startTime = startTime + ?
DELETE FROM WorkloadCalibratorHistory WHERE id not in (SELECT id FROM WorkloadCalibratorHistory ORDER BY id DESC LIMIT ?) AND activityType = ?
UPDATE WorkloadCalibratorHistory SET valueAverage= ?, standardDeviation= ? WHERE startTime = ? AND activityType = ?
virtual void CLWorkloadCalibratorRecorderDb::prepareSQLStatements()
Device is locked and we are unable to open the database.
virtual void CLWorkloadCalibratorRecorderDb::deleteRecordsAfterInsertUL(const CLWorkloadCalibratorEntry &)
Failed to delete records.
virtual void CLWorkloadCalibratorRecorderDb::shiftRecordsByUL(CFTimeInterval)
Failed to shift records.
virtual void CLWorkloadCalibratorRecorderDb::insertRecordUL(const CLWorkloadCalibratorEntry &, bool)
WorkloadCalibratorDb (%d,%f,%f,%f).
valueAverage
standardDeviation
bool CLActivityRecorderDb<CLWorkloadCalibratorEntry>::isValidTime(CFAbsoluteTime &) const [T = CLWorkloadCalibratorEntry]
virtual void CLActivityRecorderDb<CLWorkloadCalibratorEntry>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLWorkloadCalibratorEntry]
Male
Female
%@, <age %f, gender %@, height %f, weight %f, condition %ld>
gender
height
weight
condition
kCalorieUserInfoCodingKeyAge
kCalorieUserInfoCodingKeyGender
kCalorieUserInfoCodingKeyHeight
kCalorieUserInfoCodingKeyWeight
kCalorieUserInfoCodingKeyCondition
index
polygon
-[CLHarvestAppRealtimeHarvestRegion writeTo:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Harvester/AppRealtime/proto/CLHarvestAppRealtimeHarvestRegion.m
self->_polygon != nil
Ti,N,V_index
T@"CLHarvestAppRealtimePolygon",&,N,V_polygon
hasName
T@"NSString",&,N,V_name
auth
mask
CLClientAuthorizationCacheSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Core/CLClientAuthorizationCache.m
-[CLClientAuthorizationCache syncgetAuthorizationOfClient:forServiceMask:]
syncgetAuthorizationOfClient, %s, forServiceMask, %lx, authorized, %d
-[CLClientAuthorizationCache setAllClients:]
setAllClients, %s
-[CLClientAuthorizationCache setClient:authorization:forMask:]
setClient, %s, authorization, %d, forMask, %lX
Attempted to setClient before the cache has been fully populated.
T@"NSMutableDictionary",&,N,V_clients
cachePopulationReplyBlocks
T@"NSMutableArray",&,N,V_cachePopulationReplyBlocks
populated
TB,N,V_populated
fitnessTrackingEnabled
powerSource
TB,N,V_fitnessTrackingEnabled
hasPowerSource
Ti,N,V_powerSource
kChargerTypeUnknown
kChargerTypeNone
kChargerTypeUsb
kChargerTypeExternal
bool CMAccelerometerProcessor::computeFrequencyFeatures()
Assertion failed: !(ignoreHamming && node->requiresHammingWindow(samples[r]->sampleFreq)), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMAccelerometerProcessor.cpp, line 234,Hamming required but ignored..
void CMQueue<float>::deepCopy(const CMQueue<T> &) [T = float]
Assertion failed: rhs.capacity() == capacity(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMQueue.h, line 85,capacity,%zu,%zu.
void CLFenceMonitorWifiLogic::calculateAPsForFences(CLWifiAccessPointLocationService &, const std::map<CLFenceManager_Type::Fence, bool> &, const CLWifiService_Type::AssociationState &, const CLDaemonLocation &, std::vector<CLWifiService_Type::AccessPoint> &, std::vector<CLWifiService_Type::AccessPoint> &, const std::vector<CLWifiService_Type::AccessPoint> &, double, bool &, std::function<void (const CLFenceManager_Type::Fence &)>)
Fence: combined fences, %lu, fences to, %lu, fences
Fence: combined, isExit, %d, %s
Fence: Failed to calculate fence %s
Fence: combined fence, %s
Fence: Calculator for %s/%s returned %ld desired APs for %s
Fence: Using associated AP %s, channel %d for exit
Fence: Not associated, or not monitoring for exit, %d, %d
Fence: calculateGroup, currentLocation, %s
Fence: isContinuousMonitoringNeeded = %d
Fence: Continuous monitoring is needed in order to supported the monitored fences
Fence: WifiFenceCalculator: Adding exit AP, mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, isLocallyAdministered, %d
Fence: WifiFenceCalculator: ignoring locally administered AP, %s
Fence: WifiFenceCalculator: Skipped non-2GHz AP, channel, %d, mac, %s
Fence: WifiFenceCalculator: Adding entry AP, mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf
Fence: Fence calculator returned more APs (%zu) than maximum (%lf)
Fence: no visible APs, can't use PNO for exit criteria, exitAPs, %lu
Fence: request a download for, %s, fChosenAPs, %lu
Fence: calculateAPsForFences end
Altitude %f Pressure %f @ %f
relativeAltitude
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Framework/CoreMotion/CMAltitude.mm
sourceId && startDate && endDate && elevationAscended && elevationDescended
%@, <startDate, %@, endDate, %@, elevationAscended, %@ elevationDescended, %@>
TI,R,N,VfRecordId
T@"NSUUID",R,N,VfSourceId
T@"NSDate",R,N,VfStartDate
T@"NSDate",R,N,VfEndDate
T@"NSNumber",R,N,VfElevationAscended
T@"NSNumber",R,N,VfElevationDescended
kCMAltitudeCodingKeyAltitude
kCMAltitudeCodingKeyPressure
kCMSignificantElevationCodingKeyRecordId
kCMSignificantElevationCodingKeySourceId
kCMSignificantElevationCodingKeyStartDate
kCMSignificantElevationCodingKeyEndDate
kCMSignificantElevationCodingKeyElevationAscended
kCMSignificantElevationCodingKeyElevationDescended
WIFI_LOCATION
std::tuple<int, CLDaemonLocation, int, CLWifiLocationProvider_Type::WifiLocationState> CLProcessWifiScanResults::processScanResults(const std::vector<CLWifiService_Type::AccessPoint> &, const CLWifiLocationProvider_Type::WifiLocationState &, cl::chrono::CFAbsoluteTimeClock::time_point, bool, bool, bool, int, bool, int, float)
Processing scan results
forceQueryOfAllScannedAps
An access point in scan was not filtered properly
Using CPI. Will not use full scan cache we have, only most recent scan.
Made decision on which access points to use in calculation.
apsWithValidLocation
apsTooOldToUse
apsWithUnknownLocation
associatedAp
maxApAgeInSeconds
lastFilteredLocation
Client Status.
hasLocationClients
hasSpectatorClients
hasBystanderClients
apsWithKnownLocationsFoundInTiles
WltStep, APs, currScan, %lu, inCache, %lu, validLoc, %lu, tooOld, %lu, unknown, %lu, inFix, %d, dist50m, %d
WltStep, Fix, aps, %d, of, %lu, ll, %.7f, %.7f, hacc, %.2f
Recalculated Location.
Request wifi tile download during CPI.
TlurEmer, unexpected emergency state, processScanResult, %d, WARNING
TlurEmer, Emergency End, tte, %.1f
TlurEmer, Ticks End, toggle, %.1f, scan, %.1f, reply %.1f, als, %.1f, reply, %.1f, fix, %.1f, ttff, %.1f
WIFI_LOC: query, forcing query, macAddressesToQuery, %lu
WIFI_LOC: emergency query, %d
WIFI_LOC: skip Gizmo query on fixes
Will query, unknown associated AP.
associatedAP
No query, stop criteria was met.
No query, CPI location request.
WIFI_LOC: no query, knownToUnknownRatio, %.1f
WIFI_LOC: query, can't compute location
WIFI_LOC: knownToUnknownRatio, %.1lf, accessPointsToQuery.size, %lu, sinceLastServerQuery, %.2lf, isWatch, %d, isQueryNeeded, %d, forceQuery, %d, queryType, %d, reqType, %d
WIFI_LOC: no query, too soon, thresh, %.2lf
Querying locations of mac addresses.
accessPointsToQuery
useCache
WIFI_LOC: no query, bystander-only, clients, %u
std::tuple<std::vector<CLWifiService_Type::AccessPoint>, std::map<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, bool> CLProcessWifiScanResults::decideWhichAccessPointsNeedALSRequest(CL::optional<CLWifiService_Type::AccessPoint>, const std::map<CLWifiService_Type::AccessPoint, CLWifiAPLocation> &, const std::vector<CLWifiService_Type::AccessPoint> &, bool, cl::chrono::CFAbsoluteTimeClock::time_point)
Querying locations of access points that weren't found in memory.
accessPointsInQuery
Access Point with invalid location in ALS database.
wifiApLocation
Forcing query of all scanned results
Comparing associatedAP to wifi scan.
hasUnknownLocation
Updating RSSI/Timestamp/Channel of access points in scan with location.
Process scan results to select access points to use in calculation.
accessPointsInScan
accessPointsInScanWithLocation
std::tuple<int, CLDaemonLocation> CLProcessWifiScanResults::calculateLocation(const std::vector<CLWifiAPLocation> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point)
No valid acceess points available to compute position.
Recalculating location.
accessPointCollection
Position calculation completed.
computedLocation
WIFI_LOC: floor wifi unc, %lf, %lf
auto CLProcessWifiScanResults::decideWhichAccessPointsNeedALSRequest(CL::optional<CLWifiService_Type::AccessPoint>, const std::map<CLWifiService_Type::AccessPoint, CLWifiAPLocation> &, const std::vector<CLWifiService_Type::AccessPoint> &, bool, cl::chrono::CFAbsoluteTimeClock::time_point)::(anonymous class)::operator()(const CLWifiService_Type::AccessPoint &) const
Deciding not to query access point on non-2GHz channel.
auto CLProcessWifiScanResults::decideWhichAccessPointsNeedALSRequest(CL::optional<CLWifiService_Type::AccessPoint>, const std::map<CLWifiService_Type::AccessPoint, CLWifiAPLocation> &, const std::vector<CLWifiService_Type::AccessPoint> &, bool, cl::chrono::CFAbsoluteTimeClock::time_point)::(anonymous class)::operator()(const std::pair<CLWifiService_Type::AccessPoint, CLWifiAPLocation> &) const
Entry for associated AP in wifiAPLocationsInScan has invalid location.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/WiFi/CLProcessWifiScanResults.mm
Associated access point was found in wifi scan and has a valid location.
identifier
dataIdentifier
offset
dataSize
dataType
movement
%@,<identifier, %llu, startTime, %f, timestamp, %llu, dataIdentifier, %llu, offset, %u, dataSize, %u, dataType, %d, movement, %d>
TQ,V_identifier
Td,V_startTime
TQ,V_timestamp
TQ,V_dataIdentifier
TI,V_offset
TI,V_dataSize
Ti,V_dataType
TB,V_movement
Td,V_endTime
metaIdentifier
TQ,V_metaIdentifier
duration
Td,V_duration
rate
TI,V_rate
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/Transit/CLTransitTilePreloaderExternal.mm
virtual void CLTransitTilePreloaderExternal::requestTileDownload(const CLTileFileDownloadDetails &, const CLTilesManager_Type::TileType, double, double)
LOCATION_PROVIDER
const char *CLLocationProvider_Type::toString(CLLocationProvider_Type::Notification)
Invalid CLLocationProvider notification.
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Location/CLLocationProvider_Type.mm
LocationFine
LocationCoarse
LocationSpectator
LocationBystander
LocationLeech
LocationInfo
TechnologyStatus
Navigation
LocationUnavailable
LocationUnfiltered
ControlPlaneRequest
ServiceAuthorization
LocationBatched
Odometer
MapMatching
SignalQuality
UserPlaneRequest
VehicleSpeed
VehicleHeading
WifiLocationBatched
OdometerBuffered
XtraFileAvailable
gpsAltitude
rawSpeed
gpsSpeedAccuracy
timestampGps
quality
hasAccuracy
Tf,N,V_accuracy
hasGpsAltitude
Tf,N,V_gpsAltitude
hasRawSpeed
Tf,N,V_rawSpeed
Tf,N,V_odometer
hasGpsSpeedAccuracy
Tf,N,V_gpsSpeedAccuracy
hasTimestampGps
Td,N,V_timestampGps
hasQuality
Ti,N,V_quality
kUnknown
kGood
kMed
kPoor
CLSmootherMonitorSilo
-[CLSmootherMonitor initInSilo:]
initInSilo
-[CLSmootherMonitor beginService]
beginService
com.apple.locationd.smoother
-[CLSmootherMonitor endService]
endService
-[CLSmootherMonitor listener:shouldAcceptNewConnection:]
shouldAcceptNewConnection
LocationServer received incoming connection
Why didn't we get a connection?
process is not entitled to use CLLocationSmoother, pid, %d, executable, %s
-[CLSmootherMonitor listener:shouldAcceptNewConnection:]_block_invoke
Connection Interrupted
Connection Invalidated
-[CLSmootherMonitor smoothLocations:useType:]
smoothLocations
-[CLSmootherMonitor smoothLocations:useType:]_block_invoke
Locations not delivered %p
Invalid Smoother Type using CLSmootherTypeNone
CLCoarseCellTile-Mutex
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
virtual void CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchIndex(std::vector<IndexEntry_T> &, unsigned int &, unsigned int &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::binarySearchData(const DataEntry_T *, unsigned int, unsigned int, const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_mmap(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
virtual bool CLKeyLatLonTileTemplate<CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, CLTilesManager_Type::KeyLatLonEntry_CoarseCell>::getLocationByKey_traverse(const DataEntry_T &, DataEntry_T &) [IndexEntry_T = CLTilesManager_Type::KeyLatLonIndexEntry_CoarseCell, DataEntry_T = CLTilesManager_Type::KeyLatLonEntry_CoarseCell]
CLAppRecommendationTile-Mutex
virtual bool CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::TEST_testBinarySearch(const char *) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]
TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s, id, %s
TILE: searched for, location, %.10lf, %.10lf, setLinear, %lu, setIndex, %lu
TILE: not in index, %s, count, %3u, locationd, %.10lf, %.10lf
TILE: result: tilestool: pass, %d, tests, %u, %d
virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::onTraversingSection(FILE *, const CLTilesManager_Type::SectionHeader &, const void *, const CLTileFile::TraverseDetails &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]
TILE: CLSpatialDataTileTemplate, parsing, sectionId, %d, %s
TILE: CLSpatialDataTileTemplate, index, height, %u, width, %u
TILE: index entry, %3lu, %3u, step, %04d, %s
TILE: CLSpatialDataTileTemplate, entries, numOfEntries, %u
TILE: CLSpatialDataTileTemplate, headers only, give up
TILE: entry, %3lu, %3u, %3lu, %s, swLoc, %.8lf, %.8lf
TILE: CLSpatialDataTileTemplate, regionalEntries, numOfEntries, %u
TILE: entry, %3lu, %3u, %3lu, %s
entriesOffset, 
virtual void CLSpatialDataTileTemplate<CLTilesManager_Type::AppRecommendationIndexEntry, CLTilesManager_Type::AppRecommendationEntry>::getEntriesForArea(const double &, const double &, const double &, const double &, bool, bool, std::list<DataEntry_T> &) [IndexEntry_T = CLTilesManager_Type::AppRecommendationIndexEntry, DataEntry_T = CLTilesManager_Type::AppRecommendationEntry]
TILE: getEntriesForArea, input, swLatitude, %.8lf, swLongitude, %.8lf, search, %.8lf, %.8lf, isUseIndex, %d, includeRegionalEntries, %d, entries, %lu
TILE: doesIntersectWithTile, %d, no intersection with the tile
TILE: invalid section, signature, 0x%x, stopping
TILE: getEntriesForArea, invalid tile file, bad allocation size, totalBytesInSection, %lu, maxSectionSize, %lu
TILE: getEntriesForArea, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, genTime, %.2lf, expAge, %d, age, %.2lf
TILE: getEntriesForArea, numEntriesHeight, %d, numEntriesWidth, %d, entrySizeInBytes, %d
TILE: getEntriesForArea, numOfEntries, %d, entrySizeInBytes, %d, numOfLargeEntries, %d
TILE: getEntriesForArea, numOfRegionalEntries, %d, entrySizeInBytes, %d
TILE: getEntriesForArea, asked not to use index
TILE: getEntriesForArea, pIndexEntries, 0x%lx, pEntries, 0x%lx
TILE: getEntriesForArea, line, %d, searched_min_y, %d, %d, searched_min_x, %d, %d, index_y, %d, index_x, %d, entriesOffset, %d
TILE: getEntriesForArea, entryId, %d, isIntersect, %d, examinedEntries, %d, entry, %s
TILE: getEntriesForArea, nothing to search, %s
TILE: getEntriesForArea, examinedEntries, %5u, foundEntries, %5lu, isUseIndex, %d, clocks, %10lu, extra, %3d, %3d
CLWifiServiceClient
CLWifiServiceClient::ReceiverFunc wrap_receiver(CLWifiServiceClient::IReceiver *)
receiver object cannot be null
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Utilities/CLWifiServiceClient.mm
void CLWifiServiceClient::registerForNotification(const CLWifiService_Type::Notification &)
users of CLWifiServiceClient should not register for kNotificationPower directly
void CLWifiServiceClient::unregisterForNotification(const CLWifiService_Type::Notification &)
users of CLWifiServiceClient should not unregister for kNotificationPower directly
void CLWifiServiceClient::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)
notification, %d, kNotificationPower, fIsWifiPowered, %d, data.power, %d
CLStepCountRecorderDb
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/StepCount/CLStepCountRecorderDb.mm
void CLStepCountRecorderDb::setFinishedInsertHandler(CLSilo *, CLStepCountFinishedInsertHandler)
StepCountHistory
SELECT COUNT(*) FROM StepCountHistory
SELECT * FROM StepCountHistory ORDER BY startTime DESC
SELECT * FROM StepCountHistory ORDER BY startTime ASC
SELECT * FROM StepCountHistory WHERE id >= ? ORDER BY id ASC LIMIT ?
DELETE FROM StepCountHistory WHERE id = ?
DELETE FROM StepCountHistory WHERE startTime > ?
DELETE FROM StepCountHistory
INSERT INTO StepCountHistory (startTime, timestamp, count, distance, rawdistance, floorsAscended, floorsDescended, pace, activeTime, firstStepTime, pushCount, workoutType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
UPDATE StepCountHistory SET startTime = startTime + ?
SELECT * FROM StepCountHistory ORDER BY startTime DESC LIMIT 1
SELECT * FROM StepCountHistory ORDER BY startTime ASC LIMIT 1
SELECT * FROM StepCountHistory WHERE startTime >= ? ORDER BY startTime ASC LIMIT 1
SELECT * FROM StepCountHistory WHERE startTime <= ? ORDER BY startTime DESC LIMIT 1
SELECT * FROM StepCountHistory WHERE firstStepTime >= ? ORDER BY startTime ASC LIMIT 1
SELECT * FROM StepCountHistory WHERE firstStepTime <= ? ORDER BY startTime DESC LIMIT 1
SELECT * FROM StepCountHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC
virtual void CLStepCountRecorderDb::prepareSQLStatements()
void CLStepCountRecorderDb::alterTableIfNecessary()
StepCountHistory table doesn't even exist
ALTER TABLE StepCountHistory
UPDATE StepCountHistory SET 
 = 0;
CLStepDistance CLStepCountRecorderDb::queryStepCount(CFAbsoluteTime, CFAbsoluteTime, CLStepCountRecorderDb::QueryTimeType) const
Assumption failed: startTime (%f) was found to be newer than endTime (%f), queryTimeType %d
First step time invalid.
Steps were found to be non monotonically increasing - start:%f, end:%f, queryTimeType:%d
CMError CLStepCountRecorderDb::queryStepCountSince(const CLStepCountEntry &, std::vector<CLStepCountEntry> &) const
StepCountHistory not accessible
DB UUID un-initialized
Potential DB reset, returning all records to clients
Step count has rolled back, returning mru to clients,mru.recordId,%d,record.recordId,%d,mru.count,%u,record.count,%u,mru.distance,%f,record.distance,%f,mru.activeTime,%f,record.activeTime,%f,mru.pushCount,%d,record.pushCount,%d
Step count has rolled back!!
virtual void CLStepCountRecorderDb::deleteRecordsAfterInsertUL(const CLStepCountEntry &)
Failed to delete records
virtual void CLStepCountRecorderDb::shiftRecordsByUL(CFTimeInterval)
Failed to shift records
FirstStepTime
StartTime
bool CLStepCountRecorderDb::searchListUL(CLStepCountRecorderDb::QueryTimeType, CFAbsoluteTime, CLStepCountEntry &, CLStepCountEntry &) const
Failed to search list for %s %f
virtual long CLStepCountRecorderDb::aggregateRecords(const CLAggregationRules &)
Failed to examine the most last record for data aggregation.
Failed to examine the second to last record for data aggregation.
Failed to iterate through records for data aggregation.
Failed to retrieve most recent record for data aggregation.
Failed to delete marked records with timestamp of %f
CLActivityDB::ActivityCode CLStepCountRecorderDb::getCountOffset(uint32_t, int &, CLStepCountEntry &)
Reset requested.  Counts (prev: %d cur:%d). New fOffset (%d).
Reset current step count.  Counts (prev: %d cur:%d). New fOffset (%d).
Oscar restart detected.  Count (prev: %d cur:%d). New fOffset (%d).
An error in step counts is highly likely.  Treating current count as new 0.  Count (prev: %d cur:%d). New fOffset (%d).
CLActivityDB::ActivityCode CLStepCountRecorderDb::getFloorsAndActiveTimeOffset(CLStepCountEntry, CLStepCountEntry)
Reset requested.  New offset (%d, %d, %f).
Locationd restart detected.  New offset (%d, %d, %f).
Oscar restart detected.  New offset (%d, %d, %f).
An error in floor counts is highly likely.  Treating current count as new 0.  New offset (%d, %d, %f).
rawdistance
pushCount
%s needs autoincrement migration
bool CLActivityRecorderDb<CLStepCountEntry>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = CLStepCountEntry]
AutoIncr
) SELECT 
 RENAME TO 
%s autoincrement migration succeeded
%s autoincrement migration failed
virtual void CLActivityRecorderDb<CLStepCountEntry>::sanitizeAndStoreRecordUL(const T &, bool) [T = CLStepCountEntry]
CLStepCountNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/StepCount/CLStepCountNotifier.mm
-[CLStepCountNotifierAdapter beginService]
PedestrianOdometer
CLStepCountNotifier::CLStepCountNotifier(CLSilo *)
CLStepCountNotifier is being constructed
StepCountingDisableAggregation
StepCountingDisableExpiration
StepCountingEmulationTimeRate
StepCountingDetailedLogging
virtual CLStepCountNotifier::~CLStepCountNotifier()
CLStepCountNotifier is shutting down
StepCountingAggregateTimerInterval
void CLStepCountNotifier::setUpAggregateOnTimer()_block_invoke
Aggregating records due to timer!
void CLStepCountNotifier::setUpdateFinishedHandler()_block_invoke
StepCount, %f, %d, %f, %d, %d, %d, %d
v124@?0{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}4
virtual bool CLStepCountNotifier::registerForNotificationInternal(const CLStepCountNotifier_Type::Notification &)
virtual bool CLStepCountNotifier::unregisterForNotificationInternal(const CLStepCountNotifier_Type::Notification &)
void CLStepCountNotifier::update(std::shared_ptr<CLStepCountVector>)
Adding Fused entry, time, %f, count, %d, raw_dist(m), %f, fused_dist(m), %f, cadence(steps/s), %f
CLStepDistance CLStepCountNotifier::query(CFAbsoluteTime &, CFAbsoluteTime &) const
Query (%f, %f): %d, %f, %f, %d, %d, %f
v12@?0{shared_ptr<std::__1::vector<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> > >=^{vector<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >}^{__shared_weak_count}}4
static bool CLStepCountNotifier::isPaceAndCadenceAPIAvailable()
void CLStepCountNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
Restarting step counting after activity session %lu
step counting overrideActivityType,%lu,
void CLStepCountNotifier::onUserInfoUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)
Unhandled notification type, %d
void CLActivityAggregator<CLStepCountEntry>::addAggregationRule(CFTimeInterval, CFTimeInterval) [T = CLStepCountEntry]
Programmer error, this rule is not valid (age: %f, interval:%f).
addAggregationRule
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Activity/CLActivityAggregator.h
fRules.back().timeFromCurrentS < timeFromCurrentS
fRules.back().minimumIntervalS < minimumIntervalS
void CLActivityAggregator<CLStepCountEntry>::setExpirationRule(CFTimeInterval) [T = CLStepCountEntry]
long CLActivityAggregator<CLStepCountEntry>::aggregateRecords() [T = CLStepCountEntry]
int CLActivityRecorderDb<CLStepCountEntry>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLStepCountEntry]
virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
bool CLActivityRecorderDb<CLStepCountEntry>::isValidTime(CFAbsoluteTime &) const [T = CLStepCountEntry]
virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
CLSwimNotifierSilo
/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Daemon/Providers/Motion/Swimming/CLSwimNotifier.mm
-[CLSwimNotifierAdapter beginService]
-[CLSwimNotifierAdapter syncget_prepareSessionEndForSessionType:]
Requested finalize before end.
CLSwimNotifier
CLMotionStateMediator
SwimAggregateTimerInterval
SwimAggregateTimerExpiration
SwimDistributionsByLOI
CLSwimNotifier::CLSwimNotifier(CLSilo *)
SwimDistributionsByLOI set to %d
Swim Notifier instantiated
LogSwimming
LogMotionStateReplay and LogSwimming are both set - LogMotionStateReplay takes precedence in the Swim Notifier
SimulateSwimming
virtual void CLSwimNotifier::shutdown()
CLSwimNotifier is shutting down.
virtual bool CLSwimNotifier::registerForNotificationInternal(const CLSwimNotifier_Type::Notification &)
Added client for %d, count %d
void CLSwimNotifier::getLOIsForLocation(CLLocation *)
[LOI] Calling fetchLocationsOfInterestWithinDistance
void CLSwimNotifier::getLOIsForLocation(CLLocation *)_block_invoke_2
Error retrieving the RT LOIs. %@
[LOI] Found nil locationsOfInterest
void CLSwimNotifier::requestLocation()
[LOI] Registering for location updates
void CLSwimNotifier::turnOnSwimTrackingIfNecessary(const CLMotionStateMediator_Type::MotionOverride &)
[SwimOdom] Registering for odometer updates
virtual bool CLSwimNotifier::unregisterForNotificationInternal(const CLSwimNotifier_Type::Notification &)
Removed client for %d, count %d
void CLSwimNotifier::turnOffSwimTrackingIfNecessary()
[SwimOdom] Unregistering for odometer updates
[LOI] Unregistering for location updates
Swim Controller released
void CLSwimNotifier::processSensorFusion(const CLSwimFusionInput &)
void CLSwimNotifier::processGyroSample(const CLGyro::Sample &)
void CLSwimNotifier::processAccelerometerSample(const CLAccelerometer::Sample &)
void CLSwimNotifier::processGyroTempSample(const CLGyro::Temperature &)
v8@?0^{CLGyroCalibrationDatabase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}4
void CLSwimNotifier::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)
Swimming workout started, location, %lu, poolLength, %f
Swimming workout has ended
void CLSwimNotifier::onNataliemetryUpdate(int, const CLNatalimetryNotifier_Type::Notification &, const CLNatalimetryNotifier_Type::NotificationData &)
Unhandled Notification
void CLSwimNotifier::onOdometerNotification(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)
[SwimOdom] Received an odometer update of type: %d
[SwimOdom] Received unhandled notification, %d
void CLSwimNotifier::onLocationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)
[LOI] Received a location,lat: %{private}lf, long: %{private}lf, accuracy: %lf, lifespan: %lf, timestamp: %lf
virtual void CLMotionNotifier::SiloDispatcher<CLGyro::Sample>::dispatchData(int, const void *, size_t) [T = CLGyro::Sample]
virtual void CLMotionNotifier::SiloDispatcher<CLAccelerometer::Sample>::dispatchData(int, const void *, size_t) [T = CLAccelerometer::Sample]
virtual void CLMotionNotifier::SiloDispatcher<CLGyro::Temperature>::dispatchData(int, const void *, size_t) [T = CLGyro::Temperature]
virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::notifyClientsWithData(const Notification_T &, const NotificationData_T &, bool, int, bool) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLNotifierData *) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::invokeClientWithData(const ClientMapIter &, const NotificationMapIter &, CLNotifierData *) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual bool CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
virtual void CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLSwimNotifier_Type::Notification, NotificationData_T = CLSwimNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]
main
ensureServiceIsRunning:
alloc
init
initWithMemoryCapacity:diskCapacity:diskPath:
setSharedURLCache:
release
drain
retireServiceWithName:
assertInside
dictionaryWithContentsOfFile:
objectForKeyedSubscript:
countByEnumeratingWithState:objects:count:
componentsSeparatedByString:
objectAtIndexedSubscript:
register:forNotification:registrationInfo:
initWithMode:
initWithData:destructor:
data
onNotification:withData:
retain
async:
initInSilo:
setValid:
setAdaptedNotifier:
lastObject
class
removeLastObject
becameFatallyBlocked:
sync:
initWithIdentifier:
registerClientForFitnessSessionNotifications:
unregisterClientForFitnessSessionNotifications:
beginService
endService
registerDelegate:inSilo:
setOpaqueTag:
isSupported
getSilo
performSyncOnSilo:invoker:
valid
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
autorelease
retainCount
zone
hash
superclass
description
debugDescription
streamingClientIsInFitnessSession:
initWithInboundProtocol:outboundProtocol:andSilo:
silo
setCurrentGranularity:
setFitnessSessionNotificationClients:
stopLocation
stopMotionAlarm
newTimer
setResendMotionStateTimer:
resendMotionStateTimer
sendMotionState
setHandler:
proxyForService:
setStreamingConnection:
streamingConnection
addClient:
setAliveAgainThrottleTimer:
aliveAgainThrottleTimer
sendAliveAgainMessage
invalidate
setNextFireAfterDelay:
retireClient:
fitnessSessionNotificationClients
addObject:
clientIsInFitnessSession
removeObject:
setMessageType:
setPriority:
numberWithDouble:
numberWithBool:
dictionaryWithObjects:forKeys:count:
setIdsOptions:
sendMessage:
unregisterAllLocationNotifications
setEmergencyEnablementAssertionCount:
setLocationUpdatesIncludeMotionState:
reevaluateMotionSubscription
setClientIsInFitnessSession:
markClientEmergencyEnablementTransition:
currentGranularity
initForWritingWithMutableData:
initWithClientLocation:
encodeObject:forKey:
finishEncoding
setObject:forKeyedSubscript:
locationUpdatesIncludeMotionState
initWithDaemonLocationPrivate:
initWithDaemonLocation:
setPayload:
motionAlarmActive
isSubscribedForMotion
setIsSubscribedForMotion:
setNextFireTime:
setMotionAlarmActive:
setNextFireAfterDelay:interval:
intValue
UTF8String
boolValue
startUpdatingLocationWithGranularity:includeMotion:inFitnessSession:
startMotionAlarm
messageType
receivedMessageOfType:withPayload:
failedToSendMessage:withError:isFatal:
successfullySentMessage:
pairedDeviceIsNearby:
onLocationNotification:withData:
onMotionStateNotification:withData:
.cxx_destruct
.cxx_construct
emergencyEnablementAssertionCount
_locationClient
_locationAssertion
_motionStateClient
_motionAlarmAssertion
_lastMotionActivity
_locationUpdatesIncludeMotionState
_clientIsInFitnessSession
_motionAlarmActive
_isSubscribedForMotion
_currentGranularity
_fitnessSessionNotificationClients
_resendMotionStateTimer
_emergencyEnablementAssertionCount
_streamingConnection
_aliveAgainThrottleTimer
unregister:forNotification:
stringWithUTF8String:
syncgetAuthorizationOfClient:forServiceMask:
reduceAccuracy:withReply:
doAsync:
dataWithBytes:length:
propertyListWithData:options:format:error:
dataWithPropertyList:format:options:error:
bytes
length
syncgetIconState
setStatusBarIconForEntityClass:visible:
syncgetStatusBarIconForEntityClass:
isServiceEnabled:
fileURLWithPath:
isFileURL
defaultManager
path
fileExistsAtPath:
absoluteString
setSimulationScenarioURL:
setSimulationType:
setIntermediateLocationDistance:
setLocationInterval:
setTravellingSpeed:
clearPendingLocations
initWithBytesNoCopy:length:freeWhenDone:
unarchiveObjectWithData:
addPendingLocationsArray:
startSimulation
stopSimulation
count
objectForKey:
timeIntervalSinceReferenceDate
dealloc
checkInForActivityWithIdentifier:
scheduleVacuum
queue
vacuumAll
retryActivityForEncryptionClass:
onActivity:withIdentifier:
isEqualToString:
resetActivityForEncryptionClass:
onClientManagerNotification:data:
_clientManagerClient
_deferVacuum
_activities
doAsync:withReply:
syncgetDoSync:
forget:
notifier
adaptee
departureDate
arrivalDate
compare:
hasArrivalDate
hasDepartureDate
coordinate
horizontalAccuracy
detectionDate
initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:
_visitWithVisit:authDate:
connectClient:withKey:
startMonitoringSignificantVisitsForClient:
stopMonitoringSignificantVisitsForClient:
disconnectClient:
onSignificantLocationVisit:
setClientInterest:
setClientAuthDate:
clientInterest
clientAuthDate
array
setRecentVisits:
proxyForService:forClient:
setClientAuthorizationCache:
clientAuthorizationCache
setRoutineMonitor:
routineMonitor
setClientManager:
clientManager
actOnPendingDeleteForClientKey:
setArmed:
checkForMonitoring
notifyWhenCacheIsPopulatedWithReply:
stopMonitoring
flushAll
flushAuthDates
flushInterest
clientsActive
startMonitoringVisitsForClient:
setClientsActive:
stopMonitoringVisitsForClient:
recentVisits
timeIntervalSinceNow
predicateWithBlock:
filterUsingPredicate:
keyForClient:
isClientWithKeyInterested:
removeOldVisits
deliverVisit:toClient:
authorizationDateForClientWithKey:
performBlockWhenArmed:
armed
sendVisitsToClient:
ensureMonitoring
removeInterestForClientKey:
launchApplication:
date
dateWithTimeIntervalSinceReferenceDate:
notifyClientsOfVisit:
distantFuture
onVisit:
onScenarioTrigger:
onInterestStoreTimer:
onAuthDateStoreTimer:
onDarwinNotifierNotification:data:
currentJournalIdentifier
setCurrentJournalIdentifier:
_darwinNotifierClient
_clientToKey
_clientsActive
_armed
_clientInterest
_clientAuthDate
_clientAuthorizationCache
_recentVisits
_routineMonitor
_clientManager
_currentJournalIdentifier
fetchGeomagneticModelData:
currentCalendar
components:fromDate:
copy
setDay:
setMonth:
initWithCalendarIdentifier:
dateFromComponents:
components:fromDate:toDate:options:
year
month
nextFireTime
_valid
dictionaryRepresentation
stringWithFormat:
dictionary
setObject:forKey:
allocWithZone:
copyWithZone:
setEntryTime:
setHasEntryTime:
hasEntryTime
setExitTime:
setHasExitTime:
hasExitTime
readFrom:
writeTo:
copyTo:
mergeFrom:
entryTime
exitTime
_entryTime
_exitTime
_has
syncKey
setSyncKey:
setAud:
properties
objectIdentifier
sequencer
changeType
syncId
setObjectIdentifier:
setChangeType:
setProperties:
_aud
_syncKey
_properties
initWithProperties:
archivedDataWithRootObject:
dataFromChange:
changeFromData:ofType:
dataWithSYObject:
SYObjectWithData:
encodeSYChangeForBackwardCompatibility:protocolVersion:
decodeChangeData:fromProtocolVersion:ofType:
sessionMetadata
setMaxConcurrentMessages:
setDelegate:
setSerializer:
setTargetQueue:
setSessionMetadata:
setPerMessageTimeout:
setFullSessionTimeout:
userInfo
localizedDescription
syncDidComplete
UUIDString
activeSyncSession
syncSessionType
syncRestriction
syncCoordinator:beginSyncSession:
syncCoordinator:didInvalidateSyncSession:
syncCoordinatorDidChangeSyncRestriction:
initialSyncStateObserver:initialSyncDidCompleteForPairingIdentifier:
initialSyncStateObserver:syncDidResetForPairingIdentifier:
initialSyncStateObserver:syncDidCompleteForPairingIdentifier:
initialSyncStateObserverClientCanRetryFailedRequests:
service:startSession:error:
service:sessionEnded:error:
service:incomingData:completion:
service:incomingStream:metadata:completion:
service:encounteredError:context:
service:willPreferSession:overSession:
service:willSwitchFromPairingID:toPairingID:
service:didSwitchFromPairingID:toPairingID:
service:targetDeviceProximityChanged:
serviceDidPairDevice:
serviceDidUnpairDevice:
syncSession:enqueueChanges:error:
syncSession:applyChanges:completion:
syncSession:didEndWithError:
syncSession:resetDataStoreWithError:
resetDataStoreForSyncSession:completion:
syncSession:rollbackChangesWithError:
syncSession:restartChanges:
syncSession:successfullySynced:
initWithSyncManager:silo:
fManager
fSilo
fPsSession
arrayWithCapacity:
numberWithInt:
setObject:atIndexedSubscript:
doubleValue
syncCoordinatorWithServiceName:
initWithDelegate:
initWithService:priority:asMasterStore:options:
setDelegate:queue:
setSessionStalenessInterval:
setHasChangesAvailable
resume:
suspend
dictionaryWithObjectsAndKeys:
initWithBytesNoCopy:length:deallocator:
writeToFile:atomically:
setVisits:
visitsCount
clearVisits
visitsAtIndex:
visitsType
hasRtLOIUUID
setHasRtLOIType:
hasRtLOIType
rtLOITypeAsString:
StringAsRtLOIType:
setHasUncertaintyInMeters:
hasUncertaintyInMeters
setHasTypeSource:
hasTypeSource
typeSourceAsString:
StringAsTypeSource:
setHasRtVisitTimesAreQuantized:
hasRtVisitTimesAreQuantized
rtVisitTimesAreQuantized
_uncertaintyInMeters
_rtLOIType
_rtLOIUUID
_typeSource
_visits
_rtVisitTimesAreQuantized
numberWithUnsignedInt:
numberWithFloat:
setElevationDescended:
setHasElevationDescended:
hasElevationDescended
gradeType
setGradeType:
setHasGradeType:
hasGradeType
gradeTypeAsString:
StringAsGradeType:
setVerticalSpeed:
setHasVerticalSpeed:
hasVerticalSpeed
rawGradeType
setRawGradeType:
setHasRawGradeType:
hasRawGradeType
rawGradeTypeAsString:
StringAsRawGradeType:
source
setSource:
setHasSource:
hasSource
sourceAsString:
StringAsSource:
elevationAscended
setElevationAscended:
elevationDescended
verticalSpeed
_elevationAscended
_elevationDescended
_gradeType
_rawGradeType
_source
_verticalSpeed
URLsForDirectory:inDomains:
mainBundle
isMainThread
isMotionActivityEntitled
logDirectory
sendMessageWithReplySync:
sendMessageSync:onConnection:timeoutAfter:withReplyHandler:
tccServiceMotionAccessWithLabel:
tccServiceMotionAccessWithBlock:
setUpCMLogging
featureAvailability:
getExecutablePathFromPid:
takeFitnessSessionAssertion
releaseFitnessSessionAssertion
takeDisablementAssertion
releaseDisablementAssertion
takeEmergencyEnablementAssertion
releaseEmergencyEnablementAssertion
updateNotification:withRegistrationInfo:forClient:
start
setSimulationEnabled:
sendSimulatedLocation:
setFireInterval:
initForReadingWithData:
decodeObjectOfClass:forKey:
clientLocation
initWithData:
daemonLocationPrivate
mergeIntoDaemonLocation:
setProxy:
takeAssertion
releaseAssertion
proxy
_proxy
setMotion:
setNatalieFeatures:
setTimestamp:
setHasTimestamp:
hasTimestamp
hasNatalieFeatures
timestamp
motion
natalieFeatures
regularEntry
setRegularEntry:
_timestamp
_motion
_natalieFeatures
_regularEntry
numberWithUnsignedLongLong:
typeAsString:
StringAsType:
confidenceAsString:
StringAsConfidence:
mounted
setMounted:
setHasMounted:
hasMounted
mountedAsString:
StringAsMounted:
mountedConfidence
setMountedConfidence:
setHasMountedConfidence:
hasMountedConfidence
mountedConfidenceAsString:
StringAsMountedConfidence:
turn
setTurn:
setHasTurn:
hasTurn
turnAsString:
StringAsTurn:
setIsVehicular:
setHasIsVehicular:
hasIsVehicular
setIsMoving:
setHasIsMoving:
hasIsMoving
exitState
setExitState:
setHasExitState:
hasExitState
exitStateAsString:
StringAsExitState:
setStartTime:
setHasStartTime:
hasStartTime
type
setType:
confidence
setConfidence:
isVehicular
isMoving
startTime
_startTime
_confidence
_exitState
_mounted
_mountedConfidence
_turn
_type
_isMoving
_isVehicular
setRecordId:
setHasRecordId:
hasRecordId
setPacebin:
setHasPacebin:
hasPacebin
setHasRegularEntry:
hasRegularEntry
recordId
pacebin
kvalue
setKvalue:
kvalueTrack
setKvalueTrack:
score
setScore:
endTime
setEndTime:
distance
setDistance:
steps
setSteps:
session
setSession:
speed
setSpeed:
_endTime
_distance
_kvalue
_kvalueTrack
_pacebin
_recordId
_score
_session
_speed
_steps
setPace:
setHasPace:
hasPace
setCount:
floorsAscended
setFloorsAscended:
floorsDescended
setFloorsDescended:
pace
_pace
_count
_floorsAscended
_floorsDescended
firedTime
setFiredTime:
didWake
setDidWake:
_firedTime
_didWake
fEpochTypeAsString:
StringAsFEpochType:
fVectorMagnitude
setFVectorMagnitude:
fIQRX
setFIQRX:
fIQRY
setFIQRY:
fIQRZ
setFIQRZ:
fMachineFrequency
setFMachineFrequency:
fEpochType
setFEpochType:
fStanding
setFStanding:
_fEpochType
_fIQRX
_fIQRY
_fIQRZ
_fMachineFrequency
_fVectorMagnitude
_fStanding
genderAsString:
StringAsGender:
heightM
weightKG
vo2max
hrmin
hrmax
hronset
_gender
_heightM
_hrmax
_hrmin
_hronset
_pal
_vo2max
_weightKG
mountedState
setHasMountedState:
hasMountedState
mountedStateAsString:
StringAsMountedState:
setIsStanding:
setHasIsStanding:
hasIsStanding
setTilt:
setHasTilt:
hasTilt
setHasEstExitTime:
hasEstExitTime
setIsVehicleConnected:
setHasIsVehicleConnected:
hasIsVehicleConnected
isStanding
tilt
estExitTime
_estExitTime
_mountedState
_tilt
_isStanding
_isVehicleConnected
setActivity:
overrideActionAsString:
StringAsOverrideAction:
overrideAction
setOverrideAction:
activity
_activity
_overrideAction
setActivityOverrideMsg:
setBodyMetrics:
setMotionState:
setStepCountData:
setSessionCatherineData:
setJacksonData:
setStrideCalData:
setSedentaryAlarmData:
setAllDayHeartRate:
setCalorieData:
setCoarseElevation:
setFitnessTracking:
setOdometer:
setIdsStatus:
setStairClimbingModel:
setRowingModel:
setExerciseMinute:
setWorkoutEvent:
setElevation:
setNatalieData:
setSedentaryAlarmDataDeprecated:
setStrideCalDataDeprecated:
setElevationDeprecated:
hasActivityOverrideMsg
hasBodyMetrics
hasMotionState
hasStepCountData
hasSessionCatherineData
hasJacksonData
hasStrideCalData
hasSedentaryAlarmData
hasAllDayHeartRate
hasCalorieData
hasCoarseElevation
hasFitnessTracking
hasOdometer
hasIdsStatus
hasStairClimbingModel
hasRowingModel
hasExerciseMinute
hasWorkoutEvent
hasElevation
hasNatalieData
hasSedentaryAlarmDataDeprecated
hasStrideCalDataDeprecated
hasElevationDeprecated
activityOverrideMsg
bodyMetrics
motionState
stepCountData
sessionCatherineData
jacksonData
strideCalData
sedentaryAlarmData
allDayHeartRate
calorieData
coarseElevation
fitnessTracking
odometer
idsStatus
stairClimbingModel
rowingModel
exerciseMinute
workoutEvent
elevation
natalieData
sedentaryAlarmDataDeprecated
strideCalDataDeprecated
elevationDeprecated
_activityOverrideMsg
_allDayHeartRate
_bodyMetrics
_calorieData
_coarseElevation
_elevation
_elevationDeprecated
_exerciseMinute
_fitnessTracking
_idsStatus
_jacksonData
_motionState
_natalieData
_odometer
_rowingModel
_sedentaryAlarmData
_sedentaryAlarmDataDeprecated
_sessionCatherineData
_stairClimbingModel
_stepCountData
_strideCalData
_strideCalDataDeprecated
_workoutEvent
offsetInFile
reason
stringByAppendingPathComponent:
logData:
logger
setLogger:
_logger
setMountedState:
setEstExitTime:
formattedText
assertOutside
querySignificantElevationDeltaFromDate:toDate:withReply:
initWithSignificantElevation:
firstObject
stringByAppendingPathExtension:
initWithClient:
interfaceWithProtocol:base:
proxyForRecipientObject:inSilo:withInboundInterface:andOutboundInterface:
setRecordingUUID:
setRtLOI:
setRecordingEventProtobuf:
hasRecordingUUID
setRecordingTimestamp:
setHasRecordingTimestamp:
hasRecordingTimestamp
hasRtLOI
setReceivedTimestamp:
setHasReceivedTimestamp:
hasReceivedTimestamp
hasRecordingEventProtobuf
recordingEventType
setRecordingEventType:
setHasRecordingEventType:
hasRecordingEventType
recordingEventTypeAsString:
StringAsRecordingEventType:
recordingUUID
recordingTimestamp
rtLOI
receivedTimestamp
recordingEventProtobuf
_receivedTimestamp
_recordingTimestamp
_recordingEventProtobuf
_recordingEventType
_recordingUUID
_rtLOI
setTileType:
setHasTileType:
hasTileType
setIsAllowOverCellular:
setHasIsAllowOverCellular:
hasIsAllowOverCellular
secKey
setSecKey:
setHasSecKey:
hasSecKey
tileType
isAllowOverCellular
_secKey
_tileType
_isAllowOverCellular
ageOutStepArray
stepsInWindow
feedStepCountUpdate:
fStepWindow
setTriggerEvent:
setLocations:
setAccessPoints:
removeAllObjects
objectAtIndex:
initWithCapacity:
addLocations:
addAccessPoints:
locationsCount
clearLocations
locationsAtIndex:
accessPointsCount
clearAccessPoints
accessPointsAtIndex:
locationsType
accessPointsType
triggerEvent
locations
accessPoints
_accessPoints
_locations
_triggerEvent
dataWithContentsOfURL:options:error:
writeToURL:options:error:
defaultSessionConfiguration
sessionWithConfiguration:delegate:delegateQueue:
invalidateAndCancel
setTimeoutInterval:
setAllowsCellularAccess:
originalRequest
downloadTaskWithRequest:completionHandler:
replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:
statusCode
setLsest:
setHasLsest:
hasLsest
setSumest:
setHasSumest:
hasSumest
setFPal:
setHasFPal:
hasFPal
nPairs
setNPairs:
lsest
sumest
fPal
_fPal
_lsest
_nPairs
_sumest
setDEPRECATEDFingerprints:
setFingerprints:
setVersion:
setHasVersion:
hasVersion
setTileX:
setHasTileX:
hasTileX
setTileY:
setHasTileY:
hasTileY
securityKey
setSecurityKey:
setHasSecurityKey:
hasSecurityKey
setGenerationTimeSecs:
setHasGenerationTimeSecs:
hasGenerationTimeSecs
setExpirationAgeSecs:
setHasExpirationAgeSecs:
hasExpirationAgeSecs
hasDEPRECATEDFingerprints
hasFingerprints
marketId
setMarketId:
setHasMarketId:
hasMarketId
version
tileX
tileY
generationTimeSecs
expirationAgeSecs
dEPRECATEDFingerprints
fingerprints
_generationTimeSecs
_marketId
_securityKey
_dEPRECATEDFingerprints
_expirationAgeSecs
_fingerprints
_tileX
_tileY
_version
_doSigningWhenReady
_initializeMescalWithCompletion:
URLBagForContext:
URLWithString:
requestWithURL:
mainQueue
_churnMescalExchangeData:withCompletion:
sendAsynchronousRequest:queue:completionHandler:
loadWithCompletionBlock:
setValue:forHTTPHeaderField:
setHTTPMethod:
setHTTPBody:
signData:withCompletion:
replaceAfter
_silo
_worklist
_keyExchangeStarted
_keyExchangeComplete
_hardwareInfo
_mescalVersion
_mescalCertURL
_mescalExchangeURL
_replaceAfter
setBundleId:
setLaunchReason:
initWithBundleId:launchReason:
bundleId
launchReason
_bundleId
_launchReason
setHomeUUID:
setActionSetUUID:
setActionSetName:
setActionSetType:
setClientName:
setSceneName:
initWithHomeUUID:actionSetUUID:actionSetName:actionSetType:clientName:sceneName:
homeUUID
actionSetUUID
actionSetName
actionSetType
clientName
sceneName
_homeUUID
_actionSetUUID
_actionSetName
_actionSetType
_clientName
_sceneName
setAccessoryUUID:
setAccessoryName:
setServiceName:
setServiceType:
setCharacteristicType:
initWithHomeUUID:accessoryUUID:accessoryName:serviceName:serviceType:characteristicType:clientName:
accessoryUUID
accessoryName
serviceName
serviceType
characteristicType
_accessoryUUID
_accessoryName
_serviceName
_serviceType
_characteristicType
setViewUUID:
setViewName:
setViewInformation:
initWithHomeUUID:viewUUID:viewName:viewInformation:
viewUUID
viewName
viewInformation
_viewUUID
_viewName
_viewInformation
resetKeychainItem
secItemFormatToDictionary:
keychainItemData
writeToKeychain
dictionaryToSecItemFormat:
setKeychainItemData:
dictionaryWithDictionary:
initWithBytes:length:encoding:
genericPasswordQuery
setGenericPasswordQuery:
_keychainItemData
_genericPasswordQuery
setMeta:
setPressure:
setPressureLocation:
requestTypeCode
responseClass
meta
pressure
pressureLocation
_meta
_pressure
_pressureLocation
updateScheduler
setNextFireTime:interval:
fireInterval
_scheduler
_nextFireTime
_fireInterval
payload
priority
idsOptions
protocolVersion
setProtocolVersion:
_messageType
_payload
_priority
_idsOptions
_protocolVersion
initWithService:
setService:
service
addDelegate:queue:
setUnacknowledgedMessages:
setClients:
devices
updateNearbyStatusWithDevices:
isDefaultPairedDevice
isNearby
withClients:
setWithObject:
sendMessage:toDestinations:priority:options:identifier:error:
unacknowledgedMessages
removeObjectForKey:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
clients
pairIsNearby
setPairIsNearby:
_pairIsNearby
_service
_unacknowledgedMessages
_clients
initWithAdamId:bundleId:displayName:developerName:lastUpdateTime:
adamId
displayName
developerName
lastUpdateTime
_adamId
_displayName
_developerName
_lastUpdateTime
onPurgeTimer
valueForProperty:
stringValue
errorWithDomain:code:userInfo:
resultsCache
enumerateObjectsUsingBlock:
integerValue
setValue:forRequestParameter:
setKeyProfile:
setLocalizationStyle:
setPersonalizationStyle:
addObjectsFromArray:
onStoreLookupResponse:error:adamIds:requestorResponse:
startWithLookupBlock:
allKeys
initWithSilo:
performItemLookupWithAdamIds:response:
setResultsCache:
purgeTimer
setPurgeTimer:
_resultsCache
_purgeTimer
currentDirectoryPath
UUIDWithString:
centralManagerDidUpdateState:
centralManager:willRestoreState:
centralManager:didDiscoverPeripheral:advertisementData:RSSI:
centralManager:didConnectPeripheral:
centralManager:didFailToConnectPeripheral:error:
centralManager:didDisconnectPeripheral:error:
initWithProvider:
_homekitProvider
_wiproxPower
_homekitPower
_cbPower
initWithDelegate:queue:
scanForPeripheralsWithServices:options:
setHasType:
hasType
setHasConfidence:
hasConfidence
fetchIsCellAvailableWithReply:
fetchActiveOrHeldWithReply:
arrayWithObjects:count:
containsObject:
setMotionActivity:
hasMotionActivity
motionActivity
_motionActivity
fetchIsAssociatedWithReply:
fetchIsWifiAvailableWithReply:
setReceivedMessageHandler:
setConnectionUpdateHandler:
pairedDevice
operatingSystemVersion
isConnected
modelIdentifier
hasPrefix:
sendMessage:type:priority:fireAndForget:encrypt:bypassConnectionCheck:timeout:
uniqueIDOverride
setPairedModelId:
setConnectionStatus:
pairedDeviceLastSeenTimestamp
airplaneModeChanged
fetchIsAirplaneModeEnabledWithReply:
fetchReachabilityWithReply:
fetchIsBatteryConnectedWithReply:
fetchWirelessModemClientCountWithReply:
getSiloForService:
isServiceRunning:
getUUIDBytes:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
initWithUUIDBytes:
initWithTimeIntervalSinceReferenceDate:
decodeIntegerForKey:
decodeDoubleForKey:
initWithRecordId:sourceId:sessionId:startDate:endDate:strokeCount:distance:avgPace:lapCount:strokeType:
encodeInteger:forKey:
encodeDouble:forKey:
sessionId
startDate
endDate
strokeCount
avgPace
lapCount
strokeType
strokeTypeName:
supportsSecureCoding
maxSwimDataEntries
encodeWithCoder:
initWithCoder:
convertToSwimEntry:
initWithSessionId:
initWithSwimEntry:
sourceId
fRecordId
fSourceId
fSessionId
fStartDate
fEndDate
fStrokeCount
fDistance
fAvgPace
fLapCount
fStrokeType
whitespaceCharacterSet
stringByTrimmingCharactersInSet:
caseInsensitiveCompare:
isString:prefixedBy:
isBlackListedAccessory:name:model:serialNumber:firmware:hardwareRevision:
setRequester:
initWithData:startTime:requester:
requester
_index
_requester
processScdmaCells:inRange:timeReceived:requestType:tag:
processCellBatch:
performSelector:withObject:afterDelay:
processWirelessBatch:
downloadPayloadSize
finished:
lacID
processCells:inRange:timeReceived:requestType:tag:
processWireless:inRange:timeReceived:requestType:tag:
initWithRequester:
setLacID:
setHarvestingEnabled:
shutdown
initWithBytes:length:
notifierClientNumForCoparty:
locationProvider
numberWithUnsignedShort:
unsignedLongLongValue
fetchIsAccessoryConnectedWithReply:
initWithStartDate:recordId:sourceId:
maxExerciseMinuteDataEntries
initWithQueue:
transportType
travelTime
hasDestination
destination
latLng
hasOrigin
origin
setRouteSummaryUpdatedHandler:
setTransitSummaryUpdatedHandler:
guidanceLevel
setGuidanceStateUpdatedHandler:
hasTransportType
hasDestinationName
destinationName
hasTravelTime
possibleStops
hasStopID
stopID
hasCoordinate
scheduledLinks
hasLineID
lineID
hasScheduledDeparture
scheduledDeparture
hasScheduledArrival
scheduledArrival
hasStopFrom
stopFrom
hasStopTo
stopTo
hasGuidanceLevel
hasNavigationState
navigationState
hasTrackedTransportType
trackedTransportType
setCellTowerLocations:
setCdmaCellTowerLocations:
setLteCellTowerLocations:
setWifiAPLocations:
setScdmaCellTowerLocations:
clearCellTowerLocations
cellTowerLocationAtIndex:
clearWifiAPLocations
wifiAPLocationAtIndex:
clearCdmaCellTowerLocations
cdmaCellTowerLocationAtIndex:
clearLteCellTowerLocations
lteCellTowerLocationAtIndex:
clearScdmaCellTowerLocations
scdmaCellTowerLocationAtIndex:
cellTowerLocationType
cdmaCellTowerLocationType
lteCellTowerLocationType
wifiAPLocationType
scdmaCellTowerLocationType
_cdmaCellTowerLocations
_cellTowerLocations
_lteCellTowerLocations
_scdmaCellTowerLocations
_wifiAPLocations
setMarkets:
addMarkets:
marketsCount
clearMarkets
marketsAtIndex:
markets
_markets
setMsg:
hasMsg
success
setSuccess:
_msg
_success
setAppBundleIdIndices:
setRawMotionActivity:
setDominantMotionActivity:
addAppBundleIdIndices:
appBundleIdIndicesCount
clearAppBundleIdIndices
appBundleIdIndicesAtIndex:
appBundleIdIndicesType
setAltitude:
setHasAltitude:
hasAltitude
setVerticalAccuracy:
setHasVerticalAccuracy:
hasVerticalAccuracy
setHasSpeed:
hasSpeed
setCourse:
setHasCourse:
hasCourse
setHasContext:
hasContext
setMotionActivityType:
setHasMotionActivityType:
hasMotionActivityType
setMotionActivityConfidence:
setHasMotionActivityConfidence:
hasMotionActivityConfidence
setProvider:
setHasProvider:
hasProvider
setFloor:
setHasFloor:
hasFloor
setMotionVehicleConnectedStateChanged:
setHasMotionVehicleConnectedStateChanged:
hasMotionVehicleConnectedStateChanged
setMotionVehicleConnected:
setHasMotionVehicleConnected:
hasMotionVehicleConnected
hasRawMotionActivity
hasDominantMotionActivity
latitude
setLatitude:
longitude
setLongitude:
setHorizontalAccuracy:
altitude
verticalAccuracy
course
motionActivityType
motionActivityConfidence
provider
floor
appBundleIdIndices
motionVehicleConnectedStateChanged
motionVehicleConnected
rawMotionActivity
dominantMotionActivity
_latitude
_longitude
_altitude
_appBundleIdIndices
_course
_dominantMotionActivity
_floor
_horizontalAccuracy
_motionActivityConfidence
_motionActivityType
_provider
_rawMotionActivity
_verticalAccuracy
_motionVehicleConnected
_motionVehicleConnectedStateChanged
setAppBundleId:
setTripId:
setAppBundleIds:
addLocation:
addAppBundleIds:
locationAtIndex:
appBundleIdsCount
clearAppBundleIds
appBundleIdsAtIndex:
locationType
appBundleIdsType
hasAppBundleId
setRat:
setHasRat:
hasRat
setMcc:
setHasMcc:
hasMcc
setMnc:
setHasMnc:
hasMnc
appBundleId
tripId
appBundleIds
_appBundleId
_appBundleIds
_mcc
_mnc
_rat
_tripId
setQuaternion:
hasQuaternion
setMagneticAccuracy:
setHasMagneticAccuracy:
hasMagneticAccuracy
magneticCalibration
setMagneticCalibration:
setHasMagneticCalibration:
hasMagneticCalibration
magneticCalibrationAsString:
StringAsMagneticCalibration:
quaternion
magneticAccuracy
_magneticAccuracy
_magneticCalibration
_quaternion
setSubmissionId:
setHasSubmissionId:
hasSubmissionId
hasProbeId
productId
softwareVersion
submissionId
probeId
_submissionId
_probeId
_productId
_softwareVersion
setHasScanTimestamp:
hasScanTimestamp
scanTimestamp
_scanTimestamp
initWithRecordId:sourceId:startDate:endDate:elevationAscended:elevationDescended:
initWithSignificantElevationSample:
fElevationAscended
fElevationDescended
activityTypeAsString:
StringAsActivityType:
setNCatherine:
setHasNCatherine:
hasNCatherine
setNVeryLowCatherine:
setHasNVeryLowCatherine:
hasNVeryLowCatherine
setNLowCatherine:
setHasNLowCatherine:
hasNLowCatherine
setNHighCatherine:
setHasNHighCatherine:
hasNHighCatherine
setNVeryHighCatherine:
setHasNVeryHighCatherine:
hasNVeryHighCatherine
setNGoodCatherine:
setHasNGoodCatherine:
hasNGoodCatherine
setNInterpolatedCatherine:
setHasNInterpolatedCatherine:
hasNInterpolatedCatherine
setNSampleAndHoldCatherine:
setHasNSampleAndHoldCatherine:
hasNSampleAndHoldCatherine
setMinGoodCatherine:
setHasMinGoodCatherine:
hasMinGoodCatherine
setMaxGoodCatherine:
setHasMaxGoodCatherine:
hasMaxGoodCatherine
setMeanCatherine:
setHasMeanCatherine:
hasMeanCatherine
setMeanGoodCatherine:
setHasMeanGoodCatherine:
hasMeanGoodCatherine
setFirstCatherine:
setHasFirstCatherine:
hasFirstCatherine
setFirstCatherineStartTime:
setHasFirstCatherineStartTime:
hasFirstCatherineStartTime
setLongestDropout:
setHasLongestDropout:
hasLongestDropout
setTotalDropoutTime:
setHasTotalDropoutTime:
hasTotalDropoutTime
setNDropout:
setHasNDropout:
hasNDropout
onsetReason
setOnsetReason:
setHasOnsetReason:
hasOnsetReason
onsetReasonAsString:
StringAsOnsetReason:
setOnsetCatherine:
setHasOnsetCatherine:
hasOnsetCatherine
setUserMaxCatherine:
setHasUserMaxCatherine:
hasUserMaxCatherine
setPersistedMinHR:
setHasPersistedMinHR:
hasPersistedMinHR
activityType
setActivityType:
nCatherine
nVeryLowCatherine
nLowCatherine
nHighCatherine
nVeryHighCatherine
nGoodCatherine
nInterpolatedCatherine
nSampleAndHoldCatherine
minGoodCatherine
maxGoodCatherine
meanCatherine
meanGoodCatherine
firstCatherine
firstCatherineStartTime
longestDropout
totalDropoutTime
nDropout
onsetCatherine
userMaxCatherine
persistedMinHR
_activityType
_firstCatherine
_firstCatherineStartTime
_longestDropout
_maxGoodCatherine
_meanCatherine
_meanGoodCatherine
_minGoodCatherine
_nCatherine
_nDropout
_nGoodCatherine
_nHighCatherine
_nInterpolatedCatherine
_nLowCatherine
_nSampleAndHoldCatherine
_nVeryHighCatherine
_nVeryLowCatherine
_onsetCatherine
_onsetReason
_persistedMinHR
_totalDropoutTime
_userMaxCatherine
metSourceAsString:
StringAsMetSource:
setMetsHR:
setHasMetsHR:
hasMetsHR
setMetsWR:
setHasMetsWR:
hasMetsWR
setMets:
metSource
setMetSource:
meanAngleX
setMeanAngleX:
energyMagnitude
setEnergyMagnitude:
metsHR
metsWR
_mets
_energyMagnitude
_meanAngleX
_metSource
_metsHR
_metsWR
initWithCLMotionActivity:
httpResponseHeaders
domain
code
requester:didReceiveResponse:forRequest:
requesterDidFinish:
requesterDidCancel:
requester:didFailWithError:
requesterWillSendRequestForEstablishedConnection:
initWithRequester:subHarvesterIdentifier:
tolerateIncompatibleData
setTolerateIncompatibleData:
fSubHarvesterIdentifier
fRequester
_tolerateIncompatibleData
setLength:
mutableBytes
setProductId:
setSoftwareVersion:
setProbeId:
sharedConfiguration
defaultForKey:defaultValue:
enumerateKeysAndObjectsUsingBlock:
appLocationsCount
indoorLocationsCount
setEcn0:
setPsc:
setRscp:
setRssi:
setUarfcn:
setPilotPhase:
setPnoffset:
setChannel:
setPid:
addGsmNeighbors:
addScdmaNeighbors:
addCdmaNeighbors:
addLteNeighbors:
indexForLocation:
setLac:
setCi:
setOperatorName:
setTransmit:
setArfcn:
setNeighborGroup:
setLocation:
location
addCellTowerLocation:
addScdmaCellTowerLocation:
setSid:
setNid:
setBsid:
setLtmOffset:
setDayLightSavings:
addDerivedMcc:
setBsLatitude:
setBsLongitude:
setZoneid:
setSectorid:
setSectorLatitude:
setSectorLongitude:
setCelltype:
setBandclass:
addCdmaCellTowerLocation:
setTac:
setBandInfo:
addLteCellTowerLocation:
setMac:
setHidden:
setScanTimestamp:
addWifiAPLocation:
addWtwLocation:
arrayWithArray:
setAppState:
setAge:
setRoutineMode:
setLoiType:
addAppLocation:
initWithUTF8String:
setPassTypeId:
dataUsingEncoding:
JSONObjectWithData:options:error:
initWithArray:
setAssociatedStoreIds:
setPassSource:
addPassLocation:
cmAttitude
addIndoorCMAttitude:
cmPedometer
addIndoorCMPedometer:
addIndoorLocations:
addIndoorMotionActivity:
addIndoorPressure:
wifiScan
addIndoorWifis:
setValue:
setStd:
setDeviceKey:
setSubmissionTimestamp:
setMeasurements:
setRecordingEvents:
setModels:
setDuetEvents:
setConfigurations:
setMuid:
setProviderIdentifier:
setTriggerType:
setTriggerSubType:
setTriggerTimestamp:
addHarvests:
initWithCString:encoding:
stringWithCString:encoding:
initWithURL:andDelegate:usingConnectionSession:validatingAgainstHostname:
mainRunLoop
setConnectionRunLoop:
addRequest:
setLogRequestToFile:
setLogResponseToFile:
setTimeoutSeconds:
setHttpRequestHeaders:
uploadPayloadSize
setupWithCompletionHandler:
removeObjectAtIndex:
descriptionOfIndex:
cellTowerLocations
cdmaCellTowerLocations
scdmaCellTowerLocations
lteCellTowerLocations
wifiAPLocations
wtwLocations
appLocations
setSignature:
passLocations
seedLocationsAtIndex
identifier
setRtLOIUUID:
setRtLOIType:
uncertainty
setUncertaintyInMeters:
typeSource
setTypeSource:
rtLOIUUID
rtLOIType
uncertaintyInMeters
setRtVisitTimesAreQuantized:
visits
addVisits:
setRtLOITypes:
initPersistentSessionWithTimeout:
cellTowerLocationsCount
scdmaCellTowerLocationsCount
cdmaCellTowerLocationsCount
lteCellTowerLocationsCount
wifiAPLocationsCount
wtwLocationsCount
passLocationsCount
harvestsCount
initWithStartDate:firedDate:alarmType:didWake:
firedDate
alarmType
fFiredDate
fAlarmType
fDidWake
addAssociatedStoreId:
associatedStoreIdsCount
clearAssociatedStoreIds
associatedStoreIdAtIndex:
associatedStoreIdType
setHasAge:
hasAge
setServerHash:
setHasServerHash:
hasServerHash
passTypeId
associatedStoreIds
passSource
serverHash
_age
_associatedStoreIds
_location
_passSource
_passTypeId
_serverHash
setClientKey:
setAuthMask:
setClearClient:
setOperationType:
setNotification:
deleteObject:
sendNotification:withGlobalAuthStatus:
promptForClient:authorizationStatus:forcePrompt:
watchNeedsFullSync
client:didChangeUsageData:
setClients:regionOfType:to:
setClients:significantLocationChangeTo:
setClients:significantLocationVisitTo:
onCapabilityChange
companionApplicationBundleIdentifierForExtensionIdentifier:
fileURLWithPath:isDirectory:
pluginKitProxyForURL:
pluginKitProxyForIdentifier:
containingBundle
bundleIdentifier
protocol
startMonitoringCapabilityChangeForClient:
afterInterval:async:
setClient:authorization:forMask:
stopMonitoringCapabilityChangeForClient:
clearAuthorizationOfClients
numberWithUnsignedInteger:
setAllClients:
clearAuthorizationOfClient:
onCLEmergencyEnablementAssertion:
initWithBundleIdentifier:flags:reason:name:withHandler:
defaultWorkspace
openSensitiveURL:withOptions:
sendGlobalAuthStatus:
considerPerformingAForcedFullSync
stringByResolvingSymlinksInPath
initWithContentsOfFile:
sortedArrayUsingComparator:
indexOfObject:inSortedRange:options:usingComparator:
getNumberOfInputApsUsedInWifiTileForCoordinate:withReply:
valueForKey:
unknown
walking
running
automotive
cycling
initWithMotionActivity:
isVehicleConnected
fState
propertyListWithStream:options:format:error:
pairingID
setLocationFingerprints:
addLocationFingerprint:
locationFingerprintsCount
clearLocationFingerprints
locationFingerprintAtIndex:
locationFingerprints
_locationFingerprints
setHasDistance:
hasDistance
setNumberOfSteps:
setHasNumberOfSteps:
hasNumberOfSteps
setHasFloorsAscended:
hasFloorsAscended
setHasFloorsDescended:
hasFloorsDescended
setFirstStepTime:
setHasFirstStepTime:
hasFirstStepTime
setActiveTime:
setHasActiveTime:
hasActiveTime
numberOfSteps
firstStepTime
activeTime
_firstStepTime
_activeTime
_numberOfSteps
setMacs:
addMacs:
writeString:forTag:
writeInt32:forTag:
writeData:forTag:
macsCount
clearMacs
macsAtIndex:
channelsCount
clearChannels
channelsAtIndex:
addChannels:
rssisCount
clearRssis
rssisAtIndex:
addRssis:
hiddensCount
clearHiddens
hiddensAtIndex:
addHiddens:
channels
setChannels:count:
rssis
setRssis:count:
hiddens
setHiddens:count:
macs
_channels
_hiddens
_rssis
_macs
registerFileForCollection:
unregisterFileForCollection:
initWithMachServiceName:
_setQueue:
resume
registeredFiles
mobileCrashReporterPath
pathForDate:withBasePath:
fileManager
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
lastPathComponent
URLByAppendingPathComponent:
copyItemAtURL:toURL:error:
valueForEntitlement:
processIdentifier
connection
setConnection:
setInterruptionHandler:
setInvalidationHandler:
copyRegisteredFilesWithHandler:
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
componentsJoinedByString:
initWithString:
setDateFormat:
stringFromDate:
fileManager:shouldCopyItemAtPath:toPath:
fileManager:shouldCopyItemAtURL:toURL:
fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:
fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:
fileManager:shouldMoveItemAtPath:toPath:
fileManager:shouldMoveItemAtURL:toURL:
fileManager:shouldProceedAfterError:movingItemAtPath:toPath:
fileManager:shouldProceedAfterError:movingItemAtURL:toURL:
fileManager:shouldLinkItemAtPath:toPath:
fileManager:shouldLinkItemAtURL:toURL:
fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:
fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:
fileManager:shouldRemoveItemAtPath:
fileManager:shouldRemoveItemAtURL:
fileManager:shouldProceedAfterError:removingItemAtPath:
fileManager:shouldProceedAfterError:removingItemAtURL:
listener:shouldAcceptNewConnection:
listener
setListener:
setRegisteredFiles:
setFileManager:
_listener
_registeredFiles
_fileManager
_connection
resetBytesInRange:
setTiles:
addTiles:
tilesCount
clearTiles
tilesAtIndex:
setNorthWestLatitude:
setHasNorthWestLatitude:
hasNorthWestLatitude
setNorthWestLongitude:
setHasNorthWestLongitude:
hasNorthWestLongitude
setSouthEastLatitude:
setHasSouthEastLatitude:
hasSouthEastLatitude
setSouthEastLongitude:
setHasSouthEastLongitude:
hasSouthEastLongitude
northWestLatitude
northWestLongitude
southEastLatitude
southEastLongitude
tiles
_northWestLatitude
_northWestLongitude
_southEastLatitude
_southEastLongitude
_tiles
setIndoorWifis:
setIndoorLocations:
setIndoorCMAttitudes:
setIndoorCMPedometers:
setIndoorMotionActivitys:
setIndoorPressures:
indoorWifisCount
clearIndoorWifis
indoorWifisAtIndex:
clearIndoorLocations
indoorLocationsAtIndex:
indoorCMAttitudesCount
clearIndoorCMAttitudes
indoorCMAttitudeAtIndex:
indoorCMPedometersCount
clearIndoorCMPedometers
indoorCMPedometerAtIndex:
indoorMotionActivitysCount
clearIndoorMotionActivitys
indoorMotionActivityAtIndex:
indoorPressuresCount
clearIndoorPressures
indoorPressureAtIndex:
indoorWifisType
indoorLocationsType
indoorCMAttitudeType
indoorCMPedometerType
indoorMotionActivityType
indoorPressureType
indoorWifis
indoorLocations
indoorCMAttitudes
indoorCMPedometers
indoorMotionActivitys
indoorPressures
_indoorCMAttitudes
_indoorCMPedometers
_indoorLocations
_indoorMotionActivitys
_indoorPressures
_indoorWifis
currentSpeed
averageSpeed
initWithDistance:startDate:endDate:currentSpeed:averageSpeed:
_startDate
_endDate
_currentSpeed
_averageSpeed
setConfigurationProtobuf:
setGenerationTimestamp:
setHasGenerationTimestamp:
hasGenerationTimestamp
configurationType
setConfigurationType:
setHasConfigurationType:
hasConfigurationType
configurationTypeAsString:
StringAsConfigurationType:
hasConfigurationProtobuf
generationTimestamp
configurationProtobuf
_generationTimestamp
_configurationProtobuf
_configurationType
allowsNetworkTileLoad
isNetworkTileLoadAllowed
setIsNetworkTileLoadAllowed:
_isNetworkTileLoadAllowed
setTileErrorHandler:
setCallbackQueue:
setRestrictions:
callbackQueue
preloadRoadTilesNearCoordinate:radius:completionHandler:
locationShiftEnabled
shiftCoordinate:accuracy:shiftedCoordinate:shiftedAccuracy:
hasLoadedRoadTilesNearCoordinate:radius:
isRail
travelDirection
roadID
coordinates
coordinateCount
setCancellationHandler:
cancel
internalRoadName
isTunnel
isBridge
roadClass
formOfWay
findRoadsWithin:of:handler:completionHandler:
findRoadsFromNextIntersection:completionHandler:
findRoadsFromPreviousIntersection:completionHandler:
findRoadsToNextIntersection:completionHandler:
findRoadsToPreviousIntersection:completionHandler:
track
gradient
gradientValidity
initWithTrack:session:
setGradient:
_track
_gradientValidity
_gradient
state
setState:
_state
initWithTimestamp:RSSI:uuid:ipv4:channel:
RSSI
uuid
ipv4
channel
_RSSI
_uuid
_ipv4
_channel
cppObject
beginServiceWithAirPlaySolo:
setAirplaySolo:
airplaySolo
setPower:
setScanDeliveryDelayTimer:
scanDeliveryDelayTimer
sendBufferedScanNotifications
setBufferedDevices:
releaseData
stopScan
power
getPowerWithCompletion:
startMonitoringDevicesForClient:
stopMonitoringDevicesForClient:
startScan
clATVAirplayMonitorService:didFindDevices:
bufferedDevices
airPlaySoloDidUpdateState:
airPlaySolo:foundDevice:withData:
airPlaySoloStartedScanning:
airPlaySoloStoppedScanning:
airPlaySolo:failedToStartScanningWithError:
_power
_airplaySolo
_scanDeliveryDelayTimer
_bufferedDevices
logBins
quitForcedLocationState
setupCLNotifiers:
teardownCLNotifiers
inOutdoorPedestrianSession
checkForLocationStateTransition
isCalibrationConvergedMedianForSpeed:
updateCalibrationBins:
locationState
requestTransitionToLocationState:
outOfSession
isRunningStateInWindow
attemptForcedLocation
isCalibrationConvergedStdForBinWithSpeed:
startLeechingLocation
startGpsOdometerSpectatorUpdates
startElevationSpectatorUpdates
stopLeechingLocation
stopGpsOdometerSpectatorUpdates
stopElevationSpectatorUpdates
startLocationUpdates
startGpsOdometerUpdates
startElevationUpdates
stopLocationUpdates
stopGpsOdometerUpdates
stopElevationUpdates
currentSession
addLatestCalData:
tickleArrow
stop
distanceRawPed
isSpeedValid:
distanceGps
updateGradient:
checkValidTrack:associatedEntry:
isRunningSpeed:
updateBinsWithTrack:
kValueForSpeed:
gpsSource
addEntry:
removeObjectsInArray:
copyHistory
strideCalibrationDatabase:didInsertEntry:
fsm:didTransitionFromState:toState:
fsm:didYieldTrack:
fsm:didUpdateLocationAtTime:
fsm:didUpdateSource:
initInSilo:stepCountDb:
tick:
fOdometerClient
fServiceLocationProvider
fServiceLocationClient
fClientAuthorizationCache
fStreamingAwareLocationClient
fStreamingAwareProxy
fStepCountClient
fMotionStateClient
fCompanionClient
fMotionStateMediatorClient
fStopOpportunisticCalibrationTimer
fActivityBuffer
fElevationBuffer
fStepsBuffer
fStats
fDatabase
fStrideCalLocationFSM
fLatestCalDataArray
fStepCountDb
fLastGoodLocFix
fCurrentSession
isMessageOfType:
dataPayload
setDataPayload:
_dataPayload
message
setMessage:
error
setError:
recoverable
setRecoverable:
_recoverable
_message
_error
setManager:
manager
sharedInstance
setPairedDeviceRegistry:
defaultCenter
handleUnpairNotification_bounce:
addObserver:selector:name:object:
handlePairNotification_bounce:
handleActiveNotification_bounce:
handleInactiveNotification_bounce:
initWithUUIDString:
getActivePairedDevice
handleUnpair
handlePair
setPairedDeviceID:
requestFullResync
sendAllUsageSyncData
setRetryTimer:
drainErrorQueue
setErrorQueue:
setMessagesWaitingForAck:
removeDelegate:
removeObserver:name:object:
pairedDeviceID
setHighestReceivedSequenceNumber:
numberWithLongLong:
handleMessageError:
addMessageToErrorQueue:
_sendMessage:identifier:error:
messageFailedToSend:withError:recoverable:
messagesWaitingForAck
sendMessageWithMessageType:dataPayload:priority:idsOptions:
stringByAppendingString:
handleMessageSendError:identifier:
handleMessageSendSuccessForIdentifier:
longLongValue
highestReceivedSequenceNumber
handleMessageUsageUpdateWithMessageData:
handleMessagePromptWithMessageData:
handleMessageResyncRequestWithMessageData:
handleMessageResyncResponseWithMessageData:
activeDeviceNearbyStatus
setActiveDeviceNearbyStatus:
dirtyUsageSyncState
setDirtyUsageSyncState:
needFullResync
setNeedFullResync:
pairedDeviceRegistry
retryTimerSet
setRetryTimerSet:
retryTimer
errorQueue
_dirtyUsageSyncState
_needFullResync
_retryTimerSet
_manager
_pairedDeviceID
_pairedDeviceRegistry
_retryTimer
_errorQueue
_messagesWaitingForAck
_activeDeviceNearbyStatus
decodeFloatForKey:
encodeFloat:forKey:
isWalking
isRunning
isDriving
maybeExitingVehicle
hasExitedVehicle
fActivity
hour
minute
second
initWithCatherine:confidence:timestamp:
catherine
_catherine
setNeighbors:
exceptionWithName:reason:userInfo:
raise
addNeighbor:
derivedMccsCount
clearDerivedMccs
derivedMccAtIndex:
neighborsCount
clearNeighbors
neighborAtIndex:
neighborType
setHasBsLatitude:
hasBsLatitude
setHasBsLongitude:
hasBsLongitude
setHasZoneid:
hasZoneid
hasSectorid
setHasSectorLatitude:
hasSectorLatitude
setHasSectorLongitude:
hasSectorLongitude
setHasBandclass:
hasBandclass
setHasCelltype:
hasCelltype
setHasPnoffset:
hasPnoffset
setHasChannel:
hasChannel
hasOperatorName
setHasLtmOffset:
hasLtmOffset
setHasDayLightSavings:
hasDayLightSavings
derivedMccs
setDerivedMccs:count:
setHasEcn0:
hasEcn0
setHasRscp:
hasRscp
hasNeighborGroup
bsid
bsLatitude
bsLongitude
zoneid
sectorid
sectorLatitude
sectorLongitude
bandclass
celltype
pnoffset
operatorName
ltmOffset
dayLightSavings
ecn0
rscp
neighbors
neighborGroup
_derivedMccs
_bsLatitude
_bsLongitude
_sectorLatitude
_sectorLongitude
_bandclass
_bsid
_celltype
_dayLightSavings
_ecn0
_ltmOffset
_neighborGroup
_neighbors
_nid
_operatorName
_pnoffset
_rscp
_sectorid
_sid
_zoneid
machineFrequency
setMachineFrequency:
_machineFrequency
delegate
setSyncRestriction:
_activeSyncSession
_delegate
_syncRestriction
setDidComplete:
syncDidFailWithError:
didComplete
setSyncSessionType:
_didComplete
_syncSessionType
requestInitialSyncStateForPairingIdentifier:completion:
requestSyncStateForPairingIdentifier:completion:
startSessionMetricsWithTime:session:
loadLastAWDTimestamps
storeLastAWDTimestamps
endSessionMetrics:
setReadyForSubmission
awdLogDistance:status:description:
activityLoggerLogStrideCalEntry:
awdMotionFitnessStrideCalibration:
updateUserHeight:
fSessionMetrics
fHeightCM
fLastAWDTimestamps
setTimerWithInterval:
bounce_timerFired:
initWithTimeInterval:serviceIdentifier:target:selector:userInfo:
setMinimumEarlyFireProportion:
setDisableSystemWaking:
scheduleInRunLoop:
timerFired:
initWithFireDate:timeInterval:serviceIdentifier:wakeDevice:clTimer:silo:minimumEarlyFireProportion:
setNextFireDate:
_pcTimer
_clTimer
_strIdentifier
_serviceIdentifier
_wakeDevice
_timeInterval
_minimumEarlyFireProportion
mode
setMode:
heartRate
setHeartRate:
_heartRate
_mode
setStrokeAmp:
setHasStrokeAmp:
hasStrokeAmp
setStrokeFrequency:
setHasStrokeFrequency:
hasStrokeFrequency
strokePower
setStrokePower:
strokeAmp
strokeFrequency
_strokeAmp
_strokeFrequency
_strokePower
syncgetActivityStats
onDataCollectionChangedNotification
isHealthDataAvailable
loadCache
dateWithTimeIntervalSinceNow:
startOfDayForDate:
NSDateToNSStringKey:
ageOutCache:
setupStoreCacheTimer
setupQueryTimer
NSDictionaryToMotionFitnessDailyStruct:
storeCache:
createUUID
CFAbsoluteTimeToNSStringKey:
MotionFitnessDailyStructToNSDictionary:
createCache
floatValue
isIDValid:
UUID
defaultCStringEncoding
addEntriesFromDictionary:
unsignedIntValue
sharedConnection
isHealthDataSubmissionAllowed
initDataDictForDay:
truncateLatLong:
runQueries
resetQueryState
querySources
dateWithTimeInterval:sinceDate:
predicateForSamplesWithStartDate:endDate:options:
quantityTypeForIdentifier:
_productType
queryWatchWorkouts
queryPhoneDailyStepCount
initWithSampleType:samplePredicate:completionHandler:
executeQuery:
dateByAddingTimeInterval:
queryWatchDailyStepCount
queryWorkouts:endDate:workoutsHandler:
_predicateForObjectsFromAppleWatches
andPredicateWithSubpredicates:
workoutActivityType
initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:
queryStepCount:endDate:sources:stepCountHandler:
queryWatchStandHours
predicateForObjectsFromSources:
arrayWithObjects:
setMinute:
initWithQuantityType:quantitySamplePredicate:options:anchorDate:intervalComponents:
sumQuantity
countUnit
doubleValueForUnit:
enumerateStatisticsFromDate:toDate:withBlock:
setInitialResultsHandler:
queryPhoneFlightsClimbed
queryStandHours:endDate:standHoursHandler:
categoryTypeForIdentifier:
queryPhoneStaticTime
queryFlightsClimbed:endDate:flightsClimbedHandler:
localDevice
predicateForObjectsFromDevices:
initWithQuantityType:quantitySamplePredicate:options:completionHandler:
queryStaticTime:endDate:staticTimeHandler:
stationary
queryMotionStatesWithStartTime:endTime:isFromInternalClient:withReply:
onCompanionNotification:data:
onDataProtectionNotification:data:
onAppMonitorNotification:data:
fServiceEnabled
fStoreCacheTimer
fDataCache
fMotionStateProxy
fLocationClient
fCompanionNotifierClient
fDataProtectionClient
fAppMonitorClient
fEncryptedDataAvailable
fQueryState
fQueryTimer
fHealthStore
fHKQueryStartDate
fPhoneSources
fWatchSources
fPendingPhoneDailyStepCountQueries
fPendingWatchDailyStepCountQueries
fPendingWatchWorkoutQueries
fPendingWatchStandHoursQueries
fPendingPhoneFlightsClimbedQueries
fPendingPhoneStaticTimeQueries
fBeginStaticTime
fBeginWatchConnectedTime
updateObject:
setSyncService:
syncService
setFullSyncObjectsInCompanionQueue:
setFullSyncObjectsInGizmoQueue:
setDeltaSyncObjectsInCompanionQueue:
setDeltaSyncObjectsInGizmoQueue:
setNotificationsInCompanionQueue:
setNotificationsInGizmoQueue:
setPreDaytonaMapping:
setShouldSendMoreDataInCurrentSyncSession:
setShouldConfirmHandlingPairingNotification:
setShouldConfirmHandlingQuickSwitchNotification:
setResetRecoveryMode:
setRecoverySyncInProgress:
setIsThereAWatch:
setIsQuickSwitchInProgress:
setWatchProductVersion:
setAuthSyncStoreState:
setNumberOfConsecutiveSyncSessionRetries:
setReunionSyncLists:
setReunionSyncListPaths:
watchProductVersion
updateQuickSwitchMode
checkResetNotificationStatus
isResetSync
containsString:
executablePath
stringByDeletingLastPathComponent
rangeOfString:
substringFromIndex:
hasNotification
notification
clientKey
translatedKeyForSimulator:
authMask
clearClient
setNeedsResetSync
applyAddMessage:
applyUpdateMessage:
applyDeleteMessage:
endPairedSyncSessionWithError:
handleError:inSyncSession:
fullSyncDidComplete
deltaSyncDidComplete
setFullPathForSyncState:
isWatchBuildVersionPreDaytona
deviceDidPairNotification:
deviceDidUnpairNotification:
handleQuickSwitch
updateReunionSyncLists
syncReunionSyncList
clearReunionSyncList
createSyncStoreState
updateSyncStoreState
updateSyncStoreStateForVersionedKey:
checkSyncStoreState
checkSyncStoreStateAfterBoot
checkSyncStoreStateAfterQuickSwitch
checkSyncStoreStateAftreRestrictionChange
checkAllNotificationStatuses
updateActiveWatchInfo
handleZeroActiveWatch
handlePairing
handleUnpairing
prepareToDoFullSync
prepareToDoReunionSync
getFullSyncObjects
getTranslatedKeyForClientKey:
reunionSyncDidComplete:
fullPathForSyncState
fullSyncObjectsInCompanionQueue
fullSyncObjectsInGizmoQueue
deltaSyncObjectsInCompanionQueue
deltaSyncObjectsInGizmoQueue
notificationsInCompanionQueue
notificationsInGizmoQueue
preDaytonaMapping
shouldConfirmHandlingPairingNotification
shouldConfirmHandlingQuickSwitchNotification
shouldSendMoreDataInCurrentSyncSession
resetRecoveryMode
recoverySyncInProgress
isThereAWatch
isQuickSwitchModeOn
setIsQuickSwitchModeOn:
authSyncStoreState
reunionSyncListPaths
reunionSyncLists
isQuickSwitchInProgress
numberOfConsecutiveSyncSessionRetries
_shouldConfirmHandlingPairingNotification
_shouldConfirmHandlingQuickSwitchNotification
_shouldSendMoreDataInCurrentSyncSession
_resetRecoveryMode
_recoverySyncInProgress
_isThereAWatch
_isQuickSwitchModeOn
_isQuickSwitchInProgress
_fullPathForSyncState
_syncService
_fullSyncObjectsInCompanionQueue
_fullSyncObjectsInGizmoQueue
_deltaSyncObjectsInCompanionQueue
_deltaSyncObjectsInGizmoQueue
_notificationsInCompanionQueue
_notificationsInGizmoQueue
_preDaytonaMapping
_watchProductVersion
_authSyncStoreState
_reunionSyncListPaths
_reunionSyncLists
_numberOfConsecutiveSyncSessionRetries
dataWithCapacity:
contentsOfDirectoryAtPath:error:
mutableCopy
currentFilename
fileHandleForReadingAtPath:
seekToFileOffset:
readDataOfLength:
writeData:
closeFile
removeItemAtPath:error:
stopLogging
clearLogs
setWithSet:
logFallStats:
pathExtension
stringByDeletingPathExtension
hasPairedModelId
connectionStatus
pairedModelId
_connectionStatus
_pairedModelId
indexSet
addIndex:
radiusMeters
handler
removeObjectsAtIndexes:
touristApp
setEffectiveRadiusMetersIfInstalled:
setHeroAppRankInstalled:
setHeroAppRankUnInstalled:
setAdamId:
setAgeRating:
setTouristApp:
setSpanLat:
setSpanLon:
setLat:
setLon:
setRadiusMeters:
setIncludeRegionalApps:
requestTileDownloadByType:lat:lon:seckey:details:
includeRegionalApps
ageRating
effectiveRadiusMetersIfInstalled
heroAppRankInstalled
heroAppRankUnInstalled
spanLat
spanLon
_touristApp
_ageRating
_effectiveRadiusMetersIfInstalled
_heroAppRankInstalled
_heroAppRankUnInstalled
_spanLat
_spanLon
_includeRegionalApps
_radiusMeters
_handler
_lat
_lon
ageOutMotionStateArray
feedMotionStateData:
fActivityWindow
latitudesCount
clearLatitudes
latitudeAtIndex:
addLatitude:
longitudesCount
clearLongitudes
longitudeAtIndex:
addLongitude:
latitudes
setLatitudes:count:
longitudes
setLongitudes:count:
_latitudes
_longitudes
setW:
setHasW:
hasW
setX:
setY:
setZ:
removeAllClients
setCdRegistration:
setContext:
registerCallback
deregisterCallback
removeClient:
cdRegistration
context
registerCallback:
predicate
keyPaths
deregisterCallback:
_context
_cdRegistration
event
numberWithInteger:
setEvent:
setPredicate:
duetIdentifier
setDuetIdentifier:
withEvent:andPredicate:
_event
_predicate
_duetIdentifier
setRegisteredEvents:
startMonitoringForegroundAppLaunchForClient:
stopMonitoringForegroundAppLaunchForClient:
startMonitoringForegroundAppLaunchWithPredicate:forClient:
stopMonitoringForegroundAppLaunchWithPredicate:forClient:
startMonitoringAudioOutputRouteConnectedForClient:
stopMonitoringAudioOutputRouteConnectedForClient:
startMonitoringBluetoothConnectedForClient:
stopMonitoringBluetoothConnectedForClient:
startMonitoringFirstWakeOfDayForClient:
stopMonitoringFirstWakeOfDayForClient:
startMonitoringHomeKitSceneForClient:
stopMonitoringHomeKitSceneForClient:
startMonitoringHomeKitAccessoryForClient:
stopMonitoringHomeKitAccessoryForClient:
startMonitoringHomeKitAppViewForClient:
stopMonitoringHomeKitAppViewForClient:
stopMonitoringForClient:
fetchAllMicroLocationEventsWithStartDate:endDate:handler:
duetMonitorAudioOutputRouteConnected:
duetMonitorBluetoothConnected:
duetMonitorDeviceFirstWakeOfDay:
duetMonitor:foregroundAppDidLaunch:
duetMonitor:homekitSceneDidChange:
duetMonitor:homekitAccessoryDidChange:
duetMonitor:homekitAppViewDidChange:
keypathForEvent:
predicateForEvent:withKeyPath:
stopMonitoringEvent:withPredicate:forClient:
registerClient:forEvent:withPredicate:
registeredEvents
registerWithDuetForEvent:andPredicate:
userContext
notifyClient:ofEvent:withValue:
registrationWithIdentifier:contextualPredicate:dismissalPolicy:deviceSet:mustWake:callback:
eventTypeFromNSNumber:
removeObjectsForKeys:
keyPathForAudioOutputDataDictionary
keyPathForBluetoothDataDictionary
keyPathForFirstWakeupStatus
keyPathForAppDataDictionary
keyPathForHomeKitAppViewDataDictionary
keyPathForHomeKitAccessoryDataDictionary
keyPathForHomeKitSceneDataDictionary
predicateForAudioOutputStatus:
predicateForBluetoothConnectionStatus:
predicateForFirstWakeOfDay
predicateForChangeAtKeyPath:
audioOutputRoutStream
bluetoothIsConnectedStream
userIsFirstBacklightOnAfterWakeup
microLocationVisitStream
appInFocusStream
homeKitAppViewStream
homeKitAccessoryControlStream
homeKitSceneStream
fetchAllEventsForEventType:startDate:endDate:handler:
distantPast
earlierDate:
streamForEvent:
sortDescriptorWithKey:ascending:
predicateForEventsWithStartInDateRangeFrom:to:
eventQueryWithPredicate:eventStreams:offset:limit:sortDescriptors:resultHandler:
knowledgeStore
executeQuery:responseQueue:
notifyClient:ofForegroundAppWithValue:
notifyClient:ofHomeKitScene:
notifyClient:ofHomeKitAccessory:
notifyClient:ofHomeKitAppView:
appBundleIdKey
appLaunchReasonKey
sceneHomeUUID
sceneClientName
accessoryHomeUUID
accessoryClientName
viewHomeUUID
stopMonitoringEvents:forClient:
_registeredEvents
predicateForForegroundAppWithPredicateString:withList:
predicateWithFormat:
predicateForKeyPath:withPredicate:
predicateForForegroundAppWithWhiteList:
predicateForForegroundAppWithBlackList:
initWithTilesManagerResult:score:distanceToCurrentLocation:andAppProxy:
result
setResult:
distanceToCurrentLocation
setDistanceToCurrentLocation:
appProxy
setAppProxy:
_result
_appProxy
_distanceToCurrentLocation
setTilesManagerProxy:
handleNudge
setNudgeHandler:
nudgeHandler
registerForSuggestedActionNudgeOfType:withOptions:block:
setSpotlightPrefsChangedNotifyToken:
_registerForZeroKeywordDisabledNotification
_determineZeroKeywordEnabled
setZeroKeywordEnabled:
_determinePredictedApplicationExtensionEnabled
_updateAppSuggestionsAllowed
tilesManagerProxy
isAppSuggestionsAllowed
enableAppTilesDownload:
onUAUserActivityDidContinueToAppStoreNotification:
addObserver:selector:name:object:suspensionBehavior:
setStoreRequestor:
setCurrentSuggestedApplications:
setSuggestedApplicationClients:
setShouldUpdateRegionalRecommendationState:
setRecentlySuggestedAdamIds:
setDateStartedSuggestingAdamIds:
setMostRecentLocationRequestTime:
spotlightPrefsChangedNotifyToken
removeObserver:
unregisterForSuggestedActionNudgeOfType:
defaultHost
driver
cancelPlugInDiscovery:
setMostRecentSuggestLocation:
setMostRecentCachedLocation:
_updatePredictedApplicationExtensions:error:
continuouslyDiscoverPlugInsForAttributes:flags:found:
setDriver:
userElection
setApplicationPredictionExtensionEnabled:
applicationPredictionExtensionEnabled
isInstalledAppSuggestionsAllowed
suggestLocationApp
suggestBeaconAppWithBundleIdentifierSet:
mostRecentLocationRequestTime
currentSuggestedApplications
mostRecentCachedLocation
_suggestWithLocation:
shouldUpdateRegionalRecommendationState
effectiveValueForSetting:
effectiveRestrictedBoolValueForSetting:
applicationProxyForItemID:
sortUsingDescriptors:
initWithLatitude:longitude:
distanceFromLocation:
isUninstalledAppSuggestionsAllowed
dateStartedSuggestingAdamIds
recentlySuggestedAdamIds
storeRequestor
_initWithTypeIdentifier:suggestedActionType:options:
localizedName
setTitle:
vendorName
iconDataForVariant:
initWithTitle:developer:adamId:bundleId:icon:installationState:location:distance:startDate:endDate:confidence:
identifierForAdamId:atLocation:
shouldSuggestActionWithIdentifier:
setWebpageURL:
setUserInfo:
actionWithIdentifier:wasSuggested:
becomeCurrent
suggestedApplicationClients
deviceIdentifierForVendor
appendFormat:
webpageURL
rangeOfString:options:
mostRecentSuggestLocation
mostRecentBundleIdentifier
anyObject
setMostRecentBundleIdentifier:
applicationProxyForIdentifier:
itemID
zeroKeywordEnabled
setIsInstalledAppSuggestionsAllowed:
setIsUninstalledAppSuggestionsAllowed:
title
onLocation:
beaconRegion:didTransitionToState:
onDaemonStatusDisplayOff
_appStoreBundleLocationProvider
_appStoreBundleLocationProviderClient
_appSuggestionsServiceLocationProvider
_appSuggestionsServiceLocationProviderClient
_suggestedActionDatabse
_btleFenceClient
_daemonStatusClient
_isInstalledAppSuggestionsAllowed
_isUninstalledAppSuggestionsAllowed
_shouldUpdateRegionalRecommendationState
_zeroKeywordEnabled
_applicationPredictionExtensionEnabled
_nudgeHandler
_mostRecentBundleIdentifier
_tilesManagerProxy
_mostRecentSuggestLocation
_recentlySuggestedAdamIds
_dateStartedSuggestingAdamIds
_storeRequestor
_mostRecentCachedLocation
_currentSuggestedApplications
_suggestedApplicationClients
_spotlightPrefsChangedNotifyToken
_driver
_mostRecentLocationRequestTime
applicationType
objectEnumerator
addMeasurements:
addRecordingEvents:
addModels:
addDuetEvents:
addRtLOITypes:
addConfigurations:
measurementsCount
clearMeasurements
measurementsAtIndex:
recordingEventsCount
clearRecordingEvents
recordingEventsAtIndex:
modelsCount
clearModels
modelsAtIndex:
duetEventsCount
clearDuetEvents
duetEventsAtIndex:
rtLOITypesCount
clearRtLOITypes
rtLOITypesAtIndex:
configurationsCount
clearConfigurations
configurationsAtIndex:
measurementsType
recordingEventsType
modelsType
duetEventsType
rtLOITypesType
configurationsType
setHasSubmissionTimestamp:
hasSubmissionTimestamp
hasDeviceKey
submissionTimestamp
deviceKey
measurements
recordingEvents
models
duetEvents
rtLOITypes
configurations
_submissionTimestamp
_configurations
_deviceKey
_duetEvents
_measurements
_models
_recordingEvents
_rtLOITypes
updateIDSStatus
handleOdometerCyclingSubscribe:service:account:fromID:context:
setProtobufAction:forIncomingRequestsOfType:
handleOdometerCyclingUnsubscribe:service:account:fromID:context:
handleOdometerCyclingData:service:account:fromID:context:
handleOdometerElevationSubscribe:service:account:fromID:context:
handleOdometerElevationUnsubscribe:service:account:fromID:context:
handleOdometerElevationData:service:account:fromID:context:
handleStrideCalDataSubscribe:service:account:fromID:context:
handleStrideCalDataUnsubscribe:service:account:fromID:context:
handleOdometerCoarseElevationSubscribe:service:account:fromID:context:
handleOdometerCoarseElevationUnsubscribe:service:account:fromID:context:
handleOdometerCoarseElevationData:service:account:fromID:context:
handleMotionCalsUpdate:service:account:fromID:context:
handleMotionStateUpdate:service:account:fromID:context:
handleCompanionPingData:service:account:fromID:context:
setIsConnected:
idsService
setPairedDevice:
setPairedDeviceLastSeenTimestamp:
connectionUpdateHandler
updateIDSStatusAndNotify
initWithProtobufData:type:isResponse:
sendProtobuf:toDestinations:priority:options:identifier:error:
computeMD5:
receivedMessageHandler
outgoingResponseIdentifier
receivedMessage:data:identifierString:
stringWithCapacity:
setIdsService:
_isConnected
_pairedDevice
_idsService
_receivedMessageHandler
_connectionUpdateHandler
_pairedDeviceLastSeenTimestamp
fTimestamp
_internalLogItem
setGsmNeighbors:
setScdmaNeighbors:
setCdmaNeighbors:
setLteNeighbors:
gsmNeighborsCount
clearGsmNeighbors
gsmNeighborsAtIndex:
scdmaNeighborsCount
clearScdmaNeighbors
scdmaNeighborsAtIndex:
cdmaNeighborsCount
clearCdmaNeighbors
cdmaNeighborsAtIndex:
lteNeighborsCount
clearLteNeighbors
lteNeighborsAtIndex:
gsmNeighborsType
scdmaNeighborsType
cdmaNeighborsType
lteNeighborsType
gsmNeighbors
scdmaNeighbors
cdmaNeighbors
lteNeighbors
_cdmaNeighbors
_gsmNeighbors
_lteNeighbors
_scdmaNeighbors
currentDevice
storeFrontIdentifier
modesCount
clearModes
modesAtIndex:
addModes:
setHasLocationId:
setMacs:count:
modes
setModes:count:
_modes
signData:
verifyData:matchesSignature:
initWithMacAddressAsUInt:secureRangingKeyID:
setRequiresSecureCoding:
initWithPeer:date:distanceMeters:accuracyMeters:initiator:shouldUnlock:
initWithObjects:
checkResourceIsReachableAndReturnError:
macAddress
secureRangingKeyID
numberWithLong:
dictionaryWithCapacity:
initWithFileDescriptor:closeOnDealloc:
initWithFileDescriptor:
null
backgroundLocationAssertionForPID:
acquireWithHandler:onQueue:
initWithBundleLocationProvider:inSilo:
setSeedLocations:atIndex:
setSeedLocationsAtIndex:
setSilo:
_seedLocationsAtIndex
setRepeatBehavior:
controller
setController:
_controller
inputStreamWithURL:
open
hasBytesAvailable
read:maxLength:
appendBytes:length:
close
computeWalkRunSigma:
updateEntryDistanceAndPace:
_lastEntry
_totalCalibratedDistance
_supportsFirstStepTime
fetchHasConnectedDevicesWithReply:
setHarvests:
clearHarvests
harvestsAtIndex:
harvestsType
harvests
_harvests
initWithInt:
initWithDouble:
initWithInteger:
currentPace
currentCadence
averageActivePace
maxPedometerEntries
initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:
isOdometerDistance
isOdometerPace
numberOfPushes
fNumberOfSteps
fFloorsAscended
fFloorsDescended
fCurrentPace
fCurrentCadence
fActiveTime
fIsOdometerDistance
fIsOdometerPace
fNumberOfPushes
fWorkoutType
initWithEventDate:type:
eventStringFromType:
fDate
fType
setHasAuthMask:
hasAuthMask
setHasClearClient:
hasClearClient
setHasNotification:
operationType
_authMask
_clientKey
_notification
_operationType
_clearClient
syncgetHasCapabilitiesOfBundle:
syncgetHasCapability:
setMobileGestaltAnswersCache:
setCapabilityChangeClients:
updateSupervised
updateICloudManagedAppleID
updateITunesManagedAppleID
updateInstalledEducationProfile
setSupervised:
setICloudManagedAppleID:
setITunesManagedAppleID:
setInstalledEducationProfile:
isSupervised
aa_isPrimaryAccount
aa_isManagedAppleID
accountsWithAccountType:completion:
accountTypeWithIdentifier:completion:
installedProfileIdentifiers
installedProfileWithIdentifier:
payloads
defaultStore
activeAccount
isManagedAppleID
hasCapability:
mobileGestaltAnswersCache
supervised
installedEducationProfile
iCloudManagedAppleID
iTunesManagedAppleID
mobileGestaltHasCapability:
capabilityChangeClients
onDarwinNotification:data:
_darwinClient
_supervised
_iCloudManagedAppleID
_iTunesManagedAppleID
_installedEducationProfile
_mobileGestaltAnswersCache
_capabilityChangeClients
setWtwLocations:
clearWtwLocations
wtwLocationAtIndex:
wtwLocationType
_wtwLocations
fetchLastSignificantLocationDistanceAndLatencyWithReply:
preloadBuildingTilesNearCoordinate:radius:completionHandler:
hasLoadedBuildingTilesNearCoordinate:radius:
findBuildingsWithin:of:buildingHandler:completionHandler:
sections
setGender:
setHeightM:
setWeightKG:
setVo2max:
setHrmin:
setHrmax:
setHronset:
setPal:
setCalTrackHandler:
originDeviceToGpsSource:
updateGpsLocationBuffer:gpsSource:
updateGpsOdometerBuffer:
updatePedometerBuffer:
feedLocationData:
feedGpsOdometerData:
feedPedometerData:
fLocationState
fTrackFinder
fSource
getBytes:length:
fStrideCalDb
authorizeLocationInReplay
checkLocationAuthorization
onStepCountNotification:data:
onMotionStateNotification:data:
onOdometerNotification:data:
bundlePath
fetchRoutineModeFromLocation:withReply:
fetchLocationOfInterestAtCurrentLocationWithHandler:
fetchLocationsOfInterestWithinDistance:ofLocation:withReply:
fetchLocationsOfInterestOfType:withReply:
fetchAllLocationsOfInterestWithReply:
fetchNextPredictedLocationsOfInterestFromLocation:startDate:timeInterval:withReply:
fetchPredictedLocationsOfInterestOnDate:withReply:
startLeechingVisitsForClient:
stopLeechingVisitsForClient:
fetchLocationOfInterestAtLocation:withHandler:
startMonitoringScenarioTriggerOfType:forClient:
stopMonitoringScenarioTriggerOfType:forClient:
onWakeRoutinedTimer
setLastUpdateVisitMonitorWakeTimerDate:
routineManager
stopMonitoringVisits
setVisitClients:
stopLeechingVisits
setLeechClients:
scenarioTriggerClients
unsignedIntegerValue
stopMonitoringScenarioTriggerOfType:
setScenarioTriggerClients:
setPredictedApplications:
visitClients
startMonitoringVisitsWithHandler:
setWifiPowerEnabled:
checkDiminishedMode
checkVisitMonitorWakeTimerEnabled
leechClients
startLeechingVisitsWithHandler:
startVisitMonitorWakeTimer
stopVisitMonitorWakeTimer
visitMonitorWakeTimerEnabled
lastUpdateVisitMonitorWakeTimerDate
timeIntervalSinceDate:
updateVisitMonitorWakeTimer
fetchRoutineModeFromLocation:withHandler:
fetchLocationsOfInterestWithinDistance:ofLocation:withHandler:
fetchLocationsOfInterestOfType:withHandler:
fetchAllLocationsOfInterestWithHandler:
fetchNextPredictedLocationsOfInterestFromLocation:startDate:timeInterval:withHandler:
fetchPredictedLocationsOfInterestOnDate:withHandler:
setLastLocation:
lastLocation
level
updating
sendLocations
checkAuthorization
flush
setAuthorized:
wifiPowerEnabled
startUpdatingLocation
stopUpdatingLocation
fetchPredictedApplicationsAtLocation:reply:
startUpdatingPredictedApplications
stopUpdatingPredictedApplications
didUpdateLocations:
didUpdatePredictedApplications:
setRemoteObjectInterface:
setUpdating:
remoteObjectProxyWithErrorHandler:
authorized
diminishedMode
startWakeRoutinedTimer
stopWakeRoutinedTimer
launchDaemon:
setDiminishedMode:
setVisitMonitorWakeTimerEnabled:
startMonitoringScenarioTriggerOfType:withHandler:
updatingPredictedApplications
suggestedActionManager
startMonitoringPredictedApplicationsForClient:
setUpdatingPredictedApplications:
_sendPredictedApplications
stopMonitoringPredictedApplicationsForClient:
predictedApplications
onPredictedApplications:
onVisitMonitorWakeTimerExpiry
onLocationNotification:data:
onWifiServiceNotification:data:
setRoutineManager:
setSuggestedActionManager:
_wakeRoutinedTimer
_serviceLocationProvider
_serviceLocationClient
_filteredLocationClient
_wifiServiceClient
_visitMonitorWakeTimer
_updating
_updatingPredictedApplications
_authorized
_diminishedMode
_visitMonitorWakeTimerEnabled
_wifiPowerEnabled
_lastLocation
_predictedApplications
_routineManager
_visitClients
_leechClients
_scenarioTriggerClients
_lastUpdateVisitMonitorWakeTimerDate
_suggestedActionManager
fenceMonitor
initWithFenceMonitor:
setFenceMonitor:
_fenceMonitor
isLocationShiftRequiredForCoordinate:
trigger
dataWithBytesNoCopy:length:freeWhenDone:
initWithURL:
sendSynchronousRequest:returningResponse:error:
setHasPressure:
setTemperature:
setHasTemperature:
hasTemperature
temperature
_temperature
setMotionAlarmClients:
setLastKnownMotionState:
setResendTimer:
resendTimer
sendMotionAlarmRequest
setRevertToUnknownTimer:
revertToUnknownTimer
motionAlarmClients
evaluateMotionAlarmState
lastKnownMotionState
delayRevertToUnknownTimer
_motionAlarmClients
_lastKnownMotionState
_resendTimer
_revertToUnknownTimer
setHasHidden:
hasHidden
hasBundleId
hidden
_hidden
_mac
syncgetCompanionOnlyNoGPSRun
updateSession:
clearStepArray
checkForRunningThreshold
onStepNotification:data:
fHasRun
fInSession
begin
kValue
initWithBegin:end:state:kValue:
lowerQuartile
center
upperQuartile
setKValue:
setBegin:
setEnd:
_kValue
_begin
_end
defaultBins
stringByAppendingFormat:
newlineCharacterSet
componentsSeparatedByCharactersInSet:
binIndexForSpeed:
isBin:sameActivityAsBin:
subarrayWithRange:
isCalibrationAvailableInBinsFromIndex:withLength:
updateNativeBin:withAlpha:rawKValue:
updateAdjacentBin:withAlpha:rawKValue:nativeBin:
setBins:
initialize
binIntervalForSpeed:
initInTestMode
isWalkCalibrationAvailable
isRunCalibrationAvailable
copyBins
resetBins
_totalStrideCalibrationBins
_bins
_persistentStore
_testMode
setHasProviderIdentifier:
hasProviderIdentifier
triggerType
setHasTriggerType:
hasTriggerType
triggerTypeAsString:
StringAsTriggerType:
setHasTriggerTimestamp:
hasTriggerTimestamp
setHasTriggerSubType:
hasTriggerSubType
muid
providerIdentifier
triggerTimestamp
triggerSubType
_muid
_triggerTimestamp
_providerIdentifier
_triggerSubType
_triggerType
simplifiedLength:threshold:type:
initWithMicroLocationHarvester:
_microLocationHarvester
dateByAddingComponents:toDate:options:
resetControlPlaneStatus
syncgetControlPlaneStatusReport:
fetchDataAvailabilityWithReply:
postDataAvailability
initWithSessionId:type:
workoutName:
natalieDataSessionFromWorkoutType:
workoutTypeFromNatalieDataSession:
initWithSessionId:location:poolLength:
swimLocationName:
poolLength
isAvailable
fLocation
fPoolLength
takeForegroundAssertionForClient:withDesiredAccuracy:
releaseForegroundAssertionForClient:
remoteDeviceMotionUpdate:atTime:
registerClientForRemoteMotionAlarm:
unregisterClientForRemoteMotionAlarm:
setUUID:
setLocalizationResults:
addLocalizationResults:
localizationResultsCount
clearLocalizationResults
localizationResultsAtIndex:
localizationResultsType
hasUUID
setStartTimestamp:
setHasStartTimestamp:
hasStartTimestamp
setEndTimestamp:
setHasEndTimestamp:
hasEndTimestamp
hasValue
uUID
startTimestamp
endTimestamp
localizationResults
_endTimestamp
_startTimestamp
_localizationResults
_uUID
setYear:
setHour:
setSecond:
timeZoneForSecondsFromGMT:
setTimeZone:
hasSid
hasNid
hasBsid
setHasSid:
setHasNid:
setHasBsid:
setSyncId:
modernLoader
registerTileDecoder:
openForClient:
closeForClient:
writeUint32:forTag:
accuracy
setAccuracy:
hasLocationType
setLocationType:
hasScore
hasReach
reach
setReach:
hasInfoMask
infoMask
setInfoMask:
setHasLocationType:
setHasScore:
setHasReach:
setHasInfoMask:
_accuracy
_infoMask
_locationType
_reach
setCellTowers:
setWirelessAPs:
setCdmaCellTowers:
setCdmaEvdoTowers:
setLteCellTowers:
setScdmaCellTowers:
addCellTower:
addWirelessAP:
addCdmaCellTower:
addCdmaEvdoTower:
addLteCellTower:
addScdmaCellTower:
cellTowersCount
clearCellTowers
cellTowerAtIndex:
wirelessAPsCount
clearWirelessAPs
wirelessAPAtIndex:
hasNumberOfSurroundingCells
numberOfSurroundingCells
setNumberOfSurroundingCells:
hasNumberOfSurroundingWifis
numberOfSurroundingWifis
setNumberOfSurroundingWifis:
cdmaCellTowersCount
clearCdmaCellTowers
cdmaCellTowerAtIndex:
cdmaEvdoTowersCount
clearCdmaEvdoTowers
cdmaEvdoTowerAtIndex:
hasNumberOfSurroundingCdmaCells
numberOfSurroundingCdmaCells
setNumberOfSurroundingCdmaCells:
hasNumberOfSurroundingCdmaEvdoCells
numberOfSurroundingCdmaEvdoCells
setNumberOfSurroundingCdmaEvdoCells:
lteCellTowersCount
clearLteCellTowers
lteCellTowerAtIndex:
hasNumberOfSurroundingLteCells
numberOfSurroundingLteCells
setNumberOfSurroundingLteCells:
scdmaCellTowersCount
clearScdmaCellTowers
scdmaCellTowerAtIndex:
hasNumberOfSurroundingScdmaCells
numberOfSurroundingScdmaCells
setNumberOfSurroundingScdmaCells:
setHasNumberOfSurroundingCells:
setHasNumberOfSurroundingWifis:
setHasNumberOfSurroundingCdmaCells:
setHasNumberOfSurroundingCdmaEvdoCells:
setHasNumberOfSurroundingLteCells:
setHasNumberOfSurroundingScdmaCells:
cellTowers
wirelessAPs
cdmaCellTowers
cdmaEvdoTowers
lteCellTowers
scdmaCellTowers
_cdmaCellTowers
_cdmaEvdoTowers
_cellTowers
_lteCellTowers
_numberOfSurroundingCdmaCells
_numberOfSurroundingCdmaEvdoCells
_numberOfSurroundingCells
_numberOfSurroundingLteCells
_numberOfSurroundingScdmaCells
_numberOfSurroundingWifis
_scdmaCellTowers
_wirelessAPs
hasCellID
cellID
setCellID:
hasTacID
tacID
setTacID:
hasUarfcn
uarfcn
hasPid
setHasCellID:
setHasTacID:
setHasUarfcn:
setHasPid:
_cellID
_pid
_tacID
_uarfcn
writeInt64:forTag:
writeBOOL:forTag:
hasNeedCellsTowers
needCellsTowers
setNeedCellsTowers:
hasTechnology
technology
setTechnology:
hasWifiGranularity
wifiGranularity
setWifiGranularity:
hasRadius
radius
setRadius:
setHasNeedCellsTowers:
setHasTechnology:
setHasWifiGranularity:
setHasRadius:
_radius
_technology
_wifiGranularity
_needCellsTowers
requestCurrentMicroLocationForClient:
initWithMicroLocationNotifier:
_microLocationNotifier
eventWithStream:startDate:endDate:identifierStringValue:metadata:
saveObjects:responseQueue:withCompletion:
deleteAllEventsInEventStream:error:
setMacID:
macID
_macID
setTag:
processingCellTowers
setProcessingCellTowers:
processingWirelessAPs
setProcessingWirelessAPs:
finished
setFinished:
setHasBandInfo:
hasBandInfo
setCellLatitude:
setHasCellLatitude:
hasCellLatitude
setCellLongitude:
setHasCellLongitude:
hasCellLongitude
bandInfo
cellLatitude
cellLongitude
_cellLatitude
_cellLongitude
_bandInfo
_tac
setLocationId:
setMacModes:
addMacModes:
macModesCount
clearMacModes
macModesAtIndex:
hasLocationId
setHasLatitude:
hasLatitude
setHasLongitude:
hasLongitude
locationId
macModes
_locationId
_macModes
initWithTimestamp:
initWithStartDate:recordId:session:mets:natalies:basalNatalies:timestamp:sourceId:
sessionName:
mets
natalies
basalNatalies
maxNatalieEntries
fSession
fMets
fNatalies
fBasalNatalies
startMonitoringEmergencyState:
stopMonitoringEmergencyState:
syncgetIsHELOEnabled
syncgetIsHELOEnabledFromCT
emergencyStateChange:
peerRangeNotifier
newRequest:
cancelRequest:
requestTileDownloadByType:path:details:
decimalDigitCharacterSet
invertedSet
rangeOfCharacterFromSet:
substringToIndex:
setRawCoordinateLatitude:
setHasRawCoordinateLatitude:
hasRawCoordinateLatitude
setRawCoordinateLongitude:
setHasRawCoordinateLongitude:
hasRawCoordinateLongitude
rawCoordinateLatitude
rawCoordinateLongitude
_rawCoordinateLatitude
_rawCoordinateLongitude
setCmAttitude:
setCmPedometer:
setWifiScan:
hasCmAttitude
hasCmPedometer
hasLocation
hasPressure
hasWifiScan
_cmAttitude
_cmPedometer
_wifiScan
dataWithJSONObject:options:error:
raise:format:
setOdometerTarget:
setInvalid:
invalid
initWithDistance:handler:
setMotionStateProxy:
motionStateProxy
setPrevLoc:
updateStatusBarLabel
prevLoc
isEqualToDate:
feedLocation:
handleMotionStateNotification:
setStatusBarWithLabel:
clearStatusBarColorAndText
_showActivityVehicular
_showActivityStationary
_visualIndicatorActive
_speedVehicular
_motionVehicular
_motionStatic
_motionStateProxy
_prevLoc
isEqualToDictionary:
addAlarm:
removeAlarm:
odometerTarget
sortUsingComparator:
reschedule
lastOdometer
reset
handleOdometer:
firstAlarm
fire:withError:
setLastOdometer:
handleLocationData:
handleOdometerData:
currentlyScheduled
setCurrentlyScheduled:
fAlarms
fGpsClient
logDailyStats
queryHKForSources
queryWatchSteps
quantity
queryHKForWatchSamples:queryHandler:
queryWatchStepMinutes
queryPhoneStepMinutes
queryHKForStatsCollection:quantityType:queryHandler:
queryWatchDistanceMinutes
queryPhoneDistanceMinutes
collectStatistics
collectDailyStepsBreakdownStats
HKStatisticsCollectionToVector:unitType:
meterUnit
collectPhoneGizmoErrorStats:watchDistanceIntervals:phoneStepIntervals:phoneDistanceIntervals:
collectGradientStats:watchDistanceIntervals:phoneDistanceIntervals:
metadata
isRunning:
computePercentage:denominator:
computePercentError:otherValue:
_encryptedDataAvailable
_dataProtectionClient
_queryState
_healthStore
_queryTimer
_elevationDb
_queryStartDate
_queryEndDate
_phoneSources
_watchSources
_workouts
_watchSteps
_watchStepsMinuteIntervals
_phoneStepsMinuteIntervals
_watchDistanceMinuteIntervals
_phoneDistanceMinuteIntervals
_dailyStats
initWithStart:stop:distanceGps:distanceRawPed:steps:gpsSource:
setStart:
setStop:
setDistanceGps:
setDistanceRawPed:
setGpsSource:
_start
_stop
_gpsSource
_distanceGps
_distanceRawPed
initWithOdometerEntry:
dist
gpsOdomEntry
initWithStepEntry:
lastStepTime
deltaActiveTime
deltaSteps
deltaDist
speedInstant
speedCurrent
stepCadenceCurrent
pedEntry
_closeCurrentTrack
gpsLocationBuffer
setTimeEndGpsLocationSegment:
setTimeStartGpsLocationSegment:
_closeTrackCheckGpsLocation
_filterGpsLocationBuffer
_updateGpsLocationBufferFiltered:
gpsLocationBufferFiltered
_closeTrackCheckGpsLocationFiltered
gpsOdometerBuffer
_closeTrackCheckGpsOdometer
pedometerBuffer
_closeTrackCheckPedometer
_extremaRemovedMean:
initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:course:speed:timestamp:
setTimeStart:
setTimeEnd:
reverseObjectEnumerator
simplifiedLength:threshold:
timeStart
timeEnd
_removeAdditionalInconsistentSpeedPedometerEntries
_calculateTimeStartEndDistanceGpsPed
timeStartGpsLocationSegment
timeEndGpsLocationSegment
_clearBuffers
calTrackHandler
setGpsLocationBuffer:
setGpsLocationBufferFiltered:
setGpsOdometerBuffer:
setPedometerBuffer:
_calTrackHandler
_gpsLocationBuffer
_gpsLocationBufferFiltered
_gpsOdometerBuffer
_pedometerBuffer
_timeStart
_timeEnd
_timeStartGpsLocationSegment
_timeEndGpsLocationSegment
setHasMets:
hasMets
setBasalMETs:
setHasBasalMETs:
hasBasalMETs
setBasalNatalies:
setHasBasalNatalies:
hasBasalNatalies
setHasDuration:
hasDuration
basalMETs
setNatalies:
_basalNatalies
_natalies
_basalMETs
setSslHostname:
port
createHostValue
httpRequestHeaders
setHttpRequestHeader:forKey:
startWithConnectionProperties:
protectionSpace
authenticationMethod
serverTrust
sender
credentialForTrust:
connectionShouldUseCredentialStorage:
connection:canAuthenticateAgainstProtectionSpace:
connection:didReceiveAuthenticationChallenge:
connection:didCancelAuthenticationChallenge:
sslHostname
_sslHostname
initWithURL:andDelegate:validatingAgainstHostname:
setFConnectionSession:
fConnectionSession
newCFMutableURLRequestWithURL:
newConnectionWithCFURLRequest:delegate:
initWithURL:andDelegate:usingConnectionSession:
initWithURL:andDelegate:
newCFURLConnectionWithRequest:delegate:
removeDelegateForConnection:
initWithURL:statusCode:HTTPVersion:headerFields:
connection:didReceiveResponse:
connection:didReceiveData:
connectionDidFinishLoading:
connection:didFailWithError:
connection:willSendRequestForAuthenticationChallenge:
_createAuthenticationChallengeForCFAuthChallenge:sender:
_web_initWithDomain:code:failingURL:
_cfurlcredential
useCredential:forAuthenticationChallenge:
continueWithoutCredentialForAuthenticationChallenge:
cancelAuthenticationChallenge:
performDefaultHandlingForAuthenticationChallenge:
rejectProtectionSpaceAndContinueWithChallenge:
initWithCFRequest:delegate:usingSession:
connectionDidReceiveResponse:
connectionDidReceiveData:
connectionDidFinishLoading
connectionDidFailWithError:
connectionDidTerminate
connectionDidReceiveAuthenticationChallenge:authCompletionBlock:
_cfConnection
_connectionSession
_challenge
_authCb
_url
initWithKeyOptions:valueOptions:capacity:
createConnectionSessionWithPurgeTimeout:
delegateForConnection:
_connectionDelegates
setHasOdometer:
setDeltaDistance:
setHasDeltaDistance:
hasDeltaDistance
setDeltaDistanceAccuracy:
setHasDeltaDistanceAccuracy:
hasDeltaDistanceAccuracy
deltaDistance
deltaDistanceAccuracy
_deltaDistance
_deltaDistanceAccuracy
client
initWithDaemonClient:
setClient:
scannerWithString:
scanHexInt:
fetchMostRecentConnectionWithReply:
activityAlarmAvailable
initWithTrigger:duration:onQueue:withHandler:
isEqualToArray:
setModelUUID:
setModelProtobuf:
hasModelUUID
hasModelProtobuf
setHasAnonymizedMeasurements:
setHasHasAnonymizedMeasurements:
hasHasAnonymizedMeasurements
modelType
setModelType:
setHasModelType:
hasModelType
modelTypeAsString:
StringAsModelType:
modelUUID
modelProtobuf
hasAnonymizedMeasurements
_modelProtobuf
_modelType
_modelUUID
_hasAnonymizedMeasurements
setHasArfcn:
hasArfcn
setHasPsc:
hasPsc
setHasTransmit:
hasTransmit
rssi
arfcn
transmit
_arfcn
_lac
_psc
_rssi
_transmit
setSet:
initWithTimeInterval:sinceDate:
totalEnergyBurned
calorieUnit
applicationIsInstalled:
removedSystemApplications
bundleURL
setAppLocations:
clearAppLocations
appLocationAtIndex:
appLocationType
_appLocations
routineMode
setHasRoutineMode:
hasRoutineMode
loiType
setHasLoiType:
hasLoiType
appState
_appState
_loiType
_routineMode
stringByReplacingOccurrencesOfString:withString:
isAuthorizedForLocation
onMotionStateMediatorNotification:data:
serializeMeta:toData:
setData:
deserializeMeta:fromData:
writeMeta:toHandle:
readMeta:fromHandle:
fBuffer
setHasPilotPhase:
hasPilotPhase
pilotPhase
_pilotPhase
setHasRssi:
hasRssi
fMode
requestTileDownloadForLat:lon:details:
hasIdentifier
setProbability:
setHasProbability:
hasProbability
probability
_probability
modeAsString:
StringAsMode:
avgIntensity
setAvgIntensity:
_avgIntensity
isSupportedForType:
fileDescriptor
ageOutElevationArray
feedElevationData:
fElevationWindow
queryBundleIdentifiersWithEnteredRegionsWithReply:
setMeasurementProtobuf:
setScanCFTimestamp:
setHasScanCFTimestamp:
hasScanCFTimestamp
setScanMCTimestamp:
setHasScanMCTimestamp:
hasScanMCTimestamp
hasMeasurementProtobuf
flags
setFlags:
setHasFlags:
hasFlags
flagsAsString:
StringAsFlags:
scanCFTimestamp
scanMCTimestamp
measurementProtobuf
_scanCFTimestamp
_scanMCTimestamp
_flags
_measurementProtobuf
setVenues:
addVenues:
venuesCount
clearVenues
venuesAtIndex:
venues
_venues
decodeIntForKey:
initWithOnBodyResult:confidence:timestamp:
encodeInt:forKey:
fResult
fConfidence
hasMac
setHasMode:
hasMode
setTrigger:
activityAlarmInfo
initWithTrigger:duration:onQueue:forClient:withHandler:
initWithTrigger:duration:onRunLoop:withHandler:
isValid
fire
executable
setExecutable:
fConcentrator
fIsValid
fRunLoop
fQueue
fHandler
_trigger
_executable
string
_stopLoggingOnQueue
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
initWithFormat:
createFileAtPath:contents:attributes:
fileHandleForWritingAtPath:
seekToEndOfFile
flushBufferToFile
fHour
fFile
fFilename
fBufferIndex
_lacID
writeDouble:forTag:
writeFloat:forTag:
hasMotionContext
motionContext
setMotionContext:
setHasMotionContext:
_motionContext
value
_std
_value
sourceRevision
_isPreferredSource
filteredArrayUsingPredicate:
isWheelchairDataSubmissionAllowed
timer
shouldFire
reflectNextFireTime:fireInterval:
setTimer:
initWithDispatchSilo:
initInSilo:withScheduler:
setName:
setUnderlyingQueue:
initWithUnderlyingQueue:
initMain
operationQueue
_queue
_operationQueue
setPassLocations:
clearPassLocations
passLocationAtIndex:
passLocationType
hasSignature
signature
_passLocations
_signature
hasSuffixInsensitive:
numberOfArguments
methodReturnLength
getArgumentTypeAtIndex:
initWithSelector:andMethodSignature:
numArguments
replyBlockIndex
returnAddressIndex
returnValueSize
_sel
_numArguments
_replyBlockIndex
_returnAddressIndex
_returnValueSize
_sig
_str
signatureWithObjCTypes:
initWithProtocol:base:
appendString:
getInfoForSelector:
_selectors
_protocol
initWithDelegateInterface:proxiedInterface:delegateObject:delegateSilo:andUninitializedPeer:
initWithDelegateInterface:proxiedInterface:andUninitializedPeer:
selector
argumentsRetained
getArgument:atIndex:
setTarget:
retainArguments
invoke
setArgument:atIndex:
delegateSilo
invokeWithTarget:
methodSignatureForSelector:
forwardInvocation:
delegateInterface
proxiedInterface
_peer
_asymStrongPeer
_last
_opaqueTag
_delegateSilo
_delegateInterface
_proxiedInterface
_inboundInterface
_outboundInterface
initTrackingService:
synCount
ackCount
_synCount
_ackCount
insertObject:atIndex:
rereadConfiguration
getKeyClass:andSilo:forServiceWithName:
isHydrated
getServiceWithName:
inboundInterface
outboundInterface
setSessionId:
workoutEventAsString:
StringAsWorkoutEvent:
workoutType
setWorkoutType:
setHasWorkoutType:
hasWorkoutType
workoutTypeAsString:
StringAsWorkoutType:
hasSessionId
_sessionId
_workoutType
setDestructor:
destructor
_data
_destructor
_client
_notifier
cl_json_serializeValue:
cl_json_serializeKey
initWithAge:gender:height:weight:condition:
gender
genderString:
height
weight
condition
initWithAge:gender:height:weight:
fAge
fGender
fHeight
fWeight
fCondition
setPolygon:
hasName
index
setIndex:
polygon
name
_name
_polygon
setDictionary:
cachePopulationReplyBlocks
setCachePopulationReplyBlocks:
populated
setPopulated:
_populated
_cachePopulationReplyBlocks
powerSource
setPowerSource:
setHasPowerSource:
hasPowerSource
powerSourceAsString:
StringAsPowerSource:
fitnessTrackingEnabled
setFitnessTrackingEnabled:
_powerSource
_fitnessTrackingEnabled
setAltitude:andPressure:
initWithAltitude:andPressure:
fAltitude
fPressure
initWithAltitude:andTimestamp:atBaseAltitude:
relativeAltitude
_internal
decodeInt64ForKey:
decodeInt32ForKey:
decodeBoolForKey:
encodeInt64:forKey:
encodeInt32:forKey:
encodeBool:forKey:
initWithDataType:
setIdentifier:
dataIdentifier
setDataIdentifier:
offset
setOffset:
dataSize
setDataSize:
dataType
setDataType:
movement
setMovement:
_movement
_offset
_dataSize
_dataType
_identifier
_dataIdentifier
metaIdentifier
setMetaIdentifier:
_metaIdentifier
duration
setDuration:
_duration
rate
setRate:
_rate
setHasAccuracy:
hasAccuracy
setGpsAltitude:
setHasGpsAltitude:
hasGpsAltitude
setRawSpeed:
setHasRawSpeed:
hasRawSpeed
setGpsSpeedAccuracy:
setHasGpsSpeedAccuracy:
hasGpsSpeedAccuracy
setTimestampGps:
setHasTimestampGps:
hasTimestampGps
quality
setQuality:
setHasQuality:
hasQuality
qualityAsString:
StringAsQuality:
gpsAltitude
rawSpeed
gpsSpeedAccuracy
timestampGps
_timestampGps
_gpsAltitude
_gpsSpeedAccuracy
_quality
_rawSpeed
smoothLocations:useType:
exportedInterface
setWithObjects:
setClasses:forSelector:argumentIndex:ofReply:
didSmoothLocations:ofType:
queryUsingRecord:withReply:
clearCalibrations
syncget_prepareSessionEndForSessionType:
addClient:prepareSessionEndForSessionType:
removeClient:prepareSessionEndForSessionType:
multiple instances created - last instance %p
Assert Failed, %s, %d
locationd assert: %s, %d
Could not create MIG background server dispatch source
Could not create MIG simulation server dispatch source
could not create MIG SPI server run loop source
OBSERVER: TIMEOUT: %s => %s RunLoop is really busy time(%.8lf) tdiff(%.8lf)
Can't read mach_timebase_info = %d
sTimebaseInfo.denom %d sTimebaseInfo.numer %d
locationd was started after an unclean shutdown
OBSERVER: ProfileObserver = %d
starting idle shutdown timer of %d seconds
daemon shutting down
killed by %d
linger requested - not shutting down
no more clients, %d second(s) to auto-shutdown
Obsolete data has already been deleted; not deleting again
Deleting obsolete data
Obsolete data deleted in %.2f seconds
no LaunchEvents found
{"msg":"ensure service is running for xpc activity", "service":"%{public}@", "identifier":"%{public}@"}
no xpc activities registered
Deleting %s if present
Deleting obsolete wifi subdirectory
Deleting %s
Could not delete file %s
locationd does not take any command-line arguments. Use CFPreferences instead.
Setting location services to %d
Lock time debugging is enabled
CLDaemonCore stopped.
CLGyroCalibrationDatabaseLocalMultiRun insert x,%f,y,%f,z,%f,temperature,%f
fBuilding,%d
Wipe database during a build.
CLGyroCalibrationDatabaseLocalMultiRun startFactoryGYTT
CLGyroCalibrationDatabaseLocalMultiRun getLastMiniCalibration
SQL error: %s
fNextRound,%d,fIsUrgentCal,%d
nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d,fIsUrgentCal,%d
Ending UrgentCal run, double entering this round
Double entry: nonFactoryRoundCount,%d,kRoundLimit,%d,roundToRemove,%d,secondRoundNum,%d
ComputeFullBias: x,%f,y,%f,z,%f
ComputeIntercept: x,%f,y,%f,z,%f
Starting gyro calibration, user initiated, %d
Stopped gyro calibration
%s; client %d has deregistered, not notifying %s
%s; unknown client %d
SIZE MISMATCH: %s=%lu vs sz=%zu
%s; client %d does not exist
%s; notification %s not found
%s; already shutdown; not listing clients
%s; listing clients, num clients: %zu
%s; clients, id: %d, notification: %d
{"msg":"#Stream Stop timer fired", }
{"msg":"#Stream Motion alarm stop timer fired", }
{"msg":"#Stream Repeating motion state", }
{"msg":"#Stream Sending alive again after a delay", "last timestamp":"%{public}f"}
{"msg":"#Stream Sending alive again", }
{"msg":"#Stream Shut down location", }
{"msg":"#Stream #CLEEA change", "Needed":"%{public}hhd"}
{"msg":"#Stream Notifying remote client fitness session status", "in session":"%{public}hhd"}
{"msg":"#Stream Starting", "new granularity":"%{public, location:CLLocationStreamingGranularity}lld", "current granularity":"%{public, location:CLLocationStreamingGranularity}lld"}
{"msg":"#Stream Unexpected granularity", "granularity":"%{public, location:CLLocationStreamingGranularity}lld"}
{"msg":"#Stream Dropping location due to expiration", "timestamp":"%{public}f", "lifespan":"%{public}f"}
{"msg":"#Stream Unexpected notification", "notification":"%{public, location:CLLocationProvider_Type::Notification}lld"}
{"msg":"#Stream Motion state subscription", "is subscribed":"%{public}d"}
{"msg":"#Stream Start motion alarm", "currently active":"%{public}d"}
{"msg":"#Stream Stop motion alarm", "currently active":"%{public}d"}
{"msg":"#Stream Unexpected motion notification", "notification":"%{public}d"}
{"msg":"#Stream Missing data", "key":"%{public}s"}
{"msg":"#Stream Unrecognized message type", "type":"%{public}s"}
{"msg":"#warning #Stream Message failed to send", "type":"%{public}s", "error":"%{public}@", "fatal":"%{public}d"}
{"msg":"#Stream Message sent", "type":"%{public}s"}
{"msg":"#Stream Nearby status change", "is nearby":"%{public}d"}
{"msg":"#Stream Paired device has left us, stopping location", }
Removing outliers from database.
Insert into uncached database.
Client registered, caching database
No more clients, flushing cache to database
Database should be cached
CLGyroCalibrationDatabaseLocal insert x,%f,y,%f,z,%f,temperature,%f
Reading database into non-empty cache.
Attempting to write zero entries to Gyro database.
Could not prepare cached insert statement
{"msg":"This delegate cannot be invalidated", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"unentitled process", "event":"%{public}s", "calledFunction":"%{public}s", "missingEntitlement":"%{public}s", "clientName":"%{public}s"}
Must provide a bundle identifier or bundle path for which to set location authorization status
{"msg":"Invalid authorization", "auth":"%{public, location:CLClientAuthorizationStatus}lld"}
Oscar not available
Unable to send configuration to Oscar
Unexpected null pointer. machTimestamp,%p,oscarTimestamp,%p
#warning Couldn't create active location technologies array
Could not serialize tech data (%s, %ld)
Could not serialize tech data
{"msg":"private mode changed", "privateModeEnabled":"%{public}hhd"}
{"msg":"getPrivateMode called", "privateMode":"%{public}hhd"}
%s is setting location services to %s
{"msg":"macOS thing...", "event":"%{public}s", "condition":"%{private}s"}
%s is setting ear gesture service to %s
Pinged by external process %s
{"msg":"client getting effective client name", "clientName":"%{public}s", "bundleId":"%{public}s", "bundlePath":"%{public}s"}
Authorization status for %s is %s
{"msg":"getting auth status for service", "clientName":"%{public}s", "serviceMask":"%{public, location:CLClientServiceTypeMask}lld", "authorizationStatus":"%{public}s"}
{"msg":"triggered migration", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f", "clientName":"%{public}s"}
Daemon shutdown requested by %s
Daemon stats requested by %s
Log dump requested by %s: %s
%s requested to copy locationd's last %u logs to crash reporter
#warning Couldn't get fences for client key %s
MiG GetLocation rejected for '%s(%d)': no way to establish effective authorization
MiG GetLocation rejected for '%s': insufficient effective authorization
{"msg":"altered getLocation", "location":"%{private, location:CLClientLocation}.*P", "":"", "timestampGps":"%{private}f", "machTime":"%{private}f", "gotLocation":"%{private}hhd", "specialCoordinateLat":"%{private}f", "specialCoordinateLon":"%{private}f", "specialHorizontalAccuracy":"%{private}f"}
Setting default %s from %s
Getting default %s for %s
Attempted set autopause state but mocking not enabled
%s is setting the status bar icon enabled state for %d to %d
%s retrieved the status bar icon enabled state for %d
Received %d route hints from %s
#warning _CLDaemonGetActivityAlarms called without support for activity alarms
motion default,%s,set,%d,value,%s
Entitlement %s required to use %s
Simulation API called, but location simulation not supported
Got simulation request with invalid URL %s
Simulation API called, but cell simulation not supported
%lu keys in dictionary
Received invalid cell dictionary
Key is not an NSDate (%s)
Simulation API called, but WiFi simulation not supported
Received invalid MAC in scan results
Location simulation flush requested
CLISP bug: CLPrivacyManager still receiving messages after invalidation by the service vendor
Deferring previously scheduled vacuum
Scheduling vacuum
Vacuuming all
{"msg":"retrying activity", "encryptionClass":"%{public}@"}
{"msg":"failed to get activity", "encryptionClass":"%{public}@"}
{"msg":"failed to copy criteria", "encryptionClass":"%{public}@"}
{"msg":"resetting activity", "encryptionClass":"%{public}@"}
{"msg":"actually resetting", "encryptionClass":"%{public}@"}
{"msg":"onActivity", "identifier":"%{public}@", "state":"%{public}ld"}
Unexpected activity state. XPC bug?
{"msg":"activity deferred", "encryptionClass":"%{public}@"}
Unexpected encryption class '%@'
Dumping gyro calibration database
Cannot get GYTT property
data not long enough to get version properly
GYTT version (%u) does not match expected version (%u)
Adding entry to database: %f,%f,%f,%f;
NOT adding entry to database: %f,%f,%f,%f;
No gyroCal database file set in preferences. Using the default database.
Using gyroCal database file: %s.
 MOTIONREPLAY, getBias, %f, %f, %f, %f, %f, %f
MOTIONREPLAY, setBias, %f, %f, %f, %f, %f, %f, %d, %f, %f
Max magnitude difference (%f), Max inclination difference (%f), CompassBiasClusteringEnabled (%d), CompassBiasTemporalVarianceCheck (%d)
CompassBiasDB, begin lookups
Compass recently calibrated.  Using cached bias: (%f, %f, %f) with level: (%d).
search found: bestfit (%+.3f/%+.3f/%+.3f) bias (%+.3f/%+.3f/%+.3f) level (%d) using magneticField (%+.3f/%+.3f/%+.3f) acceleration (%+.3f/%+.3f/%+.3f) from %d entries. No: %llu. IsCluster: %d, 2D Check,%d
search failure: no result, saw bestfit (%+.3f/%+.3f/%+.3f) bias (%+.3f/%+.3f/%+.3f) level (%d) using magneticField (%+.3f/%+.3f/%+.3f) acceleration (%+.3f/%+.3f/%+.3f) from %d entries
search complete failure: no results from %d entries
CompassBiasDB, setBias has novel information, countdown to clustering: %d
CompassBiasDB, setBias is not novel.
Dumping compass database
CompassBiasDB, clusteralgo, started
CompassBiasDB, clusteralgo, finished, numbers of clusters found, %zu,  %d
search complete failure: too much variation in bias within a short time period, mean (%.3f) max (%.3f)
CompassBiasDB, lookup, rowid, %llu, bias, %.3f, %.3f, %.3f, mag, %.3f, %.3f, incl, %.3f, %.3f, magDiff, %.3f, inclDiff, %.3f, score, %.3f, betterMatch, %d
CompassBiasDB, lookupBiasIndividually
Best fit values (will update timestamp): %llu, %f, %f
Clearing obsolete bias entries
search comparison: db level (%d) db age (%.3f), db mag (%.3f) est mag (%.3f) delta mag (%.3f), db inc (%.3f) est inc (%.3f) delta inc (%.3f)
GyroBias received by DeviceMotion in daemon
SLV: Malformed visit, %s
#SLV key (%{private}s) not found after we were told it was there
SLV: Could not store client auth dates
SLV: Could not store significant location visit clients
SLV: Begin monitoring
SLV: Stop monitoring
SLV: About to drop old visits, count, %lu
SLV: Dropping old visit, %s
SLV: Done dropping old visits, count, %lu
SLV: Client, %s, in store with no interest.
SLV: Can't deliver visit to client that hasn't connected.
SLV: Client, %s, has no interest.
SLV: Client, %s, is interested
SLV: Cannot deliver a visit to a client without a key
SLV: Not delivering visit to client, %s, not interested
SLV: Client, %s, authDate, %s, not authorized for visit
SLV: Delivering visit to client, %s, authDate, %s, mangled, %s
SLV: Client, %s, is connecting.
SLV: Tried to start monitoring for a client that isn't connected
SLV: client, %s, start
SLV: Tried to stop monitoring for a client that isn't connected
SLV: client, %s, stop
#SLV programmer error.  Only call this function after setting client interest to PendingDelete
SLV: Sending out visit %s
SLV: Launching %s
SLV: Sending to clients, visit, %s
SLV: Can't produce a meaningful authorization date before arming is complete.  Returning nil.
SLV: Not checking for monitoring... not armed.
SLV: Checking if SLV should be active.
SLV: should be off
SLV: should be on
SLV: Received visit, %s, from routined
received unhandled notification, %d
SLV: Spoofing a Significant Visit: %s
could not setup geomagnetic file download from %s
geomagnetic provider received a stale location <%+.8f,%+.8f,%+.3f> @ %.3f
geomagnetic information calculated for <%+.8f,%+.8f,%+.3f> @ %.3f, declination %f inclination %f will expire @ %.3f
Type,%s,lat,%+.8f,long,%+.8f,alt,%+.3f,x,%.3f,y,%.3f,z,%.3f,m,%.3f,h,%.3f,dec,%+.3f,inc,%+.3f,
no geomagnetic information available for <%+.8f,%+.8f,%+.3f>
Client requested notification %d
registered as location spectator to compute geomagnetic data
calculating geomagnetic information for year (%ld) month (%ld) day (%ld) decimal year (%f)
geomagnetic file expired, downloading new file now
Geomagnetic model data invalidated. Sending notification with timestamp %f
location services is now disabled; invalidating geomagnetic field data
Set location
Start factory GYTT
Nonlinear gyro database load, SQL error: %s
flushPendingError: %s
Nonlinear gyro database flushed, %zu samples added.
Nonlinear gyro pending samples thinned.  %zu samples reduced to %zu.
Nonlinear gyro database prune, deleted %zu samples, %zu remain.
Nonlinear gyro database computed fit.
Setting property %s to %f
Last cover open timestamp = %f
%s table creation.
{"msg":"CLClusterCompassCalibrationTable::deleteAll", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f"}
{"msg":"CLCompassCalibrationTable::clearBias", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f"}
AWD Metrics is not enabled so not computing microlocation metrics
Computing AWD metrics
AWD Metrics is not enabled so not logging microlocation metrics
AWD Metrics is not enabled so not pushing microlocation metrics
Pushing AWD metrics
Next scan expected to take %.3Lfs (ending at %0.3fs). Expected time that the scan timer will end: %.03fs
Not enough time for another scan
No wifi results so issue a scan without delay
Ignoring a cached notification
Got a scan error so returning a scan delay of %0.3Lfs
Got a scan busy error so returning a scan delay of %0.3Lfs
%s. returning scan delay: %03Lfs
%s. issuing a scan without delay
%s. scan type %d, our scan is already in-flight
%s. scan type %d, returning scan delay: %03Lfs
%s. scan type %d, returning scan delay: %03LFs
Setting channels to scan: %s
{"msg":"CFType must be a CFArrayRef to convert to a const char*", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"CFType must be a CFNumber to convert to an int", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Unable to get the value from a CFNumber", "event":"%{public}s", "condition":"%{private}s"}
deltaAcceleration,%f
Failed to connect to database
Attempt to call %s without a backing database
Attempt to drop tables without a backing database
Unable to get column count from trigger table
Attempt to deleteDataOlderThan without a backing database
MicroLocation database has no connection. %s
MicroLocation database sqlite error. %s
Attempt to deleteUnneededModels without a backing database
No LOIs found. Not deleting any models
Attempt to getUUIDsForAllLearningMeasurementsByLOI without a backing database
Attempt to selectLearningMeasurementsByLOIBetweenTimes without a backing database
Attempt to numLocalizationScansBetweenTimes without a backing database
Attempt to numRecordingScansBetweenTimes without a backing database
Attempt to getMostRecentModelForLOI without a backing database
Attempt to selectMeasurementsFromRecordingUUIDs without a backing database
Flushing buffered inserts (%llu)
Unable to save buffered entries into the MicroLocation database. Entries have been lost. %s
Attempt to freeDatabaseSpace() without a backing database
Deleting microlocation data older than %.3Lf days
Error getting a prepared statement
Error binding to statement for sql %{private}s
Database buffer is full. Flushing buffered entries to disk
Need to clear %llu rows from the %s table
Attempt to get numEntries without a backing database
{"msg":"DatabaseFreeSpacePercentage needs to be a valid percentage", "percentage":"%{public}d", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Invalid algorithm chosen", "enum value":"%{public}d", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"No type provided in dictionary", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"No sigma provided in dictionary", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"No power provided in dictionary", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"No jaccard_threshold provided in dictionary", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"No jaccard_scale_factor provided in dictionary", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"No tanimoto_base provided in dictionary", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Invalid type chosen", "enum value":"%{public}d", "event":"%{public}s", "condition":"%{private}s"}
Table is not valid so we can't get the most recent wifi channel histogram
Did %sdelete old data
MicroLocation database sqlite error. error: %s
Did %sdelete unneeded models
Did %sfree database space
{"msg":"cluster distance threshold must not be empty", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"prune threshold must be less than or equal to clusterDistance threshold", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"fingerprintVector must be non-empty", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"CFType must be a CFNumber to convert to a double", "event":"%{public}s", "condition":"%{private}s"}
error in mean shift algorithm
error in kmeans algorithm
The protobuf fingerprint does not have a valid cluster label uuid
The protobuf fingerprint is using a deprecated uint64 cluster label
The protobuf fingerprint does not have a cluster identifer
The protobuf cluster recording does not have a valid cluster label uuid
The protobuf cluster recording does not have a valid recording uuid
{"msg":"mapped cluster identifer already exists", "event":"%{public}s", "condition":"%{private}s"}
Tried to run learning, but learning is disabled
Fingerprint vector empty for model type %d
Model generated successfully for type %d
Model was not generated properly. Inserted: %d, Flushed: %d
No models were generated for model type %d
analyzing WiFi channels
no LOIs found
found LOIs
Wifi Channel Histogram generated successfully for type
Wifi Channel Histogram was not generated properly. Inserted: %d, Flushed: %d
{"msg":"Expecting some UUIDs to be passed in", "event":"%{public}s", "condition":"%{private}s"}
Table is not valid so we can't numLocalizationScansBetweenTimes
Table is not valid so we can't numRecordingScansBetweenTimes
{"msg":"Assigning a negative value to an unsigned type is probably not what you intended", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Trying to assign a value that is bigger than the provided type can hold", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Unable to create queue", "event":"%{public}s", "condition":"%{private}s"}
Told to reload the model for the current LOI but we don't have a current LOI. Ignoring request
Reloaded a new model for LOI: %s
Told to reload the model but it is invalid. Not changing current model
Localizer has invalid model. Returning only the null microlocation
Localizer doesn't have any WiFi measurements to use. Returning a uniform distribution across all known microlocations
Unable to mark activity as %ld. current state is %ld
Checking in for %s
prunedWifiMap size, %lu,currentTime, %f
access point results, t, %f, mac, 0x%012llx, exp, %f, std, %f, valid Samples, %d, invalid Samples, %d, settled Feature, %.2f
access point results, overall Duty Cycle, %f
Settled State, %hu, PassCount,%d, measuredOverallDutyCycle,%f
Removing 0x%012llx at time:%f from time %f
{"msg":"Expecting a wifi channel histogram", "event":"%{public}s", "condition":"%{private}s"}
Computing distances between datatype %d not supported
{"msg":"index out of bounds", "ii":"%{public}llu", "event":"%{public}s", "condition":"%{private}s"}
did not expect measurement type %d
{"msg":"Cannot localize on invalid model!", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Invalid reducer function chosen", "function type":"%{public}d", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Unsupported reducer function", "event":"%{public}s", "condition":"%{private}s"}
Can't insert because the database is invalid
%s has been written to more than expected. Clearing up disk space. If this log is seen often that indicates a serious problem
{"msg":"Don't know what state to advance to. You must call advance() with a state", "currentState":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Can't advance to this state", "currentState":"%{public}s", "providedNextState":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Must have an LOI to move into this state", "currentState":"%{public}s", "providedNextState":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
Advanced from %s to %s
{"msg":"Can't reverse anymore - already in a terminating state", "currentState":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
Reversed from %s to %s
Updating localizing scan strategy
Updating recording scan strategy
Settings updated so updating wifi strategies and checking enabled flags
MicroLocations are not enabled, so it won't start
Starting MicroLocation provider
Attempting to start MicroLocations but we're already started. In state '%s'
Stopping MicroLocations
Client is registering for MicroLocations but we have been set to disable. Ignoring registration.
Requested to localize but there aren't any interested clients. Ignoring request
Notifier is not in a state where it can localize. It's in %s. Ignoring request
Got request to localize but we don't know what LOI we're in so ignoring the request
{"msg":"Not in a good state to start spectating", "state":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
Starting spectating mode
No LOI set so not transitioning to spectating
{"msg":"Should not be localizing if there are no clients interested", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Should not be in this state if localizing", "state":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
Localization started
Localization stopped
Not recording since we're in low power mode
Received a recording trigger but we're not settled
{"msg":"Should not be recording if there are no clients interested", "state":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
Recording started
Rolling back recording because we weren't fully settled
Recording stopped
{"msg":"Should not be stopping recording in this state", "state":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Asking for HomeKit scan type in incorrect state", "state":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
Got an LOI from an old request. Request ID: %s. Current request ID: %s
Setting the current LOI to %s
Not setting the LOI to %s since we're in %s state. Current LOI is %s
{"msg":"Should not be getting a current LOI string in this state", "state":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Receiving wifi notifications but we shouldn't be subscribed to them!", "state":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
Receiving ATV notifications but we shouldn't be subscribed to them! State %{public}s
{"msg":"Should not be starting a recording in this state", "state":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
Got request to reset Location data. Dropping microlocation tables
Force Recording received
First Wake of Day received
Receiving homekit notifications but we shouldn't be subscribed to them! State %{public}s
{"msg":"Receiving settled state changes but the settled state estimator shouldn't be getting callbacks", "state":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
Model has been regenerated. Telling localizer to reload
Model has been regenerated for type %d. Localizer does not currently support multiple model types.
Don't have a current LOI so not updating the current wifi channel histogram
Don't have a current wifi channel histogram for this LOI %s
Reloaded wifi channel histogram
Enabled state: microlocations defaults enabled: %d; location services enabled: %d; any system service enabled: %d; overall enabled: %d
MicroLocations have been disabled. Clients will no longer get notifications until we are enabled again.
MicroLocations are now re-enabled. Clients should begin getting notifications again
{"msg":"json string is invalid", "event":"%{public}s", "condition":"%{private}s"}
This measurement is not tied to a unique id so it can't be used in a hash table
The protobuf fingerprint does not have a valid recording uuid
This fingerprint does not have any measurements, you have probably done something wrong
{"msg":"Minimum scan time difference must be less than the maximum", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"A measurement's recording UUID does not have a corresponding event entry", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"fingerprintVector size is not either zero or one", "size":"%{public}llu", "event":"%{public}s", "condition":"%{private}s"}
Accumulating datatype %d not supported
fAccumulatedWeight (%f) is not positive
Reducing datatype %d not supported
Failed to bind on INSERT OR REPLACE with sql %{private}s
No recording events for model type %d
Table is not valid so we can't select all LOIs
{"msg":"CFType must be a CFNumber to convert to an enum", "event":"%{public}s", "condition":"%{private}s"}
Data source cancelled learning
Database is not connected so we can't intialize our table
Failed to create table: %s
Sucessfully created table if necessary: %s
Table is not valid so we can't insert or replace
Failed to bind on INSERT OR REPLACE for sql %{private}s
Failed to execute statement. %s
Table is not valid so we can't select all
Table is not valid so we can't get the most recent model
Table is not valid so we can't deleteUnneededModels()
Keeping %d models per LOI per model type
Table is not valid so we can't deleteOldestRows
Error converting database values. %s
Error in numberOfMeasurements,%zu
Error in rangeIndex calculation, rangeIndex,%d
Error in index calculation, tableIndex,%d
Historical-Distributions, loiUuid, %s, style, %d, poolLength, %f, median, %f, mean, %f, stddev, %f, min, %f, max, %f, samples, %d, prctile10, %f, prctile90, %f, uuid, %s
Historical median turns per session, median, %f, Nsessions, %lu
Set first session entry
Did not successfully load state from db!
Cannot yet set first session entry
Got %d LOIs.
Checking LOI with id '%s'.
Found distributions for LOI with id '%s'.
Failure to store lap due to database inaccessibility.
@GtsSync, Unexpected change type, %{public}ld, set
@GtsSync, CsSerial, dataFromChange, isKind, %{public}d
@GtsSync, CsSerial, changeFromData
@GtsFlow, CS, startSession, 2
@GtsFlow, CS, endSession, 6
@GtsSync, CsService, serviceDidPairDevice, state, %{public}c
@GtsSync, CsService, serviceDidUnpairDevice, state, %{public}c
@GtsSync, CsError, 2, service, %{public}s, underlying, %{public}s
@GtsSync, CsSession, enqueue failed
@GtsFlow, CS, enqueueComplete, 4
@GtsSync, CsSession, applyChanges, %{public}lu
@GtsSync, CsSession, More than 1 incoming change, %{public}lu
@GtsSync, CsError, 0, didEndWithError, %{public}s, underlying, %{public}s
@GtsFlow, CS, sessionDidEnd, 5, error, %{public}d, synctrap, %{public}d
@GtsFlow, PS, syncDidCompleteTx, 2
@GtsSync, CsSession, resetDataStoreWithError
@GtsSync, CsService, willSwitchPairing, old, %{public}s, new, %{public}s
@GtsSync, CsService, didSwitchPairing, old, %{public}s, new, %{public}s
@GtsSync, PsCoord, beginSyncSession, %{public}lu
@GtsFlow, PS, handleSyncTrapTurn%s, 1
@GtsFlow, PS, syncDidCompleteTx, 2, skipped
@GtsSync, PsCoord, didInvalidateSyncSession, %{public}d
@GtsFlow, PS, didInvalidateSession, 3, restriction, %{public}d
@GtsSync, PsCoord, syncCoordinatorDidChangeSyncRestriction, %{public}d
@GtsSync, PsCoord, RestrictionUnknown, %{public}ld
@GtsSync, PsObserver, initialSyncDidCompleteForPairingID
@GtsSync, PsObserver, syncDidCompleteForPairingID
@GtsFlow, PS, syncDidCompleteRx, 4
@GtsSync, PsObserver, syncDidResetForPairingID
@GtsSync, PsObserver, initialSyncStateObserverClientCanRetryFailedRequests
GtsAwd, plist, error, load, %lu
GtsAwd, plist, clear, %.1f, thresh, %.0f, last, %.1f
GtsAwd, plist, error, time, %.1f, now, %.1f
GtsAwd, started, %d
GtsAwd, request, tiles, %d, total, %d, sessions, %d
GtsAwd, serialized, %d, totalmb, %.1f
GtsAwd, %s, sessions, %d, empty, %d, completed, %d, errored, %d, requested, %d, synced, %d, sizemb, %.1f, week, %d, %.1f, sinceweekly, %0.1f, reset, %d, lastSave, %0.1f, %0.1f
@GtsInit, CG, %{public}d, %{public}d, preDay, %{public}d, rate, %{public}0.0f, state, %{public}d, %{public}d, %{public}c
@GtsTimer, fired, %{public}s
@GtsMgr, dtor
@GtsInit, PsObjects failed, C, %{public}d, O, %{public}d
@GtsInit, CsObjects failed
@GtsMgr, release
@GtsSync, CsError, 1, resume, %{public}s
@GtsSync, since last switched, hours, %{public}0.1f, days, %{public}0.1f
@GtsMgr, skip SyncTrap, days inactive, %{public}0.1f, thresh, %{public}0.1f, pending, %{public}d
@GtsFlow, CS, setNeedsReset, 1, BeginPair, state, %{public}c, %{public}c, queuewas, %{public}ld, inactive, %{public}0.1f
@GtsSync, PsCoord, RestrictionLimitPush
@GtsSync, PsCoord, RestrictionNone
@GtsMgr, restriction, state was, %{public}c, now, %{public}c, restricted, %{public}d
@GtsMgr, Mismatching keys, syncId, %{public}s, request, %{public}s
@GtsMgr, Crossing sessions, %{public}c, WARNING
@GtsManif, CompTx, %{public}ld
@GtsMgr, Unexpected Companion startSession flow, type, %{public}d, preDaytona, %{public}d
@GtsSync, CsService, startSession, %{public}c, mdin, %{public}ld, queue, %{public}ld, mdout, %{public}ld
@GtsManif, GizRx, %{public}ld, tilesInMap, %{public}ld
@GtsManif, GizTx, %{public}ld
@GtsMgr, Unexpected Gizmo startSession flow, type, %{public}c, hasIn, %{public}d, WARNING
@GtsMgr, handleSessionDidEnd, error, %{public}d, %{public}d, change, %{public}c, pending, %{public}d, psActive, %{public}d, syncState, %{public}c, queue, %{public}ld, exchanged, %{public}d
@GtsManif, nil request
@GtsManif, BadId, formG, %{public}s
Assert Failed, %s, %d, %s
locationd assert: %s, %d, %s
@GtsManif, GizRequest, %{public}s, found, %{public}d, cggen, %{public}0.1f, %{public}0.1f, refresh, %{public}d, ReqSize, %{public}ld
@GtsManif, GizMetaRequest
@GtsManif, CompRx, %{public}ld, queue, %{public}lu, metadata
@GtsManif, BadId, enqueueC, %{public}s
@GtsManif, CompReply, %s, have, %{public}d
@GtsFlow, CS, metadataX, 3
@GtsFlow, CS, enqueueChanges, 3, Manifest, %{public}c
@GtsFlow, CS, enqueueChanges, 3, TileData, %{public}c, queue, %{public}ld
@GtsSync, CsSession, %{public}c, llsw, %{private}.2lf, %{private}.2lf, queue, %{public}ld
@GtsFlow, CS, enqueueChanges, 3, SyncTrap
@GtsFlow, CS, enqueueChanges, 3, Unexpected change type, %{public}c
@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d
@GtsMgr, change, syncId, %{public}s, type, %{public}ld, preDaytona, %{public}d
@GtsCont, change with no data!!!
@GtsMgr, SyncTrapEnd, oldstate, %{public}c, preDay, %{public}d
@GtsMgr, willSwitch, new, %{public}s, days inactive, %{public}0.1f
@GtsMgr, handlePairSwitch, ids ,%{public}d, %{public}d, resume/suspend, %{public}c, state, %{public}c, %{public}c, restricted, %{public}d, inactive, %{public}0.1f
@GtsSync, CsSync, handleServiceError, %{public}c
@GtsGiz, reclearing
@GtsMgr, Nearby, queue, %{public}lu, sessionErrors, %{public}d
@GtsCont, ToggleReset, %{public}d, queuewas, %{public}ld
@GtsGiz, reclear pending
@GtsCont, %{public}s, llsw, %{private}.2lf, %{private}.2lf
@GtsPair, skipevent, add, blocking sync state, %{public}c
@GtsCont, replaceadd, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld
@GtsCont, add, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld, current, {public}%d
@GtsTimer, nextfire, %{public}.0f, %{public}s, state, %{public}c
@GtsManif, return, not companion
@GtsManif, check, %{public}s, state, %{public}d, %{public}c, %{public}lu, sync, %{public}lu
@GtsManif, skip, %{public}s, state, %{public}d, sync, %{public}d
@GtsFlow, CS, setHasChanges, 1, SendManifest
@GtsManif, PrepTx, %{public}s, tiles, %{public}lu, %d, currentOnly, %{public}d
@GtsManif, entry, %{private}s, gentime, %{public}.1f
@GtsCont, addlost, llsw, %{private}.2lf, %{private}.2lf
@GtsComp, add, llsw, %{private}.2lf, %{private}.2lf, tile_x, %{private}d, tile_y, %{private}d, tilesize, %{public}ld, queue, %{public}lu
@GtsManif, CompRx, %{public}d, queue, %{public}lu
@GtsManif, BadId, gizmoRequestC, %{private}s, %{public}d, of, %{public}lu
@GtsManif, CompReply, %{private}s, have, %{public}d
@GtsMgr, CsSync, setHasChanges, %{public}d, %{public}lu
@GtsManif, skip, %{public}s, state, %{public}c, indexed, %{public}d, ls, %{public}d
@GtsManif, GizmoRequest, %{public}s
@GtsLock, drop add on LS off
@GtsSync, drop older add, timestamp, %{public}0.1f, toggle/reset, %{public}0.1f
@GtsError, Adding non-Wifi tile, %{public}d
@GtsGiz, add, llsw, %{private}.2lf, %{private}.2lf, sizes, %{public}lu, %{public}lu
WtmList, add, sync, size, %lu, llsw, %.2lf, %.2lf
@GtsLock, add, llsw, %{private}.2lf, %{private}.2lf, mapsize, %{public}ld
Timeout (after 5 seconds) occurred during wait!
Warning - invoking %@ on main may lead to deadlock.
TCCServiceMotionAccess timeouts!
Response invalid.
{"msg":"#Stream Changing state", "new state":"%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld", "old state":"%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld"}
{"msg":"#Stream Clearing motion sample data", }
{"msg":"#Stream Setting motion alarm state", "enabled":"%{public}d"}
{"msg":"#Stream Starting providers", "state":"%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld"}
{"msg":"#Stream Determining state", "current state":"%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld"}
{"msg":"#Stream Received motion rich location notification", "source":"%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld", "notification":"%{public, location:CLLocationProvider_Type::Notification}lld", "motion data":"%{public, location:CLLocationProvider_Type::MotionDetected}lld", "timestamp":"%{public}f"}
{"msg":"#Stream Workout begin", }
{"msg":"#Stream Workout end", }
{"msg":"#Stream Motion alarm fired", "detected motion":"%{public, location:CLLocationProvider_Type::MotionDetected}lld"}
{"msg":"#Stream In pedestrian workout, Motion compatible?", "remote motion":"%{public, location:CLLocationProvider_Type::MotionDetected}lld", "sample time_s":"%{public}.09f", "now_s":"%{public}.09f", "prefer remote":"%{public}hhd", "prefer local":"%{public}hhd"}
{"msg":"#Stream Scheduling timer for motion confidence", "now_s":"%{public}.09f", "fire time_s":"%{public}.09f", "delta_s":"%{public}.09f"}
{"msg":"#Stream Refreshing location request", }
{"msg":"Unexpected registration", "notification":"%{public, location:CLLocationProvider_Type::Notification}lld"}
{"msg":"#Stream Unexpected registration", "notification":"%{public, location:CLLocationProvider_Type::Notification}lld"}
Streamed,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf,lat,%.8lf,lon,%.8lf,hunc,%.3lf,alt,%.3lf,vunc,%.3lf,speed,%.3lf,sunc,%.3lf,course,%.3lf,cunc,%.3lf
{"msg":"#Stream Changing requested granularity", "granularity":"%{public, location:CLLocationStreamingGranularity}lld"}
{"msg":"#Stream Missing data", "payload":"%{private}@"}
{"msg":"#Stream Dropping expired location", "timestamp":"%{public}f", "lifespan":"%{public}f"}
{"msg":"#Stream Assertion count must be non-negative", "count":"%{public}d", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"#Stream Client took fitness assertion", "before change":"%{public}d"}
{"msg":"#Stream Assertion count must be positive", "count":"%{public}d", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"#Stream Client released fitness assertion", "before change":"%{public}d"}
{"msg":"#Stream Client took disablement assertion", "before change":"%{public}d"}
{"msg":"#Stream Client released disablement assertion", "before change":"%{public}d"}
{"msg":"#Stream Client took emergency enablement assertion", "before change":"%{public}d"}
{"msg":"#Stream Client released emergency enablement assertion", "before change":"%{public}d"}
{"msg":"Must be overridden", "event":"%{public}s", "condition":"%{private}s"}
MsgEnabledBitMask is %s
CLActivityLoggerWriter open log file filePath is %s, file is %p.
CLActivityLoggerWriter logData, prepare to log %d bytes
CLActivityLoggerWriter failed to log data: %s
CLActivityLogger being constructed.
CLActivityLogger, kNotificationActivityOverride,overrideAction,%d,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f}
CLActivityLogger,log kNotificationActivityOverride:%s
CLActivityLogger, Unhandled notification %d
CLActivityLogger, dataCollection setting changed
CLOdometerNotifier is being constructed
CLOdometerNotifier is shutting down
%s, %s, %s, %s, %s, %s, %d, %s, %d, %s, %s
SignificantElevation,startTime,%.3f,endTime,%.3f,ascended,%d,descended,%d
Location services are disabled for motion classification
Motion calibration system service is disabled.
Programmer error, this expiration rule with time %fis not valid.
Aggregating records start %f, count ~%d
Aggregating records stop %f, count ~%d
Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d
No expiration rule was added so the number of records will be unbounded.
Updating Catherine, catherine = %.8f, timestamp = %.8lf, starttime = %.8lf, source = %d, interpolation = %d, srcName = %s
Updating Odometer, time stamp, %.8lf, distance, %.8f, GPS altitude, %.8lf, estimated speed(m/s), %.8lf, odometer, %.8lf, accuracy, %.8lf, speed accuracy, %.8lf, timestampGps, %.8lf, rawSpeed, %.8f, srcName, %s
Updating Elevation, time stamp, %.2lf, elevationAscended, %d, elevationDescended, %d, srcName, %s, source, %d
Updating Elevation, beyond time window, buffer size, %lu, deltaTime, %f
Online grade estimation regime change, time start, %.2lf, elevationAscended, %d, elevationDescended, %d,input_altitude, %.4f, Prediction Error, %.4f
Online grade estimation, gradeType, %d, time start, %.2lf, altitude delta, %.2f, vspeed, %.2f, param_m, %f, param_b, %f,xbufferFront, %f,xbufferBack, %f, elevationAscended, %d, elevationDescended, %d, input_altitude, %.4f
Hardware gradeTypeFilter, rawGradeType, %d, gradeType, %d, vspeed, %.4f
ElevationSrc ready at time, %.2f, no data point
ElevationSrc not ready at time, %.2f 
ElevationSrc ready at time, %.2f, nearest data point at time, %.2f
Changed from %s to %s:,
Latest speed is %lf but no information about speed uncertainty
***no run loop available***
Changing CLCommon's runloop after it was already established
Setting CLCommon's runloop after it was already established
CLCommonSetRunLoop, %p
cannot open source file: %s, errno %d
cannot open target file: %s, errno %d
error reading source file: %s
error writing target file: %s
cannot open compression stream: %s, bzerror %d
error writing target file: %s, bzerror: %d
error closing target file: %s, bzerror: %d
CLCommonGzipDecompressFile, can't stat, %s
CLCommonGzipDecompressFile, from, %s, to, %s, size, %llu, cTime, %.1lf, isOK, %d
CLCommonGzipDecompressFile, can't open, file_path_to, %s, errno %d
CLCommonGzipDecompressFile, can't open, file_path_from, %s, errno, %d
CLCommonGzipDecompressFile, error reading source file: %s, errno, %d, read, %d
CLCommonGzipDecompressFile, can't write, %s, errno, %d, write, %zu
CLCommonGzipDecompressFile, from, %s, to, %s, isOK, %d, fileSize, %llu, totalReadBytes, %u, totalWrittenBytes, %u, compression, %.4lf
http date string is converted to timestamp %.3f and adjusted to %.3f by %.3fs RTT (%.3fs diff from systime)
GPS_NETWORK: enabled %d found %d
Timer set loop: %d %f %f %f %f
CLCommonGetFileTimestamps, failed to stat file, %s, ret, %d
TILE: delete file, %s
TILE: stat, %s, ret, %d, mtime, %lu, ctime, %lu, size, %lld
TILE: unlink, %s, ret, %d
failed, invalid filename
failedToOpen, errno, %d
failed,fd,%d,origProtectionClass,%d,newProtectionClass,%d,ret,%d,errno,%d
done,fd,%d,origProtectionClass,%d,newProtectionClass,%d,ret,%d
processed %p %d to (%s)
could not create new mutable dictionary
could not deserialize property list from %s
file %s does not exist... clearing, error, %s
Error reading file %s: %s
Could not create NSURL for file: %s
Could not write data to disk %s
Could not serialize data for file %s
key %s does not have element %d in array of size %ld
key %s does not have element %d in non-array type %lu
type IDs do not match for key %s - %lu vs %lu
specified index is out of range for key %s (%d of %ld)
specified index %d not applicable to type %lu for key %s
could not create cf type for key %s
could not create write stream
could not open write stream
could not write data, error code, %ld, error domain, %s
could not create intermediate property list - %ld (%s)
%s = <dictionary (%ld entries)>:
%s = %s
%s = %0.6f
%s = %d
%s = <unhandled value type %lu>
could not get value
type IDs do not match - %lu vs %lu
could not convert to C string
can't convert %u data bytes
type IDs do not match - %lu
{"msg":"Ignoring new #filedownload request with invalid timeout", "Timeout_s":"%{public}.09f"}
{"msg":"Ignoring new #filedownload request with invalid src string", "URLString":"%{private}s"}
{"msg":"Ignoring new #filedownload request with invalid src url", "URL":"%{private}@"}
{"msg":"Dropping uncancelled #filedownload to service new request", "OriginalRequest":"%{private}@", "NewRequest":"%{private}@"}
{"msg":"Ignoring new #filedownload request with invalid dst string", "NewRequest":"%{private}@", "LocalFileString":"%{private}s"}
{"msg":"Created task for #filedownload request", "NewRequest":"%{private}@", "LocalFile":"%{private}@"}
{"msg":"Could not create task for #filedownload request", "NewRequest":"%{private}@", "LocalFile":"%{private}@"}
{"msg":"Cancelling task for #filedownload request", "OriginalRequest":"%{private}@"}
{"msg":"Error on #filedownload task completion", "Response":"%{private}@", "LocalFile":"%{private}@", "Error":"%{private}@"}
{"msg":"Protocol error on #filedownload task completion", "Response":"%{private}@", "LocalFile":"%{private}@", "ResultCode":"%{private}d"}
{"msg":"#filedownload task completed successfully", "Response":"%{private}@", "LocalFile":"%{private}@"}
{"msg":"Error persisting file for completed #filedownload task", "Response":"%{private}@", "LocalFile":"%{private}@", "LostAndFile":"%{private}@", "TempFile":"%{private}@", "Error":"%{private}@"}
PowerLog is not enabled so not writing microlocation metrics
Wrote microlocation metrics to power log: %s
CLSedentaryTimerNotifier is being constructed
fActiveWindowSize,%d,fActiveThreshold,%d,fStepCountThreshold,%d,fEnableHapticFeedback,%d,fPushCountThreshold,%d
CLSedentaryTimerNotifier is shutting down
Configuration: speedUpRate %f, aggregationDisabled %d, expirationDisabled %d, detailedLogging %d
Client Registered
Un-handled notification,%d
Error starting sedentary timer for %s,fFitnessTrackingEnabled,%d
Error starting sedentary timer for %s,fArmed,%d
client,%s,offset,%d,period,%d,reminder,%d,autoReschedule,%d
stopTimer
Stopping timer,fFitnessTrackingEanbled,%d
CL database error, invalid time, %lf
Restoring session timer since we have a current activity.
Invalid data received.
Timing out session since we have not heard a response in %f seconds.
Starting update timer.
MESCAL: Could not derive hardware info for SAPInit
MESCAL: SAPSign failed with: %ld
MESCAL: churn failure: signing disabled
MESCAL: SAPInit failed with: %ld
MESCAL: SAPExchange failed with: %ld
nil identifier given to CLKeychainItemWrapper
nil dictionary passed for converstion
Conversion of dictionary without kSecValueData key requested.
{"msg":"Serious error, no matching item found in the keychain.", "event":"%{public}s", "condition":"%{private}s"}
Couldn't update the Keychain Item.
Couldn't add the Keychain Item.
Natalie Model, Yoga Compendium METS, METS, %f
TIMEOUT: Waited %f seconds to aquire lock '%s' (%p)
TIMEOUT: Held lock '%s' (%p) for %f seconds
{"msg":"#Stream No error, but also no identifier", "message type":"%{public}s"}
{"msg":"#warning #Stream Got error from IDS", "error":"%{public}@", "message type":"%{public}s"}
{"msg":"#Stream Handed off message to IDS", "message type":"%{public}s", "identifier":"%{public}s"}
{"msg":"#Stream Missing message type", "message":"%{private}@"}
{"msg":"#Stream Got message", "type":"%{public}s"}
{"msg":"#Stream Received message of unsupported version", "type":"%{public}s", "declared version":"%{public}d", "minimum version":"%{public}d", "maximum version":"%{public}d"}
{"msg":"#Stream Missing identifier", }
{"msg":"#warning #Stream Send failure", "identifier":"%{public}s", "success":"%{public}d", "error":"%{public}@", "type":"%{public}s"}
{"msg":"#Stream Send success", "identifier":"%{public}s", "type":"%{public}s"}
***not supported***
<empty>
Attempt to set key %s for read-only preferences %s/%s!
Poll count underflow!!!
%s: Need to override this method
Trying to set the same state '%s' for device '%s'
could not store cached data 
clearing location cache
Starting device motion service 0x%x
Type,%s,dt,%20.20f
Type,%s,interval,%f
Dumped gyro cal database with id %s
Stopping device motion service 0x%x
Type,%s,q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,magneticFieldCalibrationLevel,%d,timestamp,%20.20f,doingBiasEstimation,%d,doingYawCorrection,%d
Set device motion sensor status %ld
SAMSSR: Resolved adamId, %s, name, %s, bundleId, %s, developerName, %s.
SAMSSR: Added adamId, %s, to cache.
SAMSSR: Missing response for adamId, %s in lookup request but not in the response
SAMSSR: Result for adamid, %ld, in cache.
SAMSSR: Result for adamid, %ld, in cache but expired.
SAMSSR: Result for adamid, %ld, not in cache.
SAMSSR: Error performing lookup, %s
SAMSSR: Error parsing lookup response, %s
SAMSSR: Removing adamId, %ld, from cache since the entry has expired.
invalid hunc
invalid inputs
fVarEast <= 0.0
fVarNorth <= 0.0
fVarEastNorth < 0.0
CLMM, Unexpected determinant of 0
determinant <= 0.0
could not get mutable store path for type, %d
Unknown persistent domain: %d
persistent store %s has been modified - refreshing will lose changes
data set %s is not changeable - not storing
%s stored to disk %s
scheduling to auto-store %s every %.3fs
disabling auto-store for %s
found device %s, data: %s, rssi: %d
Got a device notification but not device data
Found invalid HomeKit device: %s
CELL_LOC: fHardwareType, %d
sending notification for %s
Registration status: %d
currently not connected to telephony service
Refresh Cell Monitor
Request to decode unknown integer is a programmer error
dCOLLECT: fLogWifiScanResults =%d
dCOLLECT: fWifiDataCollection =%d
dCOLLECT: fWifiScannerEnable =%d
dCOLLECT: fWifiScannerEnterHystr =%d
dCOLLECT: fWifiScannerExitHystr =%d
dCOLLECT: fWifiScannerSecondsBetweenWifiScans =%d
dCOLLECT: fWifiScannerOverScan =%d
dCOLLECT: fWifiScannerShowUINotifications = %d
WIFI: gBlackListedAP = %s
dCOLLECT: fWifiScannerOverScan can't be zero, or less than zero, %d
could not create dpc source
forcing to use passive WiFi scans only
WRTT: no active listeners
fDpcSource is NULL - shutting down?
setExitAndEntryScanNetworks, entry, %lu, exit, %lu
Overriding fence WiFi tracking enabled to %d
WiFi tracking available now %d (was %d) (%d %d)
WltNotify, Scanner, %s
starting scanner
stopping scanner
dCOLLECT: resetScanner
dCOLLECT: Set EntryNetworks, entryListSize, %3lu, %3lu
dCOLLECT: EntryNetworks, Index, %2zu, %2lu, mac, %s
dCOLLECT: Set ExitNetworks, exitList, %3lu, %3lu
dCOLLECT: ExitNetworks, Index, %2zu, %2lu, mac, %s
{"msg":"#Stream Transitioned state", "old state":"%{public, location:CLStreamingAwareLocationProviderNoLocalGPSStateMachine::LocationSourceState}lld", "new state":"%{public, location:CLStreamingAwareLocationProviderNoLocalGPSStateMachine::LocationSourceState}lld"}
could not open geomagnetic data file
geomagnetic data file appears to be empty
geomag() encountered an error
geomg1() encountered an error
DisableMotionStateNotifyDefaultsWrite,%d
DOMINANT ACTIVITY: start monitoring dominant activity
DOMINANT ACTIVITY: stop monitoring dominant activity
Ignore reachability on nearby Companion
data reachability is not available - not downloading %s
could not download from %s to %s
***could not rename %s to %s***
download completed to %s
could not get modified time for %s
data reachability is not available - not retrying %s
retry count %d, will re-download for %s after delay of %f
%s downloading in progress, cannot change update settings
update rate %.3fs is shorter than WiFi update rate %.3fs - overriding WiFi update rate
"%s"
could not read from %s (errno 0x%x)
"%s": Failed to write entire buffer! (errno 0x%x) written=%d, processed=%d
failed to open device "%s" with fd %d
"%s": Out of buffer space!
Warning: Not implemented.
WRTT: device type,%{public}d
WRTT: request while wifi is off!
WRTT: mgr received request as initiator, timeout, %{public}lf [s]
WRTT: mgr received request as target
WRTT: mgr received cancel session
WRTT: timed out
WRTT: WiFi power %{public}s
Multiple Peers in request with matching mac address, %s
WRTT: RTT measurements for %{public}ld peer(s)
WRTT: error status code %{public}d (%{public}#x) reported from WiFi, report kCLErrorPrivateRangingLowLevelError
WRTT: no individual measurements in burst
WRTT,range,%f
{"msg":"WRTT:", "peer":"%{private}s", "notify":"%{public}d", "shouldUnlock":"%{public}d", "rangeEstimate":"%{public}f", "threshold":"%{public}f"}
WRTT: recieved Wifi error %{public}ld for %{public}ld peers
CLCompanionNotifier is being constructed
CLCompanionNotifier is shutting down
Sending message,type,%d,size,%lu,priority,%ld,fireAndForget,%d,encrypt,%d,bypassConnectionCheck,%d,timeout,%f
timer interval,%f
IDS connection update,status,%d,prevDisconnection,%f,modelID,%s,uniqueIDOverride,%s,localDeviceID,%s
Query: %s, full table scans: %d, sorts: %d, File: %s
{"msg":"open", "path":"%{public}s", "protection":"%{public}d", "persistence":"%{public}d"}
{"msg":"Requested filename", "expected":"%{public}s", "actual":"%{public}s"}
{"msg":"Returned database", "path":"%{public}s"}
{"msg":"#warning Could not open database", "path":"%{public}s", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"Could not open database", "path":"%{public}s", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"#warning Failed to create UUID select statement", }
{"msg":"initUUID", "path":"%{public}s", "uuid":"%{private}s"}
{"msg":"#warning Failed to create UUID insert statement", }
{"msg":"UUID initialized", "path":"%{public}s", "uuid":"%{private}s"}
{"msg":"Failed to initialize DB UUID", "path":"%{public}s"}
{"msg":"unknown protection type", "protection":"%{public}d"}
{"msg":"unsupported persistence type", "persistence":"%{public}d", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"unknown persistence type", "persistence":"%{public}d"}
{"msg":"could not create path", "path":"%{public}s"}
{"msg":"displaySqlResult", "function":"%{public}s", "rc":"%{public, location:SqliteResult}.*P", "":"", "query":"%{private}s"}
{"msg":"#warning displaySqlResult", "function":"%{public}s", "rc":"%{public, location:SqliteResult}.*P", "":"", "query":"%{private}s"}
{"msg":"handleSqlError on read-only db", "path":"%{public}s", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"database error; deleting and exiting", "path":"%{public}s", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"Killing locationd to resolve corrupted database", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Could not delete the database with CPSqliteDatabaseDelete()", }
{"msg":"Falling back to file deletion", "path":"%{public}s"}
{"msg":"could not remove file", "path":"%{public}s", "errno":"%{public}d", "error":"%{public}s"}
{"msg":"createTableIfNecessary", "table":"%{private}s", "specificToSerialNumber":"%{public}hhd"}
{"msg":"Index already exists; not re-creating", "index":"%{private}s"}
{"msg":"Index already exists but is different; dropping", "index":"%{private}s", "actual":"%{private}s", "expected":"%{private}s"}
{"msg":"Index does not exist; creating", "index":"%{private}s"}
{"msg":"#warning Couldn't create index statement", "table":"%{private}s", "columns":"%{public}s"}
{"msg":"#warning Couldn't create drop index statement", "index":"%{private}s"}
{"msg":"Trigger does not exist", "trigger":"%{public}s"}
{"msg":"#warning Couldn't create drop trigger statement", "trigger":"%{public}s"}
{"msg":"Couldn't create add count trigger statement", "table":"%{private}s"}
{"msg":"Couldn't create select count statement", "table":"%{private}s"}
{"msg":"Couldn't get row count for", "table":"%{private}s"}
{"msg":"Couldn't prepare row count insertion statement", }
{"msg":"Need at least one column in table", "table":"%{private}s"}
{"msg":"#warning Existing table's column does not match expected", "table":"%{private}s", "index":"%{public}d", "expected name":"%{public}s", "expected type":"%{public}s", "expected primary key":"%{public}hhd", "actual name":"%{public}s", "actual type":"%{public}s", "actual primary key":"%{public}hhd"}
{"msg":"#warning Existing table's schema does not have the same number of columns as the requested schema", "table":"%{private}s"}
{"msg":"#warning Table exists but does not have matching schema", "table":"%{private}s"}
{"msg":"Re-recreating table to fix primary key", "table":"%{private}s"}
{"msg":"Destination name should not be NULL", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Did not successfully finish backup", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"Unable to open", "path":"%{private}s"}
{"msg":"Creating table", "table":"%{private}s"}
{"msg":"version and serial number", "table":"%{private}s", "path":"%{public}s", "rc":"%{public, location:SqliteResult}.*P", "":"", "version":"%{public}s", "serial number":"%{private}s"}
{"msg":"Created row in TableInfo", "table":"%{private}s"}
{"msg":"Dropping table", "table":"%{private}s"}
{"msg":"Invalid parameters", "table":"%{private}s", "columnNames[0]":"%{public}s"}
{"msg":"Invalid parameters", "table":"%{private}s", "columnNames[0]":"%{public}s", "key":"%{public}s"}
{"msg":"Invalid parameters", "table":"%{private}s", "key":"%{public}s"}
{"msg":"Could not prepare statement", "query":"%{private}s", "rc":"%{public, location:SqliteResult}.*P", "":"", "errmsg":"%{private}s"}
{"msg":"Preparing statement for database", "query":"%{private}s", "path":"%{public}s"}
{"msg":"Prepared statement", "statement":"%{public}p"}
{"msg":"beginTransaction", "path":"%{public}s", "count":"%{public}d", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"endTransaction", "path":"%{public}s", "count":"%{public}d", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"rollbackTransaction", "path":"%{public}s", "count":"%{public}d", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"We should only have one transaction at a time and thus should be back at zero", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"#warning Finalized statement previously failed", "rc":"%{public, location:SqliteResult}.*P", "":"", "errmsg":"%{private}s"}
{"msg":"Could not find prepared statement", "statement":"%{public}p"}
{"msg":"vacuum", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f", "path":"%{public}s", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"incrementalVacuum", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f", "pages":"%{public}lld", "path":"%{public}s"}
{"msg":"incrementalVacuum", "result":"%{public}d"}
{"msg":"Attempt to reduceFreePages on readonly database", "path":"%{public}s"}
{"msg":"reduceFreePages", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f"}
{"msg":"reduceFreePages", "path":"%{public}s", "page_count":"%{public}lld", "freelist_count":"%{public}lld", "loadFactor":"%{public}f"}
{"msg":"Cannot reduceFreePages", "path":"%{public}s"}
{"msg":"setIncrementalVacuumEnabled", "enabled":"%{public}hhd", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"Actual auto-vacuum state does not match desired state", "actual":"%{public}d", "expected":"%{public}d", "vacuumNow":"%{public}hhd"}
{"msg":"Must provide a table name", }
{"msg":"Table does not exist but its metadata does", "table":"%{private}s"}
{"msg":"#warning Table was created by a different device (serial numbers do not match). Deleting", "table":"%{private}s", "expected":"%{private}s", "actual":"%{private}s"}
{"msg":"Table was created by this device (serial numbers match). Keeping", "table":"%{private}s"}
{"msg":"Table was created by an unknown device (table info missing). Deleting", "table":"%{private}s"}
{"msg":"The CL version has not changed since CLSqliteDatabase::createTableIfNecessary() was last invoked for this pair, so not creating table", "path":"%{public}s", "table":"%{private}s"}
{"msg":"The CL version has changed since CLSqliteDatabase::createTableIfNecessary() was last invoked for this pair. Checking schema", "path":"%{public}s", "table":"%{private}s"}
{"msg":"Must provide a table name and a module", }
{"msg":"#warning Virtual table exists but does not have matching schema", "table":"%{private}s"}
{"msg":"Could not bind", "value":"%{private}d", "index":"%{public}d", "rc":"%{public, location:SqliteResult}.*P", "":"", "query":"%{private}s"}
{"msg":"Could not bind", "value":"%{private}u", "index":"%{public}d", "rc":"%{public, location:SqliteResult}.*P", "":"", "query":"%{private}s"}
{"msg":"Could not bind", "value":"%{private}f", "index":"%{public}d", "rc":"%{public, location:SqliteResult}.*P", "":"", "query":"%{private}s"}
{"msg":"Could not bind", "value":"%{private}s", "index":"%{public}d", "rc":"%{public, location:SqliteResult}.*P", "":"", "query":"%{private}s"}
{"msg":"Could not bind", "value":"%{private}lld", "index":"%{public}d", "rc":"%{public, location:SqliteResult}.*P", "":"", "query":"%{private}s"}
{"msg":"Could not bind", "value":"%{private}@", "index":"%{public}d", "rc":"%{public, location:SqliteResult}.*P", "":"", "query":"%{private}s"}
{"msg":"getColumnInfo", "table":"%{private}s", "name":"%{public}s"}
{"msg":"getColumnInfo", "index":"%{public}u", "name":"%{public}s", "type":"%{public}s", "isPrimaryKey":"%{public}hhd"}
{"msg":"getColumnInfo", "table":"%{private}s", "name":"%{public}s", "isFound":"%{public}hhd"}
airplane mode not supported on non-embedded
PM Connection not the same as in the instance class
{"msg":"received IOKit notification", "sleepNotification":"%{public, location:IOMessage}lld", "keepAliveClientCount":"%{public}lu"}
system has powered on
#warning No sleep state tranaction on has powered on
system can sleep request
system entering sleep
Already holding sleep state transaction on will sleep
system will power on
system exiting sleep
#warning No sleep state tranaction on will not sleep
Notifying clients that migration is being performed
STARK,PASCD,invalid fields
STARK,PASCD,invalid timestamp
STARK,PASCD,invalid sensorType
STARK,PASCD,invalid transmissionState
STARK,PASCD,invalid sampleCount
STARK,PASCD,sampleCount==0
STARK,PASCD,invalid sampleCount,%d,max,%d
STARK,PASCD,unexpected empty timeOffset field
STARK,PASCD,unexpected empty sample field
STARK,PAGCD,invalid fields
STARK,PAGCD,invalid timestamp
STARK,PAGCD,invalid sampleCount
STARK,PAGCD,invalid sampleCount,%d,max,%d
STARK,PAGCD,invalid sample time offset
STARK,PAGCD,invalid sample set, all empty
STARK,GPHDT,invalid fields
STARK,GPHDT,invalid heading
STARK,GPHDT,invalid degrees true indication
Rejecting blacklisted accessory: HARMAN
Rejecting blacklisted accessory: Volkswagen AG, 1.0.0
Rejecting blacklisted accessory: Volkswagen AG, 2.0.0
Rejecting blacklisted accessory: BENTLEY
query: response, tag, %d, RTT, %.3fs, gsmCells, %lu cdmaCels, %lu, lteCells, %lu, scdmaCells, %lu, wifis, %lu
WltALS, reply, %lu, tag, %d, RTT, %.1fs
GnrALS, reply, %d, cellGLCS, %lu, %lu, %lu, %lu, wifi, %lu, RTT, %.1fs
GnrWifi, background, 0, reply
query: received unknown cdma index %d, %lu, cell, %s, location, %s
query: received cdma index %d, %lu, cell, %s, location, %s
query: received unknown lte index %d, %lu, cell, %s
query: received lte index %d, %lu, cell, %s, location, %s
download payload size is %lu bytes
query: response_error, domain %s code %ld
WltALS, error, tag, %d, RTT, %.1lf, error, %s, %ld, type, %c%c
GnrALS, error, tag, %d, RTT, %.1lf, error, %s, %ld, type, %c%c
GnrWifi, background, 0, error
query: received error for unknown requester type (tag %d)
query: unknown cell - MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
query: unknown scdma cell - MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
zero entries in range to process
query: received wifiResponse, %lu, unknown wifi - MAC, %s, infoMask, 0x%x, hasInfoMask, %d
query: server %s / %s (requires cert %d timeout %d log request %d / response %d)
query: queryLocation, location, %14.8lf, %14.8lf, timeout, %d
query: could not get client certificates
query: using client-side cert
query: queryLocation, tag, %d, location, %14.8lf, %14.8lf, timeout, %d, payload, %lu, reachability, %d
GnrALS, request, %d, location, %0.2lf, %0.2lf, reach, %d
query: unifiedQuery, %lu, %lu, %lu, %lu, wifis, %lu, timeout, %d
query: don't have derivedMcc - using %d
Bytes: query: unifiedQuery, query, cell-cdma, index, %u, %lu, key, %s
query: Adding single derivedMcc %d
query: Adding multi derivedMcc %d
query: max cells %d exceeded for cell %d - not querying %03d %03d %03d %03d %03d %03d %03d%03d 
Bytes: query: unifiedQuery, query, cell-gsm, index, %u, %lu, key, %s
query: max cells %d exceeded for cell %d - not querying MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
Bytes: query: unifiedQuery, query, cell-scdma, index, %u, %lu, key, %s
query: max cells %d exceeded for cell-scdma %d - not querying MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
Bytes: query: unifiedQuery, query, cell-lte, index, %u, %lu, key, %s
query: ignore cell, max cells %d / %d exceeded for cell, %s
Bytes: query: unifiedQuery, query, wifi, index, %u, %lu, key, %s
query: max wifis %d exceeded for wifi %d - not querying MAC,%s,
Bytes: query: tag, %d, GSMs, %lu, CDMAs, %lu, LTEs, %lu, surrounding, %lu, wifis, %lu, surrounding, %lu, payload, %lu, reachability, %d
WltALS, request, %lu, surrounding, %lu, tag, %d
GnrALS, request, %d, cellGLC, %lu, %lu, %lu, %lu, wifi, %lu, %lu, reach, %d
Unimplemented CDMA NetworkLocationRequester
nearby data query not supported
WIFI_LOC: filtered by location hint, ap, %s, hint, %s
WIFI_LOC: revert hint, %lu, %lu
WIFI_LOC: apply b360repr, min, %.1lf, max, %.1lf
WIFI_LOC: apply b360repr, %14.8lf, %14.8lf
Overriding clear tables by age to %d for %s
could not bind
Bounding boxes not enabled for this database
Couldn't bind row ID %lld
can't create bounding box for location, %s
Couldn't bind bounding box %lld (<%+.8f,%+.8f>,<%+.8f,%+.8f>)
Could not prepare cached insert statement
could not bind %.3f <%+.8f,%+.8f> %.2f
Could not prepare cached update statement
failed to setLocation, numModRows, %d, %s
Can't clear location for read-only database
could not bind %lld
Can't clear locations in read-only database
Can't clear locations by age in read-only database
{"msg":"CLLocationDatabase::clearLocationsByAge", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f", "age_s":"%{public}.09f", "tableName":"%{private}s"}
Clearing locations older than %.3f from %s
%lld total entries deleted
Performing incremental vacuum on %s
No associated bounding box table
Couldn't create bounding box deletion trigger for table %s
initalizing database table, %s
issue getting scoped statement
set suggested action, %s
cannot get record of suggested action without identifier
delete all suggested actions not considered since, %f
CMGyroBiasEstimator::CMGyroBiasEstimator: cold start
CMGyroBiasEstimator::CMGyroBiasEstimator: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e
CMGyroBiasEstimator::reset: cold start
CMGyroBiasEstimator::reset: warm start [%f < %f]
CMGyroBiasEstimator::reset: dbias.x,%.2e,.y,%.2e,.z,%.2e,P.x,%.2e,.y,%.2e,.z,%.2e
CMGyroBiasEstimator::CMGyroBiasEstimator: biasFitReset
CMGyroBiasEstimator::feedGyro: converged!
Couldn't get time zone for point <%+.8f,%+.8f>
Point <%+.8f,%+.8f> not in any time zone polygon; closest polygon is %f meters away; default time zone is %s, but we're not using it
Not in any polygons; falling back to closest nearby time zone ID %lld (distance %f, %ld possibilities)
Point <%+.8f,%+.8f> not in any time zone polygon; default time zone is %s, but we're not using it
Point <%+.8f,%+.8f> in multiple time zone polygons
Could not get time zone name for zone ID %lld
Couldn't get list of candidates for point <%+.8f,%+.8f>
Couldn't determine if point <%+.8f,%+.8f> is in polygon %lld
Getting polygons for point <%+.8f,%+.8f> acc %.2f
fBoundingBoxesSelectNearbyStatement not available - rtree module missing or db unavailable
Ignoring bogus location <%+.8f,%+.8f>
Could not bind <%+.8f,%+.8f> - <%+.8f,%+.8f>
fNamesSelectStatement not available - rtree module missing or db unavailable
Could not get polygon name
No entry in names table for polygon ID %lld
fNamesSelectOnNameStatement not available - rtree module missing or db unavailable
Could not bind %s
Polygon %s not found in names table
No bounding box found for polygon %s
fPointsSelectStatement not available - rtree module missing or db unavailable
Could not bind %lld
No points data found for polygon Id %lld
Natalie Model, Static, step count: %d, step distance: %f, activity: %d, type: %d, vm: %f
%.2lf,shallPropagate,fLastVelocityNotificationTime,%.2lf,fLastAccessoryLocation,%.2lf,fLastGPSLocationTime,%.2lf
Save GPS time,%.1lf
Saved Accessory location at time,%.1lf,%d,%.8lf,%.8lf
Integrity Monitoring is Disabled
GpsWifiKeepAlive is no longer supported! If you want to leave all providers actively subscribed to, set DynamicLocationProviders to false
UseLocationKFAsDefaultProvider is set
CLMM, EnableMapMatching, %d
CLMM, ForceMapMatching, %d
dynamic location providers %d, accuracy %.2f, gps test mode %d, always notify %d
RAVEN: Use Raven Estimator Output: %d
RAVEN: Ignore Dense Urban Check: %d
RAVEN: Force Pedestrian Mode: %d
RAVEN: Logging: %d
RAVEN: Data Feed: %d
RAVEN: Enable Step Count Feed: %d
RAVEN: Enable Altimeter Feed: %d
RAVEN: Raven Estimator Enabled: %d
could not create tech status run loop source
could not create check active run loop source
CLIENT: registerForNotificationInternal, notification, %d, %s, granularity, %d
Before register, required granularity is %d; active granularity is %d
BATCH: unsupported platform
CLMM, RunMapMatching is turned on
registering notification %d with %s location provider
wifi location batch, unsupported platform
CLIENT: registerForNotificationInternal, propagate desiredAccuracy, %.1lf, name, %s, active, %d, operating mode %d
CLIENT: unregisterForNotificationInternal, notification, %d, %s, granularity, %d
Unregistered for notification %d; new required location granularity is %d
After unregister, required granularity is %d; active granularity is %d
CLMM, RunMapMatching is turned off
unregistering notification %d with %s location provider
CLIENT: unregisterForNotificationInternal, propagate desiredAccuracy, %.1lf, name, %s, active, %d
Device going to sleep, stop location unavailable timer
Device wake setting location unavailable timer to fire at %.3f
Unhandled status notification %u
@ClxVersion, Init, os, %{public}s, model, %{public}s, build, %{public}s, triage, %{public}d
shutting down %s location provider
Starting all location providers up to threshold %d, desiredAccuracy, %.1lf
@ClxProvider, start, %s, granularity, %d, active, %d, desiredAccuracy, %.1f
Not starting %s location provider; doesn't meet threshold requirements (fRequiredLocationGranularity=%d, fActiveLocationGranularity=%d)
Stopping all location providers above threshold %d
@ClxProvider, stop, %s, granularity, %d, active, %d, desiredAccuracy, %.1f
Stopping all location providers that are worse than kDynamicLocationProvider %d
got better location provider %d,NOT stopping worse location provider %d,isAccessorySpecialCase,1
got better location provider %d, stopping worse location provider %d
lost location from kDynamicLocationProvider=%d, restarting all worse providers
restarting worse location provider kDynamicLocationProvider=%d
CLIENT: startLocation, registerForNotification, start reg info, client, %p, desiredAccuracy, %.1lf, name, %s
registering %s location provider as a bystander only
starting %s location provider in mode %d
Unregistering %s location provider as bystander
stopping %s location provider
catch-all location unavailable timer fired
Location unavailable timer fired, but required granularity is none; ignoring
Location unavailable fired while sleeping
Lifespan timer fired
Lifespan timer fired, but required granularity is none; ignoring
Current location is not expired; not searching for alternative locations
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf
could not find provider from list
Got location unavailable notification for non-active provider %s; ignoring
Got location unavailable notification for %s location provider
location still available from %s (potentially <%+.8f,%+.8f> lifespan %.3fs age %.3fs)
No location is available from any provider; notifying clients
Got location <+%.8f,%+.8f> for non-active location provider %s; ignoring
Got future location <+%.8f,%+.8f> from provider %s (age %.3fs); correcting to %.3fs
Got expired location <+%.8f,%+.8f> from provider %s (age %.3fs lifespan %.3fs); ignoring
current most confident provider is %s at %d
new %s location <+%.8f,%+.8f> acc %.2f conf %d conflicts with confident %s location <+%.8f,%+.8f> acc %.2f conf %d from %.3fs ago (distance %.2fm)- discarding
new %s location <+%.8f,%+.8f> acc %.2f conf %d conflicts with current %s location <+%.8f,%+.8f> acc %.2f conf %d (distance %.2fm) - notifying
new %s location <+%.8f,%+.8f> acc %.2f conf %d is coarser and agrees with current %s location <+%.8f,%+.8f> acc %.2f conf %d (distance %.2fm) - discarding
new %s location <+%.8f,%+.8f> acc %.2f conf %d conflicts with current %s location <+%.8f,%+.8f> acc %.2f conf %d (distance %.2fm) - discarding
new %s location <+%.8f,%+.8f> acc %.2f conf %d is coarser than current %s location <+%.8f,%+.8f> acc %.2f conf %d (distance %.2fm) - discarding
got accessory location,stopping everything less preferred,isAccessoryChinaShifted,%d,isPropagatedSolution,%d
changing to provider %s from %s
location rejected by IM,locationType,%d,lat,%.8lf,lon,%.8lf
location rejected by KF,%d,%.8lf,%.8lf
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.3lf,Course,%.5lf,Confidence,%d,Lifespan,%.3lf,LocationTimestamp,%.3lf,Age,%.3lf,Altitude,%.3lf,AltitudeAccuracy,%.3lf,SpeedAccuracy,%.3lf,CourseAccuracy,%.5lf,timestampGps,%.3lf,integrity,%d
Notifying using Raven; but no location available!
Notifying using location KF; but no location available!
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,SpeedAccuracy,%.3f,CourseAccuracy,%.1f,timestampGps,%.3lf,integrity,%d
@ClxClient, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,Altitude,%.1f,AltitudeAccuracy,%.1f,LocationTimestamp,%.3f,Age,%.3f,timestampGps,%.3lf,floor,%d,SpeedAccuracy,%.3lf,CourseAccuracy,%.1lf,integrity,%d,rawLat,%.7lf,rawLon,%.7lf,rawCourse,%.2f,refFrame,%d,rawRefFrame,%d,propagated,%d
{"msg":"Notifying clients with location", "location":"%{private, location:CLClientLocation}.*P", "":"", "notification":"%{public, location:CLLocationProvider_Type::Notification}lld"}
Notifying clients of an already-expired location (from %.3fs ago)
GPSODOM,timestamp,%.3lf,timestampGps,%.3lf,odometer,%.3lf,deltaDist,%.3lf,deltaDistUnc,%.3lf,lat,%.8lf,lon,%.8lf,hunc,%.3lf,alt,%.3lf,vunc,%.3lf,speed,%.3lf,sunc,%.3lf,course,%.3lf,cunc,%.3lf
Accessory-DR,%.2lf,Propagating accessory solution,lastAccessoryTime,%.2lf,lastGPSTime,%.2lf
Accessory,propagated on-device GPS,lat,%.7lf,lon,%.7lf,hunc,%.1lf
Setting simulation to %d for all location providers
Posting tech status change notification
Notifying clients of providers active update to %d
Clearing all location data from the controller
Location Services reset, clearing local cache
ClxNotify, LpReset, 0
Location Services state changed, clearing local cache
CLIENT: clients, %d, %d, %d, desiredAccuracy, %.1lf
@ClxEvent, %{public}s, %{public}d, last, %{public}.1f
@ClxVersion, Timer, os, %{public}s, model, %{public}s, build, %{public}s, triage, %{public}d
ClxSnapshot, %{public}s, %{public}d, last, %{public}.1f
WIFI_LOC: fMinIntervalBetweenLocationRequests = %f
WIFI_LOC: fMinIntervalBetweenScanCalculations = %f
TlurTest, TestAPs, %d
WIFI_LOC: fIsUseNetworkLocationProvider = %d
WIFI_LOC: getCombinedDesiredAccuracy, no location clients, desiredAccuracy, %lf
WIFI_LOC: updating reginfo for, client, %d, from clientDesiredAccuracy, %.1lf, desiredAccuracy, %.1lf
WIFI_LOC: getCombinedDesiredAccuracy, returning, desiredAccuracy, %lf
WIFI_LOC: wifi, updateRegistrationInfoForClient, desiredAccuracy, %.1lf
WIFI_LOC: registerForNotificationInternal, notification, %d, %s, desiredAccuracy, %.1lf
WIFI_LOC: wifi is currently powered on, scanning to get wifi location
WIFI_LOC: wifi is currently powered off, cannot get wifi location
WIFI LOC: isPassiveScan, %d
WIFI_LOC: reset
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TTF,%.3lf,sinceReg,%.3lf,Confirmed,%d,Altitude,%.2lf,VerticalAccuracy,%.2lf,locationSimulated,%d,notifiedLocationAge,%lf,integrity,%d
@ClxWifi, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, course, -1.0
WIFI_LOC: kNotificationLocationUnavailable, last known, %s
@ClxWifi, Fix, 0, ll, N/A
TlurEmer, refreshLoc, aps, %d, accu, %0.2f, state, %d
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Confidence,%d,TotalAPs,%d,SolutionAPs,%d,AccuracyGoal,%.2f,AccuracyMin,%.2f,AccuracyMax,%.2f,Altitude,%.2lf,VerticalAccuracy,%.2lf,
WIFI_LOC: onWifiTimer, sinceLastScanRequest, %.1f, lastScanRequestTimestamp, %.1lf, isWifiPowered, %d, erroredRequestType, %d
TlurError, Re-Scan, %d
@WsbGroup, add, %{public}lu, aps, %{public}lu, time, %{public}.1f
@WsbGroup, last, %{public}lu, aps, %{public}lu, time, %{public}.1f
@WsbCalc, groups, %{public}lu, isReproc, %{public}d, reprocGroups, %{public}lu, unknownAPs, %{public}lu
@WsbIter, AP, %{private}s, time, %{public}.1f, locKnown, %{public}d, hAcc, %{public}.1f, size, %{public}lu
@WsbLoc, fix, aps, %{public}lu, reproc, %{public}d, time, %{public}.3f, hAcc, %{public}.1f, %{public}d, ll, %{private}.3lf, %{private}.3lf
@WsbLoc, none, aps, %{public}lu, %{public}lu, reproc, %{public}d, time, %{public}.3f, hAcc, %{public}.1f
@WsbReproc, drops, groups, %{public}d, aps, %{public}d
@WsbReproc, nofix, groups, %{public}lu, time, %{public}.3f, unknownAPs, %{public}lu, %{public}lu
@WsbReproc, delete, %{public}d, maxAPs, remain, %{public}ld, dropAPs, %{public}d
Invalid batched location, (<%+.8f,%+.8f>)
Batched locations are supposed to be ordered from oldest to more recent,t0,%lf,t1,%lf
@WsbCalc, isReproc, %{public}d, notify, %{public}lu, reproc, %{public}lu, aps, %{public}lu, nextquery, %{public}.1f
@WsbALS, dtcheck, %{public}.1f, thresh, %{public}.0f
@WsbALS, settime, empty, %{public}.1f
@WsbReproc, reason, %{public}s, size, %{public}lu
@WsbReproc, deltick, %{public}.1f, count, %{public}d, dt, %{public}.1f
@WsbReproc, discard, %{public}.1f, count, %{public}d
@WsbReproc, delete, %{public}d, newsize, %{public}lu
@WsbALS, reason, %{public}s, size, %{public}lu, isquery, 1
@WsbALS, query, %{public}s, size, %{public}lu, tag, %{public}d, next, %{public}.1f
WIFI_LOC: Wifi powered off
WIFI_LOC: requestLocationUpdate, sinceLastScanRequest, %.1lf, sinceLastScanResult, %.1lf, isWifiPowered, %d, currentRequest, %s
WIFI_LOC: requestLocationUpdate, newRequest, %s, input, %d
WIFI_LOC: aged location request, %s
WIFI_LOC: location request already in progress, requestAge, %.1lf, fWifiScanInterval, %.1lf, currentRequest, %s
WIFI_LOC: reqCheck, inprogress, %d, typecomp, %d, priority, %d, cpi, %d
WIFI_LOC: requestLocationUpdate, allowing another Atypical request, %d, sinceLastScanRequest, %.2lf, %.2lf
WIFI_LOC: cached calculation, numOfAPsInSolution, %d, isStopCriteriaSatisfied, %d, loc, %s
WIFI_LOC, scan request blocked
TlurEmer, Request, %d, urgent, %d, tte, %.1f, type, %s
TlurAssoc, Request, %d, urgent, %d, type, %s
WltStep, ScanReqLoc, %d, %s, incoming, %d
WIFI_LOC: requestLocationUpdate, startScan, %d, %s, isUrgent, %d, lowPriority, %d, isPassiveScan, %d
WIFI_LOC: In emergency mode, scanning %.2lf
WIFI_LOC: currently associated with, %s, %d, scan interval, %.3lf
WIFI_LOC: setNextScanInterval, fCurrentAssociatedAP, %s
WIFI_LOC: setNextScanInterval, isAssociated, %d, isAssociatedScanInterval, %d, fWifiScanInterval, %.1lf, motion.state, %d, '%s', numOfAPsInScan, %lu
WIFI_LOC: issueNextScan, numOfAPsInSolution, %d, scanType, %d, %s, loc, %s
WIFI_LOC: issueNextScan, currentRequest, %s
TlurState, Skip 2nd scan
WIFI_LOC: issueNextScan, startScan, %d, %s, lowPriority, %d, isPassiveScan, %d
WltStep, ScanReqNext, %d, %s, passive, %d
WIFI_LOC: could not get an accurate wifi location
WIFI_LOC: scheduleNextTimer, reason, %s, timeInterval, %.2lf
WIFI_LOC: onWifiNotification, notification, %d, kNotificationPower, isWifiPowered, %d
WIFI_LOC: location services are disabled, ignore scan result, notification type, %d
WltNotify, %d, %s, clients S/B, %d, %d
WIFI_LOC: onWifiNotification, notification, %d, kNotificationScanReady, isHaveLocationClients, %d, %d
WIFI_LOC: onWifiNotification, notification, %d, kNotificationScanErrorBusy, isAssociated, %d, isHaveLocationClients, %d, isHighIntegrityInProgress, %d
TlurError, ScanErrorBusy, %s, retry in, %f
WIFI_LOC: onWifiNotification, notification, %d, kNotificationScanCache
WIFI_LOC: onWifiNotification, notification, %d, kNotificationPower
WIFI_LOC: onWifiNotification, notification, %d, kNotificationScan, scanType, %d, %s, inProg, %d
WIFI_LOC: scan result, scanType, %d, %s, currentRequest, %s
TlurCheck, scan notify, erroredRequestType, %d
TlurState, ScanNotify, %s, aps, %lu, state, %d, tte, %.1f
TlurState, unexpected emergency state, onWifiNotification, %d, WARNING
TlurState, Skip Process, %s
WltStep, ScanResultAps, %lu, clients?, %d, doCalc, %d, knownAps, %lu
WIFI_LOC: onWifiNotification, notification, %d, kNotificationScanError
TlurError, ScanError, %s, retry in, %f
WIFI_LOC: terminate current location request, %s
WIFI_LOC: scan failed, scheduling next scan at %.3fs out, type, %d
WIFI_LOC: just disassociated, scanning to update wifi location
WIFI_LOC: Simulation status changed; clearing previous locations and initiating new scan
WIFI_LOC: unhandled WifiService notification, %d
WIFI_LOC: accessPointsWithoutCachedLocation, fIsUseNetworkLocationProvider, %d, fIsUseTileManager, 1, size, %lu, start, locationHint, %s
WIFI_LOC: lookupScanResult, foundAPs, %lu, %lu, not_found_APS, %lu
WIFI_LOC: kNotificationScan, numOfAPsInSolution, %d, currentRequest, %s
WIFI_LOC: next scan in, %.3f, seconds
next scan is %.3fs away
priorSignalEnvironment,%d,newSignalEnvironment,%d
onDataProtectionNotification, %p, notification, %d
onTileDownloadNotification, %p, notification, %d
WIFI_LOC: onClientNotification, %p, notification, %d
WIFI_LOC: kNotificationReset
@WsbReproc, delete, %{public}ld, reset
WIFI_LOC: kNotificationLocationServicesStatus, areLocationServicesEnabled, %d, wsbgroups, %ld
WIFI_LOC: location services off, delete location state
@WsbReproc, delete, %{public}ld, toggle, %{public}d
TlurEmer, ToggleOn, tte, %.1f
WIFI_LOC: updateAssociatedAccessPoint: %s
WIFI_LOC: updateAssociatedAccessPoint, check associated AP
WIFI_LOC: updateAssociatedAccessPoint, gotLocation, %d, associatedTo, %s
WIFI_LOC: updateAssociatedAccessPoint, query associated AP, %s, tag, %d
WIFI_LOC: no location clients, ignoring notification
WIFI_LOC: onNetworkLocationNotification, %d, kNotificationQueryResponseError, tag, %d, %d, %d
WIFI_LOC: location services disabled
WIFI_LOC: onNetworkLocationNotification, %d, kNotificationQueryResponseFinishedWifis, scanAge, %.2lf, interval, %.2lf, tag, %d, aps, %d, highinteg, %d
WIFI_LOC: scan outdated, %.2lf, %.2lf, try to rescan... 
TlurEmer, unexpected emergency state, onNetworkNotification, %d, WARNING
TlurState, AlsReply, aps, %d, tag, %d, state, %d, queryType, %d, tte, %.1f
@WsbALS, tags, %{public}d, %{public}d, groups, %{public}lu, unknowns, %{public}lu
WIFI_LOC: onNetworkLocationNotification, %d, kNotificationQueryResponseFinished, scanAge, %.2lf, interval, %.2lf, tag, %d, cells, %d, wifis, %d
WIFI_LOC: kNotificationReachability, previous, %d, current, %d, aboutToSleep, %d
WIFI_LOC: kNotificationWake
WIFI_LOC: onStatusNotification, kNotificationWake, notification, %d
WIFI_LOC: onLocationNotification, leech location, %s
WIFI_LOC: low reliability wifi location, not using as a hint, %s
WIFI_LOC: onLocationNotification, unknown notificaiton, %d, %s
HELO not enabled (ECPI setting in carrier bundle). Not attempting to turn ON wifi if it is OFF
GPS Test mode. Not attempting to turn ON wifi if it is OFF
TlurEmer, StateChange, new, %d, prev, %d, now, %d
TlurEmer, Wifi, On
TlurEmer, EmergencyOff, ttff, %.1f, session, %.1f
TlurEmer, Wifi, Off
%s is deprecated. setting this has no effect
CELL_LOC: Invalid rat, %d, %s
Taking power assertion due to session start.
Releasing power assertion due to session end.
CLMotionStateMediator is shutting down.
Receiving addClientForPrepareSessionEnd after client list has been deleted!
Client for PrepareSessionEnd of session type %d does not exist!
Prepared session client, end for session, %d, duration (s), %f, success, %d
Setting activity override, %d, session, %lu,sessionId,%s,location,%lu,length,%f
Clearing activity override
WORKOUT event,time,%.3f,type,%lu
gender,%d,height,%.2f,weight,%.1f,age,%.0f,pal,%.0f,hrmin,%.0f,hrmax,%.0f,vo2max,%.0f,condition,%d
Failed to updateRegistrationInfoForClient %p (%d)
provider %s disabled - will run but not send locations to clients
 Location Provider (%s) set to (%d)
CLIENT: registerForNotification, register for notification, %d, %s, desiredAccuracy, %.1lf, operatingMode, %d
CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s
CLIENT: updateRegistrationInfoForClient, client, %d, notification, %d, %s, from desiredAccuracy, %.1lf, to, %.1lf
CLIENT: updateRegistrationInfoForClient, no notification, client, %d, notification, %d, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,LocationTimestamp,%.3f,Age,%.3f,Lifespan,%.3f,
Ignoring location for %s
Provider %s is notifying clients (type=%d) of an invalid position (<%+.8f,%+.8f>)
Provider %s is notifying clients (type=%d) of an invalid altitude %.2f (accuracy %.2f)
Provider %s is notifying clients (type=%d) of a <0,0> position
Should not be sending coarse and fine notifications directly
Sending location unavailable notification through for %s
Sending through simulated location for %s
Simulation is now %s for %s
Notifying
Database is not valid; not initializing
failed to bind %s
CELL_LOC: fInsertStatement [%s]
reading from %s
data source closed
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%.2f,Course,%.2f,
platform supports WiFi location monitoring - creating bounding boxes, tableName, %s
read only database - not creating bounding boxes, tableName, %s
platform does not support WiFi location monitoring - not creating bounding boxes, tableName, %s
fBlacklistAPByScore = [%s]
Fence: Where is fBlacklistAPByScore
Fence: blacklistAPByScore, failed bind, %s, error, %s
Fence: blacklisted AP by score, mac, %s
Fence: blacklistAPByScore, failed execute, %s, ret, %d, error, %s
Coarse wifi query center, %+.8lf, %+.8lf, nw, %+.8lf, %+.8lf, se, %+.8lf,%+.8lf, radius, %.8lf, bb, %d
fSelectCoarseWifiStatementRTree = [%s]
fSelectCoarseWifiStatement = [%s]
BIND FAILED : coarse wifi query for <%+.8f,%+.8f> between <%+.8f,%+.8f> and <%+.8f,%+.8f> (%.2f from target)
Unknown WiFi AP. %s
Coarse wifi query center, %+.8lf, %+.8lf, nw, %+.8lf, %+.8lf, se, %+.8lf,%+.8lf, radius, %.8lf, aps, %ld
invalid return value getting size of WifiLocation table
NETWORK: fIsIgnoreServerWifiUpdates = %d
NETWORK: fIsUseEVDOTransmittedLocations = %d
NETWORK: fIsExponentialRetryTimer, %d
fServerRefreshInterval, %.1lf
Scheduling purge for %.3f and checking every %.3fs for older than %.3fs
NETWORK: stats: cellsQueried, %d, wifisQueried, %d, locationsQueried, %d, totalRequests, %d, totalRequestsSuccessful, %d
GnrALS, block, %d, nearbyRequest, %d, compNearby, %d
GnrWifi, background, 1
NETWORK: check reschedule, fQueryRetries, %d, sinceLastRetry, %.1lf
cell %03d %03d 0x%x 0x%x is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote - querying
CELL_LOC: found, %d, server, %d, cell, %s, location, %s
CELL_LOC: scdma, found, %d, server, %d, cell, %s, location, %s
CELL_LOC: best match cell, %s, bestMatch, %d
CELL_LOC: SCDMA full match 0, %s, %s
CELL_LOC: SCDMA match 1, %s, %s
CELL_LOC: SCDMA match 2, %s, %s
CELL_LOC: SCDMA match 3, %s, %s
CELL_LOC: SCDMA match 4, %s, %s
CELL_LOC: SCDMA NO MATCH, %s
CELL_LOC: GSM full match 0, %s, %s
CELL_LOC: GSM match 1, %s, %s
CELL_LOC: GSM match 2, %s, %s
CELL_LOC: GSM match 3, %s, %s
CELL_LOC: GSM match 4, %s, %s
CELL_LOC: GSM NO MATCH, %s
CELL_LOC: LTE full match 0, %s, %s
CELL_LOC: LTE match 1, %s, %s
CELL_LOC: LTE match 2, %s, %s
CELL_LOC: LTE match 3, %s, %s
CELL_LOC: LTE match 4, %s, %s
CELL_LOC: LTE NO MATCH, %s
CELL_LOC: match 8 (%s)
CELL_LOC: match 5.1 (%s)
CELL_LOC: match 7 (%s)
CELL_LOC: match 4.1 (%s)
CELL_LOC: match 4.2 (%s)
CELL_LOC: match 3 (%s)
CELL_LOC: match 2 (%s)
CELL_LOC: match 1 (%s)
CELL_LOC: match sector location, %s, location, %s
CELL_LOC: avoid using transmitted locations
CELL_LOC: NO MATCH (%s)
CELL_LOC: found in DB (%s) loc (%lf %lf) acc (%lf)
CELL_LOC: cell %03d %03d 0%03d %03d %03d is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote - not querying, server doesn't server these
CELL_LOC: cell, %s, has local, but no remote -  pending query
CELL_LOC: cell, [%s], is local <%+.8f,%+.8f> remote <%+.8f,%+.8f> %.2fm apart - using local
CELL_LOC: cell, %s, has local, but no remote -  querying
Location Services disabled, not storing location entry
in private location mode; not querying for unknown cdmaCells or unknown wifis
Location Services disabled, not querying location
NETWORK: block Gizmo ALS locations
NETWORK: can't query, no reachability, %d
CELL_LOC: cdma cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: cdma cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: cdma cell, %s, re-querying
CELL_LOC: gsm cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: gsm cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: gsm cell, %s, re-querying
CELL_LOC: scdma cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: scdma cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: scdma cell, %s, re-querying
CELL_LOC: lte cell, %s, last updated %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: lte cell, %s, last queried %.3f ago (%.3fs minimum), not re-querying
CELL_LOC: lte cell, %s, re-querying
CELL_LOC: query gsm cells, %lu
CELL_LOC: query scdma cells, %lu
CELL_LOC: query cdma cells, %lu
CELL_LOC: query lte cells, %lu
CELL_LOC: query wifi cells, %lu
WIFI_LOC: isPiggybackNearby, %d, %d, isBroadConnection, %d, nearbyWifis, %d, nearbyCells, %d
GnrWifi, background, 0, empty
%ld pending wifis, clearing
pending %s from %.3f (%.3fs ago)
CELL_LOC: %ld pending gsm cells, clearing
CELL_LOC: pending gsm cell, %s, from, %.3f, %.3f, ago)
CELL_LOC: %ld pending scdma cells, clearing
CELL_LOC: pending scdma cell, %s, from, %.3f, %.3f, ago)
CELL_LOC: %ld pending cdma cells, clearing
CELL_LOC: pending cdma cell, %s, from, %.3f, %.3f, ago)
CELL_LOC: %ld pending lte cells, clearing
CELL_LOC: pending lte cell, %s, from, %.3f, %.3f, ago)
NETWORK: requery, %lu, %lu, %lu, %lu, %lu, items, fQueryRetries, %d, fLastRetryTimestamp, %.1lf
NETWORK: in private location mode; not querying for unknown cells or unknown wifis
NETWORK: Location Services disabled, not querying location
NETWORK: re-querying cells, %lu, %lu, %lu, %lu, wifis, %lu, retry count, %d
isBroadConnection, reachability, %d, %d, dataAccessTech, %d, %d, tunnel, %d, isBroadConnection, %d
in private location mode; not querying for unknown cells or unknown wifis
NETWORK: block Gizmo ALS nearbys
CELL_LOC: start sequence, This, %p
CELL_LOC: beginning cell database %s
CELL_LOC: ending cell database %s (%lu cells still pending)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,LAC,0x%x,CI,0x%x,
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d,Confidence,%d,Count,%d,lock,%d
CELL_LOC: server response cell(%s) loc (%lf %lf) acc(%lf)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,SID,%03d,NID,%03d,BSID,%03d
CELL_LOC: server response lte cell, %s, location, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,Confidence,%d,Count,%d,lock,%d
NETWORK: pending, known, before, %lu, cell, %s
NETWORK: pending, known, after, %lu, cell, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MCC,%03d,MNC,%03d,TAC,0x%x,CI,0x%x,
NETWORK: pending, unknown, before, %lu, cell, %s
NETWORK: pending, unknown, after, %lu, cell, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MAC,%s,infoMask,0x%x
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,MAC,%s,Confidence,%d,Altitude,%.2f,VerticalAccuracy,%.2f,Count,%d,Score,%d,Channel,%d,Altitude,%.2lf,reach,%d,infoMask,%u,lock,%d,isNearbyQuery,%d
Ignoring #als response, mac, %s, channel, %d, isNearbyQuery, %d, fDataProtectionEnabled, %d
Location Services disabled, not storing location entries
NETWORK: stats: onLocationRequesterResponse, %d
NETWORK: no response from server, reachability, %d, queryRetries, %d
NETWORK: data reachability is not available - not retrying
NETWORK: retry query, %d, %d
NETWORK: retry count %d exceeded %d - not retrying
NETWORK: query failed for nearbys - not retrying
NETWORK: query: finished, tag, %d, cells, %d, wifis, %d
NETWORK: onStatusNotification, kNotificationReachability, from, %d, to, %d, tunnel, %d
ClxLink, reach, %d, last, %d, retries, %d, tunnel, %d
trimming pending gsm, %lu, scdma, %lu, cdma, %lu, lte, %lu, wifis, %lu, to, %d
CELL_LOC: gsmCells, %lu, %lu, lteCells, %lu, cdmaCells, %lu
data protection currently enabled - don't request surroundings
query, broadDataConnection, %d, timeout, %d
NETWORK: query, cells, %lu, %lu, %lu, %lu, wifis, %lu
Location Services reset, clearing all local cache
Location Services disabled, clearing all local cache
onCompanionNotification, notification, %d
ClxLink, Nearby, %d
Data protection is now %s
Purging entries older than %.2fs.
NETWORK: onRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu
NETWORK: areQueryRetriesNeeded, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, currentRetry, %d, sinceRetrySequenceStart, %.2lf, needed, %d
NETWORK: scheduleRetryTimer, retry timer already scheduled
NETWORK: scheduleRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, timerInterval, %.1lf, isTimerNeeded, %d
NETWORK: cancelRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu
NETWORK: cancelRetryTimer, no retry timer
NETWORK: resetRetryCounters, sinceLastReset, %.1lf
NETWORK: resetRetryCounters, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, sinceLastReset, %.1lf
ignoring second MCC %d %d
NETWORK: cleaning, curEntryAge, %.1lf, ageThreshold, %.1lf
Failed to find entry from in-memory database, table, %s, type %s, rowid, %lld
Failed to save entry to persisted database, table %s
Successfully migrated %u rows from in-memory database to persisted for table %s
could not create path %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Sentence,"%s",
no reference time available, not sending reference time
location services is disabled, not sending reference location
no reference location available, not sending reference location
ephemeris %s not available
could not create input stream for ephemeris file, %s
could not create data from file %s
received an unknown location notification %d
Unable to open nmea fifo FD %d %s.
could not store stats data 
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,enabled,%d,event,%d
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,bundleIdApproved,%s,approved,%d,authorization,%d,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,reachability,%d,accessoryConnected,%d,powered,%d,gpsCoexWifi,%d,gpsCoexBt,%d,timestampEnd,%.3f,duration,%.3f,desiredAccuracy,%.2f,achievedAccuracy,%.2f,ttff,%.3f,ttffGps,%.3f,achievedSpeed,%.2f,autoStopped,%d,deferredLocations,%d,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,fenceRadiusMin,%.2f,fenceRadiusMax,%.2f,numFences,%d,numFencesRemoved,%d,slc,%d,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,eventType,%d,eventRadius,%.2f,eventDistance,%.2f,eventLatency,%.3f,eventMask,0x%x,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellsQueried,%d,wifisQueried,%d,locationsQueried,%d,totalRequests,%d,totalRequestsSuccessful,%d,wifiTilesDownloaded,%d,wifiTilesDownloaded3G,%d,wifiTilesCached,%d,cellTilesDownloaded,%d,cellTilesDownloaded3G,%d,cellTilesCached,%d,demTilesDownloaded,%d,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,totalScans,%d,triggeredScans,%d,totalScansS2,%d,scanFailures,%d,scanBusies,%d
GtsAwd, submit, metric.valid, %d, metric.timestamp, %.3f, metric.bundleId, %s, sessions, %d, empty, %d, completed, %d, errored, %d, syncedN, %d, syncedMBs, %d
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,attempts,%d,noMatch,%d,noData,%d,
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,timestampEnd,%.3f,duration,%.3f,uncalibrations,%d,achievedCalibration,%d,minMagnetometerMagnitude,%.1f,maxMagnetometerMagnitude,%.1f,gyroDataValid,%d,gyroAge,%d,gyroFactoryBias,%f,%f,%f,gyroFactorySlope,%f,%f,%f,gyroFactoryL2Error,%f,%f,%f,gyroDeltaBias,%f,%f,%f,gyroDeltaSlope,%f,%f,%f,gyroDynamicL2Error,%f,%f,%f,gyroDynamicMaxTemp,%d,gyroMagnitudeMax,%d,quality2DMin,%f,quality2DMax,%f,quality2DMean,%f,quality3DMin,%f,quality3DMax,%f,quality3DMean,%f,num2dTo3dTransitions,%d,num3dTo2dTransitions,%d,isLocationAvailable,%d,initState,%d,initAccuracy,%f,percentSession2D,%d,percentSessionUncalibrated,%d,percentSessionOther,%d,percentSessionStill,%d,percentSessionPedestrian,%d,percentSessionDriving,%d,percentSessionCycling,%d,percentSessionIndoor,%d,percentSessionDrivingHC,%d,coverKeyboardState,%d
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,motionType,%d,enabled,%d,
Max prototypes overriden to %d
metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,timestampEnd,%.3f,duration,%.3f,motionType,%d,numTriggers,%d,prototypes,%zu,%s
metric.valid,%d,metric.timestamp,%.3f,hoursElapsed,%d
metric.valid,%d,metric.timestamp,%.3f,step,%d,distance,%.2f,timeLength,%.2f,score,%.2f,trackdistance,%.2f,kfactor,%.2f,kfactorupdated,%.2f
metric.valid,%d,metric.timestamp,%.3f,imageCaptures,[%d,%d,%d,%d,%d,%d],endConditions,[%d,%d,%d,%d,%d,%d],biasChanges,[%d,%d,%d,%d,%d,%d,%d,%d],minDuration,%llu,maxDuration,%llu,meanDuration,%llu,minTemperature,%5.2f,maxTemperature,%5.2f
metric.valid,%d,metric.timestamp,%.3f,numSaturations,%d,meanDeltaTimeSaturationsMsec,%d,magMagnitudeMin,%d,magMagnitudeMax,%d,maxCalibrationQuality3D,%f,deltaBiasHighQuality3D,%d,deltaRadiusHighQuality3D,%d,numCoverAttachments,%d
metric.valid,%d,metric.timestamp,%.3f,gyroMagMin,%d,gyroMagMax,%d,minsGyroActive,%d
submitting metric %x for %s
stats: %s
stats: type, %d, %s, count, %d
unknown metric %x requested for %s
CLIENT: %d, registerForNotification, distanceFilter, %.1lf, checkInterval, %.1lf, sleepProof, %d, operatingMode, %d
CLIENT: Clearing cached notification for %d
CLIENT: register for notification, %d, %s
CLIENT: unregister for notification, %d, %s, wasRegistered, %d
<%+.8f,%+.8f> is stale from %.3fs ago, not using for distance filtering
distance filter %.2f not exceeded by <%+.8f,%+.8f> and <%+.8f,%+.8f> (distance %.2f)
Now registered for %s location notifications, operating mode %d
no more location clients - not re-registering
leaving location as it would turn on in %.3fs anyway
@ClxClient, accuracy, %{public}d, %{public}d, %{public}d, level, %{public}s, reg?, %{public}d
CLIENT: notification, %s, clients, %lu, distanceFilter, %.1lf, sleepProof, %d
Ignoring request for sleep-proof location updates with no check interval
CLIENT: distanceFilter, %.1lf, fDistanceFilter, %.1lf
minimum distance unchanged from %.3f, still requesting location at %.3f (%.3fs away)
minimum distance changed to %.3f from %.3f
turning off location requests and re-scheduling for %.3fs later
scheduling location requests for %.3fs later
no location currently available, starting it immediately
wake interval unchanged from %.3f, still waking at %.3f (%.3fs away)
wake interval changed to %.3f from %.3f
Cached location,%.8lf,%.8lf,HorAcc,%.1lf,Type,%s,Confidence,%d,Timestamp,%.3f,Lifespan,%.3f,Age,%.3f,integrity,%d
No valid last confident location
Traversing preload manifest file
Preload manifest tile size = %lu
failed to allocate transit tile
failed to decode transit tile protobuf, encrypted=%lu tile=%s
failed to get fields in manifest
ver,%d,x,%d,y,%d,generated,%.01lf,age,%.01f,ageThresh,%d
Reading new market, {%.06lf,%.06lf}, {%.06lf,%.06lf}
Adding new tile to market, [%.06lf,%.06lf]
loaded transit tile %s with %lu regions
unknown hardware type %{private}d
PLOS: ignoring hw. forceSupport,%d
#warning OBM, ignoring hw. forceSupport,%d
Natalie Model,OutdoorWheelchair, beginTime, %f, endTime, %f, duration(s), %f,gpsSpeed,%.2f, gpsAvail, %d, elevAvail, %d, pushVM,%.1f, verticalSpeed, %.3f, gradeType, %d, metsFromGps,%.1f, metsFromPushes, %.1f, mets, %.1f
Could not refresh settings
should not write to operator bundle
Received a route
Starting route without an appoximate location
Received a transit route
Received a navigation state change
Route type        : %s
Route origin      : %s
Route destination : %s
Route dest name   : %s
Route travel time : %.01lf
Transit Stop:
    LAT : %lf
    LON : %lf
Transit Link:
    ID  : %llu
    DEP : %lf
    ARR : %lf
    Stop From :
    Stop To :
        ID  : %llu
        LAT : %lf
        LON : %lf
Guidance Level   : %s
Navigation State : %s
Transport Type   : %s
legacy compass, interval (%.3f) gyro (%d)
Dumped compass cal database with id %s
Compass is requesting device motion with mode 0x%x
Notify after %.3f seconds of no event.
Type,%s,compassJustAlignedToStableField,%d,timestamp,%20.20f
Type,%s,magneticHeading,%20.20f,trueHeading,%20.20f,accuracy,%20.20f,magneticField.x,%20.20f,magneticField.y,%20.20f,magneticField.z,%20.20f,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,level,%d,magnitude,%20.20f,inclination,%20.20f,horizontal,%20.20f,timestamp,%20.20f
notified clients. sampleCount,%d,compass.compass.calibrationLevel,%d,compass.timestamp,%f
WIFI_LOC: failed to get power state
Overriding FenceStartDelay,%.2f.
Scheduling initialization delay,%.2f, silo,%p.
Initializing.
Already initialized.
Adding monitored region,%s.
Retrieved monitored regions,%lu, for bundle,%s.
Removing monitored region,%s.
Region,%s, has state,%d.
Unable to find region,%s, in the cache.
Authorization error,%d, while requesting state for region,%s.
Resuming monitoring for fence,%s.
Unable to monitor the zone for region,%s.
Already resumed monitoring for fence,%s.
Suspending monitoring for fence,%s.
Unable to unmonitor the zone for fence,%s.
Fence,%s, is not being monitored, the suspension request will be ignored.
Zone,%s, transitioned from state,%d, to state,%d, notifying all clients.
Launching application (if necessary),%s, for notification.
Reauthorization requested, forcing initialization.
Received display on notification.
Display turned on, notifying region,%s, has been entered.
Pending notification for fence,%s, state,%d, has expired.
Sending cached notification for fence,%s, state,%d, type,%d.
#warning: domain %s code %ld
not connected to wifi #tile header table
failed to select count(*) from wifi #tile header table
{"msg":"Usage of incorrect column to update timestamp", "column":"%{private}s", "event":"%{public}s", "condition":"%{private}s"}
failed to update timestamp of #tile header
failed to connect to wifi #tile header database
failed to connect to wifi #tile heeaders table
successfully created wifi #tile headers table
Natalie Model, Dancing Compendium METS, METS, %f
Elevation source switch, companionAvailable, %d, hasClients, %d
Take power assertion
Release power assertion
Update location authorization, current, %d, new, %d
Enable GPS; Start GPS subscription
Disable GPS; Stop GPS subscription
onCoarseElevation,startTime,%.3f,ascended,%d
Received unhandled notification, %d
Received location notification, %d
Location batch notification size %ld
Location notification size 1
Workout elevation suppressed from, %.3f, to, %.3f
onElevation,startTime,%.3f,ascended,%d,descended,%d
onCompanionNotification -- Received type: %d, distance, %.8f, startTime, %.8f, gps altitude, %.8f, odometer, %.8f, accuracy, %.8f, gpsSpeed, %.8f, gpsSpeedAccuracy, %.8f, timestampGps, %.8f, rawSpeed, %.8f, originDevice, %d
Current odometer sample fails time check. Gps,%.2lf,%.2lf,startTime,%.2lf,%.2lf,odometer,%.2lf,%.2lf
Source may have reset. Gps,%.2lf,%.2lf,startTime,%.2lf,%.2lf,odometer,%.2lf,%.2lf
Odometer source change,previous,%lf,current,%lf
Drop entry! distance, %.8f, startTime, %.8f, gps altitude, %.8f, odometer, %.8f, accuracy, %.8f, gpsSpeed, %.8f, gpsSpeedAccuracy, %.8f, timestampGps, %.8f, rawSpeed, %.8f, originDevice, %d, locationType: %d
Notifying odometer clients, distance, %.8f, startTime, %.8f, gps altitude, %.8f, odometer, %.8f, accuracy, %.8f, gpsSpeed, %.8f, gpsSpeedAccuracy, %.8f, timestampGps, %.8f, rawSpeed, %.8f, originDevice, %d
SessionStats,%s,%f,%s,%f,%s,%u,%s,%u,%s,%u,%s,%f,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u,%s,%u
#authsync addAuth %{public}s %{public}u %{public}d
authsync: Setting location services to %u
#authsync addAuth using key %{public}s
#authsync updateAuth %{public}s %{public}u %{public}d
authsync: Updating location services to %u
#authsync updateAuth using key %{public}s
#authsync deleteAuth using key %{public}s
#authsync deleteAllAuth
{"msg":"#usesync Couldn't get nvp", "client":"%{public}s"}
{"msg":"#usesync Merging remote location usage", "client":"%{public}s"}
{"msg":"#usesync Expected a start time xor a stop time", "start time_s":"%{public}.09f", "stop time_s":"%{public}.09f", "service":"%{public}lu"}
{"msg":"#usesync Starting remote location service", "client":"%{public}s", "start time_s":"%{public}.09f", "service":"%{public}lu"}
{"msg":"#usesync Stopping remote location service", "client":"%{public}s", "stop time_s":"%{public}.09f", "service":"%{public}lu"}
{"msg":"#usesync Didn't expect a start and stop time in usage dictionary", "data":"%{public}@"}
{"msg":"#usesync Cannot prompt on this device", }
#authsync deleteObject: %{public}s
#authsync sending kNotificationReset to the watch
#authsync received kNotificationReset from the companion
{"msg":"#usesync Dropping unsupported request", "type":"%{public}d"}
{"msg":"#usesync Cannot prompt", "type":"%{public}d"}
{"msg":"#usesync Requesting when in use", "client":"%{public}s"}
#warning Cannot request always upgrade for client, %{public}s, client is not authorized when in use.
last improve accuracy notification for %s, %f, retry interval, %f
clear %s improve accuracy notification
could not store clients data
#authsync initializing sync store
#authsync isWatch: %{public}d, isCompanion: %{public}d
Could not register for lock state darwin notification error %{public}d
Could not register for homescreen unlocked darwin notification error %{public}d
#warning Maximum location services enabled prompts per application overridden to %{public}d
airplane mode enabled, %d.
failed to fetch airplane mode state.
#warning Can't migrate "%{public}s" to "%{public}s": client already exists with an auth of "%{public}d"
Can't migrate "%{public}s" to "%{public}s": NVP failure
Migrated "%{public}s" to "%{public}s"
"%{public}s" not found, skipping migration
#warning Can't get clients for filing crash-grace CLInUseAssertions
#warning Can't get client state for key:%{public}s to file crash-grace CLInUseAssertions
Client %s had ongoing background location, taking temporary crash-grace CLInUseAssertion
Sending app status change notification
#warning no watchdog event from %{public}s, deleting
Client %{public}s connected
Got disconnection for unknown client
Client %{public}s disconnected
#warning location services settings are frozen by restrictions - resetting
resetting and disconnecting all clients from daemon
Client %{public}s missing for authorization update, but didn't we just create it?
Considering whether to mark client, %s, for always power use
Not marking client %s as having used Always-powers (not Always authorized (%s))
active location client %s retrieved location
non-active location client %s retrieved location, updating stop time
currently %{public}lu non-system location clients
client,%s, service,%lu, is already active.
non-active client,%s, service,%lu, updating stop time
Service: name, %s, type, %s, active, %d
Service: name, %s, type, %s, marked as used
couldn't get keys for client dictionary
Wakeup Launchd Managed Client: <%{public}s>
Can't find %{public}s connection
clearing regions for client '%s'
clearing significant location change for client '%s'
How can an app be missing if we don't have an entry for it?
Should never be executed in this context
Skipping #reprompt iteration because one is already underway
Couldn't get keys for client dictionary
{"msg":"Commencing #reprompt iteration", "Interval":"%{public}f"}
Not iterating for #reprompt: disabled
System Service %{public}s shouldn't be eligible for a reprompt, but is
Could not create trial period reprompt notification for %{public}s
Could not create runloop source for trial period reprompt notification for %{public}s
Creating trial period #reprompt notification for %{public}s
isClientWhitelisted, %{public}s, %{public}s, %{public}s
Un-whitelisting anything that has explicitly specified a bundle path: %{public}s
executable, %{public}s, strippedName, %{public}s, systemBase, %{public}s
getClientEffectiveRegistrationResult, %{public}s, %{public}s, %{public}s, CLClientRegistrationResult, %{public}s, CLCommonLocationServicesEnabled, %{public}d
location disabled system-wide, denying internal executable %{public}s
location disabled system-wide, denying executable %{public}s
Couldn't get keys for client dictionary, deauthorizing all clients
allowing internal executable %{public}s
no bundle ID or bundle path found - denying %{public}s
platform does not support system service, %{public}s, required capabilities.
already denied executable %{public}s
already authorized WhenInUse executable %{public}s
already authorized Always executable %{public}s
Requesting client (%{public}s) purpose for unsupported registration type %{public}d
purpose string from %s's bundle: '%s'
purpose string from %s's property: '%s'
unable to copy purpose string from client '%{public}s'
ImproveAccuracyNotification object not created for technology, %{public}s
post improve accuracy notification, technology, %s, client, %s
#warning Droping authorization request.  This function shouldn't be used on this device.
unknown registsration result %{public}d
canceling notification for %s
location services settings are frozen by restrictions - denying %{public}s
Setting executable: %{public}s, bundle: %{public}s, bundle path: %{public}s authorization to %{public}d (%{public}s)
%{public}s application deauthorized; deauthorizing daemon as well
%{public}s application deauthorized; daemon not yet used
%{public}s daemon deauthorized; deauthorizing application as well
%{public}s daemon deauthorized; app not yet used
CLIUA: clientKey:%s  reason:%s  assertion:%s
CLIUA: Could not find InUseAssertion with reason '%{public}s' for '%{public}s' to remove it
Location services available %d; parental controls enabled %d (refresh %d)
#warning location is restricted; freezing client states
location is not restricted
NameValuePair::get failed despite our bounds checking
#warning %{public}s time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
Resuming client '%s'
Failed to resume '%{public}s': assertion not acquired
Failed to resume '%{public}s': init failure
Non-app client is was a background client?
Scheduling pending app status event
#warning %{public}s region time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
#warning Significant time started exists (%{public}.2f), but time stopped (%{public}.2f) doesn't exist or is earlier for %{public}s - setting to %{public}.2f
stop range for client '%s'
could not retrieve bundle IDs
installation check found %ld uninstalled apps (amongst %ld total clients and %ld bundle IDs)
%s is missing
%s was explicitly uninstalled
%s has been missing for %.3fs (safe harbor threshold: %.3fs) - clearing
Deleting entry for %s
%s has been missing for %.3fs (safe harbor thershold: %.3fs)
%s was missing for %.3fs (safe harbor threshold: %.3fs) - clearing
%s restored within safe harbor time of %.3fs - keeping
updated AppUninstallTimer; next timer will fire in %.3fs
client, '%s', app's client cnt, %d, active, %d, spectator, %d, batchEnabled, %d, desiredAccuracy, %.2f, distanceFilter, %.2f
client, '%s', app's client cnt, %d, active, %d
mayTakeProcessAssertion,%d,background,%d,slc,%d
Received trial reprompt notification without a designated promptee
User has authorized continued access for %s at reprompt
User has selected 'settings' on reprompt for %{public}s... taking them there
#warning No user response to client %{public}s (flags 0x%{public}lx)
open preferences with url, %{public}s
Couldn't create Preferences URL, %{public}s
could not launch Preferences
ImproveAccuracyNotification object not created for notification, %p
#warning no user response for improve accuracy prefs notification %{public}s (flags 0x%{public}lx)
GPS_NETWORK: currentStatus(%d) isGpsControlledByNetwork(%d)
Setting executable %s
Setting bundle ID %s and executable %s
Keep Apps Up To Date changed
Unknown notification: %{public}d
Received state request for region,'%s/%s'.
Received state transition for region,'%s/%s'.
AppMonitor notification, %d, %s, pid, %d, bundleId, %s
User force quit '%{public}s'
@ClxClient, quit, %{public}s
AppMonitor notification, %d, %s, pid, %d, bundleId, %s, client, %s, connection, %p
'%{public}s' task suspended: removing client
wifi power state, %d.
wifi enabled
bluetooth power state, %d.
bluetooth enabled
Removing entry for bundle ID %{public}s if present
%{public}s not supported, removing entry for bundle ID %{public}s if present
Removing entry for bundle path %{public}s if present
#warning bundle path, '%{public}s', does not exist on disk;  clearing.
AuthMigrate(%{public}s): Skipping: could not get client nvp
AuthMigrate(%{public}s): Skipping: no Authorized key
AuthMigrate(%{public}s): Preserving Authorization over Authorized
AuthMigrate(%{public}s): Y => Always
AuthMigrate(%{public}s): N => Never
Unable to save clients list after migration, data loss due to crash possible
Setting client for bundle path %s
#warning New authMask %{public}lu for client %{public}s implicitly extends its supported mask (%{public}d) until next connection & slide
#warning Never auth of novel client %{public}s... providing default of SomeKindOfYes until next connection & slide
Unsupported CLClientServiceType: %{public}lu
DAR: could not read map file %s
DAR map: %s
DAR map sorted keys: %s
DAR: original location: %.8f, %.8f, %.2f
DAR:  reduced location: %.8f, %.8f, %.2f
DAR: applying default quantization %f
DAR: applying new quantization %f based on ap count %d
DAR: applying cached quantization %f
ALTERED: location: %.8f, %.8f, %.2f, %d, %d
ALTERED: original location: %.8f, %.8f, %.2f, %d, %d
ALTERED:  unaltered location: %.8f, %.8f, %.2f, %d, %d
#warning could not get localized string '%{public}s'!
could not get UN localized bundle name from bundle at '%{public}s'; soup cannot be given to them.
TILE: mmapTile, prefer local file name because it exists, %s
TILE: mmapTile, can't open, %s, errno, %d, %s
TILE: can't stat, %s, errno, %d, %s
TILE: corrupt header, fileGetNextSection, size, %zd, readto, %lld, %d
TILE: traverseTileFile, start, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx
TILE: traverseTileFile, can't open tile
TILE: traverseTileFile, file is empty
TILE: thisSection, message, %s, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d, name, %s
TILE: invalid tile file, bad allocation size, totalBytesInSection, %lu, maxAllocationSize, %lu
TILE: failed to read pSectionH, %lu, %lu
TILE: section, signature, 0x%x, sectionId, %d, headerSizeBytes, %u, sizeBytes, %u
TILE: ERROR: failed to fseek to, currentFileOffset, %lu, %u
TILE: traverseTileFile, done
TILE: CLTileFile, sectionId, %d, %s
TILE: tile, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, altitude, %f,  minAltitude, %f, maxAltitude, %f, numOfInputPoints, %d, generationTime, %.1f, expirationAge, %d, %d, age, %.1lf
TILE: onTraversingTileHeaderKeyLatLon, tileid, %s
TILE: tile.keylatlon, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf, sec_key, %016llx
TILE: tile.location, tileid, %s, serverName, %s
TILE: tile.location, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, generationTime, %.1f, expirationAge, %d, age, %.1lf
TILE: tileMacIndexHeader, headerSizeBytes, %u, tileMacIndexHeader, entrySizeInBytes, %u, numOfEntries, %u
TILE: idx, %3u, mac,%x:%x:%x:%x:%x:%x, offset, %u
TILE: tileAccessPointTable, headerSizeBytes, %u, tileAccessPointTable, entrySizeInBytes, %u, numOfEntries, %u
TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf
TILE: read data, sectionId, %d, entriesOffset, %u, entriesNumToRead, %u
TILE: ERROR: failed to skip entries pre read, %u, ret, %d
TILE: ERROR: failed to read bytes, %u, %u
language changed - refreshing
could not use english as default language
could not get localizations array from bundle
could not get localizations for preferred languages
no localizations for preferred languages
getting '%s' localized strings for '%s'
could not get resource URL for %s
could not create input stream for %s
could not deserialize data from URL for %s, error, %s
issue retrieving localized strings for bundle '%s'
key %s does not contain a string value
no corresponding string for %s
received unknown notification %s from telephony service
should not write to carrier bundle
Overriding device activation status check.
Unable to query pairing id, suspending activity tracking.
Unable to obtain pairing id, suspending activity tracking.
Failed to get fitness tracking state in Bridge->Motion&Fitness. It may not have been set yet. Assuming default.
Fitness tracking is disabled, suspending activity tracking.
Device on-charger, suspending activity tracking.
HEALTH_SMOOTH,too few points to smooth
HEALTH_SMOOTH, corner detection failed
HEALTH_SMOOTH: Corner found at %d, %.7f, %.7f
HEALTH_SMOOTH, Indexing error
HEALTH_SMOOTH,Smoother Run Failed
HEALTH_SMOOTH,Indexing error
HEALTH_SMOOTH,Conversion Failed, excluding point at gpsSec %f
HEALTH_SMOOTH,smoother is unhealthy
HEALTH_SMOOTH,samples rejected,%lu
Natalie Model, Rowing Speed Model, timestamp, %f, stroke power, %f, strokes amplitude, %f, stroke rate (spm), %f, height (m), %f, gender, %d, speed, %f
Natalie Model, Rowing WR Model, timestamp, %f, stroke speed (m/s), %f, strokes amplitude, %f, weight (KG), %f, METS, %f, fMetsScaling, %f
Orientation Notifier Instantiated
CLWatchOrientationSettingsNotifier is shutting down.
Crown orientation setting key is invalid, defaulting to crown on right (not inverted)
Wrist orientation setting key is invalid, defaulting to left wrist
Watch Orientation,crown,%d,wrist,%d
Resetting elevation arbiter
Time rollback compared to fPrevStepCountElevation, currentTime, %f, previousTime, %f
Time rollback, currentTime compared to fFinalElevation, %f, previousTime, %f
RAVEN: Could not convert LLA Coordinate %.7lf,%.7lf to ECEF
RAVEN: position solution numerically invalid.
RAVEN: velocity solution numerically invalid.
RAVEN: direction of travel solution numerically invalid.
RAVEN: attitude solution numerically invalid.
RAVEN: rate gyro bias solution numerically invalid.
RAVEN: accelerometer bias solution numerically invalid.
RAVEN: Could not convert ECEF Coordinate %.7lf, %.7lf, %.7lf to LLA
RAVEN: Could not convert ECEF Coordinate %.7lf, %.7lf, %.7lf to ENU
RAVEN: Could not convert ECEF Vector %.7lf, %.7lf, %.7lf to ENU
RAVEN: Time not increasing between step count events
RAVEN: distance not increasing between step count events
RAVEN: Time not increasing between pressure events
Force Vo2max Cal set to %d
mets,%f,metsOK,%d,hasGPS,%d,hasStrideCal,%d,grade,%f,rawGradeType,%d,deltaMETS,%f,timeSinceStart,%f,metSource,%d,numMets,%d,hr,%f,hrStartTime,%f,metComputeTime,%f
workoutEvent,%ld,workoutType,%ld
Vo2Max,%f,numPairs,%d,status,%d,LSEst,%f,SumEst,%f,divergence,%f,consistency,%f
MetStats,total,%d,usable,%d,totalGoodDistance,%d,totalGPS,%d,totalStrideCal,%d,totalKnownGrade,%d,totalFlatGrade,%d,totalWR,%d,totalDeltaOK,%d,totalPostWarmup,%d,totalLargeEnough,%d,totalWithGoodCloseHR,%d
HRStats,total,%d,usable,%d,totalGood,%d,totalAboveMin,%d,totalBelowMax,%d
pctHRSamplesValidMin,%d,pctHRSamplesValidMax,%d,pctHRSamplesWithRecentHR,%d,pctMETSamplesWithValidDelta,%d
longitudinalConsistency,%d,old,%f,new,%f
hr,%f,hrOK,%d,startTime,%f,source,%d,interpolation,%d,conf,%f,minThresh,%f,maxThresh,%f
Ellptical Load Calibration Enabled status : %d 
WR-HR Model Switch Margin : %f 
Natalie Model, Elliptical Linear Regression, timestamp, %f, duration, %f, stepcount, %d, steprate, %f, resistance, %f, weight, %f, feature2, %f, mets, %f
Natalie Model, Elliptical DT Regression, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
Natalie Model, Elliptical METs, timestamp, %f, hrMets, %f, wrMets, %f, calibrationValue, %f, calibrated wrMets, %f, HR-WR diff, %f, mets, %f, metsSource, %d, fMetsScaling, %f, loadCalStatus, %d
#diagnosticManager beginService
#diagnosticManager endService
Add file to #diagnosticManager: %{public}@
Trying to register a nil NSURL
Remove file to #diagnosticManager: %{public}@
Trying to unregister a nil NSURL
Client requested #diagnosticManager file copy to dest: %@
diagnosticManager trying to copy file: %@
{"msg":"Failed to copy diagnostic file", "srcURL":"%{public}@", "dstURL":"%{public}@", "error":"%{public}@"}
#diagnosticManager received new XPC Connection request
Why didn't we get a connection?
{"msg":"#diagnosticManager missing entitlement", "entitlement":"%{public}s", "pid":"%{public}d"}
#diagnosticManager Interruption handler called
#diagnosticManager Invalidation handler called
#diagnosticManager Resuming XPC Connection: %@
#diagnosticManager fileManager asking if should copy from %@ to %@
Trying to move a file that is not in our cache directory: %@
Assertion failed: (fIirFilterParams != __null) && (fIirFilterParams->filterOrder <= kMaxFilterOrder), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMIirFilter.cpp, line 20,IirFilterParams,%p,filterOrder,%d,maxFilterOrder,%d.
configuration: low band = [%d %d] high band [%d %d]
configuration: classifierMinLowPower = %f, classifierMaxLowPower = %f, classifierMaxHighPower = %f
configuration: theta = [%.2f %.2f %.2f %.2f %.2f %.2f]
configuration: oddsThreshold = %f, medianFilterSize = %zu, confidenceThreshold = %f, useHysteresis = %d, useAngleOverride = %d, angleMetricThreshold = %f
Assertion failed: fHeadAndSize.fSize == 0 && fHeadAndSize.fHead == 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMQueue.h, line 93,size,%u,head,%u.
Type,%s,bias.x,%20.20f,bias.y,%20.20f,bias.z,%20.20f,variance.x,%20.20f,variance.y,%20.20f,variance.z,%20.20f,doingBiasEstimation,%d
Invalid cpas data.
The cpas data is not a CFData type.
Cpas data is NULL.
Cpas pointer is NULL.
Unexpected cpas version: %u.
Original serial number data is NULL.
Original serial number pointer is NULL.
Invalid back camera serial number data.
Incorrect back camera serial number length. Actual length %ld. Expected length %lu.
Current serial number data is NULL.
Bailing while checking VCM actuator ID.
VCM actuator ID data type %d does not match expected type %d
CPAS data is NULL.
CPAS pointer is NULL.
Init power state: off
Debounce changed to %lf [s]
Already in state %s, %lf
Cached Location changed state from %s to %s
Debounce timer fired, stopping
Received start transit route
Received end transit route
Received unknown notification, %d
Recevied kNotificationAuthorization for %s
Received Location Services status %d
Resume for exception, %#x, oldExceptions %#x
Resume
Suspend for exception, %#x, oldExceptions %#x
Suspend
CLMM, Tile Error Reported:%s
CLMM, disabling tile loader
CLMM, enabling tile loader
CLMM, GeoMapAccess did not have sufficient data available (roadsWithinDistance)
CLMM, query failed (roadsWithinDistance)
CLMM, GeoMapAccess did not have sufficient data available (roadsConnected)
CLMM, query failed (roadsConnected)
CLMM, GeoMapAccess did not have sufficient data available (roadsAtIntersection)
CLMM, outgoing roads query failed (roadsAtIntersection)
CLMM, incoming roads query failed (roadsAtIntersection)
CLMM, GeoMapAccess did not have sufficient data available (moveOnRoad)
CLMM, query failed (moveOnRoad)
CLMM, GeoMapAccess query timed out
CLMM, disconnected road
WorkloadCalibration, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, calibratedMets, %f
Workload Calibrator, DB Delete Records Before, expirationTime, %f
Workload Calibrator, DB Get All Records By Activity Type And Maximum Standard Deviation, activityType, %u, standardDeviation, %f
Workload Calibrator, Bootstraping Calibration, Value, %f
Workload Calibrator, DB Insert, activityType, %u, valueAverage, %f, standardDeviation, %f, entry.startTime, %f
Workload Calibrator, DB Delete Keep Last N, kMaximumDbHistorySize, %lu, activityType, %u
Workload Calibrator, DB Update, activityType, %u, valueAverage, %f, standardDeviation, %f, entry.startTime, %f
Enable GPS; Start GPS subscription
Disable GPS; Stop GPS subscription
onCoarseElevation,startTime,%f,ascended,%d
Odometer(GPS),%f,%f,%f,%f,%f
Natalie Model, High Intensity CR DT Regression, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
Got a request for a scan but no one is interested. Ignoring
Bluetooth is OFF, ignoring request to scan
Found device %s withData: %s
Found a device but its UUID is nil
No IP address provided. Ignoring device
AirPlaySolo started scanning
AirPlaySolo stopped scanning
Failed to start AirPlaySolo scanning. %@
init %s, %s
Resetting significant elevation %s, %s
%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%d,%s,%s,%s,%f
Not companion or watch. Returning.
AutomaticStrideCalibration,Pass,CreatingDaemonCacheForCalibrationBins
AutomaticStrideCalibration,Success,AllChecksPassed
setSession,oldSession,%ld,newSession,%ld
A new calData is added: %s
ForcingLocationDueToGizmoRequest,session,%ld,%s
StepRunNotification,Pass,LeechingLocation,Steps,%d
StepRunNotification,Pass,AttemptingToForceLocation,Steps,%d
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastCalibrationSuccess,TimeSinceLastCalibrationSuccess,%0.3f
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastCalibrationAttempt,TimeSinceLastCalibrationAttempt,%0.3f
AttemptForcedLocation,Fail,NotSufficientTimeSinceLastConverged,TimeSinceLastCalibrationAttempt,%0.3f
AttemptForcedLocation,Success,AllChecksPassed
Terminated forced calibration.
LocationStateOld,%d,LocationStateNew,%d
TrackClose,Pass,LocationTimeout,TimeSinceLastPosition,%0.3f
TrackClose,Pass,ForcedNotSufficientSteps,Steps,%d
TrackClose,Pass,EnabledNotSufficientSteps,Steps,%d
TrackCalibration,Fail,Pedometer distance is zero,startTime,%f,endTime,%f
TrackCalibration,Fail,speed %f out of bounds,startTime,%f,endTime,%f
TrackCalibration,Fail,KFactorOutOfBounds,%s,KFactor,%0.6f,Speed,%f,startTime,%f,endTime,%f
SessionMetrics,Fail,Pedometer,GainOutOfBounds,DistanceFusion,%0.6f,startTime,%f,endTime,%f
SessionMetrics,Fail,GPS,GainOutOfBounds,DistanceFusion,%0.6f,startTime,%f,endTime,%f
CalData, %s, stepEntryEpochTime, %f
SessionMetrics,Fail,Gradient,DistanceFusion,startTime,%f,endTime,%f
FloorsAscended,%d,FloorsDescended,%d
DEM,Reading,%s
DEM,could not open,%s
DEM,avl byte index,%d,is larger than the data available in the availabilty file
DEM,Invalid CLDEM availability file - unable to get data byte
DEM,Unexpected case
DEM,availability file has expired - redownload
DEM,availability file version does not match expected
DEM,finished
DEM,fseek returned non-zero
DEM,Invalid CLDEM availability file - header string
DEM,Invalid CLDEM availability file - invalid header string
DEM,Invalid CLDEM availability file - version
DEM,Invalid CLDEM availability file - headerLength
DEM,Invalid CLDEM availability file - minLat
DEM,Invalid CLDEM availability file - maxLat
DEM,Invalid CLDEM availability file - binsize
DEM,coarse avl file is not 0.1 deg by 0.1 deg,spacing unexpected,%.1f,re-download needed
DEM,Invalid CLDEM availability file - timestamp
DEM,Invalid CLDEM availability file - expiration age
DEM,Invalid CLDEM availability file - data size
DEM,Invalid CLDEM availability file - crc
CLMM, DisableMapMatchingRouteHints, %d
Finished constructing CLFitnessTrackingNotifier
CLFitnessTrackingNotifier::client count [%d]: %d
CLFitnessTrackingNotifier::Invalid notification: %d
{"msg":"#usesync UUIDs found", "on disk":"%{public}s", "current":"%{public}s"}
{"msg":"#usesync Serial", "serial":"%{private}s"}
{"msg":"#usesync Non-active device unpaired", "current id":"%{public}s"}
{"msg":"#usesync Unpair", "current id":"%{public}s", "active id":"%{public}s"}
{"msg":"#usesync Pairing", "new id":"%{public}s", "old id":"%{public}s"}
{"msg":"#usesync Setting 5 minute error retry timer", }
{"msg":"#usesync Adding a message to the error queue", "type":"%{public}s"}
{"msg":"#usesync Draining the error queue", "count":"%{public}lu"}
{"msg":"#usesync Error queue drained", }
{"msg":"#usesync Message was replaced", }
{"msg":"#usesync Message timed out.  Retrying", }
{"msg":"#usesync #warning Got error from IDS, attempting to recover", "error":"%{public}@"}
{"msg":"#usesync #warning Had to drop a prompt request, unrecoverable error", "error":"%{public}@"}
{"msg":"#usesync Unrecognized type message failed to send.  Cannot recover.", "type":"%{public}s"}
{"msg":"#usesync Dropping a message because we aren't paired", "type":"%{public}s"}
{"msg":"#usesync Didn't get an identifier for message", "type":"%{public}s"}
{"msg":"#usesync Cannot request initial data on this device", }
{"msg":"#usesync Full resync requested", }
{"msg":"#usesync Cannot query highest received sequence number on this device", }
{"msg":"#usesync Cannot set sequence number on this device", }
{"msg":"#usesync Attempting to send usage data from bad device", }
{"msg":"#usesync Got empty usage dictionary", "client":"%{public}s"}
{"msg":"#usesync Mapped client", "original":"%{public}s", "result":"%{public}s"}
{"msg":"#usesync Enqueued usage update message", "client":"%{public}s", "usage":"%{public}@"}
{"msg":"#usesync Attempting to send prompt request from bad device", }
{"msg":"#usesync Requested prompt", "client":"%{public}s", "authorization status":"%{public}d"}
{"msg":"#usesync Enqueued all usage data", }
{"msg":"#usesync Unknown message failed", "error":"%{public}@"}
{"msg":"#usesync Message from past life failed", "identifier":"%{public}s", "error":"%{public}@"}
{"msg":"#usesync Message sent", "identifier":"%{public}s"}
{"msg":"#usesync Got usage update", }
{"msg":"#usesync Got unexpected message for this device", }
{"msg":"#usesync Didn't get an expected parameter", "client key":"%{public}hhd", "usage data":"%{public}hhd"}
{"msg":"#usesync Got prompt request", }
#USESYNC Missing an expected argument.  Client %p, authorization %p
{"msg":"#usesync Got request for full resync of data", }
{"msg":"#usesync Got full resync data", }
{"msg":"#usesync #warning Failure", "identifier":"%{public}s", "succeeded":"%{public}hhd", "error":"%{public}@"}
{"msg":"#usesync sent", "identifier":"%{public}s"}
{"msg":"#usesync Got invalid message from IDS", "message":"%{public}@"}
{"msg":"#usesync Sequence number is old.  Ignoring message", }
{"msg":"#usesync Unrecognized message", "type":"%{public}s", "payload":"%{private}@"}
{"msg":"#usesync Paired device nearby change", "is nearby":"%{public}hhd"}
Lat/lon is out of range for conversion.
Input to Douglas-Peucker algorithm must have at least one vertex.
DynamicProgramArea distance is not implemented
Never achieved the desired simplification. Using the original curve.
Programming error. Number of points in backtrack do not match expected (1).
Programming error. Number of points in backtrack do not match expected (2): %d, %d
Loaded previous time zone %s
Setting start timer to fire at %.2f (%.2fs away)
Setting active mode timer to fire at %.2f (%.2fs away)
Setting continuous location timer to fire at %.2f (%.2fs away)
ReachabilityTimer fired
Continuous location timer fired
Failed to get any fix while in continuous location mode
Location services are disabled; stopping automatic time zone
Time Zone system service disabled; stopping automatic time zone
Automatic time zone starting in passive mode
Automatic time zone starting in active mode
Automatic time zone disabled
Starting automatic time zone in active mode
Already have previous border distance and timestamp
Entering active location mode
Exiting active location mode
Starting automatic time zone in passive mode
Stopping automatic time zone
We ran point-in-polygon on a location we threw out anyway!
Current time zone %s not in database; changing time because of acceptable location accuracy %.3f
Telling timed the time zone is "%s".
bystander location, used to set time zone, billed to 'TimeZone' system service
Time Zone failed to retrieve location.
Potentially setting system time zone to %s
Potentially setting system time zone to %s based on <%+.8lf,%+.8lf> acc %.2f timestamp %.2f confidence %d
Received invalid location for time zone
Disregarding location with accuracy: %.1f (> %.1f)
Received invalid location <%+.8f,%+.8f> for time zone
Disregarding location for timezone with speed: %.1f (> %.1f)
Handling new location <%+.8lf,%+.8lf>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d
Couldn't get time zone for location <%+.8lf,%+.8lf>
Time zone from database was %s
Not using <%+.8lf,%+.8lf> (timestamp %.2f) because interval has not elapsed
Unconfirmed border distance is <= 0 yet we have an unconfirmed timezone label.
Got data mode change notification; entering continuous location mode
Got data mode change notification, but haven't exceeded reachability interval(%.3f s).  Will try again in %.3f s
Got airplane entered notification
Got airplane mode exited notification; entering continuous location mode
Ignoring expired location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f
Ignoring unsure location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f, confidence %d
Got kNotificationLocationUnavailable
Got kNotificationServiceAuthorization
Got unknown notification %d
Automatic time is now in mode %d
location status reset; removing all clients
Got immediate check notification
Transition from continuous active to continuous active with retry
Already in continuous location mode; not re-entering
Location services are disabled; not starting continuous location
Time Zone system service disabled; not starting continuous location
In bystander-only mode; not starting continuous location
Entering continuous location mode
Timezone is not confirmed.
Not in continuous location mode; not exiting
Exiting continuous location mode
Not registered for location or fine location; ignoring location failure
Got location unavailable while in continuous location mode; ignoring location failure
Location failed for time zone (exiting continuous mode %d; failure count now %d)
Maximum failure count not exceeded; retrying in %.2f seconds
Exceeded maximum failures; not retrying for %.2f seconds
Overriding fence start delay to %{private}.2f
setting FenceStartShowDialog to %{private}d
Setting fence start timer to fire at %.3f (%.2f seconds away)
Fence: Starting fence monitoring
Fence: Already started fence monitoring
Fence: CLFenceManager, shutdown
Fence: resetFenceMonitoring_nl
Fence: startMonitoringAllFences_nl
Starting to monitor all %{public}ld authorized fences
Fence: startMonitoringFences_nl
Fence: stopMonitoringFences_nl
Fence: fence not added, too many fences, %{private}s, %{private}lu, %{private}u
Fence: monitoring is not supported on this platform; not adding fence %{private}s/%{private}s
Not adding fence %{private}s/%{private}s because coordinate is invalid
Fence: canPerformMonitoringForFence is true, fence, %{private}s
Fence: canPerformMonitoringForFence is false, fence, %{private}s
Fence: Adding fence %{private}s/%{private}s <%{private}+.8f,%{private}+.8f>
Fence: sending kNotificationFenceFailure, fence, %{private}s
Fence: sending kNotificationFenceSetupCompleted, fence, %{private}s
Fence: Removing fence %{private}s/%{private}s
Fence: requestRegionState, %{private}s/%{private}s, registered, %{public}d, authorized, %{public}d
Fence: requestRegionState, fence, %{private}s/%{private}s, status, %{private}d, %{private}s
Fence: requestRegionState, fence, %{private}s/%{private}s, not authorized
Fence: requestRegionState, fence, %{private}s/%{private}s, not registered
Fence: requestRegionState, fence, %{private}s/%{private}s, error.
Fence: fence, %{private}s, new status, %{private}s, isIssueNotification, %{private}d, fenceAge, %{private}.1lf, fLocationUpdatesStopTimestamp, %{private}.1lf, fLocationUpdatesStartTimestamp, %{private}.1lf
Fence: fence, %{private}s, new status, %{private}s, bundleId, %{private}s, not authorized, avoiding notification
Fence: avoid sending an unknown notification, fence, %s
Fence: pending, status, %{private}s, fence, %{private}s, timestamp, %{private}.1lf
Sending %{private}s notification for %{private}s/%{private}s to client %{private}d%{private}s
Unknown fence status
Fence, %s, name, %s, date, %ld/%ld, time,%ld:%ld:%ld, loc, %.8lf, %.8lf, acc, %.2lf, distance, %.1lf
Fence: avoid sendFenceStatusNotification, fence, %s, status, %s, searchStatus, %s, client, %d, timestamp,%.1lf
Fence: sendFenceStatusNotification,fence,%s,fenceStatus,%s,searchStatus %s,client,%d
Fence: got kNotificationFenceStatusChange
Fence: got kNotificationFenceDownloadRequest, fence, %s
Fence: Got data downloaded notification for [%s]/%s/%s
Fence: Got data download failure notification for [%s]/%s/%s
Fence: Got data download invalidated notification
Got kNotificationLocationServicesStatus, enabled, %{public}d
Got fLocationUpdatesStopTimestamp, %.1lf, fLocationUpdatesStartTimestamp, %.1lf
Reauthorization requested, forcing start.
Got unknown client notification %d
Got fence addition notification for %ld fences
Fence [%s]/%s/%s is authorized
Fence [%s]/%s/%s is not authorized
Got fence removal notification for %ld fences
Got fence reset notification
MotionState,Motion,From,%d,To,%d,conf,%d,Mounted,From,%d,To,%d,conf,%d,tilt,%.1f,exitC,%d,exitTime,%f,startTime,%f,standing,%d,rawMotionType,%d,rawConfidence,%d
MotionSyncSendCalsFireIntervalInSeconds set to %f seconds.
Timer fired.
Watch retrieved calibrations and saved them in memory, current version, %d
%s, current version, %d, timestamp, %lf
Watch did not persist Motion Cals, waiting until unlock, current version, %d, isDeviceCurrentlyUnlocked, %d
Begin persisting calibrations to disk on watch, current version, %d.
Persisted a reset Motion Cals
Finished setting user profile on watch = %s
Persisted stride calibration bins
Completed persistence of motion cals to disk on watch. %s
Watch received motion calibrations from companion, %s, version, %d, timestamp, %lf, udid, %s
Workout session ended on watch.
Unhandled notification %d
notification, %d
Unhandled notification
Restored backup calibrations, %s, version, %d, timestamp, %lf
No buffered Motion Cals, no arbitration
Ignoring update.  Phone Motion Cals UDID %s is different from current UDID %s, but version %d is not larger than current version %d
Buffered Motion Cals, version, %d, timestamp, %lf, udid, %s, Current Motion Cals, version, %d, timestamp, %lf, udid, %s, result, %d
Fence: CLFenceMonitorCell, shutdown
Fence: distance = %.2f; compare = %.2f
Fence: LAC monitoring is %ssufficient for %s/%s
distance = %.2f; compare = %.2f
Fence: no allowing wifi monitor for, %.1lf, fence, %s
Cell monitoring is %ssufficient for %s/%s
Fence: addFence, %s
Fence: Couldn't bind statement for adding fence (bundle ID %s, name %s)
Fence: Removing fence %s/%s
Fence: Couldn't bind statement for deleting fence (bundle ID %s, name %s)
Fence: Couldn't bind statement for deleting fences for bundle ID %s
Fence: Couldn't get fences from database
Fence: fetched fence, %s
Fence: Error in retrieving fences from database
Fence: Couldn't bind bundle ID %s
Fence: fetched bundle fence, %s
Fence: Error in retrieving fences from database for bundle ID %s
Fence: Couldn't bind fence [%s]/%s/%s
Fence: Couldn't get number of fences for bundle ID %s
Fence: Clearing status for all fences
Fence: Recording [%s]/%s/%s last download time change to %.2f
Fence: Couldn't update last download time for %s/%s in database
Fence: Marking all fence data download times as invalid
Fence: invalidate download date for, %s
Fence: failed to bind bundleId, %s
Fence: Couldn't get bundle IDs from database
Fence: Error in retrieving bundle IDs from database
Fence: addMonitoredFlagsColumnIfNotExists
Fence: addMonitoredFlagsColumnIfNotExists, table doesn't even exist
Fence: addMonitoredFlagsColumnIfNotExists, MonitorFlags already exists
Fence: addReferenceFrameColumnIfNotExists
Fence: addReferenceFrameColumnIfNotExists, table doesn't even exist
Fence: addReferenceFrameColumnIfNotExists, ReferenceFrame already exists
Stroke detected,timestamp,%.3f,count,%lu,startTime,%f,isSwim,%d
Turn detected,timestamp,%f,startTime,%f,isSwimming,%d
[SwimOdom] Received an odometer update,distance,%lf,accuracy,%lf,speed,%lf,rawspeed,%lf,odometer,%lf,gpsSpeedAccuracy,%lf,timestampGps,%lf
New lap entry, identifier, %llu, uuid, %s, sourceId, %s, startTime, %f, endTime, %f, timestamp, %f, pace, %f, distance, %f, paceSource, %d, style, %d, numberOfStrokes, %d, totalLaps, %d, inserted, %d
style,%d,currentTimestamp,%f,turnTimestamp,%f,turnStartTime,%f,mean,%f,stddev,%f,min,%f,max,%f,median,%f,samples,%d,prctile10,%f,prctile90,%f
Invalid pool length %f for pool swim.  Assuming pool swim but with invalid distances.
SessionMetrics,Start
SessionMetrics,End,Summary,DistanceFusionSuccess,%0.6f,DistanceFusionOther,%0.6f,DistanceFusionGPS,%0.6f,DistanceFusionPedometer,%0.6f,DistanceFusionGradient,%0.6f,DistanceFusionGain,%0.6f,DistanceFusionSpeed,%0.6f,DistanceFusionLength,%0.6f,startTime,%0.6f,endTime,%0.6f
SessionMetrics,%s,%s,%s,DistanceFusion,%0.6f
Trying to send track with startTime %f. a %u b %u a == b %d
Trying to send track with startTime %f. now %f 2 %f 1 %f
Assertion failed: i < fCapacity, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMQueue.h, line 174,i,%zu,capacity,%u.
interval, %s, %.5lf, flooring to 1.0, interval
setTimerWithInterval, %s, interval, DBL_MAX
setTimerWithInterval, %s, interval, %.1lf
timerFired: timer, _clTimer, %s, %p, %p
Scheduling invalidation, %s, %p
invalidate, %s, %p
setNextFireDate, %s, %.1lf
timerFired, fIdentifier, %s, f, %p
Invalidate, %s
Delete CLCdmaCellLocationDatabase
GET could not bind %d %d %d %d %d %d %d %d %d
SET could not bind %d %d %d %d %d %d %d %d %d
getCell SID %d NID %d
Bad index into kkDefenseMappingAgencyTenByTenGeoid.
Input latitude = %.9lf is out of possible range
longitude %.9lf is not valid.
latitude %.9lf is not valid.
Starting service
CLCompanionActivityAWDAggregator tracking enabled
HK data is available
HK data is NOT available
CLCompanionActivityAWDAggregator tracking NOT enabled
Tearing down service
Received data pull from AWD
CLCompanionActivityAWDAggregator tracking enabled, looking for data: %s
Data for day to submit found: %s
CLCompanionActivityAWDAggregator tracking NOT enabled, clearing cache
Starting storeCache timer
Using cache store timer of %f
Creating cache for CLCompanionActivityAWDAggregator metrics
Loading cache for CLCompanionActivityAWDAggregator metrics
UUID is valid
UUID is invalid, creating new one and re-initializing cache
Saving cache for CLCompanionActivityAWDAggregator metrics
Removing data from cache for day: %s
Creating new UUID: %s
Received fitness tracking notification fServiceEnabled: %d
Received location: %f, %f
Received unhandled notification, %d
Received Companion connection update: %d
Start of Watch connected time: %f
End of Watch connected time: %f
Received Data protection availability notification -- was: %d now: %d
Received AppMonitor update: %s
Using wearable app! %s
Using fitness app! %s
Starting HK query timer
Using HK query timer of %f
HK Query attempt fEncryptedDataAvailable:%d fHKQueryState:%d isHealthDataAvailable:%d
Querying HK for sources
HK query encountered error,%ld
No step count / workouts from first party sources.
Querying HK for workouts
workouts: %lu, workoutMinutes:%f
Querying HK for Watch step counts
Watch Steps Query -- dayKey: %s numStepsInDay:%f
Querying HK for Phone step counts
Phone Steps Query -- dayKey: %s numStepsInDay:%f, activeMinutes:%d, activeHours:%d
Performing step count query
Querying HK for Watch stand hours
Watch Stand hours -- day:%s count:%zu
Querying HK for Phone flights climbed
Phone Flights climbed -- day:%s count:%zu
Querying Motion db for Phone static times
Phone Static Time -- day:%s duration:%f
All queries finished succssfully
Unknown notification %d
Requested update interval cannot be == 0.0 and dispatcher cannot be NULL. Use interval < 0.0 for spectator.
CLMotionNotifier::addDispatcherPrivate UpdateInterval is zero!
CLMotionNotifier::addDispatcherPrivate Added dispatcher for notification:%d, Update Interval:%f(%.1fHz)
CLMotionNotifier::updateSamplePeriod UpdateInterval:%f
{"msg":"#authsync Resuming SYService failed", "error":"%{public}@"}
{"msg":"#authsync SYService resumed", }
{"msg":"#authsync Setting sync state store path", "storePath":"%{public}s"}
{"msg":"#authsync Checking isWatchBuildVersionPreDaytona when watchProductVersion is NRProductVersionNone", }
{"msg":"#authsync error in sync session of type", "error":"%{public}@", "syncSessionType":"%{public}@"}
{"msg":"#authsync Simulator client identity translated ", "from":"%{public}@", "to":"%{public}@"}
{"msg":"#authsync Applying notification message", "notification":"%{public, location:CLCompanionSyncAuthObject_CLCompanionSyncNotification}lld"}
{"msg":"#authsync Requesting for a full sync after RESET", }
{"msg":"#authsync Applying auth add message", "message":"%{public}@"}
{"msg":"#authsync Applying auth update message", "message":"%{public}@"}
{"msg":"#authsync Applying auth delete message", "message":"%{public}@"}
{"msg":"#authsync Watch is sending add auth message to companion", }
{"msg":"#authsync Watch is sending delete auth message to companion", }
{"msg":"#authsync Watch is sending update auth message to companion", }
{"msg":"#authsync Requesting a full sync", }
{"msg":"#authsync Forcing full auth sync due to version", "foundVersion":"%{public}d", "requiredVersion":"%{public}d"}
{"msg":"#authsync Watch becoming active - SYService resumed", }
{"msg":"#authsync Sync session start", }
{"msg":"#authsync Session ended", "syncSessionType":"%{public}@", "error":"%{public}@"}
{"msg":"#authsync Session ended successfully", "syncSessionType":"%{public}@"}
{"msg":"#authsync Error in service", "error":"%{public}@", "context":"%{public}@"}
{"msg":"#authsync Receiving enqueue changes request on the watch", }
{"msg":"#authsync Sync session applying changes", "syncSessionType":"%{public}@"}
{"msg":"#authsync Sync session changes applied", }
{"msg":"#authsync Updated the kCLVersionOfLastFullAuthSync to currentVersion", "kCLCurrentAuthSyncVersion":"%{public}d"}
{"msg":"#authsync Sync session completed", "successfully":"%{public}hhd"}
{"msg":"#authsync Reset data store request", }
Could not get parent thread parameters
Motion runloop ref still not set!
LogSensorAscii,%d
Could not get scheduling parameters for motion thread, error = %d
could not create runloop source
Motion thread exiting
Unrecognized notification
SensorRecorderCacheSizeBytes, %d
SensorRecorderType, %s
On root, skip purge.
Table version is older than 1834. Purging.
Device is locked and we are unable to open the database
Flushing to memory. %zu, %zu
Unable to insert meta data.
Unable to insert data.
Unable to get last accel data id.
Unable to update meta records dataId.
Database is inaccessible
Invalid query, both data id and meta id are 0
Data requested is in memory.  Writing incremental data out to disk.
Database upper and/or lower time bound query failed.
Potential CM database inconsistency, time jump %lf %lf
Entry being recorded has a startTime in the recent past.  Deleting records after %f.
Entry being recorded has a startTime in the substantial past.  Shift records by %f.
Failed to insert record due to failure from reading the most recent entry.
Setting gyro data update interval to %f
Type,%s,dt,%f
Setting gyro temperature update interval to %f
Unrecognized gyro notification %d
[CLGyro] ret=%d
Type,%s,temperature,%f
Type,%s,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,subType,%d,sampleNum%%3,%d,triggerEnabled,%d,triggerOn,%d
%p Scan delay of %Lf secs is invalid. Setting to the minimum of %Lf secs
%p INITIAL isWifiPowered=%d
%p Start monitor for active scanning
%p Stop monitor for active scanning
%p TIMER TRIGGERED
%p WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f
%p WIFI SCAN SCHEDULED FOR %f
CLCatherineNotifier is shutting down.
catherine,%.0f,timestamp,%.3f,source,%d,mode,%d,error,%d
raw HR,startTime,%f,sinceLastGood,%f,conf,%f,hr,%f,mode,%d,source,%d,interpolationType,%d
Starting cell simulation
Stopping cell simulation
Simulating %sregistered status
No pending cells
Current time is %.2f, next time is %.2f
Notifying clients (next check at %.2f, %.2f seconds away)
Forcing registration status to %sregistered
Forcing serving MCC to %d
Forcing serving MNC to %d
Forcing serving cell to 0x%x 0x%x
Starting WiFi simulation
Stopping WiFi simulation
Simulating WiFi %s
Reporting simulated WiFi power status of %s
Starting scan (simulation active %d, fPendingScanResults %lu)
Simulating fast scan
Simulating normal scan
Simulating exhaustive scan
Can't simulate unknown scan type!
Simulator target doesn't support selecting scan channels -- assuming exhaustive scan requested
Notifying clients of %lu scan results
Registered for keyboard state notifications
%s cover attached logic to %d
Registered for cover state notifications
Could not create timer
starting apple compass
Cover is %sattached
stopping apple compass
Cover Open: %d
keyboard,isConnected,%d
using attitude dependent KF calibrator
compass ignoring database (%d)
compass using manual bias (%.3f/%.3f/%.3f)
compass ignoring calibration (%d)
compass input filter is using (%zuu) samples
compass heading output filter samples (%d) scale (%f)
apple compass calculator, sample rate (%.3f) ignoreDatabase (%d) manual (%d)
XYDevice not stable. %d, %d, %.3f, Clearing search buffers.
storing new compass calibration, magneticField (%+.3f,%+.3f,%+.3f), bias (%+.3f/%+.3f/%+.3f), level (%d) magnitude (%+.3f) inclination (%+.3f)
rawHeading, %.3f, gyroHeading, %.3f, deltaRaw, %.3f, deltaGyro, %.3f, rawHeadingU, %.3f, gyroHeadingU, %.3f, filteredHeading, %.3f, alpha, %.3f, gamma, %.3f, rotVar, %.5f, rotMag, %.3f, deltaFiltered, %.3f
Heading  %.2f, is not in bound [0 360]
magnitude max threshold exceeded (%+.3f), resetting calibration
magnitude threshold exceeded (%f) with (%f) from base value (%f), resetting calibration
inclination threshold exceeded (%f) with (%f) from base value (%f), resetting calibration
CompassDB restored bias (%+.3f/%+.3f/%+.3f)
Already correct power mode, %d
Changing cached location power mode from %d to %d
mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd), coverAttached (%d)
mean (%f) scale (%f) variance sample size (%zd) max sample length (%zd)
sample rate (%.3f) observation rate (%.3f) observation threshold (%.3f) deviation count threshold (%d) standard deviation threshold (%.3f)
threshold (%f) was exceeded with observed value (%f) and base value (%f) and standard deviation (%f) and count of (%d)
TILE_SER: g_isAppAvailabilityAuthorized, %d, isAuthorized, %d
TILE_SER: onAppAvailabilityAuthorized, %d, authorizerd, %d
TILE_SER: Removing request since it timed out, lat, %f, lon, %f, radius, %f.
TILE_SER: setupXpcConnection
TILE_SER: setupXpcConnection, g_isEnableTilesManagerServer, %d
TILE_SER: setupXpcConnection, tiles server is disabled by default, g_isEnableTilesManagerServer, %d
TILE_SER: setupXpcConnection, was already called
TILE_SER: setupXpcConnection, %p, %p
TILE_SER: server received connection, %p
TILE_SER : dictionary, XPC_TYPE_CONNECTION, %d, XPC_TYPE_ERROR, %d, XPC_TYPE_DICTIONARY, %d
TILE_SER : XPC_ERROR_CONNECTION_INTERRUPTED, %d, XPC_ERROR_CONNECTION_INVALID, %d, %s
TILE_SER: XPC_TYPE_CONNECTION, incomingConnection, %p
TILE_SER: posting, CLTILES_MANAGER_SHARED_NOTIFICATION_CLIENTS_RECONNECT
TILE_SER: onLocationNotification, notification, %d, loc, %s
TILE_SER: onLocationNotification, ignore, shutdown, notification, %d, loc, %s
TILE_SER: why am i receiving this notification: %d
TILE_SER: checkAvailabilityStatus, isAuthorized, %d, lastLocation, %s
TILE_SER: checkAvailabilityStatus, force, %d, newLocation, %s
TILE_SER: checkAvailabilityStatus, not authorized
TILE_SER: checkAvailabilityStatus, ignoring cell location
TILE_SER: checkAvailabilityStatus, ignoring uncertain location, %.1lf
TILE_SER: checkAvailabilityStatus, ignoring uncertain location, horizontalAccuracy, %.1lf
TILE_SER: checkAvailabilityStatus, ignoring close location, distanceFromPreviousLocation, %.1lf
TILE_SER: checkAvailabilityStatus, availabilityList, %lu
TILE_SER: checkAvailabilityStatus, loc, %.8lf, %.8lf, radius, %.3f, age, %d, %d, %d, %d, distance, %.3lf
TILE_SER: appAvailabilityUpdate, loc, %.8lf, %.8lf, radius, %.3f, age, %d, %d, %d, %d, hasChanged, %d
TILE_SER: handleIncomingConnection, incomingConnection, %p
TILE_SER: handleIncomingConnection, token, 0x%08X-0x%08X, pid, %d
TILE_SER: incoming, incomingConnection, %p, XPC_TYPE_CONNECTION, %d, XPC_TYPE_ERROR, %d, XPC_TYPE_DICTIONARY, %d
TILE_SER: release, incomingConnection, %p
TILE_SER: processing request, locationd, %.8lf, %.8lf, requestType, %s, notificationType, %s, isRegister, %d, isUnRegister, %d
TILE_SER: unknown notification, %s
TILE_SER: client, %s, not authorized to, requestType, %s
TILE_SER: CLTILES_MANAGER_SHARED_DATA_TYPE_APPS - un-supported
TILE_SER: invalid requestType, %s
TILE_SER: getAppsForArea, examining %zu candidate grids.
TILE_SER: getAppsForArea, query for exact grid containing lat = %f, lon = %f, gridLat = %f, gridLon = %f
TILE_SER: getAppsForArea, invalid age rating, lat, %f, lon, %f, adamId, %d
TILE_SER: fetchAppsForArea, tile is available for lat = %f, lon = %f.
TILE_SER: fetchAppsForArea, found %lu apps.
TILE_SER: fetchAppsForArea, tile does not exist on the server for lat = %f, lon = %f.
TILE_SER: fetchAppsForArea, tile is not available for lat = %f, lon = %f. Request for download.
TILE_SER: onTileWasDownloadedNotification, activeRequests.count = %lu
TILE_SER: onTileWasDownloadedNotification, tile is available (or tile is 404) for lat = %f, lon = %f.
TILE_SER: onTileWasDownloadedNotification, found %lu apps.
TILE_SER: Got unexpected notification, %d
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, loc, %.8lf, %.8lf, radius, %.2lf
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, query for lat = %f, lon = %f, radius = %f.
TILE_SER: Got fetchAppsForArea response for lat = %f, lon = %f, %s.
TILE_SER: handleIncomingMessage_QUERY_AVAILABILITY, failed to blip icon for, %s
TILE_SER: no registrations to, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
TILE_SER: not authorized to receive, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
TILE_SER: sending, CLTILES_MANAGER_SHARED_NOTIFICATION_APP_AVAILABILITY_CHANGED
requestDownload, %2.6f, %2.6f
TILE_SER: terminateXpcConnection
TILE_SER: terminateXpcConnection, already called
TILE_SER: shutdown
TILE_SER: shutdown, tiles server is disabled by default
HEALTH_SMOOTH: Could not convert LLA Coordinate %.7lf,%.7lf to ECEF
HEALTH_SMOOTH: Could not convert ECEF Coordinate %.3lf,%.3lf,%.3lf to ENU
HEALTH_SMOOTH: No corners found, input segment too short.
Registered with CoreDuet for %s with predicate %s
Deregistered with CoreDuet for %s with predicate %s
Added %s client to the list of listeners for event type %ld with predicate %s
Received callback for %s
Client %s is not registered for event %ld
The app dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetForegroundApp class
bundleId or launchReason were nil so not processing this notification
The scene dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitScene class
some of the expected keys were not found so not processing this notification. %s
The accessory dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitAccessory class
The app view dictionary notification from CoreDuet has different information than we expect. This info should be added to the CLDuetHomeKitAppView class
Assertion failed: temperature != 3.40282347e+38F, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMLinearTemperatureFit.cpp, line 39,temperature,%f.
RotationStability buffer not set.
Could not set bias retrieved from database
setting bias (%.3f/%.3f/%.3f) level (%d)
reset internal. levels-data(%d %d %d), pScale=%.3f 
compass calibrator reset
Resetting calibrator states.
Resync after long coasting with mag drift. mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), Age(%d,%d)
DRIFT DETECTED. numBad=%d,s=%.3f,delH(%.3f,%d,%.3f), expectedVec (%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d),deltaTime(%.3f)
fBackupInfoSet(%d), syncAge(%d)
Likely bad resync. Backup. 
RESYNC Rejected. numBad=%d,mag/incDiffMean(%.3f/%.3f), measure(%.3f/%.3f/%.3f/%.3f), syncAge(%d)
numBad(%d), delH(%.3f), coastVec(%.3f/%.3f/%.3f), expectedVec(%.3f/%.3f/%.3f), calibrated(%.3f/%.3f/%.3f), angleDiff(%.3f/%.3f), magDiff(%.3f/%.4f), incDiff(%.3f/%.3f), measure(%.3f/%.3f/%.3f), coasting(%.3f/%d/%d), coastingCount(%d)
Coasting vector not set.
Prolonged high magDiff. Likely bad calibration. Resetting.
Extremely high magnitude.  magDiff (%.3f), magnitude (%.3f), calibrated (%.3f/%.3f/%.3f), coastVector (%.3f/%.3f/%.3f),coastingTime,%.3f,magDiffVar,%.3f,resetInternal,%d
******* scale(%.3f),cAge(%d), magDiff(%.3f), dHeading(%.3f), deltaAngle(%.3f), numBad(%d), calInc(%.3f), incDiffIsStable(%d)
Steep inclination. Likely bad interference or bad database lookup. Resetting. 
Interference is gone.
**INTERFERENCE-1 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f
**INTERFERENCE-0 dAngle=%.3f,dHeading=%.3f,magDiff=%.3f,incDiff=%.3f
Likely bad database lookup. Resetting. 
Divergence!!! Resetting.
new internal estimates (%.3f %.3f %.3f)
taking new estimates, Internal. fIsCoasting (%d)
new estimates denied, fIsCoasting (%d)
taking new estimates, reached database. (%d)
new esitmates disagree with database. (%d,%d,%.3f)
calibrated, first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)
taking new estimates, fIsCoasting (%d)
estimates improved.(%.3f/%.3f/%.3f), numImprov=%d 
new estimates needed, fIsCoasting (%d)
first estimates completed (%.3f/%.3f/%.3f/%.3f), conv(%d %d %d), level (%d)
new estimates calculated, converged(%d %d %d) Var (%.3f %.3f %.3f), remain (%.3f), level (%d), num=%d 
Bad heading divergence for too long. Prompt user to re-calibrate.
Waiting too long for internal re-calibration. Prompt user.
Waiting too long for high magnitude interference to go away. Exit coasting.
Coasting for too long. Exit coasting.
fCoastingVecPrint: %.3f, %.3f, %.3f, %.3f, %.3f, %.3f
Attitude data not set.
Type,%s,Updating reference frame.
Updating during coasting, fIsResetInternal(%d)
BACKUP resync coasting vector
resync coasting vector. rotM,%.3f,rotV,%.3f
device status: (smooth static) = (%d %d), rotM,%.3f,rotV,%.3f, q.x,%.3f,q.y,%.3f,q.z,%.3f,q.w,%.3f)
coasting vector is mature, no more updating
numSamplesSkipped (%d), deltaQ (%.3f/%.3f/%.3f/%.3f), deltaReadingM (%.3f)
bias.x,%.3f,bias.y,%.3f,bias.z,%.3f,scale.x,%.5f,scale.y,%.5f,scale.z,%.5f,extF.x,%.3f,extF.y,%.3f,extF.z,%.3f
set coasting vector (%.3f/%.3f/%.3f), levels (%d %d) conv(%d %d %d) age (%d) syncAge (%d) DueTo (%d)
enters coasting
compass calibrator logging (%d)
exits coasting
PLOS:kLowestElevationInDegrees,%.2f,kTallestBuildingHeight,%.2f,kLargestDistance,%.2f
PLOS,GpsForcePlos,%d
PLOS, cannot estimate nav mode, disabling
PLOS, non-pedestrian, not matching
PLOS: no mapGeometry!
PLOS: no geometry!
PLOS: buildingsWithinDistance,%lf returned false!
PLOS: buildings.size() %ld > 500. too many buildings. Aborting
PLOS: no candidate svs for time %lf
PLOS: polyPoint == candidatePoint
PLOS: unexpected to not find SV, %d in fSvPlosMap!
PLOS: majorAxis,%lf < minorAxis,%lf
PLOS: Clamping majorAxis,minorAxis,%fm
SAM: %s not supported because no application with bundle identifier, %s, is installed
SAM: %s not supported because device doesn't support continuity
SAM: %s not supported on this device type
{"msg":"#SAM Failed to masquerade", "authorizingBundle":"%{public}s", "event":"%{public}s", "condition":"%{private}s"}
SAM: suggested actions purge timer, delay, %.1f, interval, %.1f
SAM: notify_cancel did not succeed, %d
SAM: notify_register_dispatch failed, %d
SAM: error matching extensions with attributes, %s
discovered app prediction extension
app prediction extension is %s
SAM: Nudged
SAM: Nudged while preparing a recommendation, state, %d
SAM: Hero apps disabled, ignoring nudge.
SAM: Not checking beacons since installed apps are switched off.
SAM: Got reply from CLBTLEFenceManager
SAM: Active beacons are nearby.  Using beacon-based recommendation.
SAM: No active beacons.  Looking for a location-based recommendation.
SAM: %f seconds since last location request. Not refreshing suggestions.
SAM: AppSuggestions not authorized. Ignoring nudge.
SAM: App store not authorized. Ignoring nudge.
SAM: Received, location, %s
SAM: Received an unexpected location, state, %d
SAM: Location is stale, age, %f
SAM: Location uncertainty too large, horizontalAccuracy, %f
SAM: Clear RR key...
SAM: cannot suggest with nil location, returning.
SAM: FetchAppsForArea error, %s, reset state.
SAM: Got app list, count, %lu
SAM: Received an unexpected app recommendation, state, %d
SAM: appMaxRating, %ld, isAppInstallAllowed, %d
SAM: Not considering app %d due to age restrictions, ageRating, %d, maxRating, %ld
SAM: Converted adamId %d to bundleId %s
SAM: Not considering installed app %d (bundleId = %s) since it's out of range.
SAM: Not considering non-installed app %d since it's not in the grid.
SAM: candidateAppList count, %ld
SAM: %lu app recommendation candidate%s at location, <%f, %f>
SAM: %lu, adamId, %d, score, %f, installed, %s
SAM: returned %lu loi%s of type %s
SAM: location, <%f, %f>, is within %.1fm of loi ,%s, with type, %s
SAM: routine mode: %ld
SAM: suppressing suggestions because device is too close to an loi of type home or work
SAM: Recommendation complete
SAM: Create RR key...
SAM: Already started RR since %f, %f
SAM: Allowing tourist apps.
SAM: Ignoring tourist app %d.
SAM: Not recommending %s since installed apps are switched off.
SAM: Not recommending %d since uninstalled apps are switched off.
SAM: Candidate suggestion, %d
SAM: Recent suggestions: 
SAM: Adam ID, %ld, time since first recommended, %f
SAM: Not recommending hero apps since we've been recommending this app for >15 mins, timeSinceFirstRecommended, %f.
SAM: Performing store lookup for adam id %d
SAM: Error performing store lookup for adam id %lld, dropping. Error %s
SAM: Finished store lookup for adam id %lld
SAM: Recommending installed app %s...
SAM: adamId, %u, identifier, %s, suggested, %s
SAM: Recommending uninstalled app %s...
SAM: Not recommending the uninstalled app with adamId, %d, since it's blacklisted
SAM: Recent suggestions: %lu
SAM: %lu apps recommended
SAM: adam id: %ld, bundle id: %s
SAM: notifying %lu clients of %lu apps.
SAM: activity, %s, reached max attempts, %d, time until suggested again, %.2fs
SAM: could not get device identifier for vendor
SAM: Swipe-up into App Store with adamId, %s
SAM: Swipe-up into App Store with ... no adamId? Best guess is adamId, %s
SAM: Blipping the icon while App Store has been de-authorized.
SAM: Got empty bundle identifier set
SAM: Most recent app is still active.
SAM: Most recent app is no longer active.  Suggesting arbitrary beacon app
SAM: Suggesting iBeacon bundle identifier, %s
SAM: Setting bundle identifier, %s, to most recent
SAM: isInstalledAppSuggestionsAllowed, %d, isUninstalledAppSuggestionsAllowed, %d
SAM: delete all suggested actions not considered in %f wks
SAM: Display off, invalidating previous activity.
SAM: returning app, adamid, %ld, bundleId, %s, name, %s.
SAM: returning no apps.
SAM: adding suggested application client, total clients, %lu.
SAM: removing suggested application client, total clients, %lu.
SAM: Got unexpected notification: %d
SAM: This should never be executed.
Failed parse os_log format specifier for shimming:missing closing brace,format,%{public}s
%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f
Odometer failed to compute a mean pace.
Time didn't move! time,%f
Session distance estimate,odometer,%lf,generic stroke lengths,%lf
Doing crude accel measurement update.
rotBufferSize, %zu, accelBufferSize, %zuu, peakCount, %d, fMaxStd, %.3f
gyroDt, %.4f, doAccelCheck, %d
omegaMag6, %.3f, omega, %.3f, %.3f, %.3f
[AppleQuaternion] x,%f,y,%f,z,%f,w,%f,timestamp,%f
[Bias,Var] bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f
[Accelerometer6] x,%.4f,y,%.4f,z,%.4f,lpf, %.4f, %.4f, %.4f, timestamp,%lf
[RotationRate6X] %.3f, %.3f, %.3f, %.3f, %.3f
rotating and going through.
it's been too long. go through.
grabing gravity, %.4f, %.4f, %.4f
std, %.3f, %.3f, %.3f, mag, %.3f, dot, %.3f, leftover, %.3f
sum, %.3f, %.3f, %.3f, dot, %.3f, leftover, %.3f
===========Skip ahead.
Skip ahead------.
Taking another look.
using mean accel
accM, (%.4f, %.4f, %.4f), mag, %.3f
Doing some crude updates to catch up.
[KalmanFilterStates] %f,%f,%f,%f,%f,%f,%f
Setting magnetometer update interval to %f
Unrecognized magnetometer notification %d
Type,%s,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f
Received magnetometer offset (%f, %f, %f)
malformed mac address error: %s
mac address strict length error: %s
failed to read [%s]
PLOS: can't open file 
PLOS: endian
PLOS: sp3file
PLOS: sp3fileglonass
PLOS: header
PLOS_XTRA: header
PLOS: id
PLOS: id,%d,dataSize,%d
PLOS: GPS ALM
PLOS: GLO ALM
can't open [%s]
PLOS: failed to parse [%s]
PLOS:%s
eof,n,%ld,requested,%ld
Fitness: Companion model is %s
prevConnectedState,%s,currConnectedState,%s
Sending protobuf ID:%s size: %zd type: %d over IDSService - Status %d, md5 %s
No device locally connected - Ignore sending data
Received message ID:%s, type:%d, size %zd, md5 %s
Unexpected message received while disconnected. Updating status
Received data over IDSService size : %ld
Received unhandledprotobuf ID:%s, size:%zd
IDSService activeAccountsChanged
Service sent data with ID:%s with success %d error %s
Service data ack on otherside with ID:%s
Device is not activated, suspending activity tracking.
Failed to get TCC for motion, suspending activity tracking.
TILE: Override reachability on Watch
n and g are too close %f
Assertion failed: lambda != 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMOQuaternion.cpp, line 223,invalid weights.
kappa zero!
Simulated stroke
Simulated turn
Fence: fence, %s, is large, requesting, kFenceMonitoringOpportunistic
GPS: normalize unc value, %.1lf, %.1lf
Fence: location, why are you unknown?, %s
Fence: getStatusFromLocation, %s, fix, %c%c%c%c%c, isWifiPowered, %d,  effectiveDistance, %.2lf, distance, %.1f, entryRadius, %.1f, exitRadius, %.1f, adjDist, %.1lf, adjHorAcc, %.1lf, origHorAcc, %.1lf
Fence status changed to Inside, distToCenter, %.1lf, %s
Fence status changed to Outside, distToCenter, %.1lf, %s
Fence status remained unchanged, distToCenter, %.1lf, %s
CANDY: Could not derive hardware info for Init
CANDY: Compute failed with: %ld
CANDY: Verify failed with: %ld
Unhandled message %s
Couldn't create XPC message
The received data object is invalid.
Unable to send reply, a reply message does not exist.
Connection interrupted!
Location connection invalid!
Got unexpected location event
Error on message reply (%s)
Ignoring unexpected event
Couldn't get information from PID %u
PID %u either doesn't specify UIBackgroundModes, or SB timed out fetching them
client '%s' supports background location
platform does not support multitasking
Failed to become client of CLClientManager
WRTT: overriding burst size to %{public}d
PAUSE: BATCH: '%s' (%d, %p) started in the unknown state. Daemon?
PAUSE: BATCH: '%s' (%d, %p) started in unexpected state: %s
PAUSE: Override AutoPause to On for all clients
PAUSE: Override AutoPause to On for all clients linked with SDK that predates 6.0
PAUSE: Override AutoPause to Off for all clients
PAUSE: Override AutoPause to None
PAUSE: AutoPause log UI Enabled
PAUSE: activity type defaulted to %ld
{"msg":"Can't swap status bar assertions when both sides have values", "newValue":"%{public}hhd", "oldValue":"%{public}hhd", "event":"%{public}s", "condition":"%{private}s"}
message '%{public}s' received from client '%{public}s'
DaemonClient for %s received %s before kCLConnectionMessageRegistration. Ignore it...
#CLIUA Releasing InUseAssertion for %{public}s on behalf of %{public}s with reason %{public}s
#CLEEA Releasing EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s
{"msg":"#Stream #CLLIA Disablement assertion dropped", "me":"%{public}s"}
ending metric session (LocationUpdateSession) for %s
ending metric session (LocationMonitorSession) for %s
ending metric session (MotionTrigger) for %s
Releasing status bar assertion at EOL for %s (%d)
Client %s disconnected before delayed unvisibility transition
location system state, cell available, %d, wifi available, %d, passcode locked, %d, airplane mode enabled, %d, accessory connected, %d, reachability, %d, powered, %d, gpsCoexWifi, %d, gpsCoexBt, %d
ALTERED: toNvp: %.8f, %.8f, %.2f, %d, %d, %lf, %lf, %d, %.8f, %.8f, %.2f
Failed to convert location to nvp
Failed to convert location private to nvp
Sending location to client <%{public}s>
ClxClient, location, %s, type, %d, accuracy, %.1f
%s started actively spectating
%s stopped actively spectating
BATCH: successfully ended for %s
BATCH: location unavailable caused batch failure
Sending,vehicle speed,to client,%{public}s,time,%{public}.3lf,speed,%{private}.3lf
Sending,vehicle heading,to client,%{public}s,time,%{public}.3lf,heading,%{private}.3lf
Got active change notification; updating requests
Sending kCLConnectionMessageRegionMonitoringSetupCompleted for region,'%s/%s'.
Sending kCLConnectionMessageRegionMonitoringError for region,'%s/%s'.
Sending kCLConnectionMessageRegionState for region,'%s/%s'.
Sending kCLConnectionMessageRegionMonitoring for region,'%s/%s'.
Unsupported region transition state,%d will not be reported.
Unable to find ranged region,%s.
Sending kCLConnectionMessageRangingError for region,%s with error,%d.
Sending kCLConnectionMessageRanging for region,%s, with beacons,%d.
WRTT: %s received PeerRanging notification %d (fRegistrationResult %d)
WRTT: Send PeerRanges, %ld, Errors, %ld
WRTT: send Errors (%{public}lu) to client '%s'
WRTT: send Results (%{public}ld) to client '%s'
WRTT: Sending PeerRanging info to client '%s'
Fence: received, kNotificationRegionStateRequest, %s, state, %d, %s
Fence: unknown state, %d
Notifying client of fence %s for %s/%s (location <%+.8f,%+.8f> acc %.2f type %d)
Sending setup delayed message for %s/%s
Sending setup completed message for %s/%s
Fence: received, kNotificationFenceNotAuthorized
Fence: kNotificationFenceNotAuthorized, bundle not authorized for location, %s, fence, %s
Fence: received, kNotificationFenceFailure
Sending region monitoring error message for %s/%s
No alternate region available
Sending significant location change <%{private}+.8f,%{private}+.8f> acc %{private}.2f for %{public}s (pid %{public}04d)
Not notifying client %{public}s (pid %{public}04d) of significant location change because regular location updates are enabled
activity alarm triggered. (internal id %d)
Sent ear gesture message (prototype %s)
ignoring metric for phone pick-up
counting metric for non-phone pick-up
starting metric session (MotionTrigger) for %s
Sent gyro bias estimation message
Received GMM notification %d
Sent%s onBodyDetection message to %s, %s
PAUSE: %s received pause notification %d
Compass calibration achieved (L%d) for client '%s'
SLV: Client, %{public}s, fRegistrationResult, %{public}d
SLV: Sending visit, %{private}s, to client, %{public}s
SLV: Not delivering visit, %{private}s, to client, %{public}s, not authorized
BATCH: Time criterion met, waiting for location event to notify client %s
'%{public}s' received unknown notification: %{public}d
MicroLocation: %s received microlocation notification %d (fRegistrationResult %d)
Couldn't get CFString for entitlement
%s is %s for %s
Authorization status for %s is now %s (was %s)
client authorized; sending out cached message %s
client authorized but no longer interested in cached message %s; discarding cache
%s is still not authorized for %s, dropping
fRegistrationResult != CLClientManager->getClientEffectiveRegistrationResult for %{public}s: %{public}d != %{public}d
Sending denied error message to %s
PAUSE: Client %s entered background at %.1f
Client %s will transition to unvisible after grace period
Client %s is now unvisible
Client %s now visible, was %svisible%s
PAUSE: Client %s entered foreground (from %.1f)
PAUSE: Client '%s' was paused but not in the background
#CLIUA Client %{public}s now %{public}sbenefitting from an InUseAssertion
Client not authorized for message %{public}s
Client '%s' is not interested in %s
PAUSE: AutoPause is overridden to off, reject %s message to client '%s'
locationd paused updates to '%s' at %.2f. client autopause setting: %d, override setting: %d
PAUSE: Sending %s message to client '%s'
BATCH: Not batching but tried to finish with error %d
BATCH: Sending didFinishDeferredUpdatesWithError:%d message to client '%s'
Sending kCLConnectionMessageWakeClient for %{public}s to client '%{public}s'
Client '%{public}s' does not have required entitlement '%{public}s' to set effective bundle identifier, '%{public}s', or effective bundle, '%{public}s'
Client '%{public}s' is setting effective bundle identifier to '%{public}s'
Client '%{public}s' is attempting to masquerade as uninstalled app with effective bundle identifier '%{public}s'
Client '%{public}s' is setting effective bundle path to '%{public}s'
Client '%{public}s' is registering as a system service
Client %{public}s is attempting to masquerade as uninstalled app with effective bundle path <%{public}s>
Client '%{public}s' is a plugin, auto-masquerading as its containing app
Unentitled entity '%s' trying to tell us they are WatchKit
Setting client, %s, is actually a WatchKit extension, %d
{"msg":"#usesync Unentitled client claims to be a remote client", "client":"%{public}s"}
{"msg":"#usesync Setting client proxy for remote client", "client":"%{public}s", "is proxy":"%{public}hhd"}
{"msg":"#usesync #warning Received a ProxyForRemoteClient message for a client that failed to register.  Is it uninstalled?", "pid":"%{public}d"}
Unentitled entity '%s' trying to mark itself as having received location?!
Request to mark '%s' as having received location while it is not authorized
Marking '%s' as having received location without regard to authorization (it is %s, and presently %s authorization)
Malformed authorization request from '%s'
Unrecognized authorization value (%d) requested by '%s'
Dropping -request%sAuthorization from '%s': NSLocation%sUsageDescription Info.plist key not available?
Authorization value %{public}s requested by '%{public}s' ignored because not in its allowable mask (%{public}lu)
Authorization value %{public}s requested by '%{public}s' ignored because another authorization effort (%{public}d) is already in flight
Client '%s' changed activity type from %ld to %ld
received watchdog from client '%s'
Client %s does not have appropriate entitlement to enable match info
Client %s is setting match info enabled to %d
Setting persistent monitoring enabled to %d
Client now interested in persistent monitoring; adding as a significant change client
Client no longer interested in persistent monitoring; removing as a significant change client
Client %s does not have appropriate entitlement to change prompt behaviour
Couldn't get value for key %s
Client %s is setting location prompt allowed to %d
Client %s is setting location prompt show to %d
Client %{public}s is registering as a location client and will show up in Settings
Client %s is setting AutoPause to %d
Client %s is setting ContinuousBackgroundLocationRequested to %d
BATCH: startBatching called but we're already batching
BATCH: starting client %s
BATCH: scheduling odometer alarm for %.1f
BATCH: Odometer errored (%s) for client (%s)
BATCH: Odometer criterion met, waiting for location event to notify client %s
BATCH: Odometer fired (%.1f,%s) but no longer relevant to us
BATCH: scheduling timer for %.1f
BATCH: stopBatching called but we're not batching
BATCH: stopping client %s
BATCH: client %s disallowed Batch
BATCH: request (%.1fm, %.1fs) will be based on %.1fm (%.1fs), %.1fs for client %s
BATCH: How were we not updating location?
BATCH: How were we batching accuracy was too low?
BATCH: How were we batching if a distance filter was on?
BATCH: distance or timeout was <= 0 (techincally exit criteria has already been satisfied.)
Location uncertainty too high to allow deferred updates now
BATCH: odometer is not running, we have no way to know what distance is relative to
BATCH: scheduled batch exit but not off-boarding
Client %s is allowing message kCLConnectionMessageWakeClient
CLMM,Client,'%s',pid,%u,allowsMapCorrection,%d,desiredAccuracy,%lf,kNotificationMapMatching,%d
Couldn't get value for key %s, %s/%s
Client %s does not have appropriate entitlement to act as a proxy service to %s
Fence: requesting, kCLClientRegionCircular for, [%s]/%s/%s
Fence: requesting, kCLClientRegionBeacon for, [%s]/%s/%s
Got unhandled mesage of type %{public}s
#warning #CLIUA Not entitled as usage oracle... ignoring InUseAssertion taken by %{public}s
#CLIUA InUseAssertion taken by %{public}s malformed: lacking required argument
#CLIUA Neither bundleIdentifier nor bundlePath specified... ignoring InUseAssertion taken by %{public}s
#CLIUA Assertion requested with no reason... ignoring InUseAssertion taken by %{public}s
#CLIUA Taking InUseAssertion for %{public}s on behalf of %{public}s with reason %{public}s
#warning #CLEEA Not entitled as emergency enabler... ignoring EmergencyEnablementAssertion taken by %{public}s
#CLEEA InUseAssertion taken by %{public}s malformed: lacking required argument
{"msg":"#Stream There is already an active EmergencyEnablementAssertion on this connection, removing the old streamer to make room for the new one", }
#CLEEA Taking EmergencyEnablementAssertion on behalf of %{public}s with reason %{public}s
{"msg":"#Stream #CLLIA #warning Not entitled as a streaming disabler... ignoring LocationIndependenceAssertion", "client name":"%{public}s"}
{"msg":"#Stream #CLLIA LocationIndependenceAssertion is malformed.  Needs a reason.", "client name":"%{public}s"}
{"msg":"#Stream #CLLIA Taking a disablement assertion", "me":"%{public}s"}
client '%s' subscribing to location desiredAccuracy %.2f distanceFilter %.2f operatingMode %d dynamicAccuracyReductionEnabled %d allowsAlteredAccessoryLocations %d
client '%{public}s' unsubscribing from location
@ClxClient, unsubscribe, %{public}s
starting metric session (LocationMonitorSession) for %s
Adding geographic fence [%s]/%s/%s
Removing geographic fence [%s]/%s/%s
Adding beacon region,%s, options,%d.
Invalid beacon region request [%s]/%s/%s.
Removing beacon fence [%s]/%s/%s.
Client %s is attempting ranging as a proxy service to %s
Ranging any region,%s, requires an entitlement.
Unable to parse ranged region,%d.
Unable to subscribe to ranging.
WRTT: couldn't get entitlement for Client %s
WRTT: client %s does not have appropriate entitlement to access SPI
WRTT: daemon client received request,client,%s,subscribe,%{public}d
WRTT: peer %#llX, timeout %lf, len(keyID) %lu
WRTT: client '%s' subscribing to PeerRanging
WRTT: Client '%s' registered for PeerRanging notifications
WRTT: client '%s' unsubscribing from PeerRanging
WRTT: Client '%s' unregistered from PeerRanging notifications
Client %s did not pass entitlement/tcc checks.
Client %s cannot access sensor recorder, invalid target.
Received MotionState request,client,%s,subscribe,%d
Received MotionActivityUpdate request,client,%s,subscribe,%d
Cannot subscribe to motion activity updates, motion activity is not available
query for motion activity was received but motion activity is not available
Programmer error: Wrong parameters were passed!
Activity alarms not available.  Requested alarm will not be listened for.
Primed for activity alarm %d with duration %f (internal id %d)
CLDaemonClient got activity alarm callback after destruction... ignoring
Invalidated activity alarm %d with duration %f (internal id %d)
StepCount subscription changed, %s, %d, %p, %d
Cannot subscribe to step count updates, step counting is not available
Cannot subscribe to step count updates as step counting is not enabled
PedometerEvent subscription changed, %s, %d, %p, %d
Received OdometerGpsAvailability request,client,%s
Odometer subscription changed, %s, %d, %p, %d
Client %s does not have appropriate entitlement to access Sedentary Timer SPI
Client %s does not have appropriate entitlement to access user info spi
nil dictionary received from client
Error querying sedentary alarm data, %d
Received SedentaryTimerAlarm request,client,%s,subscribe,%d
Invalid message recieved from framework.
Client %s does not have access to motion activity spi because the platform is not supported
query for step count was received but step counts were not available
Error querying step count data
Error querying pedometer data, %d
Step count reset failed as it was not available!
Client %s does not have appropriate entitlement to access motion activity spi
CLDaemonClient received StrideCalibrationDump request,client,%s
Step counts notifier not available
[SidebandSensorFusion], Wrong parameters were passed!
[SidebandSensorFusion], Request failed, enabled, %d, snoop, %d, latency, %d, success, %d
Received Gesture request,client,%s,subscribe,%d
Priority not set
Got gesture subscription request, priority = %d, Client = %s
CLDaemonClient got ear gesture callback after destruction... ignoring
Got gesture unsubscription request, Client = %s
CLDaemonClient received GyroBiasEstimation request,client,%s,subscribe,%d
isBuildingGYTT not set
CLDaemonClient got gyro bias estimation subscription request,isBuildingGYTT,%d
Warning: CLDaemonClient got gyro bias callback after destruction... ignoring
CLDaemonClient got gyro bias estimation unsubscription request
Received GMM request,client,%s,subscribe,%d
Client %s does not have appropriate entitlement to access on body detection SPI
Received OnBodyDetection request,client,%s,subscribe,%d
Wrong parameters were passed!
Client %s does not have appropriate entitlement to access natalimetry SPI
Location services are disabled preventing motion calibration.
Calorie subscription changed, %s, %d, %p, %d
Error querying natalimetry data, %d
handleMessageNatalimetryGetUserProfile,profile,%s
handleMessageNatalimetrySetUserProfile,profile,%s
Setting calorie session %d %p %p
Unable to clear activity when session was not previously set.
Unable to override activity.  Another client has already requested an activity session.
Duplicate workout start received, type, %d, sessionId, %s, %p, %p
STARTING workout, type, %lu, sessionId, %s, %p, %p
Unable to start workout, another client has an active workout.
No active workouts to stop, type, %lu, sessionId, %s, %p, %p
STOPPING workout, type, %lu, sessionId, %s, %p, %p
WorkoutEvent subscription changed, %s, %d, %p, %d
isConnectedToCompanion: %d, promptsNeeded: %ld.
handleMessageNatalimetryResetCalibration Resetting calibration.
Calibrations were successfully cleared.
ExerciseMinute subscription changed, %s, %d, %p, %d
Error querying exercise minute data, %d
SwimData subscription changed, %s, %d, %p, %d
Failed to subscribe to swim updates.
Programmer error: Wrong parameters were passed.
Query: id, %llu, session, %s, db, %s, Response (numel): %lu
SignificantElevation subscription changed, %s, %d, %p, %d
Failed to subscribe to significant elevation updates.
Client %s does not have appropriate entitlement to access catherine provider SPI
Packet contains nil catherine data
Client %s does not have appropriate entitlement to run miniCal
(%f, %f), %d records returned
Allocating mmap buffer.
Requesting id, %llu, meta id, %llu
[CaptureMode], Wrong parameters were passed!
client '%s' subscribing to compass filter %.2f
client '%s' unsubscribing from compass
client '%{public}s' subscribing to significant location change notifications (persistent %{public}d)
client '%s' starting significant location changes
client '%{public}s' unsubscribing from significant location change notifications (persistent %{public}d)
client '%s' stopping significant location changes
SLV: Client, %{public}s, subscribe, %{public}d
Client %s does not have appropriate entitlement to access vehicle data SPI
Received VehicleSpeed request,client,%s,subscribe,%d
client '%s' subscribing to vehicle speed
client '%s' unsubscribing from vehicle speed
Received VehicleHeading request,client,%s,subscribe,%d
client '%s' subscribing to vehicle heading
client '%s' unsubscribing from vehicle heading
Client %s does not have appropriate entitlement to access MicroLocation SPI
Received MicroLocation request,client,%s,subscribe,%d
client '%s' subscribing to MicroLocations
client '%s' unsubscribing from MicroLocations
Received Current MicroLocation request from client '%s'
MicroLocations are not available on this platform. %s
Client '%s' not authorized for microlocation notifications
Client '%s' registered for MicroLocation notifications
Client '%s' unregistered from MicroLocation notifications
Client %{public}s (%{public}p) is %{public}ssubscribing to notification %{public}s
fRegistrationResult != CLClientManager->getClientEffectiveRegistrationResult for %s: %d != %d
client '%s' has an incomplete registration result; not starting ranging yet
missing client '%s' is attempting to start ranging updates
client '%s' not authorized for ranging; not starting yet
Starting ranging for regions,%lu.
There are no regions to range.
Stopping ranging.
client '%{public}s' has an incomplete registration result; not starting location yet
missing client '%s' is attempting to start location updates
client '%{public}s' not authorized for location; not starting yet
Client '%{public}s' paused, not starting location
client '%{public}s' authorized for location; starting now
client '%{public}s' authorized for location; starting now, desiredAccuracy, %{public}.1lf, distanceFilter, %{public}.1lf, operatingMode %{public}d, dynamicAccuracyReductionEnabled %{public}d, allowsAlteredAccessoryLocations %{public}d
@ClxClient, register, %{public}s, accuracy, %{public}.1lf
@WsbReg, DaemonOpportunistic, %{public}s
@WsbReg, DaemonActive, %{public}s
Not registering for location updates for %s; the planets don't align
Not registering for location updates for %s; desiredAccuracy is too high
BATCH: stop because accuracy changed %s
register for notification, %d, %s, desiredAccuracy, %.1f
BATCH: stop because distance filtered %s
starting metric session (LocationUpdateSession) for %s
received location system state of LocationUpdateSession for %s
BATCH: stop because stopping location for %s
Client %s registered for autopause notifications
'%s' failed to become client of CLAutopauseProvider
PAUSE: Client '%s' unregistered for autopause notifications
PAUSE: Unregistering for autopause notification when client '%s' does not exist
PAUSE: '%s' not a location client (%d), or not authorized (%d).
PAUSE: '%s' overridden to off.
PAUSE: '%s' not allowed to pause.
PAUSE: '%s' not backgrounded right now (%.1f).
PAUSE: now clock %f timestamp %f thresh %f.
PAUSE: client: '%s' type: %ld states: veh %d fit %d oth %d
PAUSE: '%s' not changing state wasPaused: %d lastState: %d now clock: %f timestamp: %f thresh: %f.
PAUSE: %s (%p) changed from %d to %d
PAUSE: Pausing client '%s'
PAUSE: Resuming client '%s' (This should be handled on framework side)
initializing process assertion to support background location for client '%s' (pid %u)
Couldn't initialize process assertion for client '%s' (pid %u)!
Client,%s, pid,%u, is performing batch location, allowing idle sleep.
Client,%s, pid,%u, is performing batch without location.
Client,%s, pid,%u, is not performing batch location, preventing task suspend.
Releasing process assertion for pid %u
Completed async acquire of status bar assertion for %{public}s (PID:%{public}d)
Failed async acquire of status bar assertion for %s (PID:%d)
{"msg":"swapStatusBarAssertion should return nil, here", "event":"%{public}s", "condition":"%{private}s"}
Creation of status bar assertion failed synchronously for %s (PID:%d)
Completing async release of status bar assertion for %{public}s (PID:%{public}d)
For %s (PID:%d)  Background:%s  Started:%s  WhenInUse:%s > Needed:%s  Action:%s
Allowing process assertion for %s in foreground.
Allowing process assertion for %s because they are in use.
Allowing process assertion for %s due to client manager.
Denying process assertion to %s
Scheduling proactive compass start for client '%{public}s' with delay %{public}.2f
Starting compass proactively for client '%{public}s'
Proactive compass timer fired
Stopped proactive compass timer for client '%{public}s'
Stopped proactive compass for client '%{public}s'
{"msg":"#Stream There is an active fitness assertion even though our activity type wasn't fitness", "old activity":"%{public}ld"}
{"msg":"#Stream There isn't an active fitness assertion even though our activity type was fitness", }
BATCH: client, '%s', batchEnabled, %d
WRTT: No key when retrieving data
WRTT: peer without a key
TmmFile, name, path, %s, servername, %s
Could not serialize data
{"msg":"Failed to create a CLBundleLocation provider", "name":"%{public}s", "silo":"%{public}s", "bundleIdentifier":"%{public}s", "bundlePath":"%{public}s"}
#BLP attempting to create bundle location provider with NULL bundle path and NULL bundle identifier
#BLP bundle path does not exist, %{public}s
#BLP no application installed backed by bundle identifier, %{public}s
BLP: Need a bundle path or a bundle identifier.
BLP: Couldn't create client for bundle path %s
BLP: Registering with desired accuracy %d (%s)
BLP: Location distance filter is now %.2f (%s)
BLP: Stopping location updates (%s)
BLP: CLBundleLocationProvider does not support spectators (%s)
BLP: Bystander distance filter is now %.2f (%s)
BLP: Stopping bystander location updates (%s)
@WsbReg, bundleId, %{public}s, active, %{public}d, clients, %{public}ld
BLP: starting wifi location batch, bundleId, %s
BLP: stopping wifi location batch, bundleId, %s
Could not get location from location event (%s)
BLP: Could not get authorization status (%s)
BLP: Couldn't retrieve authorization status for %s
BLP: Couldn't retrieve location for %s
not connected to wifi #tile tables database
{"msg":"failed to count number of rows for table", "table":"%{private}s"}
{"msg":"Unexpected number of access point entries in tile", "actual":"%{public}d", "expected":"%{public}d", "tableName":"%{private}s"}
{"msg":"Failed to parse tile coordinates from table name.", "tableName":"%{private}s"}
{"msg":"bad #tile database raii statement", "database==NULL":"%{public}hhd", "statement==NULL":"%{public}hhd", "event":"%{public}s", "condition":"%{private}s"}
Natalie Model, Cross Training Compendium METS, METS, %f
Couldn't create XPC service
Got error: %s
Unexpected event type %s
Creating instance
Clearing stats
Collecting stats
Incrementing vulcan exercise minutes -- creditTime:%f exerciseMinuteMode:%d
Incrementing vulcan calories -- calories:%f rawMets:%f pushes:%d activityType:%d
Incrementing vulcan push failures
Incrementing exercise minutes -- onGrade:%d
Incrementing METs -- mets:%f metsFromGrade:%f
Using simulated location <%+.8f,%+.8f> acc %.2f alt %.1f vacc. %.2f type %d
Attempt to start scenario, but no scenario is loaded!
Couldn't set simulation scenario
Couldn't parse simulation scenario data
Couldn't get locations array for simulation scenario
Applying new simulation scenario with %ld locations
Location %d for simulation scenario is of incorrect format
Location %d for simulation scenario is of incorrect type (%s)
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Type,%d,%s,Speed,%.2f,Course,%.2f,Confidence,%d,Lifespan,%.3f,LocationTimestamp,%.3f,Age,%.3f,
Setting simulation type to %d
Setting repeat behaviour to %d
Setting location interval to %.2f
Setting location speed to %.2f
Setting intermediate distance to %.2f
fNextLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
Time delta is %.2fs
Simulation start request received
Simulation stop request received
Simulation type changed from %d to %d
Repeat behaviour changed from %d to %d
Intermediate distance changed from %.2f to %.2f
Interval changed from %.2f to %.2f
Travelling speed changed from %.2f to %.2f
interval = %.2f, fNextLocation.timestamp = %.2f, time = %.2f
Clearing all pending locations and settings
Preparing next location
No more pending locations
Scheduling send of location unavailable notification
Sending appropriate location unavailable notification
Repeat location behavior selected; repeating last location
Looping repeat behavior selected; starting scenario again
Simulation is not running
Nowhere to go; not preparing next location
Adjusting next location timestamp (%.2f) forward by %.2fs
snl: fNextLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
snl: fCurrentLocation is <%+.8f,%+.8f> acc %.2f timestamp %.2f
snl: speed is %.2f, timeElapsed = %.2f
distance is %.2f
Reached location <%+.8f,%+.8f>, preparing next
Next location is <%+.8f,%+.8f>
Propogating <%+.8f,%+.8f> acc %.2f for %.2f seconds at %.2f m/s course %.2f
Notify location is %+.8f,%+.8f (speed %.2f, course %.2f, timestamp %.2f)
Notifying in %.2f seconds
Unknown simulation type %d
No location provider found for <%+.8f,%+.8f> acc %.2f timestamp %.2f type %d
Sent simulated location to provider %p
Timer fired on companion,currentMotionCalsVersion,%d
Companion sent calibrations to watch: %s
Clearing a stale vo2max of 0 value.
Loaded Motion Cals from backup: fMotionCals, %s, current version, %d
No motion cal backup file was found at path: %s. Restore PAL.
quickswitch protocol %d
PAL is updated from %f to %f
PAL not loaded or changed.
Loaded Motion Cals from PAL: fMotionCals, %s, current version, %d.
Asked to persist Motion Cals, current version, %d, isDeviceCurrentlyUnlocked, %d
Companion did not persist Motion Cals, waiting until next unlock, current version, %d, isDeviceCurrentlyUnlocked, %d
Companion persisted calibrations to disk, fMotionCals = %s
Companion received calibrations from watch: %s
Failed to retreive default stride bins.
Buffered: version, %d, UDID, %s, timestamp, %lf, Current: version, %d, UDID, %s, timestamp, %lf, result, %d
Run Linear Regression, WorkRate, %f, distance(m), %f, duration(s), %f, mets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f
Run Grade correction applied, Grade type, %d, vertical speed %f, interval %f, workrate %f, mets %f, mets + grade %f, percent grade %f
Run Model, energy, %.1f,mets from intensity, %.1f
Step count went backwards (%u -> %u). locationd starting? Motion Co-processor reboot?
lastEntry.timestamp,%f,entry.timestamp,%f,incrementalStep,%u,rawDistance,%f,calibratedDistance,%f,calibratedPace,%f,totalCalibratedDistance,%f,kvalue,%f,calibratedSpeedMph,%f,sigma,%f,lowerBound,%f,upperBound,%f
rotBufferSize9, %zu, accelBufferSize, %zuu, peakCount, %d, compassBufferSize, %zu
gyroDt9, %.4f, doAccelCheck, %d
fAccelBuffer,size,%zu
omegaMag9, %.3f, omega, %.3f, %.3f, %.3f
[AppleQuaternion9] x,%f,y,%f,z,%f,w,%f,timestamp,%f
[Accelerometer9] x,%f,y,%f,z,%f,timestamp,%lf
[RotationRate9] %.3f, %.3f, %.3f, %.3f
[KalmanFilterStates9] %f,%f,%f,%f,%f,%f,%f
[KalmanFilterStates9-AccelUpdate] %f,%f,%f,%f,%f,%f,%f
[CompassIntoKF] timestamp,%f,calibration level %d, compassHasAlignedToStableField %d, useMagneticRefX %d
[CompassIntoKF] fLastAccelTime,%f
[CompassIntoKF] magneticFieldAdjusted!
rotAroundGrav, %.3f, sum, %.3f
[CompassIntoKF] omegaMag, %.3f, omegaVar, %.3f
FieldDiff, %.3f, %.3f, %.3f, %.3f
Aborted yawUpdate.
Checking again for magField. checkcount, %d
fCorrected, %.3f, %.3f, %.3f
[!!!CompassInertialReference] x,%f,y,%f,z,%f,calibrationLevel,%d,timestamp,%lf
Warning: Compass outputs field magnitude 0.
[!!!CompassInertialReference] x,%f,y,%f,z,%f
UpdatingYaw!
[Magnetometer9] x,%f,y,%f,z,%f,timestamp,%lf
Warning: Hey! Compass outputs field magnitude 0.
[ExpectedCompass] %f,%f,%f,%f
[TrueCompass] %f,%f,%f,%d,%f
[MagCCross] %f,%f,%f,%f,%f,%f,%f,%f,%f,%f
[MagCorrectionDX] %f,%f,%f,angle,%.3f,sumRot,%.3f,%f
OscarEmulation,%d
received daemon start notification for service %s
Creating connection
Destroying connection
Sending cached messages to daemon
No cached registration message
KF:Attempting update,%d,%.8f,%.8f,hunc,%.1f,conf,%d
KF:Single AP: Dual input rejection of %.7f %.7f
KF:input should not be rejected after a hard reset
KF:Dual rejection of %d, %.7f %.7f, blunder detected
KF:longTermStatic should not fail if longTermNormal succeeded
KF:Dual,%.3f,%d,%d,%d,%.8f,%.8f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%s
KF:calcTPTQ failed
KF:boundLatitude failed
KF:boundLongitude failed
KF:updateMotion failed unexpectedly
KF:calc_dNdE failed
KF:Prediction failed
KF:re-init,uncertainty growth>%.0lf
KF:ZUPT failed
KF:ZUPT innovation update failed
KF:Cannot update KF with <0.0,0.0> position
KF:input horizontal accuracy == 0. Using horizontalAccuracy = 9999000.0 m
KF:P is not dimensioned
KF:x is not dimensioned
KF:input horizontalAccuracy < 0
KF:too many consecutive update rejections,KF reset
KF:update with same cell location ignored
KF:re-init,dT>%.0lf
KF: non-GPS within %.1f of GPS, ignoring.
KF:diverged compared to med/high conf WiFi, resetting.
KF:Transition from coarse GPS to WiFi detected. Position uncertainty bumped to %.1f m
KF:diverged,%.3lf,reseeding,inputType,%d,latitude flagged,%.1lf
KF:reseed,type,%d,%.8lf,%.8lf,%.3lf,hunc,%.3lf,vunc,%.3lf,conf,%d
KF:lts,%.3lf,inputType,%d,latitude rejected,%.1lf
KF:ltn,%.3lf,inputType,%d,latitude rejected,%.1lf
KF:lat innovation update failed
KF:increment num rejections by half
KF:diverged,%.3lf,reseeding,inputType,%d,longitude flagged,%.1lf
KF:lts,%.3lf,inputType,%d,longitude rejected,%.1lf
KF:ltn,%.3lf,inputType,%d,longitude rejected,%.1lf
KF:Input is not consistent with prior input. Filter reseeding.
KF:seedTheFilter failed
KF:lon innovation update failed
KF:lts,%.3lf,inputType,%d,velocity north rejected,%.1lf
KF:ltn,%.3lf,inputType,%d,velocity north rejected,%.1lf
KF:vn innovation update failed
KF:computePht_and_hPht failed
KF:sigma2_v <= 0
KF:lts,%.3lf,inputType,%d,velocity east rejected,%.1lf
KF:ltn,%.3lf,inputType,%d,velocity east rejected,%.1lf
KF:ve innovation update failed
KF:updateP failed
KF:sanityTestP failed
KF:Not applying the uncertainty floor.
KF:lts,%.3lf,inputType,%d,altitude rejected,singleAP fix rejected,%.1lf
KF:ltn,%.3lf,inputType,%d,altitude rejected,singleAP fix rejected,%.1lf
KF:getResult failed
KF:Filter corrobarated by type,rejects now allowed
KF:Filter corrobarated by position,rejects now allowed
KF:rejected cell and wifi locations are consistent,filter should reset
KF:rejected cell and coarse-gps locations are consistent,filter should reset
KF:rejected wifi and coarse-gps locations are consistent,filter should reset
KF:diagonal element of P < 0
KF:dN == 0
KF:x is not dimensioned, innovation not applied
KF:k is not dimensioned, innovation not applied
KF:latitude, %.7f rads, is out of bounds
KF:longitude, %.7f rads, is out of bounds
KF:init P failed
KF:Pht is not dimensioned
KF:h_index exceeds bounds
KF:k is not dimensioned
KF:hunc == 0
KF:speedUnc == 0
P was not dimensioned
KF:tuning invalid
KF:Q was not dimensioned
KF:tuning invalid, beta == 0
KF:fKalman.dN == 0.0 || fKalman.dE == 0.0
KF:dT < 0
Q is not dimensioned
KF:beta is zero
KF:setQ failed
KF:P is not symmetric
unsupported location type, type=%d
%%1:KF:,2:lts-or-ltn,3:timestamp(s),4:inType,5:outType,6:motionState,7:latitude(deg),8:longitude(deg),9:altitude(m),10:speed(km/hr),11:course(deg),12:hunc(m),13:vunc(m),14:sunc(m/s),15:cunc(deg),16:v_standardized^2
KF:,lts,%.3f,%d,%d,%d,%.8f,%.8f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%s
KF:,ltn,%.3f,%d,%d,%d,%.8f,%.8f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%.1f,%s
Fence: why is this used?, %s, %lf
Fence: fence, %s, became empty
Unhandled notification %d.
Disabling update timer.
Sending session update.
Starting pressure calibration, user initiated, %d
Pressure dispatcher was expected to be null.
temperatureOffsetCoefficient,%f,medianAbsoluteDeviation,%f,minTemp,%d,maxTemp,%d,valid,%d
Stopped pressure calibration
Cannot get PRTT property
PRTT version (%u) does not match expected versions (%u, %u)
factory calibrated temperature from syscfg: %f
Warning: factory calibrated temperature (%f) is not within acceptable bounds: [%f, %f], using default: %f
Warning: using default factory calibrated temperature: %f
size of tco list (%lu) is less than minimum (%d) required for median computation
TocMedian,%f,TocDrift,%f,TocDriftMAD,%f,TocCount,%u
pressure,%f,temperature,%f,timestamp,%f
supervised capability changed from, %d, to, %d
iCloud managed apple ID capability changed from, %d, to, %d
installed education profile capability changed from, %d, to, %d
iTunes managed apple ID capability changed from, %d, to, %d
registered for kNotificationContext
registered for kNotificationContextSpectator
CLMM,MapMatchingGeometryType,%s
CLMM, PlatformSupportsMapMatching, %d
OBM,fPlatformSupportsOutdoorMatching,%d
CLMM, EnableNMEAMapMatching, %d
CLMM, EnableVerboseMapMatching, %d
PLOS, ObmVerboseLogging, %d
CLMM, MapMatchingNetworkUsageThermalLevelHighThreshold, %d
CLMM, MapMatchingNetworkUsageThermalLevelLowThreshold, %d
unexpected kNotificationMovementCoarse
Unhandled case
Going to sleep. Not providing motion state, %d, to the location KF
CLMM, MotionState,type,%d,confidence,%d,mountedState,%d,mountedConfidence,%d
OBM, MotionState,type,%d,confidence,%d,mountedState,%d,mountedConfidence,%d
Unknown notification %d
device entering sleep - no longer has active cell
device wake - checking for corresponding sleep
wake detected with no prior sleep known, sending unknown motion to location KF at time, %.3lf
CLMM,AllowNetworkUsage,%d,batterySaverMode,%d,thermalVoteToAllow,%d,signalEnv,%d,isMapsForeground,%d
FenceCal: init globals
FenceCal: WifiFenceCalculatorDebug =%d
FenceCal: WifiFenceCalculatorDebugVerbose =%d
FenceCal: WifiFenceCalculatorMinNumAPs =%d
FenceCal: WifiFenceCalculatorSTDFactorMeters = %5.1lf
FenceCal: WifiFenceCalculatorRadiusFactor = %5.1lf
FenceCal: WifiFenceCalculatorMaxFenceRadius = %5.1lf
FenceCal: WifiFenceCalculatorMaxChosenAPs = %d
FenceCal: WifiFenceCalculatorMaxApsPerTileFactor = %lf
FenceCal: WifiFenceCalculatorSignificantScoreUpdateThresh = %lf
FenceCal: WifiFenceCalculatorGroupWeightForExit = %d
FenceCal: WifiFenceCalculatorMinApsPerFence = %d
FenceCal: WifiFenceCalculatorDefaultMaxChannelSetSize = %d
FenceCal: WifiFenceCalculatorDefaultChannelFilter = %d
FenceCal: WifiFenceCalculatorAPsScoreFilter = %d
FenceCal: gBlackListedAP = %s
FenceCal: init globals - done
FenceCal: fMaxChannelSetSize, %d, kMaxChannel, %d, fChannelFilter, 0x%X, fDefaultChannelFilter, 0x%X
bad CLStandardNormalDistribution(%lf) = %lf
FenceCal: Adding score, fence, %20s, score, %.8lf, min, %.8lf, avg, %.8lf, max, %.8lf, scores, %lu, aps, %zu
fChosenAPs is empty
FenceCal: start calculate fence, %-24s, C, center, %.8lf, %.8lf, radius, %.8lf, isMonitorForExit, %d
FenceCal: isExit, %d, fRadiusFactor, %.1lf, fenceRadius, %.1lf
FenceCal: really bad fence, %s
FenceCal: limit ePNO fence size, fence, %s, fMaxRadius, %.1lf
Invalid fence name, %s, latitude, %lf, longitude, %lf, radius, %lf
FenceCal: tile, y, %d, x, %d, index, %d, distanceFromCenter, %5.5lf, maxApsPerTile, %d, ApsFactor, %.5lf
FenceCal: fetch APs start
FenceCal: fetched, %ld, APs, forceFetchingExpectedAps, %d
FenceCal: expectedAp, %s
FenceCal: Where did you come from : %s
FenceCal: ap2Tile, %s, maxApsPerTile, %2d, left, %4d, top, %4d, tile, %4d, mac, %-24s, numAPs %4zu
FenceCal: calTile, %2zu : %3d / %3zu, %.8lf, %.8lf, FF0000FF
FenceCal: end calculate fence, %-24s, C, center, %.8lf, %.8lf, radius, %.8lf, isMonitorForExit, %d
FenceCal: ignore black listed AP, %s
FenceCal: avoid adding moving AP as an exit AP, %s
FenceCal: adding non-2GHz, reason: %s, %s
FenceCal: reason, %s, no budget / channel for, currentCount, %zu, apsBudget, %u, channelFilter, 0x%08x, isAddChannel, %d, isBlacklisted, %d, apLocation, %s
FenceCal: Adding AP, reason, %s, channelFilter, 0x%08x, isExit, %d, currentCount, %zu, apsBudget, %u , mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, added, %d
FenceCal: isAddChannel, %d, maxChannelSetSize, %d, totalAps, %.0lf, channelHistogram, sorted, channel, %2d, weight, %.3lf
FenceCal: addedChannels, %d, channelFilter, 0x%08x, totalWeight, %.3lf
FenceCal: calculateGroup, start, group size, %zu, apsBudget, %u, currentlySeen, %zu, minScoreThresh, %.4lf
FenceCal: calculateGroupLocation, %s
FenceCal: channelFilter, 0x%08X,countNumOfSetBits,%d
FenceCal: CurrentlySeen, %2d, %2lu, known, %2d, reached, %2u, %2d, isUseAP, %d, channels, %d, %s
FenceCal: before Blacklist, apLocation, %s
FenceCal: Blacklist, distanceToExpectedApLocation, %.1lf, distanceToFenceCenter, %.1lf
FenceCal: after Blacklist, apLocation, %s
FenceCal: Blacklist, fence, %s, result.fChosenAPs, %lu, isExit, %d
FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, score, %+.4lf, newScore, %+.4lf, minScoreThresh, %+.4lf, totalChosenAps, %d, apsBudget, %d
FenceCal: fence, %s, group pass, %3d, currentWeight, %3d, %3d, upgrading score from, %.4lf, to, %.4lf, from, %4zu, to, %4zu, APs, index, %2d, totalChosenAps, %d, apsBudget, %d
FenceCal: fence, %s, score too close, currentScore, %lf, newScore, %lf, significantUpdateThresh, %lf, updating next step to, %d
FenceCal: passNum, %d, commitedAPs, %d, totalChosenAps, %d, numOfAps, %zu
FenceCal: group result, %30s, totalChosenAps, %4d, apsBudget, %4d, index, %4zu , %4zu, aps, %4zu, %4zu, score, %.2lf, index, %4d, dbgCounter, %4d
FenceCal: group result, %30s, can't be monitored
FenceCal: no score for, %s, fChosenAps, %4zu
FenceCal: chosenScore, %-16s, fChosenScoreIndex, %4d, numOfAps, %4zu, %4zu, score, %.2lf
FenceCal: topping, %zu, apsBudget, %u
FenceCal: Topping, %s, fChosenScoreIndex, %d, total, %zu
FenceCal: topping, from APs, %zu, to APs, %zu
FenceCal: finised topping, %zu, apsBudget, %u
FenceCal: fence, %s, isExit, %d, fChosenScoreIndex, %d, fChosenAPs, %zu, fChosenAPsScores, %zu, canBeMonitored, %d, canBeMonitoredInGroup, %d, numOfExitFences, %u
FenceCal: calculateGroup, end, return val, isOK, %d, numOfFences, %zu, numOfExitFences, %d, combinedCanMonitor, %d, combinedCanMonitorGroup, %d, combinedCanMonitorExitGroup, %d
Return entry AP, index, %2zu, %2zu, %s
Return exit AP, index, %2zu, %2zu, %s
Fence: remove %s/%s from %s, remaining fences, %lu
Fence: kill combinedFence, %s, remaining fences, %lu
FenceCal: combining fence, %s
FenceCal: combine fine fence, distance, %.1lf, %s
FenceCal: combine large fences, distance, %.1lf, %s
FenceCal: combine non-fine non-large fence, distance, %.1lf, %s
FenceCal: do not combine combine fence, distance, %.1lf
FenceCal: creating a new combined fence for, %s
FenceCal: adding to, %s, isExit, %d
FenceCal: No fences
FenceCal: finalizedCombinedFence, %s
FenceCal: fDistanceFromCurrentLocation, %.2lf, %s
dCOLLECT: no chosen score, was calculateGroup called?
SLC: fIsUseCellLocation, %d
SLC: init
SLC: fWakeInterval, %.1lf
SLC: gSLCShowUI, %d
SLC: Overriding fence start delay to %.2f
%d significant location change clients at %.3fs wake interval
SLC: fLowPriorityScan, %d
SLC: can't check airplane mode
SLC: fIsConsolidateTriggersEnabled, %d
SLC: fConsolidatedTriggersTimeInterval, %.1lf
SLC: failed to allocate, fConsolidatedTrigger
SLC: shutdown
Could not store significant change clients
SLC: registerForNotificationInternal, notification, %d
SLC: An internal client has registered for significant location change notifications
SLC: Got registration for %s (client %d)
SLC: No registration info for client %d
SLC: Got unregistration for client %d (%s)
SLC: unregisterForNotificationInternal, notification, %d
SLC: All internal clients have unregistered for significant location change notifications
SLC: location changed, date, %ld/%ld, time,%ld:%ld:%ld, loc, %.8lf, %.8lf, acc, %.2lf, distance, %.1lf
SLC: handleSignificantLocationChange, location, %s
SLC: Currently sending significant location changes read from defaults.
SLC: Delete 'SpoofSignificantLocationChange' from defaults to continue monitoring SLC updates.
SLC: AirplaneMode is enabled, ignoring location
SLC: location services is disabled, ignoring location
SLC: Significant location change got invalid location!
SLC: Ignoring inaccurate location, %s
SLC: Ignoring inaccurate GPS location, %s
SLC: Ignoring inaccurate WIFI location, %s
SLC: Significant location change monitoring not active; not handling <%+.8f,%+.8f> acc %.2f
SLC: Adjusting accuracy for <%+.8f,%+.8f> type %d from %.2fm to %.2fm
SLC: Adjusting lifespan to be finite
SLC: handleSignificantLocationChange, distance, %.1lf, timeDelta, %.1lf, maxFactor, %.1lf
SLC: <%+.8f,%+.8f> acc %.2f timestamp %.2f is stale, discarding
SLC: <%+.8f,%+.8f> acc %.2f moved only %.2fm from previous significant location <%+.8f,%+.8f> acc %.2f, discarding
SLC: Lifespan of previous significant location <%+.8f,%+.8f> acc %.2f has not expired (timestamp %.2f, lifespan %.2f), discarding <%+.8f,%+.8f> acc %.2f
SLC: Timestamp %.2f of previous significant location <%+.8f,%+.8f> is less than %.2f seconds ago; discarding <%+.8f,%+.8f> acc %.2f
SLC: Location <%+.8f,%+.8f> acc %.2f is too far (distance %.2f) from previous location <%+.8f,%+.8f> acc %.2f from %.3fs ago, discarding
SLC: avoiding too frequent SLC notificaitons, age, %.1f, prev location, <%+.8f,%+.8f>, acc, %.2lf, new location, <%+.8f,%+.8f>, acc, %.2f
SLC: issue notificaiton, distance, %.1lf
SLC: got first location, not sending SLC notificaiton
SLC: no location change
SLC: register to FenceMonitor, make sure the wake timer is off
SLC: unregister from FenceMonitor, make sure the wake time is on
SLC: reporting a location change 
SLC: new location is not useful
SLC: slcUpdate, slc, %d, staticLocations, %2d, %2d, distance, %5.1lf, requestFence, %d, type, %s, loc, %.8lf, %.8lf, acc, %4.0lf, staticInterval, %5.1lf, statThresh, %5.1lf, sinceLast, %5.1lf
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Lifespan,%.2f,LocationType,%d,PrevLocation,%+.8f,%+.8f,%.2f,Distance,%.2f,DeltaTime,%.3f,Clients,%d,
Couldn't get list of significant location change clients
SLC: numClientsMonitoringSignificantLocationChanges, clients, %lu
SLC: numClientsMonitoringSignificantLocationChanges, %s
SLC: num clients, %lu, airplane, %d
SLC: Starting monitoring for %s
SLC: %s: monitoring active %d, current clients %d
SLC: %s: monitoring active %d, monitoring added %d, airplane, %d
SLC: can't get name, bundleId, %s, name, %s, %s, %s
SLC: %s is no longer a significant change client, airplane
SLC: %s is now a significant change client
SLC: %s is no longer a significant change client
SLC: Stopping all significant location change clients, clients, %lu, airplane, %d
Stopping monitoring for %s
SLC: client, %s, is already monitored internal, %d
SLC: Added significant location change client %s; now %d (%d monitored)
SLC: Location services is not enabled; not adding significant location change client %s
SLC: client, %s, is already monitored, %d
SLC: Removed significant location change client %s; now %d
SLC: %s is no longer authorized; stopping monitoring
SLC: %s is now authorized; starting monitoring
SLC: Removing all %ld significant location change clients
SLC: checkSignificantLocationChangeMonitoringStatusInternal, locationServicesEnabled, %d, airplane, %d, active, %d, hasLocationClients, %d, numOfClients, %d
SLC: Starting significant location change monitoring
SLC: Stopping significant location change monitoring
SLC: updateSystemWakeTime
SLC: Significant location change isn't active; not updating system wake time
SLC: updateSystemWakeTime, staticCount, %d, staticInterval, %.0lf, next wake in, %.1lf, seconds, wifi, %d
SLC: updateSystemWakeTime, no more wakes, wifi is, %d
SLC: starting significant location change monitoring
SLC: System wake timer fired, elapsed time, %.1lf
SLC: enableBackgroundWakeServices_nl, %d
SLC: disableBackgroundWakeServices_nl
SLC: onSettingsNotification
SLC: Spoofing a Significant Location Change: %s
SLC: onLocationNotification, location, %s
SLC: kNotificationUninstallation, %d
SLC: kNotificationAuthorization, %d
SLC: Removing all significant location change clients
SLC: Location services is now disabled; stopping significant location change monitoring
SLC: Location services is now enabled; starting significant location change monitoring
SLC: Reauthorizing clients by toggling significant location change
SLC: Got unknown client notification %d
SLC: Got kNotificationAirplaneMode, airplane, %d, %d, %d
SLC: Got kNotificationMigration, locationServicesEnabled, %d
SLC: unknown notification, %d
SLC: resetStaticLocationReports
SLC: onWifiNotification, notofication, %d
SLC: Got kNotificationPower
SLC: Got kNotificationBackgroundEntry, requesting a scan
SLC: Got kNotificationBackgroundExit, requesting a scan
SLC: requestLocationUpdate, scnType, %d, %s
SLC: onStoreTimer, info, %p
SLC: ignore, onConsolidatedTrigger, shutdown?
SLC: onConsolidatedTrigger, calling requestLocationUpdate
northAndGravity failed
invalid initializeDown covariance !(P > 0), reseting
Type,%s,poseMisMatch,deltaGrav,%.3f,refPose,%.3f,%.3f,%.3f,quality,%.3f
Type,%s,reset,deltaT,%f,fFittedCount,%d
Type,%s,size,%d,calQuality,%.2f,hasConsistency,%d,level,%d
Type,%s,headingDiffVar,%.3f,headingDiffMean,%.2f,headingDiff,%.2f,headingDiffMaxMinusMin,%.4f
zero/max magnitude raw field, ignoring.
zero magnitude calibrated field, ignoring.
Type,%s,large correction,%.3f,calLevel,%d,quality,%.3f
Type,%s,reset on arrival of new cal. level,%d
Type,%s,requested correction,%.2f,got,%.2f
Assertion failed: row < M, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMMatrix.h, line 64,invalid row %zu > %zu.
Assertion failed: col < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMMatrix.h, line 65,invalid col %zu > %zu.
Assertion failed: !empty(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMVectorBuffer.h, line 96,mean() on empty buffer.
D(%zu) == 0 semidefinite matrix
Assertion failed: col > row, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMFactoredMatrix.h, line 123,invalid element %zu <= %zu.
Assertion failed: !empty(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMVectorBuffer.h, line 148,back() on empty buffer.
Assertion failed: col > row, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMFactoredMatrix.h, line 117,invalid element %zu <= %zu.
Assertion failed: ldx < M*N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMMatrix.h, line 78,invalid element %zu >= %zu.
Assertion failed: row < M, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMMatrix.h, line 71,invalid row %zu > %zu.
Assertion failed: col < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMMatrix.h, line 72,invalid col %zu > %zu.
newPd[%zu] == 0 semidefinisemidefinite matrix
Assertion failed: i < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMVector.h, line 278,invalid index %zu >= %zu.
%zu: alpha == 0 sensitivity matrix semidefinite
Assertion failed: n > 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMQueue.h, line 235,.
Assertion failed: n > 0, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMQueue.h, line 251,.
CLMM, GeoMapAccess did not have sufficient data available (buildingsWithinDistance)
CLNatalimetryNotifier being constructed.
Found vo2max calibration override flag : %d 
CLNatalimetryNotifier is shutting down.
Aggregating records due to timer!
Natalie:recordId,%d,startTime,%lf,activityType,%d,mets,%lf,basalMETs,%f,natalies,%lld,basalNatalies,%lld
Exercise Minute:recordId,%d,startTime,%lf
Error in user info.
runVo2maxVal,%f,runVo2maxFlag,%d,runVo2maxUpdatedFlag,%d,hronsetVo2max,%f,hronsetVo2maxFlag,%d,derivedVo2max,%f,derivedVo2maxFlag,%d,oldVo2max,%f,estimatedVo2max,%f,mergedVo2max,%f,boundedVo2max,%f,doMerge,%d
setUserProfileToBodyMetrics completed with result: %s
Number of active vo2max calibrations : %d 
First PAL estimate obtained at : %f 
Change in vo2max : %f 
Before unlocked 
UserInfo: %f,%f,%f,%d,%f,%f,%f,%f,%d,%f 
available, %d
Resetting user profile to defaults for keys %s.
CMNatalimeterSetUserVo2maxReset is resetting ActiveVo2Calibration, NumActiveCalibrations, and TimeFirstPAL.
Persistent store for userinfo should've been initialized 
Unexpected unable to read from disk!
fActiveVo2maxOverride has been set to %d
Sending activity override %d
GPS availability at time %lf, companion time, %lf, GPS timestamp, %lf, %d
GPS not available at time %lf
kNotificationMediatedActivitySpectator,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f},nataliFeatures{fVectorMagnitude,%f,fEpochType,%d,fStanding,%d,fMachineFrequency,%f,fRowStrokeFrequency,%f,fRowStrokeAmplitude,%f,fRowStrokePower,%f,fPushVectorMagnitude,%f}
Unhandled notification %d
Received Onset notification from CatherineNotifier (%f bpm)!
Received Min notification from CatherineNotifier! (%f bpm)
Updating Catherine, catherine = %.2f, timestamp = %.2lf, starttime = %.2lf, source = %d, interpolation = %d
kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d
Proactively running HR and Odometer
Received user info from SPU, data protection enabled %d
Forcing a pal update.
Forcing a vo2max clear.
Forcing a vo2max update.
Forcing a run vo2max clear.
Forcing a run vo2max update.
Start spectator for src %s
CLNatalieInput: Time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
Activate src %s
Inactivate src %s
CLNatalieInput<CLElevationChangeEntry>: Time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
CLNatalieInput<CLCoarseElevationChangeEntry>: Time rolled back. Delta %f, Previous Time %f, Current Time %f, Always Active %d.
%s is not ready at, %f, timeout, %f
%s is ready at, %f, timeout, %f
RAVEN: Configuring supervisor
RAVEN: Unable to configure supervisor
RAVEN: Configuring predictor
RAVEN: Unable to configure predictor
RAVEN: invalid solution
RAVEN: soulution state,%d,health,%d,age,%lf
RAVEN: solution too old
RAVEN: predictor return,%d,predictor state,%d,predictor health,%d
RAVEN: position prediction unavailable
RAVEN: converting solution failed: %d
RAVEN: prediction accuracy less then PDR limit
RAVEN: dense urban update
RAVEN: dense urban age,%.1lf,distance,%.1lf
RAVEN: Entering State %d
RAVEN: Waiting to start,didReceiveRecentGPSFix,%d,didReceiveRecentIndoorFix,%d,isRavenPedestrian,%d,isDenseUrban,%d,timeSinceLastStart,%f
RAVEN: indoor running, stopping raven
RAVEN: no longer pedestrian
RAVEN: max PDR time with no GPS reached
RAVEN: no longer dense urban
RAVEN: Starting Raven
RAVEN: Stopping Raven
RAVEN: Binary log already open, now closing
RAVEN: Could not create log file: %s
RAVEN: Creating binary output log: %s
RAVEN: Enabling Inertial Aiding
RAVEN: accel data notifications registered,Accel,enabled,1
RAVEN: Could not create accel dispatcher.
RAVEN: gyro data notifications registered,Gyro,enabled,1
RAVEN: Could not create gyro dispatcher.
RAVEN: Disabling Inertial Aiding
RAVEN: gyro data notifications unregistered,Gyro,enabled,0
RAVEN: accel data notifications unregistered,Accel,enabled,0
RAVEN: Pressure sensor unavailable.
RAVEN: Pressure data notifications registered,Pressure Sensor,enabled,1
RAVEN: Could not create pressure sensor dispatcher.
RAVEN: Pressure data notifications unregistered,Pressure Sensor,enabled,0
RAVEN: Enabling Raven
RAVEN: Enabling Motion Context
RAVEN: Motion Context is NOT supported!
RAVEN: Enabling Step Count
RAVEN: Step Count is NOT supported!
RAVEN: Disabling Raven
RAVEN: Disabling Motion Context
RAVEN: Disabling Step Count
RAVEN: steps too close together
RAVEN: unexpected pressure window size,%d
RAVEN: Event %s has timestamp %lf seconds in the future
RAVEN: Processing too long %lfs
Taking process assertion for process ID %u
Releasing process assertion for process ID %u
Couldn't create assertion for process ID %u
%s doesn't have a bundle ID; not going to bug SpringBoard.
failed attempt to launch %s before device unlocked since boot
%s isn't running; launching...
Couldn't launch application %s (%d)
Application state for %s is %d
Got PID %d for bundle ID %s, but application is terminated!
Couldn't get application state for bundle ID %s
Application %s was task-suspended
Taking process assertion for %s...
notification, %d, %s, pid, %d, bundleId, %s
unhandled app monitor notification, %d, %s
device unlocked since boot, %s, application launch capability, %sabled
Enable dynamic accelerometer rate = %d
Using prototype: %s
Not starting gesture detection since requested accelerometer interval < 0
Gesture prototype was not setup. Using default prototype
fRestingDispatcher != NULL
No accelerometer; not detecting gestures
Unrecognized notification
METS consumed,startTime,%lf,activity,%d,mets,%f,rawMets,%f,fractionalGrade,%lf,elevationAvailability,%d,duration,%lf,natalies,%f,basalMets,%f,basalNatalies,%f,computeTime,%f,now,%f,expired,%d,historic,%d,stored,%d,%s
Popping out an activity since there's no activity associated with current time.  This shouldn't happen
Stale Sample for Active Median Filter, flushing
MET spike,%f,setting to basal,%f
In-human MET spike,%f,setting to upper bound,%f
Average mets (%fs,%f): %f
9-axis sensor fusion is not supported on this platform.  Returning.
correctedCompassExt, %.3f, %.3f, %.3f, %u, %u
Cost of match %f exceeds max of %f allowed for prototype %s
Could not open prototype file
Error reading magic number or number (%x) does not match expected number (0x%x)
Error reading number of prototypes
Error reading name length of prototype %d
Error reading name of prototype %d
Error reading rawName length of prototype %d
Error reading rawName of prototype %d
Error reading max distance
You are reading an older prototype file.
Error reading number of accelerometer samples for prototype %d
Error reading %d accelerometer samples for prototype %d
Could not initialize prototype instance %d
fLocationState %d state %d
Ear gesture enabled: %d
Ignoring prox: %d
Max prox before motion interval = %f
Max motion before prox interval = %f
Starting ear gesture detection
Could not create timer
Setting prox mode to PassiveMonitoring
Could not create log timer
Stopping ear gesture detection. Setting prox mode to none
Has blanked screen = %d, Is locked = %d
Screen is blanked and device is locked. Stopping gesture detection.
Screen is unblanked or device is not locked. Starting gesture detection if necessary.
endPose,%.2f,%.2f,%.2f,tilt,%.2f,timestamp,%.3f
Failed end pose sanity check. Set state to %s
Sending gesture notification. Matched prototype name, %s
Set log timer for %f seconds.
Sending gesture notification. Gesture cancelled due to unlikely end pose, %.2f, %.2f, %.2f
Sending gesture notification. Gesture cancelled due to high dynamics, %.3f, %.3f, %.3f
Readying gesture notification. Ignoring prox
Readying gesture notification. Prox triggered before motion. dt = %.3f
Setting prox mode to PassiveEngaged.
Set timer for %f seconds.
Gesture timer expired. State = %s
Timer fired while in state %s.
Prox timer expired. Setting prox mode to PassiveMonitoring
Log time fired. State = %s
currentSize is %llu, log msg size is %lu
Log msg size exceeds limit %d, skip loging %lu bytes
Log size exceeded %llu, skip log of %lu bytes
deltaElevation,%f,ascentDuration,%f,climbingMets,%f,len,%lu
epochMets,%f,bufferLength,%lu
epochMets,%f,historicalBufferLength,%lu
Bytes: construct, name, %s
Bytes: clear, name, %s
Bytes: log, name, %s, m, %s, s, %d, r, %d, t, %d, ts, %d, reachability, %d
StepCount, %f, %f, %d, %f, %f, %u, %f, %f, %f, %f
unified,%s,%0.3f,%s,%u,%s,%u,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%u,%s,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%u,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.3f,%s,%0.4f,%s,%0.2f,%s,%u,%s,%0.3f,%s,%0.3f
Potential StepDistanceFusion error. File a radar if you are not walking/running in place. %s, %f, %s, %u, %s, %u, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %d, %s, %f, %s, %f, %s, %f, %s, %f
Inconsistency found between steps and clock. Ignoring.
action,%d,type,%d
Classifying %lu odometer entries
Time rolled back! t1,%f,t2,%f
No way!
How can we generate pedometer distance with no time at all?
registering for keyboard updates
Failed to register for keyboard updates. Could not register for AppleHIDKeyboardEventDriverV2 service kIOFirstMatchNotification and kIOTerminatedNotification.
Failed to register for keyboard updates. Could not create KeyboardConnectNotificationPort and KeyboardConnectNotificationPort
unregistering for keyboard updates
stackshot only available on device
StrideCalDb init
Finished insertion startTime %f
insertion startTime %f
Speed,%f,KFactorStd,%0.4f
Median kValue pacebin with speed %f: %f
CMFFTProcessor is being cleaned up.  Subsequent calls to CMAccelerometerProcessor::computeFrequencyFeatures will lead to undefined behavior.
#slv telling routined to start visit monitoring
#slv got error from routined: %@
#slv received visit from routined
#slv telling routined to stop visit monitoring
SLV: Telling routined to start visit leeching
SLV: Got error from routined: %s
SLV: Received leeched visit from routined, visit, %@
SLV: Telling routined to stop visit leeching
#slv visit monitor wake timer enabled, %{public}s
#slv wake timer expiry, request wifi position
dropping duplicate location, %{private}@
received location, %{private}@
#warning in-memory cache has exceeded threshold of %{public}lu, removing oldest fix
received unhandled notification %{public, location:CLClientManager_Type::Notification}d
received unhandled notification %{public, location:CLLocationProvider_Type::Notification}d
flushing routine data
Location services are disabled; stopping routine data collection
Routine system service disabled; stopping routine data collection
#slv wifi power enabled, %s
LocationServer received incoming connection
Why didn't we get a connection
{"msg":"process is not entitled to use CLLocationManagerRoutine", "pid":"%{public}d", "executable":"%{public}s"}
Connection interrupted
start updating location
stop updating location
#warning locations not delivered %@
start wakeRoutinedTimer
stop wakeRoutinedTimer
wake routined
entering diminished mode; starting data collection
exiting diminished mode; stopping data collection
#scenarioTrigger Telling routined to start monitoring trigger of type, %lu
#scenarioTrigger Got error from routined, %@
#scenarioTrigger Received trigger of type %lu from routined
#scenarioTrigger Telling routined to stop monitoring trigger of type, %lu
start updating predicted applications
stop updating predicted applications
predicted applications not delivered %p
fetch predicted applications at location %{private}@
wrMets, %f, hrMets, %f, hrwrDiff, %f, hrConfidence, %f, useHrMets, %d, output, %f
Using %s model
Fence: delete CLFenceDataDownloadManager
Fence: Adding %{public}ld fences for download
Fence: Adding fence to download, %{private}s
Fence: Adding fence to download, restored fence, %{private}s
Fence: first fence added, enable download timer
Fence: Removing %{public}ld fences for download
Fence: Removing fence from download, %{private}s
Fence: last fence removed, disabled download timer
Fence: refreshDataForFence, %{private}s
Fence: Removing all fences for download, fences, %{public}lu
Fence: disable download timer
Fence: avoid download check, isLocationServicesEnabled, %{public}d
Fence: no reachability, download not possbile
Download error too fresh, avoid new downloads, dt, %{private}.1lf
Fence: checkDownloadState, currentQueries, %{private}d, dataAvail, %{private}d, locked, %{private}d
Fence: avoiding more concurrent downloads, %{private}d, max, %{private}d
Fence: already downloading fence, %{private}s
FenceDownloadState, %{private}s, r, %{private}.1lf, age, %{private}.1lf, reachability, %{private}d, l, %{private}d
Fence: ignoring fence, %s, downloads, %d, max, %d, reachability, %d
Fence: request tile download, %{private}s
Fence: fence, %s, urgent refresh, distance, %.1lf
Fence: Urgent refresh, %{private}s
Fence: fence, %s, is fresh for reachability, %d, age, %.1lf, thresh, %.1lf
Fence: fence, %s, need refresh, %d, age, %.1lf, isLockedState, %d, num %d, %d, isRealtime, %d, isLarge, %d, isUrgentDownload, %d
Fence: request ALS/tile download, %{private}s
Fence: can't start query, %s, tag, %d
Fence: can't start query
Fence: request tile download, %s
Fence: checkDownloadState, currentNumOfQueries, %d, newNumOfQueries, %d, numOfStartedQueries, %d, isLockedState, %d, nSmall, %d, nLarge, %d
Fence: startQuery, fence, %s, tag, %d
Fence: Not querying nearbys for %s/%s; location services is disabled
Fence: getNumOfPendingQueries, numOfQueries, %u
Fence: done tag, %d, isSuccess, %d, isLockedState, %d, numOfAps, %d, numOfCells, %d
Fence: networkQueryDone, tag, %d, %s, dataAvailability, %d, isSuccess, %d
Fence: networkQueryDone, %{private}d, %{private}s, fence, %{private}s, a, %{private}d, success, %{private}d
Fence: networkQueryDone, newNumOfQueries, %u, dataAvailability, %d, isAvoidUpcomingFenceDownloads, %d, doesTagBelongToFence, %d
Fence: notificaiton, %d
Fence: Got kNotificationQueryResponseError tag %d
Fence: Got kNotificationQueryResponseFinished tag %d
Fence: ignore onFenceDownloadTimer, shutdown?
Fence: onFenceDownloadTimer, since last, %{private}.1lf, availability, %{private}d
Fence: scheduleNextTimer, interval, %.1lf, isLocaationServicesEnabled, %d
Schedule next download timer
Cancel next download timer
Fence: kNotificationReachability, notification, %{private}d, reachability, from, %{private}d, to, %{private}d
Fence: kNotificationMigration
Fence: kNotificationLocationServicesStatus, locationd services, %d
Fence: onBTANotifications, notification, %d
Fence: onBTANotifications, kNotificationConnectionState, realtime, %d, %d, large, %d, %d
Fence: startMonitoringDownloadConditions
Fence: stopMonitoringDownloadConditions
Fence: can't check airplane mode
Fence: Got kNotificationAirplaneMode, airplaneMode, %d, %d
Fence: sMessage, %s, fFenceDatabase is NULL
Fence: Got kNotificationMigration
Fence: onClientNotification, %s
Removing fences for uninstalled app %s
Fence: kNotificationAuthorization, exec, %s, bundleId, %s, bundlePath, %s, clientKey, %s
Could not retrieve fences from database for client %s
There are no fences for client %s
Fence: kNotificationAuthorization cleaning, %s
Removing fences,%lu, for bundle,%s.
Disabling all fences for denied app %s
Enabling all fences for newly authorized app %s
Adding fences,%lu, for bundle,%s.
Reset received; sending reset notification
Location services is now %s; sending reset notification
Fence: Location services is now disabled; clearing fence status
Fence: invalidating download date
Reauthorizing clients by triggering fence reset
Fence: notification, kNotificationEncryptedDataAvailability, data.availability, %d, unlockedSinceBoot, from, %d, to, %d, isStartMonitoring, %d
Fence: updateAuthorizedClients, can't add fence before the first unlock
Fence: updateAuthorizedClients, locationServicesEnabled, %d
Fence: checkClientStatus, %s
Fence: addFence, can't add fence before the first unlock
Adding fence, %s
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Add,1,BundleId,%s,Name,%s,
Fence: removeFence, can't remove fence before the first unlock
Removing fence %s/%s
Fence: removeFences, can't remove fence before the first unlock
Removing all fences for %s
Fence: getAuthorizedFences, no region monitoring before the first unlock
Location services are disabled; no monitored fences
Retrieved %ld fences from database
%s/%s is not authorized; removing from authorized fences list
Fence: getFencesForBundle, no region monitoring before the first unlock
Fence: getAllFencesForBundle, no region monitoring before the first unlock
Fence: isFenceAuthorized, no region monitoring before the first unlock
Fence: isFenceAuthorized, [%s]/%s/%s, isRegistered, %d, isAuthorized, %d
Fence: lastDownloadTimeChanged, no region monitoring before the first unlock
Fence: markDataDownloadInvalid, no region monitoring before the first unlock
Fence: isClientAuthorized, %s, %s, %s, CLClientRegistrationResult, %d
Empty bundle identifier should be passed in here
Fence: hasMonitoredFences, no region monitoring before the first unlock
%d fences for %s; authorized %d
%s: hasMonitoredFences %d, monitoringAdded %d airplane %d
%s is now a fence client, airplane, %d
%s is no longer a fence client, airplane, %d
Fence: releaseFenceDatabase, fFenceDatabase, %p, fWasUnlockedSinceBoot, %d, reason, %s
Fence: Couldn't create low priority queue!
Fence: Overriding cell positioning usage to %{private}d
Fence: Overriding WiFi positioning usage to %{private}d
Fence: Overriding GPS positioning usage to %{private}d
Fence: Overriding Pipeline positioning usage to %{private}d
Fence: Overriding continuous positioning usage to %{private}d
Fence: Overriding FenceIssueDelayedTriggers to %{private}d
Fence: fWakeIntervalSeconds, %.1lf
Fence: fDelayedTriggerCountMax, %d
Fence: fDelayedTriggerIntervalSeconds, %.1lf
Fence: fNormalScan, %d
Fence: fLowPriorityScan, %d
Fence: fIsConsolidateTriggersEnabled, %d
Fence: fConsolidatedTriggersTimeInterval, %.1lf
Fence: fIsScheduleContTrackingWakes, %d
Fence: fIsTriggerOnTether, %d
Fence: fIsUseActivityAlarm, %d, activityAlarmAvailable, %d
Fence: failed to allocate, fConsolidatedTrigger
Fence: can't check airplane mode
Fence: startMonitoringFences, fences, %{public}lu, status, %{private}s
Fence: restartMonitoringForAllFences
Fence: stopMonitoringFences, fences, %{public}lu
Fence: startMonitoring, fence, %{private}s
Fence: Where is _pLowPriorityAction?
Fence: Where is pLowPriorityAction->pThis, delete pLowPriorityAction?
Fence: onExecuteLowPriorityAction, kRequiredActionNone
Fence: onExecuteLowPriorityAction, kRequiredActionHanldeLocation
Fence: onExecuteLowPriorityAction, kRequiredActionStartMonitorNow, fence, %s, status, %s
Fence: onExecuteLowPriorityAction, kRequiredActionHandleNoApsArea
Fence: onExecuteLowPriorityAction, kRequiredActionCheckContinousEngagement
Fence: onExecuteLowPriorityAction, kRequiredActionStopMonitoring
Fence: onExecuteLowPriorityAction, Invalid pLowPriorityAction->requiredAction, %d
Fence: registerForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu
Fence: unregisterForNotification, location, numOfFencesOld, %{private}lu, numOfFenceNew, %{private}lu
Fence: stopMonitoringNow, fence, %{private}s
Fence: stopMonitoringNow, no such fence, %{private}s
Fence: startMonitoringNow, fence, %{private}s, status, %{private}s
Fence: startMonitoringNow, fence, %{private}s, is already in fMonitoredFences
Fence: crirital error!
Fence: Location services is disabled; not starting monitoring for %{private}s/%{private}s
Fence: startMonitoringNow, %{private}s
Fence: filtered fLastLocation, %{private}s
Fence: Seeding fence %s/%s with location <%+.8f,%+.8f> acc %.2f timestamp %.2f lifespan %.1lf
Fence: request scan, current location, %{private}s
Fence: Started monitoring fence, %s
Fence: Started monitoring monitoringStatus, %s
Fence: Started monitoring fence %s/%s (<%+.8f,%+.8f>, radius %.3f, eff radius %.3f, accuracy %.3f, eff accuracy %.3f, active tech %d)
Fence: fence is already monitored, %{private}s
Fence: stopMonitoring, %{private}s
Fence: Got monitoring data changed for %{private}s/%{private}s
Fence: location services is disabled, no tech available
Fence: fence, %s, requiredTech, %s, fine, %d, large, %d
Fence: adjustTechLevel, fence, %s, newOptions, %s, availableTech, %s, statusChanged, %d
Fence: stopOptions, %s
Fence: Stopping tech 0x%x (active is 0x%x) for %s/%s
Fence: startOptions, %s
Fence: Starting tech 0x%x (active is 0x%x) for %s/%s
Fence: fence, %s, newTech, %s, status, %s
Fence: Tech level for, %s, adjusted to, 0x%x, %s
Fence: handleLocation, location, %{private}s, services, %{private}d, airplane, %{private}d, connected, %{private}d
Fence: handleLocation, Ignoring cell or LAC position as per defaults
Fence: handleLocation, Ignoring WiFi position as per defaults
Fence: handleLocation, Ignoring GPS position as per defaults
Fence: handleLocation, Ignoring Pipeline position as per defaults
Fence: cancelLocationWatchdog, num fences, %lu, location type, %s
Fence: Handling location, %{private}+.8f, %{private}+.8f, acc, %{private}.2f, timestamp, %{private}.1lf
Fence: dispatch, handleLocation, fence, %s, monitoringStarted, %d, slc, %d, distanceFromPrevHandledLocaiton, %.1lf
Fence: ignore location update, kFenceMonitorFarFarAway, %lf
Fence: ignore location update, locationChangedSignificantly, %d
Fence: request a scan to comfirm cell location, fences, %lu
Fence: cancelLocationWatchdog, wifi off, minDistance, %lf
Fence: requesting a scan, numOfFencesNeedScan, %d, minDistanceToFence, %.1lf
Fence: avoid a scan, numOfFencesNeedScan, %d, minDistanceToFence, %.1lf
Fence: Attempt to handle location <%+.8f,%+.8f> acc %.2f for non-present fence %s/%s
Fence: %s, filtering unwanted, %s, nofitication, not interested in entry
Fence: %s, filtering unwanted, %s, nofitication, not interested in exit
Fence: %s, filtering unwanted, %s, nofitication, has not achieved settled state yet
Fence: %s, filtering unwanted, %s, nofitication, never achieved settled state for entry notification
Fence: %s, filtering unwanted, %s, nofitication, not interested in conservative entry
Fence: fenceUpdate, %s, bundle, %s, type, %-16s, loc, %12.7lf, %12.7lf, acc, %4.0lf, distance, %9.0lf, tech, %4s%s, change, %d, cont, %d, fence, %12.8lf, %12.8lf, %.1lf, %.1lf, sCount, %d, %d, trig, %d, %d, sinceLastLoc, %.1lf, events, 0x%08x, status, %-10s => %-10s, settled state, %s ==> %s, cantShiftButNeedTo, %d
Fence: Adjusting technologies based on, %+.8f,%+.8f, acc, %.2f, distance, %.1lf
Fence: handleNoWifiApsArea, recalculated, %d, fMinDistanceToFence, %.1lf, fMinDistanceToFenceTimestamp, %.1lf
Fence: postpone tracking timer
Fence: Ignoring expired location <%+.8f, %.8f>, acc %.2f, timestamp %.2f, lifespan %.2f
Fence: Got unknown location notification %d
Fence: Cell monitoring is disabled; ignoring cell monitor notification %d
Fence: Got kNotificationTriggerReceived from cell
Fence: Got kNotificationDelayTriggerReceived from cell
Fence: Got cell kNotificationMonitoringAvailable, available, %d
Got unknown cell monitor notification %d
WiFi monitoring is disabled; ignoring cell monitor notification %d
Fence: Got kNotificationTriggerReceived from WIFI, cancelDelayedDeAssociationTrigger, %d
Fence: Got kNotificationDelayTriggerReceived from WIFI
Fence: Got WiFi kNotificationMonitoringAvailable, available, %d
Fence: Got kNotificationReCheckContinuousEngagement
Fence: Got kNotificationNoLocationAfterScan
Fence: Got kNotificationFenceDownloadRequest
Fence: Got unknown WiFi monitor notification %d
Fence: engageContinuousTrackingIfNeeded, now, %d, FenceMonitoWifi, %d, kNotoficationLocationChanged, %d, wifiTracking, %d, isLocationEnabled, %d, isWifiPowered , %d
Fence: location services disabled, no continous tracking, %d, isAirplaneMode, %d, cConnected, %d
Fence: FenceMonitorWifi needs tracking
Fence: SLC wants to track the current location
Fence: numOfMonitoredFences, %d, simple, enable cont tracking
Fence: engageContinuousTrackingIfNeeded, isEngageContinousTracking, %d, numOfMonitoredFences, %d
Fence: engageContinuousTrackingIfNeeded, timeToNextTimer, %lf
Fence: Continuous monitoring is disabled; ignoring continuous monitor notification %d
Fence: Got kNotificationTriggerReceived from Continuous
Fence: Got kNotificationAirplaneMode, airplaneMode, %{public}d, %{public}d, %{public}d
Fence: invalidate location watchdog
Fence: Got kNotificationBattery, level, %{private}lf, charged, %{private}d, connected, %{private}d, wasConnected, %{private}d
Fence: tether triggers are disabled
Fence: unknown notification, %d
Fence: cached isWifiPowered, %d, isLocationEnabled, %d, numOfFences, %lu, notificaiton, %d, fIsWaitingForLocationCount, %d, fScanRetryCounter, %d, reachability, %d
scan result, count, wait, %{public}d, retry, %{public}d, error
Fence: monitor, got kNotificationScanError
Fence: monitor, got kNotificationScan, scanResultVector, %{private}lu, scanTimestamp, %{private}.1lf, age, %{private}.1lf
Fence: monitor, got unhandled, %d
Fence: no reachability, expedite watchdog, %.1lf
Fence: no urgent watchdog, GPS client, %p, urgentWatchdogActivation, %.1lf
Fence: startScan, requesting a scan due to an error / empty scan, fScanRetryCounter, %d
Fence: expedite location watchdog due to empty / error scan , %d, %d, urgentWatchdogActivation, %.1lf
Fence: cached isWifiPowered, %{public}d, isLocationEnabled, %{public}d, numOfFences, %{public}lu, notification, %{public}d, wait, %{public}d, count, %{public}d, reachability, %{public}d
Fence: Got kNotificationPower, isWifiPowered, %{public}d
Fence: triggerReceived, reason, %{private}s, schedule a consolidated trigger, %{private}p, fIsConsolidatedTriggerPending, %{private}d, fConsolidatedTriggersTimeInterval, %{private}.2lf, isLocationWatchdogNeeded, %{private}d, %{private}d
Fence: triggerReceivedNow, isWifiPowered, %{public}d, isLocationEnabled, %{public}d, numOfFences, %{public}lu, airplane, %{public}d, connected, %{private}d, watchdogNeeded, %{private}d, minDist, %{private}.1lf, %{private}.1lf, minDistNextWake, %{private}.1lf
Fence: triggerReceivedNow, isWifiPowered, %d, isLocationEnabled, %d, numOfFences, %lu, airplane, %d, fIsLocationWatchdogNeeded, %d, fMinDistanceToFence, %.1lf, %.1lf, minDistanceToFencesOnNextWake, %.1lf
Fence: Trigger received; performing WiFi scan, minDistanceToFence, %.1lf
Fence: ignoring trigger event, isWifiPowered, %d, locationServicesEnabled, %d, airplane, %d, cConnected, %d, numOfFences, %zu, fMinDistanceToFence, %.1lf, %.1lf
Fence: Cannot monitor %{public}s/%{private}s because the radius is too large, suggesting, %{private}.1lf
Fence: last watchdog fired, %.1lf, ago, watchdogInterval, %1lf
need a scan, count, %{public}d, %{public}d, lwatchdog, %{private}.1lf, interval, %{private}.1lf, needWatchdog, %{public}d
Fence: startScan, type, %d, requesting a scan, %.1lf, %.1lf, since last scan, watchdog armed in, %.1lf, at, %.1lf, numOfFences, %lu, fIsWaitingForLocationCount, %d, isWifiPowered, %d, fScanRetryCounter, %d, airplane, %d, cConnected, %d
Fence: startScan, type, %d, requesting a scan, %.1lf, %.1lf, since last scan, watchdog armed in, %.1lf, at, %.1lf, numOfFences, %lu, fIsWaitingForLocationCount, %d, isWifiPowered, %d, fScanRetryCounter, %d, airplane, %d, cConnected, %d, scan rejected ! 
Fence: startScan, requesting a receovery scan
Fence: scheduleLocationWatchdog, at %{private}.1lf, in, %{private}.1lf, seconds
Fence: scheduleLocationWatchdog, ignore, shutdown?
Fence: loc watchdog cancel, count, %{public}d, %{public}d, client, %{public}p
Fence: cancelLocationWatchdog
Fence: cancelLocationWatchdog, ignore, shutdown?
loc watchdog expired, count, %{public}d, %{public}d
Fence: onLocationWatchdogExpired, since last, %.1lf, isLocationEnabled, %d, last scan, %.1lf, fIsWaitingForLocationCount, %d, sinceLastGpsSession, %.1lf, %.1lf, sinceLastContTimer, %.1lf, %.1lf, fScanRetryCounter, %d
Fence: startScan, fIsWaitingForLocationCount, %d, request one more scan, next date, %.1lf, watchDogInterval, %.1lf
Fence: onLocationWatchdogExpired, increment fIsWaitingForLocationCount, %d
Fence: onDelayedTriggerTimer, sleep period, %.1lf, isLocationEnabled, %d, count, %d, %d, sinceLastTrigger, %.1lf
Fence: onDelayedTriggerTimer, trigger already processed, sinceLastTrigger, %.1lf
Fence: onDeAssTriggerTimer, sleep period, %.1lf, isLocationEnabled, %d, count, %d, %d, sinceLastTrigger, %.1lf
Fence: onDeAssTriggerTimer, trigger already processed, sinceLastTrigger, %.1lf
Fence: onContinousTrackingTimer, sleep period, %.1lf, isLocationEnabled, %d, sinceLastTrigger, %.1lf
Fence: onContinousTrackingTimer, trigger already processed, sinceLastTrigger, %.1lf
Fence: CLFenceMonitor, shutdown
Fence: where is my timer?
Fence: ignore, onConsolidatedTrigger, shutdown?
Fence: onConsolidatedTrigger, calling triggerReceivedNow
Fence: requestWifiLocationUpdate, reason, %s
Fence: request update, reason, %{private}s
Fence: requestRegionState, %{private}s/%{private}s
Fence: requestRegionState, %s/%s, NOT FOUND
Fence: requestRegionState, %s/%s, currentState, %d, %s
Fence: createActivityAlarm, %{private}s, %{private}p, fIsUseActivityAlarm, %{private}d
Fence: activityAlarmHandler, %{private}p, %{private}s, trigger, %{private}d
Fence: createActivityAlarm, %s, created, %p, trigger, %d
Fence: releaseActivityAlarm, %{private}s, %{private}p
Fence: start monitoring scenario trigger settled
Fence: stop monitoring scenario trigger settled
Fence: received scenario trigger, %{private}s
Fence: settled timer expired
Fence: dispatch, handleSettled, fence, %s, monitoringStarted, %d, monitoringSettled, %d
Fence: unregister gps client, %{private}p
Performing WiFi scan on system wake
Fence: failed to getAssociatedNetwork
Fence: failed to determine airplane mode
Fence: CLFenceMonitorWifi, shutdown
Fence: airplane mode is now, %d, was, %d
Fence: Starting to monitor %{private}s/%{private}s for %{private}s
Fence: Stopping monitoring for %{private}s/%{private}s
Fence: Got monitoring data changed for %{private}s/%{private}s; recalculating
Fence: isRecalculate, %{private}d, fIsRecalculationPending, %{private}d, sinceLastRecalculationTrigger, %{private}.1lf
Fence: power assertion no longer needed
Fence: recalculate, take power assertion
Fence: ignore recalculation, shut down?
Fence: resetConsecutiveExits start, %.1lf, count, %d
Fence: ignoring recalculateNow, shut down?
Fence: Recalculating monitored WiFis for %{private}ld monitored fences
Fence: Visible APs are stale (from %{private}.2f), not using for fence calculation
Fence: Last visible APs are stale (from %{private}.2f), not using for fence calculation
Fence: Including %{private}ld visible APs in fence calculation (from %{private}.2f)
Fence: avoid fence calculateAPsForFences, numOfFences, %{private}lu, airplane, %{public}d
Fence: isWifiTrackingAvailable is false
Fence: no visible APs, need continuous tracking
Fence: fIsContinuousMonitoringNeeded, %d
Fence: exit sequence is too long, reset, sinceSequenceStart, %.1lf, %.1lf
Fence: countUpdate, countUpdated, %d, sinceSequenceStart, %6.1lf, sequenceThresh, %6.1lf, sequenceCount, %3d, newCount, %3d, airplane, %d, e, %lu, x, %lu, v, %lu
Fence: Setting %{private}ld background scan entry networks
Fence: Setting %{private}ld background scan exit networks
Fence: recalculate, release power assertion
Fence: sending kNotificationReCheckContinuousEngagement
Fence: Device woke; sending trigger
Fence: WiFi just lost (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recentlyWoke, %{private}d,
Fence: kNotificationReachability, aboutToSleep, request a delayed trigger as well, sinceLastDelayedTrigger, %f, isDeAssTriggerWanted, %d
Fence: about to sleep or recently woke without WoW, ignoring, kNotificationReachability
Fence: WiFi just connected (from %{private}d to %{private}d); sending trigger, aboutToSleep, %{private}d, recentlyWoke, %{private}d,
Fence: take power assertion, reason, %{private}s, airplane, %{private}d
Fence: power assertion not needed, reason, %{private}s, airplane, %{private}d, isMonitoringFences, %{private}d
{"msg":"invalid db pointer", "event":"%{public}s", "condition":"%{private}s"}
#sqlitetransaction, begin exclusive transaction failed
#sqlitetransaction, commit failed
rollback #sqlitetransaction
#sqlitetransaction, rollback transaction failed
{"msg":"#sqlitetransaction error", "path":"%{public}s", "rc":"%{public, location:SqliteResult}.*P", "":"", "errmsg":"%{private}s", "autocommit":"%{public}d"}
Could not upload data
CLSE, Client registered for notification %d
CLSE, Client unregistered for notification %d
CLSE,fromSignalEnv,%d,toSignalEnv,%d
CLSE,download request,url,%s,storeTo,%s,retryInterval,%.1lf
CLSE,could not setUpdateSource AVL file updater
CLSE,could not setUpdateRate AVl file updater
CLSE,download status,STARTED
CLSE,downloaded,%s
Cannot set protection class for CLSE downloaded file,%s
CLSE,decompressed,%s,to,%s
Cannot set protection class for CLSE decompressed file,%s
CLSE,download request failed,%s,retryMultiplier,%d
{"msg":"#Stream Resending motion alarm request", }
{"msg":"#Stream We haven't received an update in a while", }
{"msg":"#Stream Notifying motion alarm", "state":"%{public, location:CLLocationProvider_Type::MotionDetected}lld"}
{"msg":"#Stream enabling motion alarm", }
{"msg":"#Stream disabling motion alarm", }
{"msg":"#Stream Motion alarm update without any state", }
@ClxCell, supported, %{public}d
CELL_LOC: fCellShowUIUnknownCell (%d)
CELL_LOC: fIsUseNetworkLocationProvider, %d
CELL_LOC: fIsUseTilesManager, %d
@ClxCell, enabled, %{public}d
CELL_LOC: delete CLUnifiedCellLocationProvider
CELL_LOC: registerForNotificationInternal, notification, %d
CELL_LOC: unregisterForNotificationInternal, notification, %d
CELL_LOC: shutdown
CELL_LOC: onDpcSource
CELL_LOC: calling onDpcSource, refreshCellMonitor
CELL_LOC: SHOW CELL UI : (%s) <%lf, %lf> acc %lf
CELL_LOC: SHOW UNKNOWN CELL UI : (%s)
CELL_LOC: refresh cell state
CELL_LOC: getCellFromTilesManager, fIsUseTilesManager, is false
CELL_LOC: getCellFromTilesManager, isFound, %d, cell, %s, location, %s
@ClxCell, Fix, 0, ll, N/A, Failed
CELL_LOC: TelephonyService is ready
not registered, cannot deduce cell fix
CELL_LOC: Failed to get current cells
CELL_LOC: current cell, size, %zu
CELL_LOC: current cell, isUse, %d, index, %zu, %s
Fence: CLDaemonStatus_Type::kNotificationWake, hasLocationClients, %d
Fence: CLDaemonStatus_Type::kNotificationReachability, reachability, %d, %d, clients, %d
CELL_LOC: refresh cell monitor on wake / reachability
CELL_LOC: received %s
CELL_LOC: location services are disabled, ignore scan result
disconnected from CT, cannot deduce cell fix
CELL_LOC: unknown CT notification %s
refresh cell monitor
CELL_LOC: ignoring, onDelayedCellPropagationTimer, timer, %p, %p
CELL_LOC: call refreshCellState
CELL_LOC: onDelayedCellPropagationTimer,since last trigger,%.1lf,nextWakeDate,%.1lf
CELL_LOC: cell queries failed
CELL_LOC: recalculating current cell location, by waking the DPC, %p
Natalie Model, Walk Linear Regression, WorkRate, %f, distance(m), %f, duration(s), %f, mets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f
Natalie Model, Grade correction applied, Grade type, %d, vertical speed %f, interval %f, workrate %f, mets %f, mets + grade %f, percent grade %f 
CELL_LOC: failed to bind %s
CELL_CEN: adding cell, %s, rowid, %lld
moving,%d,now,%f
CLSensorCalibrationStaticDetectorAccel::fire()
RawAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f
FilteredAccelerometer,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,readyX,%d
Variance,x,%20.20f,y,%20.20f,z,%20.20f,timestamp,%20.20f,Moving,%d
(stddev samples) w/ turn, %f, %d, w/o turn, %f, %d, threshold, %f, %f
Turn, %s, Time, %f, Total Strokes, %d, Current Strokes, %d, Style, %d, Result, %d
Converged,freestyle,%d,backstroke,%d,breaststroke,%d,butterfly,%d
searchMedian, %f, historicalDistributionCount, %lu, historicalMatchingDistributionCount, %lu
distribution,localLimits,min,%f,max,%f
distribution,historicalSessionLimits,min,%d,max,%f
distribution,lastGood-populationLimits,min,%d,max,%f
PLOS: invalid outside offset %f
PLOS: bad poly, bad!
PLOS: invalid step size %f
PLOS: miniscule edge!
PLOS: invalid distance %F
PLOS: invalid polygon size %d
PLOS: edge too small!
Derived Vo2max, %.1f, Revised Vo2max, %.1f, Minimum Vo2max, %.1f 
Estimated HRmin, %.1f 
Larger than expected gap between begin and end ts.  Setting end ts to some sane default. (%f, %f)
Event time, %.2f, GPS sample time, %.2f, distance, %.2f, speed, %.2f, altitude, %.2f
gender,%d,height,%f,weight,%f,vo2max,%f,age,%f,hrmin,%f,hrmax,%f,hronset,%f,pal,%f,condition,%d,runVo2max,%f
Not companion. Returning.
Ending service
Reset to init state
Received steps
Received session update: %ld
Minimum running time met
Unable to persist distribution
Unable to purge old records.
Unable to get the number of distributions
Unable to delete all distributions!
Unable to get entries
Unable to get entries for uuid %s
Failed to bind id in query, %llu
Unable to get purge records.
Unable to insert swim record.
Release type = %d. %s gesture logging
Enabling gesture logging
NOT enabling gesture logging
Uploading logs to %s
type,%d,down,%d
File %s was created %f days ago. Removing
Could not get file creation time for %s
bin %lu for speed %f invalid
binIndex %lu invalid
TrackCalibration,Success,AllChecksPassed,%s,oldBinCalibrationData,%s,newBinCalibrationData,%s,PaceBin,%lu,Speed,%f
Resetting stride calibration bins.
Database isn't valid; not perfomring integrity check
performIntegrityCheck took %f seconds.
Database doesn't exist yet; not performing integrity check
Failed to close connection after integrity check: %d
Failed to open database '%s' after restoring from backup: %d
Killing locationd to resolve corrupted database.
Database isn't valid; not dropping obsolete tables
Couldn't setSecureDeleteEnabled(%d) for old database!
Couldn't vacuum old database!
MicroLocation harvest was cancelled
Creating managed location database %s (count triggers %d, use cache %d)
Data protection is enabled, creating in-memory database for table %s
Persistent database failed to create despite data protection not enabled. Falling back to in-memory database
{"msg":"#Stream Source now available", "source":"%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld"}
{"msg":"#Stream Source no longer available", "source":"%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld"}
{"msg":"#Stream Client interest changed", "notification":"%{public, location:CLLocationProvider_Type::Notification}lld", "is interested":"%{public}d"}
{"msg":"#Stream Stopping location for source", "source":"%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld"}
{"msg":"#Stream State is out of sync with registrations", }
{"msg":"#Stream Local GPS is forbidden right now.  Downgrading to wifi accuracy", }
{"msg":"#Stream Starting location for source", "source":"%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld", "notification":"%{public, location:CLLocationProvider_Type::Notification}lld", "include motion":"%{public}d"}
client of CLDataProtectionManager is requesting a re-broadcast of data availability
Data availability is now %d
device unlocked since boot, %d
Using the manufacturer specific parameters (%s): %s
Using the default parameters: %s
Using the hardcoded parameters
Invalid parameters received:
Took, inc ref, %d, %s, thisReason, %s
%s, %s
Release power assertion, %s, heldFor, %.2lf
Release power assertion, dec ref, %d, %s
Got client notification
Delay timer fired
Posting status bar icon visibility change notification
Clearing status bar icon enabled states
%s is in state '%s'.
Notify delay of %.2fs for state '%s'; upgrading icon state
Waiting %.2f seconds for location indicator to change states
iconStateFromClients, overallIconState, '%s', overallNotifyDelay, %.4lf
E911 is active; forcing icon on.
Location icon should now be in state '%s'
pool length %f for workout is too small and may lead to undefined behavior.
CPAS data response was invaild.
CPAS data is NULL
cpas version is %u, length is %ld bytes
Warning: cpas data was found but did not match any versions. version (%u) length (%ld)
Magnetometer coexistence compensation is disabled
{"msg":"#Stream State machine timer fired", }
{"msg":"#Stream cached location", "found":"%{public}d"}
{"msg":"#Stream notifying location", "client":"%{public}s", "accuracy":"%{public}f", "type":"%{public, location:CLLocationType}lld", "origin device":"%{public, location:CLClientLocationOriginDevice}lld"}
{"msg":"#Stream notifying", "client":"%{public}s", "notification":"%{public, location:CLLocationProvider_Type::Notification}lld"}
{"msg":"#Stream Received notification", "notification":"%{public, location:CLLocationProvider_Type::Notification}lld"}
{"msg":"#Stream Received motion mediator notification", "notification":"%{public}d"}
{"msg":"#Stream Received step count notification", "notification":"%{public}d"}
{"msg":"#Stream Foreground assertion taken", "client":"%{public}s", "accuracy":"%{public}f"}
{"msg":"#Stream Foreground assertion released", "client":"%{public}s"}
{"msg":"#Stream Invalid location source", "source":"%{public}d", "event":"%{public}s", "condition":"%{private}s"}
Turning on step count notifications
Turning off step count notifications
TILE: beginSeries
TILE: endSeries, size, %lu
TILE: endSeries, checking tile, count, %u,  localLocation, %14.8lf, %14.8lf
TILES: requestDownload, %.8f, %.8f
TILE: macAddressResolved, invalid hash value, %s
attempting to create service location provider with NULL service name
ExerciseMinuteHistory not accessible
Potential DB reset / roll back, returning all records to clients,mru.recordId,%d,record.recordId,%d
{"msg":"sqlite3_trace", "query":"%{private}s"}
{"msg":"sqlite3_profile", "db_ptr":"%{public}p", "db_name":"%{public}s", "query":"%{private}s", "elapsed_ns":"%{public}llu", "queue":"%{public}s"}
Attempted to open an encrypted database
{"msg":"openDatabase", "rc":"%{public, location:SqliteResult}.*P", "":"", "path":"%{public}s"}
{"msg":"pragma page_size = 4096", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"pragma journal_mode=WAL", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"pragma secure_delete", "useSecureDelete":"%{public}hhd", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"pragma cache_size = 5", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"pragma cache_size = 100", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"pragma cache_spill = 1000", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"pragma recursive_triggers = true", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"Failed to enable extended result codes", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"Failed to close partially opened database", "rc":"%{public, location:SqliteResult}.*P", "":""}
{"msg":"Opening database", "path":"%{public}s"}
{"msg":"openDatabase failed to open a connection and then to clean up after itself", }
{"msg":"Reference count increased", "path":"%{public}s", "referenceCount":"%{public}d"}
{"msg":"Reference count decreased", "path":"%{public}s", "referenceCount":"%{public}d"}
{"msg":"Destroying database", "path":"%{public}s"}
Compass for AOP started. CoverAttached %d
Compass for AOP stopped.
Setting compass update interval to %f
Type,%s,attitude.x,%.8f,.y,%.8f,.z,%.8f,.w,%.8f,calibrated.x,%.8f,.y,%.8f,.z,%.8f,uncalibrated.x,%.8f,.y,%.8f,.z,%.8f,gravity.x,%.8f,.y,%.8f,.z,%.8f,heading,%.1f,trueheading,%.1f,accuracy,%.1f,level,%d,status,%u,timestamp,%f
Device still has original rear camera. Using unit-specific calibration info
Rear camera was replaced. VCM actuator ID is %d
Using generic Mitsumi calibration info
Using generic Alps calibration info
Unrecongized VCM actuator. Not performing compensation
CLCompanionNotifierCompanion is being constructed
CLCompanionNotifierCompanion is shutting down
Error deserializing session override: %s
error serializing Odometer(GPS) entry
error serializing Odometer(Elevation) entry
error serializing Odometer(Coarse Elevation) entry
Time to the last received message from Gizmo is %lf. Lost connection to gizmo
coarse elevation src,enable,%d
%s ear gesture
hwType, %d
Device should not have instantiated this.
Removing client %p
Unknown client instance %p
Adding client %p with priority %d
Registering for ear gesture notifications
Unregistering for ear gesture notifications
Ear Gesture EnabledForTopClient: %d (%s)
Dispatching ear gesture to instance %p from prototype %s
starting metric session (CompassSession) for %s
ending metric session (CompassSession) for %s
submitting metric session (CompassSession) for %s
Accessory,bad checksum for NMEA sentence '%s' - expected %s
Accessory,only GPGGA GPRMC supported
Accessory,repeated GPRMC timestamp at,hhmmss,%02d%02d%02.1f
Accessory,null island,not allowed
Invalid speed,%.3lf
Invalid course,%.3lf
Accessory,repeated GPGGA timestamp at,hhmmss,%02d%02d%02.1f
Accessory,invalid altitude,%.3lf
fStaticWait,%f,fMinimumInterval,%f,fDoubleCalInterval,%f,fOutOfBoxTimeout,%f,fMinBatteryLevel,%f,fRetryCalInterval,%f,fUrgentStaticWait,%f,fUrgentMinBatteryLevel,%f,fUrgentAttemptMinimumInterval,%f,fUrgentCalScheduled,%d,fLastCalibration,%f
fState,%d
is already running
BatteryReady,%d,ThermalReady,%d,DisplayReady,%d,StaticReady,%d,MinimumIntervalReady,%d,UrgentMiniCalScheduled,%d,timeToIntervalReady,%f,sinceLastCal,%s,sinceLastUnpluggedCal,%s
Still waiting for long wait timer
Starting long wait timer for %llu seconds
Long wait timer trigger.
Resetting static timer. Wait duration changed %f -> %f
Still waiting for static timer of %f
Starting static timer for %f
Static timer fired
reason,%d,%s
Ignoring abort for user initiated calibration
Stopped sensor calibration, fState, %d, successful, %d
Scheduling double calibration,fLastCalibration,%f,expectedNextCalibration,%f
Scheduling retry calibration after previous aborted run,fLastCalibration,%f,expectedNextCalibration,%f
state,%d,temperature,%f
Warning: Bad state,%d
state,%d,elapsed,%f
level,%f,connected,%d
Warning: Unexpected notification %d
UrgentFlag,%d
CLMM, first client enabled openning tile loader
CLMM, enabled count: %d
CLMM, Trying to disable tile loader when none enabled
CLMM, no clients remaining, closing tile loader
OBM,GpsForceOutdoorMatching,%d,ObmAllowPositionOverride,%d,fBumpHorizontalUncertaintyAmidstBuildings,%d,fMinBuildingsForBump,%u,fSearchRadiusInMeters,%f,fMinHorizontalUncertaintyAmidstBuildings,%f,fMinAverageBuildingHeightForUncertaintyBump,%f
OBM, forcing building geometry
OBM, cannot estimate nav mode, disabling
OBM, non-pedestrian, not matching
OBM, no mapGeometry!
OBM, no geometry!
OBM, buildingsWithinDistance,%lf returned false!
OBM, buildings.size() %ld > 500. too many buildings. Aborting
OBM,averageBuildingHeight,%.2lf,fNeighborhoodCharacter.type,%d
OBM, not in any building
OBM, a-priori,%.6lf,%.6lf,hacc,%.2lf,a-posteriori,hacc,%.2lf
OBM, no building but point in building!
OBM, initialSize,%ld,finalSize,%ld
OBM, no exterior particles remaining
OBM, LonLat conversion failed,point,%lf,%lf
OBM, inflatedHacc, %.2lf, fMinHorizontalUncertaintyAmidstBuildings, %.2lf. choosing max
OBM, a-priori,%.6lf,%.6lf,course,%.2lf,hacc,%.2lf,a-posteriori,%.6lf,%.6lf,course,%.2lf,hacc,%.2lf,bestScore,%.6lg,bestLonLat,%.6lf,%.6lf,bestCourseInDegrees,%.2lf,fAllowPositionOverride,%d,
MicroLocation: shutdown
Location services are disabled, ignore WiFi scan result
Received wifi notification %d
Received unknown wifi service notification %d
Not scanning Wifi RSSI because it's not enabled
Not scanning Wifi RTT because it's not enabled
Not scanning HomeKit because it's not enabled
Not scanning for Apple TVs because it's not enabled
MicroLocation: Enabling accelerometer
MicroLocation: Disabling accelerometer
Wifi is powered off - not scanning
HomeKit is powered off - not scanning
Received a forced localization request
Got a notification center notification that we weren't expecting: %s
Received unhandled homekit notification
Recording timer cancelled
Recording timer stopped
bundle: %s, launch reason: %s
{"msg":"No microlocation results provided", "event":"%{public}s", "condition":"%{private}s"}
Unable to save localization results to duet. %s
Successfully logged to duet
Deleting all entries in the MicroLocation CoreDuet event stream
Unable to clear MicroLocation CoreDuet Event Stream. %s
Deleted %lu events from MicroLocation Event Stream
{"msg":"CFType must be a CFString to convert to a const char*", "event":"%{public}s", "condition":"%{private}s"}
Setting calibration data %d, %d, %d, %d, %d, %d from sensor mode %d
fIsHELOEnabledFlag,%d
HELO enabled due to CLEEA
CLEEA,%d
VCM Delta.x,%f,VCM Delta.y,%f,VCM Delta.z,%f
Rear camera offset.x,%f,Rear camera offset.y,%f,Rear camera offset.z,%f
Could not register for notification %s
focus position = %d
Could not get state for %s
camera state = %d
camera mode = %d
Received focusing notification
Received camera state notification
Received camera mode notification
PLOS, fPlatformSupportsPlosEstimation, %d
PLOS: match returned false!
OBM, ForceNetworkUsage %d
OBM, DisallowNetworkUsage %d
handling notification %s
Request region preload manifest, no manifest
isStart,%d,manifest,%d,LastTime,%lf,LastLat,%.05lf,LastLon,%.05lf
Request region preload manifest, update
Found a preload region %s
Requesting download of preload manifest, allowCell,%d
Request tiles at lat,%.06lf,lon,%.06lf, allowCell,%d
TILE: fTileDownloadCoolOffPeriod, %.1lf
TILE: fTileDownloadExtendedCoolOffPeriod, %.1lf
TILE: fTileForceExpirationPeriod, %.1lf
TILE: fTileMinExpirationPeriod, %.1lf
TILE: hasDataExpired, %d, isLargeConnectivity, %d, fExpirationAge, %d, dataExpirationPeriod, %.1lf, dataAge, %.1lf, tile, %s
TILE: canRequestBasedOnAttempts, tile, %s, age, %.1lf, needs to be refreshed - retry
TILE: canRequestBasedOnAttempts,tile,%s,age,%.1lf,expirationAge,%d
TILE: canRequestBasedOnAttempts, tile, %s, sinceLastDownload, %.1lf, %d, needs to be refreshed, TileDoesNotExistOnTheServer
WtmDl, attempts, llsw, %.2lf, %.2lf, lastSuccess, %d, existsOnServer, %d, sinceLastDownload, %.1lf, expired, %d, path, %s
TILE: startDownloading, tile, %s, timeout, %.1lf, localFilename, %s, tempFilename, %s
TILE: startDownloading, failed to download without a downloadRequest, %s
TILE: startDownloading, tile is already being downloaded, %s
TILE: startDownloading, tile, %s, started, %d, strFileUrl, %s
TILE: decompress, failed to move, %s, %s, errno, %d, %s
TILE: decompress, from, %s, to, %s, failed, errno, %d, %s
TILE: decompress, in, %.6lf, seconds, size, %u, to, %u, tile, %s
TILE: decompress, from, %s, to, %s, failed, %u byte file
TILE: decompress, file is not compressed, %s
TILE: generateUniqueFileName, trying, %s, tile, %s
TILE: generateUniqueFileName, end, localFilename, %s, temp, %s
TILE: deleteFile, unlink, %s
TILE: deleteTempFile, unlink, %s
TILE: onDownloadCompleted, success, %d, fDownloadRequest, %p, tileDoesNotExist, %d, details, %s
TILE: copy from, %s, to, %s, start
TILE: onDownloadCompleted, tile version, %d, min version, %d, isVersionOk, %d, tile, %s
TILE: onDownloadCompleted, tile version, %d, min version, %d, isVersionOk, %d, type, %d, %s
TILE: tile, %s, download failed
TILE: failed to move from, %s, to, %s, errno, %d, %s
TILE: setLocalfilename, localFilename, %s, tempFilename, %s
TILE: Delta lat/lon zero, %d, %d
TILE: extractTileIdFromFile, prefer local file name because it exists, %s
TILE: extractTileIdFromFile, directory, %s, filename, %s, absFilename, %s, type, %d, isHeadersOnly, %d
TILE: extractTileIdFromFile, failed, %s
TILE: extractTileIdFromFile, failed to open file, %s, errno, %d, %s
TILE: extractTileIdFromFile, tile version, %d, min version, %d, isVersionOk, %d, dLat, %.5lf, dLon, %.5lf
TILE: extractTileIdFromFile, invalid hash value for, %s
TILE: extractTileIdFromFile, read tileid from file, %s
TILE: extractTileIdFromFile, read, absFilenameParams, %s
TILE: readTileFileByFileName, start, file, %s, isHeadersOnly, %d, isBinarySearch, %d
TILE: readTileFileByFileName, reading input from stdin
TILE: failed to open : %s, errno, %d, %s
TILE: readTileFileByFileName, done, file, %s, isHeadersOnly, %d, isBinarySearch, %d, isOK, %d
TILE: setProtectionClass, failed to open, %s, fd, %d, errno, %d, %s
TILE: setProtectionClass, unable to open for protected file change, %s, %d, fd, %d, errno, %d, %s
TILE: setProtectionClass, failed to set protection class, %d
TILE: setProtectionClass, failed to set class, %s, %d, %d
TILE: setProtectionClass, tile, %s, newClass, %d, curClass, %d
TILE: setProtectionClass, invalid protectionClass, %d
TILE: getProtectionClass, failed to open, %s
TILE: getProtectionClass, failed to set protection class, %d
TILE: no location / coordinates, tile, %s, scaledLocation, %.8lf, %.8lf
TILE: doesLocationIntersectWithTile, distance, %.1lf, deltas, %.1lf, %.1lf
TILE: saving, %s
TILE: paramsFileExist, %d, loading, %s, accessTimestamp, %.1lf
WtmDl, skip, llsw, %.2lf, %.2lf, reason, %s, last, %s
This instance has no : TEST_testBinarySearch
WRTT: No peer range notifier.
WRTT: start ranging request
WRTT: stop ranging session
WRTT: send range meas, %ld, and errors, %ld
WRTT: request, numPeers, %ld
WRTT: rangeable, numPeers, %ld
WRTT: scheduling timer
WRTT: timeout
WRTT: register
WRTT: unregister
WRTT: received meas, %ld, or error %s
WRTT: received wifi power, %d
TILE: fDefaultMaxDownloadListSize, %d
TILE: MTimeModificationPeriod, %.1lf
TILE: registered, tilesSet, %s
TmmMgr, ctor
TILE: fMinEncryptionGracePeriod, %.2lf
GnrTiles, no download over cell
TILE: isCellTilesActive, %d
TILE: isAppTilesActive, %d
TILE: isTilePreloadManifestActive, %d
TILE: fDefaultDEMTilesServerUrl, %s
TILE: fDefaultDEMTilesRootDirectory, %s
TILE: fDefaultCellTilesServerUrl, %s
TILE: fDefaultCellTilesRootDirectory, %s
TILE: fDefaultAppTilesServerUrl, %s
TILE: fDefaultAppTilesRootDirectory, %s
TILE: fDefaultTilePreloadManifestServerUrl, %s
TILE: fDefaultTilePreloadManifestRootDirectory, %s
TILE: fDefaultMaxTileAge, %.1lf
TILE: fDefaultMaxTileDataAge, %.1lf
TILE: fDefaultEncryptionGracePeriod, %.1lf
TILE: fMaxNumOfTiles, %d
TILE: fDefaultDisableTilesWhileLocked, %d
TILE: mkdir, %s, ret, %d
TILE: onDataProtectionNotification, %p, notification, %d
TILE: onDataProtectionNotification, kNotificationEncryptedDataAvailability, was, %d, now, %d, availability, %d
TILE: updateProtectionClass, skip on unlock
TILE: onCleanupAgedTiles, %p
TILE: clearLocationInformation
onCompanionNotification, notification, %d, Tiles
TILE: onClientNotification, %p, notification, %d
TILE: kNotificationReset
TILE: kNotificationLocationServicesStatus, areLocationServicesEnabled, %d
TILE: location services off, remove all the tiles
{"msg":"CLTilesManager::deleteAgedDownloadItems", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f", "now_s":"%{public}.09f"}
TILE: deleteAgedDownloadItems, start
TILE: deleteAgedDownloadItems, delete, age, %.1lf, %.1lf, tile, %s
TILE: deleteAgedDownloadItems, deleted, %u, done
{"msg":"Finished CLTilesManager::deleteAgedDownloadItems", "deleted":"%{public}u"}
{"msg":"CLTilesManager::agedTileDeleter", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f", "now_s":"%{public}.09f"}
TILE: deleteAgedTiles, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, corrupt, %d, isDelete, %d, tile, %s
TILE: deleteAgedTiles, delete, age, %.1lf, %.1lf, tileDataAge, %.1lf, %.1lf, tile, %s
TILE: deleteAgedTiles, too many tiles, %lu, tile, %s
TILE: deleteAgedTiles, end, numOfDeletedTiles, %u, remain, %lu, name, %s
{"msg":"CLTilesManager::agedTileDeleter", "deleted":"%{private}u"}
TILE: deleteAgedTiles, start, name, %s, size, %lu
TILE: checkDownloadSchedule, degreesFromCornerLat, %.8lf, degreesFromCornerLon, %.8lf, inside, %d, %d, isCurrentTile, %d, %d, isCurrentLocationKnown, %d, %s
TILE: performing, sAction, %s, tilesSet, %s
TILE: dispatch, deleteAgedTiles, for, %s
TILE: deleteAgedTiles, fTilesToDownload
{"msg":"CLTilesManager::cancelAllDownloads", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f", "planned":"%{private}lu"}
TILE: cancelAllDownloads, planned, %lu
{"msg":"CLTilesManager::removeAllTiles", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f", "type":"%{private}d"}
TILE: removeAllTiles, cleaning map, %d, %s
TILE: removeAllTiles, end, name, %s, size, %lu, unprot size, %lu, downloadSize, %lu
TILE: listAvailableFilesAllTypes, start
TILE: listAvailableFilesAllTypes, can't list tiles while locked, wait for unlock
TILE: convert to class A, first unlock, %s
TILE: convert to class C, first unlock, %s
TILE: listAvailableFilesAllTypes, done
TILE: listAvailableFilesByLister, reason, %s, rootDirectory, %s, name, %s
TILE: listAvailableFilesByLister, reason, %s, can't open dir, %s
TILE: listAvailableFilesByLister, start
TILE: listAvailableFilesByLister, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d
TILE: listAvailableFiles, can't open dir, %s
TILE: listAvailableFiles, start
TILE: listAvailableFiles, found tile file, filesNum, %u, absoluteFilename, '%s', d_type, %d
TILE: listAvailableFiles, failed to stat file, %s, ret, %d
TILE: listAvailableFiles, end
TILE: refreshTilesDataIfNeeded, isTileDataExpired, %d, isShouldBeDownloaded, %d, tile, %s
TILE: checkDownloadSchedule, location services disabled - no tile downloads
TILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: checkDownloadSchedule, no tiles while locked
TILE: checkDownloadSchedule, no data connectivity, avoiding downloads, reachability, %d
TILE: checkDownloadSchedule, no download on none broadband cellular connections
TILE: checkDownloadSchedule, checking, numOfActiveDownloads, %u, small, %d, large, %d, realtime, %d, wifiPower, %d
TILE: checkDownloadSchedule, numOfActiveDownloads, %d, not scheduling more
TILE: checkDownloadSchedule, both download requests are already in use
TILE: checkDownloadSchedule, isLocationValid, %d, isDeviceLocked, %d
TILE: checkDownloadSchedule, lastLocation, %s
TILE: checkDownloadSchedule, isShouldDownload is not true, exists on server, %d
TILE: checkDownloadSchedule, rule, isCurrent, isAllowCellularIfCurrent,  IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, isCurrent, fDownloadCurrentTileOverCell, IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, isCurrent, IsOkToDownloadLarge, %s
TILE: checkDownloadSchedule, rule, isAllowCellularIfNotCurrent, IsOkToDownloadRealtime, %s
TILE: checkDownloadSchedule, rule, IsOkToDownloadLarge, %s
TILE: checkDownloadSchedule, isShouldDownload, %d, isAllowDownload, %d, isCurrentTile, %d, isAllowCellular, %d, check, %s, details, %s
TILE: checkDownloadSchedule, chose, downloadState, %s
TILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %d, tile, %s
TILE: checkDownloadSchedule, numOfActiveDownloads, %d, tilesToDownload, %lu, small, %d, large, %d
TILE: checkDownloadSchedule, kNotificationNoActiveDownloads
TILE: tileDownloadCompleted, tile, %s, download done, success, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d, locked, %d, fileSize, %d
TILE: where did this download request come from?, download, %p
TILE: tileDecompressionCompleted, no tile for download, %p
TILE: tileDecompressionCompleted, tile, %s, decompress done, tileDownloadWasSuccessful, %d, NSURLErrorCode, %d, tileDoesNotExist, %d, reachability, %d
TILE: tileDecompressionCompleted, tile, %s, reachability, %d, isLocked, %d, downloadDuration, %.1lf, downloadState, %s, progress, s, %d, l, %d
TILE: tileDecompressionCompleted, replacing from, %s
TILE: tileDecompressionCompleted, replacing to, %s
TILE: tileDecompressionCompleted, where the file, was it deleted, %s
TILE: tileDecompressionCompleted, added, tileid, %s, tilesMap.size, %lu
TILE: kNotificationTileWasDownloaded, tileid, %s, tileHeaderParsed, %d, tileType, %d, serverUrl, %s, serverFilename, %s, absoluteLocalFilename, %s
TILE: _tileDownloadCompleted, success, %d
TILE: getNumOfActiveDownloads, tile, %s, is being downloaded, %d, total, %d, download, %p
TILE: requestDownload, type, %d, %s, not active
{"msg":"invalid #tile id computed for download", "latitude":"%{private}f", "longitude":"%{private}f", "secondaryKey":"%{private}llu", "tileX":"%{private}d", "tileY":"%{private}d", "tileType":"%{private}d", "tilesSetDeltaLat":"%{private}d", "tilesSetDeltaLon":"%{private}d"}
TILE: requestDownload, type, %d, %s, location, %14.8lf, %14.8lf, id, %s, reachbility, %d, details, %s
TILE: requestDownload, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: requestDownload, ignoring request, no sec_key
TILE: requestDownload, tileId=%s isAlreadyDownloaded, %d, isBeingDownloaded, %d, shouldDownloadedBasedOnPermissions, %d, isAlreadyDownloaded, %d
TILE: requestDownload, tileid, %s, already available, isUpdateMTimestamp, %d, isShouldBeRefreshed, %d, isBeingDownloaded, %d
TILE: requestDownload, refresh download, %s
TILE: requestDownload, tileid, %s, will be downloaded, details, %s
TILE: requestDownload, tileid, %s, is locked will be redownloaded, details, %s, allowRedownload, %d, isAddToDownloadList, %d
TILE: requestDownload, tileid, %.8lf, %8lf, will be downloaded, details, %s
TILE: requestDownload, out of boundaries, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s
TILE: requestDownload, y, %d, x, %d, tile_y, %d, tile_x, %d, neighbourTileID, %s
TILE: requestDownload, adding neighbour, %s
TILE: getTileFile, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: getTileFile, tile, %s, isAvailable, %d, isFileAccessible, %d
TILE: getTileFile, tileid, %s, not available
TILE: addToDownloadList, added, %s, fTilesToDownload.size, %lu
TILE: updateProtectionClass, called on when not locked
TILE: updateProtectionClass, start, %s, reason, %s, isAboutToLock, %d, locationAge, %.1lf, doLocCheck, %d, sizes, %lu, %lu, knownLocation, %s
TILE: updateProtectionClass, failed unlocking tileid, %s, size, %lu
updateProtectionClass, lockstats, %s, lock, %d, unlock, %d, size, %lu
TILE: tile ptr is NULL
TILE: updateProtectionClass, location moved, locking tileid, %s
TILE: updateProtectionClass, unable to lock tile, locking tileid, %s
TILE: updateProtectionClass, clearing unprotected map
TILE: Unable to lock all unprotected files!
TILE: updateProtectionClass, end, %s, total, %lu, numOfUnProtectedTiles, %d
TILE: updateProtectionClass, done, isAboutToLock, %d, numOfUnProtectedTiles, %d
TILE: scheduleExpiredLocationTimer, no valid location
TILE: scheduleExpiredLocationTimer, reason, %s, locationAge, %.1lf, secondsFromNow, %.1lf, lastKnownLocation, %s
TILE: cancelExpiredLocationTimer
TILE: onExpiredLocationTimerFired, isLocked, %d
TILE: onExpiredLocationTimerFired
TILE: onPCTimerFired
TILE: onLocationNotification, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: onLocationNotification, fLastLocationDownloadCheckTimestamp, %.1lf, isForceLocationCheck, %d, fLastLocationProtectionCheckTimestamp, %.1f, leech location, %s
TILE: onLocationNotification, unknown notificaiton, %d, %s
TILE: onStatusNotification, kNotificationReachability, from, %d, to, %d, tunnel, %d
TILE: onStatusNotification, unknown notification, %d
TILE: cleanUpDownloadList, start, isLocked, %d
TILES: cleanUpDownloadList, download list is too large, %lu
TILE: cleanUpDownloadList, tileid, %s, available on disc, no need to download
TILE: cleanUpDownloadList, done,  isLocked, %d, cleanedFiles, %u
TILE: CLTilesManager::shutdown
TILE: stats: getTileStats, wifiTilesDownloaded, %d, wifiTilesDownloaded3G, %d, demTilesDownloaded, %d, wifiTilesCached, %d
TILE: invalid tileType, %d
TILE: tiles, %s, not active
TILE: location not relevant
TILE: updating mtime, %d, type, %d, tileid, %s
TILE: updating dem neighbor mtime, %d, type, %d, tileid, %s
Invalid dem neighbor tile id!
Invalid tile id!
TILE: getLocationByCellFromTile, searching, sec_key, %016llX, %s
TILE: getLocationByCellFromTile, in tile, accessible, %d, %s
TILE: no lac tile for, %s
TILE: no cell tiles for, %s
TILE: getLocationByCellFromTile, isFound, %d, locationd, %s
TILE: getLocationByCell, index is not available, can't search tiles (locationd launched when device was locked?), fDataProtectionEnabled, %d
TILE: no tiles for, %s
TILE: getLocationByCell, un-supported cell type, %s
TILE: getLocationByCell, tiles, %d, are not active on this device
TILE: getLocationByCell, isInKnownCache, %d, isInUnKnownCache, %d
TILE: getLocationByCell, using locationHint, %s
TILE: getLocationByCell, out of boundary, %s
TILE: getLocationByCell, search neighbor, step, %2d, y, %+2d, x, %+2d
TILE: getLocationByCell, search remaining tiles, %s
TILE: getLocationByCell, search for LAC
TILE: getLocationByCell, search for LAC, isFound, %d
TILE: getLocationByCell, LAC tiles for, %s, are not active
TILE: getAppAvailabilityForArea, index is not available until first unlock, fDataProtectionEnabled, %d
TILE: getAppAvailabilityForArea, tiles, %d, %s, are not active on this device
TILE: getAppAvailabilityForArea, loc, %.8lf, %.8lf, radius, %.3f
TILE: getAppAvailabilityForArea, tile, %s
TILE: getAppAvailabilityForArea, ctile, %s
TILE: already been searched
TILE: getAppAvailabilityForArea, y, %d, x, %d, ntile, %s
TILE: getAppAvailabilityForArea, appRecommendation, %lu, %s, loc, %.10lf, %.10lf, span, %.10lf, %.10lf
TILE: fullAppTilesServerUrl, %s
TILE: onStoreFrontDidChangeNotification, new fServerUrl, %s
TILE: shouldEnableAppTiles, %d, fAppTilesEnabled, %d
Get manifest tile, %lu
TILE: tileDecompressionCompleted, added to unprotected list, tileid, %s, size, %lu
TILE: tileDecompressionCompleted, unable to unlock, tileid, %s, size, %lu
TILE: tileDecompressionCompleted, unlocked tile type, tileid, %s, unlocked, %d
CACHE: name, %s, clear, size, %lu
CACHE: name, %s, deleteAgedEntries, size, %lu
CACHE: name, %s, evict, aged, age, %.1lf, size, %lu, %lu, key, %s
CACHE: name, %s, evict, size, age, %.1lf, size, %lu, %lu, key, %s
CACHE: name, %s, getEntry, end, size, %lu, %s, entry, %s
CACHE: name, %s, colision...
CACHE: name, %s, bad set iterator - recovering, size, %lu, %s
CACHE: name, %s, cache too large, evicting, size, %lu
CACHE: name, %s, addEntry, end, size, %lu, %s, entry, %s
TILE: running initStaticGlobals
TILE: fMinimumSupportedTilesVersion, %d
TILE: CLWifiTileFile, sectionId, %d, %s
TILE: tileMacIndexHeader, entrySizeInBytes, %u
TILE: headers only, avoid reading SectionID_TileIndex_Mac
TILE: headers only, avoid reading SectionID_TileAccessPointTable
TILE: idx, %3lu, %3u, mac, %s, offset, %u
TILE: mac, %3u, mac,%x:%x:%x:%x:%x:%x, y, %3d, x, %3d, loc, %14.10lf, %14.10lf, unc, %.1lf, reach, %.1lf
TILE: binarySearchAP, match, %012llx, %012llx
TILE: binarySearchIndex, ==================> indexFailed <==================, size, %4lu, a, %4lu, b, %4lu, c, %4lu,  A, %012llx,  S, %012llx, B, %012llx
TILE: binarySearchIndex, indexFound, isFound, %d, wasSearched, %d, size, %4lu, a, %4lu, b, %4lu, c, %4lu, searchAr, %4u, A, %012llx,  S, %012llx, B, %012llx
TILE: traverseTileFile, message, %s, isHeadersOnly, %d, isBinarySearch, %d, macAddressToSearch, %012llx, cachedIndex, %d
TILE: traverseTileFile, indexVector cached, seek to the APs table, %lld
TILE: traverseTileFile, re-using cached index vector
TILE: traverseTileFile, searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search
TILE: Invalid section signature, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d
TILE: message, %s, readBytes, %lu, section, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d, sectionId, %d
TILE: traverseTileFile, invalid tile file, bad allocation size, bytesToAllocate, %lu, maxAllocationSize, %lu
TILE: skip section, message, %s, signature, 0x%x, sectionId, %d, sizeBytes, %d, headerSizeBytes, %d
TILE: failed to allocate memory for, %lu
TILE: failed to read, %lu, %lu
TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu, halting search
TILE: searched index, A, %012llx, mac, %012llx, B, %012llx, indexSize, %lu
TILE: headers only, avoid reading the APs
TILE: unknown section : %d
TILE: traverseTileFile, finished traversing, file, index entries, %lu, apEntries, %lu
%s INITIAL isWifiPowered=%d
%s Start monitor for active scanning
%s Stop monitor for active scanning
%s TIMER TRIGGERED
%p WIFI POWER NOTIFICATION RECEIVED, power=%d nextFire=%f
%s WIFI EXECUTING IMMEDIATELY, now=%f nextRequestTime=%f
%s WIFI SCAN SCHEDULED FOR %f
%s WIFI IS POWERED OFF - NOT ISSUING SCAN REQUEST
Registering with Motion Coprocessor
Unregistering with Motion Coprocessor
onBodyStatusData->onBodyStatus,%d,onBodyStatusData->confidence,%d,onBodyStatusData->timestamp,%f
Unknown whether or not provider %d is a candidate for autopause
PKAUTOPAUSE MEAN coord: %f %f %f %f %f %f %f %d %d 
CLCompanionNotifierWatch is being constructed
CLCompanionNotifierWatch is shutting down
Received message,type,%d,size,%lu
error serializing OdometerCyclingData
error deserializing OdometerElevationData
error deserializing CoarseElevationData
Unhandled msg,type,%d
CLCompanionNotifierWatch::register for notification %d
fLastOverriddenSession,%ld, registrationInfo.overriddenSession,%ld
Unsupported notification,%d
CLCompanionNotifierWatch::unregister for notification %d
Sync state with Companion
Error serializing session override (%ld): %s
Spectator subscriptions expired
BTA: fIsUseBTA, %d
BTA: unregisterForNotificationInternal, notificaiton, %d
BTA: startMonitoringAll
BTA: startMonitoringAll, isActive, %d, fIsMonitoringActive, %d
BTA: startMonitoring, jobName, no BTA in the simulator
BTA: setUseBTA, isUseBTA, %d
{"msg":"index entry count mismatch during #tiles re-serialization", "tile_x":"%{private}d", "tile_y":"%{private}d", "generationTimestamp_s":"%{private}.09f", "numberOfIndexEntries":"%{private}d", "computedNumberOfIndexEntries":"%{private}ld"}
TlurState, End or Reset, %s
WIFI_LOC: done processing, request, %s
TlurState, isStop, %d, aps, %d, %d, state, %d
WIFI_LOC: stop criteria satisfied due to iProd, numFixAps, %d
WIFI_LOC: stop criteria satisfied due to desiredAccuracy, desiredAccuracy, %.1f, horizontalAccuracy, %.1lf
%s, %d, %s, %d
MotionState, %s, type, %d, conf, %d
leeched location, %s
disqualified leeched location
qualified leeched location
location timestamp out of order
renew previous location
previous location, %s
distanceMoved, %f, elapsedTime, %f
drop qualified leeched location
accept qualified leeched location
speedVehicular, %d, conservativeSpeed, %f, effectiveSpeed, %f, speedUncertainty, %f, distanceMoved, %f, elapsedTime, %f
received unhandled notification %d
notification ScanCache received %d
received unhandled WifiService notification %d
BATCH: received locations w/ odometer: %f, %f
BATCH: odometer ran from %f to %f
BATCH: Received a location (%s) without an odometer while odometer alarm was set
BATCH: odometer reset: %.2f
BATCH: received odometer: %f
BATCH: Should not be registered for location
BATCH: Unexpected notification: %d
Service start!
Resetting HK query state
HK Query attempt _encryptedDataAvailable,%d,_HKQueryState,%d,isHealthDataAvailable,%d
No steps from first party sources.
Querying HK for watch steps
Not enough steps from watch.
No steps from watch.
Querying HK for watch step minute intervals
Querying HK for phone step minute intervals
Querying HK for watch distance minute intervals
Querying HK for phone distance minute intervals
Querying HK for watch samples
Performing HK stats collection query
All queries finished successfully
lengths of watchStepMinutes,%lu,phoneStepMinutes,%lu,watchDistanceMinutes,%lu,phoneDistanceMinutes,%lu
totalSteps,%f,steepInclineSteps,%f,gradualInclineSteps,%f,flatSteps,%f,gradualDeclineSteps,%f,steepDeclineSteps,%f
pctStepsIndoorRun,%d,pctStepsIndoorWalk,%d,pctStepsOutdoorRun,%d,pctStepsOutdoorWalk,%d,pctStepsOtherSession,%d,pctStepsOutOfSessionRun,%d,pctStepsOutOfSessionWalkShort,%d,pctStepsOutOfSessionWalkMedium,%d,pctStepsOutOfSessionWalkLong,%d,pctStepErrorBetweenGizmoCompanionWalk,%d,pctStepErrorBetweenGizmoCompanionRun,%d,pctDistanceErrorBetweenGizmoCompanionWalk,%d,pctDistanceErrorBetweenGizmoCompanionRun,%d,pctStepsSteepIncline,%d,pctStepsGradualIncline,%d,pctStepsFlat,%d,pctStepsGradualDecline,%d,pctStepsSteepDecline,%d
TILE: clear, tile, %sd
initialize
CloseTrack,Stop
Type,%s,Pos,%d,%+.10f,%+.10f,Accuracy,%.3f,Speed,%0.3f,Course,%0.3f,Altitude,%0.3f,VerticalAccuracy,%0.3f,Timestamp,%0.3f,Source,%d
CloseTrack,GpsSourceChange,GpsSourceOld,%ld,GpsSourceNew,%ld
CloseTrack,GpsLocationEntryTimeOut,TimeSinceLastEntry,%0.2f
CloseTrack,GpsFilteredHorizontalAccuracyOutOfBounds,HorizontalAccuracy,%0.2f
CloseTrack,GpsFilteredSpeedOutOfBounds,Speed,%0.2f
CloseTrack,NumSamplesMaxGpsFilteredLocation,NumSamples,%d
CloseTrack,GpsOdometerEntryTimeOut,TimeSinceLastEntry,%0.2f
CloseTrack,DistanceGpsRoughMax,DistanceGpsRough,%0.2f
CloseTrack,TimeSpanMax,Timespan,%0.2f
CloseTrack,NumSamplesMaxGpsOdometer,NumSamples,%d
CloseTrack,PedometerEntryTimeOut,TimeSinceLastEntry,%0.2f
CloseTrack,NoStepsForTwoPedometerEntries
CloseTrack,PedometerSpeedCurrentZero
CloseTrack,PedometerSpeedCurrentJump,SpeedCurrentPrev,%0.2f,SpeedCurrent,%0.2f,SpeedCurrentJumpPercent,%0.2f
CloseTrack,NumSamplesMaxPedometer,NumSamples,%d
CloseTrack,NumAdditionalPedometerEntriesRemoved,%ld
CloseTrack,TrackMetrics,TimeStartGpsLocationSegment,%0.2f,TimeEndGpsLocationSegment,%0.2f,%s
CloseTrack,Fail,DistanceGpsNotSufficient,DistanceGps,%0.2f
CloseCurrentTrack,Fail,GpsSpeedDiscrepancyDetected,SpeedGpsRawMean,%0.2f,GpsDistanceOverTime,%0.2f,SpeedErrorPercent,%0.2f
CloseTrack,Success
noSamples < 1 || hist.empty()
unexpected trained cdf data size issue
OdometerQualityIndicator,%d,r2,%f
Unable to create SecPolicyRef
Unable to create policy list
SecTrustEvaluate() failed with securityResult=%u
SecTrustEvaluate() failed with status=%d
Instantiating CLTileSyncManager
Instantiating NoopTileSyncManager
_authCb is NULL!
Error converting connection event string
NBB-Could not create a dispatch queue for the CLNetByteBank
NBB-Could not create tracking update timer... billing will be done at connection termination only
Could not get interface addresses to build index-to-name mapping...
NBB-Cannot define an account with zero refill interval... ignoring
NBB-Account names must begin with "%s"... ignoring %s
NBB-Account name may contain only characters in %s... ignoring %s
NBB-Tracking is dummied-out while running non-embedded
NBB-Transfer tracking stop-request unmatched by start... ignoring
NBB-Error restoring persisted budget level for account %s
NBB-Could not get UDID for stable refill timing, falling back on random
Activity didn't complete before the runner was destroyed. Most likely this means there was an exception during the activity. Please check the logs.
Registering for XPC Activity %s
Attempting to run %s but Microlocations are disabled.
CLVehicleConnectionNotifier is being constructed
#fmc CarKit connection status, %d
CLVehicleConnectionNotifier is shutting down
CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d
#fmc Posting notification upon vehicle exit
#fmc startTime,%f,endTime,%f,exitTime,%f
CarKitConnectionStatus,%d,HandsfreeConnectionStatus,%d,current VehicleConnectionStatus,%d,new VehicleConnectionStatus,%d
refAlt < %.1lf,refAlt,%.1lf,using the min
refAlt > %.1lf,refAlt,%.1lf,using the max
latitude,%.7lf,is out of bounds
Forcing a stride calibration update.
Received CLDataProtectionManager_Type %d, data availability %d
Setting the current Motion Cals version to, %d
Natalie Model, WheelchairPush, computeTime, %f, speedFromPushes, %.1f, metsFromPushes, %.1f, Push Count, %d, pushEM, %.1f, pushEMthreshold, %.1f
Programmer error, we expect an expiration record!
Failed to shift records.
Error setting elevation offsets.
Begin.
Too few points.  End.
temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,1
temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,deleted,0
End.
CLMM, m_fSkipRMSECheckForScalingEntryThresholds,%d
CLMM, holdCourseEngaged,%d,fabsCourseDiffWithPriorSnap,%.1lf,rawCourseUnc,%.1lf,newCourseUnc, %.1f
%.1lf CLMM, high course rate,course,%.1lf,priorCourse,%.1lf,speed,%.1lf,fabsCourseRate,%.1lf
CLMM, course,%.1lf,courseUnc,%.1lf,lastSnapCourse,%.1lf,speed,%.1lf,acrossTrack,%.1f,onRoad,%d,widthUsed,%.1lf
CLMM, Detected course swing after a recent dismount,intervalSinceDismount,%.1lf
CLMM, holdCourse,engaged, large course diff when static,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, holdCourse,engaged,%d,speed,%.1lf,distance,%.1lf
CLMM, holdCourse,using prior snap,course,%.1lf,courseUnc,%.1lf,fabsCourseDiff,%.1lf
CLMM, varFactorCheck,oldOffRoadCount,%d,newOffRoadCount,%d
CLMM, courseCheck,oldOffRoadCount,%d,newOffRoadCount,%d
CLMM, stopSnapping,timeout,dT,%.1lf,threshold1,%.1lf,threshold2,%.1lf,static,%d
CLMM, stopSnapping,distance > 100m
CLMM, jumpDistanceCheck,oldOffRoadCount,%d,newOffRoadCount,%.0f
CLMM, stopSnapping,varFactor,%.1lf,threshold,%.1lf
CLMM, stopSnapping,offRoadCount,%d,threshold,%.0f
CLMM, stopSnapping,isAmbiguous,1,acrossTrack,%.1lf,acrossTrackThreshold,%.1lf
CLMM, reseting offRoadCount,%d
CLMM, startSnapping
CLMM, NULL road
CLMM, not matching, activity context, running
CLMM, not matching, activity context, walking, confidence, %d
CLMM, not starting matching due to low speed threshold,speed,%.3lf,thres,%.3lf
CLMM,%.2lf,NotPropagating,isTunnel,%d,isSnapUsable,%d,particleTime,%.2lf,particleTimeOut,%.1lf,speed,%.2lf,speedTime,%.2lf,speedTimeOut,%.1lf
CLMM,%.2lf,NotPropagating, shifting is required but accessory is outputting  unshifted coordinates
CLMM,%.2lf,NotPropagating,time lower than particleTime, %.2lf
CLMM,%.2lf,limit distance to propagate,orig,%.1lf,new,%.1lf
CLMM,NotPropagating,multi-outbound,%lu,intersection within the distance,%.2lf, needed to be travelled returned
CLMM,NotPropagating,moveOnRoad returned false
CLMM,NotPropagating,NULL road
CLMM,NotPropagating,solution moved away from tunnel
CLMM,%.2lf,Propagating,lat,%.8lf,lon,%.8lf,course,%.8lf
CLMM, Constructor, fUseSpeedCheckForDOT,%d,fMaxDistanceForTIntersectionForDOT,%.1lf
CLMM, Unexpected out of bounds array access attempt
CLMM, Assessing candidates
CLMM, NULL road, bad candidate
CLMM, interpolateOnRoad returned false, determining mean road position
CLMM, Time,%.1lf,candidate,roadID,%llu,fwd,%d,countAroundMean,%d
CLMM, roadsAtIntersection returned false, searching for connected candidates
CLMM, unexpected incomingCount < 1
CLMM, Time,%.1lf,roadID,%llu,incoming,countAroundMean,%d
CLMM, Time,%.1lf,combinedBest,roadID,%llu,incomingCount,%d,outgoingCount,%d
CLMM, interpolateOnRoad returned false, determining outgoing road position
CLMM, Time,%.1lf,roadID,%llu,no particles after the intersection
CLMM, Time,%.1lf,roadID,%llu,isCombined,%d,isMulti,%d
CLMM, %.1lf,detected stuck,alongTrackRawToSnap,%.1lf,deltaPosChange,%.1lf,deltaSnapChange,%.1lf,thresholdDiff,%.1lf
CLMM, %.1lf,isMovingAway,%d,deltaPosChange,%.1lf,deltaSnapChange,%.1lf,thresholdDiff,%.1lf
CLMM, Position jump(m),%.1lf,dT(s),%.1lf
CLMM,%.1lf,predictionAndUpdate, distance,%.1lf,distBasedOnSpeed,%.1lf,distBasedOnPos,%.1lf
CLMM, dT2 limited
CLMM, unexpected,dT,%.1lf,minMoreThan,0,threshold1,%.1lf,threshold2,%.1lf
CLMM, railway search, roadsWithinDistance returned false
CLMM, railwayParticle,timestamp,%.3lf,lat,%.8lf,lon,%.8lf,course,%.3lf,rseg,%lld
CLMM, prediction,NrParticles,%d,NrStandard,%d,NrNew,%d,NrPriorIntersectionParticles,%d,NrNewAlternateCandidateNoiseParticles,%d,NrNewFwdIntersectionParticles,%d,NrNewBiasedToPrior,%d,NrNewAmbiguous,%d,NrNewRouteParticles,%d
CLMM, moveOnRoad returned false, standard particles
CLMM, moveOnRoad returned false, prior intersection particles
CLMM, moveOnRoad returned false, fwd intersection particles
CLMM, moveOnRoad returned false, prior snap particles
CLMM, moveOnRoad returned false, alternate ambiguous particles
CLMM, Unexpected particle with snapLat == snapLon == 0
CLMM, totalScore<=0,%.1lf
CLMM, resample
CLMM, Unexpected number of particles after resampling,%d
CLMM, extractSolution
CLMM, Unexpected bestCount<=0
CLMM, Unexpected no best candidate found
CLMM, Unexpected. There should be an outgoing road
CLMM, Unexpected NULL outgoing road candidate
CLMM, Unexpected outgoing snapLat==snapLon==0
CLMM,Time,%.1lf,snapCourse,%.2lf,outgoingSnapCourse,%.2lf, crumbCourse,%.2lf, outgoingDistanceFromIntersection,%.2lf,outgoingCondition,%d,crumbCourseUnc,%.2lf,significantCourseChange,%d,isCourseAligned,%d, isMeanCandidateAlignedWithCourse,%d
CLMM, Time,%.1lf,exit distance check,distance,%.2lf,exitDistance,%.2lf
CLMM, Time,%.1lf,outgoing condition,%d
CLMM, %.1lf, Using outgoing,incomingID,%lld,outgoingID,%lld
CLMM, %.1lf, Using particle on outgoing,incomingID,%lld,outgoingID,%lld
CLMM, %.1lf, bestParticleRoadID,%lld
CLMM, ambiguous solution not detected,fabsCourseDiff,%.1lf,acrossTrack,%.1lf,ratio,%.3lf,alongTrackToAlt,%.1lf
CLMM, ambiguous solution detected,fabsCourseDiff,%.1lf,acrossTrack,%.1lf,ratio,%.3lf,alongTrackToAlt,%.1lf
CLMM, ambiguous solution hysteresis
CLMM, dismounted recently,doNotSnapCourse,%d
CLMM, distToNextMulti,%.1lf, distFromPriorCrumb,%.1lf
CLMM, not snapping course,reason,distanceToIntersection,%.1lf
CLMM, not snapping course,reason,at intersection,fabsCourseDifference,%.1lf
CLMM, not snapping course,reason,turning,fabsCourseDifference,%.1lf
CLMM, %.1lf, snapping course, reason, gps course not reliable,%.1lf,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, %.1lf, overwriting unreliable GPS course, static case, priorCourse,%.1lf, newCourse,%.1lf
CLMM, %.1lf, snapping course, reason, gps course flipping at low speeds,%.1lf,fabsCourseDiffWithPriorSnap,%.1lf
CLMM, %.1lf, overwriting unreliable GPS course, low speed case, priorCourse,%.1lf, newCourse,%.1lf
CLMM, adjustSolutionforRoadWidth
CLMM, performPartialMatching
CLMM, partial snapping,poorVarFactorCount,%d,weightGPS,%.2lf,weightSnap,%.2lf
CLMM, roadsWithinDistance returned false
CLMM, Unexpected roadsWithinDistance returned empty list
CLMM, Unexpected NULL road
CLMM, Unexpected roadsWithinDistance returned only railways
CLMM, prepareSeeding
CLMM, Unexpected crumb lat==lon==0
CLMM, Unexpected crumb snapLat==snapLon==0
CLMM, Unexpected maxDistance,%.1lf
CLMM, including railway
CLMM, assessMatchAndNeedForReseed
CLMM, postEvaluateMatch,%s
CLMM, Reseeding due to varFactor,%.1lf,max,%.1lf
CLMM, Reseeding due to badMatchCount,max,%d
CLMM, Reseeding due to Neff
CLMM, Reseeding due to stuck at dead-end while observations move away
CLMM, reseed
CLMM, not matching, speedMps,%.1lf,threshold,%.1lf
CLMM, matching, routetime,%.1lf
CLMM, aPriori,%s
CLMM, %.1lf, not matching
CLMM, opportunistic tile download only, favorable GPS conditions
CLMM, opportunistic tile download only, high speed threshold
CLMM, match,%.1lf, allowsNetworkUsage, %d
CLMM, Time difference between updates is zero. Update ignored.
CLMM, %.1lf,hopping check,connecting roads,%d, current road %lld,prior road %lld
CLMM, %.1lf,hopping check,prior road, %lld, connected to the incoming road, %lld, of the current solution road, %lld
CLMM, %.1lf,hopping between roads detected,reset,%d,priorfullSnapCourse,%.1lf,currentFullSnapCourse,%.1lf,priorId,%llu,currentId,%llu
CLMM, holdCourse engaged but not snapping course
CLMM, aPosteriori, %s
CLMM, no DOT, course is not aligned
CLMM, across track too large, not suitable DOT assistance
CLMM, %.1lf, DOT Coordinates,%s,snapLat,%.8lf,snapLon,%.8lf,dotLat,%.8lf,dotLon,%.8lf
CLMM, no DOT,feedback interval check
CLMM, no DOT,frc,0
CLMM, no DOT, too close to prior intersection
CLMM, no DOT, course not aligned to full snap
CLMM, no DOT, assessParallelRoadsWithinDist returned false, unexpected
CLMM, no DOT, too close to a road with similar course
CLMM, no DOT, too close to next intersection
CLMM, no DOT, too slow when nearing intersection
CLMM, no DOT, too close large road direction change
CLMM, no DOT, computeDirectionOfTravelCoordinates lookBehind returned false
CLMM, no DOT, predicted point is too close to intersection
CLMM, moveOnRoad returned false, DOT particle assistance
CLMM, Unexpected calculateNewPosUsingAcrossTrack fail
CLMM, no DOT, computeDirectionOfTravelCoordinates predicted returned false
CLMM, DOT,%.1lf,lat,%.7lf,lon,%.7lf,course,%.1lf,courseUnc,%.1lf,rw,%.1lf,startLat,%.7lf,startLon,%.7lf,length,%.1lf,speed,%.3lf,isOneWay,%d,isRailWay,%d,isTunnel,%d,isBridge,%d
CLMM, MMPA,%.1lf,lat,%.7lf,lon,%.7lf,a,%.2lf,b,%.2lf,az,%.3lf,course,%.3lf
Stepper load calibration enabled status : %d 
Stepper HR model enabled status : %d 
Stepper final mets scaling factor : %f 
Stepper VO2 max scaling factor : %f 
Natalie Model, Stair Climbing Work Rate Model, timestamp, %f, step frequency, %f, WRMETS, %f, sinceLastGood, %f
Natalie Model, Stair Climbing HR Rate Model, timestamp, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, METS, %f
Natalie Model, Stair Workload Calibration, timestamp, %f, HRMETs, %f, WRMETs, %f, calibrationValue, %f, loadCalStatus, %d
Natalie Model, Stair Climbing Final Output, timestamp, %f, finalMETS, %f, fMetsScaling, %f
CLActivityLogger read %s as CFStringRef failed
CLActivityLogger managed should enable data collection setting is %s.
CLActivityLogger Failed to get data collections enabled setting. It may not have been set yet.
CLActivityLogger exporting %s is disabled MotionMetricsExportInterval, %d, MotionMetricsExportTimerInterval, %d
CLActivityLogger should enable data collection is is %s.
CLActivityLogger exporting %s is disabled 
CLActivityLogger exporting %s is already enabled 
CLActivityLogger exporting %s is only enabled in internal build
CLActivityLogger exporting %s: MotionMetricsExportTimerInterval = %d, MotionMetricsExportInterval = %d
CLActivityLogger exporting %s is %f, currentTime is %f, next dumping time is %f, %s
CLActivityLogger exporting %s metrics with OSAWriteLogForSubmission
CLActivityLogger failed to submit iOS data analysis with type kOSAProblemTypeMotionState
CLActivityLogger exporting timer enabled 
CLMM, UseFullSnap, %d
CLMM, enableDotGpsFeedback,%d
CLMM, ForceNetworkUsage %d
CLMM, DisallowNetworkUsage %d
CLMM, calling match()
CLMM, shift() returned false
CLMM, match() returned false
Starting PAL update timer
PAL estimation encountered error,%ld
Daily steps,%f,Session type,%lu,startTime,%f,duration,%f,mean mets,%f,in-system steps,%f,met-converted steps,%f
Day index,%zu,stepCount,%f
Estimated PAL,%d,current PAL,%.0f,total steps,%f,valid days,%d,avg steps,%f,timeToEstimate,%f
no app proxy available for %s
App foregrounded for %.2fs.  Post %s (%d), pid, %d, bundleId, %s
cannot find SBApplicationStateKey
unknown application state %d
failed to retrieve pid
failed to retrieve bundle ID
Post Application State Change Notification, %d, %s, pid, %d, bundleId, %s
cannot find bundle ID for %d
Start active dynamic Wsb
Stop active dynamic Wsb
Received kNotificationPower, isWifiPowered, %d
Received kNotificationScanCache
Unknown notification received, %d
Exercise Minute,startTime,%.3f,avgIntensity,%f,mode,%d
Exercise Intensity,computeTime,%.3f,raw,%f,scaled,%f,elevationAdjusted,%f,elevationCredit,%f,historicalElevationCredit,%f,windowSize,%lu,avgIntensity,%f
Time rolled back,past.front,%.3f,past.back,%.3f,current,%.3f
ComputeTime,%.3f,awardedExerciseMinuteMode,%d,fBurstBufferCount,%.3f,fBurstBufferDuration,%.3f,fPushBufferCount,%.3f,fPushBufferDuration,%.3f,BurstModelDuration,%.3f,BurstModelCount,%.3f,BurstModelThreshold,%d,ThresholdModelDuration,%.3f,ThresholdModelCount,%.3f,ThresholdModelThreshold,%d,CoverageModelDuration,%.3f,CoverageModelCount,%.3f,CoverageModelThreshold,%d
Exercise Intensity,threshold speed,%f,METs scaling factor,%f
CMStrideCalRecorderDb init
Failed to delete records
Device is locked and we are unable to open the database
StrideCalHistory table doesn't even exist
Failed to shift records
StrideCalDb (%f,%d,%f,%f,%f,%f,%f,%d,%d,%f,%f,%d).
Natalie Model, Cycle CR DT Regression, %f, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f
GPS speed at time, %f, %f is too high,  set to maximum default, %f
Uphill vertical speed at time, %f, %f is too high, set to maximum default %f
Natalie Model, Cycle WR Linear Regression, %f, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, WR METS, %f
Model switcher input availability, StartTime, %f, EndTime, %f, ModelSwitcherInputCase, %d, gradeType, %d, hspeed, %f, vspeed, %f, isCatherineAvailable, %d, isCatherineReliable, %d, isGpsAvailable, %d, HRstaleness, %f
Natalie Model, Cycle Fused, %f, %f, HR METS, %f, WR METS, %f, Fused METS, %f, Grade type, %d, GPS Speed, %f, Vertical Speed, %f, Duration(s), %f, Weight(kg), %f, Steps, %d, ModelSwitcherInputCase, %d, distance, %f, altitude, %f, HRstaleness, %f, HR, %f, metSource, %d
RollingResistance,%f,gravity,%f,wind,%f,totalWR,%f,startTime,%f,endTime,%f
Started session type,%d,startTime,%f,activity,%s
Stopped session type,%d,startTime,%f,activity,%s
Period Estimate Update,period,%f,confidence,%f,timestamp,%f,startTime,%f
ClassificationResult,%d,startTime,%f,timestamp,%f
wrist,%d,crown,%d
Classification,%s,%d,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f,%s,%f
Assertion failed: i < N, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/Math/CMVector.h, line 272,invalid index %zu >= %zu.
PAUSE: Constructing CLAutopauseProviderConcrete
PAUSE: Starting auto-pause monitoring.
PAUSE: Stopping auto-pause monitoring.
PAUSE: Batched notification response in auto-pause with %zu locations.
PAUSE: Pause state changed, notifying - fitness: %d navigation: %d other: %d
PAUSE: unexpected notification %d
PAUSE: Unknown notification %d
PAUSE: Autopause provider has no location updates for 15 minutes.
PAUSE: got kNotificationSleep.
PAUSE: got kNotificationWake.
PAUSE: Constructing CLAutopauseProviderMock
PAUSE: Invalid data: %s
PAUSE: Mocking state: %s
PAUSE: Client registered for %s
PAUSE: Client unregistered for %s
unexpected,vehicleSpeed < 0
EnableLocationServices,Success,AllChecksPassed
EnableLocationServices,Fail,AllLocationServicesDisabled
EnableLocationServices,Fail,PedometerCalibrationLocationServicesDisabled
EnableLocationServices,Success
StrideCal - Register tracks activity %d, override action, %d, session, %s
No viable convertion for mode 0x%x
No viable convertion for notification 0x%x
CLDeviceMotion::addDeviceMotionDispatcher adding dispatcher with property: %s
CLDeviceMotion::removeDeviceMotionDispatcher removing dispatcher with property: %s
CLDeviceMotion::minimumUpdateIntervalChanged,notification,%d,minimumUpdateInterval,%f
CLDeviceMotion::numberOfClientsChanged notification:%d, from:%zu, to:%zu
numberOfClients GyroOnly:%zd, 3AxisDynamicGyro:%zd, 6Axis:%zd, 6AxisThrottledGyro:%zd, 9Axis:%zd, 9AxisWithNorthReference:%zd, BuildGYTT:%zd
Device motion mode not supported: %d
Unsupported mode (%d). Returning.
Unsupported mode (%d). Compass not found. Returning.
Unsupported mode (%d). Couldn't do DeviceMotion without Gyro. Returning.
Starting device motion, mode=0x%{public}x,useAccelerometer=%{public}d,useGyro=%{public}d,useCompass=%{public}d,fUseNorthRef=%{public}d,buildingGYTT=%{public}d
Stopping device motion, mode=0x%x
CLSensorFusionService::Sample q.x,%10.10f,q.y,%10.10f,q.z,%10.10f,q.w,%10.10f,userAccel.x,%10.10f,userAccel.y,%10.10f,userAccel.z,%10.10f,rotationRate.x,%10.10f,rotationRate.y,%10.10f,rotationRate.z,%10.10f,magneticField.x,%10.10f,magneticField.y,%10.10f,magneticField.z,%10.10f,magneticFieldCalibrationLevel,%d,timestamp,%20.20f,doingBiasEstimation,%d,doingYawCorrection,%d
shouldILog returned %d for tag %d, last %f now %f, threshold is %lu
TILE: fDefaultWifiTilesServerUrl, %s
TILE: fDefaultWifiTilesRootDirectory, %s
@GtsLock, lock, unprotected, %{public}lu, total, %{public}lu
KvgLink, Nearby, %d
@GtsPair, LS Toggle, %{public}d
WtmDl, xlist, llsw, %.2lf, %.2lf, aged, size, %ld
Missing wifi #tile, x, %d, y, %d
Deleted wifi #tile isFileExistsOnServer is false. x, %d, y, %d
WtmList, delete, limits, size, %lu, llsw, %.2lf, %.2lf
TILE: deleteAgedTiles, end, numOfDeletedTiles, %lu, remain, %lu, name, %s
TILE: isCurrentTile, degreesFromCornerLat, %.8lf, degreesFromCornerLon, %.8lf, inside, %d, %d, isCurrentTile, %d, %d, isCurrentLocationKnown, %d, %s
WtmList, delete, all, size, %lu, llsw, %.2lf, %.2lf
wifi #tiles, populateTilesSet
KvgEvent, Indexed
WtmList, indexed, %lu
{"msg":"lock on-disk wifi #tiles", "numberOfOnDiskTiles":"%{public}ld"}
WtmDl, start, llsw, %.2lf, %.2lf
WtmDl, downloaded, llsw, %.2lf, %.2lf, success, %d, NSURLErrorCode, %d
WtmDl, dbinsert, llsw, %.2lf, %.2lf
WtmList, add, download, size, %lu, llsw, %.2lf, %.2lf
GnrTiles, block request
WtmDl, request, llsw, %.2lf, %.2lf
WtmDl, onlist, llsw, %.2lf, %.2lf, center, size, %ld
WtmDl, onlist, llsw, %.2lf, %.2lf, neighbor, size, %ld
TILE: CLWifiTilesManager::shutdown
TILE: stats: getTileStats, wifiTilesDownloaded, %d, wifiTilesDownloaded3G, %d, wifiTilesCached, %d
WtmList, add, rawfile, size, %lu, llsw, %.2lf, %.2lf
WtmList, add, database, size, %lu, llsw, %.2lf, %.2lf
TILE: db to map, %lu, %lu
{"msg":"invalid wifi #tile encountered. now deleting.", "filepath":"%{private}s"}
creating the BinaryLog instance
creating fInstance = new CLBinaryLog()
Logging binary sensor data to %s
Failed to determine if log rotation is needed. errno, %d, %s
Failed to move aside log file %s to %s (%d)
Unable to open %s
BTLE fencing is not supported on this device.
tagEnabled returns %d for tag %d
PAUSE: Autopause not suppored on this platform, constructing CLAutopauseProviderDummy
CLGyroBiasEstimator removing client %p
CLGyroBiasEstimator unknown client instance %p
CLGyroBiasEstimator adding client %p, sending out cached gyro bias,bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f
CLGyroBiasEstimator adding client %p, no cached gyro bias available
CLGyroBiasEstimator,SPUEnabled,%d,BuildingGYTT,%d,NumClients,%lu
AOP/SPU gyro bias not available on this platform.
GyroBiasFit,slope.x,%20.20f,slope.y,%20.20f,slope.z,%20.20f,intercept.x,%20.20f,intercept.y,%20.20f,intercept.z,%20.20f, lastMiniCal,%20.20f
Registering for gyro notifications
Registering for gyro temperature notifications
Registering for magnetometer notifications
Unregistering for gyro notifications
Unregistering for gyro temperature notifications
Unregistering for magnetometer notifications
Notifying clients on temperature update,temperature,%f
GyroBias,time,%f,temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,dbias.x,%f,dbias.y,%f,dbias.z,%f,var.x,%f,var.y,%f,var.z,%f,client,%p
Warning: Temperature is changing too quickly, clearing GYTT buffers
Warning: Could not insert GYTT because bump was detected.
Bias estimate inserted: bias,%f,%f,%f,variance,%f,%f,%f,temperature,%f
Expected linear fit.
GyroBiasFit: slope,%f,%f,%f,intercept,%f,%f,%f,seconds,%f
SPUGyroBias,temperature,%f,bias.x,%f,bias.y,%f,bias.z,%f,var.x,%f,var.y,%f,var.z,%f,client,%p
SPU bias estimate inserted: bias,%f,%f,%f,variance,%f,%f,%f,temperature,%f
configuration: wake threshold = %f
Registering with daemon status
Registering with CLAccelerometer
Registering throttledDispatcher with CLAccelerometer
Unregistering with CLAccelerometer
Unregistering throttleDispatcher with CLAccelerometer
detection @ %llu : low %f high %f status %d confidence %d odds %.2f
Failed to add throttled dispatcher
throttled @ %llu: accel = [%.2f %.2f %.2f] = %.2f ? %.2f
Failed to add dispatcher
kNotificationSleep. Turning off on body detector
kNotificationWake. Turning on on body detector
Unable to find index (%d) to value on which we want to build a cluster around!  Returning from function.
Assertion failed: receiver, file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMLinearTemperatureFit.h, line 27,receiver must not be null..
Received kNotificationWifiLocationBatched, num,%u,Size, %lu
Received unknown notification %d
Skipping new location with infinite lifespan,accuracy,%.01lf,type,%s
Skipping new location with invalid coordinate
Skipping new location with invalid rawCoordinate
Skipping new location with coordinate in null-island
Skipping new location with rawCoordinate in null-island
Skipping new location with an older timestamp,%.03lf,cached,%.03lf
Skipping new location, since having recent more confident location
Last confident location not available
Last confident location too old, maxAge = %.1lf
We don't expect any infinite lifespan locations in confident locations,acc,%.01lf,type,%s
Notifying cached location,num,%u,accuracy,%.01lf,timestamp,%.03lf,lifespan,%.04lf
Received a kNotificationCachedLocationControllerStateUpdate notification, state, %d
Recieved unknown notification %d
TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s
TILE: result: tilestool: prog, %3lu, %3lu, ===============> isFound, %d, location, %14.8lf, %14.8lf, entry, %s
TILE: result: tilestool: pass, %d, tests, %lu, %lu
TILE: index entry, %3lu, %3u, %s
TILE: searched, numOfEntries, %u, offsetEntries, %d
TILE: avoid data search
TILE: entry, %3lu, %3u, %3lu, %s, loc, %.8lf, %.8lf, delta, %.5lf, %.5lf, grid, %u, %u
TILE: getLocationByKey, isFound, %d, searchedArea, %d, key, %s
TILE: binarySearchIndex, size, %lu, searchedIndexEntry, %s, %d
TILE: index search, match, %s
TILE: index search, not found
TILE: binarySearchData, search data, isFound, %d, numOfCompares, %u
TILE: ......................................................................., getLocationByKey_mmap, key, %s
TILE: getLocationByKey_mmap, failed to mmap
TILE: getLocationByKey_mmap, not found in index, a, %u, b, %u, %s
TILE: getLocationByKey_mmap, nothing to search, a, %u, b, %u, %s
TILE: getLocationByKey_mmap, isFound, %d, searchedArea, %u, key, %s, entry, %s
TILE: ......................................................................., getLocationByKey_traverse, key, %s
TILE: getLocationByKey_traverse, prefer local file name because it exists, %s
TILE: getLocationByKey_traverse, isFound, %d, searchedArea, %u, key, %s, entry, %s
TILE: creating directory, %s, ret, %d
Natalie Model, Semistationary, Standing, %d, metsFromIntensity, %.1f, metsFromSteps, %.1f, metsFromPosture, %.1f, metsFinal, %.1f, metsFromPushes, %.1f, computeTime, %f
Aggregating accel sensor recorder samples.
Aggregating gyro sensor recorder samples.
Record %s data for %f
requested sampling rate of %d is greater than the max allowed of %d
setting desired accel sampling rate to %dhz
Error accessing sensor recorder data from %{private}f, %{private}f
Error occurred while retrieving data record %{private}llu
Wrote %lu meta records across %d data containers to %s
Updating %s sampling rate %d, fitness tracking enabled, %d
Updated %s subscription due to invalid time.
Natalie Model, Stationary Cycle, Begin Time, %f, End Time, %f, catherine(cpm), %f, catherinemax(cpm), %f, catherinemin(cpm), %f, vo2max(METs), %f, duration(s), %f, weight(kg), %f, METS, %f, HRstaleness, %f
Natalie Model, Stationary Cycle, Fused, Begin Time, %f, End Time, %f, HR METS, %f, Fused METS, %f, Duration, %f, Weight(kg), %f, fMetsScaling, %f
Attempting to fulfill scan requests,%lu.
Fulfilled scan requests,%d.
Processing events for %lu proximity zones.
Processed %d proximity zone events.
Bluetooth is powered off, no events will be processed.
Elevation, %f, %f, %d, %d
TrackCalibration,%s,CalData,%s,ElevationAscended,%d,ElevationDescended,%d
Programmer error, we expect an expiration record!
NatalieHistory not accessible
DB UUID un-initialized
Potential DB reset, returning all records to clients
Calorie history has rolled back, returning mru to clients,mru.recordId,%d,record.recordId,%d,mru.natalies,%lld,record.natalies,%lld
NatalieHistory doesn't exist yet.
Inserting basal natalies %f for gap (%lf - %lf, %lfs)
Overriding BeaconFenceBestEffortScheduleEnabled,%d.
Overriding BeaconFenceBestEffortInterval,%.2f.
Adding zone,%s.
Invalid region definition for zone monitoring.
Zone,%s, already registered, incremented reference count,%d.
Device doesn't support background monitoring, performing best effort zone detection.
Registering zone,%s, with Bluetooth.
Removing zone,%s.
Unregistering zone,%s, with Bluetooth, this is the last client.
Decremented zone,%s, reference count,%d, there are still other clients.
Unable to remove zone,%s, it wasn't found.
Zone detection timer woke up.
Received a wake event.
Best effort zone,%s, firstExit,%f, now,%f, has not reached exitThreshold,%f.
Best effort zone,%s, subject to exit.
Best effort zone,%s, stateTransition,%d.
Resetting best effort zone,%s, exit state
Removing an alarm which has not been added.
Invalid trigger.trigger,%u
Mode,%d is not supported, defaulting to the concrete service mode.
Unknown registration requested: %d
Unknown unregistration requested: %d
Attempted to re-register for daemon settings while already registered
Attempted to unregister for daemon settings while not registered
Attempted to re-register for AppleAccountDidChange while already registered
Attempted to unregister for AppleAccountDidChange while not registered
Overriding VerboseRangeLoggingEnabled,%d.
STATUS,SENSOR,Time,%.3lf,Type,FallStats,timestamp,%f,version,%d,seq,%u,aopTsNow,%llu,aopTsSensor,%llu,magMax,%f,xMin,%f,xMax,%f,yMin,%f,yMax,%f,zMin,%f,zMax,%f,xZCTime,%f,yZCTime,%f,zZCTime,%f,jerkVectorMagMax,%f,xJerkScalarMagMax,%f,yJerkScalarMagMax,%f,zJerkScalarMagMax,%f
Cleaning DB: invalid proximity zone for fence, %s.
Adding fence,%s.
Error, invalid proximity zone for fence,%s.
Unable to bind SQL for adding fence,%s.
Removing fence,%s.
Unable to bind SQL for removing fence,%s.
Removing all fences for bundle,%s.
Unable to bind SQL for removing all fences for bundle,%s.
Retrieving all fences.
Unable to get fences from the database.
An error was encountered when retrieving fences from the database.
Retrieving fences for bundle,%s.
Unable to bind SQL for retrieving fences for bundle,%s.
An error was encountered when retrieving fences from the database for bundle,%s.
Retrieving fence,%s/%s.
Unable to bind SQL for retrieving fence,[%s]/%s/%s.
Unable to get fence,[%s]/%s/%s, from database.
Unable to get the fence count for bundle,%s.
addOnBehalfBundleIdColumnIfNotExists
addOnBehalfBundleIdColumnIfNotExists, table doesn't even exist
addOnBehalfBundleIdColumnIfNotExists, OnBehalfBundleId already exists
Re-create primary key to include OnBehalfBundleId
Unable to initialize authorization manager with airplane mode status.
Initializing authorization manager with exceptions,%d.
Unable to get fences for bundle,%s. Fence,%s, will not be added.
Bundle,%s, exceeds its fence limit,%d. Fence,%s, will not be added.
Added fence,%s, to the database.
Unable to add fence,%s, to the database.
Removed fence,%s, from the database.
Unable to remove fence,%s, from the database.
Received Bluetooth LE power,%d.
Received uninstall for bundle,%s.
Received authorization for bundle,%s.
Received location services status,%d.
Reauthorizing clients by toggling beacon fences
Received airplane status,%d.
Unable to update authorization manager with airplane mode status.
Empty bundle identifier should not be passed in here
Setting icon state,%d, for bundle,%s.
Unable to get fences from database for bundle,%s.
Unable to remove all fences from the database for bundle,%s.
Removed all fences for bundle,%s.
Unable to retrieve all fences from the database.
No fences will be resumed due to exception,%d.
Resuming fences,%lu, for bundles,%lu.
Unable to get fence,[%s]/%s/%s, from the database.
Bundle(s) not authorized, fence,[%s]/%s/%s, will not be resumed.
Fence,[%s]/%s/%s, will not be resumed due to exception,%d.
Resuming fence,[%s]/%s/%s.
Unable to get all fences from database.
Suspending fences,%lu, for bundles,%lu.
There are no fences for bundle,%s.
Suspending fences (exception),%lu, for bundle,%s.
Suspending fences (authorization1),%lu, for bundle,%s.
Suspending fences,%lu, for bundle,%s.
Resuming fences,%lu, for bundle,%s.
Adding exception,%#x, to stored exceptions %#x.
Removing exception,%#x, from stored exceptions %#x.
Registered regions,%zu
Unable to register with base-class.
Unregistered regions,%zu
Unable to retrieve registration info for client,%d.
Range manager has lost its last connection.
Received proximity scan, updating beacon cache with devices,%zu
Caching new beacon identifier,%s, proximityUUID,'%s', major,%d, minor,%d, mask,%d.
Removed expired beacons,%d.
Notifying beacon clients of new scan.
Notifying region proximityUUID,'%s', major,%d, minor,%d, mask,%d with beacons,%zu.
Received activity update of activity,%d.
Unexpected notification %d
Starting the manager.
Stopping the manager.
Starting the manager if there's an interest in ranging.
There's no interest in ranging, the manager wont be started.
The manager is already started.
Stopping the manager if there's no interest in ranging.
There's an interest in ranging, the manager wont be stopped.
The manager is already stopped.
startTime,%f,endTime,%f,numberOfStrokes,%d,strokeType,%d,epochMets,%f,timestamp,%f,speed,%f,metSource,%d,strokeLength,%f,strokeRate,%f,entryStartTime,%f,entryEndTime,%f,distance,%f,scaledMets,%f,historicalTurnsPerSession,%f
This device does not support BTLE ranging.
deltaTime = %0.3f, but most negative allowed is %0.3lf, resetting Integrity Monitor
locationType,integrityPrior,%d,integrityNew,%d
location type,%d,not supported
not reliable or very low reliable,locationType,%d,lat,%.8lf,lon,%.8lf
Location rejected by IM,Reason,disagrees with GPS,location type,%d
Location rejected by IM,Reason,disagrees with high confidence wifi,location type,%d
huncBump,fromHunc,%.1lf,toHunc,%.1lf
Location rejected by IM,Reason,low confidence wifi strongly disagrees with cell,location type,%d
Client registered for notification %d
Client unregistered for notification %d
No active workouts to stop!
CLSE,Reading,%s
CLSE,could not open,%s
CLSE,file has expired - redownload
CLSE,file version does not match expected
CLSE,avl byte index,%d,is larger than the data available in the availabilty file
CLSE,Invalid CLDEM file - unable to get data byte
CLSE,Unexpected case
CLSE,finished
CLSE,fseek returned non-zero
CLSE,Invalid CLSE file - header string
CLSE,Invalid CLSE file - version
CLSE,Invalid CLSE file - headerLength
CLSE,Invalid CLSE file - minLat
CLSE,Invalid CLSE file - maxLat
CLSE,Invalid CLSE file - binsize
CLSE,coarse avl file is not %f deg by %f deg,spacing unexpected,%f,re-download needed
CLSE,Invalid CLSE file - timestamp
CLSE,Invalid CLSE file - expiration age
CLSE,Invalid CLSE file - data size
CLSE,Invalid CLSE file - crc
bad RAT for GSM: %s
bad RAT for SCDMA: %s
bad RAT for CDMA: %s
bad RAT for LTE: %s
CELL_LOC: override to, %s
CELL_LOC: which cell is that, %s
CELL_LOC: sec_key, 0x%016llX
Clearing Fitness stats
Fitness AWD: workoutType:%d, CompanionAvailable:%d, %s, GPS:%u, HR:%u, Onset:%d, HRUtil:%u, VO2Avail:%d, HRSrc:%d, VO2Cons:%u, PALStat:%d, VO2Stat:%d, loadUtil:%u, strideAvail:%u, walkAvail:%d, runAvail:%d, walkStat:%d, runStat:%d, vo2maxGradeAvailability:%d, idsAvail:%d, defaultUtil:%d, ratioWRHR:%d, pctPedestrianGPSAvailable:%d, pctDistanceTrackUsed:%d, pctDistanceTrackInvalidGradient:%d, pctDistanceTrackInvalidGain:%d, pctDistanceTrackInvalidSpeed:%d, pctDistanceTrackInvalidLength:%d, histSessionDuration:%d, pctPedestrianCalibrated:%d, pctPaceFailure:%d, avgPedestrianMetSourceDiff:%f, stdPedestrianMetSourceDiff:%f, boolDidHrBoundsFail:%d, pctSessionUphill:%d, pctSessionDownhill:%d, pctSessionCaloriesFromGrade:%d, pctSessionGPSSourcePhone:%d, pctSessionGPSSourceWatch:%d, workoutElevationError:%lld, pctHRSamplesValidMin: %d, pctHRSamplesValidMax: %d, pctMETSamplesWithRecentHR: %d, pctMETSamplesValidDelta: %d, vo2MaxDeltaPercentage: %d, numValidHRMetPairs: %d
Fitness AWD Swimmming: pctSessionFree:%d, pctSessionBreast:%d, pctSessionButter:%d, pctSessionBack:%d, pctSessionOther:%d, pctSessionSwimming:%d
Fitness AWD Auto-pause: autoPauseEnabled:%d, numAutoWillResume:%d, numAutoWillPause:%d, numPauseFast:%d, numPauseNormal:%d, numPauseSlow:%d, numResumeFast:%d, numResumeNormal:%d, numResumeFalse:%d
%sSubmitted session stats; session length, %f
HealthKit query error,%ld
HealthKit Inaccessible error,%ld
Setting otherWorkoutLabel: %d
Setting fAutoPauseEnabled: %d
fWheelchairStatsCollectionEnabled set to %d
received wheelchair data collection notification for service
SedentaryAlarmHistory not accessible
Time rolled back, deleting records in the future
TILE: allocate tile type, %d
TILE: failed to allocate a tile for type, %d
%s is enabling power conservative device motion for parallax.
%s is disabling power conservation for parallax.
Device is stationary and Timeout exceeded, turning off device motion gyro heartbeat and bias estimator.
WtmFind, results, searched, %ld, neighbor, %d, remaining, %d, ALS, %d
{"msg":"CLWifiAccessPointLocationService::saveWifiTileAccessPointEntries", "event":"%{public}s", "begin_mach":"%{public}llu", "end_mach":"%{public}llu", "elapsed_s":"%{public}.09f", "now_s":"%{public}.09f"}
{"msg":"invalid #tile header table connection.", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"invalid #tile tables connection.", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"Inconsistent #tile header count and #tile table counts", "tileHeaderCount":"%{public}d", "tileTableCount":"%{public}ld"}
Error upgrading wifi #tile database schemas
{"msg":"non-empty #tile tables after dropping all", "tileHeaderCount":"%{public}d", "tileTableCount":"%{public}ld", "event":"%{public}s", "condition":"%{private}s"}
{"msg":"initial mismatch count of #tile header and #tile tables", "tileHeaderCount":"%{public}d", "tileTableCount":"%{public}ld"}
WtmMiss, reset, %s
WtmMiss, count, %d
WtmFind, nrx, %ld, %ld, %ld, loc, 0, completemiss, %d
WtmFind, nrx, %ld, %ld, %ld, loc, 1, completemiss, %d
{"msg":"Heartbeat tracking requested", "silo":"%{public}@"}
{"msg":"Heartbeat tracking terminated", "silo":"%{public}@"}
{"msg":"Heartbeat underflow; going to crash now!", "silo":"%{public}@"}
{"msg":"#warning Heartbeat underflow", "silo":"%{public}@", "deficit":"%{public}d"}
{"msg":"Heartbeat tracking already enabled", "interval":"%{public}f"}
{"msg":"Heartbeat tracking resumed", "interval":"%{public}f"}
{"msg":"Heartbeat tracking suspended", }
{"msg":"Heartbeat tracking already disabled", }
Tried to look up a service by name that doesn't exist: %{public}@.
@GtsMgr, nrIsPairingActive, %{public}d
@GtsSync, inactive nil
Error in FFT,p,%d
Device is locked and we are unable to open the database.
Failed to delete records.
Failed to shift records.
WorkloadCalibratorDb (%d,%f,%f,%f).
syncgetAuthorizationOfClient, %s, forServiceMask, %lx, authorized, %d
setAllClients, %s
setClient, %s, authorization, %d, forMask, %lX
Attempted to setClient before the cache has been fully populated.
Assertion failed: !(ignoreHamming && node->requiresHammingWindow(samples[r]->sampleFreq)), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMAccelerometerProcessor.cpp, line 234,Hamming required but ignored..
Assertion failed: rhs.capacity() == capacity(), file /BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreLocation_Sim/CoreLocation-2101.0.54.1/Oscar/CMQueue.h, line 85,capacity,%zu,%zu.
Fence: combined fences, %lu, fences to, %lu, fences
Fence: combined, isExit, %d, %s
Fence: Failed to calculate fence %s
Fence: combined fence, %s
Fence: Calculator for %s/%s returned %ld desired APs for %s
Fence: Using associated AP %s, channel %d for exit
Fence: Not associated, or not monitoring for exit, %d, %d
Fence: calculateGroup, currentLocation, %s
Fence: isContinuousMonitoringNeeded = %d
Fence: Continuous monitoring is needed in order to supported the monitored fences
Fence: WifiFenceCalculator: Adding exit AP, mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf, isLocallyAdministered, %d
Fence: WifiFenceCalculator: ignoring locally administered AP, %s
Fence: WifiFenceCalculator: Skipped non-2GHz AP, channel, %d, mac, %s
Fence: WifiFenceCalculator: Adding entry AP, mac, %s, hAcc, %.2lf, channel, %d, location, %12.8lf, %12.8lf
Fence: Fence calculator returned more APs (%zu) than maximum (%lf)
Fence: no visible APs, can't use PNO for exit criteria, exitAPs, %lu
Fence: request a download for, %s, fChosenAPs, %lu
Fence: calculateAPsForFences end
WltStep, APs, currScan, %lu, inCache, %lu, validLoc, %lu, tooOld, %lu, unknown, %lu, inFix, %d, dist50m, %d
WltStep, Fix, aps, %d, of, %lu, ll, %.7f, %.7f, hacc, %.2f
TlurEmer, unexpected emergency state, processScanResult, %d, WARNING
TlurEmer, Emergency End, tte, %.1f
TlurEmer, Ticks End, toggle, %.1f, scan, %.1f, reply %.1f, als, %.1f, reply, %.1f, fix, %.1f, ttff, %.1f
WIFI_LOC: query, forcing query, macAddressesToQuery, %lu
WIFI_LOC: emergency query, %d
WIFI_LOC: skip Gizmo query on fixes
WIFI_LOC: no query, knownToUnknownRatio, %.1f
WIFI_LOC: query, can't compute location
WIFI_LOC: knownToUnknownRatio, %.1lf, accessPointsToQuery.size, %lu, sinceLastServerQuery, %.2lf, isWatch, %d, isQueryNeeded, %d, forceQuery, %d, queryType, %d, reqType, %d
WIFI_LOC: no query, too soon, thresh, %.2lf
WIFI_LOC: no query, bystander-only, clients, %u
WIFI_LOC: floor wifi unc, %lf, %lf
initInSilo
beginService
endService
shouldAcceptNewConnection
LocationServer received incoming connection
Why didn't we get a connection?
process is not entitled to use CLLocationSmoother, pid, %d, executable, %s
Connection Interrupted
Connection Invalidated
smoothLocations
Locations not delivered %p
Invalid Smoother Type using CLSmootherTypeNone
TILE: result: tilestool: TEST_testBinarySearch, entries, %lu, file, %s, id, %s
TILE: searched for, location, %.10lf, %.10lf, setLinear, %lu, setIndex, %lu
TILE: not in index, %s, count, %3u, locationd, %.10lf, %.10lf
TILE: result: tilestool: pass, %d, tests, %u, %d
TILE: CLSpatialDataTileTemplate, parsing, sectionId, %d, %s
TILE: CLSpatialDataTileTemplate, index, height, %u, width, %u
TILE: index entry, %3lu, %3u, step, %04d, %s
TILE: CLSpatialDataTileTemplate, entries, numOfEntries, %u
TILE: entry, %3lu, %3u, %3lu, %s, swLoc, %.8lf, %.8lf
TILE: CLSpatialDataTileTemplate, regionalEntries, numOfEntries, %u
TILE: CLSpatialDataTileTemplate, headers only, give up
TILE: entry, %3lu, %3u, %3lu, %s
TILE: getEntriesForArea, input, swLatitude, %.8lf, swLongitude, %.8lf, search, %.8lf, %.8lf, isUseIndex, %d, includeRegionalEntries, %d, entries, %lu
TILE: doesIntersectWithTile, %d, no intersection with the tile
TILE: invalid section, signature, 0x%x, stopping
TILE: getEntriesForArea, invalid tile file, bad allocation size, totalBytesInSection, %lu, maxSectionSize, %lu
TILE: getEntriesForArea, version, %d, y, %u, x, %u, corner, %.8f, %.8f, detlas, %.2f, %.2f, genTime, %.2lf, expAge, %d, age, %.2lf
TILE: getEntriesForArea, numEntriesHeight, %d, numEntriesWidth, %d, entrySizeInBytes, %d
TILE: getEntriesForArea, numOfEntries, %d, entrySizeInBytes, %d, numOfLargeEntries, %d
TILE: getEntriesForArea, numOfRegionalEntries, %d, entrySizeInBytes, %d
TILE: getEntriesForArea, asked not to use index
TILE: getEntriesForArea, pIndexEntries, 0x%lx, pEntries, 0x%lx
TILE: getEntriesForArea, line, %d, searched_min_y, %d, %d, searched_min_x, %d, %d, index_y, %d, index_x, %d, entriesOffset, %d
TILE: getEntriesForArea, entryId, %d, isIntersect, %d, examinedEntries, %d, entry, %s
TILE: getEntriesForArea, nothing to search, %s
TILE: getEntriesForArea, examinedEntries, %5u, foundEntries, %5lu, isUseIndex, %d, clocks, %10lu, extra, %3d, %3d
notification, %d, kNotificationPower, fIsWifiPowered, %d, data.power, %d
StepCountHistory table doesn't even exist
Assumption failed: startTime (%f) was found to be newer than endTime (%f), queryTimeType %d
First step time invalid.
Steps were found to be non monotonically increasing - start:%f, end:%f, queryTimeType:%d
StepCountHistory not accessible
DB UUID un-initialized
Potential DB reset, returning all records to clients
Step count has rolled back, returning mru to clients,mru.recordId,%d,record.recordId,%d,mru.count,%u,record.count,%u,mru.distance,%f,record.distance,%f,mru.activeTime,%f,record.activeTime,%f,mru.pushCount,%d,record.pushCount,%d
Failed to delete records
Failed to shift records
Failed to search list for %s %f
Failed to examine the most last record for data aggregation.
Failed to examine the second to last record for data aggregation.
Failed to iterate through records for data aggregation.
Failed to retrieve most recent record for data aggregation.
Failed to delete marked records with timestamp of %f
Reset requested.  Counts (prev: %d cur:%d). New fOffset (%d).
Reset current step count.  Counts (prev: %d cur:%d). New fOffset (%d).
Oscar restart detected.  Count (prev: %d cur:%d). New fOffset (%d).
An error in step counts is highly likely.  Treating current count as new 0.  Count (prev: %d cur:%d). New fOffset (%d).
Reset requested.  New offset (%d, %d, %f).
Locationd restart detected.  New offset (%d, %d, %f).
Oscar restart detected.  New offset (%d, %d, %f).
An error in floor counts is highly likely.  Treating current count as new 0.  New offset (%d, %d, %f).
%s needs autoincrement migration
%s autoincrement migration succeeded
%s autoincrement migration failed
CLStepCountNotifier is being constructed
CLStepCountNotifier is shutting down
Aggregating records due to timer!
StepCount, %f, %d, %f, %d, %d, %d, %d
Adding Fused entry, time, %f, count, %d, raw_dist(m), %f, fused_dist(m), %f, cadence(steps/s), %f
Query (%f, %f): %d, %f, %f, %d, %d, %f
Restarting step counting after activity session %lu
step counting overrideActivityType,%lu,
Unhandled notification type, %d
Programmer error, this rule is not valid (age: %f, interval:%f).
Requested finalize before end.
SwimDistributionsByLOI set to %d
Swim Notifier instantiated
LogMotionStateReplay and LogSwimming are both set - LogMotionStateReplay takes precedence in the Swim Notifier
CLSwimNotifier is shutting down.
Added client for %d, count %d
[LOI] Calling fetchLocationsOfInterestWithinDistance
Error retrieving the RT LOIs. %@
[LOI] Found nil locationsOfInterest
[LOI] Registering for location updates
[SwimOdom] Registering for odometer updates
Removed client for %d, count %d
[SwimOdom] Unregistering for odometer updates
[LOI] Unregistering for location updates
Swim Controller released
Swimming workout started, location, %lu, poolLength, %f
Swimming workout has ended
Unhandled Notification
[SwimOdom] Received an odometer update of type: %d
[SwimOdom] Received unhandled notification, %d
{"msg":"[LOI] Received a location", "location":"%{private, location:CLClientLocation}.*P", "":""}
[LOI] Received a location,lat: %{private}lf, long: %{private}lf, accuracy: %lf, lifespan: %lf, timestamp: %lf
CLLocationStreamerServiceProtocol
CLIntersiloServiceProtocol
CLIntersiloProxyDelegateProtocol
NSObject
CLLocationStreamerClientProtocol
CLIntersiloClientProtocol
CLLocationStreamer
CLLocationStreamingConnectionManagerClientProtocol
CLMIGIntersiloDelegate
CLPrivacyManagerProtocol
CLPrivacyManagerClientProtocol
CLPrivacyManager
CLGyroCalibrationDatabaseLocalBaseProtocol
CLNotifierServiceProtocol
CLGyroCalibrationDatabaseLocalBaseClientProtocol
CLNotifierServiceClientProtocol
CLGyroCalibrationDatabaseLocalBaseAdapter
IsSupported
CLCompassDatabaseDaemonProtocol
CLCompassDatabaseDaemonClientProtocol
CLCompassDatabaseDaemonAdapter
CLSignificantVisitManagerExtensions
CLSignificantVisitManagerServiceProtocol
CLSignificantVisitManagerClientProtocol
CLSignificantVisitManager
CLRoutineMonitorClientProtocol
CLClientAuthorizationCacheClientProtocol
CLGeomagneticModelProviderDaemonProtocol
CLGeomagneticModelProviderDaemonClientProtocol
CLGeomagneticModelProviderDaemonAdapter
CLGestureDataLoggerProtocol
CLGestureDataLoggerClientProtocol
CLGestureDataLoggerAdapter
CLMicroLocationAWDMetricsIntersiloDelegate
CRRTVisit
NSCopying
CLTileSyncSyChange
SYChange
SYObject
CLTileSyncSySerializer
SYChangeSerializer
CLTileSyncDelegate
PSYSyncCoordinatorDelegate
PSYInitialSyncStateObserverDelegate
SYServiceDelegate
SYSessionDelegate
CRMicroLocationRTLOITypeEntry
ALCMElevation
CMMotionUtils
CLStreamedLocationProviderProtocol
CLLocationProviderProtocol
CLStreamedLocationProviderClientProtocol
CLLocationProviderClientProtocol
CLStreamedLocationProviderAdapter
CLStreamedLocationProviderAssertion
CLStreamedLocationProviderFitnessAssertion
CLStreamedLocationProviderDisablementAssertion
CLStreamedLocationProviderEmergencyEnablementAssertion
ALMotionState
ALCMMotionContextMotionState
ALCLStrideCalEntry
ALCLStepCountEntry
ALCLSedentaryAlarmData
ALCLNatalieFeatures
ALCLBodyMetrics
ALCLMotionActivity
ALActivityOverrideMsg
ALActivityLog
CLActivityLoggerProtocol
CLActivityLoggerClientProtocol
CLActivityLoggerAdapter
CLOdometerNotifierProtocol
CLOdometerNotifierClientProtocol
CLOdometerNotifierAdapter
CRMicroLocationRecordingEventEntry
TRANSITPbRegionPreloadTile
CMStrideCalibrationStepCountBuffer
CRPoiHarvest
CLSedentaryTimerNotifierProtocol
CLSedentaryTimerNotifierClientProtocol
CLSedentaryTimerNotifierAdapter
ALCLJacksonData
TRANSITPbTransitTile
CLMescalSigner
CLDuetForegroundApp
CLDuetHomeKitScene
CLDuetHomeKitAccessory
CLDuetHomeKitAppView
CLKeychainItemWrapper
CRPressureCollectionRequest
CLTimer
CLLocationStreamingMessage
CLLocationStreamingConnectionManagerServiceProtocol
CLLocationStreamingConnectionManager
IDSServiceDelegate
CLStoreServicesRequestorResult
CLStoreServicesRequestor
CLHomeKitProviderProtocol
CLHomeKitProviderClientProtocol
CLHomeKitProviderAdapter
CLHomeKitDelegate
CBCentralManagerDelegate
CRMotionActivity
CLTelephonyServiceProtocol
CLTelephonyServiceClientProtocol
CLTelephonyServiceAdapter
CRIndoorMotionActivity
CLWifiServiceProtocol
CLWifiServiceClientProtocol
CLWifiServiceAdapter
ALCLStrideCalEntryDeprecated
CLMotionStateProtocol
CLMotionStateAdapter
CLCompanionNotifierProtocol
CLCompanionNotifierClientProtocol
CLCompanionNotifierAdapter
CLDaemonStatusInternal
RadiosPreferencesDelegate
CLDaemonStatusProtocol
CLDaemonStatusClientProtocol
CLDaemonStatusAdapter
CMSwimData
NSSecureCoding
NSCoding
CLAccessoryObserverHelper
BatchData
ALSLocationDelegate
CLTimeManagerProtocol
CLTimeManagerClientProtocol
CLTimeManagerAdapter
CLLocationControllerProtocol
CLLocationControllerClientProtocol
CLLocationControllerAdapter
CLWifiLocationProviderProtocol
CLWifiLocationProviderClientProtocol
CLWifiLocationProviderAdapter
ProtocolAdditions
CLMotionStateMediatorProtocol
CLMotionStateMediatorClientProtocol
CLMotionStateMediatorAdapter
CLLocationProviderAdapter
CLNmeaLocationProviderProtocol
CLNmeaLocationProviderClientProtocol
CLNmeaLocationProviderAdapter
CLNetworkLocationProviderProtocol
CLNetworkLocationProviderClientProtocol
CLNetworkLocationProviderAdapter
CLAccessoryLocationProviderProtocol
CLAccessoryLocationProviderClientProtocol
CLAccessoryLocationProviderAdapter
CLFilteredLocationControllerProtocol
CLFilteredLocationControllerClientProtocol
CLFilteredLocationControllerAdapter
CLOperatorSettingsProtocol
CLOperatorSettingsClientProtocol
CLOperatorSettingsAdapter
CMExerciseMinuteData
CRCellTowerLocation
CRCellWifiCollectionRequest
TRANSITPbRegionPreloadManifest
CRCellWifiCollectionResponse
CRLocation
CRLocationCollectionRequest
CRLocationCollectionResponse
CRIndoorCMAttitude
CRMeta
CRWifiAPLocation
CMElevationData
ALCLSessionCatherine
ALCMCalorieData
CLMotionActivity
CRCollectionDelegate
PBRequesterDelegate
CMSedentaryTimerData
CRPassLocation
CLClientManagerProtocol
CLClientManagerClientProtocol
CLClientManagerAdapter
CLCapabilityMonitorClientProtocol
CMMotionActivity
CLCarrierSettingsProtocol
CLCarrierSettingsClientProtocol
CLCarrierSettingsAdapter
TRANSITPbLocationFingerprints
CRIndoorCMPedometer
CRWifiScanWifiLocation
CLWatchOrientationSettingsNotifierProtocol
CLWatchOrientationSettingsNotifierClientProtocol
CLWatchOrientationSettingsNotifierAdapter
CLDiagnosticManagerServiceProtocol
CLDiagnosticManagerClientProtocol
CLDiagnosticManagerXPCServerInterface
CLDiagnosticManager
NSFileManagerDelegate
NSXPCListenerDelegate
TRANSITPbRegionPreloadMarket
CRIndoorCollectionRequest
CMOdometerData
CRMicroLocationConfigurationEntry
isSupported
CLCachedLocationControllerProtocol
CLCachedLocationControllerClientProtocol
CLCachedLocationControllerAdapter
CLGeoAccessMapGeometryGeoRestrictionsAllowNetworkLoad
GEOMapAccessRestrictions
CMStrideCalDataContainer
WPAirPlaySolo
CLATVAirplayDevice
CPPObject
CLATVAirplayMonitorServiceProtocol
CLATVAirplayMonitorClientProtocol
CLATVAirplayMonitor
CMStrideCalibrator
CMStrideCalibrationDatabaseDelegate
CMStrideCalLocationFSMDelegate
CLFitnessTrackingNotifierProtocol
CLFitnessTrackingNotifierClientProtocol
CLFitnessTrackingNotifierAdapter
CLClientManagerUsageSyncMessage
CLClientManagerUsageSyncMessageError
CLUsageSyncManagerProtocol
CLUsageSyncManagerClientProtocol
CLUsageSyncManager
CLTimeZoneManagerProtocol
CLTimeZoneManagerClientProtocol
CLTimeZoneManagerAdapter
CMActivity
CLFenceManagerProtocol
CLFenceManagerClientProtocol
CLFenceManagerAdapter
CRPoiCollectionResponse
CMCatherineData
ALCMCoarseElevation
CRCdmaCellTowerLocation
ALCLStairClimbingModel
PSYSyncCoordinator
PSYServiceSyncSession
PSYInitialSyncStateObserver
CMStrideCalibrationStats
CLPersistentTimerInternal
ALCLAllDayHeartRate
ALCLRowingModel
CLSimulatedLocationProviderProtocol
CLSimulatedLocationProviderClientProtocol
CLSimulatedLocationProviderAdapter
CLCompanionActivityAWDAggregatorServiceProtocol
CLCompanionActivityAWDAggregatorClientProtocol
CLCompanionActivityAWDAggregator
CLAuthSyncManagerProtocol
CLAuthSyncManagerClientProtocol
CLAuthSyncManager
CLCatherineNotifierProtocol
CLCatherineNotifierClientProtocol
CLCatherineNotifierAdapter
CLFallNotifierProtocol
CLFallNotifierClientProtocol
CLFallNotifierAdapter
ALCLIDSStatus
CLTilesManagerServerAppRecommendationResult
CLTilesManagerServerAppRecommendationRequest
CMStrideCalibrationActivityBuffer
CLHarvestAppRealtimePolygon
CRQuaternion
CLDuetRegistration
CLDuetMonitorRegistrationId
CLDuetMonitorServiceProtocol
CLDuetMonitorClientProtocol
CLDuetMonitor
CLDuetPredicates
CLSuggestedActionManagerAppRecommendationResult
CLSuggestedActionServiceProtocol
CLSuggestedActionManager
CLCompassDaemonClientNotifierProtocol
CLCompassDaemonClientNotifierClientProtocol
CLCompassDaemonClientNotifierAdapter
CRMicroLocationCollectionRequest
CLCompanionTransport
CMLogItemInternal
CMLogItem
CRCellNeighborsGroup
TRANSITPbLocationFingerprint
ConversionSupport
CLCandy
CLBundleLocationProviderContext
CLPBRequestIndexGenerator
CLSimulationControllerProtocol
CLSimulationControllerClientProtocol
CLSimulationControllerAdapter
CLStepDistanceEstimator
CLBluetoothServiceProtocol
CLBluetoothServiceClientProtocol
CLBluetoothServiceAdapter
CRPoiCollectionRequest
CMPedometerData
CMPedometerEvent
CLOnBodyNotifierProtocol
CLOnBodyNotifierClientProtocol
CLOnBodyNotifierAdapter
CLCompanionSyncAuthObject
CLPressureCalibrationDatabaseProtocol
CLPressureCalibrationDatabaseClientProtocol
CLPressureCalibrationDatabaseAdapter
CLCapabilityMonitorServiceProtocol
CLCapabilityMonitor
ALCLElevationDeprecated
CRWtwCollectionRequest
CLSignificantChangeManagerProtocol
CLSignificantChangeManagerClientProtocol
CLSignificantChangeManagerAdapter
CLNatalimetryNotifierProtocol
CLNatalimetryNotifierClientProtocol
CLNatalimetryNotifierAdapter
CLApplicationLifecycleManagerProtocol
CLApplicationLifecycleManagerClientProtocol
CLApplicationLifecycleManagerAdapter
CMStrideCalLocationFSM
CRMicroLocationCollectionResponse
CMStrideCalibrationDatabase
DataInput
CLRoutineMonitorServiceProtocol
CLLocationManagerRoutineServerInterface
CLLocationManagerRoutineClientInterface
CLRoutineMonitor
CLSuggestedActionClientProtocol
CLFenceMonitorAdapter
CRIndoorPressure
CLSignalEnvironmentProviderProtocol
CLSignalEnvironmentProviderClientProtocol
CLSignalEnvironmentProviderAdapter
CRPassCollectionResponse
CLRemoteMotionAlarmServiceProtocol
CLRemoteMotionAlarm
CLUnifiedCellLocationProviderProtocol
CLUnifiedCellLocationProviderClientProtocol
CLUnifiedCellLocationProviderAdapter
CRIndoorWifiScan
CLRunningAggregatorAWDServiceProtocol
CLRunningAggregatorAWDClientProtocol
CLRunningAggregatorAWD
CMStrideCalibrationData
CMStrideCalibrationBins
CRPoiTriggerEvent
CLPolygonSimplifier
CLSubHarvesterMicroLocationDuetDelegate
CLGnssProviderAdapter
CLDataProtectionManagerProtocol
CLDataProtectionManagerClientProtocol
CLDataProtectionManagerAdapter
CLStatusBarIconManagerProtocol
CLStatusBarIconManagerClientProtocol
CLStatusBarIconManagerAdapter
CMWorkout
CMSwimWorkout
CLStreamingAwareLocationProviderProtocol
CLStreamingAwareLocationProviderAdapter
CLRemoteMotionAlarmClientProtocol
CRMicroLocationDuetEntry
ALSCdmaCellTower
ALCLSedentaryAlarmDataDeprecated
ALSCdmaEvdoTower
CLSensorCalibrationControllerProtocol
CLSensorCalibrationControllerClientProtocol
CLSensorCalibrationControllerAdapter
CSStoreObjects
ALSCellTower
ALSLocation
ALSLocationRequest
ALSLocationResponse
ALSLteCellTower
ALSNearbyRequest
CLMicroLocationNotifierProtocol
CLMicroLocationNotifierClientProtocol
CLMicroLocationNotifierAdapter
CLMicroLocationIntersiloDelegate
ALSNearbyResponse
ALSWirelessAP
CLALSRequester
CRLteCellTowerLocation
TRANSITPbLocationFingerprintV1
CMNatalieData
CLEmergencyControllerProtocol
CLEmergencyClientProtocol
CLEmergencyControllerAdapter
CLAutopauseProviderProtocol
CLAutopauseProviderClientProtocol
CLAutopauseProviderAdapter
CLPeerRangingNotifierProtocol
CLPeerRangingNotifierClientProtocol
CLPeerRangingNotifierAdapter
CLTilesManagerProtocol
CLTilesManagerClientProtocol
CLTilesManagerAdapter
CLStreamedLocationInternal
CRIndoorEvent
CRWtwCollectionResponse
CLBTAProtocol
CLBTAClientProtocol
CLBTAAdapter
CLOdometerAlarm
CLSpeedProviderServiceProtocol
CLSpeedProviderClientProtocol
CLSpeedProvider
CLMotionStateClientProtocol
CLOdometerAlarmManagerProtocol
CLOdometerAlarmManagerClientProtocol
CLOdometerAlarmManager
CLCompanionPedometerAWDAggregatorServiceProtocol
CLCompanionPedometerAWDAggregatorClientProtocol
CLCompanionPedometerAWDAggregator
CRPressureCollectionResponse
CalibrationTrack
CMGpsOdometerEntry
CMPedometerEntry
CalTrackFinder
ALCLNatalieDataDeprecated
CLCustomAuthPBRequester
NSURLConnectionDelegate
CLPCPBRequester
CLURLConnection
NSURLAuthenticationChallengeSender
CRIndoorCollectionResponse
CLURLConnectionSession
CLStreamedLocationPrivate
CLDaemonClientAdapter
CLStreamingAwareLocationProviderClientProtocol
CLVehicleConnectionNotifierProtocol
CLVehicleConnectionNotifierClientProtocol
CLVehicleConnectionNotifierAdapter
CLMotionSyncStoreProtocol
CLMotionSyncStoreClientProtocol
CLMotionSyncStoreAdapter
CRMicroLocationModelEntry
CRSCdmaCellTowerLocation
CLAppMonitorProtocol
CLAppMonitorClientProtocol
CLAppMonitorAdapter
CRAppCollectionRequest
CRAppCollectionResponse
CRAppLocation
TRANSITPbLocationFingerprintsV1
CLMotionStateObserverProtocol
CLMotionStateObserverClientProtocol
CLMotionStateObserverAdapter
CRLteCellNeighbor
CLNotifiers
Callbacks
CLSensorRecorderSensorMetaSerializer
CRCdmaCellNeighbor
CRCellNeighbor
CLDeviceMotionProperties
CLWifiTilesManagerProtocol
CLWifiTilesManagerClientProtocol
CLWifiTilesManagerAdapter
CRMicroLocationLocalizationResult
CLCallbackDropNullDelegate
CLAuthSerializer
ALCMExerciseMinute
CLSensorRecorderNotifierProtocol
CLSensorRecorderNotifierClientProtocol
CLSensorRecorderNotifierAdapter
CMStrideCalibrationElevationBuffer
CLBTLEFenceManagerProtocol
CLBTLEFenceManagerClientProtocol
CLBTLEFenceManagerAdapter
CRMicroLocationMeasurementEntry
CLHarvestAppRealtimeAvailabilityTile
CLGpsAssistantProtocol
CLGpsAssistantClientProtocol
CLGpsAssistantAdapter
CMOnBodyStatus
TRANSITPbMacModePair
CMActivityAlarm
CLBTLEBeaconProviderProtocol
CLBTLEBeaconProviderClientProtocol
CLBTLEBeaconProviderAdapter
CLDarwinNotifierProtocol
CLDarwinNotifierClientProtocol
CLDarwinNotifierAdapter
CLFallLogger
CLBeaconFenceAuthorizationManagerProtocol
CLBeaconFenceAuthorizationManagerClientProtocol
CLBeaconFenceAuthorizationManagerAdapter
ALSScdmaCellTower
CRWifiLocation
CLBTLERangeManagerProtocol
CLBTLERangeManagerClientProtocol
CLBTLERangeManagerAdapter
CLTurnStateProtocol
CLTurnStateClientProtocol
CLTurnStateAdapter
CRPressure
CLSilo
CLDispatchTimerScheduler
CLTimerScheduler
CLDispatchSilo
MainSilo
CRPoiWifiAccessPoint
CRPassCollectionRequest
CLExtensions
CLIntersiloInterfaceSelectorInfo
CLIntersiloInterface
CLIntersiloProxy
CLIntersiloService
CLServiceVendorHeartbeatRecord
_Locationd
_CLMainService
CLServiceVendor
ALCMWorkoutEvent
CLNotifierData
CLNotifierClientAdapter
CLNotifierServiceAdapter
CLJsonLogging
CMCalorieUserInfo
CLHarvestAppRealtimeHarvestRegion
CLClientAuthorizationCacheProtocol
CLClientAuthorizationCache
ALCMFitnessTracking
CMAltitudeDataInternal
CMAltitudeData
CMSignificantElevationSample
CLSensorRecorderSensorMeta
CLSensorRecorderSensorMetaRequestById
CLSensorRecorderSensorMetaRequestByDateRange
CLSensorRecorderSensorDataRequestById
CLSensorRecorderRecordSensorTypeFor
CLSensorRecorderWriteSensorDataToFileForDateRange
CLSensorRecorderSensorAvailable
CLSensorRecorderSensorSampleRate
ALCLOdometer
CLSmootherMonitorServiceProtocol
CLSmootherMonitorClientProtocol
CLLocationSmootherServerInterface
CLLocationSmootherClientInterface
CLSmootherMonitor
CLStepCountNotifierProtocol
CLStepCountNotifierClientProtocol
CLStepCountNotifierAdapter
CLSwimNotifierProtocol
CLSwimNotifierClientProtocol
CLSwimNotifierAdapter
CLSwimNotifierIntersiloDelegate
v12@0:4R@8
v12@0:4R@"<CLLocationStreamerClientProtocol>"8
v8@0:4
v16@0:4@8@12
v16@0:4@"<CLIntersiloProxyDelegateProtocol>"8@"CLSilo"12
v12@0:4^v8
B8@0:4
@8@0:4
@"CLSilo"8@0:4
v12@0:4@8
v12@0:4@"NSMutableArray"8
v16@0:4@8@?12
v16@0:4@"CLSilo"8@?<v@?>12
v12@0:4B8
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4@"Protocol"8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
@"NSString"8@0:4
v16@0:4@"NSString"8@"NSDictionary"12
v20@0:4@8@12B16
v20@0:4@"CLLocationStreamingMessage"8@"NSError"12B16
v12@0:4@"CLLocationStreamingMessage"8
@12@0:4@8
v12@0:4i8
v20@0:4i8B12B16
v16@0:4r^i8r^{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}i}12
v16@0:4r^i8r^(NotificationData={CLMotionActivity=iiiiBfdBiddii})12
i8@0:4
{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >="__ptr_"{__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >="__first_"^{Client}}}
{unique_ptr<RollingPowerAssertion, std::__1::default_delete<RollingPowerAssertion> >="__ptr_"{__compressed_pair<RollingPowerAssertion *, std::__1::default_delete<RollingPowerAssertion> >="__first_"^{RollingPowerAssertion}}}
{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >="__ptr_"{__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLMotionActivity, std::__1::default_delete<CLMotionActivity> >="__ptr_"{__compressed_pair<CLMotionActivity *, std::__1::default_delete<CLMotionActivity> >="__first_"^{CLMotionActivity}}}
@"NSMutableSet"
@"CLTimer"
@"<CLLocationStreamingConnectionManagerServiceProtocol>"
v80@0:4i8{NotificationData={Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BB}Bii}12
{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >="__ptr_"{__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >="__first_"^{Client}}}
@"NSObject<OS_dispatch_source>"
@"NSMutableDictionary"
v12@0:4@?8
v12@0:4@?<v@?^{CLGyroCalibrationDatabaseLocalBase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
v16@0:4@?8@?12
v16@0:4@?<v@?^{CLGyroCalibrationDatabaseLocalBase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8@?<v@?>12
B12@0:4@?8
B12@0:4@?<v@?^{CLGyroCalibrationDatabaseLocalBase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
v20@0:4R@8i12@16
v20@0:4R@"<CLNotifierServiceClientProtocol>"8i12@"CLNotifierData"16
v16@0:4R@8i12
v16@0:4R@"<CLNotifierServiceClientProtocol>"8i12
v12@0:4R@"<CLNotifierServiceClientProtocol>"8
v16@0:4i8@12
v16@0:4i8@"CLNotifierData"12
^{CLGyroCalibrationDatabaseLocalBase=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGyroCalibrationDatabase_Type::Notification, CLGyroCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}8@0:4
v12@0:4@?<v@?^{CLCompassDatabaseDaemon=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{BasicMutex=^^?^{MutexInfo}}i{CLCompassDatabaseController=^^?@{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}Bffff{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}d{CLRunningVector3d<float>=^^?I{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}}^{CLPersistentTimer}{CLCompassCalibrationTable={auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}^{CLSqliteDatabase}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLClusterCompassCalibrationTable={auto_ptr<CLCachedCompassQuery<CLClusterDatabaseRecord> >=^{CLCachedCompassQuery<CLClusterDatabaseRecord>}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}^{CLSqliteDatabase}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{shared_ptr<CLCompassBiasClusteringMinDiam>=^{CLCompassBiasClusteringMinDiam}^{__shared_weak_count}}ffiiBBBd{?=fff}id}}>8
v16@0:4@?<v@?^{CLCompassDatabaseDaemon=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{BasicMutex=^^?^{MutexInfo}}i{CLCompassDatabaseController=^^?@{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}Bffff{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}d{CLRunningVector3d<float>=^^?I{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}}^{CLPersistentTimer}{CLCompassCalibrationTable={auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}^{CLSqliteDatabase}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLClusterCompassCalibrationTable={auto_ptr<CLCachedCompassQuery<CLClusterDatabaseRecord> >=^{CLCachedCompassQuery<CLClusterDatabaseRecord>}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}^{CLSqliteDatabase}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{shared_ptr<CLCompassBiasClusteringMinDiam>=^{CLCompassBiasClusteringMinDiam}^{__shared_weak_count}}ffiiBBBd{?=fff}id}}>8@?<v@?>12
B12@0:4@?<v@?^{CLCompassDatabaseDaemon=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{BasicMutex=^^?^{MutexInfo}}i{CLCompassDatabaseController=^^?@{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}Bffff{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}d{CLRunningVector3d<float>=^^?I{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}}^{CLPersistentTimer}{CLCompassCalibrationTable={auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}^{CLSqliteDatabase}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLClusterCompassCalibrationTable={auto_ptr<CLCachedCompassQuery<CLClusterDatabaseRecord> >=^{CLCachedCompassQuery<CLClusterDatabaseRecord>}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}^{CLSqliteDatabase}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{shared_ptr<CLCompassBiasClusteringMinDiam>=^{CLCompassBiasClusteringMinDiam}^{__shared_weak_count}}ffiiBBBd{?=fff}id}}>8
^{CLCompassDatabaseDaemon=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDatabase_Type::Notification, CLCompassDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{BasicMutex=^^?^{MutexInfo}}i{CLCompassDatabaseController=^^?@{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}Bffff{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}d{CLRunningVector3d<float>=^^?I{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}{CLRunningBufferStats<float>=^^?Iff{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}}}^{CLPersistentTimer}{CLCompassCalibrationTable={auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{auto_ptr<CLCachedCompassQuery<CLCompassDatabaseRecord> >=^{CLCachedCompassQuery<CLCompassDatabaseRecord>}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}^{CLSqliteDatabase}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLClusterCompassCalibrationTable={auto_ptr<CLCachedCompassQuery<CLClusterDatabaseRecord> >=^{CLCachedCompassQuery<CLClusterDatabaseRecord>}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}^{CLSqliteDatabase}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{shared_ptr<CLCompassBiasClusteringMinDiam>=^{CLCompassBiasClusteringMinDiam}^{__shared_weak_count}}ffiiBBBd{?=fff}id}}8@0:4
@16@0:4@8@12
v16@0:4R@8@12
v16@0:4R@"<CLSignificantVisitManagerClientProtocol>"8@"NSString"12
v12@0:4R@"<CLSignificantVisitManagerClientProtocol>"8
v12@0:4@"CLVisit"8
v12@0:4@"RTScenarioTrigger"8
v16@0:4@8R@12
@12@0:4R@8
v12@0:4^{__CFRunLoopTimer=}8
v13@0:4i8{NotificationData=c}12
^{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}8@0:4
v12@0:4^{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}8
Q8@0:4
v16@0:4Q8
{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >="__ptr_"{__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >="__first_"^{Client}}}
{map<id<CLSignificantVisitManagerClientProtocol>, NSString *, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, std::__1::allocator<std::__1::pair<const id<CLSignificantVisitManagerClientProtocol>, NSString *> > >="__tree_"{__tree<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true>, std::__1::allocator<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<CLSignificantVisitManagerClientProtocol>, std::__1::__value_type<id<CLSignificantVisitManagerClientProtocol>, NSString *>, std::__1::less<id<CLSignificantVisitManagerClientProtocol> >, true> >="__first_"L}}}
^{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}
@"<CLClientAuthorizationCacheProtocol>"
@"NSMutableArray"
@"<CLRoutineMonitorServiceProtocol>"
@"<CLClientManagerProtocol>"
v12@0:4@?<v@?^{CLGeomagneticModelProviderDaemon=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB{?=dddddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}}>8
v16@0:4@?<v@?^{CLGeomagneticModelProviderDaemon=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB{?=dddddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLGeomagneticModelProviderDaemon=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB{?=dddddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}}>8
v12@0:4@?<v@?{?=dddddddd}>8
^{CLGeomagneticModelProviderDaemon=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGeomagneticModelProvider_Type::Notification, CLGeomagneticModelProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB{?=dddddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}}8@0:4
v12@0:4@?<v@?^{CLGestureDataLogger=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher> >={__compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> >=^{Dispatcher}}}}>8
v16@0:4@?<v@?^{CLGestureDataLogger=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher> >={__compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> >=^{Dispatcher}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLGestureDataLogger=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher> >={__compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> >=^{Dispatcher}}}}>8
^{CLGestureDataLogger=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGestureDataLogger_Type::Notification, CLGestureDataLogger_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionNotifier::Dispatcher, std::__1::default_delete<CLMotionNotifier::Dispatcher> >={__compressed_pair<CLMotionNotifier::Dispatcher *, std::__1::default_delete<CLMotionNotifier::Dispatcher> >=^{Dispatcher}}}}8@0:4
@12@0:4^{_NSZone=}8
v16@0:4d8
d8@0:4
{?="entryTime"b1"exitTime"b1}
c8@0:4
v12@0:4c8
@"NSString"
@"NSDictionary"
@"NSData"12@0:4@"<SYChange>"8
@16@0:4@8i12
@"<SYChange>"16@0:4@"NSData"8i12
@"NSData"12@0:4@"<SYObject>"8
@"<SYObject>"12@0:4@"NSData"8
@"NSData"16@0:4@"<SYChange>"8i12
@20@0:4@8i12i16
@"<SYChange>"20@0:4@"NSData"8i12i16
v16@0:4@"PSYSyncCoordinator"8@"PSYServiceSyncSession"12
v12@0:4@"PSYSyncCoordinator"8
v16@0:4@"PSYInitialSyncStateObserver"8@"NSUUID"12
v12@0:4@"PSYInitialSyncStateObserver"8
B20@0:4@8@12^@16
B20@0:4@"SYService"8@"SYSession"12^@16
v20@0:4@8@12@16
v20@0:4@"SYService"8@"SYSession"12@"NSError"16
v20@0:4@8@12@?16
v20@0:4@"SYService"8@"NSData"12@?<v@?B@"NSError">16
v24@0:4@8@12@16@?20
v24@0:4@"SYService"8@"NSInputStream"12@"NSDictionary"16@?<v@?B@"NSError">20
v20@0:4@"SYService"8@"NSError"12@"NSDictionary"16
@20@0:4@8@12@16
@"SYSession"20@0:4@"SYService"8@"SYSession"12@"SYSession"16
v20@0:4@"SYService"8@"NSUUID"12@"NSUUID"16
v16@0:4@8B12
v16@0:4@"SYService"8B12
v12@0:4@"SYService"8
i20@0:4@8@?12^@16
i20@0:4@"SYSession"8@?<B@?@"<SYChange>">12^@16
v20@0:4@"SYSession"8@"NSArray"12@?<v@?B@"NSError">16
v16@0:4@"SYSession"8@"NSError"12
B16@0:4@8^@12
B16@0:4@"SYSession"8^@12
v16@0:4@"SYSession"8@?<v@?B@"NSError">12
v16@0:4@"SYSession"8@"NSSet"12
@16@0:4^{CLTileSyncManager=^^?@@@@@^{CLITilesManager}{unique_ptr<CLTileSyncManager::IExternal, std::__1::default_delete<CLTileSyncManager::IExternal> >={__compressed_pair<CLTileSyncManager::IExternal *, std::__1::default_delete<CLTileSyncManager::IExternal> >=^{IExternal}}}@^{BasicMutex}dBdd@*B@B{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}c{vector<TileId, std::__1::allocator<TileId> >=^{TileId}^{TileId}{__compressed_pair<TileId *, std::__1::allocator<TileId> >=^{TileId}}}cBiB{CLTileSyncAWD=iiiiiiiiidd}}8@12
^{CLTileSyncManager=^^?@@@@@^{CLITilesManager}{unique_ptr<CLTileSyncManager::IExternal, std::__1::default_delete<CLTileSyncManager::IExternal> >={__compressed_pair<CLTileSyncManager::IExternal *, std::__1::default_delete<CLTileSyncManager::IExternal> >=^{IExternal}}}@^{BasicMutex}dBdd@*B@B{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}c{vector<TileId, std::__1::allocator<TileId> >=^{TileId}^{TileId}{__compressed_pair<TileId *, std::__1::allocator<TileId> >=^{TileId}}}cBiB{CLTileSyncAWD=iiiiiiiiidd}}
@"CLSilo"
@"PSYServiceSyncSession"
{?="confidence"b1"uncertaintyInMeters"b1"rtLOIType"b1"typeSource"b1"rtVisitTimesAreQuantized"b1}
v12@0:4I8
@12@0:4i8
i12@0:4@8
v12@0:4f8
f8@0:4
{?="elevationDescended"b1"gradeType"b1"rawGradeType"b1"source"b1"verticalSpeed"b1}
@16@0:4{shared_ptr<CLConnectionMessage>=^{CLConnectionMessage}^{__shared_weak_count}}8
B32@0:4{shared_ptr<CLConnectionMessage>=^{CLConnectionMessage}^{__shared_weak_count}}8^{CLConnectionClient={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@@^{CLConnection}B{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@?@?@@?@?}16d20@?28
B12@0:4r*8
v12@0:4@?<v@?^{CLStreamedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB@Bi@@iiii}>8
v16@0:4@?<v@?^{CLStreamedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB@Bi@@iiii}>8@?<v@?>12
B12@0:4@?<v@?^{CLStreamedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB@Bi@@iiii}>8
v20@0:4i8@12R@16
v20@0:4i8@"CLNotifierData"12R@"<CLLocationProviderClientProtocol>"16
v168@0:4{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}8
^{CLStreamedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB@Bi@@iiii}8@0:4
@"<CLStreamedLocationProviderProtocol>"
@"ALCMMotionContextMotionState"
@"ALCLNatalieFeatures"
{?="timestamp"b1}
{?="startTime"b1"exitState"b1"mounted"b1"mountedConfidence"b1"turn"b1"isMoving"b1"isVehicular"b1}
{?="timestamp"b1"pacebin"b1"recordId"b1"regularEntry"b1}
{?="pace"b1"timestamp"b1"recordId"b1}
{?="estExitTime"b1"startTime"b1"confidence"b1"exitState"b1"mountedConfidence"b1"mountedState"b1"tilt"b1"isStanding"b1"isVehicleConnected"b1}
@"ALCLMotionActivity"
@"ALActivityOverrideMsg"
@"ALCLAllDayHeartRate"
@"ALCLBodyMetrics"
@"ALCMCalorieData"
@"ALCMCoarseElevation"
@"ALCMElevation"
@"ALCLElevationDeprecated"
@"ALCMExerciseMinute"
@"ALCMFitnessTracking"
@"ALCLIDSStatus"
@"ALCLJacksonData"
@"ALMotionState"
@"ALCLNatalieDataDeprecated"
@"ALCLOdometer"
@"ALCLRowingModel"
@"ALCLSedentaryAlarmData"
@"ALCLSedentaryAlarmDataDeprecated"
@"ALCLSessionCatherine"
@"ALCLStairClimbingModel"
@"ALCLStepCountEntry"
@"ALCLStrideCalEntry"
@"ALCLStrideCalEntryDeprecated"
@"ALCMWorkoutEvent"
v12@0:4@"PBCodable"8
^{CLActivityLogger=@{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{CLActivityLoggerWriter=@@{shared_ptr<CLActivityLoggerPolicy>=^{CLActivityLoggerPolicy}^{__shared_weak_count}}{BasicMutex=^^?^{MutexInfo}}}{CLActivityDbExportAdapter=B@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}8@0:4
v12@0:4^{CLActivityLogger=@{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{CLActivityLoggerWriter=@@{shared_ptr<CLActivityLoggerPolicy>=^{CLActivityLoggerPolicy}^{__shared_weak_count}}{BasicMutex=^^?^{MutexInfo}}}{CLActivityDbExportAdapter=B@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}8
^{CLActivityLogger=@{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{CLActivityLoggerWriter=@@{shared_ptr<CLActivityLoggerPolicy>=^{CLActivityLoggerPolicy}^{__shared_weak_count}}{BasicMutex=^^?^{MutexInfo}}}{CLActivityDbExportAdapter=B@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}
v12@0:4@?<v@?^{CLOdometerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLElevationRecorderDb>=^{CLElevationRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSignificantElevation>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSignificantElevation> >=^{CLActivityRecorderDb<CLSignificantElevation>}^{__shared_weak_count}}BB}{CLSignificantElevationEstimator={CLSignificantElevation=i[16C]ddII}{FirstOrderFilter<double>=idd}didi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}@@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__list_node_base<CLOdometerEntry, void *>=^{__list_node_base<CLOdometerEntry, void *>}^{__list_node_base<CLOdometerEntry, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *> > >=L}}}>8
v16@0:4@?<v@?^{CLOdometerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLElevationRecorderDb>=^{CLElevationRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSignificantElevation>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSignificantElevation> >=^{CLActivityRecorderDb<CLSignificantElevation>}^{__shared_weak_count}}BB}{CLSignificantElevationEstimator={CLSignificantElevation=i[16C]ddII}{FirstOrderFilter<double>=idd}didi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}@@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__list_node_base<CLOdometerEntry, void *>=^{__list_node_base<CLOdometerEntry, void *>}^{__list_node_base<CLOdometerEntry, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *> > >=L}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLOdometerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLElevationRecorderDb>=^{CLElevationRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSignificantElevation>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSignificantElevation> >=^{CLActivityRecorderDb<CLSignificantElevation>}^{__shared_weak_count}}BB}{CLSignificantElevationEstimator={CLSignificantElevation=i[16C]ddII}{FirstOrderFilter<double>=idd}didi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}@@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__list_node_base<CLOdometerEntry, void *>=^{__list_node_base<CLOdometerEntry, void *>}^{__list_node_base<CLOdometerEntry, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *> > >=L}}}>8
v20@0:4@"NSDate"8@"NSDate"12@?<v@?@"CMSignificantElevationSample">16
^{CLOdometerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLElevationRecorderDb>=^{CLElevationRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSignificantElevation>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSignificantElevation> >=^{CLActivityRecorderDb<CLSignificantElevation>}^{__shared_weak_count}}BB}{CLSignificantElevationEstimator={CLSignificantElevation=i[16C]ddII}{FirstOrderFilter<double>=idd}didi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}@@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{list<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__list_node_base<CLOdometerEntry, void *>=^{__list_node_base<CLOdometerEntry, void *>}^{__list_node_base<CLOdometerEntry, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLOdometerEntry, void *> > >=L}}}8@0:4
@"NSData"
{?="receivedTimestamp"b1"recordingTimestamp"b1"recordingEventType"b1}
{?="secKey"b1"tileType"b1"tileX"b1"tileY"b1"isAllowOverCellular"b1}
v12@0:4r^(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})8
{queue<std::__1::pair<double, unsigned int>, std::__1::deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > > >="c"{deque<std::__1::pair<double, unsigned int>, std::__1::allocator<std::__1::pair<double, unsigned int> > >="__map_"{__split_buffer<std::__1::pair<double, unsigned int> *, std::__1::allocator<std::__1::pair<double, unsigned int> *> >="__first_"^^{pair<double, unsigned int>}"__begin_"^^{pair<double, unsigned int>}"__end_"^^{pair<double, unsigned int>}"__end_cap_"{__compressed_pair<std::__1::pair<double, unsigned int> **, std::__1::allocator<std::__1::pair<double, unsigned int> *> >="__first_"^^{pair<double, unsigned int>}}}"__start_"I"__size_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, unsigned int> > >="__first_"L}}}
@12@0:4I8
@"CRPoiTriggerEvent"
v12@0:4@?<v@?^{CLSedentaryTimerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}BiiiiB{shared_ptr<CLSedentaryAlarmRecorderDb>=^{CLSedentaryAlarmRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSedentaryAlarmData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData> >=^{CLActivityRecorderDb<CLSedentaryAlarmData>}^{__shared_weak_count}}BB}d@}>8
v16@0:4@?<v@?^{CLSedentaryTimerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}BiiiiB{shared_ptr<CLSedentaryAlarmRecorderDb>=^{CLSedentaryAlarmRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSedentaryAlarmData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData> >=^{CLActivityRecorderDb<CLSedentaryAlarmData>}^{__shared_weak_count}}BB}d@}>8@?<v@?>12
B12@0:4@?<v@?^{CLSedentaryTimerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}BiiiiB{shared_ptr<CLSedentaryAlarmRecorderDb>=^{CLSedentaryAlarmRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSedentaryAlarmData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData> >=^{CLActivityRecorderDb<CLSedentaryAlarmData>}^{__shared_weak_count}}BB}d@}>8
^{CLSedentaryTimerNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}BiiiiB{shared_ptr<CLSedentaryAlarmRecorderDb>=^{CLSedentaryAlarmRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLSedentaryAlarmData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLSedentaryAlarmData> >=^{CLActivityRecorderDb<CLSedentaryAlarmData>}^{__shared_weak_count}}BB}d@}8@0:4
{?="fPal"b1"lsest"b1"sumest"b1}
@"TRANSITPbLocationFingerprintsV1"
@"TRANSITPbLocationFingerprints"
{?="generationTimeSecs"b1"marketId"b1"securityKey"b1"expirationAgeSecs"b1"tileX"b1"tileY"b1"version"b1}
{?="IDLength"i"ID"^v}
^{?=i}
@32@0:4@8@12@16@20@24@28
@36@0:4@8@12@16@20@24@28@32
@24@0:4@8@12@16@20
@"CRMeta"
@"CRPressure"
@"CRLocation"
@"<CLTimerScheduler>"
v12@0:4R@"<CLLocationStreamingConnectionManagerClientProtocol>"8
v28@0:4@8@12@16@20@24
v28@0:4@"IDSService"8@"IDSAccount"12@"NSDictionary"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"NSData"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSProtobuf"16@"NSString"20@"IDSMessageContext"24
v28@0:4@"IDSService"8@"IDSAccount"12@"NSURL"16@"NSString"20@"IDSMessageContext"24
v32@0:4@8@12@16@20@24@28
v32@0:4@"IDSService"8@"IDSAccount"12@"NSURL"16@"NSDictionary"20@"NSString"24@"IDSMessageContext"28
v16@0:4@"IDSService"8@"NSSet"12
v16@0:4@"IDSService"8@"NSArray"12
v28@0:4@8@12@16B20@24
v28@0:4@"IDSService"8@"IDSAccount"12@"NSString"16B20@"NSError"24
v32@0:4@8@12@16B20@24@28
v32@0:4@"IDSService"8@"IDSAccount"12@"NSString"16B20@"NSError"24@"IDSMessageContext"28
v24@0:4@8@12@16@20
v24@0:4@"IDSService"8@"IDSAccount"12@"NSString"16@20
v24@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20@"NSDictionary"24
v28@0:4@"IDSService"8@"IDSAccount"12@"IDSSession"16@"NSString"20@"NSData"24
v12@0:4@"IDSService"8
v20@0:4@"IDSService"8@"IDSDevice"12@?<v@?>16
@"IDSService"
@32@0:4@8@12@16@20d24
@"NSNumber"
v12@0:4@?<v@?^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}>8
v16@0:4@?<v@?^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}>8@?<v@?>12
B12@0:4@?<v@?^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}>8
^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}8@0:4
v12@0:4@"CBCentralManager"8
v16@0:4@"CBCentralManager"8@"NSDictionary"12
v24@0:4@"CBCentralManager"8@"CBPeripheral"12@"NSDictionary"16@"NSNumber"20
v16@0:4@"CBCentralManager"8@"CBPeripheral"12
v20@0:4@"CBCentralManager"8@"CBPeripheral"12@"NSError"16
@12@0:4^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}8
^{CLHomeKitProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLHomeKitProvider_Type::Notification, CLHomeKitProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@@@{vector<CLHomeKitProvider_Type::HomeKitDevice, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}^{HomeKitDevice}{__compressed_pair<CLHomeKitProvider_Type::HomeKitDevice *, std::__1::allocator<CLHomeKitProvider_Type::HomeKitDevice> >=^{HomeKitDevice}}}@@}
{?="confidence"b1"type"b1}
v12@0:4@?<v@?^{CLTelephonyService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFRunLoopTimer}^{__CFRunLoopSource}^vBi^{__CTServerConnection}i}>8
v16@0:4@?<v@?^{CLTelephonyService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFRunLoopTimer}^{__CFRunLoopSource}^vBi^{__CTServerConnection}i}>8@?<v@?>12
B12@0:4@?<v@?^{CLTelephonyService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFRunLoopTimer}^{__CFRunLoopSource}^vBi^{__CTServerConnection}i}>8
v12@0:4@?<v@?B>8
^{CLTelephonyService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTelephonyService_Type::Notification, CLTelephonyService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFRunLoopTimer}^{__CFRunLoopSource}^vBi^{__CTServerConnection}i}8@0:4
@"CRMotionActivity"
v12@0:4@?<v@?^{CLWifiService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFNumber}^{__CFNumber}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}BiiBBI{array<CLMacAddress, 3>=[3{CLMacAddress=Q}]}iI^{__CFRunLoopSource}^v^v^vBddddcd{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}^{__CFArray}^{__CFArray}B{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}@BBBiiiiidi{ScanStats=III[17I]}Bd{map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint> > >={__tree<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true> >=L}}}{map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint> > >={__tree<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true> >=L}}}{map<CLMacAddress, bool, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, bool> > >={__tree<std::__1::__value_type<CLMacAddress, bool>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, bool>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, bool>, std::__1::less<CLMacAddress>, true> >=L}}}iidI^{__CFRunLoopTimer}{BasicMutex=^^?^{MutexInfo}}{unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal> >={__compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal> >=^{IExternal}}}}>8
v16@0:4@?<v@?^{CLWifiService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFNumber}^{__CFNumber}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}BiiBBI{array<CLMacAddress, 3>=[3{CLMacAddress=Q}]}iI^{__CFRunLoopSource}^v^v^vBddddcd{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}^{__CFArray}^{__CFArray}B{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}@BBBiiiiidi{ScanStats=III[17I]}Bd{map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint> > >={__tree<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true> >=L}}}{map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint> > >={__tree<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true> >=L}}}{map<CLMacAddress, bool, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, bool> > >={__tree<std::__1::__value_type<CLMacAddress, bool>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, bool>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, bool>, std::__1::less<CLMacAddress>, true> >=L}}}iidI^{__CFRunLoopTimer}{BasicMutex=^^?^{MutexInfo}}{unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal> >={__compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal> >=^{IExternal}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLWifiService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFNumber}^{__CFNumber}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}BiiBBI{array<CLMacAddress, 3>=[3{CLMacAddress=Q}]}iI^{__CFRunLoopSource}^v^v^vBddddcd{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}^{__CFArray}^{__CFArray}B{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}@BBBiiiiidi{ScanStats=III[17I]}Bd{map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint> > >={__tree<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true> >=L}}}{map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint> > >={__tree<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true> >=L}}}{map<CLMacAddress, bool, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, bool> > >={__tree<std::__1::__value_type<CLMacAddress, bool>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, bool>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, bool>, std::__1::less<CLMacAddress>, true> >=L}}}iidI^{__CFRunLoopTimer}{BasicMutex=^^?^{MutexInfo}}{unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal> >={__compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal> >=^{IExternal}}}}>8
^{CLWifiService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFNumber}^{__CFNumber}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}BiiBBI{array<CLMacAddress, 3>=[3{CLMacAddress=Q}]}iI^{__CFRunLoopSource}^v^v^vBddddcd{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}d{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}^{__CFArray}^{__CFArray}B{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}@BBBiiiiidi{ScanStats=III[17I]}Bd{map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint> > >={__tree<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true> >=L}}}{map<CLMacAddress, CLWifiService_Type::AccessPoint, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLWifiService_Type::AccessPoint> > >={__tree<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, CLWifiService_Type::AccessPoint>, std::__1::less<CLMacAddress>, true> >=L}}}{map<CLMacAddress, bool, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, bool> > >={__tree<std::__1::__value_type<CLMacAddress, bool>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, bool>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, bool>, std::__1::less<CLMacAddress>, true> >=L}}}iidI^{__CFRunLoopTimer}{BasicMutex=^^?^{MutexInfo}}{unique_ptr<CLWifiService::IExternal, std::__1::default_delete<CLWifiService::IExternal> >={__compressed_pair<CLWifiService::IExternal *, std::__1::default_delete<CLWifiService::IExternal> >=^{IExternal}}}}8@0:4
{?="timestamp"b1"recordId"b1"regularEntry"b1}
v12@0:4@?<v@?^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLMotionActivity=iiiiBfdBiddii}BBB{CLMotionActivity=iiiiBfdBiddii}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=L}}@}>8
v16@0:4@?<v@?^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLMotionActivity=iiiiBfdBiddii}BBB{CLMotionActivity=iiiiBfdBiddii}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=L}}@}>8@?<v@?>12
B12@0:4@?<v@?^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLMotionActivity=iiiiBfdBiddii}BBB{CLMotionActivity=iiiiBfdBiddii}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=L}}@}>8
v32@0:4d8d16B24@?28
v32@0:4d8d16B24@?<v@?@"NSMutableArray">28
^{CLMotionState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLMotionActivity=iiiiBfdBiddii}BBB{CLMotionActivity=iiiiBfdBiddii}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=L}}@}8@0:4
v12@0:4@?<v@?^{CLCompanionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBd@B{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}@}>8
v16@0:4@?<v@?^{CLCompanionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBd@B{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}@}>8@?<v@?>12
B12@0:4@?<v@?^{CLCompanionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBd@B{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}@}>8
^{CLCompanionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompanionNotifier_Type::Notification, CLCompanionNotifier_Type::NotificationData, char, CLCompanionNotifier_Type::RegistrationInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBd@B{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}@}8@0:4
v12@0:4@?<v@?^{CLDaemonStatus=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBII^{IONotificationPort}^{__CFRunLoopSource}^{IONotificationPort}^{__CFRunLoopSource}i^{__SCNetworkReachability}^{__SCDynamicStore}^{__CFRunLoopSource}iB{Battery=dBBiB}^v{set<long, std::__1::less<long>, std::__1::allocator<long> >={__tree<long, std::__1::less<long>, std::__1::allocator<long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<long> >=L}}}@B@ld^vBiii^{__SCPreferences}}>8
v16@0:4@?<v@?^{CLDaemonStatus=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBII^{IONotificationPort}^{__CFRunLoopSource}^{IONotificationPort}^{__CFRunLoopSource}i^{__SCNetworkReachability}^{__SCDynamicStore}^{__CFRunLoopSource}iB{Battery=dBBiB}^v{set<long, std::__1::less<long>, std::__1::allocator<long> >={__tree<long, std::__1::less<long>, std::__1::allocator<long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<long> >=L}}}@B@ld^vBiii^{__SCPreferences}}>8@?<v@?>12
B12@0:4@?<v@?^{CLDaemonStatus=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBII^{IONotificationPort}^{__CFRunLoopSource}^{IONotificationPort}^{__CFRunLoopSource}i^{__SCNetworkReachability}^{__SCDynamicStore}^{__CFRunLoopSource}iB{Battery=dBBiB}^v{set<long, std::__1::less<long>, std::__1::allocator<long> >={__tree<long, std::__1::less<long>, std::__1::allocator<long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<long> >=L}}}@B@ld^vBiii^{__SCPreferences}}>8
v12@0:4@?<v@?i>8
^{CLDaemonStatus=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBII^{IONotificationPort}^{__CFRunLoopSource}^{IONotificationPort}^{__CFRunLoopSource}i^{__SCNetworkReachability}^{__SCDynamicStore}^{__CFRunLoopSource}iB{Battery=dBBiB}^v{set<long, std::__1::less<long>, std::__1::allocator<long> >={__tree<long, std::__1::less<long>, std::__1::allocator<long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<long> >=L}}}@B@ld^vBiii^{__SCPreferences}}8@0:4
v12@0:4@"NSCoder"8
@12@0:4@"NSCoder"8
v12@0:4^{CLSwimEntry=Q[16C][16C]ddddddiiiifff}8
@56@0:4I8@12@16@20@24I28d32d40I48i52
@12@0:4r^{CLSwimEntry=Q[16C][16C]ddddddiiiifff}8
@"NSUUID"
@"NSDate"
B32@0:4@8@12@16@20@24@28
@24@0:4@8d12@20
@"CLALSRequester"
@12@0:4^{CLNetworkLocationRequesterALS=^^?{vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell> >=^{Cell}^{Cell}{__compressed_pair<CLTelephonyService_Type::Cell *, std::__1::allocator<CLTelephonyService_Type::Cell> >=^{Cell}}}{vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell> >=^{ScdmaCell}^{ScdmaCell}{__compressed_pair<CLTelephonyService_Type::ScdmaCell *, std::__1::allocator<CLTelephonyService_Type::ScdmaCell> >=^{ScdmaCell}}}{vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell> >=^{CdmaCell}^{CdmaCell}{__compressed_pair<CLTelephonyService_Type::CdmaCell *, std::__1::allocator<CLTelephonyService_Type::CdmaCell> >=^{CdmaCell}}}{vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell> >=^{LteCell}^{LteCell}{__compressed_pair<CLTelephonyService_Type::LteCell *, std::__1::allocator<CLTelephonyService_Type::LteCell> >=^{LteCell}}}{vector<CLMacAddress, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}^{CLMacAddress}{__compressed_pair<CLMacAddress *, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}}}{Listener=^v@^?^?^?^?^?^?^?^?^?^?^?^?^?^?}ii@@Bi^{__CFString}^{__CFString}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}8
v36@0:4@8{_NSRange=II}12d20i28i32
^{CLNetworkLocationRequesterALS=^^?{vector<CLTelephonyService_Type::Cell, std::__1::allocator<CLTelephonyService_Type::Cell> >=^{Cell}^{Cell}{__compressed_pair<CLTelephonyService_Type::Cell *, std::__1::allocator<CLTelephonyService_Type::Cell> >=^{Cell}}}{vector<CLTelephonyService_Type::ScdmaCell, std::__1::allocator<CLTelephonyService_Type::ScdmaCell> >=^{ScdmaCell}^{ScdmaCell}{__compressed_pair<CLTelephonyService_Type::ScdmaCell *, std::__1::allocator<CLTelephonyService_Type::ScdmaCell> >=^{ScdmaCell}}}{vector<CLTelephonyService_Type::CdmaCell, std::__1::allocator<CLTelephonyService_Type::CdmaCell> >=^{CdmaCell}^{CdmaCell}{__compressed_pair<CLTelephonyService_Type::CdmaCell *, std::__1::allocator<CLTelephonyService_Type::CdmaCell> >=^{CdmaCell}}}{vector<CLTelephonyService_Type::LteCell, std::__1::allocator<CLTelephonyService_Type::LteCell> >=^{LteCell}^{LteCell}{__compressed_pair<CLTelephonyService_Type::LteCell *, std::__1::allocator<CLTelephonyService_Type::LteCell> >=^{LteCell}}}{vector<CLMacAddress, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}^{CLMacAddress}{__compressed_pair<CLMacAddress *, std::__1::allocator<CLMacAddress> >=^{CLMacAddress}}}{Listener=^v@^?^?^?^?^?^?^?^?^?^?^?^?^?^?}ii@@Bi^{__CFString}^{__CFString}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}
v12@0:4@?<v@?^{CLTimeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBiid}>8
v16@0:4@?<v@?^{CLTimeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBiid}>8@?<v@?>12
B12@0:4@?<v@?^{CLTimeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBiid}>8
^{CLTimeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTimeManager_Type::Notification, CLTimeManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBiid}8@0:4
v12@0:4@?<v@?^{CLLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{CLDistanceCalc=ddddd}cc{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}BdII{map<unsigned long, CLLocationController::ProviderClient, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CLLocationController::ProviderClient> > >={__tree<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::less<unsigned long>, true> >=L}}}{map<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<unsigned long>, true> >=L}}}{CLLocationFilterController={CLIntegrityMonitor={CLDistanceCalc=ddddd}{MotionInfo=dii}{MotionInfo=dii}{deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >={__split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}^^{MotionInfo}^^{MotionInfo}{__compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{IM_AllSources={IMPara=BBBdd}{IMPara=BBBdd}{IMPara=BBBdd}i}}@{CLDualModeKalmanFilter=^^?{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLDistanceCalc=ddddd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{CLMapMatchingEngine}{unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine> >={__compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine> >=^{CLOutdoorMatchingEngine}}}BBBB{CLVehicleSpeedFilter={SpeedAndTime=dd}{SpeedAndTime=dd}{SpeedAndTime=dd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dddddBB{MapMatcherNetworkUsage=iiiBBBBi}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >={__compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}IIIIIII@^{__CFRunLoopTimer}^{__CFRunLoopTimer}BBBBBBBBd^{__CFRunLoopSource}^{__CFRunLoopSource}B{unique_ptr<CLRavenEstimator, std::__1::default_delete<CLRavenEstimator> >={__compressed_pair<CLRavenEstimator *, std::__1::default_delete<CLRavenEstimator> >=^{CLRavenEstimator}}}BB[8{StateTransition=*Bd}]d{PropagationDataHistory={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dd}}>8
v16@0:4@?<v@?^{CLLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{CLDistanceCalc=ddddd}cc{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}BdII{map<unsigned long, CLLocationController::ProviderClient, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CLLocationController::ProviderClient> > >={__tree<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::less<unsigned long>, true> >=L}}}{map<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<unsigned long>, true> >=L}}}{CLLocationFilterController={CLIntegrityMonitor={CLDistanceCalc=ddddd}{MotionInfo=dii}{MotionInfo=dii}{deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >={__split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}^^{MotionInfo}^^{MotionInfo}{__compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{IM_AllSources={IMPara=BBBdd}{IMPara=BBBdd}{IMPara=BBBdd}i}}@{CLDualModeKalmanFilter=^^?{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLDistanceCalc=ddddd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{CLMapMatchingEngine}{unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine> >={__compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine> >=^{CLOutdoorMatchingEngine}}}BBBB{CLVehicleSpeedFilter={SpeedAndTime=dd}{SpeedAndTime=dd}{SpeedAndTime=dd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dddddBB{MapMatcherNetworkUsage=iiiBBBBi}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >={__compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}IIIIIII@^{__CFRunLoopTimer}^{__CFRunLoopTimer}BBBBBBBBd^{__CFRunLoopSource}^{__CFRunLoopSource}B{unique_ptr<CLRavenEstimator, std::__1::default_delete<CLRavenEstimator> >={__compressed_pair<CLRavenEstimator *, std::__1::default_delete<CLRavenEstimator> >=^{CLRavenEstimator}}}BB[8{StateTransition=*Bd}]d{PropagationDataHistory={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dd}}>8@?<v@?>12
B12@0:4@?<v@?^{CLLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{CLDistanceCalc=ddddd}cc{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}BdII{map<unsigned long, CLLocationController::ProviderClient, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CLLocationController::ProviderClient> > >={__tree<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::less<unsigned long>, true> >=L}}}{map<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<unsigned long>, true> >=L}}}{CLLocationFilterController={CLIntegrityMonitor={CLDistanceCalc=ddddd}{MotionInfo=dii}{MotionInfo=dii}{deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >={__split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}^^{MotionInfo}^^{MotionInfo}{__compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{IM_AllSources={IMPara=BBBdd}{IMPara=BBBdd}{IMPara=BBBdd}i}}@{CLDualModeKalmanFilter=^^?{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLDistanceCalc=ddddd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{CLMapMatchingEngine}{unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine> >={__compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine> >=^{CLOutdoorMatchingEngine}}}BBBB{CLVehicleSpeedFilter={SpeedAndTime=dd}{SpeedAndTime=dd}{SpeedAndTime=dd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dddddBB{MapMatcherNetworkUsage=iiiBBBBi}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >={__compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}IIIIIII@^{__CFRunLoopTimer}^{__CFRunLoopTimer}BBBBBBBBd^{__CFRunLoopSource}^{__CFRunLoopSource}B{unique_ptr<CLRavenEstimator, std::__1::default_delete<CLRavenEstimator> >={__compressed_pair<CLRavenEstimator *, std::__1::default_delete<CLRavenEstimator> >=^{CLRavenEstimator}}}BB[8{StateTransition=*Bd}]d{PropagationDataHistory={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dd}}>8
^{CLLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{CLDistanceCalc=ddddd}cc{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}BdII{map<unsigned long, CLLocationController::ProviderClient, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, CLLocationController::ProviderClient> > >={__tree<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, CLLocationController::ProviderClient>, std::__1::less<unsigned long>, true> >=L}}}{map<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::unique_ptr<CLLocationProvider_Type::Client, std::__1::default_delete<CLLocationProvider_Type::Client> > >, std::__1::less<unsigned long>, true> >=L}}}{CLLocationFilterController={CLIntegrityMonitor={CLDistanceCalc=ddddd}{MotionInfo=dii}{MotionInfo=dii}{deque<CLIntegrityMonitor::MotionInfo, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >={__split_buffer<CLIntegrityMonitor::MotionInfo *, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}^^{MotionInfo}^^{MotionInfo}{__compressed_pair<CLIntegrityMonitor::MotionInfo **, std::__1::allocator<CLIntegrityMonitor::MotionInfo *> >=^^{MotionInfo}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLIntegrityMonitor::MotionInfo> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{deque<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__split_buffer<CLDaemonLocation *, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}^^{CLDaemonLocation}^^{CLDaemonLocation}{__compressed_pair<CLDaemonLocation **, std::__1::allocator<CLDaemonLocation *> >=^^{CLDaemonLocation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLDaemonLocation> >=L}}{IM_AllSources={IMPara=BBBdd}{IMPara=BBBdd}{IMPara=BBBdd}i}}@{CLDualModeKalmanFilter=^^?{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLKalmanFilter=^^?{KalmanParameters=^^?{KalmanTuningInfo=^^?ddddBf}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}ddddddddBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBi{altFilterData=ff}B{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}}ii{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}{KalmanTuningInfo=^^?ddddBf}BB{CLDistanceCalc=ddddd}}{CLDistanceCalc=ddddd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{CLMapMatchingEngine}{unique_ptr<CLOutdoorMatchingEngine, std::__1::default_delete<CLOutdoorMatchingEngine> >={__compressed_pair<CLOutdoorMatchingEngine *, std::__1::default_delete<CLOutdoorMatchingEngine> >=^{CLOutdoorMatchingEngine}}}BBBB{CLVehicleSpeedFilter={SpeedAndTime=dd}{SpeedAndTime=dd}{SpeedAndTime=dd}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dddddBB{MapMatcherNetworkUsage=iiiBBBBi}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLSignalEnvironmentProvider_Type::Client, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >={__compressed_pair<CLSignalEnvironmentProvider_Type::Client *, std::__1::default_delete<CLSignalEnvironmentProvider_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}IIIIIII@^{__CFRunLoopTimer}^{__CFRunLoopTimer}BBBBBBBBd^{__CFRunLoopSource}^{__CFRunLoopSource}B{unique_ptr<CLRavenEstimator, std::__1::default_delete<CLRavenEstimator> >={__compressed_pair<CLRavenEstimator *, std::__1::default_delete<CLRavenEstimator> >=^{CLRavenEstimator}}}BB[8{StateTransition=*Bd}]d{PropagationDataHistory={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}dd}}8@0:4
v12@0:4@?<v@?^{CLWifiLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{unique_ptr<CLWifiLocationProvider::IExternal, std::__1::default_delete<CLWifiLocationProvider::IExternal> >={__compressed_pair<CLWifiLocationProvider::IExternal *, std::__1::default_delete<CLWifiLocationProvider::IExternal> >=^{IExternal}}}{WifiLocationState={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iiddddd{map<CLWifiService_Type::AccessPoint, CLWifiAPLocation, std::__1::less<CLWifiService_Type::AccessPoint>, std::__1::allocator<std::__1::pair<const CLWifiService_Type::AccessPoint, CLWifiAPLocation> > >={__tree<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::__map_value_compare<CLWifiService_Type::AccessPoint, std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::less<CLWifiService_Type::AccessPoint>, true>, std::__1::allocator<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLWifiService_Type::AccessPoint, std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::less<CLWifiService_Type::AccessPoint>, true> >=L}}}{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}di{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLWifiLocationUpdateRequest=iBdiB}ii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}IIiBddddddd}i^{__CFRunLoopTimer}dBB{vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}{__compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > *, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}}}{set<CLMacAddress, std::__1::less<CLMacAddress>, std::__1::allocator<CLMacAddress> >={__tree<CLMacAddress, std::__1::less<CLMacAddress>, std::__1::allocator<CLMacAddress> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMacAddress, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMacAddress> >=L}}}id@B{CLDistanceCalc=ddddd}BB{CLMotionActivity=iiiiBfdBiddii}BBddi{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{optional<CLWifiAPLocation>=(?=c{CLWifiAPLocation={CLMacAddress=Q}dddddiiIdiidB{RuntimeMetadata=B}})B}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLProcessWifiScanResults::IExternal, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >={__compressed_pair<CLProcessWifiScanResults::IExternal *, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >=^{IExternal}}}{CLProcessWifiScanResults={unique_ptr<CLProcessWifiScanResults::IExternal, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >={__compressed_pair<CLProcessWifiScanResults::IExternal *, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >=^{IExternal}}}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}B}>8
v16@0:4@?<v@?^{CLWifiLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{unique_ptr<CLWifiLocationProvider::IExternal, std::__1::default_delete<CLWifiLocationProvider::IExternal> >={__compressed_pair<CLWifiLocationProvider::IExternal *, std::__1::default_delete<CLWifiLocationProvider::IExternal> >=^{IExternal}}}{WifiLocationState={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iiddddd{map<CLWifiService_Type::AccessPoint, CLWifiAPLocation, std::__1::less<CLWifiService_Type::AccessPoint>, std::__1::allocator<std::__1::pair<const CLWifiService_Type::AccessPoint, CLWifiAPLocation> > >={__tree<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::__map_value_compare<CLWifiService_Type::AccessPoint, std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::less<CLWifiService_Type::AccessPoint>, true>, std::__1::allocator<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLWifiService_Type::AccessPoint, std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::less<CLWifiService_Type::AccessPoint>, true> >=L}}}{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}di{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLWifiLocationUpdateRequest=iBdiB}ii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}IIiBddddddd}i^{__CFRunLoopTimer}dBB{vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}{__compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > *, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}}}{set<CLMacAddress, std::__1::less<CLMacAddress>, std::__1::allocator<CLMacAddress> >={__tree<CLMacAddress, std::__1::less<CLMacAddress>, std::__1::allocator<CLMacAddress> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMacAddress, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMacAddress> >=L}}}id@B{CLDistanceCalc=ddddd}BB{CLMotionActivity=iiiiBfdBiddii}BBddi{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{optional<CLWifiAPLocation>=(?=c{CLWifiAPLocation={CLMacAddress=Q}dddddiiIdiidB{RuntimeMetadata=B}})B}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLProcessWifiScanResults::IExternal, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >={__compressed_pair<CLProcessWifiScanResults::IExternal *, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >=^{IExternal}}}{CLProcessWifiScanResults={unique_ptr<CLProcessWifiScanResults::IExternal, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >={__compressed_pair<CLProcessWifiScanResults::IExternal *, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >=^{IExternal}}}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}B}>8@?<v@?>12
B12@0:4@?<v@?^{CLWifiLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{unique_ptr<CLWifiLocationProvider::IExternal, std::__1::default_delete<CLWifiLocationProvider::IExternal> >={__compressed_pair<CLWifiLocationProvider::IExternal *, std::__1::default_delete<CLWifiLocationProvider::IExternal> >=^{IExternal}}}{WifiLocationState={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iiddddd{map<CLWifiService_Type::AccessPoint, CLWifiAPLocation, std::__1::less<CLWifiService_Type::AccessPoint>, std::__1::allocator<std::__1::pair<const CLWifiService_Type::AccessPoint, CLWifiAPLocation> > >={__tree<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::__map_value_compare<CLWifiService_Type::AccessPoint, std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::less<CLWifiService_Type::AccessPoint>, true>, std::__1::allocator<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLWifiService_Type::AccessPoint, std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::less<CLWifiService_Type::AccessPoint>, true> >=L}}}{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}di{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLWifiLocationUpdateRequest=iBdiB}ii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}IIiBddddddd}i^{__CFRunLoopTimer}dBB{vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}{__compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > *, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}}}{set<CLMacAddress, std::__1::less<CLMacAddress>, std::__1::allocator<CLMacAddress> >={__tree<CLMacAddress, std::__1::less<CLMacAddress>, std::__1::allocator<CLMacAddress> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMacAddress, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMacAddress> >=L}}}id@B{CLDistanceCalc=ddddd}BB{CLMotionActivity=iiiiBfdBiddii}BBddi{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{optional<CLWifiAPLocation>=(?=c{CLWifiAPLocation={CLMacAddress=Q}dddddiiIdiidB{RuntimeMetadata=B}})B}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLProcessWifiScanResults::IExternal, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >={__compressed_pair<CLProcessWifiScanResults::IExternal *, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >=^{IExternal}}}{CLProcessWifiScanResults={unique_ptr<CLProcessWifiScanResults::IExternal, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >={__compressed_pair<CLProcessWifiScanResults::IExternal *, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >=^{IExternal}}}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}B}>8
^{CLWifiLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{unique_ptr<CLWifiLocationProvider::IExternal, std::__1::default_delete<CLWifiLocationProvider::IExternal> >={__compressed_pair<CLWifiLocationProvider::IExternal *, std::__1::default_delete<CLWifiLocationProvider::IExternal> >=^{IExternal}}}{WifiLocationState={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iiddddd{map<CLWifiService_Type::AccessPoint, CLWifiAPLocation, std::__1::less<CLWifiService_Type::AccessPoint>, std::__1::allocator<std::__1::pair<const CLWifiService_Type::AccessPoint, CLWifiAPLocation> > >={__tree<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::__map_value_compare<CLWifiService_Type::AccessPoint, std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::less<CLWifiService_Type::AccessPoint>, true>, std::__1::allocator<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLWifiService_Type::AccessPoint, std::__1::__value_type<CLWifiService_Type::AccessPoint, CLWifiAPLocation>, std::__1::less<CLWifiService_Type::AccessPoint>, true> >=L}}}{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}di{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLWifiLocationUpdateRequest=iBdiB}ii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}IIiBddddddd}i^{__CFRunLoopTimer}dBB{vector<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}{__compressed_pair<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > *, std::__1::allocator<std::__1::vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> > > >=^{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >}}}{set<CLMacAddress, std::__1::less<CLMacAddress>, std::__1::allocator<CLMacAddress> >={__tree<CLMacAddress, std::__1::less<CLMacAddress>, std::__1::allocator<CLMacAddress> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLMacAddress, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLMacAddress> >=L}}}id@B{CLDistanceCalc=ddddd}BB{CLMotionActivity=iiiiBfdBiddii}BBddi{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{optional<CLWifiAPLocation>=(?=c{CLWifiAPLocation={CLMacAddress=Q}dddddiiIdiidB{RuntimeMetadata=B}})B}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLProcessWifiScanResults::IExternal, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >={__compressed_pair<CLProcessWifiScanResults::IExternal *, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >=^{IExternal}}}{CLProcessWifiScanResults={unique_ptr<CLProcessWifiScanResults::IExternal, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >={__compressed_pair<CLProcessWifiScanResults::IExternal *, std::__1::default_delete<CLProcessWifiScanResults::IExternal> >=^{IExternal}}}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}B}8@0:4
v12@0:4@?<v@?^{CLMotionStateMediator=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB{CLCalorieActivityFilter={CLMotionActivity=iiiiBfdBiddii}{CLMotionActivity=iiiiBfdBiddii}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=L}}}B{CLWorkoutManager={WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}i}{CLBodyMetrics=iffffffffif}^{Dispatcher}^{Dispatcher}^{Dispatcher}@{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>8
v16@0:4@?<v@?^{CLMotionStateMediator=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB{CLCalorieActivityFilter={CLMotionActivity=iiiiBfdBiddii}{CLMotionActivity=iiiiBfdBiddii}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=L}}}B{CLWorkoutManager={WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}i}{CLBodyMetrics=iffffffffif}^{Dispatcher}^{Dispatcher}^{Dispatcher}@{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLMotionStateMediator=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB{CLCalorieActivityFilter={CLMotionActivity=iiiiBfdBiddii}{CLMotionActivity=iiiiBfdBiddii}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=L}}}B{CLWorkoutManager={WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}i}{CLBodyMetrics=iffffffffif}^{Dispatcher}^{Dispatcher}^{Dispatcher}@{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>8
v16@0:4R@"<CLMotionStateMediatorClientProtocol>"8i12
^{CLMotionStateMediator=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateMediator_Type::Notification, CLMotionStateMediator_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB{CLCalorieActivityFilter={CLMotionActivity=iiiiBfdBiddii}{CLMotionActivity=iiiiBfdBiddii}{list<CLMotionActivity, std::__1::allocator<CLMotionActivity> >={__list_node_base<CLMotionActivity, void *>=^{__list_node_base<CLMotionActivity, void *>}^{__list_node_base<CLMotionActivity, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLMotionActivity, void *> > >=L}}}B{CLWorkoutManager={WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}i}{CLBodyMetrics=iffffffffif}^{Dispatcher}^{Dispatcher}^{Dispatcher}@{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}8@0:4
^{CLLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB}8@0:4
v12@0:4@?<v@?^{CLNmeaLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?^{CLDataSource}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}ddd}>8
v16@0:4@?<v@?^{CLNmeaLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?^{CLDataSource}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}ddd}>8@?<v@?>12
B12@0:4@?<v@?^{CLNmeaLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?^{CLDataSource}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}ddd}>8
^{CLNmeaLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?^{CLDataSource}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}ddd}8@0:4
v12@0:4@?<v@?^{CLNetworkLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal> >={__compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal> >=^{CLINetworkLocationProviderExternal}}}B{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true> >=L}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true> >=L}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true> >=L}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true> >=L}}}idddii{map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >={__tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true> >=L}}}B^{CLNetworkLocationRequester}BBBB{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{__CFRunLoopTimer}iB^{CLPersistentTimer}dddiiiii{set<CLNetworkLocationProvider::ServerResponseListener *, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *>, std::__1::allocator<CLNetworkLocationProvider::ServerResponseListener *> >={__tree<CLNetworkLocationProvider::ServerResponseListener *, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *>, std::__1::allocator<CLNetworkLocationProvider::ServerResponseListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationProvider::ServerResponseListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *> >=L}}}i{CLDistanceCalc=ddddd}BB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}>8
v16@0:4@?<v@?^{CLNetworkLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal> >={__compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal> >=^{CLINetworkLocationProviderExternal}}}B{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true> >=L}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true> >=L}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true> >=L}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true> >=L}}}idddii{map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >={__tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true> >=L}}}B^{CLNetworkLocationRequester}BBBB{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{__CFRunLoopTimer}iB^{CLPersistentTimer}dddiiiii{set<CLNetworkLocationProvider::ServerResponseListener *, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *>, std::__1::allocator<CLNetworkLocationProvider::ServerResponseListener *> >={__tree<CLNetworkLocationProvider::ServerResponseListener *, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *>, std::__1::allocator<CLNetworkLocationProvider::ServerResponseListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationProvider::ServerResponseListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *> >=L}}}i{CLDistanceCalc=ddddd}BB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLNetworkLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal> >={__compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal> >=^{CLINetworkLocationProviderExternal}}}B{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true> >=L}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true> >=L}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true> >=L}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true> >=L}}}idddii{map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >={__tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true> >=L}}}B^{CLNetworkLocationRequester}BBBB{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{__CFRunLoopTimer}iB^{CLPersistentTimer}dddiiiii{set<CLNetworkLocationProvider::ServerResponseListener *, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *>, std::__1::allocator<CLNetworkLocationProvider::ServerResponseListener *> >={__tree<CLNetworkLocationProvider::ServerResponseListener *, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *>, std::__1::allocator<CLNetworkLocationProvider::ServerResponseListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationProvider::ServerResponseListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *> >=L}}}i{CLDistanceCalc=ddddd}BB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}>8
^{CLNetworkLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNetworkLocationProvider_Type::Notification, CLNetworkLocationProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLINetworkLocationProviderExternal, std::__1::default_delete<CLINetworkLocationProviderExternal> >={__compressed_pair<CLINetworkLocationProviderExternal *, std::__1::default_delete<CLINetworkLocationProviderExternal> >=^{CLINetworkLocationProviderExternal}}}B{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::Cell, double, std::__1::less<CLTelephonyService_Type::Cell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::Cell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::Cell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::Cell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::Cell, std::__1::__value_type<CLTelephonyService_Type::Cell, double>, std::__1::less<CLTelephonyService_Type::Cell>, true> >=L}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{unique_ptr<CLCellEncryptedLocationDatabase, std::__1::default_delete<CLCellEncryptedLocationDatabase> >={__compressed_pair<CLCellEncryptedLocationDatabase *, std::__1::default_delete<CLCellEncryptedLocationDatabase> >=^{CLCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::ScdmaCell, double, std::__1::less<CLTelephonyService_Type::ScdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::ScdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::ScdmaCell, std::__1::__value_type<CLTelephonyService_Type::ScdmaCell, double>, std::__1::less<CLTelephonyService_Type::ScdmaCell>, true> >=L}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{unique_ptr<CLCdmaCellEncryptedLocationDatabase, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >={__compressed_pair<CLCdmaCellEncryptedLocationDatabase *, std::__1::default_delete<CLCdmaCellEncryptedLocationDatabase> >=^{CLCdmaCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::CdmaCell, double, std::__1::less<CLTelephonyService_Type::CdmaCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::CdmaCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::CdmaCell, std::__1::__value_type<CLTelephonyService_Type::CdmaCell, double>, std::__1::less<CLTelephonyService_Type::CdmaCell>, true> >=L}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{unique_ptr<CLLteCellEncryptedLocationDatabase, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >={__compressed_pair<CLLteCellEncryptedLocationDatabase *, std::__1::default_delete<CLLteCellEncryptedLocationDatabase> >=^{CLLteCellEncryptedLocationDatabase}}}{map<CLTelephonyService_Type::LteCell, double, std::__1::less<CLTelephonyService_Type::LteCell>, std::__1::allocator<std::__1::pair<const CLTelephonyService_Type::LteCell, double> > >={__tree<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true>, std::__1::allocator<std::__1::__value_type<CLTelephonyService_Type::LteCell, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLTelephonyService_Type::LteCell, std::__1::__value_type<CLTelephonyService_Type::LteCell, double>, std::__1::less<CLTelephonyService_Type::LteCell>, true> >=L}}}idddii{map<CLMacAddress, double, std::__1::less<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, double> > >={__tree<std::__1::__value_type<CLMacAddress, double>, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true>, std::__1::allocator<std::__1::__value_type<CLMacAddress, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLMacAddress, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLMacAddress, std::__1::__value_type<CLMacAddress, double>, std::__1::less<CLMacAddress>, true> >=L}}}B^{CLNetworkLocationRequester}BBBB{CLPowerAssertion=^^?i^v^{__CFString}dd@}^{__CFRunLoopTimer}iB^{CLPersistentTimer}dddiiiii{set<CLNetworkLocationProvider::ServerResponseListener *, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *>, std::__1::allocator<CLNetworkLocationProvider::ServerResponseListener *> >={__tree<CLNetworkLocationProvider::ServerResponseListener *, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *>, std::__1::allocator<CLNetworkLocationProvider::ServerResponseListener *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLNetworkLocationProvider::ServerResponseListener *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLNetworkLocationProvider::ServerResponseListener *> >=L}}}i{CLDistanceCalc=ddddd}BB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}8@0:4
v12@0:4@?<v@?^{CLAccessoryLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFRunLoopTimer}{CLAccessoryHeadingCorrector=iddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client> >={__compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client> >=^{Client}}}BBB{GgaRmcInfo=iB}dddiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB}>8
v16@0:4@?<v@?^{CLAccessoryLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFRunLoopTimer}{CLAccessoryHeadingCorrector=iddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client> >={__compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client> >=^{Client}}}BBB{GgaRmcInfo=iB}dddiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB}>8@?<v@?>12
B12@0:4@?<v@?^{CLAccessoryLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFRunLoopTimer}{CLAccessoryHeadingCorrector=iddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client> >={__compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client> >=^{Client}}}BBB{GgaRmcInfo=iB}dddiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB}>8
^{CLAccessoryLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFRunLoopTimer}{CLAccessoryHeadingCorrector=iddddd}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTimeManager_Type::Client, std::__1::default_delete<CLTimeManager_Type::Client> >={__compressed_pair<CLTimeManager_Type::Client *, std::__1::default_delete<CLTimeManager_Type::Client> >=^{Client}}}BBB{GgaRmcInfo=iB}dddiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB}8@0:4
v12@0:4@?<v@?^{CLFilteredLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{CLDistanceCalc=ddddd}{unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >={__compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{CLLastConfidentLocation={unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client> >={__compressed_pair<CLCachedLocationController_Type::Client *, std::__1::default_delete<CLCachedLocationController_Type::Client> >=^{Client}}}@^{INotifier}B{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}^{__CFRunLoopTimer}dd{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{?=d^{__CFDate}}}>8
v16@0:4@?<v@?^{CLFilteredLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{CLDistanceCalc=ddddd}{unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >={__compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{CLLastConfidentLocation={unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client> >={__compressed_pair<CLCachedLocationController_Type::Client *, std::__1::default_delete<CLCachedLocationController_Type::Client> >=^{Client}}}@^{INotifier}B{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}^{__CFRunLoopTimer}dd{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{?=d^{__CFDate}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLFilteredLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{CLDistanceCalc=ddddd}{unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >={__compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{CLLastConfidentLocation={unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client> >={__compressed_pair<CLCachedLocationController_Type::Client *, std::__1::default_delete<CLCachedLocationController_Type::Client> >=^{Client}}}@^{INotifier}B{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}^{__CFRunLoopTimer}dd{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{?=d^{__CFDate}}}>8
^{CLFilteredLocationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{CLDistanceCalc=ddddd}{unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >={__compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{CLLastConfidentLocation={unique_ptr<CLCachedLocationController_Type::Client, std::__1::default_delete<CLCachedLocationController_Type::Client> >={__compressed_pair<CLCachedLocationController_Type::Client *, std::__1::default_delete<CLCachedLocationController_Type::Client> >=^{Client}}}@^{INotifier}B{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}I}^{__CFRunLoopTimer}dd{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{?=d^{__CFDate}}}8@0:4
v12@0:4@?<v@?^{CLOperatorSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
v16@0:4@?<v@?^{CLOperatorSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8@?<v@?>12
B12@0:4@?<v@?^{CLOperatorSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
^{CLOperatorSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOperatorSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}8@0:4
@24@0:4d8i16@20
{?="generationTimeSecs"b1"expirationAgeSecs"b1"version"b1}
{?="altitude"b1"context"b1"course"b1"floor"b1"motionActivityConfidence"b1"motionActivityType"b1"provider"b1"speed"b1"verticalAccuracy"b1"motionVehicleConnected"b1"motionVehicleConnectedStateChanged"b1}
{?="mcc"b1"mnc"b1"rat"b1}
@"CRQuaternion"
{?="timestamp"b1"magneticAccuracy"b1"magneticCalibration"b1}
{?="submissionId"b1}
{?="scanTimestamp"b1"hidden"b1"serverHash"b1}
@32@0:4I8@12@16@20I24I28
{?="startTime"b1"firstCatherine"b1"firstCatherineStartTime"b1"longestDropout"b1"maxGoodCatherine"b1"meanCatherine"b1"meanGoodCatherine"b1"minGoodCatherine"b1"nCatherine"b1"nDropout"b1"nGoodCatherine"b1"nHighCatherine"b1"nInterpolatedCatherine"b1"nLowCatherine"b1"nSampleAndHoldCatherine"b1"nVeryHighCatherine"b1"nVeryLowCatherine"b1"onsetCatherine"b1"onsetReason"b1"persistedMinHR"b1"totalDropoutTime"b1"userMaxCatherine"b1}
{?="timestamp"b1"metsHR"b1"metsWR"b1"recordId"b1}
@72@0:4{CLMotionActivity=iiiiBfdBiddii}8
v20@0:4@"PBRequester"8@"PBCodable"12@"PBRequest"16
v12@0:4@"PBRequester"8
v16@0:4@"PBRequester"8@"NSError"12
@16@0:4^{CLCollectionRequester=^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?{weak_ptr<CLCollectionRequester>=^{CLCollectionRequester}^{__shared_weak_count}}@{Listener=^v^?^?^?}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}B{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}@@@@@@@@@@@@@@@@@@@@@@@@@@@^{__CFString}^{__CFString}@i@B@}8i12
^{CLCollectionRequester=^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?^^?{weak_ptr<CLCollectionRequester>=^{CLCollectionRequester}^{__shared_weak_count}}@{Listener=^v^?^?^?}@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}B{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}@@@@@@@@@@@@@@@@@@@@@@@@@@@^{__CFString}^{__CFString}@i@B@}
@32@0:4d8d16i24B28
{?="age"b1"serverHash"b1}
v20@0:4@8i12B16
v20@0:4@"CLNotifierData"8i12B16
v16@0:4@"CLNotifierData"8B12
v172@0:4{?=ii{?=dd}ddddddddddidi{?=dd}diIii}8@?168
v172@0:4{?=ii{?=dd}ddddddddddidi{?=dd}diIii}8@?<v@?{?=ii{?=dd}ddddddddddidi{?=dd}diIii}>168
v12@0:4@?<v@?^{CLClientManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client> >={__compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}B@{map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *> > >={__tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true> >=L}}}@{unordered_multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}i{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=L}}}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=L}}}iB^{CLConnectionServer}{map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *> > >={__tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true> >=L}}}@i{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector<CLClientManager::DaemonAppCoupling, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}^{DaemonAppCoupling}{__compressed_pair<CLClientManager::DaemonAppCoupling *, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}}}{vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}^{ImproveAccuracyNotification}{__compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}}}BBBBii{unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name> >={__compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name> >=^{Name}}}@B@@{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}d{map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}@@@@}>8
v16@0:4@?<v@?^{CLClientManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client> >={__compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}B@{map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *> > >={__tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true> >=L}}}@{unordered_multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}i{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=L}}}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=L}}}iB^{CLConnectionServer}{map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *> > >={__tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true> >=L}}}@i{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector<CLClientManager::DaemonAppCoupling, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}^{DaemonAppCoupling}{__compressed_pair<CLClientManager::DaemonAppCoupling *, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}}}{vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}^{ImproveAccuracyNotification}{__compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}}}BBBBii{unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name> >={__compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name> >=^{Name}}}@B@@{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}d{map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}@@@@}>8@?<v@?>12
B12@0:4@?<v@?^{CLClientManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client> >={__compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}B@{map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *> > >={__tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true> >=L}}}@{unordered_multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}i{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=L}}}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=L}}}iB^{CLConnectionServer}{map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *> > >={__tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true> >=L}}}@i{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector<CLClientManager::DaemonAppCoupling, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}^{DaemonAppCoupling}{__compressed_pair<CLClientManager::DaemonAppCoupling *, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}}}{vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}^{ImproveAccuracyNotification}{__compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}}}BBBBii{unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name> >={__compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name> >=^{Name}}}@B@@{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}d{map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}@@@@}>8
^{CLClientManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLClientManager_Type::Notification, CLClientManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCarrierSettings_Type::Client, std::__1::default_delete<CLCarrierSettings_Type::Client> >={__compressed_pair<CLCarrierSettings_Type::Client *, std::__1::default_delete<CLCarrierSettings_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}B@{map<CLDaemonClient *, __CFUserNotification *, std::__1::less<CLDaemonClient *>, std::__1::allocator<std::__1::pair<CLDaemonClient *const, __CFUserNotification *> > >={__tree<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true>, std::__1::allocator<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLDaemonClient *, std::__1::__value_type<CLDaemonClient *, __CFUserNotification *>, std::__1::less<CLDaemonClient *>, true> >=L}}}@{unordered_multimap<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}i{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=L}}}{set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >={__tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::basic_string<char> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char> > >=L}}}iB^{CLConnectionServer}{map<CLConnection *, CLDaemonClient *, std::__1::less<CLConnection *>, std::__1::allocator<std::__1::pair<CLConnection *const, CLDaemonClient *> > >={__tree<std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true>, std::__1::allocator<std::__1::__value_type<CLConnection *, CLDaemonClient *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLConnection *, CLDaemonClient *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLConnection *, std::__1::__value_type<CLConnection *, CLDaemonClient *>, std::__1::less<CLConnection *>, true> >=L}}}@i{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{vector<CLClientManager::DaemonAppCoupling, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}^{DaemonAppCoupling}{__compressed_pair<CLClientManager::DaemonAppCoupling *, std::__1::allocator<CLClientManager::DaemonAppCoupling> >=^{DaemonAppCoupling}}}{vector<CLClientManager::ImproveAccuracyNotification, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}^{ImproveAccuracyNotification}{__compressed_pair<CLClientManager::ImproveAccuracyNotification *, std::__1::allocator<CLClientManager::ImproveAccuracyNotification> >=^{ImproveAccuracyNotification}}}BBBBii{unique_ptr<CLClientManager_Type::Name, std::__1::default_delete<CLClientManager_Type::Name> >={__compressed_pair<CLClientManager_Type::Name *, std::__1::default_delete<CLClientManager_Type::Name> >=^{Name}}}@B@@{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}d{map<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> > >, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}@@@@}8@0:4
{CLMotionActivity="type"i"confidence"i"mountedState"i"mountedConfidence"i"isStanding"B"tilt"f"timestamp"d"isVehicleConnected"B"exitState"i"estExitTime"d"startTime"d"rawType"i"rawConfidence"i}
v12@0:4@?<v@?^{CLCarrierSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}}>8
v16@0:4@?<v@?^{CLCarrierSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLCarrierSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}}>8
^{CLCarrierSettings=^^?^{__CFDictionary}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFString}^{__CFString}IIB{OtherPrefs=^^?^{__CFDictionary}}{OtherPrefs=^^?^{__CFDictionary}}^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCarrierSettings_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}}8@0:4
{?="firstStepTime"b1"timestamp"b1"activeTime"b1"distance"b1"floorsAscended"b1"floorsDescended"b1"numberOfSteps"b1}
@"CRWifiLocation"
v12@0:4@?<v@?^{CLWatchOrientationSettingsNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLGizmoOrientation=ii}}>8
v16@0:4@?<v@?^{CLWatchOrientationSettingsNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLGizmoOrientation=ii}}>8@?<v@?>12
B12@0:4@?<v@?^{CLWatchOrientationSettingsNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLGizmoOrientation=ii}}>8
^{CLWatchOrientationSettingsNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWatchOrientationSettingsNotifier_Type::Notification, CLWatchOrientationSettingsNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLGizmoOrientation=ii}}8@0:4
v12@0:4@"NSURL"8
v12@0:4@?<v@?@"NSArray"@"NSError">8
B20@0:4@8@12@16
B20@0:4@"NSFileManager"8@"NSString"12@"NSString"16
B20@0:4@"NSFileManager"8@"NSURL"12@"NSURL"16
B24@0:4@8@12@16@20
B24@0:4@"NSFileManager"8@"NSError"12@"NSString"16@"NSString"20
B24@0:4@"NSFileManager"8@"NSError"12@"NSURL"16@"NSURL"20
B16@0:4@8@12
B16@0:4@"NSFileManager"8@"NSString"12
B16@0:4@"NSFileManager"8@"NSURL"12
B20@0:4@"NSFileManager"8@"NSError"12@"NSString"16
B20@0:4@"NSFileManager"8@"NSError"12@"NSURL"16
B16@0:4@"NSXPCListener"8@"NSXPCConnection"12
@"NSXPCListener"
@"NSFileManager"
@"NSXPCConnection"
{?="northWestLatitude"b1"northWestLongitude"b1"southEastLatitude"b1"southEastLongitude"b1}
@28@0:4@8@12@16@20@24
{?="generationTimestamp"b1"configurationType"b1}
v12@0:4@?<v@?^{CLCachedLocationController=^^?^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}@@idI{CLCachedLocationScanMode=i{CLOldWifiScanner=@@BB{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{ScanningPolicy={WifiConfiguration=cBB{duration<long double, std::__1::ratio<1, 1> >=D}{vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification> >=^i^i{__compressed_pair<CLWifiService_Type::Notification *, std::__1::allocator<CLWifiService_Type::Notification> >=^i}}{duration<long double, std::__1::ratio<1, 1> >=D}{duration<long double, std::__1::ratio<1, 1> >=D}}{optional<CLOldWifiScanner::LocationConfiguration>=(?=c{LocationConfiguration={vector<CLLocationType, std::__1::allocator<CLLocationType> >=^i^i{__compressed_pair<CLLocationType *, std::__1::allocator<CLLocationType> >=^i}}d})B}}}{CLTransitWsbClient=@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}BBI}}{CLRouteListener=@^{INotifier}Bdd{?=dd}@}{CLTransitTilePreloaderExternal=^^?}{CLTransitTilePreloader=^{CLITransitTilePreloaderExternal}{CLDistanceCalc=ddddd}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}}@}>8
v16@0:4@?<v@?^{CLCachedLocationController=^^?^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}@@idI{CLCachedLocationScanMode=i{CLOldWifiScanner=@@BB{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{ScanningPolicy={WifiConfiguration=cBB{duration<long double, std::__1::ratio<1, 1> >=D}{vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification> >=^i^i{__compressed_pair<CLWifiService_Type::Notification *, std::__1::allocator<CLWifiService_Type::Notification> >=^i}}{duration<long double, std::__1::ratio<1, 1> >=D}{duration<long double, std::__1::ratio<1, 1> >=D}}{optional<CLOldWifiScanner::LocationConfiguration>=(?=c{LocationConfiguration={vector<CLLocationType, std::__1::allocator<CLLocationType> >=^i^i{__compressed_pair<CLLocationType *, std::__1::allocator<CLLocationType> >=^i}}d})B}}}{CLTransitWsbClient=@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}BBI}}{CLRouteListener=@^{INotifier}Bdd{?=dd}@}{CLTransitTilePreloaderExternal=^^?}{CLTransitTilePreloader=^{CLITransitTilePreloaderExternal}{CLDistanceCalc=ddddd}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}}@}>8@?<v@?>12
B12@0:4@?<v@?^{CLCachedLocationController=^^?^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}@@idI{CLCachedLocationScanMode=i{CLOldWifiScanner=@@BB{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{ScanningPolicy={WifiConfiguration=cBB{duration<long double, std::__1::ratio<1, 1> >=D}{vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification> >=^i^i{__compressed_pair<CLWifiService_Type::Notification *, std::__1::allocator<CLWifiService_Type::Notification> >=^i}}{duration<long double, std::__1::ratio<1, 1> >=D}{duration<long double, std::__1::ratio<1, 1> >=D}}{optional<CLOldWifiScanner::LocationConfiguration>=(?=c{LocationConfiguration={vector<CLLocationType, std::__1::allocator<CLLocationType> >=^i^i{__compressed_pair<CLLocationType *, std::__1::allocator<CLLocationType> >=^i}}d})B}}}{CLTransitWsbClient=@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}BBI}}{CLRouteListener=@^{INotifier}Bdd{?=dd}@}{CLTransitTilePreloaderExternal=^^?}{CLTransitTilePreloader=^{CLITransitTilePreloaderExternal}{CLDistanceCalc=ddddd}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}}@}>8
^{CLCachedLocationController=^^?^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCachedLocationController_Type::Notification, CLCachedLocationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}@@idI{CLCachedLocationScanMode=i{CLOldWifiScanner=@@BB{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}{ScanningPolicy={WifiConfiguration=cBB{duration<long double, std::__1::ratio<1, 1> >=D}{vector<CLWifiService_Type::Notification, std::__1::allocator<CLWifiService_Type::Notification> >=^i^i{__compressed_pair<CLWifiService_Type::Notification *, std::__1::allocator<CLWifiService_Type::Notification> >=^i}}{duration<long double, std::__1::ratio<1, 1> >=D}{duration<long double, std::__1::ratio<1, 1> >=D}}{optional<CLOldWifiScanner::LocationConfiguration>=(?=c{LocationConfiguration={vector<CLLocationType, std::__1::allocator<CLLocationType> >=^i^i{__compressed_pair<CLLocationType *, std::__1::allocator<CLLocationType> >=^i}}d})B}}}{CLTransitWsbClient=@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}BBI}}{CLRouteListener=@^{INotifier}Bdd{?=dd}@}{CLTransitTilePreloaderExternal=^^?}{CLTransitTilePreloader=^{CLITransitTilePreloaderExternal}{CLDistanceCalc=ddddd}dd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}}@}8@0:4
@"CalibrationTrack"
@40@0:4{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}8i24@28I32i36
{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}8@0:4
{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >="__d_"{duration<long double, std::__1::ratio<1, 1> >="__rep_"D}}
{CLATVAirplayDeviceInternal={time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}i{uuid=[16C]}Ii}8@0:4
v12@0:4R@"<CLATVAirplayMonitorClientProtocol>"8
v16@0:4@"<CLATVAirplayMonitorServiceProtocol>"8@"NSArray"12
@"WPAirPlaySolo"
v104@0:4@8{CLStrideCalEntry=idIdddddiiddid}12
v104@0:4@"CMStrideCalibrationDatabase"8{CLStrideCalEntry=idIdddddiiddid}12
v20@0:4@8i12i16
v20@0:4@"CMStrideCalLocationFSM"8i12i16
v16@0:4@"CMStrideCalLocationFSM"8@"CalibrationTrack"12
v20@0:4@8d12
v20@0:4@"CMStrideCalLocationFSM"8d12
v16@0:4@8i12
v16@0:4@"CMStrideCalLocationFSM"8i12
@20@0:4@8{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}12
B16@0:4@8r^{CLStepDistance=iddiidi}12
{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >="__ptr_"{__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLStreamingAwareLocationProvider_Type::Client, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >="__ptr_"{__compressed_pair<CLStreamingAwareLocationProvider_Type::Client *, std::__1::default_delete<CLStreamingAwareLocationProvider_Type::Client> >="__first_"^{Client}}}
@"<CLStreamingAwareLocationProviderProtocol>"
{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >="__ptr_"{__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >="__ptr_"{__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >="__first_"^{Client}}}
@"CMStrideCalibrationActivityBuffer"
@"CMStrideCalibrationElevationBuffer"
@"CMStrideCalibrationStepCountBuffer"
@"CMStrideCalibrationStats"
@"CMStrideCalibrationDatabase"
@"CMStrideCalLocationFSM"
{shared_ptr<CLStepCountRecorderDb>="__ptr_"^{CLStepCountRecorderDb}"__cntrl_"^{__shared_weak_count}}
v12@0:4@?<v@?^{CLFitnessTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBB}>8
v16@0:4@?<v@?^{CLFitnessTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBB}>8@?<v@?>12
B12@0:4@?<v@?^{CLFitnessTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBB}>8
^{CLFitnessTrackingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFitnessTrackingNotifier_Type::Notification, CLFitnessTrackingNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBB}8@0:4
@"CLClientManagerUsageSyncMessage"
@"NSError"
v20@0:4@"NSString"8i12B16
B20@0:4@8^@12^@16
v24@0:4@8@12i16@20
q8@0:4
v16@0:4q8
^{CLTimeZoneManager=^{CLTimeZoneDatabase}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@dd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}d{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}iiBB^{__CFRunLoopTimer}^{CLPersistentTimer}^{__CFRunLoopTimer}id^{__CFRunLoopTimer}ddddiddddddddd{CLDistanceCalc=ddddd}[26B]}8@0:4
v12@0:4^{CLTimeZoneManager=^{CLTimeZoneDatabase}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@dd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}d{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}iiBB^{__CFRunLoopTimer}^{CLPersistentTimer}^{__CFRunLoopTimer}id^{__CFRunLoopTimer}ddddiddddddddd{CLDistanceCalc=ddddd}[26B]}8
^{CLTimeZoneManager=^{CLTimeZoneDatabase}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}@dd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}d{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}iiBB^{__CFRunLoopTimer}^{CLPersistentTimer}^{__CFRunLoopTimer}id^{__CFRunLoopTimer}ddddiddddddddd{CLDistanceCalc=ddddd}[26B]}
{CLMotionActivity=iiiiBfdBiddii}8@0:4
v12@0:4@?<v@?^{CLFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@^{CLFenceDatabase}B{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}B@}{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?}{CLFenceMonitorWifiLogic=}}{CLFenceMonitorContinuous=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >={__tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence> >=L}}}}{CLFenceMonitorLogic=}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorContinuous_Type::Client, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >={__compressed_pair<CLFenceMonitorContinuous_Type::Client *, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >=^{Client}}}@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}{CLFenceDataDownloadManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client> >={__compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client> >=^{Client}}}^{CLPersistentTimer}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}dBB{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}ddddddidddiQi}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}{CLDistanceCalc=ddddd}B^{CLPersistentTimer}dd{map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client> >={__compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >={__compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >={__compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >=^{Client}}}}>8
v16@0:4@?<v@?^{CLFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@^{CLFenceDatabase}B{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}B@}{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?}{CLFenceMonitorWifiLogic=}}{CLFenceMonitorContinuous=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >={__tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence> >=L}}}}{CLFenceMonitorLogic=}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorContinuous_Type::Client, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >={__compressed_pair<CLFenceMonitorContinuous_Type::Client *, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >=^{Client}}}@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}{CLFenceDataDownloadManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client> >={__compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client> >=^{Client}}}^{CLPersistentTimer}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}dBB{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}ddddddidddiQi}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}{CLDistanceCalc=ddddd}B^{CLPersistentTimer}dd{map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client> >={__compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >={__compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >={__compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >=^{Client}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@^{CLFenceDatabase}B{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}B@}{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?}{CLFenceMonitorWifiLogic=}}{CLFenceMonitorContinuous=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >={__tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence> >=L}}}}{CLFenceMonitorLogic=}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorContinuous_Type::Client, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >={__compressed_pair<CLFenceMonitorContinuous_Type::Client *, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >=^{Client}}}@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}{CLFenceDataDownloadManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client> >={__compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client> >=^{Client}}}^{CLPersistentTimer}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}dBB{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}ddddddidddiQi}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}{CLDistanceCalc=ddddd}B^{CLPersistentTimer}dd{map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client> >={__compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >={__compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >={__compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >=^{Client}}}}>8
^{CLFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceManager_Type::Notification, CLFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceAuthorizationManager_Type::Notification, CLFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@^{CLFenceDatabase}B{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}B@}{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?}{CLFenceMonitorWifiLogic=}}{CLFenceMonitorContinuous=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >={__tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence> >=L}}}}{CLFenceMonitorLogic=}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorContinuous_Type::Client, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >={__compressed_pair<CLFenceMonitorContinuous_Type::Client *, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >=^{Client}}}@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}{CLFenceDataDownloadManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceDataDownloadManager_Type::Notification, CLFenceDataDownloadManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTA_Type::Client, std::__1::default_delete<CLBTA_Type::Client> >={__compressed_pair<CLBTA_Type::Client *, std::__1::default_delete<CLBTA_Type::Client> >=^{Client}}}^{CLPersistentTimer}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}dBB{Fence={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}ddddddidddiQi}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}}{CLDistanceCalc=ddddd}B^{CLPersistentTimer}dd{map<CLFenceManager_Type::Fence, CLFenceManager::PendingFence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceManager::PendingFence>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitor_Type::Client, std::__1::default_delete<CLFenceMonitor_Type::Client> >={__compressed_pair<CLFenceMonitor_Type::Client *, std::__1::default_delete<CLFenceMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLFenceDataDownloadManager_Type::Client, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >={__compressed_pair<CLFenceDataDownloadManager_Type::Client *, std::__1::default_delete<CLFenceDataDownloadManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceAuthorizationManager_Type::Client, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >={__compressed_pair<CLFenceAuthorizationManager_Type::Client *, std::__1::default_delete<CLFenceAuthorizationManager_Type::Client> >=^{Client}}}}8@0:4
@32@0:4d8d16d24
^i8@0:4
i12@0:4I8
v16@0:4^i8I12
{?="list"^i"count"I"size"I}
@"CRCellNeighborsGroup"
{?="bsLatitude"b1"bsLongitude"b1"sectorLatitude"b1"sectorLongitude"b1"bandclass"b1"celltype"b1"channel"b1"dayLightSavings"b1"ecn0"b1"ltmOffset"b1"pnoffset"b1"rat"b1"rscp"b1"serverHash"b1"zoneid"b1}
@"<PSYSyncCoordinatorDelegate>"
v20@0:4d8i16
v24@0:4d8i16@20
v12@0:4r^{CLStrideCalEntry=idIdddddiiddid}8
v12@0:4l8
{CLStrideCalibrationSessionMetrics="session"i"startTime"d"endTime"d"sumCalibrationDistanceSuccess"d"sumCalibrationDistanceFailOther"d"sumCalibrationDistanceFailGps"d"sumCalibrationDistanceFailPedometer"d"sumCalibrationDistanceFailGradient"d"sumCalibrationDistanceInvalidGain"d"sumCalibrationDistanceInvalidSpeed"d"sumCalibrationDistanceInvalidLength"d"totalDistance"d}
{CMFixedSizeQueue<double, 2>="fHeadAndSize"{?="fHead"S"fSize"S}"fCapacity"I"fBuffer"[8c]"fStorage"{CMQueueStorage<double, 2>="buffer"[8c]}}
@48@0:4d8d16r*24B28^{CLPersistentTimer=@^?^v@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}32@36d40
@"PCPersistentTimer"
{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__first_"{__rep=""(?="__l"{__long="__cap_"I"__size_"I"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[11c]}"__r"{__raw="__words"[3L]})}}}
{?="strokeAmp"b1"strokeFrequency"b1}
v12@0:4@?<v@?^{CLSimulatedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB}>8
v16@0:4@?<v@?^{CLSimulatedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB}>8@?<v@?>12
B12@0:4@?<v@?^{CLSimulatedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB}>8
^{CLSimulatedLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB}8@0:4
{MotionFitnessDaily={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BIIIIIIIIqqIIB}8@0:4
B16@0:4d8
@16@0:4d8
@124@0:4{MotionFitnessDaily={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BIIIIIIIIqqIIB}8
{MotionFitnessDaily={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BIIIIIIIIqqIIB}12@0:4@8
l16@0:4d8
v92@0:4i8(NotificationData={CLOdometerEntry=dddddddddii}{CLElevationChangeEntry=ddIIiidi}{CLCoarseElevationChangeEntry=dI}B@{DetailedConnectionInfo=BiiiB})12
v20@0:4i8{NotificationData=iB}12
v28@0:4i8{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}12
v24@0:4@8@12^{NSMutableSet=#}16@?20
v28@0:4d8d16@?24
@"<CLMotionStateProtocol>"
{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >="__ptr_"{__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >="__ptr_"{__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >="__ptr_"{__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >="__first_"^{Client}}}
@"HKHealthStore"
^{NSMutableSet=#}
v12@0:4@"CLCompanionSyncAuthObject"8
v16@0:4i8i12
@"SYService"
v12@0:4@?<v@?^{CLCatherineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLBodyMetrics=iffffffffif}@B{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>8
v16@0:4@?<v@?^{CLCatherineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLBodyMetrics=iffffffffif}@B{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLCatherineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLBodyMetrics=iffffffffif}@B{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}>8
^{CLCatherineNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCatherineNotifier_Type::Notification, CLCatherineNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLBodyMetrics=iffffffffif}@B{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}}8@0:4
v12@0:4@?<v@?^{CLFallNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@^{Dispatcher}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}>8
v16@0:4@?<v@?^{CLFallNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@^{Dispatcher}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLFallNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@^{Dispatcher}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}>8
^{CLFallNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFallNotifier_Type::Notification, CLFallNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@^{Dispatcher}{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}}8@0:4
@?8@0:4
v12@0:4r^(NotificationData={CLMotionActivity=iiiiBfdBiddii})8
{vector<std::__1::pair<double, CLMotionActivity::Type>, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > >="__begin_"^{pair<double, CLMotionActivity::Type>}"__end_"^{pair<double, CLMotionActivity::Type>}"__end_cap_"{__compressed_pair<std::__1::pair<double, CLMotionActivity::Type> *, std::__1::allocator<std::__1::pair<double, CLMotionActivity::Type> > >="__first_"^{pair<double, CLMotionActivity::Type>}}}
^d8@0:4
d12@0:4I8
v16@0:4^d8I12
{?="list"^d"count"I"size"I}
{?="w"b1}
@"<_CDContext>"
@"_CDContextualChangeRegistration"
@16@0:4i8@12
@"_CDContextualPredicate"
v12@0:4R@"<CLDuetMonitorClientProtocol>"8
v16@0:4@"_CDContextualPredicate"8R@"<CLDuetMonitorClientProtocol>"12
v20@0:4@"NSDate"8@"NSDate"12@?<v@?@"NSArray"@"NSError">16
v12@0:4@"<CLDuetMonitorServiceProtocol>"8
v16@0:4@"<CLDuetMonitorServiceProtocol>"8@"CLDuetForegroundApp"12
v16@0:4@"<CLDuetMonitorServiceProtocol>"8@"CLDuetHomeKitScene"12
v16@0:4@"<CLDuetMonitorServiceProtocol>"8@"CLDuetHomeKitAccessory"12
v16@0:4@"<CLDuetMonitorServiceProtocol>"8@"CLDuetHomeKitAppView"12
v20@0:4@8i12@16
v24@0:4i8@12@16@?20
@32@0:4@8d12d20@28
@"CLTilesManagerServerAppRecommendationResult"
@"LSApplicationProxy"
v16@0:4@"CLLocation"8@?<v@?@"NSArray">12
v12@0:4R@"<CLSuggestedActionClientProtocol>"8
v76@0:4{MonitoredRegion=^^?{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}SSi{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}8i72
{unique_ptr<CLBundleLocationProvider, std::__1::default_delete<CLBundleLocationProvider> >="__ptr_"{__compressed_pair<CLBundleLocationProvider *, std::__1::default_delete<CLBundleLocationProvider> >="__first_"^{CLBundleLocationProvider}}}
{unique_ptr<CLBundleLocationProvider_Type::Client, std::__1::default_delete<CLBundleLocationProvider_Type::Client> >="__ptr_"{__compressed_pair<CLBundleLocationProvider_Type::Client *, std::__1::default_delete<CLBundleLocationProvider_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLSuggestedActionDatabase, std::__1::default_delete<CLSuggestedActionDatabase> >="__ptr_"{__compressed_pair<CLSuggestedActionDatabase *, std::__1::default_delete<CLSuggestedActionDatabase> >="__first_"^{CLSuggestedActionDatabase}}}
{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >="__ptr_"{__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >="__ptr_"{__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >="__first_"^{Client}}}
@"NSUserActivity"
@"<CLTilesManagerProtocol>"
@"CLStoreServicesRequestor"
v12@0:4@?<v@?^{CLCompassDaemonClientNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{Dispatcher}}>8
v16@0:4@?<v@?^{CLCompassDaemonClientNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{Dispatcher}}>8@?<v@?>12
B12@0:4@?<v@?^{CLCompassDaemonClientNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{Dispatcher}}>8
^{CLCompassDaemonClientNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLCompassDaemonClientNotifier_Type::Notification, CLCompassDaemonClientNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{Dispatcher}}8@0:4
{?="submissionTimestamp"b1}
v40@0:4@8S12i16B20B24B28d32
v20@0:4S8@12@16
@"IDSDevice"
^Q8@0:4
Q12@0:4I8
v16@0:4^Q8I12
{?="list"^Q"count"I"size"I}
{?="latitude"b1"locationId"b1"longitude"b1}
v12@0:4^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}8
@16@0:4^{CLBundleLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}8@12
^{CLBundleLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}8@0:4
^{CLBundleLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}
@12@0:4r^{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}8
^{CLSimulationController={BasicMutex=^^?^{MutexInfo}}@{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}Bd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{__CFRunLoopTimer}dddddii^{__CFURL}}8@0:4
v12@0:4^{CLSimulationController={BasicMutex=^^?^{MutexInfo}}@{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}Bd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{__CFRunLoopTimer}dddddii^{__CFURL}}8
^{CLSimulationController={BasicMutex=^^?^{MutexInfo}}@{list<CLDaemonLocation, std::__1::allocator<CLDaemonLocation> >={__list_node_base<CLDaemonLocation, void *>=^{__list_node_base<CLDaemonLocation, void *>}^{__list_node_base<CLDaemonLocation, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLDaemonLocation, void *> > >=L}}Bd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}^{__CFRunLoopTimer}dddddii^{__CFURL}}
{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}12@0:4^{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}8
@"CMStrideCalibrationBins"
v12@0:4@?<v@?^{CLBluetoothService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFRunLoopSource}B{map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}>8
v16@0:4@?<v@?^{CLBluetoothService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFRunLoopSource}B{map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLBluetoothService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFRunLoopSource}B{map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}>8
^{CLBluetoothService=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBluetoothService_Type::Notification, CLBluetoothService_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{__CFRunLoopSource}B{map<std::__1::basic_string<char>, CLBluetoothService_Type::Device, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, CLBluetoothService_Type::Device>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}8@0:4
@80@0:4d8d16i24d28@36@40i44@48@52@56@60@64@68i72i76
v12@0:4@?<v@?^{CLOnBodyNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB}>8
v16@0:4@?<v@?^{CLOnBodyNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB}>8@?<v@?>12
B12@0:4@?<v@?^{CLOnBodyNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB}>8
^{CLOnBodyNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLOnBodyNotifier_Type::Notification, CLOnBodyNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB}8@0:4
{?="authMask"b1"notification"b1"clearClient"b1}
v12@0:4@?<v@?^{CLPressureCalibrationDatabase=^^?{unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >={__compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >=^{Client}}}B^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{MotionBarometerCalibration={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}Ifff}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}i{TemperatureOffsetCoefficientRound=ffi}{vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}^{TemperatureOffsetCoefficientRound}{__compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}}}B{?=ffd}^{Dispatcher}i{CLRobustSlopeEstimator=f{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{map<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > > > >={__tree<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::less<int>, true> >=L}}}}}>8
v16@0:4@?<v@?^{CLPressureCalibrationDatabase=^^?{unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >={__compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >=^{Client}}}B^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{MotionBarometerCalibration={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}Ifff}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}i{TemperatureOffsetCoefficientRound=ffi}{vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}^{TemperatureOffsetCoefficientRound}{__compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}}}B{?=ffd}^{Dispatcher}i{CLRobustSlopeEstimator=f{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{map<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > > > >={__tree<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::less<int>, true> >=L}}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLPressureCalibrationDatabase=^^?{unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >={__compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >=^{Client}}}B^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{MotionBarometerCalibration={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}Ifff}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}i{TemperatureOffsetCoefficientRound=ffi}{vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}^{TemperatureOffsetCoefficientRound}{__compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}}}B{?=ffd}^{Dispatcher}i{CLRobustSlopeEstimator=f{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{map<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > > > >={__tree<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::less<int>, true> >=L}}}}}>8
^{CLPressureCalibrationDatabase=^^?{unique_ptr<CLSensorCalibrationController_Type::Client, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >={__compressed_pair<CLSensorCalibrationController_Type::Client *, std::__1::default_delete<CLSensorCalibrationController_Type::Client> >=^{Client}}}B^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPressureCalibrationDatabase_Type::Notification, CLPressureCalibrationDatabase_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{MotionBarometerCalibration={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}Ifff}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}i{TemperatureOffsetCoefficientRound=ffi}{vector<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}^{TemperatureOffsetCoefficientRound}{__compressed_pair<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound *, std::__1::allocator<CLPressureCalibrationDatabase::TemperatureOffsetCoefficientRound> >=^{TemperatureOffsetCoefficientRound}}}B{?=ffd}^{Dispatcher}i{CLRobustSlopeEstimator=f{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{map<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> >, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > > > >={__tree<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, std::__1::deque<CLMotionTypePressure, std::__1::allocator<CLMotionTypePressure> > >, std::__1::less<int>, true> >=L}}}}}8@0:4
B12@0:4@"NSString"8
v12@0:4R@"<CLCapabilityMonitorClientProtocol>"8
{?="elevationDescended"b1"gradeType"b1"verticalSpeed"b1}
v12@0:4@?<v@?dd>8
v12@0:4@?<v@?^{CLSignificantChangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{CLDistanceCalc=ddddd}B^{CLPersistentTimer}{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}^{CLPersistentTimer}ddd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBdiddd{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}i{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}BcBBd^{__CFRunLoopTimer}B{list<CLSignificantChangeManager::PendingLaunch, std::__1::allocator<CLSignificantChangeManager::PendingLaunch> >={__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>=^{__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>}^{__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSignificantChangeManager::PendingLaunch, void *> > >=L}}@}>8
v16@0:4@?<v@?^{CLSignificantChangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{CLDistanceCalc=ddddd}B^{CLPersistentTimer}{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}^{CLPersistentTimer}ddd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBdiddd{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}i{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}BcBBd^{__CFRunLoopTimer}B{list<CLSignificantChangeManager::PendingLaunch, std::__1::allocator<CLSignificantChangeManager::PendingLaunch> >={__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>=^{__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>}^{__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSignificantChangeManager::PendingLaunch, void *> > >=L}}@}>8@?<v@?>12
B12@0:4@?<v@?^{CLSignificantChangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{CLDistanceCalc=ddddd}B^{CLPersistentTimer}{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}^{CLPersistentTimer}ddd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBdiddd{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}i{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}BcBBd^{__CFRunLoopTimer}B{list<CLSignificantChangeManager::PendingLaunch, std::__1::allocator<CLSignificantChangeManager::PendingLaunch> >={__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>=^{__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>}^{__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSignificantChangeManager::PendingLaunch, void *> > >=L}}@}>8
^{CLSignificantChangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{CLDistanceCalc=ddddd}B^{CLPersistentTimer}{CLPersistentStore=^^?^{__CFDictionary}@Bid^{__CFRunLoopTimer}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i}^{CLPersistentTimer}ddd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}BBdiddd{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}i{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}BcBBd^{__CFRunLoopTimer}B{list<CLSignificantChangeManager::PendingLaunch, std::__1::allocator<CLSignificantChangeManager::PendingLaunch> >={__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>=^{__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>}^{__list_node_base<CLSignificantChangeManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSignificantChangeManager::PendingLaunch, void *> > >=L}}@}8@0:4
v12@0:4@?<v@?^{CLNatalimetryNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLNatalimetryRecorderDb>=^{CLNatalimetryRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLNatalieData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLNatalieData> >=^{CLActivityRecorderDb<CLNatalieData>}^{__shared_weak_count}}BB}{shared_ptr<CLExerciseMinuteRecorderDb>=^{CLExerciseMinuteRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLExerciseMinuteData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData> >=^{CLActivityRecorderDb<CLExerciseMinuteData>}^{__shared_weak_count}}BB}B{CLMotionDefaultsWrite<bool>=BB}@{unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore> >={__compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore> >=^{CLPersistentStore}}}(NotificationData={CLNatalieData=idiBdiiidddfqqdd^{__CFString}BB}B{CLBodyMetrics=iffffffffif}f{CLExerciseMinuteData=id^{__CFString}})BB@Bii^{Dispatcher}B{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=L}}BdBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLElevationChangeEntry>=^^?*d{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >={__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >=L}}BdBdddd{CLElevationChangeEntry=ddIIiidi}dddfBdi{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}BB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>=^^?*d{deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >={__split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}{__compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry> >=L}}BdBddddBBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCatherineData>=^^?*d{deque<CLCatherineData, std::__1::allocator<CLCatherineData> >={__split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}^^{CLCatherineData}^^{CLCatherineData}{__compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLCatherineData> >=L}}BdBddddBB@{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLStepCountEntry>=^^?*d{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=L}}BdBddddBB@{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}}{CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>=^^?*d{deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >={__split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}^^{MediatedMotionActivity}^^{MediatedMotionActivity}{__compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >=L}}BdBddddBB}{CLNatalieSourceFromNotifier<CLSwimEntry>=^^?*d{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}BdBddddBB@{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{CLCalorieController=B{CLNatalieModelChooser={shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=L}}{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=L}}dB{CLExerciseMinuteEstimator=BB{CLCoarseElevationChangeEntry=dI}fddd{deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >={__split_buffer<CLExerciseMinuteEstimator::IntensityEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}^^{IntensityEpoch}^^{IntensityEpoch}{__compressed_pair<CLExerciseMinuteEstimator::IntensityEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >=L}}dBdddddd{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=L}}{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=L}}}{CLMotionDefaultsWrite<bool>=BB}}id{CLCatherineData=iiddBdddi}dB{CLCaloriePalEstimator=@@@{CLBodyMetrics=iffffffffif}Bi@@@i{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CLVo2Estimator=ff{CLBodyMetrics=iffffffffif}{CLCircularQueue<CLCatherineData>={vector<CLCatherineData, std::__1::allocator<CLCatherineData> >=^{CLCatherineData}^{CLCatherineData}{__compressed_pair<CLCatherineData *, std::__1::allocator<CLCatherineData> >=^{CLCatherineData}}}III}{CLStepCountRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=L}}if{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}i@{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}BB@?@IIIdiiidBI}BddBfffIffff{list<CLVo2Estimator::CLVo2Tuple, std::__1::allocator<CLVo2Estimator::CLVo2Tuple> >={__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>=^{__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>}^{__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLVo2Estimator::CLVo2Tuple, void *> > >=L}}i{MetStats=IIIIIIIIIIII}{HRStats=IIIII}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}>8
v16@0:4@?<v@?^{CLNatalimetryNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLNatalimetryRecorderDb>=^{CLNatalimetryRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLNatalieData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLNatalieData> >=^{CLActivityRecorderDb<CLNatalieData>}^{__shared_weak_count}}BB}{shared_ptr<CLExerciseMinuteRecorderDb>=^{CLExerciseMinuteRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLExerciseMinuteData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData> >=^{CLActivityRecorderDb<CLExerciseMinuteData>}^{__shared_weak_count}}BB}B{CLMotionDefaultsWrite<bool>=BB}@{unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore> >={__compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore> >=^{CLPersistentStore}}}(NotificationData={CLNatalieData=idiBdiiidddfqqdd^{__CFString}BB}B{CLBodyMetrics=iffffffffif}f{CLExerciseMinuteData=id^{__CFString}})BB@Bii^{Dispatcher}B{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=L}}BdBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLElevationChangeEntry>=^^?*d{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >={__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >=L}}BdBdddd{CLElevationChangeEntry=ddIIiidi}dddfBdi{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}BB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>=^^?*d{deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >={__split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}{__compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry> >=L}}BdBddddBBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCatherineData>=^^?*d{deque<CLCatherineData, std::__1::allocator<CLCatherineData> >={__split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}^^{CLCatherineData}^^{CLCatherineData}{__compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLCatherineData> >=L}}BdBddddBB@{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLStepCountEntry>=^^?*d{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=L}}BdBddddBB@{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}}{CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>=^^?*d{deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >={__split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}^^{MediatedMotionActivity}^^{MediatedMotionActivity}{__compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >=L}}BdBddddBB}{CLNatalieSourceFromNotifier<CLSwimEntry>=^^?*d{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}BdBddddBB@{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{CLCalorieController=B{CLNatalieModelChooser={shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=L}}{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=L}}dB{CLExerciseMinuteEstimator=BB{CLCoarseElevationChangeEntry=dI}fddd{deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >={__split_buffer<CLExerciseMinuteEstimator::IntensityEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}^^{IntensityEpoch}^^{IntensityEpoch}{__compressed_pair<CLExerciseMinuteEstimator::IntensityEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >=L}}dBdddddd{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=L}}{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=L}}}{CLMotionDefaultsWrite<bool>=BB}}id{CLCatherineData=iiddBdddi}dB{CLCaloriePalEstimator=@@@{CLBodyMetrics=iffffffffif}Bi@@@i{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CLVo2Estimator=ff{CLBodyMetrics=iffffffffif}{CLCircularQueue<CLCatherineData>={vector<CLCatherineData, std::__1::allocator<CLCatherineData> >=^{CLCatherineData}^{CLCatherineData}{__compressed_pair<CLCatherineData *, std::__1::allocator<CLCatherineData> >=^{CLCatherineData}}}III}{CLStepCountRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=L}}if{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}i@{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}BB@?@IIIdiiidBI}BddBfffIffff{list<CLVo2Estimator::CLVo2Tuple, std::__1::allocator<CLVo2Estimator::CLVo2Tuple> >={__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>=^{__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>}^{__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLVo2Estimator::CLVo2Tuple, void *> > >=L}}i{MetStats=IIIIIIIIIIII}{HRStats=IIIII}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLNatalimetryNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLNatalimetryRecorderDb>=^{CLNatalimetryRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLNatalieData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLNatalieData> >=^{CLActivityRecorderDb<CLNatalieData>}^{__shared_weak_count}}BB}{shared_ptr<CLExerciseMinuteRecorderDb>=^{CLExerciseMinuteRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLExerciseMinuteData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData> >=^{CLActivityRecorderDb<CLExerciseMinuteData>}^{__shared_weak_count}}BB}B{CLMotionDefaultsWrite<bool>=BB}@{unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore> >={__compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore> >=^{CLPersistentStore}}}(NotificationData={CLNatalieData=idiBdiiidddfqqdd^{__CFString}BB}B{CLBodyMetrics=iffffffffif}f{CLExerciseMinuteData=id^{__CFString}})BB@Bii^{Dispatcher}B{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=L}}BdBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLElevationChangeEntry>=^^?*d{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >={__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >=L}}BdBdddd{CLElevationChangeEntry=ddIIiidi}dddfBdi{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}BB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>=^^?*d{deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >={__split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}{__compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry> >=L}}BdBddddBBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCatherineData>=^^?*d{deque<CLCatherineData, std::__1::allocator<CLCatherineData> >={__split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}^^{CLCatherineData}^^{CLCatherineData}{__compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLCatherineData> >=L}}BdBddddBB@{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLStepCountEntry>=^^?*d{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=L}}BdBddddBB@{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}}{CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>=^^?*d{deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >={__split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}^^{MediatedMotionActivity}^^{MediatedMotionActivity}{__compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >=L}}BdBddddBB}{CLNatalieSourceFromNotifier<CLSwimEntry>=^^?*d{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}BdBddddBB@{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{CLCalorieController=B{CLNatalieModelChooser={shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=L}}{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=L}}dB{CLExerciseMinuteEstimator=BB{CLCoarseElevationChangeEntry=dI}fddd{deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >={__split_buffer<CLExerciseMinuteEstimator::IntensityEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}^^{IntensityEpoch}^^{IntensityEpoch}{__compressed_pair<CLExerciseMinuteEstimator::IntensityEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >=L}}dBdddddd{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=L}}{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=L}}}{CLMotionDefaultsWrite<bool>=BB}}id{CLCatherineData=iiddBdddi}dB{CLCaloriePalEstimator=@@@{CLBodyMetrics=iffffffffif}Bi@@@i{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CLVo2Estimator=ff{CLBodyMetrics=iffffffffif}{CLCircularQueue<CLCatherineData>={vector<CLCatherineData, std::__1::allocator<CLCatherineData> >=^{CLCatherineData}^{CLCatherineData}{__compressed_pair<CLCatherineData *, std::__1::allocator<CLCatherineData> >=^{CLCatherineData}}}III}{CLStepCountRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=L}}if{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}i@{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}BB@?@IIIdiiidBI}BddBfffIffff{list<CLVo2Estimator::CLVo2Tuple, std::__1::allocator<CLVo2Estimator::CLVo2Tuple> >={__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>=^{__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>}^{__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLVo2Estimator::CLVo2Tuple, void *> > >=L}}i{MetStats=IIIIIIIIIIII}{HRStats=IIIII}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}>8
^{CLNatalimetryNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLNatalimetryRecorderDb>=^{CLNatalimetryRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLNatalieData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLNatalieData> >=^{CLActivityRecorderDb<CLNatalieData>}^{__shared_weak_count}}BB}{shared_ptr<CLExerciseMinuteRecorderDb>=^{CLExerciseMinuteRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLExerciseMinuteData>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLExerciseMinuteData> >=^{CLActivityRecorderDb<CLExerciseMinuteData>}^{__shared_weak_count}}BB}B{CLMotionDefaultsWrite<bool>=BB}@{unique_ptr<CLPersistentStore, std::__1::default_delete<CLPersistentStore> >={__compressed_pair<CLPersistentStore *, std::__1::default_delete<CLPersistentStore> >=^{CLPersistentStore}}}(NotificationData={CLNatalieData=idiBdiiidddfqqdd^{__CFString}BB}B{CLBodyMetrics=iffffffffif}f{CLExerciseMinuteData=id^{__CFString}})BB@Bii^{Dispatcher}B{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=L}}BdBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLElevationChangeEntry>=^^?*d{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >={__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}^^{CLElevationChangeEntry}{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >=^^{CLElevationChangeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >=L}}BdBdddd{CLElevationChangeEntry=ddIIiidi}dddfBdi{vector<float, std::__1::allocator<float> >=^f^f{__compressed_pair<float *, std::__1::allocator<float> >=^f}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}{deque<float, std::__1::allocator<float> >={__split_buffer<float *, std::__1::allocator<float *> >=^^f^^f^^f{__compressed_pair<float **, std::__1::allocator<float *> >=^^f}}I{__compressed_pair<unsigned long, std::__1::allocator<float> >=L}}BB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCoarseElevationChangeEntry>=^^?*d{deque<CLCoarseElevationChangeEntry, std::__1::allocator<CLCoarseElevationChangeEntry> >={__split_buffer<CLCoarseElevationChangeEntry *, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}^^{CLCoarseElevationChangeEntry}{__compressed_pair<CLCoarseElevationChangeEntry **, std::__1::allocator<CLCoarseElevationChangeEntry *> >=^^{CLCoarseElevationChangeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLCoarseElevationChangeEntry> >=L}}BdBddddBBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLCatherineData>=^^?*d{deque<CLCatherineData, std::__1::allocator<CLCatherineData> >={__split_buffer<CLCatherineData *, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}^^{CLCatherineData}^^{CLCatherineData}{__compressed_pair<CLCatherineData **, std::__1::allocator<CLCatherineData *> >=^^{CLCatherineData}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLCatherineData> >=L}}BdBddddBB@{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}{CLNatalieSourceFromNotifier<CLStepCountEntry>=^^?*d{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=L}}BdBddddBB@{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}}{CLNatalieInput<CLMotionStateMediator_Type::MediatedMotionActivity>=^^?*d{deque<CLMotionStateMediator_Type::MediatedMotionActivity, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >={__split_buffer<CLMotionStateMediator_Type::MediatedMotionActivity *, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}^^{MediatedMotionActivity}^^{MediatedMotionActivity}{__compressed_pair<CLMotionStateMediator_Type::MediatedMotionActivity **, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity *> >=^^{MediatedMotionActivity}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLMotionStateMediator_Type::MediatedMotionActivity> >=L}}BdBddddBB}{CLNatalieSourceFromNotifier<CLSwimEntry>=^^?*d{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}BdBddddBB@{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{CLCalorieController=B{CLNatalieModelChooser={shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}{shared_ptr<CLNatalieModelInterface>=^{CLNatalieModelInterface}^{__shared_weak_count}}}{shared_ptr<CLNatalieModelInput>=^{CLNatalieModelInput}^{__shared_weak_count}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=L}}{deque<std::__1::pair<double, float>, std::__1::allocator<std::__1::pair<double, float> > >={__split_buffer<std::__1::pair<double, float> *, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}^^{pair<double, float>}^^{pair<double, float>}{__compressed_pair<std::__1::pair<double, float> **, std::__1::allocator<std::__1::pair<double, float> *> >=^^{pair<double, float>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, float> > >=L}}dB{CLExerciseMinuteEstimator=BB{CLCoarseElevationChangeEntry=dI}fddd{deque<CLExerciseMinuteEstimator::IntensityEpoch, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >={__split_buffer<CLExerciseMinuteEstimator::IntensityEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}^^{IntensityEpoch}^^{IntensityEpoch}{__compressed_pair<CLExerciseMinuteEstimator::IntensityEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch *> >=^^{IntensityEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::IntensityEpoch> >=L}}dBdddddd{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=L}}{deque<CLExerciseMinuteEstimator::CLPushEpoch, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >={__split_buffer<CLExerciseMinuteEstimator::CLPushEpoch *, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}^^{CLPushEpoch}^^{CLPushEpoch}{__compressed_pair<CLExerciseMinuteEstimator::CLPushEpoch **, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch *> >=^^{CLPushEpoch}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExerciseMinuteEstimator::CLPushEpoch> >=L}}}{CLMotionDefaultsWrite<bool>=BB}}id{CLCatherineData=iiddBdddi}dB{CLCaloriePalEstimator=@@@{CLBodyMetrics=iffffffffif}Bi@@@i{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}}{CLVo2Estimator=ff{CLBodyMetrics=iffffffffif}{CLCircularQueue<CLCatherineData>={vector<CLCatherineData, std::__1::allocator<CLCatherineData> >=^{CLCatherineData}^{CLCatherineData}{__compressed_pair<CLCatherineData *, std::__1::allocator<CLCatherineData> >=^{CLCatherineData}}}III}{CLStepCountRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLStepCountEntry, std::__1::allocator<CLStepCountEntry> >={__split_buffer<CLStepCountEntry *, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}^^{CLStepCountEntry}^^{CLStepCountEntry}{__compressed_pair<CLStepCountEntry **, std::__1::allocator<CLStepCountEntry *> >=^^{CLStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLStepCountEntry> >=L}}if{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}i@{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}BB@?@IIIdiiidBI}BddBfffIffff{list<CLVo2Estimator::CLVo2Tuple, std::__1::allocator<CLVo2Estimator::CLVo2Tuple> >={__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>=^{__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>}^{__list_node_base<CLVo2Estimator::CLVo2Tuple, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLVo2Estimator::CLVo2Tuple, void *> > >=L}}i{MetStats=IIIIIIIIIIII}{HRStats=IIIII}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLCatherineNotifier_Type::Client, std::__1::default_delete<CLCatherineNotifier_Type::Client> >={__compressed_pair<CLCatherineNotifier_Type::Client *, std::__1::default_delete<CLCatherineNotifier_Type::Client> >=^{Client}}}}8@0:4
v12@0:4@"NSString"8
^{CLApplicationLifecycleManager=@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch> >={__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>=^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *> > >=L}}B}8@0:4
v12@0:4^{CLApplicationLifecycleManager=@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch> >={__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>=^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *> > >=L}}B}8
^{CLApplicationLifecycleManager=@{unique_ptr<CLAppMonitor_Type::Client, std::__1::default_delete<CLAppMonitor_Type::Client> >={__compressed_pair<CLAppMonitor_Type::Client *, std::__1::default_delete<CLAppMonitor_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{list<CLApplicationLifecycleManager::PendingLaunch, std::__1::allocator<CLApplicationLifecycleManager::PendingLaunch> >={__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>=^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}^{__list_node_base<CLApplicationLifecycleManager::PendingLaunch, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLApplicationLifecycleManager::PendingLaunch, void *> > >=L}}B}
v12@0:4r^{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}i}8
v12@0:4r^(NotificationData={CLOdometerEntry=dddddddddii}{CLElevationChangeEntry=ddIIiidi}{CLCoarseElevationChangeEntry=dI}{CLSignificantElevation=i[16C]ddII})8
@"CalTrackFinder"
@"<CMStrideCalLocationFSMDelegate>"
v100@0:4{CLStrideCalEntry=idIdddddiiddid}8
{CMStrideCalRecorderDb="_vptr$CLActivityRecorderDb"^^?"fDb"{auto_ptr<CLSqliteDatabase>="__ptr_"^{CLSqliteDatabase}}"fName"*"fMutex"{BasicMutex="_vptr$Mutex"^^?"info"^{MutexInfo}}"fFatalError"B"fBuffer"{deque<CLStrideCalEntry, std::__1::allocator<CLStrideCalEntry> >="__map_"{__split_buffer<CLStrideCalEntry *, std::__1::allocator<CLStrideCalEntry *> >="__first_"^^{CLStrideCalEntry}"__begin_"^^{CLStrideCalEntry}"__end_"^^{CLStrideCalEntry}"__end_cap_"{__compressed_pair<CLStrideCalEntry **, std::__1::allocator<CLStrideCalEntry *> >="__first_"^^{CLStrideCalEntry}}}"__start_"I"__size_"{__compressed_pair<unsigned long, std::__1::allocator<CLStrideCalEntry> >="__first_"L}}"fInternalRecordCount"i"fSampleInterval"f"fPrevEntry"{CLStrideCalEntry="recordId"i"startTime"d"pacebin"I"kvalue"d"kvalueTrack"d"score"d"endTime"d"distance"d"steps"i"session"i"speed"d"percentGrade"d"gpsSource"i"timestamp"d}"fMaxBufferSize"i"fInMemoryTransaction"@"NSObject<OS_os_transaction>""fSqlGetCount"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlGetAllAsc"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlGetPacebinDesc"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlGetSpeedRangeDesc"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlDeleteBefore"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlDeleteAfter"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlDeleteAll"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlInsert"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlShiftStartTimes"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fSqlMostRecent"{CLSqliteCachedStatement="fDb"^{CLSqliteDatabase}"fStatement"^{sqlite3_stmt}}"fFinishedInsertSilo"@"CLSilo""fFinishedInsertHandler"@?}
@"<CMStrideCalibrationDatabaseDelegate>"
v16@0:4r^i8r^(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})12
v16@0:4r^i8r^(NotificationData={CLOdometerEntry=dddddddddii}{CLElevationChangeEntry=ddIIiidi}{CLCoarseElevationChangeEntry=dI}{CLSignificantElevation=i[16C]ddII})12
v16@0:4@"CLLocation"8@?<v@?i@"NSError">12
v12@0:4@?<v@?@"RTLocationOfInterest"@"NSError">8
v24@0:4d8@16@?20
v24@0:4d8@"CLLocation"16@?<v@?@"NSArray"@"NSError">20
v16@0:4i8@?12
v16@0:4i8@?<v@?@"NSArray"@"NSError">12
v28@0:4@8@12d16@?24
v28@0:4@"CLLocation"8@"NSDate"12d16@?<v@?@"NSArray"@"NSError">24
v16@0:4@"NSDate"8@?<v@?@"NSArray"@"NSError">12
v12@0:4R@"<CLRoutineMonitorClientProtocol>"8
v16@0:4@"CLLocation"8@?<v@?@"RTLocationOfInterest"@"NSError">12
v16@0:4I8R@12
v16@0:4I8R@"<CLRoutineMonitorClientProtocol>"12
v16@0:4@"CLLocation"8@?<v@?@"NSArray"@"NSError">12
v12@0:4@"NSArray"8
v420@0:4i8{NotificationData={CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}{shared_ptr<CLBatchedLocations>=^{CLBatchedLocations}^{__shared_weak_count}}{TechnologyStatus=iB}Bdi{?=dd}{?=dd}{XtraFileAvailable=d{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}i}12
v92@0:4i8{NotificationData=Bc{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BBB{vector<CLWifiRangeResult, std::__1::allocator<CLWifiRangeResult> >=^{CLWifiRangeResult}^{CLWifiRangeResult}{__compressed_pair<CLWifiRangeResult *, std::__1::allocator<CLWifiRangeResult> >=^{CLWifiRangeResult}}}B}12
^{CLServiceLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^{__CLClient}^{__CLClient}^{__CLClient}^{__CFString}^{__CFString}@B}
{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >="__ptr_"{__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >="__ptr_"{__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >="__first_"^{Client}}}
{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >="__ptr_"{__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >="__first_"^{Client}}}
^{CLPersistentTimer=@^?^v@{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}
@"CLLocation"
@"NSArray"
@"RTRoutineManager"
@"<CLSuggestedActionServiceProtocol>"
@12@0:4^{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?}{CLFenceMonitorWifiLogic=}}{CLFenceMonitorContinuous=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >={__tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence> >=L}}}}{CLFenceMonitorLogic=}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorContinuous_Type::Client, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >={__compressed_pair<CLFenceMonitorContinuous_Type::Client *, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >=^{Client}}}@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}8
^{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?}{CLFenceMonitorWifiLogic=}}{CLFenceMonitorContinuous=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >={__tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence> >=L}}}}{CLFenceMonitorLogic=}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorContinuous_Type::Client, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >={__compressed_pair<CLFenceMonitorContinuous_Type::Client *, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >=^{Client}}}@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}8@0:4
v12@0:4^{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?}{CLFenceMonitorWifiLogic=}}{CLFenceMonitorContinuous=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >={__tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence> >=L}}}}{CLFenceMonitorLogic=}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorContinuous_Type::Client, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >={__compressed_pair<CLFenceMonitorContinuous_Type::Client *, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >=^{Client}}}@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}8
^{CLFenceMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{map<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorLogic::FenceMonitoringStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}{list<CLFenceManager_Type::CombinedFence, std::__1::allocator<CLFenceManager_Type::CombinedFence> >={__list_node_base<CLFenceManager_Type::CombinedFence, void *>=^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}^{__list_node_base<CLFenceManager_Type::CombinedFence, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLFenceManager_Type::CombinedFence, void *> > >=L}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{CLFenceMonitorCell=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, CLFenceMonitorCell::FenceCellMonitorStatus>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}I{map<CLCell, CLFenceMonitorCell::CellStatus, std::__1::less<CLCell>, std::__1::allocator<std::__1::pair<const CLCell, CLFenceMonitorCell::CellStatus> > >={__tree<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true>, std::__1::allocator<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLCell, std::__1::__value_type<CLCell, CLFenceMonitorCell::CellStatus>, std::__1::less<CLCell>, true> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}{set<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >={__tree<CLCell, std::__1::less<CLCell>, std::__1::allocator<CLCell> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLCell, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLCell> >=L}}}^{__CFRunLoopTimer}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{CLDistanceCalc=ddddd}}{CLFenceMonitorWifi=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<CLFenceManager_Type::Fence, bool, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<std::__1::pair<const CLFenceManager_Type::Fence, bool> > >={__tree<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true>, std::__1::allocator<std::__1::__value_type<CLFenceManager_Type::Fence, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLFenceManager_Type::Fence, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLFenceManager_Type::Fence, std::__1::__value_type<CLFenceManager_Type::Fence, bool>, std::__1::less<CLFenceManager_Type::Fence>, true> >=L}}}B@{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}BBBd{CLPowerAssertion=^^?i^v^{__CFString}dd@}dIB{vector<CLWifiService_Type::AccessPoint, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}^{AccessPoint}{__compressed_pair<CLWifiService_Type::AccessPoint *, std::__1::allocator<CLWifiService_Type::AccessPoint> >=^{AccessPoint}}}dB{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}BddddddB{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{CLFenceMonitorWifiLogicExternal=^^?}{CLFenceMonitorWifiLogic=}}{CLFenceMonitorContinuous=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLFenceMonitor_Type::Notification, CLFenceMonitor_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{set<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >={__tree<CLFenceManager_Type::Fence, std::__1::less<CLFenceManager_Type::Fence>, std::__1::allocator<CLFenceManager_Type::Fence> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CLFenceManager_Type::Fence, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<CLFenceManager_Type::Fence> >=L}}}}{CLFenceMonitorLogic=}i{unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorCell_Type::Client, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >={__compressed_pair<CLFenceMonitorCell_Type::Client *, std::__1::default_delete<CLFenceMonitorCell_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorWifi_Type::Client, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >={__compressed_pair<CLFenceMonitorWifi_Type::Client *, std::__1::default_delete<CLFenceMonitorWifi_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLWifiService_Type::Client, std::__1::default_delete<CLWifiService_Type::Client> >={__compressed_pair<CLWifiService_Type::Client *, std::__1::default_delete<CLWifiService_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLFenceMonitorContinuous_Type::Client, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >={__compressed_pair<CLFenceMonitorContinuous_Type::Client *, std::__1::default_delete<CLFenceMonitorContinuous_Type::Client> >=^{Client}}}@BBBBBBB^{CLPersistentTimer}^{CLPersistentTimer}^{CLPersistentTimer}dd^{CLPersistentTimer}{CLPowerAssertion=^^?i^v^{__CFString}dd@}Bd{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}diidiiddBBddBBBBdd^{__CFRunLoopTimer}BccdB^{CLPersistentTimer}ddddddddB@{CLDistanceCalc=ddddd}@@}
{?="timestamp"b1"pressure"b1"temperature"b1}
v12@0:4@?<v@?^{CLSignalEnvironmentProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}i^{CLSignalEnvironmentDataManager}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}Bdi}>8
v16@0:4@?<v@?^{CLSignalEnvironmentProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}i^{CLSignalEnvironmentDataManager}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}Bdi}>8@?<v@?>12
B12@0:4@?<v@?^{CLSignalEnvironmentProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}i^{CLSignalEnvironmentDataManager}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}Bdi}>8
^{CLSignalEnvironmentProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSignalEnvironmentProvider_Type::Notification, CLSignalEnvironmentProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}i^{CLSignalEnvironmentDataManager}{CLFileUpdate=^^?{BasicMutex=^^?^{MutexInfo}}@^?^v{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}@iddddddB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}B}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}Bdi}8@0:4
v12@0:4R@"<CLRemoteMotionAlarmClientProtocol>"8
v12@0:4@?<v@?^{CLUnifiedCellLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFRunLoopSource}B{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}BB^{CLPersistentTimer}}>8
v16@0:4@?<v@?^{CLUnifiedCellLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFRunLoopSource}B{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}BB^{CLPersistentTimer}}>8@?<v@?>12
B12@0:4@?<v@?^{CLUnifiedCellLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFRunLoopSource}B{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}BB^{CLPersistentTimer}}>8
^{CLUnifiedCellLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB^^?{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLTelephonyService_Type::Client, std::__1::default_delete<CLTelephonyService_Type::Client> >={__compressed_pair<CLTelephonyService_Type::Client *, std::__1::default_delete<CLTelephonyService_Type::Client> >=^{Client}}}{unique_ptr<CLNetworkLocationProvider_Type::Client, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >={__compressed_pair<CLNetworkLocationProvider_Type::Client *, std::__1::default_delete<CLNetworkLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}^{__CFRunLoopSource}B{CLCell=Bii{Cell=iiiiiiii}{ScdmaCell=iiiiiiii}{CdmaCell=i{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}iiiiiiiii{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}iii{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ii}{LteCell=iiiiiiiddii}}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}{vector<CLCell, std::__1::allocator<CLCell> >=^{CLCell}^{CLCell}{__compressed_pair<CLCell *, std::__1::allocator<CLCell> >=^{CLCell}}}BB^{CLPersistentTimer}}8@0:4
{?="age"b1"hidden"b1}
v204@0:4i8(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})12
{deque<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double> > >="__map_"{__split_buffer<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> *> >="__first_"^^{pair<double, double>}"__begin_"^^{pair<double, double>}"__end_"^^{pair<double, double>}"__end_cap_"{__compressed_pair<std::__1::pair<double, double> **, std::__1::allocator<std::__1::pair<double, double> *> >="__first_"^^{pair<double, double>}}}"__start_"I"__size_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<double, double> > >="__first_"L}}
@36@0:4d8d16i24d28
I16@0:4d8
{?=dd}16@0:4d8
d16@0:4d8
B16@0:4I8I12
v28@0:4I8d12d20
v32@0:4I8d12d20I28
{?="triggerTimestamp"b1"providerIdentifier"b1"triggerSubType"b1"triggerType"b1}
d24@0:4@8d12i20
d20@0:4@8d12
@12@0:4^{CLSubHarvesterMicroLocation=^{IHarvestDelegate}@@@{vector<std::__1::function<void (std::__1::function<bool ()>)>, std::__1::allocator<std::__1::function<void (std::__1::function<bool ()>)> > >=^{function<void (std::__1::function<bool ()>)>}^{function<void (std::__1::function<bool ()>)>}{__compressed_pair<std::__1::function<void (std::__1::function<bool ()>)> *, std::__1::allocator<std::__1::function<void (std::__1::function<bool ()>)> > >=^{function<void (std::__1::function<bool ()>)>}}}}8
^{CLSubHarvesterMicroLocation=^{IHarvestDelegate}@@@{vector<std::__1::function<void (std::__1::function<bool ()>)>, std::__1::allocator<std::__1::function<void (std::__1::function<bool ()>)> > >=^{function<void (std::__1::function<bool ()>)>}^{function<void (std::__1::function<bool ()>)>}{__compressed_pair<std::__1::function<void (std::__1::function<bool ()>)> *, std::__1::allocator<std::__1::function<void (std::__1::function<bool ()>)> > >=^{function<void (std::__1::function<bool ()>)>}}}}
B12@0:4^{?=ddddddiiI}8
v12@0:4@?<v@?^{CLDataProtectionManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBii@}>8
v16@0:4@?<v@?^{CLDataProtectionManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBii@}>8@?<v@?>12
B12@0:4@?<v@?^{CLDataProtectionManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBii@}>8
^{CLDataProtectionManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDataProtectionManager_Type::Notification, CLDataProtectionManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBii@}8@0:4
B12@0:4i8
v16@0:4i8B12
^{CLStatusBarIconManager={BasicMutex=^^?^{MutexInfo}}@{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}^{__CFRunLoopTimer}BB[6B]i{CLNameValuePair=^^?^{__CFDictionary}}[6[3d]]B}8@0:4
v12@0:4^{CLStatusBarIconManager={BasicMutex=^^?^{MutexInfo}}@{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}^{__CFRunLoopTimer}BB[6B]i{CLNameValuePair=^^?^{__CFDictionary}}[6[3d]]B}8
^{CLStatusBarIconManager={BasicMutex=^^?^{MutexInfo}}@{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >={__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >=^{Client}}}^{__CFRunLoopTimer}BB[6B]i{CLNameValuePair=^^?^{__CFDictionary}}[6[3d]]B}
i12@0:4i8
@24@0:4@8i12d16
v12@0:4@?<v@?^{CLStreamingAwareLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >={__compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >=^{CLStreamingAwareLocationProviderStateMachine}}}@@{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >={__compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double> > >={__tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true> >=L}}}}>8
v16@0:4@?<v@?^{CLStreamingAwareLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >={__compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >=^{CLStreamingAwareLocationProviderStateMachine}}}@@{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >={__compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double> > >={__tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true> >=L}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLStreamingAwareLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >={__compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >=^{CLStreamingAwareLocationProviderStateMachine}}}@@{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >={__compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double> > >={__tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true> >=L}}}}>8
v20@0:4R@8d12
v20@0:4R@"<CLStreamingAwareLocationProviderClientProtocol>"8d12
v12@0:4R@"<CLStreamingAwareLocationProviderClientProtocol>"8
v20@0:4i8d12
^{CLStreamingAwareLocationProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBB{unique_ptr<CLStreamingAwareLocationProviderStateMachine, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >={__compressed_pair<CLStreamingAwareLocationProviderStateMachine *, std::__1::default_delete<CLStreamingAwareLocationProviderStateMachine> >=^{CLStreamingAwareLocationProviderStateMachine}}}@@{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{map<CLLocationProvider_Type::Notification, bool, std::__1::less<CLLocationProvider_Type::Notification>, std::__1::allocator<std::__1::pair<const CLLocationProvider_Type::Notification, bool> > >={__tree<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true>, std::__1::allocator<std::__1::__value_type<CLLocationProvider_Type::Notification, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLLocationProvider_Type::Notification, std::__1::__value_type<CLLocationProvider_Type::Notification, bool>, std::__1::less<CLLocationProvider_Type::Notification>, true> >=L}}}{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLStreamedLocationProvider_Type::Client, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >={__compressed_pair<CLStreamedLocationProvider_Type::Client *, std::__1::default_delete<CLStreamedLocationProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{map<id, double, std::__1::less<id>, std::__1::allocator<std::__1::pair<const id, double> > >={__tree<std::__1::__value_type<id, double>, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true>, std::__1::allocator<std::__1::__value_type<id, double> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id, double>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<id, std::__1::__value_type<id, double>, std::__1::less<id>, true> >=L}}}}8@0:4
{?="endTimestamp"b1"startTimestamp"b1}
@"ALSLocation"
{?="bandclass"b1"bsid"b1"channel"b1"mcc"b1"nid"b1"pnoffset"b1"sid"b1"zoneid"b1}
{?="bandclass"b1"channel"b1"pnoffset"b1}
v12@0:4@?<v@?^{CLSensorCalibrationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary> >={__compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary> >=^{CLAggregateDictionary}}}dddddddddB^{Dispatcher}BBBBBfBdd{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}d@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}iBfdfB{unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController> >={__compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController> >=^{CLSensorTemperatureController}}}d@^{Dispatcher}{CLPowerAssertion=^^?i^v^{__CFString}dd@}{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}}>8
v16@0:4@?<v@?^{CLSensorCalibrationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary> >={__compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary> >=^{CLAggregateDictionary}}}dddddddddB^{Dispatcher}BBBBBfBdd{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}d@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}iBfdfB{unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController> >={__compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController> >=^{CLSensorTemperatureController}}}d@^{Dispatcher}{CLPowerAssertion=^^?i^v^{__CFString}dd@}{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLSensorCalibrationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary> >={__compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary> >=^{CLAggregateDictionary}}}dddddddddB^{Dispatcher}BBBBBfBdd{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}d@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}iBfdfB{unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController> >={__compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController> >=^{CLSensorTemperatureController}}}d@^{Dispatcher}{CLPowerAssertion=^^?i^v^{__CFString}dd@}{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}}>8
^{CLSensorCalibrationController=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorCalibrationController_Type::Notification, CLSensorCalibrationController_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{unique_ptr<CLAggregateDictionary, std::__1::default_delete<CLAggregateDictionary> >={__compressed_pair<CLAggregateDictionary *, std::__1::default_delete<CLAggregateDictionary> >=^{CLAggregateDictionary}}}dddddddddB^{Dispatcher}BBBBBfBdd{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}d@{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}iBfdfB{unique_ptr<CLSensorTemperatureController, std::__1::default_delete<CLSensorTemperatureController> >={__compressed_pair<CLSensorTemperatureController *, std::__1::default_delete<CLSensorTemperatureController> >=^{CLSensorTemperatureController}}}d@^{Dispatcher}{CLPowerAssertion=^^?i^v^{__CFString}dd@}{unique_ptr<CLSensorCalibrationStaticDetector, std::__1::default_delete<CLSensorCalibrationStaticDetector> >={__compressed_pair<CLSensorCalibrationStaticDetector *, std::__1::default_delete<CLSensorCalibrationStaticDetector> >=^{CLSensorCalibrationStaticDetector}}}}8@0:4
{?="altitude"b1"confidence"b1"infoMask"b1"locationType"b1"reach"b1"score"b1"verticalAccuracy"b1}
{?="numberOfSurroundingCdmaCells"b1"numberOfSurroundingCdmaEvdoCells"b1"numberOfSurroundingCells"b1"numberOfSurroundingLteCells"b1"numberOfSurroundingScdmaCells"b1"numberOfSurroundingWifis"b1}
{?="cellID"b1"mcc"b1"mnc"b1"pid"b1"tacID"b1"uarfcn"b1}
{?="numberOfSurroundingWifis"b1"radius"b1"technology"b1"wifiGranularity"b1"needCellsTowers"b1}
v12@0:4@?<v@?^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=I}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelAndLOI>=(?=c{ModelAndLOI={CLMicroLocationModel={vector<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid>, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}{__compressed_pair<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> *, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}}}ii{unordered_map<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> >, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<std::__1::pair<const boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={__hash_table<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true>, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true>, std::__1::allocator<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true> >=f}}}}{unordered_set<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={__hash_table<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>, std::__1::allocator<std::__1::__hash_node<boost::uuids::uuid, void *> > >={__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>=^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<boost::uuids::uuid> >=L}{__compressed_pair<float, std::__1::equal_to<boost::uuids::uuid> >=f}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}@^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}>8
v16@0:4@?<v@?^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=I}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelAndLOI>=(?=c{ModelAndLOI={CLMicroLocationModel={vector<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid>, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}{__compressed_pair<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> *, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}}}ii{unordered_map<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> >, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<std::__1::pair<const boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={__hash_table<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true>, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true>, std::__1::allocator<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true> >=f}}}}{unordered_set<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={__hash_table<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>, std::__1::allocator<std::__1::__hash_node<boost::uuids::uuid, void *> > >={__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>=^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<boost::uuids::uuid> >=L}{__compressed_pair<float, std::__1::equal_to<boost::uuids::uuid> >=f}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}@^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}>8@?<v@?>12
B12@0:4@?<v@?^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=I}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelAndLOI>=(?=c{ModelAndLOI={CLMicroLocationModel={vector<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid>, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}{__compressed_pair<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> *, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}}}ii{unordered_map<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> >, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<std::__1::pair<const boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={__hash_table<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true>, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true>, std::__1::allocator<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true> >=f}}}}{unordered_set<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={__hash_table<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>, std::__1::allocator<std::__1::__hash_node<boost::uuids::uuid, void *> > >={__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>=^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<boost::uuids::uuid> >=L}{__compressed_pair<float, std::__1::equal_to<boost::uuids::uuid> >=f}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}@^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}>8
^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=I}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelAndLOI>=(?=c{ModelAndLOI={CLMicroLocationModel={vector<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid>, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}{__compressed_pair<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> *, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}}}ii{unordered_map<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> >, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<std::__1::pair<const boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={__hash_table<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true>, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true>, std::__1::allocator<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true> >=f}}}}{unordered_set<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={__hash_table<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>, std::__1::allocator<std::__1::__hash_node<boost::uuids::uuid, void *> > >={__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>=^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<boost::uuids::uuid> >=L}{__compressed_pair<float, std::__1::equal_to<boost::uuids::uuid> >=f}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}@^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}8@0:4
@12@0:4^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=I}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelAndLOI>=(?=c{ModelAndLOI={CLMicroLocationModel={vector<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid>, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}{__compressed_pair<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> *, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}}}ii{unordered_map<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> >, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<std::__1::pair<const boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={__hash_table<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true>, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true>, std::__1::allocator<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true> >=f}}}}{unordered_set<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={__hash_table<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>, std::__1::allocator<std::__1::__hash_node<boost::uuids::uuid, void *> > >={__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>=^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<boost::uuids::uuid> >=L}{__compressed_pair<float, std::__1::equal_to<boost::uuids::uuid> >=f}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}@^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}8
^{CLMicroLocationNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMicroLocationNotifier_Type::Notification, CLMicroLocationNotifier_Type::NotificationData, char, CLMicroLocationNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?^^?^^?{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{unique_ptr<CLDarwinNotifier_Type::Client, std::__1::default_delete<CLDarwinNotifier_Type::Client> >={__compressed_pair<CLDarwinNotifier_Type::Client *, std::__1::default_delete<CLDarwinNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLHomeKitProvider_Type::Client, std::__1::default_delete<CLHomeKitProvider_Type::Client> >={__compressed_pair<CLHomeKitProvider_Type::Client *, std::__1::default_delete<CLHomeKitProvider_Type::Client> >=^{Client}}}@@@@{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}@{CLMicroLocationDatabase={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}{unique_ptr<CLMicroLocationConfigurationTable, std::__1::default_delete<CLMicroLocationConfigurationTable> >={__compressed_pair<CLMicroLocationConfigurationTable *, std::__1::default_delete<CLMicroLocationConfigurationTable> >=^{CLMicroLocationConfigurationTable}}}{unique_ptr<CLMicroLocationMeasurementTable, std::__1::default_delete<CLMicroLocationMeasurementTable> >={__compressed_pair<CLMicroLocationMeasurementTable *, std::__1::default_delete<CLMicroLocationMeasurementTable> >=^{CLMicroLocationMeasurementTable}}}{unique_ptr<CLMicroLocationModelTable, std::__1::default_delete<CLMicroLocationModelTable> >={__compressed_pair<CLMicroLocationModelTable *, std::__1::default_delete<CLMicroLocationModelTable> >=^{CLMicroLocationModelTable}}}{unique_ptr<CLMicroLocationRecordingEventsTable, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >={__compressed_pair<CLMicroLocationRecordingEventsTable *, std::__1::default_delete<CLMicroLocationRecordingEventsTable> >=^{CLMicroLocationRecordingEventsTable}}}{BufferedInserts={vector<std::__1::function<bool ()>, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}^{function<bool ()>}{__compressed_pair<std::__1::function<bool ()> *, std::__1::allocator<std::__1::function<bool ()> > >=^{function<bool ()>}}}Q}@}{CLMicroLocationLogic=^^?{State=BB{bitset<2>=I}iiB{optional<std::__1::basic_string<char> >=(?=c{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}})B}{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{AssociationState={optional<CLWifiService_Type::AccessPoint>=(?=c{AccessPoint={CLMacAddress=Q}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}iiiddB})B}}{vector<CLMicroLocationWiFiChannelHistogram, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}^{CLMicroLocationWiFiChannelHistogram}{__compressed_pair<CLMicroLocationWiFiChannelHistogram *, std::__1::allocator<CLMicroLocationWiFiChannelHistogram> >=^{CLMicroLocationWiFiChannelHistogram}}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}{shared_ptr<CLMicroLocationWifiScanStrategy>=^{CLMicroLocationWifiScanStrategy}^{__shared_weak_count}}B{time_point<cl::chrono::CFAbsoluteTimeClock, std::__1::chrono::duration<long double, std::__1::ratio<1, 1> > >={duration<long double, std::__1::ratio<1, 1> >=D}}B{optional<boost::uuids::uuid>=(?=c{uuid=[16C]})B}}^{CLMicroLocationDatabase}{CLMicroLocationLocalizer=^{ILocalizerDelegate}{optional<CLMicroLocationLocalizer::ModelAndLOI>=(?=c{ModelAndLOI={CLMicroLocationModel={vector<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid>, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}{__compressed_pair<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> *, std::__1::allocator<std::__1::pair<CLMicroLocationFingerprint, boost::uuids::uuid> > >=^{pair<CLMicroLocationFingerprint, boost::uuids::uuid>}}}ii{unordered_map<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> >, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<std::__1::pair<const boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={__hash_table<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true>, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true>, std::__1::allocator<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::hash<boost::uuids::uuid>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<boost::uuids::uuid, std::__1::__hash_value_type<boost::uuids::uuid, std::__1::vector<boost::uuids::uuid, std::__1::allocator<boost::uuids::uuid> > >, std::__1::equal_to<boost::uuids::uuid>, true> >=f}}}}{unordered_set<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={__hash_table<boost::uuids::uuid, std::__1::hash<boost::uuids::uuid>, std::__1::equal_to<boost::uuids::uuid>, std::__1::allocator<boost::uuids::uuid> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>, std::__1::allocator<std::__1::__hash_node<boost::uuids::uuid, void *> > >={__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>=^{__hash_node_base<std::__1::__hash_node<boost::uuids::uuid, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<boost::uuids::uuid> >=L}{__compressed_pair<float, std::__1::equal_to<boost::uuids::uuid> >=f}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}})B}{unique_ptr<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >={__compressed_pair<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > *, std::__1::default_delete<std::__1::unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> > > >=^{unordered_multiset<CLMicroLocationProto::Measurement, CLMicroLocationFingerprint::HashMeasurement, CLMicroLocationFingerprint::PredicateMeasurement, std::__1::allocator<CLMicroLocationProto::Measurement> >}}}@^{CLMicroLocationDatabase}}{CLMicroLocationRecorder={unique_ptr<CLMicroLocationRecorder::RecordingTransaction, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >={__compressed_pair<CLMicroLocationRecorder::RecordingTransaction *, std::__1::default_delete<CLMicroLocationRecorder::RecordingTransaction> >=^{RecordingTransaction}}}^{CLMicroLocationDatabase}}{CLMicroLocationSettledStateEstimator=^{CLMicroLocationSettledStateEstimatorDelegate}{CLMicroLocationWiFiSettledStateSequentialEstimator=Sd{unordered_map<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState, std::__1::hash<CLMacAddress>, std::__1::equal_to<CLMacAddress>, std::__1::allocator<std::__1::pair<const CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={__hash_table<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true>, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true>, std::__1::allocator<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::hash<CLMacAddress>, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<CLMacAddress, std::__1::__hash_value_type<CLMacAddress, CLMicroLocationWiFiSettledStateSequentialEstimator::WiFiRssiState>, std::__1::equal_to<CLMacAddress>, true> >=f}}}II}{CLMicroLocationAccelerometerPowerDetector={ConfigurationParameters=ddddd}iddBBd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{State=iii}ii}^{ILogicDelegate}}{unique_ptr<CLMicroLocationBackgroundActivities, std::__1::default_delete<CLMicroLocationBackgroundActivities> >={__compressed_pair<CLMicroLocationBackgroundActivities *, std::__1::default_delete<CLMicroLocationBackgroundActivities> >=^{CLMicroLocationBackgroundActivities}}}@{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{unique_ptr<CLWifiScanner, std::__1::default_delete<CLWifiScanner> >={__compressed_pair<CLWifiScanner *, std::__1::default_delete<CLWifiScanner> >=^{CLWifiScanner}}}{CLPowerAssertion=^^?i^v^{__CFString}dd@}}
{?="channel"b1}
{?="cellLatitude"b1"cellLongitude"b1"bandInfo"b1"ecn0"b1"pid"b1"rscp"b1"rssi"b1"serverHash"b1"uarfcn"b1}
{?="latitude"b1"longitude"b1}
@60@0:4d8i16i20d24d32d40d48@56
v12@0:4R@"<CLEmergencyClientProtocol>"8
v12@0:4@?<v@?^{CLAutopauseProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
v16@0:4@?<v@?^{CLAutopauseProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8@?<v@?>12
B12@0:4@?<v@?^{CLAutopauseProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
^{CLAutopauseProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAutopauseProvider_Type::Notification, CLAutopauseProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}8@0:4
v12@0:4@?<v@?^{CLPeerRangingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?{CLPeerRangingManager=^{CLPeerRangingManagerDelegate}{CLPeerRangeRequest={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}Bd{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}}BBi}^{CLPersistentTimer}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}}>8
v16@0:4@?<v@?^{CLPeerRangingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?{CLPeerRangingManager=^{CLPeerRangingManagerDelegate}{CLPeerRangeRequest={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}Bd{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}}BBi}^{CLPersistentTimer}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLPeerRangingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?{CLPeerRangingManager=^{CLPeerRangingManagerDelegate}{CLPeerRangeRequest={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}Bd{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}}BBi}^{CLPersistentTimer}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}}>8
^{CLPeerRangingNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLPeerRangingNotifier_Type::Notification, CLPeerRangingNotifier_Type::NotificationData, char, CLPeerRangingNotifier_Type::RegInfo>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?^^?{CLPeerRangingManager=^{CLPeerRangingManagerDelegate}{CLPeerRangeRequest={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}Bd{vector<CLRangingPeerInternal, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}^{CLRangingPeerInternal}{__compressed_pair<CLRangingPeerInternal *, std::__1::allocator<CLRangingPeerInternal> >=^{CLRangingPeerInternal}}}}BBi}^{CLPersistentTimer}{unique_ptr<CLWifiServiceClient, std::__1::default_delete<CLWifiServiceClient> >={__compressed_pair<CLWifiServiceClient *, std::__1::default_delete<CLWifiServiceClient> >=^{CLWifiServiceClient}}}}8@0:4
v64@0:4i8d12d20Q28{CLTileFileDownloadDetails=BBBdidBB}36
v44@0:4i8@12{CLTileFileDownloadDetails=BBBdidBB}16
v44@0:4i8@"NSString"12{CLTileFileDownloadDetails=BBBdidBB}16
v12@0:4@?<v@?^{CLTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}dBBdddd^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiiBB{unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal> >={__compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal> >=^{CLITilesManagerExternal}}}{CLTileDownloadPolicy=@dI}BIIB{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}{CLDemTileAvailability={list<unsigned int, std::__1::allocator<unsigned int> >={__list_node_base<unsigned int, void *>=^{__list_node_base<unsigned int, void *>}^{__list_node_base<unsigned int, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *> > >=L}}{LastAvlLookup=BIB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}>8
v16@0:4@?<v@?^{CLTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}dBBdddd^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiiBB{unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal> >={__compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal> >=^{CLITilesManagerExternal}}}{CLTileDownloadPolicy=@dI}BIIB{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}{CLDemTileAvailability={list<unsigned int, std::__1::allocator<unsigned int> >={__list_node_base<unsigned int, void *>=^{__list_node_base<unsigned int, void *>}^{__list_node_base<unsigned int, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *> > >=L}}{LastAvlLookup=BIB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}dBBdddd^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiiBB{unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal> >={__compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal> >=^{CLITilesManagerExternal}}}{CLTileDownloadPolicy=@dI}BIIB{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}{CLDemTileAvailability={list<unsigned int, std::__1::allocator<unsigned int> >={__list_node_base<unsigned int, void *>=^{__list_node_base<unsigned int, void *>}^{__list_node_base<unsigned int, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *> > >=L}}{LastAvlLookup=BIB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}>8
^{CLTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTilesManager_Type::Notification, CLTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}dBBdddd^{CLPersistentTimer}{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiiBB{unique_ptr<CLITilesManagerExternal, std::__1::default_delete<CLITilesManagerExternal> >={__compressed_pair<CLITilesManagerExternal *, std::__1::default_delete<CLITilesManagerExternal> >=^{CLITilesManagerExternal}}}{CLTileDownloadPolicy=@dI}BIIB{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}{CLDemTileAvailability={list<unsigned int, std::__1::allocator<unsigned int> >={__list_node_base<unsigned int, void *>=^{__list_node_base<unsigned int, void *>}^{__list_node_base<unsigned int, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned int, void *> > >=L}}{LastAvlLookup=BIB}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}8@0:4
{?="rawCoordinateLatitude"b1"rawCoordinateLongitude"b1}
@"CRIndoorCMAttitude"
@"CRIndoorCMPedometer"
@"CRIndoorMotionActivity"
@"CRIndoorPressure"
@"CRIndoorWifiScan"
{?="type"b1}
v12@0:4@?<v@?^{CLBTA=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBBB}>8
v16@0:4@?<v@?^{CLBTA=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBBB}>8@?<v@?>12
B12@0:4@?<v@?^{CLBTA=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBBB}>8
^{CLBTA=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTA_Type::Notification, CLBTA_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBBB}8@0:4
@20@0:4d8@?16
v20@0:4d8@16
@"<CLOdometerAlarmManagerProtocol>"
v12@0:4@"CLOdometerAlarm"8
{unique_ptr<CLGnssProvider_Type::Client, std::__1::default_delete<CLGnssProvider_Type::Client> >="__ptr_"{__compressed_pair<CLGnssProvider_Type::Client *, std::__1::default_delete<CLGnssProvider_Type::Client> >="__first_"^{Client}}}
@"CLOdometerAlarm"
{MotionFitnessPedometer={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}IIIIIIIIIiiiiIIIII}8@0:4
v20@0:4^{NSMutableSet=#}8@12@?16
v56@0:4{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}8{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}20{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}32{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}44
v44@0:4{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}8{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}20{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}32
i24@0:4d8d16
I24@0:4d8d16
{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}16@0:4@8@12
^{CLElevationRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSignificantElevation, std::__1::allocator<CLSignificantElevation> >={__split_buffer<CLSignificantElevation *, std::__1::allocator<CLSignificantElevation *> >=^^{CLSignificantElevation}^^{CLSignificantElevation}^^{CLSignificantElevation}{__compressed_pair<CLSignificantElevation **, std::__1::allocator<CLSignificantElevation *> >=^^{CLSignificantElevation}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSignificantElevation> >=L}}if{CLSignificantElevation=i[16C]ddII}i@{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}{CLSqliteCachedStatement=^{CLSqliteDatabase}^{sqlite3_stmt}}@@?{CLSignificantElevation=i[16C]ddII}}
@"HKStatisticsCollection"
{MotionFitnessPedometer="metric"{Metric="valid"B"timestamp"d"bundleId"{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__first_"{__rep=""(?="__l"{__long="__cap_"I"__size_"I"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[11c]}"__r"{__raw="__words"[3L]})}}}}"pctStepsIndoorRun"I"pctStepsIndoorWalk"I"pctStepsOutdoorRun"I"pctStepsOutdoorWalk"I"pctStepsOtherSession"I"pctStepsOutOfSessionRun"I"pctStepsOutOfSessionWalkShort"I"pctStepsOutOfSessionWalkMedium"I"pctStepsOutOfSessionWalkLong"I"pctStepErrorBetweenGizmoCompanionWalk"i"pctStepErrorBetweenGizmoCompanionRun"i"pctDistanceErrorBetweenGizmoCompanionWalk"i"pctDistanceErrorBetweenGizmoCompanionRun"i"pctStepsSteepIncline"I"pctStepsGradualIncline"I"pctStepsFlat"I"pctStepsGradualDecline"I"pctStepsSteepDecline"I}
@44@0:4@8@12d16d24d32i40
@88@0:4{CLOdometerEntry=dddddddddii}8
{CLOdometerEntry=dddddddddii}8@0:4
{CLOdometerEntry="startTime"d"distance"d"accuracy"d"gpsAltitude"d"speed"d"rawSpeed"d"odometer"d"gpsSpeedAccuracy"d"timestampGps"d"quality"i"originDevice"i}
@200@0:4{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}8
{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}8@0:4
{CLExtendedStepCountEntry="startTime"d"base"{CLStepCountEntry="timestamp"d"startTime"d"firstStepTime"d"count"I"distance"d"rawDistance"d"floorsAscended"I"floorsDescended"I"currentPace"d"currentCadence"d"activeTime"d"recordId"i"sourceId"^{__CFString}"isOdometerDistance"B"isOdometerPace"B"accelerometerPace"{CLAccelerometerPace="calibrated"d"lowerBound"d"upperBound"d}"pushCount"I"workoutType"I}"addition"{CLStepCountEntryAddition="totalCalibratedDistance"d"rawPace"d"incrementalSteps"I"incrementalActiveTime"d"firstStepTime"d"lastStepTime"d"odometerSpeed"d"rawPaceDidJump"B"calibratedDistance"d}}
v88@0:4{CLOdometerEntry=dddddddddii}8
v200@0:4{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}8
d12@0:4[5d]8
L8@0:4
{?="basalNatalies"b1"duration"b1"mets"b1"timestamp"b1"basalMETs"b1"recordId"b1}
@12@0:4r^{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}8
{CLDaemonLocationPrivate=dddddfffBi{?=dd}diiB{?=dd}if{?=dd}ddiB}8@0:4
v16@0:4@"NSURLConnection"8@"NSError"12
B12@0:4@"NSURLConnection"8
v16@0:4@"NSURLConnection"8@"NSURLAuthenticationChallenge"12
B16@0:4@"NSURLConnection"8@"NSURLProtectionSpace"12
^{_CFURLRequest=}12@0:4@8
@16@0:4^{_CFURLRequest=}8@12
v16@0:4@"NSURLCredential"8@"NSURLAuthenticationChallenge"12
v12@0:4@"NSURLAuthenticationChallenge"8
@20@0:4^{_CFURLRequest=}8@12@16
v12@0:4^{_CFURLResponse=}8
v16@0:4^{_CFURLAuthChallenge=}8@?12
^{_CFURLConnection=}
@"CLURLConnectionSession"
^{_CFURLAuthChallenge=}
^{__CFURL=}
@12@0:4^{_CFURLConnection=}8
v12@0:4^{_CFURLConnection=}8
^{_CFURLConnection=}16@0:4^{_CFURLRequest=}8@12
^{__CFURLConnectionSession=}
@"NSMapTable"
{?="deltaDistance"b1"deltaDistanceAccuracy"b1"odometer"b1"timestampGps"b1}
@12@0:4^{CLDaemonClient={DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BB}BBBBIiB@BBi{list<std::__1::shared_ptr<CLConnectionMessage>, std::__1::allocator<std::__1::shared_ptr<CLConnectionMessage> > >={__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>=^{__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>}^{__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<CLConnectionMessage>, void *> > >=L}}@I{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@iiBi@BB@^{SBSProcessAssertion}iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BBBB@iiBBBBB@@^{CLConnection}iid@i@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=L}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}ddiiB}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=L}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di}8
^{CLDaemonClient={DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BB}BBBBIiB@BBi{list<std::__1::shared_ptr<CLConnectionMessage>, std::__1::allocator<std::__1::shared_ptr<CLConnectionMessage> > >={__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>=^{__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>}^{__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<CLConnectionMessage>, void *> > >=L}}@I{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@iiBi@BB@^{SBSProcessAssertion}iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BBBB@iiBBBBB@@^{CLConnection}iid@i@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=L}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}ddiiB}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=L}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di}8@0:4
v12@0:4^{CLDaemonClient={DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BB}BBBBIiB@BBi{list<std::__1::shared_ptr<CLConnectionMessage>, std::__1::allocator<std::__1::shared_ptr<CLConnectionMessage> > >={__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>=^{__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>}^{__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<CLConnectionMessage>, void *> > >=L}}@I{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@iiBi@BB@^{SBSProcessAssertion}iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BBBB@iiBBBBB@@^{CLConnection}iid@i@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=L}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}ddiiB}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=L}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di}8
^{CLDaemonClient={DestructionAwareMutex=^^?{shared_ptr<DestructionAwareMutexInternal>=^{DestructionAwareMutexInternal}^{__shared_weak_count}}}@@{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BB}BBBBIiB@BBi{list<std::__1::shared_ptr<CLConnectionMessage>, std::__1::allocator<std::__1::shared_ptr<CLConnectionMessage> > >={__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>=^{__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>}^{__list_node_base<std::__1::shared_ptr<CLConnectionMessage>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<CLConnectionMessage>, void *> > >=L}}@I{map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}B{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@iiBi@BB@^{SBSProcessAssertion}iBB{unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >={__compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLFilteredLocationController_Type::Client, std::__1::default_delete<CLFilteredLocationController_Type::Client> >={__compressed_pair<CLFilteredLocationController_Type::Client *, std::__1::default_delete<CLFilteredLocationController_Type::Client> >=^{Client}}}{unique_ptr<CLSignificantChangeManager_Type::Client, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >={__compressed_pair<CLSignificantChangeManager_Type::Client *, std::__1::default_delete<CLSignificantChangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLCompassDaemonClientNotifier_Type::Client, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >={__compressed_pair<CLCompassDaemonClientNotifier_Type::Client *, std::__1::default_delete<CLCompassDaemonClientNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLBTLEFenceManager_Type::Client, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >={__compressed_pair<CLBTLEFenceManager_Type::Client *, std::__1::default_delete<CLBTLEFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLBTLERangeManager_Type::Client, std::__1::default_delete<CLBTLERangeManager_Type::Client> >={__compressed_pair<CLBTLERangeManager_Type::Client *, std::__1::default_delete<CLBTLERangeManager_Type::Client> >=^{Client}}}{unique_ptr<CLFenceManager_Type::Client, std::__1::default_delete<CLFenceManager_Type::Client> >={__compressed_pair<CLFenceManager_Type::Client *, std::__1::default_delete<CLFenceManager_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >={__compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >=^{Client}}}{unique_ptr<CLAutopauseProvider_Type::Client, std::__1::default_delete<CLAutopauseProvider_Type::Client> >={__compressed_pair<CLAutopauseProvider_Type::Client *, std::__1::default_delete<CLAutopauseProvider_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLOnBodyNotifier_Type::Client, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >={__compressed_pair<CLOnBodyNotifier_Type::Client *, std::__1::default_delete<CLOnBodyNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLStepCountNotifier_Type::Client, std::__1::default_delete<CLStepCountNotifier_Type::Client> >={__compressed_pair<CLStepCountNotifier_Type::Client *, std::__1::default_delete<CLStepCountNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSedentaryTimerNotifier_Type::Client, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >={__compressed_pair<CLSedentaryTimerNotifier_Type::Client *, std::__1::default_delete<CLSedentaryTimerNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLMicroLocationNotifier_Type::Client, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >={__compressed_pair<CLMicroLocationNotifier_Type::Client *, std::__1::default_delete<CLMicroLocationNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLPeerRangingNotifier_Type::Client, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >={__compressed_pair<CLPeerRangingNotifier_Type::Client *, std::__1::default_delete<CLPeerRangingNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLSidebandOverride, std::__1::default_delete<CLSidebandOverride> >={__compressed_pair<CLSidebandOverride *, std::__1::default_delete<CLSidebandOverride> >=^{CLSidebandOverride}}}{unique_ptr<CLSidebandSensorFusion, std::__1::default_delete<CLSidebandSensorFusion> >={__compressed_pair<CLSidebandSensorFusion *, std::__1::default_delete<CLSidebandSensorFusion> >=^{CLSidebandSensorFusion}}}{unique_ptr<CLMotionStateOverride, std::__1::default_delete<CLMotionStateOverride> >={__compressed_pair<CLMotionStateOverride *, std::__1::default_delete<CLMotionStateOverride> >=^{CLMotionStateOverride}}}{unique_ptr<CLMotionStateSim, std::__1::default_delete<CLMotionStateSim> >={__compressed_pair<CLMotionStateSim *, std::__1::default_delete<CLMotionStateSim> >=^{CLMotionStateSim}}}{unique_ptr<CLSwimNotifier_Type::Client, std::__1::default_delete<CLSwimNotifier_Type::Client> >={__compressed_pair<CLSwimNotifier_Type::Client *, std::__1::default_delete<CLSwimNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCompanionNotifier_Type::Client, std::__1::default_delete<CLCompanionNotifier_Type::Client> >={__compressed_pair<CLCompanionNotifier_Type::Client *, std::__1::default_delete<CLCompanionNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLCaptureMode, std::__1::default_delete<CLCaptureMode> >={__compressed_pair<CLCaptureMode *, std::__1::default_delete<CLCaptureMode> >=^{CLCaptureMode}}}@@@@@@@@@@@@@@BdB^{Dispatcher}@d{?=ddddddddddi}{CLNameValuePair=^^?^{__CFDictionary}}{CLNameValuePair=^^?^{__CFDictionary}}BBBB@iiBBBBB@@^{CLConnection}iid@i@dB{PauseState=BBB}B{map<int, CMActivityAlarm *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CMActivityAlarm *> > >={__tree<std::__1::__value_type<int, CMActivityAlarm *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CMActivityAlarm *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CMActivityAlarm *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CMActivityAlarm *>, std::__1::less<int>, true> >=L}}}Bdddd@{shared_ptr<CLPersistentTimer>=^{CLPersistentTimer}^{__shared_weak_count}}BBBBBB{LocationUpdateSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{LocationSystemState=BBBBBiBii}ddddddBi}{LocationMonitorSession={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}ddiiB}{MotionTrigger={Metric=Bd{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}dii{map<std::__1::basic_string<char>, int, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, int> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, int>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}^{CLCompassSessionStatsCollector}^v@@{map<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, std::__1::allocator<std::__1::pair<const CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >={__tree<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true>, std::__1::allocator<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<CLBTLEBeaconRegion_Type::Region, std::__1::__value_type<CLBTLEBeaconRegion_Type::Region, std::__1::set<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::less<CLBTLEBeaconRegion_Type::MonitoredRegion>, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >, std::__1::less<CLBTLEBeaconRegion_Type::Region>, true> >=L}}}{CLCallbackDropManager=^^?{shared_ptr<int>=^i^{__shared_weak_count}}}di}
v12@0:4@?<v@?{CLVehicleConnection=dd[256c]d}>8
v12@0:4@?<v@?^{CLVehicleConnectionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@iiiB@{CLVehicleConnection=dd[256c]d}(NotificationData={CLVehicleConnection=dd[256c]d}){unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}}>8
v16@0:4@?<v@?^{CLVehicleConnectionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@iiiB@{CLVehicleConnection=dd[256c]d}(NotificationData={CLVehicleConnection=dd[256c]d}){unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLVehicleConnectionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@iiiB@{CLVehicleConnection=dd[256c]d}(NotificationData={CLVehicleConnection=dd[256c]d}){unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}}>8
^{CLVehicleConnectionNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLVehicleConnectionNotifier_Type::Notification, CLVehicleConnectionNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@iiiB@{CLVehicleConnection=dd[256c]d}(NotificationData={CLVehicleConnection=dd[256c]d}){unique_ptr<CLBluetoothService_Type::Client, std::__1::default_delete<CLBluetoothService_Type::Client> >={__compressed_pair<CLBluetoothService_Type::Client *, std::__1::default_delete<CLBluetoothService_Type::Client> >=^{Client}}}{unique_ptr<CLMotionState_Type::Client, std::__1::default_delete<CLMotionState_Type::Client> >={__compressed_pair<CLMotionState_Type::Client *, std::__1::default_delete<CLMotionState_Type::Client> >=^{Client}}}}8@0:4
v12@0:4@?<v@?^{CLMotionSyncStore=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}>8
v16@0:4@?<v@?^{CLMotionSyncStore=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLMotionSyncStore=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}>8
^{CLMotionSyncStore=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionSyncStore_Type::Notification, CLMotionSyncStore_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBB@{unique_ptr<CLDataProtectionManager_Type::Client, std::__1::default_delete<CLDataProtectionManager_Type::Client> >={__compressed_pair<CLDataProtectionManager_Type::Client *, std::__1::default_delete<CLDataProtectionManager_Type::Client> >=^{Client}}}}8@0:4
{?="generationTimestamp"b1"modelType"b1"hasAnonymizedMeasurements"b1}
{?="arfcn"b1"ecn0"b1"psc"b1"rat"b1"rscp"b1"serverHash"b1"transmit"b1}
v12@0:4@?<v@?^{CLAppMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}>8
v16@0:4@?<v@?^{CLAppMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLAppMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}>8
^{CLAppMonitor=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLAppMonitor_Type::Notification, CLAppMonitor_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB@{NotificationData=i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}}8@0:4
{?="age"b1"loiType"b1"routineMode"b1"serverHash"b1}
v12@0:4@?<v@?^{CLMotionStateObserver=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBid@B}>8
v16@0:4@?<v@?^{CLMotionStateObserver=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBid@B}>8@?<v@?>12
B12@0:4@?<v@?^{CLMotionStateObserver=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBid@B}>8
^{CLMotionStateObserver=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBid@B}8@0:4
{?="ecn0"b1"pid"b1"rscp"b1"rssi"b1"uarfcn"b1}
v16@0:4r^i8r^(NotificationData={MediatedMotionActivity=d{CLMotionActivity=iiiiBfdBiddii}{CLNatalieFeatures=fffffffiB}BB}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii}i{WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}}{WorkoutEvent=[16C]iidC})12
@"NSMutableData"
{?="channel"b1"ecn0"b1"pilotPhase"b1"pnoffset"b1"rscp"b1}
{?="ecn0"b1"psc"b1"rscp"b1"rssi"b1"uarfcn"b1}
v52@0:4d8d16{CLTileFileDownloadDetails=BBBdidBB}24
v28@0:4{?=dd}8@?24
v28@0:4{?=dd}8@?<v@?i>24
v12@0:4@?<v@?^{CLWifiTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}dBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal> >={__compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal> >=^{CLIWifiTilesManagerExternal}}}{CLTileDownloadPolicy=@dI}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager> >={__compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager> >=^{CLITileSyncManager}}}BB{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}}>8
v16@0:4@?<v@?^{CLWifiTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}dBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal> >={__compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal> >=^{CLIWifiTilesManagerExternal}}}{CLTileDownloadPolicy=@dI}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager> >={__compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager> >=^{CLITileSyncManager}}}BB{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLWifiTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}dBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal> >={__compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal> >=^{CLIWifiTilesManagerExternal}}}{CLTileDownloadPolicy=@dI}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager> >={__compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager> >=^{CLITileSyncManager}}}BB{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}}>8
^{CLWifiTilesManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLWifiTilesManager_Type::Notification, CLWifiTilesManager_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^^?{map<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> >, std::__1::less<TileId>, std::__1::allocator<std::__1::pair<const TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >={__tree<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true>, std::__1::allocator<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TileId, std::__1::__value_type<TileId, std::__1::unique_ptr<CLTileFile, std::__1::default_delete<CLTileFile> > >, std::__1::less<TileId>, true> >=L}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}{DownloadState=*Bd{unique_ptr<CLFileDownload, std::__1::default_delete<CLFileDownload> >={__compressed_pair<CLFileDownload *, std::__1::default_delete<CLFileDownload> >=^{CLFileDownload}}}}dBBd{CLDaemonLocation=ii{?=dd}ddddddddddidi{?=dd}diIii}ddiiB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{unique_ptr<CLIWifiTilesManagerExternal, std::__1::default_delete<CLIWifiTilesManagerExternal> >={__compressed_pair<CLIWifiTilesManagerExternal *, std::__1::default_delete<CLIWifiTilesManagerExternal> >=^{CLIWifiTilesManagerExternal}}}{CLTileDownloadPolicy=@dI}{shared_ptr<CLWifiAccessPointLocationService>=^{CLWifiAccessPointLocationService}^{__shared_weak_count}}{unique_ptr<CLITileSyncManager, std::__1::default_delete<CLITileSyncManager> >={__compressed_pair<CLITileSyncManager *, std::__1::default_delete<CLITileSyncManager> >=^{CLITileSyncManager}}}BB{CLTilesSetCollection={vector<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}{__compressed_pair<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > *, std::__1::allocator<std::__1::unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> > > >=^{unique_ptr<CLTilesSet, std::__1::default_delete<CLTilesSet> >}}}}}8@0:4
{?="probability"b1}
v12@0:4@?<v@?^{CLSensorRecorderNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=L}}if{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=L}}Ii{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=L}}if{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=L}}Ii{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}@@{vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}{__compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > *, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}}}ddddIIIIBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}}>8
v16@0:4@?<v@?^{CLSensorRecorderNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=L}}if{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=L}}Ii{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=L}}if{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=L}}Ii{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}@@{vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}{__compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > *, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}}}ddddIIIIBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}}>8@?<v@?>12
B12@0:4@?<v@?^{CLSensorRecorderNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=L}}if{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=L}}Ii{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=L}}if{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=L}}Ii{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}@@{vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}{__compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > *, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}}}ddddIIIIBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}}>8
^{CLSensorRecorderNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSensorRecorderNotifier_Type::Notification, CLSensorRecorderNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=L}}if{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=L}}Ii{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{CLSensorRecorderDb=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__split_buffer<CLSensorRecorderDataPacket *, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}^^{CLSensorRecorderDataPacket}{__compressed_pair<CLSensorRecorderDataPacket **, std::__1::allocator<CLSensorRecorderDataPacket *> >=^^{CLSensorRecorderDataPacket}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSensorRecorderDataPacket> >=L}}if{CLSensorRecorderDataPacket=dQI{shared_ptr<unsigned char>=*^{__shared_weak_count}}}i@i{list<CLSensorRecorderDataPacket, std::__1::allocator<CLSensorRecorderDataPacket> >={__list_node_base<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}^{__list_node_base<CLSensorRecorderDataPacket, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<CLSensorRecorderDataPacket, void *> > >=L}}Ii{__list_iterator<CLSensorRecorderDataPacket, void *>=^{__list_node_base<CLSensorRecorderDataPacket, void *>}}i{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}@@{vector<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}{__compressed_pair<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > *, std::__1::allocator<std::__1::vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> > > >=^{vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >}}}ddddIIIIBBB{unique_ptr<CLFitnessTrackingNotifier_Type::Client, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >={__compressed_pair<CLFitnessTrackingNotifier_Type::Client *, std::__1::default_delete<CLFitnessTrackingNotifier_Type::Client> >=^{Client}}}}8@0:4
{deque<CLElevationChangeEntry, std::__1::allocator<CLElevationChangeEntry> >="__map_"{__split_buffer<CLElevationChangeEntry *, std::__1::allocator<CLElevationChangeEntry *> >="__first_"^^{CLElevationChangeEntry}"__begin_"^^{CLElevationChangeEntry}"__end_"^^{CLElevationChangeEntry}"__end_cap_"{__compressed_pair<CLElevationChangeEntry **, std::__1::allocator<CLElevationChangeEntry *> >="__first_"^^{CLElevationChangeEntry}}}"__start_"I"__size_"{__compressed_pair<unsigned long, std::__1::allocator<CLElevationChangeEntry> >="__first_"L}}
v12@0:4@?<v@?@"NSSet">8
v12@0:4@?<v@?^{CLBTLEFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
v16@0:4@?<v@?^{CLBTLEFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8@?<v@?>12
B12@0:4@?<v@?^{CLBTLEFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
^{CLBTLEFenceManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}8@0:4
{?="scanCFTimestamp"b1"scanMCTimestamp"b1"flags"b1}
v12@0:4@?<v@?^{CLGpsAssistant=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLTimeOffsetFilter=BBdddddI{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d}B{CLTimeOffsetFilter=BBdddddI{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d}}>8
v16@0:4@?<v@?^{CLGpsAssistant=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLTimeOffsetFilter=BBdddddI{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d}B{CLTimeOffsetFilter=BBdddddI{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d}}>8@?<v@?>12
B12@0:4@?<v@?^{CLGpsAssistant=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLTimeOffsetFilter=BBdddddI{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d}B{CLTimeOffsetFilter=BBdddddI{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d}}>8
^{CLGpsAssistant=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{CLTimeOffsetFilter=BBdddddI{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d}B{CLTimeOffsetFilter=BBdddddI{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}B{CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}d}}8@0:4
@24@0:4i8i12d16
{?="mode"b1}
@28@0:4I8d12@20@?24
@32@0:4I8d12@20r^{Name={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BB}24@?28
@28@0:4I8d12^{__CFRunLoop=}20@?24
^{CLActivityAlarmConcentrator={BasicMutex=^^?^{MutexInfo}}[14{set<CMActivityAlarm *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarm *> >={__tree<CMActivityAlarm *, CLActivityAlarmConcentrator::AlarmCompare, std::__1::allocator<CMActivityAlarm *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<CMActivityAlarm *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, CLActivityAlarmConcentrator::AlarmCompare>=L}}}]}
^{__CFRunLoop=}
v12@0:4@?<v@?^{CLBTLEBeaconProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
v16@0:4@?<v@?^{CLBTLEBeaconProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8@?<v@?>12
B12@0:4@?<v@?^{CLBTLEBeaconProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
^{CLBTLEBeaconProvider=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLEBeaconProvider_Type::Notification, CLBTLEBeaconProvider_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}8@0:4
v12@0:4@?<v@?^{CLDarwinNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBBBBB}>8
v16@0:4@?<v@?^{CLDarwinNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBBBBB}>8@?<v@?>12
B12@0:4@?<v@?^{CLDarwinNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBBBBB}>8
^{CLDarwinNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLDarwinNotifier_Type::Notification, CLNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iBBBBBBBB}8@0:4
v12@0:4r^{CLFallStatsEntry=ddSQQffffffffffffff}8
@"NSFileHandle"
[4096C]
v12@0:4@?<v@?^{CLBeaconFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >={__compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{CLBeaconFenceDatabase={CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}}i@}>8
v16@0:4@?<v@?^{CLBeaconFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >={__compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{CLBeaconFenceDatabase={CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}}i@}>8@?<v@?>12
B12@0:4@?<v@?^{CLBeaconFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >={__compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{CLBeaconFenceDatabase={CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}}i@}>8
^{CLBeaconFenceAuthorizationManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBeaconFenceAuthorizationManager_Type::Notification, CLBeaconFenceAuthorizationManager_Type::NotificationData, char, std::__1::basic_string<char> >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLBTLEBeaconProvider_Type::Client, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >={__compressed_pair<CLBTLEBeaconProvider_Type::Client *, std::__1::default_delete<CLBTLEBeaconProvider_Type::Client> >=^{Client}}}{unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >={__compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >=^{Client}}}{unique_ptr<CLDaemonStatus_Type::Client, std::__1::default_delete<CLDaemonStatus_Type::Client> >={__compressed_pair<CLDaemonStatus_Type::Client *, std::__1::default_delete<CLDaemonStatus_Type::Client> >=^{Client}}}{CLBeaconFenceDatabase={CLSqliteDatabase=^^?^{sqlite3}^{Mutex}{list<sqlite3_stmt *, std::__1::allocator<sqlite3_stmt *> >={__list_node_base<sqlite3_stmt *, void *>=^{__list_node_base<sqlite3_stmt *, void *>}^{__list_node_base<sqlite3_stmt *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<sqlite3_stmt *, void *> > >=L}}{SqliteProperties=iiBB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}i@}}i@}8@0:4
{?="arfcn"b1"psc"b1}
{?="altitude"b1"motionContext"b1"verticalAccuracy"b1}
v12@0:4@?<v@?^{CLBTLERangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
v16@0:4@?<v@?^{CLBTLERangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8@?<v@?>12
B12@0:4@?<v@?^{CLBTLERangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}>8
^{CLBTLERangeManager=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLBTLERangeManager_Type::Notification, CLBTLERangeManager_Type::NotificationData, char, std::__1::list<CLBTLEBeaconRegion_Type::MonitoredRegion, std::__1::allocator<CLBTLEBeaconRegion_Type::MonitoredRegion> > >::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB}8@0:4
v12@0:4@?<v@?^{CLTurnState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{Dispatcher}{CLTurnStateCalc=iiII{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}}{Turn=ii}}>8
v16@0:4@?<v@?^{CLTurnState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{Dispatcher}{CLTurnStateCalc=iiII{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}}{Turn=ii}}>8@?<v@?>12
B12@0:4@?<v@?^{CLTurnState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{Dispatcher}{CLTurnStateCalc=iiII{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}}{Turn=ii}}>8
^{CLTurnState=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLTurnState_Type::Notification, CLTurnState_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB^{Dispatcher}{CLTurnStateCalc=iiII{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLMedianFilter<float>=^^?I{deque<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> *> >=^^{__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<float, std::__1::__tree_node<float, void *> *, int> > >=L}}{multiset<float, std::__1::less<float>, std::__1::allocator<float> >={__tree<float, std::__1::less<float>, std::__1::allocator<float> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<float, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<float> >=L}}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}{CLRunningBufferStats<double>=^^?Idd{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}}}{Turn=ii}}8@0:4
v24@0:4d8d16
@"CLTimer"8@0:4
v12@0:4@"CLTimer"8
v20@0:4d8@?16
@"NSObject<OS_dispatch_queue>"
@"NSOperationQueue"
{?="age"b1"scanTimestamp"b1}
:8@0:4
@"NSMethodSignature"
{map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > >="__tree_"{__tree<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, std::__1::__value_type<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::less<SEL *>, true> >="__first_"L}}}
@"Protocol"
@"CLIntersiloProxy"
@"CLIntersiloInterfaceSelectorInfo"
@"<CLIntersiloProxyDelegateProtocol>"
@"CLIntersiloInterface"
@"<CLIntersiloServiceProtocol>"
B20@0:4^#8^@12@16
{?="workoutType"b1}
@16@0:4^v8@?12
^v8@0:4
@12@0:4^{CLNotifierClientBase=^^?}8
^{CLNotifierClientBase=^^?}
v12@0:4^{CLNotifierBase=^^?}8
^{CLNotifierBase=^^?}8@0:4
{map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > >="__tree_"{__tree<std::__1::__value_type<unsigned long, int>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, int> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, int>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, int>, std::__1::less<unsigned long>, true> >="__first_"L}}}
^{CLNotifierBase=^^?}
v12@0:4^{value_ostream=B^{ostream}}8
@36@0:4d8i16d20d28
@40@0:4d8i16d20d28i36
@"CLHarvestAppRealtimePolygon"
i16@0:4@8I12
i16@0:4@"NSString"8I12
v12@0:4@"NSDictionary"8
v20@0:4@8i12I16
v20@0:4@"NSString"8i12I16
v12@0:4@?<v@?>8
{?="powerSource"b1}
v16@0:4f8f12
@16@0:4f8f12
@24@0:4f8d12f20
@32@0:4I8@12@16@20@24@28
@12@0:4r^{CLSignificantElevation=i[16C]ddII}8
{?="timestampGps"b1"accuracy"b1"distance"b1"gpsAltitude"b1"gpsSpeedAccuracy"b1"quality"b1"rawSpeed"b1"speed"b1}
v16@0:4@"NSArray"8@"NSNumber"12
v12@0:4@?<v@?^{CLStepCountNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLStepCountEntry>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLStepCountEntry> >=^{CLActivityRecorderDb<CLStepCountEntry>}^{__shared_weak_count}}BB}@@{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=L}}BdBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLStepDistanceFusion={CLOdometerQuality=^^?{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}{deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >={__split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}{__compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > **, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >=L}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii}i{WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}{CLNatalieInput<CLExtendedStepCountEntry>=^^?*d{deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry> >={__split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}{__compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry> >=L}}BdBddddBB}^{CLNatalieInput<CLOdometerEntry>}i{CLPedometerPaceFusion=^{CLNatalieInput<CLOdometerEntry>}ddddddd{FirstOrderFilter<double>=idd}{FirstOrderFilter<double>=idd}iiB}iIddiiddddB}B@(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})Bi{CLBodyMetrics=iffffffffif}Bi{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}^{Dispatcher}^{Dispatcher}}>8
v16@0:4@?<v@?^{CLStepCountNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLStepCountEntry>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLStepCountEntry> >=^{CLActivityRecorderDb<CLStepCountEntry>}^{__shared_weak_count}}BB}@@{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=L}}BdBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLStepDistanceFusion={CLOdometerQuality=^^?{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}{deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >={__split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}{__compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > **, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >=L}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii}i{WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}{CLNatalieInput<CLExtendedStepCountEntry>=^^?*d{deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry> >={__split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}{__compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry> >=L}}BdBddddBB}^{CLNatalieInput<CLOdometerEntry>}i{CLPedometerPaceFusion=^{CLNatalieInput<CLOdometerEntry>}ddddddd{FirstOrderFilter<double>=idd}{FirstOrderFilter<double>=idd}iiB}iIddiiddddB}B@(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})Bi{CLBodyMetrics=iffffffffif}Bi{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}^{Dispatcher}^{Dispatcher}}>8@?<v@?>12
B12@0:4@?<v@?^{CLStepCountNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLStepCountEntry>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLStepCountEntry> >=^{CLActivityRecorderDb<CLStepCountEntry>}^{__shared_weak_count}}BB}@@{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=L}}BdBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLStepDistanceFusion={CLOdometerQuality=^^?{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}{deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >={__split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}{__compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > **, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >=L}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii}i{WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}{CLNatalieInput<CLExtendedStepCountEntry>=^^?*d{deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry> >={__split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}{__compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry> >=L}}BdBddddBB}^{CLNatalieInput<CLOdometerEntry>}i{CLPedometerPaceFusion=^{CLNatalieInput<CLOdometerEntry>}ddddddd{FirstOrderFilter<double>=idd}{FirstOrderFilter<double>=idd}iiB}iIddiiddddB}B@(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})Bi{CLBodyMetrics=iffffffffif}Bi{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}^{Dispatcher}^{Dispatcher}}>8
^{CLStepCountNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{shared_ptr<CLStepCountRecorderDb>=^{CLStepCountRecorderDb}^{__shared_weak_count}}{CLActivityAggregator<CLStepCountEntry>={vector<CLAggregationRule, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}^{CLAggregationRule}{__compressed_pair<CLAggregationRule *, std::__1::allocator<CLAggregationRule> >=^{CLAggregationRule}}}{shared_ptr<CLActivityRecorderDb<CLStepCountEntry> >=^{CLActivityRecorderDb<CLStepCountEntry>}^{__shared_weak_count}}BB}@@{CLNatalieSourceFromNotifier<CLOdometerEntry>=^^?*d{deque<CLOdometerEntry, std::__1::allocator<CLOdometerEntry> >={__split_buffer<CLOdometerEntry *, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}^^{CLOdometerEntry}^^{CLOdometerEntry}{__compressed_pair<CLOdometerEntry **, std::__1::allocator<CLOdometerEntry *> >=^^{CLOdometerEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLOdometerEntry> >=L}}BdBddddBB@{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}}{CLStepDistanceFusion={CLOdometerQuality=^^?{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}{deque<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> >, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >={__split_buffer<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}^^{vector<unsigned int, std::__1::allocator<unsigned int> >}{__compressed_pair<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > **, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > *> >=^^{vector<unsigned int, std::__1::allocator<unsigned int> >}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::vector<unsigned int, std::__1::allocator<unsigned int> > > >=L}}{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}i}{MotionOverride=i{CLMotionActivity=iiiiBfdBiddii}i{WorkoutSettings=[16C]i(WorkoutAttrib={SwimAttrib=id})}}{deque<double, std::__1::allocator<double> >={__split_buffer<double *, std::__1::allocator<double *> >=^^d^^d^^d{__compressed_pair<double **, std::__1::allocator<double *> >=^^d}}I{__compressed_pair<unsigned long, std::__1::allocator<double> >=L}}{CLNatalieInput<CLExtendedStepCountEntry>=^^?*d{deque<CLExtendedStepCountEntry, std::__1::allocator<CLExtendedStepCountEntry> >={__split_buffer<CLExtendedStepCountEntry *, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}^^{CLExtendedStepCountEntry}{__compressed_pair<CLExtendedStepCountEntry **, std::__1::allocator<CLExtendedStepCountEntry *> >=^^{CLExtendedStepCountEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLExtendedStepCountEntry> >=L}}BdBddddBB}^{CLNatalieInput<CLOdometerEntry>}i{CLPedometerPaceFusion=^{CLNatalieInput<CLOdometerEntry>}ddddddd{FirstOrderFilter<double>=idd}{FirstOrderFilter<double>=idd}iiB}iIddiiddddB}B@(NotificationData={CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLExtendedStepCountEntry=d{CLStepCountEntry=dddIddIIdddi^{__CFString}BB{CLAccelerometerPace=ddd}II}{CLStepCountEntryAddition=ddIddddBd}}{CLPedometerEvent=di})Bi{CLBodyMetrics=iffffffffif}Bi{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}^{Dispatcher}^{Dispatcher}}8@0:4
v12@0:4@?<v@?^{CLSwimNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider> >={__compressed_pair<CLServiceLocationProvider *, std::__1::default_delete<CLServiceLocationProvider> >=^{CLServiceLocationProvider}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}@@{unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController> >={__compressed_pair<CLSwimAlgController *, std::__1::default_delete<CLSwimAlgController> >=^{CLSwimAlgController}}}{CLSwimDataStore=^^?{vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}^{CLSwimStrokesPerTurnDistribution}{__compressed_pair<CLSwimStrokesPerTurnDistribution *, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}}}{deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >={__split_buffer<CLSwimDataInterface::StrokeEntry *, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}^^{StrokeEntry}^^{StrokeEntry}{__compressed_pair<CLSwimDataInterface::StrokeEntry **, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >=L}}{deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn> >={__split_buffer<CLSwimDetectedTurn *, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}{__compressed_pair<CLSwimDetectedTurn **, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDetectedTurn> >=L}}{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}[6{CLSwimStrokesPerTurnDistribution=[16C][16C]diddiddddd}][6B]{deque<CLSwimDataStore::StyleEntry, std::__1::allocator<CLSwimDataStore::StyleEntry> >={__split_buffer<CLSwimDataStore::StyleEntry *, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}^^{StyleEntry}^^{StyleEntry}{__compressed_pair<CLSwimDataStore::StyleEntry **, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataStore::StyleEntry> >=L}}ddf[16C][16C]difBBB{CLSwimPersistence=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}if{CLSwimEntry=Q[16C][16C]ddddddiiiifff}i@}{CLSwimStrokeRateEstimator={CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}dd}{CLSwimDistanceEstimatorLap=^^?^{CLSwimDataInterface}ii{Estimates=f[6f]}}{CLSwimDistanceEstimatorOpenWater=^^?^{CLSwimDataInterface}{Estimates=f[6f]}iddddd}^{CLSwimDistanceEstimator}i{CLSwimStyleAggregator=[6I]I}{Diagnostics=Id}}{unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion> >={__compressed_pair<CLSwimFusion *, std::__1::default_delete<CLSwimFusion> >=^{CLSwimFusion}}}^{Dispatcher}^{Dispatcher}^{Dispatcher}{CLGizmoOrientation=ii}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >={__compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}BBBB@@}>8
v16@0:4@?<v@?^{CLSwimNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider> >={__compressed_pair<CLServiceLocationProvider *, std::__1::default_delete<CLServiceLocationProvider> >=^{CLServiceLocationProvider}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}@@{unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController> >={__compressed_pair<CLSwimAlgController *, std::__1::default_delete<CLSwimAlgController> >=^{CLSwimAlgController}}}{CLSwimDataStore=^^?{vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}^{CLSwimStrokesPerTurnDistribution}{__compressed_pair<CLSwimStrokesPerTurnDistribution *, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}}}{deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >={__split_buffer<CLSwimDataInterface::StrokeEntry *, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}^^{StrokeEntry}^^{StrokeEntry}{__compressed_pair<CLSwimDataInterface::StrokeEntry **, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >=L}}{deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn> >={__split_buffer<CLSwimDetectedTurn *, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}{__compressed_pair<CLSwimDetectedTurn **, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDetectedTurn> >=L}}{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}[6{CLSwimStrokesPerTurnDistribution=[16C][16C]diddiddddd}][6B]{deque<CLSwimDataStore::StyleEntry, std::__1::allocator<CLSwimDataStore::StyleEntry> >={__split_buffer<CLSwimDataStore::StyleEntry *, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}^^{StyleEntry}^^{StyleEntry}{__compressed_pair<CLSwimDataStore::StyleEntry **, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataStore::StyleEntry> >=L}}ddf[16C][16C]difBBB{CLSwimPersistence=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}if{CLSwimEntry=Q[16C][16C]ddddddiiiifff}i@}{CLSwimStrokeRateEstimator={CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}dd}{CLSwimDistanceEstimatorLap=^^?^{CLSwimDataInterface}ii{Estimates=f[6f]}}{CLSwimDistanceEstimatorOpenWater=^^?^{CLSwimDataInterface}{Estimates=f[6f]}iddddd}^{CLSwimDistanceEstimator}i{CLSwimStyleAggregator=[6I]I}{Diagnostics=Id}}{unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion> >={__compressed_pair<CLSwimFusion *, std::__1::default_delete<CLSwimFusion> >=^{CLSwimFusion}}}^{Dispatcher}^{Dispatcher}^{Dispatcher}{CLGizmoOrientation=ii}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >={__compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}BBBB@@}>8@?<v@?>12
B12@0:4@?<v@?^{CLSwimNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider> >={__compressed_pair<CLServiceLocationProvider *, std::__1::default_delete<CLServiceLocationProvider> >=^{CLServiceLocationProvider}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}@@{unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController> >={__compressed_pair<CLSwimAlgController *, std::__1::default_delete<CLSwimAlgController> >=^{CLSwimAlgController}}}{CLSwimDataStore=^^?{vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}^{CLSwimStrokesPerTurnDistribution}{__compressed_pair<CLSwimStrokesPerTurnDistribution *, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}}}{deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >={__split_buffer<CLSwimDataInterface::StrokeEntry *, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}^^{StrokeEntry}^^{StrokeEntry}{__compressed_pair<CLSwimDataInterface::StrokeEntry **, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >=L}}{deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn> >={__split_buffer<CLSwimDetectedTurn *, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}{__compressed_pair<CLSwimDetectedTurn **, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDetectedTurn> >=L}}{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}[6{CLSwimStrokesPerTurnDistribution=[16C][16C]diddiddddd}][6B]{deque<CLSwimDataStore::StyleEntry, std::__1::allocator<CLSwimDataStore::StyleEntry> >={__split_buffer<CLSwimDataStore::StyleEntry *, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}^^{StyleEntry}^^{StyleEntry}{__compressed_pair<CLSwimDataStore::StyleEntry **, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataStore::StyleEntry> >=L}}ddf[16C][16C]difBBB{CLSwimPersistence=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}if{CLSwimEntry=Q[16C][16C]ddddddiiiifff}i@}{CLSwimStrokeRateEstimator={CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}dd}{CLSwimDistanceEstimatorLap=^^?^{CLSwimDataInterface}ii{Estimates=f[6f]}}{CLSwimDistanceEstimatorOpenWater=^^?^{CLSwimDataInterface}{Estimates=f[6f]}iddddd}^{CLSwimDistanceEstimator}i{CLSwimStyleAggregator=[6I]I}{Diagnostics=Id}}{unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion> >={__compressed_pair<CLSwimFusion *, std::__1::default_delete<CLSwimFusion> >=^{CLSwimFusion}}}^{Dispatcher}^{Dispatcher}^{Dispatcher}{CLGizmoOrientation=ii}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >={__compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}BBBB@@}>8
v128@0:4{CLSwimEntry=Q[16C][16C]ddddddiiiifff}8@?124
v128@0:4{CLSwimEntry=Q[16C][16C]ddddddiiiifff}8@?<v@?@"NSArray">124
^{CLSwimNotifier=^^?{BasicMutex=^^?^{MutexInfo}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}@@{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::Notification>, std::__1::less<int>, true> >=L}}}{map<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >={__tree<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CLNotifier<CLSwimNotifier_Type::Notification, CLSwimNotifier_Type::NotificationData, char, char>::ClientNotifications>, std::__1::less<int>, true> >=L}}}iB{unique_ptr<CLOdometerNotifier_Type::Client, std::__1::default_delete<CLOdometerNotifier_Type::Client> >={__compressed_pair<CLOdometerNotifier_Type::Client *, std::__1::default_delete<CLOdometerNotifier_Type::Client> >=^{Client}}}B{unique_ptr<CLServiceLocationProvider, std::__1::default_delete<CLServiceLocationProvider> >={__compressed_pair<CLServiceLocationProvider *, std::__1::default_delete<CLServiceLocationProvider> >=^{CLServiceLocationProvider}}}{unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >={__compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >=^{Client}}}@@{unique_ptr<CLSwimAlgController, std::__1::default_delete<CLSwimAlgController> >={__compressed_pair<CLSwimAlgController *, std::__1::default_delete<CLSwimAlgController> >=^{CLSwimAlgController}}}{CLSwimDataStore=^^?{vector<CLSwimStrokesPerTurnDistribution, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}^{CLSwimStrokesPerTurnDistribution}{__compressed_pair<CLSwimStrokesPerTurnDistribution *, std::__1::allocator<CLSwimStrokesPerTurnDistribution> >=^{CLSwimStrokesPerTurnDistribution}}}{deque<CLSwimDataInterface::StrokeEntry, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >={__split_buffer<CLSwimDataInterface::StrokeEntry *, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}^^{StrokeEntry}^^{StrokeEntry}{__compressed_pair<CLSwimDataInterface::StrokeEntry **, std::__1::allocator<CLSwimDataInterface::StrokeEntry *> >=^^{StrokeEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataInterface::StrokeEntry> >=L}}{deque<CLSwimDetectedTurn, std::__1::allocator<CLSwimDetectedTurn> >={__split_buffer<CLSwimDetectedTurn *, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}^^{CLSwimDetectedTurn}{__compressed_pair<CLSwimDetectedTurn **, std::__1::allocator<CLSwimDetectedTurn *> >=^^{CLSwimDetectedTurn}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDetectedTurn> >=L}}{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}[6{CLSwimStrokesPerTurnDistribution=[16C][16C]diddiddddd}][6B]{deque<CLSwimDataStore::StyleEntry, std::__1::allocator<CLSwimDataStore::StyleEntry> >={__split_buffer<CLSwimDataStore::StyleEntry *, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}^^{StyleEntry}^^{StyleEntry}{__compressed_pair<CLSwimDataStore::StyleEntry **, std::__1::allocator<CLSwimDataStore::StyleEntry *> >=^^{StyleEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimDataStore::StyleEntry> >=L}}ddf[16C][16C]difBBB{CLSwimPersistence=^^?{auto_ptr<CLSqliteDatabase>=^{CLSqliteDatabase}}*{BasicMutex=^^?^{MutexInfo}}B{deque<CLSwimEntry, std::__1::allocator<CLSwimEntry> >={__split_buffer<CLSwimEntry *, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}^^{CLSwimEntry}^^{CLSwimEntry}{__compressed_pair<CLSwimEntry **, std::__1::allocator<CLSwimEntry *> >=^^{CLSwimEntry}}}I{__compressed_pair<unsigned long, std::__1::allocator<CLSwimEntry> >=L}}if{CLSwimEntry=Q[16C][16C]ddddddiiiifff}i@}{CLSwimStrokeRateEstimator={CLMedianFilter<double>=^^?I{deque<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >={__split_buffer<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}{__compressed_pair<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> **, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> *> >=^^{__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int>}}}I{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__tree_const_iterator<double, std::__1::__tree_node<double, void *> *, int> > >=L}}{multiset<double, std::__1::less<double>, std::__1::allocator<double> >={__tree<double, std::__1::less<double>, std::__1::allocator<double> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<double, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<double> >=L}}}}dd}{CLSwimDistanceEstimatorLap=^^?^{CLSwimDataInterface}ii{Estimates=f[6f]}}{CLSwimDistanceEstimatorOpenWater=^^?^{CLSwimDataInterface}{Estimates=f[6f]}iddddd}^{CLSwimDistanceEstimator}i{CLSwimStyleAggregator=[6I]I}{Diagnostics=Id}}{unique_ptr<CLSwimFusion, std::__1::default_delete<CLSwimFusion> >={__compressed_pair<CLSwimFusion *, std::__1::default_delete<CLSwimFusion> >=^{CLSwimFusion}}}^{Dispatcher}^{Dispatcher}^{Dispatcher}{CLGizmoOrientation=ii}{unique_ptr<CLMotionStateMediator_Type::Client, std::__1::default_delete<CLMotionStateMediator_Type::Client> >={__compressed_pair<CLMotionStateMediator_Type::Client *, std::__1::default_delete<CLMotionStateMediator_Type::Client> >=^{Client}}}{unique_ptr<CLWatchOrientationSettingsNotifier_Type::Client, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >={__compressed_pair<CLWatchOrientationSettingsNotifier_Type::Client *, std::__1::default_delete<CLWatchOrientationSettingsNotifier_Type::Client> >=^{Client}}}{unique_ptr<CLNatalimetryNotifier_Type::Client, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >={__compressed_pair<CLNatalimetryNotifier_Type::Client *, std::__1::default_delete<CLNatalimetryNotifier_Type::Client> >=^{Client}}}BBBB@@}8@0:4
bplist00
 !"#$%&_
DTPlatformVersion_
CFBundleIdentifierZDTCompiler_
CFBundleInfoDictionaryVersion\DTXcodeBuild_
CFBundleVersion_
CFBundleExecutable_
DTPlatformBuildWDTXcode_
CFBundleSupportedPlatforms_
MinimumOSVersion_
CFBundleSignature_
CFBundlePackageType_
BuildMachineOSBuild^DTPlatformNameYDTSDKName_
CFBundleDevelopmentRegionZDTSDKBuild^UIDeviceFamilyS3.2_
com.apple.locationd_
"com.apple.compilers.llvm.clang.1_0S6.0V8V109d[2101.0.54.1YlocationdPT0830
^WatchSimulatorT????TAPPLV15A284^watchsimulator_
watchsimulator3.2WEnglishV14V213
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>FAKETEAMID.com.apple.locationd</string>
<key>aps-connection-initiate</key>
<true/>
<key>backupd-connection-initiate</key>
<true/>
<key>com.apple.BTServer.appleMfgDataScanner</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
<string>identity</string>
<string>bb-xpc</string>
<string>phone</string>
</array>
<key>com.apple.CoreLocation.PrivateMode</key>
<true/>
<key>com.apple.CoreRoutine.LocationOfInterest</key>
<true/>
<key>com.apple.CoreRoutine.ScenarioTrigger</key>
<true/>
<key>com.apple.CoreRoutine.Visit</key>
<true/>
<key>com.apple.SystemConfiguration.SCPreferences-write-access</key>
<array>
<string>com.apple.AutoWake.xml</string>
</array>
<key>com.apple.accounts.appleaccount.fullaccess</key>
<true/>
<key>com.apple.backboard.client</key>
<true/>
<key>com.apple.backboardd.proximityDetection</key>
<true/>
<key>com.apple.companionappd.connect.allow</key>
<true/>
<key>com.apple.coreduet.context</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.developer.extension-host.widget-extension</key>
<true/>
<key>com.apple.developer.healthkit</key>
<true/>
<key>com.apple.geoservices.navigation_info</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.locationd.activity</key>
<true/>
<key>com.apple.locationd.advertise-beacon</key>
<true/>
<key>com.apple.locationd.authorizeapplications</key>
<true/>
<key>com.apple.locationd.configure</key>
<true/>
<key>com.apple.locationd.effective_bundle</key>
<true/>
<key>com.apple.locationd.integritycheck</key>
<true/>
<key>com.apple.locationd.mock_testing</key>
<true/>
<key>com.apple.locationd.natalimetry</key>
<true/>
<key>com.apple.locationd.on_body_detection</key>
<true/>
<key>com.apple.locationd.private_info</key>
<true/>
<key>com.apple.locationd.prompt_behavior</key>
<true/>
<key>com.apple.locationd.ranging</key>
<true/>
<key>com.apple.locationd.rebuild_gytt</key>
<true/>
<key>com.apple.locationd.route_hint</key>
<true/>
<key>com.apple.locationd.sedentary_timer</key>
<true/>
<key>com.apple.locationd.simulation</key>
<true/>
<key>com.apple.locationd.spectator</key>
<true/>
<key>com.apple.locationd.status</key>
<true/>
<key>com.apple.locationd.time_zone</key>
<true/>
<key>com.apple.locationd.usage_oracle</key>
<true/>
<key>com.apple.locationd.vehicle_data</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.multitasking.unlimitedassertions</key>
<true/>
<key>com.apple.nano.nanoregistry</key>
<true/>
<key>com.apple.pairedsync.progressObserver</key>
<true/>
<key>com.apple.pipelined</key>
<array>
<string>positioning</string>
</array>
<key>com.apple.private.externalaccessory.showallaccessories</key>
<true/>
<key>com.apple.private.healthkit</key>
<true/>
<key>com.apple.private.healthkit.authorization_bypass</key>
<true/>
<key>com.apple.private.hid.client.event-dispatch</key>
<true/>
<key>com.apple.private.hid.client.event-monitor</key>
<true/>
<key>com.apple.private.hid.client.service-protected</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.location.motion</string>
<string>com.apple.private.alloy.location.auth</string>
<string>com.apple.private.alloy.location.stream</string>
<string>com.apple.private.alloy.location.usage</string>
<string>com.apple.private.alloy.location.wifitilesync</string>
<string>com.apple.private.alloy.location.motion.livabilityprogram</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.location.auth</string>
<string>com.apple.private.alloy.location.stream</string>
<string>com.apple.private.alloy.location.motion</string>
<string>com.apple.private.alloy.location.usage</string>
<string>com.apple.private.alloy.location.motion.livabilityprogram</string>
</array>
<key>com.apple.private.kernel.override-cpumon</key>
<true/>
<key>com.apple.private.tcc.manager</key>
<true/>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.coreduetd.knowledge</string>
<string>com.apple.coreduetd</string>
<string>com.apple.coreduetd.context</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.system-groups</key>
<array>
<string>systemgroup.com.apple.osanalytics</string>
<string>systemgroup.com.apple.sharedpclogging</string>
</array>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.springboard.launchapplicationswithoptions</key>
<true/>
<key>com.apple.springboard.opensensitiveurl</key>
<true/>
<key>com.apple.springboard.statusbarstyleoverrides</key>
<true/>
<key>com.apple.timed</key>
<true/>
<key>com.apple.wifi.events.private</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>com.apple.wirelessproxd-location</key>
<true/>
<key>fairplay-client</key>
<string>465671667</string>
<key>keychain-access-groups</key>
<array>
<string>apple</string>
</array>
</dict>
</plist>
T0'
TR9
Tn<
TT`
THf
TPg
T$k
T|p
T0! 
Tv+ 
T@; 
Tb< 
Tm= 
Tv? 
T~@ 
T>H 
TP^ 
T:_ 
TNb 
TZh 
T$o 
Tb3!
T|=!
TFD!
TRE!
TVF!
T^I!
T`O!
TFx!
T@{!
T&j"
T44#
T{>#
Td?#
TFG#
TZI#
Tu,$
TLX$
Tr^$
TN%
Tp(&
T`2&
T>>&
T(?&
TtI&
TpO&
T@[&
T e&
T\$'
T''
Td''
T(n'
Tvx'
Tb}'
TJ~'
T<((
Tf/(
TFC(
TTM(
ThT(
T0d(
TPr(
Td%)
T(&)
T"+)
Tz2)
TL5)
T8:)
Tz;)
T\V)
T4y)
TB:*
Td=*
T~"+
T$7+
T^>+
TnN+
TTP+
T:o+
Tvp+
Tbt+
TLz+
T8-,
T`8,
Td:,
TZe,
Tdf,
Tz,
T"1-
T{g-
Tti-
T.j-
Tq-
Tts-
TB/.
Tt5.
TQ\.
T2h.
Tbm.
Tps.
T~~.
T[/
Tn_/
T6g/
Txo/
Tb(0
T4+0
TRC0
T:i0
Txk0
TO1
T^R1
T"u1
Tf*2
Tv-2
TN22
TB62
T~62
Th=2
TpN2
TRP2
TFT2
T,V2
T:X2
T|Y2
Tj]2
Tm2
T$o2
Tt(3
T,+3
TX03
T8E3
TdS3
Tp*4
T.,4
T404
T=n4
Tjw5
Th~5
TtU6
Tx_6
T4h6
T^l6
T2v6
T~v6
T2w6
TR7
TD*7
T~,7
Tb@7
TFA7
T"B7
Tb"8
T #8
T~!9
TJ&9
T$I9
T*J9
ddc9
d,i9
dzr9
dTu9
T$O:
THV:
T2X:
T8[:
TJg:
T$k:
THw:
Tl~:
TD&;
Tr);
T"G;
T"K;
Tn^;
T d;
T^g;
Td<
T&$<
T~)<
T<8<
Tl9<
T(P<
Tlk<
TH<=
TDR=
T\G>
Tk>
Tzp>
Tr|>
Th?
Tj<?
TdV?
Tp\?
TDo?
TDp?
TDs?
TZ|?
T|&@
T|+@
T&5@
T$=@
TJI@
TpM@
TFP@
TlR@
ThU@
TXW@
T0_@
TRa@
TZf@
Tng@
Tth@
Thi@
T.r@
THt@
T.w@
TVx@
TRy@
TP"A
TT-A
Tz3A
TC6A
TRLA
T@YA
TX|A
T`AB
TiuB
T~vB
T8wB
T~zB
Tl}B
Tb.C
Tr D
T02D
Tx<D
TDAD
T6ED
TAHD
TtbD
TfOE
TPUE
TbeE
T2iE
T>nE
TdpE
TH+F
T46F
Tr7F
TN?F
TVdF
T`iF
TDsF
T,tF
T/G
T66G
Tp=G
Tz?G
THEG
T<RG
T>uG
T^+H
TXxH
T$+I
T`/I
TTgI
T0wI
TT(J
TB+J
Tn;J
ThDJ
T*KJ
TVRJ
TzSJ
T<WJ
TPXJ
T8cJ
ThJ
T:pJ
T6qJ
T> K
TXXK
TR[K
TV_K
Th<L
TfAL
TNEL
TpFL
T~IL
T`JL
T|"M
T5,M
T-.M
T03M
ToJM
T2SM
TtkM
THlM
T"mM
T< N
Tn)N
TB2N
T7N
T^@N
TtON
T~)O
TTMO
T&PO
TIlO
TTzO
Tb%P
Tl(P
Td*P
T*,P
TD/P
Th0P
T\5P
TRBP
TtIP
TjTP
T^\P
T<aP
TDbP
TXcP
ThrP
Tc7Q
T'eQ
T9fQ
TFhQ
T"3R
T\zR
T.}R
T0 S
TJ$S
T4%S
T{3S
T:8S
T4FS
TXLS
TBMS
TGZS
Tt[S
TprS
TnyS
TH=T
TLAT
TDDT
T<GT
TFdT
T\oT
T0qT
T<{T
T.'U
T4(U
T2*U
TB+U
Tl0U
T*2U
TT4U
T6<U
T4RU
T$!V
T|(V
TN+V
T:0V
T|1V
TrLV
T$QV
TZTV
T.YV
Tp[V
Tv\V
T[gV
TlqV
TGOW
T<UW
TPbW
TNpW
TLX
TtOX
TJ^X
TJ_X
T.`X
TvbX
TZeX
T>hX
T"kX
T lX
T|nX
T%vX
TF Y
Tj#Y
T4QY
T|UY
T>kY
TZsY
T#BZ
TXRZ
T2&[
T.<[
T~@[
T&s[
T:!\
T2)\
Tl3\
TX8\
T 9\
T~C\
T~H\
Tq]\
T4i\
T`k\
T@o\
TFx\
TLy\
TPI]
T0N]
T4O]
TFS]
TvT]
TjU]
TV_]
TTh]
Tts]
TK{]
Tx1^
TtX^
TZZ^
Tf^^
Tnv^
TNw^
T$x^
TmE_
Tq\_
TVc_
T@>`
T"G`
Tlr`
Tna
T-a
T,.a
T49a
TuOa
Tdua
TT b
T6!b
Tl+b
T >b
TFDb
TzYb
Tv`b
TDab
T0hb
Txob
T\vb
TX$c
TLKc
TRc
Th]d
TN.e
T 1e
T6e
T|7e
Tb@e
T,Ee
TVXe
T&Ye
TWse
TN-f
T*lf
T.vf
TP!g
T(Hg
TLRg
TTrg
T~yg
T67h
TYph
T0uh
T~wh
Tnxh
TQi
T0)i
T,<i
TjDi
TPNi
T`ei
T|mi
Tr|i
T$,j
TN/j
Tt7j
TB8j
T$>j
Tjfj
T<%k
TH&k
T68k
TX9k
T`Ek
T2Hk
TXNk
TPlk
TTuk
Tbwk
TLxk
T>yk
Tt=l
TTWl
T.Xl
T^gl
T&hl
Ttll
TPwl
TP}l
TX!m
Tl$m
T$=m
T\Dm
T~fm
TTgm
T[rm
TWxm
T6zm
T 2n
T*8n
T^Ln
T4an
Tzbn
TV!o
T>$o
T..o
T|/o
Td9o
T2ko
TK
t&TJip
'TVlp
X(T:rp
|(T
(TZup
)T
0)Tbxp
t)TPyp
<*TR}p
`*T
X+T4
|+T
(,T
L,T
p,Tr
,T>
,TR
04T<
d;T9
<TP
T=T
P>TJ
?T>
?T?
|@T4
FT0eq
`GT
GT"
<ITF
ITt
JT>
LJTp
pJT
<KT-
KT@
LTR
4LT
xLT
LTZ
(MT
0NT
DPT
8QT
\QT
$RT
HRT
RT< r
RT,!r
,ST~"r
PST
tST
STz%r
TTV'r
<TT7(r
`TT
(VT
hVTD2r
VTZ3r
VTf4r
VTV5r
XWT"7r
WT:8r
8XT
\XT
\YT
`ZT
T[T
,\T8ir
l\TDjr
<]T
^Txqr
_T0tr
@_T<ur
d_T^vr
_TLwr
`T"xr
0`TB
haT(
aT&
tbT
cTN
eT"
dfT
8gT
\gT
gT.
8hTY
DiTv
iTv
,jT
jT@
lT{
8mT
\mT
mT6
lxT
yTC
HyT 
 zT
DzTf
hzT
zTl
zTV
{T@
`{T
{T:
|TL
$}T
h}T
}T$,s
~T<.s
@~T
~T,3s
T.Zs
Tx[s
T\gs
T4 t
T2!t
Th"t
T$+t
TR,t
Tz-t
Tf.t
TR/t
TnQt
TTYt
T\Zt
TH[t
T:(u
Tz7u
Tl8u
TLHu
T mu
Tr v
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
?(~:
?@)3
Un=H
?td{YX
?nTV
sue
?P-U37
?\h"
]*y?
Cv?0=
s?<V
2Zq?
Ip?1
Cgac?
CWAq
)!X?
V?x)2
A?4a 
)n@?9z
b'H<?
QQB,?
XE&?
$?Pg+
}!?P
X  ?59
>z,i
>V{@V
