=17TriangleRegressor
9Regressor
10CHTriangle
26CHRSketchRecognitionResult
&@333333
?fffff
333333
Mb`?-C
6:?-C
?b2U0*
?333333
MbP?
15CHManhattanLine
6CHLine
9SymbolMap
12CHChatBubble
19ChatBubbleRegressor
9CHEllipse
?333333
?333333
?ffffff
?6MatrixIfE
6CHStar
MbP?
?UUUUUU
E6MatrixIdE
?15CHOutlinedArrow
12CHBasicShape
ffffff
18RectangleRegressor
11CHRectangle
NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
?14CHStraightLine
12CHBezierLine
@333333
;UUUUUU
15CHNeuralNetwork
25CHNeuralNetworkFixedPoint
28CHNeuralNetworkFloatingPoint
NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__114basic_ifstreamIcNS_11char_traitsIcEEEE
NSt3__113basic_filebufIcNS_11char_traitsIcEEEE
6MatrixIsE
10MatrixMMapIsE
10MatrixMMapIfE
6MatrixIiE
10CHPentagon
bounds
pointCountForStrokeIndex:
pointForStrokeIndex:pointIndex:
retain
copy
release
alloc
init
addPoint:
length
enumerateSubstringsInRange:options:usingBlock:
class
score
string
stringWithFormat:
description
initWithScore:
setScore:
_score
initWithString:score:rare:wordRanges:wordIDs:lexicalEntry:patternEntry:
wordIDs
count
wordRanges
countByEnumeratingWithState:objects:count:
unsignedIntValue
rangeValue
dealloc
initWithString:score:rare:wordRanges:wordIDs:
mecabraCandidate
rare
lexicalEntry
patternEntry
_rare
_lexicalEntry
_patternEntry
_string
_wordRanges
_wordIDs
initWithString:score:rotation:
rotation
_rotation
initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:pathPoints:
initWithString:score:rotation:startLocation:startEndpointType:endLocation:endEndpointType:midPointLocation:controlPointLocation:
startEndpointType
endEndpointType
startLocation
endLocation
midpointLocation
controlPoint
pathPoints
cornerLine
_cornerLine
_startEndpointType
_endEndpointType
_pathPoints
_startLocation
_endLocation
_midpointLocation
_controlPoint
initWithString:score:rotation:center:size:controlPointLocation:
center
size
_center
_size
initWithString:score:rotation:upperLeftPoint:upperRightPoint:lowerLeftPoint:lowerRightPoint:
upperLeftPoint
upperRightPoint
lowerLeftPoint
lowerRightPoint
_upperLeftPoint
_upperRightPoint
_lowerLeftPoint
_lowerRightPoint
initWithString:score:rotation:vertex1:vertex2:vertex3:
vertex1
vertex2
vertex3
_vertex1
_vertex2
_vertex3
initWithString:score:rotation:center:size:
initWithString:score:rotation:center:size:stemLocation:stemWidth:
stemLocation
stemWidth
_stemWidth
_stemLocation
array
numberWithInt:
arrayWithObjects:count:
stringByAppendingString:
valueWithRange:
autorelease
addObject:
_defaultPunctuationResultsForRecognitionType:
indexSet
_loadEngineModel
initWithType:mode:locale:learningDictionaryURL:
stringByAppendingPathExtension:
UTF8String
stringWithUTF8String:
characterAtIndex:
appendString:
_isOVSString:
isEqualToString:
lowercaseString
obfuscateString:
_transliterationVariantsForString:
rangeOfComposedCharacterSequenceAtIndex:
substringWithRange:
_alternativeInterpretationsForString:
substringToIndex:
characterType:
sharedRootCursor
sharedCursorByAdvancingWithCharacterTypes:withLength:fromCursor:
characterSetWithCharactersInString:
stringByTrimmingCharactersInSet:
stringWithString:
replaceOccurrencesOfString:withString:options:range:
lastPathComponent
stringByDeletingPathExtension
stringByDeletingLastPathComponent
numberWithBool:
dictionaryWithObjects:forKeys:count:
localeIdentifier
languageCode
caseInsensitiveCompare:
scriptCode
_isLocaleSupported:
initWithLocaleIdentifier:
_prepareOVSTrie
_prepareTransliterationVariantMap
_prepareCHCharacterLanguageModel
_prepareStaticLexicon
logCandidateIfAppropriate:
initWithType:mode:learningDictionaryURL:
releaseLMResources
numberWithInteger:
objectForKey:
addCharactersInRange:
sketchDescriptionForCode:
sketchCodeForDescription:
integerValue
orientationRepresentationForSampling:convolutionWidth:
strokeCount
manhattanLineCandidateResultForDrawing:candidate:rejectionResult:
pointCount
valueWithPoint:
insertObject:atIndex:
chatBubbleCandidateResultForDrawing:candidate:
ellipseCandidateResultForDrawing:candidate:
rectangleCandidateResultForDrawing:candidate:
triangleCandidateResultForDrawing:candidate:
starCandidateResultForDrawing:candidate:
lineCandidateResultForDrawing:candidate:rejectionResult:
pentagonCandidateResultForDrawing:candidate:
outlineArrowCandidateResultForDrawing:candidate:
objectAtIndex:
exchangeObjectAtIndex:withObjectAtIndex:
firstObject
predicateWithBlock:
filterUsingPredicate:
substringFromIndex:
_rescoreCandidatesWithLanguageModel:history:
_applyTransliterationAndSyntheticCandidates:
_removeOVSResults:withHistory:
_legacyRescoreCandidatesWithLanguageModel:history:
postProcessLatticePaths:history:activeHistoryRange:
addObjectsFromArray:
stringWithCharacters:length:
_applySentenceTransliterationCandidates:codesLen:codesMax:
stringByReplacingOccurrencesOfString:withString:
containsObject:
indexOfObjectPassingTest:
arrayWithObjects:
orthographyWithDominantScript:languageMap:
enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:
componentsSeparatedByCharactersInSet:
componentsJoinedByString:
expectedMinStrokeCount:
compare:options:
_shouldCapitalizeGivenHistory:
_updateResults:string:score:lexicalEntry:patternEntry:
_computeEditPenalizationFromString:toReferenceString:withSuffix:withDiacriticSensitivity:withDiacriticsCharSet:withConsumableStrokesCharSet:outputSuffix:
numberWithDouble:
compare:
sortUsingComparator:
removeAllObjects
_filterNonHumanFriendlyCandidates:
indexOfObject:
matchingStrokePrefixRangeForDrawing:
setCachedDrawing:
clear
endStroke
_legacyBestNetworkPaths:count:mecabraIDs:
containsStrokeLessThanSize:
defaultPunctuationResultsForRecognitionType:
precomposedStringWithCanonicalMapping
bestNetworkPaths:count:lexiconCursor:patternCursor:history:activeHistoryRange:
sortedArrayUsingComparator:
strokeIndicesSortedByMinXCoordinate
setLineHeight:
removeAllIndexes
_legacyRecognitionResultsForSingleCharacterDrawing:options:
addIndexesInRange:
_legacyRecognitionResultsForMultipleCharacterDrawing:sortedStrokeIndices:network:options:ch:shouldCancel:
addIndex:
setSavedDrawing:
setSavedTop1CandidateString:
recognitionResultsForMultipleCharacterDrawing:sortedStrokeIndices:network:options:ch:shouldCancel:
setSaveDrawingUntilNextCandidateAccepted:
recognitionResultsForSketchDrawing:options:
recognitionResultsForSingleCharacterDrawing:options:
_performMultipleCharacterRecognition:options:shouldCancel:
recognitionResultsForDrawing:options:shouldCancel:
decimalDigitCharacterSet
punctuationCharacterSet
letterCharacterSet
rangeOfCharacterFromSet:
_tokenIDForUNKCharacterString:
_legacyDefaultPunctuationResultsForRecognitionType:
isOVSString:
transliterationVariantsForString:
updateAddressBookLexicon:
updateUserDictionaryLexicon:
candidatesCleared
candidateAccepted:
completionsForCandidate:prefix:option:
completionsForCandidate:candidateContext:prefix:option:
strokeIndexesForLastCharacter
initWithType:mode:
supportedCharacterSet
supportedStrings
characterSetForStrings:
endpointsForDrawing:startLocation:endLocation:
_legacyPerformMultipleCharacterRecognition:options:shouldCancel:
recognitionResultsForDrawing:options:
setMaxRecognitionResultCount:
setRecognitionType:
setRecognitionMode:
setActiveCharacterSet:
.cxx_destruct
.cxx_construct
maxRecognitionResultCount
recognitionType
recognitionMode
activeCharacterSet
engine
setEngine:
freeformEngine
setFreeformEngine:
recognitionQueue
setRecognitionQueue:
minimumDrawingSize
radicalClusterFST
setRadicalClusterFST:
formatGrammarFST
setFormatGrammarFST:
locale
setLocale:
languageModel
setLanguageModel:
characterLanguageModel
setCharacterLanguageModel:
mecabra
setMecabra:
mecabraStaticLexicon
setMecabraStaticLexicon:
mecabraDynamicLexicon
setMecabraDynamicLexicon:
ovsTrie
setOvsTrie:
learningDictionaryURL
setLearningDictionaryURL:
savedDrawing
savedTop1CandidateString
saveDrawingUntilNextCandidateAccepted
cachedDrawing
cachedResults
setCachedResults:
transliterationVariantMap
setTransliterationVariantMap:
icuTransliterator
setIcuTransliterator:
lastCharacterStrokeCount
setLastCharacterStrokeCount:
lastCharacterStrokeIndexes
setLastCharacterStrokeIndexes:
_saveDrawingUntilNextCandidateAccepted
_maxRecognitionResultCount
_recognitionType
_recognitionMode
_activeCharacterSet
_engine
_freeformEngine
_recognitionQueue
_radicalClusterFST
_formatGrammarFST
_locale
_languageModel
_characterLanguageModel
_mecabra
_mecabraStaticLexicon
_mecabraDynamicLexicon
_ovsTrie
_learningDictionaryURL
_savedDrawing
_savedTop1CandidateString
_cachedDrawing
_transliterationVariantMap
_icuTransliterator
_lastCharacterStrokeCount
_lastCharacterStrokeIndexes
_minimumDrawingSize
_cachedResults
intValue
cStringUsingEncoding:
drawing
setDrawing:
allocWithZone:
copyWithZone:
initWithContentsOfFile:
strokeBoundsAtIndex:
isPrefixForDrawing:
xyRepresentation
bitmapRepresentationForSize:
bitmapRepresentationForSize:drawingAlgorithm:
sortedDrawing
_drawing
capitalizedString
countryCode
uppercaseString
lengthOfBytesUsingEncoding:
mutableCopy
replaceCharactersInRange:withString:
nextFIFO
emitPoint:
flush
initWithFIFO:
setNextFIFO:
_nextFIFO
strokes
setStrokes:
_strokes
initWithFIFO:width:spacing:
emitAveragedPoint
initWithFIFO:width:
width
setWidth:
spacing
setSpacing:
prevPoints
setPrevPoints:
_width
_spacing
_prevPoints
setUnitScale:
path
setPath:
view
lineWidth
setNeedsDisplayInRect:
interpolateFromPoint:toPoint:controlPoint:time:
initWithFIFO:strokeView:
setUnitScaleForViewSize:normalizedSize:contentScaleFactor:
unitScale
emitInterpolatedPoints
setEmitInterpolatedPoints:
emissionHandler
setEmissionHandler:
setLineWidth:
points
setPoints:
controlPoints
setControlPoints:
lastPoint
setLastPoint:
setView:
_emitInterpolatedPoints
_unitScale
_emissionHandler
_path
_lineWidth
_view
_points
_controlPoints
_lastPoint
sharedPatternGraph
graph
setGraph:
_graph
expectedMaxStrokeCount:
defaultCStringEncoding
stringWithCString:encoding:
dataWithContentsOfFile:
JSONObjectWithData:options:error:
characterIsMember:
sharedCharacterSetRules
_expectedMaxStrokeCount:
_expectedMinStrokeCount:
_characterType:
alphanumericCharacterSet
invertedSet
lowercaseCharSet
setLowercaseCharSet:
uppercaseCharSet
setUppercaseCharSet:
digitCharSet
setDigitCharSet:
startPunctuationCharSet
setStartPunctuationCharSet:
middlePunctuationCharSet
setMiddlePunctuationCharSet:
endPunctuationCharSet
setEndPunctuationCharSet:
digitStartPunctuationCharSet
setDigitStartPunctuationCharSet:
digitEndPunctuationCharSet
setDigitEndPunctuationCharSet:
arithmeticOperatorCharSet
setArithmeticOperatorCharSet:
dateTimeSeparatorCharSet
setDateTimeSeparatorCharSet:
dateTimeEndLetterCharSet
setDateTimeEndLetterCharSet:
numeralEndLetterCharSet
setNumeralEndLetterCharSet:
lexiconSkipCharSet
setLexiconSkipCharSet:
containsDotCharSet
setContainsDotCharSet:
prefixCapitalizationExceptionCharSet
setPrefixCapitalizationExceptionCharSet:
selfLoopPunctuationCharSet
setSelfLoopPunctuationCharSet:
emoticonTopCharSet
setEmoticonTopCharSet:
emoticonMiddleCharSet
setEmoticonMiddleCharSet:
emoticonBottomCharSet
setEmoticonBottomCharSet:
strokeMaxPenalties
setStrokeMaxPenalties:
signatureUniChar
setSignatureUniChar:
_lowercaseCharSet
_uppercaseCharSet
_digitCharSet
_startPunctuationCharSet
_middlePunctuationCharSet
_endPunctuationCharSet
_digitStartPunctuationCharSet
_digitEndPunctuationCharSet
_arithmeticOperatorCharSet
_dateTimeSeparatorCharSet
_dateTimeEndLetterCharSet
_numeralEndLetterCharSet
_lexiconSkipCharSet
_containsDotCharSet
_prefixCapitalizationExceptionCharSet
_selfLoopPunctuationCharSet
_emoticonTopCharSet
_emoticonMiddleCharSet
_emoticonBottomCharSet
_strokeMaxPenalties
_signatureUniChar
CHTriangle
CHRecognitionOptionTextBefore
v28@?0@"NSString"4{_NSRange=II}8{_NSRange=II}16^B24
class: %@ score: %3.5f string: %@
score
Td,V_score
rare
TB,R,V_rare
string
T@"NSString",R,V_string
wordRanges
T@"NSArray",R,V_wordRanges
wordIDs
T@"NSArray",R,V_wordIDs
lexicalEntry
TB,R,V_lexicalEntry
patternEntry
TB,R,V_patternEntry
rotation
Tf,R,V_rotation
startEndpointType
Ti,R,V_startEndpointType
endEndpointType
Ti,R,V_endEndpointType
startLocation
T{CGPoint=ff},R,V_startLocation
endLocation
T{CGPoint=ff},R,V_endLocation
midpointLocation
T{CGPoint=ff},R,V_midpointLocation
controlPoint
T{CGPoint=ff},R,V_controlPoint
pathPoints
T@"NSArray",R,V_pathPoints
cornerLine
TB,R,V_cornerLine
center
T{CGPoint=ff},R,V_center
size
T{CGSize=ff},R,V_size
upperLeftPoint
T{CGPoint=ff},R,V_upperLeftPoint
upperRightPoint
T{CGPoint=ff},R,V_upperRightPoint
lowerLeftPoint
T{CGPoint=ff},R,V_lowerLeftPoint
lowerRightPoint
T{CGPoint=ff},R,V_lowerRightPoint
vertex1
T{CGPoint=ff},R,V_vertex1
vertex2
T{CGPoint=ff},R,V_vertex2
vertex3
T{CGPoint=ff},R,V_vertex3
stemLocation
T{CGPoint=ff},R,V_stemLocation
stemWidth
Tf,R,V_stemWidth
Freeform
synthetics_
odat
v4@?0
%@%@
012olzOLZ
hans
hant
zh.bin
zh-Hans
zh-Hant
vo.bin
vo_other.bin
is.bin
gd.bin
Oval
Line
Outline Arrow
Triangle
Rectangle
Pentagon
Manhattan Line
Chat Bubble
Star
Heart
Cloud
Scribble
com.apple.CoreHandwriting
HWRTriangleAlignToAxisThreshold
HWRTriangleIsoscelesLengthRatioThreshold
HWRTriangleEquilateralLengthRatioThreshold
HWROvalFitToCircleRadiiRatioThreshold
HWROvalAlignToIncrementsOf
HWRRectangleFitToSquareLengthRatioThreshold
HWRRectangleAlignToIncrementsOf
HWROutlinedArrowAlignToIncrementsOf
HWRLineAlignToAxisThreshold
HWRLineLengthRatioThreshold
B12@?0@"CHTextRecognitionResult"4@"NSDictionary"8
B16@?0@"CHTextRecognitionResult"4I8^B12
'".-
%@%@%@
v32@?0I4r*8d12I20I24^B28
i12@?0@4@8
engine
T^{CHNeuralNetwork=^^?i*I^IIIIIII},N,V_engine
freeformEngine
T^{CHNeuralNetwork=^^?i*I^IIIIIII},N,V_freeformEngine
recognitionQueue
T@"NSObject<OS_dispatch_queue>",N,V_recognitionQueue
minimumDrawingSize
T{CGSize=ff},R,N,V_minimumDrawingSize
radicalClusterFST
T^{Network={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >={__tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long> >=L}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}B{map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true> >=L}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=L}}}^II},N,V_radicalClusterFST
formatGrammarFST
T^{Network={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >={__tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long> >=L}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}B{map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true> >=L}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=L}}}^II},N,V_formatGrammarFST
locale
T@"NSLocale",N,V_locale
languageModel
T^v,N,V_languageModel
characterLanguageModel
T^v,N,V_characterLanguageModel
mecabra
T^{__Mecabra=},N,V_mecabra
mecabraStaticLexicon
T^v,N,V_mecabraStaticLexicon
mecabraDynamicLexicon
T^v,N,V_mecabraDynamicLexicon
ovsTrie
T^{_CFBurstTrie=},N,V_ovsTrie
learningDictionaryURL
T@"NSURL",&,N,V_learningDictionaryURL
savedDrawing
T@"CHDrawing",C,N,V_savedDrawing
savedTop1CandidateString
T@"NSString",C,N,V_savedTop1CandidateString
saveDrawingUntilNextCandidateAccepted
TB,N,V_saveDrawingUntilNextCandidateAccepted
cachedDrawing
T@"CHDrawing",C,N,V_cachedDrawing
cachedResults
T{map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >={__tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> >=L}}},N,V_cachedResults
transliterationVariantMap
T^{VariantMap=^i^i^ii^iI},N,V_transliterationVariantMap
icuTransliterator
T^^v,N,V_icuTransliterator
lastCharacterStrokeCount
TI,N,V_lastCharacterStrokeCount
lastCharacterStrokeIndexes
T@"NSMutableIndexSet",N,V_lastCharacterStrokeIndexes
maxRecognitionResultCount
TI,N,V_maxRecognitionResultCount
recognitionType
Ti,N,V_recognitionType
recognitionMode
Ti,N,V_recognitionMode
activeCharacterSet
T@"NSCharacterSet",&,N,V_activeCharacterSet
CHChatBubble
CHEllipse
CHManhattanLine
without spatial boundary 
0.5 
greedy-on-orgseq
greedy-on-0.3seq
greedy-on-spat-seq
greedy-lattice-on-spat-seq
detailed: 
from non-linear
CHStar
%d %d
%d %d %d
drawing
T{CJKChar={vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}^{vector<double, std::__1::allocator<double> >}{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}}}{vector<bool, std::__1::allocator<bool> >=^LI{__compressed_pair<unsigned long, std::__1::allocator<unsigned long> >=L}}{vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}^{vector<double, std::__1::allocator<double> >}{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}}}II{Matrix<double>=^^?^dII}d{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}},N,V_drawing
%@-%@_%@
%@_%@
%@-%@
nextFIFO
T@"CHPointFIFO",&,N,V_nextFIFO
strokes
T@"CHDrawing",N,V_strokes
T@"CHDrawing",N,V_drawing
prevPoints
T{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}},N,V_prevPoints
width
TI,N,V_width
spacing
Tf,N,V_spacing
points
T{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}},N,V_points
controlPoints
T{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}},N,V_controlPoints
lastPoint
T,N,V_lastPoint
view
T@"UIView",&,N,V_view
unitScale
Tf,N,V_unitScale
emitInterpolatedPoints
TB,N,V_emitInterpolatedPoints
emissionHandler
T@?,C,V_emissionHandler
path
T^{CGPath=},N,V_path
lineWidth
Tf,N,V_lineWidth
0x%x
CHOutlinedArrow
CHRectangle
%.10g
graph
T^{PatternGraph={list<PatternGraph *, std::__1::allocator<PatternGraph *> >={__list_node_base<PatternGraph *, void *>=^{__list_node_base<PatternGraph *, void *>}^{__list_node_base<PatternGraph *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PatternGraph *, void *> > >=L}}I},N,V_graph
CHStraightLine
CHBezierLine
<div style="clear:both;margin:auto;font-size:250%%;" >
<p>WARNING : NOTHING WAS SAVED : YOU MUST CLICK ON THE FOLLOWING LINK !</p>
<p><a href="#" onclick="SendMail(%d);">Send via email to Antoine !</a></p>
</div>
<p>For information, here are the files you flagged:</p>
<p id="po-term%d" style="margin:0;" \>
</body>
</html>
CHPentagon
Node[
has in degree zero but is not marked as an initial node
    max mlp %f
    min mlp %f
    max mlp bias %f
    min mlp bias %f
    min bit count requirement %d
    fixed bit count: %d
        sign bits:       %d
        fractional bits: %d
        integer bits:    %d
error: min mlp bits needed %i is less than allocated %li
error: min bias bits needed %i is less than allocated %li
    max conv %f
    min conv %f
input-width
input-height
type
vectorInput
vector-length
ConvolutionMaxPool
kernel-width
kernel-height
kernel-count
pool-width
pool-height
activation-function
tanh-lecun
rectified-linear
output-size
    padding hidden count to %i
Reading MLP Layer Weights...
Reading Convolution Layer Weights...
.,;:)!?"
^*+=<>.,
:'"-/
apmAPM.
strdndth.
:;B=
)(pPDoOxX*
lowercaseCharSet
T@"NSCharacterSet",&,N,V_lowercaseCharSet
uppercaseCharSet
T@"NSCharacterSet",&,N,V_uppercaseCharSet
digitCharSet
T@"NSCharacterSet",&,N,V_digitCharSet
startPunctuationCharSet
T@"NSCharacterSet",&,N,V_startPunctuationCharSet
middlePunctuationCharSet
T@"NSCharacterSet",&,N,V_middlePunctuationCharSet
endPunctuationCharSet
T@"NSCharacterSet",&,N,V_endPunctuationCharSet
digitStartPunctuationCharSet
T@"NSCharacterSet",&,N,V_digitStartPunctuationCharSet
digitEndPunctuationCharSet
T@"NSCharacterSet",&,N,V_digitEndPunctuationCharSet
arithmeticOperatorCharSet
T@"NSCharacterSet",&,N,V_arithmeticOperatorCharSet
dateTimeSeparatorCharSet
T@"NSCharacterSet",&,N,V_dateTimeSeparatorCharSet
dateTimeEndLetterCharSet
T@"NSCharacterSet",&,N,V_dateTimeEndLetterCharSet
numeralEndLetterCharSet
T@"NSCharacterSet",&,N,V_numeralEndLetterCharSet
lexiconSkipCharSet
T@"NSCharacterSet",&,N,V_lexiconSkipCharSet
containsDotCharSet
T@"NSCharacterSet",&,N,V_containsDotCharSet
prefixCapitalizationExceptionCharSet
T@"NSCharacterSet",&,N,V_prefixCapitalizationExceptionCharSet
selfLoopPunctuationCharSet
T@"NSCharacterSet",&,N,V_selfLoopPunctuationCharSet
emoticonTopCharSet
T@"NSCharacterSet",&,N,V_emoticonTopCharSet
emoticonMiddleCharSet
T@"NSCharacterSet",&,N,V_emoticonMiddleCharSet
emoticonBottomCharSet
T@"NSCharacterSet",&,N,V_emoticonBottomCharSet
strokeMaxPenalties
T{map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long> > >={__tree<std::__1::__value_type<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true> >=L}}},N,V_strokeMaxPenalties
signatureUniChar
T{map<unsigned int, int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int> > >={__tree<std::__1::__value_type<unsigned int, int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true> >=L}}},N,V_signatureUniChar
CHRecognitionResult
CHTextRecognitionResult
CHSketchRecognitionResult
CHLineSketchRecognitionResult
CHManhattanLineSketchRecognitionResult
CHOutlinedArrowSketchRecognitionResult
CHRectangleSketchRecognitionResult
CHTriangleRecognitionResult
CHEllipseRecognitionResult
CHChatBubbleRecognitionResult
CHStarRecognitionResult
CHPentagonRecognitionResult
CHScribbleRecognitionResult
CHHeartRecognitionResult
CHCloudRecognitionResult
CHFreeformRecognitionResult
CHRecognizer
CHDrawing
NSCopying
CHPointFIFO
CHPointStrokeFIFO
CHBoxcarFilterPointFIFO
CHQuadCurvePointFIFO
CHPatternGraph
CHCharacterSetRules
@8@0:4
@16@0:4d8
d8@0:4
v16@0:4d8
@40@0:4@8d12B20@24@28B32B36
@32@0:4@8d12B20@24@28
v8@0:4
B8@0:4
@"NSString"
@"NSArray"
@24@0:4@8d12f20
f8@0:4
@68@0:4@8d12f20{CGPoint=ff}24i32{CGPoint=ff}36i44{CGPoint=ff}48{CGPoint=ff}56@64
@64@0:4@8d12f20{CGPoint=ff}24i32{CGPoint=ff}36i44{CGPoint=ff}48{CGPoint=ff}56
i8@0:4
{CGPoint=ff}8@0:4
{CGPoint="x"f"y"f}
@48@0:4@8d12f20{CGPoint=ff}24{CGSize=ff}32{CGPoint=ff}40
{CGSize=ff}8@0:4
{CGSize="width"f"height"f}
@56@0:4@8d12f20{CGPoint=ff}24{CGPoint=ff}32{CGPoint=ff}40{CGPoint=ff}48
@48@0:4@8d12f20{CGPoint=ff}24{CGPoint=ff}32{CGPoint=ff}40
@40@0:4@8d12f20{CGPoint=ff}24{CGSize=ff}32
@52@0:4@8d12f20{CGPoint=ff}24{CGSize=ff}32{CGPoint=ff}40f48
@12@0:4i8
d36@0:4@8@12@16B20@24@28^@32
@24@0:4i8i12^{__CFLocale=}16@20
@20@0:4i8i12@16
@12@0:4@8
B12@0:4@8
v12@0:4^v8
v12@0:4@8
{vector<const void *, std::__1::allocator<const void *> >=^^v^^v{__compressed_pair<const void **, std::__1::allocator<const void *> >=^^v}}20@0:4@8@12L16
{vector<const void *, std::__1::allocator<const void *> >=^^v^^v{__compressed_pair<const void **, std::__1::allocator<const void *> >=^^v}}24@0:4@8@12@16L20
@16@0:4i8i12
v20@0:4@8^{CGPoint=ff}12^{CGPoint=ff}16
@16@0:4@8^{CHCandidateResult=If}12
@20@0:4@8^{CHCandidateResult=If}12^@16
@16@0:4@8@12
v16@0:4@8@12
@36@0:4^{Network={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >={__tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long> >=L}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}B{map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true> >=L}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=L}}}^II}8I12^v16^{PatternGraph=}20@24{_NSRange=II}28
@20@0:4^{Network={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >={__tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long> >=L}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}B{map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true> >=L}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=L}}}^II}8I12^{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}16
B32@0:4@8@12d16B24B28
@24@0:4r^{vector<LatticePath, std::__1::allocator<LatticePath> >=^{LatticePath}^{LatticePath}{__compressed_pair<LatticePath *, std::__1::allocator<LatticePath> >=^{LatticePath}}}8@12{_NSRange=II}16
@32@0:4@8^{vector<unsigned long, std::__1::allocator<unsigned long> >=^L^L{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >=^L}}12^{Network={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >={__tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long> >=L}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}B{map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true> >=L}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=L}}}^II}16@20^{Hanzi={vector<std::__1::vector<Coord, std::__1::allocator<Coord> >, std::__1::allocator<std::__1::vector<Coord, std::__1::allocator<Coord> > > >=^{vector<Coord, std::__1::allocator<Coord> >}^{vector<Coord, std::__1::allocator<Coord> >}{__compressed_pair<std::__1::vector<Coord, std::__1::allocator<Coord> > *, std::__1::allocator<std::__1::vector<Coord, std::__1::allocator<Coord> > > >=^{vector<Coord, std::__1::allocator<Coord> >}}}}24@?28
@20@0:4@8@12@?16
@20@0:4^S8i12i16
v12@0:4^{vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >=^{CHCandidateResult}^{CHCandidateResult}{__compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> >=^{CHCandidateResult}}}8
I12@0:4@8
v16@0:4^{vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >=^{CHCandidateResult}^{CHCandidateResult}{__compressed_pair<CHCandidateResult *, std::__1::allocator<CHCandidateResult> >=^{CHCandidateResult}}}8@12
v12@0:4I8
v12@0:4i8
I8@0:4
^{CHNeuralNetwork=^^?i*I^IIIIIII}8@0:4
v12@0:4^{CHNeuralNetwork=^^?i*I^IIIIIII}8
^{Network={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >={__tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long> >=L}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}B{map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true> >=L}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=L}}}^II}8@0:4
v12@0:4^{Network={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >={__tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long> >=L}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}B{map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true> >=L}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=L}}}^II}8
^v8@0:4
^{__Mecabra=}8@0:4
v12@0:4^{__Mecabra=}8
^{_CFBurstTrie=}8@0:4
v12@0:4^{_CFBurstTrie=}8
v12@0:4B8
{map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >={__tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> >=L}}}8@0:4
v20@0:4{map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >={__tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> >=L}}}8
^{VariantMap=^i^i^ii^iI}8@0:4
v12@0:4^{VariantMap=^i^i^ii^iI}8
^^v8@0:4
v12@0:4^^v8
@"NSCharacterSet"
^{CHNeuralNetwork=^^?i*I^IIIIIII}
@"NSObject<OS_dispatch_queue>"
^{Network={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}I{vector<NetworkNode, std::__1::allocator<NetworkNode> >=^{NetworkNode}^{NetworkNode}{__compressed_pair<NetworkNode *, std::__1::allocator<NetworkNode> >=^{NetworkNode}}}{set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >={__tree<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long> >=L}}}{vector<NetworkEdge, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}^{NetworkEdge}{__compressed_pair<NetworkEdge *, std::__1::allocator<NetworkEdge> >=^{NetworkEdge}}}{vector<const NetworkEdge *, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}^^{NetworkEdge}{__compressed_pair<const NetworkEdge **, std::__1::allocator<const NetworkEdge *> >=^^{NetworkEdge}}}{SymbolMap=^^?{vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}{__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}}{map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}}B{map<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > >, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >={__tree<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, std::__1::map<unsigned long, unsigned long, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, unsigned long> > > >, std::__1::less<unsigned long>, true> >=L}}}{set<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >={__tree<uint128, std::__1::less<uint128>, std::__1::allocator<uint128> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<uint128, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<uint128> >=L}}}^II}
@"NSLocale"
^{__Mecabra=}
^{_CFBurstTrie=}
@"NSURL"
@"CHDrawing"
^{VariantMap=^i^i^ii^iI}
@"NSMutableIndexSet"
{map<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, std::__1::allocator<std::__1::pair<const std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >="__tree_"{__tree<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > > > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::__value_type<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> >, std::__1::vector<CHCandidateResult, std::__1::allocator<CHCandidateResult> > >, std::__1::less<std::__1::set<unsigned long, std::__1::less<unsigned long>, std::__1::allocator<unsigned long> > >, true> >="__first_"L}}}
@12@0:4^{_NSZone=}8
v520@0:4{CJKChar={vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}^{vector<double, std::__1::allocator<double> >}{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}}}{vector<bool, std::__1::allocator<bool> >=^LI{__compressed_pair<unsigned long, std::__1::allocator<unsigned long> >=L}}{vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}^{vector<double, std::__1::allocator<double> >}{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}}}II{Matrix<double>=^^?^dII}d{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}}8
I12@0:4I8
{CGPoint=ff}16@0:4I8I12
B16@0:4{CGSize=ff}8
{CGRect={CGPoint=ff}{CGSize=ff}}12@0:4I8
{CGRect={CGPoint=ff}{CGSize=ff}}8@0:4
v16@0:4{CGPoint=ff}8
{_NSRange=II}12@0:4@8
{Matrix<float>=^^?^fII}16@0:4{CGSize=ff}8
{Matrix<float>=^^?^fII}20@0:4{CGSize=ff}8i16
{Matrix<float>=^^?^fII}16@0:4I8I12
{vector<unsigned long, std::__1::allocator<unsigned long> >=^L^L{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >=^L}}8@0:4
{CJKChar={vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}^{vector<double, std::__1::allocator<double> >}{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}}}{vector<bool, std::__1::allocator<bool> >=^LI{__compressed_pair<unsigned long, std::__1::allocator<unsigned long> >=L}}{vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}^{vector<double, std::__1::allocator<double> >}{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >=^{vector<double, std::__1::allocator<double> >}}}II{Matrix<double>=^^?^dII}d{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}}8@0:4
{CJKChar="strokeBounds"{vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >="__begin_"^{vector<double, std::__1::allocator<double> >}"__end_"^{vector<double, std::__1::allocator<double> >}"__end_cap_"{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >="__first_"^{vector<double, std::__1::allocator<double> >}}}"strokeBoundsValidity"{vector<bool, std::__1::allocator<bool> >="__begin_"^L"__size_"I"__cap_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<unsigned long> >="__first_"L}}"strokes"{vector<std::__1::vector<double, std::__1::allocator<double> >, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >="__begin_"^{vector<double, std::__1::allocator<double> >}"__end_"^{vector<double, std::__1::allocator<double> >}"__end_cap_"{__compressed_pair<std::__1::vector<double, std::__1::allocator<double> > *, std::__1::allocator<std::__1::vector<double, std::__1::allocator<double> > > >="__first_"^{vector<double, std::__1::allocator<double> >}}}"currentStrokeIndex"I"mSize"I"bitmap"{Matrix<double>="_vptr$Matrix"^^?"_data"^d"_w"I"_h"I}"lineHeight"d"sparseBitmap"{vector<int, std::__1::allocator<int> >="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::__1::allocator<int> >="__first_"^i}}}
v24@0:48
@"CHPointFIFO"
@20@0:4@8I12f16
@16@0:4@8I12
v12@0:4f8
{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}}8@0:4
v20@0:4{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^^{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >=^}}8
{vector<float __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(4))), std::__1::allocator<float __attribute__((ext_vector_type(4)))> >="__first_"^}}
60@0:482440f56
v28@0:4{CGSize=ff}8{CGSize=ff}16f24
@?8@0:4
v12@0:4@?8
^{CGPath=}8@0:4
v12@0:4^{CGPath=}8
8@0:4
^{CGPath=}
@"UIView"
^{PatternGraph={list<PatternGraph *, std::__1::allocator<PatternGraph *> >={__list_node_base<PatternGraph *, void *>=^{__list_node_base<PatternGraph *, void *>}^{__list_node_base<PatternGraph *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PatternGraph *, void *> > >=L}}I}20@0:4^I8L12^{PatternGraph={list<PatternGraph *, std::__1::allocator<PatternGraph *> >={__list_node_base<PatternGraph *, void *>=^{__list_node_base<PatternGraph *, void *>}^{__list_node_base<PatternGraph *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PatternGraph *, void *> > >=L}}I}16
^{PatternGraph={list<PatternGraph *, std::__1::allocator<PatternGraph *> >={__list_node_base<PatternGraph *, void *>=^{__list_node_base<PatternGraph *, void *>}^{__list_node_base<PatternGraph *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PatternGraph *, void *> > >=L}}I}8@0:4
v12@0:4^{PatternGraph={list<PatternGraph *, std::__1::allocator<PatternGraph *> >={__list_node_base<PatternGraph *, void *>=^{__list_node_base<PatternGraph *, void *>}^{__list_node_base<PatternGraph *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PatternGraph *, void *> > >=L}}I}8
^{PatternGraph={list<PatternGraph *, std::__1::allocator<PatternGraph *> >={__list_node_base<PatternGraph *, void *>=^{__list_node_base<PatternGraph *, void *>}^{__list_node_base<PatternGraph *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PatternGraph *, void *> > >=L}}I}
L12@0:4I8
{map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long> > >={__tree<std::__1::__value_type<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true> >=L}}}8@0:4
v20@0:4{map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long> > >={__tree<std::__1::__value_type<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true> >=L}}}8
{map<unsigned int, int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int> > >={__tree<std::__1::__value_type<unsigned int, int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true> >=L}}}8@0:4
v20@0:4{map<unsigned int, int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int> > >={__tree<std::__1::__value_type<unsigned int, int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, int> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, int>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true> >=L}}}8
{map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long> > >="__tree_"{__tree<std::__1::__value_type<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, unsigned long> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, unsigned long>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, unsigned long>, std::__1::less<unsigned int>, true> >="__first_"L}}}
{map<unsigned int, int, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, int> > >="__tree_"{__tree<std::__1::__value_type<unsigned int, int>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, int> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, int>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, int>, std::__1::less<unsigned int>, true> >="__first_"L}}}
Locale '%@' is incompatible with the kCHRecognitionTypeSimplifiedChinese type, falling back to default locale.
Locale '%@' is incompatible with the kCHRecognitionTypeTraditional type, falling back to default locale.
Locale '%@' is incompatible with the kCHRecognitionTypeRoman type, falling back to default locale.
Error: unable to mmap resource %s
Unsupported Model Version %s
Unsupported Neural Network Encoding %s
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
