NanoMusicCore
NanoMediaRemote
NanoAudioControl
NanoMusicSync
v4@?0
com.apple.nanomusic
<%@ %p '%@'>
name
T@"NSString",R,N,V_name
PerformanceTestingEnabled
timestamp
SkipToNextTrack
SkipCommandSent
yyyy-MM-dd-HHmmssSSS
/tmp/NanoMusic-%@-PPT-Results_%@.plist
com.apple.notifyd.matching
v8@?0@"NSObject<OS_xpc_object>"4
command
TI,N,V_command
commandResultsHandler
T@?,C,N,V_commandResultsHandler
persistentID
T@"NSNumber",C,N,V_persistentID
albumPersistentID
T@"NSNumber",C,N,V_albumPersistentID
com.apple.nanomediaremoted.NMRDaemonServer
com.apple.nanomediaremoted.commandResultHandlerAccessQueue
MediaRemoteGetState
v8@?0^{__CFArray=}4
PrewarmSystemMusicApp
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
; failed to send the command IDS message
; failed to receive a command response IDS message in time
MediaRemoteGetArtwork
v8@?0I4
MediaRemoteGetIcon
Companion
v16@?0I4^{__CFDictionary=}8@?<v@?^{__CFArray=}>12
v12@?0C4^{_MROrigin=}8
v12@?0^v4@?<v@?^v^{__CFError=}>8
GetCloudAvailability
GetSpecializedQueueInfo
com.apple.NanoMusic
com.apple.NanoNowPlaying
v8@?0C4
alloc
initWithName:
init
copy
dealloc
class
stringWithFormat:
runAssertionWithName:
description
.cxx_destruct
name
_name
date
setDateFormat:
stringFromDate:
writeToFile:atomically:
standardUserDefaults
boolForKey:
writeResultsToDisk:forTest:
perfTestingEnabled
machAbsoluteTimeGetCurrent
server
gizmoServer
sharedManager
setLocalPlaybackIdleTimeoutTimerEnabled:
command
setCommand:
commandResultsHandler
setCommandResultsHandler:
_command
_commandResultsHandler
persistentID
setPersistentID:
albumPersistentID
setAlbumPersistentID:
_persistentID
_albumPersistentID
setDelegate:
_handleMediaRemoteSetStateMessage:
setMessageHandlerTarget:action:forIncomingMessagesOfType:
_handleMediaRemoteSetArtworkMessage:
_handleMediaRemoteSetIconMessage:
_handleRemoteMediaCommandResponseMessage:
_handleSetCloudAvailabilityMessage:
_handleSetSpecializedQueueInfoMessage:
startHandlingMessages
sharedTimeline
defaultCenter
sharedController
_requestSnapshot
addObserver:selector:name:object:
_reevaluateMusicPlaybackSource
_registerMediaRemoteCustomOriginForCompanionNowPlayingInfo
initWithMachServiceName:
resume
addObserver:
refreshMediaRemoteStateIfNecessary
_requestInitialStateIfUnlocked
isConnected
_clearAllMediaRemoteState
_refreshMediaRemoteStateIfNecessary
messageWithNowPlayingInfoDigest:applicationInfoDigest:supportedCommandsDigest:playbackQueueDigest:
protobufData
sendMessageWithProtobufData:messageType:priority:timeout:bypassDuet:skipStorage:expectReply:queueOneIdentifier:resultingMessageIdentifier:error:
numberWithInt:
dictionaryWithObjects:forKeys:count:
_handleMediaRemoteCommand:forOrigin:withOptions:commandResultHandler:
availabilityForTrackPID:
processIdentifier
sendMediaRemoteCommand:withCommandOptions:commandResultHandler:
prewarmCompanionSystemMusicApp
fetchCompanionCloudAvailabilityWithCompletionHandler:
fetchCompanionSpecializedQueueInfoWithCompletionHandler:
fetchTrackAssetAvailabilityForTrackPID:completionHandler:
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
interfaceWithProtocol:
setExportedInterface:
setExportedObject:
setInvalidationHandler:
arrayWithObjects:count:
_invokeCommandResultHandlerForIDSMessageIdentifier:returnStatuses:failedToSend:expired:complainIfMissing:
context
incomingResponseIdentifier
data
initWithProtobufData:
handlerReturnStatuses
_popPendingMediaRemoteCommandResultHandlerWithIdentifier:
componentsJoinedByString:
setObject:forKeyedSubscript:
objectForKeyedSubscript:
removeObjectForKey:
companionBundleIdentifier
nowPlayingInfoData
_handleMediaRemoteSetNowPlayingInfoStateMessage:
applicationInfoData
_handleMediaRemoteSetNowPlayingApplicationInfoStateMessage:
supportedCommandsData
_handleMediaRemoteSetSupportedCommandsStateMessage:
playbackQueueData
_handleMediaRemotePlaybackQueueData:
jpegArtwork
originalDigest
_handleMediaRemoteSetNowPlayingArtwork:digest:
icon
bundleID
_handleMediaRemoteSetNowPlayingApplicationIcon:digest:bundleID:
mutableCopy
boolValue
_localEntityInfoForCompanionItemPersistentID:
_cachedArtworkWithDigest:
_localArtworkDataForItemWithPersistentID:
_cacheArtworkData:withDigest:
_updateMediaRemoteWithCurrentCompanionNowPlayingInfo
_requestArtwork
_updateMediaRemoteWithCurrentCompanionNowPlayingApplicationInfo
_updateMediaRemoteWithCurrentCompanionSupportedCommands
fetchOrCreateIconWithBundleID:type:
digest
iconWithBundleID:data:digest:
setCachedIcon:withType:
length
updateWithData:
fullPlaybackQueueData
iconDigest
playbackState
watchBundleIdentifier
localizedDisplayName
_requestIcon
playbackSource
isLocalPlaybackIdleTimeoutTimerExpired
setPlaybackSource:
sizeOfIconForCurrentDevice
messageWithIconWidth:height:bundleID:
_updateActiveOriginForCurrentPlaybackSource
_registerPlaybackQueueCallbackForOrigin:
copyMediaRemotePlaybackQueueWithRange:includeMetadata:
messageWithCommand:options:
_perfTestingCommandSent:
_pushPendingMediaRemoteCommandResultHandler:withIdentifier:
setValue:forKey:
nowPlayingState
isFirstPartyMusicApp
_infoChangedBetweenPreviousState:currentState:
_requestSnapshotForBundleIdentifier:
title
setTitle:
artist
setArtist:
album
setAlbum:
sharedInstance
invalidateSnapshotForBundleId:
scheduleItemWithDate:userInfo:
snapshotRequestWithSnapshotSchedule:fileProtectionClass:
setSnapshotRequest:forBundleID:
count
objectForKey:
sharedLibrary
predicateWithProperty:equalToValue:
anyInLibrary:predicate:
numberWithLongLong:
valueForProperty:
setObject:forKey:
_localArtworkURLForItemWithPersistentID:
dataWithContentsOfURL:
longLongValue
initWithPersistentID:inLibrary:
pathWithComponents:
fileURLWithPath:isDirectory:
setTotalCostLimit:
setObject:forKey:cost:
_requestInitialState
_requestCloudAvailabilityUpdate
_requestSpecializedQueueInfoUpdate
numberWithDouble:
listener:shouldAcceptNewConnection:
messageCenter:messageWithIdentifier:didSendWithSuccess:error:
playbackQueueDidChange:
playbackQueue:contentItemsDidChange:
manager:connectivityDidChange:
_prewarmMusicAppForPlaybackSourceChange
_serialQueue
_companionOrigin
_pendingRegistrationOfCompanionOrigin
_companionOriginRegistrationRetryInterval
_currentNowPlayingInfoDigest
_currentNowPlayingInfo
_currentNowPlayingArtworkDigest
_currentNowPlayingArtworkData
_currentSupportedCommandsDigest
_currentSupportedCommands
_currentNowPlayingApplicationInfoDigest
_currentNowPlayingApplicationInfo
_localEntityInfoCache
_artworkDataByDigestCache
_messageCenter
_clientListener
_pendingMediaRemoteCommandResultHandlers
_commandResultHandlerAccessQueue
_currentCloudAvailabilityProtobufData
_currentSpecializedQueueInfoProtobufData
_isObservingDeviceLockStatus
_playbackQueue
_currentPlaybackQueueDigest
_previousMusicNowPlayingState
_previousGeneralNowPlayingState
Starting transaction %@.
Ending transaction %@.
Received SIGTERM; exiting.
Received notifyd event type: %@, name: %s.
Hello, world!
Connectivity state changed to disconnected; clearing media remote state.
Connectivity state changed to connected; refreshing media remote state.
Lost connection to client with PID %d.
Accepted connection to client with PID %d.
Received a MediaRemote command response IDS message without a reply identifier! This should never happen!
Failed to find a pending command reply handler to invoke for IDS message reply (ID: %@).
Invoking command reply handler for MediaRemote command %d with handlerReturnStatuses [%@]%@ (ID: %@).
Successfully cached a new icon sized %lu Bytes for %@
Handling playback queue data
Attempted to set supported commands without a Companion origin; deferring until custom origin is registered.
Setting supported commands for origin %@: %@
Failed to set the now playing application's supported commands for the Companion origin (%u).
Received set state message for now playing application info, with companionBundleID: %@, watchBundleID: %@, displayName: %@, playbackState: %@.
Requesting the new icon for %@
Attempted to set now playing application info without a Companion origin; deferring until custom origin is registered.
Setting now playing application info for origin %@: %@-%@
Failed to set the now playing application's display name for the Companion origin (%u).
Failed to set the now playing application's bundle ID for the Companion origin (%u).
Failed to set the now playing application's playback state for the Companion origin (%u).
Companion Music app becomes active while NanoMusic is idle. Switching NanoMusic playback source from Local to Remote.
NanoMusic is active. Skip source switching.
Successfully registered a media remote origin for the Companion.
Failed to register a media remote origin for the Companion. Attempting again in %.2fs.
Registering playback queue callback
Received media remote command %d for custom origin %@ (options: %@).
Request to deliver IDS message for MediaRemote command %d failed immediately with error "%@".
Queueing up an async. command result handler for MediaRemote command %d, and waiting for the Companion to reply.
Attempted to set now playing info without a Companion origin; deferring until custom origin is registered.
Setting now playing info for origin %@: %@
There is artwork data available; re-inserting into the now playing info.
There is no artwork data available; sending the now playing info as-is.
Requesting a new snapshot for %@.
Playback queue changed, posting notification
Playback queue content items changed, posting changed item list (count %zd)
Setting the active origin to %@ based on the current playback source (%@)...
Active origin is now %@.
Failed to set active origin to %@!
Skipping setting the companion origin because we don't have one yet.
NMRRunAssertion
NMPerfTestingUtil
_NMRPendingMediaRemoteCommandResultHandler
_NMRItemEntityInfo
NMRServiceInterface
NSObject
NMRDaemonServer
NSXPCListenerDelegate
NMRIDSMessageCenterDelegate
NMRPlaybackQueueDelegate
NMCConnectivityObserver
@12@0:4@8
v8@0:4
@8@0:4
@"NSString"
v16@0:4@8@12
B8@0:4
d8@0:4
I8@0:4
v12@0:4I8
@?8@0:4
v12@0:4@?8
v12@0:4@8
@"NSNumber"
v20@0:4I8@12@?16
v20@0:4I8@"NSDictionary"12@?<v@?@"NSDictionary">16
v12@0:4@?<v@?@"NSData">8
v16@0:4@8@?12
v16@0:4@"NSNumber"8@?<v@?i>12
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4@"Protocol"8
B12@0:4:8
Vv8@0:4
^{_NSZone=}8@0:4
@"NSString"8@0:4
B16@0:4@8@12
B16@0:4@"NSXPCListener"8@"NSXPCConnection"12
v24@0:4@8@12B16@20
v24@0:4@"NMRIDSMessageCenter"8@"NSString"12B16@"NSError"20
v12@0:4@"NMRPlaybackQueue"8
v16@0:4@"NMRPlaybackQueue"8@"NSArray"12
v16@0:4@8B12
v16@0:4@"NMCConnectivityManager"8B12
v28@0:4@8@12B16B20B24
v20@0:4@8@12@16
v12@0:4^{_MROrigin=}8
v24@0:4I8^{_MROrigin=}12@16@?20
@"NSObject<OS_dispatch_queue>"
^{_MROrigin=}
@"NSData"
@"NSDictionary"
@"NSArray"
@"NMRNowPlayingApplicationInfo"
@"NSCache"
@"NMRIDSMessageCenter"
@"NSXPCListener"
@"NSMutableDictionary"
@"NMRPlaybackQueue"
@"NMUNowPlayingState"
bplist00
 !"_
DTPlatformVersion_
CFBundleIdentifierZDTCompiler_
CFBundleInfoDictionaryVersion\DTXcodeBuild_
DTPlatformBuild_
CFBundleExecutable_
CFBundleAllowMixedLocalizationsWDTXcode_
CFBundleSupportedPlatforms_
MinimumOSVersion_
BuildMachineOSBuild^DTPlatformNameYDTSDKName_
CFBundleDevelopmentRegionZDTSDKBuild^UIDeviceFamilyS3.2_
nanomediaremoted_
"com.apple.compilers.llvm.clang.1_0S6.0V8V109dP_
nanomediaremoted
T0830
^WatchSimulatorV15A284^watchsimulator_
watchsimulator3.2WEnglishV14V227
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>FAKETEAMID.nanomediaremoted</string>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.audiocontrol.music</string>
<string>com.apple.private.alloy.mediaremote</string>
</array>
<key>com.apple.private.ids.messaging.urgent-priority</key>
<array>
<string>com.apple.private.alloy.audiocontrol.music</string>
<string>com.apple.private.alloy.mediaremote</string>
</array>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
</array>
</dict>
</plist>
