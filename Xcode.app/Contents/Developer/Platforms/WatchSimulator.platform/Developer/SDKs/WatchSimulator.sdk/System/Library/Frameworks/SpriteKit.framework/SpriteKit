19SKCReferencedAction
0C10SKCAnimate
9SKCAction
?11SKCColorize
7SKCFade
88SKCGroup
7SKCMove
10SKCFalloff
12SKCLightNode
NSt3__120__shared_ptr_pointerIP15jet_buffer_poolNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI15jet_buffer_poolEE
9SKCRepeat
9SKCRotate
12SKCLabelNode
?8SKCStats
NSt3__120__shared_ptr_pointerIP15jet_framebufferNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI15jet_framebufferEE
NSt3__120__shared_ptr_pointerIP11jet_textureNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI11jet_textureEE
NSt3__120__shared_ptr_pointerIP18jet_context_OpenGLNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18jet_context_OpenGLEE
7SKCHide
7SKCNode
14SKCAnimateMesh
8SKCScale
11SKCSequence
7SKCWait
?13SKCSpriteNode
NSt3__117bad_function_callE
NSt3__110__function6__funcIZ19-[SKScene _update:]E3$_0NS_9allocatorIS2_EEFvP8PKCFieldEEE
NSt3__110__function6__baseIFvP8PKCFieldEEE
Z19-[SKScene _update:]E3$_0
D11SKCStrength
B12SKCSceneNode
18SKCRenderSortGroup
NSt3__120__shared_ptr_pointerIP18SKCRenderSortGroupNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18SKCRenderSortGroupEE
8SKCSpeed
13SKCFollowPath
11SKCCropNode
18jet_command_buffer
NSt3__120__shared_ptr_pointerIP13SKCRenderPassNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI13SKCRenderPassEE
NSt3__120__shared_ptr_pointerIP18jet_command_bufferNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI18jet_command_bufferEE
BNSt3__120__shared_ptr_pointerIP11jet_programNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI11jet_programEE
9SKC3DNode
NSt3__110__function6__funcIZN9SKC3DNode12addRenderOpsEP13SKCRenderInfoRKNS_10shared_ptrI18jet_command_bufferEEE3$_0NS_9allocatorISA_EEFvP11jet_contextEEE
NSt3__110__function6__baseIFvP11jet_contextEEE
ZN9SKC3DNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEEE3$_0
?17SKCTransitionNode
15SKCCustomAction
0E12SKCPlaySound
13SKCEffectNode
14SKCEmitterNode
12SKCShapeNode
NSt3__120__shared_ptr_pointerIP10jet_bufferNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI10jet_bufferEE
tm<
tm<
tm<
tm<
tm<
tm<
tm<
tm<
?12SKCVideoNode
?20MaxRectTexturePacker
NSt3__120__shared_ptr_pointerIP15MaxRectsBinPackNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI15MaxRectsBinPackEE
NSt3__120__shared_ptr_pointerIP20MaxRectTexturePackerNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI20MaxRectTexturePackerEE
mcpl
12SKCAudioNode
17SKCParticleSystem
9SKCResize
?14SKCTileMapNode
18SKCParticleManager
?12SKCDataSlice
@333333
NSt3__120__shared_ptr_pointerIP11jet_contextNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI11jet_contextEE
NSt3__120__shared_ptr_pointerIP11jet_samplerNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI11jet_samplerEE
NSt3__120__shared_ptr_pointerIP16jet_stencil_modeNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI16jet_stencil_modeEE
NSt3__120__shared_ptr_pointerIP22jet_depth_stencil_modeNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI22jet_depth_stencil_modeEE
NSt3__120__shared_ptr_pointerIP12jet_constantNS_14default_deleteIS1_EENS_9allocatorIS1_EEEE
NSt3__114default_deleteI12jet_constantEE
NSt3__120__shared_ptr_pointerIPNS_6vectorIP17SKCRenderSortInfoNS_9allocatorIS3_EEEENS_14default_deleteIS6_EENS4_IS6_EEEE
NSt3__114default_deleteINS_6vectorIP17SKCRenderSortInfoNS_9allocatorIS3_EEEEEE
21SKCParticleSystemNode
13jet_render_op
m;Vz
c%4L
_%2F
l>Zy
Z#0F
U!-A
: +<
jC[t
T5Ig
d ->
=.>P
P)7F
g)<\
x2Jj
j3Lj
l!-F
d8Pl
@!0I
U.A[
c8Pm
>$1I
c9Rn
>$2J
V$2I
e<To
@&4K
n>Up
H'5L
UCZs
](7L
3%1@
D1AR
U -=
E-@M
i8Of
A9Qa
jD_v
w8M\
g!1J
>'6N
d>Zv
F->R
^E]t
@(;L
[AXp
P9N_
I>Td
]5J^
o7M]
b"2O
Y3Li
\3Ko
h=X|
h=X|
b>[~
b>[~
b>\~
b>\~
Z4Nk
dA]~
bA]~
mB_~
bB_~
r;Sn
W7Ni
[5H]
{=To
8!->
T8Mh
|5GY
{6IZ
mBXn
b9Og
L .>
n#.>
E);K
C6K[
P#09
R%9U
x(;Y
B&5N
Z ,B
;#0E
s&6H
K0AZ
a2CY
]@Vq
s:Ph
= .?
m>So
B'7E
SAVl
R?Vk
^:Pc
L .>
n#.>
fG_t
{+:F
u&3>
Q%5T
h.Ee
J!0F
A!/F
s/Fd
~1Hf
h!.@
;$2D
S#0A
g7Le
N7Ke
Y):Q
^/BX
N7Md
\.@W
N9Ne
tC^y
f$1D
N:Of
? .>
r)7N
v/@U
O.=R
N;Of
Z#.>
V!->
C6H[
N<Qg
M6I[
N>Rh
J$3=
L<Th
{,;F
H?Vh
B?Vg
s"5Q
Y.Ef
J*;Y
L):Y
m/Ge
O#6Q
L*;Y
L,>Y
= ,E
9 -C
L-?Z
? ,D
l<Wy
L.@Z
O -D
5 -C
L.AZ
]8Sv
2 -C
L0A[
C(6Q
L1A^
Q1A^
`%8L
|&6J
b2B_
>#2E
X7Jd
_,<R
2!0B
M#0E
;%6E
8$3E
8'6E
8$5E
8'7F
8%6E
B2DY
|Ec}
8'8G
<'6E
6'8G
J'7F
l7J^
3):J
c#.?
, -;
YAZn
'%1@
zC[p
0#-;
'#0=
v4GV
!#0;
SKCAction
SKWarpable
SKAction
NSCopying
NSCoding
SKActions
Internal
SKActionTable
SKReferencedAction
SKAnimate
SKParticleSystemNode
SKColorize
SKFade
SKFieldNode
SKDragFieldNode
SKVortexFieldNode
SKLinearGravityFieldNode
SKRadialGravityFieldNode
SKCustomFieldNode
SKVelocityFieldNode
SKNoiseFieldNode
SKTurbulenceFieldNode
SKSpringFieldNode
SKMagneticFieldNode
SKElectricFieldNode
SKGroup
SKMove
SKFalloff
SKRemove
SKRepeat
SKRotate
SKSCNRenderer
SKTwoSidedNode
SKHide
SKPhysicsGrid
SKLightNode
SKRunAction
SKAnimateWarp
SKThreadSafeMapTable
NSFastEnumeration
SKThreadSafeMutableArray
NSMutableCopying
NSSecureCoding
SKThreadSafeMutableDictionary
SKScale
SKSequence
SK3DNode
SKWait
fontName
SKBitmapFont
IKLink
SKReach
ImageCollider
SKScene
Private
SKButtonNode
SKButtonNodeSprite
SKWarpGeometry
SKWarpGeometryGrid
SKTextureCache
textureName
SKTexture
SKTextureAtlas
SKStrength
SKView
SKGlobalSharedContextRegistry
SKSpeed
SKRunBlock
SKTileGroupRule
SKTileGroup
SKTileSet
SKTileStamp
SKEmitterNode
SKFollowPath
SKReachConstraints
SKCaptureUnarchiverDelegate
NSKeyedUnarchiverDelegate
NSObject
removeInternal
SKNode
UIFocusItem
UIFocusEnvironment
setParent
SKNodeTouches
SKNodeCustomClassUnarchiver
SKSpriteNode
SKUniformInfo
SKShader
SKShapeNode
SKEffectNode
SKMutableTexture
SKLabelNode
SKCustomAction
SKDisplayLink
SKPlaySound
SKTransition
SKVideoNode
SKKeyedUnarchiver
SKCropNode
SKReferenceNode
SKPerformSelector
SKUniformShaderReference
SKUniform
SKRegion
SKTextureAtlasPacker
SKFrameCaptureDelegate
NSKeyedArchiverDelegate
SKJavaScriptAction
SKSoundBuffer
SKSoundContext
SKSoundSource
GZip
removeExactObject
SKSceneUnarchiveDummy
SKResize
SKPhysicsBody
NodeWithPhysicsBody
SKPhysicsContact
SKTileDefinition
SKAudioNode
PlaybackControl
MixerControl
SKPhysicsJoint
SKPhysicsJointPin
SKPhysicsJointSpring
SKPhysicsJointFixed
SKPhysicsJointSliding
SKPhysicsJointLimit
SKPhysicsWorld
UIColor
SKOpenGLNode
SKKeyframeSequence
SKCameraNode
SKRange
SKConstraint
SKSizeConstraint
SKScaleConstraint
SKRotationConstraint
SKOrientationConstraint
SKDistanceConstraint
SKPositionConstraint
SKTileMapNode
SKAttribute
SKAttributeValue
caction
warpTo:duration:
animateWithWarps:times:restore:
animateWithWarps:times:
alloc
strongToStrongObjectsMapTable
initWithNSMapTable:
init
setCppAction:
commonInit
decodeObjectForKey:
doubleValue
integerValue
numberWithDouble:
encodeObject:forKey:
numberWithBool:
numberWithInteger:
copyWithZone:
class
timingFunction
copy
dealloc
encodeWithCoder:
initWithCoder:
subactions
setTimingFunction:
duration
setDuration:
timingMode
setTimingMode:
setSpeed:
speed
reversedAction
_caction
moveByX:y:duration:
moveTo:duration:
moveToX:duration:
moveToY:duration:
rotateByAngle:duration:
rotateToAngle:duration:
rotateToAngle:duration:shortestUnitArc:
scaleBy:duration:
scaleXBy:y:duration:
scaleTo:duration:
scaleXTo:y:duration:
scaleXTo:duration:
scaleYTo:duration:
scaleToSize:duration:
resizeByWidth:height:duration:
resizeToWidth:height:duration:
resizeToWidth:duration:
resizeToHeight:duration:
sequenceWithActions:
groupWithActions:
repeatAction:count:
repeatActionForever:
fadeInWithDuration:
fadeOutWithDuration:
fadeAlphaBy:duration:
fadeAlphaTo:duration:
falloffTo:duration:
falloffBy:duration:
hide
unhide
arrayWithObjects:count:
animateWithTextures:timePerFrame:resize:restore:
animateWithNormalTextures:timePerFrame:resize:restore:
playSoundFileNamed:atPosition:waitForCompletion:
colorizeWithColor:colorBlendFactor:duration:
colorizeWithColorBlendFactor:duration:
followPath:duration:
followPath:asOffset:orientToPath:duration:
followPath:speed:
followPath:asOffset:orientToPath:speed:
speedBy:duration:
speedTo:duration:
strengthTo:duration:
strengthBy:duration:
reachTo:rootNode:duration:
reachTo:rootNode:velocity:
position
waitForDuration:
waitForDuration:withRange:
removeFromParent
perfromSelector:onTarget:
runBlock:queue:
runAction:onFirstChildWithName:
javaScriptActionWithDuration:script:
customActionWithDuration:actionBlock:
objectForKey:
findNamedActionInBundle:
actionNamed:
convertAction:toDuration:
path
unarchiveObjectWithFile:
isKindOfClass:
actionForName:
actionNamed:fromURL:
defaultManager
enumeratorAtPath:
nextObject
pathExtension
caseInsensitiveCompare:
stringByAppendingPathComponent:
addObject:
bundlePath
recursivePathsForResourcesOfType:inDirectory:
countByEnumeratingWithState:objects:count:
dictionaryWithContentsOfFile:
dataWithContentsOfFile:
initForReadingWithData:
setDelegate:
objectForKeyedSubscript:
addActionsToCachedActionTable:
actionTableDictionary
setObject:forKey:
enumerateKeysAndObjectsUsingBlock:
removeAllObjects
count
objectAtIndex:
moveBy:duration:
moveBY:duration:
sequence:
group:
setTexture:
setNormalTexture:
setTexture:resize:
setNormalTexture:resize:
animateWithTextures:timePerFrame:
animateWithNormalTextures:timePerFrame:
playSoundFileNamed:
playSoundFileNamed:waitForCompletion:
reachToNode:rootNode:duration:
reachToNode:rootNode:velocity:
performSelector:onTarget:
runBlock:
runAction:onChildWithName:
actionNamed:duration:
actionNamed:fromURL:duration:
clearActionTableCache
unarchiver:cannotDecodeObjectOfClassName:originalClasses:
_backingNode
wasPausedWithTarget:atTime:
willResumeWithTarget:atTime:
finished
setFinished:
ratioForTime:
wasAddedToTarget:atTime:
wasRemovedFromTarget:atTime:
willStartWithTarget:atTime:
updateWithTarget:forTime:
initWithContentsOfDictionary:
dictionaryWithDictionary:
actionTableWithContentsOfDictionary:
.cxx_destruct
_info
set_info:
_actionTableDictionary
__info
objectAtIndexedSubscript:
isEqualToString:
raise:format:
_ensureReferencedAction
description
referenceActionWithName:duration:
_mycaction
_referencedAction
_referencedActionName
array
decodeBoolForKey:
encodeBool:forKey:
timePerFrame
arrayWithCapacity:
insertObject:atIndex:
setTimePerFrame:
_textures
size
_didMakeBackingNode
_makeBackingNode
_skcParticleSystemNode
boolValue
componentRGBA
scene
setRepresentedObject:
physicsWorld
removeField:
setPosition:
setRotation:
setScale:
addField:
categoryBitMask
setCategoryBitMask:
direction
setDirection:
smoothness
respondsToSelector:
setSmoothness:
animationSpeed
setAnimationSpeed:
setGrid
vectorGridFromTexture:accuracy:
setGrid:
setStrength:
setRegion:
decodeFloatForKey:
setFalloff:
setMinimumRadius:
setEnabled:
setExclusive:
decodeInt32ForKey:
setPhysicsField:
region
strength
encodeFloat:forKey:
falloff
minimumRadius
isEnabled
isExclusive
encodeInt32:forKey:
texture
isEqualToNode:
imageNameOrPath
setBlock:
dragField
vortexField
radialGravityField
linearGravityFieldWithVector:
velocityFieldWithVector:
velocityFieldWithTexture:
noiseFieldWithSmoothness:animationSpeed:
turbulenceFieldWithSmoothness:animationSpeed:
springField
electricField
magneticField
customFieldWithEvaluationBlock:
field
_descriptionClassName
initWithCoder:field:
_field
_region
_smoothness
_animationSpeed
_texture
_exclusive
_initialize
fieldWithCustomBlock:
fieldWithCustomBatchBlock:
setBatchBlock:
batchBlock
block
fieldWithGrid:
containsValueForKey:
decodeCGPointForKey:
setVelocityTexture:
setVelocity:
velocity
velocityTexture
_velocityTexture
bytes
length
initWithCapacity:
appendBytes:length:
_actions
moveToX:y:duration:
moveByX:duration:
moveByY:duration:
dictionary
numberWithUnsignedInt:
setObject:forKeyedSubscript:
numberWithFloat:
_hasFired
unsignedIntValue
numberWithUnsignedInteger:
_repeatedAction
rotateByX:duration:
rotateToX:duration:
rotateByY:duration:
rotateToY:duration:
rotateByX:y:z:duration:
rotateToX:y:z:duration:
fontForFileNamed:
removeChildrenInArray:
characterAtIndex:
spriteForCharacterNamed:
kerningForCharacterNamed:followedBy:
setZPosition:
colorWithRed:green:blue:alpha:
setColor:
setColorBlendFactor:
addChild:
advanceForCharacterNamed:
frame
calculateAccumulatedFrame
_textureByTransferingData:size:
setShowsSpriteBounds:
setShowsFPS:
setShowsNodeCount:
scaleMode
bounds
setSize:
didChangeSize:
isPaused
setPaused:
_usesExplicitUpdate
_needsUpdate
set_needsUpdate:
_update:
getOpenGLFramebuffer:
_getDestBounds
_getViewport
_getMatrix
_getOptions
restoreDefaultOpenGLState:frameBuffer:
renderToFramebuffer:shouldClear:
renderTransition:toFramebuffer:withInputTexture:outputTexture:inputTextureSize:outputTextureSize:time:
initWithSKCRenderer:
setShowsDrawCount:
setShowsQuadCount:
set_showsCulledNodesInNodeCount:
set_showsGPUStats:
set_showsCPUStats:
set_showsCoreAnimationFPS:
set_showsTotalAreaRendered:
setShowsPhysics:
setShowsFields:
backingScaleFactor
mutableCopy
addEntriesFromDictionary:
setPrefersOpenGL:
rendererWithContext:options:
setIgnoresSiblingOrder:
ignoresSiblingOrder
setupContext
updateAtTime:
render:
settingsForTransition:atTime:renderIncomingToTexture:renderOutgoingToTexture:renderIncomingToScreen:renderOutgoingToScreen:
renderTransition:withInputTexture:outputTexture:inputTextureSize:outputTextureSize:time:
pixelSize
showsSpriteBounds
showsFPS
showsNodeCount
showsQuadCount
showsDrawCount
showsPhysics
set_showsOutlineInterior:
_showsOutlineInterior
showsFields
set_showsSpriteBounds:
_showsSpriteBounds
set_shouldCenterStats:
_shouldCenterStats
_showsCoreAnimationFPS
_showsCPUStats
_showsGPUStats
_showsCulledNodesInNodeCount
_showsTotalAreaRendered
_showAllStats
_scene
_fps
_spriteRenderCount
_spriteSubmitCount
setScene:
setBounds:
setBackingScaleFactor:
_timePreviousUpdate
_skcRenderer
_viewRenderOptions
_statsLabel
_prevViewAspect
_spritesRendered
_spritesSubmitted
_frames
_prevSpritesRendered
_prevSpritesRenderedSubmitted
_timeBeginFrameCount
_hasRenderedOnce
_hasRenderedForCurrentUpdate
_isInTransition
_disableInput
_prevBackingScaleFactor
_backingScaleFactor
_bounds
currentContext
setCurrentContext:
frontSide
backSide
sideA
setSideA:
sideB
setSideB:
xRotation
setXRotation:
yRotation
setYRotation:
_sideA
_sideB
_xRotation
_yRotation
attributeValues
UTF8String
_attributeBuffers
attributes
getNameString
type
copyValueTo:type:count:
setParent:
_removeChild:
_removeAction:
reapplyScale:yScale:
rotation
constraints
gridFromOccupancyArray:bytePitch:width:height:
_newTextureFromGLCache
gridFromRGBAU8PixelData:imageWidth:imageHeight:alphaThreshold:accuracy:
_createCGImage
vectorGridFromRGBAU8PixelData:imageWidth:imageHeight:accuracy:
height
width
gridDataAtX:y:z:
spriteNodeWithColor:size:
setPhysicsBody:
isGridRegionOccupied:y:width:height:
textureWithRect:inTexture:
spriteNodeWithTexture:size:
gridFromOccupancyArray:width:height:
gridFromTexture:alphaThreshold:accuracy:
spritesFromGrid:gridSize:zPosition:edgeColor:interiorColor:spriteSize:physicsBody:
spritesFromGrid:xDivisions:zPosition:spriteSize:texture:physicsBody:
_width
_height
whiteColor
setLightColor:
setShadowColor:
blackColor
setAmbientColor:
setLightCategoryBitMask:
decodeDoubleForKey:
setLightDecay:
ambientColor
CGColor
lightColor
shadowColor
lightDecay
encodeDouble:forKey:
lightCategoryBitMask
colorWithVectorRGBA:
vectorRGBA
_skcLightNode
childNodeWithName:
runAction:
actionForKey:
runAction:afterActionWithKey:
_action
_subSpriteKey
_actionKey
_waitForKeyedAction
_runOnSubSprite
_fired
numberOfRows
numberOfColumns
floatValue
lastObject
setWarpGeometry:
vertexCount
sourcePositions
destPositions
gridWithColumns:rows:sourcePositions:destPositions:
warpGeometry
allocWithZone:
selector
invokeWithTarget:
forwardInvocation:
methodSignatureForSelector:
_storageLock
_storage
removeObjectsInArray:
mutableCopyWithZone:
supportsSecureCoding
initWithNSMutableArray:
arrayRepresentation
initWithNSMutableDictionary:
decodeCGSizeForKey:
encodeCGSize:forKey:
scaleXBy:duration:
scaleYBy:duration:
numberWithUnsignedLong:
_animIndex
initWithViewportSize:
set_anchorPoint:
setViewportSize:
setScnScene:
viewportSize
scnScene
pointOfView
hitTest:options:
projectPoint:
unprojectPoint:
nodeWithViewportSize:
setSceneTime:
sceneTime
setPlaying:
isPlaying
setLoops:
loops
setPointOfView:
autoenablesDefaultLighting
setAutoenablesDefaultLighting:
_renderForTime:
_skc3DNode
fontName
strongToWeakObjectsMapTable
pathForResource:ofType:
stringWithContentsOfFile:encoding:error:
loadFontWithTexture:fontDataString:
dictionaryWithCapacity:
componentsSeparatedByString:
rangeOfString:
substringFromIndex:
substringToIndex:
_textureWithImageNamed:
textureWithImageNamed:
intValue
spriteNodeWithTexture:
setAnchorPoint:
numberWithInt:
fontWithTexture:fontDataString:
lineHeight
.cxx_construct
_fontName
_filePath
_lineHeight
_baseLine
_characterSprites
_characterSpriteByChar
_characterAdvanceByChar
_characterKerningByCharPair
_internal
_fileName
bundleForClass:
_fontForFileNamed:
zRotation
reachConstraints
lowerAngleLimit
upperAngleLimit
initWithNode:
normalizeAngle:
rotateByAngle:
node
setNode:
angleInitial
setAngleInitial:
angle
setLength:
_node
_angleInitial
_angle
_length
_position
_size
solveIKWithTarget:
children
setZRotation:
parent
convertPoint:toNode:
convertPoint:fromNode:
reachTo:rootNode:zRotationSpeed:maxDuration:
reachTo:rootNode:duration:maxZRotationSpeed:
_ikRoot
_goalPosition
_ikChain
_velocity
_timeConstrained
_zRotationSpeed
_backingTexture
filteringMode
isIdentityWarp
dictionaryWithObjects:forKeys:count:
textureFromNode:withOptions:
pathFromOutlineWithSmoothingThreshold:bounds:
textureRect
cropOffset
cropScale
isFlipped
isRotated
_usesTimeUniform
_isColliding:xform1:displaySize1:pos1:anchor1:mask2:xform2:displaySize2:pos2:anchor2:
_newCollidingImg:xform1:displaySize1:pos1:anchor1:mask2:xform2:displaySize2:pos2:anchor2:
isColliding:xform1:displaySize1:pos1:anchor1:mask2:xform2:displaySize2:pos2:anchor2:
newCollidingImg:xform1:displaySize1:pos1:anchor1:mask2:xform2:displaySize2:pos2:anchor2:
archivedDataWithRootObject:
unarchiveObjectWithData:
initWithSize:
setShouldEnableEffects:
setVelocityThreshold:
set_pkPhysicsWorld:
colorWithComponentRGBA:
setBackgroundColor:
setUserInteractionEnabled:
set_usesExplicitRender:
set_usesExplicitUpdate:
bodyWithCircleOfRadius:
setDynamic:
addBody:
sceneDidLoad
CGRectValue
CGPointValue
setScaleMode:
setCamera:
bodies
removeBody:
enumerateChildNodesWithName:usingBlock:
resolveReferenceNode
reset
stop
removeExactObject:
mainMixerNode
distanceAttenuationParameters
setReferenceDistance:
setMaximumDistance:
setListenerPosition:
attachNode:
initStandardFormatWithSampleRate:channels:
connect:to:format:
setAvAudioEnvironmentNode:
startAndReturnError:
checkAudioEngine
setVisibleRect:
valueWithCGRect:
camera
anchorPoint
valueWithCGPoint:
name
stringWithFormat:
stringByAppendingPathExtension:
isAbsolutePath
sceneWithContentsOfFile:
isRunning
pause
_connectToScene:
didMoveToView:
view
delegate
update:forScene:
update:
didEvaluateActionsForScene:
didEvaluateActions
representedObject
physicsBody
_joints
_implicit
bodyA
bodyB
pinned
allowsRotation
removeJoint:
jointWithBodyA:bodyB:anchor:
setFrictionTorque:
set_implicit:
addJoint:
aether
stepWithTime:velocityIterations:positionIterations:
didSimulatePhysicsForScene:
didSimulatePhysics
enabled
referenceNode
zRotationRange
lowerLimit
upperLimit
xRange
yRange
point
offset
distanceRange
widthRange
heightRange
xScale
yScale
setXScale:
setYScale:
didApplyConstraintsForScene:
didApplyConstraints
didFinishUpdateForScene:
didFinishUpdate
avAudioEnvironmentNode
sceneWithSize:
sceneWithContentsOfFile:size:
_hasConstraints
_registerConstraintsForNode:
_removeConstraintsForNode:
backgroundColor
convertPointFromParent:
convertPointToParent:
listener
setListener:
audioEngine
zPosition
convertPointFromView:
convertPointToView:
visibleRect
setVisibleRectSize:
visibleRectSize
setVisibleRectCenter:
visibleRectCenter
_didMoveToView:
willMoveFromView:
_needsRender
set_needsRender:
_pkPhysicsWorld
_lastUpdate
_pausedTime
_visibleRect
_touchMap
_allChildenWithConstraints
_isSetup
_usesExplicitRender
_scenePinBody
_view
_skcSceneNode
_listener
_audioEngine
__needsUpdate
__needsRender
_physicsWorld
_camera
_delegate
_avAudioEnvironmentNode
__pkPhysicsWorld
getViewTransform
convertPoint:fromScene:
_willMoveFromView:
willRenderContent
didContinueContact:
_setNeedsUpdate
_setNeedsRender
_parentFocusEnvironment
labelNodeWithFontNamed:
setDownAction:
setUpAction:
locationInNode:
hash
touchBegan:location:
touchEnded:location:
removeActionForKey:
runAction:withKey:
touchDownInsideButton:
containsPoint:
touchUpInsideButton:
buttonWithFontNamed:
touchesBegan:withEvent:
touchesEnded:withEvent:
touchMoved:location:
onTouchUpInside:
onTouchUp:
onTouchDownInside:
downAction
upAction
_downAction
_upAction
_downBlock
_upBlock
_upInsideBlock
_touches
initWithColumns:rows:sourcePositions:destPositions:
decodeIntegerForKey:
encodeInteger:forKey:
grid
gridWithColumns:rows:
sourcePositionAtIndex:
destPositionAtIndex:
gridByReplacingSourcePositions:
gridByReplacingDestPositions:
_sourcePositions
_destPositions
_dimensions
_vertexCount
_isIdentityWarp
_reset
getLock
isLoaded
setIsLoaded:
isPOT
setIsPOT:
hasAlpha
setHasAlpha:
pixelData
setPixelData:
setPixelSize:
state
setState:
setFilteringMode:
wrapMode
setWrapMode:
textureFormat
setTextureFormat:
backingTexture
setBackingTexture:
lock
_textureFormat
imgName
textureByGeneratingNormalMapWithSmoothness:contrast:
_generateNormalMap:contrast:multiPass:
gzipInflate
loadImageDataFromPVRData:
lowercaseString
preloadTextures:withCompletionHandler:
subarrayWithRange:
loadImageData
lookupTextureCacheForName:
stringByDeletingPathExtension
initTextureCacheWithImageData
lookupCachedTextureNamed:
_ensureImageData
lastPathComponent
imageWithContentsOfFile:
CGImage
defaultUICatalogForBundle:
mainScreen
scale
currentDevice
userInterfaceIdiom
imageWithName:scaleFactor:deviceIdiom:
parentNamedImageAtlastForImageNamed:scaleFactor:
atlasNamed:
textureNamed:
image
isAlphaCropped
originalUncroppedSize
alphaCroppedRect
createCGImageFromCUINamedImage:withSize:atRect:
loadImageDataFromCGImage:pointsSize:
hasSuffix:
loadImageDataFromPVRGZData:
imageNamed:inBundle:
findTextureNamed:
registerTextureCache:forName:
searchPaths
_textureCache
CGSizeValue
initWithData:
decodeIntForKey:
performFullCapture
_copyImageData
valueWithCGSize:
initWithImageNamed:
textureWithCGImage:pointSize:
textureWithData:size:
colorWithRed:green:blue:
imageWithColor:
imageByCroppingToRect:
setValue:forKey:
valueForKey:
extent
textureWithImageNamed:rect:
textureVectorNoiseWithSmoothness:size:
textureNoiseWithSmoothness:size:grayscale:
textureWithCGImage:
textureWithImage:
textureWithData:size:flipped:
textureWithData:size:rowLength:alignment:
textureByGeneratingNormalMap
setTextureDimension:withPixelSize:
preloadWithCompletionHandler:
initWithImagePath:
textureByApplyingCIFilter:
usesMipmaps
setUsesMipmaps:
setCropScale:
setCropOffset:
originalAtlasName
setOriginalAtlasName:
subTextureName
setSubTextureName:
setPerformFullCapture:
isRepeatable
rootAtlas
setRootAtlas:
alphaMap
alphaMapSize
_shouldGenerateMipmaps
_didGenerateMipmaps
_isPath
_isData
_imgName
_searchPaths
_textRect
_textCoords
_disableAlpha
_isRotated
_isFlipped
_cropScale
_cropOffset
_alignment
_rowLength
_filter
_originalTexture
_textureTarget
_originalAtlasName
_subTextureName
_performFullCapture
_isRepeatable
_rootAtlas
_alphaMap
_alphaMapSize
initWithBackingTetxure:logicalWidth:height:
initWithBackingTetxure:
keyEnumerator
imageWithCGImage:
dataWithBytesNoCopy:length:
_initWithGLTextureId:size:
initWithCGImage:
writeToFile:atomically:
_setImageName:
setIsRotated:
setIsFlipped:
textureTarget
setTextureTarget:
glTextureId
_savePngFromGLCache:
_reloadTextureCacheForImageNamed:
_cachedTextureNames
compressedTextureWithData:
compressedTextureWithData:size:bitsPerPixel:hasAlpha:
textureWithImagePath:
_textureByTransferingData:size:rowLength:alignment:
_textureWithGLTextureId:size:
textureWithIOSurfaceID:width:height:format:
_prePopulateCache
allKeys
allValues
canUseObjectForAtlas:
generateTextureAtlasImages:outputDictionary:forcePOT:
parseAtlasPropertyList:withPath:
namedImageAtlasWithName:scaleFactor:deviceIdiom:
namedImageAtlasWithName:scaleFactor:
loadTexturesFromCUIImageAtlas:
stringByAppendingString:
stringByDeletingLastPathComponent
removeObjectForKey:
loadTextures
imageNames
imageWithName:
croppedImage
preloadTextureAtlases:withCompletionHandler:
objectEnumerator
preloadNamedAtlasWithScaleFactor:andNames:completionHandler:
atlasFromCUIImageAtlas:withName:
unload
getSupportedPostfixes
findTextureNamedFromAtlas:
atlasWithDictionary:
preloadTextureAtlasesNamed:withCompletionHandler:
textureNames
_textureDict
_atlasName
_isCUIImageAtlas
_textureMap
currentMode
pathsForResourcesOfType:inDirectory:
allObjects
_exportAtlasWithDictionary:toFile:forcePOT:
initWithFormat:
dataWithPropertyList:format:options:error:
createFileAtPath:contents:attributes:
_exportAtlasWithDictionary:toFile:
archiveToFile:
date
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
_getViewContentsScale
data
initForWritingWithMutableData:
finishEncoding
debugPrint
chooseViewRenderer
window
getRenderOptions
disableStencilBuffers
setContentsScale:
renderbufferStorage:fromDrawable:
setClearsContextBeforeDrawing:
layer
nativeScale
setOpaque:
setShouldCullNonVisibleNodes:
setMultipleTouchEnabled:
setContentScaleFactor:
onInit
_ensureRenderer
setUpRenderCallback
startRenderCallbacks
defaultCenter
CBApplicationWillResignActive
addObserver:selector:name:object:
CBApplicationDidBecomeActive
setSuspended:
_renderSynchronouslyForTime:preRender:postRender:
_getEffectivePreferredFramesPerSecond
isDrawableAvailable
hasValidViewFramebuffer
performSelector:
_isDrawableAvailable
setPreferredFramesPerSecond:
isAsynchronous
firstObject
fileExistsAtPath:
captureToFile:
getRootNode
nextFramebuffer
getViewport
_endFrameStats
notifyWillRenderContent
setAsynchronous:
_shouldRenderForTime:
view:shouldRenderAtTime:
_vsyncRenderForTime:preRender:postRender:
displayLinkWithDisplay:handler:client:
nodeAtPoint:recursive:
isUserInteractionEnabled
touchesMoved:withEvent:
touchesCancelled:withEvent:
removeObserver:name:object:
stopRenderCallbacks
invalidate
clearColor
renderContent
presentScene:
layoutSubviews
_reshape
didMoveToWindow
initWithFrame:
_commonInit
decodeCGRectForKey:
setFrame:
nodeWithFileNamed:
encodeCGRect:forKey:
preferredFramesPerSecond
_renderToIOSurfaceID:scaleFactor:asynchronous:preRender:postRender:
remakeFramebuffer
runOnce
willRenderContentForScene:
_renderContent
screen
_isEligibleForFocus
_childrenAndDescendantsWithPredicate:
sortDescriptorWithKey:ascending:
sortedArrayUsingDescriptors:
_searchForFocusRegionsInContext:
searchArea
intersectsRect:
_getFocusNodesFromScene
coordinateSpace
convertRect:toCoordinateSpace:
initWithFrame:item:
addRegion:
_regionForFocusedItem:inScreen:
layerClass
setDynamicRenderBlock:
shouldCullNonVisibleNodes
setDisableStencilBuffers:
renderForTime:shouldBlock:
set_usesAsyncUpdateQueue:
_usesAsyncUpdateQueue
convertPoint:toScene:
remakeFramebuffer:
alphaValue
isOpaque
allowsTransparency
setAllowsTransparency:
drawRect:
presentScene:transition:
textureFromNode:
initWithFrame:updateQueue:
writeContentsToPNG:
setFrameInterval:
frameInterval
setPreferredFrameRate:
preferredFrameRate
renderToIOSurfaceID:withScaleFactor:
_setUpdateQueue:
textureFromNode:crop:
options
_viewScale
set_viewScale:
_viewTranslation
set_viewTranslation:
snapshot
_getPerformanceStats
_focusedItemRegionContainer
_preferredFocusMovementStyle
_layerBackedRenderer
set_layerBackedRenderer:
physicsDebugStrokeWidth
setPhysicsDebugStrokeWidth:
_currentStats
_nextStats
_frameStats
_renderer
_framebuffer
_frameBufferColorTexture
_frameBufferDepthStencilTexture
_colorRenderBuffer
_depthStencilRenderBuffer
_renderFence
_eaglLayer
_needsInitialUpdate
_didRunOnce
_viewFramebufferIsValid
_viewFramebufferPixelSize
_isBackgrounded
_allowsTransparency
_priorResignActivePausedState
_frameInterval
_preferredFramesPerSecond
_displayLink
_updateQueue
_prefersLowPowerGPU
_mouseIsDown
_transition
_nextScene
_paused
_spriteArrayHint
_dynamicRenderBlock
_renderQueue
_renderSemaphore
_queuedFrameCount
_prevVsyncRenderTime
_prevRenderTime
__layerBackedRenderer
_physicsDebugStrokeWidth
_pixelSize
infoDictionary
initWithAPI:properties:
getPrefersOpenGL
globalGLSharedContext
setGlobalGLSharedContext:
_block
_queue
arrayWithArray:
setTileDefinitionParentPointers
setParentRule:
setName:
adjacency
setAdjacency:
tileDefinitions
setTileDefinitions:
tileDefinitionIDs
setTileDefinitionIDs:
initWithAdjacency:tileDefinitions:
indexOfObject:
unsignedIntegerValue
tileGroupRuleWithAdjacency:tileDefinitions:
calcTileDefinitionIDsWithTileSet:
setTileDefinitionsFromIDsWithTileSet:
parentGroup
setParentGroup:
_tileDefinitions
_tileDefinitionIDs
_adjacency
_name
_parentGroup
setRuleParentPointers
rules
setRules:
setType:
self
arrayWithObject:
initWithTileDefinition:
initWithRules:
tileGroupWithRules:
tileGroupWithTileDefinition:
emptyTileGroup
findTileDefinitionIndexForAdjacencyData:tileSetType:
findTileDefinitionIDsForAdjacencyData:tileSetType:
parentSet
setParentSet:
_rules
_type
_parentSet
unobserveAllTileDefinitions
lookForMissingDefinitionsInGroups
updateTileDefinitionIDsInGroupRules
setGroupParentPointers
observeTileDefinition:
removeTileDefinitionObservers:
addObserver:forKeyPath:options:context:
removeObserver:forKeyPath:
tileGroups
setTileGroups:
calcDefaultTileSize
initWithTileGroups:
initWithTileGroups:tileSetType:
findTileSetInBundleNamed:
containsObject:
tileSetWithTileGroups:
tileSetWithTileGroups:tileSetType:
tileSetNamed:
tileSetFromURL:
clearTileSetTableCache
defaultTileGroup
setDefaultTileGroup:
defaultTileSize
setDefaultTileSize:
stamps
setStamps:
observeAllTileDefinitions
findTileDefinitionForGroup:withGroupAdjacency:
findTileDefinitionsForGroup:withGroupAdjacency:
getCenterTileDefinitionForGroup:withRequiredOutputGroupAdjacency:
observeValueForKeyPath:ofObject:change:context:
_definitions
_groups
_stamps
_defaultTileSize
_defaultTileGroupIndex
setTileData:size:
initWithWidth:height:tileData:
decodeBytesForKey:returnedLength:
encodeBytes:length:forKey:
tileDefinitionForTileID:
tileStampWithWidth:height:tileData:
tileData
tileDefinitionsForTileMap:
_columns
_rows
_tileData
compare:
copyParticlePropertiesToNode:
interpolationMode
repeatMode
getKeyframeTimeForIndex:
getKeyframeValueForIndex:
particleBirthRate
numParticlesToEmit
targetNode
particleLifetime
particleLifetimeRange
particlePosition
particlePositionRange
particleZPosition
particleSpeed
particleSpeedRange
emissionAngle
emissionAngleRange
xAcceleration
yAcceleration
particleRotation
particleRotationRange
particleRotationSpeed
particleTexture
particleSize
particleColorSequence
particleColor
particleColorAlphaRange
particleColorBlueRange
particleColorGreenRange
particleColorRedRange
particleColorAlphaSpeed
particleColorBlueSpeed
particleColorGreenSpeed
particleColorRedSpeed
particleColorBlendFactorSequence
particleColorBlendFactor
particleColorBlendFactorRange
particleColorBlendFactorSpeed
particleBlendMode
particleAlphaSequence
particleAlpha
particleAlphaRange
particleAlphaSpeed
particleSpeedSequence
setTargetNode:
setParticleTexture:
setParticlePosition:
decodeCGVectorForKey:
setParticlePositionRange:
setParticleBlendMode:
setParticleBirthRate:
setParticleAction:
setNumParticlesToEmit:
setEmissionDistance:
setEmissionDistanceRange:
setFieldBitMask:
setParticleAlphaSequence:
setParticleColorSequence:
setParticleColorBlendFactorSequence:
setParticleScaleSequence:
setParticleRotationSequence:
setFieldInfluenceSequence:
setParticleSpeedSequence:
setShader:
particleAction
encodeCGPoint:forKey:
encodeCGVector:forKey:
emissionDistance
emissionDistanceRange
fieldBitMask
particleScaleSequence
particleRotationSequence
fieldInfluenceSequence
shader
setParticleColor:
setParticleColorRedRange:
setParticleColorGreenRange:
setParticleColorBlueRange:
setParticleColorAlphaRange:
setParticleColorRedSpeed:
setParticleColorGreenSpeed:
setParticleColorBlueSpeed:
setParticleColorAlphaSpeed:
setParticleColorBlendFactor:
setParticleColorBlendFactorRange:
setParticleColorBlendFactorSpeed:
setXAcceleration:
setYAcceleration:
setParticleLifetime:
setParticleLifetimeRange:
setParticleRotation:
setParticleRotationRange:
setParticleRotationSpeed:
particleScale
setParticleScale:
particleScaleRange
setParticleScaleRange:
particleScaleSpeed
setParticleScaleSpeed:
setParticleAlpha:
setParticleAlphaRange:
setParticleAlphaSpeed:
setParticleSpeed:
setParticleSpeedRange:
setEmissionAngle:
setEmissionAngleRange:
setParticleZPosition:
densityBased
setDensityBased:
particleDensity
setParticleDensity:
setParticleSize:
wantsNewParticles
setWantsNewParticles:
usesPointSprites
setUsesPointSprites:
_addTargetNode:
addSubEmitterNode:
subEmitterNode
setPhysicsWorld:
activeParticleCount
particleZPositionSpeed
setParticleZPositionSpeed:
particleZPositionRange
setParticleZPositionRange:
resetSimulation
initWithMinimumParticleCapacity:
initWithMinimumParticleCapacity:minimumPositionBufferCapacity:
advanceSimulationTime:
particleRenderOrder
setParticleRenderOrder:
_particleTexture
_skcEmitterNode
_target
_colorSequence
_colorBlendSequence
_alphaSequence
_scaleSequence
_rotationSequence
_fieldInfluenceSequence
_particleSpeedSequence
_particleRenderOrder
_cgPath
initWithLowerAngleLimit:upperAngleLimit:
setLowerAngleLimit:
setUpperAngleLimit:
_lowerAngleLimit
_upperAngleLimit
sharedInstance
unarchiver:didDecodeObject:
unarchiver:willReplaceObject:withObject:
unarchiverWillFinish:
unarchiverDidFinish:
isEqual:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
alpha
isHidden
dataWithContentsOfFile:options:error:
isSubclassOfClass:
setClass:forClassName:
enumerateObjectsUsingBlock:
finishDecoding
_initAccessibility
mainBundle
objectForInfoDictionaryKey:
stringByReplacingOccurrencesOfString:withString:
swiftClassFromString:moduleName:
setConstraints:
setUserData:
setAlpha:
setHidden:
setAttributeValues:
_runAction:
userData
initWithDictionary:copyItems:
initWithArray:copyItems:
addChild:withKey:
addObjectsFromArray:
setReachConstraints:
_anchorPoint
removeChild:
insertChild:atIndex:
willChangeValueForKey:
hasChildren
didChangeValueForKey:
removeObjectAtIndex:
removeExactObjectsInArray:
_enumerateChildNodesWithName:usingBlock:stopPointer:
rangeOfString:options:
_processSearchTokens:visited:usingBlock:stopPointer:
setPostStepBlock:
intersectsNode:useAlphaTest:
_requestFocusUpdateToEnvironment:
_updateFocusIfNeeded
canBecomeFocused
setNeedsFocusUpdate
updateFocusIfNeeded
shouldUpdateFocusInContext:
didUpdateFocusInContext:withAnimationCoordinator:
preferredFocusEnvironments
preferredFocusedView
_aether
moveToParent:
outline
inParentHierarchy:
removeChildAtIndex:
removeAllChildren
_performCleanup
_scaleFactorChangedFrom:to:
_flippedChangedFrom:to:
runAction:completion:
removeAllActions
containingView
hasActions
needsUpdate
physicsField
containsPoint:withRadius:
nodeAtPoint:
nodesAtPoint:
intersectsNode:
hasUniformAlphaAndIsVisible
globalBoundingVerts
globalAccumulatedBoundingVerts
valueForAttributeNamed:
setValue:forAttributeNamed:
entity
setEntity:
_skcNode
_parent
_children
_keyedActions
_keyedSubSprites
_attributeValues
_userData
_constraints
_version
_userInteractionEnabled
_reachConstraints
_entity
archiveRootObject:toFile:
_debugPrint:mask:
_debugPrint:
childrenInRect:
arrayByAddingObject:
indexAtPosition:
volume
arrayByAddingObjectsFromArray:
createFullCaptureData
_getWorldTransform:positionY:rotation:xScale:yScale:
updatePhysicsPositionAndScaleFromSprite
set_showBounds:
_showBounds
_untransformedBounds
allIntersectionsWithNode:useAlphaTest:
_subnodeFromIndexPath:
_pathFromPhysicsBodyToPoints:outSize:
_allActions
nodeFromCaptureData:
locationInView:
previousLocationInView:
previousLocationInNode:
_currentAppModuleName
_mangledSwiftClassName:moduleName:
_findValidClassName:
_cache
hasBodies
hasFields
_focusEnvironmentWillDisappear:
containsString:
setLightingBitMask:
setShadowCastBitMask:
setShadowedBitMask:
initWithTexture:color:size:
setCenterRect:
setBlendMode:
setSubdivisionLevels:
initWithTexture:
blendMode
normalTexture
lightingBitMask
shadowCastBitMask
shadowedBitMask
colorBlendFactor
centerRect
subdivisionLevels
initWithColor:size:
_removeTargetNode:
color
bodyWithTexture:alphaThreshold:size:accuracy:
spriteNodeWithImageNamed:
spriteNodeWithImageNamed:normalMapped:
spriteNodeWithTexture:normalMap:
scaleToSize:
repeatTexture
setRepeatTexture:
repeatTextureSize
setRepeatTextureSize:
_pathFromTextureToPoints:outSize:accuracy:
shouldRepeatTexture
setShouldRepeatTexture:
_skcSpriteNode
_light
_shouldRepeatTexture
setSeed:
seed
uniform
setUniform:
initWithSource:uniforms:
weakObjectsPointerArray
setUniforms:
setSource:
initWithSource:
initWithContentsOfFile:options:error:
initWithBytesNoCopy:length:encoding:freeWhenDone:
regularExpressionWithPattern:options:error:
firstMatchInString:options:range:
_getLegacyUniformData
uniformType
textureValue
_getMetalVertexOutDefinition
_fullVertexSourceWithImplementation:
generateVertexAttributeDeclares:statements:
generateFragmentAttributeDeclares:
fragmentPrelude
source
_fullMetalVertexSourceWithImplementation:
fragmentPreludeMetal
_generateMetalSource
_addTargetShader:
removeObject:
_removeTargetShader:
_backingProgram
_makeBackingProgramWithImplementation:
fullMetalVertexSource
fullMetalVertexWithTransformSource
fullMetalFragmentSource
fullVertexSource
fullVertexWithTransformSource
fullFragmentSource
stringWithUTF8String:
vectorFloat2Value
vectorFloat3Value
vectorFloat4Value
matrixFloat2x2Value
matrixFloat3x3Value
matrixFloat4x4Value
_commandsForBatchOffset:count:
stringByReplacingOccurrencesOfString:withString:options:range:
_getMetalFragmentFunctionName
compact
addPointer:
pointerAtIndex:
replacePointerAtIndex:withPointer:
uniforms
shaderWithFileNamed:
setAttributes:
shaderWithSource:uniforms:
uniformWithName:vectorFloat2:
shaderWithSource:
addUniform:
uniformNamed:
removeUniformNamed:
_textureUniforms
isValid
_backingProgramIsDirty
_backingProgramWithTransform
_commands
_getShaderCompilationLog
_setUniformsDirty
_uniforms
_attributes
_uniformData
_source
_compileLog
_programDirty
_programWithTransformDirty
_targetNodes
_usesSpriteSizeUniform
render
setPath:
shapeNodeWithPath:
shapeNodeWithEllipseInRect:
shapeNodeWithEllipseOfSize:
shapeNodeWithRect:
shapeNodeWithRect:cornerRadius:
fillColor
strokeColor
lineWidth
glowWidth
isAntialiased
setAntialiased:
setGlowWidth:
setStrokeColor:
setFillColor:
setLineCap:
setLineJoin:
setMiterLimit:
lineJoin
lineCap
miterLimit
strokeTexture
fillTexture
setLineWidth:
setStrokeTexture:
setFillTexture:
renderQualityRatio
setRenderQualityRatio:
fillShader
setFillShader:
strokeShader
setStrokeShader:
shapeNodeWithPath:centered:
shapeNodeWithCircleOfRadius:
shapeNodeWithRectOfSize:
shapeNodeWithRectOfSize:cornerRadius:
shapeNodeWithTriangleA:B:C:
shapeNodeWithPoints:count:
shapeNodeWithSplinePoints:count:
lineLength
_skcShapeNode
filter
shouldRasterize
shouldEnableEffects
shouldCenterFilter
setFilter:
setShouldCenterFilter:
setShouldRasterize:
_skcEffectNode
initWithSize:ioSurfaceBacked:pixelFormat:
mutableTextureWithSize:
initWithSize:pixelFormat:
modifyPixelDataWithBlock:
_ioSurface
_ioSurfaceBacked
_textureSize
_pixelData
_pixelDataLength
_pixelFormat
_getTextSprites
setFont:
text
fontColor
green
blue
fontSize
horizontalAlignmentMode
verticalAlignmentMode
setFontSize:
setFontName:
setText:
setHorizontalAlignmentMode:
setVerticalAlignmentMode:
setFontColor:
initWithFontNamed:
labelNodeWithText:
_skcLabelNode
_labelNodeWithFontNamed:
_labelNodeWithFontTexture:fontDataString:
_setup
initWithDisplay:handler:client:
display
_teardown
_caDisplayLinkCallback
displayLinkWithDisplay:target:selector:
displayLinkWithTarget:selector:
mainRunLoop
addToRunLoop:forMode:
targetTimestamp
timestamp
_callbackForNextFrame:
_callbackAlreadyInProgress
_setCallbackAlreadyInProgress:
setDisplay:
_timer
_client
_caDisplayLink
_display
_previousFrameTime
_averageFrameTime
_frameCount
_frameCountBeginTime
_audioURLWithName:bundle:
bufferWithFileNamed:
sourceWithBuffer:
URLForResource:withExtension:
_soundSource
play
inputKeys
vectorWithX:Y:
revealDownWithDuration:
revealUpWithDuration:
revealLeftWithDuration:
revealRightWithDuration:
moveInDownWithDuration:
moveInUpWithDuration:
moveInLeftWithDuration:
moveInRightWithDuration:
pushDownWithDuration:
pushUpWithDuration:
pushLeftWithDuration:
pushRightWithDuration:
revealWithDirection:duration:
moveInWithDirection:duration:
pushWithDirection:duration:
fadeWithDuration:
fadeWithColor:duration:
crossFadeWithDuration:
flipHorizontalWithDuration:
flipVerticalWithDuration:
doorsOpenHorizontalWithDuration:
doorsOpenVerticalWithDuration:
doorsCloseHorizontalWithDuration:
doorsCloseVerticalWithDuration:
doorwayWithDuration:
transitionWithCIFilter:duration:
setPausesIncomingScene:
pausesIncomingScene
setPausesOutgoingScene:
pausesOutgoingScene
_duration
_skcTransitionNode
assetWithURL:
videoNodeWithFileNamed:
videoNodeWithURL:
initWithFileNamed:
initWithURL:
initWithAVPlayer:
videoNodeWithVideoFileNamed:
videoNodeWithVideoURL:
videoNodeWithAVPlayer:
_player
set_player:
initWithVideoURL:
initWithVideoFileNamed:
_skcVideoNode
_videoFileName
_videoFileURL
setSearchPaths:
setMaskNode:
setPrefersAlphaMask:
setInvertMask:
prefersAlphaMask
invertMask
maskNode
useAlphaMask:
_mask
_skcCropNode
dataWithBytes:length:
imageWithBitmapData:bytesPerRow:size:format:colorSpace:
filterWithName:keysAndValues:
contextWithOptions:
createCGImage:fromRect:
setReferenceURL:
setReferenceFileName:
referenceFileName
referenceURL
URLWithString:
dataWithContentsOfURL:options:error:
didLoadReferenceNode:
_resolveReferenceNode
referenceNodeWithURL:
referenceNodeWithFileNamed:
resolvedNode
_referenceURL
_referenceFileName
_resolvedNode
_hasResolvedURL
_selector
targetShader
setTargetShader:
_targetShader
set_seed:
initWithName:
setFloatValue:
setTextureValue:
setVectorFloat2Value:
setVectorFloat3Value:
setVectorFloat4Value:
setMatrixFloat2x2Value:
setMatrixFloat3x3Value:
setMatrixFloat4x4Value:
setFloatVector2Value:
setFloatVector3Value:
setFloatVector4Value:
setFloatMatrix2Value:
setFloatMatrix3Value:
setFloatMatrix4Value:
initWithName:float:
initWithName:vectorFloat2:
initWithName:vectorFloat3:
initWithName:vectorFloat4:
initWithName:matrixFloat2x2:
initWithName:matrixFloat3x3:
initWithName:matrixFloat4x4:
initWithName:floatVector2:
initWithName:floatVector3:
initWithName:floatVector4:
initWithName:floatMatrix2:
initWithName:floatMatrix3:
initWithName:floatMatrix4:
initWithName:texture:
_seed
_propagateChange
uniformWithName:
uniformWithName:float:
uniformWithName:vectorFloat3:
uniformWithName:vectorFloat4:
uniformWithName:matrixFloat2x2:
uniformWithName:matrixFloat3x3:
uniformWithName:matrixFloat4x4:
uniformWithName:floatVector2:
uniformWithName:floatVector3:
uniformWithName:floatVector4:
uniformWithName:floatMatrix2:
uniformWithName:floatMatrix3:
uniformWithName:floatMatrix4:
uniformWithName:texture:
floatVector2Value
floatVector3Value
floatVector4Value
floatMatrix2Value
floatMatrix3Value
floatMatrix4Value
_textureValue
_targetShaders
_value
infiniteRegion
initWithRadius:
initWithPath:
inverseRegion
regionByDifferenceFromRegion:
isInfinite
isEmpty
regionByUnionWithRegion:
regionByIntersectionWithRegion:
containsPoints:locationStride:results:resultsStride:count:
setRate:
currentItem
initWithPixelBufferAttributes:
outputs
addOutput:
itemTimeForHostTime:
hasNewPixelBufferForItemTime:
copyPixelBufferForItemTime:itemTimeForDisplay:
playerItemWithAsset:
replaceCurrentItemWithPlayerItem:
calcNonAlphaArea:
arrayWithObjects:
enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:
getResourceValue:forKey:error:
defaultCStringEncoding
stringWithCString:encoding:
copyRotateCGImage:direction:
isFullyOpaque:
partitionTextureFilesByResolution:
generateMetaData
copyProcessedImageSource:
cStringUsingEncoding:
processPackedTextureAtlas:suffix:packer:sortedTrimArray:sortedTextureArray:
getTextureFileList:modDate:
archiver:willEncodeObject:
archiver:didEncodeObject:
archiver:willReplaceObject:withObject:
archiverWillFinish:
archiverDidFinish:
nonretainedObjectValue
fileURLWithPath:
valueWithNonretainedObject:
bufferId
_bufferId
_path
context
suspended
makeCurrentContext
listenerPosition
gain
setGain:
_device
_context
_suspended
queueBuffer:
completedBufferCount
removeObjectsInRange:
stringByAppendingFormat:
queuedBufferCount
purgeCompletedBuffers
shouldLoop
setShouldLoop:
_sourceId
_buffers
engine
dataWithLength:
mutableBytes
increaseLengthBy:
dataWithData:
gzipDeflate:
makeArchive:length:level:
indexSet
addIndex:
removeObjectsAtIndexes:
bundleWithIdentifier:
localizedStringForKey:value:table:
tileSet
lastTargetTime
frameDidChange
nextFrameAffectsVertexBuffer
setFrameDidChange:
textures
setLastTargetTime:
currentFrameTime
setCurrentFrameTime:
currentFrameIndex
setCurrentFrameIndex:
setNextFrameAffectsVertexBuffer:
normalTextures
flipVertically
flipHorizontally
tileSize
bodyWithCircleOfRadius:center:
bodyWithRectangleOfSize:edgeRadius:
bodyWithRectangleOfSize:center:edgeRadius:
bodyWithPolygonFromPath:
bodyWithEdgeFromPoint:toPoint:
bodyWithEdgeChainFromPath:
bodyWithEdgeLoopFromPath:
physicsBodyFromLVS0:
bodyWithTexture:alphaThreshold:size:
physicsBodyFromSmoothedOutline:size:
bodyWithBodies:
bodyWithRectangleOfSize:
bodyWithRectangleOfSize:center:
bodyWithEdgeLoopFromRect:
bodyWithTexture:size:
applyForce:
applyForce:atPoint:
applyTorque:
applyImpulse:
applyImpulse:atPoint:
applyAngularImpulse:
allContactedBodies
isDynamic
usesPreciseCollisionDetection
setUsesPreciseCollisionDetection:
setAllowsRotation:
setPinned:
isResting
setResting:
friction
setFriction:
charge
setCharge:
restitution
setRestitution:
linearDamping
setLinearDamping:
angularDamping
setAngularDamping:
density
setDensity:
mass
setMass:
area
affectedByGravity
setAffectedByGravity:
collisionBitMask
setCollisionBitMask:
contactTestBitMask
setContactTestBitMask:
joints
angularVelocity
setAngularVelocity:
_dynamic
_usesPreciseCollisionDetection
_allowsRotation
_pinned
_resting
_affectedByGravity
_friction
_charge
_restitution
_linearDamping
_angularDamping
_density
_mass
_area
_fieldBitMask
_categoryBitMask
_collisionBitMask
_contactTestBitMask
_angularVelocity
applyImpulse:duration:
applyImpulse:atPoint:duration:
applyAngularImpulse:duration:
changeChargeTo:duration:
changeChargeBy:duration:
changeMassTo:duration:
changeMassBy:duration:
applyForce:duration:
applyForce:atPoint:duration:
applyTorque:duration:
set_allowSleep:
contactPoint
contactNormal
collisionImpulse
_bodyA
_bodyB
_collisionImpulse
_contactPoint
_contactNormal
setUid:
setPlacementWeight:
placementWeight
setTextures:
setNormalTextures:
UUID
UUIDString
setDataWithTexture:normalTexture:tileName:size:
setDataWithTextures:normalTextures:timePerFrame:tileName:size:
initWithTexture:size:
initWithTexture:normalTexture:size:
initWithTextures:size:timePerFrame:
initWithTextures:normalTextures:size:timePerFrame:
tileDefinitionWithTexture:
tileDefinitionWithTexture:size:
tileDefinitionWithTexture:normalTexture:size:
tileDefinitionWithTextures:size:timePerFrame:
tileDefinitionWithTextures:normalTextures:size:timePerFrame:
setFlipVertically:
setFlipHorizontally:
parentRule
_normals
_orientation
_frameDidChange
_nextFrameAffectsVertexBuffer
_currentFrameIndex
_timePerFrame
_placementWeight
_parentRule
_uid
_currentFrameTime
_lastTargetTime
initWithAVAudioNode:
setAutoplayLooped:
setPositional:
setAudioFileName:
setAudioURL:
audioFileName
_setAudioName:bundle:
audioURL
initForReading:error:
setAvAudioNode:
autoplayLooped
initWithFileNamed:bundle:
avAudioNode
_playLooped
scheduleFile:atTime:completionHandler:
audioFile
detachNode:
setRenderingAlgorithm:
processingFormat
channelCount
sampleRate
isPositional
_skcAudioNode
_autoplayLooped
_positional
rate
changePlaybackRateTo:duration:
changePlaybackRateBy:duration:
setVolume:
changeVolumeTo:duration:
changeVolumeBy:duration:
setPan:
setReverbBlend:
reverbBlend
setObstruction:
obstruction
setOcclusion:
occlusion
stereoPanTo:duration:
stereoPanBy:duration:
changeReverbTo:duration:
changeReverbBy:duration:
changeObstructionTo:duration:
changeObstructionBy:duration:
changeOcclusionTo:duration:
changeOcclusionBy:duration:
setBodyA:
setBodyB:
reactionForce
reactionTorque
__implicit
shouldEnableLimits
setShouldEnableLimits:
frictionTorque
rotationSpeed
setRotationSpeed:
anchor
_shouldEnableLimits
_frictionTorque
_rotationSpeed
_anchor
jointWithBodyA:bodyB:anchorA:anchorB:
damping
setDamping:
frequency
setFrequency:
_damping
_frequency
jointWithBodyA:bodyB:anchor:axis:
lowerDistanceLimit
setLowerDistanceLimit:
upperDistanceLimit
setUpperDistanceLimit:
_lowerDistanceLimit
_upperDistanceLimit
maxLength
setMaxLength:
_maxLength
removeAllBodies
fields
removeAllJoints
enumerateBodiesAtPoint:usingBlock:
enumerateBodiesInRect:usingBlock:
enumerateBodiesAlongRayStart:end:usingBlock:
bodyAtPoint:
bodyInRect:
bodyAlongRayStart:end:
sampleFields:
sampleFieldsAt:
gravity
setGravity:
contactDelegate
setContactDelegate:
_contactDelegate
_gravity
getRed:green:blue:alpha:
getWhite:alpha:
renderForTime:
openGLNodeWithViewportSize:
needsRenderForTime:
pointerValue
cyanColor
debugDraw:matrix:showsPhysics:showsOutlineInterior:showsFields:
debugDrawPacket
initWithKeyframeValues:times:
setInterpolationMode:
setRepeatMode:
_dirtySKCKeyframeSequence
null
removeLastObject
replaceObjectAtIndex:withObject:
setKeyframeValue:forIndex:
setKeyframeTime:forIndex:
_createSKCKeyframeSequence
_valueClass
addKeyframeValue:time:
removeLastKeyframe
removeAllKeyframes
removeKeyframeAtIndex:
setKeyframeValue:time:forIndex:
sampleAtTime:
_count
_values
_times
_interpolationMode
_repeatMode
_cKeyframeSequence
initWithCount:
standardUserDefaults
dictionaryForKey:
cameraBoundingBox
containsNode:
cameraBoundingBoxOverridingSceneSize:
containedNodeSet
initWithLowerLimit:upperLimit:
setLowerLimit:
setUpperLimit:
rangeWithLowerLimit:upperLimit:
rangeWithNoLimits
rangeWithLowerLimit:
rangeWithUpperLimit:
rangeWithConstantValue:
rangeWithValue:variance:
_lowerLimit
_upperLimit
setReferenceNode:
constraintWithXRange:
constraintWithYRange:
constraintWithXRange:YRange:
constraintWithNode:distanceRange:
constraintWithPoint:distanceRange:
constraintWithPoint:inNode:distanceRange:
constraintWithZRotationRange:
constraintOrientingToPoint:inNode:offset:
constraintOrientingToNode:offset:
constraintOrientingToPoint:offset:
constraintWithWidthRange:
constraintWithHeightRange:
constraintWithWidthRange:heightRange:
constraintWithScaleRange:
positionX:
positionY:
positionX:Y:
distance:toNode:
distance:toPoint:
distance:toPoint:inNode:
zRotation:
orientToPoint:inNode:offset:
orientToNode:offset:
orientToPoint:offset:
width:
height:
width:height:
scale:
scaleX:
scaleY:
scaleX:scaleY:
_enabled
_referenceNode
setWidthRange:
setHeightRange:
initWithWidthRange:heightRange:
_widthRange
_heightRange
setXRange:
setYRange:
initWithXRange:YRange:
_xRange
_yRange
setZRotationRange:
initWithZRotationRange:
_zRotationRange
setOffset:
setPoint:
initWithNode:point:offset:
_offset
_point
setDistanceRange:
initWithPoint:inNode:distanceRange:
_distanceRange
setColumns:andRows:
calculateSize
setTileSize:
rebuildTileSprites
shouldUnarchiveTileSet
setTileSetName:
tileSetName
setStartData:rows:tileSize:tileSet:
fillWithTileGroup:
initWithTileSet:columns:rows:tileSize:
initWithTileSet:columns:rows:tileSize:fillWithTileGroup:
initWithTileSet:columns:rows:tileSize:tileGroupLayout:
removeAllTiles
updateTileGroupsAtX:y:
updateTileDefinitionWithoutAutomappingAtX:y:
getTileIDWithTileGroup:andTileDefinition:
enableAutomapping
tileMapNodeWithTileSet:columns:rows:tileSize:
tileMapNodeWithTileSet:columns:rows:tileSize:fillWithTileGroup:
tileMapNodeWithTileSet:columns:rows:tileSize:tileGroupLayout:
setNumberOfColumns:
setNumberOfRows:
mapSize
setTileSet:
setEnableAutomapping:
setRawTiles:rows:columns:
fillWithTileDefinition:
tileDefinitionAtColumn:row:
tileGroupAtColumn:row:
setTileGroup:forColumn:row:
setTileGroup:andTileDefinition:forColumn:row:
setTileGroupWithoutUpdate:forColumn:row:
setTileGroupWithoutUpdate:tileDefinition:forColumn:row:
setTileGroup:forTileIndicies:
setTileGroup:andTileDefinition:forTileIndicies:
validateAllTiles
fillArrayWithTiles:
fillArray:withTilesFromColumn:row:forWidth:height:
setTilesFromArray:
setTilesFromArray:fromColumn:row:forWidth:height:
clearModifiedTileTracking
getTileModifiedData:outMinRowModified:outMaxColumnModified:outmaxRowModified:
tileColumnIndexFromPosition:
tileRowIndexFromPosition:
centerOfTileAtColumn:row:
createTileStampFromColumn:row:withWidth:height:addToTileSet:
applyTileStamp:inColumn:row:
forceRedraw
_skcTileMapNode
_tileSet
_tileSize
_isoOrigin
_isoColumnVector
_isoRowVector
_isoColumnWidth
_isoRowHeight
_isoHeightScalar
_hexRadius
_enableAutomapping
_tileSetName
initWithName:type:
attributeWithName:type:
_nameString
valueWithFloat:
valueWithVectorFloat2:
valueWithVectorFloat3:
valueWithVectorFloat4:
floatValues
halfFloatValues
^{SKCAction=^^?If@?@BddffdBB@?iffff}8@0:4
@20@0:4@8d12
@16@0:4@8@12
@20@0:4@8@12B16
@12@0:4^{_NSZone=}8
v12@0:4@8
v12@0:4@"NSCoder"8
@12@0:4@8
@12@0:4@"NSCoder"8
@8@0:4
@?8@0:4
v12@0:4@?8
d8@0:4
v16@0:4d8
i8@0:4
v12@0:4i8
v8@0:4
v12@0:4f8
f8@0:4
^{SKCAction=^^?If@?@BddffdBB@?iffff}
@24@0:4f8f12d16
@24@0:4{CGVector=ff}8d16
@24@0:4{CGPoint=ff}8d16
@20@0:4f8d12
@24@0:4f8d12B20
@24@0:4{CGSize=ff}8d16
@16@0:4@8I12
@16@0:4d8
@16@0:4@8B12
@28@0:4@8d12B20B24
@24@0:4@8{CGPoint=ff}12B20
@24@0:4@8f12d16
@20@0:4^{CGPath=}8d12
@28@0:4^{CGPath=}8B12B16d20
@16@0:4^{CGPath=}8f12
@24@0:4^{CGPath=}8B12B16f20
@28@0:4{CGPoint=ff}8@16d20
@24@0:4{CGPoint=ff}8@16f20
@24@0:4@8@12d16
@20@0:4@8@12f16
@24@0:4d8d16
@16@0:4:8@12
@12@0:4@?8
@16@0:4@?8@12
@20@0:4d8@16
@20@0:4d8@?16
v20@0:4@8d12
#20@0:4@8@12@16
v12@0:4^v8
B8@0:4
v12@0:4B8
f16@0:4d8
@"NSDictionary"
@"NSMutableDictionary"
^{SKCReferencedAction=^^?If@?@BddffdBB@?iffff^{SKCAction}}
@"SKAction"
@"NSString"
^{SKCAnimate=^^?If@?@BddffdBB@?iffff{vector<SKTexture *, std::__1::allocator<SKTexture *> >=^@^@{__compressed_pair<SKTexture *__strong *, std::__1::allocator<SKTexture *> >=^@}}d@{?=ff}BBB}
@"NSArray"
^{SKCNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}}8@0:4
^{SKCParticleSystemNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}I@@I^{SKCParticleManager}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}}
^{SKCColorize=^^?If@?@BddffdBB@?iffff{?=ffff}f{?=ffff}f{?=ffff}fB}
^{SKCFade=^^?If@?@BddffdBB@?ifffffffB}
@24@0:48
@16@0:4f8f12
I8@0:4
v12@0:4I8
8@0:4
v24@0:48
B12@0:4@8
@"PKPhysicsField"
@"SKRegion"
@"SKTexture"
^{SKCGroup=^^?If@?@BddffdBB@?iffff{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}}
^{SKCMove=^^?If@?@BddffdBB@?ifffff{?=ff}{?=ff}{?=ff}BBBB}
^{SKCFalloff=^^?If@?@BddffdBB@?ifffffffffBB}
^{SKCRepeat=^^?If@?@BddffdBB@?iffff^{SKCAction}IIB}
@28@0:4f8f12f16d20
^{SKCRotate=^^?If@?@BddffdBB@?iffffffffffffffBBBBBB}
i12@0:4@8
v16@0:4@8i12
@12@0:4^{SKCRenderer=@f{shared_ptr<SKCRenderPass>=^{SKCRenderPass}^{__shared_weak_count}}I{shared_ptr<jet_command_buffer>=^{jet_command_buffer}^{__shared_weak_count}}{list<std::__1::shared_ptr<SKCRenderPass>, std::__1::allocator<std::__1::shared_ptr<SKCRenderPass> > >={__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>=^{__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>}^{__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<SKCRenderPass>, void *> > >=L}}{?=II^^^{?=[4]}f^{SKCRenderer}f{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}^{jet_buffer}^{jet_buffer}^{jet_buffer}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer>=^{jet_buffer}^{__shared_weak_count}}{shared_ptr<jet_buffer>=^{jet_buffer}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}BI{SKCRenderBatch=BiII@^{jet_program}^{jet_texture}^{jet_texture}^{jet_sampler}^{jet_sampler}IIf}^{SKCStats}{vector<std::__1::shared_ptr<jet_buffer>, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > >=^{shared_ptr<jet_buffer>}^{shared_ptr<jet_buffer>}{__compressed_pair<std::__1::shared_ptr<jet_buffer> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > >=^{shared_ptr<jet_buffer>}}}{vector<std::__1::shared_ptr<jet_buffer_pool>, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > >=^{shared_ptr<jet_buffer_pool>}^{shared_ptr<jet_buffer_pool>}{__compressed_pair<std::__1::shared_ptr<jet_buffer_pool> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > >=^{shared_ptr<jet_buffer_pool>}}}}^{SKCStats}{SKCStats=^^?ddddi{?=dd}{?=dd}{?=ddi}{?=ddi}{?=ddiiiiiiii}}@@BBB{shared_ptr<jet_context>=^{jet_context}^{__shared_weak_count}}{shared_ptr<jet_fence>=^{jet_fence}^{__shared_weak_count}}{map<SKCLightNode *, float __attribute__((ext_vector_type(4))), std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, float __attribute__((ext_vector_type(4)))> > >={__tree<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))> > >=^{__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true> >=L}}}{map<unsigned int, SKCLightMaskUniforms, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, SKCLightMaskUniforms> > >={__tree<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, SKCLightMaskUniforms> > >=^{__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true> >=L}}}{vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >=^^{SKCRenderSortInfo}^^{SKCRenderSortInfo}{__compressed_pair<SKCRenderSortInfo **, std::__1::allocator<SKCRenderSortInfo *> >=^^{SKCRenderSortInfo}}}{map<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > >, std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > >={__tree<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > >=^{__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true> >=L}}}^{SKCSpriteNode}^{SKCLabelNode}{?=^{SKCRenderPass}^{SKCRenderSortGroup}I{list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >={__list_node_base<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}^{__list_node_base<SKCRenderSortInfo *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > >=L}}{list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >={__list_node_base<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}^{__list_node_base<SKCRenderSortInfo *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > >=L}}{__list_iterator<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}}}{vector<std::__1::shared_ptr<jet_framebuffer>, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > >=^{shared_ptr<jet_framebuffer>}^{shared_ptr<jet_framebuffer>}{__compressed_pair<std::__1::shared_ptr<jet_framebuffer> *, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > >=^{shared_ptr<jet_framebuffer>}}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}@}8
v16@0:4i8B12
v32@0:4@8f12^B16^B20^B24^B28
v40@0:4@8I12I16{CGSize=ff}20{CGSize=ff}28f36
v44@0:4@8i12I16I20{CGSize=ff}24{CGSize=ff}32f40
{CGSize=ff}8@0:4
{?=[4]}8@0:4
{CGRect={CGPoint=ff}{CGSize=ff}}8@0:4
v24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
^{SKCRenderer=@f{shared_ptr<SKCRenderPass>=^{SKCRenderPass}^{__shared_weak_count}}I{shared_ptr<jet_command_buffer>=^{jet_command_buffer}^{__shared_weak_count}}{list<std::__1::shared_ptr<SKCRenderPass>, std::__1::allocator<std::__1::shared_ptr<SKCRenderPass> > >={__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>=^{__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>}^{__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<SKCRenderPass>, void *> > >=L}}{?=II^^^{?=[4]}f^{SKCRenderer}f{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}^{jet_buffer}^{jet_buffer}^{jet_buffer}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer>=^{jet_buffer}^{__shared_weak_count}}{shared_ptr<jet_buffer>=^{jet_buffer}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}BI{SKCRenderBatch=BiII@^{jet_program}^{jet_texture}^{jet_texture}^{jet_sampler}^{jet_sampler}IIf}^{SKCStats}{vector<std::__1::shared_ptr<jet_buffer>, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > >=^{shared_ptr<jet_buffer>}^{shared_ptr<jet_buffer>}{__compressed_pair<std::__1::shared_ptr<jet_buffer> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > >=^{shared_ptr<jet_buffer>}}}{vector<std::__1::shared_ptr<jet_buffer_pool>, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > >=^{shared_ptr<jet_buffer_pool>}^{shared_ptr<jet_buffer_pool>}{__compressed_pair<std::__1::shared_ptr<jet_buffer_pool> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > >=^{shared_ptr<jet_buffer_pool>}}}}^{SKCStats}{SKCStats=^^?ddddi{?=dd}{?=dd}{?=ddi}{?=ddi}{?=ddiiiiiiii}}@@BBB{shared_ptr<jet_context>=^{jet_context}^{__shared_weak_count}}{shared_ptr<jet_fence>=^{jet_fence}^{__shared_weak_count}}{map<SKCLightNode *, float __attribute__((ext_vector_type(4))), std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, float __attribute__((ext_vector_type(4)))> > >={__tree<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))> > >=^{__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true> >=L}}}{map<unsigned int, SKCLightMaskUniforms, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, SKCLightMaskUniforms> > >={__tree<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, SKCLightMaskUniforms> > >=^{__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true> >=L}}}{vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >=^^{SKCRenderSortInfo}^^{SKCRenderSortInfo}{__compressed_pair<SKCRenderSortInfo **, std::__1::allocator<SKCRenderSortInfo *> >=^^{SKCRenderSortInfo}}}{map<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > >, std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > >={__tree<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > >=^{__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true> >=L}}}^{SKCSpriteNode}^{SKCLabelNode}{?=^{SKCRenderPass}^{SKCRenderSortGroup}I{list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >={__list_node_base<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}^{__list_node_base<SKCRenderSortInfo *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > >=L}}{list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >={__list_node_base<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}^{__list_node_base<SKCRenderSortInfo *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > >=L}}{__list_iterator<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}}}{vector<std::__1::shared_ptr<jet_framebuffer>, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > >=^{shared_ptr<jet_framebuffer>}^{shared_ptr<jet_framebuffer>}{__compressed_pair<std::__1::shared_ptr<jet_framebuffer> *, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > >=^{shared_ptr<jet_framebuffer>}}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}@}
@"SKLabelNode"
@"SKScene"
{CGRect="origin"{CGPoint="x"f"y"f}"size"{CGSize="width"f"height"f}}
@"SKNode"
^{SKCHide=^^?If@?@BddffdBB@?iffffB}
@20@0:4r*8i12i16
@20@0:4@8f12f16
@16@0:4@8f12
v44@0:4@8{CGSize=ff}12f20@24@28{CGSize=ff}32@40
v36@0:4@8i12f16{CGSize=ff}20@28@32
^{SKCLightNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}^{ShadowInfo}BfI}
^{SKCAnimateMesh=^^?If@?@BddffdBB@?iffff@@@B}
I20@0:4^{?=L^@^L[5L]}8^@12I16
@12@0:4:8
{_opaque_pthread_mutex_t="__sig"l"__opaque"[40c]}
@"NSMutableArray"
^{SKCScale=^^?If@?@BddffdBB@?ifffffffffffffBBBBB{CGSize=ff}}
^{SKCSequence=^^?If@?@BddffdBB@?iffff{vector<SKCAction *, std::__1::allocator<SKCAction *> >=^^{SKCAction}^^{SKCAction}{__compressed_pair<SKCAction **, std::__1::allocator<SKCAction *> >=^^{SKCAction}}}L}
@16@0:4{CGSize=ff}8
v16@0:4{CGSize=ff}8
@20@0:4{CGPoint=ff}8@16
24@0:48
^{SKC3DNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}@{SCNVector3=fff}@d@@BBB}
^{SKCWait=^^?If@?@BddffdBB@?iffff}
B16@0:4@8@12
@12@0:4S8
f12@0:4S8
f16@0:4S8S12
{map<unsigned short, SKSpriteNode *, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, SKSpriteNode *> > >="__tree_"{__tree<std::__1::__value_type<unsigned short, SKSpriteNode *>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, SKSpriteNode *>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, SKSpriteNode *> > >="__begin_node_"^{__tree_node<std::__1::__value_type<unsigned short, SKSpriteNode *>, void *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, SKSpriteNode *>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, SKSpriteNode *>, std::__1::less<unsigned short>, true> >="__first_"L}}}
{map<unsigned short, float, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, float> > >="__tree_"{__tree<std::__1::__value_type<unsigned short, float>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, float>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, float> > >="__begin_node_"^{__tree_node<std::__1::__value_type<unsigned short, float>, void *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, float>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, float>, std::__1::less<unsigned short>, true> >="__first_"L}}}
{map<unsigned int, float, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, float> > >="__tree_"{__tree<std::__1::__value_type<unsigned int, float>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, float>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, float> > >="__begin_node_"^{__tree_node<std::__1::__value_type<unsigned int, float>, void *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, float>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, float>, std::__1::less<unsigned int>, true> >="__first_"L}}}
f12@0:4f8
(_GLKVector2={?=ff}{?=ff}[2f])8@0:4
v16@0:4(_GLKVector2={?=ff}{?=ff}[2f])8
(_GLKVector2=""{?="x"f"y"f}""{?="s"f"t"f}"v"[2f])
@32@0:4{CGPoint=ff}8@16f20d24
@32@0:4{CGPoint=ff}8@16d20f28
{CGPoint="x"f"y"f}
B112@0:4^{CGImage=}8{CGAffineTransform=ffffff}12{CGSize=ff}36{CGPoint=ff}44{CGPoint=ff}52^{CGImage=}60{CGAffineTransform=ffffff}64{CGSize=ff}88{CGPoint=ff}96{CGPoint=ff}104
^{CGImage=}112@0:4^{CGImage=}8{CGAffineTransform=ffffff}12{CGSize=ff}36{CGPoint=ff}44{CGPoint=ff}52^{CGImage=}60{CGAffineTransform=ffffff}64{CGSize=ff}88{CGPoint=ff}96{CGPoint=ff}104
@20@0:4@8{CGSize=ff}12
{CGPoint=ff}16@0:4{CGPoint=ff}8
{CGPoint=ff}8@0:4
v16@0:4{CGPoint=ff}8
@"NSMapTable"
@"SKPhysicsBody"
^{SKCSceneNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}@B@{shared_ptr<jet_framebuffer>=^{jet_framebuffer}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}BI@BB@Ii^{SKCSpriteNode}^{SKCSpriteNode}}
@"AVAudioEngine"
@"SKPhysicsWorld"
@"SKCameraNode"
@"<SKSceneDelegate>"
@"AVAudioEnvironmentNode"
@"PKPhysicsWorld"
v16@0:4@8@12
v20@0:4I8{CGPoint=ff}12
@"NSObject<SKButtonNodeDelegate>"
@"NSObject<SKButtonNodeSpriteDelegate>"
@16@0:4i8i12
@24@0:4i8i12r^16r^20
12@0:4i8
r^8@0:4
@12@0:4r^8
{vector<float __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> >="__begin_"^"__end_"^"__end_cap_"{__compressed_pair<float * __attribute__((ext_vector_type(2))), std::__1::allocator<float __attribute__((ext_vector_type(2)))> >="__first_"^}}
^{_opaque_pthread_mutex_t=l[40c]}8@0:4
*8@0:4
v12@0:4*8
{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}8@0:4
v16@0:4{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}8
{CGSize="width"f"height"f}
{shared_ptr<jet_texture>="__ptr_"^{jet_texture}"__cntrl_"^{__shared_weak_count}}
v16@0:4@8@?12
@28@0:4@8{CGRect={CGPoint=ff}{CGSize=ff}}12
@28@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8@24
@20@0:4f8{CGSize=ff}12
@24@0:4f8{CGSize=ff}12B20
@20@0:4^{CGImage=}8{CGSize=ff}12
@12@0:4^{CGImage=}8
@24@0:4@8{CGSize=ff}12B20
@28@0:4@8{CGSize=ff}12I20I24
^{CGImage=}8@0:4
v16@0:4r^{CGSize=ff}8r^{CGSize=ff}12
v20@0:4^{CGImage=}8{CGSize=ff}12
^I8@0:4
@"CIFilter"
@"SKTextureCache"
@"SKTextureAtlas"
@16@0:4{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}8
@24@0:4{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}8f16f20
@20@0:4f8f12L16
@20@0:4I8{CGSize=ff}12
@28@0:4@8{CGSize=ff}12I20B24
@20@0:4*8{CGSize=ff}12
@28@0:4*8{CGSize=ff}12I20I24
@24@0:4I8I12I16I20
{unordered_map<std::__1::basic_string<char>, SKTexture *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKTexture *> > >="__table_"{__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> *> > >="__first_"^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> *> >="__first_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *> *>="__next_"^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, void *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, std::__1::hash<std::__1::basic_string<char> >, true> >="__first_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKTexture *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >="__first_"f}}}
^{CGImage=}36@0:4^{CGImage=}8{CGSize=ff}12{CGRect={CGPoint=ff}{CGSize=ff}}20
v20@0:4@8@12B16
^{SKCStrength=^^?If@?@BddffdBB@?ifffffffffBB}
#8@0:4
v20@0:4d8B16
B16@0:4d8
v24@0:4d8@?16@?20
v28@0:4I8f12B16@?20@?24
{CGPoint=ff}20@0:4{CGPoint=ff}8@16
@24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
v16@0:4I8f12
^{SKCRenderer=@f{shared_ptr<SKCRenderPass>=^{SKCRenderPass}^{__shared_weak_count}}I{shared_ptr<jet_command_buffer>=^{jet_command_buffer}^{__shared_weak_count}}{list<std::__1::shared_ptr<SKCRenderPass>, std::__1::allocator<std::__1::shared_ptr<SKCRenderPass> > >={__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>=^{__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>}^{__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<SKCRenderPass>, void *> > >=L}}{?=II^^^{?=[4]}f^{SKCRenderer}f{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}^{jet_buffer}^{jet_buffer}^{jet_buffer}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer>=^{jet_buffer}^{__shared_weak_count}}{shared_ptr<jet_buffer>=^{jet_buffer}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}BI{SKCRenderBatch=BiII@^{jet_program}^{jet_texture}^{jet_texture}^{jet_sampler}^{jet_sampler}IIf}^{SKCStats}{vector<std::__1::shared_ptr<jet_buffer>, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > >=^{shared_ptr<jet_buffer>}^{shared_ptr<jet_buffer>}{__compressed_pair<std::__1::shared_ptr<jet_buffer> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > >=^{shared_ptr<jet_buffer>}}}{vector<std::__1::shared_ptr<jet_buffer_pool>, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > >=^{shared_ptr<jet_buffer_pool>}^{shared_ptr<jet_buffer_pool>}{__compressed_pair<std::__1::shared_ptr<jet_buffer_pool> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > >=^{shared_ptr<jet_buffer_pool>}}}}^{SKCStats}{SKCStats=^^?ddddi{?=dd}{?=dd}{?=ddi}{?=ddi}{?=ddiiiiiiii}}@@BBB{shared_ptr<jet_context>=^{jet_context}^{__shared_weak_count}}{shared_ptr<jet_fence>=^{jet_fence}^{__shared_weak_count}}{map<SKCLightNode *, float __attribute__((ext_vector_type(4))), std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, float __attribute__((ext_vector_type(4)))> > >={__tree<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))> > >=^{__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true> >=L}}}{map<unsigned int, SKCLightMaskUniforms, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, SKCLightMaskUniforms> > >={__tree<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, SKCLightMaskUniforms> > >=^{__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true> >=L}}}{vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >=^^{SKCRenderSortInfo}^^{SKCRenderSortInfo}{__compressed_pair<SKCRenderSortInfo **, std::__1::allocator<SKCRenderSortInfo *> >=^^{SKCRenderSortInfo}}}{map<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > >, std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > >={__tree<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > >=^{__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true> >=L}}}^{SKCSpriteNode}^{SKCLabelNode}{?=^{SKCRenderPass}^{SKCRenderSortGroup}I{list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >={__list_node_base<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}^{__list_node_base<SKCRenderSortInfo *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > >=L}}{list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >={__list_node_base<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}^{__list_node_base<SKCRenderSortInfo *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > >=L}}{__list_iterator<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}}}{vector<std::__1::shared_ptr<jet_framebuffer>, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > >=^{shared_ptr<jet_framebuffer>}^{shared_ptr<jet_framebuffer>}{__compressed_pair<std::__1::shared_ptr<jet_framebuffer> *, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > >=^{shared_ptr<jet_framebuffer>}}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}@}8@0:4
{shared_ptr<jet_framebuffer>=^{jet_framebuffer}^{__shared_weak_count}}8@0:4
v12@0:4^{SKCRenderer=@f{shared_ptr<SKCRenderPass>=^{SKCRenderPass}^{__shared_weak_count}}I{shared_ptr<jet_command_buffer>=^{jet_command_buffer}^{__shared_weak_count}}{list<std::__1::shared_ptr<SKCRenderPass>, std::__1::allocator<std::__1::shared_ptr<SKCRenderPass> > >={__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>=^{__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>}^{__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<SKCRenderPass>, void *> > >=L}}{?=II^^^{?=[4]}f^{SKCRenderer}f{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}^{jet_buffer}^{jet_buffer}^{jet_buffer}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer>=^{jet_buffer}^{__shared_weak_count}}{shared_ptr<jet_buffer>=^{jet_buffer}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}BI{SKCRenderBatch=BiII@^{jet_program}^{jet_texture}^{jet_texture}^{jet_sampler}^{jet_sampler}IIf}^{SKCStats}{vector<std::__1::shared_ptr<jet_buffer>, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > >=^{shared_ptr<jet_buffer>}^{shared_ptr<jet_buffer>}{__compressed_pair<std::__1::shared_ptr<jet_buffer> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > >=^{shared_ptr<jet_buffer>}}}{vector<std::__1::shared_ptr<jet_buffer_pool>, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > >=^{shared_ptr<jet_buffer_pool>}^{shared_ptr<jet_buffer_pool>}{__compressed_pair<std::__1::shared_ptr<jet_buffer_pool> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > >=^{shared_ptr<jet_buffer_pool>}}}}^{SKCStats}{SKCStats=^^?ddddi{?=dd}{?=dd}{?=ddi}{?=ddi}{?=ddiiiiiiii}}@@BBB{shared_ptr<jet_context>=^{jet_context}^{__shared_weak_count}}{shared_ptr<jet_fence>=^{jet_fence}^{__shared_weak_count}}{map<SKCLightNode *, float __attribute__((ext_vector_type(4))), std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, float __attribute__((ext_vector_type(4)))> > >={__tree<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))> > >=^{__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true> >=L}}}{map<unsigned int, SKCLightMaskUniforms, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, SKCLightMaskUniforms> > >={__tree<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, SKCLightMaskUniforms> > >=^{__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true> >=L}}}{vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >=^^{SKCRenderSortInfo}^^{SKCRenderSortInfo}{__compressed_pair<SKCRenderSortInfo **, std::__1::allocator<SKCRenderSortInfo *> >=^^{SKCRenderSortInfo}}}{map<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > >, std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > >={__tree<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > >=^{__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true> >=L}}}^{SKCSpriteNode}^{SKCLabelNode}{?=^{SKCRenderPass}^{SKCRenderSortGroup}I{list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >={__list_node_base<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}^{__list_node_base<SKCRenderSortInfo *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > >=L}}{list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >={__list_node_base<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}^{__list_node_base<SKCRenderSortInfo *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > >=L}}{__list_iterator<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}}}{vector<std::__1::shared_ptr<jet_framebuffer>, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > >=^{shared_ptr<jet_framebuffer>}^{shared_ptr<jet_framebuffer>}{__compressed_pair<std::__1::shared_ptr<jet_framebuffer> *, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > >=^{shared_ptr<jet_framebuffer>}}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}@}8
{SKCStats="_vptr$SKCStats"^^?"frameBeginTime"d"frameDuration"d"baseTime"d"currentTime"d"frameCount"i"clientUpdate"{?="beginTime"d"duration"d}"update"{?="beginTime"d"duration"d}"physics"{?="beginTime"d"duration"d"bodyCount"i}"constraints"{?="beginTime"d"duration"d"constraintCount"i}"render"{?="beginTime"d"duration"d"opCount"i"quadCount"i"nodeTraversalCount"i"sknodeTraversalCount"i"nodeRenderCount"i"drawCallCount"i"passCount"i"maxBatchElementCount"i}}
{shared_ptr<jet_framebuffer>="__ptr_"^{jet_framebuffer}"__cntrl_"^{__shared_weak_count}}
{shared_ptr<jet_fence>="__ptr_"^{jet_fence}"__cntrl_"^{__shared_weak_count}}
@"CAEAGLLayer"
@"SKDisplayLink"
@"NSObject<OS_dispatch_queue>"
@"SKTransition"
@"NSData"
@"NSObject<OS_dispatch_semaphore>"
@"NSObject<SKViewDelegate>"
^{SKCSpeed=^^?If@?@BddffdBB@?ifffffffffBB}
@16@0:4I8@12
@"SKTileGroup"
I16@0:4I8I12
@16@0:4I8I12
@"SKTileSet"
@16@0:4@8^I12
v24@0:4@8@12@16^v20
@20@0:4I8I12^I16
v16@0:4^I8L12
v16@0:4{CGVector=ff}8
{CGVector=ff}8@0:4
@12@0:4I8
^{SKCEmitterNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}BB@@@^{SKCParticleSystemNode}^{SKCParticleSystem}fB^{SKCKeyframeSequence}^{SKCKeyframeSequence}^{SKCKeyframeSequence}^{SKCKeyframeSequence}^{SKCKeyframeSequence}^{SKCKeyframeSequence}^{SKCKeyframeSequence}IIiidddd{CGSize=ff}fffff{?=ffff}{?=ffff}{?=ffff}fff{list<PKPoint, std::__1::allocator<PKPoint> >={__list_node_base<PKPoint, void *>=^{__list_node_base<PKPoint, void *>}^{__list_node_base<PKPoint, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PKPoint, void *> > >=L}}{?=ff}{?=ff}ffff{?=ff}ffffffffffff@iIIIBB^{SKCEmitterNode}{list<SKCEmitterNode *, std::__1::allocator<SKCEmitterNode *> >={__list_node_base<SKCEmitterNode *, void *>=^{__list_node_base<SKCEmitterNode *, void *>}^{__list_node_base<SKCEmitterNode *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCEmitterNode *, void *> > >=L}}}
@"SKKeyframeSequence"
^{SKCFollowPath=^^?If@?@BddffdBB@?ifffffI^{PKPath}{?=ff}BB}
^{CGPath=}
#20@0:4@"NSKeyedUnarchiver"8@"NSString"12@"NSArray"16
@16@0:4@"NSKeyedUnarchiver"8@12
v20@0:4@8@12@16
v20@0:4@"NSKeyedUnarchiver"8@12@16
v12@0:4@"NSKeyedUnarchiver"8
@20@0:4:8@12@16
B12@0:4#8
B12@0:4@"Protocol"8
B12@0:4:8
Vv8@0:4
^{_NSZone=}8@0:4
@"NSString"8@0:4
B12@0:4@"UIFocusUpdateContext"8
v16@0:4@"UIFocusUpdateContext"8@"UIFocusAnimationCoordinator"12
@"NSArray"8@0:4
@"UIView"8@0:4
{shared_ptr<PKCAether>=^{PKCAether}^{__shared_weak_count}}8@0:4
#16@0:4@8@12
r^{CGPath=}8@0:4
v16@0:4f8f12
v16@0:4B8B12
v20@0:4@8@?12^B16
v32@0:4{vector<Token, std::__1::allocator<Token> >=^{Token}^{Token}{__compressed_pair<Token *, std::__1::allocator<Token> >=^{Token}}}8^{set<SKNode *, std::__1::less<SKNode *>, std::__1::allocator<SKNode *> >={__tree<SKNode *, std::__1::less<SKNode *>, std::__1::allocator<SKNode *> >=^{__tree_node<SKNode *, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<SKNode *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<SKNode *> >=L}}}20@?24^B28
B16@0:4{CGPoint=ff}8
B20@0:4{CGPoint=ff}8f16
@20@0:4{CGPoint=ff}8B16
@16@0:4{CGPoint=ff}8
^{SKCNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}}
@"SKReachConstraints"
@"GKEntity"
v20@0:4i8Q12
v28@0:4^f8^f12^f16^f20^f24
B16@0:4@8B12
B16@0:4^^8^I12
{CGPoint=ff}12@0:4@8
@"SKWarpGeometry"8@0:4
v12@0:4@"SKWarpGeometry"8
@24@0:4@8@12{CGSize=ff}16
B20@0:4^^8^I12f16
^{SKCSpriteNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}III@@@@I@}
@"SKLightNode"
@"SKUniform"
^{map<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> > > >=^{__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}8@0:4
v16@0:4^@8^@12
v12@0:4^@8
@12@0:4i8
@12@0:4B8
{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}8@0:4
{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}12@0:4i8
{shared_ptr<jet_command_buffer>=^{jet_command_buffer}^{__shared_weak_count}}16@0:4i8i12
{shared_ptr<jet_command_buffer>=^{jet_command_buffer}^{__shared_weak_count}}8@0:4
@"NSPointerArray"
{shared_ptr<jet_program>="__ptr_"^{jet_program}"__cntrl_"^{__shared_weak_count}}
{map<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> > > >="__tree_"{__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> > > >="__begin_node_"^{__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, void *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, std::__1::less<std::__1::basic_string<char> >, true> >="__first_"L}}}
@12@0:4^{CGPath=}8
@16@0:4^{CGPath=}8B12
@12@0:4f8
@28@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8f24
@20@0:4{CGSize=ff}8f16
@32@0:4{CGPoint=ff}8{CGPoint=ff}16{CGPoint=ff}24
@16@0:4^{CGPoint=ff}8L12
v12@0:4^{CGPath=}8
^{SKCShapeNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}^{SKCompositeBezierPath}iifff^{CGPath}iBf@@@@{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}}
^{SKCEffectNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}@B@{shared_ptr<jet_framebuffer>=^{jet_framebuffer}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}BI@BB@I}
@24@0:4{CGSize=ff}8B16i20
@20@0:4{CGSize=ff}8i16
v12@0:4^{__CTFont=}8
^{SKCLabelNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}@@@fii^{__CTFont}@@BB{vector<SKCSpriteNode *, std::__1::allocator<SKCSpriteNode *> >=^^{SKCSpriteNode}^^{SKCSpriteNode}{__compressed_pair<SKCSpriteNode **, std::__1::allocator<SKCSpriteNode *> >=^^{SKCSpriteNode}}}}
^{SKCCustomAction=^^?If@?@BddffdBB@?iffff@?}
@20@0:4@8@?12@16
@"NSTimer"
@"CADisplayLink"
@"CADisplay"
^{SKCPlaySound=^^?If@?@BddffdBB@?iffff@BB}
@"SKSoundSource"
@20@0:4i8d12
^{SKCTransitionNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}i@BBff^{SKCSceneNode}^{SKCSceneNode}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_framebuffer>=^{jet_framebuffer}^{__shared_weak_count}}{shared_ptr<jet_framebuffer>=^{jet_framebuffer}^{__shared_weak_count}}fBBBB}8@0:4
^{SKCTransitionNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}i@BBff^{SKCSceneNode}^{SKCSceneNode}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_framebuffer>=^{jet_framebuffer}^{__shared_weak_count}}{shared_ptr<jet_framebuffer>=^{jet_framebuffer}^{__shared_weak_count}}fBBBB}
^{SKCVideoNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}B@f{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}^{__CVBuffer}^{__CVBuffer}^{__CVOpenGLESTextureCache}@^{__CVBuffer}^{__CVBuffer}@@}
@"NSURL"
@"AVPlayer"
^{SKCCropNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}B^{SKCNode}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_framebuffer>=^{jet_framebuffer}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_framebuffer>=^{jet_framebuffer}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}BB}
@"SKShader"
@20@0:4@812
@28@0:4@812
@28@0:4@8{?=[2]}12
@60@0:4@8{?=[3]}12
@76@0:4@8{?=[4]}12
@20@0:4@8(_GLKVector2={?=ff}{?=ff}[2f])12
@24@0:4@8(_GLKVector3={?=fff}{?=fff}{?=fff}[3f])12
@28@0:4@8(_GLKVector4={?=ffff}{?=ffff}{?=ffff}[4f])12
@28@0:4@8(_GLKMatrix2={?=ffff}[2[2f]][4f])12
@48@0:4@8(_GLKMatrix3={?=fffffffff}[9f])12
@76@0:4@8(_GLKMatrix4={?=ffffffffffffffff}[16f])12
(_GLKVector3={?=fff}{?=fff}{?=fff}[3f])8@0:4
(_GLKVector4={?=ffff}{?=ffff}{?=ffff}[4f])8@0:4
(_GLKMatrix2={?=ffff}[2[2f]][4f])8@0:4
(_GLKMatrix3={?=fffffffff}[9f])8@0:4
(_GLKMatrix4={?=ffffffffffffffff}[16f])8@0:4
v20@0:4(_GLKVector3={?=fff}{?=fff}{?=fff}[3f])8
v24@0:4(_GLKVector4={?=ffff}{?=ffff}{?=ffff}[4f])8
v24@0:4(_GLKMatrix2={?=ffff}[2[2f]][4f])8
v44@0:4(_GLKMatrix3={?=fffffffff}[9f])8
v72@0:4(_GLKMatrix4={?=ffffffffffffffff}[16f])8
{?=[2]}8@0:4
{?=[3]}8@0:4
v16@0:48
v24@0:4{?=[2]}8
v56@0:4{?=[3]}8
v72@0:4{?=[4]}8
(?="_floatValue"f"_floatVector2Value""_floatVector3Value""_floatVector4Value""_floatMatrix2Value"{?="columns"[2]}"_floatMatrix3Value"{?="columns"[3]}"_floatMatrix4Value"{?="columns"[4]})
v28@0:4r^f8i12*16i20i24
@"PKRegion"
^{CGImage=}12@0:4@8
^{CGImage=}16@0:4^{CGImage=}8B12
{CGRect={CGPoint=ff}{CGSize=ff}}12@0:4^{CGImage=}8
B12@0:4^{CGImage=}8
@16@0:4@8^@12
@32@0:4r^{vector<CGSize, std::__1::allocator<CGSize> >=^{CGSize}^{CGSize}{__compressed_pair<CGSize *, std::__1::allocator<CGSize> >=^{CGSize}}}8@12{shared_ptr<MaxRectTexturePacker>=^{MaxRectTexturePacker}^{__shared_weak_count}}16r^{vector<CGRect, std::__1::allocator<CGRect> >=^{CGRect}^{CGRect}{__compressed_pair<CGRect *, std::__1::allocator<CGRect> >=^{CGRect}}}24r^{vector<TextureInfo, std::__1::allocator<TextureInfo> >=^{TextureInfo}^{TextureInfo}{__compressed_pair<TextureInfo *, std::__1::allocator<TextureInfo> >=^{TextureInfo}}}28
v20@0:4@8^@12B16
@16@0:4@"NSKeyedArchiver"8@12
v16@0:4@"NSKeyedArchiver"8@12
v20@0:4@"NSKeyedArchiver"8@12@16
v12@0:4@"NSKeyedArchiver"8
^{ALCdevice_struct=}
^{ALCcontext_struct=}
@20@0:4r^v8L12f16
^{SKCResize=^^?If@?@BddffdBB@?ifffff{?=ff}{?=ff}{?=ff}BBBB}
@20@0:4f8{CGPoint=ff}12
@24@0:4{CGSize=ff}8{CGPoint=ff}16
@24@0:4{CGPoint=ff}8{CGPoint=ff}16
@24@0:4@8f12{CGSize=ff}16
@28@0:4@8f12{CGSize=ff}16f24
v24@0:4{CGVector=ff}8{CGPoint=ff}16
{CGVector="dx"f"dy"f}
@32@0:4{CGVector=ff}8{CGPoint=ff}16d24
@24@0:4@8{CGSize=ff}12f20
@28@0:4@8@12{CGSize=ff}16f24
v28@0:4@8@12@16{CGSize=ff}20
v32@0:4@8@12f16@20{CGSize=ff}24
S8@0:4
v12@0:4S8
@"SKTileGroupRule"
^{SKCAudioNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}@@@@BB}
@24@0:4@8@12{CGPoint=ff}16
@32@0:4@8@12{CGPoint=ff}16{CGPoint=ff}24
@32@0:4@8@12{CGPoint=ff}16{CGVector=ff}24
B24@0:4d8I16I20
v20@0:4{CGPoint=ff}8@?16
v28@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8@?24
v28@0:4{CGPoint=ff}8{CGPoint=ff}16@?24
@"<SKPhysicsContactDelegate>"
{?=ffff}8@0:4
@24@0:4{?=ffff}8
v16@0:4@8f12
v16@0:4@8I12
v16@0:4f8I12
v20@0:4@8f12I16
^{SKCKeyframeSequence=iiii^f^f}8@0:4
f12@0:4I8
^{SKCKeyframeSequence=iiii^f^f}
{?=[4]}16@0:4{CGSize=ff}8
@20@0:4@8{CGPoint=ff}12
@24@0:4@8{CGPoint=ff}12@20
@24@0:4{CGPoint=ff}8@16@20
@"SKRange"
@28@0:4@8I12I16{CGSize=ff}20
@32@0:4@8I12I16{CGSize=ff}20@28
v20@0:4^I8I12I16
v28@0:4I8I12{CGSize=ff}16@24
I16@0:4@8@12
v20@0:4@8I12I16
v24@0:4@8@12I16I20
v12@0:4^I8
v28@0:4^I8I12I16I20I24
v24@0:4^i8^i12^i16^i20
v16@0:4I8I12
v16@0:4I8i12
I16@0:4{CGPoint=ff}8
{CGPoint=ff}16@0:4I8I12
@28@0:4I8I12I16I20B24
v20@0:4@8i12i16
^{SKCTileMapNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}IB@IfIICCIIiiii{map<unsigned int, SKCTileMapNodeChunk *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, SKCTileMapNodeChunk *> > >={__tree<std::__1::__value_type<unsigned int, SKCTileMapNodeChunk *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCTileMapNodeChunk *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, SKCTileMapNodeChunk *> > >=^{__tree_node<std::__1::__value_type<unsigned int, SKCTileMapNodeChunk *>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, SKCTileMapNodeChunk *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCTileMapNodeChunk *>, std::__1::less<unsigned int>, true> >=L}}}}
@16@0:4@8i12
r^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}8@0:4
{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >="__r_"{__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >="__first_"{__rep=""(?="__l"{__long="__cap_"I"__size_"I"__data_"*}"__s"{__short=""(?="__size_"C"__lx"c)"__data_"[11c]}"__r"{__raw="__words"[3L]})}}}
@16@0:48
B20@0:4^v8i12I16
[4f]
[4S]
v4@?0
_duration
_timingMode
_beginTime
_pausedTime
_isRunning
_finished
duration
Td,N
timingMode
Ti,N
timingFunction
T@?,C,N
speed
Tf,N
actions
v16@?0@"NSString"4@"SKAction"8^B12
finished
TB,N
_actionTableDict
actionTableDictionary
T@"NSDictionary",R,&,N,V_actionTableDictionary
_info
T@"NSMutableDictionary",&,N,V__info
$objects
$class
$classname
NSDictionary
NS.keys
SKActionTable
_referencedActionName
Nil Action
Action name to be referenced must be non-nil
%@: Error loading action named: "%@"
_timePerFrame
_resize
_restore
_textures
SKAction animateWithTextures: textures array cannot be empty
SKAction animateWithNormalTextures: textures array cannot be empty
timePerFrame
_colorR
_colorG
_colorB
_colorA
_colorMix
_isMixOnly
_colorBlendR
_colorBlendG
_colorBlendB
_colorBlendA
_alphaTarget
_alphaTargetReversed
_lastAlpha
_isRelative
SKFieldNode
_region
_strength
_falloff
_minimumRadius
_active
_exclusive
_categoryBitMask
_direction
_smoothness
_animationSpeed
_texture
region
T@"SKRegion",&,N
strength
falloff
minimumRadius
enabled
TB,N,GisEnabled
exclusive
TB,N,GisExclusive,V_exclusive
categoryBitMask
TI,N
direction
smoothness
animationSpeed
texture
T@"SKTexture",&,N
SKDragFieldNode
SKVortexFieldNode
SKLinearGravityFieldNode
SKRadialGravityFieldNode
SKCustomFieldNode
block
SKVelocityFieldNode
_velocity
velocityTexture
T@"SKTexture",&,N,V_velocityTexture
velocity
SKNoiseFieldNode
SKTurbulenceFieldNode
SKSpringFieldNode
SKMagneticFieldNode
SKElectricFieldNode
_actions
_lastRatio
_posTarget.x
_posTarget.y
_posTargetReversed.x
_posTargetReversed.y
_posStart.x
_posStart.y
_isReversed
_useX
_useY
SKScene: Animating the position of a SKScene has no effect.
_falloffTarget
_falloffTargetReversed
_deltafalloff
_target
_targetReversed
spritekit.fps
spritekit.traversals
spritekit.frametime
spritekit.clienttime
spritekit.physictime
spritekit.consttime
spritekit.actiontime
spritekit.emittertime
spritekit.rendertime
spritekit.gpu.renderutil
spritekit.gpu.tilerutil
spritekit.gpu.deviceutil
spritekit.cpuidle
spritekit.cawait
__skPerformanceData
v12@?0{_CSTypeRef=II}4
Device Utilization %
Renderer Utilization %
Tiler Utilization %
a_position
u_color
_hasFired
_timesToRepeat
_timesRepeated
_repeatedAction
Action to be repeated must be non-nil
_forever
_rotX
_rotY
_rotZ
_lastRotX
_lastRotY
_lastRotZ
_isUnitArc
_useZ
SKScene: Animating the rotation of a SKScene has no effect.
HelveticaNeue-UltraLight
renderNoCommit
scene
T@"SKScene",&,N,V_scene
bounds
T{CGRect={CGPoint=ff}{CGSize=ff}},N,V_bounds
backingScaleFactor
Tf,N,V_backingScaleFactor
showsFPS
TB,N,VshowsFPS
showsDrawCount
showsNodeCount
TB,N,VshowsNodeCount
showsPhysics
showsFields
ignoresSiblingOrder
sideA
T@"SKNode",&,N,V_sideA
sideB
T@"SKNode",&,N,V_sideB
xRotation
Tf,N,V_xRotation
yRotation
Tf,N,V_yRotation
_hiddenValue
v12@?0^{SKCNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}}4^B8
Can't create grid sprites with no root
Can't create grid sprites
width
Tf,R,N,V_width
height
Tf,R,N,V_height
lightDecay
lightColor.redComponent
lightColor.greenComponent
lightColor.blueComponent
lightColor.alphaComponent
ambientColor.redComponent
ambientColor.greenComponent
ambientColor.blueComponent
ambientColor.alphaComponent
shadowColor.redComponent
shadowColor.greenComponent
shadowColor.blueComponent
shadowColor.alphaComponent
lightCategoryBitMask
lightColor
T@"UIColor",&,N
ambientColor
shadowColor
SKAction: 'warps' and 'times' arrays must have non-zero and equal counts
SKAction: 'warps' must be of type SKWarpGeometryGrid
SKAction: 'warps' must all have the same number of rows and columns
SKAction: 'times' must all be increasing floating point values
_grids
_times
supportsSecureCoding
TB,R
arrayRepresentation
T@"NSArray",R,W
_scaleTargetX
_scaleTargetY
_scaleTargetReversedX
_scaleTargetReversedY
_deltaScaleX
_deltaScaleY
_isTargetSizeBased
_targetSize
SKScene: Animating the scale of a SKScene has no effect.
_mycaction->_animIndex
viewportSize
_scene
T{CGSize=ff}
scnScene
T@"SCNScene",&,N
sceneTime
playing
TB,GisPlaying
loops
pointOfView
T@"SCNNode",&,N
autoenablesDefaultLighting
_fileName
info face="
common lineHeight=
base=
file="
chars count=
width=
height=
xoffset=
yoffset=
xadvance=
letter="
space
kernings count=
first=
second=
amount=
node
T@"SKNode",&,N,V_node
position
T(_GLKVector2={?=ff}{?=ff}[2f]),N,V_position
angleInitial
Tf,N,V_angleInitial
angle
Tf,R,N,V_angle
length
Tf,N,V_length
size
T(_GLKVector2={?=ff}{?=ff}[2f]),N,V_size
<Warning> reachTo:rootNode: action run on rootNode itself, no animation will occur.
doNotRenderChildNodes
_scenePinBody
Scene_bounds
_backgroundColorR
_backgroundColorG
_backgroundColorB
_backgroundColorA
_anchorPoint
_visibleRect
_scaleMode
_physicsWorld
_camera
.//SKFieldNode
v12@?0@"SKNode"4^B8
.//SKReferenceNode
SKScene: Setting the position of a SKScene has no effect.
SKScene: Setting the scale of a SKScene has no effect.
SKScene: Setting the zRotation of a SKScene has no effect.
SKScene: Setting the zPosition of a SKScene has no effect.
<SKScene> name:'%@' frame:%@ anchor:%@
Invalid size specified
Invalid size specified: %@
root
.//SKAudioNode
_needsUpdate
TB,V__needsUpdate
_needsRender
TB,V__needsRender
visibleRect
T{CGRect={CGPoint=ff}{CGSize=ff}},N,V_visibleRect
visibleRectSize
T{CGSize=ff},N
visibleRectCenter
T{CGPoint=ff},N
avAudioEnvironmentNode
T@"AVAudioEnvironmentNode",&,N,V_avAudioEnvironmentNode
_pkPhysicsWorld
T@"PKPhysicsWorld",&,N,V__pkPhysicsWorld
scaleMode
camera
T@"SKCameraNode",W,N,V_camera
listener
T@"SKNode",W,N
audioEngine
T@"AVAudioEngine",R,&,N
backgroundColor
delegate
T@"<SKSceneDelegate>",W,N,V_delegate
anchorPoint
physicsWorld
T@"SKPhysicsWorld",R,N,V_physicsWorld
view
T@"SKView",R,W,N
_usesExplicitUpdate
_usesExplicitRender
_downAction
_upAction
_delegate
SKButtonNode.action.up
SKButtonNode.action.down
T@"NSObject<SKButtonNodeDelegate>",W,N,V_delegate
downAction
T@"SKAction",&,N,V_downAction
upAction
T@"SKAction",&,N,V_upAction
T@"NSObject<SKButtonNodeSpriteDelegate>",W,N,V_delegate
isIdentityWarp
TB,R,N
SKWarpGeometryGrid: numberOfColumns and numberOfRows must be greater than or equal to 1
_numberOfColumns
_numberOfRows
_sourcePositions
_destPositions
_SKWarpGeometryGridVersion
SKWarpGeometryGrid: index must be in the range [0, vertexCount - 1]
sourcePositions
Tr^,R,N
destPositions
numberOfColumns
Ti,R,N
numberOfRows
vertexCount
textureFormat
TI,N,V_textureFormat
backingTexture
T{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}},N,V_backingTexture
filteringMode
Ti,N,VfilteringMode
wrapMode
Ti,N,VwrapMode
T{CGSize=ff},N,Vsize
pixelSize
T{CGSize=ff},N,VpixelSize
isLoaded
TB,N,VisLoaded
hasAlpha
TB,N,VhasAlpha
isPOT
TB,N,VisPOT
pixelData
T*,N,VpixelData
state
Ti,N,Vstate
lock
T^{_opaque_pthread_mutex_t=l[40c]},R,N,GgetLock
com.apple.spritekit.textureOp
%@: Error loading PVRTC image resource: "%@"
@"NSData"8@?0@"NSString"4
.pvr.gz
pvr.gz
B4@?0
.pvr
.pvrtc
pvrtc
MissingResource.png
%@: Error loading image resource: "%@"
_isData
_originalAtlasName
_subTextureName
_isCapture
_originalTexture
_isPath
_imgName
_textRect
_isRotated
_isFlipped
_cropOffset
_cropScale
_pixelSize
_size
_imageData
_disableAlpha
_filteringMode
Invalid size specified (should be positive): %@
inputImage
outputImage
<SKTexture> '%@' (%d x %d)
<data>
performFullCapture
TB,V_performFullCapture
isRepeatable
TB,R,N,V_isRepeatable
cropScale
T{CGPoint=ff},N,V_cropScale
cropOffset
T{CGPoint=ff},N,V_cropOffset
originalAtlasName
T@"NSString",C,N,V_originalAtlasName
rootAtlas
T@"SKTextureAtlas",&,N,V_rootAtlas
subTextureName
T@"NSString",C,N,V_subTextureName
alphaMap
T^I,R,N,V_alphaMap
alphaMapSize
T{CGSize=ff},R,N,V_alphaMapSize
usesMipmaps
v12@?0{shared_ptr<jet_context>=^{jet_context}^{__shared_weak_count}}4
T{CGSize=ff},R,N
textureTarget
isRotated
isFlipped
imageNameOrPath
T@"NSString",R,N
v16@?0@4@8^B12
_atlasName
_textureDict
SKTextures aren't supported in [SKTextureAtlas atlasWithDictionary:].  Use UIImage, NSUrl or NSString instead.
Unsupported class:%@ passed into [SKTextureAtlas atlasWithDictionary:].  Use UIImage, NSUrl or NSString instead.
format
APPL
Unsupported Texture Atlas Format
Unsupported Texture Atlas Format Code 1
version
images
path
subimages
aliases
textureRect
spriteOffset
spriteSourceSize
textureRotated
name
Unsupported Texture Atlas Format Code 3
metadata
Unsupported Texture Atlas Format Code 2
frames
spriteSize
textureFileName
frame
offset
sourceSize
plist
atlasc
.atlasc
Texture Atlas '%@' cannot be found.
v12@?0@"NSError"4@"NSArray"8
<SKTextureAtlas> '%@' %ld textures:
<SKTextureAtlas> '%@' 0 textures
textureNames
T@"NSArray",R,N
@3x~ipad
@2x~ipad
~ipad
@3x~iphone
-568h@2x~iphone
@2x~iphone
~iphone
.plist
.%ld.png
_strengthTarget
_strengthTargetReversed
_deltastrength
debugDrawPhysics
debugDrawPhysicsFields
debugDisablePresentationTime
debugDrawStats_FPS
debugDrawStats_GPU
debugDrawStats_CPU
debugDrawStats_NodeCount
debugDrawStats_QuadCount
debugDrawStats_DrawCount
debugDrawStats_PreferredFPS
debugDisableDirtyFlags
disableStencilBuffers
cullNonVisibleNodes
preferredFramesPerSecond
kSKMutableTextureExists
SKView
Failed to archive nil scene
SKCapture
SKView_Bounds
SKVersion
SKView_ScaleFactor
OpenGL
SKView_ContextType
Metal
None
Archived %@ to %@
Failed to archive %@ to %@
debugPrint: %p %@
-------------------------------
ingnoreMissingWindow
SKRenderQueue
debugDrawStats_BGColor
ignoreBackgroundNotifications
requestCapture
captureTag
debugLogRenderContent
SK: [renderContent] %@
v12@?0d4
ignoreRenderSyncInLayoutSubviews
_version
_frame
_preferredFramesPerSecond
_ib_SceneName
textureFromNodeCropRect
_client
nodeCount
drawCallCount
quadCount
B8@?0@"SKNode"4
zPosition
T{CGSize=ff},R,N,V_pixelSize
_layerBackedRenderer
T^{SKCRenderer=@f{shared_ptr<SKCRenderPass>=^{SKCRenderPass}^{__shared_weak_count}}I{shared_ptr<jet_command_buffer>=^{jet_command_buffer}^{__shared_weak_count}}{list<std::__1::shared_ptr<SKCRenderPass>, std::__1::allocator<std::__1::shared_ptr<SKCRenderPass> > >={__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>=^{__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>}^{__list_node_base<std::__1::shared_ptr<SKCRenderPass>, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<std::__1::shared_ptr<SKCRenderPass>, void *> > >=L}}{?=II^^^{?=[4]}f^{SKCRenderer}f{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}}^{jet_buffer}^{jet_buffer}^{jet_buffer}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}{shared_ptr<jet_buffer>=^{jet_buffer}^{__shared_weak_count}}{shared_ptr<jet_buffer>=^{jet_buffer}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_texture>=^{jet_texture}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_sampler>=^{jet_sampler}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}{shared_ptr<jet_depth_stencil_mode>=^{jet_depth_stencil_mode}^{__shared_weak_count}}BI{SKCRenderBatch=BiII@^{jet_program}^{jet_texture}^{jet_texture}^{jet_sampler}^{jet_sampler}IIf}^{SKCStats}{vector<std::__1::shared_ptr<jet_buffer>, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > >=^{shared_ptr<jet_buffer>}^{shared_ptr<jet_buffer>}{__compressed_pair<std::__1::shared_ptr<jet_buffer> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer> > >=^{shared_ptr<jet_buffer>}}}{vector<std::__1::shared_ptr<jet_buffer_pool>, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > >=^{shared_ptr<jet_buffer_pool>}^{shared_ptr<jet_buffer_pool>}{__compressed_pair<std::__1::shared_ptr<jet_buffer_pool> *, std::__1::allocator<std::__1::shared_ptr<jet_buffer_pool> > >=^{shared_ptr<jet_buffer_pool>}}}}^{SKCStats}{SKCStats=^^?ddddi{?=dd}{?=dd}{?=ddi}{?=ddi}{?=ddiiiiiiii}}@@BBB{shared_ptr<jet_context>=^{jet_context}^{__shared_weak_count}}{shared_ptr<jet_fence>=^{jet_fence}^{__shared_weak_count}}{map<SKCLightNode *, float __attribute__((ext_vector_type(4))), std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, float __attribute__((ext_vector_type(4)))> > >={__tree<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))> > >=^{__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, float __attribute__((ext_vector_type(4)))>, std::__1::less<SKCLightNode *>, true> >=L}}}{map<unsigned int, SKCLightMaskUniforms, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, SKCLightMaskUniforms> > >={__tree<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, SKCLightMaskUniforms> > >=^{__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, SKCLightMaskUniforms>, std::__1::less<unsigned int>, true> >=L}}}{vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >=^^{SKCRenderSortInfo}^^{SKCRenderSortInfo}{__compressed_pair<SKCRenderSortInfo **, std::__1::allocator<SKCRenderSortInfo *> >=^^{SKCRenderSortInfo}}}{map<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > >, std::__1::less<SKCLightNode *>, std::__1::allocator<std::__1::pair<SKCLightNode *const, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > >={__tree<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true>, std::__1::allocator<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > > > >=^{__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<SKCLightNode *, std::__1::__value_type<SKCLightNode *, std::__1::shared_ptr<std::__1::vector<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> > > >, std::__1::less<SKCLightNode *>, true> >=L}}}^{SKCSpriteNode}^{SKCLabelNode}{?=^{SKCRenderPass}^{SKCRenderSortGroup}I{list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >={__list_node_base<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}^{__list_node_base<SKCRenderSortInfo *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > >=L}}{list<SKCRenderSortInfo *, std::__1::allocator<SKCRenderSortInfo *> >={__list_node_base<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}^{__list_node_base<SKCRenderSortInfo *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderSortInfo *, void *> > >=L}}{__list_iterator<SKCRenderSortInfo *, void *>=^{__list_node_base<SKCRenderSortInfo *, void *>}}}{vector<std::__1::shared_ptr<jet_framebuffer>, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > >=^{shared_ptr<jet_framebuffer>}^{shared_ptr<jet_framebuffer>}{__compressed_pair<std::__1::shared_ptr<jet_framebuffer> *, std::__1::allocator<std::__1::shared_ptr<jet_framebuffer> > >=^{shared_ptr<jet_framebuffer>}}}{shared_ptr<jet_buffer_pool>=^{jet_buffer_pool}^{__shared_weak_count}}@},V__layerBackedRenderer
options
T@"NSMutableDictionary",R
physicsDebugStrokeWidth
Tf,N,V_physicsDebugStrokeWidth
paused
TB,N,GisPaused
showsQuadCount
asynchronous
TB,N,GisAsynchronous
allowsTransparency
shouldCullNonVisibleNodes
T@"NSObject<SKViewDelegate>",W,N,V_delegate
frameInterval
preferredFrameRate
T@"SKScene",R,N
SKIsFlipped
useExtendedRange
SKUtil.m: MGGetBoolAnswer is not available in the simulator.
EAGLContextPropertyVisibleInDebugTools
_speedTarget
_speedTargetReversed
_deltaSpeed
SKAction: Run block actions can not be properly encoded, Objective-C blocks do not support NSCoding.
SKAction: Run block actions can not be properly decoded, Objective-C blocks do not support NSCoding.
_tileDefinitions
_adjacency
_name
tileDefinitionIDs
parentGroup
T@"SKTileGroup",W,N,V_parentGroup
adjacency
tileDefinitions
T@"NSArray",C,N
T@"NSString",C,N,V_name
_rules
_type
parentSet
T@"SKTileSet",W,N,V_parentSet
type
rules
_groups
_defaultTileGroupIndex
_stamps
_defaultTileSize.width
_defaultTileSize.height
stamps
T@"NSArray",&,N
tileGroups
defaultTileGroup
T@"SKTileGroup",&,N
defaultTileSize
_columns
_rows
_tileData
TI,R,N
tileData
T^I,R,N
$top
document.type
com.apple.spritekit.tileset
SKTileSet
<SKEmitterNode> name:'%@' particleTexture:%@ position:%@ accumulatedFrame:%@
_startColorMix
_startColorBlendVariance
_startColorR
_startColorG
_startColorB
_startColorA
_startColorVarianceR
_startColorVarianceG
_startColorVarianceB
_startColorVarianceA
_particleTexture
_startPosition
_startPositionVariance
_startZPosition
_startZPositionVariance
_lifetime
_lifetimeVariance
_startOpacity
_startOpacityVariance
_particleBlendMode
_startRotation
_startRotationVariance
_startSize
_startScale
_startScaleVariance
_acceleration
_colorSpeedR
_colorSpeedG
_colorSpeedB
_colorSpeedA
_colorBlendSpeed
_rotationSpeed
_scaleSpeed
_opacitySpeed
_startSpeed
_startSpeedVariance
_emissionAngle
_emissionAngleVariance
_zPositionSpeed
_birthrate
_particleAction
_numParticlesToEmit
_emissionDistance
_emissionDistanceRange
_fieldBitMask
_particleAlphaSequence
_particleColorSequence
_particleColorBlendFactorSequence
_particleScaleSequence
_particleRotationSequence
_fieldInfluenceSequence
_particleSpeedSequence
_shader
particleTexture
particleBlendMode
particleColor
particleColorRedRange
particleColorGreenRange
particleColorBlueRange
particleColorAlphaRange
particleColorRedSpeed
particleColorGreenSpeed
particleColorBlueSpeed
particleColorAlphaSpeed
particleColorSequence
T@"SKKeyframeSequence",&,N
particleColorBlendFactor
particleColorBlendFactorRange
particleColorBlendFactorSpeed
particleColorBlendFactorSequence
particlePosition
particlePositionRange
T{CGVector=ff},N
particleSpeed
particleSpeedRange
emissionAngle
emissionAngleRange
xAcceleration
yAcceleration
particleBirthRate
numParticlesToEmit
particleLifetime
particleLifetimeRange
particleRotation
particleRotationRange
particleRotationSpeed
particleSize
particleScale
particleScaleRange
particleScaleSpeed
particleScaleSequence
particleAlpha
particleAlphaRange
particleAlphaSpeed
particleAlphaSequence
particleAction
T@"SKAction",C,N
fieldBitMask
targetNode
shader
T@"SKShader",&,N
particleZPosition
particleRenderOrder
TI,N,V_particleRenderOrder
particleZPositionRange
particleZPositionSpeed
accel
scale
birthTime
deathTime
color
outColor
colorBlend
alpha
lifeRatio
override
outVel
_cgPath
_isOffset
_orient
_lowerAngleLimit
_upperAngleLimit
lowerAngleLimit
Tf,N,V_lowerAngleLimit
upperAngleLimit
Tf,N,V_upperAngleLimit
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
v8@?0@"PKPhysicsBody"4
v16@?0@4I8^B12
CFBundleName
_TtC%lu%@%lu%@
_PB_previewSKNodeCustomClassName
_PB_previewSKNodeCustomModuleName
_constraints
_userData
_opacity
_position
_zRotation
_xRotation
_yRotation
_xScale
_yScale
_zPosition
_hidden
_PKPhysicsBody
_attributeValues
_children
_keyedSubSprites
_keyedActions
_paused
_originalClass
Attemped to remove node from invalid parent
Attemped to remove node %@ from invalid parent %@
Attemped to add a SKNode which already has a parent: %@
.//SKNode
Attemped to add nil node
Attemped to add nil node to parent: %@
<%@> name:'%@' position:%@ scale:{%.2f, %.2f} accumulatedFrame:%@
preferredFocusEnvironments
T@"NSArray",R,C,N
preferredFocusedView
T@"UIView",R,W,N
canBecomeFocused
entity
T@"GKEntity",W,N,V_entity
_backingNode
T^{SKCNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >={__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> > >=^^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}},R,N
T{CGRect={CGPoint=ff}{CGSize=ff}},R,N
zRotation
xScale
yScale
hidden
TB,N,GisHidden
userInteractionEnabled
TB,N,GisUserInteractionEnabled
parent
T@"SKNode",R,N
children
physicsBody
T@"SKPhysicsBody",&,N
userData
T@"NSMutableDictionary",&,N,V_userData
reachConstraints
T@"SKReachConstraints",C,N,V_reachConstraints
constraints
attributeValues
T@"NSDictionary",C,N
%@ [%p] %@
%@-[%p] %@
T@"GKEntity",W,N
globalBoundingVerts
T{?=[4]},R,N
globalAccumulatedBoundingVerts
outline
Tr^{CGPath=},R,N
_showBounds
_untransformedBounds
T@"NSMutableDictionary",&,N
_allActions
_aether
T{shared_ptr<PKCAether>=^{PKCAether}^{__shared_weak_count}},R,N
Setting this node as parent would create a loop: %@
A Node can't parent itself: %@
%@.%@
_normalTexture
_lightingBitMask
_shadowCastBitMask
_shadowedBitMask
_centerRect
_bounds
_blendMode
_baseColorR
_baseColorG
_baseColorB
_baseColorA
_warpGeometry
_subdivisionLevels
Invalid bounds specified: %@
<SKSpriteNode> name:'%@' texture:[%@] position:%@ scale:{%.2f, %.2f} size:%@ anchor:%@ rotation:%.2f
'nil'
warpGeometry
T@"SKWarpGeometry",&,N
subdivisionLevels
shouldRepeatTexture
TB,N,V_shouldRepeatTexture
repeatTextureSize
normalTexture
lightingBitMask
shadowCastBitMask
shadowedBitMask
centerRect
T{CGRect={CGPoint=ff}{CGSize=ff}},N
colorBlendFactor
blendMode
#include <metal_stdlib>
using namespace metal;
constexpr sampler s(coord::normalized,
address::clamp_to_edge,
filter::linear);
return vOut;
#line 0
inline float4 texture2D(texture2d<float> tex, float2 tex_coord) {
return tex.sample(s, tex_coord);
#define highp /**/
#define lowp /**/
#define mediump /**/
#define mod(x,y) fmod(x,y)
typedef float2 vec2;
typedef float3 vec3;
typedef float4 vec4;
typedef float2x2 mat2;
typedef float3x3 mat3;
typedef float4x4 mat4;
#define mod(x,y) fmod(x,y)
#define inversesqrt(x) rsqrt(x)
#define lessThan(x,y) (1.0 - step(y,x))
inline float atan (float x, float y) { return atan2(x,y); }
inline float2x2 _make_mat2(float a, float b, float c, float d) {return float2x2(float2(a,b), float2(c,d));}
#define SKDefaultShading() (interpolated.v_color_mix * u_texture.sample(s, interpolated.v_tex_coord))
#line 0
attribute vec4 a_color;
attribute vec4 a_position;
attribute vec2 a_tex_coord;
varying highp vec2 v_tex_coord;
varying lowp vec4 v_color_mix;
varying highp float v_path_distance;
attribute vec4 a_position;
attribute vec2 a_tex_coord;
varying highp vec2 v_tex_coord;
varying lowp vec4 v_color_mix;
varying highp float v_path_distance;
uniform lowp vec4 u_color;
uniform mat4 u_transform;
void main() {
v_color_mix = a_color;
v_tex_coord = a_tex_coord;
v_path_distance = a_position.w;
void main() {
v_color_mix = u_color;
v_tex_coord = a_tex_coord;
v_path_distance = a_position.w;
gl_Position = vec4(a_position.xyz, 1.0);
#line 0
gl_Position = a_position * u_transform;
#line 0
uniform lowp sampler2D u_texture;
uniform highp float u_time;
uniform highp float u_path_length;
varying highp vec2 v_tex_coord;
varying lowp vec4 v_color_mix;
varying highp float v_path_distance;
lowp vec4 SKDefaultShading() {
return v_color_mix * texture2D(u_texture, v_tex_coord);
#line 0
seed
TI,Vseed
TI,VtextureTarget
uniform
T@"SKUniform",&,Vuniform
.fsh
SKShader: failed to load file named: '%@'.
a_%@
[^a-zA-Z0-9_](u_time)[^a-zA-Z0-9_]
uniform mediump float %@; 
uniform mediump vec2 %@; 
uniform mediump vec3 %@; 
uniform mediump vec4 %@; 
uniform mediump mat2 %@; 
uniform mediump mat3 %@; 
uniform mediump mat4 %@; 
uniform lowp sampler2D %@; 
/* Vertex Attribute Declares */
/* Vertex Attribute Statements */
float
vec2
vec3
vec4
%@attribute %@ a_%@;
%@varying mediump %@ %@;
%@%@ = a_%@;
/* Fragment Attribute Declares */
               vertex SKShader_VertexOut SKShader_VertexFunc (const device uchar4 *a_color      [[buffer(0)]],
               const device float4 *a_position   [[buffer(1)]],
               const device float2 *a_tex_coord  [[buffer(2)]],
               
               vertex SKShader_VertexOut SKShader_VertexFunc (const device float4 *a_position  [[buffer(0)]],
               const device float2 *a_tex_coord [[buffer(1)]],
               constant float4 &u_color         [[buffer(2)]],
               constant float4x4 &u_transform   [[buffer(3)]],
               
float2
float3
float4
half
half2
half3
half4
%@const device %@ *a_%@   [[buffer(%d)]], 
%@vOut.%@ = a_%@[vid];
               unsigned int vid                  [[vertex_id]])
               {
               SKShader_VertexOut vOut;
               vOut.position = float4(a_position[vid].xyz, 1.0f);
               vOut.v_path_distance = a_position[vid].w;
               vOut.v_tex_coord = a_tex_coord[vid];
               vOut.v_color_mix = float4(a_color[vid].r / 255.0f,
               a_color[vid].g / 255.0f,
               a_color[vid].b / 255.0f,
               a_color[vid].a / 255.0f);
               
               unsigned int vid                  [[vertex_id]])
               {
               SKShader_VertexOut vOut;
               vOut.position = a_position[vid] * u_transform;
               vOut.v_tex_coord = a_tex_coord[vid];
               vOut.v_color_mix = u_color;
               return vOut;
               
Error: Duplicate uniform: %@
SKShader '%@' failed to compile:
SKShader failed to compile:
SKShader_VertexFunc
SKShader_FragFunc
main
u_sprite_size
gl_FragColor\s*=\s*
return 
v_tex_coord
v_color_mix
v_path_distance
%@(?=\b)
interpolated.%@
u_time
u_path_length
%@[0]
mat2\s*\(
_make_mat2(
void\s+main\s*\(\s*(void)?\s*\)
\bdiscard(?=\b)
 discard_fragment()
\bgl_FragCoord(?=\b)
 interpolated.position
    struct SKShader_VertexOut {
    float4 position [[position]];
    float2 v_tex_coord;
    float4 v_color_mix;
    float v_path_distance;
    
%@%@ %@;
    fragment float4 SKShader_FragFunc(    texture2d<float>  u_texture         [[texture(0)]],     const device float *u_time           [[buffer(0)]],     const device float *u_path_length    [[buffer(1)]], 
const device float * %@ [[buffer(%d)]],
const device float2 * %@ [[buffer(%d)]],
const device float3 * %@ [[buffer(%d)]],
const device float4 * %@ [[buffer(%d)]],
const device float2x2 * %@ [[buffer(%d)]],
const device float3x3 * %@ [[buffer(%d)]],
const device float4x4 * %@ [[buffer(%d)]],
texture2d<float> %@ [[texture(%d)]],
%@%@ SKShader_VertexOut interpolated     [[stage_in]])
_uniforms
_source
_attributes
_textureUniforms
T@"NSArray",R
_attributeBuffers
T^{map<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> > > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> > > >=^{__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<jet_buffer_pool> >, std::__1::less<std::__1::basic_string<char> >, true> >=L}}},R
_backingProgram
T{shared_ptr<jet_program>=^{jet_program}^{__shared_weak_count}},R
_backingProgramWithTransform
_commands
T{shared_ptr<jet_command_buffer>=^{jet_command_buffer}^{__shared_weak_count}},R
source
T@"NSString",C
uniforms
T@"NSArray",C
attributes
SCNRenderer
_lineWidth
_smoothWidth
_smoothStroke
_fillColorR
_fillColorG
_fillColorB
_fillColorA
_strokeColorR
_strokeColorG
_strokeColorB
_strokeColorA
_lineJoin
_lineCap
_miterLimit
_strokeTexture
_fillTexture
<SKShapeNode> name:'%@' accumulatedFrame:%@
renderQualityRatio
Tr^{CGPath=},N
strokeColor
fillColor
antialiased
TB,N,GisAntialiased
lineWidth
glowWidth
lineCap
lineJoin
miterLimit
lineLength
Tf,R,N
fillTexture
fillShader
strokeTexture
strokeShader
_filter
_shouldRasterize
_shouldEnableEffects
_shouldCenterFilter
<SKEffectNode> name:'%@' shouldEnableEffects:'%@' filter:'%@' position:%@ accumulatedFrame:%@
filter
T@"CIFilter",&,N
shouldCenterFilter
shouldEnableEffects
shouldRasterize
SKMutableTexture: SKMutableTextures are not currently supported in the simulator.
<SKMutableTexture> (%d x %d)
_fontName
_text
_textSprites
_textSprite
_fontColorR
_fontColorG
_fontColorB
_fontColorA
_fontSize
_labelColorBlend
_labelBlendMode
_horizontalAlignmentMode
_verticalAlignmentMode
<SKLabelNode> name:'%@' text:'%@' fontName:'%@' position:%@
verticalAlignmentMode
horizontalAlignmentMode
fontName
T@"NSString",C,N
text
fontSize
fontColor
inputTargetImage
inputTime
a_color
a_tex_coord
u_texture
SKAction: Custom actions can not be properly encoded, Objective-C blocks do not support NSCoding.
SKAction: Custom actions can not be properly decoded, Objective-C blocks do not support NSCoding.
display
T@"CADisplay",&,N
_wait
SKAction: Error loading sound resource: "%@"
caff
aiff
SKAction: Error playing sound resource
PrefersLowPowerGPU
PrefersOpenGL
User CPU %
System CPU %
Idle CPU %
GL_FRAMEBUFFER_COMPLETE
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
GL_FRAMEBUFFER_UNSUPPORTED
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS
GL_FRAMEBUFFER_STATUS_UNKNOWN
%@%d
%@%f
GL_BYTE
GL_UNSIGNED_BYTE
GL_SHORT
GL_UNSIGNED_SHORT
GL_FIXED
GL_FLOAT
GL_TYPE_UNKNOWN
%@%@
SKGLPrintVertexAttrib: (%d) {
 GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 
 GL_VERTEX_ATTRIB_ARRAY_ENABLED: 
 GL_VERTEX_ATTRIB_ARRAY_SIZE: 
 GL_VERTEX_ATTRIB_ARRAY_STRIDE: 
 GL_VERTEX_ATTRIB_ARRAY_TYPE: 
 GL_VERTEX_ATTRIB_ARRAY_NORMALIZED: 
SKGLPrintState: {
 GL_CURRENT_PROGRAM: 
 GL_ARRAY_BUFFER_BINDING: 
 GL_ELEMENT_ARRAY_BUFFER_BINDING: 
GL_NO_ERROR
GL_INVALID_ENUM
GL_INVALID_VALUE
GL_INVALID_OPERATION
GL_ERROR_UNKNOWN
%d.%d
%@.%d
inputCenter
pausesIncomingScene
pausesOutgoingScene
_videoFileName
_videoFileURL
<SKVideoNode> name:'%@' position:%@ size:%@ rotation:%.2f
_player
T@"AVPlayer",&,N
u_texture2
SKCRenderer<%p> pass:%d batch:%d [Summary]:[Quads:%d Program:%p Tex0:%p Tex1:%p BlendMode:%d]
searchPaths
T@"NSArray",&,N,VsearchPaths
_mask
_prefersAlphaMask
_invertMask
prefersAlphaMask
invertMask
maskNode
T@"SKNode",&,N
CIGaussianBlur
inputRadius
_referenceURL
_referenceFileName
referenceFileName
T@"NSString",&,N
referenceURL
T@"NSURL",&,N
_selector
targetShader
T@"SKShader",W,N,V_targetShader
Float
%.3f
FloatVector2
{%.3f, %.3f}
FloatVector3
{%.3f, %.3f, %.3f}
FloatVector4
{%.3f, %.3f, %.3f, %.3f}
FloatMatrix2
{%.3f, %.3f,
%.3f, %.3f}
FloatMatrix3
{%.3f, %.3f, %.3f,
%.3f, %.3f %.3f,
%.3f, %.3f %.3f}
FloatMatrix4
{%.3f, %.3f, %.3f, %.3f,
{%.3f, %.3f, %.3f, %.3f,
{%.3f, %.3f, %.3f, %.3f,
{%.3f, %.3f, %.3f, %.3f,}
Texture
<nil>
<SKUniform> type:'%@' value:%@
_floatValue
_floatVector2Value
_floatVector3Value
_floatMatrix2Value
_floatMatrix3Value
_floatMatrix4Value
_textureValue
_floatVector4Value
v16@?0@"SKUniformShaderReference"4I8^B12
_seed
TI,V_seed
T@"NSString",R,N,V_name
uniformType
textureValue
floatValue
vectorFloat2Value
vectorFloat3Value
vectorFloat4Value
matrixFloat2x2Value
T{?=[2]},N
matrixFloat3x3Value
T{?=[3]},N
matrixFloat4x4Value
T{?=[4]},N
floatVector2Value
T(_GLKVector2={?=ff}{?=ff}[2f])
floatVector3Value
T(_GLKVector3={?=fff}{?=fff}{?=fff}[3f])
floatVector4Value
T(_GLKVector4={?=ffff}{?=ffff}{?=ffff}[4f])
floatMatrix2Value
T(_GLKMatrix2={?=ffff}[2[2f]][4f])
floatMatrix3Value
T(_GLKMatrix3={?=fffffffff}[9f])
floatMatrix4Value
T(_GLKMatrix4={?=ffffffffffffffff}[16f])
MetalCompatibility
OpenGLESCompatibility
KFilenameHasNoMatchingSuffix
-568h@2x
.jpg
.png
isFullyOpaque
file:'%@' duration:%.2f bufferId:%d
bufferId
Td,R,N
gain
listenerPosition
suspended
paused:%@ totalBuffers:%d completed:%d queued:%d buffers = {%@
shouldLoop
isPlaying
completedBufferCount
queuedBufferCount
com.apple.SpriteKit
1.2.8
v8@?0^{SKCDataSlice=^^?II^v{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=II*}{__short=(?=Cc)[11c]}{__raw=[3L]})}}}BB}4
_sizeTarget.width
_sizeTarget.height
_sizeTargetReversed.width
_sizeTargetReversed.height
_sizeResidual.width
_sizeResidual.height
_useW
_useH
u_transform
SKPhysicsBody
T@"SKNode",R,W,N
v12@?0^v4L8
dynamic
TB,N,GisDynamic,V_dynamic
usesPreciseCollisionDetection
TB,N,V_usesPreciseCollisionDetection
allowsRotation
TB,N,V_allowsRotation
pinned
TB,N,V_pinned
resting
TB,N,GisResting,V_resting
friction
Tf,N,V_friction
charge
Tf,N,V_charge
restitution
Tf,N,V_restitution
linearDamping
Tf,N,V_linearDamping
angularDamping
Tf,N,V_angularDamping
density
Tf,N,V_density
mass
Tf,N,V_mass
area
Tf,R,N,V_area
affectedByGravity
TB,N,V_affectedByGravity
TI,N,V_fieldBitMask
TI,N,V_categoryBitMask
collisionBitMask
TI,N,V_collisionBitMask
contactTestBitMask
TI,N,V_contactTestBitMask
joints
T@"NSArray",R,N,V_joints
T@"SKNode",R,W,N,V_node
T{CGVector=ff},N,V_velocity
angularVelocity
Tf,N,V_angularVelocity
v12@?0@"SKNode"4f8
bodyA
T@"SKPhysicsBody",R,N,V_bodyA
bodyB
T@"SKPhysicsBody",R,N,V_bodyB
contactPoint
T{CGPoint=ff},R,N,V_contactPoint
contactNormal
T{CGVector=ff},R,N,V_contactNormal
collisionImpulse
Tf,R,N,V_collisionImpulse
normalTextures
_normals
_uuid
_width
_height
_placementWeight
_orientation
_uid
parentRule
T@"SKTileGroupRule",W,N,V_parentRule
T@"NSString",&,N,V_uid
currentFrameIndex
TS,N,V_currentFrameIndex
lastTargetTime
Td,N,V_lastTargetTime
currentFrameTime
Tf,N,V_currentFrameTime
frameDidChange
TB,N,V_frameDidChange
nextFrameAffectsVertexBuffer
TB,N,V_nextFrameAffectsVertexBuffer
textures
T{CGSize=ff},N,V_size
Tf,N,V_timePerFrame
placementWeight
TI,N,V_placementWeight
rotation
flipVertically
flipHorizontally
attribute vec4 a_position; attribute vec4 a_color; attribute vec2 a_tex_coord; uniform highp mat2 u_normals_tex_coord_xform; varying highp vec2 v_tex_coord; varying highp vec2 v_tex_coord_normals; varying lowp vec4 v_color_mix; varying lowp vec3 v_position; void main() { v_color_mix = a_color; v_position = a_position.xyz; v_tex_coord = a_tex_coord; v_tex_coord_normals = a_tex_coord * u_normals_tex_coord_xform; gl_Position = a_position; }
attribute vec4 a_position; attribute vec2 a_tex_coord; varying highp vec2 v_tex_coord; varying highp vec2 v_tex_coord_normals; varying lowp vec4 v_color_mix; varying lowp vec3 v_position; uniform highp mat2 u_normals_tex_coord_xform; uniform lowp vec4 u_color; uniform mat4 u_transform; void main() { v_color_mix = u_color; v_tex_coord = a_tex_coord; v_tex_coord_normals = a_tex_coord * u_normals_tex_coord_xform; vec4 position = a_position * u_transform; v_position = position.xyz; gl_Position = position; }
uniform lowp int u_num_lights; uniform lowp vec4 u_ambient_color; uniform highp vec3 u_light_position[8]; uniform lowp float u_light_decay[8]; uniform lowp vec3 u_light_color[8]; uniform lowp float u_specular; uniform lowp float u_diffuse; uniform lowp float u_ambient; uniform lowp float u_rotation_sin; uniform lowp float u_rotation_cos; uniform lowp %@ u_texture; uniform lowp %@ u_texture2; uniform lowp vec2 u_aspect; varying highp vec2 v_tex_coord; varying highp vec2 v_tex_coord_normals; varying lowp vec3 v_position; varying lowp vec4 v_color_mix; void main() { lowp vec4 rgba = v_color_mix * %@ (u_texture, v_tex_coord); if (rgba.a < 0.05) { gl_FragColor = rgba; } else { lowp vec3 rgb = vec3(rgba); lowp vec3 fragColor = u_ambient * u_ambient_color.rgb * rgb; lowp vec3 norm = normalize(%@ (u_texture2, v_tex_coord_normals).xyz * 1.99 - 1.0); lowp vec3 n = vec3(norm.x * u_rotation_cos - norm.y * u_rotation_sin, norm.x * u_rotation_sin + norm.y * u_rotation_cos, norm.z); int lightCount = u_num_lights; for (lowp int i = 0; i < lightCount; i++) { lowp vec3 light_vec = u_light_position[i] - v_position; light_vec = vec3(light_vec.xy * u_aspect, light_vec.z); highp float light_vec_length = length(light_vec); lowp float dist = u_light_decay[i] * light_vec_length; lowp float decay = min(1.0, 1.0 / (dist * dist)); lowp vec3 lightColor = u_light_color[i]; lowp vec3 l = light_vec / light_vec_length; lowp float n_dot_l = dot(n, l); if (n_dot_l > 0.0) { fragColor += rgb * n_dot_l * decay * u_diffuse * lightColor; highp float specular = max(0.0, 1.99 * n_dot_l * n.z - l.z); specular = pow(specular, 16.0); fragColor += specular * decay * u_specular; } } gl_FragColor = vec4(fragColor, rgba.a); } }
sampler2D
texture2D
sampler2DRect
texture2DRect
_autoplayLooped
_audioName
_audioURL
avAudioNode
T@"AVAudioNode",&,N
autoplayLooped
TB,N,V_autoplayLooped
positional
TB,N,GisPositional,V_positional
_implicit
TB,N,V__implicit
T@"SKPhysicsBody",&,N,VbodyA
T@"SKPhysicsBody",&,N,VbodyB
reactionForce
T{CGVector=ff},R,N,VreactionForce
reactionTorque
Tf,R,N,VreactionTorque
anchor
T{CGPoint=ff},R,V_anchor
shouldEnableLimits
TB,N,V_shouldEnableLimits
frictionTorque
Tf,N,V_frictionTorque
rotationSpeed
Tf,N,V_rotationSpeed
damping
Tf,N,V_damping
frequency
Tf,N,V_frequency
lowerDistanceLimit
Tf,N,V_lowerDistanceLimit
upperDistanceLimit
Tf,N,V_upperDistanceLimit
maxLength
Tf,N,V_maxLength
gravity
T{CGVector=ff},N,V_gravity
Tf,N,Vspeed
contactDelegate
T@"<SKPhysicsContactDelegate>",N,V_contactDelegate
debugDrawSpriteBounds
highlightNodes
debugColorEffectNodes
debugColorCropNodes
debugColorCustomShaders
debugColorCustomShadersRecompile
debugDisableEffectNodeEffects
debugDisableEffectNodeRasterize
debugDisableCropNodes
debugDisableCustomShaders
debugDisable3DNodes
debugDisableCoreImage
debugDisableScissorRect
debugLogBatching
debugDrawStats_RenderTime
debugDrawStats_FrameTime
debugDrawStats_PassCount
debugDrawStats_BufferSize
debugDrawStats_SKVersion
debugDrawStats_SKContextType
debugDrawStats_Centered
scissorRect
shrinkBatchBuffers
SKCRenderer_resource_queue
u_normals_tex_coord_xform
u_ambient
u_diffuse
u_specular
u_aspect
u_rotation_sin
u_rotation_cos
u_num_lights
u_ambient_color
u_light_color
u_light_position
u_light_decay
SKCRenderer<%p> [Begin Frame]
SKCRenderer<%p> [End Frame]
accumulated_bounds_fillColor
accumulated_bounds_strokeColor
node_bounds_fillColor
node_bounds_strokeColor
nodeList
Menlo-Regular
debugDrawStats_FontColor
debugDrawContextType
debugStatsFontSize
debugStatsFontName
[SK-%@]
 nodes:%d
 draws:%d
 passes:%d
 quads:%d
 bufferSize:%d
 cpu:%d%%
 gpu:%d%%
  %2.1f fps
  (%2.1f pfps)
  frame:%2.1fms
  render:%2.1fms
SKCRenderer<%p> pass:%d batch:%d BatchBreaker[CustomOps]: %@
SKCRenderer<%p> pass:%d batch:%d BatchBreaker: %@
SKCRenderer<%p> pass:%d batch:%d AddingNode:[%@]
attribute vec4 a_color; attribute vec4 a_position; attribute vec2 a_tex_coord; varying highp vec2 v_tex_coord; varying lowp vec4 v_color_mix; void main() { v_color_mix = a_color; v_tex_coord = a_tex_coord; gl_Position = a_position; }
uniform lowp sampler2D u_texture; varying highp vec2 v_tex_coord; varying lowp vec4 v_color_mix; void main() { lowp vec4 color = v_color_mix * texture2D(u_texture, v_tex_coord); if (color.a <= 0.05) { discard; } else { gl_FragColor = color; } }
uniform lowp sampler2DRect u_texture; varying highp vec2 v_tex_coord; varying lowp vec4 v_color_mix; void main() { lowp vec4 color = v_color_mix * texture2DRect(u_texture, v_tex_coord); if (color.a <= 0.05) { discard; } else { gl_FragColor = color; } }
uniform lowp sampler2D u_texture; varying highp vec2 v_tex_coord; varying lowp vec4 v_color_mix; void main() { gl_FragColor = v_color_mix * texture2D(u_texture, v_tex_coord); }
attribute vec4 a_color; attribute vec4 a_position; varying highp vec2 v_tex_coord; varying lowp vec4 v_color_mix; void main() { v_color_mix = a_color; gl_Position = vec4(a_position.xyz, 1.0); gl_PointSize = a_position.w; }
uniform lowp sampler2D u_texture; varying lowp vec4 v_color_mix; void main() { vec2 uv = vec2(gl_PointCoord.x, 1.0 - gl_PointCoord.y); gl_FragColor = v_color_mix * texture2D(u_texture, uv); }
uniform lowp sampler2D u_texture; varying highp vec2 v_tex_coord; varying lowp vec4 v_color_mix; void main() { vec2 uv = vec2(gl_PointCoord.x, 1.0 - gl_PointCoord.y); lowp vec4 color = v_color_mix * texture2D(u_texture, uv); if (color.a <= 0.05) { discard; } else { gl_FragColor = color; } }
attribute vec4 a_position; void main() { gl_Position = a_position; }
void main() { gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0); }
uniform lowp vec4 u_color; void main() { gl_FragColor = u_color; }
attribute vec4 a_position; attribute vec2 a_tex_coord; varying highp vec2 v_tex_coord; void main() { v_tex_coord = a_tex_coord; gl_Position = a_position; }
uniform lowp sampler2D u_texture; uniform lowp sampler2D u_texture2; varying highp vec2 v_tex_coord; void main() { lowp vec4 color = texture2D(u_texture, v_tex_coord); lowp float alpha = texture2D(u_texture2, v_tex_coord).a; gl_FragColor = color * alpha; }
uniform lowp sampler2D u_texture; uniform lowp sampler2D u_texture2; varying highp vec2 v_tex_coord; void main() { lowp vec4 color = texture2D(u_texture, v_tex_coord); lowp float alpha = texture2D(u_texture2, v_tex_coord).a; gl_FragColor = color * (1.0 - alpha); }
attribute vec4 a_position; attribute vec2 a_tex_coord; varying highp vec2 v_tex_coord; varying lowp vec4 v_color_mix; uniform lowp vec4 u_color; uniform mat4 u_transform; void main() { v_color_mix = u_color; v_tex_coord = a_tex_coord; gl_Position = a_position * u_transform; }
v8@?0^{SKCParticleSystem=^^?{map<std::__1::basic_string<char>, SKCDataSlice *, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKCDataSlice *> > >={__tree<std::__1::__value_type<std::__1::basic_string<char>, SKCDataSlice *>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, SKCDataSlice *>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, SKCDataSlice *> > >=^{__tree_node<std::__1::__value_type<std::__1::basic_string<char>, SKCDataSlice *>, void *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, SKCDataSlice *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, SKCDataSlice *>, std::__1::less<std::__1::basic_string<char> >, true> >=L}}}{vector<unsigned int, std::__1::allocator<unsigned int> >=^I^I{__compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >=^I}}{list<SKCParticleUpdater *, std::__1::allocator<SKCParticleUpdater *> >={__list_node_base<SKCParticleUpdater *, void *>=^{__list_node_base<SKCParticleUpdater *, void *>}^{__list_node_base<SKCParticleUpdater *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCParticleUpdater *, void *> > >=L}}IIB}4
_interpolationMode
_values
'values' and 'times'  arrays must have equal counts
_repeatMode
SKKeyframeSequence values must be either SKColors or NSNumbers
All values in a SKKeyframeSequence must be of the same class
interpolationMode
repeatMode
SKDefaults_ReloadNotification
SKDefaults
v8@?0i4
enableAllDebugEvents
IOAcceleratorES
PerformanceStatistics
attribute vec4 a_color;attribute vec4 a_position;attribute vec2 a_tex_coord;varying highp vec2 v_tex_coord;varying lowp vec4 v_color_mix;void main(){v_color_mix = a_color;v_tex_coord = a_tex_coord;gl_Position = a_position;}
varying highp vec2 v_tex_coord;varying lowp vec4 v_color_mix;uniform lowp sampler2DRect u_texture;void main(){vec4 color = texture2DRect(u_texture, v_tex_coord);gl_FragColor = color * v_color_mix;}
uniform float u_color;attribute vec4 a_position;attribute vec4 a_color;varying lowp vec4 v_color;void main(){    v_color = a_color;    gl_Position = a_position;}
varying lowp vec4 v_color;void main(){    gl_FragColor = v_color;}
attribute vec4 a_color;attribute vec4 a_position;attribute vec2 a_tex_coord;varying mediump vec2 v_tex_coord;varying lowp vec4 v_color_mix;void main(){    v_color_mix = a_color;    v_tex_coord = a_tex_coord;    gl_Position = a_position;}
uniform lowp sampler2D u_texture;uniform lowp sampler2D u_texture2;varying mediump vec2 v_tex_coord;varying lowp vec4 v_color_mix;void main(){    lowp vec3 color;    lowp vec3 ycbcr = vec3(texture2D(u_texture, v_tex_coord).r,                           texture2D(u_texture2, v_tex_coord).rg);const vec3 ycbcr_0 = vec3(+1.164380,    +0.000000,    +1.596030);const vec3 ycbcr_1 = vec3(+1.164380,    -0.391762,    -0.812968);const vec3 ycbcr_2 = vec3(+1.164380,    +2.017230,    +0.000000);const vec3 ycbcr_3 = vec3(-0.874202,    +0.531668,    -1.085630);color.r = dot(ycbcr, ycbcr_0);color.g = dot(ycbcr, ycbcr_1);color.b = dot(ycbcr, ycbcr_2);color += ycbcr_3;gl_FragColor = vec4(color, 1.0) * v_color_mix;}
info face="CourierNewPS-BoldMT" size=36 bold=0 italic=0 charset="" unicode=0 stretchH=100 smooth=1 aa=1 padding=0,0,0,0 spacing=2,2
common lineHeight=39 base=30 scaleW=256 scaleH=256 pages=1 packed=0
page id=0 file="SKStatsFont.png"
chars count=58
char id=106 x=2 y=2 width=27 height=39 xoffset=3 yoffset=7 xadvance=22 page=0 chnl=0 letter="j"
char id=41 x=31 y=2 width=26 height=37 xoffset=4 yoffset=7 xadvance=15 page=0 chnl=0 letter=")"
char id=93 x=59 y=2 width=26 height=37 xoffset=4 yoffset=7 xadvance=22 page=0 chnl=0 letter="]"
char id=123 x=87 y=2 width=24 height=37 xoffset=6 yoffset=7 xadvance=22 page=0 chnl=0 letter="{"
char id=125 x=113 y=2 width=24 height=37 xoffset=6 yoffset=7 xadvance=22 page=0 chnl=0 letter="}"
char id=40 x=139 y=2 width=21 height=37 xoffset=10 yoffset=7 xadvance=15 page=0 chnl=0 letter="("
char id=91 x=162 y=2 width=21 height=37 xoffset=9 yoffset=7 xadvance=22 page=0 chnl=0 letter="["
char id=103 x=185 y=2 width=29 height=33 xoffset=1 yoffset=13 xadvance=22 page=0 chnl=0 letter="g"
char id=96 x=216 y=2 width=23 height=33 xoffset=7 yoffset=6 xadvance=22 page=0 chnl=0 letter="`"
char id=98 x=2 y=43 width=30 height=32 xoffset=-0 yoffset=7 xadvance=22 page=0 chnl=0 letter="b"
char id=100 x=34 y=43 width=30 height=32 xoffset=1 yoffset=7 xadvance=22 page=0 chnl=0 letter="d"
char id=112 x=66 y=43 width=30 height=32 xoffset=-0 yoffset=14 xadvance=22 page=0 chnl=0 letter="p"
char id=113 x=98 y=43 width=29 height=32 xoffset=1 yoffset=14 xadvance=22 page=0 chnl=0 letter="q"
char id=121 x=129 y=43 width=29 height=32 xoffset=1 yoffset=14 xadvance=22 page=0 chnl=0 letter="y"
char id=50 x=160 y=43 width=28 height=32 xoffset=2 yoffset=7 xadvance=22 page=0 chnl=0 letter="2"
char id=51 x=190 y=43 width=28 height=32 xoffset=2 yoffset=7 xadvance=22 page=0 chnl=0 letter="3"
char id=53 x=220 y=43 width=28 height=32 xoffset=2 yoffset=7 xadvance=22 page=0 chnl=0 letter="5"
char id=49 x=2 y=77 width=27 height=32 xoffset=3 yoffset=7 xadvance=22 page=0 chnl=0 letter="1"
char id=56 x=31 y=77 width=27 height=32 xoffset=3 yoffset=7 xadvance=22 page=0 chnl=0 letter="8"
char id=48 x=60 y=77 width=27 height=32 xoffset=3 yoffset=7 xadvance=22 page=0 chnl=0 letter="0"
char id=37 x=89 y=77 width=27 height=32 xoffset=3 yoffset=7 xadvance=22 page=0 chnl=0 letter="%"
char id=54 x=118 y=77 width=26 height=32 xoffset=4 yoffset=7 xadvance=22 page=0 chnl=0 letter="6"
char id=57 x=146 y=77 width=26 height=32 xoffset=4 yoffset=7 xadvance=22 page=0 chnl=0 letter="9"
char id=33 x=174 y=77 width=22 height=32 xoffset=2 yoffset=7 xadvance=10 page=0 chnl=0 letter="!"
char id=104 x=198 y=77 width=30 height=31 xoffset=0 yoffset=8 xadvance=22 page=0 chnl=0 letter="h"
char id=107 x=2 y=111 width=29 height=31 xoffset=1 yoffset=8 xadvance=22 page=0 chnl=0 letter="k"
char id=105 x=33 y=111 width=28 height=31 xoffset=2 yoffset=8 xadvance=22 page=0 chnl=0 letter="i"
char id=108 x=63 y=111 width=28 height=31 xoffset=2 yoffset=8 xadvance=22 page=0 chnl=0 letter="l"
char id=116 x=93 y=111 width=28 height=31 xoffset=3 yoffset=8 xadvance=22 page=0 chnl=0 letter="t"
char id=102 x=123 y=111 width=27 height=31 xoffset=3 yoffset=8 xadvance=22 page=0 chnl=0 letter="f"
char id=52 x=152 y=111 width=27 height=31 xoffset=3 yoffset=8 xadvance=22 page=0 chnl=0 letter="4"
char id=55 x=181 y=111 width=27 height=31 xoffset=3 yoffset=8 xadvance=22 page=0 chnl=0 letter="7"
char id=63 x=210 y=111 width=26 height=31 xoffset=4 yoffset=8 xadvance=22 page=0 chnl=0 letter="?"
char id=39 x=2 y=144 width=22 height=31 xoffset=8 yoffset=8 xadvance=22 page=0 chnl=0 letter="'"
char id=34 x=26 y=144 width=25 height=30 xoffset=5 yoffset=9 xadvance=22 page=0 chnl=0 letter="""
char id=60 x=53 y=144 width=31 height=29 xoffset=-0 yoffset=10 xadvance=22 page=0 chnl=0 letter="<"
char id=62 x=86 y=144 width=29 height=29 xoffset=1 yoffset=10 xadvance=22 page=0 chnl=0 letter=">"
char id=43 x=117 y=144 width=29 height=29 xoffset=1 yoffset=10 xadvance=22 page=0 chnl=0 letter="+"
char id=59 x=148 y=144 width=23 height=28 xoffset=2 yoffset=14 xadvance=10 page=0 chnl=0 letter=";"
char id=97 x=173 y=144 width=29 height=26 xoffset=2 yoffset=13 xadvance=22 page=0 chnl=0 letter="a"
char id=101 x=204 y=144 width=29 height=26 xoffset=1 yoffset=13 xadvance=22 page=0 chnl=0 letter="e"
char id=111 x=2 y=177 width=29 height=26 xoffset=2 yoffset=13 xadvance=22 page=0 chnl=0 letter="o"
char id=99 x=33 y=177 width=28 height=26 xoffset=2 yoffset=13 xadvance=22 page=0 chnl=0 letter="c"
char id=115 x=63 y=177 width=27 height=26 xoffset=3 yoffset=13 xadvance=22 page=0 chnl=0 letter="s"
char id=109 x=92 y=177 width=32 height=25 xoffset=-1 yoffset=14 xadvance=22 page=0 chnl=0 letter="m"
char id=117 x=126 y=177 width=30 height=25 xoffset=1 yoffset=14 xadvance=22 page=0 chnl=0 letter="u"
char id=110 x=158 y=177 width=29 height=25 xoffset=1 yoffset=14 xadvance=22 page=0 chnl=0 letter="n"
char id=114 x=189 y=177 width=28 height=25 xoffset=2 yoffset=14 xadvance=22 page=0 chnl=0 letter="r"
char id=58 x=219 y=177 width=22 height=25 xoffset=2 yoffset=14 xadvance=10 page=0 chnl=0 letter=":"
char id=118 x=2 y=205 width=30 height=24 xoffset=0 yoffset=15 xadvance=22 page=0 chnl=0 letter="v"
char id=119 x=34 y=205 width=30 height=24 xoffset=-0 yoffset=15 xadvance=22 page=0 chnl=0 letter="w"
char id=120 x=66 y=205 width=29 height=24 xoffset=1 yoffset=15 xadvance=22 page=0 chnl=0 letter="x"
char id=122 x=97 y=205 width=27 height=24 xoffset=3 yoffset=15 xadvance=22 page=0 chnl=0 letter="z"
char id=95 x=126 y=205 width=33 height=19 xoffset=-1 yoffset=30 xadvance=22 page=0 chnl=0 letter="_"
char id=44 x=161 y=205 width=23 height=19 xoffset=2 yoffset=25 xadvance=10 page=0 chnl=0 letter=","
char id=46 x=186 y=205 width=22 height=13 xoffset=2 yoffset=26 xadvance=10 page=0 chnl=0 letter="."
char id=45 x=210 y=205 width=24 height=12 xoffset=2 yoffset=18 xadvance=10 page=0 chnl=0 letter="-"
char id=32 x=236 y=205 width=0 height=0 xoffset=0 yoffset=39 xadvance=8 page=0 chnl=0 letter="space"
//SKNode
_lowerLimit
_upperLimit
-inf
%.2f
<SKRange> lowerLimit:%@ upperLimit:%@
lowerLimit
Tf,V_lowerLimit
upperLimit
Tf,V_upperLimit
_enabled
_referenceNode
<SKConstraint> enabled: %@
TB,V_enabled
referenceNode
T@"SKNode",&,N,V_referenceNode
_widthRange
_heightRange
widthRange
T@"SKRange",C,V_widthRange
heightRange
T@"SKRange",C,V_heightRange
_xRange
_yRange
xRange
T@"SKRange",C,V_xRange
yRange
T@"SKRange",C,V_yRange
_zRotationRange
zRotationRange
T@"SKRange",C,V_zRotationRange
_node
_offset
_point
T@"SKNode",W,V_node
point
T{CGPoint=ff},V_point
T@"SKRange",C,V_offset
_distanceRange
distanceRange
T@"SKRange",C,V_distanceRange
_currentColumns
_currentRows
_tileWidth
_tileHeight
_tileSetName
_tileSet
_colorBlendFactor
_enableAutomapping
_rawTiles
Default Tile Map
tileSetName
T@"NSString",&,N,V_tileSetName
tileSize
mapSize
tileSet
T@"SKTileSet",&,N
enableAutomapping
_floatValues0
_floatValues1
_floatValues2
_floatValues3
Ti,R,N,V_type
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
