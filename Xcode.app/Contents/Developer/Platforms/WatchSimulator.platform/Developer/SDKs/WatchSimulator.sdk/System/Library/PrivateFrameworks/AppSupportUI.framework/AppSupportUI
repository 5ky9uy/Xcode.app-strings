MbP?
init
_customAlignmentInsets
_baselineRelativeInsets
_allowFastBaselines
_customTopBaseline
_customBottomBaseline
alloc
release
containerViewInfoCreateIfNeeded:
invalidateIntrinsicContentSize
setCustomAlignmentRectInsets:
customAlignmentRectInsets
setBaselineRelativeAlignmentRectInsets:
isBaselineRelativeAlignmentRectInsets
setAllowsBaselineOffsetApproximation:
allowsBaselineOffsetApproximation
setCustomBaselineOffsetFromBottom:
customBaselineOffsetFromBottom
setCustomFirstBaselineOffsetFromContentTop:
customFirstBaselineOffsetFromContentTop
alignmentRectInsets
effectiveAlignmentRectInsets
_wantsAutolayout
_needsDoubleUpdateConstraintsPass
systemLayoutSizeFittingSize:
effectiveBaselineOffsetFromContentBottom
effectiveFirstBaselineOffsetFromContentTop
isLayoutSizeDependentOnPerpendicularAxis
effectiveLayoutSizeFittingSize:
separatorStyle
_separatorFrame
effectiveSeparatorHeight
viewForLastBaselineLayout
font
respondsToSelector:
ascender
_currentScreenScale
_firstBaselineOffsetFromTop
descender
_baselineOffsetFromBottom
contentCompressionResistancePriorityForAxis:
contentHuggingPriorityForAxis:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
retain
autorelease
retainCount
zone
hash
superclass
description
debugDescription
populateGridArrangementCells:
populateGridArrangementDimension:withCells:axis:
layoutFrameForArrangedSubview:withProposedContentFrame:
contentLayoutSizeFittingSize:forArrangedSubview:
setDelegate:
containerGridView:minimumSpacingAdjecentToArrangedSubview:
containerGridView:horizontalAlignmentForArrangedSubview:
containerGridView:verticalAlignmentForArrangedSubview:
setBaselineRelativeArrangement:
initWithArrangeSubviewRows:
initWithArrangedSubviews:
countByEnumeratingWithState:objects:count:
addRowWithArrangedSubviews:
dealloc
count
firstObject
objectAtIndexedSubscript:
orderedSetWithArray:
array
orderedSetWithCapacity:
addObject:
_setupViewRangesIfNeeded
getColumnRange:rowRange:forArrangedSubview:
numberOfRows
insertRowAtIndex:withArrangedSubviews:
assertNotInLayoutPass:
numberOfColumns
arrayWithCapacity:
arrayWithArray:
addArrangedSubview:
insertObject:atIndex:
arrangedSubviewsInRowAtIndex:
removeArrangedSubview:
removeObjectAtIndex:
insertColumnAtIndex:withArrangedSubviews:
enumerateObjectsUsingBlock:
arrangedSubviewsInColumnAtIndex:
invalidateIntrinsicContentSizeRequiringArrangedSubviewRemeasurement:
isHidden
objectAtIndex:
_baselineViewVendForFirstBaseline:fromViews:
viewForFirstBaselineLayout
setFrame:
arrangedDescription
stringWithFormat:
bounds
appendFormat:
appendString:
stringByAppendingString:
delegate
_horizontalAlignmentOfView:inColumn:
_verticalAlignmentOfView:inColumn:
_widthOfColumnAtIndex:
_heightOfRowAtIndex:
arrangedSubviewInColumnAtIndex:rowAtIndex:
rowIndexForArrangedSubview:
columnIndexForArrangedSubview:
removeRowAtIndex:
addColumnWithArrangedSubviews:
removeColumnAtIndex:
setHorizontalAlignment:
setVerticalAlignment:
horizontalDistribution
setHorizontalDistribution:
verticalDistribution
setVerticalDistribution:
setRowSpacing:
rowSpacing
setColumnSpacing:
columnSpacing
setRowHeight:
setColumnWidth:
calculateArrangedSizeFittingSize:
layoutArrangedSubviewsInBounds:
didInsertArrangedSubview:atIndex:
didRemoveArrangedSubview:atIndex:
.cxx_destruct
.cxx_construct
horizontalAlignment
verticalAlignment
rowHeight
columnWidth
_viewRows
_visibleArrangement
_visibleCount
_viewRanges
_spacing
_rows
_columns
_gridViewFlags
_horizontalAlignment
_verticalAlignment
_rowHeight
_columnWidth
setHidden:
setRowAtIndex:hidden:
isRowAtIndexHidden:
setColumnAtIndex:hidden:
isColumnAtIndexHidden:
setHorizontalAlignment:ofColumnAtIndex:
horizontalAlignmentOfColumnAtIndex:
setVerticalAlignment:ofColumnAtIndex:
verticalAlignmentOfColumnAtIndex:
setSpacing:afterRowAtIndex:
spacingAfterRowAtIndex:
setSpacing:afterColumnAtIndex:
spacingAfterColumnAtIndex:
setHeight:ofRowAtIndex:
heightOfRowAtIndex:
setWidth:ofColumnAtIndex:
widthOfColumnAtIndex:
numberWithInteger:
initWithObjectsAndKeys:
objectForKeyedSubscript:
containerBoxView:horizontalAlignmentForArrangedSubview:
containerBoxView:verticalAlignmentForArrangedSubview:
setNeedsLayout
isBaselineRelativeArrangement
visibleArrangedSubviews
_effectiveVerticalAlignmentForArrangedSubview:
_positionSizeOfArrangedView:inRect:horizontallyInBounds:
_positionSizeOfArrangedView:inRect:verticallyInBounds:
_effectiveHorizontalAlignmentForArrangedSubview:
_boxFlags
_createButtonWithGridView:item:
titleStyle
_createLabelForStyle:
blackColor
setTextColor:
widgetItemTitle
setText:
valueForKey:
mutableCopy
setHyphenationFactor:
setObject:forKeyedSubscript:
text
initWithString:attributes:
setAttributedText:
arrayWithObjects:count:
setAlignment:
setAxis:
setSpacing:
widgetItemSubtitle
subtitleStyle
grayColor
itemWidth
widgetGridView:didTapItemAtIndex:
buttonWithType:
widgetItemImage
setImage:forState:
_didTapButton:
addTarget:action:forControlEvents:
imageView
setClipsToBounds:
imageStyle
layer
setCornerRadius:
preferredFontForTextStyle:
setFont:
clearColor
setBackgroundColor:
setTextAlignment:
setAdjustsFontSizeToFitWidth:
setNumberOfLines:
setLineBreakMode:
arrangedSubviews
entitledExtraSpaceForCellAtIndex:
titleLabel
lineHeight
cellForGridViewItemAtIndex:
donatableSpaceAllowRemeasure:
borrowableSpaceForCellAtIndex:
centerAdjustmentAllowed
containerStackView:minimumSpacingAdjecentToArrangedSubview:
containerStackView:alignmentForArrangedSubview:
containerViewDidInvalidateIntrinsicContentSize:
containerView:systemLayoutSizeFittingSize:forArrangedSubview:
containerView:layoutFrameForArrangedSubview:withProposedFrame:
containerView:willMeasureArrangedSubviewsFittingSize:forReason:
containerViewDidLayoutArrangedSubviews:
initWithWidgetGridView:item:index:
donatableSpace
index
subtitleLabel
gridView
_width
_measuredSize
_index
_donatableSpaceIsValid
_donatableSpace
_gridView
initWithContentView:
initWithFrame:
_setHostsLayoutEngine:
setContentView:
removeFromSuperview
addSubview:
_hasLayoutEngine
translatesAutoresizingMaskIntoConstraints
_prepareForFirstIntrinsicContentSizeCalculation
_nsis_bounds
_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:
updateConstraints
alignmentRectForFrame:
_setInSecondConstraintsPass:
_resetToBeginningOfDoublePass
_intrinsicContentSizeInvalidatedForChildView:
_intrinsicSizeWithinSize:
layoutSubviews
intrinsicContentSize
setContentSize:
effectiveUserInterfaceLayoutDirection
initWithCoder:
_nui_needsDoubleUpdateConstraintsPass
sizeThatFits:
contentView
_preferredMaxLayoutWidth
_containerViewFlags
_contentView
currentDevice
userInterfaceIdiom
reloadData
layoutMargins
maxNumberOfItems
numberOfItemsInWidgetGridView:
widgetGridView:itemAtIndex:
widgetGridView:classForCellAtIndex:
null
copy
setDistribution:
setLayoutMargins:
setLayoutMarginsRelativeArrangement:
_createStackViewIfNeeded
frame
makeObjectsPerformSelector:
initWithDataSource:delegate:
setImageStyle:
setTitleStyle:
setSubtitleStyle:
dataSource
setDataSource:
setCenterAdjustmentAllowed:
currentLabelOutset
_stackView
_itemViews
_labelSizes
_dataSource
_delegate
_imageStyle
_titleStyle
_subtitleStyle
_centerAdjustmentAllowed
_currentLabelOutset
lastObject
_baselineViewVendForFirstBaseline:
containerStackViewDidInvalidateIntrinsicContentSize:
containerStackView:systemLayoutSizeFittingSize:forArrangedSubview:
containerStackView:layoutFrameForArrangedSubview:withProposedFrame:
containerStackViewDidLayoutArrangedSubviews:
_effectiveAlignmentForArrangedSubview:
setSpacingViewClass:
axis
distribution
alignment
spacing
spacingViewClass
_spacingViews
_spacingAfter
_stackViewFlags
_axis
_distribution
_alignment
_spacingViewClass
setSpacing:afterArrangedSubviewAtIndex:
spacingAfterArrangedSubviewAtIndex:
processInfo
environment
boolValue
isDebugBoundingBoxesEnabled
orangeColor
CGColor
setBorderColor:
setBorderWidth:
_endObservingSubviewVisibility:
predicateWithBlock:
filteredArrayUsingPredicate:
insertArrangedSubview:atIndex:
addObserver:forKeyPath:options:context:
removeObserver:forKeyPath:
indexOfObject:
superview
purpleColor
colorWithAlphaComponent:
_beginObservingSubviewVisibility:
layoutMarginsDidChange
isEqualToString:
containsObject:
visibilityDidChangeForArrangedSubview:
observeValueForKeyPath:ofObject:change:context:
intrinsicContentSizeDidInvalidateForArrangedSubview:
length
substringToIndex:
stringByAppendingFormat:
initialize
wantsLayer
isFlipped
setArrangedSubviews:
_didRemoveSubview:
indexOfArrangedSubview:
systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority:
isLayoutMarginsRelativeArrangement
_arrangedSubviews
_visibleArrangedSubviews
_cachedIntrinsicSizes
_cachedSystemLayoutSizes
_containerFlags
_baselineRelativeArrangement
_layoutMarginsRelativeArrangement
raise:format:
callStackSymbols
isInLayoutPass
_NUIViewContainerViewInfo
NUIContainerView
NUISubclassHelpers
_NUIGridArrangement
_NUIGridArrangementItem
NSObject
NUIContainerGridView
_NUIGridArrangementContainer
NUIContainerGridViewCustomDimensionConfiguration
NUIContainerBoxView
NUIWidgetGridViewCell
NUIContainerStackViewDelegate
NUIContainerViewDelegate
NUIWidgetGridViewEmptyCell
NUIContentScrollView
_UIMultilineTextContentSizing
NUIWidgetGridView
NUIContainerStackView
NUIContainerStackViewCustomConfiguration
NUIContainerViewHack
NUISubclassing
@8@0:4
{UIEdgeInsets="top"f"left"f"bottom"f"right"f}
@12@0:4B8
v24@0:4{UIEdgeInsets=ffff}8
{UIEdgeInsets=ffff}8@0:4
v12@0:4B8
B8@0:4
v12@0:4f8
f8@0:4
{CGSize=ff}16@0:4{CGSize=ff}8
f12@0:4i8
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4@"Protocol"8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
@"NSString"8@0:4
v12@0:4^{vector<_NUIGridArrangementCell, std::__1::allocator<_NUIGridArrangementCell> >=^{_NUIGridArrangementCell}^{_NUIGridArrangementCell}{__compressed_pair<_NUIGridArrangementCell *, std::__1::allocator<_NUIGridArrangementCell> >=^{_NUIGridArrangementCell}}}8
v20@0:4^{vector<_NUIGridArrangementDimension, std::__1::allocator<_NUIGridArrangementDimension> >=^{_NUIGridArrangementDimension}^{_NUIGridArrangementDimension}{__compressed_pair<_NUIGridArrangementDimension *, std::__1::allocator<_NUIGridArrangementDimension> >=^{_NUIGridArrangementDimension}}}8r^{vector<_NUIGridArrangementCell, std::__1::allocator<_NUIGridArrangementCell> >=^{_NUIGridArrangementCell}^{_NUIGridArrangementCell}{__compressed_pair<_NUIGridArrangementCell *, std::__1::allocator<_NUIGridArrangementCell> >=^{_NUIGridArrangementCell}}}12i16
{CGSize=ff}20@0:4{CGSize=ff}8@16
{CGSize=ff}20@0:4{CGSize=ff}8@"<_NUIGridArrangementItem>"16
{CGRect={CGPoint=ff}{CGSize=ff}}28@0:4@8{CGRect={CGPoint=ff}{CGSize=ff}}12
{CGRect={CGPoint=ff}{CGSize=ff}}28@0:4@"<_NUIGridArrangementItem>"8{CGRect={CGPoint=ff}{CGSize=ff}}12
v12@0:4@8
@12@0:4@8
v8@0:4
i8@0:4
@12@0:4i8
@16@0:4i8i12
v20@0:4^{_NSRange=II}8^{_NSRange=II}12@16
i12@0:4@8
v16@0:4i8@12
v12@0:4i8
@16@0:4B8@12
B24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
v16@0:4@8i12
i16@0:4@8i12
@"NSMutableArray"
{_NUIGridArrangement="container"@"<_NUIGridArrangementContainer>""baselineRelative"B"horzDist"i"vertDist"i"cells"{vector<_NUIGridArrangementCell, std::__1::allocator<_NUIGridArrangementCell> >="__begin_"^{_NUIGridArrangementCell}"__end_"^{_NUIGridArrangementCell}"__end_cap_"{__compressed_pair<_NUIGridArrangementCell *, std::__1::allocator<_NUIGridArrangementCell> >="__first_"^{_NUIGridArrangementCell}}}"columns"{vector<_NUIGridArrangementDimension, std::__1::allocator<_NUIGridArrangementDimension> >="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::__1::allocator<_NUIGridArrangementDimension> >="__first_"^{_NUIGridArrangementDimension}}}"rows"{vector<_NUIGridArrangementDimension, std::__1::allocator<_NUIGridArrangementDimension> >="__begin_"^{_NUIGridArrangementDimension}"__end_"^{_NUIGridArrangementDimension}"__end_cap_"{__compressed_pair<_NUIGridArrangementDimension *, std::__1::allocator<_NUIGridArrangementDimension> >="__first_"^{_NUIGridArrangementDimension}}}}
{CGSize="width"f"height"f}
{unordered_map<UIView *, const std::__1::pair<_NSRange, _NSRange>, std::__1::hash<UIView *>, std::__1::equal_to<UIView *>, std::__1::allocator<std::__1::pair<UIView *const, const std::__1::pair<_NSRange, _NSRange> > > >="__table_"{__hash_table<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::__unordered_map_hasher<UIView *, std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::hash<UIView *>, true>, std::__1::__unordered_map_equal<UIView *, std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::equal_to<UIView *>, true>, std::__1::allocator<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> *> > >="__first_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *> *> >="__first_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<UIView *, std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::hash<UIView *>, true> >="__first_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<UIView *, std::__1::__hash_value_type<UIView *, const std::__1::pair<_NSRange, _NSRange> >, std::__1::equal_to<UIView *>, true> >="__first_"f}}}
{vector<_NUIGridViewDimensionConfiguration, std::__1::allocator<_NUIGridViewDimensionConfiguration> >="__begin_"^{_NUIGridViewDimensionConfiguration}"__end_"^{_NUIGridViewDimensionConfiguration}"__end_cap_"{__compressed_pair<_NUIGridViewDimensionConfiguration *, std::__1::allocator<_NUIGridViewDimensionConfiguration> >="__first_"^{_NUIGridViewDimensionConfiguration}}}
{?="inInsertOrRemove"b1"delegateMinSpacing"b1"delegateHorizontalAlignment"b1"delegateVerticalAlignment"b1}
v16@0:4i8B12
B12@0:4i8
v16@0:4i8i12
i12@0:4I8
v16@0:4f8i12
v32@0:4@8^{CGRect={CGPoint=ff}{CGSize=ff}}12{CGRect={CGPoint=ff}{CGSize=ff}}16
{?="delegateHorizontal"b1"delegateVertical"b1}
{UIEdgeInsets=ffff}16@0:4@8@12
{UIEdgeInsets=ffff}16@0:4@"NUIContainerStackView"8@"UIView"12
i16@0:4@8@12
i16@0:4@"NUIContainerStackView"8@"UIView"12
v12@0:4@"NUIContainerView"8
{CGSize=ff}24@0:4@8{CGSize=ff}12@20
{CGSize=ff}24@0:4@"NUIContainerView"8{CGSize=ff}12@"UIView"20
{CGRect={CGPoint=ff}{CGSize=ff}}32@0:4@8@12{CGRect={CGPoint=ff}{CGSize=ff}}16
{CGRect={CGPoint=ff}{CGSize=ff}}32@0:4@"NUIContainerView"8@"UIView"12{CGRect={CGPoint=ff}{CGSize=ff}}16
v24@0:4@8{CGSize=ff}12i20
v24@0:4@"NUIContainerView"8{CGSize=ff}12i20
@20@0:4@8@12I16
@20@0:4@"NUIWidgetGridView"8@"<NUIWidgetGridViewItem>"12I16
{?=ff}8@0:4
@16@0:4@8@12
{?=ff}12@0:4B8
{?="leading"f"trailing"f}
@"NUIWidgetGridView"
v24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
@24@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8
{?="determiningPreferredMaxLayoutWidth"b1"inSecondConstraintsPass"b1}
@"UIView"
{?=ff}12@0:4I8
@"NUIContainerStackView"
@"NSArray"
[6{CGSize="width"f"height"f}]
@"<NUIWidgetGridViewDataSource>"
@"<NUIWidgetGridViewDelegate>"
v12@0:4#8
{vector<float, std::__1::allocator<float> >="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::__1::allocator<float> >="__first_"^f}}
{?="delegateMinSpacing"b1"delegateAlignment"b1}
v16@0:4@8I12
I12@0:4@8
{CGSize=ff}8@0:4
{CGSize=ff}24@0:4{CGSize=ff}8f16f20
v24@0:4@8@12@16^v20
@"<NUIContainerViewDelegate>"
{nui_size_cache="__tree_"{__tree<std::__1::__value_type<int, CGSize>, std::__1::__map_value_compare<int, std::__1::__value_type<int, CGSize>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, CGSize> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, CGSize>, void *> > >="__first_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, CGSize>, std::__1::less<int>, true> >="__first_"L}}}
{unordered_map<const UIView *, nui_size_cache, std::__1::hash<const UIView *>, std::__1::equal_to<const UIView *>, std::__1::allocator<std::__1::pair<const UIView *const, nui_size_cache> > >="__table_"{__hash_table<std::__1::__hash_value_type<const UIView *, nui_size_cache>, std::__1::__unordered_map_hasher<const UIView *, std::__1::__hash_value_type<const UIView *, nui_size_cache>, std::__1::hash<const UIView *>, true>, std::__1::__unordered_map_equal<const UIView *, std::__1::__hash_value_type<const UIView *, nui_size_cache>, std::__1::equal_to<const UIView *>, true>, std::__1::allocator<std::__1::__hash_value_type<const UIView *, nui_size_cache> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> *> *> > >="__first_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> *> *> >="__first_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const UIView *, nui_size_cache>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const UIView *, std::__1::__hash_value_type<const UIView *, nui_size_cache>, std::__1::hash<const UIView *>, true> >="__first_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<const UIView *, std::__1::__hash_value_type<const UIView *, nui_size_cache>, std::__1::equal_to<const UIView *>, true> >="__first_"f}}}
{?="hiddenArrangedSubviewCount"b8"inLayoutPass"b1"determiningPreferredMaxLayoutWidth"b1"inSecondConstraintsPass"b1"delegateDidInvalidateIntrinsicContentSize"b1"delegateSystemLayoutSizeFittingSizeForArrangedSubview"b1"delegateLayoutFrameForArrangedSubview"b1"delegateWillMeasureFitting"b1"delegateDidLayout"b1}
v4@?0
customAlignmentRectInsets
T{UIEdgeInsets=ffff},N
baselineRelativeAlignmentRectInsets
TB,N,GisBaselineRelativeAlignmentRectInsets
allowsBaselineOffsetApproximation
TB,N
customBaselineOffsetFromBottom
Tf,N
customFirstBaselineOffsetFromContentTop
contareInfoKey
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
measureCells
/BuildRoot/Library/Caches/com.apple.xbs/Sources/AppSupportUI_Sim/AppSupportUI-11/AppSupportUI/NUIGridArrangement.mm
columns.size() == count.width
rows.size() == count.height
v16@?0@"NSMutableArray"4I8^B12
v24@?0@"<_NUIGridArrangementItem>"4{CGRect={CGPoint=ff}{CGSize=ff}}8
%@ size = {%ld, %ld} cells = 
[%@:%@]
(%@|%@)
v8@?0r^{_NUIGridArrangementCell=ii{?=ff}@{_NSRange=II}{_NSRange=II}{CGSize=ff}{CGSize=ff}}4
v16@?0@"UIView"4I8^B12
delegate
T@"<NUIContainerGridViewDelegate>",W,D,N
numberOfRows
Ti,R,N
numberOfColumns
horizontalAlignment
Ti,N,V_horizontalAlignment
verticalAlignment
Ti,N,V_verticalAlignment
horizontalDistribution
Ti,N
verticalDistribution
rowSpacing
columnSpacing
rowHeight
Tf,N,V_rowHeight
columnWidth
Tf,N,V_columnWidth
%lu-%lu
Fill
Top/Lead
Center
Bottom/Trail
Unknown(%ld)
%@ alignments = 
[%@|%@]
T@"<NUIContainerBoxViewDelegate>",W,D,N
_defaultAttributes
NUIWidgetGridView - Layout item %d entitled:%@ borrowable:%@ fitting:%@ final:%@
index
TI,R,N
gridView
T@"NUIWidgetGridView",R,W,N,V_gridView
imageView
T@"UIImageView",R,N
titleLabel
T@"UILabel",R,N
subtitleLabel
{ %f, %f }
contentView
T@"UIView",&,N,V_contentView
currentLabelOutset
Tf,R,N,V_currentLabelOutset
dataSource
T@"<NUIWidgetGridViewDataSource>",W,N,V_dataSource
T@"<NUIWidgetGridViewDelegate>",W,N,V_delegate
imageStyle
Ti,N,V_imageStyle
titleStyle
Ti,N,V_titleStyle
subtitleStyle
Ti,N,V_subtitleStyle
centerAdjustmentAllowed
Tf,N,V_centerAdjustmentAllowed
%@ axis = %@: distribution = %@; alignments = 
Horz
Vert
[%@]
T@"<NUIContainerStackViewDelegate>",W,D,N
axis
Ti,N,V_axis
distribution
Ti,N,V_distribution
alignment
Ti,N,V_alignment
spacing
Tf,N,V_spacing
spacingViewClass
T#,&,N,V_spacingViewClass
FillEqual
FillProp
EqualSpacing
EqualCentering
NUICONTAINER_BOUNDING_BOXES
B12@?0@"UIView"4@"NSDictionary"8
hidden
 %@>
arrangedSubviews
T@"NSArray",C,N
visibleArrangedSubviews
T@"NSArray",R,N
T@"<NUIContainerViewDelegate>",W,N
baselineRelativeArrangement
TB,N,GisBaselineRelativeArrangement,V_baselineRelativeArrangement
layoutMarginsRelativeArrangement
TB,N,GisLayoutMarginsRelativeArrangement,V_layoutMarginsRelativeArrangement
-[%@ %@] not implemented.
arrangedSubviews = %lu[%lu];
 layoutMarginsRelative = {%f, %f, %f, %f};
 baselineRelative = YES;
%@ called while in a layout or measurement pass.
WARNING: %@
ERROR: %@
zPLR
zPLR
zPLR
zPLR
