init
retain
alloc
defaultCenter
_clientCanBeNowPlayingAppNotification:
addObserver:selector:name:object:
initWithNowPlayingDataSource:
release
removeObserver:
dealloc
sendRemoteControlCommand:completion:
origin
_sendLocalCommand:withCompletionHandler:
_sendExternalCommand:withCompletionHandler:
broadcastRemoteControlCommand:completion:
remoteControlClients
bundleIdentifier
initWithPID:bundleIdentifier:responseData:
autorelease
arrayWithObjects:count:
server
clientWithRegisteredCustomOrigin:
count
sendRemoteControlCommand:toClients:completion:
clientForBundleIdentifier:
initWithCapacity:
countByEnumeratingWithState:objects:count:
lock
addObject:
unlock
_sendRemoteControlCommand:toDestinationClient:withCompletion:
currentSettings
broadcastCommandWaitDuration
_shouldIgnoreCommand:completion:
originatingAppDisplayID
isEqualToString:
enumerateKeysAndObjectsUsingBlock:
removeObjectsForKeys:
allClients
canBeNowPlayingApplication
_handleSendCommandMessage:fromClient:
_handleGetSupportedCommandsMessage:fromClient:
_handleSetSupportedCommandsMessage:fromClient:
_handleBroadcastCommandMessage:fromClient:
copyActiveOrigin
_clientForSupportedCommandsMessage:
supportedRemoteControlCommands
dataWithPropertyList:format:options:error:
initWithBytes:length:
propertyListWithData:options:format:error:
class
isKindOfClass:
copy
setSupportedRemoteControlCommands:
_notifySupportedCommandsDidChangeForOrigin:
object
_sendQueuedCommandsForDestinationClient:
commandType
mutableCopy
resolveContextualCommandForCurrentNowPlaying:
setCommandType:
appOptions
routeUID
length
pickRouteWithUID:
_resolvedLocalDeviceDestinationAppDisplayIdentifierForCommand:
_destinationClientForRemoteControlCommand:
localNowPlayingAppDisplayID
shouldImplicitlyLaunchApplication
_enqueueCommand:forApplication:withCompletion:
processName
sendRemoteControlCommand:withCompletionBlock:
_remoteControlContextForCommand:
initWithCommand:routedApp:
addRoutedCommand:
_setCompletionHandler:
_enqueueCommand:forUnavailableApplicationWithDisplayID:
_applicationIsRunning:
initWithType:bundleID:
isValid
invalidate
_clearQueuedCommandsForApplicationWithDisplayID:
destinationAppDisplayID
setDestinationAppDisplayID:
objectForKey:
setObject:forKey:
removeObjectForKey:
_sendQueuedCommands:toClient:retry:
indexOfObject:
subarrayWithRange:
_sendQueuedPlayCommand:remainingCommands:client:
_completionHandler
mainQueue
localNowPlayingClient
nowPlayingClientIsPlaying
addObserverForName:object:queue:usingBlock:
isContextSensitive
_contextuallyAwareDestinationAppDisplayIDForCommand:
destinationAppProcessID
clientForPID:
isNavigational
frontmostClient
contextID
systemMediaClient
senderAppDisplayID
initWithContextID:originatingAppDisplayID:
routedCommands
reverseObjectEnumerator
routedAppDisplayID
initWithUTF8String:
hasRegisteredCustomOrigin:
dictionaryWithObjects:forKeys:count:
postClientNotificationNamed:userInfo:
isAVRCPCommand
shouldSendCommandsDuringPhoneCall
shouldSendCommand:
numberOfActivePhoneCalls:
handleXPCMessage:fromClient:
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retainCount
zone
hash
superclass
description
debugDescription
sendRemoteControlCommand:
broadcastRemoteControlCommand:
clearContextsForClient:
isProcessingPlayCommand
nowPlayingDataSource
_serialQueue
_commandQueuesForDisplayIDs
_remoteControlContexts
_queuedCommandsTimeoutTimer
_playCommandsBeingProcessed
_callObserver
_nowPlayingDataSource
dataWithBytes:length:
copyAvailableOriginMatchingUniqueIdentifier:
initWithCommandType:origin:senderAppDisplayID:optionsData:
stringWithUTF8String:
setAppOptions:
setDestinationAppProcessID:
arrayWithCapacity:
unsignedIntValue
componentsJoinedByString:
stringWithFormat:
allocWithZone:
initWithRoutingDataSource:
setVolume:error:
adjustVolumeWithStepAmount:error:
routingDataSource
currentVolume
volumeWarningEnabled
volumeLimit
warningState
setWarningState:
_volumeWarningEnabled
_routingDataSource
_currentVolume
_volumeLimit
_warningState
standardUserDefaults
dictionaryForKey:
lowercaseString
numberWithUnsignedInt:
synchronize
supportedAPIsForApplication:
setSupportedAPIs:forApplication:
applicationsSupportingAPIs:
_persistenceDictionary
removeAllObjects
clearRoutedCommands
_routedCommands
_contextID
_originatingAppDisplayID
pickableRoutesForCategory:
pickableRoutesForCategory:source:
pickedRouteForCategory:
pickedRouteForCategory:source:
setPickedRoute:withPassword:
setPickedRoute:withPassword:forSource:
setPickedSystemRoute:withPassword:forSource:
resetPickedRouteForSource:
resetPickedSystemRouteForSource:
userCancelledPickingRoute:
unpickAirPlayRoutes
delegate
setDelegate:
discoveryMode
setDiscoveryMode:
pickedRoute
externalScreenType
currentRouteSupportsVolumeControl
_currentRouteSupportsVolumeControl
_delegate
_discoveryMode
_pickedRoute
_externalScreenType
raise:format:
_dispatchKeypressEventWithUsagePage:usage:
dataUsingEncoding:
bytes
dispatchHIDEvent:
dispatchHomeButton
dispatchKeypressEvent:
dispatchUnicodeEventWithText:
_hidSystemClient
initWithBundleID:processID:
bundleID
processID
_bundleID
_processID
initWithBundleIDs:states:
weakRefWithObject:
_frontmostApplicationDidChange:
setHandler:
_mostRecentlyUpdatedClient
nowPlayingApplicationPID
nowPlayingInfoServer
activeNowPlayingInfoClient
nowPlayingInfo
floatValue
nowPlayingApplicationIsPlaying
nowPlayingDataSourceNowPlayingApplicationDidChange:
allLocalNowPlayingInfoClients
compare:
nowPlayingApplicationDisplayID
nowPlayingApplicationIsInterrupted
anyApplicationIsPlaying
_appStateMonitor
_nowPlayingApplicationIsPlaying
_nowPlayingApplicationIsInterrupted
_anyApplicationIsPlaying
_nowPlayingApplicationDisplayID
_nowPlayingApplicationPID
_handleBeginLoadingBrowsableContentMessage:fromClient:
_handleRequestPlaybackInitializationMessage:fromClient:
_handleRequestPlaybackQueueInitializationMessage:fromClient:
_handleGetSupportedBrowsableContentAPIsMessage:fromClient:
_handleSetSupportedBrowsableContentAPIsMessage:fromClient:
_handleGetAppsSupportingBrowsableContentAPIsMessage:fromClient:
_relayMessage:toClientWithBundleIDAndReply:
_handleBrowsableContentDidFinishLoadingFromClient:indexPath:withError:
relayXPCMessage:andReply:resultCallback:
_clearQueuedBeginLoadingMessagesForApp:
_enqueueCompletion:forUnavailableDestinationApp:
_sendQueuedBeginLoadingMessagesForAvailableApp:
_sendInitiatePlaybackMessage:
initForWritingWithMutableData:
encodeWithCoder:
finishEncoding
_handleSupportedAPIsDidChangeForClient:
_messageRequiresMediaServerBlessing:
initWithType:pid:
relayXPCMessage:andReply:
_messageCanLaunchApp:
_takeProcessAssertionForClient:
indexPathData
UTF8String
connection
_scheduleEndProcessAssertionForClient:
localizedDescription
domain
code
numberWithInteger:
removeObject:
setCurrentTaskAssertion:
currentTaskAssertion
dateWithTimeIntervalSinceNow:
invalidateOnDate:
apiCoordinator
_queuedInitiatePlaybackMessages
_queuedRelayableMessages
_queuedBeginLoadingBlocks
_apiCoordinator
initWithBundleID:indexPathData:
initWithInputStream:outputStream:runLoop:
initWithQueue:
unregisterAllVirtualVoiceInputDevices
numberWithUnsignedLongLong:
uniqueIdentifier
longLongValue
voiceRecordingState
setVoiceRecordingState:
initWithRecordingState:
sendMessage:
shortValue
televisionServerClient:gameController:propertiesChanged:
gameController:propertiesDidChange:
virtualTouchDevices
registeredVirtualVoiceInputDevices
addGameController:
gameControllerWithID:
removeGameController:
addVirtualTouchDevice:
virtualTouchDeviceWithID:
removeAllVirtualTouchDevices
addRegisteredVirtualVoiceInputDevice:
virtualTouchIDWithPackedID:
setDeviceInfo:
addLyricsEvent:
removeLyricsEvent:
flushLyricsEvents:
credentials
setCredentials:
deviceInfo
supportedMessages
setSupportedMessages:
playbackQueueClient
sessionPeer
pinPairingToken
setPinPairingToken:
serverDelegate
setServerDelegate:
_virtualTouchDevices
_registeredVirtualVoiceInputDevices
_packedDeviceIDToDeviceIDMapping
_deviceIDCounter
_gameControllers
_gameControllerDeviceIDCounter
_lyircEvents
_credentials
_deviceInfo
_supportedMessages
_playbackQueueClient
_sessionPeer
_pinPairingToken
_serverDelegate
_openDatabase
_validateDatabase
clearExpiredTokenRecords
initWithPath:
_loadTokenRecords
deviceID
token
dateCreated
timeIntervalSince1970
expirationDate
date
defaultManager
stringByDeletingLastPathComponent
fileExistsAtPath:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
fileSystemRepresentation
_initializeDatabaseSchema
setToken:
dateWithTimeIntervalSince1970:
setDateCreated:
setExpirationDate:
setDeviceID:
tokenRecords
saveTokenRecord:
path
_dbHandle
_tokenRecords
_path
_initializeBonjourServiceWithDeviceInfo:withDelay:
_handleDeviceInfoChangedNotifcation:
publishWithOptions:
stop
connectionBrowser:didAcceptConnectionWithInputStream:outputStream:
userInfo
_netServiceTXTRecordDataWithDeviceInfo:
setTXTRecordData:
dataFromTXTRecordDictionary:
initWithDomain:type:name:
usePeerToPeerTelevisionConnections
setIncludesPeerToPeer:
start
netServiceWillPublish:
netServiceDidPublish:
netService:didNotPublish:
netServiceWillResolve:
netServiceDidResolveAddress:
netService:didNotResolve:
netServiceDidStop:
netService:didUpdateTXTRecordData:
netService:didAcceptConnectionWithInputStream:outputStream:
_networkService
_started
initWithDeviceID:
initWithOwningClient:
owningClient
_owningClient
initWithRoute:
_extendedInfo
extendedInfoWithRoute:
requiresPIN
modelName
deviceIdentifier
route
canBeDefaultRoute
canBeSystemDefaultRoute
isInputRoute
isOutputRoute
_canBeDefaultRoute
_canBeSystemDefaultRoute
_inputRoute
_outputRoute
_route
currentRunLoop
maxTransactionMemorySize
transactionWaitDurationOnXpcSend
_handleContentItemChanged:fromClient:
name
handleContentItemTransaction:packets:completion:
initWithName:fromMessage:withDelegate:
_addTransaction:
allKeys
getSubscribedContentItemsIdentifiers:forRequest:
identifier
send:toConnection:completion:
transaction:didReceivePackets:receivedSize:requestedSize:completion:
transactionDidEnd:
transactionRequestingMemorySize:
transactions
_transactions
_queue
_usedMemory
_allowedMemory
_transactionWaitDuration
closeAll
numberWithInt:
closeForClient:userCancelled:
pinPairingDialogDidClose:forClient:userCancelled:
showWithPin:forClient:
closeForClient:
_clients
_titleKey
_pinKey
_messageKey
_timeoutKey
valueWithBytes:objCType:
objCType
getValue:
MRHIDTouchEventValue
valueWithMRHIDTouchEvent:
stringByAppendingPathComponent:
currentProtocolVersion
sharedConnection
effectiveBoolValueForSetting:
useTelevisionSystemPairing
mainBundle
infoDictionary
objectForKeyedSubscript:
unarchiveObjectWithFile:
UUID
UUIDString
archiveRootObject:toFile:
createFileAtPath:contents:attributes:
fileURLWithPath:
numberWithBool:
setResourceValue:forKey:error:
_deviceInfoDidChange
addObserver:
observer:didObserveNewDeviceInfo:
profileConnectionDidReceiveRestrictionChangedNotification:userInfo:
profileConnectionDidReceivePasscodeChangedNotification:userInfo:
profileConnectionDidReceivePasscodePolicyChangedNotification:userInfo:
profileConnectionDidReceiveProfileListChangedNotification:userInfo:
profileConnectionDidReceiveEffectiveSettingsChangedNotification:userInfo:
profileConnectionDidReceiveDefaultsChangedNotification:userInfo:
profileConnectionDidReceiveAppWhitelistChangedNotification:userInfo:
_gestaltNotificationToken
isEqualToDictionary:
extendedInfo
boolValue
matchesUID:
initWithDictionary:
type
isPicked
canBeDefaultSystemRoute
dictionary
matchesUniqueIdentifier:
_routeDescription
televisionNowPlayingInfoCoalesceDuration
televisionNowPlayingInfoArtworkCoalesceDuration
stopReceivingUpdatesForSource:
setArtwork:
setArtworkDigest:
_setReceiveUpdates:forSource:
state
setSupportedCommands:
setDisplayName:
setDisplayID:
setPlaybackState:
setIsPlaying:
setNowPlayingInfo:
_updateArtworkWithNowPlayingInfo:
artwork
nowPlayingState:
_scheduleNowPlayingUpdate
clear
_handleSupportedCommandsDidChange:
_handleNowPlayingDisplayNameChange:
_handleNowPlayingPlaybackStateChanged:
stateObserver:didReceiveNotification:
_onQueue_setReceiveNowPlayingUpdates:
_onQueue_setReceiveArtworkUpdates:
_onQueue_setReceiveVolumeControlUpdates:
_addNowPlayingNotification:selector:
_handleNowPlayingDisplayIDChange:
_handleNowPlayingInfoChanged:
_handleNotification:
_removeNowPlayingNotifications
containsObject:
removeObserver:name:object:
_digest:
isEqualToData:
initWithName:object:userInfo:
_scheduleArtworkUpdate
_pushNowPlayingStateUpdate
_pushArtworkUpdate
stateObserver:didReceiveStateChange:
stateObserver:didReceiveArtworkChange:
beginReceivingUpdatesForSource:
nowPlayingArtwork:
artworkDigest
setState:
_coalescingNowPlayingUpdates
_coalescingArtworkUpdates
_nowPlayingInfoCoalesceDuration
_nowPlayingInfoArtworkCoalesceDuration
_observedNowPlayingNotifications
_registeredForNowPlayingCount
_registeredForNowPlayingArtworkCount
_registeredForVolumeAvailabilityCount
_artwork
_artworkDigest
_state
_registerAVSystemControllerNotifications
_unregisterAVSystemControllerNotifications
_mediaServerController
setAttribute:forKey:error:
attributeForKey:
currentRouteHasVolumeControl
uppercaseString
valueForKeyPath:
setPickedRouteWithPassword:withPassword:
didCancelRoutePicking:
_notifyDelegateRoutesDidChange
routingDataSourcePickedRouteVolumeControlAvailabilityDidChange:
routingDataSourceExternalScreenDidChange:
intValue
routingDataSource:statusDidChange:forRoute:
sharedAVSystemController
_currentRouteHasVolumeControlDidChangeNotification:
_externalScreenDidChangeNotification:
_pickableRoutesDidChangeNotification:
_portStatusDidChangeNotification:
_avSystemControllerServerDiedNotification:
routingDataSourcePickableRoutesDidChange:
_descriptionForDiscoveryMode:
_copyWithZone:usingConcreteClass:
mutableCopyWithZone:
copyWithZone:
serializedNowPlayingInfo
originatingClient
mergePolicy
_nowPlayingInfo
_serializedNowPlayingInfo
_origin
_originatingClient
_mergePolicy
setSerializedNowPlayingInfo:
setOrigin:
setOriginatingClient:
setMergePolicy:
mainRunLoop
transactionWaitDurationOnNetworkSend
_registerCallbacks
cryptoSession
_handleClientConnection:
supportedProtocolMessages
_verifyClientVersionCompatibility:withError:
encryptionType
_handleDeviceInfoRequest:fromClient:
_handleCryptoPairingMessage:fromClient:
_handleReceivedCommand:fromClient:
_handleRegisterHIDDeviceMessage:fromClient:
buttonEvent
_handleReceivedButtonEvent:fromClient:
event
virtualDeviceID
_handleTouchEvent:withDeviceID:fromClient:
_handleClientUpdatesConfigMessage:fromClient:
controllerID
sendGameControllerEvent:
_handleRegisterGameControllerMessage:client:
_handleGetKeyboardSessionMessage:fromClient:
_handleTextInputMessage:fromClient:
_handleRegisterVoiceInputDeviceMessage:fromClient:
_handleReceivedVoiceInputMessage:fromClient:
_handleGetPlaybackQueueMessage:fromClient:
initWithConnectionState:
clientConnection:didReceiveMessage:
_handleDeviceInfoUpdateMessage:fromClient:
_handleSetConnectionStateMessage:fromClient:
_handleSetHiliteModeMessage:fromClient:
_wakeTelevision:dismissScreenSaver:
_handleGenericMessage:fromClient:
_handleLyricsEventMessage:fromClient:
initWithUnderlyingCodableMessage:identifier:error:
_disconnectClient:
initWithNowPlayingState:
_sendStateUpdateMessageFromSource:usingCreateBlock:
initWithArtworkData:
initWithNotification:
initWithAvailableFlag:
_clientForPairingSession:
initWithPairingData:status:
_notifyAndDisconnectClient:withError:
initWithGameControllerProperties:controllerID:
_setGameControllerInputMode:
_handleGetInputModeMessage:fromClient:
_handleSetInputModeMessage:fromClient:
_handleDeletePairingIdentityMessage:fromClient:
_handleGetPairedDevicesMessage:fromClient:
_handleDeletePairedDeviceMessage:fromClient:
_handleSetMessageLogging:fromClient:
_handleTelevisionEndpointAvailableMessage:fromClient:
_handleSendTelevisionCustomDataMessage:fromClient:
clients
_notifyAndDisconnectClients:withError:completion:
televisionSleepAssertionOnClientConnectDuration
initWithName:timeout:
registeredToNowPlayingUpdates
registeredToNowPlayingArtworkUpdates
registeredVolumeControlAvailabilityUpdates
_findClientIf:
minimumSupportedProtocolVersion
integerValue
minimumSupportedHangdogApplicationVersion
_shouldSendStateUpdateMessageFromSource:toClient:
registeredKeyboardUpdates
encryptedMessageWithState:text:attributes:usingCryptoSession:
initWithInputMode:
initWithRole:device:
open
removePeer
_clientForIdentifier:
setError:
sendMessage:queue:reply:
televisionDisconnectWaitDuration
televisionDisconnectSleepDuration
deleteIdentityWithError:
pairedDevices
stringWithCString:encoding:
_unpair:
sharedLogger
setShouldLog:
initWithKey:data:
initWithDeviceInfo:
setIdentifier:
isRetrying
isUsingSystemPairing
openInState:
isPaired
close
setCryptoSession:
status
pairingData
handlePairingExchangeData:completion:
handlePairingFailureWithStatus:
initWithProtocolMessage:
televisionServer:didReceiveCommand:completion:
initWithSendError:results:
deviceDescriptor
initWithDeviceDescriptor:
initWithErrorCode:deviceIdentifier:
firstObject
handleTouchEvent:
properties
initWithProperties:
initWithControllerID:
nowPlayingUpdates
artworkUpdates
setRegisteredToNowPlayingUpdates:
setRegisteredToNowPlayingArtworkUpdates:
volumeUpdates
setRegisteredVolumeControlAvailabilityUpdates:
keyboardUpdates
setRegisteredKeyboardUpdates:
descriptor
initWithDeviceID:errorCode:
buffer
time
gain
request
addRequest:
addPlaybackQueue:forRequest:
setPlaybackQueue:
initWithDevice:
updatePeer
initWithHiliteMode:
data
endpoints
gameControllerConnectionDidInterrupt:
sharedManager
localClient
initWithName:packets:
messageSentCallbacks
callbackWithBlock:queue:
addCallback:
messagePurgedCallbacks
setTransactionCallback:forName:
pairingManager
setDispatchQueue:
info
setPairedPeerRemovedHandler:
startMonitoringWithOptions:
stream:handleEvent:
pairingSession:didPrepareExchangeData:
pairingSession:showSetupCode:
pairingSessionHideSetupCode:
pairingSession:promptForSetupCodeWithDelay:completion:
pairingSession:didCompleteExchangeWithError:
stateObserver:didReceiveVolumeControlReadyChange:
textEditingService:textEditingDidBegin:withAttributes:
textEditingService:textDidChange:
textEditingService:attributesDidChange:
textEditingServiceTextEditingDidEnd:
clientDidDisconnect:
pinPairingDialogDidOpen:forClient:
sleepObserverSystemWillSleep:completion:
sleepObserverSystemDidWake:
clearEndpointForClient:
_broadcastKeyboardMessageWithState:text:attributes:
_handleHiliteModeChanged:
_connectionBrowser
_streamsRunloop
_connectedClients
_televisionEndpoints
_serverIsRunning
_gameControllerInputMode
_hiliteMode
_hidEventManager
_stateObserver
_pinPairingDialog
_sleepObserver
_pairingManager
localNowPlayingPID
existingLocalNowPlayingInfoClientForPID:
existingCustomOriginNowPlayingInfoClientForOrigin:
nowPlayingArtwork
predicateWithBlock:
allValues
filteredArrayUsingPredicate:
initWithArray:
existingNowPlayingInfoClientForOrigin:pid:
localNowPlayingInfoClientForPID:
customOriginNowPlayingInfoClientForOrigin:
removeLocalNowPlayingInfoClientForPID:
removeCustomOriginNowPlayingInfoClientForOrigin:
initWithKeyOptions:valueOptions:capacity:
initWithPID:
_notifyNewNowPlayingClientRegistered
addEntriesFromDictionary:
hasArtworkData
nowPlayingInfoClientForOrigin:pid:
setNowPlayingArtwork:
existingNowPlayingInfoClientForOrigin:displayID:
removeNowPlayingInfoClientForOrigin:pid:
handleNowPlayingInfoUpdate:
_nowPlayingInfoClientsForCustomOrigins
_nowPlayingInfoClientsForPIDs
parentApplicationDisplayID
setParentApplicationDisplayID:
playbackState
nowPlayingVisibility
setNowPlayingVisibility:
tintColor
setTintColor:
_parentApplicationDisplayID
_nowPlayingArtwork
_playbackState
_nowPlayingVisibility
_tintColor
isSystemApp
_isSystemApp
_systemAppFlagInitialized
_pid
nowPlayingAppDisplayID
setNowPlayingAppDisplayID:
nowPlayingAppDisplayName
setNowPlayingAppDisplayName:
setCurrentRouteHasVolumeControl:
_currentRouteHasVolumeControl
_nowPlayingAppDisplayID
_nowPlayingAppDisplayName
_init
_postActiveOriginDidChange
_postAvailableOriginsDidChange
makeObjectsPerformSelector:
_clientDidOpenConnection:
keepAlive
canBeNowPlayingTimestamp
sortedArrayUsingComparator:
lastObject
_createRestoredActiveOrigin
copyCustomOriginMatchingUniqueIdentifier:
_setActiveOrigin:whileRestoringFromSavedState:
_savePersistentActiveOrigin:
_postNowPlayingAppIsPlayingDidChange
_postNowPlayingApplicationDidChange
setObject:forKeyedSubscript:
originIsActiveOrigin:
setActiveOrigin:
availableOrigins
postNotificationName:object:userInfo:
_createNotificationMessage:userInfo:
array
customOrigins
addObjectsFromArray:
primaryApplicationDisplayID
_localNowPlayingPlaybackStateForOrigin:
nowPlayingClientIsPlayingWithOrigin:
localNowPlayingApplicationIsPlaying
_endApplicationActivity:
removeObserver:forKeyPath:
addObserver:forKeyPath:options:context:
_beginApplicationActivity:withCompletion:
_postAppActivityNotificationNamed:withActivity:
runAssertionWithName:
initWithConnection:bundleIdentifier:
setMessageHandler:
addClient:
_handleServerXPCMessage:fromClient:
_handleSetCanBeNowPlayingAppMessage:fromClient:
_handleSetNowPlayingAppOverrideMessage:fromClient:
_handleSetOverriddenNowPlayingAppMessage:fromClient:
_handleSetNowPlayingInfoMessage:fromClient:
_handleGetNowPlayingInfoMessage:fromClient:
_handleGetNowPlayingArtworkMessage:fromClient:
_handleGetNowPlayingAppDisplayIDMessage:fromClient:
_handleSetNowPlayingAppDisplayIDMessage:fromClient:
_handleGetNowPlayingAppPIDMessage:fromClient:
_handleGetNowPlayingAppDisplayNameMessage:fromClient:
_handleSetNowPlayingAppDisplayNameMessage:fromClient:
_handleGetNowPlayingAppIsPlayingMessage:fromClient:
_handleGetPlaybackStateMessage:fromClient:
_handleSetNowPlayingAppPlaybackStateMessage:fromClient:
_handleGetNowPlayingClientsMessage:fromClient:
_handleGetAnyAppIsPlayingMessage:fromClient:
_handleSelectSourceMessage:fromClient:
_handleGetAvailableOriginsMessage:fromClient:
_handleSetActiveOriginMessage:fromClient:
_handleGetActiveOriginMessage:fromClient:
_handleRegisterCustomOriginMessage:fromClient:
_handleRemoveCustomOriginMessage:fromClient:
_handleKeepAliveMessage:fromClient:
_handlePostNotificationMessage:fromClient:
_handleBeginApplicationActivityMessage:fromClient:
_handleGetCurrentApplicationActivityMessage:fromClient:
_handleEndApplicationActivityMessage:fromClient:
_handleRequestNowPlayingPlaybackQueue:fromClient:
_handleGetSystemVolumeMessage:fromClient:
_handleSetSystemVolumeMessage:fromClient:
_handleAdjustSystemVolumeByStepMessage:fromClient:
_handleRequestVideoThumbnailsMessage:fromClient:
_handleRequestAudioAmplitudeSamplesMessage:fromClient:
_handleSetParentApplicationMessage:fromClient:
_handleSetNowPlayingClientVisibilityMessage:fromClient:
_handleSetNowPlayingClientTintColorMessage:fromClient:
_handleGetCurrentDeviceInfo:fromClient:
_handleSendLyricsEvent:fromClient:
_handleResetPlaybackQueueRequests:fromClient:
setCanBeNowPlayingApplication:
overrideClient
setOverrideClient:
dataWithBytesNoCopy:length:freeWhenDone:
createNowPlayingArtworkFromXPCDictionary:
_processNowPlayingInfoUpdate:
_copyActiveOrRegisteredOriginForUID:
bindToXPCDictionary:
_postClientNotificationNamed:withOrigin:userInfo:
_localPlaybackStateForClientWithPID:forOrigin:
registerCustomOrigin:
addRegisteredCustomOrigin:
removeCustomOrigin:
removeRegisteredCustomOrigin:
setKeepAlive:
_internalMediaRemoteNotificationIsLegal:
_interalMediaRemoteNotificationIsLegalInternal:
_handleInternalNotification:message:fromClient:
setCurrentApplicationActivity:withCompletion:
currentApplicationActivity
_destinationClientFromXPCMessage:
context
removeRequest:
setContext:
_postNowPlayingPlaybackQueueChangedNotificationForOrigin:withContext:
readData:
creatorProcessID
registeredCustomOrigins
clearRegisteredDevicesForClient:
clearRecordingEndpointsForClient:
removeClientForPID:
applicationStateForApplication:
_postNowPlayingAppIsPlayingDidChangeWithOrigin:
_postAnyAppIsPlayingDidChangeNotification
_postNowPlayingInfoDidChangeNotification
_postNowPlayingInfoDidChangeNotificationForOrigin:
initWithCoder:
initWithObjects:
_handleInvalidateNowPlayingPlaybackQueue:fromClient:
setStatus:
_prepareRemoteControlInterfacesForStartedActivity:
shouldPrepareAppPlaybackQueue
_prepareRemoteControlInterfacesForStartingActivity:
_teardownRemoteControlInterfacesForEndedActivity:
mediaRemoteClientInvalidated:
nowPlayingDataSourceNowPlayingApplicationPlaybackStateDidChange:
nowPlayingDataSourceAnyApplicationPlaybackStateDidChange:
virtualAudioInputServer:didUpdateRecordingState:forDevice:
phoneCallController:didRequestCommand:
mostRecentCanBeNowPlayingClient
localNowPlayingPlaybackState
observeValueForKeyPath:ofObject:change:context:
addRunAssertionWithName:
removeRunAssertion:
_sendMediaRemoteCommand:withOrigin:
remoteControlServer
routingServer
_listenerConnection
_connectionQueue
_localNowPlayingDataSource
_localRoutingDataSource
_nowPlayingInfoServer
_volumeController
_remoteControlServer
_browsableContentServer
_televisionServer
_routingServer
_deviceInfoObserver
_virtualAudioInputServer
_transactionServer
_tasks
_overrideClient
_activeClients
_customOrigins
_applicationStateMonitors
_runAssertions
_activeOrigin
_currentAppActivity
_currentAppActivityLock
_nowPlayingApplicationDidChangeToken
_nowPlayingApplicationIsPlayingDidChangeToken
_anyApplicationIsPlayingDidChangeToken
_customOriginIsPlayingTokens
_shouldSendCommandsDuringPhoneCall
initWithBundleIdentifier:flags:reason:name:withHandler:
initWithPID:flags:reason:name:withHandler:
setInvalidationHandler:
_initWithType:bundleID:orPID:
_cancelInvalidationTimer
timeIntervalSinceNow
valid
setName:
_invalidationTimer
_acquired
_processAssertion
_type
_name
initWithFormat:
addIdentifiersFromContentItems:
addIdentifiers:
setWithArray:
intersectSet:
allObjects
addIdentifiersFromPlaybackQueue:
subscribedIdentifiers:
_identifiers
setDelegate:queue:
phoneCallDidChangeNotification:
_notifyDelegate:
phoneCallObserver:callDidChange:
calls
hasEnded
callObserver:callChanged:
_numberOfActiveCalls
_assertionID
_registerNotifications
_updateSystemRouteDiscoveryMode
_unregisterNotifications
_setPickedRoute:withPassword:options:
hasPrefix:
applicationPickedRoutes
_handleSetRouteDiscoveryModeMessage:fromClient:
_handleGetPickableRoutesMessage:fromClient:
_handleSetPickedRouteMessage:fromClient:
_handleGetPickedRouteHasVolumeControlMessage:fromClient:
_handleSetPickedRouteHasVolumeControlMessage:fromClient:
_handleGetExternalScreenTypeMessage:fromClient:
_handleGetSavedAVRoutePasswordMessage:fromClient:
_handleSetSavedAVRoutePasswordMessage:fromClient:
_handleUnpickAirPlayRoutesMessage:fromClient:
_handleSetApplicationPickedRoutes:fromClient:
setRouteDiscoveryMode:
routeDiscoveryMode
setPickedRoute:withPassword:options:
useDebugAVRouteWithoutVolumeControl
_setApplicationPickedRoutes:updateRoutes:forClient:
_postExternalScreenDidChange
numberWithUnsignedInteger:
_handleAuthenticationFailureForRoute:withOptions:
_handleErrorStatus:forRoute:withOptions:
_clientInvalidatedNotification:
setAlertHeader:
setAlertMessage:
setDefaultButtonTitle:
setShowAsTopmost:
setForceModalAlertAppearance:
setShowOnLockscreen:
setDismissOverlaysOnLockscreen:
initWithOptions:
presentWithCompletion:
_presentPasswordDialogForRoute:withOptions:
setAlternateButtonTitle:
initWithTitle:
setSecure:
setKeyboardType:
addTextField:
buttonIdentifier
textFieldValues
setActivePasswordDialog:
setApplicationPickedRoutes:
routeIsActiveWithUID:
clientsForApplicationPickedRoute:
clientsWithApplicationPickedRoutes
activePasswordDialog
_externalScreenTypeDidChangeToken
_routeHashesToIgnorePortStatusFailures
_mostRecentStatus
_activePasswordDialog
cachedAnyAppPlaybackState
isPlaying
originatedFromAccessory
initWithIsPlayingFlag:pickedRoute:
setCachedAnyAppPlaybackState:
_nowPlayingAppDidChangeNotification:
_nowPlayingAppIsPlayingDidChangeNotification:
_someAppIsPlayingDidChangeNotification:
_mediaServerDiedNotification:
_cachedNowPlayingAppDisplayID
_cachedNowPlayingAppPID
_cachedNowPlayingAppIsPlaying
_cachedAnyAppPlaybackState
_isPlaying
notifyDelegateOfSleepWithCompletion:
notifyDelegateOfWake
port
_connection
_identifier
_port
_handleGetDevicesMessage:fromClient:
_handleInputDeviceConnectedMessage:fromClient:
_handleInputDeviceDisconnectedMessage:fromClient:
_handleRecordingStateChangedMessage:fromClient:
_handleVoiceDataReceivedMessage:fromClient:
_handleRecordingEndpointAvailabilityMessage:fromClient:
setDescriptor:
recordingEndpointClients
registeredDeviceWithID:
setRecordingState:
registeredDevices
_recordingEndpointClients
_registeredDevices
_setupNotifications
_volumeFromAVController
_tearDownNotifications
_internalSetVolumeValue:
_systemVolumeDidChange:
_systemMuteDidChange:
_EUVolumeLimitDidChange:
_EUVolumeLimitEnforcedDidChange:
_updateVolumeValueCache
getVolumeForRoute:forCategory:mode:route:deviceIdentifier:andRouteSubtype:
setVolumeForRouteTo:forCategory:mode:route:deviceIdentifier:andRouteSubtype:
_volumeValue
_handleXPCMessage:
_invalidate
postNotificationName:object:
_preProcessCommand:
optionsData
_preProcessChangePlaybackRateCommand:
optionValueForKey:
sortedArrayUsingSelector:
enumerateObjectsUsingBlock:
enumerateObjectsWithOptions:usingBlock:
numberWithFloat:
setOptionValue:forKey:
isActive
_runAssertionName
messageHandler
routeDiscoveryCount
_source
_registeredCustomOrigins
_supportedRemoteControlCommands
_applicationPickedRoutes
_canBeNowPlayingApplication
_keepAlive
_messageHandler
_bundleIdentifier
_currentTaskAssertion
_canBeNowPlayingTimestamp
_routeDiscoveryCount
_routeDiscoveryMode
deviceProperties
_newIOKitDeviceProperties
screenSize
isIntegratedDisplay
handleHIDReport:
ioDevice
_deviceProperties
_activeTouchEventsForFingerIndices
_deviceDescriptor
_ioDevice
_uniqueIdentifier
initWithName:
errorWithDomain:code:userInfo:
systemApplicationBundleIdentifier
initWithString:
applicationProxyForIdentifier:
localizedName
pathWithComponents:
userData
unarchiveObjectWithData:
null
command
options
remoteControlInterfaceID
_optionsDictionary
setWithObjects:
_commandType
_optionsData
_senderAppDisplayID
_destinationAppDisplayID
_destinationAppProcessID
_appOptions
_parsedOptionsDict
setValue:forKey:
setOptionsData:
setSenderAppDisplayID:
_routedAppDisplayID
exceptionWithName:reason:userInfo:
sampleRate
_picked
_modelName
_dictionary
_indexPathData
_deviceID
_token
_dateCreated
_expirationDate
com.apple.mediaremote.MRDRemoteControlServer
v12@?0I4^{__CFData=}8
v16@?0I4^{__CFData=}8@"MRDMediaRemoteClient"12
v4@?0
v8@?0B4
v16@?0@"NSString"4@"MRDRemoteControlContext"8^B12
MRXPC_MESSAGE_ID_KEY
MRXPC_COMMAND_SEND_ERROR_KEY
MRXPC_COMMAND_STATUSES_DATA_KEY
v12@?0I4^{__CFArray=}8
MRXPC_COMMAND_INFO_ARRAY_DATA_KEY
v8@?0@"NSNotification"4
com.apple.Fuse
MRXPC_COMMAND_APP_PROCESSID_KEY
MRXPC_COMMAND_APP_DISPLAYID_KEY
v8@?0I4
v8@?0i4
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
nowPlayingDataSource
T@"MRDNowPlayingDataSource",R,N,V_nowPlayingDataSource
processingPlayCommand
TB,R,N,GisProcessingPlayCommand
remoteControlClients
T@"NSArray",R,N
MRXPC_COMMAND_KEY
MRXPC_COMMAND_OPTIONS_KEY
MRXPC_NOWPLAYING_ORIGIN_UID_KEY
MRXPC_COMMAND_APP_OPTIONS_KEY
{%s%@%s}
    
    
routingDataSource
T@"MRDAVRoutingDataSource",R,N,V_routingDataSource
currentVolume
Tf,R,N,V_currentVolume
volumeWarningEnabled
TB,R,N,V_volumeWarningEnabled
volumeLimit
Tf,R,N,V_volumeLimit
warningState
TI,N,V_warningState
MRDBrowsableContentAPIErrorDomain
v16@?0@"NSString"4@"NSNumber"8^B12
MRDBrowsableContentAPICoordinatorPersistence
contextID
T@"NSString",R,N,V_contextID
originatingAppDisplayID
T@"NSString",R,N,V_originatingAppDisplayID
routedCommands
MRDAVRoutingCategorySystem
MRDAVRoutingCategoryMedia
delegate
T@"<MRDAVRoutingDelegate>",N,V_delegate
discoveryMode
TI,N,V_discoveryMode
pickedRoute
T@"MRDAVRoute",R,N,V_pickedRoute
externalScreenType
TI,R,N,V_externalScreenType
currentRouteSupportsVolumeControl
TB,R,N,V_currentRouteSupportsVolumeControl
subclass must implement
bundleID
T@"NSString",R,N,V_bundleID
processID
Ti,R,N,V_processID
v8@?0@"NSDictionary"4
T@"<MRDNowPlayingDataSourceDelegate>",N,V_delegate
nowPlayingApplicationDisplayID
T@"NSString",R,N,V_nowPlayingApplicationDisplayID
nowPlayingApplicationPID
Ti,R,N,V_nowPlayingApplicationPID
nowPlayingApplicationIsPlaying
TB,R,N,V_nowPlayingApplicationIsPlaying
nowPlayingApplicationIsInterrupted
TB,R,N,V_nowPlayingApplicationIsInterrupted
anyApplicationIsPlaying
TB,R,N,V_anyApplicationIsPlaying
MRXPC_INDEXPATH_DATA_KEY
v8@?0@"NSObject<OS_xpc_object>"4
v8@?0@"MRDMediaRemoteClient"4
MRXPC_CLIENT_ERROR_DATA_KEY
MRXPC_CONTENT_API_MASK_KEY
MRXPC_BUNDLE_ID_ARRAY_DATA_KEY
MRXPC_BUNDLE_ID_KEY
apiCoordinator
T@"MRDBrowsableContentAPICoordinator",R,N,V_apiCoordinator
v12@?0I4I8
v16@?0@"NSNumber"4@"MREmulatedGameController"8^B12
credentials
T@"MRPasscodeCredentials",&,N,V_credentials
deviceInfo
T^v,N,V_deviceInfo
supportedMessages
T@"MRSupportedProtocolMessages",&,N,V_supportedMessages
virtualTouchDevices
registeredVirtualVoiceInputDevices
playbackQueueClient
T@"MRPlaybackQueueClient",R,N,V_playbackQueueClient
sessionPeer
T@"MRCoreUtilsPairingSessionPeer",R,N,V_sessionPeer
pinPairingToken
T@,&,N,V_pinPairingToken
serverDelegate
T@"<MRDTelevisionServerClientConnectionDelegate>",N,V_serverDelegate
INSERT INTO auth_tokens (device_id, auth_token, date_created, expiration_date) VALUES (?, ?, ?, ?);
DELETE FROM auth_tokens WHERE expiration_date < ?;
PRAGMA journal_mode=WAL
PRAGMA user_version;
CREATE TABLE 'auth_tokens' ('id' INTEGER PRIMARY KEY AUTOINCREMENT,'auth_token' TEXT NOT NULL,'date_created' INTEGER,'expiration_date' INTEGER,'device_id' TEXT);
PRAGMA user_version = %d
SELECT auth_token, date_created, expiration_date, device_id FROM auth_tokens;
path
T@"NSString",R,N,V_path
tokenRecords
v8@?0^v4
local.
T@"<MRDTelevisionServerNetworkServiceDelegate>",N,V_delegate
owningClient
T@"MRDMediaRemoteClient",R,N,V_owningClient
model
deviceID
AirPlayPortExtendedInfo
route
T@"NSDictionary",R,N,V_route
requiresPIN
TB,R,N
modelName
T@"NSString",R,N
deviceIdentifier
canBeDefaultRoute
TB,R,N,V_canBeDefaultRoute
canBeSystemDefaultRoute
TB,R,N,V_canBeSystemDefaultRoute
inputRoute
TB,R,N,GisInputRoute,V_inputRoute
outputRoute
TB,R,N,GisOutputRoute,V_outputRoute
MRXPC_NOTIFICATION_NAME_KEY
MRXPC_NOTIFICATION_DELAY
com.apple.MediaRemote.transactionServer
MRXPC_TRANSACTION_NAME
transactions
T@"NSMutableArray",R,N,V_transactions
PBSMediaRemoteServiceDialogOptionTitleKey
PineBoardServices
PBSMediaRemoteServiceDialogOptionPINKey
PBSMediaRemoteServiceDialogOptionMessageKey
PBSMediaRemoteServiceDialogOptionTimeoutKey
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_HEADER
TV_REMOTE_AUTHENTICATION_PIN_DIALOG_MESSAGE
T@"<MRDPinPairingDialogDelagate>",N,V_delegate
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}
MediaRemoteTelevisionDeviceInfoIdentifier.plist
UserAssignedDeviceName
v12@?0^{__CFString=}4^{__CFDictionary=}8
T@"<MRDDeviceInfoObserving>",N,V_delegate
AVController_RouteDescriptionKey_RouteUID
Celestial
AVController_RouteDescriptionKey_RouteName
AVController_RouteDescriptionKey_RouteType
<%@ %p: %@>
AVController_RouteDescriptionKey_IsCurrentlyPickedOnPairedDevice
AVController_RouteDescriptionKey_RouteCurrentlyPicked
v8@?0^{__CFArray=}4
v8@?0^{__CFString=}4
v8@?0C4
v8@?0^{__CFDictionary=}4
v8@?0@"MRTelevisionNowPlayingState"4
artwork
T@"NSData",&,N,V_artwork
artworkDigest
T@"NSData",&,N,V_artworkDigest
state
T@"MRTelevisionNowPlayingState",&,N,V_state
T@"<MRDTelevisionStateObserverDelegate>",N,V_delegate
AVSystemController_DiscoveryModeAttribute
AVSystemController_CurrentExternalScreenAttribute
Audio/Video
Default
AVController_PickableRoutesAttribute
AirPlayPortExtendedInfo.deviceID
AVController_PickedRouteAttribute
AVAudioRoute_Speaker
AVAudioRoute_Headphone
AVSystemController_RouteAwayFromAirPlayAttribute
AVController_RouteDescriptionKey_PortStatusChangeReason
AVSystemController
AVSystemController_CurrentRouteHasVolumeControlDidChangeNotification
AVSystemController_ExternalScreenDidChangeNotification
AVController_PickableRoutesDidChangeNotification
AVSystemController_PortStatusDidChangeNotification
AVController_ServerConnectionDiedNotification
AVSystemController_ExternalScreenType_AirPlay
AVSystemController_ExternalScreenType_TVOut
AVSystemController_DiscoveryMode_PresenceScan
AVSystemController_DiscoveryMode_DetailedDiscovery
AVSystemController_DiscoveryMode_None
nowPlayingInfo
T@"NSDictionary",R,N,V_nowPlayingInfo
serializedNowPlayingInfo
T@"NSData",R,N,V_serializedNowPlayingInfo
T@"MRNowPlayingArtwork",R,N,V_artwork
origin
T^{_MROrigin=},R,N,V_origin
originatingClient
T@"MRDMediaRemoteClient",R,N,V_originatingClient
mergePolicy
TC,R,N,V_mergePolicy
T@"NSDictionary",C,D,N
T@"NSData",&,D,N
T@"MRNowPlayingArtwork",&,D,N
T^{_MROrigin=},D,N
T@"MRDMediaRemoteClient",&,D,N
TC,D,N
com.apple.MediaRemote.MRTelevisionRemoteServer.SerialQueue
@"MRProtocolMessage"4@?0
com.apple.MediaRemote.Television.KeepAlive10SecondsForUser
B8@?0@"MRDTelevisionServerClientConnection"4
com.apple.TVRemote
com.apple.MediaRemote.MRTelevisionRemoteServer.WorkerQueue
v8@?0@"MRProtocolMessage"4
MRXPC_GAMECONTROLLER_INPUT_MODE_KEY
MRXPC_TELEVISION_PAIRED_DEVICES
MRXPC_TELEVISION_PAIRED_DEVICE
MRXPC_TELEVISION_LOGGING_KEY
MRXPC_TELEVISION_ENDPOINT_AVAILABLE_KEY
MRXPC_CUSTOM_DATA_NAME_KEY
MRXPC_CUSTOM_DATA_KEY
v8@?0@"NSError"4
v8@?0@"NSData"4
v12@?0I4^{__CFError=}8
v12@?0^v4^{__CFError=}8
v8@?0@"MRTransactionMessage"4
v16@?0@"MRTransactionDestination"4@"NSArray"8@?<v@?I>12
v12@?0@"CUPairedPeer"4I8
clients
endpoints
T@"<MRDTelevisionRemoteDelegate>",N,V_delegate
B12@?0@"MRDLocalNowPlayingInfoClient"4@"NSDictionary"8
image/none
with
without
T@"NSDictionary",C,N,V_nowPlayingInfo
parentApplicationDisplayID
T@"NSString",C,N,V_parentApplicationDisplayID
nowPlayingArtwork
T@"MRNowPlayingArtwork",&,N,V_nowPlayingArtwork
playbackState
TI,N,V_playbackState
nowPlayingVisibility
TI,N,V_nowPlayingVisibility
tintColor
T(_MRColor={?=ffff}[4f]),N,V_tintColor
<%@ %p pid=%d>
Ti,R,N,V_pid
isSystemApp
<%@ %p displayID=%@, displayName=%@>
nowPlayingAppDisplayID
T@"NSString",C,N,V_nowPlayingAppDisplayID
nowPlayingAppDisplayName
T@"NSString",C,N,V_nowPlayingAppDisplayName
currentRouteHasVolumeControl
TB,N,V_currentRouteHasVolumeControl
MRDMediaRemoteServerClientInvalidatedNotification
MRDMediaRemoteClientUserInfoKey
MRDMediaRemoteDaemonErrorDomain
-init is not supported, use +server
com.apple.mediaremoted.serialQueue
MRCleanUpAfterExit
com.apple.mediaremote
com.apple.MRMediaRemote.restoreClientStateForLaunch
com.apple.MRMediaRemote.didLaunch
com.apple.mediaremoted.connection
com.apple.mediaremoted.xpc
v16@?0@"NSNumber"4@"MRDMediaRemoteClient"8^B12
i12@?0@"MRDMediaRemoteClient"4@"MRDMediaRemoteClient"8
%@-%@
MRXPC_NOWPLAYING_APP_ENABLED_KEY
MRXPC_NOWPLAYING_APP_OVERRIDE_ENABLED_KEY
MRXPC_NOWPLAYING_DISPLAYID_KEY
<unknown>
MRXPC_NOWPLAYING_INFO_DATA_KEY
MRXPC_NOWPLAYING_MERGE_POLICY_KEY
MRXPC_NOWPLAYING_INFO_INCLUDE_ARTWORK_KEY
MRXPC_NOWPLAYING_PID_KEY
MRXPC_NOWPLAYING_DISPLAYNAME_KEY
MRXPC_APP_IS_PLAYING_KEY
MRXPC_PLAYBACK_STATE_KEY
MRXPC_NOWPLAYING_CLIENT_ARRAY_DATA_KEY
MRXPC_SOURCE_ID_KEY
MRXPC_AVAILABLE_ORIGINS_DATA_KEY
MRXPC_ORIGIN_DATA_KEY
MRXPC_NOTIFICATION_USERINFO_DATA_KEY
MRXPC_APPLICATION_ACTIVITY_DATA_KEY
MRXPC_NOWPLAYING_PLAYBACK_QUEUE_REQUEST_KEY
MRXPC_ERROR_CODE_KEY
DO NOT DECODE
MRXPC_VOLUME_VALUE_KEY
MRXPC_VOLUME_OPTIONS_KEY
enabled
disabled
MRXPC_NOWPLAYING_CLIENT_VISIBILITY_KEY
MRXPC_COLOR_DATA_KEY
MRXPC_TELEVISION_PAIRED_DEVICE_ID
MRXPC_PLAYBACK_QUEUE_REQUESTS_DATA
com.apple.mediaremoted
v16@?0@4@8^B12
v8@?0^{__CFError=}4
SBSUndimScreen
SpringBoardServices
_DECNowPlayingRecommendationStarted
_DECNowPlayingRecommendationEnded
availableOrigins
customOrigins
nowPlayingInfoServer
T@"MRDNowPlayingInfoServer",R,N,V_nowPlayingInfoServer
remoteControlServer
T@"MRDRemoteControlServer",R,N,V_remoteControlServer
routingServer
T@"MRDAVRoutingServer",R,N,V_routingServer
localNowPlayingPID
Ti,R,N
localNowPlayingAppDisplayID
localNowPlayingApplicationIsPlaying
localNowPlayingPlaybackState
TI,R,N
nowPlayingClientIsPlaying
shouldSendCommandsDuringPhoneCall
TB,R,N,V_shouldSendCommandsDuringPhoneCall
overrideClient
T@"MRDMediaRemoteClient",&,N
localNowPlayingClient
T@"MRDMediaRemoteClient",R,N
systemMediaClient
frontmostClient
_MRDActiveOriginDataDefaultsKey
%@ is invalid. You must provide a type and bundleID with %@.
<%@ %p "%@"
<%@ %p
%@, type = %@, bundleID = %@, valid = %@>
type
Ti,R,N,V_type
valid
TB,R,N,GisValid
name
T@"NSString",C,N,V_name
SendCommand
RelayServerMessage
BrowsableContent
UnknownAssertionType
com.apple.mediaremoted.%@
BrowsableContentMessage
UnknownType
CXCallObserver
MediaRemote
T@"<MRDPhoneCallObserverDelegate>",N,V_delegate
PreventUserIdleSystemSleep
com.apple.mediaremote.powerassertion
TimeoutActionRelease
com.apple.airplay.password
MRDAVRoutingServerApplicationPickedRoutesAddedNotification
MRDAVRoutingServerApplicationPickedRoutesRemovedNotification
MRDAVRoutingServerApplicationPickedRoutesUserInfoKey
MRDAVRoutingServerApplicationPickedRoutesShouldUpdateRoutingUserInfoKey
MRXPC_ROUTE_DISCOVERY_MODE_KEY
MRXPC_ROUTE_CATEGORY_KEY
MRXPC_ROUTES_DATA_KEY
MRXPC_ROUTE_DESCRIPTION_DATA_KEY
MRXPC_ROUTE_OPTIONS_KEY
MRXPC_ROUTE_PASSWORD_KEY
Just Got Splash Beats!
MRXPC_ROUTE_HAS_VOLUME_CONTROL_KEY
MRXPC_ROUTE_EXTERNAL_SCREEN_TYPE_KEY
MRXPC_ROUTE_NAME_KEY
AppleTV
AIRPLAY_BUSY_ATV_ALERT_TITLE
AIRPLAY_BUSY_ALERT_TITLE
AIRPLAY_BUSY_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ERROR_ALERT_TITLE
AIRPLAY_OUT_OF_RANGE_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_GENERIC_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_PIN_ALERT_TITLE
AIRPLAY_PASSWORD_ALERT_TITLE
AIRPLAY_PIN_ALERT_MESSAGE_FORMAT_%@
AIRPLAY_PASSWORD_ALERT_MESSAGE_FORMAT_%@
CANCEL
com.apple.mediaplayer.airPlayPasswordAlertDidCancel
v8@?0@"MSVSystemDialogResponse"4
activePasswordDialog
T@"MSVSystemDialog",&,N,V_activePasswordDialog
AIRPLAY_PASSCODE_ALERT_PLACEHOLDER
AIRPLAY_PASSWORD_ALERT_PLACEHOLDER
AVSystemController_NowPlayingAppDisplayIDAttribute
AVSystemController_NowPlayingAppIsPlayingAttribute
CallKit
AVSystemController_NowPlayingAppPIDAttribute
AVController_RouteDescriptionKey_AVAudioRouteName
HeadphonesBT
AVSystemController_ShouldIgnorePlayCommandsFromAccessoryAttribute
AVSystemController_NowPlayingAppIsInterruptedAttribute
AVSystemController_SomeClientIsPlayingNotificationParameter
AVSystemController_NowPlayingAppPIDDidChangeNotification
AVSystemController_NowPlayingAppIsPlayingDidChangeNotification
AVSystemController_SomeClientIsPlayingDidChangeNotification
cachedAnyAppPlaybackState
T@"MRDAnyAppPlaybackState",&,N,V_cachedAnyAppPlaybackState
isPlaying
TB,R,N,V_isPlaying
T@"NSDictionary",R,N,V_pickedRoute
connection
TI,R,N,V_connection
identifier
TI,R,N,V_identifier
port
T^{IONotificationPort=},R,N,V_port
T@"<MRDSleepObserverDelegate>",N,V_delegate
MRXPC_VOICE_INPUT_DEVICES_DATA_KEY
MRXPC_VOICE_INPUT_DESCRIPTOR_DATA_KEY
MRXPC_VOICE_INPUT_DEVICE_ID_KEY
MRXPC_VOICE_RECORDING_STATE
MRXPC_VOICE_RECORDING_ENDPOINT_AVAILABLE_KEY
recordingEndpointClients
T@"NSArray",R,C,N
registeredDevices
T@"<MRDVirtualAudioInputServerDelegate>",N,V_delegate
AVSystemController_EUVolumeLimitAttribute
RegionalBehaviorEUVolumeLimit
AVSystemController_EUVolumeLimitEnforcedAttribute
AVSystemController_SystemVolumeDidChangeNotification
AVSystemController_FullMuteDidChangeNotification
AVSystemController_EUVolumeLimitDidChangeNotification
AVSystemController_EUVolumeLimitEnforcedDidChangeNotification
AVSystemController_AudioVolumeNotificationParameter
AVSystemController_AudioCategoryNotificationParameter
AVSystemController_AudioVolumeChangeReasonNotificationParameter
CannotExceedEUVolumeLimit
MediaPlayback
AVSystemController_EUVolumeLimitNotificationParameter
AVSystemController_EUVolumeLimitEnforcedNotificationParameter
AVController_RouteDescriptionKey_RouteSubtype
AVSystemController_FullMuteAttribute
MRDMediaRemoteClientCanBeNowPlayingAppDidChange
MRDMediaRemoteClientDidInvalidateNotification
MRDMediaRemoteClientDidChangePlaybackStateNotification
MRDMediaRemoteClientPlaybackStateUserInfoKey
com.apple.mediaremote.MRDMediaRemoteClient
<%@ %p, bundleIdentifier = %@, pid = %ld, processName = %@>
Sending remote control command %@
Relaying XPC message %llu to client %@
f8@?0i4
@"NSNumber"4@?0
@"NSArray"4@?0
v16@?0@"NSNumber"4I8^B12
f12@?0@"NSNumber"4@"NSArray"8
messageHandler
T@"<MRDXPCMessageHandling>",N,V_messageHandler
T@"<MRDMediaRemoteClientDelegate>",N,V_delegate
T@"NSObject<OS_xpc_object>",R,N,V_connection
bundleIdentifier
T@"NSString",R,N,V_bundleIdentifier
processName
currentTaskAssertion
T@"MRDTaskAssertion",&,N,V_currentTaskAssertion
canBeNowPlayingApplication
TB,N,V_canBeNowPlayingApplication
canBeNowPlayingTimestamp
T@"NSDate",R,N,V_canBeNowPlayingTimestamp
routeDiscoveryCount
TI,R,N,V_routeDiscoveryCount
routeDiscoveryMode
TI,N,V_routeDiscoveryMode
supportedRemoteControlCommands
T@"NSArray",C,N
applicationPickedRoutes
isActive
keepAlive
TB,N,V_keepAlive
v16@?0@"NSNumber"4@"NSValue"8^B12
ReportDescriptor
DisplayIntegrated
ProductID
VendorID
deviceDescriptor
T@"MRVirtualTouchDeviceDescriptor",R,C,N,V_deviceDescriptor
uniqueIdentifier
TQ,R,N,V_uniqueIdentifier
ioDevice
T^{__IOHIDUserDevice=},R,N,V_ioDevice
<%@ %p '%@'>
B12@?0r*4@"NSObject<OS_xpc_object>"8
A reply object could not be created.
A reply connection could not be obtained.
AVSystemController_AllowAppToInitiatePlaybackTemporarilyAttribute
SBSCopyFrontmostApplicationDisplayIdentifier
CPCopyBundleIdentifierFromAuditToken
AppSupport
Library
com.apple.mediaremoted.systemServiceAvailability
<%@ %p, command = %@, origin = %@, destination app = %@ (pid = %d), remote control interface = %@, options = %@>
iapd
iap2d
BTAvrcp
com.apple.AVRCP
commandType
TI,R,N,V_commandType
optionsData
T@"NSData",R,N
senderAppDisplayID
T@"NSString",R,N,V_senderAppDisplayID
destinationAppDisplayID
T@"NSString",R,N,V_destinationAppDisplayID
destinationAppProcessID
Ti,R,N,V_destinationAppProcessID
remoteControlInterfaceID
appOptions
TI,R,N,V_appOptions
routeUID
navigational
TB,R,N,GisNavigational
contextSensitive
TB,R,N,GisContextSensitive
shouldImplicitlyLaunchApplication
originatedFromAccessory
avrcpCommand
TB,R,N,GisAVRCPCommand
TI,D,N
T@"NSData",C,D,N
T@"NSString",C,D,N
Ti,D,N
<%@ %p, command = %@, routedToApp = %@>
routedAppDisplayID
T@"NSString",R,N,V_routedAppDisplayID
%@ is abstract
T@"NSString",R,N,V_uniqueIdentifier
T@"NSString",R,N,V_name
T@"NSString",R,N,V_type
T@"NSString",R,N,V_modelName
picked
TB,R,N,GisPicked,V_picked
extendedInfo
T@"MRDAVRouteExtendedInfo",R,N,V_extendedInfo
dictionary
T@"NSDictionary",R,N,V_dictionary
indexPathData
T@"NSData",R,N,V_indexPathData
T@"NSString",R,N,V_deviceID
token
T@"NSString",R,N,V_token
dateCreated
T@"NSDate",R,N,V_dateCreated
expirationDate
T@"NSDate",R,N,V_expirationDate
T@"NSDate",C,D,N
Command ignored because of device state: %@
Broadcasting command to client: <%@>
Broadcast command timedout after %lf seconds
Broadcast command timed out
Clearing %lld context(s) for client %@
Received command from client %{public}@: %{public}@
Received broadcast command from client %@: %@
ERROR: now playing client could not be found for supported commands message: %@
Setting %lu supported commands for %@
Error setting up playback initiation for %@.
No destination client can be found for command %@, and the option to launch the app was not included. Dropping command.
The client that registered the custom origin %@ is no longer around, so this command will be ignored.
Sending command %{public}@ to %{public}@ (%{public}@).
Client %{public}@ replied to command with statuses: %{public}@
Destination app %@ is available but not ready for command %@,  Enqueueing command for later execution.
Destination app %@ not available for command %@, and command requested a launch. Enqueueing command for later execution.
Launch successful. Creating task assertion for %@ to ensure command handler registration on launch.
Task assertion %@ for post-launch setup is invalid.
Failed to launch application %@. Clearing queued commands.
Failed to launch application %@ instead launching %@
Attempting to send previously queued play command %{public}@ to client %{public}@.
Sending previously queued command %{public}@ to client %{public}@.
Playback state changed after play command: sending previously queued commands
Sending queued command has timed out after %ld attempts.
Attempt #%ld to send previously queued command to client %{public}@
Using previously routed app %@ for context %@
No context for context-sensitive command %{public}@
Received a supported commands request for origin with UID %d, but there's no custom origin registered with that UID. Dropping the message.
Command is an AVRCP command: skipping straight to call observer check to determine whether we should ignore the command or not.
Ignoring command because a phone call or FaceTime is active.
Requesting client %@ to begin loading browsable content
Client %@ finished loading browsable content with error: %@
Client %@ not available. Enqueuing beginLoading message
Client %@ now available. Dequeuing beginLoading message
Client %@ not available even though it can be now playing app
Clearing beginLoading message for client %@
Failed to launch application with bundle ID %{public}@. Dropping initiate playback message.
Warning: cannot handle initiate playback message without a bundle ID.
Error preparing client %{public}@ for browsable content message relay.
Beginning task assertion for client %@ in preparation for playback initiated by the browsable content system.
Failed to launch %@ for relayable browsable content message %{public}@.
Warning: could not relay browsable content message. No client found for bundle ID %@.
Error preparing client %@ for playback initialization.
Warning: no client found for bundle ID %@. Dropping initiate playback message.
Sending queued initiate playback message %@ to client %@.
Sending queued relayable message %@ to client %@
Browsable Content Server: Taking process assertion for %@.
Unable to take task assertion for %@.
[TelevisionConnection(Server)] Added gamecontroller with deviceID: %llu
[TelevisionConnection(Server)] Setting new voice recording state: %@ on client: %@
Error preparing statement to insert auth token
Error binding statement to database query
Error executing statement to insert auth token
Failed to finalize database statement
Error preparing statement to delete expired auth tokens
Failed to bind date param
Error executing statement to delete expired tokens
WARNING: could not enable WAL option on database file
WARNING: could not enable WAL option on database connection
Error reading from auth token database
Error stepping database statement
Error preparing database statement: %s
Error stepping database statement: %s
Error finalizing database statement %p
[MRDTelevisionServerNetworkService] Dealloc
[MRDTelevisionServerNetworkService] Starting network service: %@
[MRDTelevisionServerNetworkService] Stopping network service %@
[MRDTelevisionServerNetworkService] Did accept connection with service: %{public}@ input: %@ output: %@
[MRDTelevisionServerNetworkService] Remote server advertisement success with service: %@
[MRDTelevisionServerNetworkService] Remote server advertisement failed with service: %@
[MRDTelevisionServerNetworkService] %@
[MRDTelevisionServerNetworkService] Retrying after 30s...
[MRDTelevisionServerNetworkService] Updating txtData...
[MRDTelevisionServerNetworkService] Initializing Bonjour Service in %lf seconds
[MRDTelevisionServerNetworkService] Stopping Bonjour Service
[MRDTelevisionServerNetworkService] Initializing Bonjour Service
Configuring Television NetService with includesPeerToPeer = %@
Starting MediaRemote server
MediaRemote server exiting
[MRTransactionServer] Unhandled transaction name: %llu
[MRTransactionServer] Unhandled Transaction delegate callback
[MRTransactionServer] %@ received keys %@
[MRTransactionServer] %@ sending client %@ subscribed packets %@
deviceInfo file exists but is empty, creating new deviceID
Created deviceInfo: %@
Attempting to migrate legacy identifier %@
Creating devieInfo file %@
Generated deviceID %@
Failed to create deviceInfo file %@
DeviceID already exists but replacing with legacy %@ -> %@
[TelevisionStateObserver] Registering for Now Playing Updates
[TelevisionStateObserver] Unregistering for Now Playing Updates
[TelevisionStateObserver] Registering for Now Playing Artwork Updates
[TelevisionStateObserver] Unregistering for Now Playing Artwork Updates
Error setting AVSystemController discovery mode. %{public}@
Successfully picked route named %@. (error = %@)
Failed to pick route named %@. (error = %@)
Error unpicking AirPlay routes. %{public}@
VAD port status changed to %i for route %@
MRMediaRemoteRouteStatus changed to %i for route %@
[TelevisionServer] Removing television endpoint for client %@
Received device info: %{public}@
[TelevisionServer] ERROR: client is incompatible
[TelevisionServer] ERROR: client not authorized
[TelevisionServer] Unknown message attempting to be handled
[TelevisionServer] MRTelevisionClientConnection did disconnect client: %@
[TelevisionServer] Exchanging %llu bytes of crypto pairing data with client "%@"
[TelevisionServer] ERROR: Unable to exchange pairing data. Unknown client for crypto pairing session: %@
[TelevisionServer] Returning OSStatus code %d back to %@
[TelevisionServer] ERROR: Unable to send pairing failure message. Unknown client for crypto pairing session: %@
[TelevisionServer] Successfully opened security session with peer %@
[TelevisionServer] Client connected: %@
[TelevisionServer] Attempting to disconnect client: %@
[TelevisionServer] Removing client: %@
[TelevisionServer] Unregistering client dependencies: %@
[TelevisionServer] Client %@ is not compatible. Protocol version %llu is less than the required minimum version %llu
[TelevisionServer] Client %@ is not compatible. TVRemote application version %llu is less than the required minimum version %llu
[TelevisionServer] Setting game controller input mode to %@
[TelevisionServer] Error unpairing device: %@ error: %{public}@
[TelevisionServer] Client retain count is %lu
[TelevisionServer] Notifying and Disconnecting client %@. Error: %@
[TelevisionServer] Notify and disconnect notifying client %@
[TelevisionServer] Notify and disconnect response from client %@
[TelevisionServer] Notify and Disconnect timeout after %lf seconds
[TelevisionServer] Sleeping for %lf seconds
[TelevisionServer] Continuing after %lf second sleep
[TelevisionServer] Error deleting pairing identity. %@
[TelevisionServer] Error unpairing device: %@ error: %@
[TelevisionServer] Adding television endpoint %@
[TelevisionServer] Removing television endpoint %@
[TelevisionServer] Creating new PairingSession for client %@ from message %@
[TelevisionServer] Processing %lld bytes of crypto pairing data from client %@
[TelevisionServer] Error processing pairing exchange data. %@
[TelevisionServer] Handling pairing failure with OSStatus = %d
[TelevisionServer] Received command: %@ with identifier %@
[TelevisionServer] Responding to command: %@ with identifier %@ with statuses %@
[TelevisionServer] Registering HID device with descriptor: %@
[TelevisionServer] Registered new virtual touch device with ID %llu
[TelevisionServer] Registering new virtual voice input device with descriptor: %@
[TelevisionServer] Error registering new virtual voice input device. %@
[TelevisionServer] Successfully registered new virtual voice input device with ID %u
[TelevisionServer] Changing name to %@
[TelevisionServer] Could not set device name to %@
[TelevisionServer] Sending custom data %@ to endpoint %@
[TelevisionServer] %@Transaction sending client %@ subscribed packets %@
[TelevisionServer] System pairing removed: %@. Attempting to disconnect...
[TelevisionServer] No active connection to disconnect
[TelevisionServer] No TVRemote pairing found coresponding to removed system pairing
Removing now playing info client for pid %ld
Setting now playing info for origin: %{public}@ client: %{public}@ (%{public}@ artwork): %{mediaremote:npinfo}.*P
Clearing now playing info for origin: %@ pid %i
Restoring client state after unclean exit.
XPC Error: %s
Stopping MediaRemote server
Adding client with PID %i
Removing client with PID %i
Restoring saved active origin %@
App activity status did change: %@
Remaining run assertions: %@
Client with pid %ld opened connection.
XPC message with id %lu not handled.
Server message with id %llu not handled.
Added %{public}@ as possible now playing application.
Cleared %{public}@ as possible now playing application.
Set pid %i as now playing application override.
Setting %@ as the overridden now playing application.
Could not set override client. Client %@ not found.
Clearing override client (currently %@)
Error setting now playing info: %@
Returning now playing info of length: %lu, artwork: %@
Returning now playing artwork %@
Error: attempted to set the now playing app for the local origin. The local now-playing app is read-only, and determined by mediaserverd.
Error: attempted to set now playing app for an origin that wasn't registered. (uid = %zd)
Tried to set display name for the local origin. Ignoring.
Returning now playing application is playing = %d.
Setting new playback state %{public}@ on now playing client %{public}@
Unable to set playback state. No now playing client found for %@ with origin %@
NULL source ID string sent to %@
Setting active origin to %@, origin identifier in: %li
Client %@ attempted to post an illegal notification (%@); ignoring.
Warning: attempted to begin a non-existent app activity.
Warning: Ignoring activity because a Play Command is being processed
Ending activity %@
Warning: attempted to end non-existent app activity.
In Daemon MRPlaybackQueueRequestRef %{public}@ does not match MRPlaybackQueueRef %{public}@
%{public}@ is requesting Playback Queue from %{public}@ with request %{public}@
Received Error: %{public}@ when attempting request: %{public}@
Playback Queue Origin: %{public}@ from client: %{public}@ invalidated
Playback Queue Origin: %{public}@ Invalidated
Get system volume: returning %f from volume controller %{public}@
Set system volume: overriding volume warning
Set system volume: setting volume to %f (warning state = %{public}s)
Adjust system volume: stepping volume by %f (warning state = %{public}s)
Received video thumbnails request from %@ for %@
Received video thumbnails request from %@ for the now playing app.
Relaying video thumbnails request to %@
Client %@ not found for video thumbnails request
Received audio amplitude samples request from %@ for %@
Received audio amplitude samples request from %@ for the now playing app.
Relaying audio amplitude samples request to %@
Client %@ not found for audio amplitude samples request
Setting parent application to "%@" for client %@
Could not set parent application for client %@. Failed to find or create now playing client.
Setting now playing visibility to %{public}@ for client %{public}@
Could not set now playing client visibility for client %@. Failed to find or create now playing client.
Setting app tint color to %{public}@ for client %{public}@
Could not set app tint color for client %@. Failed to find or create now playing client.
Received lyrics event from client %@ and sending to %@
Client with pid %i invalidated.
Ending app activity for invalidated client %{public}@
Removing registered custom origins (%zd total) for client with pid %d.
Now playing application is playing did change to %d
Any media client application is playing did change to %d
Removing %{public}@ for key %{public}@ for notification user info
Now playing application did change to pid %d
Failed to find origin with UID %i; using the active origin.
Beginning new app activity %{public}@...
New app activity has begun. %{public}@
Error preparing application activity. %{public}@
Ending app activity %{public}@
Failed to acquire process assertion for task %@.
Task assertion %@ was invalidated.
Timed out while waiting to acquire process assertion for task %@.
Began task assertion: %@
Invalidating task assertion: %@
Initialization sleep assertion %@
Could not take sleep assertion
Taking sleep assertion %@ for a max of %lf seconds
Releasing sleep assertion %@
Could not release sleep assertion %@
Route change requested with UID %{public}@
Switching to route with UID %{public}@
Client with pid %i changed route discovery mode to %{public}@.
%@ picked route: %@, options: %x
Did not receive a pickable route from the XPC message.
Requesting to unpick AirPlay routes
Recived application picked route xpc message: %@
Ignoring VAD port authentication failure.
Updating system route discovery mode to %{public}@
AirPlay Error %d: %@: %@.
AirPlay Error %d: Ignoring because error has not changed and already prompted user.
Failed to pick route %{public}@
Setting %@ to application picked routes for client %@
Removed application picked routes %@
Added application picked routes %@
Did receive System will Sleep notification.
Did receive System Did Wake notification.
Did recieve any power callback.
[VirtualAudioInputServer] Created new device with descriptor: %{public}@
[VirtualAudioInputServer] Notifying %{public}llu endpoints of newly connected device
[VirtualAudioInputServer] Error creating virtual input device. No descriptor data provided.
[VirtualAudioInputServer] Disconnecting virtual device with ID %{public}d
[VirtualAudioInputServer] Notifying %{public}llu endpoints of disconnected device
[VirtualAudioInputServer] Couldn't find device with ID %{public}d
[VirtualAudioInputServer] An unknown device disconnected
[VirtualAudioInputServer] Recording state changed for device with ID %{public}d
[VirtualAudioInputServer] Recording state change ignored: unknown device ID %{public}d
Client switched route discovery mode to: %lu
Taking process assertion for client %@.
Failed to acquire task assertion for client %@.
Error sending remote control command to %@. %s
Failed to acquire process assertion for client %@.
Invalidating process assertion %@
Custom origin registered: %@
Custom origin removed: %@
WARNING: Failed to handle HID report for device ID %llu. (kernel error = %d)
Error launching application. %@
Error blessing %@ for playback initialization. %@
System service availability check timed out.
MRDRemoteControlServer
MRDXPCMessageHandling
NSObject
MRDVolumeController
MRDBrowsableContentAPICoordinator
MRDRemoteControlContext
MRDAVRoutingDataSource
MRDHIDEventManager
MRDSystemHIDEventManager
MRDProcessHIDEventManager
MRDiOSSimulatorNowPlayingDataSource
MRDNowPlayingDataSource
MRDBrowsableContentServer
MRDTelevisionServerClientConnection
MREmulatedGameControllerDelegate
MRDTelevisionCredentialDatabase
MRDTelevisionServerNetworkService
NSNetServiceDelegate
MRDVirtualAudioInputServerDevice
MRDAVRouteExtendedInfo
MRDBackgroundTasks
MRDTransactionServer
MRTransactionDelegate
MRDPinPairingDialog
MRHID
MRDDeviceInfoObserver
MCProfileConnectionObserver
MRDMediaServerAVRoute
MRDTelevisionStateObserver
MRDMediaServerAVRoutingDataSource
MRDNowPlayingInfoUpdate
NSMutableCopying
MRDMutableNowPlayingInfoUpdate
MRDTelevisionRemoteServer
NSStreamDelegate
MRCryptoPairingSessionDelegate
MRDTelevisionServerNetworkServiceDelegate
MRDTelevisionStateObserverDelegate
MRDTelevisionTextEditingServiceDelegate
MRTelevisionClientConnectionDelegate
MRDPinPairingDialogDelagate
MRDSleepObserverDelegate
MRDTelevisionServerClientConnectionDelegate
MRDNowPlayingInfoServer
MRDNowPlayingInfoClient
MRDLocalNowPlayingInfoClient
MRDCustomOriginNowPlayingInfoClient
NSCoding
MRDMediaRemoteServer
MRDMediaRemoteClientDelegate
MRDNowPlayingDataSourceDelegate
MRDTelevisionRemoteDelegate
MRDVirtualAudioInputServerDelegate
MRDPhoneCallControllerDelegate
MRDDeviceInfoObserving
MRDTaskAssertion
MRDContentItemClient
MRDPhoneCallObserver
CXCallObserverDelegate
MRDSleepAssertion
MRDAVRoutingServer
MRDAVRoutingDelegate
MRDMediaServerNowPlayingDataSource
MRDAnyAppPlaybackState
MRDSleepObserver
MRDVirtualAudioInputServer
MRDMediaServerVolumeController
MRDMediaRemoteClient
MRDVirtualTouchDevice
MRDRunAssertion
MRDRemoteControlCommand
NSCopying
MRDMutableRemoteControlCommand
MRDRoutedRemoteControlCommand
MRDAVRoute
MRDInitiatePlaybackMessage
MRDTelevisionAuthTokenRecord
MRDMutableTelevisionAuthTokenRecord
v16@0:4@8@12
v16@0:4@"NSObject<OS_xpc_object>"8@"MRDMediaRemoteClient"12
B12@0:4@8
#8@0:4
@8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B8@0:4
B12@0:4#8
B12@0:4@"Protocol"8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
@"NSString"8@0:4
@12@0:4@8
v8@0:4
v12@0:4@8
v16@0:4@8@?12
v20@0:4@8@12@?16
v20@0:4@8@12B16
v20@0:4@8@12@16
v12@0:4^{_MROrigin=}8
@"NSObject<OS_dispatch_queue>"
@"NSMutableDictionary"
@"NSTimer"
@"MRDPhoneCallObserver"
@"MRDNowPlayingDataSource"
@12@0:4^{_NSZone=}8
B16@0:4f8^@12
f8@0:4
v12@0:4I8
@"MRDAVRoutingDataSource"
I12@0:4@8
v16@0:4I8@12
@12@0:4I8
@16@0:4@8@12
@"NSMutableArray"
@"NSString"
@16@0:4@8I12
B16@0:4@8@12
B20@0:4@8@12I16
B12@0:4I8
@"<MRDAVRoutingDelegate>"
@"MRDAVRoute"
v12@0:4^{__IOHIDEvent=}8
v16@0:4I8I12
^{__IOHIDEventSystemClient=}
@16@0:4@8i12
i8@0:4
@"BKSApplicationStateMonitor"
@"<MRDNowPlayingDataSourceDelegate>"
v16@0:4@?8@12
v24@0:4@8{?=^QI}12@20
@"MRDBrowsableContentAPICoordinator"
v16@0:4@8^v12
v16@0:4@"MREmulatedGameController"8^v12
@20@0:4@8@12@16
Q12@0:4@8
@16@0:4Q8
v16@0:4Q8
Q16@0:4Q8
v12@0:4^v8
v12@0:4@?8
^v8@0:4
@"MRPasscodeCredentials"
@"MRSupportedProtocolMessages"
@"MRPlaybackQueueClient"
@"MRCoreUtilsPairingSessionPeer"
@"<MRDTelevisionServerClientConnectionDelegate>"
^{sqlite3=}
@12@0:4^v8
v12@0:4@"NSNetService"8
v16@0:4@"NSNetService"8@"NSDictionary"12
v16@0:4@"NSNetService"8@"NSData"12
v20@0:4@"NSNetService"8@"NSInputStream"12@"NSOutputStream"16
v20@0:4^v8d12
@"NSNetService"
@"<MRDTelevisionServerNetworkServiceDelegate>"
@"MRDMediaRemoteClient"
@"NSDictionary"
v28@0:4@8@12I16I20@?24
v28@0:4@"MRTransaction"8@"NSArray"12I16I20@?<v@?>24
v12@0:4@"MRTransaction"8
I12@0:4@"MRTransaction"8
v16@0:4@8B12
@"<MRDPinPairingDialogDelagate>"
{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8@0:4
@32@0:4{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8
v16@0:4@"MCProfileConnection"8@"NSDictionary"12
^{MGNotificationTokenStruct=}
@"<MRDDeviceInfoObserving>"
@"MRDAVRouteExtendedInfo"
v12@0:4i8
v16@0:4B8i12
v12@0:4B8
v16@0:4@8:12
@"<MRDTelevisionStateObserverDelegate>"
@"NSData"
@"MRTelevisionNowPlayingState"
@16@0:4^{_NSZone=}8#12
^{_MROrigin=}8@0:4
C8@0:4
@"MRNowPlayingArtwork"
^{_MROrigin=}
v12@0:4C8
v16@0:4@8I12
v16@0:4@"NSStream"8I12
v16@0:4@"MRCryptoPairingSession"8@"NSData"12
v16@0:4@"MRCryptoPairingSession"8@"NSString"12
v12@0:4@"MRCryptoPairingSession"8
v24@0:4@8d12@?20
v24@0:4@"MRCryptoPairingSession"8d12@?<v@?@"NSString">20
v16@0:4@"MRCryptoPairingSession"8@"NSError"12
v20@0:4@"MRDTelevisionServerNetworkService"8@"NSInputStream"12@"NSOutputStream"16
v16@0:4@"MRDTelevisionStateObserver"8@"MRTelevisionNowPlayingState"12
v16@0:4@"MRDTelevisionStateObserver"8@"NSData"12
v16@0:4@"MRDTelevisionStateObserver"8@"NSNotification"12
v16@0:4@"MRDTelevisionStateObserver"8B12
v20@0:4@"MRDTelevisionTextEditingService"8@"NSString"12@"MRTextEditingAttributes"16
v16@0:4@"MRDTelevisionTextEditingService"8@"NSString"12
v16@0:4@"MRDTelevisionTextEditingService"8@"MRTextEditingAttributes"12
v12@0:4@"MRDTelevisionTextEditingService"8
v16@0:4@"MRTelevisionClientConnection"8@"MRProtocolMessage"12
v12@0:4@"MRTelevisionClientConnection"8
v16@0:4@"MRDPinPairingDialog"8@"MRDTelevisionServerClientConnection"12
v20@0:4@"MRDPinPairingDialog"8@"MRDTelevisionServerClientConnection"12B16
v16@0:4@"MRDSleepObserver"8@?<v@?>12
v12@0:4@"MRDSleepObserver"8
v24@0:4@8Q12^v20
v24@0:4@"MRDTelevisionServerClientConnection"8Q12^v20
@12@0:4@?8
B16@0:4@8^@12
v16@0:4i8@?12
B16@0:4i8@12
v20@0:4I8@12@16
v16@0:4B8B12
v24@0:4{_MRHIDButtonEvent=IIB}8@20
v44@0:4{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8Q32@40
@"MRDTelevisionServerNetworkService"
@"NSRunLoop"
@"NSMutableSet"
@"MRDSystemHIDEventManager"
@"MRDTelevisionStateObserver"
@"MRDPinPairingDialog"
@"MRDSleepObserver"
@"CUPairingManager"
@"<MRDTelevisionRemoteDelegate>"
@16@0:4^{_MROrigin=}8i12
@16@0:4^{_MROrigin=}8@12
v16@0:4^{_MROrigin=}8i12
@12@0:4^{_MROrigin=}8
@12@0:4i8
@"NSMapTable"
(_MRColor={?=ffff}[4f])8@0:4
v24@0:4(_MRColor={?=ffff}[4f])8
(_MRColor=""{?="red"f"green"f"blue"f"alpha"f}"data"[4f])
v12@0:4@"NSCoder"8
@12@0:4@"NSCoder"8
v12@0:4@"MRDMediaRemoteClient"8
v12@0:4@"MRDNowPlayingDataSource"8
v20@0:4@"MRDTelevisionRemoteServer"8@"MRDRemoteControlCommand"12@?<v@?I^{__CFArray=}>16
v20@0:4@8I12@16
v20@0:4@"MRDVirtualAudioInputServer"8I12@"MRDVirtualAudioInputServerDevice"16
v16@0:4@"MRDPhoneCallController"8@"MRDRemoteControlCommand"12
v16@0:4@"MRDDeviceInfoObserver"8^v12
I12@0:4I8
v16@0:4^{_MROrigin=}8B12
B12@0:4^{_MROrigin=}8
^{_MROrigin=}12@0:4i8
^{_MROrigin=}12@0:4I8
v24@0:4@8@12@16^v20
v16@0:4^{_MROrigin=}8^v12
v16@0:4I8^{_MROrigin=}12
v20@0:4@8^{_MROrigin=}12@16
I12@0:4^{_MROrigin=}8
I16@0:4i8^{_MROrigin=}12
@"NSObject<OS_xpc_object>"
@"MRDNowPlayingInfoServer"
@"MRDVolumeController"
@"MRDRemoteControlServer"
@"MRDBrowsableContentServer"
@"MRDTelevisionRemoteServer"
@"MRDAVRoutingServer"
@"MRDDeviceInfoObserver"
@"MRDVirtualAudioInputServer"
@"MRDTransactionServer"
@"MRDBackgroundTasks"
@"MRMutableApplicationActivity"
@"NSLock"
@20@0:4i8@12i16
@16@0:4i8@12
@16@0:4i8i12
@"NSObject<OS_dispatch_source>"
@"BKSProcessAssertion"
v16@0:4@"CXCallObserver"8@"CXCall"12
@"CXCallObserver"
@"<MRDPhoneCallObserverDelegate>"
@20@0:4@8d12
v12@0:4@"MRDAVRoutingDataSource"8
v20@0:4@8i12@16
v20@0:4@"MRDAVRoutingDataSource"8i12@"MRDAVRoute"16
v20@0:4i8@12I16
v20@0:4@8B12@16
@"MSVSystemDialog"
@"MRDAnyAppPlaybackState"
@16@0:4B8@12
^{IONotificationPort=}8@0:4
@"<MRDSleepObserverDelegate>"
^{IONotificationPort=}
@"<MRDVirtualAudioInputServerDelegate>"
v12@0:4f8
v20@0:4@8B12@?16
@"NSArray"
@"<MRDXPCMessageHandling>"
@"<MRDMediaRemoteClientDelegate>"
@"MRDTaskAssertion"
@"NSDate"
B32@0:4{_MRHIDTouchEvent=(_MRHIDPoint={?=ff}[2f])IQI}8
Q8@0:4
^{__IOHIDUserDevice=}8@0:4
@"MRVirtualTouchDeviceDescriptor"
^{__IOHIDUserDevice=}
@24@0:4I8^{_MROrigin=}12@16@20
@12@0:4^{__CFString=}8
@?8@0:4
v16@0:4@8^{__CFString=}12
bplist00
 !"_
DTPlatformVersion_
CFBundleIdentifierZDTCompiler_
CFBundleInfoDictionaryVersion\DTXcodeBuild_
DTPlatformBuild_
CFBundleExecutable_
CFBundleAllowMixedLocalizationsWDTXcode_
CFBundleSupportedPlatforms_
MinimumOSVersion_
BuildMachineOSBuild^DTPlatformNameYDTSDKName_
CFBundleDevelopmentRegionZDTSDKBuild^UIDeviceFamilyS3.2_
com.apple.mediaremoted_
"com.apple.compilers.llvm.clang.1_0S6.0V8V109dP\mediaremoted
T0830
^WatchSimulatorV15A284^watchsimulator_
watchsimulator3.2WEnglishV14V213
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>FAKETEAMID.com.apple.mediaremoted</string>
<key>com.apple.PairingManager.Read</key>
<true/>
<key>com.apple.PairingManager.RemovePeer</key>
<true/>
<key>com.apple.PairingManager.Write</key>
<true/>
<key>com.apple.appletv.pbs.allow-screen-saver</key>
<true/>
<key>com.apple.appletv.pbs.allow-wake</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.hid.manager.user-access-device</key>
<true/>
<key>com.apple.itunesstored.private</key>
<true/>
<key>com.apple.managedconfiguration.feature-setting.allowRemoteAppPairing</key>
<true/>
<key>com.apple.multitasking.unlimitedassertions</key>
<true/>
<key>com.apple.private.hid.client.event-dispatch</key>
<true/>
<key>com.apple.private.lockdown.finegrained-set</key>
<array>
<string>NULL/DeviceName</string>
</array>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceMediaLibrary</string>
<string></string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.PairingManager</string>
</array>
<key>com.apple.springboard.launchapplications</key>
<true/>
<key>com.apple.telephonyutilities.callservicesd</key>
<array>
<string>access-calls</string>
</array>
<key>fairplay-client</key>
<integer>1974055701</integer>
<key>keychain-access-groups</key>
<array>
<string>com.apple.MediaRemote.pairing</string>
<string>com.apple.airplay</string>
<string>apple</string>
</array>
</dict>
</plist>
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
