callType
callCategory
serviceProvider
isEqual:
uniqueId
isEqualToString:
date
timeIntervalSinceDate:
doesCallTypesMatch::
callerId
instance
logHandleForDomain:
length
predicateWithFormat:
dateByAddingTimeInterval:
arrayWithObjects:count:
andPredicateWithSubpredicates:
fetchObjectsWithPredicate:
count
filteredArrayUsingPredicate:
objectAtIndexedSubscript:
match::
matchCallWithFingerprint:withDatabase:
description
dictionaryRepresentation
stringWithFormat:
dictionary
numberWithUnsignedLongLong:
setObject:forKey:
numberWithBool:
numberWithUnsignedInt:
class
allocWithZone:
init
isMemberOfClass:
copyWithZone:
setTimestamp:
setHasTimestamp:
hasTimestamp
setSuccess:
setHasSuccess:
hasSuccess
setRecordCount:
setHasRecordCount:
hasRecordCount
setVersion:
setHasVersion:
hasVersion
readFrom:
writeTo:
copyTo:
hash
mergeFrom:
timestamp
success
recordCount
version
_timestamp
_recordCount
_version
_success
_has
queue
execute:
executeSync:
executeSyncWithResult:
executeSyncWithBOOL:
initWithName:
initWithQueue:
.cxx_destruct
_queue
alloc
initWithDomain:
initWithComponentId:andBlockOnConfiguration:
newMetricContainerWithIdentifier:
setMetric:
submitMetric:
logHandle
submitMetric:withId:
setError:
setOldSchema:
setNewSchema:
setTable:
postMetricWithId:unsignedIntegerValue:
setCallType:
setCallStatus:
setPid:
setUploadRecordCount:
setDownloadRecordCount:
commCenterMigrationResult:withMigratedCallCount:
databaseMigrationResult:oldVersion:newVersion:
databaseSaveError:withTableName:
deleteAll:
callAddedWithNilUuid:withCallStatus:
entitlementRejection:
syncSuccess:withDownloadRecordCount:
syncFailure:
uninitializedDatabaseSave
bootstrapGizmo:
gizmoDatabaseMigrationFailure
awdServer
setAwdServer:
_awdServer
name
userInfo
dealloc
setUserInfo:
_name
_userInfo
createManagedObjectContext
setMergePolicy:
setUndoManager:
mainBundle
bundleIdentifier
UUID
UUIDString
fetchWithPredicate:forEntity:
firstObject
initWithDBManager:
createWithDBManager:
defaultCenter
handleCallRecordContextDidSaveNotification:
addObserverForName:object:queue:usingBlock:
handleCallDBPropContextDidSaveNotification:
callDBManager
tempDBLocation:
moveCallRecordsFromDatabaseAtURL:
dbManager
fPersistentStoreCoordinator
handlePersistentStoreChangedNotification:
registerForNotifications
removeObserver:name:object:
objectForKey:
hasChanges
save:
notifyDataStoreChanged
notifyDataStoreChangeReason
postNotificationName:object:
calltype
integerValue
serviceProviderForCallType:
setService_provider:
categoryForCallType:
numberWithInteger:
setCall_category:
service_provider
call_category
address
handleTypeForCallerId:
setHandle_type:
handle_type
versionForDBAtLocation:
getDestinationModelForVersion:
isDataStoreAtURLInitialized:withModelAtURL:
instanceWithModelURL:
addDataStoreAtLocation:isEncrypted:
entityDescriptionHavingName:forContext:
setEntity:
executeFetchRequest:error:
countByEnumeratingWithState:objects:count:
createCallRecord
setAddress:
answered
setAnswered:
setDate:
duration
setDuration:
face_time_data
setFace_time_data:
setName:
read
setRead:
unique_id
setUnique_id:
setCalltype:
originated
setOriginated:
disconnected_cause
setDisconnected_cause:
number_availability
setNumber_availability:
device_id
setDevice_id:
iso_country_code
setIso_country_code:
setServiceProviderIn:using:havingVersion:
setHandleTypeIn:using:havingVersion:
deleteObject:
handleSaveForCallRecordContext:error:
removeDataStoreAtLocation:
objectForKeyedSubscript:
setObject:forKeyedSubscript:
numberWithUnsignedLong:
postNotificationName:object:userInfo:deliverImmediately:
postNotificationName:object:userInfo:
postTimersChangedNotification
callDBProperties
timer_incoming
timer_outgoing
timer_lifetime
dictionaryWithObjectsAndKeys:
reset
fetchWithPredicate:forEntity:withLimit:
setReturnsObjectsAsFaults:
setPredicate:
initWithKey:ascending:
setSortDescriptors:
setFetchLimit:
initWithEntity:insertIntoManagedObjectContext:
addObject:
getArrayForCallTypeMask:
fetchAllObjectsWithUniqueId:
lastObject
fetchObjectWithUniqueId:
fetchObjectsWithUniqueIds:
fetchAllNoLimit
insertedObjects
doubleValue
boolValue
numberWithDouble:
setTimer_outgoing:
setTimer_incoming:
setTimer_lifetime:
updateCallDBProperties
saveTimers:
performSaveWithBackgroundTaskAssertion:error:
persistentStoreCoordinator
persistentStores
getPropertyValueForKey:forContext:
code
refreshObject:mergeChanges:
timeIntervalSinceReferenceDate
setPropertyValue:forKey:forContext:
resetTimers
setTimer_all:
resetAllTimers
unRegisterForNotifications
createForClient
createForServer
callRecordContext
registerForNotifications:
mergeCallRecordChangesFromRemoteAppSave
mergeCallDBPropChangesFromRemoteAppSave
fetchAll
fetchWithCallTypes:
deleteObjectWithUniqueId:
deleteObjectsWithUniqueIds:
deleteAll
timerIncoming
timerOutgoing
timerLifetime
timerLastReset
objectId
fCallRecordContext
fCallDBPropertiesContext
_observerCallRecordRef
_observerCallDBPropRef
_moveCallRecordsFromTempStoreRef
_dataStoreAddedRef
setCallCount:
setHasCallCount:
hasCallCount
callCount
_callCount
isKindOfClass:
dataUsingEncoding:
bytes
initWithBytes:length:encoding:
allowsReverseTransformation
transformedValueClass
transformedValue:
reverseTransformedValue:
URLByDeletingLastPathComponent
initWithURL:
readDatabaseVersion:
modelURL
dataStoreType
setNotifyDataStoreChangeReason:
handlePermanentCreated
helperConnection
invalidate
initWithMachServiceName:options:
setHelperConnection:
resetCallTimers:
appendTransactions:
sync:
clearSyncToken:
migrateCallDB:withReply:
bootUp:
moveCallsFromTempDatabase
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
interfaceWithProtocol:
setRemoteObjectInterface:
createDataStore
setInterruptionHandler:
setInvalidationHandler:
resume
permDBLocation:
pokeSyncHelperToInitDB
handleTemporaryCreated
validateInfo:
willMoveCallsFromTempDatabase
createHelperConnection
remoteObjectProxy
shouldCreatePermanent
validatePermDatabase
createPermanent
shouldCreateTemporary
createTemporary
getDBLocationIsSandboxed:isTemporary:error:
validateTempDatabase
syncHelperReadyNotificationRef
setSyncHelperReadyNotificationRef:
_helperConnection
_syncHelperReadyNotificationRef
setHasOldSchema:
hasOldSchema
setHasNewSchema:
hasNewSchema
setDomain:
setHasDomain:
hasDomain
setHasError:
hasError
oldSchema
newSchema
domain
error
_domain
_error
_newSchema
_oldSchema
reFetch
setDeviceUnlockNotificationRef:
bundleForClass:
URLForResource:withExtension:
URLByAppendingPathComponent:
setDataStoreType:
deviceUnlockNotificationRef
dataStoreName
reFetchState
setDbManager:
deviceUnlocked
setDeviceUnlocked:
_deviceUnlocked
_dataStoreType
_notifyDataStoreChangeReason
_dbManager
_deviceUnlockNotificationRef
dbInfoPrefFile
dictionaryWithContentsOfURL:
mutableCopy
writeToURL:atomically:
defaultManager
path
isReadableFileAtPath:
writeDatabaseVersion:isTemp:
setDbInfoPrefFile:
_dbInfoPrefFile
setupMobileKeyBag
cacheUnlockSinceBootState
setHasDeviceBeenUnlockedSinceBoot:
hasDeviceBeenUnlockedSinceBoot
_hasDeviceBeenUnlockedSinceBoot
formatted
originalPhoneNumber
ISOCountryCode
setISOCountryCode:
setFormattedPhoneNumber:
formattedPhoneNumber
setFormatted:
initWithPhoneNumber:andISOCountryCode:
formattedNumber
setOriginalPhoneNumber:
_formatted
_originalPhoneNumber
_ISOCountryCode
_formattedPhoneNumber
setLimitingCallTypesSync:
setDefaultInitValues
initWithName:queue:
setInitialLimitingCallKinds:
setLimitingCallKindsSync:
databaseChanged:
setDatabaseChangedNotificationRef:
addressBookChanged:
setAddressBookChangedNotificationRef:
databaseChangedNotificationRef
removeObserver:
addressBookChangedNotificationRef
objectAtIndex:
addressBookRecordId
indexOfObjectPassingTest:
addressBookChanged
setCacheIsDirty:
setReCoalesce:
fetchRecentCallsSyncWithCoalescing:
unsignedIntValue
coalesceWithCall:withStrategy:
removeLastObject
coalescingHash
setObject:atIndexedSubscript:
numberOfOccurrences
callOccurrences
copy
setUniqueId:
unsignedIntegerValue
setBytesOfDataUsed:
setMediaType:
setTtyType:
setServiceProvider:
setCallOccurrences:
setMultiCall:
multiCall
unCoalesceCall:
sortedArrayUsingDescriptors:
coalesceCalls:
addObjectsFromArray:
evaluateWithObject:
applyPredicate:toCalls:
cacheIsDirty
callTypeAsString:
getLimitsDictionary
syncManager
fetchObjectsWithLimits:
numberWithUnsignedInteger:
setUnreadCallCount:
setUncoalescedUnFilteredRecentCalls:
reCoalesce
uncoalescedUnFilteredRecentCalls
predicateFormat
uncoalescedRecentCallsSync
countCallsWithPredicateSync:
unreadCallCount
callStatus
generateSyncTransactions
insert:
insertWithoutTransaction:
updateAllObjects:
updateObjects:
appendString:
deleteTheseCallsSync:
deleteAllCallsSync
deleteCall:
deleteObjectsWithLimits:
limitingCallKindsForCallType:
deleteAllObjects
dictionaryWithObjects:forKeys:count:
insertRecordsWithoutTransactions:
CHCallStatusForCallWithDuration:isOriginated:isAnswered:
initWithFetchingLimitsDictionary:andCoalescingStrategy:andPostFetchingPredicate:withQueue:
recentCalls
recentCallsWithPredicate:
countCallsWithPredicate:
fetchUnreadCallsCount
addToCallHistory:
markAllCallsAsReadWithPredicate:
updateBytesOfDataUsedFor:with:
deleteTheseCalls:
deleteCallsWithPredicate:
deleteCallAtIndex:
deleteAllCalls
clearDatabase
setLimitingCallKinds:
setLimitingCallTypes:
setPostFetchingPredicate:
setLimitingStartDate:
setLimitingEndDate:
setCoalescingStrategy:
setShowsFaceTimeVideoCalls:
setShowsFaceTimeAudioCalls:
showsTelephonyCalls
showsFaceTimeVideoCalls
showsFaceTimeAudioCalls
limitingCallTypes
limitingStartDate
limitingEndDate
limitingCallKinds
postFetchingPredicate
coalescingStrategy
setShowsTelephonyCalls:
callTimersGetIncoming
callTimersGetOutgoing
callTimersGetLifetime
callTimersReset
flush
addMultipleCallsToCallHistory:
setGenerateSyncTransactions:
setRecentCalls:
numberOfUnseenMissedCalls
setNumberOfUnseenMissedCalls:
setSyncManager:
setUncoalescedRecentCalls:
_showsTelephonyCalls
_showsFaceTimeVideoCalls
_showsFaceTimeAudioCalls
_generateSyncTransactions
_cacheIsDirty
_reCoalesce
_limitingCallTypes
_limitingStartDate
_limitingEndDate
_limitingCallKinds
_postFetchingPredicate
_coalescingStrategy
_recentCalls
_numberOfUnseenMissedCalls
_syncManager
_uncoalescedRecentCalls
_uncoalescedUnFilteredRecentCalls
_unreadCallCount
_databaseChangedNotificationRef
_addressBookChangedNotificationRef
initDBHandle
archiveCallObject:
initWithType:andRecord:
arrayWithObject:
dbHandle
createCallRecord:
createCallRecords:
categoryForMediaType:andTTYType:
predicateForCallKind:
orPredicateWithSubpredicates:
predicateForCallKinds:
predicateForLimits:
updateCallRecords:
addUpdateTransactions:
updateAllCallRecords:
initForWritingWithMutableData:
setOutputFormat:
setRequiresSecureCoding:
encodeObject:forKey:
finishEncoding
fetchAllObjects
_transactionManager
_dbHandle
getLocationForCallerId:andIsoCountryCode:
isoCountryCodeForMCC:
isoCountryCodeIfAbsent:
mccToISOCountryCodeMap
lastQueriedISOCountryCode
currentLocale
initWithErrorCode:andDBVersion:
errorCode
setErrorCode:
dbVersion
setDbVersion:
_errorCode
_dbVersion
initWithContentsOfURL:
initWithManagedObjectModel:
metadataForPersistentStoreOfType:URL:error:
isConfiguration:compatibleWithStoreMetadata:
getPersistentCoordinator:
setFPersistentStoreCoordinator:
versionIdentifiers
allObjects
arrayWithObjects:
mergedModelFromBundles:forStoreMetadata:
modelForDBAtLocation:
getVersionForMappingModel:
mappingModelFromBundles:forSourceModel:destinationModel:
inferredMappingModelForSourceModel:destinationModel:error:
lastPathComponent
fileExistsAtPath:
_destroyPersistentStoreAtURL:withType:options:error:
initWithSourceModel:destinationModel:
dbOptions:
migrateStoreFromURL:type:options:withMappingModel:toDestinationURL:destinationType:destinationOptions:error:
mapToDBMErrorCode:
_replacePersistentStoreAtURL:destinationOptions:withPersistentStoreFromURL:sourceOptions:storeType:error:
migrateDataStoreAtLocation:withGetDestinationModel:isEncrypted:
addPersistentStoreWithType:configuration:URL:options:error:
persistentStoreForURL:
removePersistentStore:error:
setPersistentStoreCoordinator:
managedObjectModel
entitiesByName
metadataForPersistentStore:
setMetadata:forPersistentStore:
valueForKey:
URLWithString:
managedObjectIDForURIRepresentation:
objectWithID:
destroyDBAtLocation:withModelAtLocation:
moveDBAtLocation:toLocation:withModelAtLocation:
getStoreURLforContext:
mangedObjectWithURI:inContext:
makeDatabaseAtURLClassCDataProtected:
replacePersistentStore:withURL:
logHandleForDomainSync:
createLogHandleForDomainSync:
.cxx_construct
fLogHandles
hasTable
table
_table
_logHandle
transactionType
encodeInteger:forKey:
record
decodeIntegerForKey:
setTransactionType:
decodeObjectOfClass:forKey:
setRecord:
toString:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
initWithString:andRecord:
_transactionType
_record
parseCallStatus_sync:isAnswered:isOriginated:
disconnectedCause
bytesOfDataUsed
callerNetworkName
callerIdAvailability
numberWithShort:
devicePhoneId
isoCountryCode
setLocation:
handleType
getCallStatus_sync:isOriginated:isAnswered:
setCallerId:
setDisconnectedCause:
setCallerNetworkName:
setCallerIdAvailability:
setDevicePhoneId:
setIsoCountryCode:
location
setCallerIdLocation:
setCallCategory:
setHandleType:
recentCallQueue
setClientObject_sync:withStoreObject:
init:
handleCallRecordSave_sync:
handleCallTimersSave_sync:
convertToCHRecentCalls_sync:
deleteObjectWithUniqueId:error:
deleteObjectWithUniqueId:error:save:
deleteInteractionWithCall:
deleteObjectsWithUniqueIds:error:
deleteInteractionWithCalls:
createCallRecord:error:
createCallRecord:error:save:
setStoreObject_sync:withClientObject:
donateCallHistoryInteractionWithCall:
createCallRecords:error:
updateCallRecords:error:
updateCallRecords:error:save:
updateCallRecords_sync:error:save:
updateAllCallRecords:error:
updateAllCallRecords_sync:error:
willHandleNotification_sync:
object
allKeys
updateCallRecord_sync:withChangeDict:
manager
saveDatabase:
dbStoreHandle
setRecentCallQueue:
_observerCallTimersRef
_recentCallQueue
getNextVersionToDowngradeTo:
getNextVersionToMigrateToCurrentVersion:
getNextVersionToDowngradeTo:withSourceVersion:
bootUpDBAtLocationWithRecovery:isEncrypted:
createCallDBProperties
bootUpDBAtLocation:isEncrypted:
handleBootUpFailure:
URLByAppendingPathExtension:
fetchRequestWithEntityName:
setResultType:
sortDescriptorWithKey:ascending:
propertiesByName
setPropertiesToFetch:
createMOCForDBAtLocation:dbVersion:isEncrypted:
getUniqueIdsForAllRecords:
getObjectIdsForAllRecords:
getObjectIdsForDuplicateRecordsWithUniqueIds:andHavingObjectIds:
initWithObjectIDs:
executeRequest:error:
result
modifyCallRecordForDBAtLocation:dbVersion:isEncrypted:modifyCallRecord:
populateServiceProviderAndCallCategory:dbVersion:isEncrypted:
populateHandleType:dbVersion:isEncrypted:
prepareDatabaseForNextStepInMigration:dbVersion:isEncrypted:
getDestinationModel:
removeDuplicatesFromDBAtLocation:dbVersion:isEncrypted:
handleDatabaseMigration:isEncrypted:isRetry:
getUUIDsOfNMostRecentRecords:fromManagedObjectContext:
initWithFetchRequest:
prepareForMigrationDBAtURL:withModelAtURL:andIsEncrypted:
downgradeDatabaseAtLocation:toVersion:
callerIdForDisplay
initWithHandle:displayName:contactIdentifier:
mediaType
initWithContacts:
setPreferredCallProvider:
initWithIntent:response:
setDirection:
setIntentHandlingStatus:
donateInteractionWithCompletion:
deleteInteractionsWithIdentifiers:completion:
initWithScheme:host:path:
setSize:
setHasSize:
hasSize
setHasFetchLimit:
hasFetchLimit
setSchema:
setHasSchema:
hasSchema
size
fetchLimit
schema
_fetchLimit
_schema
_size
_logger
_synchronizable
setPhoneBookManager:
registerForCurrentLocaleDidChangeNotification
decodeBoolForKey:
decodeDoubleForKey:
containsValueForKey:
fixCallTypeInfo
handleCurrentLocaleDidChangeNotification:
addObserver:selector:name:object:
setCallerIdFormatted:
ttyType
mobileCountryCode
setMobileCountryCode:
mobileNetworkCode
setMobileNetworkCode:
callerIdIsBlocked
setCallerIdIsBlocked:
callerNetworkFirstName
setCallerNetworkFirstName:
callerNetworkSecondName
setCallerNetworkSecondName:
setCallerIdLabel:
unreadCount
setUnreadCount:
setAddressBookRecordId:
setAddressBookCallerIDMultiValueId:
setAddressBookRecordRef:
clientAddressBookRecordId
setClientAddressBookRecordId:
callerNameSync
setCallerName:
isSameDayAsDate:
addressBookRecordIdSync
callTTYTypeAsString:
callMediaTypeAsString:
callStatusAsString:
isAddressBookContactASuggestionSync
canCoalesceSyncWithRecentsStrategyWithCall:
canCoalesceSyncWithCollapseIfEqualStrategyWithCall:
canCoalesceSyncWithCall:withStrategy:
callOccurrencesSync
addOccurrencesFromArraySync:
array
compare:
subarrayWithRange:
numberOfOccurrencesSync
createOccurrenceArraySync
setValue:forKey:
fetchAddressBookInfoFromCacheForKey:
callerIdIsEmailAddressSync
phoneBookManager
getRecordId:andISOCountryCode:isEmail:
insertAddressBookInfoIntoCache:forKey:
isABContactASuggestion
fetchAndSetAddressBookIdsSync
addressBookCallerIDMultiValueIdSync
containsString:
handleTypeSync
rangeOfString:
substringToIndex:
substringFromIndex:
addressBookRecordRefSync
pointerValue
getPersonsNameForRecord:
resourcePath
localizedStringForKey:value:table:
callerIdForDisplaySync
getLocalizedStringSync:
callerNameForDisplaySync
getLocalizedCallerIdLabelForRecord:withMultiValueId:withCallerIdIsEmail:
callerIdLabelSync
arrayWithCapacity:
locationName
enumerateResolutionsUsingBlock:
resolvePhoneNumbers:handler:queue:
callerIdLocationSync
isEqualToDate:
appendFormat:
callOccurrencesAsStringSync
callCategoryAsString:
callHandleTypeAsString:
updateTTYAndMediaType
getCallTypeForCategory:andServiceProvider:
mediaTypeForCallCategory:
ttyTypeForCallCategory:
encodeBool:forKey:
encodeDouble:forKey:
canCoalesceWithCall:withStrategy:
addressBookCallerIDMultiValueId
callerIdIsEmailAddress
callerName
callerNameForDisplay
callerIdLabel
callerIdLocation
callerIdSubStringForDisplay
representsCallAtDate:
isAddressBookContactASuggestion
descriptionInDepth
addressBookRecordRef
mobileOriginated
setMobileOriginated:
_read
_callerIdIsBlocked
_multiCall
_answered
_mobileOriginated
_callerIdAvailability
_callerNetworkName
_handleType
_uniqueId
_devicePhoneId
_callerId
_callType
_callStatus
_callCategory
_serviceProvider
_date
_bytesOfDataUsed
_isoCountryCode
_mobileCountryCode
_mobileNetworkCode
_disconnectedCause
_callerNetworkFirstName
_callerNetworkSecondName
_unreadCount
_addressBookRecordRef
_clientAddressBookRecordId
_mediaType
_ttyType
_callerName
_callOccurrences
_callerIdLabel
_callerIdLocation
_addressBookRecordId
_addressBookCallerIDMultiValueId
_callerIdFormatted
_phoneBookManager
_duration
currentCalendar
components:fromDate:
year
month
setSizeBytes:
setHasSizeBytes:
hasSizeBytes
setRecords:
setHasRecords:
hasRecords
sizeBytes
records
_records
_sizeBytes
createAddressBook
cleanUpAddressBookCache_sync
addressBookCache
objectEnumerator
nextObject
removeAllObjects
sendABChangedNotificationSyncWithUserInfo:
addressBook
revertAddressBook:
performQuery_sync:
setAddressBook:
setAddressBookCache:
_addressBook
_addressBookCache
setTransactionLogCount:
setHasTransactionLogCount:
hasTransactionLogCount
transactionLogCount
_transactionLogCount
setHasUploadRecordCount:
hasUploadRecordCount
setHasDownloadRecordCount:
hasDownloadRecordCount
uploadRecordCount
downloadRecordCount
_downloadRecordCount
_uploadRecordCount
setProcname:
setHasPid:
hasPid
hasProcname
procname
_pid
_procname
migrate:queue:block:
_migrator
archivedDataWithRootObject:
remoteObjectProxyWithErrorHandler:
_connection
_interface
resourceValuesForKeys:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
lowercaseString
stringWithUTF8String:
stringByAppendingString:
setHasCallType:
hasCallType
setHasCallStatus:
hasCallStatus
valueWithPointer:
fetchABRecord:andISOCountryCode:isEmail:
intValue
createXpcConnection
createXpcConnection_sync
setupConnectionHandlers_sync
appendTransactions_sync:
_queuedTransactions
initWithQueue:withName:withTimeout:withCallback:
cancel
_timer
reason
tranactionCreated
initWithReason:
setTranactionCreated:
setReason:
_tranactionCreated
_reason
Ignoring fingerprinted call %@ without a date
Ignoring fingerprinted call %@ without a caller ID
Ignoring fingerprinted call %@ with an empty caller ID
Fetching local call record using predicate %@
Could not find fingerprinted call %@ in local data store
Found %lu calls matching %@ in local data store
Did not find filtered caller ID result matching call %@
Fingerprint matched local call %@ with remote call %@
Submitted metric for %u
No call db properties object found
Multiple call db properties object found
Failed to create call db manager
Failed to created the handle
Handling persistent store added notification, store count: %lu
Sending out database change notification when data store is added, reason: %@
Moving records from temp to permanent database
Input database URL is nil
Unable to query version of the database at location: %@
Database at location %@ has version %ld
Input database not in use
Failed to look up entity: %@
Failed to execute fetch on input database
Moving %lu records from input database %@ into permanent database
Failed to save calls from input database to perm database
Failed to delete calls from the input database
Entity %@ not found
Context for given entity %@ not created
Fetch request failed with error: %@
While creating call record entity %@ not found
Database has no calls with %@ UUID
Multiple object with same uniqueId found but only one requested. Returning last matched object.
Record with %@ uniqueId does not exist
Record with %@ uniqueIds does not exist
Save performed successfully
Failed to save changes to persistent store error: %@
No persistent stores. Not performing save.
No changes in the data context to save
Failed to save call db properties to persistent store: %@
Encryption transformation is only available for NSString
Encryption reverse transformation is only available for NSData
Temporary database URL is nil
Temporary data store not used, nothing to move
Failed to add data store at location: %@
Failed to execute fetch on temporary database
Connection to Synchelper interrupted
Connection to Synchelper invalidated
createPermanent client: %@
MetaInfo says permanent database should be initialized but looks like not
Permanent database version: %ld is not the same as current version: %ld
Got error code: %@ while getting permanent data store database location
createTemporary client: %@
MetaInfo says temporary database should be initialized but looks like not
Temporary database version: %ld is not the same as current version: %ld
Got error code: %@ while getting temporary data store database location
Poking sync helper to initialize data store
Boot up result: %@
Permanent database state in client is out of sync with the server.
Temporary database state in client is out of sync with the server.
%@ in a subclass is not overridden
Bundle location not found
Failed to synchronize preference domain: %@
File at path: %@ is not readable
Unlocked since boot %d
Not formatted. So let's create a CFPhoneNumberRef. Num: %@, iso: %@
No ISO. Using locale. New ISO: %@
Creating CHManager with default values!
Creating CHManager with user values!
CHManager is getting destroyed...
--- AddressBook changed! Invalidating call's AB info.
--- Got Database changed notification. %u call(s) changed due to %@! Make cache dirty and send client DB Changed Notification
--- Got Database changed notification due to an external change! Make cache dirty and send client DB Changed Notification
Coalescing with kCHCoalescingStrategyRecents
Coalescing with kCHCoalescingStrategyCollapseIfEqual
%@. Dumping logs...
Returning calls with no coalescing since none or invalid (%@) strategy was provided
No calls to coalesce
==> %@
<== %@ => %lu calls
No predicate to apply, return all calls
==> %@(%@)
<== %@(%@) => %lu calls
Fetching from DB and updating cache. And coalescing: %@, With callType limit: %@
SyncManager returned %lu calls
User fetching without coalescing!
No fetching required. Recoalscing & applying global filter
After coalescing we have %lu calls
<== %@ returns %lu calls
User requested to count calls with predicate, %@. Returning %lu.
<== %@(%@) %lu calls
User requested to insert new call without sync transactions: 
User requested to mark ALL calls as read
User requested to mark some calls with this predicate, %@, as read
==> %@(%@, %@)
Cannot update. Nil unique id or bytes used!
=> %@(%@)
=> %@
=> deleteCall:%@
=> %@:%@
User requested to delete ALL calls
==> %@: User requested to delete call at index, %lu
==> %@: User requested to delete ALL calls (with the global limits of course)
Setting limiting call kinds: %@
Setting limiting call type to %@ (0x%x). Cache is drity.
==> %@:%@(0x%x)
==> %@:%@
==> %@: User setting showsFaceTimeVideoCalls to %d
Old limitingCallType: 0x%x (%@). OR Mask: 0x%x. New limitingCallType: 0x%x.
Old limitingCallType: 0x%x (%@). AND Mask: 0x%x. New limitingCallType: 0x%x.
==> %@: User setting showsFaceTimeAudioCalls to %d
Old limitingCallType: 0x%x. OR Mask: 0x%x. New limitingCallType: 0x%x.
Old limitingCallType: 0x%x. AND Mask: 0x%x. New limitingCallType: 0x%x.
==> %@: User setting showsTelephonyCalls to %d
==> %@ => %f seconds
==> %@: User requested to reset call timers
fetching with predicate: %@
Call Record %@ already deleted
No Call Records found
Deleting all %lu objects
Deleting all %d objects
Deleting %d objects
Cannot delete %@ call placed on %@ with nil unique ID
Failed to created managed object model
Invalid value dbURL: %@ or modelURL: %@
Data store at path %@ does not exist
Unexpected error: %@ when querying meta data for database: %@, treating as data store not initialized
Failed to get the destination managed object model
Destination store at location %@ is not compatible with newer version, migration required
Failed to create peristent coordinator for persistent store
Either version indentifier set is nil (%p) or has count not equal to 1(%lu)
Failed to get meta data for source data store: %@
Failed to look up the managed object model for the source meta data
Failed to get the source version
Failed to get the destination version
Migrating from version %ld to %ld
Destination store at location %@ is compatible with newer version no migration required
Failed to look for the mapping bundle in the framework bundle, now inferring automatically
Failed to infer the mapping model automatically
Failed to delete data store at path: %@
Failed to migrate the store at location: %@ with error %@
Failed to copy data store src: %@ dst: %@ error: %@
Failed to remove store at URL: %@ with error %@
Database location is nil
Failed to create directory at path: %@
Failed to add the store at location %@ with error %@
Persistent store at URL %@ is not present
Failed to remove persistent store at URL:%@ with error:%@
Persistent store co-ordinator is nil
Managed object does not exist
Coordinator not set
Persistent store not found
No meta data properties dict found
Object id not found
Could not replace persistent data store at %@ with %@: %@
Fetching calls from DBStoreHandle. Got back %lu calls
Converting records into CHRecentCall objects. Returning %lu calls
Got call record save notification from other app
Got timers save notification from other app
No calls to update
Objects with given uniqueIds:%@ to update do not exist
Properties dict not found for call with uniqueId: %@
Creating permanent data store: %@
Failed to create call db properties object for permanent store
Creating temporary data store: %@
Failed to create call db properties object for temporary store
Call history database is not recoverable
Booting up the database after taking the backup of the bootless one
Objects ids(%lu) and unique ids(%lu) count mismatch
Failed to create the managed context
Removing the records with duplicate unique ids
There exist no duplicate records in the database
Failed to execute the delete request
Number of records deleted: %@
Failed to execute fetch request
Failed to perform save on the managed context
Populating service provider and call category information
Populating handle type
Performing necessary steps for migration
Migration result is: %@
Failed to remove duplicates from the database at location: %@
Restricting number of records before performing migration: %@ %@
Total number of records deleted are: %lu
Failed to get the Call DB properties entity description
Failed to get the records with error: %@
Call DB properties object already exist, not creating again
Failed to create the Call DB properties managed object
Failed to save the Call DB properties object to the database with error: %@
No data store intialization required
Error occured when device is unlocked: %@
Adding interaction for call %@
Cannot create intent for unknown media type
Unknown call direction: 0x%x
Successfully donated interaction %@ for call %@
Could not donate interaction for call %@: %@
Deleting interaction for call %@ failed: %@
Deleting interaction for call %@ success
AddressBook changed. Invalidating all AB related cache data for call %@
Cannot coalesce with call. Call service provider does not match. MyServiceProvider: %@, OtherServiceProvider: %@
Cannot coalesce with call. Calls happened on different dates.
Cannot coalesce with call. Call TTY type does not match. MyTTYType: %@, OtherTTYType: %@
Cannot coalesce with call. Call media type does not match. MyMediaType: %@, OtherMediaType: %@
Cannot coalesce with call. Call status does not match. MyStatus: %@, OtherStatus: %@
Can coalesce with RecentsStrategy with %@? %@
CollapseIfEqual: Using address book ids to possibly coalesce
CollapseIfEqual: No ABRecordIds. Using caller ids to possibly coalesce
Can coalesce with CollapseIfEqualStrategy with %@? %@
Can coalesce with %@ in %@ strategy? %@
Creating the coalescing hash. This call does not contain suggestion contact information.
==> %@ %@ %@ with %@
%@ %@ %@ with %@ = %@
Address book information for %@ not found in our cache, looking it up
Updated the ab cache. New cache: %@ 
Address book information for %@ found in our cache, using it
Got ABRecordID: %@, ABMultiValueID: %@, ABRecordRef Pointer: %p from the cache.
Fetched addressbook record id and multi value id. abRecordId: %@. abCallerIDMultiValueId: %@. Is this a Suggestion? %@
ABRecordID was searched before and not found. Don't need to look agian. Return nil.
<== %@ => %@
Caller name is null. Look in AddressBook for a name
AddressBook did not have a caller name for this caller id. Setting it to network sent name.
<== %@ = %@
MainBundle: %@
ClassBundle: %@
Caller name is nil, let's use caller id formatted
Caller id and caller name are nil, call is blocked or unknown
Could not get location information for phone number %@ error: %@
Timeout occured waiting for GeoServices to return location!
==> %@. Current location info for %@ is %@
Testing equality of unknown type. Returning false.
Could not create address book: %@
Not releasing kCHABCacheABRecordRefKey in cache item. kCHABCacheABRecordRefKey is %@
Addressbook changed %@, so reverting it and clearing our AB cache
Cannot insert %@ for key %@ into address book cache
The remote sync helper has crashed
Not able to bootup the daemon
Ignoring object that isn't a CHRecentCall: %@
Failed to obtain the proxy object with error: %@
Firing %@ notification: %@
OS version:     %@
Version:        %@
Build revision: %s
Build reason:   %s
Person was found. And the name in the AB is: %@
ABRecordRef sent is nil
%@ => %@
XPC connection is already valid!
Creating XPC connection to Sync Helper
Appending %lu transactions
Failed to send transactions to XPC service
Now have %lu queued transactions
Invalid XPC connection, attempting to create
Forwarding to XPC Service
Registering for %@
Received Sync Helper ready notification
Setting up invalidation handler
Could not get strong handle to SyncManager!
Handling invalidated XPC connection
Setting up interruption handler
Interrupted XPC connection, should be reestablished when needed
%@ waiting %f seconds
%@: task took longer than %f seconds
Goodbye from %@ timer
Canceling %@ timer
Starting XPCTransaction reason: %@
Ending XPCTransaction reason: %@
%K == %u
%K >= %@
%K <= %@
(callerId == %@)
Fingerprint
%@ %@
timestamp
success
recordCount
version
hasTimestamp
TB,N
TQ,N,V_timestamp
hasSuccess
TB,N,V_success
hasRecordCount
TI,N,V_recordCount
hasVersion
TI,N,V_version
v4@?0
queue
T@"NSObject<OS_dispatch_queue>",R,V_queue
awdServer
T@"AWDServerConnection",&,N,V_awdServer
AWDLogger
name
T@"NSString",R,V_name
userInfo
T@"NSDictionary",&,V_userInfo
kCHTimerLifetimeKey
kCHTimerOutgoingKey
kCHTimerIncomingKey
v8@?0@"NSNotification"4
com.apple.CallHistoryPluginHelper.launchnotification
calltype IN %@
unique_id == %@
unique_id IN %@
Save failed no data stores
objectId
T@"NSString",R,N,VobjectId
callDBManager
T@"CallDBManager",R,N,VcallDBManager
ch.dbhandle
callCount
hasCallCount
TI,N,V_callCount
ch.encrypttransform
kBootUpResultUsePerm
kBootUpResultUseTemp
kBootUpResultError
Undefined
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
v8@?0C4
helperConnection
T@"NSXPCConnection",&,V_helperConnection
syncHelperReadyNotificationRef
T@,&,V_syncHelperReadyNotificationRef
oldSchema
newSchema
domain
error
hasOldSchema
TI,N,V_oldSchema
hasNewSchema
TI,N,V_newSchema
hasDomain
TI,N,V_domain
hasError
TI,N,V_error
momd
storedata
CallHistory
CallHistoryTemp
CallRecord
CallDBProperties
CallHistoryDB
ch.calldbm
kCHNotifyDataStoreChangeReasonPermInitialized
kCHNotifyDataStoreChangeReasonTempInitialized
kCHNotifyDataStoreChangeReasonTempToPermSwitch
kCHNotifyDataStoreChangeReasonUnknown
%@.%@
%@/%@.%@
deviceUnlockNotificationRef
T@,&,V_deviceUnlockNotificationRef
dbManager
T@"DBManager",&,V_dbManager
deviceUnlocked
TB,V_deviceUnlocked
dataStoreType
TC,V_dataStoreType
notifyDataStoreChangeReason
TC,V_notifyDataStoreChangeReason
DatabaseVersionTemp
DatabaseVersionPerm
com.apple.callhistory.databaseInfo.plist
CHDBMetaInfoDomain
dbInfoPrefFile
T@"NSURL",&,V_dbInfoPrefFile
hasDeviceBeenUnlockedSinceBoot
TB,V_hasDeviceBeenUnlockedSinceBoot
GateKeeper
618~1
stock
%s%s
CallHistory-
formatted
TB,V_formatted
formattedPhoneNumber
T@"NSString",C,V_formattedPhoneNumber
originalPhoneNumber
T@"NSString",C,V_originalPhoneNumber
ISOCountryCode
T@"NSString",C,V_ISOCountryCode
CHPhoneNumber
timer_all
timer_incoming
timer_outgoing
timer_lifetime
timer_last
timer_last_reset
T@"NSNumber",&,D,N
B16@?0@4I8^B12
Coalesce calls with CIE found call %lu with nil hash (caller id: %@, unique id: %@)
@"NSArray"4@?0
date
(read == FALSE)
B4@?0
@"NSDate"4@?0
@"NSPredicate"4@?0
@"NSString"4@?0
recentCalls
T@"NSArray",&,N,V_recentCalls
numberOfUnseenMissedCalls
Ti,V_numberOfUnseenMissedCalls
syncManager
T@"<SyncManagerProtocol>",&,V_syncManager
cacheIsDirty
TB,V_cacheIsDirty
reCoalesce
TB,V_reCoalesce
uncoalescedRecentCalls
T@"NSArray",&,N,GuncoalescedRecentCallsSync,V_uncoalescedRecentCalls
uncoalescedUnFilteredRecentCalls
T@"NSArray",&,V_uncoalescedUnFilteredRecentCalls
unreadCallCount
T@"NSNumber",&,V_unreadCallCount
databaseChangedNotificationRef
T@,&,V_databaseChangedNotificationRef
addressBookChangedNotificationRef
T@,&,V_addressBookChangedNotificationRef
showsFaceTimeVideoCalls
TB,N,V_showsFaceTimeVideoCalls
showsFaceTimeAudioCalls
TB,N,V_showsFaceTimeAudioCalls
showsTelephonyCalls
TB,N,V_showsTelephonyCalls
generateSyncTransactions
TB,V_generateSyncTransactions
limitingCallTypes
TI,N,V_limitingCallTypes
limitingStartDate
T@"NSDate",C,N,V_limitingStartDate
limitingEndDate
T@"NSDate",C,N,V_limitingEndDate
limitingCallKinds
T@"NSArray",C,N,V_limitingCallKinds
postFetchingPredicate
T@"NSPredicate",C,N,V_postFetchingPredicate
coalescingStrategy
T@"NSString",C,N,V_coalescingStrategy
CHManager
%K == %@
com.apple.callhistory.RecentDeletedNotification
com.apple.callhistory.RecentsClearedNotification
dbHandle
T@"CallHistoryDBClientHandle",R,N,V_dbHandle
SyncManager
ch.dbm
kDBMDataStoreDoesNotExist
kDBMDataStoreNotMigrated
kDBMNoError
kDBMOtherError
kDBMConstraintViolationError
undefined
errorCode
Ti,N,V_errorCode
dbVersion
Ti,N,V_dbVersion
fPersistentStoreCoordinator
T@"NSPersistentStoreCoordinator",&,N,VfPersistentStoreCoordinator
com.apple.callhistory.CHLogServer
com.apple.callhistory
table
hasTable
TB,R,N
T@"NSString",&,N,V_table
Insert
Update
Delete
type
record
supportsSecureCoding
TB,R
transactionType
TI,V_transactionType
T@"NSData",&,V_record
ch.clientdbhandle
CHRecentCallQueue
@"NSMutableArray"4@?0
@"CHRecentCall"4@?0
@"NSNumber"4@?0
@"CallDBManager"4@?0
recentCallQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_recentCallQueue
dbStoreHandle
T@"CallHistoryDBHandle",R,N,VdbStoreHandle
kTmpDBLocationKey
kMoveCallRecordsFromTemporaryStoreNotitification
%@.%@/%@ %@
@"NSURL"8@?0i4
backup
Database-migration-failed
v8@?0@"CallRecord"4
NOT (%K IN %@)
intent
v8@?0@"NSError"4
mobile
com.apple.callhistory.save
file
/var/mobile/
Library
Logs
BuildVersion
InternalBuild
CarrierInstallCapability
ReleaseType
Desense
size
fetchLimit
schema
hasSize
TI,N,V_size
hasFetchLimit
TI,N,V_fetchLimit
hasSchema
TI,N,V_schema
kCHCallOccurrenceUniqueIdKey
kCHCallOccurrenceCallTypeKey
kCHCallOccurrenceCallStatusKey
kCHCallOccurrenceDurationKey
kCHCallOccurrenceDateKey
kCHCallOccurrenceDataUsageKey
kCHCallOccurrenceServiceProviderKey
kCHCallOccurrenceMediaTypeKey
kCHCallOccurrenceTTYTypeKey
<<RecentsNumberLocationNotFound>>
uniqueId
callerId
callType
callStatus
callerIdAvailability
read
unreadCount
duration
bytesOfDataUsed
mobileCountryCode
mobileNetworkCode
devicePhoneId
isoCountryCode
callerIdLocation
callCategory
handleType
serviceRadar
Default Value
BLOCKED_CALLER
UNKNOWN_CALLER
v20@?0@"NSString"4@"GEOPhoneNumberResolutionResult"8@"NSError"12^B16
v8@?0@"GEOPhoneNumberResolutionResultSet"4
UNKNOWN_LABEL
--------------------------
Unique Id: %@
Device PhoneId: %@
Caller Id: %@
Caller Id Formatted: %@
Caller Name: %@
Caller Name For Display: %@
Address Book Id: %@
Call Type: %@
Call Status: %@
Date: %@
Country Code (ISO): %@
Duration: %f
Read: %d
Bytes of data used: %@
Mobile country code: %@
Mobile network code: %@
Multi-Call: %@
Call Occurrences: %@
Unread count: %lu
@"NSMutableString"4@?0
Call Category: %@
Call Media Type: %@
Call TTY Type: %@
Handle Type: %@
Call Service Provider: %@
Caller Id Availability: %@
Caller Id Blocked?: %d
Caller Network Name (first, last, name): %@, %@, %@
Caller Id Label: %@
Caller Id Location: %@
Disconnect Cause: %@
Merged Call %lu:
{%@, %@}
Unknown
CHRecentCallMediaTypeAudio
CHRecentCallMediaTypeVideo
CHRecentCallMediaTypeUnknown
CHRecentCallTTYTypeNone
CHRecentCallTTYTypeDirect
CHRecentCallTTYTypeRelay
CHRecentCallHandleTypeGeneric
CHRecentCallHandleTypePhoneNumber
CHRecentCallHandleTypeEmailAddress
kCallTypeNormal
kCallTypeVoicemail
kCallTypeVOIP
kCallTypeFaceTimeVideo
kCallTypeFaceTimeAudio
kCallTypeAll
kCallTypeTelephony
kCallTypeFaceTime
kCallStatusConnectedIncoming
kCallStatusConnectedOutgoing
kCallStatusAnsweredElsewhere
kCallStatusMissed
kCallStatusCancelled
kCallStatusConnected
kCallStatusAll
kCallStatusAllButMissed
kCHCallCategoryVideo
kCHCallCategoryAudio
kCHCallCategoryTTYDirect
kCHCallCategoryTTYRelay
callerName
T@"NSString",C,N,V_callerName
callerIdIsBlocked
TB,V_callerIdIsBlocked
callerNetworkFirstName
T@"NSString",C,V_callerNetworkFirstName
callerNetworkSecondName
T@"NSString",C,V_callerNetworkSecondName
TI,V_unreadCount
callOccurrences
T@"NSMutableArray",&,N,V_callOccurrences
callerIdLabel
T@"NSString",C,N,V_callerIdLabel
T@"NSString",C,N,V_callerIdLocation
addressBookRecordId
T@"NSString",C,N,V_addressBookRecordId
addressBookCallerIDMultiValueId
T@"NSString",C,N,V_addressBookCallerIDMultiValueId
multiCall
TB,V_multiCall
callerIdFormatted
T@"NSString",C,N,GcallerIdForDisplay,V_callerIdFormatted
phoneBookManager
T@"<CHPhoneBookManagerProtocol>",&,V_phoneBookManager
answered
TB,V_answered
mobileOriginated
TB,V_mobileOriginated
T@"NSString",C,V_uniqueId
T@"NSString",C,V_devicePhoneId
T@"NSString",C,V_callerId
callerNetworkName
T@"NSString",C,N,V_callerNetworkName
TI,N,V_callType
TI,V_callStatus
TI,N,V_callCategory
serviceProvider
T@"NSString",C,N,V_serviceProvider
T@"NSDate",C,V_date
Td,V_duration
T@"NSNumber",C,V_bytesOfDataUsed
TB,N,V_read
T@"NSString",C,V_isoCountryCode
T@"NSString",C,V_mobileCountryCode
T@"NSString",C,V_mobileNetworkCode
disconnectedCause
T@"NSNumber",C,V_disconnectedCause
TI,N,V_callerIdAvailability
addressBookRecordRef
T@"NSValue",C,V_addressBookRecordRef
clientAddressBookRecordId
T@"NSString",C,V_clientAddressBookRecordId
mediaType
Ti,N,V_mediaType
ttyType
Ti,N,V_ttyType
Ti,N,V_handleType
CHRecentCall
sizeBytes
records
hasSizeBytes
TI,N,V_sizeBytes
hasRecords
TI,N,V_records
kCHABCacheCallerIdKey
externally
internally
AddressBook Ref: %p 
AddressBook Cache: %@
addressBook
T^v,V_addressBook
addressBookCache
T@"NSMutableDictionary",&,V_addressBookCache
SharedAddressBook
transactionLogCount
hasTransactionLogCount
TI,N,V_transactionLogCount
uploadRecordCount
downloadRecordCount
hasUploadRecordCount
TI,N,V_uploadRecordCount
hasDownloadRecordCount
TI,N,V_downloadRecordCount
calltype
address
unique_id
call_category
service_provider
T@"NSString",&,D,N
T@"NSDate",&,D,N
face_time_data
originated
disconnected_cause
number_availability
device_id
iso_country_code
location
handle_type
procname
hasPid
TI,N,V_pid
hasProcname
T@"NSString",&,N,V_procname
v8@?0B4
ch.calldbmigrator
kCallUpdatePropertyRead
kCallUpdatePropertyUniqueId
kCallUpdatePropertyBytesUsed
kCallUpdatePropertyCallStatus
com.apple.CallHistorySyncHelper
com.apple.CallHistoryPluginHelper
SharedUtilities
CallHistory: Directory creation failed at location %@ error: %@
CallHistory: Expected a directory at location %@ but found a file
kDBLNoError
kDBLNoSuchFileError
kDBLOtherError
hasCallType
hasCallStatus
TI,N,V_callStatus
v8@?0^v4
IOS-CHPhoneBookManager
kCallHistoryDatabaseChangedNotification
kCallHistoryTimersChangedNotification
kCallHistoryAddressBookChangedInternalNotification
kCallHistoryDatabaseRemoteUpdateReadNotification
kCallHistoryDatabasePluginUpdateNotification
kCallHistoryDistributedSaveNotification
kCallHistoryDatabaseChangedInternalNotification
kCallHistoryDeviceUnlockedNotification
kCallHistoryTimersDistributedSaveNotification
kCallHistorySyncHelperReadyNotification
kCHCoalescingStrategyRecents
kCHCoalescingStrategyCollapseIfEqual
kCHLimitCallTypeKey
kCHLimitStartDateKey
kCHLimitEndDateKey
kCHLimitCallKindsKey
kCHMediaTypeKey
kCHTTYTypeKey
kCHServiceProviderKey
kShowsFaceTimeVideoCallsKey
kShowsFaceTimeAudioCallsKey
kShowsTelephonyCallsKey
kNotificationReason
kNotificationChangeCount
External
Internal
NoChange
kCHABCacheABRecordIdKey
kCHABCacheABMultiValueIdKey
kCHABCacheABRecordRefKey
com.apple.Telephony
com.apple.FaceTime
kABRecordInfoNotFound
kCHCallerIdAvailable
kCHCallerIdBlocked
kCHCallerIdUnavailable
TransactionManager
WatchDogTimer
tranactionCreated
TB,V_tranactionCreated
reason
T@"NSString",&,V_reason
XPCTransaction
CallFingerprint
AWDCallHistoryCommCenterMigration
NSCopying
CHSynchronizable
CHSynchronizableProtocol
AWDLogger
NotificationSender
CallHistoryDBHandle
AWDCallHistoryDeviceUnlocked
EncryptionTransformer
SyncProtocol
NSObject
CallDBManagerClient
AWDCallHistoryDatabaseMigration
CallDBManager
CallDBMetaInfo
AWDCallHistoryDeleteAll
GateKeeper
AWDCallHistoryCallAddedBeforeUnlock
CHPhoneNumber
CallDBProperties
CHManager
SyncManager
SyncManagerProtocol
CHMigrationPolicy
DBMigrationResult
DBManager
AWDCallHistoryGizmoBootstrap
CHLogServer
AWDCallHistoryDatabaseSaveError
AWDCallHistoryUninitializedDatabaseSave
CHLogger
CHLoggerProtocol
Transaction
NSSecureCoding
NSCoding
CallHistoryDBClientHandle
CallDBManagerServer
CHInteraction
InteractionProtocol
AWDCallHistoryMissingCloudChangeToken
AWDCallHistoryDatabaseInfo
CHSynchronizedLoggable
CHRecentCall
DayComparison
AWDCallHistoryTransactionLogSize
CHSharedAddressBook
AWDCallHistorySyncOverLimit
AWDCallHistorySync
CallRecord
AWDCallHistoryErrorReport
AWDCallHistoryEntitlementRejection
CHMigrator
CallDBMigrator
AWDCallHistoryGizmoDatabaseMigrationFailure
AWDCallHistoryNilUuid
CHPhoneBookIOSManager
CHPhoneBookManagerProtocol
AWDCallHistoryMalformedCloudChangeToken
TransactionManager
WatchDogTimer
XPCTransaction
B16@0:4@8@12
@16@0:4@8@12
@12@0:4^{_NSZone=}8
v16@0:4Q8
v12@0:4B8
B8@0:4
v12@0:4I8
@8@0:4
B12@0:4@8
v12@0:4@8
I8@0:4
Q8@0:4
{?="timestamp"b1"recordCount"b1"version"b1"success"b1}
v12@0:4@?8
v12@0:4@?<v@?>8
@12@0:4@?8
@12@0:4@?<@@?>8
B12@0:4@?8
B12@0:4@?<B@?>8
@"NSObject<OS_dispatch_queue>"8@0:4
@12@0:4r*8
@12@0:4@8
v8@0:4
@"NSObject<OS_dispatch_queue>"
v16@0:4@8I12
v16@0:4B8I12
v20@0:4B8i12i16
v16@0:4i8@12
v16@0:4I8I12
v12@0:4i8
@"AWDServerConnection"
@"NSString"
@"NSDictionary"
v20@0:4@8@12i16
@20@0:4@8@12B16
@12@0:4I8
B16@0:4@8^@12
B12@0:4^@8
@"NSManagedObjectContext"
@"CallDBManager"
{?="timestamp"b1"callCount"b1}
#8@0:4
v12@0:4@?<v@?B>8
v12@0:4@"NSArray"8
v12@0:4@?<v@?@"NSString">8
v16@0:4@8@?12
v16@0:4@"NSArray"8@?<v@?B>12
v12@0:4@?<v@?C>8
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B12@0:4#8
B12@0:4@"Protocol"8
B12@0:4:8
Vv8@0:4
^{_NSZone=}8@0:4
@"NSString"8@0:4
@12@0:4^C8
@"NSXPCConnection"
{?="timestamp"b1"domain"b1"error"b1"newSchema"b1"oldSchema"b1}
@20@0:4B8B12^C16
C8@0:4
v12@0:4C8
@"DBManager"
i12@0:4B8
v16@0:4i8B12
B12@0:4B8
@"NSURL"
{?="timestamp"b1"recordCount"b1}
{?="timestamp"b1}
I24@0:4d8B16B20
@24@0:4@8@12@16@20
@12@0:4B8
I12@0:4@8
v16@0:4@8@12
d8@0:4
i8@0:4
@"NSDate"
@"NSArray"
@"NSPredicate"
@"<SyncManagerProtocol>"
@"NSNumber"
v12@0:4@"CHRecentCall"8
@"NSArray"8@0:4
@"CHRecentCall"12@0:4@"NSString"8
@"NSArray"12@0:4@"NSDictionary"8
v12@0:4@"NSString"8
v12@0:4@"NSDictionary"8
@"TransactionManager"
@"CallHistoryDBClientHandle"
@"NSMutableDictionary"
@16@0:4i8i12
i16@0:4@8@12
i12@0:4@8
@20@0:4@8@?12B16
B20@0:4@8@12@16
v20@0:4@8@12@16
B16@0:4@8B12
@"NSPersistentStoreCoordinator"
{?="timestamp"b1"error"b1}
^{os_log_s=}12@0:4r*8
v12@0:4r*8
{unordered_map<const char *, os_log_s *, std::__1::hash<const char *>, std::__1::equal_to<const char *>, std::__1::allocator<std::__1::pair<const char *const, os_log_s *> > >="__table_"{__hash_table<std::__1::__hash_value_type<const char *, os_log_s *>, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, os_log_s *>, std::__1::hash<const char *>, true>, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, os_log_s *>, std::__1::equal_to<const char *>, true>, std::__1::allocator<std::__1::__hash_value_type<const char *, os_log_s *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *> *> > >="__first_"^^{__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *>}"__second_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *> *> >="__first_"L}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *> > >="__first_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *> *>="__next_"^{__hash_node<std::__1::__hash_value_type<const char *, os_log_s *>, void *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const char *, std::__1::__hash_value_type<const char *, os_log_s *>, std::__1::hash<const char *>, true> >="__first_"L}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<const char *, std::__1::__hash_value_type<const char *, os_log_s *>, std::__1::equal_to<const char *>, true> >="__first_"f}}}
{?="timestamp"b1"domain"b1"error"b1}
^{os_log_s=}8@0:4
^{os_log_s=}
v12@0:4@"NSCoder"8
@12@0:4@"NSCoder"8
@16@0:4I8@12
@"NSData"
v20@0:4I8^B12^B16
I20@0:4@8@12@16
B20@0:4@8^@12B16
@16@0:4@8^@12
@20@0:4@8^@12B16
@"CallHistoryDBHandle"
@12@0:4i8
i12@0:4i8
i16@0:4i8i12
@16@0:4@8i12
@20@0:4@8i12B16
B20@0:4@8i12B16
v24@0:4@8i12B16@?20
v20@0:4@8i12B16
B20@0:4@8B12B16
v20@0:4@8@12B16
{?="timestamp"b1"fetchLimit"b1"schema"b1"size"b1}
@"NSObject<OS_os_log>"8@0:4
@16@0:4r*8@12
@"CHLogger"
@"CHSynchronizable"
i12@0:4I8
I16@0:4i8i12
I12@0:4I8
I16@0:4I8@12
v16@0:4d8
@"NSValue"
@"NSMutableArray"
@"<CHPhoneBookManagerProtocol>"
{?="timestamp"b1"records"b1"sizeBytes"b1}
^v8@0:4
v12@0:4^v8
{?="timestamp"b1"transactionLogCount"b1}
{?="timestamp"b1"downloadRecordCount"b1"uploadRecordCount"b1}
{?="timestamp"b1"pid"b1}
v20@0:4@8@12@?16
@"CallDBMigrator"
@"NSXPCInterface"
{?="timestamp"b1"callStatus"b1"callType"b1}
@"NSDictionary"20@0:4@"NSString"8@"NSString"12B16
@12@0:4r^v8
@"NSString"12@0:4r^v8
@20@0:4r^v8@12B16
@"NSString"20@0:4r^v8@"NSString"12B16
@12@0:4^v8
@20@0:4^v8@12B16
@28@0:4@8@12d16@?24
@"NSObject<OS_dispatch_source>"
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
zPLR
