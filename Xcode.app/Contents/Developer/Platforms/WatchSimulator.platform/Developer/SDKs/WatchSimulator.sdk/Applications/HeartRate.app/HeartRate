TransitionToMeasuringAfterLaunch
NLSuccessfulGlanceMeasurement
HEART_RATE
Localizable
ShouldMeasureOnCharger
com.apple.HeartRate
v4@?0
HEART_RATE_EXPLAIN
HEART_RATE_CHARGING
HEART_RATE_DISABLED
hash
TI,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
state
TI,N,V_state
launchBundleID
T@"NSString",&,N,V_launchBundleID
launchURL
T@"NSURL",&,N,V_launchURL
window
T@"UIWindow",&,N
T@"UIWindow",&,N,V_window
HeartOutline
HeartReloadArrow
HeartOutlineSprite-10x10
-[NLHeartRateView initWithFrame:andState:]
/BuildRoot/Library/Caches/com.apple.xbs/Sources/NanoLifestyle_Sim/NanoLifestyle-738.7.12/HeartRate/NLHeartRateView.m
state == NLHeartRateSessionStateFirstLaunch || state == NLHeartRateSessionStateOnCharger || state == NLHeartRateSessionStateDisabled
DAYS_AGO
HOURS_AGO
MINUTES_AGO
MEASURING
TRY_AGAIN
LAST_READ_FORMAT
BPM_KEY
delegate
T@"<NLHeartRateViewDelegate>",W,N,V_delegate
TI,R,N,V_state
%K <= %@
v16@?0@"HKSampleQuery"4@"NSArray"8@"NSError"12
count/min
NLFakeHeartRate
v24@?0@"HKAnchoredObjectQuery"4@"NSArray"8@"NSArray"12@"HKQueryAnchor"16@"NSError"20
%K >= %@
T@"<NLHeartRateMeasurerDelegate>",W,N,V_delegate
lastReading
Td,R,N,V_lastReading
lastReadingDate
T@"NSDate",R,N,V_lastReadingDate
com.apple.NanoLifestyle.NLHeartbeatGlance.MeasurementInitiated
com.apple.NanoLifestyle.NLHeartbeatGlance.TimeToFirstReading
com.apple.NanoLifestyle.NLHeartbeatGlance.MeasurementTimedOut
NLHeartRateApplication
NLHeartRateViewController
NLHeartRateViewDelegate
NLHeartRateMeasurerDelegate
NSObject
NLHeartRateAppDelegate
UIApplicationDelegate
NLHeartRateView
NLHeartRateMeasurer
_extendLaunchTest
initWithNibName:bundle:
defaultCenter
_batteryStateChanged:
addObserver:selector:name:object:
_willEnterForeground
_didBecomeActive
_willResignActive
dealloc
alloc
initWithFrame:andState:
setOpaque:
setDelegate:
setView:
mainBundle
localizedStringForKey:value:table:
setTitle:
_updatePreviousReadingViewAnimated:
state
sharedApplication
applicationState
_updateStateForApplicationState:
standardUserDefaults
objectForKey:
boolValue
setState:
_heartRateMeasurer
grabLatestHeartrate
_shouldMeasureOnCharger
_startMeasuring
view
unloadHeartbeatAnimationAssets
_deactivateHeartRateMeasuring
stopMeasuring
class
_transitionToMeasuring
cancelPreviousPerformRequestsWithTarget:selector:object:
_transitionToStaleReading
_releaseBacklightAssertion
performSelector:withObject:afterDelay:
currentDevice
setBatteryMonitoringEnabled:
layoutIfNeeded
setCurrentReadingToGrayed:animated:
_pushNewReading:withDate:
startMeasuring
_takeBacklightAssertion
setBool:forKey:
transitionToState:
_launchTestName
isRunningTest:
finishedTest:
init
_updateCurrentReadingViewAnimated:
isViewLoaded
numberWithDouble:
setPreviousReading:date:animated:
setCurrentReading:animated:
setHeartToReloadState
tickle
measurementTimeout
initWithReason:forDisplay:willPreventScreenOff:willPreventGestures:timeoutSeconds:timeoutBlock:
isMeasuring
boolForKey:
isEqualToDate:
glanceViewDidGetTapped:
glanceView:explanatoryTextForState:
heartRateMeasurer:didReceiveCurrentMeasurement:onDate:
heartRateMeasurer:didReceiveHistoricalMeasurement:withDate:
heartRateMeasurerDidFailToMeasure:
isEqual:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
loadView
_handlePrivacyPreferencesChanged
.cxx_destruct
launchBundleID
setLaunchBundleID:
launchURL
setLaunchURL:
_backlightAssertion
_currentReading
_currentReadingDate
_previousReading
_previousReadingDate
_errorCount
_deviceIsCharging
_isHeartRateEnabled
_heartrateView
_launchBundleID
_launchURL
_state
isRunningInStoreDemoMode
batteryState
mainScreen
bounds
initWithFrame:
setWindow:
window
makeKeyAndVisible
setRootViewController:
postNotificationName:object:
applicationDidFinishLaunching:
application:willFinishLaunchingWithOptions:
application:didFinishLaunchingWithOptions:
applicationDidBecomeActive:
applicationWillResignActive:
application:handleOpenURL:
application:openURL:sourceApplication:annotation:
application:openURL:options:
applicationDidReceiveMemoryWarning:
applicationWillTerminate:
applicationSignificantTimeChange:
application:willChangeStatusBarOrientation:duration:
application:didChangeStatusBarOrientation:
application:willChangeStatusBarFrame:
application:didChangeStatusBarFrame:
application:didRegisterUserNotificationSettings:
application:didRegisterForRemoteNotificationsWithDeviceToken:
application:didFailToRegisterForRemoteNotificationsWithError:
application:didReceiveRemoteNotification:
application:didReceiveLocalNotification:
application:handleActionWithIdentifier:forLocalNotification:completionHandler:
application:handleActionWithIdentifier:forRemoteNotification:withResponseInfo:completionHandler:
application:handleActionWithIdentifier:forRemoteNotification:completionHandler:
application:handleActionWithIdentifier:forLocalNotification:withResponseInfo:completionHandler:
application:didReceiveRemoteNotification:fetchCompletionHandler:
application:performFetchWithCompletionHandler:
application:performActionForShortcutItem:completionHandler:
application:handleEventsForBackgroundURLSession:completionHandler:
application:handleWatchKitExtensionRequest:reply:
applicationShouldRequestHealthAuthorization:
applicationDidEnterBackground:
applicationWillEnterForeground:
applicationProtectedDataWillBecomeUnavailable:
applicationProtectedDataDidBecomeAvailable:
application:supportedInterfaceOrientationsForWindow:
application:shouldAllowExtensionPointIdentifier:
application:viewControllerWithRestorationIdentifierPath:coder:
application:shouldSaveApplicationState:
application:shouldRestoreApplicationState:
application:willEncodeRestorableStateWithCoder:
application:didDecodeRestorableStateWithCoder:
application:willContinueUserActivityWithType:
application:continueUserActivity:restorationHandler:
application:didFailToContinueUserActivityWithType:error:
application:didUpdateUserActivity:
application:userDidAcceptCloudKitShareWithMetadata:
_heartrateViewController
_window
_buttonTap:
initWithTarget:action:
addGestureRecognizer:
bundleForClass:
imageNamed:inBundle:shouldCache:useDeviceVariant:
initWithFrame:heartSpriteImageName:spriteFrameCount:spriteColumnCount:resourceBundle:
setReloadHeartOutlineImage:
setReloadArrowImage:
setUserInteractionEnabled:
addSubview:
blackColor
setBackgroundColor:
systemFontOfSize:
setFont:
whiteColor
setTextColor:
setNumberOfLines:
setAdjustsFontSizeToFitWidth:
setNumberStyle:
_configureForFirstLaunchState
delegate
_previousReadingFrameWidth
layoutSubviews
frame
statusBarFrame
setFrame:
sizeThatFits:
_titleFrameWidth
currentAttributedText
size
mutableCopy
scaleToFitWidth:
setAttributedTextUnanimated:
setHidden:
_shouldReverseLayoutDirection
_transitionFirstLaunchToMeasuring
_transitionMeasuredToMeasuring
_transitionErrorToMeasuring
_transitionMeasuringToMeasured
_transitionMeasuringToError
_transitionMeasuredToError
setHeartRate:
_attributedStringForCurrentReading:
sizeToFitAttributedText:
pushToAttributedText:direction:perCharacter:
_attributedStringForPreviousReading:withDate:
setAlpha:
animateWithDuration:animations:
unloadAnimationAssets
_attributedFirstLaunchTitleString
_updateExplanatoryLabelForState:
text
isEqualToString:
setText:
setNeedsLayout
_attributedMeasuringTitleString
_bpmAttributedString
animateWithDuration:delay:options:animations:completion:
_attributedTryAgainTitleString
stringWithFormat:
date
currentCalendar
components:fromDate:toDate:options:
hour
minute
_formatNumber:withLocalizedStringKey:
_titleAttributes
initWithString:attributes:
stringFromNumber:
_relativeDateStringForDate:
_previousReadingAttributes
_currentReadingAttributes
heartRateColors
nonGradientTextColor
dictionaryWithObjects:forKeys:count:
systemGrayColor
systemFontOfSize:weight:
pointSize
numberWithFloat:
_animatingTransition
_heartView
_titleLabel
_explanatoryLabel
_currentReadingLabel
_bpmLabel
_previousReadingLabel
_numFormatter
_delegate
puic_deviceVariant
quantityTypeForIdentifier:
sortDescriptorWithKey:ascending:
predicateWithFormat:
_heartRateSampleType
arrayWithObjects:count:
_updateHistoricalHeartRateWithReadings:
initWithSampleType:predicate:limit:sortDescriptors:resultsHandler:
executeQuery:
firstObject
endDate
compare:
quantity
unitFromString:
doubleValueForUnit:
_cancelMeasurementTimeout
doubleForKey:
quantityWithUnit:doubleValue:
quantitySampleWithType:quantity:startDate:endDate:
_updateCurrentHeartRateWithReading:
invalidate
_provideFakeReading
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
stopQuery:
_startMeasurementTimeout
count
countByEnumeratingWithState:objects:count:
timeIntervalSinceReferenceDate
initWithType:predicate:anchor:limit:resultsHandler:
setUpdateHandler:
_measurementTimedOut
mesurementTimeout
lastReading
lastReadingDate
_healthStore
_heartRateQuery
_measuringStartDate
_measuringStartMonotonicTime
_latestSample
_fakeTimer
_lastReadingDate
_lastReading
@8@0:4
v12@0:4@8
v12@0:4@"NLHeartRateView"8
@16@0:4@8I12
@"NSString"16@0:4@"NLHeartRateView"8I12
v24@0:4@8d12@20
v24@0:4@"NLHeartRateMeasurer"8d12@"NSDate"20
v12@0:4@"NLHeartRateMeasurer"8
B12@0:4@8
#8@0:4
@12@0:4:8
@16@0:4:8@12
@20@0:4:8@12@16
B8@0:4
B12@0:4#8
B12@0:4@"Protocol"8
B12@0:4:8
Vv8@0:4
I8@0:4
^{_NSZone=}8@0:4
@"NSString"8@0:4
v8@0:4
v12@0:4i8
v12@0:4I8
v20@0:4d8@16
v12@0:4B8
@"NLHeartRateMeasurer"
@"CSLSBacklightAssertion"
@"NSDate"
@"NLHeartRateView"
@"NSString"
@"NSURL"
v12@0:4@"UIApplication"8
B16@0:4@8@12
B16@0:4@"UIApplication"8@"NSDictionary"12
B16@0:4@"UIApplication"8@"NSURL"12
B24@0:4@8@12@16@20
B24@0:4@"UIApplication"8@"NSURL"12@"NSString"16@20
B20@0:4@8@12@16
B20@0:4@"UIApplication"8@"NSURL"12@"NSDictionary"16
v24@0:4@8i12d16
v24@0:4@"UIApplication"8i12d16
v16@0:4@8i12
v16@0:4@"UIApplication"8i12
v28@0:4@8{CGRect={CGPoint=ff}{CGSize=ff}}12
v28@0:4@"UIApplication"8{CGRect={CGPoint=ff}{CGSize=ff}}12
v16@0:4@8@12
v16@0:4@"UIApplication"8@"UIUserNotificationSettings"12
v16@0:4@"UIApplication"8@"NSData"12
v16@0:4@"UIApplication"8@"NSError"12
v16@0:4@"UIApplication"8@"NSDictionary"12
v16@0:4@"UIApplication"8@"UILocalNotification"12
v24@0:4@8@12@16@?20
v24@0:4@"UIApplication"8@"NSString"12@"UILocalNotification"16@?<v@?>20
v28@0:4@8@12@16@20@?24
v28@0:4@"UIApplication"8@"NSString"12@"NSDictionary"16@"NSDictionary"20@?<v@?>24
v24@0:4@"UIApplication"8@"NSString"12@"NSDictionary"16@?<v@?>20
v28@0:4@"UIApplication"8@"NSString"12@"UILocalNotification"16@"NSDictionary"20@?<v@?>24
v20@0:4@8@12@?16
v20@0:4@"UIApplication"8@"NSDictionary"12@?<v@?I>16
v16@0:4@8@?12
v16@0:4@"UIApplication"8@?<v@?I>12
v20@0:4@"UIApplication"8@"UIApplicationShortcutItem"12@?<v@?B>16
v20@0:4@"UIApplication"8@"NSString"12@?<v@?>16
v20@0:4@"UIApplication"8@"NSDictionary"12@?<v@?@"NSDictionary">16
I16@0:4@8@12
I16@0:4@"UIApplication"8@"UIWindow"12
B16@0:4@"UIApplication"8@"NSString"12
@20@0:4@8@12@16
@"UIViewController"20@0:4@"UIApplication"8@"NSArray"12@"NSCoder"16
B16@0:4@"UIApplication"8@"NSCoder"12
v16@0:4@"UIApplication"8@"NSCoder"12
B20@0:4@8@12@?16
B20@0:4@"UIApplication"8@"NSUserActivity"12@?<v@?@"NSArray">16
v20@0:4@8@12@16
v20@0:4@"UIApplication"8@"NSString"12@"NSError"16
v16@0:4@"UIApplication"8@"NSUserActivity"12
v16@0:4@"UIApplication"8@"CKShareMetadata"12
@"UIWindow"8@0:4
v12@0:4@"UIWindow"8
@"NLHeartRateViewController"
@"UIWindow"
@28@0:4{CGRect={CGPoint=ff}{CGSize=ff}}8I24
f8@0:4
v20@0:4d8B16
v24@0:4d8@16B20
v16@0:4B8B12
@16@0:4i8@12
@12@0:4@8
@20@0:4d8@16
@16@0:4d8
@"FIUIHeartRateStatusView"
@"FIUIPushyLabelView"
@"UILabel"
@"NSNumberFormatter"
@"NSDictionary"
@"NSAttributedString"
@"<NLHeartRateViewDelegate>"
d8@0:4
@"HKHealthStore"
@"HKAnchoredObjectQuery"
@"HKQuantitySample"
@"NSTimer"
@"<NLHeartRateMeasurerDelegate>"
Privacy preferences changed, heart rate enabled: %d
Updated battery state, is charging: %d
Update state, is HR enabled: %d, is charging: %d, app state: %ld, current state: %lu
deactivate measuring
About to start measuring in %f s
App will enter foreground
App did become active
App will resign active, stopping heart rate measurement
Updating previous reading with value %@ on date %{public}@
Updating current reading with value %@ on date %{public}@
Tickling backlight assertion
Creating new backlight assertion
Backlight assertion timed out
Releasing backlight assertion
Received current heart rate reading: %@ at %{public}@
Received historical heart rate reading: %@ at %{public}@
Failed to measure after %d seconds
Executing query to grab 1 historical heart rate
Got heart rate readings: %@
Start measuring with start date %{public}@
Received error from HKHeartRateQuery: %{public}@
Received callback from HealthKit to query new heart rate samples
Stopping measurement
Starting measurement timeout of %f seconds
Heart rate measurement timed out
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.HeartRate</string>
<key>com.apple.carousel.backlightaccess</key>
<true/>
<key>com.apple.developer.healthkit</key>
<true/>
<key>com.apple.private.healthkit</key>
<true/>
<key>com.apple.private.healthkit.authorization_bypass</key>
<true/>
</dict>
</plist>
zPLR
