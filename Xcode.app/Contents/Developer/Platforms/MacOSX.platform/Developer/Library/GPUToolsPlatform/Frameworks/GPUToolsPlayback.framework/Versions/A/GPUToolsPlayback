_St11logic_error
St9exception
St8bad_cast
NSt3__117bad_function_callE
(knN
St12length_error
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
GPUMTLOverrideDeviceFamily
v32@?0@"<MTLDevice>"8Q16^c24
v24@?0^v8Q16
-[DYMTLFunctionPlayer executePlatformFunction]
_argumentStorePositions[1].size() == 1
-[DYMTLFunctionPlayer overrideMotionPipelineForVideoEncoder]
videoEncoder != nil
currentTexture != nil
%llu_%llu
motionPipeline
device
T@"<MTLDevice>",&,N,V_device
indirectArgumentManager
T@"DYMTLIndirectArgumentBufferManager",&,N,V_indirectArgumentManager
indirectCommandManager
T@"DYMTLIndirectCommandBufferManager",&,N,V_indirectCommandManager
baseObject
styleMask
windowLevel
strongLayerManager
T@"<DYLayerManager>",R,N
layerManager
T@"<DYLayerManager>",W,N,V_layerManager
        #include <metal_graphics>
        #include <metal_texture>
        using namespace metal;
    
        fragment vec<float, 4> wireframeCreationFragment()
        {
            return vec<float, 4>(1.0, 1.0, 1.0, 1.0);
        }
    
        kernel void createOutlineTexture(texture2d<half, access::read> solid [[texture(0)]], texture2d<half, access::write> outline [[texture(1)]], uint2 gridPosition [[thread_position_in_grid]])
        {
            uint width = solid.get_width();
            uint height = solid.get_height();
            if (gridPosition.x < width && gridPosition.y < height)
            {
                auto currentColor = solid.read(gridPosition).r;
                outline.write(vec<half, 4>(0.0, 0.0, 0.0, 0.0), gridPosition);
                
                if (abs(currentColor - 0.0) <= 0.0001)
                {
                    auto left = solid.read(uint2(gridPosition.x - 1, gridPosition.y)).r;
                    auto right = solid.read(uint2(gridPosition.x + 1, gridPosition.y)).r;
                    auto up = solid.read(uint2(gridPosition.x, gridPosition.y + 1)).r;
                    auto down = solid.read(uint2(gridPosition.x, gridPosition.y - 1)).r;
                    if (left == 1 || right == 1 || up == 1 || down == 1)
                    {
                        // pixel is part of the outline
                        outline.write(vec<half, 4>(1.0, 1.0, 1.0, 1.0), gridPosition);
                    }
                }
                else if (abs(currentColor - 1.0) <= 0.0001 && (gridPosition.x == 0 || gridPosition.y == 0 || gridPosition.x == width - 1 || gridPosition.y == height - 1))
                {
                     outline.write(vec<half, 4>(1.0, 1.0, 1.0, 1.0), gridPosition);
                }
            }
        }
    
-[DYMTLDebugWireframeRenderer initWithDebugFunctionPlayer:]
_wireframeLibrary != nil
wireframeCreationFragment
_wireframeCreationFragmentFunction != nil
createOutlineTexture
_outlinePostProcessFunction != nil
tessellationControlPointIndexType
r^v28@?0I8r^v12Q20
v32@?0r^{DYMTLBoundBufferInfo=@^vQ}8Q16^c24
v32@?0@"<MTLTexture>"8Q16^c24
wireframeTexture
T@"<MTLTexture>",R,N,V_wireframeTexture
outlineTexture
T@"<MTLTexture>",R,N,V_outlineTexture
solidTexture
T@"<MTLTexture>",R,N,V_solidTexture
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
label
T@"NSString",C
T@"<MTLDevice>",R
cpuCacheMode
storageMode
hazardTrackingMode
resourceOptions
heap
T@"<MTLHeap>",R
heapOffset
allocatedSize
length
remoteStorageBuffer
T@"<MTLBuffer>",R
T@"NSString",R
supportIndirectCommandBuffers
Tc,R
maxTotalThreadsPerThreadgroup
threadExecutionWidth
staticThreadgroupMemoryLength
GPUToolsInternalPostTransformPipelineStateLabel
postVertexDumpBuffer
T@"<MTLBuffer>",R,N,V_postVertexDumpBuffer
type
TQ,R,N,V_type
code
T@,R,N,V_code
compileOptions
T@"MTLCompileOptions",R,N,V_compileOptions
maxCommandCount
TQ,R,N,V_maxCommandCount
options
TQ,R,N,V_options
maxThreadgroupMemoryLengthCount
TQ,R,N,V_maxThreadgroupMemoryLengthCount
#include <metal_graphics>
#include <metal_texture>
using namespace metal;
struct VertexOutput
  vec<float, 4> pos [[position]];
  vec<float, 2> uv;
struct UniformData
  vec<float, 4> blendColor;
  uint selectedLayer;
vertex VertexOutput vertexFunction(device const vec<float,4> *pos_data [[ buffer(0) ]],
                                   device const vec<float,2> *uv_data [[ buffer(1) ]], 
                                   uint vid [[ vertex_id ]])
  VertexOutput out;
  out.pos = pos_data[vid];
  out.uv = uv_data[vid];
  return out;
fragment vec<float, 4> opaqueFragmentFunction(VertexOutput in [[stage_in]],
                                              texture2d<float> tex [[ texture(0) ]],
                                              sampler sam [[ sampler(0) ]] )
  vec<float, 4> tex_color = tex.sample(sam, in.uv);
  return tex_color;
fragment vec<float, 4> blendingFragmentFunction(VertexOutput in [[stage_in]],
                                                texture2d<float> tex [[ texture(0) ]],
                                                sampler sam [[ sampler(0) ]],
                                                constant UniformData &uniformData [[ buffer(0) ]]){
  vec<float, 4> tex_color = tex.sample(sam, in.uv);
  return tex_color.r * uniformData.blendColor;
fragment vec<float, 4> blendingFragmentFunction_2dArray(VertexOutput in [[stage_in]],
                                                        texture2d_array<float> tex [[ texture(0) ]],
                                                        sampler sam [[ sampler(0) ]],
                                                        constant UniformData &uniformData [[ buffer(0) ]]){
  vec<float, 4> tex_color = tex.sample(sam, in.uv, uniformData.selectedLayer);
  return tex_color.r * uniformData.blendColor;
-[DYMTLTextureRenderer initWithDevice:]
_library != nil
vertexFunction
opaqueFragmentFunction
blendingFragmentFunction
blendingFragmentFunction_2dArray
_depthStencilDescriptor != nil
_positionBuffer != nil
_texCoordBuffer != nil
bufferVitualAddressMap
T^{map<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> >, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > > > >={__tree<std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, std::__1::less<unsigned long long>, true> >=Q}}},R,N,V_bufferVitualAddressMap
textureMap
T^{unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, unsigned long long> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true> >=f}}},R,N,V_textureMap
samplerMap
T^{unordered_map<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true> >=f}}},R,N,V_samplerMap
replayerBufferBaseVirtualAddressMap
T^{map<unsigned long long, unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >={__tree<std::__1::__value_type<unsigned long long, unsigned long long>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, unsigned long long>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, unsigned long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, unsigned long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, unsigned long long>, std::__1::less<unsigned long long>, true> >=Q}}},R,N,V_replayerBufferBaseVirtualAddressMap
replayerTextureMap
T^{unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, unsigned long long> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true> >=f}}},R,N,V_replayerTextureMap
replayerSamplerMap
T^{unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, unsigned long long> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true> >=f}}},R,N,V_replayerSamplerMap
v32@?0@"MTLStructMember"8Q16^c24
-fno-tracepoint-instrument-line-markers
Error creating instrumented library: %@
kDYMTLShaderDebuggerInstrumentedMetallib is nil
v32@?0r^{DYMTLBoundSamplerInfo=@ff}8Q16^c24
kDYMTLShaderDebuggerLibraryId library not found in object map
v32@?0@"MTLArgument"8Q16^c24
_prepareRenderCommandEncoder: Unhandled ROI type
v32@?0@"MTLSamplerDescriptor"8Q16^c24
Error creating instrumented render pipeline state: %@
Error creating instrumented compute pipeline state: %@
Error creating instrumented function: %@
Shader bitcode not found.
Could not generate shader metadata.
Incorrect ROI parameters
Unable to create trace buffer.
Invalid command encoder for Vertex ROI type
Invalid command encoder for Fragment ROI type
dispatchType
Invalid command encoder for Kernel ROI type
Error while preparing trace buffer.
rootResource
T@"<MTLResource>",R
parentTexture
T@"<MTLTexture>",R
parentRelativeLevel
parentRelativeSlice
buffer
bufferOffset
bufferBytesPerRow
iosurface
T^{__IOSurface=},R
iosurfacePlane
textureType
pixelFormat
width
height
depth
mipmapLevelCount
sampleCount
arrayLength
usage
shareable
Tc,R,GisShareable
framebufferOnly
Tc,R,GisFramebufferOnly
allowGPUOptimizedContents
remoteStorageTexture
swizzle
T{?=CCCC},R,N
responsibleProcess
sharedAllocationInfo
T@"MTLResourceAllocationInfo",R
cachedAllocationInfo
protectionOptions
unfilteredResourceOptions
uniqueIdentifier
resourceIndex
TQ,N
swizzleKey
TI,R
numFaces
isDrawable
Trace buffer not big enough. Retry with new size.
tracepoint
tracepoint_thread_begin
tracepoint_function_begin
tracepoint_function_end
tracepoint_call
tracepoint_variable
tracepoint_data
tracepoint_loop_begin_for
tracepoint_loop_begin_while
tracepoint_loop_begin_do
tracepoint_loop_init_begin
tracepoint_loop_init_end
tracepoint_loop_cond_begin
tracepoint_loop_cond_end
tracepoint_loop_inc_begin
tracepoint_loop_inc_end
tracepoint_loop_body_begin
tracepoint_loop_body_end
tracepoint_loop_end
tracepoint_thread_exit
tracepoint_library_version
return_value(
TQ,R,N
TQ,R,N,V_width
TQ,R,N,V_height
MPSNNNeuronDescriptor
MPSPluginCNNConvolutionDescriptor
MTLStatCommandBufferIndex
MTLStatEncoderIndex
MTLStatCommandIndex
MTLStat_nSec
MTLStatTotalGPUCycles
SW_PBUsed
_fedf2c59
GPUFrameProfilingPowerStateWarmupTime
frame profile data
PerDrawNsecTimes
encoder time data
kick time data
kick cycle data
tilerParamBufBytesUsedArray
v8@?0
perEncoderIndexDrawCallCount
withoutBlitPerEncoderIndexDrawCallCount
blitEncoderIndices
frame counters
First
Depth.
Stencil.
r^v24@?0r^v8Q16
v24@?0@"<MTLTexture>"8Q16
v32@?0^{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}8I16I20^B24
#include <metal_stdlib>
using namespace metal;
struct TransformMatrices
    float4 modelview_projection_matrix[4];
struct VertexOutput
    vec<float, 4> pos [[position]];
vertex VertexOutput texturedQuadVertex(uint vid [[ vertex_id ]])
    VertexOutput out;
    out.pos =  float4(0.0, 0.0, 0.0, 1.0);
    return out;
texturedQuadVertex
NopPipeline
nvidia
v32@?0@"<MTLCommandBuffer>"8@"NSData"16Q24
DELTA
MetalPluginName
activePerEncoderDrawCallCount
currentEncoderIndex
TI,N,V_currentEncoderIndex
counterListsPerPass
T@"NSMutableArray",&,N,V_counterListsPerPass
statVertices
T@"NSString",&,N,V_statVertices
statPixels
T@"NSString",&,N,V_statPixels
frameCounters
T@"NSMutableArray",&,N,V_frameCounters
shouldIgnoreCaptureFile
Tc,N,V_shouldIgnoreCaptureFile
wireframeRenderMode
Tq,N,V_wireframeRenderMode
postVertexDump
T@"DYMTLPostVertexDump",R,N,V_postVertexDump
targetFunctionNeedsSeparatedPostVertexDump
Tc,R,N,V_targetFunctionNeedsSeparatedPostVertexDump
shaderDebuggerTraceGenerator
T@"DYMTLShaderDebuggerTraceGenerator",R,N,V_shaderDebuggerTraceGenerator
format
Color.%u
Color.
viewports
T{vector<MTLViewport, std::__1::allocator<MTLViewport> >=^{?}^{?}{__compressed_pair<MTLViewport *, std::__1::allocator<MTLViewport> >=^{?}}},R,N
T{vector<MTLViewport, std::__1::allocator<MTLViewport> >=^{?}^{?}{__compressed_pair<MTLViewport *, std::__1::allocator<MTLViewport> >=^{?}}},R,N,V_viewports
ConvertIndirectCommandBufferDataToFBufStreamRender
Ctulul
Cululululul
Cululultulullul
Cululultululul
Cululultultululul
ConvertIndirectCommandBufferDataToFBufStreamCompute
Culul
C@6ul
C@3ul@3ul
v16@?0@"<MTLCommandBuffer>"8
Failed to dispatch: 0x%x
count
gputools.%@.%p
gputools.%@.%p.%@
messageLock
messageProcessingQueue
couldn't get global client transport
couldn't get global client source
v16@?0@"DYTransportMessage"8
version
interpose-feature-version
interpose-patch-version
couldn't send replayer ready message: %@
c24@?0@"DYTransportMessage"8@"NSDictionary"16
-[DYReplayController _processMessage:]
uuidString
filename
uuid
Initial draw
replayer
v16@?0@"NSDictionary"8
-[DYReplayController _loadArchives:error:]
filenames
gputrace
-[DYReplayController _playbackCurrentArchiveAndExperiments]
![self.archiveStack empty]
-[DYReplayController _playbackArchiveWithExperiment:passingFuture:resolvingFuture:]
-[DYReplayController _playbackArchiveWithExperiment:passingFuture:resolvingFuture:]_block_invoke_2
result_message
self.replayMessage
-[DYReplayController _beginDebugArchive]
queue
T^{dispatch_queue_s=},N,Vqueue
transport
T@"DYTransport",&,N,Vtransport
source
T@"DYTransportSource",&,N,Vsource
replayMessage
T@"DYTransportMessage",&,N,VreplayMessage
origSourceMessageHandler
T@?,C,N,VorigSourceMessageHandler
archiveStack
T@"DYCaptureArchiveStack",&,N,VarchiveStack
playbackEngine
T@"DYPlaybackEngine",&,N,VplaybackEngine
replayControllerSupport
T@"<DYReplayControllerSupport>",&,N,VreplayControllerSupport
experiments
T@"NSMutableArray",&,N,Vexperiments
profileInfo
T@"NSMutableDictionary",&,N,VprofileInfo
Load archive
Setup
_availability_version_check
kCFAllocatorNull
CFDataCreateWithBytesNoCopy
CFPropertyListCreateWithData
CFPropertyListCreateFromXMLData
CFStringCreateWithCStringNoCopy
CFDictionaryGetValue
CFGetTypeID
CFStringGetTypeID
CFStringGetCString
CFRelease
/System/Library/CoreServices/SystemVersion.plist
ProductVersion
%d.%d.%d
initWithCaptureStore:
cacheAllResources
init
initWithFunctionPlayer:
setIndirectArgumentManager:
setIndirectCommandManager:
finish
dealloc
standardUserDefaults
stringForKey:
length
componentsSeparatedByString:
objectAtIndexedSubscript:
name
hasPrefix:
enumerateObjectsUsingBlock:
count
device
_getDeviceWithName:
setDevice:
isEqual:
bytes
commandQueue
pixelFormat
storageMode
_isCPUAccessibleStorageMode:
isDrawable
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:
releaseDataForArgument:
commandBuffer
releaseDataForPosition:
newBufferWithBytesNoCopy:length:options:deallocator:
newBufferWithBytes:length:options:
blitCommandEncoder
_isDepthStencilFormat:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:
endEncoding
commit
processArguments
indirectArgumentManager
processCommandBuffer:functionIndex:ancestorMapData:indirectArgumentBuffersData:resourceMapsData:driverDecodingData:
encodeIndirectArgumentsForBuffer:data:
contents
newBufferWithLength:options:
copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
stringWithUTF8String:
deviceForID:withDeviceName:
addGPUVirtualAddress:forObjectId:
restoreBuffer:withData:commandQueue:
restoreBuffer:optimizedRanges:commandQueue:
addRenderPipelineStateUniqueIdentifier:forObjectId:
addComputePipelineStateUniqueIdentifier:forObjectId:
didModifyRange:
_createPrivateBufferForFunctionWithDevice:bytes:length:resourceOptions:
_restoreTexture:commandBuffer:argumentOffset:
executePlatformFunction
class
vertexBytesKeyAtIndex:
dataWithBytes:length:
fragmentBytesKeyAtIndex:
computeBytesKeyAtIndex:
newCommandQueue
overrideMotionPipelineForVideoEncoder
shouldExecuteGraphicsFunction
_saveBytes
commitAndWaitUntilSubmitted
newSharedTextureWithHandle:
newSharedTextureWithDescriptor:
newSharedEventWithHandle:
newSharedEvent
newLibraryWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:
objectForKey:
width
height
stringWithFormat:
objectForKeyedSubscript:
setTextureWidth:
setTextureHeight:
newMotionEstimationPipelineWithDescriptor:
setObject:forKeyedSubscript:
setMotionEstimationPipeline:
setObject:forKey:
removeObjectForKey:
keyForOriginalObject:
objectMap
vertexBytesForKey:
fragmentBytesForKey:
tileBytesForKey:
computeBytesForKey:
executeGraphicsFunction
isFrameBoundary
.cxx_destruct
.cxx_construct
indirectCommandManager
_objectMap
_commandQueueSet
_vertexBytesDataMap
_fragmentBytesDataMap
_tileBytesDataMap
_computeBytesDataMap
_motionPipelineMap
_indirectArgumentManager
_indirectCommandManager
_device
respondsToSelector:
methodForSelector:
isStatEnabled
getStatLocations
setStatLocations:
strongLayerManager
layerForID:
createLayerWithID:contentRect:contentsScale:properties:isCoreAnimationSurface:
_isPresentFunction
layer
prepareLayerForPresent:
applyLayersVisibility
updateLayer:contentRect:contentsScale:properties:
numberWithUnsignedLongLong:
numberWithLongLong:
dictionaryWithObjects:forKeys:count:
updateLayer:contentRect:contentsScale:properties:windowRect:
setDrawableSize:
setFramebufferOnly:
bounds
contentsScale
setPixelFormat:
setWantsExtendedDynamicRangeContent:
nextDrawable
setPresentsWithTransaction:
texture
presentAtTime:
present
setTransform:forLayerID:withScreenToLayerScale:
setPosition:forLayerID:
setAnchorPoint:forLayerID:
setInterfaceOrientation:
layerManager
setLayerManager:
_drawableMap
_drawableRenderabilityStatusMap
_layerManager
newLibraryWithSource:options:error:
newFunctionWithName:
texture2DDescriptorWithPixelFormat:width:height:mipmapped:
usage
setUsage:
renderPassDescriptor
colorAttachments
setLoadAction:
setStoreAction:
setClearColor:
supportsFeatureSet:
setWidth:
setHeight:
renderTargetArrayLength
setTextureType:
setArrayLength:
isRasterizationEnabled
_updateTextureDescriptor:usingEncoder:renderPassDescriptor:
vertexDescriptor
setVertexDescriptor:
vertexFunction
setVertexFunction:
setFragmentFunction:
inputPrimitiveTopology
setInputPrimitiveTopology:
tessellationFactorFormat
setTessellationFactorFormat:
tessellationPartitionMode
setTessellationPartitionMode:
tessellationOutputWindingOrder
setTessellationOutputWindingOrder:
isTessellationFactorScaleEnabled
setTessellationFactorScaleEnabled:
tessellationFactorStepFunction
setTessellationFactorStepFunction:
maxTessellationFactor
setMaxTessellationFactor:
tessellationControlPointIndexType
setTessellationControlPointIndexType:
newRenderPipelineStateWithDescriptor:error:
newComputePipelineStateWithFunction:error:
descriptor
setRenderPipelineState:
applyVertexStateToEncoder:rawBytesBlock:
vertexArguments
countByEnumeratingWithState:objects:count:
access
type
fragmentArguments
index
array
addObject:
enumerateFragmentBuffersUsingBlock:
enumerateFragmentTexturesUsingBlock:
containsObject:
enumerateVertexBuffersUsingBlock:
enumerateVertexTexturesUsingBlock:
createWireframeRenderCommandEncoder:
engine
wireframeLineWidth
function
tessellationWireframeLineWidth
setTexture:
setRenderTargetArrayLength:
newDepthStencilStateWithDescriptor:
setDepthStencilState:
setTriangleFillMode:
setComputePipelineState:
textureType
arrayLength
mipmapLevelCount
setTexture:atIndex:
dispatchThreadgroups:threadsPerThreadgroup:
_prepareWireframeTextureWithEncoder:commandBuffer:pipelineState:parallelEncoder:renderPassDescriptor:
initWithDebugFunctionPlayer:
createSolidRenderCommandEncoder:commandBufferId:commandEncoderId:parallelEncoderId:
createOutlineTexture
prepareWireframeTextureWithCommandBufferId:commandEncoderId:parallelEncoderId:pipelineId:renderPassDescriptor:
wireframeTexture
outlineTexture
solidTexture
_player
_wireframeLibrary
_wireframeCreationFragmentFunction
_outlinePostProcessFunction
_wireframeTextureDescriptor
_outlineTextureDescriptor
_wireframeTexture
_outlineTexture
_solidTexture
_wireframeRenderPassColorAttachmentDescriptor
_wireframeRenderPassDescriptor
_solidRenderPassColorAttachmentDescriptor
_solidRenderPassDescriptor
_wireframeRenderPipelineState
_outlineComputePipelineState
_savedVertexState
_originalCommandEncoderId
_originalCommandBuffer
_originalEncoder
_originalParallelEncoder
_supports_tessellation
inheritPipelineState
renderPipelineState
inheritBuffers
maxVertexBufferBindCount
setVertexBytes:length:atIndex:
setVertexBuffer:offset:atIndex:
maxFragmentBufferBindCount
setFragmentBytes:length:atIndex:
setFragmentBuffer:offset:atIndex:
saveEncoder:withDescriptor:player:
restoreEncoder:withDescriptor:
_pipelineState
_vertexBuffers
_vertexBytes
_vertexBufferOffsets
_vertexBytesLength
_fragmentBuffers
_fragmentBytes
_fragmentBufferOffsets
_fragmentBytesLength
_calculateGPUVirtualAddress
maxThreadgroupMemoryLengthCount
saveRenderEncoder:withDescriptor:
size
options
newIndirectCommandBufferWithDescriptor:maxCommandCount:options:
copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:
rangeValue
optimizeIndirectCommandBuffer:withRange:
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
setPurgeableState:
makeAliasable
isAliasable
label
setLabel:
cpuCacheMode
hazardTrackingMode
resourceOptions
heap
heapOffset
allocatedSize
newTextureWithDescriptor:offset:bytesPerRow:
addDebugMarker:range:
removeAllDebugMarkers
newRemoteBufferViewForDevice:
remoteStorageBuffer
gpuAddress
supportIndirectCommandBuffers
uniqueIdentifier
maxTotalThreadsPerThreadgroup
threadExecutionWidth
staticThreadgroupMemoryLength
dataWithBytesNoCopy:length:freeWhenDone:
bufferIdAndOffsetForGPUVirtualAddress:
renderPipelineIdForUniqueIdentifier:
computePipelineIdForUniqueIdentifier:
executeIndirectRenderCommand:withData:atIndex:forIndirectCommandBuffer:
executeIndirectRenderCommands:withData:forRange:forIndirectCommandBuffer:
setupRenderCommandEncoder:withData:atIndex:forIndirectCommandBuffer:
setupComputeCommandEncoder:withData:atIndex:forIndirectCommandBuffer:
updateReplayerTranslationBuffer
convertIndirectCommandBufferData:range:toFBufStream:
_gpuVirtualAddressMap
_renderPipelineStateUniqueIdentifier
_computePipelineStateUniqueIdentifier
_gpuVirtualAddressArray
_recalculateVirtualAddress
commandTypes
drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:
setTessellationFactorBuffer:offset:instanceStride:
setTessellationFactorScale:
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:
indirectRenderCommandAtIndex:
reset
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:
setBuffer:offset:atIndex:
postVertexDumpBufferIndex
maxColorAttachments
setObject:atIndexedSubscript:
internalPipelineStateLabel
depthAttachmentPixelFormat
setDepthAttachmentPixelFormat:
stencilAttachmentPixelFormat
setStencilAttachmentPixelFormat:
setRasterizationEnabled:
sampleCount
setSampleCount:
sampleMask
setSampleMask:
maxVertexBuffers
setPostVertexDumpBufferIndex:
newRenderPipelineStateWithDescriptor:options:reflection:error:
_reservePostVertexDumpBufferWithLength:
postVertexDumpOutputs
postVertexDumpStride
createAndSetPostVertexDumpPipelineState:commandEncoderId:pipelineId:
notifyReplayerTargetCommandBuffersFinished
postVertexDumpBuffer
_reflectionSizeAligned256
_reflectionPostVertexDumpStride
_postVertexDumpBuffer
initWithType:code:compileOptions:
code
compileOptions
_type
_code
_compileOptions
initWithMaxCommandCount:options:maxThreadgroupMemoryLengthCount:
maxCommandCount
_maxCommandCount
_options
_maxThreadgroupMemoryLengthCount
newTextureWithDescriptor:
newTextureViewWithPixelFormat:textureType:levels:slices:
copy
setMipmapLevelCount:
depth
setDepth:
setCpuCacheMode:
setStorageMode:
newComputePipelineStateWithDescriptor:options:reflection:error:
newComputePipelineStateWithFunction:options:reflection:error:
setComputeFunction:
setBlendingEnabled:
setSourceRGBBlendFactor:
setDestinationRGBBlendFactor:
setRgbBlendOperation:
setSourceAlphaBlendFactor:
setDestinationAlphaBlendFactor:
setAlphaBlendOperation:
setMinFilter:
setMagFilter:
setMipFilter:
setMaxAnisotropy:
setSAddressMode:
setTAddressMode:
setRAddressMode:
setNormalizedCoordinates:
setLodMinClamp:
setLodMaxClamp:
newSamplerStateWithDescriptor:
_renderPassPixelFormatFromDescriptor:
fragmentFunction
setCullMode:
setFragmentTexture:atIndex:
setFragmentSamplerState:atIndex:
drawPrimitives:vertexStart:vertexCount:instanceCount:
initWithDevice:
renderTexture:withEncoder:enableBlending:layerIndex:
setBlendColorRed:green:blue:alpha:
_library
_vertexFunction
_opaqueFragmentFunction
_blendingFragmentFunction
_blendingFragmentFunction_2dArray
_renderPipelineDescriptor
_depthStencilDescriptor
_positionBuffer
_texCoordBuffer
_uniformData
_samplerState
resourcePatchingTypeForResourceType:
initializeResourcePatchingTypes
uploadDriverDecodingData:
processAncestorMapData:
processIndirectArgumentBuffersData:
processResourceMapsData:
resolveIABDecodingOperations
encodeIndirectArgumentsForBuffer:decodingMap:
setIndirectArgumentBufferDecodingData:
findAncestorsForBuffer:commandBufferIndex:commandEncoderIndex:callIndex:ancestors:
objectWithId:
queue
synchronizeResource:
waitUntilCompleted
encodeIndirectArgumentsForBuffer:data:decodingMap:
executeIABDecodingOp:bufferId:data:indirectDecodingMap:
argumentEncoderForDecodingOperation:reflectionStructType:
layout
encodedLength
newArgumentEncoderWithArguments:
newArgumentEncoderWithBufferIndex:reflection:
bufferStructType
newArgumentEncoderForBufferAtIndex:
findStructTypeForArgumentIndex:inStructType:
blitBufferFromGPU:
decodeReplayerIAB:offset:function:argument:
newArgumentEncoderWithBufferIndex:
functionType
notifyReplayerTargetIndirectArgumentBuffers:
bufferVitualAddressMap
textureMap
samplerMap
replayerBufferBaseVirtualAddressMap
replayerTextureMap
replayerSamplerMap
_currentCommandBuffer
_currentCommandBufferFunctionIndex
_traceProcessed
_currentDeviceDecodingData
_commandBufferIds
_ancestorMaps
_indirectArgumentBuffers
_bufferVitualAddressMap
_bufferLengthMap
_textureMap
_samplerMap
_renderPipelineMap
_computePipelineMap
_indirectCommandBufferMap
_usedSamplersMap
_encodedResourcesMap
_decodingMap
_deviceResourcesBuffers
_replayerIABs
_replayerBufferBaseVirtualAddressMap
_replayerTextureMap
_replayerSamplerMap
_replayerRenderPipelineMap
_replayerComputePipelineMap
_replayerIndirectCommandBufferMap
_resourcePatchingType
_resourcePatchingTypesInitialized
setArgumentBuffer:offset:
elementStructType
argumentIndexStride
elementArrayType
elementType
virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:
setSamplerState:atIndex:
uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:
setRenderPipelineState:atIndex:
uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:
setIndirectCommandBuffer:atIndex:
members
structType
indirectArgumentIndex
arrayType
pointerType
dataType
setSupportArgumentBuffers:
argumentDescriptor
setDataType:
setIndex:
arrayWithObjects:count:
setResourceOptions:
setTracingEnabled:
setAdditionalCompilerArguments:
newLibraryWithData:error:
isActive
bufferDataSize
enumerateBuffersUsingBlock:
enumerateTexturesUsingBlock:
enumerateSamplersUsingBlock:
enumerateVertexSamplersUsingBlock:
enumerateFragmentSamplersUsingBlock:
valueForKey:
unsignedIntValue
unsignedLongLongValue
_instrumentLibrary:generationOptions:
_createInstrumentedFunctionWithInstrumentedLibrary:originalFunction:
_createAndSetInstrumentedRenderPipelineStateWithDescriptor:renderCommandEncoder:roiType:
_vertexBindingNeedsPlaceholderResource:renderCommandEncoder:
_placeholderTextureWithType:
setVertexTexture:atIndex:
setVertexSamplerState:atIndex:
supportArgumentBuffers
setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:
_fragmentBindingNeedsPlaceholderResource:renderCommandEncoder:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:
computePipelineState
setMaxTotalThreadsPerThreadgroup:
computeFunction
_createAndSetInstrumentedComputePipelineStateWithDescriptor:computeCommandEncoder:
arguments
_kernelBindingNeedsPlaceholderResource:computeCommandEncoder:
setSamplerState:lodMinClamp:lodMaxClamp:atIndex:
dictionary
traceBufferIndex
constantSamplerUniqueIdentifiers
constantSamplerDescriptors
_generateConstantSamplerReflectionWithUniqueIdentifiers:descriptors:
newFunctionWithName:constantValues:error:
bitcodeData
unsignedIntegerValue
floatValue
_createTraceBufferWithGenerationOptions:
insertDebugSignpost:
pushDebugGroup:
popDebugGroup
setVertexBufferOffset:atIndex:
setVertexBuffers:offsets:withRange:
setVertexTextures:withRange:
setVertexSamplerStates:withRange:
setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setViewport:
setViewports:count:
setFrontFacingWinding:
setDepthClipMode:
setDepthBias:slopeScale:clamp:
setScissorRect:
setScissorRects:count:
setFragmentBufferOffset:atIndex:
setFragmentBuffers:offsets:withRange:
setFragmentTextures:withRange:
setFragmentSamplerStates:withRange:
setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setStencilReferenceValue:
setStencilFrontReferenceValue:backReferenceValue:
setVisibilityResultMode:offset:
setColorStoreAction:atIndex:
setDepthStoreAction:
setStencilStoreAction:
setColorStoreActionOptions:atIndex:
setDepthStoreActionOptions:
setStencilStoreActionOptions:
drawPrimitives:vertexStart:vertexCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:
drawPrimitives:indirectBuffer:indirectBufferOffset:
drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:
textureBarrier
updateFence:afterStages:
waitForFence:beforeStages:
drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:
useResource:usage:
useResources:count:usage:
useResource:usage:stages:
useResources:count:usage:stages:
useHeap:
useHeaps:count:
useHeap:stages:
useHeaps:count:stages:
executeCommandsInBuffer:withRange:
executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:
memoryBarrierWithScope:afterStages:beforeStages:
memoryBarrierWithResources:count:afterStages:beforeStages:
sampleCountersInBuffer:atSampleIndex:withBarrier:
setBytes:length:atIndex:
setBufferOffset:atIndex:
setBuffers:offsets:withRange:
setTextures:withRange:
setSamplerStates:withRange:
setSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setThreadgroupMemoryLength:atIndex:
setStageInRegion:
setStageInRegionWithIndirectBuffer:indirectBufferOffset:
dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:
dispatchThreads:threadsPerThreadgroup:
updateFence:
waitForFence:
memoryBarrierWithScope:
memoryBarrierWithResources:count:
dispatchType
_prepareRenderCommandEncoder:generationOptions:
_prepareComputeCommandEncoder:generationOptions:
_prepareTraceBufferWithGenerationOptions:
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:
getBytes:bytesPerRow:fromRegion:mipmapLevel:
replaceRegion:mipmapLevel:withBytes:bytesPerRow:
newTextureViewWithPixelFormat:
newSharedTextureHandle
newRemoteTextureViewForDevice:
newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:
rootResource
parentTexture
parentRelativeLevel
parentRelativeSlice
buffer
bufferOffset
bufferBytesPerRow
iosurface
iosurfacePlane
isShareable
isFramebufferOnly
allowGPUOptimizedContents
remoteStorageTexture
swizzle
isPurgeable
isComplete
waitUntilComplete
doesAliasResource:
doesAliasAllResources:count:
doesAliasAnyResources:count:
responsibleProcess
setResponsibleProcess:
sharedAllocationInfo
cachedAllocationInfo
protectionOptions
unfilteredResourceOptions
didModifyData
swizzleKey
numFaces
resourceIndex
setResourceIndex:
numberWithUnsignedLong:
numberWithUnsignedInt:
appendBytes:length:
_generateResourceResolutionRemappingTables
prepareCommandEncoderForInstrumentedCall:generationOptions:
notifyReplayFinishedAndGenerateTraceContainer
_traceBuffer
_errorStr
_placeholderBuffer
_placeholderTexture
_placeholderSamplerState
_placeholderTextures
_dummyArgumentEncoder
_dummyArgumentBuffer
_replacedSamplerStates
_constantSamplerReflection
_bytesBufferReplacements
_traceType
_metadata
_traceBufferVersion
_onlineSrc
_setDefaultsWithDescriptor:device:
validate:width:height:
initWithEncoder:descriptor:
initWithDevice:descriptor:
forwardingTargetForSelector:
_renderEncoder
_renderPipelineState
_width
_height
parallelRenderCommandEncoderWithDescriptor:
setPreprocessorMacros:
setFastMathEnabled:
setDebuggingEnabled:
setLanguageVersion:
setConstantValue:type:atIndex:
setIsDrawable:
setAllowGPUOptimizedContents:
setForceResourceIndex:
setSwizzle:
setVisibilityResultBuffer:
depthAttachment
depthResolveFilter
setDepthResolveFilter:
stencilAttachment
defaultRasterSampleCount
setDefaultRasterSampleCount:
renderTargetWidth
setRenderTargetWidth:
setRenderTargetHeight:
setSamplePositions:count:
stencilResolveFilter
setStencilResolveFilter:
openGLModeEnabled
setOpenGLModeEnabled:
setDepthAttachment:
setStencilAttachment:
setDepthCompareFunction:
setDepthWriteEnabled:
setFrontFaceStencil:
setBackFaceStencil:
setCompareFunction:
borderColor
setBorderColor:
reductionMode
setReductionMode:
layouts
setStride:
setStepRate:
setStepFunction:
attributes
setFormat:
setOffset:
setBufferIndex:
setIndexType:
setIndexBufferIndex:
setIndirectCommandBuffers:withRange:
arrayWithCapacity:
valueWithRange:
setRenderPipelineStates:withRange:
rasterSampleCount
setRasterSampleCount:
setSampleCoverage:
setAlphaToCoverageEnabled:
setAlphaToOneEnabled:
vertexBuffers
setMutability:
fragmentBuffers
setSupportIndirectCommandBuffers:
setThreadGroupSizeIsMultipleOfThreadExecutionWidth:
stageInputDescriptor
setStageInputDescriptor:
buffers
textureWidth
textureHeight
setMaxCommandBufferCount:
qosLevel
setQosLevel:
setCommitSynchronously:
setSize:
setType:
setHazardTrackingMode:
setCommandTypes:
setInheritPipelineState:
setInheritBuffers:
setMaxVertexBufferBindCount:
setMaxFragmentBufferBindCount:
initWithCapacity:
unarchivedObjectOfClass:fromData:error:
setLevel:
setSlice:
setDepthPlane:
setResolveTexture:
setResolveLevel:
setResolveSlice:
setResolveDepthPlane:
storeActionOptions
setStoreActionOptions:
setClearDepth:
setClearStencil:
setStencilCompareFunction:
setStencilFailureOperation:
setDepthFailureOperation:
setDepthStencilPassOperation:
setReadMask:
setWriteMask:
UTF8String
newCNNConvolutionWithDescriptor:dataSource:fullyConnected:
newCNNConvolutionWithDescriptor:convolutionData:
newCNNConvolutionGradientWithDescriptor:convolutionData:
newCNNNeuronWithNeuronType:neuronParameterA:neuronParameterB:neuronParameterC:
newCNNNeuronWithNeuronType:neuronParameterAArray:count:
newMatrixMultiplicationWithTransposeLeft:transposeRight:resultRows:resultColumns:interiorColumns:alpha:beta:
newMatrixVectorMultiplicationWithTranspose:rows:columns:alpha:beta:
newMatrixFullyConnected
newCNNPoolingMaxWithKernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:
newCNNPoolingAverageWithKernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:
newCNNDilatedPoolingMaxWithKernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:dilationRateX:dilationRateY:
newCNNSoftMax
encodeToCommandBuffer:computeCommandEncoder:options:sourceTexture:sourceInfo:destinationTexture:destinationInfo:
encodeToCommandBuffer:computeCommandEncoder:options:pluginOptions:sourceTexture:sourceInfo:destinationTexture:destinationInfo:
encodeBatchToCommandBuffer:computeCommandEncoder:options:pluginOptions:sourceTextures:sourceInfo:destinationTextures:destinationInfo:predicationBuffer:predicationOffset:
encodeToCommandBuffer:computeCommandEncoder:options:pluginOptions:primaryTexture:primaryInfo:secondaryTexture:secondaryInfo:destinationTexture:destinationInfo:
encodeBatchToCommandBuffer:computeCommandEncoder:options:pluginOptions:primaryTextures:primaryInfo:secondaryTextures:secondaryInfo:destinationTextures:destinationInfo:predicationBuffer:predicationOffset:
reloadWeightsAndBiases:
reloadWeightsAndBiasesWithCommandBuffer:encoder:weights:biases:predicationBuffer:predicationOffset:
exportWeightsAndBiasesWithCommandBuffer:encoder:weights:biases:predicationBuffer:predicationOffset:
reloadWeightsAndBiasesWithCommandBuffer:encoder:weights:weightsDataType:biases:predicationBuffer:predicationOffset:
exportWeightsAndBiasesWithCommandBuffer:encoder:weights:weightsDataType:biases:predicationBuffer:predicationOffset:
reloadWeights:
reloadWeightsWithCommandBuffer:encoder:weights:predicationBuffer:predicationOffset:
reloadWeightsWithCommandBuffer:encoder:weights:weightsDataType:predicationBuffer:predicationOffset:
encodeBatchToCommandBuffer:computeCommandEncoder:options:pluginOptions:primaryTextures:primaryInfo:secondaryTextures:secondaryInfo:weightsGradient:biasesGradient:accumulate:predicationBuffer:predicationOffset:
encodeToCommandBuffer:encoder:options:batchSize:A:aInfo:B:bInfo:C:cInfo:
encodeToCommandBuffer:encoder:options:batchSize:resultRows:resultColumns:interiorColumns:alpha:beta:A:aInfo:B:bInfo:C:cInfo:
encodeToCommandBuffer:encoder:options:batchSize:resultRows:resultColumns:interiorColumns:alpha:beta:A:aInfo:B:bInfo:C:cInfo:predicationBuffer:predicationOffset:
encodeToCommandBuffer:encoder:options:batchSize:matrix:matrixStructure:vector:vectorStructure:result:resultStructure:
encodeToCommandBuffer:encoder:options:batchSize:matrix:matrixStructure:vector:vectorStructure:result:resultStructure:predicationBuffer:predicationOffset:
encodeToCommandBuffer:encoder:options:batchSize:inputMatrix:inputMatrixInfo:weightMatrix:weightMatrixInfo:biasVector:biasVectorInfo:resultMatrix:resultMatrixInfo:alpha:numberOfFeatureVectors:inputFeatureChannels:outputFeatureChannels:neuronType:neuronParameterA:neuronParameterB:neuronParameterC:
encodeToCommandBuffer:encoder:options:batchSize:inputMatrix:inputMatrixInfo:weightMatrix:weightMatrixInfo:biasVector:biasVectorInfo:resultMatrix:resultMatrixInfo:alpha:numberOfFeatureVectors:inputFeatureChannels:outputFeatureChannels:neuronType:neuronParameterA:neuronParameterB:neuronParameterC:predicationBuffer:predicationOffset:
encodeToCommandBuffer:computeCommandEncoder:options:sourceTexture:sourceInfo:destinationTexture:destinationInfo:zeroPadSizeX:zeroPadSizeY:
encodeBatchToCommandBuffer:computeCommandEncoder:options:sourceTextures:sourceInfo:destinationTextures:destinationInfo:zeroPadSizeX:zeroPadSizeY:predicationBuffer:predicationOffset:
cnnNeuronDescriptorWithType:
setA:
setB:
setC:
initWithBytesNoCopy:length:freeWhenDone:
setData:
initWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:strideInPixelsX:strideInPixelsY:groups:dilationRateX:dilationRateY:channelMultiplier:subPixelScaleFactor:isFullyConnected:isConvolutionTranspose:fusedNeuronDescriptor:
integerForKey:
setLoopTimeLimit:
setPlaybackMode:
playbackToFunction:withLoops:
numIterationsInLastPlayback
_setupPState
player
enableStatsSampling:
setupCounterConfigurationAndGetFrameProfilerCounters
mutableCopy
_profileFrameWithCounterListsForProfileInfo:
sampleEncoderCounters
_profileFrameWithCounterListsForProfileInfo:encoderPass:
addObjectsFromArray:
addCounters:
sampleSplitEncoderCounters
setupProfileInfo:
_clearData
counterInfo:
setupProfilingForCounterLists
setupProfilingForListAtIndex:
_FixSplitEncoderSamples:forProfile:withInfo:andUpdatedCounterInfo:
stopFrameProfiling
numberWithUnsignedInteger:
isEqualToString:
numberWithInt:
arrayWithObject:
arrayWithObjects:
isCounterAvailable:
dictionaryWithDictionary:
setValue:forKey:
_profileSplitEncodersForProfileInfo:
setupAllStatLocationsWithBlitOption:
_profileFrameWithCounterListsForProfileInfoAsync:encoderPass:updateStatSampling:setConsistentState:
resetFunctionPlayerData
_computeAverageForFrameProfile:forProfile:withInfo:andUpdatedCounterInfo:forEncoders:
_runPassesForCounterLists:encoderPass:frameProfileInfo:
futureWithResult:error:
future
isBlitSamplingSupported
setResult:
result
derivedCounterData
initWithPlaybackEngine:
profileFrameWithPayload:
addCommandBufferFrameProfile:
profileEncodersForProfileInfo:
profileFrameWithCounterListsForProfileInfo:
profileFrameWithCounterListsForProfileInfoAsync:
_profileFrameWithCounterListsForProfileInfo:setConsistentState:
availableCounters
_commandBufferFrameProfilesInfo
_commandBufferFrameProfilesPerDMDrawCallInfo
_commandBufferFrameProfiles
_frameProfiling
_engine
_needsMultiplePasses
_loopCount
forDevice:
textureFromTexture:slice:level:depthPlane:commandBuffer:
resolveMultisampleTexture:slice:level:depthPlane:commandBuffer:
stencilTextureFromTexture:commandBuffer:
generateThumbnailFromTexture:commandBuffer:resolution:withFence:
shouldIgnoreCaptureFile
mainExecutionMode
executeFunctions:count:subCommandIndex:
synchronizeTexture:slice:level:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:
generateMipmapsForTexture:
fillBuffer:range:value:
copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:
copyFromTexture:toTexture:
optimizeContentsForGPUAccess:
optimizeContentsForGPUAccess:slice:level:
optimizeContentsForCPUAccess:
optimizeContentsForCPUAccess:slice:level:
resetCommandsInBuffer:withRange:
resolveCounters:inRange:destinationBuffer:destinationOffset:
applyToEncoder:rawBytesBlock:
_updateMemorylessTextures:
applyAllStateToEncoder:rawBytesBlock:
_splitBlitEncoder
playbackMode
resolveTexture
renderCommandEncoderWithDescriptor:
_addRenderPassDescriptorToEncoderMapFromRenderPassDescriptor:forEncoder:
_executeGraphicsFunction
_trackObjects
playbackOptions
boolValue
_generateThumbnailAndResourceInfoForRequestedTextures:resolution:commandBuffer:
storeAction
encodeStoreActionForParallelRenderCommandEncoder:withDescriptor:
encodeStoreActionForRenderCommandEncoder:withDescriptor:
arrayWithArray:
level
slice
depthPlane
resizeTexture:resolution:level:slice:depthPlane:inBuffer:withType:completion:
replayerLayerForDrawableId:
targetFunctionIndex
removeAllObjects
targetSubCommandIndex
_executeIndirectCommandBufferUpToSubIndex:outBuffer:outDataPointer:
extractIndirectArgumentBuffers
extractCommandBufferTranslationData
_splitCommandEncoders
executedDrawCallCount
setExecutedDrawCallCount:
extractRenderIndirectArgumentBuffers:
extractComputeIndirectArgumentBuffers:
firstObject
dataTypeDescription
elementIsArgumentBuffer
_superExecutePlatformFunction
updateReplayerLayer:withOriginalLayer:
prepareForCaptureExecution
resetLayersVisibility
renderCommandEncoder
_endEncodingForAllRemainingEncoders:
_attachmentInfoForCommandEncoderID:
boundsForCurrentInterfaceOrientation
shrinkSourceSize:toDestSize:
setBounds:
defaultContentsScale
setContentsScale:
_texture2DFromTexture:level:slice:depthPlane:commandBuffer:
enableWireframePresent
wireframeLineColor
enableOutlinePresent
currentTopLayer
deleteLayer:
position
setPosition:
anchorPoint
setAnchorPoint:
anchorPointZ
setAnchorPointZ:
transform
setTransform:
drawableSize
_modifyDescriptorForStore:
_modifyDescriptorForLayering:withBuffer:
_updateRemainingCommandsForEncoder
_isFunctionCommandEncoderCreation
_isReceiverTypeCommandEncoderRelated
_addRenderPassDescriptorToEncoderMapFromArgumentPointer:forEncoder:
loadAction
_forceAttachmentLoadActionToLoad:
_forceAttachmentStoreActionToStore:
_swizzleAttachmentTextureForLoad:withBuffer:
lowercaseString
removeObject:
setStatEnabled:
setStatOptions:
getListIndex
addPerfSampleHandler:
requestCounters:withIndex:
counterInfo
setWithArray:
subdivideCounterList:
initWithMTLDevice:
counterDictionary
allKeys
derivedCounterScript
analysisScript
configurationVariables
metalPluginName
currentEncoderIndex
thumbnailTexture:
harvestableTexture:
encoderMap
thumbnailCache
dependencyGraphThumbnailCache
_splitComputeEncoder
_splitRenderEncoders
commitEncodersAndCommandBuffers
waitForCommmandBuffersCompletion
presentDrawable
_generateNopDrawPipelineData
setupBatchFilterForEncoders:
wireframeRenderMode
setWireframeRenderMode:
postVertexDump
targetFunctionNeedsSeparatedPostVertexDump
shaderDebuggerTraceGenerator
setShouldIgnoreCaptureFile:
setCurrentEncoderIndex:
counterListsPerPass
setCounterListsPerPass:
statVertices
setStatVertices:
statPixels
setStatPixels:
frameCounters
setFrameCounters:
_drawableIdToLayerIdMap
_textureToDrawableMap
_commandEncoderDescriptorMap
_counterInfos
_baseCounterIndexForList
_commandBufferMap
_encoderMap
_parallelEncoderMap
_encoderToParallelEncoderMap
_lastEncoderID
_disableWireframe
_wireframeRenderer
_wireframeRenderMode
_nRemainingCommandsForCurrentEncoder
_parallelRenderCommandEncoderDescriptor
_dyParallelRenderCommandEncoderDescriptor
_parallelCommandBufferId
_profileInfo
_batchInfos
_splitEncoderCommandCount
_stageInRegion
_bSetStageInRegion
_stageInIndirectBufferId
_stageInIndirectBufferOffset
_isTileRenderPassDescriptor
_nopDrawFunction
_nopRenderPipelineState
_isDeltaCounter
_postVertexDump
_targetFunctionNeedsSeparatedPostVertexDump
_shaderDebuggerTraceGenerator
_textureRenderer
_commandBufferIndex
_encoderIndex
_drawIndex
_supportsTessellation
_targetCommandEncoderId
_metalLayers
_lastCommandBufferId
_lastCommandBufferIndex
_lastEncoderIndex
_lastSampleCommandBufferEncoderId
_last
_thumbnailDictionary
_dependencyGraphThumbnails
_parallelEncoderCommandBufferID
_dependencyGraphParallelDescriptor
_dependencyGraphDYMTLParallelDescriptor
_sparseTextureFence
_shouldIgnoreCaptureFile
_currentEncoderIndex
_counterListsPerPass
_statVertices
_statPixels
_frameCounters
substringWithRange:
integerValue
animationTimingFunction
animationDuration
disableActions
completionBlock
setDisableActions:
flush
setAnimationTimingFunction:
setAnimationDuration:
setCompletionBlock:
initWithEncoder:dispatchType:
_computeEncoder
_computePipelineState
_usedHeaps
_usedResources
_buffers
_textures
_samplers
_threadgroupMemories
_stageInRegionIndirectBuffer
_dispatchType
_stageInRegionIndirectBufferOffset
_imageBlockWidth
_imageBlockHeight
_hasSetStageInRegion
computeCommandEncoderWithDispatchType:
setDepthClipModeSPI:
setLineWidth:
_applyHeapsAndResourcesToEncoder:
_applyVertexStateToEncoder:rawBytesBlock:
viewports
_scissorRects
_blendColorRed
_blendColorGreen
_blendColorBlue
_blendColorAlpha
_depthBias
_depthBiasSlopeScale
_depthBiasClamp
_frontStencilRef
_backStencilRef
_triangleFillMode
_visibilityResultMode
_visibilityResultOffset
_depthStencilState
_frontFacingWinding
_cullMode
_depthClipMode
_lineWidth
_tessellationFactorScale
_tessellationFactorBuffer
_tessellationFactorBufferOffset
_tessellationFactorBufferInstanceStride
_tessellationFactorSet
_vertexTextures
_vertexSamplers
_fragmentTextures
_fragmentSamplers
_colorStoreInfos
_depthStoreInfo
_stencilStoreInfo
_viewports
newLibraryWithCIFilters:imageFilterFunctionInfo:error:
newComputePipelineStateWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:
newTiledTextureWithBytesNoCopy:length:descriptor:offset:bytesPerRow:
newLibraryWithFile:error:
presentDrawable:
presentDrawable:atTime:
setGPUPriority:
setGPUPriority:offset:
setBackgroundGPUPriority:
setBackgroundGPUPriority:offset:
encodeWaitForEvent:value:timeout:
reserveResourceIndicesForResourceType:indices:indexCount:
constantDataAtIndex:
setArgumentBuffer:startOffset:arrayElement:
newLinearTextureWithDescriptor:offset:bytesPerRow:bytesPerImage:
newTiledTextureWithDescriptor:offset:bytesPerRow:
setProfilingEnabled:
addCompletedHandler:
addPurgedHeap:
addPurgedResource:
addScheduledHandler:
commitAndHold
debugCommandEncoder
doCorruptCBSPI:
encodeSignalEvent:value:
encodeWaitForEvent:value:
enqueue
videoCommandEncoder
waitUntilScheduled
setExecutionEnabled:
setSkipRender:
getGPUPriority
insertDebugCaptureBoundary
dispatchThreadsWithIndirectBuffer:indirectBufferOffset:
resolveCounterRange:
setCurrentUtilityBufferIndex:
setMetalAssertionsEnabled:
setResourceIndirectionEnabled:
minLinearTextureAlignmentForPixelFormat:
newBufferWithIOSurface:
newCommandQueueWithDescriptor:
newCommandQueueWithMaxCommandBufferCount:
newCounterSampleBufferWithDescriptor:error:
newDefaultLibrary
newEvent
newFence
newHeapWithDescriptor:
newTextureWithDescriptor:iosurface:plane:
unmapShaderSampleBuffer
maxAvailableSizeWithAlignment:
newBufferWithLength:options:offset:
newTextureWithDescriptor:offset:
resetWithRange:
setOverrideTriple:
newExternFunctionWithName:
setDisableRunTimeCompilation:
newComputePipelineStateWithName:options:reflection:error:
newRenderPipelineStateWithName:options:reflection:error:
setPrimitiveRestartEnabled:
setSignaledValue:
newSharedEventHandle
generateMotionVectorsForTexture:previousTexture:resultBuffer:bufferOffset:
pushBlock:
dequeBlock
front
clear
_blockQueue
setQueue:
setArchiveStack:
origSourceMessageHandler
source
setMessageHandler:
doesNotRecognizeSelector:
setTransport:
transport
setSource:
suspend
messageHandler
setOrigSourceMessageHandler:
_pushMessage:
resume
messageWithKind:attributes:
send:error:
_loadArchives:error:
archiveStack
_replayerControllerSupportForCaptureStore:
setReplayControllerSupport:
replayControllerSupport
createArchivePlaybackEngineWithCaptureStore:
setPlaybackEngine:
_displayPlaybackEngine
playbackEngine
playback
notifyOnQueue:handler:
waitUntilResolved
removeObjectAtIndex:
kind
numberWithBool:
messageWithKind:objectPayload:
send:inReplyTo:error:
messageWithKind:attributes:payload:
predicateWithBlock:
filterUsingPredicate:
_messageLoop
_popMessage
_processMessage:
messageWithKind:
_deleteAllArchives
_archiveDirectory
messageWithKind:attributes:stringPayload:
replayMessage
errorWithDomain:code:userInfo:
messageWithKind:attributes:objectPayload:
plistPayload
allObjects
uuid
path
lastPathComponent
initWithObjectsAndKeys:
messageWithKind:attributes:plistPayload:
_handleArchiveLoadingForPlaybackRequest:replyKind:
setReplayMessage:
attributeForKey:
setWithObjects:
unarchivedObjectOfClasses:fromData:error:
initWithArray:
setExperiments:
setProfileInfo:
profileInfo
_playbackCurrentArchiveAndExperiments
archivedDataWithRootObject:requiringSecureCoding:error:
_beginDebugArchive
_endPlayback
isDebugPlaybackEngine:
objectPayload
playbackToFunction:subCommandIndex:withLoops:
enableDebugWireframePresent:playbackEngine:
setDebugWireframeLineWidth:playbackEngine:
setWireframeLineColor:playbackEngine:
enableDebugOutlinePresent:playbackEngine:
enableDebugDrawCallPresent:playbackEngine:
disableDebugFunctions:playbackEngine:
enableDebugFunctions:playbackEngine:
generateThumbnailsWithPlaybackEngine:forMessage:onReady:
generateShaderDebuggerTraceForMessage:playbackEngine:onReady:
generateDependencyGraphThumbnailsWithPlaybackEngine:forMessage:onReady:
currentFunctionIndex
setTargetFunctionIndex:
setTargetSubCommandIndex:
close
stringByAppendingPathComponent:
fileURLWithPath:
initWithURL:options:error:
push:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
pathExtension
caseInsensitiveCompare:
removeItemAtURL:error:
endPlayback
stringPayload
empty
experiments
_playbackArchiveWithExperiment:passingFuture:resolvingFuture:
_recursivePlaybackWithFuture:usingExperiment:withToplevelFuture:
objectAtIndex:
boolResult
createOverridingPlaybackEngineWithCaptureStore:experiment:
experimentResultsGeneratorForPlaybackEngine:
begin
resolveWithFuture:
createDebugPlaybackEngineWithCaptureStore:
sharedController
profileBlockQueue
profileBlockBackgroundQueue
initializeTransportWith:
informReady
playbackArchive:
_messageLock
_messageProcessingQueue
_messageQueue
_profileBlockQueue
_profileBlockBackgroundQueue
DYMTLFunctionPlayer
DYMTLCommonFunctionPlayer
DYMTLDebugWireframeRenderer
IndirectRenderCommandEncoderState
MTLBuffer
MTLResource
NSObject
MTLRenderPipelineState
MTLComputePipelineState
DYMTLIndirectCommandBufferManager
DYMTLIndirectCommandBufferTranslateDelegate
DYMTLPostVertexDump
DYMTLLibraryInfo
DYMTLIndirectCommandBufferInfo
DYMTLTextureRenderer
DYMTLIndirectArgumentBufferManager
MTLRenderCommandEncoder
MTLCommandEncoder
MTLComputeCommandEncoder
MTLTextureSPI
MTLTexture
MTLResourceSPI
DYMTLShaderDebuggerTraceGenerator
DYMTLParallelRenderCommandEncoderStateTracker
DYMTLDebugPlaybackEngineCounterSupport
MTLBlitCommandEncoder
MTLParallelRenderCommandEncoder
DYLayerManager
DYMTLCommonDebugFunctionPlayer
DYMTLComputeCommandEncoderStateTracker
q!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DYMTLRenderCommandEncoderStateTracker
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DYReplayControllerQueue
DYReplayController
^v24@0:8Q16
@24@0:8@16
v16@0:8
@32@0:8Q16@24
v32@0:8@16Q24
@24@0:8Q16
v24@0:8Q16
Q24@0:8@16
^{unordered_map<unsigned long long, id, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, id> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, id>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, id> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::equal_to<unsigned long long>, true> >=f}}}16@0:8
r^v24@0:8Q16
c24@0:8Q16
v40@0:8Q16Q24Q32
@48@0:8@16*24Q32Q40
@16@0:8
c16@0:8
v24@0:8@16
{unordered_map<unsigned long long, id, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, id> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, id>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, id> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id>, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{set<id, std::__1::less<id>, std::__1::allocator<id> >="__tree_"{__tree<id, std::__1::less<id>, std::__1::allocator<id> >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::less<id> >="__value_"Q}}}
{unordered_map<unsigned long long, NSData *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, NSData *> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, NSData *>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, NSData *>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, NSData *>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, NSData *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, NSData *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, NSData *>, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, NSData *>, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
@"NSMutableDictionary"
@"DYMTLIndirectArgumentBufferManager"
@"DYMTLIndirectCommandBufferManager"
@"<MTLDevice>"
{unordered_map<unsigned long long, id<CAMetalDrawable>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, id<CAMetalDrawable> > > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<CAMetalDrawable> >, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{unordered_map<unsigned long long, bool, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, bool> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, bool>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, bool>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, bool>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, bool> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, bool>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, bool>, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, bool>, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
@"<DYLayerManager>"
v40@0:8@16@24^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]Qc}32
q56@0:8@16@24@32@40^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]Qc}48
c24@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]Qc}16
c48@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]Qc}16Q24Q32Q40
q56@0:8Q16Q24Q32Q40^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]Qc}48
@"DYMTLCommonDebugFunctionPlayer"
@"<MTLLibrary>"
@"<MTLFunction>"
@"MTLTextureDescriptor"
@"<MTLTexture>"
@"MTLRenderPassColorAttachmentDescriptor"
@"MTLRenderPassDescriptor"
@"<MTLRenderPipelineState>"
@"<MTLComputePipelineState>"
@"<DYMTLStatefulRenderCommandEncoder>"
@"<MTLCommandBufferSPI>"
@"<DYMTLStatefulParallelRenderCommandEncoder>"
@40@0:8@16@24@32
v32@0:8@16@24
[31@"<MTLBuffer>"]
[31^v]
[31Q]
c24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
c24@0:8#16
c24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
c24@0:8@"Protocol"16
@"NSString"16@0:8
Q24@0:8Q16
v24@0:8@"NSString"16
@"<MTLDevice>"16@0:8
@"<MTLHeap>"16@0:8
^v16@0:8
v32@0:8{_NSRange=QQ}16
@40@0:8@16Q24Q32
v40@0:8@16{_NSRange=QQ}24
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16Q24Q32
v40@0:8@"NSString"16{_NSRange=QQ}24
@"<MTLBuffer>"24@0:8@"<MTLDevice>"16
@"<MTLBuffer>"16@0:8
{pair<unsigned long long, unsigned long long>=QQ}24@0:8Q16
v32@0:8Q16Q24
v48@0:8@16r*24Q32@40
I56@0:8@16r*24{_NSRange=QQ}32@48
v40@0:8@16r*24@32
Q48@0:8@16r*24Q32@40
@48@0:8r*16{_NSRange=QQ}24r^{CoreFunction=IISS(?=QQ){Argument=^vIIISS}[16{Argument=^vIIISS}]II^v^v}40
@32@0:8@16@24
@"DYMTLFunctionPlayer"
{unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, unsigned long long> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{vector<GPUTools::MTL::Utils::DYMTLBufferGPUAddress, std::__1::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress> >="__begin_"^{DYMTLBufferGPUAddress}"__end_"^{DYMTLBufferGPUAddress}"__end_cap_"{__compressed_pair<GPUTools::MTL::Utils::DYMTLBufferGPUAddress *, std::__1::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress> >="__value_"^{DYMTLBufferGPUAddress}}}
c40@0:8Q16Q24Q32
@"<MTLBuffer>"
@40@0:8Q16@24@32
@"MTLCompileOptions"
@40@0:8Q16Q24Q32
v40@0:8@16@24c32I36
v32@0:8f16f20f24f28
@"MTLRenderPipelineDescriptor"
@"MTLDepthStencilDescriptor"
{UniformData="blendColor"[4f]"layerIndex"I"padding"[3I]}
@"<MTLSamplerState>"
v60@0:8Q16I24r^v28r^v36r^v44^{dispatch_data_s=}52
v24@0:8^{dispatch_data_s=}16
v24@0:8r^v16
v56@0:8Q16Q24Q32Q40^{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >={__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >=Q}}}48
v32@0:8Q16^{unordered_map<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::equal_to<unsigned long long>, true> >=f}}}24
v32@0:8Q16^v24
v40@0:8Q16^v24^{unordered_map<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::equal_to<unsigned long long>, true> >=f}}}32
v48@0:8r^{DYMTLIABDecodingOp=QQB{vector<unsigned long long, std::__1::allocator<unsigned long long> >=^Q^Q{__compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> >=^Q}}}16Q24^v32^{unordered_map<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::equal_to<unsigned long long>, true> >=f}}}40
@32@0:8r^{DYMTLIABDecodingOp=QQB{vector<unsigned long long, std::__1::allocator<unsigned long long> >=^Q^Q{__compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> >=^Q}}}16^@24
v24@0:8^{map<__unsafe_unretained id<MTLBuffer>, std::__1::vector<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *>, std::__1::allocator<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *> > >, std::__1::less<__unsafe_unretained id<MTLBuffer> >, std::__1::allocator<std::__1::pair<const __unsafe_unretained id<MTLBuffer>, std::__1::vector<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *>, std::__1::allocator<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *> > > > > >={__tree<std::__1::__value_type<__unsafe_unretained id<MTLBuffer>, std::__1::vector<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *>, std::__1::allocator<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *> > > >, std::__1::__map_value_compare<__unsafe_unretained id<MTLBuffer>, std::__1::__value_type<__unsafe_unretained id<MTLBuffer>, std::__1::vector<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *>, std::__1::allocator<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *> > > >, std::__1::less<__unsafe_unretained id<MTLBuffer> >, true>, std::__1::allocator<std::__1::__value_type<__unsafe_unretained id<MTLBuffer>, std::__1::vector<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *>, std::__1::allocator<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *> > > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<__unsafe_unretained id<MTLBuffer>, std::__1::vector<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *>, std::__1::allocator<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *> > > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<__unsafe_unretained id<MTLBuffer>, std::__1::__value_type<__unsafe_unretained id<MTLBuffer>, std::__1::vector<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *>, std::__1::allocator<std::__1::tuple<unsigned long long, id<MTLFunction>, MTLArgument *> > > >, std::__1::less<__unsafe_unretained id<MTLBuffer> >, true> >=Q}}}16
v48@0:8@16Q24@32@40
^{map<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> >, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > > > >={__tree<std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, std::__1::less<unsigned long long>, true> >=Q}}}16@0:8
^{unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, unsigned long long> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, unsigned long long>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, unsigned long long>, std::__1::equal_to<unsigned long long>, true> >=f}}}16@0:8
^{unordered_map<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >={__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true> >=f}}}16@0:8
^{map<unsigned long long, unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >={__tree<std::__1::__value_type<unsigned long long, unsigned long long>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, unsigned long long>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, unsigned long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, unsigned long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, unsigned long long>, std::__1::less<unsigned long long>, true> >=Q}}}16@0:8
^{dispatch_data_s=}
{vector<std::__1::pair<unsigned long long, unsigned int>, std::__1::allocator<std::__1::pair<unsigned long long, unsigned int> > >="__begin_"^{pair<unsigned long long, unsigned int>}"__end_"^{pair<unsigned long long, unsigned int>}"__end_cap_"{__compressed_pair<std::__1::pair<unsigned long long, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned long long, unsigned int> > >="__value_"^{pair<unsigned long long, unsigned int>}}}
{vector<std::__1::vector<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > >, std::__1::allocator<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > > >, std::__1::allocator<std::__1::vector<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > >, std::__1::allocator<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > > > > >="__begin_"^{vector<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > >, std::__1::allocator<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > > >}"__end_"^{vector<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > >, std::__1::allocator<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > > >}"__end_cap_"{__compressed_pair<std::__1::vector<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > >, std::__1::allocator<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > > > *, std::__1::allocator<std::__1::vector<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > >, std::__1::allocator<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > > > > >="__value_"^{vector<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > >, std::__1::allocator<std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > > >}}}
{vector<std::__1::vector<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> >, std::__1::allocator<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> >, std::__1::allocator<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> > > > > >="__begin_"^{vector<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> >, std::__1::allocator<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> > > >}"__end_"^{vector<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> >, std::__1::allocator<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> > > >}"__end_cap_"{__compressed_pair<std::__1::vector<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> >, std::__1::allocator<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> >, std::__1::allocator<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> > > > > >="__value_"^{vector<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> >, std::__1::allocator<std::__1::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo, std::__1::allocator<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo> > > >}}}
{map<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> >, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > > > >="__tree_"{__tree<std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > > > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::vector<DYMTLOriginalProcessBuffer, std::__1::allocator<DYMTLOriginalProcessBuffer> > >, std::__1::less<unsigned long long>, true> >="__value_"Q}}}
{unordered_map<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::vector<unsigned long long, std::__1::allocator<unsigned long long> > >, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{unordered_map<unsigned long long, id<MTLSamplerState>, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, id<MTLSamplerState> > > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, id<MTLSamplerState> >, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > > > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::unordered_map<unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::unordered_map<unsigned long long, unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > > > > > >, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{unordered_map<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> >, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > > > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, std::__1::set<DYMTLIABDecodingOp, std::__1::less<DYMTLIABDecodingOp>, std::__1::allocator<DYMTLIABDecodingOp> > >, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{set<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >="__tree_"{__tree<unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<unsigned long long> >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned long long, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::less<unsigned long long> >="__value_"Q}}}
{vector<DYMTLReplayerIAB, std::__1::allocator<DYMTLReplayerIAB> >="__begin_"^{DYMTLReplayerIAB}"__end_"^{DYMTLReplayerIAB}"__end_cap_"{__compressed_pair<DYMTLReplayerIAB *, std::__1::allocator<DYMTLReplayerIAB> >="__value_"^{DYMTLReplayerIAB}}}
{map<unsigned long long, unsigned long long, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, unsigned long long> > >="__tree_"{__tree<std::__1::__value_type<unsigned long long, unsigned long long>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, unsigned long long>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, unsigned long long> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, unsigned long long>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, unsigned long long>, std::__1::less<unsigned long long>, true> >="__value_"Q}}}
[5Q]
v40@0:8r^v16Q24Q32
v40@0:8@16Q24Q32
v48@0:8r^@16r^Q24{_NSRange=QQ}32
v40@0:8r^@16{_NSRange=QQ}24
v40@0:8@16f24f28Q32
v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40
v64@0:8{?=dddddd}16
v32@0:8r^{?=dddddd}16Q24
v28@0:8f16f20f24
v48@0:8{?=QQQQ}16
v32@0:8r^{?=QQQQ}16Q24
v20@0:8I16
v24@0:8I16I20
v48@0:8Q16Q24Q32Q40
v64@0:8Q16Q24Q32@40Q48Q56
v56@0:8Q16Q24Q32@40Q48
v56@0:8Q16Q24Q32Q40Q48
v80@0:8Q16Q24Q32@40Q48Q56q64Q72
v40@0:8Q16@24Q32
v64@0:8Q16Q24@32Q40@48Q56
v20@0:8f16
v72@0:8Q16Q24Q32@40Q48Q56Q64
v56@0:8Q16@24Q32@40Q48
v88@0:8Q16Q24Q32@40Q48@56Q64Q72Q80
v72@0:8Q16@24Q32@40Q48@56Q64
v40@0:8r^@16Q24Q32
v48@0:8r^@16Q24Q32Q40
v32@0:8r^@16Q24
v40@0:8@16@24Q32
v36@0:8@16Q24c32
v24@0:8@"<MTLRenderPipelineState>"16
v40@0:8@"<MTLBuffer>"16Q24Q32
v32@0:8@"<MTLTexture>"16Q24
v32@0:8@"<MTLSamplerState>"16Q24
v40@0:8@"<MTLSamplerState>"16f24f28Q32
v24@0:8@"<MTLDepthStencilState>"16
v64@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56
v56@0:8Q16Q24Q32@"<MTLBuffer>"40Q48
v80@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56q64Q72
v40@0:8Q16@"<MTLBuffer>"24Q32
v64@0:8Q16Q24@"<MTLBuffer>"32Q40@"<MTLBuffer>"48Q56
v32@0:8@"<MTLFence>"16Q24
v72@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56Q64
v56@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48
v88@0:8Q16Q24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64Q72Q80
v72@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64
v32@0:8@"<MTLResource>"16Q24
v40@0:8@"<MTLResource>"16Q24Q32
v24@0:8@"<MTLHeap>"16
v32@0:8@"<MTLHeap>"16Q24
v40@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24
v40@0:8@"<MTLIndirectCommandBuffer>"16@"<MTLBuffer>"24Q32
v36@0:8@"<MTLCounterSampleBuffer>"16Q24c32
v64@0:8{?={?=QQQ}{?=QQQ}}16
v64@0:8{?=QQQ}16{?=QQQ}40
v56@0:8@16Q24{?=QQQ}32
v24@0:8@"<MTLComputePipelineState>"16
v32@0:8@"<MTLBuffer>"16Q24
v56@0:8@"<MTLBuffer>"16Q24{?=QQQ}32
v24@0:8@"<MTLFence>"16
v104@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96
v104@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96
v88@0:8^v16Q24{?={?=QQQ}{?=QQQ}}32Q80
v88@0:8{?={?=QQQ}{?=QQQ}}16Q64r^v72Q80
@64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
^{__IOSurface=}16@0:8
{?=CCCC}16@0:8
@"<MTLTexture>"24@0:8Q16
@"<MTLTexture>"64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@"MTLSharedTextureHandle"16@0:8
@"<MTLTexture>"24@0:8@"<MTLDevice>"16
@"<MTLTexture>"68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
@"<MTLResource>"16@0:8
@"<MTLTexture>"16@0:8
c32@0:8r^@16Q24
i16@0:8
v20@0:8i16
c24@0:8@"<MTLResource>"16
@"MTLResourceAllocationInfo"16@0:8
I16@0:8
c32@0:8@16@24
c36@0:8@16@24i32
v32@0:8Q16@24
@"NSString"
{map<MTLTextureType, id<MTLTexture>, std::__1::less<MTLTextureType>, std::__1::allocator<std::__1::pair<const MTLTextureType, id<MTLTexture> > > >="__tree_"{__tree<std::__1::__value_type<MTLTextureType, id<MTLTexture> >, std::__1::__map_value_compare<MTLTextureType, std::__1::__value_type<MTLTextureType, id<MTLTexture> >, std::__1::less<MTLTextureType>, true>, std::__1::allocator<std::__1::__value_type<MTLTextureType, id<MTLTexture> > > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<MTLTextureType, id<MTLTexture> >, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<MTLTextureType, std::__1::__value_type<MTLTextureType, id<MTLTexture> >, std::__1::less<MTLTextureType>, true> >="__value_"Q}}}
@"<MTLArgumentEncoder>"
{map<id<MTLSamplerState>, unsigned long long, std::__1::less<id<MTLSamplerState> >, std::__1::allocator<std::__1::pair<const id<MTLSamplerState>, unsigned long long> > >="__tree_"{__tree<std::__1::__value_type<id<MTLSamplerState>, unsigned long long>, std::__1::__map_value_compare<id<MTLSamplerState>, std::__1::__value_type<id<MTLSamplerState>, unsigned long long>, std::__1::less<id<MTLSamplerState> >, true>, std::__1::allocator<std::__1::__value_type<id<MTLSamplerState>, unsigned long long> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<id<MTLSamplerState>, unsigned long long>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<id<MTLSamplerState>, std::__1::__value_type<id<MTLSamplerState>, unsigned long long>, std::__1::less<id<MTLSamplerState> >, true> >="__value_"Q}}}
@"NSDictionary"
{unordered_map<unsigned long, id<MTLBuffer>, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, id<MTLBuffer> > > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, std::__1::hash<unsigned long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, id<MTLBuffer> >, std::__1::equal_to<unsigned long>, true> >="__value_"f}}}
@"NSData"
@"<MTLParallelRenderCommandEncoder>"
B52@0:8^{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}16r^{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}24@32@40c48
v24@0:8r^{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}16
c48@0:8^{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}16r^{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}24@32@40
^{NSDictionary=#}24@0:8@16
@36@0:8@16c24^{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >=^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}28
@36@0:8@16c24c28I32
@28@0:8@16c24
@28@0:8@16I24
{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >="__begin_"^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}"__end_"^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}"__end_cap_"{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >="__value_"^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}
{vector<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >="__begin_"^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}"__end_"^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}"__end_cap_"{__compressed_pair<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::__1::allocator<std::__1::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> > >="__value_"^{tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>}}}
{vector<unsigned long long, std::__1::allocator<unsigned long long> >="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> >="__value_"^Q}}
@"DYPlaybackEngine"
v136@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104{?=QQQ}112
v120@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96
v128@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96Q120
v120@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112
v128@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112Q120
v44@0:8@16{_NSRange=QQ}24C40
v80@0:8@16Q24Q32@40Q48Q56Q64Q72
v56@0:8@16Q24@32Q40Q48
v56@0:8@16{_NSRange=QQ}24@40Q48
v24@0:8@"<MTLResource>"16
v40@0:8@"<MTLTexture>"16Q24Q32
v136@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLTexture>"88Q96Q104{?=QQQ}112
v120@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96
v128@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96Q120
v120@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112
v128@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112Q120
v24@0:8@"<MTLTexture>"16
v44@0:8@"<MTLBuffer>"16{_NSRange=QQ}24C40
v80@0:8@"<MTLTexture>"16Q24Q32@"<MTLTexture>"40Q48Q56Q64Q72
v32@0:8@"<MTLTexture>"16@"<MTLTexture>"24
v56@0:8@"<MTLBuffer>"16Q24@"<MTLBuffer>"32Q40Q48
v56@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24@"<MTLIndirectCommandBuffer>"40Q48
v56@0:8@"<MTLCounterSampleBuffer>"16{_NSRange=QQ}24@"<MTLBuffer>"40Q48
@"<MTLRenderCommandEncoder>"16@0:8
@76@0:8Q16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@64B72
v72@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@64
v40@0:8r^{Argument=^vIIISS}16Q24r^{pair<double, double>=}32
v32@0:8r^{Argument=^vIIISS}16Q24
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
d16@0:8
@"CALayer"76@0:8Q16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@"NSDictionary"64B72
v72@0:8@"CALayer"16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@"NSDictionary"64
@"CALayer"24@0:8Q16
@"CALayer"16@0:8
v24@0:8@"CALayer"16
^{unordered_map<unsigned long long, EncoderInfo, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, EncoderInfo> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, EncoderInfo> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true> >=f}}}16@0:8
@56@0:8@16{?=QQQ}24@48
v36@0:8^{CoreFunction=IISS(?=QQ){Argument=^vIIISS}[16{Argument=^vIIISS}]II^v^v}16Q24I32
v24@0:8^{unordered_map<unsigned long long, EncoderInfo, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, EncoderInfo> > >={__hash_table<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, EncoderInfo> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true> >=f}}}16
@56@0:8@16Q24Q32Q40@48
{AttachmentInfo=QQQQ}24@0:8Q16
v32@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}QQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]Qc}16Q24
v32@0:8^v16Q24
B16@0:8
v20@0:8c16
B24@0:8@16
B24@0:8Q16
Q40@0:8Q16^@24r^*32
q16@0:8
v24@0:8q16
{unordered_map<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{vector<unsigned long, std::__1::allocator<unsigned long> >="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >="__value_"^Q}}
{unordered_map<unsigned long long, CommandBufferInfo, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, CommandBufferInfo> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{unordered_map<unsigned long long, EncoderInfo, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, EncoderInfo> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, EncoderInfo> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, EncoderInfo>, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{unordered_set<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >="__table_"{__hash_table<unsigned long long, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<unsigned long long> >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned long long, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<unsigned long long, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::hash<unsigned long long> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::equal_to<unsigned long long> >="__value_"f}}}
@"DYMTLDebugWireframeRenderer"
{DYMTLRenderPassDescriptor="visibilityResultBuffer"Q"renderTargetArrayLength"Q"colorAttachments"[8{DYMTLRenderPassAttachmentDescriptor="texture"Q"level"Q"slice"Q"depthPlane"Q"resolveTexture"Q"resolveLevel"Q"resolveSlice"Q"resolveDepthPlane"Q"loadAction"Q"storeAction"Q"storeActionOptions"Q"clearValue"{DYMTLClearValue=""(?=""{?="red"d"green"d"blue"d"alpha"d}"colors"[4d])}"depthResolveFilter"Q"stencilResolveFilter"Q}]"depthAttachment"{DYMTLRenderPassAttachmentDescriptor="texture"Q"level"Q"slice"Q"depthPlane"Q"resolveTexture"Q"resolveLevel"Q"resolveSlice"Q"resolveDepthPlane"Q"loadAction"Q"storeAction"Q"storeActionOptions"Q"clearValue"{DYMTLClearValue=""(?=""{?="red"d"green"d"blue"d"alpha"d}"colors"[4d])}"depthResolveFilter"Q"stencilResolveFilter"Q}"stencilAttachment"{DYMTLRenderPassAttachmentDescriptor="texture"Q"level"Q"slice"Q"depthPlane"Q"resolveTexture"Q"resolveLevel"Q"resolveSlice"Q"resolveDepthPlane"Q"loadAction"Q"storeAction"Q"storeActionOptions"Q"clearValue"{DYMTLClearValue=""(?=""{?="red"d"green"d"blue"d"alpha"d}"colors"[4d])}"depthResolveFilter"Q"stencilResolveFilter"Q}"imageblockSampleLength"Q"threadgroupMemoryLength"Q"tileWidth"Q"tileHeight"Q"renderTargetWidth"Q"renderTargetHeight"Q"defaultRasterSampleCount"Q"rasterizationRateMap"Q"customSamplePositions"[8{DYMTLSamplePosition="x"f"y"f}]"customSampleCount"Q"openGLModeEnabled"c}
@"NSArray"
{?="origin"{?="x"Q"y"Q"z"Q}"size"{?="width"Q"height"Q"depth"Q}}
{vector<bool, std::__1::allocator<bool> >="__begin_"^Q"__size_"Q"__cap_alloc_"{__compressed_pair<unsigned long, std::__1::allocator<unsigned long> >="__value_"Q}}
@"DYMTLPostVertexDump"
@"DYMTLShaderDebuggerTraceGenerator"
@"DYMTLTextureRenderer"
{unordered_map<unsigned long long, CAMetalLayer *, std::__1::hash<unsigned long long>, std::__1::equal_to<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, CAMetalLayer *> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, std::__1::hash<unsigned long long>, true>, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, std::__1::equal_to<unsigned long long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long long, std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, std::__1::hash<unsigned long long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long long, std::__1::__hash_value_type<unsigned long long, CAMetalLayer *>, std::__1::equal_to<unsigned long long>, true> >="__value_"f}}}
{tuple<unsigned long long, unsigned long long>="__base_"{__tuple_impl<std::__1::__tuple_indices<0, 1>, unsigned long long, unsigned long long>="__value_"Q"__value_"Q}}
@"<MTLFence>"
@"NSMutableArray"
v24@0:8@?16
v32@0:8@16@?24
@"<MTLComputePipelineState>"16@0:8
v24@0:8@?<v@?^{DYMTLBoundBufferInfo=@^vQ}Q^c>16
v24@0:8@?<v@?@"<MTLTexture>"Q^c>16
v24@0:8@?<v@?^{DYMTLBoundSamplerInfo=@ff}Q^c>16
v32@0:8@"<MTLComputeCommandEncoder>"16@?<^v@?^vQ>24
@32@0:8@16Q24
@"<MTLComputeCommandEncoderSPI>"
{vector<id<MTLHeap>, std::__1::allocator<id<MTLHeap> > >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<__strong id<MTLHeap> *, std::__1::allocator<id<MTLHeap> > >="__value_"^@}}
{vector<DYMTLUsedResourceInfo, std::__1::allocator<DYMTLUsedResourceInfo> >="__begin_"^{DYMTLUsedResourceInfo}"__end_"^{DYMTLUsedResourceInfo}"__end_cap_"{__compressed_pair<DYMTLUsedResourceInfo *, std::__1::allocator<DYMTLUsedResourceInfo> >="__value_"^{DYMTLUsedResourceInfo}}}
[31{DYMTLBoundBufferInfo="m_buffer"@"<MTLBuffer>""m_bytes"^v"m_offsetOrLength"Q}]
[128@"<MTLTexture>"]
[16{DYMTLBoundSamplerInfo="sampler"@"<MTLSamplerState>""minLOD"f"maxLOD"f}]
{vector<MTLViewport, std::__1::allocator<MTLViewport> >=^{?}^{?}{__compressed_pair<MTLViewport *, std::__1::allocator<MTLViewport> >=^{?}}}16@0:8
@"<MTLRenderPipelineState>"16@0:8
@"MTLRenderPassDescriptor"16@0:8
v32@0:8@"<MTLRenderCommandEncoder>"16@?<^v@?I^vQ>24
@"<MTLRenderCommandEncoderSPI>"
{vector<MTLScissorRect, std::__1::allocator<MTLScissorRect> >="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<MTLScissorRect *, std::__1::allocator<MTLScissorRect> >="__value_"^{?}}}
@"<MTLDepthStencilState>"
{vector<__unsafe_unretained id<MTLHeap>, std::__1::allocator<__unsafe_unretained id<MTLHeap> > >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<__unsafe_unretained id<MTLHeap> *, std::__1::allocator<__unsafe_unretained id<MTLHeap> > >="__value_"^@}}
{unordered_map<unsigned long, DYMTLStoreInfo, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, DYMTLStoreInfo> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::__1::hash<unsigned long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::__1::equal_to<unsigned long>, true> >="__value_"f}}}
{DYMTLStoreInfo="action"Q"options"Q}
{vector<MTLViewport, std::__1::allocator<MTLViewport> >="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<MTLViewport *, std::__1::allocator<MTLViewport> >="__value_"^{?}}}
@?16@0:8
{queue<void (^)(), std::__1::deque<void (^)(), std::__1::allocator<void (^)()> > >="c"{deque<void (^)(), std::__1::allocator<void (^)()> >="__map_"{__split_buffer<void (^__strong *)(), std::__1::allocator<void (^__strong *)()> >="__first_"^^@?"__begin_"^^@?"__end_"^^@?"__end_cap_"{__compressed_pair<void (^__strong **)(), std::__1::allocator<void (^__strong *)()> >="__value_"^^@?}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::__1::allocator<void (^)()> >="__value_"Q}}}
c32@0:8@16^@24
c28@0:8@16i24
v40@0:8@16@24@32
v36@0:8@16@24B32
^{dispatch_queue_s=}16@0:8
v24@0:8^{dispatch_queue_s=}16
^{dispatch_queue_s=}
@"DYReplayControllerQueue"
@"DYTransport"
@"DYTransportSource"
@"DYTransportMessage"
@"DYCaptureArchiveStack"
@"<DYReplayControllerSupport>"
