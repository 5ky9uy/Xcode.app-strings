e1000:%s(%d): %s
e1000_calculate_checksum
e1000_mng_enable_host_if_generic
ARC subsystem not valid.
E1000_HOST_EN bit disabled.
Previous command timeout failed .
e1000_check_mng_mode_generic
e1000_enable_tx_pkt_filtering_generic
e1000_mng_write_cmd_header_generic
e1000_mng_host_if_write_generic
e1000_mng_write_dhcp_info_generic
e1000_enable_mng_pass_thru
e1000_host_interface_command
Hardware doesn't support host interface command.
Firmware is not present.
Buffer length failure.
Command has failed with no status valid.
e1000_init_nvm_params_82575
e1000_init_function_pointers_82575
e1000_rx_fifo_flush_82575
e1000_rx_fifo_workaround_82575
Queue disable timed out after 10ms
e1000_set_eee_i350
e1000_init_mac_params_82575
e1000_get_media_type_82575
Link mode mask doesn't fit bit field size
e1000_sgmii_uses_mdio_82575
e1000_set_sfp_media_type_82575
PHY module has not been recognized
e1000_reset_hw_82580
PCI-E Master disable polling has failed.
Masking off all interrupts
Auto Read Done did not complete
Could not reset MDICNFG based on EEPROM
e1000_reset_init_script_82575
Running reset init script for 82575
e1000_reset_mdicnfg_82580
NVM Read Error
e1000_reset_hw_82575
PCI-E Set completion timeout has failed.
Issuing a global reset to MAC
e1000_init_hw_82575
Error initializing identification LED
Initializing the IEEE VLAN
Zeroing the MTA
Zeroing the UTA
e1000_setup_copper_link_82575
Error resetting the PHY.
e1000_setup_serdes_link_82575
e1000:%s(%d): Configuring Autoneg:PCS_LCTL=0x%08X
e1000:%s(%d): Configuring Forced Link:PCS_LCTL=0x%08X
e1000_shutdown_serdes_link_82575
e1000_power_up_serdes_link_82575
e1000_check_for_link_82575
Error configuring flow control
e1000_get_pcs_speed_and_duplex_82575
e1000_read_mac_addr_82575
e1000_config_collision_dist_82575
e1000_write_vfta_i350
e1000_write_vfta_350
e1000_clear_vfta_i350
e1000_clear_vfta_350
e1000_clear_hw_cntrs_82575
e1000_get_link_up_info_82575
e1000_acquire_swfw_sync_82575
Driver can't access resource, SW_FW_SYNC timeout.
e1000_release_swfw_sync_82575
e1000_init_phy_params_82575
e1000_get_cfg_done_82575
MNG configuration cycle has not completed.
e1000_phy_hw_reset_sgmii_82575
Soft resetting SGMII attached PHY...
e1000_read_phy_reg_sgmii_82575
e1000:%s(%d): PHY Address %u is out of range
e1000_write_phy_reg_sgmii_82575
e1000:%s(%d): PHY Address %d is out of range
e1000_read_phy_reg_82580
e1000_write_phy_reg_82580
e1000_get_phy_id_82575
e1000:%s(%d): Vendor ID 0x%08X read at address %u
e1000:%s(%d): PHY address %u was unreadable
e1000_set_d0_lplu_state_82575
e1000_set_d0_lplu_state_82580
e1000_set_d3_lplu_state_82580
e1000_acquire_nvm_82575
Nvm bit banging access error detected and cleared.
e1000_release_nvm_82575
e1000_valid_led_default_82575
e1000_validate_nvm_checksum_82580
e1000_validate_nvm_checksum_with_offset
NVM Checksum Invalid
e1000_update_nvm_checksum_82580
NVM Read Error while updating checksum compatibility bit.
NVM Write Error while updating checksum compatibility bit.
e1000_update_nvm_checksum_with_offset
NVM Read Error while updating checksum.
NVM Write Error while updating checksum.
e1000_validate_nvm_checksum_i350
e1000_update_nvm_checksum_i350
e1000_init_mac_params
MAC Initialization Error
mac.init_mac_params was NULL
e1000_init_nvm_params
NVM Initialization Error
nvm.init_nvm_params was NULL
e1000_init_phy_params
PHY Initialization Error
phy.init_phy_params was NULL
e1000_init_mbx_params
Mailbox Initialization Error
mbx.init_mbx_params was NULL
e1000_set_mac_type
e1000_setup_init_funcs
ERROR: MAC type could not be set properly.
ERROR: Registers not mapped
Hardware not supported
updateCarrier
getSupportedMediaArray
selMed
true
false
handleChosenMedia
v8@?0
drain
e1000_init_phy_ops_generic
e1000_null_set_page
e1000_null_read_reg
e1000_null_phy_generic
e1000_null_lplu_state
e1000_null_write_reg
e1000_check_reset_block_generic
e1000_check_reset_block
e1000_get_phy_id
e1000_phy_reset_dsp_generic
e1000_read_phy_reg_mdic
MDI Read did not complete
MDI Error
e1000_write_phy_reg_mdic
MDI Write did not complete
e1000_read_phy_reg_i2c
I2CCMD Read did not complete
I2CCMD Error bit set
e1000_write_phy_reg_i2c
e1000:%s(%d): PHY I2C Address %d is out of range.
I2CCMD Write did not complete
e1000_read_sfp_data_byte
I2CCMD command address exceeds upper limit
e1000_write_sfp_data_byte
e1000_read_phy_reg_m88
e1000_write_phy_reg_m88
e1000_set_page_igp
e1000:%s(%d): Setting page 0x%x
e1000_copper_link_setup_82577
e1000_copper_link_setup_m88
Error committing the PHY changes
e1000_copper_link_setup_igp
Error Disabling LPLU D0
e1000_setup_copper_link_generic
Forcing Speed and Duplex
Error Forcing Speed and Duplex
Valid link established!!!
Unable to establish link!!!
e1000_phy_force_speed_duplex_igp
e1000:%s(%d): IGP PSCR: %X
Waiting for forced speed/duplex link on IGP phy.
Link taking longer than expected.
e1000_phy_force_speed_duplex_m88
e1000:%s(%d): M88E1000 PSCR: %X
Waiting for forced speed/duplex link on M88 phy.
e1000_phy_force_speed_duplex_ife
e1000:%s(%d): IFE PMC: %X
Waiting for forced speed/duplex link on IFE phy.
e1000_phy_force_speed_duplex_setup
Half Duplex
Full Duplex
Forcing 100mb
Forcing 10mb
e1000_set_d3_lplu_state_generic
e1000_check_downshift_generic
e1000_check_polarity_m88
e1000_check_polarity_igp
e1000_check_polarity_ife
e1000_wait_autoneg_generic
e1000_phy_has_link_generic
e1000_get_cable_length_m88
e1000_get_cable_length_m88_gen2
e1000_get_cable_length_igp_2
e1000_get_phy_info_m88
Phy info is only valid for copper media
Phy info is only valid if link is up
e1000_get_phy_info_igp
e1000_get_phy_info_ife
e1000_phy_sw_reset_generic
e1000_phy_hw_reset_generic
e1000_get_cfg_done_generic
e1000_phy_init_script_igp3
Running IGP 3 PHY init script
e1000_power_up_phy_copper
e1000_power_down_phy_copper
e1000_check_polarity_82577
e1000_phy_force_speed_duplex_82577
Waiting for forced speed/duplex link on 82577 phy
e1000_get_phy_info_82577
e1000_get_cable_length_82577
e1000_write_phy_reg_gs40g
__e1000_read_phy_reg_igp
__e1000_write_phy_reg_igp
e1000_write_phy_reg_igp
__e1000_read_kmrn_reg
__e1000_write_kmrn_reg
e1000_write_kmrn_reg_generic
e1000_copper_link_autoneg
Reconfiguring auto-neg advertisement params
Error Setting up Auto-Negotiation
Restarting Auto-Neg
Error while waiting for autoneg to complete
e1000_phy_setup_autoneg
e1000:%s(%d): autoneg_advertised %x
Advertise 10mb Half duplex
Advertise 10mb Full duplex
Advertise 100mb Half duplex
Advertise 100mb Full duplex
Advertise 1000mb Half duplex request denied!
Advertise 1000mb Full duplex
Flow control param set incorrectly
e1000:%s(%d): Auto-Neg Advertising %x
Advertise 2500mb Full duplex
Start_Impl
Default
interrupt
Stop_Impl
SetInterfaceEnable_Impl
enable
disable
SetAllMulticastModeEnable_Impl
SelectMediaType_Impl
TxSubmit_Impl
/System/Volumes/Data/SWE/macOS/BuildRoots/2288acc43c/Library/Caches/com.apple.xbs/Sources/AppleIntelI210Ethernet_driverkit/AppleIntelI210Ethernet-243.101.1/DriverKit.AppleEthernetE1000/DriverKit_AppleEthernetE1000.cpp
ivars->fEnabled
RxSubmit_Impl
allocRing
allocateRings
e1000:%d:%d:%d:%s
e1000
startInterface
e1000_init_nvm_ops_generic
e1000_null_read_nvm
e1000_null_nvm_generic
e1000_null_led_default
e1000_null_write_nvm
e1000_poll_eerd_eewr_done
e1000_acquire_nvm_generic
Could not acquire NVM grant
e1000_release_nvm_generic
e1000_read_nvm_spi
nvm parameter(s) out of bounds
e1000_read_nvm_microwire
e1000_read_nvm_eerd
e1000_write_nvm_spi
e1000_write_nvm_microwire
NVM Write did not complete
e1000_read_pba_string_generic
PBA string buffer was null
NVM PBA number is not stored as string
PBA string buffer too small
NVM PBA number section invalid length
e1000_read_pba_length_generic
PBA buffer size was null
e1000_read_pba_num_generic
NVM Not Supported
e1000_get_pba_block_size
e1000_validate_nvm_checksum_generic
e1000_update_nvm_checksum_generic
e1000_update_nvm_checksum
e1000_stop_nvm
e1000_ready_nvm_eeprom
SPI NVM Status error
e1000_standby_nvm
e1000_shift_out_eec_bits
e1000_shift_in_eec_bits
e1000_reload_nvm_generic
e1000_acquire_swfw_sync_i210
e1000_read_nvm_srrd_i210
e1000_write_nvm_srwr_i210
e1000_read_invm_i211
e1000:%s(%d): Read INVM Word 0x%02x = %x
e1000:%s(%d): Requested word 0x%02x not found in OTP
e1000_validate_nvm_checksum_i210
e1000_update_nvm_checksum_i210
EEPROM read failed
e1000_update_flash_i210
Flash update time out
Flash update complete
e1000_get_hw_semaphore_i210
Driver can't access the NVM
e1000_write_nvm_srwr
e1000_pool_flash_update_done_i210
e1000_init_nvm_params_i210
e1000_valid_led_default_i210
txComplete
e1000_read_mbx
e1000_write_mbx
e1000_check_for_msg
e1000_check_for_ack
e1000_check_for_rst
e1000_read_posted_mbx
e1000_write_posted_mbx
e1000_poll_for_msg
e1000_poll_for_ack
e1000_null_mbx_transact
e1000_null_mbx_rw_msg
e1000_null_mbx_check_for_flag
e1000_null_mbx_check_flag
e1000_read_mbx_pf
e1000_obtain_mbx_lock_pf
e1000_write_mbx_pf
e1000_check_for_msg_pf
e1000_check_for_ack_pf
e1000_check_for_rst_pf
sharedReadPcieCapReg
sharedWritePcieCapReg
sharedReadPciCfg
sharedWritePciCfg
dk.e1000
device-id
probe
resetHW
initHW
halt
enableIntrs
disableIntrs
initReceiveUnit
initTransmitUnit
down
setPromiscuousModeEnable
setAllMulticastModeEnable
setMcastAddresses
activateWOL
setupmDNSOffload
setupARPOffload
setupNSOffload
getFWProxyingCapCommand
setFWProxyingCommand
sendARPCommand
sendNSCommand
sendMDNSCommand
local
buildRRrecords
mDNS_Callback
host
%02x%c
FLASH_Write
FLASH_Read
flasher_need_to_erase_sector
flasher_read_sector
flasher_dump_sector
i210_write_flash
UDP Directed written to Flex Filter
hashMcastAddress
FLASH_EraseSector
flasher_dump_burst
e1000_init_mac_ops_generic
e1000_null_ops_generic
e1000_null_mac_generic
e1000_null_link_info
e1000_null_mng_mode
e1000_null_update_mc
e1000_null_write_vfta
e1000_null_rar_set
e1000_get_bus_info_pci_generic
e1000_get_bus_info_pcie_generic
e1000_clear_vfta_generic
e1000_write_vfta_generic
e1000_init_rx_addrs_generic
Programming MAC Address into RAR[0]
e1000:%s(%d): Clearing RAR[1-%u]
e1000_check_alt_mac_addr_generic
Ignoring Alternate Mac Address with MC bit set
e1000_hash_mc_addr_generic
e1000_update_mc_addr_list_generic
e1000_pcix_mmrbc_workaround_generic
e1000_clear_hw_cntrs_base_generic
e1000_check_for_copper_link_generic
e1000_check_for_copper_link
e1000_check_for_fiber_link_generic
NOT Rx'ing /C/, disable AutoNeg and force link.
Rx'ing /C/, enable AutoNeg and stop forcing link.
e1000_check_for_serdes_link_generic
SERDES: Link up - forced.
SERDES: Link down - force failed.
SERDES: Link up - autoneg completed successfully.
SERDES: Link down - invalid codewords detected in autoneg.
SERDES: Link down - no sync.
SERDES: Link down - autoneg failed
e1000_setup_link_generic
e1000:%s(%d): After fix-ups FlowControl is now = %x
Initializing the Flow Control address, type and timer regs
e1000_setup_fiber_serdes_link_generic
Auto-negotiation enabled
No signal detected
e1000_set_fc_watermarks_generic
e1000_force_mac_fc_generic
e1000:%s(%d): hw->fc.current_mode = %u
e1000_config_fc_after_link_up_generic
Error forcing flow control settings
Copper PHY and Auto Neg has not completed.
Flow Control = FULL.
Flow Control = Rx PAUSE frames only.
Flow Control = Tx PAUSE frames only.
Flow Control = NONE.
Error getting link speed and duplex
PCS Auto Neg has not completed.
e1000_get_speed_and_duplex_copper_generic
2500 Mbs, 
1000 Mbs, 
100 Mbs, 
10 Mbs, 
e1000_get_speed_and_duplex_fiber_serdes_generic
e1000_get_hw_semaphore_generic
Driver can't access device - SMBI bit is set.
e1000_put_hw_semaphore_generic
e1000_get_auto_rd_done_generic
Auto read by HW from NVM has not completed.
e1000_valid_led_default_generic
e1000_id_led_init_generic
e1000_setup_led_generic
e1000_cleanup_led_generic
e1000_blink_led_generic
e1000_led_on_generic
e1000_led_off_generic
e1000_set_pcie_no_snoop_generic
e1000_disable_pcie_master_generic
Master requests are pending.
e1000_reset_adaptive_generic
Not in Adaptive IFS mode!
e1000_update_adaptive_generic
e1000_validate_mdi_setting_crossover_generic
e1000_write_8bit_ctrl_reg_generic
e1000:%s(%d): Reg %08x did not indicate ready
e1000_rar_set_generic
e1000_set_default_fc_generic
e1000_commit_fc_settings_generic
e1000_poll_fiber_serdes_link_generic
Never got a valid link from auto-neg!!!
Error while checking for link
Valid Link Found
e1000_config_collision_dist_generic
e1000_validate_mdi_setting_generic
Invalid MDI setting detected
OSAction_DriverKit_AppleEthernetE1000_RxSubmit
OSAction_DriverKit_AppleEthernetE1000_TxSubmit
OSAction_DriverKit_AppleEthernetE1000_InterruptOccurred
DriverKit_AppleEthernetE1000
IOUserNetworkEthernet
interrupt
RxSubmit
OSAction_DriverKit_AppleEthernetE1000_RxSubmit
OSAction
OSAction_DriverKit_AppleEthernetE1000_TxSubmit
OSAction
OSAction_DriverKit_AppleEthernetE1000_InterruptOccurred
OSAction
e1000::%s(%d): Hot un-plug detected
e1000::%s(%d): <==
e1000::%s(%d): - kLinkUpFlow_Symmetric
e1000::%s(%d): - kLinkUpFlow_PauseRxOnly
e1000::%s(%d): - kLinkUpFlow_PauseTxOnly
e1000::%s(%d): - kLinkUpFlow_None
e1000::%s(%d): ==>(down)
e1000::%s(%d): e1000_get_speed_and_duplex returned %d
e1000::%s(%d): Forcing Flow Control
e1000::%s(%d): e1000_force_mac_fc returned %d
e1000::%s(%d): speed=%u ; duplex=0x%08x
e1000::%s(%d): setting Link mode=0%08x, baud=%lld
e1000::%s(%d): ==>
e1000::%s(%d): <== for type=0%08x
e1000::%s(%d): Uknown medium type=0%08x
e1000::%s(%d): ==> %s
e1000::%s(%d): <== (%x)
e1000::%s(%d): e1000_setup_link returned %d
e1000::%s(%d): cnt=%d
e1000::%s(%d): %p
e1000::%s(%d): <==(%s)
e1000::%s(%d): ==>0x%08x
e1000::%s(%d): - %s
e1000::%s(%d): type=0x%08x
e1000::%s(%d): called with fEnabled == false
e1000::%s(%d): <== ringsize=%d
e1000::%s(%d): can't alloc IOBufferMemoryDescriptor
e1000::%s(%d): GetAddressRange failed
e1000::%s(%d): can't alloc IODMACommand
e1000::%s(%d): PrepareForDMA failed
e1000::%s(%d): ==> 0x%08x
e1000::%s(%d): failed allocating rxRing[%d]
e1000::%s(%d): failed allocating txRing[%d]
e1000::%s(%d): device removed
e1000::%s(%d): reg 0x%x value 0x%x
e1000::%s(%d): %p, no match
e1000::%s(%d): %p, no device-id property
e1000::%s(%d): e1000_phy_hw_reset returned %d
e1000::%s(%d): e1000_reset_hw returned %d
e1000::%s(%d): e1000_setup_init_funcs returned %d
e1000::%s(%d): <== fMaxPacketSize=0x%08x
e1000::%s(%d): pause_time=0x%08x; low_water/high_water=0x%08x
e1000::%s(%d): Packet Buffer Allocation=0x%08x
e1000::%s(%d): initHW ctrl=0x%08x
e1000::%s(%d): <== gpie=0x%08x
e1000::%s(%d): Interrupts already enabled??? - returning
e1000::%s(%d): device removed or Interrupts not enabled???
e1000::%s(%d): mac address: %02x:%02x:%02x:%02x:%02x:%02x
e1000::%s(%d): set mac address: ral=0x%08x rah=0x%08x
e1000::%s(%d): Set Rx descriptor ring registers i=%d, paddr==%p, descLen=%d
e1000::%s(%d): Enable not set in rxdctl for ring[%d]
e1000::%s(%d): Before initializing, rdh=0x%08x and rdt=0x%08x
e1000::%s(%d): Set rdh to 0x%08x and rdt to 0x%08x
e1000::%s(%d): Set Tx descriptor ring registers i=%d, paddr==%p, descLen=%d
e1000::%s(%d): Shared mac type test passed
e1000::%s(%d): resetHW failed
e1000::%s(%d): allocateRings failed
e1000::%s(%d): Link down
e1000::%s(%d): <== active=%d
e1000::%s(%d): ==> Writing 0x%08x to RCTL
e1000::%s(%d): <== active=%s
e1000::%s(%d): Setting mta[0x%02x] to 0x%08x
e1000::%s(%d): <== count=%u
e1000::%s(%d): mcast addr %02x:%02x:%02x:%02x:%02x:%02x
e1000::%s(%d): flags = %x
e1000::%s(%d): ips.v4AddrCount = %d
e1000::%s(%d): ips.v6AddrCount = %d
e1000::%s(%d): ips.UDPPortCount = %d
e1000::%s(%d): ips.TCPPortCount = %d
e1000::%s(%d): ips.v4KACount = %d
e1000::%s(%d): ips.v6KACount = %d
e1000::%s(%d): ips.RRCount = %d
e1000::%s(%d): setPowerStateOffgated link is up
e1000::%s(%d): Wrote ctrl=0x%08lx
e1000::%s(%d): Could not enable ARP Offloading
e1000::%s(%d): setupARPOffload() succeeded!
e1000::%s(%d): Could not enable ICMP Offloading
e1000::%s(%d): setupICMPOffload() succeeded!
e1000::%s(%d): Could not enable NS Offloading
e1000::%s(%d): setupNSOffload() succeeded!
e1000::%s(%d): Could not enable ICMP for Ipv6 Offloading
e1000::%s(%d): setupICMPforIpv6Offload() succeeded!
e1000::%s(%d): setupmDNSOffload() failed!
e1000::%s(%d): setupmDNSOffload() succeeded!
e1000::%s(%d): sendMDNSCommand() failed!
e1000::%s(%d): sendMDNSCommand() succeeded!
e1000::%s(%d): FAILURE: MANC.MPROXYE is not set, firmware does not have proxying capabilities.
e1000::%s(%d): MANC.MPROXYE is set
e1000::%s(%d): sendARPCommand() failed!
e1000::%s(%d): sendARPCommand() succeeded!
e1000::%s(%d): sendNSCommand() failed!
e1000::%s(%d): sendNSCommand() succeeded!
e1000::%s(%d): Could not acquire SW/FW semaphore!
e1000::%s(%d): ARP size was %d
e1000::%s(%d): Get FW Proxying Capabilities host-if command failed! Response status from FW is %d
e1000::%s(%d): ---------- FW Proxying Capabilities:
e1000::%s(%d): Page:                       %d
e1000::%s(%d): Total Cap Size:             %d
e1000::%s(%d): ARP Proxy version 1:        %d
e1000::%s(%d): No of ARP Entries:          %d
e1000::%s(%d): NS Proxy Version 1:         %d
e1000::%s(%d): No of NS Entries:           %d
e1000::%s(%d): MLD Proxy Version:          %d
e1000::%s(%d): MLD Support:                %d
e1000::%s(%d): mDNS Proxy Version:         %d
e1000::%s(%d): mDNS Proxy Offload Support: %d
e1000::%s(%d): Set FW Proxying host-if command failed! Response status from FW is %d
e1000::%s(%d): ARP offload host-if command failed! Response status from FW is %d
e1000::%s(%d): Set ARP Response: 
e1000::%s(%d): Local IP Address:  0x%06x
e1000::%s(%d): Remote IP Address: 0x%06x
e1000::%s(%d): MAC Address:       0x%08x%04x
e1000::%s(%d): Active:            %d
e1000::%s(%d): NS size was %d
e1000::%s(%d): NS offload host-if command failed! Response status from FW is %d
e1000::%s(%d): mDNS size was %d
e1000::%s(%d): mDNS offload host-if command failed! Response status from FW is %d
e1000::%s(%d): buildRRrecords - IPAddress is empty
e1000::%s(%d): buildRRrecords - Adding NO IPv6 information
e1000::%s(%d): Adding record A
e1000::%s(%d): Adding record AAAA
e1000::%s(%d): RR[%d] starting at offset 0x%x
e1000::%s(%d): (%d) udp port %d at %d
e1000::%s(%d): (%d) tcp port %d at %d
e1000::%s(%d): %s ipv4 %08x, mask %08x
e1000::%s(%d): %s ipv6 addr
e1000::%s(%d): %s
e1000::%s(%d): Could not read word offset 0x10 from EEPROM
e1000::%s(%d): Offset to FW: 0x%x
e1000::%s(%d): Could not read word offset 0x25 from EEPROM
e1000::%s(%d): Offset to mDNS data: 0x%x
e1000::%s(%d): Could not read word offset 0x26 from EEPROM
e1000::%s(%d): Max size for mDNS flash data: 0x%x KB
e1000::%s(%d): FL_SECU: 0x%x
e1000::%s(%d): flash blob: %p  flashOffset: %x
e1000::%s(%d): Writing mDNS DB to offset: 0x%x
e1000::%s(%d): Starting FLASH_Write()
e1000::%s(%d): FLASH_Write() completed successfully
e1000::%s(%d): Starting FLASH_Read()
e1000::%s(%d): FLASH_Read() completed successfully
e1000::%s(%d): Starting flasher_need_to_erase_sector()
e1000::%s(%d): ERROR:Can't read flash at 0x%X
e1000::%s(%d): flasher_read_sector() read successfully %x
e1000::%s(%d): Calling flasher_read_sector()
e1000::%s(%d): ERROR: Calling flasher_read_sector() returned %d
e1000::%s(%d): ERROR:Couldn't erase sector at 0x%X function returned %d
e1000::%s(%d): Need to write offset %x, data is different
e1000::%s(%d): ERROR: Calling flasher_dump_burst() returned %d
e1000::%s(%d): Data same, moving to next burst
e1000::%s(%d): i210_write_flash() called with image size %d and address 0x%x
e1000::%s(%d): Dumping sector - size = %d
e1000::%s(%d): ERROR: Size should have been 0 (size=%d). Was size multiple of 4K?
e1000::%s(%d): SUCCESS: Function completed OK
e1000::%s(%d): <== mcAddr=0x%012llx mtaWord=0x%08x mtaBit=0x%08x
e1000::%s(%d): ==> mcAddr=0x%012llx mtaWord=0x%08x mtaBit=0x%08x
e1000::%s(%d): FLASH_EraseSector() completed successfully
e1000::%s(%d): Starting flasher_dump_burst()
e1000::%s(%d): VERYFYING:
Calling FLASH_Read()
