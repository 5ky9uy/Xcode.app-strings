description
query-var-missing-type-annotation
query-var-expected-identifier
query-var-expected-simple-name
query-only-applicable-to-var
invalid property
invalid composition
missing default value
missing initializer
SwiftData.PersistentModel
Observation.Observable
@Model requires an initializer be provided for '
@Transient
private var _$backingData: any SwiftData.BackingData<
.createBackingData()
public var persistentBackingData: any SwiftData.BackingData<
    get {
        _$backingData
    }
    set {
        _$backingData = newValue
    }
SwiftData.Schema.PropertyMetadata(name: "
, defaultValue: 
 = _SwiftDataNoType()
static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
  return [
    
init(backingData: any SwiftData.BackingData<
  self.persistentBackingData = backingData
@Transient
private let _$observationRegistrar = Observation.ObservationRegistrar()
struct _SwiftDataNoType {}
A stored property cannot be named '
A stored property name cannot be a keyword
A default value requires a fully qualified domain named value
SwiftData.Schema.
@Attribute and @Relationship cannot be composed
_$observationRegistrar.access(self, keyPath: \.
return self.getValue(forKey: \.
@Transient
private var _
: _SwiftDataNoType
_$observationRegistrar
@storageRestrictions(accesses: _$backingData, initializes: _
init(initialValue) {
_$backingData.setTransformableValue(forKey: \.
, to: initialValue)
 = _SwiftDataNoType()
return self.getTransformableValue(forKey: \.
_$observationRegistrar.withMutation(of: self, keyPath: \.
self.setTransformableValue(forKey: \.
, to: newValue)
_$backingData.setValue(forKey: \.
self.setValue(forKey: \.
nonisolated let modelExecutor: any SwiftData.ModelExecutor
nonisolated let modelContainer: SwiftData.ModelContainer
init(modelContainer: SwiftData.ModelContainer) {
    let modelContext = ModelContext(modelContainer)
    self.modelExecutor = DefaultSerialModelExecutor(modelContext: modelContext)
    self.modelContainer = modelContainer
: SwiftData.ModelActor {}
_PersistedProperty
_TransformablePersistedProperty
@Transient requires non-optional property '
' to have a default value
: SwiftData.PersistentModel {}
: Observation.Observable {}
private(set) var _
: SwiftData.Query<
Property missing a type annotation
Expected an identifier for the property
@Query can only be applied to a 'var' declaration
@Query can only be applied to a 'var' declaration with a simple name
future reported an error, but wait cannot throw
swift_task_escalate
_Z19voucher_needs_adoptP9voucher_s
__tsan_acquire
__tsan_release
swift_task_enterThreadLocalContext
swift_task_exitThreadLocalContext
SgtG
_pSg
_pSg
ySS_SSSgA2BtG
SS_SSSgA2At
SwiftDataMacros
SwiftDataDiagnostic
SwiftDataMacro
PersistentModelMacro
PersistentModelActorMacro
PersistedPropertyMacro
TransformablePersistedPropertyMacro
PersistedDerivedPropertyMacro
TransientPropertyMacro
AttributePropertyMacro
DerivedPropertyMacro
RelationshipPropertyMacro
QueryMacro
message
diagnosticID
severity
description
query-var-missing-type-annotation
query-var-expected-identifier
query-var-expected-simple-name
query-only-applicable-to-var
invalid property
invalid composition
missing default value
missing initializer
SwiftData.PersistentModel
Observation.Observable
@Model requires an initializer be provided for '
@Transient
private var _$backingData: any SwiftData.BackingData<
.createBackingData()
public var persistentBackingData: any SwiftData.BackingData<
    get {
        _$backingData
    }
    set {
        _$backingData = newValue
    }
SwiftData.Schema.PropertyMetadata(name: "
, defaultValue: 
 = _SwiftDataNoType()
static var schemaMetadata: [SwiftData.Schema.PropertyMetadata] {
  return [
    
init(backingData: any SwiftData.BackingData<
  self.persistentBackingData = backingData
@Transient
private let _$observationRegistrar = Observation.ObservationRegistrar()
struct _SwiftDataNoType {}
A stored property cannot be named '
A stored property name cannot be a keyword
A default value requires a fully qualified domain named value
SwiftData.Schema.
@Attribute and @Relationship cannot be composed
_$observationRegistrar.access(self, keyPath: \.
return self.getValue(forKey: \.
@Transient
private var _
: _SwiftDataNoType
_$observationRegistrar
@storageRestrictions(accesses: _$backingData, initializes: _
init(initialValue) {
_$backingData.setTransformableValue(forKey: \.
, to: initialValue)
 = _SwiftDataNoType()
return self.getTransformableValue(forKey: \.
_$observationRegistrar.withMutation(of: self, keyPath: \.
self.setTransformableValue(forKey: \.
, to: newValue)
_$backingData.setValue(forKey: \.
self.setValue(forKey: \.
nonisolated let modelExecutor: any SwiftData.ModelExecutor
nonisolated let modelContainer: SwiftData.ModelContainer
init(modelContainer: SwiftData.ModelContainer) {
    let modelContext = ModelContext(modelContainer)
    self.modelExecutor = DefaultSerialModelExecutor(modelContext: modelContext)
    self.modelContainer = modelContainer
: SwiftData.ModelActor {}
_PersistedProperty
_TransformablePersistedProperty
@Transient requires non-optional property '
' to have a default value
: SwiftData.PersistentModel {}
: Observation.Observable {}
private(set) var _
: SwiftData.Query<
Property missing a type annotation
Expected an identifier for the property
@Query can only be applied to a 'var' declaration
@Query can only be applied to a 'var' declaration with a simple name
future reported an error, but wait cannot throw
swift_task_escalate
_Z19voucher_needs_adoptP9voucher_s
__tsan_acquire
__tsan_release
swift_task_enterThreadLocalContext
swift_task_exitThreadLocalContext
SgtG
_pSg
_pSg
ySS_SSSgA2BtG
SS_SSSgA2At
SwiftDataMacros
SwiftDataDiagnostic
NoTypeForYou
SwiftDataMacro
PersistentModelMacro
PersistentModelActorMacro
PersistedPropertyMacro
TransformablePersistedPropertyMacro
PersistedDerivedPropertyMacro
TransientPropertyMacro
AttributePropertyMacro
DerivedPropertyMacro
RelationshipPropertyMacro
QueryMacro
message
diagnosticID
severity
