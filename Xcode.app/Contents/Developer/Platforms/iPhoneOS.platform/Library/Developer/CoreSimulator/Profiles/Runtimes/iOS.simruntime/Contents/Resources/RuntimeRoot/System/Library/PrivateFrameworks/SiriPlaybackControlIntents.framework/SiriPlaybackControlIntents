@(#)PROGRAM:SiriPlaybackControlIntents  PROJECT:SiriPlaybackControls-1
?__C
AFAnalyticsEventType
Port
NAVAudioSessionPort
FLOWSchemaFLOWMediaPlayerTaskType
SiriPlaybackControlIntents
ControlsMediaTask
SkipTimeFlowStrategy
ResumeMediaDeviceDisambiguationStrategy
DeviceContextProvider
DefaultConfirmIntentStrategy
NLIntentType NLContextProvider
DeviceDisambiguationStrategy
NLIntentType NLContextProvider
DeviceSelectingUtil
DeviceSelectingError
SmartSelectionResult
QuickStopDialogProvider
NothingToStopParameters
CodingKeys
ControlsSettingsTask
PauseMediaHandleIntentStrategy
QuickStopLocalStoppedFlow
DeviceNLContextProviding
Speaker
CodingKeys
SetPlaybackSpeedFlowStrategy
PauseMediaDeviceDisambiguationStrategy
SettingsFlowProvider
UserDefaultsProvider
UserDefaultsProviderImpl
Bfff?
SetVolumeLevelIntentHandler
BoundedResult
MediaVerb
MediaQuestionAttributes
MediaViewOption
MediaIntent
SetPlaybackSpeedUnsupportedValueStrategy
SetPlaybackSpeedIntentHandler
MediaPlayerVerb
MediaPlayerBoolSettingVerb
MediaPlayerBoolSettingState
MediaPlayerAttributes
MediaType
PlaybackSpeedUnit
MediaPlayerIntent
AnalyticsService
AnalyticsServiceImpl
SelectedBy
ContextIntent
VolumeLevelNeedsValueStrategy
SkipContentIntentHandler
LanguageDisambiguationStrategy
shuffle
repeat
SetRepeatStateIntentHandler
ResumeMediaFlowStrategy
SetVolumeLevelHandleIntentStrategy
SmartSelectableIntent
VolumeLevelNeedsConfirmationStrategy
MatchedLanguageResult
SkipTimeDeviceDisambiguationStrategy
ConfirmableIntent
FiringItem
QuickStopContext
SettingVerb
FloatSettingName
NumericSettingState
NumericSettingQualifier
SettingAttribute
NumericSettingUnit
SettingsIntent
ContextItem
SetSubtitleStateUnsupportedValueStrategy
InProcessHandlingStrategy
IntentHandler
SetVolumeLevelUnsupportedValueStrategy
SimulatedContextProvider
PatternExecuter
BasePatternExecuter
SkipTimeIntentHandler
MoveSpeakerFlowStrategy
MediaPlayerFlowProvider
AddSpeakerIntentHandler
ControlsFlowProvider
DirectInvocationIdentifier
shouldHandleAmbiguousRequestResult
HomeAutomationCapableIntent
HomeAutomationNodes
Domain
AddSpeakerHandleIntentStrategy
MoveSpeakerUnsupportedValueStrategy
MediaDeviceNLContextProvider
GetVolumeLevelFlowStrategy
SkipContentDeviceDisambiguationStrategy
ResumeMediaHandleIntentStrategy
ResumeMediaConfirmIntentStrategy
MRMediaType
DialogProviding
BaseDialogProvider
WholeHouseAudioDestination
ResumeMediaIntentHandler
SetRepeatStateConfirmIntentStrategy
SetAudioLanguageIntentHandler
SetAudioLanguageHandleIntentStrategy
LanguageNLContextProvider
WhatDidTheySayHandleIntentStrategy
MachineUtteranceProvidingIntent
GetVolumeLevelIntentHandler
AnalyticsServiceLogging
PauseMediaFlowStrategy
SetShuffleStateIntentHandler
NeedsDisambiguationWrapperFlow
CommonMediaUnsupportedValueStrategy
SetAudioLanguageConfirmIntentStrategy
GetVolumeLevelUnsupportedValueStrategy
MediaFlowProvider
GroupingUtil
SetRepeatStateDeviceDisambiguationStrategy
SkipTimeHandleIntentStrategy
SetShuffleStateFlowStrategy
SettingNLv3Intent
.@WhatDidTheySayIntentHandler
UserEntitiesProviding
SetPlaybackSpeedHandleIntentStrategy
SeekTimeFlowStrategy
SeekTimeHandleIntentStrategy
AceServiceHelper
VolumeControlsDialogProvider
SetVolumeLevelErrorParameters
SetVolumeParameters
GetVolumeLevelParams
CodingKeys
AudioSessionProviding
AudioSessionProvider
LanguageControlsDialogProvider
SubtitleLanguageNotAvailableParameters
SubtitleSetSuccessfullyParameters
SubtitleFailedToToggleParameters
SubtitleAlreadyOnParameters
AudioLanguageNotAvailableParameters
NoRelevantDeviceParameters
DeviceDisambiguationAudioLanguageParameters
ConfirmWhatDidTheySayParameters
IntentConfirmationSetSubtitleStateParams
DeviceDisambiguationSubtitlesParameters
DeviceDisambiguationWhatDidTheySayParameters
IntentConfirmationSetAudioLanguageParams
WhatDidTheySayHandledParameters
AudioSetSuccessfullyParameters
CodingKeys
SkipTimeConfirmIntentStrategy
SetVolumeLevelFlowStrategy
GetVolumeLevelHandleIntentStrategy
WhatDidTheySayFlowStrategy
SkipContentFlowStrategy
RCHNamespace
AddSpeakerFlowStrategy
LanguageSelectableIntent
WhatDidTheySayDeviceDisambiguationStrategy
SeekTimeUnsupportedValueStrategy
SetSubtitleStateHandleIntentStrategy
DeviceDisambiguatableIntent
DeviceSelectableIntent
SingleDeviceSelectableIntent
MoveSpeakerHandleIntentStrategy
play
addSpeaker
ControlsMediaPlayerTask
SetSubtitleStateFlowStrategy
PauseMediaConfirmIntentStrategy
AppBundleIdentifiers
MusicBundleIds
PodcastsBundleIds
AudioBooksBundleIds
AddSpeakerUnsupportedValueStrategy
SetSubtitleStateDeviceDisambiguationStrategy
SetSubtitleStateIntentHandler
SetShuffleStateHandleIntentStrategy
.music
.podcast
.playlis
.musicVi
.song
.audioBo
.video
.iTunesU
.compila
.album
.radioSh
.show
.tvShow
.radioSt
.podcast
.musicPl
.station
.episode
.single
.genre
.news
.rington
.sounds
.movie
.unknown
podcast
playlist
musicVid
song
audioBoo
video
iTunesU
compilat
album
radioSho
show
tvShow
radioSta
podcastS
musicPla
station
episode
single
genre
news
ringtone
sounds
movie
SetSubtitleStateConfirmIntentStrategy
ControlsDialogParameters
SmartControlsDialogParameters
WholeHouseAudioDialogParameters
QuickStopUtilities
QuickStopUtil
Name
Signpost
ControlsError
SetAudioLanguageUnsupportedValueStrategy
DefaultNeedsConfirmationStrategy
NLIntentType
SetShuffleStateDeviceDisambiguationStrategy
SetRepeatStateHandleIntentStrategy
CommonIntentResolutionResult
CommonUnsupportedReason
MediaTypeProvidingIntent
WhatDidTheySayUnsupportedValueStrategy
QuickStopNothingToStopFlow
ControlsFlowProviding
MediaPlayerDeviceNLContextProvider
SourceDestinationResolvingIntent
SetAudioLanguageFlowStrategy
DeviceQueryableIntent
SetRepeatStateFlowStrategy
SeekTimeDeviceDisambiguationStrategy
ConfirmationCapableNLIntent
ConfirmationStateValue
MoveSpeakerIntentHandler
MediaPlayerNLv3Intent
MobileGestalt
DeviceType
SeekTimeConfirmIntentStrategy
WhatDidTheySayConfirmIntentStrategy
DialogProvider
PausedParameters
DeviceDisambiguationPauseParams
IntentConfirmationPauseParams
DeviceDisambiguationResumeParams
IntentConfirmationResumeParams
DeviceDisambiguationSeekTimeParams
IntentConfirmationSeekParams
SpeakerFailedOperationParameters
NoSpeakerFoundParameters
RepeatErrorParameter
DeviceDisambiguationRepeatParams
IntentConfirmationRepeatParams
DeviceDisambiguationSkipTimeParams
IntentConfirmationSkipTimeParams
DeviceDisambiguationSkipContentParams
IntentConfirmationSkipContentParams
DeviceDisambiguationShuffleStateParams
IntentConfirmationShuffleParams
CannotSkipLimitExceededParameters
SeekErrorParameters
ShuffleErrorParameters
CannotSkipAdvertisementParameters
AddSpeakerParameters
UnsupportedDestinationSpeakerParameters
SetPlaybackSpeedToValueParameters
UnsupportedOnPlatformParameters
SkipErrorParameters
SkipToPreviousParameters
SkipToNextParameters
ToggleRepeatParameters
ToggleShuffleParameters
SpeakerMoveParameters
SeekParameters
SkipBackwardParameters
SkipForwardParameters
ResumeParameters
CodingKeys
SpeakerOperation
DialogDeviceType
RepeatMode
Duration
HomeAutomationEntityProvidingIntent
SetShuffleStateConfirmIntentStrategy
PatternProvider
PausedParameters
ViewData
CodingKeys
SkipContentConfirmIntentStrategy
AnalyticsServiceLogger
ContextProviding
ContextUtil
DeviceGroup
SetAudioLanguageDeviceDisambiguationStrategy
SkipContentHandleIntentStrategy
PauseMediaIntentHandler
ControlsFlowFactory
ControlsFlowFactoryImpl
MediaNLv3Intent
RequestContext
SharedUsoTask
NLContextProviding
ItemType
MetricsLoggableIntent
SettingNLContextProvider
SeekTimeIntentHandler
PauseMediaIntent
PauseMediaIntentResponseCode
PauseMediaIntentResponse
PauseMediaDevicesUnsupportedReason
PauseMediaDevicesResolutionResult
ResumeMediaIntent
ResumeMediaIntentResponseCode
ResumeMediaIntentResponse
ResumeMediaDevicesUnsupportedReason
ResumeMediaDevicesResolutionResult
SkipTimeIntent
SkipTimeIntentResponseCode
SkipTimeIntentResponse
SkipTimeDevicesUnsupportedReason
SkipTimeDevicesResolutionResult
SkipContentIntent
SkipContentIntentResponseCode
SkipContentIntentResponse
SkipContentDevicesUnsupportedReason
SkipContentDevicesResolutionResult
SetSubtitleStateIntent
SetSubtitleStateIntentResponseCode
SetSubtitleStateIntentResponse
SetSubtitleStateDeviceUnsupportedReason
SetSubtitleStateDeviceResolutionResult
SetSubtitleStateLanguageUnsupportedReason
SetSubtitleStateLanguageResolutionResult
SetAudioLanguageIntent
SetAudioLanguageIntentResponseCode
SetAudioLanguageIntentResponse
SetAudioLanguageDeviceUnsupportedReason
SetAudioLanguageDeviceResolutionResult
SetAudioLanguageLanguageUnsupportedReason
SetAudioLanguageLanguageResolutionResult
WhatDidTheySayIntent
WhatDidTheySayIntentResponseCode
WhatDidTheySayIntentResponse
WhatDidTheySayDeviceUnsupportedReason
WhatDidTheySayDeviceResolutionResult
SeekTimeIntent
SeekTimeIntentResponseCode
SeekTimeIntentResponse
SeekTimeDevicesUnsupportedReason
SeekTimeDevicesResolutionResult
SeekTimePlayheadPositionUnsupportedReason
SeekTimePlayheadPositionResolutionResult
SetShuffleStateIntent
SetShuffleStateIntentResponseCode
SetShuffleStateIntentResponse
SetShuffleStateDevicesUnsupportedReason
SetShuffleStateDevicesResolutionResult
SetRepeatStateIntent
SetRepeatStateIntentResponseCode
SetRepeatStateIntentResponse
SetRepeatStateDevicesUnsupportedReason
SetRepeatStateDevicesResolutionResult
GetVolumeLevelIntent
GetVolumeLevelIntentResponseCode
GetVolumeLevelIntentResponse
GetVolumeLevelDeviceUnsupportedReason
GetVolumeLevelDeviceResolutionResult
SetVolumeLevelIntent
SetVolumeLevelIntentResponseCode
SetVolumeLevelIntentResponse
SetVolumeLevelDevicesUnsupportedReason
SetVolumeLevelDevicesResolutionResult
SetVolumeLevelVolumeLevelUnsupportedReason
SetVolumeLevelVolumeLevelResolutionResult
AddSpeakerIntent
AddSpeakerIntentResponseCode
AddSpeakerIntentResponse
AddSpeakerSourceUnsupportedReason
AddSpeakerSourceResolutionResult
AddSpeakerDestinationsUnsupportedReason
AddSpeakerDestinationsResolutionResult
MoveSpeakerIntent
MoveSpeakerIntentResponseCode
MoveSpeakerIntentResponse
MoveSpeakerSourceUnsupportedReason
MoveSpeakerSourceResolutionResult
MoveSpeakerDestinationsUnsupportedReason
MoveSpeakerDestinationsResolutionResult
SetRoomDimmingStateIntent
SetRoomDimmingStateIntentResponseCode
SetRoomDimmingStateIntentResponse
SetPlaybackSpeedIntent
SetPlaybackSpeedIntentResponseCode
SetPlaybackSpeedIntentResponse
SetPlaybackSpeedDevicesUnsupportedReason
SetPlaybackSpeedDevicesResolutionResult
SetPlaybackSpeedSpeedMagnitudeUnsupportedReason
SetPlaybackSpeedSpeedMagnitudeResolutionResult
Direction
DirectionResolutionResult
RepeatState
RepeatStateResolutionResult
ShuffleState
ShuffleStateResolutionResult
SubtitleState
SubtitleStateResolutionResult
DeviceProximity
DeviceProximityResolutionResult
NowPlayingState
NowPlayingStateResolutionResult
SubtitleType
SubtitleTypeResolutionResult
NowPlayingMediaType
NowPlayingMediaTypeResolutionResult
NLMediaType
NLMediaTypeResolutionResult
VolumeSettingState
VolumeSettingStateResolutionResult
VolumeSettingUnit
VolumeSettingUnitResolutionResult
VolumeSettingAttribute
VolumeSettingAttributeResolutionResult
VolumeSettingQualifier
VolumeSettingQualifierResolutionResult
VolumeSettingType
VolumeSettingTypeResolutionResult
GroupType
GroupTypeResolutionResult
RoomDimmingState
RoomDimmingStateResolutionResult
PlaybackSpeedType
PlaybackSpeedTypeResolutionResult
Device
DeviceResolutionResult
SignedDuration
SignedDurationResolutionResult
DeviceContext
DeviceContextResolutionResult
LanguageOption
LanguageOptionResolutionResult
DeviceQuery
DeviceQueryResolutionResult
VolumeLevel
VolumeLevelResolutionResult
DeviceGroup
DeviceGroupResolutionResult
MediaStream
MediaStreamResolutionResult
PlaybackSpeed
PlaybackSpeedResolutionResult
slower
faster
speed
shuffled
repeated
subtitles
subtitlesForDeafHardHearing
audio
mute
unmute
volume
voice
playbackSpeed
play
pause
resume
stop
skip
previous
seek
skipForward
skipBackward
repeat
restart
shuffle
moveSpeaker
addSpeaker
removeSpeaker
noVerb
setPlaybackSpeedToValue
setPlaybackSpeedFaster
setPlaybackSpeedSlower
cancel
MRMediaRemoteMediaTypeMusic
MRMediaRemoteMediaTypePodcast
MRMediaRemoteMediaTypeAudioBook
MRMediaRemoteMediaTypeITunesU
kMRMediaRemoteMediaTypeITunesRadio
kMRMediaRemoteNowPlayingInfoTypeAudio
kMRMediaRemoteNowPlayingInfoTypeVideo
enable
disable
get attribute value
read
previous audio
music
podcast
playlist
musicVideo
song
audioBook
video
iTunesU
compilation
album
tvShow
show
radioShow
podcastStation
musicPlaylist
station
episode
single
genre
news
ringtone
sounds
movie
toggle
again
ending
multiplier
less
maximum
mean
minimum
more
percent
a_little
a_lot
referentialTo
increaseByMeasurement
decreaseByMeasurement
mediaPlayer
media
settings
com.apple.siri.nl.Media
com.apple.siri.nl.HomeAutomationRoom
com.apple.siri.nl.HomeAutomationPlaceHint
com.apple.siri.nl.HomeAutomationDeviceQuantifier
com.apple.siri.nl.MediaConfirmation
com.apple.siri.nl.MediaConfirmation.Value.CANCEL
com.apple.siri.nl.MediaConfirmation.Value.YES
com.apple.siri.nl.MediaConfirmation.Value.NO
com.apple.siri.nl.MediaReference
com.apple.siri.nl.MediaLanguage
com.apple.siri.nl.MediaViewOption
com.apple.siri.nl.MediaPlayerReference
com.apple.siri.nl.MediaPlayerConfirmation
com.apple.siri.nl.MediaPlayerConfirmation.Value.CANCEL
com.apple.siri.nl.MediaPlayerConfirmation.Value.YES
com.apple.siri.nl.MediaPlayerConfirmation.Value.NO
none
phone
watch
television
homepod
unknown
com.apple.siri.nl.FloatSettingValue
com.apple.siri.nl.FloatSettingState
com.apple.siri.nl.FloatSettingQualifier
com.apple.siri.nl.SettingAttribute
com.apple.siri.nl.SettingConfirmation
com.apple.siri.nl.FloatSettingReference
com.apple.siri.nl.SettingConfirmation.Value.CANCEL
com.apple.siri.nl.SettingConfirmation.Value.YES
com.apple.siri.nl.SettingConfirmation.Value.NO
OS_dispatch_source_timer
SIRINLUSystemDialogAct
v24@0:8@16
renderedText
T@"NSString",N,C
@"NSString"16@0:8
v24@0:8@"NSString"16
SIRINLUUserDialogAct
SAServerBoundCommand
SAClientBoundCommand
appId
callbacks
T@"NSArray",N,C
@"NSArray"16@0:8
v24@0:8@"NSArray"16
SASTTemplateItem
OS_dispatch_source
NSSecureCoding
supportsSecureCoding
TB,N,R
SAAceCommand
aceId
refId
SAAceReferable
SAAceSerializable
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
B24@0:8@"Protocol"16
NSCoding
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
AceObject
@24@0:8@"NSDictionary"16
@32@0:8@"NSDictionary"16@"<AceContext>"24
@"NSMutableDictionary"16@0:8
NSCopying
@24@0:8^{_NSZone=}16
NSMutableCopying
_TtC26SiriPlaybackControlIntents20SkipTimeFlowStrategy
analyticsService
Received unexpected parse: %s
SkipTimeFlowStrategy.makeIntentFromParse() called
Finished creating intent from parse
makeIntentFromParseQueue
Received no valid parse %s
SkipTimeFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents39ResumeMediaDeviceDisambiguationStrategy
featureFlagProvider
encryptionProvider
DeviceDisambiguationStrategy.makePromptForDisambiguation() called
ResumeMediaDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
DeviceDisambiguationStrategy.makeContextUpdate() called
destinationDeviceId
com.apple.siri.nl.DestinationDeviceId
homeAutomationRoom
homeAutomationPlaceHint
homeAutomationDeviceQuantifier
encodeRouteIds
Encoding routeIds Using encryption provider: %s
enableTelemetry=YES
Including SystemGaveOptions in context update: %s, NLUSysteamDialogAct: %s
Making disambiguation context with hints: %s and task builders: %s
uso disambiguate among: %s
Unable to serialize protoGraph: %s
Unable to map graph into protoGraph: %s
SiriPlaybackControlIntents/NLContextProviding.swift
Descriptive hint was not built with an id value or display value
Adding machine utterance: %s as nlInput to the context update
Creating disambiguation view with devices: %s
Unable to get intent type from parse
Unable to match the user's selection to any items we presented in the disambiguation list
Found matching device from previous request, injecting it in the intent: %@
Found list position index: (%s) in the intent. Mapping the user's selection to a device from the disambiguation list
Too many devices matched. Returning an error
Matching devices: %s
Could not match any devices. Returning an error
Found homeAutomation nodes in the intent. Mapping the user's selection to a device from the disambiguation list
Found device using destination device id: %@
DeviceDisambiguationStrategy.parseDisambiguationResult() called
One or less devices found. Matching items: %s
User did not specify device type. Cannot filter down the devices any further. Returning matching devices: %s
Multiple devices matched. Narrowing down using device capabilities: %s
Named entities from intent: %s, disambiguation items: %s
User disambiguation selection is local device
User disambiguation selection is everywehere
Unable to find matching item -- List position out of bounds
Matching item from list: %s at index: %ld is: %@
Unable to understand the user's response to the disambiguation prompt. Ignoring action
Found destination device ID in intent. Handling...
Got a uso parse as a response to the disambiguation prompt, but it doesn't have any homeAutomation nodes or list positions. Ignoring...
Got a valid uso parse as a response to the disambiguation prompt with task: %s. Handling...
Found task: %s.
Intent indicates we should cancel out of disambiguation
DeviceDisambiguationStrategy.actionForInput() called
PlaybackControls#ConfirmationCancelled
DeviceDisambiguationStrategy.makeFlowCancelledResponse()
Intent is not a machineUtteranceProvidingIntent. Returning the contextUpdate as is without providing an NL input
mapDevicesToAFServiceDeviceContext
Got nil context array
fetchQuickStopContext
Returning %ld QuickStop context(s): %@
Got QuickStop context for %ld devices
Mapping device context %ld: %@
fetchContext
Returning %ld context(s): %@
Got mediaContext for %ld devices
Device %s is in interrupted state, treating as paused.
Fatal error
Down-casted Array element failed to match the target type
Expected 
UsoPrimitiveStringBuilder
NSArray element failed to match the Swift Array Element type
Expected 
CodeGenListEntry<UsoEntity_common_DurationComponent>
SetShuffleStateDevicesResolutionResult
CodeGenListEntry<UsoEntity_common_Setting>
User selection matched device: %@
DeviceDisambiguationStrategy.makeDisambiguationItemContainer() called
Unexpected disambiguation item type
Could not convert disambiguation item to INObject
Could not validate verb from MediaPlayerIntent or SettingsIntent. Ignoring input.
Supported mediaPlayerIntent verb from parse.
SetPlaybackSpeed.shouldHandle() called
MediaStream { groupLeader: 
SiriPlaybackControlIntents
Merging streams %s failed. Could not find any group leaders
_TtC26SiriPlaybackControlIntents19DeviceSelectingUtil
contextUtil
groupingUtil
localizationProvider
aceServiceHelper
Primary device context is nil. Primary IS a valid fallback
A deviceType: %s is specified. Cannot assume that the primary matches that device type. Primary is NOT a valid fallback
primary hasMatchingNowPlayingMediaTypeQueued: %{bool}d. isPrimaryValidFallback: %{bool}d
No mediaType nor device types specified. Primary IS a valid fallback
ControlType is .resumable but the primary device is already playing something. Primary is NOT a valid fallback
ControlType is .pausable but the primary device is not playing anything. Primary is NOT a valid fallback
ControlType is .videoControls and we are on HomePod so primary should not be valid fallback.
ControlType is volumeControls, so primary should always be a valid fallback.
Deciding wether the primary is an acceptable candidate for controls using controlType: %{public}s, deviceType: %{public}s, mediaTypeFilter: %{public}s and primaryContext: %s
Contexts found, but primary context is not included... shouldControlPrimary: false.
Primary does not satisfy user query and thus is not a valid fallback. shouldControlPrimary: false
Unknown controlType: %s, returning false
.any request and primary is playing something == %{bool}d, nothing else is playing and primary is the only resumable == %{bool}d. shouldControlPrimary: %{bool}d
.resumable request and primary is the only resumable context == %{bool}d. shouldControlPrimary: %{bool}d
.pausable request and primary is playing something == %{bool}d. shouldControlPrimary: %{bool}d
Pausable Contexts: %s, Resumable Contexts :%s
Primary now playing state is unknown. shouldControlPrimary: false
Primary context is the only context we have and user asked for controls other than .pausable. shouldControlPrimary: true
Primary is the only context and user asked for .videoControls on HomePod. shouldControlPrimary: false.
User asked for volume controls, always return local device. shouldControlPrimary: true
User asked for video controls on appleTV. shouldControlPrimary: true
This is a CarPlay request. shouldControlPrimary: true
No contexts found and user asked for controls. shouldControlPrimary: true
Determining if we should short circuit and control the primary device immediately
Resolving destination groups for moveSpeaker request
User asked to "control *this*" and local device is an ambiguousEntity. Removing from possible destinations.
Cannot filter out excluded groups since superset group cannot be determined
Setting excludeGroup to true for: %@
containsExcludeGroups set and found a superset group. Returning all ambiguous entities with excludeGroup flag applied to smaller entities: %s
isSuperset: %{bool}d
Entity/Group with the most amount of devices found is: %s. Determining if it is a superset of all other groups
No groups passed in so there is no superset group
Resolving destination groups for add
Found other entities in the intent. Choosing those as the destination: %s
No entities are found in the intent after filtering out the source group. Local device is the destination
No possible destinations found and local fallback is disabled. Cannot determine the destination
Local device is the source, no other devices are found in the intent. Cannot determine the destination
Local device is the source. This is a "add this to the rest of the room/zone" request. Choosing ambiguous entities as the destination
Local device is the source. Checking if this is a "add this to the rest of the room/zone" request
Group: %s is a superset of all other groups. Choosing it as the destination
Found 2 or more distinct groups playing.
All entities in the intent are paused. Local device is also paused. Attempting to get a source from the context
All entities in the intent are paused. Local device is playing something. Choosing it as the source
All entities in the intent are paused. Determining if local is possible source
All entities in the intent are paused. Context lookup is disabled, cannot determine the source.
Some entities in the intent are playing in a stream and others are paused. Choosing the playing group as the source
All entities in the intent are playing in the same group and the local device is not playing anything. Group is source and primary should be the destination
All entities in the intent are playing in one stream and the local device is playing something different. Returning both as possible sources
All entities in the intent are playing in the same stream and the local device is part of that group. Cannot determine the source
All entities in the intent are playing in the same stream and the local device is part of that group. However this is a move request so returning the local device
All entities in the intent are playing in the same group (1 group found).
resolveAddSourceFromAmbiguousEntities called with empty ambiguousEntities. Cannot determine the source
Resolving add source from ambiguous entities
Found pausable devices from context: %s. Creating device groups
No pausable contexts were found. Cannot determine the source
Local device is playing. Choosing local device as the source
Resolving add source from context
Predicates already contain condition with routeId: %s, a duplicate will not be added.
Multiple sources found, but one of them contains the local device. Choosing that one as the source
Found explicit source streams in the intent: %@
DeviceSelectingUtil#smartSelect WHA request, but could not get any deviceQueries in the intent.
DeviceSelectingUtil#smartSelect WHA request: Resolving target devices using deviceQueries: %s
DeviceSelectingUtil#smartSelect Request has ambiguous target entities. Going down the select route
Devices are pre-resolved, skipping smart selection, and returning devices: %s
Disambiguated Intent with destinationDeviceId: %s
Smart selecting devices for intent: %s
DeviceSelectingUtil#smartSelect Success resolving devices: %s
DeviceSelectingUtil#smartSelect .noMatchingDevicesFound
DeviceSelectingUtil#smartSelect Error resolving devices: %s
Resolving source groups for add speaker request with explicit sources: %s and ambiguousEntities: %s
resolveDevice
Created predicate: %s
Using predicates: %s
Forcing disambiguation based on predicate device type
Resolving devices: %@
No devices provided in intent, resolving with local device
Resolved devices: %@
smartDeviceSelection
Short circuiting and controlling the local device
No predicates could be generated from context, primary is a logical candidate! Selecting the local device
Non-empty device context expected for smart device selection, returning local device
Select devices with deviceType=%{public}s, controlType=%{public}s
User asked for .resumable or .any devices to control but we couldn't find any. Returning the local device
More than 1 device. Adding everywhere for pause control
Primary device is a logical candidate. Adding back the local device to the list of devices elligible for controlling
resolvedDevice count: %ld
%ld devices matching media type %{public}s: %s
Filtering devices %s using mediaTypeFilter %{public}s
No predicates were created from homeAutomationEntities: %s. Falling back to smart select
Using HomeAutomationEntities: %s
No home automation entities in intent, returning failure.
Returning selected group leaders: %s + devices without context: %s
Volume controls request, returning resolved devices grouped by media system id: %s
Pause in <location> request, returning filtered devices: %s + devices without context: %s
No matching devices found in HomeKit.
Matched devices: %@
quickStop#NothingToStop
_TtC26SiriPlaybackControlIntents30PauseMediaHandleIntentStrategy
userDefaultsProvider
playbackController
Unrecognized intentresponse code %{public}ld
PlaybackControls#NothingIsPlaying
PlaybackControls#PauseFailed
PauseMediaHandleIntentStrategy.makeFailureHandlingIntentResponse()
Running PauseMediaHandleIntentStrategy.makeFailureHandlingIntentResponse() using RF
No device found in intent
Running PauseMediaHandleIntentStrategy.makeIntentHandledResponse() using RF
suppressSnippets
PauseMediaHandleIntentStrategy.makeIntentHandledResponse()
All devices are within the same room
User asked to control *everywhere*
Cannot update dialog parameters using an empty device list
Updating parameters for WHA request
Destination #2: Destination is a room or zone. Setting speaker.secondRoom to the groupName
Destination #2: Destination is an accesory. Setting speaker.secondSpeakerName to the groupName
Destination #1: Destination is a room or zone. Setting speaker.firstRoom to the groupName
Destination #1: Destination is an accesory. Setting speaker.firstSpeakerName to the groupName
Final speaker names: %s, Final room names: %s
All entities mentioned in the user's intent: %s
No whole house audio in the intent. Target can be the local device or any other devices in the home. hasAmbiguousTargetEntities: true
No deviceQueries found in the intent. hasAmbiguousTargetEntities: true
_TtC26SiriPlaybackControlIntents25QuickStopLocalStoppedFlow
aceServiceInvoker
quickStop#LocalStopped
QuickStopLocalStoppedFlow#execute Skipping dialog on HomePod, returning complete
QuickStopLocalStoppedFlow#execute DialogEngine returned an error
QuickStopLocalStoppedFlow#execute dialog generated successfully
Encoded route ids: %s
hasThreeOrMoreRooms
firstSpeakerName
secondSpeakerName
_TtC26SiriPlaybackControlIntents28SetPlaybackSpeedFlowStrategy
SetPlaybackSpeedFlowStrategy.makeIntentFromParse() called
SetPlaybackSpeedFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents38PauseMediaDeviceDisambiguationStrategy
PauseMediaDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
SettingsFlowProvider.makeFlow Received unexpected parse: %s
Making flow from parse
Not a media volume request
Could not find any verbs in the setting intent for the volume request. Returning getVolume flow
loudVolumeConfirmationCount
previousVolumeLevel_
UserDefaultsProvider#clearPreviousVolumeLevel for key: %s
UserDefaultsProvider#getPreviousVolumeLevel for key: %s volume: %s
UserDefaultsProvider#setPreviousVolumeLevel for key: %s
UserDefaultsProvider#incrementLoudVolumeConfirmationCount Setting loudVolumeConfirmationCount to incrementedConfirmationCount
UserDefaultsProvider#getLoudVolumeConfirmationCount %s
com.apple.siri.playbackcontrols
No devices resolved. Returning failure
resolvedVolumeOutput or currentVolume is undefined or could not be cast to float. Returning failure
Unknown volume setting type: %s, returning failure.
Volume is already at 0%%. Skip setting volume.
Volume is already at 100%%. Skip setting volume.
Volume settingType: %s, increase: %{bool}d, decrease: %{bool}d, resolved output: %s
Unable to get route ids for the intent devices: %s
SetVolumeLevel.SetVolumeLevelIntentHandler.handle() called
SetVolumeLevel.SetVolumeLevelIntentHandler.confirm() called
No context or device query, falling back to local device
Can't do volume controls on CarPlay, returning unsupported.
Whole House Audio requests are unsupported on this platform
Resolving devices for SetVolume
Resolving volume level for SetVolume
_TtC26SiriPlaybackControlIntents27SetVolumeLevelIntentHandler
accessoryVolumeController
Nothing to unmute
Volume Level retrieved from stash: %f
Failed to get routeId to use when storing previous volume level
Already Muted
Found unexpected volumeSettingState: %{public}s. Returning failure
resolveVolumeLevelUsingQualifiers volume set to mean
resolveVolumeLevelUsingQualifiers volume set to min
resolveVolumeLevelUsingQualifiers volume set to max
resolveVolumeLevelUsingQualifiers increase by %f
resolveVolumeLevelUsingQualifiers decrease by %f
Intent does not contain a volumeSettingValue. Cannot resolve volume level from numeric input
This is an absolute volume adjust intent
This is a relative volume adjust intent
User specified a numeric value in the intent: %@
Calculated delta value: %f
Recalculating delta based on percent of current value
Calculating delta based on percent of current value
Using value directly as delta because value is less than normalizedMinimumValueToUseAsMultiplier or current volume is 0
Normalizing floatSettingValue percentage value
Percent not specified so increase/decrease based on defaultRelativeChangeStepSize and value
User did not specify neither a numeric value in the intent nor any qualifiers. Returning .needsValue
resolvedVolumeOutput = %f
Error getting the volume resolution result
User did not specify a numeric volume level in the intent, but intent has qualifiers. Trying to resolve volume level using qualifiers
User specified a numeric value in the intent. Trying to resolve the volume level from numeric input
Loud volume confirmation already presented twice on this device, skipping confirmation
Could not find a resolveVolumeOutput in the intent. shouldPresentLoudVolumeWarning = false
Expected volume output = %f is smaller than the loud volume range start value of %f. shouldPresentLoudVolumeWarning = false
Delta = %f is smaller than the required volume delta before loud warning %f. shouldPresentLoudVolumeWarning = false
Incrementing loud volume confirmation count for this device
Volume level is too loud, device has very loud audio output (hence should present warning): %{bool}d
Request is to decrease volume, skip loud volume confirmation
Checking if we should be presenting loud volume warning for expectedOutputVolume = %f, currentVolumeOutput = %s, device = %@, volumeSettingState: %ld
isHomePodFromDeviceType: %{bool}d, isHomePodFromDeviceState: %{bool}d, isAudioRouteToHeadphone: %{bool}d. hasVeryLoudAudioOutput=%{bool}d
Determining if device: %@ has very loud audio output
DeviceQueryableIntent#isWholeHouseAudio No deviceQueries found in the intent. This is not a WHA intent
DeviceQueryableIntent#isWholeHouseAudio: DeviceQueries: %s, onlyHasReferenceQueries: %{bool}d
Failed to get volume for accessory
resolveVolumeLevel: An error occurred in the GetVolumeLevel media remote call: %{public}s
Can't do volume controls on Apple TV, returning unsupported.
Multiple devices selected.
Attempting to set the volume for sidekick device to %f for routeId: %s
Failed to set volume for accessory
floatVolumeLevel: %f deceeds minimum level. This is okay, we'll still try to set it to the min value
floatVolumeLevel: %f exceeds maximum level. This is okay, we'll still try to set it to the max value
Attempting to set the volume for local device to %f for routeId: %s
An error occurred in the SetVolumeLevel media remote call: %{public}s
Attempting to change the volume by %f for routeIds: %s
Attempting to set the volume to %f for routeIds: %s isLocal: %{bool}d
Getting routeIds from intent. PreferContextRouteId: %{bool}d
SetVolumeLevelIntentHandling
v32@0:8@"SetVolumeLevelIntent"16@?<v@?@"SetVolumeLevelIntentResponse">24
v32@0:8@"SetVolumeLevelIntent"16@?<v@?@"NSArray">24
v32@0:8@"SetVolumeLevelIntent"16@?<v@?@"SetVolumeLevelVolumeLevelResolutionResult">24
MediaIntent#init unexpected parse type: %s, returning nil MediaIntent
MediaIntent#init invalid user data for buttonPress: %s
MediaIntent#init creating MediaIntent from .directInvocation parse
No tasks found in usoTasks input, might be a confirmation response.
Fatal: Unable to cast task: %s to ControlsMediaTask
Setting attributes for MediaIntent from task: %s
MediaIntent#init creating MediaIntent from .uso parse
MediaIntent#init creating MediaIntent from .NLv3IntentOnly parse
_TtC26SiriPlaybackControlIntents40SetPlaybackSpeedUnsupportedValueStrategy
Received unrecognized unsupported Reason: %ld
PlaybackControls#UnsupportedPlaybackSpeedRequested
Sending unsupportedPlaybackSpeedRequested dialog
No devices found in intent, returning failure
Missing playbackSpeed in intent, returning failure
Missing routeId in intent, returning failure
SetPlaybackSpeed.SetPlaybackSpeedIntentHandler.handle() called
No need to resolve speed magnitude for relative speed change. Returning success.
Playback speed %f is not supported.
SetPlaybackSpeed.SetPlaybackSpeedIntentHandler.resolveSpeedMagnitude() called
Received unknown playbackSpeed type.
SetPlaybackSpeed.SetPlaybackSpeedIntentHandler.resolvePlaybackSpeedType() called
SetPlaybackSpeedIntentHandler#resolveDevices intent does not have disambiguated devices or device queries. Sending local device.
SetPlaybackSpeedIntentHandler#resolveDevices resolving devices from device queries
SetPlaybackSpeedIntentHandler.resolveDevices() called
_TtC26SiriPlaybackControlIntents29SetPlaybackSpeedIntentHandler
@16@0:8
deviceSelector
Setting playback rate: %f for playbackSpeedType: setToValue
Calling setPlaybackSpeedFaster
Calling setPlaybackSpeedSlower
Unknown Error while setting the playback rate: %s
Received requestParametersOutOfBounds while setting the playback rate
Received requestParametersOutOfBounds while setting the playback rate to faster.
Received requestParametersOutOfBounds while setting the playback rate to slower.
Playback rate updated.
SetPlaybackSpeedIntentHandler#resolveDevices Error resolving devices: %s. Returning local device
SetPlaybackSpeedIntentHandler#resolveDevices Success resolving devices: %s
SetPlaybackSpeedIntentHandling
v32@0:8@"SetPlaybackSpeedIntent"16@?<v@?@"SetPlaybackSpeedIntentResponse">24
v32@0:8@"SetPlaybackSpeedIntent"16@?<v@?@"NSArray">24
v32@0:8@"SetPlaybackSpeedIntent"16@?<v@?@"SetPlaybackSpeedSpeedMagnitudeResolutionResult">24
v32@0:8@"SetPlaybackSpeedIntent"16@?<v@?@"PlaybackSpeedTypeResolutionResult">24
NSObject
Unexpected parse type: %s, returning nil MediaPlayerIntent
Invalid user data for buttonPress: %s
Handling direct invocation parse in MediaPlayerIntent
Fatal: Unable to cast task: %s to ControlsMediaPlayerTask
Setting attributes for MediaPlayerIntent from task: %s
Handling USO/Pommes parse in MediaPlayerIntent
Creating MediaPlayerNLv3Intent
Failed to decode destinationDeviceId
_TtC26SiriPlaybackControlIntents20AnalyticsServiceImpl
analyticsServiceLogger
contextProvider
siriEnvironment
Submit SiriKitEvent for intent: %s with domainContext: %s and loggedApp: %s
v8@?0
sending logSELFCrossDeviceCommandEndedEvent with intent:%s requestId: %s
sending logSELFCrossDeviceCommandStartedEvent with requestId: %s
com.apple.siri.playbackcontrols.numberOfDevicesFiltered
sending %s with filterName: %s devicesBefore: %ld devicesAfter: %ld devicesFiltered: %ld
primaryProximityCount
immediateProximityCount
nearProximityCount
farProximityCount
unknownProximityCount
com.apple.siri.playbackcontrols.contextDeviceProximities
sending %s with proximityCounts: %@
selectedDeviceProximity
com.apple.siri.playbackcontrols.selectedDeviceProximity
sending %s for intent: %s with proximity: %s and selectedBy: %s
Error creating contexts for eventType: %s
Error creating createAFCoreAnalyticsCrossDeviceEvent
sending logAFCoreAnalyticsCrossDeviceEvent with event: %s
sending eventType: %s with event: %s
Could not convert user dialog act to tasks: %s
getUsoTask() returning task with entity=%{public}s verb=%{public}s
No tasks found in input
_TtC26SiriPlaybackControlIntents29VolumeLevelNeedsValueStrategy
deviceState
volumeControlsDialogProvider
Unknown parameter found: %{public}s. Unable to make prompt value.
VolumeControls#VolumeLevelNeedsValue
Making prompt value for "volumeLevel"
VolumeLevelNeedsValueStrategy.makePromptForValue()
Including SystemPrompted in context update: %s
Nlu System Prompted Act: %s
uso NeedsValue: %s
com.apple.siri.nl
floatSettingName
Unknown parameter found: %{public}s. Unable to parse response value
Unable to create SettingsIntent from parse
Could not get volumeSettingValue from intent
VolumeLevelNeedsValueStrategy.parseResponseValue()
Unknown parameter found: %s. Returning .ignore()
Could not create SettingsIntent from parse. ActionForInput = ignore()
Could not find a numericSettingState nor a numericSettingValue in the response. ActionForInput = ignore()
VolumeLevelNeedsValueStrategy.actionForInput()
handleSkipItem
Resolving devices for skip content
_TtC26SiriPlaybackControlIntents24SkipContentIntentHandler
v16@0:8
SkipContentIntentHandler#resolveDevices Disambiguating between devices: %s
SkipContentIntentHandler#resolveDevices Success resolving devices: %s
SkipContentIntentHandler#resolveDevices .noMatchingDevicesFound
SkipContentIntentHandler#resolveDevices Error resolving devices: %s
Skip direction not provided in intent, returning failure
SkipContentIntentHandling
v32@0:8@"SkipContentIntent"16@?<v@?@"SkipContentIntentResponse">24
v32@0:8@"SkipContentIntent"16@?<v@?@"NSArray">24
@32@0:8:16@24
dialogProviding
languageDialogProvider
LanguageControls#DisambiguateLanguage
LanguageDisambiguationStrategy.makePromptForDisambiguation() called
LanguageDisambiguationStrategy#parseDisambiguationResult parameter is not language
LanguageDisambiguationStrategy#parseDisambiguationResult failed to create MediaIntent from parse
LanguageDisambiguationStrategy#parseDisambiguationResult unable to select a language from previous items, returning failure
LanguageDisambiguationStrategy#parseDisambiguationResult user selected language: %@
LanguageDisambiguationStrategy#parseDisambiguationResult called
Intent is missing language, ignoring
Comparing %{public}s and %{public}s against: %{public}s
Selected: %{public}@
LanguageDisambiguationStrategy#makeDisambiguationItemContainer called
LanguageDisambiguationStrategy.makeFlowCancelledResponse()
LanguageDisambiguationStrategy#actionForInput failed to get language from intent
LanguageDisambiguationStrategy#actionForInput intent indicates we should cancel out of disambiguation
LanguageDisambiguationStrategy#actionForInput called
UsoTask_disableSetting_common_MediaItem#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_disableSetting_common_MediaItem#shouldHandle Task is not mediaPlayer/setting: Not handling in controls
UsoTask_disableSetting_common_MediaItem#shouldHandle Task is settings. Handling in controls
UsoTask_disableSetting_common_MediaItem#shouldHandle Task is mediaPlayer. Handling in controls
floatSettingState
Couldn't get usoIdentifier for common_Setting name for entity: %s
mediaSettingName
mediaPlaybackSpeedDelta
UsoEntityCommonSetting#getLanguage couldn't get usoIdentifiers for language: %s
UsoEntityCommonSetting#getLanguage couldn't find language namespace identifier for language: %s
closedCaptioning
close captioning
UsoEntityCommonSetting#getMediaViewOption couldn't get usoIdentifiers for commonSettingEntity: %s
UsoTaskExtension#validateForMediaDomain#settingEntity could not get usoIdentifiers for entity
UsoTaskExtension#validateForMediaDomain#settingEntity validIdentifier: %{bool}d hasMediaViewOption: %{bool}d)
UsoTaskExtension#validateForSettingsDomain#settingEntity no identifiers found for entity, returning true
UsoTaskExtension#validateForSettingsDomain#settingEntity  entity has language or mediaViewOption, returning false
UsoTaskExtension#validateForSettingsDomain#settingEntity unsupported settings namespace: %s
UsoTaskExtension#validateForMediaPlayerDomain#settingEntity could not get usoIdentifiers for entity
UsoTaskExtension#validateForMediaPlayerDomain#settingEntity unsupported mediaPlayer namespace: %s
mediaPlayerAttributes
Unable to get mediaPlayer usoIdentifiers from UsoEntity_common_Setting
Returning unexpected nil verb value for common_Setting: %s
handleRepeatMedia
Resolving devices for set repeat state
_TtC26SiriPlaybackControlIntents27SetRepeatStateIntentHandler
SetRepeatStateIntentHandler#resolveDevices Disambiguating between devices: %s
SetRepeatStateIntentHandler#resolveDevices Success resolving devices: %s
SetRepeatStateIntentHandler#resolveDevices .noMatchingDevicesFound
SetRepeatStateIntentHandler#resolveDevices Error resolving devices: %s
Uknown repeat mode
Handling repeatState with value: %{public}ld
SetRepeatStateIntentHandling
v32@0:8@"SetRepeatStateIntent"16@?<v@?@"SetRepeatStateIntentResponse">24
v32@0:8@"SetRepeatStateIntent"16@?<v@?@"NSArray">24
#16@0:8
_TtC26SiriPlaybackControlIntents23ResumeMediaFlowStrategy
ResumeMediaFlowStrategy.makeIntentFromParse() called
Home Automation entities are empty, skip adding to intent.
Found destination device id in the intent. parsing the routes and setting disambiguated to true
Found home automation nodes, attempting to map them to SiriKit intent
Received non NLv3IntentOnly parse
ResumeMediaFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents34SetVolumeLevelHandleIntentStrategy
Did not receive devices in intent
SetVolumeLevel.HandleIntentStrategy.makeFailureHandlingIntentResponse() called
Did not receive volume level from response
VolumeControls#AlreadyAtMinimum
VolumeControls#AlreadyAtMaximum
SetVolumeLevel.HandleIntentStrategy.makeIntentHandledResponse() called
_TtC26SiriPlaybackControlIntents36VolumeLevelNeedsConfirmationStrategy
DefaultNeedsConfirmationStrategy.makeConfirmationRejectedResponse()
Could not find any devices or volume level in the intent for confirmation
Unable to generate views for confirmation
VolumeControls#ConfirmSetLoudVolume
VolumeLevelNeedsConfirmationStrategy.makePromptForConfirmation()
Failed to localize labels for confirmation dialog.
Unexpected device type, returning empty views
Including SystemOffered in context update: %s
Nlu System Offered Act: %s
uso UserWantedToProceed: %s
Unexpected parse: %s
DefaultNeedsConfirmationStrategy.parseConfirmationResponse()
No confirmation response in the intent, ignoring input
Cancelling due to confirmation value in intent
DefaultNeedsConfirmationStrategy.actionForInput()
Filtered %ld options against %{public}s to: %{public}@
Error when getting language options: %{public}s
Unable to autoselect a language, returning all options: %@
Auto selected %{public}s
Unable to find matching language using system language: %s. Searching for match with system language/region: %{public}s using mapped languageIdentifier: %{public}s
Searching for matching language using systemLanguage: %{public}s
Found already enabled language: %s
UsoTask_increaseBy_common_Setting#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_increaseBy_common_Setting#shouldHandle Task is not setting: Not handling in controls
UsoTask_increaseBy_common_Setting#shouldHandle Task is settings. Handling in controls
Unable to determine setting name for task %s
_TtC26SiriPlaybackControlIntents36SkipTimeDeviceDisambiguationStrategy
Missing direction in intent
SkipTimeDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
Unexpected parse type: %s, returning nil SettingsIntent
Fatal: Unable to cast task: %s to ControlsSettingsTask
Setting attributes for SettingsIntent from task: %s
Creating SettingsUsoIntent
Creating SettingsNLv3Intent
_TtC26SiriPlaybackControlIntents40SetSubtitleStateUnsupportedValueStrategy
SetSubtitleStateUnsupportedValueStrategy.makeUnsupportedValueOutput()
LanguageControls#FailedToRetrieveOptions
Unable to create SettingsIntent from parse, ignoring input
Incorrect verb in intent for flow, ignoring input
SetVolumeLevel.shouldHandle() called
Intent Device { name: 
, displayableName: 
, mediaSystemId: 
, disambiguated: 
, skipConfirmation: 
Device#toRREntities UsoBuilderConversionUtils.convertEntityBuilderToEntity creating UsoEntity: %s
Device#toRREntitiesForZoneNames UsoBuilderConversionUtils.convertEntityBuilderToEntity creating UsoEntity: %s
Device missing identifier, skipping conversion: %s
Context missing route ID while converting to Intent Device: %@. Skipping device.
Context contains duplicate routeId: %s with context: %@. Keeping only last processed context: %@
Local SideKick device, using endpointId: %s
_TtC26SiriPlaybackControlIntents38SetVolumeLevelUnsupportedValueStrategy
VolumeControls#NothingIsPlaying
VolumeControls#VolumeLevelUnsupportedOnCarPlay
VolumeControls#VolumeLevelUnsupportedOnAppleTV
FLOWSchemaFLOWDomainContext error creating domainContext. Returning nil
fetchQuickStopContext not implemented in SimulatedContextProvider
Returning %ld contexts: %@
nowPlayingMediaType
_TtC26SiriPlaybackControlIntents19BasePatternExecuter
testMode
executePattern
Executing pattern: %s with params: %s
[Error] Interval already ended
handleSkipTimeMedia
Resolving devices for skip time
_TtC26SiriPlaybackControlIntents21SkipTimeIntentHandler
v32@0:8@16@?24
SkipTimeIntentHandler#resolveDevices Disambiguating between devices: %s
SkipTimeIntentHandler#resolveDevices Success resolving devices: %s
SkipTimeIntentHandler#resolveDevices .noMatchingDevicesFound
SkipTimeIntentHandler#resolveDevices Error resolving devices: %s
Unable to get time from intent, returning failure
Unknown skip direction provided in intent, returning failure
responseCodeFromResult for SkipTimeIntentResponseCode
SkipTimeIntentHandling
v32@0:8@"SkipTimeIntent"16@?<v@?@"SkipTimeIntentResponse">24
v32@0:8@"SkipTimeIntent"16@?<v@?@"NSArray">24
v32@0:8@"SkipTimeIntent"16@?<v@?@"SignedDurationResolutionResult">24
_TtC26SiriPlaybackControlIntents23MoveSpeakerFlowStrategy
MoveSpeakerFlowStrategy.makeIntentFromParse() called
MoveSpeakerFlowStrategy.actionForInput() not a MediaPlayerIntent, ignoring...
MoveSpeakerFlowStrategy.actionForInput() not a moveSpeaker request, ignoring...
MoveSpeakerFlowStrategy.actionForInput() called
MediaPlayerFlowProvider.makeFlow Received unexpected parse: %s
MediaPlayerIntent: %s
Unable to make flow for mediaPlayer intent
handleAddSpeakerIntent
resolveAddSpeakerSource
resolveAddSpeakerDestiantions
AddSpeakerIntentHandler.confirm() called
_TtC26SiriPlaybackControlIntents23AddSpeakerIntentHandler
Could not find a device query or could not find add source in the intent. Returning error
AddSpeakerIntentHandler.resolveDestination() called
Success resolving destination: %s.
User asked for a single device matching a deviceType, but multiple devices were found. Returning an error
AddSpeaker destination device is not TV or HomePod. Returning an error
Could not resolve any destination for add speaker request.
Could not find any device queries in the intent. Returning error
AddSpeakerIntentHandler.resolveSource()
Multiple sources found for add request.
Success resolving source: %@.
Could not find a source stream for the add request.
Could not find a valid source and/or destinations in the intent
Failed to get the device id of the source. Returning error
Source device is is not TV or HomePod. Sending a move command instead of add
Empty destination ids found after filtration. Returning error
Resolved Source: %s, Resolved Destinations: %s
AddSpeakerIntentHandler.handle() called
Success moving output devices to group
Failed to move output devices to group. Error: %s
Success adding output devices to group
Failed to add output devices to group. Error: %s
AddSpeakerIntentHandling
v32@0:8@"AddSpeakerIntent"16@?<v@?@"AddSpeakerIntentResponse">24
v32@0:8@"AddSpeakerIntent"16@?<v@?@"AddSpeakerSourceResolutionResult">24
v32@0:8@"AddSpeakerIntent"16@?<v@?@"NSArray">24
findFlowFor
findFlowFor(parse:)
ControlsFlowProvider#findFlowFor Didn't recieve a flow, returning .noFlow
ControlsFlowProvider#findFlowFor Returning flow: %s
ControlsFlowProvider#findFlowFor Calling ControlsFlowProvider().makeFlow for a flow to return
ControlsFlowProvider#findFlowFor Received a uso parse but Media Controls on Siri X feature is disabled, returning .noFlow
ControlsFlowProvider#findFlowFor Recieved parse: %s
ControlsFlowProvider#makeFlow No flow returned
ControlsFlowProvider#makeFlow flow returned. Pre-warming HomeKit
ControlsFlowProvider#makeFlow Recieved parse: %s
makeFlow
makeFlow(for parse:)
ControlsFlowProvider#makeFlow Received unexpected parse: %s
com.apple.siri.DirectInvocation.PlaybackControls.StopMedia
ControlsFlowProvider#makeFlow Unexpected invocation identifier: %s
ControlsFlowProvider#makeFlow Returning PauseMediaFlow for stop direct invocation
ControlsFlowProvider#makeFlow Unexpected NL domain: %s, returning no flow
ControlsFlowProvider#makeFlow Attempting to make frame from settings NL intent
ControlsFlowProvider#makeFlow Attempting to make frame from mediaPlayer NL intent
ControlsFlowProvider#makeFlow Attempting to make frame from media NL intent
ControlsFlowProvider#makeFlow Received a .uso parse but Media Controls on Siri X feature is disabled, returning nil
ControlsFlowProvider#makeFlow Did not receive a task from uso's UserParse, returning nil
ControlsFlowProvider#makeFlow Unsupported task, returning no flow
ControlsFlowProvider#makeFlow Attempting to make flow from media uso parse
ControlsFlowProvider#makeFlow Attempting to make flow from settings uso parse
ControlsFlowProvider#makeFlow Attempting to make flow from mediaPlayer uso parse
ControlsFlowProvider#makeFlow uso parse input is entity=%{public}s verb=%{public}s
ControlsFlowProvider#makeFlow Did not receive a task from PommesResponse's UserParse
ControlsFlowProvider#makeFlow Attempting to make flow from mediaPlayer pommesResponse
makeFrameForPlayMediaIntent
makeAmbiguousShuffleFlow
ControlsFlowProvider#makeAmbiguousShuffleFlow Determining if this is a request to enable shuffle or to start library playback shuffled
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Invalid ambiguous shuffle parse, not handling
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Unable to make MediaPlayerIntent from parse, not handling
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Resolving potential devices
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Task is not an ambiguous shuffle music request. Handling as explicit shuffle.
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Device resolution result was not success or disambiguation, not handling
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest No playing music found to shuffle, not handling this as a set shuffle state request
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Mentioned devices are playing music: %s, returning handle response
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Checking resolved devices for playing music
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest No resolved devices, not handling
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Adding disambiguated devices
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Adding resolved device(s)
ControlsFlowProvider#deviceSelector initializing device selecting util...
ControlsFlowProvider#shouldHandleAmbiguousShuffle Received unexpected parse: %s
ControlsFlowProvider#shouldHandleAmbiguousShuffle Siri X v2 flag is not enabled, not handling ambiguous shuffle music request
ControlsFlowProvider#shouldHandleAmbiguousShuffle Did not receive a task from parse
ControlsFlowProvider#shouldHandleAmbiguousShuffle Task is not a supported shuffle type for controls
ControlsFlowProvider#shouldHandleAmbiguousShuffle Received valid ambiguous shuffle parse: %s
ControlsFlowProvider#shouldHandleAmbiguousShuffle Not an INPlayMediaIntent
ControlsFlowProvider#shouldHandleAmbiguousShuffle INPlayMediaIntent doesn't have the expected properties set, not an ambiguous shuffle music request
ControlsFlowProvider#shouldHandleAmbiguousShuffle NLv3 intent is not ambiguous shuffle
ControlsFlowProvider#makeSetShuffleStateFlow cannot create mediaPlayer intent from parse
Determining if this is a play, resume or addSpeaker request
Unable to make MediaPlayerIntent from parse, returning nil flow
ControlsFlowProvider.shouldHandleAmbiguousPlay Received unexpected parse: %s
ControlsFlowProvider.shouldHandleAmbiguousPlay Did not receive a controls mediaPlayer task from uso's UserParse
ControlsFlowProvider.shouldHandleAmbiguousPlay Non-ambiguous play: %s, not handling in controls
Checking context for ambiguous play request with intent: %s, hasHomeAutomationNodes: %{bool}d
ControlsFlowProvider.shouldHandleAmbiguousPlay This is a play + mediaType request. Rejecting since we want don't want to treat those as smartPlay
This is a "Play this in [room]" request, handling in playback controls
ControlsFlowProvider.shouldHandleAmbiguousPlay Non ambiguous play request. Returning a nil flow for SiriAudio to handle the play request
Cannot create mediaPlayer intent from parse
Resumable device found in context: %s, returning handle response
Contexts matching media type %s: %s
User asked to play [music/podcast/audiobook] and the local device is not playing that type, returning nil flow for SiriAudio to handle
User asked to play [music/podcast/audiobook] and the local device is playing that type, returning resume flow
No resumable devices found from context. Returning a nil flow for SiriAudio to handle
Request to play in [location] and local device is playing something. This is an addSpeaker request
Determining if we should handle Ambiguous + WHA request
Found devices to resume: %s. Returning a resume flow
No resumbale devices found for WHA request, returning nil flow for SiriAudio to handle
User asked to "Play [music/podcast/audiobook]" but no primary context found or primary was playing a different mediaType. Returning nil flow frame for SiriAudio to handle the play request
User asked to "Play [music/podcast/audiobook]". Primary is playing that mediaType. Resuming local device
User asked to "Play [music/podcast/audiobook]". Determining if we need to start a new container or if there's music/podcast/audiobook queued locally to resume
Local device has resumable content: %{bool}d
No relevant resumable contexts found to resume and local device play queue is empty or does not match the requested mediaType. Returning nil
No relevant resumable contexts found. Local device can be resumed. Returning resume flow
Selecting most recent resumable deviceContexts: %s
Found no resumable contexts with valid timestamps. Returning all resumable without timestamp filtration: %s
mediaType: %{public}s is ambiguous or unspecified, filtering skipped.
PlaybackControls will handle ambiguous play request. Pre-warming HomeKit...
ControlsFlowProvider#makeRequestContext making RequestContext with deviceContexts: %s
ControlsFlowProvider#makeRequestContext Fetching device contexts
makeQuickStopFlow
ControlsFlowProvider#quickStopFlowResult QuickStop received an unsupported QuickStop parse. Returning .noFlow
homeAnnouncement
ControlsFlowProvider#quickStopFlowResult QuickStop reforming to %s domain
ControlsFlowProvider#quickStopFlowResult QuickStop returned flow
ControlsFlowProvider#preWarmHomeKit Pre-warming HomeKit...
Found no context for item: %s, filtering skipped for this item.
homeAutomationSpeakerService
homeAutomationFromEntity
homeAutomationServiceGroup
homeAutomationServiceName
homeAutomationAccessoryName
homeAutomationZone
homeAutomationHome
common_MediaItem
isSiriXEnabled: %{bool}d, isSiriXv2Enabled: %{bool}d
Not rendering the controls platter due to enabled suppressSnippets user default
Setting sash applicationBundleIdentifier to: %{public}s
neverHideSnippet
MediaControlsViewProvider#suppressSnippetIfNeeded snippet viewId: %s
MediaControlsViewProvider#suppressSnippetIfNeeded routeId: %s
MediaControlsViewProvider#suppressSnippetIfNeeded snippet sessionID: %s
canHideSnippetIfNeeded
MediaControlsViewProvider#fetchSessionIDIfNeeded shouldSuppressSnippet: %{bool}d
_TtC26SiriPlaybackControlIntents30AddSpeakerHandleIntentStrategy
AddSpeakerHandleIntentStrategy.makeFailureHandlingIntentResponse() called
Unable to find any destinations in the intent. Returning a failure
Returning default response dialog for add speaker.
Requested to add speaker from phone/iOS device which resulted in a moveSpeaker operation instead. Returning moveSpeaker dialog
AddSpeakerHandleIntentStrategy.makeIntentHandledResponse() called
_TtC26SiriPlaybackControlIntents35MoveSpeakerUnsupportedValueStrategy
MoveSpeakerUnsupportedValueStrategy.makeUnsupportedValueOutput() called
PlaybackControls#NoWholeHouseAudioMentionedInIntent
PlaybackControls#TooManyStreamsInHome
UsoTask_noVerb_common_Setting#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_noVerb_common_Setting#shouldHandle Task is not mediaPlayer/media/setting: Not handling in controls
UsoTask_noVerb_common_Setting#shouldHandle Task is settings. Handling in controls
UsoTask_noVerb_common_Setting#shouldHandle Task is media. Handling in controls
UsoTask_noVerb_common_Setting#shouldHandle Task is mediaPlayer. Handling in controls
resolveVolumeLevelUsingQualifiers a lot triggered
resolveVolumeLevelUsingQualifiers a little triggered
volumeSettingState not specified in the intent. isIncreaseOrDecreaseVolumeIntent = false
_TtC26SiriPlaybackControlIntents26GetVolumeLevelFlowStrategy
GetVolumeLevelFlowStrategy.makeIntentFromParse() called
GetVolumeLevelFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents39SkipContentDeviceDisambiguationStrategy
SkipContentDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
UsoEntityCommonNumber#getNumericValue got unexpected number entityType %s
Number %s cannot be cast to MultipliedNumber, decimal or integer, returning nil.
Number value: %s
Number value: %lld
Multiplier value: %s
_TtC26SiriPlaybackControlIntents31ResumeMediaHandleIntentStrategy
ResumeMediaHandleIntentStrategy.makeIntentHandledResponse()
Updating parameters for local controls
Updating parameters for smart controls
Smart selected more than 1 device?! count = %ld
SiriPlaybackControlIntents/ControlsDialogParameters.swift
Proximity not supported!
Everywhere: Smart pause of all devices or groups
Unsupported deviceType for native playback controls!
PlaybackControls#ResumeFailed
ResumeMediaHandleIntentStrategy.makeFailureHandlingIntentResponse()
_TtC26SiriPlaybackControlIntents32ResumeMediaConfirmIntentStrategy
dialogProvider
ConfirmIntentStrategy.makeFlowCancelledResponse()
ConfirmIntentStrategy.makeConfirmationRejectedResponse()
ResumeMediaConfirmIntentStrategy.makePromptForConfirmation() called
Could not find any devices in the intent for confirmation
Confirming devices: %s
ResumeMediaConfirmIntentStrategy.makeDialogForConfirmation()
ConfirmIntentStrategy.parseConfirmationResponse()
ConfirmIntentStrategy.actionForInput()
DeviceGroup { groupName: 
, excludeGroup: 
unmapped NowPlayingMediaType case (
Found an unknown media type playing: "%{public}s". Treating as unknown
supportedVerbForEntity: %{bool}d, shouldHandleInControls: %{bool}d, isWHASupported: %{bool}d. Task is supported by MediaFlowProvider: %{bool}d
Task entity/verb: %s/%s is not supported by MediaFlowProvider
Not a shared task. Handling in controls
Found shared task... should handle in domain: %s
Task entity/verb: %s/%s is not supported by SettingsFlowProvider
supportedVerbForEntity: %{bool}d, shouldHandleInControls: %{bool}d, isWHASupported: %{bool}d. Task is supported by SettingsFlowProvider: %{bool}d
supportedVerbForEntity: %{bool}d, shouldHandleInControls: %{bool}d, isWHASupported: %{bool}d. Task is supported by MediaPlayerFlowProvider: %{bool}d
Task entity/verb: %s/%s is not supported by MediaPlayerFlowProvider
_TtC26SiriPlaybackControlIntents18BaseDialogProvider
testGlobals
globals
isMultiUserEnabled
requiresUserGrounding
executeCAT
Executing CAT: %s with params: %s
Error while executing dialog: %{public}s
handleResumeMedia
Resolving devices for resume media
_TtC26SiriPlaybackControlIntents24ResumeMediaIntentHandler
App bundle id for mediaType %{public}s on %{public}s is nil. Returning failure
ResumeMediaIntentHandler#resolveDevices Disambiguating between devices: %s
ResumeMediaIntentHandler#resolveDevices Success resolving devices: %s
ResumeMediaIntentHandler#resolveDevices .noMatchingDevicesFound
ResumeMediaIntentHandler#resolveDevices Error resolving devices: %s
Handling resume media
Handling resume for devices: %@
Resuming in here
Failed to handle Resume intent. No route ids found.
User asked to "Resume [mediaType]", however no devices with a matching nowPlayingMediaType was found. Falling back to resuming the corresponding first party app locally
Prepare for audio handoff came back with result: %{bool}d
More than one device found in the intent or primary device not found. shouldResumeLocalFirstPartyAppForMediaType = false
shouldResumeLocalFirstPartyAppForMediaType = %{bool}d
Determining if we should resume the local first party app using %s and mediaType %{public}s.
ResumeMediaIntentHandling
v32@0:8@"ResumeMediaIntent"16@?<v@?@"ResumeMediaIntentResponse">24
v32@0:8@"ResumeMediaIntent"16@?<v@?@"NSArray">24
_TtC26SiriPlaybackControlIntents35SetRepeatStateConfirmIntentStrategy
ConfirmIntentStrategy.makePromptForConfirmation() called
Unexpected repeat mode found
SetRepeatStateConfirmIntentStrategy.makeDialogForConfirmation()
setAudioLanguage
handleSetAudioLanguage
Media controls are unsupported on this platform
resolveAudioLanguage
_TtC26SiriPlaybackControlIntents29SetAudioLanguageIntentHandler
No device found in intent, returning failure
Language already found in intent, returning it
Resolving language for set audio language
No language resolved and user requested to enable subtitles, returning failure
SetAudioLanguageIntentHandling
v32@0:8@"SetAudioLanguageIntent"16@?<v@?@"SetAudioLanguageIntentResponse">24
v32@0:8@"SetAudioLanguageIntent"16@?<v@?@"SetAudioLanguageDeviceResolutionResult">24
v32@0:8@"SetAudioLanguageIntent"16@?<v@?@"SetAudioLanguageLanguageResolutionResult">24
B24@0:8@16
_TtC26SiriPlaybackControlIntents36SetAudioLanguageHandleIntentStrategy
No device present in intent
SetAudioLanguageHandleIntentStrategy.makeIntentHandledResponse()
LanguageControls#AudioFailedToChange
_TtC26SiriPlaybackControlIntents34WhatDidTheySayHandleIntentStrategy
controlsDialogProvider
WhatDidTheySayHandleIntentStrategy.makeIntentHandledResponse()
WhatDidTheySayHandleIntentStrategy.makeFailureHandlingIntentResponse()
LanguageControls#SubtitleNotAvailable
Missing routeId in intent
Getting the volume for route Id: %s
GetVolumeLevel.GetVolumeLevelIntentHandler.handle() called
GetVolume requests for Whole House Audio are unsupported on this platform
GetVolumeLevel.GetVolumeLevelIntentHandler.resolveDevices() called
GetVolumeLevel.GetVolumeLevelIntentHandler.confirm() called
_TtC26SiriPlaybackControlIntents27GetVolumeLevelIntentHandler
Getting routeId from intent. PreferContextRouteId: %{bool}d
Multiple devices selected, returning unsupported.
The current volume level from GetVolumeLevel media remote call is: %f
An error occurred in the GetVolumeLevel media remote call: %{public}s
GetVolumeLevelIntentHandling
v32@0:8@"GetVolumeLevelIntent"16@?<v@?@"GetVolumeLevelIntentResponse">24
v32@0:8@"GetVolumeLevelIntent"16@?<v@?@"GetVolumeLevelDeviceResolutionResult">24
Intent LanguageOption { name: 
, languageIdentifier: 
_TtC26SiriPlaybackControlIntents22PauseMediaFlowStrategy
Unexpected parse type in makeIntentFromParse: %s
com.apple.siri.DirectInvocation.PlaybackControls.QuickStop
com.apple.siri.DirectInvocation.PlaybackControls.ButtonPress
Unexpected direct invocation identifier
Failed to create MediaPlayerIntent from parse: %s
PauseMediaFlowStrategy.makeIntentFromParse() called
Didn't recieve an NLv3IntentOnly parse or direct invocation.
PauseMediaFlowStrategy.actionForInput() called
handleShuffleMedia
Resolving devices for set shuffle state
_TtC26SiriPlaybackControlIntents28SetShuffleStateIntentHandler
SetShuffleStateIntentHandler#resolveDevices Disambiguating between devices: %s
SetShuffleStateIntentHandler#resolveDevices Success resolving devices: %s
SetShuffleStateIntentHandler#resolveDevices .noMatchingDevicesFound
SetShuffleStateIntentHandler#resolveDevices Error resolving devices: %s
Uknown shuffle mode
Unexpected shuffle mode
responseCodeFromResult for SetShuffleStateIntentHandler
SetShuffleStateIntentHandling
v32@0:8@"SetShuffleStateIntent"16@?<v@?@"SetShuffleStateIntentResponse">24
v32@0:8@"SetShuffleStateIntent"16@?<v@?@"NSArray">24
UserDialogAct is UserCancelled
UserDialogAct is UserRejected
UserDialogAct is UserAccepted
wrappedFlow
shouldRedirectToServer
NeedsDisambiguationWrapperFlow Wrapped flow exit value: %s
NeedsDisambiguationWrapperFlow shouldRedirectToServer is set to true, exiting flow with .unhandled response to trigger server fallback
NeedsDisambiguationWrapperFlow.execute called
NeedsDisambiguationWrapperFlow Disambiguation received a uso parse. Setting shouldRedirectToServer to true
NeedsDisambiguationWrapperFlow.on called
patternProvider
Cannot cast intent resolution result as CommonIntentResolutionResult
CommonUnsupportedValueStrategy#makeUnsupportedValueOutput Unexpected unsupportedReason
CommonUnsupportedValueStrategy#makeUnsupportedValueOutput for .unsupportedOnPlatform
PauseMediaUnsupportedValueStrategy.makeUnsupportedValueOutput() called using RF
PauseMediaUnsupportedValueStrategy.makeUnsupportedValueOutput() for .noMatchingDevicesFound
CommonUnsupportedValueStrategy.makeUnsupportedValueOutput() called
_TtC26SiriPlaybackControlIntents37SetAudioLanguageConfirmIntentStrategy
Confirming device: %@
SetAudioLanguageConfirmIntentStrategy.makeDialogForDisambiguation()
_TtC26SiriPlaybackControlIntents38GetVolumeLevelUnsupportedValueStrategy
GetVolumeLevelUnsupportedValueStrategy.makeUnsupportedValueOutput() called
VolumeControls#GetVolumeLevelError
VolumeControls#GetVolumeLevelUnsupportedOnMultipleDevices
MediaFlowProvider#makeflow failed to create MediaIntent from parse: %s
MediaFlowProvider#makeflow making flow from parse
_TtC26SiriPlaybackControlIntents12GroupingUtil
ambiguousGroupsSync
Found primary context and creating a 'this' DeviceGroup for the local device.
HomeAutomation entity contains reference for 'this'.
Multiple predicates found, filtering out .allDevices
Getting ambiguous groups for homeAutomationEntities: %s, includeFromEntities: %{bool}d
Could not find any groups for %s
%s has multiple groups but none are zone/room/accessory. GroupTypes: %s
Adding deduplicated group for %s: %@
Groups for %s: %@
Returning ambiguousGroups: %s
Adding a group includingTVs: %{bool}d for streams: %s
Adding a stream for paused devices: %@
Playing streams: %s
Selecting devices based on predicate: %s, devices: %s
No devices found in group: %s. Skipping this group.
Creating stream for groupId: %s from devicesInGroup: %s
Grouping devices into streams
FromEntity homeAutomationEntities: %s
Returning sourceStreams: %@
Selecting devices based on predicate: %s
Device selector returned devices: %s
_TtC26SiriPlaybackControlIntents42SetRepeatStateDeviceDisambiguationStrategy
SetRepeatStateDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
_TtC26SiriPlaybackControlIntents28SkipTimeHandleIntentStrategy
Did not receive valid duration
SkipTimeHandleIntentStrategy.makeIntentHandledResponse()
SkipTimeHandleIntentStrategy.makeFailureHandlingIntentResponse()
Could not create skip error params
callIntentHandledFailedUnsupportedCommand in SkipTimeDialogTemplatingService
callGenericIntentHandledFailed in SkipTimeDialogTemplatingService
UsoTask_decreaseBy_common_Setting#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_decreaseBy_common_Setting#shouldHandle Task is not setting: Not handling in controls
UsoTask_decreaseBy_common_Setting#shouldHandle Task is settings. Handling in controls
_TtC26SiriPlaybackControlIntents27SetShuffleStateFlowStrategy
SetShuffleStateFlowStrategy.makeIntentFromParse() called
SetShuffleStateFlowStrategy.actionForInput() called
UsoTask_enableSetting_common_MediaItem#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_enableSetting_common_MediaItem#shouldHandle Task is not mediaPlayer/setting: Not handling in controls
UsoTask_enableSetting_common_MediaItem#shouldHandle Task is settings. Handling in controls
UsoTask_enableSetting_common_MediaItem#shouldHandle Task is mediaPlayer. Handling in controls
settingConfirmation
settingAttribute
floatSettingQualifier
floatSettingValue
floatSettingVerb
Unsupported parse while creating SettingNLIntent: %s
Found language in intent, mapping it to SiriKit intent
handleWhatDidTheySayIntent
_TtC26SiriPlaybackControlIntents27WhatDidTheySayIntentHandler
timer
queue
assertion
What did they say timer
MediaQuotationIntentHandler
v24@?0@"RBSAssertion"8@"NSError"16
Acquired RB assertion
Error acquiring assertion %{public}s
Error disabling subtitles for 'What did they say' request
Successfully disabled subtitles for 'What did they say' request
Missing device in intent
Calculated %f seconds as the duration to skip back
Handling What did they say
Error while performing rewind command
Auto selected %s
Failed to retrieve first matched language from matchingLanguageOptions: %{public}s
Skipping language change due to already enabled language
Error getting matching subtitle options. All available languages returned
Error getting matching subtitle options: %{public}s
WhatDidTheySayIntentHandling
v32@0:8@"WhatDidTheySayIntent"16@?<v@?@"WhatDidTheySayIntentResponse">24
v32@0:8@"WhatDidTheySayIntent"16@?<v@?@"WhatDidTheySayDeviceResolutionResult">24
Transformer#quickStopToAlarmTransformer Task is not a valid QuickStop task, returning untransformed parse
com.apple.siri.DirectInvocation.Alarm.Stop
Transformer#quickStopToAlarmTransformer Reformed parse to stop alarm DirectInvocation: %s
Transformer#quickStopToTimerTransformer Task is not a valid QuickStop task, returning untransformed parse
com.apple.siri.DirectInvocation.Timer.Stop
Transformer#quickStopToTimerTransformer Reformed parse to stop timer DirectInvocation: %s
Transformer#quickStopToHomeAnnouncementTransformer Task is not a valid QuickStop task, returning untransformed parse
com.apple.siri.directInvocation.homeCommunication.stop
Transformer#quickStopToHomeAnnouncementTransformer Reformed parse to stop home announcement DirectInvocation: %s
_TtC26SiriPlaybackControlIntents36SetPlaybackSpeedHandleIntentStrategy
SetPlaybackSpeed.HandleIntentStrategy.makeFailureHandlingIntentResponse called
SetPlaybackSpeedHandleIntentStrategy.makeIntentHandledResponse() sending unsupported error dialog
PlaybackControls#AlreadyAtMaximumPlaybackSpeed
Sending alreadyAtMaximumPlaybackSpeed dialog
PlaybackControls#AlreadyAtMinimumPlaybackSpeed
Sending alreadyAtMinimumPlaybackSpeed dialog
Sending setPlaybackSpeedToValue dialog with speed magnitude: %f
PlaybackControls#IncreasePlaybackSpeed
Sending increasePlaybackSpeed dialog
PlaybackControls#DecreasePlaybackSpeed
Sending decreasePlaybackSpeed dialog
SetPlaybackSpeedHandleIntentStrategy.makeIntentHandledResponse()
_TtC26SiriPlaybackControlIntents20SeekTimeFlowStrategy
SeekTimeFlowStrategy.makeIntentFromParse() called
SeekTimeFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents28SeekTimeHandleIntentStrategy
Did not receive valid playheadPosition
SeekTimeHandleIntentStrategy.makeIntentHandledResponse()
SeekTimeHandleIntentStrategy.makeFailureHandlingIntentResponse()
_TtC26SiriPlaybackControlIntents16AceServiceHelper
aceService
Local device not found in devices to control. Skipping prepareForAudioHandoff
Local device found in devices to control. Asking to prepareForAudioHandoff
iOSOnly is set and the device is not an iOS device. Skipping prepareForAudioHandoff
VolumeControls#GetVolumeLevel
VolumeControls#AlreadyUnmuted
VolumeControls#SetVolumeLevelError
VolumeControls#SetVolumeLevel
isHomePodLocalOnly
requestedStateIsCurrentState
smartControlFarRooms
preferSpeakerName
requestedVolumeLevel
_TtC26SiriPlaybackControlIntents20AudioSessionProvider
audioSession
LanguageControls#AudioSetSuccessfully
LanguageControls#WhatDidTheySayHandled
LanguageControls#ConfirmSetAudioLanguage
LanguageControls#DeviceDisambiguationWhatDidTheySay
LanguageControls#DeviceDisambiguationSubtitles
LanguageControls#ConfirmSetSubtitleState
LanguageControls#ConfirmWhatDidTheySay
LanguageControls#DeviceDisambiguationAudioLanguage
LanguageControls#NoRelevantDevice
LanguageControls#AudioLanguageNotAvailable
LanguageControls#SubtitleAlreadyOn
LanguageControls#SubtitleFailedToToggle
LanguageControls#SubtitleSetSuccessfully
LanguageControls#SubtitleLanguageNotAvailable
isClosedCaptionRequest
isEnableSubtitles
deviceIsInferred
requestedLanguage
_TtC26SiriPlaybackControlIntents29SkipTimeConfirmIntentStrategy
Unexpected skip time direction
SkipTimeConfirmIntentStrategy.makePromptForConfirmation()
Parse-Extension#firstUsoTask PommesResponse doesn't contain audioExperience %s
Parse-Extension#firstUserDialogAct No user dialog act found in userParse.
Parse-Extension#firstUsoTask No user dialog act found in userParse.
Parse-Extension#firstUsoTask Could not convert user dialog act to task.
Parse-Extension#firstUsoTask No tasks found in input
Parse-Extension#isTurnOff Parse is "Turn off", returning true
Parse-Extension#isQuickStopParse Parse type is not a valid QuickStop parse
Parse-Extension#isQuickStopParse Parse is Quickstop uso parse, returning true
Parse-Extension#isQuickStopParse Parse is not a valid QuickStop parse
Parse-Extension#isQuickStopParse Parse is QuickStop direct invocation, returning true
_TtC26SiriPlaybackControlIntents26SetVolumeLevelFlowStrategy
SetVolumeLevel.FlowStrategy.makeIntentFromParse() called
SetVolumeLevel.FlowStrategy.actionForInput() called
No resolved devices were found in the intent. Skipping confirmation step
Intent indicates confirmation is not necessary
Confirm intent condition returning true
Checking confirm intent condition
DeviceQueryableIntent.shouldConfirm: %{bool}d
This is a WHA request. Skipping confirmation
shouldSkipUserConfirmation is set to true. Skipping confirmation step
ConfirmableIntent.shouldConfirm: %{bool}d
_TtC26SiriPlaybackControlIntents34GetVolumeLevelHandleIntentStrategy
GetVolumeLevel.HandleIntentStrategy.makeFailureHandlingIntentResponse() called
An error occurred in generating the error dialog for GetVolumeLevel: %{public}s
Did not receive device in intent
Did not receive the volume level
Current volume level in the intent response is: %s
GetVolumeLevel.HandleIntentStrategy.makeIntentHandledResponse() called
An error occurred in generating the dialog for GetVolumeLevel: %{public}s
Updating parameters for Volume control
_TtC26SiriPlaybackControlIntents26WhatDidTheySayFlowStrategy
WhatDidTheySayFlowStrategy#makeIntentFromParse unexpected parse type: %s
WhatDidTheySayFlowStrategy#makeIntentFromParse called
WhatDidTheySayFlowStrategy#makeIntentFromParse finished creating intent from parse
WhatDidTheySayFlowStrategy#actionForInput unexpected parse type: %s
WhatDidTheySayFlowStrategy#actionForInput called
_TtC26SiriPlaybackControlIntents23SkipContentFlowStrategy
SkipContentFlowStrategy.makeIntentFromParse() called
SkipContentFlowStrategy.actionForInput() called
UsoTask_stop_common_MediaItem#shouldHandle Sleep timers request. Not handling in controls
RecentTimeWindow
ShortResumeTimeWindow
_TtC26SiriPlaybackControlIntents22AddSpeakerFlowStrategy
AddSpeakerFlowStrategy.makeIntentFromParse() called
AddSpeakerFlowStrategy recieved unsupported parse.
AddSpeakerFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents42WhatDidTheySayDeviceDisambiguationStrategy
WhatDidTheySayDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
_TtC26SiriPlaybackControlIntents32SeekTimeUnsupportedValueStrategy
SeekTimeUnsupportedValueStrategy.makeUnsupportedValueOutput()
playheadPosition
Did not receive intent response for seekTime or devices not populated!
DeviceContext { routeId: 
, nowPlayingState: 
, nowPlayingTimestamp: 
, nowPlayingMediaType: 
exactMediaTypeFound: %{bool}d, isAmbiguousMediaType: %{bool}d, unknownMediaTypeQueued: %{bool}d, acceptAmbiguousMediaType: %{bool}d, acceptUnknownNowPlayingMediaType: %{bool}d. hasMatchingNowPlayingMediaTypeQueued: %{bool}d
Device: %@ is silent primary. Converting its nowPlayingState to .paused
_TtC26SiriPlaybackControlIntents36SetSubtitleStateHandleIntentStrategy
SetSubtitleStateHandleIntentStrategy.makeFailureHandlingIntentResponse()
setSubtitleState
LanguageControls#SubtitleAlreadyOff
SetSubtitleStateHandleIntentStrategy.makeIntentHandledResponse()
UsoTask_disable_common_Setting#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_disable_common_Setting#shouldHandle Task is not mediaPlayer/media/setting: Not handling in controls
UsoTask_disable_common_Setting#shouldHandle Task is settings. Handling in controls
UsoTask_disable_common_Setting#shouldHandle Task is media. Handling in controls
UsoTask_disable_common_Setting#shouldHandle Task is mediaPlayer. Handling in controls
Cannot convert value "%{public}s" to GroupType
_TtC26SiriPlaybackControlIntents31MoveSpeakerHandleIntentStrategy
MoveSpeakerHandleIntentStrategy.makeIntentHandledResponse() called
Destination #2: Destination type is unknown. Ignoring...
Destination #2: Destination is a room or zone. Setting speaker.firstRoom to the groupName
Destination #2: Destination is an accesory. Setting speaker.firstSpeakerName to the groupName
Destination #1: Destination type is unknown. Ignoring...
Destination resolved as the local device. Setting speaker.isInHere to true
More than 2 rooms mentioned in the intent. Setting speaker.hasThreeOrMoreRooms to true
User mentioned "everywhere" in the intent. Setting speaker.isAllSpeakers to true
No destinations found to populate speaker parameter.
Updating destination parameters for WHA dialog
MoveSpeakerHandleIntentStrategy.makeFailureHandlingIntentResponse() called
_TtC26SiriPlaybackControlIntents28SetSubtitleStateFlowStrategy
SetSubtitleStateFlowStrategy#makeIntentFromParse unexpected parse type in makeIntentFromParse: %s
SetSubtitleStateFlowStrategy#makeIntentFromParse failed to create MediaIntent from parse: %s
SetSubtitleStateFlowStrategy#makeIntentFromParse called
SetSubtitleStateFlowStrategy#makeIntentFromParse finished creating intent from parse
SetSubtitleStateFlowStrategy#actionForInput didn't recieve an NLv3IntentOnly or uso parse
SetSubtitleStateFlowStrategy#actionForInput called
Making views for watch
Making views for TV with confirmUtterance: %s and cancelUtterance: %s
Making SAUIConfirmationView with confirmLabel: %s and cancelLabel: %s
_TtC26SiriPlaybackControlIntents31PauseMediaConfirmIntentStrategy
PauseMediaConfirmIntentStrategy.makePromptForConfirmation() called
PauseMediaConfirmIntentStrategy.makeDialogForConfirmation()
Device type is nil. Returning nil for getLocalBundleIdentifier
Could not get bunlde id for type: %{public}s
Getting app identifier for mediaType %{public}s and deviceType: %{public}s
com.apple.TVMusic
com.apple.podcasts
com.apple.iBooks
com.apple.iBooksX
_TtC26SiriPlaybackControlIntents34AddSpeakerUnsupportedValueStrategy
AddSpeakerUnsupportedValueStrategy.makeUnsupportedValueOutput() called
_TtC26SiriPlaybackControlIntents44SetSubtitleStateDeviceDisambiguationStrategy
LanguageControls#DisambiguateDevices
SetSubtitleStateDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
handleVideoCaptioning
resolveSubtitleLanguageForVideoCaptioning
_TtC26SiriPlaybackControlIntents29SetSubtitleStateIntentHandler
Did not request to enable subtitles
Resolving language for set subtitle state
Disambiguating languages: %s
Resolving successfully with: %s
No languages matched
Received .matched response with languages: %s
Received .allAvailable response with languages: %s
Returning .alreadyEnabled response code
Received failure response when resolving language
The requested language was already enabled
The requested language was already disabled
SetSubtitleStateIntentHandling
v32@0:8@"SetSubtitleStateIntent"16@?<v@?@"SetSubtitleStateIntentResponse">24
v32@0:8@"SetSubtitleStateIntent"16@?<v@?@"SetSubtitleStateDeviceResolutionResult">24
v32@0:8@"SetSubtitleStateIntent"16@?<v@?@"SetSubtitleStateLanguageResolutionResult">24
_TtC26SiriPlaybackControlIntents35SetShuffleStateHandleIntentStrategy
Did not receive intent response for shuffle request or devices not populated!
Unexpected shuffle state found
SetShuffleStateHandleIntentStrategy.makeIntentHandledResponse()
SetShuffleStateHandleIntentStrategy.makeFailureHandlingIntentResponse()
unmapped NLMediaType case (
Cannot convert value "%{public}s" to NLMediaType
User asked to repeat but no devices in the home are playing. Retuning nil flow for the reader domain to handle the request instead
_TtC26SiriPlaybackControlIntents37SetSubtitleStateConfirmIntentStrategy
SetSubtitleStateConfirmIntentStrategy.makeDialogForConfirmation()
_TtC26SiriPlaybackControlIntents13QuickStopUtil
flowFactory
QuickStopUtil#quickStopResult Not a valid QuickStop parse, returning .unsupported
QuickStopUtil#quickStopResult Unable to fetch quick time context. Returning nothing to stop
QuickStopUtil#quickStopResult Didn't find anything to stop. Returning QuickStopNothingToStop flow
QuickStopUtil#quickStopResult Watch treating as pause request
QuickStopUtil#quickStopResult Didn't find anything to stop. Parse is a "Turn off" on HomePod, returning .unsupported for HomeAutomation to handle
QuickStopUtil#quickStopResult Local device has running timer. Reforming to timer domain
QuickStopUtil#quickStopResult Far device has playing media. Returning PauseMedia flow
QuickStopUtil#quickStopResult Far device has firing %s. Reforming to %s domain
QuickStopUtil#quickStopResult Local or nearby device has playing media. Returning PauseMedia flow
QuickStopUtil#quickStopResult Nearby device has firing %s. Reforming to %s domain
QuickStopUtil#quickStopResult Barged in over Home Anouncement. Reforming to Home Communication to stop the announcement
QuickStopUtil#quickStopResult Barged in over Siri. Dismiss with no action
QuickStopUtil#quickStopResult Local device has firing %s. Reforming to %s domain
QuickStopUtil#quickStopResult Fetching context
QuickStopUtil#quickStopResult Parse is a "Turn off" on unsupported device, returning .unsupported
ControlsFlowProvider#mostRelevantFiringItemDomain Most recent firing item should not be empty, returning nil
QuickStopUtil#mostRelevantFiringItemDomain Most recently firing item is timer within %s proximity
QuickStopUtil#mostRelevantFiringItemDomain Most recently firing item is alarm within %s proximity
QuickStopUtil#mostRelevantFiringItemDomain No firing alarms/timers found within %s proximity
User asked to restart but no devices in the home are playing. Retuning nil flow for Settings domain to handle the request instead
_TtC26SiriPlaybackControlIntents40SetAudioLanguageUnsupportedValueStrategy
SetAudioLanguageUnsupportedValueStrategy.makeUnsupportedValueOutput()
HandleNLContextUpdateProvider#makeHandledContext Making handled context using devices
HandleNLContextUpdateProvider#makeHandledContext Making handled context using device queries
HandleNLContextUpdateProvider#makeHandledContext making handled context
_TtC26SiriPlaybackControlIntents43SetShuffleStateDeviceDisambiguationStrategy
SetShuffleStateDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
_TtC26SiriPlaybackControlIntents34SetRepeatStateHandleIntentStrategy
Did not receive intent response for repeat request or devices not populated!
Unexpected repeat mode during handle dialog
SetRepeatStateHandleIntentStrategy.makeIntentHandledResponse()
SetRepeatStateHandleIntentStrategy.makeFailureHandlingIntentResponse()
Task: %s -- is an add to library task and not addSpeaker. This is not a controls task
_TtC26SiriPlaybackControlIntents38WhatDidTheySayUnsupportedValueStrategy
WhatDidTheySayUnsupportedValueStrategy.makeUnsupportedValueOutput()
Unable to create SettingIntent from parse, ignoring input
GetVolumeLevel.shouldHandle() called
_TtC26SiriPlaybackControlIntents26QuickStopNothingToStopFlow
QuickStopNothingToStopFlow#execute generating dialog and sending a stop command to the local device just in case...
QuickStopNothingToStopFlow#execute DialogEngine returned an error
QuickStopNothingToStopFlow#execute dialog generated successfully
ControlsFlowProviding#findFlowFor default implementation should not be used
ControlsFlowProviding#makeAmbiguousShuffleFlow default implementation should not be used
ControlsFlowProviding#makeAmbiguousPlayFlow default implementation should not be used
ControlsFlowProviding#makeFlow default implementation should not be used
mediaPlayerReference
com.apple.siri.nl.MediaPlayer
UsoTask_enable_common_Setting#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_enable_common_Setting#shouldHandle Task is not mediaPlayer/media/setting: Not handling in controls
UsoTask_enable_common_Setting#shouldHandle Task is settings. Handling in controls
UsoTask_enable_common_Setting#shouldHandle Task is media. Handling in controls
UsoTask_enable_common_Setting#shouldHandle Task is mediaPlayer. Handling in controls
_TtC26SiriPlaybackControlIntents28SetAudioLanguageFlowStrategy
SetAudioLanguageFlowStrategy#makeIntentFromParse unexpected parse type: %s
SetAudioLanguageFlowStrategy#makeIntentFromParse failed to create MediaIntent from parse: %s
SetAudioLanguageFlowStrategy#makeIntentFromParse called
SetAudioLanguageFlowStrategy#makeIntentFromParse finished creating intent from parse
SetAudioLanguageFlowStrategy#actionForInput received unexpected parse type: %s
SetAudioLanguageFlowStrategy#actionForInput setAudioLanguageFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents26SetRepeatStateFlowStrategy
SetRepeatStateFlowStrategy#makeIntentFromParse Received unexpected parse: %s
SetRepeatStateFlowStrategy.makeIntentFromParse() called
SetRepeatStateFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents36SeekTimeDeviceDisambiguationStrategy
SeekTimeDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
handleMoveSpeakerIntent
resolveMoveSpeakerSource
resolveMoveSpeakerDestiantions
MoveSpeakerIntentHandler.confirm() called
_TtC26SiriPlaybackControlIntents24MoveSpeakerIntentHandler
Could not find a device query. Returning error
MoveSpeakerIntentHandler.resolveDestination() called
MoveSpeaker destination device is not TV or HomePod. Returning an error
Could not resolve any destination for move speaker request.
MoveSpeakerIntentHandler.resolveSource()
Multiple sources found for move request.
Could not find a source stream for the move request.
MoveSpeakerIntentHandler.handle() called
Success moving devices
Failed to move the source stream to the expected destinations. Error: %s
MoveSpeakerIntentHandling
v32@0:8@"MoveSpeakerIntent"16@?<v@?@"MoveSpeakerIntentResponse">24
v32@0:8@"MoveSpeakerIntent"16@?<v@?@"MoveSpeakerSourceResolutionResult">24
v32@0:8@"MoveSpeakerIntent"16@?<v@?@"NSArray">24
mediaPlaybackSpeed
No mediaType found the intent.
MediaType: %s found in the intent but it was not explicitly mentioned by the user. Returning nil mediaType
Returning mediaType = %s
Getting MediaType
MediaType node is not inferred, or could not find origin details. isMediaTypeExplicitlyMentioned: true.
MediaType inferred, but no explanation found or explanation shows it was mentioned by the user. isMediaTypeExplicitlyMentioned: true
USER_DIDNT_ACTUALLY_SAY_MUSIC
MediaType inferred, and the user didn't explicitly mention it. This is possibly a SmartPlay reformation. isMediaTypeExplicitlyMentioned: false
mediaPlayerConfirmation
mediaPlayerSkipInterval
mediaPlayerBoolSettingState
mediaPlayerBoolSettingVerb
Unsupported parse while creating MediaPlayerNLv3Intent: %s
UsoEntityCommonTimeUnit#getPeriod case not yet implemented %s
DeviceClassNumber
_TtC26SiriPlaybackControlIntents29SeekTimeConfirmIntentStrategy
SeekTimeConfirmIntentStrategy.makePromptForConfirmation()
_TtC26SiriPlaybackControlIntents35WhatDidTheySayConfirmIntentStrategy
WhatDidTheySayConfirmIntentStrategy.makeDialogForConfirmation()
_TtC26SiriPlaybackControlIntents14DialogProvider
PlaybackControls#UnsupportedOnPlatform
PlaybackControls#SetPlaybackSpeedToValue
PlaybackControls#UnsupportedDestinationSpeaker
PlaybackControls#SpeakerAdd
PlaybackControls#CannotSkipAdvertisement
PlaybackControls#CannotShuffle
PlaybackControls#UnableToSeekToPlaybackPosition
PlaybackControls#SkipBackward
PlaybackControls#CannotSkipBackward
PlaybackControls#CannotSkipForward
PlaybackControls#CannotSkipLimitExceeded
PlaybackControls#SkipToPrevious
PlaybackControls#SkipToNext
PlaybackControls#ConfirmShuffleState
PlaybackControls#DeviceDisambiguationShuffleState
PlaybackControls#ConfirmSkipContent
PlaybackControls#DeviceDisambiguationSkipContent
PlaybackControls#ConfirmSkipTime
PlaybackControls#DeviceDisambiguationSkipTime
PlaybackControls#SkipForward
PlaybackControls#ToggleShuffle
PlaybackControls#ConfirmRepeatState
PlaybackControls#DeviceDisambiguationRepeat
PlaybackControls#ToggleRepeat
PlaybackControls#CannotRepeat
PlaybackControls#NoSpeakerFound
PlaybackControls#SpeakerFailedOperation
PlaybackControls#SpeakerMove
PlaybackControls#ConfirmSeekTime
PlaybackControls#DeviceDisambiguationSeekTime
PlaybackControls#Seek
PlaybackControls#ConfirmResume
PlaybackControls#DeviceDisambiguationResume
PlaybackControls#Resume
PlaybackControls#ConfirmPause
PlaybackControls#DeviceDisambiguationPause
PlaybackControls#Paused
Cannot create DialogDeviceType from unknown deviceState.
speakerOperation
isMultipleSpeakers
skipBackwardDuration
isShuffleEnabled
isSkipToPrevious
skipForwardDuration
isDestinationMissing
DeviceQuery#toRREntity UsoBuilderConversionUtils.convertEntityBuilderToEntity creating UsoEntity: %s
DeviceQuery#toUsoBuilder From entity found, but donation blocked by rdar://88971898
_TtC26SiriPlaybackControlIntents36SetShuffleStateConfirmIntentStrategy
SetShuffleStateConfirmIntentStrategy.makeDialogForConfirmation()
_TtC26SiriPlaybackControlIntents15PatternProvider
patternExecuter
Got error trying to encode viewData
Setting sash bundleIdentifier to: %{public}s
UsoTask_play_common_MediaItem#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_play_common_MediaItem#shouldHandle Task is not mediaPlayer: Not handling in controls
UsoTask_play_common_MediaItem#shouldHandle Task is mediaPlayer. Handling in controls
UsoTask_play_common_MediaItem#shouldHandle This is an addSpeaker request, handling in controls
_TtC26SiriPlaybackControlIntents32SkipContentConfirmIntentStrategy
Unexpected skip content direction
SkipContentConfirmIntentStrategy.makePromptForConfirmation() called
SkipContentConfirmIntentStrategy.makeDialogForConfirmation()
_TtC26SiriPlaybackControlIntents22AnalyticsServiceLogger
deviceResolutionAnalytics
QuickStopLocalStoppedFlow
QuickStopNothingToStopFlow
AnalyticsServiceLogger.logSELFCrossDeviceCommandEndedEvent expects a valid requestId. Returning.
AnalyticsServiceLogger.logSELFCrossDeviceCommandStartedEvent expects a valid requestId. Returning.
@"NSDictionary"8@?0
_TtC26SiriPlaybackControlIntents11ContextUtil
autoResumableProximitiesInLongWindow
autoResumableProximitiesInShortWindow
selectMostRelevantContexts: Selecting playing immediate device context(s): %s
selectMostRelevantContexts: Found same room devices with video up on the screen, returning those devices: %s
selectMostRelevantContexts: No devices selected
selectMostRelevantContexts: Selecting the playing primary device context
Item: %s has invalid timestamp. Discarding...
Window start date not specified. Returning all contexts
Contexts in window: %s
Filtering %s by window: %s
Excluding context %@ with no timestamp
Contexts matching playState: %s
Filtering %s by playstate: %s
Excluding item %s with no context
Selected pausable devices: %s
Could not find immediate devices, look near and far
Selecting primary device context
Skipping item with missing proximity: %s
Devices %s are autoresumable. Setting skipConfirmation to true
Most recent resumable context in short window = %{public}s
Unknown controlType: %s, no selectedDeviceContexts
Adding back local device to the filtered resumable devices
Smart Selecting devices of type: %{public}s
Auto resumable device found, don't disambiguate with local!
No resumable device found in long resumable window. Include local device
Local device is playing. Don't disambiguate with local device since it is already resumed.
The resumable devices contain the primary device. Don't include local device again
Selected and grouped devices: %s
Video control received on homepod! Removing this device (primary) if it was selected
Adding device types for devices in room %s
Could not find device contexts for group %s...skipping this group
Group %s: unique rooms: %s
Error getting the first room name in a group. groupRoomCount %ld...skipping this group
Unique rooms in group: %s
Group %s: Skipping context %@
Grouping devices in group %s
Group %s has primary or immediate device. Adding it.
Devices in group after silent primary filtration: %s
No devices found in group after final primary filtration. Skipping this group
Single device in group, adding it to grouped device list
Cannot group empty device list
Error generating group name...skipping this group
Picking device %@ as the group representing device
Device %@ is silent primary, isTV: %{bool}d. keepSilentPrimary: %{bool}d
No devices in group for mediaSystemId: %s...skipping it
Only one device is in the group for mediaSystemId: %s. Adding it
Devices grouped by mediaSystem: %s
Cannot group empty device list by media system
!!!!! Simulated context is being used !!!!!
_TtC26SiriPlaybackControlIntents44SetAudioLanguageDeviceDisambiguationStrategy
SetAudioLanguageDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
_TtC26SiriPlaybackControlIntents31SkipContentHandleIntentStrategy
SkipContentHandleIntentStrategy.makeIntentHandledResponse()
SkipContentHandleIntentStrategy.makeFailureHandlingIntentResponse()
SkipContentHandleIntentStrategy.callIntentHandledFailedUnsupportedCommand()
SkipContentHandleIntentStrategy.callGenericIntentHandledFailed()
handlePauseMedia
Resolving devices for pause media
_TtC26SiriPlaybackControlIntents23PauseMediaIntentHandler
PauseMediaIntentHandler#resolveDevices Disambiguating between devices: %s
PauseMediaIntentHandler#resolveDevices Success resolving devices: %s
PauseMediaIntentHandler#resolveDevices .noMatchingDevicesFound
PauseMediaIntentHandler#resolveDevices Error resolving devices: %s
No devices found in intent, returning nothing is playing, but also sending a pause command to the local device just in case...
Local device selected with unknown playstate. Returning nothing is playing, but also sending a pause command to the local device just in case...
Handling pause media
Found non ambiguous target entities in the intent. Applying a remove from group command
Found ambiguous target entities in the intent. Applying a pause command
Local device targeted for pause on non tvOS platform. Applying a pause command
Handling pause for devices: %@
Pausing everywhere using context %@
Failed to handle Pause intent
Executing pause for devices: %s, deviceContext: %s
PauseMediaIntentHandling
v32@0:8@"PauseMediaIntent"16@?<v@?@"PauseMediaIntentResponse">24
v32@0:8@"PauseMediaIntent"16@?<v@?@"NSArray">24
UsoTask_play_uso_NoEntity#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_play_uso_NoEntity#shouldHandle Task is not mediaPlayer: Not handling in controls
UsoTask_play_uso_NoEntity#shouldHandle Task is mediaPlayer. Handling in controls
UsoTask_play_uso_NoEntity#shouldHandle This is an addSpeaker request, handling in controls
Initializing SetShuffleStateFlow
RCHChildFlowProducers.setShuffleStateFlowProducers() called
Initializing AddSpeakerFlow with intent
RCHChildFlowProducers.addSpeakerFlowProducers() called
Initializing ResumeMediaFlow with intent
RCHChildFlowProducers.resumeMediaFlowProducers() called
Initializing WhatDidTheySayFlow
RCHChildFlowProducers.whatDidTheySayFlowProducers() called
Initializing SetSubtitleStateFlow
RCHChildFlowProducers.setSubtitleStateFlowProducers() called
SiriPlaybackControlIntents/RCHChildFlowProducers+SetSubtitleState.swift
Unexpected parameter while generating disambiguation strategy
getDisambiguationStrategy() for SetSubtitleState called
Initializing SetAudioLanguageFlow
RCHChildFlowProducers.setAudioLanguageFlowProducers() called
SiriPlaybackControlIntents/RCHChildFlowProducers+SetAudioLanguage.swift
getDisambiguationStrategy() for SetAudioLanguage called
Initializing MoveSpeakerFlow
RCHChildFlowProducers.moveSpeakerFlowProducers() called
Initializing AddSpeakerFlow
Initializing ResumeMediaFlow
Initializing SkipTimeFlow
RCHChildFlowProducers.skipTimeFlowProducers() called
Initializing SkipContentFlow
RCHChildFlowProducers.skipContentFlowProducers() called
Initializing SetRepeatStateFlow
RCHChildFlowProducers.setRepeatStateFlowProducers() called
Initializing SeekTimeFlow
RCHChildFlowProducers.seekTimeFlowProducers() called
Initializing SetPlaybackSpeedFlow
RCHChildFlowProducers.setPlaybackSpeedFlowProducers() called
Initializing SetVolumeLevelFlow
RCHChildFlowProducers.setVolumeLevelFlowProducers() called
Initializing GetVolumeLevelFlow
RCHChildFlowProducers.getVolumeLevelFlowProducers() called
Initializing PauseMediaFlow
RCHChildFlowProducers.pauseMediaFlowProducers() called
Initializing QuickStopLocalStoppedFlow
Initializing QuickStopNothingToStopFlow
Amending intent with playbackSpeed: %ld and magnitude: %f
mediaConfirmation
mediaQuestionAttributes
Unsupported parse while creating MediaNLv3Intent: %s
MediaTypeProvidingIntent metricsMediaType: %s
DeviceSelectableIntent metricsEligibleDeviceCount: %s
DeviceQueryableIntent metricsIsWHAIntent: %{bool}d
Default metricsMediaType: .unknown
SingleDeviceSelectableIntent metricsEligibleDeviceCount: %s
Default metricsIsWHAIntent: nil
MoveSpeaker metricsEligibleDeviceCount: %ld
AddSpeaker metricsEligibleDeviceCount: %ld
com.apple.siri.nl.Setting
UsoTask_stop_uso_NoEntity#shouldHandle Sleep timers request. Not handling in controls
handleSeekTimeMedia
Resolving devices for seek time
Playhead position doesn't exist in intent.
Multiple devices in intent, can't get duration info
Resolving playHeadPosition for seek time
_TtC26SiriPlaybackControlIntents21SeekTimeIntentHandler
Content has no duration, can't skip to end
Missing duration info or elapsed duration is within 15 seconds of the end. Seeking to end of duration
SeekTimeIntentHandler#resolveDevices Disambiguating between devices: %s
SeekTimeIntentHandler#resolveDevices Success resolving devices: %s
SeekTimeIntentHandler#resolveDevices .noMatchingDevicesFound
SeekTimeIntentHandler#resolveDevices Error resolving devices: %s
Could not find time to seek in intent or it was invalid, returning failure
Can't seek to end on multiple devices, returning failure
Seeking to: %@
Handling seek to time
responseCodeFromResult for SeekTimeIntentHandler
SeekTimeIntentHandling
v32@0:8@"SeekTimeIntent"16@?<v@?@"SeekTimeIntentResponse">24
v32@0:8@"SeekTimeIntent"16@?<v@?@"NSArray">24
v32@0:8@"SeekTimeIntent"16@?<v@?@"SeekTimePlayheadPositionResolutionResult">24
@24@0:8@16
@40@0:8@16@24@32
T@"NSArray",N,D,C
deviceContext
isDirectInvocation
T@"NSNumber",N,D,&
mediaType
targetBundleIdentifier
T@"NSString",N,D,C
T@"SignedDuration",N,D,&
deviceQueries
@24@0:8q16
direction
Tq,N,Vcode
device
T@"Device",N,D,&
Tq,N,D
language
T@"LanguageOption",N,D,&
type
@32@0:8q16@24
q16@0:8
startTime
T@"NSDate",N,D,C
shouldStartPlaybackAfterSeek
isSkipToEnd
shuffleState
repeatState
code
@24@0:8:16
currentVolumeLevel
volumeLevel
T@"VolumeLevel",N,D,&
source
T@"MediaStream",N,D,&
destinations
roomDimmingState
v24@0:8q16
SetRoomDimmingStateIntentHandling
v32@0:8@"SetRoomDimmingStateIntent"16@?<v@?@"SetRoomDimmingStateIntentResponse">24
Td,N,D
playbackSpeedType
SiriPlaybackControlIntents/Device.swift
B16@0:8
name
roomName
zoneNames
currentHome
currentRoom
numberOfAffectedRooms
isDeviceSelectedUsingContext
context
T@"DeviceContext",N,D,&
disambiguated
confirmed
skipConfirmation
mediaSystemId
isEndpoint
displayableName
isPreResolved
SiriPlaybackControlIntents/SignedDuration.swift
duration
SiriPlaybackControlIntents/DeviceContext.swift
routeId
proximity
nowPlayingState
nowPlayingTimestamp
groupId
silentPrimary
SiriPlaybackControlIntents/LanguageOption.swift
languageIdentifier
languageTag
isActive
SiriPlaybackControlIntents/DeviceQuery.swift
accessoryName
zoneName
placeHintString
deviceQuantifierString
serviceName
serviceGroup
deviceTypeString
referenceString
fromEntity
SiriPlaybackControlIntents/VolumeLevel.swift
volumeSettingValue
volumeSettingState
volumeSettingUnit
volumeSettingQualifier
resolvedVolumeOutput
currentVolumeOutput
volumeSettingType
SiriPlaybackControlIntents/DeviceGroup.swift
groupName
streams
includesTVs
excludeGroup
@32@0:8@16@24
SiriPlaybackControlIntents/MediaStream.swift
devices
groupLeader
SiriPlaybackControlIntents/PlaybackSpeed.swift
speedMagnitude
So8NSStringC
$sSY
$ss21_ObjectiveCBridgeableP
$s26SiriPlaybackControlIntents17ControlsMediaTaskP
$s11SiriKitFlow19IntentErrorHandlingP
$s11SiriKitFlow026RouteConfirmIntentResponseC8StrategyP
$s11SiriKitFlow28IntentExtensionCommunicatingP
$s26SiriPlaybackControlIntents25InProcessHandlingStrategyP
_pGIegg_
$s11SiriKitFlow27ParameterResolutionHandlingP
$s11SiriKitFlow019NeedsDisambiguationC8StrategyP
$s26SiriPlaybackControlIntents28DeviceDisambiguationStrategyP
So24INIntentResolutionResultC
_pGIegn_
Iegn_
_pIego_
Gz_Xx
GIegg_
SaySSGIegg_
SaySSGIegn_
ySSG
yyXlG
So22SIRINLUSystemDialogAct_p
So20SIRINLUUserDialogAct_p
_pSg
yypG
SSSg
So20SAServerBoundCommand_p
So20SAClientBoundCommand_p
_pGIegn_
So8NSObjectCSg
Sg_ABt
ySSG
_pSg
SaySo19SAUIHideSiriOverlayCG
_pGIegn_
_pSg
_pGIegn_
_pGIegn_
_pGIegn_
_pGIegn_
ySSSgG
ySSSgG
_pGIegn_
_pGIegn_
_pGIegn_
_pGIegn_
ySDyS2SGG
SDyS2SG
SaySo22AFServiceDeviceContextCGIegg_
SaySo22AFServiceDeviceContextCGIegn_
SaySSG
GIegg_
GIegn_
3key_So12AFClockTimerC5valuet
ypSg
GIegg_
GIegn_
$s26SiriPlaybackControlIntents28DefaultConfirmIntentStrategyP
10IntentType
17NLContextProvider
12NLIntentType
31DisambiguationItemContainerType
10IntentType
17NLContextProvider
12NLIntentType
Sg_ABt
Sg_ABt
Sg_ABt
GIegg_
SnySiG
GIegg_
Gz_Xx
So7NSArrayCIeyBy_
GIegg_
Iegg_
GIegg_
GIegg_
ySay
G_Sbt
GIegg_
ySay
G_Sbt
GIegn_
GIegg_
Iegg_
GIegg_
GIegg_
GIegg_
ySay
GIegg_
ySay
GIegn_
SDySSypG
$s26SiriPlaybackControlIntents20ControlsSettingsTaskP
$s11SiriKitFlow012HandleIntentC8StrategyP
So22PatternExecutionResultC
_pIegHozo_
Sbz_Xx
z_Xx
SgSSSgIeggg_
SSIegg_
Sg_ABt
$s11SiriKitFlow0C0P
Iegn_
$s26SiriPlaybackControlIntents24DeviceNLContextProvidingP
SiSg
_pGIegg_
$s26SiriPlaybackControlIntents20UserDefaultsProviderP
So14NSUserDefaultsCSg
GIegg_
Iegg_
So8NSObjectC
So8NSNumberCSg
IeyBy_
IeyBy_
Iegg_
_pSg
$ss12CaseIterableP
Iegg_
GIegg_
ySdG
IeyBy_
_pSg
$s26SiriPlaybackControlIntents16AnalyticsServiceP
So27FLOWSchemaFLOWDomainContextCSg
_pSg
SaySo22AFServiceDeviceContextCG
ySS_So8NSObjectCtG
ySS_So8NSNumberCtG
ySSSo8NSObjectCG
$s26SiriPlaybackControlIntents13ContextIntentP
So8INIntentC
$s11SiriKitFlow010NeedsValueC8StrategyP
Iegg_
Iegn_
IeyBy_
So16INIntentResponseC
yxq_G
G0R2_
G1R2_
_pGIegn_
Sg_ABt
Iegg_
Iegn_
IeyBy_
_pGIegg_
$s26SiriPlaybackControlIntents21SmartSelectableIntentP
$s11SiriKitFlow017NeedsConfirmationC8StrategyP
$s26SiriPlaybackControlIntents32DefaultNeedsConfirmationStrategyP
SaySo9SAAceViewCG
Iegg_
ySay
Sg_ABt
Sg_ABt
$s26SiriPlaybackControlIntents17ConfirmableIntentP
5value_t
_pSg
$s26SiriPlaybackControlIntents11ContextItemP
13IntentHandler
$s26SiriPlaybackControlIntents15PatternExecuterP
_pSg
Iegg_
Iegn_
IeyBy_
_pGIegg_
Iegg_
Iegn_
IeyBy_
Iegg_
Iegn_
IeyBy_
GIegg_
GIegn_
_pGIegg_
_pGIegn_
z_Xx
SbIegy_
G13deviceContext_t
$s26SiriPlaybackControlIntents27HomeAutomationCapableIntentP
SDyS2SGIegn_
ySSG
26SiriPlaybackControlIntentsyHCg_G
26SiriPlaybackControlIntentsyHCg_G
26SiriPlaybackControlIntentsyHCg_G
ySS_SaySS_SbtGtG
ySS_SbtG
ySS_SaySSGtG
So8SAUISashC
So13SACardSnippetC
ySaySo9SAAceViewCG
_pGIegg_
$s26SiriPlaybackControlIntents18NLContextProvidingP
_pGIegg_
Sg_ABt
SdSg
SaySo13SABaseCommandCG
SaySo13SABaseCommandCGz_Xx
$s11SiriKitFlow013ConfirmIntentC8StrategyP
_pSg
$s26SiriPlaybackControlIntents15DialogProvidingP
_pGIegn_
SS4name_t
Iegg_
Iegn_
IeyBy_
Iegg_
Iegn_
IeyBy_
Iegg_
Iegg_
Iegn_
IeyBy_
IeyBy_
$s26SiriPlaybackControlIntents31MachineUtteranceProvidingIntentP
Iegg_
Iegg_
IeyBy_
IeyBy_
Sg_ABt
$s26SiriPlaybackControlIntents23AnalyticsServiceLoggingP
_pGIegg_
Iegg_
Iegn_
IeyBy_
yxGG
$s11SiriKitFlow019NeedsDisambiguationC0P
$s11SiriKitFlow016UnsupportedValueC8StrategyP
ScPSg
_pIegHrzo_
ytIeghHr_
yxq_G
G0R0_
G1R0_
So17OS_dispatch_queueC
Gz_Xx
So17OS_dispatch_groupC
_pGIegg_
Iegg_
Iegg_
Iegn_
IeyBy_
So24OS_dispatch_source_timer_pSg
So17OS_dispatch_queueCSg
So12RBSAssertionCSg
IeyBy_
$s26SiriPlaybackControlIntents21UserEntitiesProvidingP
_pGIegg_
$s26SiriPlaybackControlIntents21AudioSessionProvidingP
So14AVAudioSessionC
_pGIegg_
_pGIegg_
_pGIegg_
$s26SiriPlaybackControlIntents12RCHNamespaceP
_pGIegg_
$s26SiriPlaybackControlIntents24LanguageSelectableIntentP
Sg_ABt
$s26SiriPlaybackControlIntents27DeviceDisambiguatableIntentP
$s26SiriPlaybackControlIntents22DeviceSelectableIntentP
$s26SiriPlaybackControlIntents28SingleDeviceSelectableIntentP
$s26SiriPlaybackControlIntents23ControlsMediaPlayerTaskP
_pGIegg_
So16SASTTemplateItem_p
_yptG
$s26SiriPlaybackControlIntents20AppBundleIdentifiersP
_pSg
Iegg_
Iegn_
IeyBy_
Iegg_
Iegg_
Iegn_
IeyBy_
IeyBy_
_SStG
ySSypG
SS_ypt
_ypt
ySS_
ySSSo8NSNumberCG
ySSSaySS_SbtGG
ySSSaySSGG
$s26SiriPlaybackControlIntents24ControlsDialogParametersP
$s26SiriPlaybackControlIntents29SmartControlsDialogParametersP
$s26SiriPlaybackControlIntents31WholeHouseAudioDialogParametersP
$s26SiriPlaybackControlIntents18QuickStopUtilitiesP
Sg_ABt
GIegg_Iegg_
12NLIntentType
$s26SiriPlaybackControlIntents28CommonIntentResolutionResultP
ySi_
$s26SiriPlaybackControlIntents24MediaTypeProvidingIntentP
$s26SiriPlaybackControlIntents21ControlsFlowProvidingP
$s26SiriPlaybackControlIntents32SourceDestinationResolvingIntentP
_pGIegg_
$s26SiriPlaybackControlIntents21DeviceQueryableIntentP
_pGIegg_
$s26SiriPlaybackControlIntents27ConfirmationCapableNLIntentP
Iegg_
Iegn_
IeyBy_
Iegg_
Iegn_
IeyBy_
GIegg_
GIegn_
26SiriPlaybackControlIntentsyHCg_G
$s26SiriPlaybackControlIntents35HomeAutomationEntityProvidingIntentP
Sg_ABt
4info_
6resultt
4info_
6reasont
GSg11deviceUnits_SaySo22AFServiceDeviceContextCGSg8contexts
4infot
SDySSSo8NSObjectCG
So31AFCoreAnalyticsCrossDeviceEventC
$s26SiriPlaybackControlIntents16ContextProvidingP
ySnySiGG
ySSSgSay
ySSSgSay
Ieg_
ySSSgSay
ySSSgSay
ySdG
z_Xx
z_Xx
Iegg_
Iegn_
IeyBy_
$s26SiriPlaybackControlIntents19ControlsFlowFactoryP
GIegg_
GIegg_
GIegg_
ABSo24INIntentResolutionResultCSSSi
yABGIegg_Ieggggggyg_
GIegg_
ABSo24INIntentResolutionResultCSSSi
yABGIegg_Ieggggggyg_
GIegg_
GIegg_
GIegg_
GIegg_
GIegg_
GIegg_
$s26SiriPlaybackControlIntents13SharedUsoTaskP
So8INObjectC
8ItemType
$s26SiriPlaybackControlIntents21MetricsLoggableIntentP
Iegg_
Iegn_
IeyBy_
Iegg_
IeyBy_
$s26SiriPlaybackControlIntents24PauseMediaIntentHandlingP
$s26SiriPlaybackControlIntents25ResumeMediaIntentHandlingP
$s26SiriPlaybackControlIntents22SkipTimeIntentHandlingP
$s26SiriPlaybackControlIntents25SkipContentIntentHandlingP
$s26SiriPlaybackControlIntents30SetSubtitleStateIntentHandlingP
$s26SiriPlaybackControlIntents30SetAudioLanguageIntentHandlingP
$s26SiriPlaybackControlIntents28WhatDidTheySayIntentHandlingP
$s26SiriPlaybackControlIntents22SeekTimeIntentHandlingP
So30INTimeIntervalResolutionResultC
$s26SiriPlaybackControlIntents29SetShuffleStateIntentHandlingP
$s26SiriPlaybackControlIntents28SetRepeatStateIntentHandlingP
$s26SiriPlaybackControlIntents28GetVolumeLevelIntentHandlingP
$s26SiriPlaybackControlIntents28SetVolumeLevelIntentHandlingP
$s26SiriPlaybackControlIntents24AddSpeakerIntentHandlingP
$s26SiriPlaybackControlIntents25MoveSpeakerIntentHandlingP
$s26SiriPlaybackControlIntents33SetRoomDimmingStateIntentHandlingP
$s26SiriPlaybackControlIntents03SetB19SpeedIntentHandlingP
So24INDoubleResolutionResultC
So22INEnumResolutionResultC
So24INObjectResolutionResultC
_rawValue
RawValue
_ObjectiveCType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
sharedContextService
deviceSelector
deviceState
contextUtil
groupingUtil
analyticsService
aceService
localizationProvider
aceServiceHelper
unknown
noMatchingDevicesFound
success
disambiguate
failure
dialogProvider
checkWiFiHint
deviceState
dialogProvider
patternProvider
userDefaultsProvider
analyticsService
featureFlagProvider
playbackController
IntentType
IntentHandler
IntentResponseType
aceServiceInvoker
deviceState
dialogProvider
analyticsService
ExitValue
hasRoutes
hasThreeOrMoreRooms
isAllSpeakers
isInHere
firstSpeakerName
secondSpeakerName
firstRoom
secondRoom
otherRoomsCount
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
flowFactory
userDefaults
deviceSelector
accessoryVolumeController
deviceState
playbackController
userDefaultsProvider
audioSession
aceServiceHelper
handleResponseCode
boundedVolumeLevel
audio
subtitles
closedCaptioning
subtitlesForDeafHardHearing
previousAudio
enable
disable
getAttributeValue
verb
questionAttributes
viewOption
language
confirmationValue
listPosition
roomNames
homeName
zoneNames
accessoryNames
reference
serviceNames
serviceGroups
fromEntities
deviceQuantifier
destinationDeviceId
deviceType
placeHint
AllCases
RawValue
playbackController
deviceSelector
aceServiceHelper
deviceState
multiplier
music
podcast
playlist
musicVideo
song
audioBook
video
iTunesU
compilation
album
tvShow
show
radioShow
podcastStation
musicPlaylist
station
episode
extendedPlay
longPlay
single
genre
news
ringtone
sounds
movie
again
ending
toggle
enable
disable
play
pause
resume
stop
skip
previous
seek
skipForward
skipBackward
repeat
restart
shuffle
moveSpeaker
addSpeaker
removeSpeaker
noVerb
setPlaybackSpeedToValue
setPlaybackSpeedFaster
setPlaybackSpeedSlower
verb
boolSettingVerb
boolSettingState
skipInterval
attributes
confirmationValue
reference
listPosition
mediaType
mediaPlaybackSpeed
roomNames
homeName
zoneNames
accessoryNames
serviceNames
serviceGroups
fromEntities
deviceQuantifier
destinationDeviceId
deviceType
placeHint
AllCases
RawValue
analyticsServiceLogger
contextProvider
siriEnvironment
playbackController
confirmation
disambiguation
direct
deviceState
volumeControlsDialogProvider
analyticsService
IntentType
IntentResponseType
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
deviceState
dialogProviding
languageDialogProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
volumeControlsDialogProvider
deviceState
analyticsService
IntentType
IntentHandler
IntentResponseType
deviceState
dialogProvider
analyticsService
volumeControlsDialogProvider
IntentType
IntentResponseType
NLIntentType
allAvailable
matched
failure
autoSelectionAlreadyEnabled
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
alarm
timer
none
deviceId
proximity
hasFiringAlarm
hasFiringTimer
firingAlarmTimestamp
firingTimerTimestamp
hasRunningTimer
hasPlayingMedia
bargeInOverSiri
bargeInOverHomeAnnouncement
percent
referentialTo
aLittle
aLot
less
maximum
mean
minimum
more
mute
unmute
volume
voice
mediaType
read
verb
settingName
numericSettingValue
numericSettingState
numericSettingQualifier
settingAttribute
confirmationValue
roomNames
homeName
zoneNames
accessoryNames
reference
serviceNames
serviceGroups
fromEntities
deviceQuantifier
destinationDeviceId
deviceType
placeHint
AllCases
RawValue
languageDialogProvider
volumeControlsDialogProvider
testMode
deviceState
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
flowFactory
deviceSelector
playbackController
deviceState
aceServiceHelper
flowFactory
playbackController
contextProvider
contextUtil
settingsFlowProvider
mediaFlowProvider
mediaPlayerFlowProvider
deviceState
featureFlagProvider
quickStopUtil
analyticsService
deviceSelectingUtilFunc
aceService
$__lazy_storage_$_deviceSelectingUtil
handle
dontHandle
RawValue
mediaPlayer
media
settings
dialogProvider
deviceState
featureFlagProvider
playbackController
analyticsService
IntentType
IntentHandler
IntentResponseType
ItemType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
deviceState
dialogProvider
userDefaultsProvider
analyticsService
featureFlagProvider
playbackController
IntentType
IntentHandler
IntentResponseType
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
music
podcast
audiobook
iTunesU
radio
audio
video
AllCases
RawValue
testMode
testGlobals
globals
accessory
room
playbackController
deviceSelector
analyticsService
deviceState
aceServiceHelper
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
deviceState
languageDialogProvider
analyticsService
IntentType
IntentHandler
IntentResponseType
ItemType
deviceState
languageDialogProvider
controlsDialogProvider
analyticsService
IntentType
IntentHandler
IntentResponseType
deviceSelector
accessoryVolumeController
playbackController
deviceState
aceServiceHelper
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
wrappedFlow
shouldRedirectToServer
ExitValue
IntentType
deviceState
dialogProvider
patternProvider
featureFlagProvider
analyticsService
IntentType
IntentResponseType
deviceState
dialogProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
NLIntentType
NLContextProvider
volumeControlsDialogProvider
flowFactory
deviceSelector
aceService
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
deviceState
dialogProvider
userDefaultsProvider
playbackController
analyticsService
featureFlagProvider
IntentType
IntentHandler
IntentResponseType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
intent
playbackController
deviceSelector
timer
queue
assertion
analyticsService
deviceState
aceServiceHelper
deviceState
dialogProvider
analyticsService
IntentType
IntentHandler
IntentResponseType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
userDefaultsProvider
playbackController
analyticsService
featureFlagProvider
IntentType
IntentHandler
IntentResponseType
deviceState
aceService
dialogProvider
isIOS
isTV
isHomePodLocalOnly
requestedStateIsCurrentState
isSameRoomOnly
smartControlFarRooms
volumeLevel
speaker
preferSpeakerName
requestedVolumeLevel
isMediaPlaying
isIncreaseLevel
isDecreaseLevel
deviceState
audioSession
dialogProvider
isIOS
isTV
isHomePodLocalOnly
speaker
isSameRoomOnly
smartControlFarRooms
rooms
hasInHere
isEnable
isClosedCaptionRequest
isEnableSubtitles
deviceIsInferred
requestedLanguage
isOn
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
volumeControlsDialogProvider
deviceState
analyticsService
IntentType
IntentHandler
IntentResponseType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
deviceState
languageDialogProvider
analyticsService
IntentType
IntentHandler
IntentResponseType
dialogProvider
deviceState
featureFlagProvider
playbackController
analyticsService
IntentType
IntentHandler
IntentResponseType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
homePod
appleTV
macOS
watchOS
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
deviceState
dialogProvider
userDefaultsProvider
analyticsService
featureFlagProvider
playbackController
IntentType
IntentHandler
IntentResponseType
deviceState
dialogProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
NLIntentType
NLContextProvider
flowFactory
contextProvider
deviceState
playbackController
featureFlagProvider
name
unknown
languageDialogProvider
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
deviceState
dialogProvider
userDefaultsProvider
analyticsService
featureFlagProvider
playbackController
IntentType
IntentHandler
IntentResponseType
unsupportedOnPlatform
noMatchingDevicesFound
unknown
languageDialogProvider
aceServiceInvoker
deviceState
dialogProvider
analyticsService
aceServiceHelper
playbackController
ExitValue
ItemType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
cancel
AllCases
RawValue
deviceSelector
playbackController
deviceState
aceServiceHelper
intent
iPhone
iPad
homePod
appleTV
watch
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
deviceState
dialogProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
NLIntentType
NLContextProvider
dialogProvider
isIOS
isTV
isHomePodLocalOnly
speaker
isSameRoomOnly
smartControlFarRooms
requestedStateIsCurrentState
skipForwardDuration
skipBackwardDuration
playheadPosition
shuffleEnabled
repeatMode
isMultipleSpeakers
deviceType
speed
speakerOperation
isEnableShuffle
rooms
isShuffleEnabled
hasInHere
isSkipToPrevious
isSkipPrevious
isFastForward
isEnableRepeat
isSourceMissing
isDestinationMissing
appName
secs
none
phone
watch
television
homepod
unknown
addSpeaker
moveSpeaker
RawValue
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
patternExecuter
bundleID
isIOS
isTV
isHomePodLocalOnly
speaker
requestedStateIsCurrentState
isSameRoomOnly
smartControlFarRooms
viewData
showVisual
appBundleID
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
deviceResolutionAnalytics
analyticsService
deviceState
localizationProvider
autoResumableProximitiesInLongWindow
autoResumableProximitiesInShortWindow
groupControlDevice
roomCount
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
deviceState
dialogProvider
userDefaultsProvider
playbackController
analyticsService
featureFlagProvider
IntentType
IntentHandler
IntentResponseType
playbackController
deviceSelector
analyticsService
deviceState
aceServiceHelper
intent
deviceContext
featureFlagProvider
ItemType
playbackController
deviceSelector
analyticsService
deviceState
aceServiceHelper
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
renderedText
setRenderedText:
appId
setAppId:
callbacks
setCallbacks:
requiresResponse
supportsSecureCoding
aceId
setAceId:
refId
setRefId:
isEqual:
hash
superclass
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
description
debugDescription
encodeWithCoder:
initWithCoder:
init
initWithDictionary:
initWithDictionary:context:
dictionary
properties
encodedClassName
groupIdentifier
copyWithZone:
mutableCopyWithZone:
routeId
context
proximity
displayableName
roomName
initWithChoices:
initWithTask:
setItems:
setTitle:
setUtterance:
setCommands:
setDisambiguated:
setDevices:
identifier
direction
setDevice:
mediaRouteIdentifier
serializedContextByKey
initWithSerializedBackingStore:
state
unsignedLongLongValue
playbackState
hasFiringTimers
timersByID
mostRecentFiringTimer
firedDate
hasFiringAlarms
mostRecentFiringAlarm
initWithIdentifier:displayString:
setProximity:
nowPlayingTimestamp
setNowPlayingTimestamp:
setNowPlayingState:
mediaType
setNowPlayingMediaType:
setRouteId:
setGroupId:
isProxyGroupPlayer
setSilentPrimary:
type
disambiguationItems
groupLeader
devices
groupId
setGroupLeader:
nowPlayingState
nowPlayingMediaType
setExcludeGroup:
groupName
streams
setType:
setIncludesTVs:
setStreams:
deviceContext
isPreResolved
deviceQueries
setContext:
setIsEndpoint:
setRoomName:
JSONObjectWithData:options:error:
patternId
boolForKey:
name
referenceString
removeObjectForKey:
objectForKey:
setFloat:forKey:
setInteger:forKey:
initWithSuiteName:
setUserActivity:
volumeLevel
volumeSettingType
volumeSettingState
resolvedVolumeOutput
floatValue
currentVolumeOutput
unsupported
dealloc
handleSetVolumeLevel:completion:
confirmSetVolumeLevel:completion:
resolveDevicesForSetVolumeLevel:withCompletion:
resolveVolumeLevelForSetVolumeLevel:withCompletion:
.cxx_destruct
setVolumeSettingType:
volumeSettingValue
volumeSettingUnit
setCurrentVolumeOutput:
needsValue
setResolvedVolumeOutput:
resolutionResultConfirmationRequiredWithItemToConfirm:
setCurrentVolumeLevel:
setVolumeLevel:
unsupportedReason
playbackSpeedType
speedMagnitude
successWithResolvedValue:
handleSetPlaybackSpeed:completion:
confirmSetPlaybackSpeed:completion:
resolveSpeedMagnitudeForSetPlaybackSpeed:withCompletion:
resolvePlaybackSpeedTypeForSetPlaybackSpeed:withCompletion:
resolveDevicesForSetPlaybackSpeed:withCompletion:
typeName
confirmed
disambiguated
initWithReference:
handleSkipContent:completion:
resolveDevicesForSkipContent:withCompletion:
confirmSkipContent:completion:
notRequired
languageIdentifier
languageTag
handleSetRepeatState:completion:
resolveDevicesForSetRepeatState:withCompletion:
confirmSetRepeatState:completion:
repeatState
setMediaType:
setDeviceQueries:
integerValue
runSiriKitExecutorCommandWithContext:payload:
wrapCommandInStartLocalRequest:
initWithOfferedAct:
autoupdatingCurrentLocale
duration
zoneNames
mediaSystemId
isEndpoint
skipConfirmation
setZoneNames:
setName:
setCurrentHome:
setCurrentRoom:
setIsDeviceSelectedUsingContext:
setMediaSystemId:
setIsPreResolved:
setTaskType:
setIsWholeHouseAudio:
setWholeHouseAudioDestinationContext:
setMediaPlayerContext:
setEligibleDeviceCount:
enable
synchronize
arrayForKey:
bundleForClass:
setDirection:
handleSkipTime:completion:
resolveDurationForSkipTime:withCompletion:
resolveDevicesForSkipTime:withCompletion:
confirmSkipTime:completion:
handleAddSpeaker:completion:
resolveSourceForAddSpeaker:withCompletion:
resolveDestinationsForAddSpeaker:withCompletion:
confirmAddSpeaker:completion:
source
deviceQuantifierString
destinations
setCentered:
setAction:
setText:
setDecoratedLabel:
commands
setConfirmCommands:
setDenyCommands:
label
setConfirmText:
setDenyText:
setCancelTrigger:
setAllConfirmationOptions:
setLabel:
setIconType:
setDeviceContext:
resolutionResultCode
resolvedValue
mediaSearch
privatePlayMediaIntentData
isAmbiguousPlay
setPlaybackRouteUniqueIdentifier:
setPlaybackRouteUniqueIdentifierIsEncrypted:
setApplicationBundleIdentifier:
setSash:
setViewId:
viewId
correspondingSessionID
setCorrespondingSessionID:
volumeSettingQualifier
settingAttribute
isDeviceSelectedUsingContext
numberOfAffectedRooms
setShuffleState:
includesTVs
excludeGroup
setGroupName:
handleResumeMedia:completion:
resolveDevicesForResumeMedia:withCompletion:
confirmResumeMedia:completion:
setTargetBundleIdentifier:
device
handleSetAudioLanguage:completion:
resolveDeviceForSetAudioLanguage:withCompletion:
resolveLanguageForSetAudioLanguage:withCompletion:
confirmSetAudioLanguage:completion:
language
handleGetVolumeLevel:completion:
resolveDeviceForGetVolumeLevel:withCompletion:
confirmGetVolumeLevel:completion:
isActive
setLanguageTag:
setLanguageIdentifier:
setIsActive:
setIsDirectInvocation:
handleSetShuffleState:completion:
resolveDevicesForSetShuffleState:withCompletion:
confirmSetShuffleState:completion:
shuffleState
setLanguage:
resolveDeviceForWhatDidTheySay:withCompletion:
handleWhatDidTheySay:completion:
confirmWhatDidTheySay:completion:
currentProcess
attributeWithDomain:name:
initWithExplanation:target:attributes:
isValid
acquireWithInvalidationHandler:
invalidate
startTime
playheadPosition
currentRoute
outputs
portType
reference
sortOrder
albumName
mediaName
genreNames
artistName
moodNames
releaseDate
mediaIdentifier
setConfirmed:
currentVolumeLevel
setStartTime:
doubleForKey:
setEnable:
silentPrimary
setPlayheadPosition:
setIsSkipToEnd:
setShouldStartPlaybackAfterSeek:
setTemplateItems:
initWithIdentifier:
setUserData:
handleSetSubtitleState:completion:
resolveDeviceForSetSubtitleState:withCompletion:
resolveLanguageForSetSubtitleState:withCompletion:
confirmSetSubtitleState:completion:
setDuration:
setVolumeSettingState:
setVolumeSettingQualifier:
setVolumeSettingUnit:
setSettingAttribute:
setVolumeSettingValue:
setRepeatState:
handleMoveSpeaker:completion:
resolveSourceForMoveSpeaker:withCompletion:
resolveDestinationsForMoveSpeaker:withCompletion:
confirmMoveSpeaker:completion:
zoneName
accessoryName
serviceName
serviceGroup
fromEntity
deviceTypeString
placeHintString
setDeviceQuantifierString:
setDeviceTypeString:
setZoneName:
setAccessoryName:
setServiceName:
setServiceGroup:
initWithBool:
setFromEntity:
setPlaceHintString:
setReferenceString:
sharedLoggingService
logToCoreAnalyticsCrossDeviceRequestEvent:
initWithNearbyDevicesLoggingID:
addCoreAnalyticsDeviceTargetedWithContextIdentifier:commandResultDescription:
sharedAnalytics
logEventWithType:context:
setSkipConfirmation:
setDisplayableName:
handlePauseMedia:completion:
resolveDevicesForPauseMedia:withCompletion:
confirmPauseMedia:completion:
setPlaybackSpeedType:
setSpeedMagnitude:
isSkipToEnd
successWithResolvedTimeInterval:
handleSeekTime:completion:
resolveDevicesForSeekTime:withCompletion:
resolvePlayheadPositionForSeekTime:withCompletion:
confirmSeekTime:completion:
shouldStartPlaybackAfterSeek
initWithIdentifier:backingStore:
initWithDomain:verb:parametersByName:
initWithBackingStore:
initWithPropertiesByName:
unsupportedWithReason:
initWithJSONDictionary:forIntent:
isDirectInvocation
code
setCode:
initWithCode:userActivity:
unsupportedForReason:
targetBundleIdentifier
setDestinations:
setSource:
roomDimmingState
setRoomDimmingState:
handleSetRoomDimmingState:completion:
confirmSetRoomDimmingState:completion:
confirmationRequiredWithValueToConfirm:
successWithResolvedDirection:
confirmationRequiredWithDirectionToConfirm:
successWithResolvedRepeatState:
confirmationRequiredWithRepeatStateToConfirm:
successWithResolvedShuffleState:
confirmationRequiredWithShuffleStateToConfirm:
successWithResolvedSubtitleState:
confirmationRequiredWithSubtitleStateToConfirm:
successWithResolvedDeviceProximity:
confirmationRequiredWithDeviceProximityToConfirm:
successWithResolvedNowPlayingState:
confirmationRequiredWithNowPlayingStateToConfirm:
successWithResolvedSubtitleType:
confirmationRequiredWithSubtitleTypeToConfirm:
successWithResolvedNowPlayingMediaType:
confirmationRequiredWithNowPlayingMediaTypeToConfirm:
successWithResolvedNLMediaType:
confirmationRequiredWithNLMediaTypeToConfirm:
successWithResolvedVolumeSettingState:
confirmationRequiredWithVolumeSettingStateToConfirm:
successWithResolvedVolumeSettingUnit:
confirmationRequiredWithVolumeSettingUnitToConfirm:
successWithResolvedVolumeSettingAttribute:
confirmationRequiredWithVolumeSettingAttributeToConfirm:
successWithResolvedVolumeSettingQualifier:
confirmationRequiredWithVolumeSettingQualifierToConfirm:
successWithResolvedVolumeSettingType:
confirmationRequiredWithVolumeSettingTypeToConfirm:
successWithResolvedGroupType:
confirmationRequiredWithGroupTypeToConfirm:
successWithResolvedRoomDimmingState:
confirmationRequiredWithRoomDimmingStateToConfirm:
successWithResolvedPlaybackSpeedType:
confirmationRequiredWithPlaybackSpeedTypeToConfirm:
successWithResolvedObject:
disambiguationWithObjectsToDisambiguate:
confirmationRequiredWithObjectToConfirm:
initWithIdentifier:displayString:pronunciationHint:
currentHome
currentRoom
successWithResolvedDevice:
disambiguationWithDevicesToDisambiguate:
confirmationRequiredWithDeviceToConfirm:
setNumberOfAffectedRooms:
successWithResolvedSignedDuration:
disambiguationWithSignedDurationsToDisambiguate:
confirmationRequiredWithSignedDurationToConfirm:
successWithResolvedDeviceContext:
disambiguationWithDeviceContextsToDisambiguate:
confirmationRequiredWithDeviceContextToConfirm:
successWithResolvedLanguageOption:
disambiguationWithLanguageOptionsToDisambiguate:
confirmationRequiredWithLanguageOptionToConfirm:
successWithResolvedDeviceQuery:
disambiguationWithDeviceQuerysToDisambiguate:
confirmationRequiredWithDeviceQueryToConfirm:
successWithResolvedVolumeLevel:
disambiguationWithVolumeLevelsToDisambiguate:
confirmationRequiredWithVolumeLevelToConfirm:
successWithResolvedDeviceGroup:
disambiguationWithDeviceGroupsToDisambiguate:
confirmationRequiredWithDeviceGroupToConfirm:
successWithResolvedMediaStream:
disambiguationWithMediaStreamsToDisambiguate:
confirmationRequiredWithMediaStreamToConfirm:
successWithResolvedPlaybackSpeed:
disambiguationWithPlaybackSpeedsToDisambiguate:
confirmationRequiredWithPlaybackSpeedToConfirm:
first
second
third
fourth
fifth
sixth
seventh
eighth
ninth
tenth
eleventh
twelfth
thirteenth
fourteenth
fifteenth
sixteenth
seventeenth
eighteenth
nineteenth
twentieth
twenty first
twenty second
twenty third
twenty fourth
twenty fifth
first
second
third
fourth
fifth
sixth
seventh
eighth
ninth
tenth
eleventh
twelfth
thirteenth
fourteenth
fifteenth
sixteenth
seventeenth
eighteenth
nineteenth
twentieth
twenty first
twenty second
twenty third
twenty fourth
twenty fifth
first
second
third
fourth
fifth
sixth
seventh
eighth
ninth
tenth
eleventh
twelfth
thirteenth
fourteenth
fifteenth
sixteenth
seventeenth
eighteenth
nineteenth
twentieth
twenty first
twenty second
twenty third
twenty fourth
twenty fifth
enableSetting
disableSetting
setNumber
increaseBy
decreaseBy
summarise
enable
disable
noVerb
mediaReference
@(#)PROGRAM:SiriPlaybackControlIntents  PROJECT:SiriPlaybackControls-1
?__C
AFAnalyticsEventType
Port
NAVAudioSessionPort
FLOWSchemaFLOWMediaPlayerTaskType
SiriPlaybackControlIntents
ControlsMediaTask
SkipTimeFlowStrategy
$,17=ELUZ`cz
"(/9@HPZcnu
ResumeMediaDeviceDisambiguationStrategy
DeviceContextProvider
DefaultConfirmIntentStrategy
NLIntentType NLContextProvider
DeviceDisambiguationStrategy
NLIntentType NLContextProvider
DeviceSelectingUtil
DeviceSelectingError
SmartSelectionResult
QuickStopDialogProvider
NothingToStopParameters
CodingKeys
ControlsSettingsTask
PauseMediaHandleIntentStrategy
QuickStopLocalStoppedFlow
DeviceNLContextProviding
Speaker
CodingKeys
SetPlaybackSpeedFlowStrategy
PauseMediaDeviceDisambiguationStrategy
SettingsFlowProvider
UserDefaultsProvider
UserDefaultsProviderImpl
SetVolumeLevelIntentHandler
BoundedResult
MediaVerb
MediaQuestionAttributes
MediaViewOption
MediaIntent
SetPlaybackSpeedUnsupportedValueStrategy
SetPlaybackSpeedIntentHandler
$,17=ELUZbe
#)16;?GPY_ehkpuy
MediaPlayerVerb
MediaPlayerBoolSettingVerb
MediaPlayerBoolSettingState
MediaPlayerAttributes
MediaType
PlaybackSpeedUnit
MediaPlayerIntent
AnalyticsService
AnalyticsServiceImpl
SelectedBy
ContextIntent
VolumeLevelNeedsValueStrategy
SkipContentIntentHandler
LanguageDisambiguationStrategy
shuffle
repeat
SetRepeatStateIntentHandler
ResumeMediaFlowStrategy
SetVolumeLevelHandleIntentStrategy
SmartSelectableIntent
VolumeLevelNeedsConfirmationStrategy
MatchedLanguageResult
SkipTimeDeviceDisambiguationStrategy
ConfirmableIntent
FiringItem
QuickStopContext
SettingVerb
FloatSettingName
NumericSettingState
NumericSettingQualifier
SettingAttribute
NumericSettingUnit
SettingsIntent
ContextItem
SetSubtitleStateUnsupportedValueStrategy
InProcessHandlingStrategy
IntentHandler
SetVolumeLevelUnsupportedValueStrategy
SimulatedContextProvider
PatternExecuter
BasePatternExecuter
SkipTimeIntentHandler
MoveSpeakerFlowStrategy
HrPRT
MediaPlayerFlowProvider
AddSpeakerIntentHandler
ControlsFlowProvider
DirectInvocationIdentifier
shouldHandleAmbiguousRequestResult
HomeAutomationCapableIntent
HomeAutomationNodes
Domain
AddSpeakerHandleIntentStrategy
MoveSpeakerUnsupportedValueStrategy
MediaDeviceNLContextProvider
GetVolumeLevelFlowStrategy
SkipContentDeviceDisambiguationStrategy
ResumeMediaHandleIntentStrategy
ResumeMediaConfirmIntentStrategy
G&,39>C
MRMediaType
DialogProviding
BaseDialogProvider
WholeHouseAudioDestination
ResumeMediaIntentHandler
SetRepeatStateConfirmIntentStrategy
SetAudioLanguageIntentHandler
SetAudioLanguageHandleIntentStrategy
LanguageNLContextProvider
WhatDidTheySayHandleIntentStrategy
MachineUtteranceProvidingIntent
GetVolumeLevelIntentHandler
AnalyticsServiceLogging
PauseMediaFlowStrategy
SetShuffleStateIntentHandler
NeedsDisambiguationWrapperFlow
CommonMediaUnsupportedValueStrategy
SetAudioLanguageConfirmIntentStrategy
GetVolumeLevelUnsupportedValueStrategy
MediaFlowProvider
GroupingUtil
SetRepeatStateDeviceDisambiguationStrategy
SkipTimeHandleIntentStrategy
SetShuffleStateFlowStrategy
SettingNLv3Intent
WhatDidTheySayIntentHandler
UserEntitiesProviding
SetPlaybackSpeedHandleIntentStrategy
SeekTimeFlowStrategy
SeekTimeHandleIntentStrategy
AceServiceHelper
VolumeControlsDialogProvider
SetVolumeLevelErrorParameters
SetVolumeParameters
GetVolumeLevelParams
CodingKeys
AudioSessionProviding
AudioSessionProvider
LanguageControlsDialogProvider
SubtitleLanguageNotAvailableParameters
SubtitleSetSuccessfullyParameters
SubtitleFailedToToggleParameters
SubtitleAlreadyOnParameters
AudioLanguageNotAvailableParameters
NoRelevantDeviceParameters
DeviceDisambiguationAudioLanguageParameters
ConfirmWhatDidTheySayParameters
IntentConfirmationSetSubtitleStateParams
DeviceDisambiguationSubtitlesParameters
DeviceDisambiguationWhatDidTheySayParameters
IntentConfirmationSetAudioLanguageParams
WhatDidTheySayHandledParameters
AudioSetSuccessfullyParameters
CodingKeys
SkipTimeConfirmIntentStrategy
SetVolumeLevelFlowStrategy
GetVolumeLevelHandleIntentStrategy
WhatDidTheySayFlowStrategy
SkipContentFlowStrategy
RCHNamespace
AddSpeakerFlowStrategy
LanguageSelectableIntent
WhatDidTheySayDeviceDisambiguationStrategy
SeekTimeUnsupportedValueStrategy
SetSubtitleStateHandleIntentStrategy
DeviceDisambiguatableIntent
DeviceSelectableIntent
SingleDeviceSelectableIntent
O-6;@H
MoveSpeakerHandleIntentStrategy
play
addSpeaker
ControlsMediaPlayerTask
SetSubtitleStateFlowStrategy
PauseMediaConfirmIntentStrategy
AppBundleIdentifiers
MusicBundleIds
PodcastsBundleIds
AudioBooksBundleIds
AddSpeakerUnsupportedValueStrategy
SetSubtitleStateDeviceDisambiguationStrategy
SetSubtitleStateIntentHandler
SetShuffleStateHandleIntentStrategy
.music
.podcast
.playlis
.musicVi
.song
.audioBo
.video
.iTunesU
.compila
.album
.radioSh
.show
.tvShow
.radioSt
.podcast
.musicPl
.station
.episode
.single
.genre
.news
.rington
.sounds
.movie
.unknown
podcast
playlist
musicVid
song
audioBoo
video
iTunesU
compilat
album
radioSho
show
tvShow
radioSta
podcastS
musicPla
station
episode
single
genre
news
ringtone
sounds
movie
SetSubtitleStateConfirmIntentStrategy
ControlsDialogParameters
SmartControlsDialogParameters
WholeHouseAudioDialogParameters
QuickStopUtilities
QuickStopUtil
Name
Signpost
ControlsError
SetAudioLanguageUnsupportedValueStrategy
DefaultNeedsConfirmationStrategy
NLIntentType
SetShuffleStateDeviceDisambiguationStrategy
SetRepeatStateHandleIntentStrategy
CommonIntentResolutionResult
CommonUnsupportedReason
MediaTypeProvidingIntent
WhatDidTheySayUnsupportedValueStrategy
QuickStopNothingToStopFlow
ControlsFlowProviding
MediaPlayerDeviceNLContextProvider
SourceDestinationResolvingIntent
SetAudioLanguageFlowStrategy
DeviceQueryableIntent
SetRepeatStateFlowStrategy
SeekTimeDeviceDisambiguationStrategy
ConfirmationCapableNLIntent
ConfirmationStateValue
MoveSpeakerIntentHandler
MediaPlayerNLv3Intent
MobileGestalt
DeviceType
SeekTimeConfirmIntentStrategy
WhatDidTheySayConfirmIntentStrategy
DialogProvider
PausedParameters
DeviceDisambiguationPauseParams
IntentConfirmationPauseParams
DeviceDisambiguationResumeParams
IntentConfirmationResumeParams
DeviceDisambiguationSeekTimeParams
IntentConfirmationSeekParams
SpeakerFailedOperationParameters
NoSpeakerFoundParameters
RepeatErrorParameter
DeviceDisambiguationRepeatParams
IntentConfirmationRepeatParams
DeviceDisambiguationSkipTimeParams
IntentConfirmationSkipTimeParams
DeviceDisambiguationSkipContentParams
IntentConfirmationSkipContentParams
DeviceDisambiguationShuffleStateParams
IntentConfirmationShuffleParams
CannotSkipLimitExceededParameters
SeekErrorParameters
ShuffleErrorParameters
CannotSkipAdvertisementParameters
AddSpeakerParameters
UnsupportedDestinationSpeakerParameters
SetPlaybackSpeedToValueParameters
UnsupportedOnPlatformParameters
SkipErrorParameters
SkipToPreviousParameters
SkipToNextParameters
ToggleRepeatParameters
ToggleShuffleParameters
SpeakerMoveParameters
SeekParameters
SkipBackwardParameters
SkipForwardParameters
ResumeParameters
CodingKeys
SpeakerOperation
DialogDeviceType
RepeatMode
Duration
HomeAutomationEntityProvidingIntent
SetShuffleStateConfirmIntentStrategy
 (.5
PatternProvider
PausedParameters
ViewData
CodingKeys
SkipContentConfirmIntentStrategy
AnalyticsServiceLogger
ContextProviding
ContextUtil
DeviceGroup
SetAudioLanguageDeviceDisambiguationStrategy
SkipContentHandleIntentStrategy
PauseMediaIntentHandler
ControlsFlowFactory
ControlsFlowFactoryImpl
MediaNLv3Intent
RequestContext
SharedUsoTask
NLContextProviding
ItemType
MetricsLoggableIntent
SettingNLContextProvider
SeekTimeIntentHandler
PauseMediaIntent
PauseMediaIntentResponseCode
PauseMediaIntentResponse
PauseMediaDevicesUnsupportedReason
PauseMediaDevicesResolutionResult
ResumeMediaIntent
ResumeMediaIntentResponseCode
ResumeMediaIntentResponse
ResumeMediaDevicesUnsupportedReason
ResumeMediaDevicesResolutionResult
SkipTimeIntent
SkipTimeIntentResponseCode
SkipTimeIntentResponse
SkipTimeDevicesUnsupportedReason
SkipTimeDevicesResolutionResult
SkipContentIntent
SkipContentIntentResponseCode
SkipContentIntentResponse
SkipContentDevicesUnsupportedReason
SkipContentDevicesResolutionResult
SetSubtitleStateIntent
SetSubtitleStateIntentResponseCode
SetSubtitleStateIntentResponse
SetSubtitleStateDeviceUnsupportedReason
SetSubtitleStateDeviceResolutionResult
SetSubtitleStateLanguageUnsupportedReason
SetSubtitleStateLanguageResolutionResult
SetAudioLanguageIntent
SetAudioLanguageIntentResponseCode
SetAudioLanguageIntentResponse
SetAudioLanguageDeviceUnsupportedReason
SetAudioLanguageDeviceResolutionResult
SetAudioLanguageLanguageUnsupportedReason
SetAudioLanguageLanguageResolutionResult
WhatDidTheySayIntent
WhatDidTheySayIntentResponseCode
WhatDidTheySayIntentResponse
WhatDidTheySayDeviceUnsupportedReason
WhatDidTheySayDeviceResolutionResult
SeekTimeIntent
SeekTimeIntentResponseCode
SeekTimeIntentResponse
SeekTimeDevicesUnsupportedReason
SeekTimeDevicesResolutionResult
SeekTimePlayheadPositionUnsupportedReason
SeekTimePlayheadPositionResolutionResult
SetShuffleStateIntent
SetShuffleStateIntentResponseCode
SetShuffleStateIntentResponse
SetShuffleStateDevicesUnsupportedReason
SetShuffleStateDevicesResolutionResult
SetRepeatStateIntent
SetRepeatStateIntentResponseCode
SetRepeatStateIntentResponse
SetRepeatStateDevicesUnsupportedReason
SetRepeatStateDevicesResolutionResult
GetVolumeLevelIntent
GetVolumeLevelIntentResponseCode
GetVolumeLevelIntentResponse
GetVolumeLevelDeviceUnsupportedReason
GetVolumeLevelDeviceResolutionResult
SetVolumeLevelIntent
SetVolumeLevelIntentResponseCode
SetVolumeLevelIntentResponse
SetVolumeLevelDevicesUnsupportedReason
SetVolumeLevelDevicesResolutionResult
SetVolumeLevelVolumeLevelUnsupportedReason
SetVolumeLevelVolumeLevelResolutionResult
AddSpeakerIntent
AddSpeakerIntentResponseCode
AddSpeakerIntentResponse
AddSpeakerSourceUnsupportedReason
AddSpeakerSourceResolutionResult
AddSpeakerDestinationsUnsupportedReason
AddSpeakerDestinationsResolutionResult
MoveSpeakerIntent
MoveSpeakerIntentResponseCode
MoveSpeakerIntentResponse
MoveSpeakerSourceUnsupportedReason
MoveSpeakerSourceResolutionResult
MoveSpeakerDestinationsUnsupportedReason
MoveSpeakerDestinationsResolutionResult
SetRoomDimmingStateIntent
SetRoomDimmingStateIntentResponseCode
SetRoomDimmingStateIntentResponse
SetPlaybackSpeedIntent
SetPlaybackSpeedIntentResponseCode
SetPlaybackSpeedIntentResponse
SetPlaybackSpeedDevicesUnsupportedReason
SetPlaybackSpeedDevicesResolutionResult
SetPlaybackSpeedSpeedMagnitudeUnsupportedReason
SetPlaybackSpeedSpeedMagnitudeResolutionResult
Direction
DirectionResolutionResult
RepeatState
RepeatStateResolutionResult
ShuffleState
ShuffleStateResolutionResult
SubtitleState
SubtitleStateResolutionResult
DeviceProximity
DeviceProximityResolutionResult
NowPlayingState
NowPlayingStateResolutionResult
SubtitleType
SubtitleTypeResolutionResult
NowPlayingMediaType
NowPlayingMediaTypeResolutionResult
NLMediaType
NLMediaTypeResolutionResult
VolumeSettingState
VolumeSettingStateResolutionResult
VolumeSettingUnit
VolumeSettingUnitResolutionResult
VolumeSettingAttribute
VolumeSettingAttributeResolutionResult
VolumeSettingQualifier
VolumeSettingQualifierResolutionResult
VolumeSettingType
VolumeSettingTypeResolutionResult
GroupType
GroupTypeResolutionResult
RoomDimmingState
RoomDimmingStateResolutionResult
PlaybackSpeedType
PlaybackSpeedTypeResolutionResult
Device
DeviceResolutionResult
SignedDuration
SignedDurationResolutionResult
DeviceContext
DeviceContextResolutionResult
LanguageOption
LanguageOptionResolutionResult
DeviceQuery
DeviceQueryResolutionResult
VolumeLevel
VolumeLevelResolutionResult
DeviceGroup
DeviceGroupResolutionResult
MediaStream
MediaStreamResolutionResult
PlaybackSpeed
PlaybackSpeedResolutionResult
slower
faster
speed
shuffled
repeated
subtitles
subtitlesForDeafHardHearing
audio
mute
unmute
volume
voice
playbackSpeed
play
pause
resume
stop
skip
previous
seek
skipForward
skipBackward
repeat
restart
shuffle
moveSpeaker
addSpeaker
removeSpeaker
noVerb
setPlaybackSpeedToValue
setPlaybackSpeedFaster
setPlaybackSpeedSlower
cancel
MRMediaRemoteMediaTypeMusic
MRMediaRemoteMediaTypePodcast
MRMediaRemoteMediaTypeAudioBook
MRMediaRemoteMediaTypeITunesU
kMRMediaRemoteMediaTypeITunesRadio
kMRMediaRemoteNowPlayingInfoTypeAudio
kMRMediaRemoteNowPlayingInfoTypeVideo
enable
disable
get attribute value
read
previous audio
music
podcast
playlist
musicVideo
song
audioBook
video
iTunesU
compilation
album
tvShow
show
radioShow
podcastStation
musicPlaylist
station
episode
single
genre
news
ringtone
sounds
movie
toggle
again
ending
multiplier
less
maximum
mean
minimum
more
percent
a_little
a_lot
referentialTo
increaseByMeasurement
decreaseByMeasurement
mediaPlayer
media
settings
com.apple.siri.nl.Media
com.apple.siri.nl.HomeAutomationRoom
com.apple.siri.nl.HomeAutomationPlaceHint
com.apple.siri.nl.HomeAutomationDeviceQuantifier
com.apple.siri.nl.MediaConfirmation
com.apple.siri.nl.MediaConfirmation.Value.CANCEL
com.apple.siri.nl.MediaConfirmation.Value.YES
com.apple.siri.nl.MediaConfirmation.Value.NO
com.apple.siri.nl.MediaReference
com.apple.siri.nl.MediaLanguage
com.apple.siri.nl.MediaViewOption
com.apple.siri.nl.MediaPlayerReference
com.apple.siri.nl.MediaPlayerConfirmation
com.apple.siri.nl.MediaPlayerConfirmation.Value.CANCEL
com.apple.siri.nl.MediaPlayerConfirmation.Value.YES
com.apple.siri.nl.MediaPlayerConfirmation.Value.NO
none
phone
watch
television
homepod
unknown
com.apple.siri.nl.FloatSettingValue
com.apple.siri.nl.FloatSettingState
com.apple.siri.nl.FloatSettingQualifier
com.apple.siri.nl.SettingAttribute
com.apple.siri.nl.SettingConfirmation
com.apple.siri.nl.FloatSettingReference
com.apple.siri.nl.SettingConfirmation.Value.CANCEL
com.apple.siri.nl.SettingConfirmation.Value.YES
com.apple.siri.nl.SettingConfirmation.Value.NO
OS_dispatch_source_timer
SIRINLUSystemDialogAct
v24@0:8@16
renderedText
T@"NSString",N,C
@"NSString"16@0:8
v24@0:8@"NSString"16
SIRINLUUserDialogAct
SAServerBoundCommand
SAClientBoundCommand
appId
callbacks
T@"NSArray",N,C
@"NSArray"16@0:8
v24@0:8@"NSArray"16
SASTTemplateItem
OS_dispatch_source
NSSecureCoding
supportsSecureCoding
TB,N,R
SAAceCommand
aceId
refId
SAAceReferable
SAAceSerializable
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
B24@0:8@"Protocol"16
NSCoding
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
AceObject
@24@0:8@"NSDictionary"16
@32@0:8@"NSDictionary"16@"<AceContext>"24
@"NSMutableDictionary"16@0:8
NSCopying
@24@0:8^{_NSZone=}16
NSMutableCopying
_TtC26SiriPlaybackControlIntents20SkipTimeFlowStrategy
analyticsService
Received unexpected parse: %s
SkipTimeFlowStrategy.makeIntentFromParse() called
Finished creating intent from parse
makeIntentFromParseQueue
Received no valid parse %s
SkipTimeFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents39ResumeMediaDeviceDisambiguationStrategy
featureFlagProvider
encryptionProvider
DeviceDisambiguationStrategy.makePromptForDisambiguation() called
ResumeMediaDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
DeviceDisambiguationStrategy.makeContextUpdate() called
destinationDeviceId
com.apple.siri.nl.DestinationDeviceId
homeAutomationRoom
homeAutomationPlaceHint
homeAutomationDeviceQuantifier
encodeRouteIds
Encoding routeIds Using encryption provider: %s
enableTelemetry=YES
Including SystemGaveOptions in context update: %s, NLUSysteamDialogAct: %s
Making disambiguation context with hints: %s and task builders: %s
uso disambiguate among: %s
Unable to serialize protoGraph: %s
Unable to map graph into protoGraph: %s
SiriPlaybackControlIntents/NLContextProviding.swift
Descriptive hint was not built with an id value or display value
Adding machine utterance: %s as nlInput to the context update
Creating disambiguation view with devices: %s
Unable to get intent type from parse
Unable to match the user's selection to any items we presented in the disambiguation list
Found matching device from previous request, injecting it in the intent: %@
Found list position index: (%s) in the intent. Mapping the user's selection to a device from the disambiguation list
Too many devices matched. Returning an error
Matching devices: %s
Could not match any devices. Returning an error
Found homeAutomation nodes in the intent. Mapping the user's selection to a device from the disambiguation list
Found device using destination device id: %@
DeviceDisambiguationStrategy.parseDisambiguationResult() called
One or less devices found. Matching items: %s
User did not specify device type. Cannot filter down the devices any further. Returning matching devices: %s
Multiple devices matched. Narrowing down using device capabilities: %s
Named entities from intent: %s, disambiguation items: %s
User disambiguation selection is local device
User disambiguation selection is everywehere
Unable to find matching item -- List position out of bounds
Matching item from list: %s at index: %ld is: %@
Unable to understand the user's response to the disambiguation prompt. Ignoring action
Found destination device ID in intent. Handling...
Got a uso parse as a response to the disambiguation prompt, but it doesn't have any homeAutomation nodes or list positions. Ignoring...
Got a valid uso parse as a response to the disambiguation prompt with task: %s. Handling...
Found task: %s.
Intent indicates we should cancel out of disambiguation
DeviceDisambiguationStrategy.actionForInput() called
PlaybackControls#ConfirmationCancelled
DeviceDisambiguationStrategy.makeFlowCancelledResponse()
Intent is not a machineUtteranceProvidingIntent. Returning the contextUpdate as is without providing an NL input
mapDevicesToAFServiceDeviceContext
Got nil context array
fetchQuickStopContext
Returning %ld QuickStop context(s): %@
Got QuickStop context for %ld devices
Mapping device context %ld: %@
fetchContext
Returning %ld context(s): %@
Got mediaContext for %ld devices
Device %s is in interrupted state, treating as paused.
Fatal error
Down-casted Array element failed to match the target type
Expected 
UsoPrimitiveStringBuilder
NSArray element failed to match the Swift Array Element type
Expected 
CodeGenListEntry<UsoEntity_common_DurationComponent>
SetShuffleStateDevicesResolutionResult
CodeGenListEntry<UsoEntity_common_Setting>
User selection matched device: %@
DeviceDisambiguationStrategy.makeDisambiguationItemContainer() called
Unexpected disambiguation item type
Could not convert disambiguation item to INObject
Could not validate verb from MediaPlayerIntent or SettingsIntent. Ignoring input.
Supported mediaPlayerIntent verb from parse.
SetPlaybackSpeed.shouldHandle() called
MediaStream { groupLeader: 
SiriPlaybackControlIntents
Merging streams %s failed. Could not find any group leaders
_TtC26SiriPlaybackControlIntents19DeviceSelectingUtil
contextUtil
groupingUtil
localizationProvider
aceServiceHelper
Primary device context is nil. Primary IS a valid fallback
A deviceType: %s is specified. Cannot assume that the primary matches that device type. Primary is NOT a valid fallback
primary hasMatchingNowPlayingMediaTypeQueued: %{bool}d. isPrimaryValidFallback: %{bool}d
No mediaType nor device types specified. Primary IS a valid fallback
ControlType is .resumable but the primary device is already playing something. Primary is NOT a valid fallback
ControlType is .pausable but the primary device is not playing anything. Primary is NOT a valid fallback
ControlType is .videoControls and we are on HomePod so primary should not be valid fallback.
ControlType is volumeControls, so primary should always be a valid fallback.
Deciding wether the primary is an acceptable candidate for controls using controlType: %{public}s, deviceType: %{public}s, mediaTypeFilter: %{public}s and primaryContext: %s
Contexts found, but primary context is not included... shouldControlPrimary: false.
Primary does not satisfy user query and thus is not a valid fallback. shouldControlPrimary: false
Unknown controlType: %s, returning false
.any request and primary is playing something == %{bool}d, nothing else is playing and primary is the only resumable == %{bool}d. shouldControlPrimary: %{bool}d
.resumable request and primary is the only resumable context == %{bool}d. shouldControlPrimary: %{bool}d
.pausable request and primary is playing something == %{bool}d. shouldControlPrimary: %{bool}d
Pausable Contexts: %s, Resumable Contexts :%s
Primary now playing state is unknown. shouldControlPrimary: false
Primary context is the only context we have and user asked for controls other than .pausable. shouldControlPrimary: true
Primary is the only context and user asked for .videoControls on HomePod. shouldControlPrimary: false.
User asked for volume controls, always return local device. shouldControlPrimary: true
User asked for video controls on appleTV. shouldControlPrimary: true
This is a CarPlay request. shouldControlPrimary: true
No contexts found and user asked for controls. shouldControlPrimary: true
Determining if we should short circuit and control the primary device immediately
Resolving destination groups for moveSpeaker request
User asked to "control *this*" and local device is an ambiguousEntity. Removing from possible destinations.
Cannot filter out excluded groups since superset group cannot be determined
Setting excludeGroup to true for: %@
containsExcludeGroups set and found a superset group. Returning all ambiguous entities with excludeGroup flag applied to smaller entities: %s
isSuperset: %{bool}d
Entity/Group with the most amount of devices found is: %s. Determining if it is a superset of all other groups
No groups passed in so there is no superset group
Resolving destination groups for add
Found other entities in the intent. Choosing those as the destination: %s
No entities are found in the intent after filtering out the source group. Local device is the destination
No possible destinations found and local fallback is disabled. Cannot determine the destination
Local device is the source, no other devices are found in the intent. Cannot determine the destination
Local device is the source. This is a "add this to the rest of the room/zone" request. Choosing ambiguous entities as the destination
Local device is the source. Checking if this is a "add this to the rest of the room/zone" request
Group: %s is a superset of all other groups. Choosing it as the destination
Found 2 or more distinct groups playing.
All entities in the intent are paused. Local device is also paused. Attempting to get a source from the context
All entities in the intent are paused. Local device is playing something. Choosing it as the source
All entities in the intent are paused. Determining if local is possible source
All entities in the intent are paused. Context lookup is disabled, cannot determine the source.
Some entities in the intent are playing in a stream and others are paused. Choosing the playing group as the source
All entities in the intent are playing in the same group and the local device is not playing anything. Group is source and primary should be the destination
All entities in the intent are playing in one stream and the local device is playing something different. Returning both as possible sources
All entities in the intent are playing in the same stream and the local device is part of that group. Cannot determine the source
All entities in the intent are playing in the same stream and the local device is part of that group. However this is a move request so returning the local device
All entities in the intent are playing in the same group (1 group found).
resolveAddSourceFromAmbiguousEntities called with empty ambiguousEntities. Cannot determine the source
Resolving add source from ambiguous entities
Found pausable devices from context: %s. Creating device groups
No pausable contexts were found. Cannot determine the source
Local device is playing. Choosing local device as the source
Resolving add source from context
Predicates already contain condition with routeId: %s, a duplicate will not be added.
Multiple sources found, but one of them contains the local device. Choosing that one as the source
Found explicit source streams in the intent: %@
DeviceSelectingUtil#smartSelect WHA request, but could not get any deviceQueries in the intent.
DeviceSelectingUtil#smartSelect WHA request: Resolving target devices using deviceQueries: %s
DeviceSelectingUtil#smartSelect Request has ambiguous target entities. Going down the select route
Devices are pre-resolved, skipping smart selection, and returning devices: %s
Disambiguated Intent with destinationDeviceId: %s
Smart selecting devices for intent: %s
DeviceSelectingUtil#smartSelect Success resolving devices: %s
DeviceSelectingUtil#smartSelect .noMatchingDevicesFound
DeviceSelectingUtil#smartSelect Error resolving devices: %s
Resolving source groups for add speaker request with explicit sources: %s and ambiguousEntities: %s
resolveDevice
Created predicate: %s
Using predicates: %s
Forcing disambiguation based on predicate device type
Resolving devices: %@
No devices provided in intent, resolving with local device
Resolved devices: %@
smartDeviceSelection
Short circuiting and controlling the local device
No predicates could be generated from context, primary is a logical candidate! Selecting the local device
Non-empty device context expected for smart device selection, returning local device
Select devices with deviceType=%{public}s, controlType=%{public}s
User asked for .resumable or .any devices to control but we couldn't find any. Returning the local device
More than 1 device. Adding everywhere for pause control
Primary device is a logical candidate. Adding back the local device to the list of devices elligible for controlling
resolvedDevice count: %ld
%ld devices matching media type %{public}s: %s
Filtering devices %s using mediaTypeFilter %{public}s
No predicates were created from homeAutomationEntities: %s. Falling back to smart select
Using HomeAutomationEntities: %s
No home automation entities in intent, returning failure.
Returning selected group leaders: %s + devices without context: %s
Volume controls request, returning resolved devices grouped by media system id: %s
Pause in <location> request, returning filtered devices: %s + devices without context: %s
No matching devices found in HomeKit.
Matched devices: %@
quickStop#NothingToStop
_TtC26SiriPlaybackControlIntents30PauseMediaHandleIntentStrategy
userDefaultsProvider
playbackController
Unrecognized intentresponse code %{public}ld
PlaybackControls#NothingIsPlaying
PlaybackControls#PauseFailed
PauseMediaHandleIntentStrategy.makeFailureHandlingIntentResponse()
Running PauseMediaHandleIntentStrategy.makeFailureHandlingIntentResponse() using RF
No device found in intent
Running PauseMediaHandleIntentStrategy.makeIntentHandledResponse() using RF
suppressSnippets
PauseMediaHandleIntentStrategy.makeIntentHandledResponse()
All devices are within the same room
User asked to control *everywhere*
Cannot update dialog parameters using an empty device list
Updating parameters for WHA request
Destination #2: Destination is a room or zone. Setting speaker.secondRoom to the groupName
Destination #2: Destination is an accesory. Setting speaker.secondSpeakerName to the groupName
Destination #1: Destination is a room or zone. Setting speaker.firstRoom to the groupName
Destination #1: Destination is an accesory. Setting speaker.firstSpeakerName to the groupName
Final speaker names: %s, Final room names: %s
All entities mentioned in the user's intent: %s
No whole house audio in the intent. Target can be the local device or any other devices in the home. hasAmbiguousTargetEntities: true
No deviceQueries found in the intent. hasAmbiguousTargetEntities: true
_TtC26SiriPlaybackControlIntents25QuickStopLocalStoppedFlow
aceServiceInvoker
quickStop#LocalStopped
QuickStopLocalStoppedFlow#execute Skipping dialog on HomePod, returning complete
QuickStopLocalStoppedFlow#execute DialogEngine returned an error
QuickStopLocalStoppedFlow#execute dialog generated successfully
Encoded route ids: %s
hasThreeOrMoreRooms
firstSpeakerName
secondSpeakerName
_TtC26SiriPlaybackControlIntents28SetPlaybackSpeedFlowStrategy
SetPlaybackSpeedFlowStrategy.makeIntentFromParse() called
SetPlaybackSpeedFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents38PauseMediaDeviceDisambiguationStrategy
PauseMediaDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
SettingsFlowProvider.makeFlow Received unexpected parse: %s
Making flow from parse
Not a media volume request
Could not find any verbs in the setting intent for the volume request. Returning getVolume flow
loudVolumeConfirmationCount
previousVolumeLevel_
UserDefaultsProvider#clearPreviousVolumeLevel for key: %s
UserDefaultsProvider#getPreviousVolumeLevel for key: %s volume: %s
UserDefaultsProvider#setPreviousVolumeLevel for key: %s
UserDefaultsProvider#incrementLoudVolumeConfirmationCount Setting loudVolumeConfirmationCount to incrementedConfirmationCount
UserDefaultsProvider#getLoudVolumeConfirmationCount %s
com.apple.siri.playbackcontrols
No devices resolved. Returning failure
resolvedVolumeOutput or currentVolume is undefined or could not be cast to float. Returning failure
Unknown volume setting type: %s, returning failure.
Volume is already at 0%%. Skip setting volume.
Volume is already at 100%%. Skip setting volume.
Volume settingType: %s, increase: %{bool}d, decrease: %{bool}d, resolved output: %s
Unable to get route ids for the intent devices: %s
SetVolumeLevel.SetVolumeLevelIntentHandler.handle() called
SetVolumeLevel.SetVolumeLevelIntentHandler.confirm() called
No context or device query, falling back to local device
Can't do volume controls on CarPlay, returning unsupported.
Whole House Audio requests are unsupported on this platform
Resolving devices for SetVolume
Resolving volume level for SetVolume
_TtC26SiriPlaybackControlIntents27SetVolumeLevelIntentHandler
accessoryVolumeController
Nothing to unmute
Volume Level retrieved from stash: %f
Failed to get routeId to use when storing previous volume level
Already Muted
Found unexpected volumeSettingState: %{public}s. Returning failure
resolveVolumeLevelUsingQualifiers volume set to mean
resolveVolumeLevelUsingQualifiers volume set to min
resolveVolumeLevelUsingQualifiers volume set to max
resolveVolumeLevelUsingQualifiers increase by %f
resolveVolumeLevelUsingQualifiers decrease by %f
Intent does not contain a volumeSettingValue. Cannot resolve volume level from numeric input
This is an absolute volume adjust intent
This is a relative volume adjust intent
User specified a numeric value in the intent: %@
Calculated delta value: %f
Recalculating delta based on percent of current value
Calculating delta based on percent of current value
Using value directly as delta because value is less than normalizedMinimumValueToUseAsMultiplier or current volume is 0
Normalizing floatSettingValue percentage value
Percent not specified so increase/decrease based on defaultRelativeChangeStepSize and value
User did not specify neither a numeric value in the intent nor any qualifiers. Returning .needsValue
resolvedVolumeOutput = %f
Error getting the volume resolution result
User did not specify a numeric volume level in the intent, but intent has qualifiers. Trying to resolve volume level using qualifiers
User specified a numeric value in the intent. Trying to resolve the volume level from numeric input
Loud volume confirmation already presented twice on this device, skipping confirmation
Could not find a resolveVolumeOutput in the intent. shouldPresentLoudVolumeWarning = false
Expected volume output = %f is smaller than the loud volume range start value of %f. shouldPresentLoudVolumeWarning = false
Delta = %f is smaller than the required volume delta before loud warning %f. shouldPresentLoudVolumeWarning = false
Incrementing loud volume confirmation count for this device
Volume level is too loud, device has very loud audio output (hence should present warning): %{bool}d
Request is to decrease volume, skip loud volume confirmation
Checking if we should be presenting loud volume warning for expectedOutputVolume = %f, currentVolumeOutput = %s, device = %@, volumeSettingState: %ld
isHomePodFromDeviceType: %{bool}d, isHomePodFromDeviceState: %{bool}d, isAudioRouteToHeadphone: %{bool}d. hasVeryLoudAudioOutput=%{bool}d
Determining if device: %@ has very loud audio output
DeviceQueryableIntent#isWholeHouseAudio No deviceQueries found in the intent. This is not a WHA intent
DeviceQueryableIntent#isWholeHouseAudio: DeviceQueries: %s, onlyHasReferenceQueries: %{bool}d
Failed to get volume for accessory
resolveVolumeLevel: An error occurred in the GetVolumeLevel media remote call: %{public}s
Can't do volume controls on Apple TV, returning unsupported.
Multiple devices selected.
Attempting to set the volume for sidekick device to %f for routeId: %s
Failed to set volume for accessory
floatVolumeLevel: %f deceeds minimum level. This is okay, we'll still try to set it to the min value
floatVolumeLevel: %f exceeds maximum level. This is okay, we'll still try to set it to the max value
Attempting to set the volume for local device to %f for routeId: %s
An error occurred in the SetVolumeLevel media remote call: %{public}s
Attempting to change the volume by %f for routeIds: %s
Attempting to set the volume to %f for routeIds: %s isLocal: %{bool}d
Getting routeIds from intent. PreferContextRouteId: %{bool}d
SetVolumeLevelIntentHandling
v32@0:8@"SetVolumeLevelIntent"16@?<v@?@"SetVolumeLevelIntentResponse">24
v32@0:8@"SetVolumeLevelIntent"16@?<v@?@"NSArray">24
v32@0:8@"SetVolumeLevelIntent"16@?<v@?@"SetVolumeLevelVolumeLevelResolutionResult">24
MediaIntent#init unexpected parse type: %s, returning nil MediaIntent
MediaIntent#init invalid user data for buttonPress: %s
MediaIntent#init creating MediaIntent from .directInvocation parse
No tasks found in usoTasks input, might be a confirmation response.
Fatal: Unable to cast task: %s to ControlsMediaTask
Setting attributes for MediaIntent from task: %s
MediaIntent#init creating MediaIntent from .uso parse
MediaIntent#init creating MediaIntent from .NLv3IntentOnly parse
_TtC26SiriPlaybackControlIntents40SetPlaybackSpeedUnsupportedValueStrategy
Received unrecognized unsupported Reason: %ld
PlaybackControls#UnsupportedPlaybackSpeedRequested
Sending unsupportedPlaybackSpeedRequested dialog
No devices found in intent, returning failure
Missing playbackSpeed in intent, returning failure
Missing routeId in intent, returning failure
SetPlaybackSpeed.SetPlaybackSpeedIntentHandler.handle() called
No need to resolve speed magnitude for relative speed change. Returning success.
Playback speed %f is not supported.
SetPlaybackSpeed.SetPlaybackSpeedIntentHandler.resolveSpeedMagnitude() called
Received unknown playbackSpeed type.
SetPlaybackSpeed.SetPlaybackSpeedIntentHandler.resolvePlaybackSpeedType() called
SetPlaybackSpeedIntentHandler#resolveDevices intent does not have disambiguated devices or device queries. Sending local device.
SetPlaybackSpeedIntentHandler#resolveDevices resolving devices from device queries
SetPlaybackSpeedIntentHandler.resolveDevices() called
_TtC26SiriPlaybackControlIntents29SetPlaybackSpeedIntentHandler
@16@0:8
deviceSelector
Setting playback rate: %f for playbackSpeedType: setToValue
Calling setPlaybackSpeedFaster
Calling setPlaybackSpeedSlower
Unknown Error while setting the playback rate: %s
Received requestParametersOutOfBounds while setting the playback rate
Received requestParametersOutOfBounds while setting the playback rate to faster.
Received requestParametersOutOfBounds while setting the playback rate to slower.
Playback rate updated.
SetPlaybackSpeedIntentHandler#resolveDevices Error resolving devices: %s. Returning local device
SetPlaybackSpeedIntentHandler#resolveDevices Success resolving devices: %s
SetPlaybackSpeedIntentHandling
v32@0:8@"SetPlaybackSpeedIntent"16@?<v@?@"SetPlaybackSpeedIntentResponse">24
v32@0:8@"SetPlaybackSpeedIntent"16@?<v@?@"NSArray">24
v32@0:8@"SetPlaybackSpeedIntent"16@?<v@?@"SetPlaybackSpeedSpeedMagnitudeResolutionResult">24
v32@0:8@"SetPlaybackSpeedIntent"16@?<v@?@"PlaybackSpeedTypeResolutionResult">24
NSObject
Unexpected parse type: %s, returning nil MediaPlayerIntent
Invalid user data for buttonPress: %s
Handling direct invocation parse in MediaPlayerIntent
Fatal: Unable to cast task: %s to ControlsMediaPlayerTask
Setting attributes for MediaPlayerIntent from task: %s
Handling USO/Pommes parse in MediaPlayerIntent
Creating MediaPlayerNLv3Intent
Failed to decode destinationDeviceId
_TtC26SiriPlaybackControlIntents20AnalyticsServiceImpl
analyticsServiceLogger
contextProvider
siriEnvironment
Submit SiriKitEvent for intent: %s with domainContext: %s and loggedApp: %s
v8@?0
sending logSELFCrossDeviceCommandEndedEvent with intent:%s requestId: %s
sending logSELFCrossDeviceCommandStartedEvent with requestId: %s
com.apple.siri.playbackcontrols.numberOfDevicesFiltered
sending %s with filterName: %s devicesBefore: %ld devicesAfter: %ld devicesFiltered: %ld
primaryProximityCount
immediateProximityCount
nearProximityCount
farProximityCount
unknownProximityCount
com.apple.siri.playbackcontrols.contextDeviceProximities
sending %s with proximityCounts: %@
selectedDeviceProximity
com.apple.siri.playbackcontrols.selectedDeviceProximity
sending %s for intent: %s with proximity: %s and selectedBy: %s
Error creating contexts for eventType: %s
Error creating createAFCoreAnalyticsCrossDeviceEvent
sending logAFCoreAnalyticsCrossDeviceEvent with event: %s
sending eventType: %s with event: %s
Could not convert user dialog act to tasks: %s
getUsoTask() returning task with entity=%{public}s verb=%{public}s
No tasks found in input
_TtC26SiriPlaybackControlIntents29VolumeLevelNeedsValueStrategy
deviceState
volumeControlsDialogProvider
Unknown parameter found: %{public}s. Unable to make prompt value.
VolumeControls#VolumeLevelNeedsValue
Making prompt value for "volumeLevel"
VolumeLevelNeedsValueStrategy.makePromptForValue()
Including SystemPrompted in context update: %s
Nlu System Prompted Act: %s
uso NeedsValue: %s
com.apple.siri.nl
floatSettingName
Unknown parameter found: %{public}s. Unable to parse response value
Unable to create SettingsIntent from parse
Could not get volumeSettingValue from intent
VolumeLevelNeedsValueStrategy.parseResponseValue()
Unknown parameter found: %s. Returning .ignore()
Could not create SettingsIntent from parse. ActionForInput = ignore()
Could not find a numericSettingState nor a numericSettingValue in the response. ActionForInput = ignore()
VolumeLevelNeedsValueStrategy.actionForInput()
handleSkipItem
Resolving devices for skip content
_TtC26SiriPlaybackControlIntents24SkipContentIntentHandler
v16@0:8
SkipContentIntentHandler#resolveDevices Disambiguating between devices: %s
SkipContentIntentHandler#resolveDevices Success resolving devices: %s
SkipContentIntentHandler#resolveDevices .noMatchingDevicesFound
SkipContentIntentHandler#resolveDevices Error resolving devices: %s
Skip direction not provided in intent, returning failure
SkipContentIntentHandling
v32@0:8@"SkipContentIntent"16@?<v@?@"SkipContentIntentResponse">24
v32@0:8@"SkipContentIntent"16@?<v@?@"NSArray">24
@32@0:8:16@24
dialogProviding
languageDialogProvider
LanguageControls#DisambiguateLanguage
LanguageDisambiguationStrategy.makePromptForDisambiguation() called
LanguageDisambiguationStrategy#parseDisambiguationResult parameter is not language
LanguageDisambiguationStrategy#parseDisambiguationResult failed to create MediaIntent from parse
LanguageDisambiguationStrategy#parseDisambiguationResult unable to select a language from previous items, returning failure
LanguageDisambiguationStrategy#parseDisambiguationResult user selected language: %@
LanguageDisambiguationStrategy#parseDisambiguationResult called
Intent is missing language, ignoring
Comparing %{public}s and %{public}s against: %{public}s
Selected: %{public}@
LanguageDisambiguationStrategy#makeDisambiguationItemContainer called
LanguageDisambiguationStrategy.makeFlowCancelledResponse()
LanguageDisambiguationStrategy#actionForInput failed to get language from intent
LanguageDisambiguationStrategy#actionForInput intent indicates we should cancel out of disambiguation
LanguageDisambiguationStrategy#actionForInput called
UsoTask_disableSetting_common_MediaItem#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_disableSetting_common_MediaItem#shouldHandle Task is not mediaPlayer/setting: Not handling in controls
UsoTask_disableSetting_common_MediaItem#shouldHandle Task is settings. Handling in controls
UsoTask_disableSetting_common_MediaItem#shouldHandle Task is mediaPlayer. Handling in controls
floatSettingState
Couldn't get usoIdentifier for common_Setting name for entity: %s
mediaSettingName
mediaPlaybackSpeedDelta
UsoEntityCommonSetting#getLanguage couldn't get usoIdentifiers for language: %s
UsoEntityCommonSetting#getLanguage couldn't find language namespace identifier for language: %s
closedCaptioning
close captioning
UsoEntityCommonSetting#getMediaViewOption couldn't get usoIdentifiers for commonSettingEntity: %s
UsoTaskExtension#validateForMediaDomain#settingEntity could not get usoIdentifiers for entity
UsoTaskExtension#validateForMediaDomain#settingEntity validIdentifier: %{bool}d hasMediaViewOption: %{bool}d)
UsoTaskExtension#validateForSettingsDomain#settingEntity no identifiers found for entity, returning true
UsoTaskExtension#validateForSettingsDomain#settingEntity  entity has language or mediaViewOption, returning false
UsoTaskExtension#validateForSettingsDomain#settingEntity unsupported settings namespace: %s
UsoTaskExtension#validateForMediaPlayerDomain#settingEntity could not get usoIdentifiers for entity
UsoTaskExtension#validateForMediaPlayerDomain#settingEntity unsupported mediaPlayer namespace: %s
mediaPlayerAttributes
Unable to get mediaPlayer usoIdentifiers from UsoEntity_common_Setting
Returning unexpected nil verb value for common_Setting: %s
handleRepeatMedia
Resolving devices for set repeat state
_TtC26SiriPlaybackControlIntents27SetRepeatStateIntentHandler
SetRepeatStateIntentHandler#resolveDevices Disambiguating between devices: %s
SetRepeatStateIntentHandler#resolveDevices Success resolving devices: %s
SetRepeatStateIntentHandler#resolveDevices .noMatchingDevicesFound
SetRepeatStateIntentHandler#resolveDevices Error resolving devices: %s
Uknown repeat mode
Handling repeatState with value: %{public}ld
SetRepeatStateIntentHandling
v32@0:8@"SetRepeatStateIntent"16@?<v@?@"SetRepeatStateIntentResponse">24
v32@0:8@"SetRepeatStateIntent"16@?<v@?@"NSArray">24
#16@0:8
_TtC26SiriPlaybackControlIntents23ResumeMediaFlowStrategy
ResumeMediaFlowStrategy.makeIntentFromParse() called
Home Automation entities are empty, skip adding to intent.
Found destination device id in the intent. parsing the routes and setting disambiguated to true
Found home automation nodes, attempting to map them to SiriKit intent
Received non NLv3IntentOnly parse
ResumeMediaFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents34SetVolumeLevelHandleIntentStrategy
Did not receive devices in intent
SetVolumeLevel.HandleIntentStrategy.makeFailureHandlingIntentResponse() called
Did not receive volume level from response
VolumeControls#AlreadyAtMinimum
VolumeControls#AlreadyAtMaximum
SetVolumeLevel.HandleIntentStrategy.makeIntentHandledResponse() called
_TtC26SiriPlaybackControlIntents36VolumeLevelNeedsConfirmationStrategy
DefaultNeedsConfirmationStrategy.makeConfirmationRejectedResponse()
Could not find any devices or volume level in the intent for confirmation
Unable to generate views for confirmation
VolumeControls#ConfirmSetLoudVolume
VolumeLevelNeedsConfirmationStrategy.makePromptForConfirmation()
Failed to localize labels for confirmation dialog.
Unexpected device type, returning empty views
Including SystemOffered in context update: %s
Nlu System Offered Act: %s
uso UserWantedToProceed: %s
Unexpected parse: %s
DefaultNeedsConfirmationStrategy.parseConfirmationResponse()
No confirmation response in the intent, ignoring input
Cancelling due to confirmation value in intent
DefaultNeedsConfirmationStrategy.actionForInput()
Filtered %ld options against %{public}s to: %{public}@
Error when getting language options: %{public}s
Unable to autoselect a language, returning all options: %@
Auto selected %{public}s
Unable to find matching language using system language: %s. Searching for match with system language/region: %{public}s using mapped languageIdentifier: %{public}s
Searching for matching language using systemLanguage: %{public}s
Found already enabled language: %s
UsoTask_increaseBy_common_Setting#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_increaseBy_common_Setting#shouldHandle Task is not setting: Not handling in controls
UsoTask_increaseBy_common_Setting#shouldHandle Task is settings. Handling in controls
Unable to determine setting name for task %s
_TtC26SiriPlaybackControlIntents36SkipTimeDeviceDisambiguationStrategy
Missing direction in intent
SkipTimeDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
Unexpected parse type: %s, returning nil SettingsIntent
Fatal: Unable to cast task: %s to ControlsSettingsTask
Setting attributes for SettingsIntent from task: %s
Creating SettingsUsoIntent
Creating SettingsNLv3Intent
_TtC26SiriPlaybackControlIntents40SetSubtitleStateUnsupportedValueStrategy
SetSubtitleStateUnsupportedValueStrategy.makeUnsupportedValueOutput()
LanguageControls#FailedToRetrieveOptions
Unable to create SettingsIntent from parse, ignoring input
Incorrect verb in intent for flow, ignoring input
SetVolumeLevel.shouldHandle() called
Intent Device { name: 
, displayableName: 
, mediaSystemId: 
, disambiguated: 
, skipConfirmation: 
Device#toRREntities UsoBuilderConversionUtils.convertEntityBuilderToEntity creating UsoEntity: %s
Device#toRREntitiesForZoneNames UsoBuilderConversionUtils.convertEntityBuilderToEntity creating UsoEntity: %s
Device missing identifier, skipping conversion: %s
Context missing route ID while converting to Intent Device: %@. Skipping device.
Context contains duplicate routeId: %s with context: %@. Keeping only last processed context: %@
Local SideKick device, using endpointId: %s
_TtC26SiriPlaybackControlIntents38SetVolumeLevelUnsupportedValueStrategy
VolumeControls#NothingIsPlaying
VolumeControls#VolumeLevelUnsupportedOnCarPlay
VolumeControls#VolumeLevelUnsupportedOnAppleTV
FLOWSchemaFLOWDomainContext error creating domainContext. Returning nil
fetchQuickStopContext not implemented in SimulatedContextProvider
Returning %ld contexts: %@
nowPlayingMediaType
_TtC26SiriPlaybackControlIntents19BasePatternExecuter
testMode
executePattern
Executing pattern: %s with params: %s
[Error] Interval already ended
handleSkipTimeMedia
Resolving devices for skip time
_TtC26SiriPlaybackControlIntents21SkipTimeIntentHandler
v32@0:8@16@?24
SkipTimeIntentHandler#resolveDevices Disambiguating between devices: %s
SkipTimeIntentHandler#resolveDevices Success resolving devices: %s
SkipTimeIntentHandler#resolveDevices .noMatchingDevicesFound
SkipTimeIntentHandler#resolveDevices Error resolving devices: %s
Unable to get time from intent, returning failure
Unknown skip direction provided in intent, returning failure
responseCodeFromResult for SkipTimeIntentResponseCode
SkipTimeIntentHandling
v32@0:8@"SkipTimeIntent"16@?<v@?@"SkipTimeIntentResponse">24
v32@0:8@"SkipTimeIntent"16@?<v@?@"NSArray">24
v32@0:8@"SkipTimeIntent"16@?<v@?@"SignedDurationResolutionResult">24
_TtC26SiriPlaybackControlIntents23MoveSpeakerFlowStrategy
MoveSpeakerFlowStrategy.makeIntentFromParse() called
MoveSpeakerFlowStrategy.actionForInput() not a MediaPlayerIntent, ignoring...
MoveSpeakerFlowStrategy.actionForInput() not a moveSpeaker request, ignoring...
MoveSpeakerFlowStrategy.actionForInput() called
MediaPlayerFlowProvider.makeFlow Received unexpected parse: %s
MediaPlayerIntent: %s
Unable to make flow for mediaPlayer intent
handleAddSpeakerIntent
resolveAddSpeakerSource
resolveAddSpeakerDestiantions
AddSpeakerIntentHandler.confirm() called
_TtC26SiriPlaybackControlIntents23AddSpeakerIntentHandler
Could not find a device query or could not find add source in the intent. Returning error
AddSpeakerIntentHandler.resolveDestination() called
Success resolving destination: %s.
User asked for a single device matching a deviceType, but multiple devices were found. Returning an error
AddSpeaker destination device is not TV or HomePod. Returning an error
Could not resolve any destination for add speaker request.
Could not find any device queries in the intent. Returning error
AddSpeakerIntentHandler.resolveSource()
Multiple sources found for add request.
Success resolving source: %@.
Could not find a source stream for the add request.
Could not find a valid source and/or destinations in the intent
Failed to get the device id of the source. Returning error
Source device is is not TV or HomePod. Sending a move command instead of add
Empty destination ids found after filtration. Returning error
Resolved Source: %s, Resolved Destinations: %s
AddSpeakerIntentHandler.handle() called
Success moving output devices to group
Failed to move output devices to group. Error: %s
Success adding output devices to group
Failed to add output devices to group. Error: %s
AddSpeakerIntentHandling
v32@0:8@"AddSpeakerIntent"16@?<v@?@"AddSpeakerIntentResponse">24
v32@0:8@"AddSpeakerIntent"16@?<v@?@"AddSpeakerSourceResolutionResult">24
v32@0:8@"AddSpeakerIntent"16@?<v@?@"NSArray">24
findFlowFor
findFlowFor(parse:)
ControlsFlowProvider#findFlowFor Didn't recieve a flow, returning .noFlow
ControlsFlowProvider#findFlowFor Returning flow: %s
ControlsFlowProvider#findFlowFor Calling ControlsFlowProvider().makeFlow for a flow to return
ControlsFlowProvider#findFlowFor Received a uso parse but Media Controls on Siri X feature is disabled, returning .noFlow
ControlsFlowProvider#findFlowFor Recieved parse: %s
ControlsFlowProvider#makeFlow No flow returned
ControlsFlowProvider#makeFlow flow returned. Pre-warming HomeKit
ControlsFlowProvider#makeFlow Recieved parse: %s
makeFlow
makeFlow(for parse:)
ControlsFlowProvider#makeFlow Received unexpected parse: %s
com.apple.siri.DirectInvocation.PlaybackControls.StopMedia
ControlsFlowProvider#makeFlow Unexpected invocation identifier: %s
ControlsFlowProvider#makeFlow Returning PauseMediaFlow for stop direct invocation
ControlsFlowProvider#makeFlow Unexpected NL domain: %s, returning no flow
ControlsFlowProvider#makeFlow Attempting to make frame from settings NL intent
ControlsFlowProvider#makeFlow Attempting to make frame from mediaPlayer NL intent
ControlsFlowProvider#makeFlow Attempting to make frame from media NL intent
ControlsFlowProvider#makeFlow Received a .uso parse but Media Controls on Siri X feature is disabled, returning nil
ControlsFlowProvider#makeFlow Did not receive a task from uso's UserParse, returning nil
ControlsFlowProvider#makeFlow Unsupported task, returning no flow
ControlsFlowProvider#makeFlow Attempting to make flow from media uso parse
ControlsFlowProvider#makeFlow Attempting to make flow from settings uso parse
ControlsFlowProvider#makeFlow Attempting to make flow from mediaPlayer uso parse
ControlsFlowProvider#makeFlow uso parse input is entity=%{public}s verb=%{public}s
ControlsFlowProvider#makeFlow Did not receive a task from PommesResponse's UserParse
ControlsFlowProvider#makeFlow Attempting to make flow from mediaPlayer pommesResponse
makeFrameForPlayMediaIntent
makeAmbiguousShuffleFlow
ControlsFlowProvider#makeAmbiguousShuffleFlow Determining if this is a request to enable shuffle or to start library playback shuffled
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Invalid ambiguous shuffle parse, not handling
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Unable to make MediaPlayerIntent from parse, not handling
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Resolving potential devices
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Task is not an ambiguous shuffle music request. Handling as explicit shuffle.
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Device resolution result was not success or disambiguation, not handling
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest No playing music found to shuffle, not handling this as a set shuffle state request
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Mentioned devices are playing music: %s, returning handle response
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Checking resolved devices for playing music
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest No resolved devices, not handling
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Adding disambiguated devices
ControlsFlowProvider#shouldHandleAmbiguousShuffleMusicRequest Adding resolved device(s)
ControlsFlowProvider#deviceSelector initializing device selecting util...
ControlsFlowProvider#shouldHandleAmbiguousShuffle Received unexpected parse: %s
ControlsFlowProvider#shouldHandleAmbiguousShuffle Siri X v2 flag is not enabled, not handling ambiguous shuffle music request
ControlsFlowProvider#shouldHandleAmbiguousShuffle Did not receive a task from parse
ControlsFlowProvider#shouldHandleAmbiguousShuffle Task is not a supported shuffle type for controls
ControlsFlowProvider#shouldHandleAmbiguousShuffle Received valid ambiguous shuffle parse: %s
ControlsFlowProvider#shouldHandleAmbiguousShuffle Not an INPlayMediaIntent
ControlsFlowProvider#shouldHandleAmbiguousShuffle INPlayMediaIntent doesn't have the expected properties set, not an ambiguous shuffle music request
ControlsFlowProvider#shouldHandleAmbiguousShuffle NLv3 intent is not ambiguous shuffle
ControlsFlowProvider#makeSetShuffleStateFlow cannot create mediaPlayer intent from parse
Determining if this is a play, resume or addSpeaker request
Unable to make MediaPlayerIntent from parse, returning nil flow
ControlsFlowProvider.shouldHandleAmbiguousPlay Received unexpected parse: %s
ControlsFlowProvider.shouldHandleAmbiguousPlay Did not receive a controls mediaPlayer task from uso's UserParse
ControlsFlowProvider.shouldHandleAmbiguousPlay Non-ambiguous play: %s, not handling in controls
Checking context for ambiguous play request with intent: %s, hasHomeAutomationNodes: %{bool}d
ControlsFlowProvider.shouldHandleAmbiguousPlay This is a play + mediaType request. Rejecting since we want don't want to treat those as smartPlay
This is a "Play this in [room]" request, handling in playback controls
ControlsFlowProvider.shouldHandleAmbiguousPlay Non ambiguous play request. Returning a nil flow for SiriAudio to handle the play request
Cannot create mediaPlayer intent from parse
Resumable device found in context: %s, returning handle response
Contexts matching media type %s: %s
User asked to play [music/podcast/audiobook] and the local device is not playing that type, returning nil flow for SiriAudio to handle
User asked to play [music/podcast/audiobook] and the local device is playing that type, returning resume flow
No resumable devices found from context. Returning a nil flow for SiriAudio to handle
Request to play in [location] and local device is playing something. This is an addSpeaker request
Determining if we should handle Ambiguous + WHA request
Found devices to resume: %s. Returning a resume flow
No resumbale devices found for WHA request, returning nil flow for SiriAudio to handle
User asked to "Play [music/podcast/audiobook]" but no primary context found or primary was playing a different mediaType. Returning nil flow frame for SiriAudio to handle the play request
User asked to "Play [music/podcast/audiobook]". Primary is playing that mediaType. Resuming local device
User asked to "Play [music/podcast/audiobook]". Determining if we need to start a new container or if there's music/podcast/audiobook queued locally to resume
Local device has resumable content: %{bool}d
No relevant resumable contexts found to resume and local device play queue is empty or does not match the requested mediaType. Returning nil
No relevant resumable contexts found. Local device can be resumed. Returning resume flow
Selecting most recent resumable deviceContexts: %s
Found no resumable contexts with valid timestamps. Returning all resumable without timestamp filtration: %s
mediaType: %{public}s is ambiguous or unspecified, filtering skipped.
PlaybackControls will handle ambiguous play request. Pre-warming HomeKit...
ControlsFlowProvider#makeRequestContext making RequestContext with deviceContexts: %s
ControlsFlowProvider#makeRequestContext Fetching device contexts
makeQuickStopFlow
ControlsFlowProvider#quickStopFlowResult QuickStop received an unsupported QuickStop parse. Returning .noFlow
homeAnnouncement
ControlsFlowProvider#quickStopFlowResult QuickStop reforming to %s domain
ControlsFlowProvider#quickStopFlowResult QuickStop returned flow
ControlsFlowProvider#preWarmHomeKit Pre-warming HomeKit...
Found no context for item: %s, filtering skipped for this item.
homeAutomationSpeakerService
homeAutomationFromEntity
homeAutomationServiceGroup
homeAutomationServiceName
homeAutomationAccessoryName
homeAutomationZone
homeAutomationHome
common_MediaItem
isSiriXEnabled: %{bool}d, isSiriXv2Enabled: %{bool}d
Not rendering the controls platter due to enabled suppressSnippets user default
Setting sash applicationBundleIdentifier to: %{public}s
neverHideSnippet
MediaControlsViewProvider#suppressSnippetIfNeeded snippet viewId: %s
MediaControlsViewProvider#suppressSnippetIfNeeded routeId: %s
MediaControlsViewProvider#suppressSnippetIfNeeded snippet sessionID: %s
canHideSnippetIfNeeded
MediaControlsViewProvider#fetchSessionIDIfNeeded shouldSuppressSnippet: %{bool}d
_TtC26SiriPlaybackControlIntents30AddSpeakerHandleIntentStrategy
AddSpeakerHandleIntentStrategy.makeFailureHandlingIntentResponse() called
Unable to find any destinations in the intent. Returning a failure
Returning default response dialog for add speaker.
Requested to add speaker from phone/iOS device which resulted in a moveSpeaker operation instead. Returning moveSpeaker dialog
AddSpeakerHandleIntentStrategy.makeIntentHandledResponse() called
_TtC26SiriPlaybackControlIntents35MoveSpeakerUnsupportedValueStrategy
MoveSpeakerUnsupportedValueStrategy.makeUnsupportedValueOutput() called
PlaybackControls#NoWholeHouseAudioMentionedInIntent
PlaybackControls#TooManyStreamsInHome
UsoTask_noVerb_common_Setting#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_noVerb_common_Setting#shouldHandle Task is not mediaPlayer/media/setting: Not handling in controls
UsoTask_noVerb_common_Setting#shouldHandle Task is settings. Handling in controls
UsoTask_noVerb_common_Setting#shouldHandle Task is media. Handling in controls
UsoTask_noVerb_common_Setting#shouldHandle Task is mediaPlayer. Handling in controls
resolveVolumeLevelUsingQualifiers a lot triggered
resolveVolumeLevelUsingQualifiers a little triggered
volumeSettingState not specified in the intent. isIncreaseOrDecreaseVolumeIntent = false
_TtC26SiriPlaybackControlIntents26GetVolumeLevelFlowStrategy
GetVolumeLevelFlowStrategy.makeIntentFromParse() called
GetVolumeLevelFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents39SkipContentDeviceDisambiguationStrategy
SkipContentDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
UsoEntityCommonNumber#getNumericValue got unexpected number entityType %s
Number %s cannot be cast to MultipliedNumber, decimal or integer, returning nil.
Number value: %s
Number value: %lld
Multiplier value: %s
_TtC26SiriPlaybackControlIntents31ResumeMediaHandleIntentStrategy
ResumeMediaHandleIntentStrategy.makeIntentHandledResponse()
Updating parameters for local controls
Updating parameters for smart controls
Smart selected more than 1 device?! count = %ld
SiriPlaybackControlIntents/ControlsDialogParameters.swift
Proximity not supported!
Everywhere: Smart pause of all devices or groups
Unsupported deviceType for native playback controls!
PlaybackControls#ResumeFailed
ResumeMediaHandleIntentStrategy.makeFailureHandlingIntentResponse()
_TtC26SiriPlaybackControlIntents32ResumeMediaConfirmIntentStrategy
dialogProvider
ConfirmIntentStrategy.makeFlowCancelledResponse()
ConfirmIntentStrategy.makeConfirmationRejectedResponse()
ResumeMediaConfirmIntentStrategy.makePromptForConfirmation() called
Could not find any devices in the intent for confirmation
Confirming devices: %s
ResumeMediaConfirmIntentStrategy.makeDialogForConfirmation()
ConfirmIntentStrategy.parseConfirmationResponse()
ConfirmIntentStrategy.actionForInput()
DeviceGroup { groupName: 
, excludeGroup: 
unmapped NowPlayingMediaType case (
Found an unknown media type playing: "%{public}s". Treating as unknown
supportedVerbForEntity: %{bool}d, shouldHandleInControls: %{bool}d, isWHASupported: %{bool}d. Task is supported by MediaFlowProvider: %{bool}d
Task entity/verb: %s/%s is not supported by MediaFlowProvider
Not a shared task. Handling in controls
Found shared task... should handle in domain: %s
Task entity/verb: %s/%s is not supported by SettingsFlowProvider
supportedVerbForEntity: %{bool}d, shouldHandleInControls: %{bool}d, isWHASupported: %{bool}d. Task is supported by SettingsFlowProvider: %{bool}d
supportedVerbForEntity: %{bool}d, shouldHandleInControls: %{bool}d, isWHASupported: %{bool}d. Task is supported by MediaPlayerFlowProvider: %{bool}d
Task entity/verb: %s/%s is not supported by MediaPlayerFlowProvider
_TtC26SiriPlaybackControlIntents18BaseDialogProvider
testGlobals
globals
isMultiUserEnabled
requiresUserGrounding
executeCAT
Executing CAT: %s with params: %s
Error while executing dialog: %{public}s
handleResumeMedia
Resolving devices for resume media
_TtC26SiriPlaybackControlIntents24ResumeMediaIntentHandler
App bundle id for mediaType %{public}s on %{public}s is nil. Returning failure
ResumeMediaIntentHandler#resolveDevices Disambiguating between devices: %s
ResumeMediaIntentHandler#resolveDevices Success resolving devices: %s
ResumeMediaIntentHandler#resolveDevices .noMatchingDevicesFound
ResumeMediaIntentHandler#resolveDevices Error resolving devices: %s
Handling resume media
Handling resume for devices: %@
Resuming in here
Failed to handle Resume intent. No route ids found.
User asked to "Resume [mediaType]", however no devices with a matching nowPlayingMediaType was found. Falling back to resuming the corresponding first party app locally
Prepare for audio handoff came back with result: %{bool}d
More than one device found in the intent or primary device not found. shouldResumeLocalFirstPartyAppForMediaType = false
shouldResumeLocalFirstPartyAppForMediaType = %{bool}d
Determining if we should resume the local first party app using %s and mediaType %{public}s.
ResumeMediaIntentHandling
v32@0:8@"ResumeMediaIntent"16@?<v@?@"ResumeMediaIntentResponse">24
v32@0:8@"ResumeMediaIntent"16@?<v@?@"NSArray">24
_TtC26SiriPlaybackControlIntents35SetRepeatStateConfirmIntentStrategy
ConfirmIntentStrategy.makePromptForConfirmation() called
Unexpected repeat mode found
SetRepeatStateConfirmIntentStrategy.makeDialogForConfirmation()
setAudioLanguage
handleSetAudioLanguage
Media controls are unsupported on this platform
resolveAudioLanguage
_TtC26SiriPlaybackControlIntents29SetAudioLanguageIntentHandler
No device found in intent, returning failure
Language already found in intent, returning it
Resolving language for set audio language
No language resolved and user requested to enable subtitles, returning failure
SetAudioLanguageIntentHandling
v32@0:8@"SetAudioLanguageIntent"16@?<v@?@"SetAudioLanguageIntentResponse">24
v32@0:8@"SetAudioLanguageIntent"16@?<v@?@"SetAudioLanguageDeviceResolutionResult">24
v32@0:8@"SetAudioLanguageIntent"16@?<v@?@"SetAudioLanguageLanguageResolutionResult">24
B24@0:8@16
_TtC26SiriPlaybackControlIntents36SetAudioLanguageHandleIntentStrategy
No device present in intent
SetAudioLanguageHandleIntentStrategy.makeIntentHandledResponse()
LanguageControls#AudioFailedToChange
_TtC26SiriPlaybackControlIntents34WhatDidTheySayHandleIntentStrategy
controlsDialogProvider
WhatDidTheySayHandleIntentStrategy.makeIntentHandledResponse()
WhatDidTheySayHandleIntentStrategy.makeFailureHandlingIntentResponse()
LanguageControls#SubtitleNotAvailable
Missing routeId in intent
Getting the volume for route Id: %s
GetVolumeLevel.GetVolumeLevelIntentHandler.handle() called
GetVolume requests for Whole House Audio are unsupported on this platform
GetVolumeLevel.GetVolumeLevelIntentHandler.resolveDevices() called
GetVolumeLevel.GetVolumeLevelIntentHandler.confirm() called
_TtC26SiriPlaybackControlIntents27GetVolumeLevelIntentHandler
Getting routeId from intent. PreferContextRouteId: %{bool}d
Multiple devices selected, returning unsupported.
The current volume level from GetVolumeLevel media remote call is: %f
An error occurred in the GetVolumeLevel media remote call: %{public}s
GetVolumeLevelIntentHandling
v32@0:8@"GetVolumeLevelIntent"16@?<v@?@"GetVolumeLevelIntentResponse">24
v32@0:8@"GetVolumeLevelIntent"16@?<v@?@"GetVolumeLevelDeviceResolutionResult">24
Intent LanguageOption { name: 
, languageIdentifier: 
_TtC26SiriPlaybackControlIntents22PauseMediaFlowStrategy
Unexpected parse type in makeIntentFromParse: %s
com.apple.siri.DirectInvocation.PlaybackControls.QuickStop
com.apple.siri.DirectInvocation.PlaybackControls.ButtonPress
Unexpected direct invocation identifier
Failed to create MediaPlayerIntent from parse: %s
PauseMediaFlowStrategy.makeIntentFromParse() called
Didn't recieve an NLv3IntentOnly parse or direct invocation.
PauseMediaFlowStrategy.actionForInput() called
handleShuffleMedia
Resolving devices for set shuffle state
_TtC26SiriPlaybackControlIntents28SetShuffleStateIntentHandler
SetShuffleStateIntentHandler#resolveDevices Disambiguating between devices: %s
SetShuffleStateIntentHandler#resolveDevices Success resolving devices: %s
SetShuffleStateIntentHandler#resolveDevices .noMatchingDevicesFound
SetShuffleStateIntentHandler#resolveDevices Error resolving devices: %s
Uknown shuffle mode
Unexpected shuffle mode
responseCodeFromResult for SetShuffleStateIntentHandler
SetShuffleStateIntentHandling
v32@0:8@"SetShuffleStateIntent"16@?<v@?@"SetShuffleStateIntentResponse">24
v32@0:8@"SetShuffleStateIntent"16@?<v@?@"NSArray">24
UserDialogAct is UserCancelled
UserDialogAct is UserRejected
UserDialogAct is UserAccepted
wrappedFlow
shouldRedirectToServer
NeedsDisambiguationWrapperFlow Wrapped flow exit value: %s
NeedsDisambiguationWrapperFlow shouldRedirectToServer is set to true, exiting flow with .unhandled response to trigger server fallback
NeedsDisambiguationWrapperFlow.execute called
NeedsDisambiguationWrapperFlow Disambiguation received a uso parse. Setting shouldRedirectToServer to true
NeedsDisambiguationWrapperFlow.on called
patternProvider
Cannot cast intent resolution result as CommonIntentResolutionResult
CommonUnsupportedValueStrategy#makeUnsupportedValueOutput Unexpected unsupportedReason
CommonUnsupportedValueStrategy#makeUnsupportedValueOutput for .unsupportedOnPlatform
PauseMediaUnsupportedValueStrategy.makeUnsupportedValueOutput() called using RF
PauseMediaUnsupportedValueStrategy.makeUnsupportedValueOutput() for .noMatchingDevicesFound
CommonUnsupportedValueStrategy.makeUnsupportedValueOutput() called
_TtC26SiriPlaybackControlIntents37SetAudioLanguageConfirmIntentStrategy
Confirming device: %@
SetAudioLanguageConfirmIntentStrategy.makeDialogForDisambiguation()
_TtC26SiriPlaybackControlIntents38GetVolumeLevelUnsupportedValueStrategy
GetVolumeLevelUnsupportedValueStrategy.makeUnsupportedValueOutput() called
VolumeControls#GetVolumeLevelError
VolumeControls#GetVolumeLevelUnsupportedOnMultipleDevices
MediaFlowProvider#makeflow failed to create MediaIntent from parse: %s
MediaFlowProvider#makeflow making flow from parse
_TtC26SiriPlaybackControlIntents12GroupingUtil
ambiguousGroupsSync
Found primary context and creating a 'this' DeviceGroup for the local device.
HomeAutomation entity contains reference for 'this'.
Multiple predicates found, filtering out .allDevices
Getting ambiguous groups for homeAutomationEntities: %s, includeFromEntities: %{bool}d
Could not find any groups for %s
%s has multiple groups but none are zone/room/accessory. GroupTypes: %s
Adding deduplicated group for %s: %@
Groups for %s: %@
Returning ambiguousGroups: %s
Adding a group includingTVs: %{bool}d for streams: %s
Adding a stream for paused devices: %@
Playing streams: %s
Selecting devices based on predicate: %s, devices: %s
No devices found in group: %s. Skipping this group.
Creating stream for groupId: %s from devicesInGroup: %s
Grouping devices into streams
FromEntity homeAutomationEntities: %s
Returning sourceStreams: %@
Selecting devices based on predicate: %s
Device selector returned devices: %s
_TtC26SiriPlaybackControlIntents42SetRepeatStateDeviceDisambiguationStrategy
SetRepeatStateDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
_TtC26SiriPlaybackControlIntents28SkipTimeHandleIntentStrategy
Did not receive valid duration
SkipTimeHandleIntentStrategy.makeIntentHandledResponse()
SkipTimeHandleIntentStrategy.makeFailureHandlingIntentResponse()
Could not create skip error params
callIntentHandledFailedUnsupportedCommand in SkipTimeDialogTemplatingService
callGenericIntentHandledFailed in SkipTimeDialogTemplatingService
UsoTask_decreaseBy_common_Setting#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_decreaseBy_common_Setting#shouldHandle Task is not setting: Not handling in controls
UsoTask_decreaseBy_common_Setting#shouldHandle Task is settings. Handling in controls
_TtC26SiriPlaybackControlIntents27SetShuffleStateFlowStrategy
SetShuffleStateFlowStrategy.makeIntentFromParse() called
SetShuffleStateFlowStrategy.actionForInput() called
UsoTask_enableSetting_common_MediaItem#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_enableSetting_common_MediaItem#shouldHandle Task is not mediaPlayer/setting: Not handling in controls
UsoTask_enableSetting_common_MediaItem#shouldHandle Task is settings. Handling in controls
UsoTask_enableSetting_common_MediaItem#shouldHandle Task is mediaPlayer. Handling in controls
settingConfirmation
settingAttribute
floatSettingQualifier
floatSettingValue
floatSettingVerb
Unsupported parse while creating SettingNLIntent: %s
Found language in intent, mapping it to SiriKit intent
handleWhatDidTheySayIntent
_TtC26SiriPlaybackControlIntents27WhatDidTheySayIntentHandler
timer
queue
assertion
What did they say timer
MediaQuotationIntentHandler
v24@?0@"RBSAssertion"8@"NSError"16
Acquired RB assertion
Error acquiring assertion %{public}s
Error disabling subtitles for 'What did they say' request
Successfully disabled subtitles for 'What did they say' request
Missing device in intent
Calculated %f seconds as the duration to skip back
Handling What did they say
Error while performing rewind command
Auto selected %s
Failed to retrieve first matched language from matchingLanguageOptions: %{public}s
Skipping language change due to already enabled language
Error getting matching subtitle options. All available languages returned
Error getting matching subtitle options: %{public}s
WhatDidTheySayIntentHandling
v32@0:8@"WhatDidTheySayIntent"16@?<v@?@"WhatDidTheySayIntentResponse">24
v32@0:8@"WhatDidTheySayIntent"16@?<v@?@"WhatDidTheySayDeviceResolutionResult">24
Transformer#quickStopToAlarmTransformer Task is not a valid QuickStop task, returning untransformed parse
com.apple.siri.DirectInvocation.Alarm.Stop
Transformer#quickStopToAlarmTransformer Reformed parse to stop alarm DirectInvocation: %s
Transformer#quickStopToTimerTransformer Task is not a valid QuickStop task, returning untransformed parse
com.apple.siri.DirectInvocation.Timer.Stop
Transformer#quickStopToTimerTransformer Reformed parse to stop timer DirectInvocation: %s
Transformer#quickStopToHomeAnnouncementTransformer Task is not a valid QuickStop task, returning untransformed parse
com.apple.siri.directInvocation.homeCommunication.stop
Transformer#quickStopToHomeAnnouncementTransformer Reformed parse to stop home announcement DirectInvocation: %s
_TtC26SiriPlaybackControlIntents36SetPlaybackSpeedHandleIntentStrategy
SetPlaybackSpeed.HandleIntentStrategy.makeFailureHandlingIntentResponse called
SetPlaybackSpeedHandleIntentStrategy.makeIntentHandledResponse() sending unsupported error dialog
PlaybackControls#AlreadyAtMaximumPlaybackSpeed
Sending alreadyAtMaximumPlaybackSpeed dialog
PlaybackControls#AlreadyAtMinimumPlaybackSpeed
Sending alreadyAtMinimumPlaybackSpeed dialog
Sending setPlaybackSpeedToValue dialog with speed magnitude: %f
PlaybackControls#IncreasePlaybackSpeed
Sending increasePlaybackSpeed dialog
PlaybackControls#DecreasePlaybackSpeed
Sending decreasePlaybackSpeed dialog
SetPlaybackSpeedHandleIntentStrategy.makeIntentHandledResponse()
_TtC26SiriPlaybackControlIntents20SeekTimeFlowStrategy
SeekTimeFlowStrategy.makeIntentFromParse() called
SeekTimeFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents28SeekTimeHandleIntentStrategy
Did not receive valid playheadPosition
SeekTimeHandleIntentStrategy.makeIntentHandledResponse()
SeekTimeHandleIntentStrategy.makeFailureHandlingIntentResponse()
_TtC26SiriPlaybackControlIntents16AceServiceHelper
aceService
Local device not found in devices to control. Skipping prepareForAudioHandoff
Local device found in devices to control. Asking to prepareForAudioHandoff
iOSOnly is set and the device is not an iOS device. Skipping prepareForAudioHandoff
VolumeControls#GetVolumeLevel
VolumeControls#AlreadyUnmuted
VolumeControls#SetVolumeLevelError
VolumeControls#SetVolumeLevel
isHomePodLocalOnly
requestedStateIsCurrentState
smartControlFarRooms
preferSpeakerName
requestedVolumeLevel
_TtC26SiriPlaybackControlIntents20AudioSessionProvider
audioSession
LanguageControls#AudioSetSuccessfully
LanguageControls#WhatDidTheySayHandled
LanguageControls#ConfirmSetAudioLanguage
LanguageControls#DeviceDisambiguationWhatDidTheySay
LanguageControls#DeviceDisambiguationSubtitles
LanguageControls#ConfirmSetSubtitleState
LanguageControls#ConfirmWhatDidTheySay
LanguageControls#DeviceDisambiguationAudioLanguage
LanguageControls#NoRelevantDevice
LanguageControls#AudioLanguageNotAvailable
LanguageControls#SubtitleAlreadyOn
LanguageControls#SubtitleFailedToToggle
LanguageControls#SubtitleSetSuccessfully
LanguageControls#SubtitleLanguageNotAvailable
isClosedCaptionRequest
isEnableSubtitles
deviceIsInferred
requestedLanguage
_TtC26SiriPlaybackControlIntents29SkipTimeConfirmIntentStrategy
Unexpected skip time direction
SkipTimeConfirmIntentStrategy.makePromptForConfirmation()
Parse-Extension#firstUsoTask PommesResponse doesn't contain audioExperience %s
Parse-Extension#firstUserDialogAct No user dialog act found in userParse.
Parse-Extension#firstUsoTask No user dialog act found in userParse.
Parse-Extension#firstUsoTask Could not convert user dialog act to task.
Parse-Extension#firstUsoTask No tasks found in input
Parse-Extension#isTurnOff Parse is "Turn off", returning true
Parse-Extension#isQuickStopParse Parse type is not a valid QuickStop parse
Parse-Extension#isQuickStopParse Parse is Quickstop uso parse, returning true
Parse-Extension#isQuickStopParse Parse is not a valid QuickStop parse
Parse-Extension#isQuickStopParse Parse is QuickStop direct invocation, returning true
_TtC26SiriPlaybackControlIntents26SetVolumeLevelFlowStrategy
SetVolumeLevel.FlowStrategy.makeIntentFromParse() called
SetVolumeLevel.FlowStrategy.actionForInput() called
No resolved devices were found in the intent. Skipping confirmation step
Intent indicates confirmation is not necessary
Confirm intent condition returning true
Checking confirm intent condition
DeviceQueryableIntent.shouldConfirm: %{bool}d
This is a WHA request. Skipping confirmation
shouldSkipUserConfirmation is set to true. Skipping confirmation step
ConfirmableIntent.shouldConfirm: %{bool}d
_TtC26SiriPlaybackControlIntents34GetVolumeLevelHandleIntentStrategy
GetVolumeLevel.HandleIntentStrategy.makeFailureHandlingIntentResponse() called
An error occurred in generating the error dialog for GetVolumeLevel: %{public}s
Did not receive device in intent
Did not receive the volume level
Current volume level in the intent response is: %s
GetVolumeLevel.HandleIntentStrategy.makeIntentHandledResponse() called
An error occurred in generating the dialog for GetVolumeLevel: %{public}s
Updating parameters for Volume control
_TtC26SiriPlaybackControlIntents26WhatDidTheySayFlowStrategy
WhatDidTheySayFlowStrategy#makeIntentFromParse unexpected parse type: %s
WhatDidTheySayFlowStrategy#makeIntentFromParse called
WhatDidTheySayFlowStrategy#makeIntentFromParse finished creating intent from parse
WhatDidTheySayFlowStrategy#actionForInput unexpected parse type: %s
WhatDidTheySayFlowStrategy#actionForInput called
_TtC26SiriPlaybackControlIntents23SkipContentFlowStrategy
SkipContentFlowStrategy.makeIntentFromParse() called
SkipContentFlowStrategy.actionForInput() called
UsoTask_stop_common_MediaItem#shouldHandle Sleep timers request. Not handling in controls
RecentTimeWindow
ShortResumeTimeWindow
_TtC26SiriPlaybackControlIntents22AddSpeakerFlowStrategy
AddSpeakerFlowStrategy.makeIntentFromParse() called
AddSpeakerFlowStrategy recieved unsupported parse.
AddSpeakerFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents42WhatDidTheySayDeviceDisambiguationStrategy
WhatDidTheySayDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
_TtC26SiriPlaybackControlIntents32SeekTimeUnsupportedValueStrategy
SeekTimeUnsupportedValueStrategy.makeUnsupportedValueOutput()
playheadPosition
Did not receive intent response for seekTime or devices not populated!
DeviceContext { routeId: 
, nowPlayingState: 
, nowPlayingTimestamp: 
, nowPlayingMediaType: 
exactMediaTypeFound: %{bool}d, isAmbiguousMediaType: %{bool}d, unknownMediaTypeQueued: %{bool}d, acceptAmbiguousMediaType: %{bool}d, acceptUnknownNowPlayingMediaType: %{bool}d. hasMatchingNowPlayingMediaTypeQueued: %{bool}d
Device: %@ is silent primary. Converting its nowPlayingState to .paused
_TtC26SiriPlaybackControlIntents36SetSubtitleStateHandleIntentStrategy
SetSubtitleStateHandleIntentStrategy.makeFailureHandlingIntentResponse()
setSubtitleState
LanguageControls#SubtitleAlreadyOff
SetSubtitleStateHandleIntentStrategy.makeIntentHandledResponse()
UsoTask_disable_common_Setting#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_disable_common_Setting#shouldHandle Task is not mediaPlayer/media/setting: Not handling in controls
UsoTask_disable_common_Setting#shouldHandle Task is settings. Handling in controls
UsoTask_disable_common_Setting#shouldHandle Task is media. Handling in controls
UsoTask_disable_common_Setting#shouldHandle Task is mediaPlayer. Handling in controls
Cannot convert value "%{public}s" to GroupType
_TtC26SiriPlaybackControlIntents31MoveSpeakerHandleIntentStrategy
MoveSpeakerHandleIntentStrategy.makeIntentHandledResponse() called
Destination #2: Destination type is unknown. Ignoring...
Destination #2: Destination is a room or zone. Setting speaker.firstRoom to the groupName
Destination #2: Destination is an accesory. Setting speaker.firstSpeakerName to the groupName
Destination #1: Destination type is unknown. Ignoring...
Destination resolved as the local device. Setting speaker.isInHere to true
More than 2 rooms mentioned in the intent. Setting speaker.hasThreeOrMoreRooms to true
User mentioned "everywhere" in the intent. Setting speaker.isAllSpeakers to true
No destinations found to populate speaker parameter.
Updating destination parameters for WHA dialog
MoveSpeakerHandleIntentStrategy.makeFailureHandlingIntentResponse() called
_TtC26SiriPlaybackControlIntents28SetSubtitleStateFlowStrategy
SetSubtitleStateFlowStrategy#makeIntentFromParse unexpected parse type in makeIntentFromParse: %s
SetSubtitleStateFlowStrategy#makeIntentFromParse failed to create MediaIntent from parse: %s
SetSubtitleStateFlowStrategy#makeIntentFromParse called
SetSubtitleStateFlowStrategy#makeIntentFromParse finished creating intent from parse
SetSubtitleStateFlowStrategy#actionForInput didn't recieve an NLv3IntentOnly or uso parse
SetSubtitleStateFlowStrategy#actionForInput called
Making views for watch
Making views for TV with confirmUtterance: %s and cancelUtterance: %s
Making SAUIConfirmationView with confirmLabel: %s and cancelLabel: %s
_TtC26SiriPlaybackControlIntents31PauseMediaConfirmIntentStrategy
PauseMediaConfirmIntentStrategy.makePromptForConfirmation() called
PauseMediaConfirmIntentStrategy.makeDialogForConfirmation()
Device type is nil. Returning nil for getLocalBundleIdentifier
Could not get bunlde id for type: %{public}s
Getting app identifier for mediaType %{public}s and deviceType: %{public}s
com.apple.TVMusic
com.apple.podcasts
com.apple.iBooks
com.apple.iBooksX
_TtC26SiriPlaybackControlIntents34AddSpeakerUnsupportedValueStrategy
AddSpeakerUnsupportedValueStrategy.makeUnsupportedValueOutput() called
_TtC26SiriPlaybackControlIntents44SetSubtitleStateDeviceDisambiguationStrategy
LanguageControls#DisambiguateDevices
SetSubtitleStateDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
handleVideoCaptioning
resolveSubtitleLanguageForVideoCaptioning
_TtC26SiriPlaybackControlIntents29SetSubtitleStateIntentHandler
Did not request to enable subtitles
Resolving language for set subtitle state
Disambiguating languages: %s
Resolving successfully with: %s
No languages matched
Received .matched response with languages: %s
Received .allAvailable response with languages: %s
Returning .alreadyEnabled response code
Received failure response when resolving language
The requested language was already enabled
The requested language was already disabled
SetSubtitleStateIntentHandling
v32@0:8@"SetSubtitleStateIntent"16@?<v@?@"SetSubtitleStateIntentResponse">24
v32@0:8@"SetSubtitleStateIntent"16@?<v@?@"SetSubtitleStateDeviceResolutionResult">24
v32@0:8@"SetSubtitleStateIntent"16@?<v@?@"SetSubtitleStateLanguageResolutionResult">24
_TtC26SiriPlaybackControlIntents35SetShuffleStateHandleIntentStrategy
Did not receive intent response for shuffle request or devices not populated!
Unexpected shuffle state found
SetShuffleStateHandleIntentStrategy.makeIntentHandledResponse()
SetShuffleStateHandleIntentStrategy.makeFailureHandlingIntentResponse()
unmapped NLMediaType case (
Cannot convert value "%{public}s" to NLMediaType
User asked to repeat but no devices in the home are playing. Retuning nil flow for the reader domain to handle the request instead
_TtC26SiriPlaybackControlIntents37SetSubtitleStateConfirmIntentStrategy
SetSubtitleStateConfirmIntentStrategy.makeDialogForConfirmation()
_TtC26SiriPlaybackControlIntents13QuickStopUtil
flowFactory
QuickStopUtil#quickStopResult Not a valid QuickStop parse, returning .unsupported
QuickStopUtil#quickStopResult Unable to fetch quick time context. Returning nothing to stop
QuickStopUtil#quickStopResult Didn't find anything to stop. Returning QuickStopNothingToStop flow
QuickStopUtil#quickStopResult Watch treating as pause request
QuickStopUtil#quickStopResult Didn't find anything to stop. Parse is a "Turn off" on HomePod, returning .unsupported for HomeAutomation to handle
QuickStopUtil#quickStopResult Local device has running timer. Reforming to timer domain
QuickStopUtil#quickStopResult Far device has playing media. Returning PauseMedia flow
QuickStopUtil#quickStopResult Far device has firing %s. Reforming to %s domain
QuickStopUtil#quickStopResult Local or nearby device has playing media. Returning PauseMedia flow
QuickStopUtil#quickStopResult Nearby device has firing %s. Reforming to %s domain
QuickStopUtil#quickStopResult Barged in over Home Anouncement. Reforming to Home Communication to stop the announcement
QuickStopUtil#quickStopResult Barged in over Siri. Dismiss with no action
QuickStopUtil#quickStopResult Local device has firing %s. Reforming to %s domain
QuickStopUtil#quickStopResult Fetching context
QuickStopUtil#quickStopResult Parse is a "Turn off" on unsupported device, returning .unsupported
ControlsFlowProvider#mostRelevantFiringItemDomain Most recent firing item should not be empty, returning nil
QuickStopUtil#mostRelevantFiringItemDomain Most recently firing item is timer within %s proximity
QuickStopUtil#mostRelevantFiringItemDomain Most recently firing item is alarm within %s proximity
QuickStopUtil#mostRelevantFiringItemDomain No firing alarms/timers found within %s proximity
User asked to restart but no devices in the home are playing. Retuning nil flow for Settings domain to handle the request instead
_TtC26SiriPlaybackControlIntents40SetAudioLanguageUnsupportedValueStrategy
SetAudioLanguageUnsupportedValueStrategy.makeUnsupportedValueOutput()
HandleNLContextUpdateProvider#makeHandledContext Making handled context using devices
HandleNLContextUpdateProvider#makeHandledContext Making handled context using device queries
HandleNLContextUpdateProvider#makeHandledContext making handled context
_TtC26SiriPlaybackControlIntents43SetShuffleStateDeviceDisambiguationStrategy
SetShuffleStateDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
_TtC26SiriPlaybackControlIntents34SetRepeatStateHandleIntentStrategy
Did not receive intent response for repeat request or devices not populated!
Unexpected repeat mode during handle dialog
SetRepeatStateHandleIntentStrategy.makeIntentHandledResponse()
SetRepeatStateHandleIntentStrategy.makeFailureHandlingIntentResponse()
Task: %s -- is an add to library task and not addSpeaker. This is not a controls task
_TtC26SiriPlaybackControlIntents38WhatDidTheySayUnsupportedValueStrategy
WhatDidTheySayUnsupportedValueStrategy.makeUnsupportedValueOutput()
Unable to create SettingIntent from parse, ignoring input
GetVolumeLevel.shouldHandle() called
_TtC26SiriPlaybackControlIntents26QuickStopNothingToStopFlow
QuickStopNothingToStopFlow#execute generating dialog and sending a stop command to the local device just in case...
QuickStopNothingToStopFlow#execute DialogEngine returned an error
QuickStopNothingToStopFlow#execute dialog generated successfully
ControlsFlowProviding#findFlowFor default implementation should not be used
ControlsFlowProviding#makeAmbiguousShuffleFlow default implementation should not be used
ControlsFlowProviding#makeAmbiguousPlayFlow default implementation should not be used
ControlsFlowProviding#makeFlow default implementation should not be used
mediaPlayerReference
com.apple.siri.nl.MediaPlayer
UsoTask_enable_common_Setting#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_enable_common_Setting#shouldHandle Task is not mediaPlayer/media/setting: Not handling in controls
UsoTask_enable_common_Setting#shouldHandle Task is settings. Handling in controls
UsoTask_enable_common_Setting#shouldHandle Task is media. Handling in controls
UsoTask_enable_common_Setting#shouldHandle Task is mediaPlayer. Handling in controls
_TtC26SiriPlaybackControlIntents28SetAudioLanguageFlowStrategy
SetAudioLanguageFlowStrategy#makeIntentFromParse unexpected parse type: %s
SetAudioLanguageFlowStrategy#makeIntentFromParse failed to create MediaIntent from parse: %s
SetAudioLanguageFlowStrategy#makeIntentFromParse called
SetAudioLanguageFlowStrategy#makeIntentFromParse finished creating intent from parse
SetAudioLanguageFlowStrategy#actionForInput received unexpected parse type: %s
SetAudioLanguageFlowStrategy#actionForInput setAudioLanguageFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents26SetRepeatStateFlowStrategy
SetRepeatStateFlowStrategy#makeIntentFromParse Received unexpected parse: %s
SetRepeatStateFlowStrategy.makeIntentFromParse() called
SetRepeatStateFlowStrategy.actionForInput() called
_TtC26SiriPlaybackControlIntents36SeekTimeDeviceDisambiguationStrategy
SeekTimeDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
handleMoveSpeakerIntent
resolveMoveSpeakerSource
resolveMoveSpeakerDestiantions
MoveSpeakerIntentHandler.confirm() called
_TtC26SiriPlaybackControlIntents24MoveSpeakerIntentHandler
Could not find a device query. Returning error
MoveSpeakerIntentHandler.resolveDestination() called
MoveSpeaker destination device is not TV or HomePod. Returning an error
Could not resolve any destination for move speaker request.
MoveSpeakerIntentHandler.resolveSource()
Multiple sources found for move request.
Could not find a source stream for the move request.
MoveSpeakerIntentHandler.handle() called
Success moving devices
Failed to move the source stream to the expected destinations. Error: %s
MoveSpeakerIntentHandling
v32@0:8@"MoveSpeakerIntent"16@?<v@?@"MoveSpeakerIntentResponse">24
v32@0:8@"MoveSpeakerIntent"16@?<v@?@"MoveSpeakerSourceResolutionResult">24
v32@0:8@"MoveSpeakerIntent"16@?<v@?@"NSArray">24
mediaPlaybackSpeed
No mediaType found the intent.
MediaType: %s found in the intent but it was not explicitly mentioned by the user. Returning nil mediaType
Returning mediaType = %s
Getting MediaType
MediaType node is not inferred, or could not find origin details. isMediaTypeExplicitlyMentioned: true.
MediaType inferred, but no explanation found or explanation shows it was mentioned by the user. isMediaTypeExplicitlyMentioned: true
USER_DIDNT_ACTUALLY_SAY_MUSIC
MediaType inferred, and the user didn't explicitly mention it. This is possibly a SmartPlay reformation. isMediaTypeExplicitlyMentioned: false
mediaPlayerConfirmation
mediaPlayerSkipInterval
mediaPlayerBoolSettingState
mediaPlayerBoolSettingVerb
Unsupported parse while creating MediaPlayerNLv3Intent: %s
UsoEntityCommonTimeUnit#getPeriod case not yet implemented %s
DeviceClassNumber
_TtC26SiriPlaybackControlIntents29SeekTimeConfirmIntentStrategy
SeekTimeConfirmIntentStrategy.makePromptForConfirmation()
_TtC26SiriPlaybackControlIntents35WhatDidTheySayConfirmIntentStrategy
WhatDidTheySayConfirmIntentStrategy.makeDialogForConfirmation()
_TtC26SiriPlaybackControlIntents14DialogProvider
PlaybackControls#UnsupportedOnPlatform
PlaybackControls#SetPlaybackSpeedToValue
PlaybackControls#UnsupportedDestinationSpeaker
PlaybackControls#SpeakerAdd
PlaybackControls#CannotSkipAdvertisement
PlaybackControls#CannotShuffle
PlaybackControls#UnableToSeekToPlaybackPosition
PlaybackControls#SkipBackward
PlaybackControls#CannotSkipBackward
PlaybackControls#CannotSkipForward
PlaybackControls#CannotSkipLimitExceeded
PlaybackControls#SkipToPrevious
PlaybackControls#SkipToNext
PlaybackControls#ConfirmShuffleState
PlaybackControls#DeviceDisambiguationShuffleState
PlaybackControls#ConfirmSkipContent
PlaybackControls#DeviceDisambiguationSkipContent
PlaybackControls#ConfirmSkipTime
PlaybackControls#DeviceDisambiguationSkipTime
PlaybackControls#SkipForward
PlaybackControls#ToggleShuffle
PlaybackControls#ConfirmRepeatState
PlaybackControls#DeviceDisambiguationRepeat
PlaybackControls#ToggleRepeat
PlaybackControls#CannotRepeat
PlaybackControls#NoSpeakerFound
PlaybackControls#SpeakerFailedOperation
PlaybackControls#SpeakerMove
PlaybackControls#ConfirmSeekTime
PlaybackControls#DeviceDisambiguationSeekTime
PlaybackControls#Seek
PlaybackControls#ConfirmResume
PlaybackControls#DeviceDisambiguationResume
PlaybackControls#Resume
PlaybackControls#ConfirmPause
PlaybackControls#DeviceDisambiguationPause
PlaybackControls#Paused
Cannot create DialogDeviceType from unknown deviceState.
speakerOperation
isMultipleSpeakers
skipBackwardDuration
isShuffleEnabled
isSkipToPrevious
skipForwardDuration
isDestinationMissing
DeviceQuery#toRREntity UsoBuilderConversionUtils.convertEntityBuilderToEntity creating UsoEntity: %s
DeviceQuery#toUsoBuilder From entity found, but donation blocked by rdar://88971898
_TtC26SiriPlaybackControlIntents36SetShuffleStateConfirmIntentStrategy
SetShuffleStateConfirmIntentStrategy.makeDialogForConfirmation()
_TtC26SiriPlaybackControlIntents15PatternProvider
patternExecuter
Got error trying to encode viewData
Setting sash bundleIdentifier to: %{public}s
UsoTask_play_common_MediaItem#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_play_common_MediaItem#shouldHandle Task is not mediaPlayer: Not handling in controls
UsoTask_play_common_MediaItem#shouldHandle Task is mediaPlayer. Handling in controls
UsoTask_play_common_MediaItem#shouldHandle This is an addSpeaker request, handling in controls
_TtC26SiriPlaybackControlIntents32SkipContentConfirmIntentStrategy
Unexpected skip content direction
SkipContentConfirmIntentStrategy.makePromptForConfirmation() called
SkipContentConfirmIntentStrategy.makeDialogForConfirmation()
_TtC26SiriPlaybackControlIntents22AnalyticsServiceLogger
deviceResolutionAnalytics
QuickStopLocalStoppedFlow
QuickStopNothingToStopFlow
AnalyticsServiceLogger.logSELFCrossDeviceCommandEndedEvent expects a valid requestId. Returning.
AnalyticsServiceLogger.logSELFCrossDeviceCommandStartedEvent expects a valid requestId. Returning.
@"NSDictionary"8@?0
_TtC26SiriPlaybackControlIntents11ContextUtil
autoResumableProximitiesInLongWindow
autoResumableProximitiesInShortWindow
selectMostRelevantContexts: Selecting playing immediate device context(s): %s
selectMostRelevantContexts: Found same room devices with video up on the screen, returning those devices: %s
selectMostRelevantContexts: No devices selected
selectMostRelevantContexts: Selecting the playing primary device context
Item: %s has invalid timestamp. Discarding...
Window start date not specified. Returning all contexts
Contexts in window: %s
Filtering %s by window: %s
Excluding context %@ with no timestamp
Contexts matching playState: %s
Filtering %s by playstate: %s
Excluding item %s with no context
Selected pausable devices: %s
Could not find immediate devices, look near and far
Selecting primary device context
Skipping item with missing proximity: %s
Devices %s are autoresumable. Setting skipConfirmation to true
Most recent resumable context in short window = %{public}s
Unknown controlType: %s, no selectedDeviceContexts
Adding back local device to the filtered resumable devices
Smart Selecting devices of type: %{public}s
Auto resumable device found, don't disambiguate with local!
No resumable device found in long resumable window. Include local device
Local device is playing. Don't disambiguate with local device since it is already resumed.
The resumable devices contain the primary device. Don't include local device again
Selected and grouped devices: %s
Video control received on homepod! Removing this device (primary) if it was selected
Adding device types for devices in room %s
Could not find device contexts for group %s...skipping this group
Group %s: unique rooms: %s
Error getting the first room name in a group. groupRoomCount %ld...skipping this group
Unique rooms in group: %s
Group %s: Skipping context %@
Grouping devices in group %s
Group %s has primary or immediate device. Adding it.
Devices in group after silent primary filtration: %s
No devices found in group after final primary filtration. Skipping this group
Single device in group, adding it to grouped device list
Cannot group empty device list
Error generating group name...skipping this group
Picking device %@ as the group representing device
Device %@ is silent primary, isTV: %{bool}d. keepSilentPrimary: %{bool}d
No devices in group for mediaSystemId: %s...skipping it
Only one device is in the group for mediaSystemId: %s. Adding it
Devices grouped by mediaSystem: %s
Cannot group empty device list by media system
!!!!! Simulated context is being used !!!!!
_TtC26SiriPlaybackControlIntents44SetAudioLanguageDeviceDisambiguationStrategy
SetAudioLanguageDeviceDisambiguationStrategy.makeDialogForDisambiguation() called
_TtC26SiriPlaybackControlIntents31SkipContentHandleIntentStrategy
SkipContentHandleIntentStrategy.makeIntentHandledResponse()
SkipContentHandleIntentStrategy.makeFailureHandlingIntentResponse()
SkipContentHandleIntentStrategy.callIntentHandledFailedUnsupportedCommand()
SkipContentHandleIntentStrategy.callGenericIntentHandledFailed()
handlePauseMedia
Resolving devices for pause media
_TtC26SiriPlaybackControlIntents23PauseMediaIntentHandler
PauseMediaIntentHandler#resolveDevices Disambiguating between devices: %s
PauseMediaIntentHandler#resolveDevices Success resolving devices: %s
PauseMediaIntentHandler#resolveDevices .noMatchingDevicesFound
PauseMediaIntentHandler#resolveDevices Error resolving devices: %s
No devices found in intent, returning nothing is playing, but also sending a pause command to the local device just in case...
Local device selected with unknown playstate. Returning nothing is playing, but also sending a pause command to the local device just in case...
Handling pause media
Found non ambiguous target entities in the intent. Applying a remove from group command
Found ambiguous target entities in the intent. Applying a pause command
Local device targeted for pause on non tvOS platform. Applying a pause command
Handling pause for devices: %@
Pausing everywhere using context %@
Failed to handle Pause intent
Executing pause for devices: %s, deviceContext: %s
PauseMediaIntentHandling
v32@0:8@"PauseMediaIntent"16@?<v@?@"PauseMediaIntentResponse">24
v32@0:8@"PauseMediaIntent"16@?<v@?@"NSArray">24
UsoTask_play_uso_NoEntity#shouldHandle no referenced setting found in task. Not handling in Controls
UsoTask_play_uso_NoEntity#shouldHandle Task is not mediaPlayer: Not handling in controls
UsoTask_play_uso_NoEntity#shouldHandle Task is mediaPlayer. Handling in controls
UsoTask_play_uso_NoEntity#shouldHandle This is an addSpeaker request, handling in controls
Initializing SetShuffleStateFlow
RCHChildFlowProducers.setShuffleStateFlowProducers() called
Initializing AddSpeakerFlow with intent
RCHChildFlowProducers.addSpeakerFlowProducers() called
Initializing ResumeMediaFlow with intent
RCHChildFlowProducers.resumeMediaFlowProducers() called
Initializing WhatDidTheySayFlow
RCHChildFlowProducers.whatDidTheySayFlowProducers() called
Initializing SetSubtitleStateFlow
RCHChildFlowProducers.setSubtitleStateFlowProducers() called
SiriPlaybackControlIntents/RCHChildFlowProducers+SetSubtitleState.swift
Unexpected parameter while generating disambiguation strategy
getDisambiguationStrategy() for SetSubtitleState called
Initializing SetAudioLanguageFlow
RCHChildFlowProducers.setAudioLanguageFlowProducers() called
SiriPlaybackControlIntents/RCHChildFlowProducers+SetAudioLanguage.swift
getDisambiguationStrategy() for SetAudioLanguage called
Initializing MoveSpeakerFlow
RCHChildFlowProducers.moveSpeakerFlowProducers() called
Initializing AddSpeakerFlow
Initializing ResumeMediaFlow
Initializing SkipTimeFlow
RCHChildFlowProducers.skipTimeFlowProducers() called
Initializing SkipContentFlow
RCHChildFlowProducers.skipContentFlowProducers() called
Initializing SetRepeatStateFlow
RCHChildFlowProducers.setRepeatStateFlowProducers() called
Initializing SeekTimeFlow
RCHChildFlowProducers.seekTimeFlowProducers() called
Initializing SetPlaybackSpeedFlow
RCHChildFlowProducers.setPlaybackSpeedFlowProducers() called
Initializing SetVolumeLevelFlow
RCHChildFlowProducers.setVolumeLevelFlowProducers() called
Initializing GetVolumeLevelFlow
RCHChildFlowProducers.getVolumeLevelFlowProducers() called
Initializing PauseMediaFlow
RCHChildFlowProducers.pauseMediaFlowProducers() called
Initializing QuickStopLocalStoppedFlow
Initializing QuickStopNothingToStopFlow
Amending intent with playbackSpeed: %ld and magnitude: %f
mediaConfirmation
mediaQuestionAttributes
Unsupported parse while creating MediaNLv3Intent: %s
MediaTypeProvidingIntent metricsMediaType: %s
DeviceSelectableIntent metricsEligibleDeviceCount: %s
DeviceQueryableIntent metricsIsWHAIntent: %{bool}d
Default metricsMediaType: .unknown
SingleDeviceSelectableIntent metricsEligibleDeviceCount: %s
Default metricsIsWHAIntent: nil
MoveSpeaker metricsEligibleDeviceCount: %ld
AddSpeaker metricsEligibleDeviceCount: %ld
com.apple.siri.nl.Setting
UsoTask_stop_uso_NoEntity#shouldHandle Sleep timers request. Not handling in controls
handleSeekTimeMedia
Resolving devices for seek time
Playhead position doesn't exist in intent.
Multiple devices in intent, can't get duration info
Resolving playHeadPosition for seek time
_TtC26SiriPlaybackControlIntents21SeekTimeIntentHandler
Content has no duration, can't skip to end
Missing duration info or elapsed duration is within 15 seconds of the end. Seeking to end of duration
SeekTimeIntentHandler#resolveDevices Disambiguating between devices: %s
SeekTimeIntentHandler#resolveDevices Success resolving devices: %s
SeekTimeIntentHandler#resolveDevices .noMatchingDevicesFound
SeekTimeIntentHandler#resolveDevices Error resolving devices: %s
Could not find time to seek in intent or it was invalid, returning failure
Can't seek to end on multiple devices, returning failure
Seeking to: %@
Handling seek to time
responseCodeFromResult for SeekTimeIntentHandler
SeekTimeIntentHandling
v32@0:8@"SeekTimeIntent"16@?<v@?@"SeekTimeIntentResponse">24
v32@0:8@"SeekTimeIntent"16@?<v@?@"NSArray">24
v32@0:8@"SeekTimeIntent"16@?<v@?@"SeekTimePlayheadPositionResolutionResult">24
@24@0:8@16
@40@0:8@16@24@32
T@"NSArray",N,D,C
deviceContext
isDirectInvocation
T@"NSNumber",N,D,&
mediaType
targetBundleIdentifier
T@"NSString",N,D,C
T@"SignedDuration",N,D,&
deviceQueries
@24@0:8q16
direction
Tq,N,Vcode
device
T@"Device",N,D,&
Tq,N,D
language
T@"LanguageOption",N,D,&
type
@32@0:8q16@24
q16@0:8
startTime
T@"NSDate",N,D,C
shouldStartPlaybackAfterSeek
isSkipToEnd
shuffleState
repeatState
code
@24@0:8:16
currentVolumeLevel
volumeLevel
T@"VolumeLevel",N,D,&
source
T@"MediaStream",N,D,&
destinations
roomDimmingState
v24@0:8q16
SetRoomDimmingStateIntentHandling
v32@0:8@"SetRoomDimmingStateIntent"16@?<v@?@"SetRoomDimmingStateIntentResponse">24
Td,N,D
playbackSpeedType
SiriPlaybackControlIntents/Device.swift
B16@0:8
name
roomName
zoneNames
currentHome
currentRoom
numberOfAffectedRooms
isDeviceSelectedUsingContext
context
T@"DeviceContext",N,D,&
disambiguated
confirmed
skipConfirmation
mediaSystemId
isEndpoint
displayableName
isPreResolved
SiriPlaybackControlIntents/SignedDuration.swift
duration
SiriPlaybackControlIntents/DeviceContext.swift
routeId
proximity
nowPlayingState
nowPlayingTimestamp
groupId
silentPrimary
SiriPlaybackControlIntents/LanguageOption.swift
languageIdentifier
languageTag
isActive
SiriPlaybackControlIntents/DeviceQuery.swift
accessoryName
zoneName
placeHintString
deviceQuantifierString
serviceName
serviceGroup
deviceTypeString
referenceString
fromEntity
SiriPlaybackControlIntents/VolumeLevel.swift
volumeSettingValue
volumeSettingState
volumeSettingUnit
volumeSettingQualifier
resolvedVolumeOutput
currentVolumeOutput
volumeSettingType
SiriPlaybackControlIntents/DeviceGroup.swift
groupName
streams
includesTVs
excludeGroup
@32@0:8@16@24
SiriPlaybackControlIntents/MediaStream.swift
devices
groupLeader
SiriPlaybackControlIntents/PlaybackSpeed.swift
speedMagnitude
So8NSStringC
$sSY
$ss21_ObjectiveCBridgeableP
$s26SiriPlaybackControlIntents17ControlsMediaTaskP
$s11SiriKitFlow19IntentErrorHandlingP
$s11SiriKitFlow026RouteConfirmIntentResponseC8StrategyP
$s11SiriKitFlow28IntentExtensionCommunicatingP
$s26SiriPlaybackControlIntents25InProcessHandlingStrategyP
_pGIegg_
$s11SiriKitFlow27ParameterResolutionHandlingP
$s11SiriKitFlow019NeedsDisambiguationC8StrategyP
$s26SiriPlaybackControlIntents28DeviceDisambiguationStrategyP
So24INIntentResolutionResultC
_pGIegn_
Iegn_
_pIego_
Gz_Xx
GIegg_
SaySSGIegg_
SaySSGIegn_
ySSG
yyXlG
So22SIRINLUSystemDialogAct_p
So20SIRINLUUserDialogAct_p
_pSg
yypG
SSSg
So20SAServerBoundCommand_p
So20SAClientBoundCommand_p
_pGIegn_
So8NSObjectCSg
Sg_ABt
ySSG
_pSg
SaySo19SAUIHideSiriOverlayCG
_pGIegn_
_pSg
_pGIegn_
_pGIegn_
_pGIegn_
_pGIegn_
ySSSgG
ySSSgG
_pGIegn_
_pGIegn_
_pGIegn_
_pGIegn_
ySDyS2SGG
SDyS2SG
SaySo22AFServiceDeviceContextCGIegg_
SaySo22AFServiceDeviceContextCGIegn_
SaySSG
GIegg_
GIegn_
3key_So12AFClockTimerC5valuet
ypSg
GIegg_
GIegn_
$s26SiriPlaybackControlIntents28DefaultConfirmIntentStrategyP
10IntentType
17NLContextProvider
12NLIntentType
31DisambiguationItemContainerType
10IntentType
17NLContextProvider
12NLIntentType
Sg_ABt
Sg_ABt
Sg_ABt
GIegg_
SnySiG
GIegg_
Gz_Xx
So7NSArrayCIeyBy_
GIegg_
Iegg_
GIegg_
GIegg_
ySay
G_Sbt
GIegg_
ySay
G_Sbt
GIegn_
GIegg_
Iegg_
GIegg_
GIegg_
GIegg_
ySay
GIegg_
ySay
GIegn_
SDySSypG
$s26SiriPlaybackControlIntents20ControlsSettingsTaskP
$s11SiriKitFlow012HandleIntentC8StrategyP
So22PatternExecutionResultC
_pIegHozo_
Sbz_Xx
z_Xx
SgSSSgIeggg_
SSIegg_
Sg_ABt
$s11SiriKitFlow0C0P
Iegn_
$s26SiriPlaybackControlIntents24DeviceNLContextProvidingP
SiSg
_pGIegg_
$s26SiriPlaybackControlIntents20UserDefaultsProviderP
So14NSUserDefaultsCSg
GIegg_
Iegg_
So8NSObjectC
So8NSNumberCSg
IeyBy_
IeyBy_
Iegg_
_pSg
$ss12CaseIterableP
Iegg_
GIegg_
ySdG
IeyBy_
_pSg
$s26SiriPlaybackControlIntents16AnalyticsServiceP
So27FLOWSchemaFLOWDomainContextCSg
_pSg
SaySo22AFServiceDeviceContextCG
ySS_So8NSObjectCtG
ySS_So8NSNumberCtG
ySSSo8NSObjectCG
$s26SiriPlaybackControlIntents13ContextIntentP
So8INIntentC
$s11SiriKitFlow010NeedsValueC8StrategyP
Iegg_
Iegn_
IeyBy_
So16INIntentResponseC
yxq_G
G0R2_
G1R2_
_pGIegn_
Sg_ABt
Iegg_
Iegn_
IeyBy_
_pGIegg_
$s26SiriPlaybackControlIntents21SmartSelectableIntentP
$s11SiriKitFlow017NeedsConfirmationC8StrategyP
$s26SiriPlaybackControlIntents32DefaultNeedsConfirmationStrategyP
SaySo9SAAceViewCG
Iegg_
ySay
Sg_ABt
Sg_ABt
$s26SiriPlaybackControlIntents17ConfirmableIntentP
5value_t
_pSg
$s26SiriPlaybackControlIntents11ContextItemP
13IntentHandler
$s26SiriPlaybackControlIntents15PatternExecuterP
_pSg
Iegg_
Iegn_
IeyBy_
_pGIegg_
Iegg_
Iegn_
IeyBy_
Iegg_
Iegn_
IeyBy_
GIegg_
GIegn_
_pGIegg_
_pGIegn_
z_Xx
SbIegy_
G13deviceContext_t
$s26SiriPlaybackControlIntents27HomeAutomationCapableIntentP
SDyS2SGIegn_
ySSG
26SiriPlaybackControlIntentsyHCg_G
26SiriPlaybackControlIntentsyHCg_G
26SiriPlaybackControlIntentsyHCg_G
ySS_SaySS_SbtGtG
ySS_SbtG
ySS_SaySSGtG
So8SAUISashC
So13SACardSnippetC
ySaySo9SAAceViewCG
_pGIegg_
$s26SiriPlaybackControlIntents18NLContextProvidingP
_pGIegg_
Sg_ABt
SdSg
SaySo13SABaseCommandCG
SaySo13SABaseCommandCGz_Xx
$s11SiriKitFlow013ConfirmIntentC8StrategyP
_pSg
$s26SiriPlaybackControlIntents15DialogProvidingP
_pGIegn_
SS4name_t
Iegg_
Iegn_
IeyBy_
Iegg_
Iegn_
IeyBy_
Iegg_
Iegg_
Iegn_
IeyBy_
IeyBy_
$s26SiriPlaybackControlIntents31MachineUtteranceProvidingIntentP
Iegg_
Iegg_
IeyBy_
IeyBy_
Sg_ABt
$s26SiriPlaybackControlIntents23AnalyticsServiceLoggingP
_pGIegg_
Iegg_
Iegn_
IeyBy_
yxGG
$s11SiriKitFlow019NeedsDisambiguationC0P
$s11SiriKitFlow016UnsupportedValueC8StrategyP
ScPSg
_pIegHrzo_
ytIeghHr_
yxq_G
G0R0_
G1R0_
So17OS_dispatch_queueC
Gz_Xx
So17OS_dispatch_groupC
_pGIegg_
Iegg_
Iegg_
Iegn_
IeyBy_
So24OS_dispatch_source_timer_pSg
So17OS_dispatch_queueCSg
So12RBSAssertionCSg
IeyBy_
$s26SiriPlaybackControlIntents21UserEntitiesProvidingP
_pGIegg_
$s26SiriPlaybackControlIntents21AudioSessionProvidingP
So14AVAudioSessionC
_pGIegg_
_pGIegg_
_pGIegg_
$s26SiriPlaybackControlIntents12RCHNamespaceP
_pGIegg_
$s26SiriPlaybackControlIntents24LanguageSelectableIntentP
Sg_ABt
$s26SiriPlaybackControlIntents27DeviceDisambiguatableIntentP
$s26SiriPlaybackControlIntents22DeviceSelectableIntentP
$s26SiriPlaybackControlIntents28SingleDeviceSelectableIntentP
$s26SiriPlaybackControlIntents23ControlsMediaPlayerTaskP
_pGIegg_
So16SASTTemplateItem_p
_yptG
$s26SiriPlaybackControlIntents20AppBundleIdentifiersP
_pSg
Iegg_
Iegn_
IeyBy_
Iegg_
Iegg_
Iegn_
IeyBy_
IeyBy_
_SStG
ySSypG
SS_ypt
_ypt
ySS_
ySSSo8NSNumberCG
ySSSaySS_SbtGG
ySSSaySSGG
$s26SiriPlaybackControlIntents24ControlsDialogParametersP
$s26SiriPlaybackControlIntents29SmartControlsDialogParametersP
$s26SiriPlaybackControlIntents31WholeHouseAudioDialogParametersP
$s26SiriPlaybackControlIntents18QuickStopUtilitiesP
Sg_ABt
GIegg_Iegg_
12NLIntentType
$s26SiriPlaybackControlIntents28CommonIntentResolutionResultP
ySi_
$s26SiriPlaybackControlIntents24MediaTypeProvidingIntentP
$s26SiriPlaybackControlIntents21ControlsFlowProvidingP
$s26SiriPlaybackControlIntents32SourceDestinationResolvingIntentP
_pGIegg_
$s26SiriPlaybackControlIntents21DeviceQueryableIntentP
_pGIegg_
$s26SiriPlaybackControlIntents27ConfirmationCapableNLIntentP
Iegg_
Iegn_
IeyBy_
Iegg_
Iegn_
IeyBy_
GIegg_
GIegn_
26SiriPlaybackControlIntentsyHCg_G
$s26SiriPlaybackControlIntents35HomeAutomationEntityProvidingIntentP
Sg_ABt
4info_
6resultt
4info_
6reasont
GSg11deviceUnits_SaySo22AFServiceDeviceContextCGSg8contexts
4infot
SDySSSo8NSObjectCG
So31AFCoreAnalyticsCrossDeviceEventC
$s26SiriPlaybackControlIntents16ContextProvidingP
ySnySiGG
ySSSgSay
ySSSgSay
Ieg_
ySSSgSay
ySSSgSay
ySdG
z_Xx
z_Xx
Iegg_
Iegn_
IeyBy_
$s26SiriPlaybackControlIntents19ControlsFlowFactoryP
GIegg_
GIegg_
GIegg_
ABSo24INIntentResolutionResultCSSSi
yABGIegg_Ieggggggyg_
GIegg_
ABSo24INIntentResolutionResultCSSSi
yABGIegg_Ieggggggyg_
GIegg_
GIegg_
GIegg_
GIegg_
GIegg_
GIegg_
$s26SiriPlaybackControlIntents13SharedUsoTaskP
So8INObjectC
8ItemType
$s26SiriPlaybackControlIntents21MetricsLoggableIntentP
Iegg_
Iegn_
IeyBy_
Iegg_
IeyBy_
$s26SiriPlaybackControlIntents24PauseMediaIntentHandlingP
$s26SiriPlaybackControlIntents25ResumeMediaIntentHandlingP
$s26SiriPlaybackControlIntents22SkipTimeIntentHandlingP
$s26SiriPlaybackControlIntents25SkipContentIntentHandlingP
$s26SiriPlaybackControlIntents30SetSubtitleStateIntentHandlingP
$s26SiriPlaybackControlIntents30SetAudioLanguageIntentHandlingP
$s26SiriPlaybackControlIntents28WhatDidTheySayIntentHandlingP
$s26SiriPlaybackControlIntents22SeekTimeIntentHandlingP
So30INTimeIntervalResolutionResultC
$s26SiriPlaybackControlIntents29SetShuffleStateIntentHandlingP
$s26SiriPlaybackControlIntents28SetRepeatStateIntentHandlingP
$s26SiriPlaybackControlIntents28GetVolumeLevelIntentHandlingP
$s26SiriPlaybackControlIntents28SetVolumeLevelIntentHandlingP
$s26SiriPlaybackControlIntents24AddSpeakerIntentHandlingP
$s26SiriPlaybackControlIntents25MoveSpeakerIntentHandlingP
$s26SiriPlaybackControlIntents33SetRoomDimmingStateIntentHandlingP
$s26SiriPlaybackControlIntents03SetB19SpeedIntentHandlingP
So24INDoubleResolutionResultC
So22INEnumResolutionResultC
So24INObjectResolutionResultC
_rawValue
RawValue
_ObjectiveCType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
sharedContextService
deviceSelector
deviceState
contextUtil
groupingUtil
analyticsService
aceService
localizationProvider
aceServiceHelper
unknown
noMatchingDevicesFound
success
disambiguate
failure
dialogProvider
checkWiFiHint
deviceState
dialogProvider
patternProvider
userDefaultsProvider
analyticsService
featureFlagProvider
playbackController
IntentType
IntentHandler
IntentResponseType
aceServiceInvoker
deviceState
dialogProvider
analyticsService
ExitValue
hasRoutes
hasThreeOrMoreRooms
isAllSpeakers
isInHere
firstSpeakerName
secondSpeakerName
firstRoom
secondRoom
otherRoomsCount
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
flowFactory
userDefaults
deviceSelector
accessoryVolumeController
deviceState
playbackController
userDefaultsProvider
audioSession
aceServiceHelper
handleResponseCode
boundedVolumeLevel
audio
subtitles
closedCaptioning
subtitlesForDeafHardHearing
previousAudio
enable
disable
getAttributeValue
verb
questionAttributes
viewOption
language
confirmationValue
listPosition
roomNames
homeName
zoneNames
accessoryNames
reference
serviceNames
serviceGroups
fromEntities
deviceQuantifier
destinationDeviceId
deviceType
placeHint
AllCases
RawValue
playbackController
deviceSelector
aceServiceHelper
deviceState
multiplier
music
podcast
playlist
musicVideo
song
audioBook
video
iTunesU
compilation
album
tvShow
show
radioShow
podcastStation
musicPlaylist
station
episode
extendedPlay
longPlay
single
genre
news
ringtone
sounds
movie
again
ending
toggle
enable
disable
play
pause
resume
stop
skip
previous
seek
skipForward
skipBackward
repeat
restart
shuffle
moveSpeaker
addSpeaker
removeSpeaker
noVerb
setPlaybackSpeedToValue
setPlaybackSpeedFaster
setPlaybackSpeedSlower
verb
boolSettingVerb
boolSettingState
skipInterval
attributes
confirmationValue
reference
listPosition
mediaType
mediaPlaybackSpeed
roomNames
homeName
zoneNames
accessoryNames
serviceNames
serviceGroups
fromEntities
deviceQuantifier
destinationDeviceId
deviceType
placeHint
AllCases
RawValue
analyticsServiceLogger
contextProvider
siriEnvironment
playbackController
confirmation
disambiguation
direct
deviceState
volumeControlsDialogProvider
analyticsService
IntentType
IntentResponseType
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
deviceState
dialogProviding
languageDialogProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
volumeControlsDialogProvider
deviceState
analyticsService
IntentType
IntentHandler
IntentResponseType
deviceState
dialogProvider
analyticsService
volumeControlsDialogProvider
IntentType
IntentResponseType
NLIntentType
allAvailable
matched
failure
autoSelectionAlreadyEnabled
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
alarm
timer
none
deviceId
proximity
hasFiringAlarm
hasFiringTimer
firingAlarmTimestamp
firingTimerTimestamp
hasRunningTimer
hasPlayingMedia
bargeInOverSiri
bargeInOverHomeAnnouncement
percent
referentialTo
aLittle
aLot
less
maximum
mean
minimum
more
mute
unmute
volume
voice
mediaType
read
verb
settingName
numericSettingValue
numericSettingState
numericSettingQualifier
settingAttribute
confirmationValue
roomNames
homeName
zoneNames
accessoryNames
reference
serviceNames
serviceGroups
fromEntities
deviceQuantifier
destinationDeviceId
deviceType
placeHint
AllCases
RawValue
languageDialogProvider
volumeControlsDialogProvider
testMode
deviceState
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
flowFactory
deviceSelector
playbackController
deviceState
aceServiceHelper
flowFactory
playbackController
contextProvider
contextUtil
settingsFlowProvider
mediaFlowProvider
mediaPlayerFlowProvider
deviceState
featureFlagProvider
quickStopUtil
analyticsService
deviceSelectingUtilFunc
aceService
$__lazy_storage_$_deviceSelectingUtil
handle
dontHandle
RawValue
mediaPlayer
media
settings
dialogProvider
deviceState
featureFlagProvider
playbackController
analyticsService
IntentType
IntentHandler
IntentResponseType
ItemType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
deviceState
dialogProvider
userDefaultsProvider
analyticsService
featureFlagProvider
playbackController
IntentType
IntentHandler
IntentResponseType
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
music
podcast
audiobook
iTunesU
radio
audio
video
AllCases
RawValue
testMode
testGlobals
globals
accessory
room
playbackController
deviceSelector
analyticsService
deviceState
aceServiceHelper
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
deviceState
languageDialogProvider
analyticsService
IntentType
IntentHandler
IntentResponseType
ItemType
deviceState
languageDialogProvider
controlsDialogProvider
analyticsService
IntentType
IntentHandler
IntentResponseType
deviceSelector
accessoryVolumeController
playbackController
deviceState
aceServiceHelper
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
wrappedFlow
shouldRedirectToServer
ExitValue
IntentType
deviceState
dialogProvider
patternProvider
featureFlagProvider
analyticsService
IntentType
IntentResponseType
deviceState
dialogProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
NLIntentType
NLContextProvider
volumeControlsDialogProvider
flowFactory
deviceSelector
aceService
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
deviceState
dialogProvider
userDefaultsProvider
playbackController
analyticsService
featureFlagProvider
IntentType
IntentHandler
IntentResponseType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
intent
playbackController
deviceSelector
timer
queue
assertion
analyticsService
deviceState
aceServiceHelper
deviceState
dialogProvider
analyticsService
IntentType
IntentHandler
IntentResponseType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
userDefaultsProvider
playbackController
analyticsService
featureFlagProvider
IntentType
IntentHandler
IntentResponseType
deviceState
aceService
dialogProvider
isIOS
isTV
isHomePodLocalOnly
requestedStateIsCurrentState
isSameRoomOnly
smartControlFarRooms
volumeLevel
speaker
preferSpeakerName
requestedVolumeLevel
isMediaPlaying
isIncreaseLevel
isDecreaseLevel
deviceState
audioSession
dialogProvider
isIOS
isTV
isHomePodLocalOnly
speaker
isSameRoomOnly
smartControlFarRooms
rooms
hasInHere
isEnable
isClosedCaptionRequest
isEnableSubtitles
deviceIsInferred
requestedLanguage
isOn
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
volumeControlsDialogProvider
deviceState
analyticsService
IntentType
IntentHandler
IntentResponseType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
deviceState
languageDialogProvider
analyticsService
IntentType
IntentHandler
IntentResponseType
dialogProvider
deviceState
featureFlagProvider
playbackController
analyticsService
IntentType
IntentHandler
IntentResponseType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
homePod
appleTV
macOS
watchOS
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
playbackController
deviceSelector
analyticsService
aceServiceHelper
deviceState
deviceState
dialogProvider
userDefaultsProvider
analyticsService
featureFlagProvider
playbackController
IntentType
IntentHandler
IntentResponseType
deviceState
dialogProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
NLIntentType
NLContextProvider
flowFactory
contextProvider
deviceState
playbackController
featureFlagProvider
name
unknown
languageDialogProvider
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
deviceState
dialogProvider
userDefaultsProvider
analyticsService
featureFlagProvider
playbackController
IntentType
IntentHandler
IntentResponseType
unsupportedOnPlatform
noMatchingDevicesFound
unknown
languageDialogProvider
aceServiceInvoker
deviceState
dialogProvider
analyticsService
aceServiceHelper
playbackController
ExitValue
ItemType
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
contextProvider
analyticsService
IntentType
IntentResponseType
IntentHandler
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
cancel
AllCases
RawValue
deviceSelector
playbackController
deviceState
aceServiceHelper
intent
iPhone
iPad
homePod
appleTV
watch
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
deviceState
dialogProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
NLIntentType
NLContextProvider
dialogProvider
isIOS
isTV
isHomePodLocalOnly
speaker
isSameRoomOnly
smartControlFarRooms
requestedStateIsCurrentState
skipForwardDuration
skipBackwardDuration
playheadPosition
shuffleEnabled
repeatMode
isMultipleSpeakers
deviceType
speed
speakerOperation
isEnableShuffle
rooms
isShuffleEnabled
hasInHere
isSkipToPrevious
isSkipPrevious
isFastForward
isEnableRepeat
isSourceMissing
isDestinationMissing
appName
secs
none
phone
watch
television
homepod
unknown
addSpeaker
moveSpeaker
RawValue
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
patternExecuter
bundleID
isIOS
isTV
isHomePodLocalOnly
speaker
requestedStateIsCurrentState
isSameRoomOnly
smartControlFarRooms
viewData
showVisual
appBundleID
deviceState
dialogProvider
analyticsService
IntentType
IntentResponseType
NLIntentType
NLContextProvider
deviceResolutionAnalytics
analyticsService
deviceState
localizationProvider
autoResumableProximitiesInLongWindow
autoResumableProximitiesInShortWindow
groupControlDevice
roomCount
deviceState
dialogProvider
featureFlagProvider
encryptionProvider
analyticsService
languageDialogProvider
IntentType
IntentResponseType
ItemType
DisambiguationItemContainerType
NLIntentType
NLContextProvider
deviceState
dialogProvider
userDefaultsProvider
playbackController
analyticsService
featureFlagProvider
IntentType
IntentHandler
IntentResponseType
playbackController
deviceSelector
analyticsService
deviceState
aceServiceHelper
intent
deviceContext
featureFlagProvider
ItemType
playbackController
deviceSelector
analyticsService
deviceState
aceServiceHelper
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
code
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
RawValue
renderedText
setRenderedText:
appId
setAppId:
callbacks
setCallbacks:
requiresResponse
supportsSecureCoding
aceId
setAceId:
refId
setRefId:
isEqual:
hash
superclass
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
description
debugDescription
encodeWithCoder:
initWithCoder:
init
initWithDictionary:
initWithDictionary:context:
dictionary
properties
encodedClassName
groupIdentifier
copyWithZone:
mutableCopyWithZone:
routeId
context
proximity
displayableName
roomName
initWithChoices:
initWithTask:
setItems:
setTitle:
setUtterance:
setCommands:
setDisambiguated:
setDevices:
identifier
direction
setDevice:
mediaRouteIdentifier
serializedContextByKey
initWithSerializedBackingStore:
state
unsignedLongLongValue
playbackState
hasFiringTimers
timersByID
mostRecentFiringTimer
firedDate
hasFiringAlarms
mostRecentFiringAlarm
initWithIdentifier:displayString:
setProximity:
nowPlayingTimestamp
setNowPlayingTimestamp:
setNowPlayingState:
mediaType
setNowPlayingMediaType:
setRouteId:
setGroupId:
isProxyGroupPlayer
setSilentPrimary:
type
disambiguationItems
groupLeader
devices
groupId
setGroupLeader:
nowPlayingState
nowPlayingMediaType
setExcludeGroup:
groupName
streams
setType:
setIncludesTVs:
setStreams:
deviceContext
isPreResolved
deviceQueries
setContext:
setIsEndpoint:
setRoomName:
JSONObjectWithData:options:error:
patternId
boolForKey:
name
referenceString
removeObjectForKey:
objectForKey:
setFloat:forKey:
setInteger:forKey:
initWithSuiteName:
setUserActivity:
volumeLevel
volumeSettingType
volumeSettingState
resolvedVolumeOutput
floatValue
currentVolumeOutput
unsupported
dealloc
handleSetVolumeLevel:completion:
confirmSetVolumeLevel:completion:
resolveDevicesForSetVolumeLevel:withCompletion:
resolveVolumeLevelForSetVolumeLevel:withCompletion:
.cxx_destruct
setVolumeSettingType:
volumeSettingValue
volumeSettingUnit
setCurrentVolumeOutput:
needsValue
setResolvedVolumeOutput:
resolutionResultConfirmationRequiredWithItemToConfirm:
setCurrentVolumeLevel:
setVolumeLevel:
unsupportedReason
playbackSpeedType
speedMagnitude
successWithResolvedValue:
handleSetPlaybackSpeed:completion:
confirmSetPlaybackSpeed:completion:
resolveSpeedMagnitudeForSetPlaybackSpeed:withCompletion:
resolvePlaybackSpeedTypeForSetPlaybackSpeed:withCompletion:
resolveDevicesForSetPlaybackSpeed:withCompletion:
typeName
confirmed
disambiguated
initWithReference:
handleSkipContent:completion:
resolveDevicesForSkipContent:withCompletion:
confirmSkipContent:completion:
notRequired
languageIdentifier
languageTag
handleSetRepeatState:completion:
resolveDevicesForSetRepeatState:withCompletion:
confirmSetRepeatState:completion:
repeatState
setMediaType:
setDeviceQueries:
integerValue
runSiriKitExecutorCommandWithContext:payload:
wrapCommandInStartLocalRequest:
initWithOfferedAct:
autoupdatingCurrentLocale
duration
zoneNames
mediaSystemId
isEndpoint
skipConfirmation
setZoneNames:
setName:
setCurrentHome:
setCurrentRoom:
setIsDeviceSelectedUsingContext:
setMediaSystemId:
setIsPreResolved:
setTaskType:
setIsWholeHouseAudio:
setWholeHouseAudioDestinationContext:
setMediaPlayerContext:
setEligibleDeviceCount:
enable
synchronize
arrayForKey:
bundleForClass:
setDirection:
handleSkipTime:completion:
resolveDurationForSkipTime:withCompletion:
resolveDevicesForSkipTime:withCompletion:
confirmSkipTime:completion:
handleAddSpeaker:completion:
resolveSourceForAddSpeaker:withCompletion:
resolveDestinationsForAddSpeaker:withCompletion:
confirmAddSpeaker:completion:
source
deviceQuantifierString
destinations
setCentered:
setAction:
setText:
setDecoratedLabel:
commands
setConfirmCommands:
setDenyCommands:
label
setConfirmText:
setDenyText:
setCancelTrigger:
setAllConfirmationOptions:
setLabel:
setIconType:
setDeviceContext:
resolutionResultCode
resolvedValue
mediaSearch
privatePlayMediaIntentData
isAmbiguousPlay
setPlaybackRouteUniqueIdentifier:
setPlaybackRouteUniqueIdentifierIsEncrypted:
setApplicationBundleIdentifier:
setSash:
setViewId:
viewId
correspondingSessionID
setCorrespondingSessionID:
volumeSettingQualifier
settingAttribute
isDeviceSelectedUsingContext
numberOfAffectedRooms
setShuffleState:
includesTVs
excludeGroup
setGroupName:
handleResumeMedia:completion:
resolveDevicesForResumeMedia:withCompletion:
confirmResumeMedia:completion:
setTargetBundleIdentifier:
device
handleSetAudioLanguage:completion:
resolveDeviceForSetAudioLanguage:withCompletion:
resolveLanguageForSetAudioLanguage:withCompletion:
confirmSetAudioLanguage:completion:
language
handleGetVolumeLevel:completion:
resolveDeviceForGetVolumeLevel:withCompletion:
confirmGetVolumeLevel:completion:
isActive
setLanguageTag:
setLanguageIdentifier:
setIsActive:
setIsDirectInvocation:
handleSetShuffleState:completion:
resolveDevicesForSetShuffleState:withCompletion:
confirmSetShuffleState:completion:
shuffleState
setLanguage:
resolveDeviceForWhatDidTheySay:withCompletion:
handleWhatDidTheySay:completion:
confirmWhatDidTheySay:completion:
currentProcess
attributeWithDomain:name:
initWithExplanation:target:attributes:
isValid
acquireWithInvalidationHandler:
invalidate
startTime
playheadPosition
currentRoute
outputs
portType
reference
sortOrder
albumName
mediaName
genreNames
artistName
moodNames
releaseDate
mediaIdentifier
setConfirmed:
currentVolumeLevel
setStartTime:
doubleForKey:
setEnable:
silentPrimary
setPlayheadPosition:
setIsSkipToEnd:
setShouldStartPlaybackAfterSeek:
setTemplateItems:
initWithIdentifier:
setUserData:
handleSetSubtitleState:completion:
resolveDeviceForSetSubtitleState:withCompletion:
resolveLanguageForSetSubtitleState:withCompletion:
confirmSetSubtitleState:completion:
setDuration:
setVolumeSettingState:
setVolumeSettingQualifier:
setVolumeSettingUnit:
setSettingAttribute:
setVolumeSettingValue:
setRepeatState:
handleMoveSpeaker:completion:
resolveSourceForMoveSpeaker:withCompletion:
resolveDestinationsForMoveSpeaker:withCompletion:
confirmMoveSpeaker:completion:
zoneName
accessoryName
serviceName
serviceGroup
fromEntity
deviceTypeString
placeHintString
setDeviceQuantifierString:
setDeviceTypeString:
setZoneName:
setAccessoryName:
setServiceName:
setServiceGroup:
initWithBool:
setFromEntity:
setPlaceHintString:
setReferenceString:
sharedLoggingService
logToCoreAnalyticsCrossDeviceRequestEvent:
initWithNearbyDevicesLoggingID:
addCoreAnalyticsDeviceTargetedWithContextIdentifier:commandResultDescription:
sharedAnalytics
logEventWithType:context:
setSkipConfirmation:
setDisplayableName:
handlePauseMedia:completion:
resolveDevicesForPauseMedia:withCompletion:
confirmPauseMedia:completion:
setPlaybackSpeedType:
setSpeedMagnitude:
isSkipToEnd
successWithResolvedTimeInterval:
handleSeekTime:completion:
resolveDevicesForSeekTime:withCompletion:
resolvePlayheadPositionForSeekTime:withCompletion:
confirmSeekTime:completion:
shouldStartPlaybackAfterSeek
initWithIdentifier:backingStore:
initWithDomain:verb:parametersByName:
initWithBackingStore:
initWithPropertiesByName:
unsupportedWithReason:
initWithJSONDictionary:forIntent:
isDirectInvocation
code
setCode:
initWithCode:userActivity:
unsupportedForReason:
targetBundleIdentifier
setDestinations:
setSource:
roomDimmingState
setRoomDimmingState:
handleSetRoomDimmingState:completion:
confirmSetRoomDimmingState:completion:
confirmationRequiredWithValueToConfirm:
successWithResolvedDirection:
confirmationRequiredWithDirectionToConfirm:
successWithResolvedRepeatState:
confirmationRequiredWithRepeatStateToConfirm:
successWithResolvedShuffleState:
confirmationRequiredWithShuffleStateToConfirm:
successWithResolvedSubtitleState:
confirmationRequiredWithSubtitleStateToConfirm:
successWithResolvedDeviceProximity:
confirmationRequiredWithDeviceProximityToConfirm:
successWithResolvedNowPlayingState:
confirmationRequiredWithNowPlayingStateToConfirm:
successWithResolvedSubtitleType:
confirmationRequiredWithSubtitleTypeToConfirm:
successWithResolvedNowPlayingMediaType:
confirmationRequiredWithNowPlayingMediaTypeToConfirm:
successWithResolvedNLMediaType:
confirmationRequiredWithNLMediaTypeToConfirm:
successWithResolvedVolumeSettingState:
confirmationRequiredWithVolumeSettingStateToConfirm:
successWithResolvedVolumeSettingUnit:
confirmationRequiredWithVolumeSettingUnitToConfirm:
successWithResolvedVolumeSettingAttribute:
confirmationRequiredWithVolumeSettingAttributeToConfirm:
successWithResolvedVolumeSettingQualifier:
confirmationRequiredWithVolumeSettingQualifierToConfirm:
successWithResolvedVolumeSettingType:
confirmationRequiredWithVolumeSettingTypeToConfirm:
successWithResolvedGroupType:
confirmationRequiredWithGroupTypeToConfirm:
successWithResolvedRoomDimmingState:
confirmationRequiredWithRoomDimmingStateToConfirm:
successWithResolvedPlaybackSpeedType:
confirmationRequiredWithPlaybackSpeedTypeToConfirm:
successWithResolvedObject:
disambiguationWithObjectsToDisambiguate:
confirmationRequiredWithObjectToConfirm:
initWithIdentifier:displayString:pronunciationHint:
currentHome
currentRoom
successWithResolvedDevice:
disambiguationWithDevicesToDisambiguate:
confirmationRequiredWithDeviceToConfirm:
setNumberOfAffectedRooms:
successWithResolvedSignedDuration:
disambiguationWithSignedDurationsToDisambiguate:
confirmationRequiredWithSignedDurationToConfirm:
successWithResolvedDeviceContext:
disambiguationWithDeviceContextsToDisambiguate:
confirmationRequiredWithDeviceContextToConfirm:
successWithResolvedLanguageOption:
disambiguationWithLanguageOptionsToDisambiguate:
confirmationRequiredWithLanguageOptionToConfirm:
successWithResolvedDeviceQuery:
disambiguationWithDeviceQuerysToDisambiguate:
confirmationRequiredWithDeviceQueryToConfirm:
successWithResolvedVolumeLevel:
disambiguationWithVolumeLevelsToDisambiguate:
confirmationRequiredWithVolumeLevelToConfirm:
successWithResolvedDeviceGroup:
disambiguationWithDeviceGroupsToDisambiguate:
confirmationRequiredWithDeviceGroupToConfirm:
successWithResolvedMediaStream:
disambiguationWithMediaStreamsToDisambiguate:
confirmationRequiredWithMediaStreamToConfirm:
successWithResolvedPlaybackSpeed:
disambiguationWithPlaybackSpeedsToDisambiguate:
confirmationRequiredWithPlaybackSpeedToConfirm:
first
second
third
fourth
fifth
sixth
seventh
eighth
ninth
tenth
eleventh
twelfth
thirteenth
fourteenth
fifteenth
sixteenth
seventeenth
eighteenth
nineteenth
twentieth
twenty first
twenty second
twenty third
twenty fourth
twenty fifth
first
second
third
fourth
fifth
sixth
seventh
eighth
ninth
tenth
eleventh
twelfth
thirteenth
fourteenth
fifteenth
sixteenth
seventeenth
eighteenth
nineteenth
twentieth
twenty first
twenty second
twenty third
twenty fourth
twenty fifth
first
second
third
fourth
fifth
sixth
seventh
eighth
ninth
tenth
eleventh
twelfth
thirteenth
fourteenth
fifteenth
sixteenth
seventeenth
eighteenth
nineteenth
twentieth
twenty first
twenty second
twenty third
twenty fourth
twenty fifth
enableSetting
disableSetting
setNumber
increaseBy
decreaseBy
summarise
enable
disable
noVerb
mediaReference
