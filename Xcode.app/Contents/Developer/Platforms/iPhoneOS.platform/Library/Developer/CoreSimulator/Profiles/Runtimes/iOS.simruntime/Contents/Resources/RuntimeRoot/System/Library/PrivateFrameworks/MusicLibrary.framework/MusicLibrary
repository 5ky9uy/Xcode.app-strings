?@:Q
27ML3MatchContainerImportItem
18ML3MatchImportItem
18ML3StoreImportItem
11_constraint
20_distance_constraint
25_already_added_constraint
22_skip_count_constraint
25_random_jitter_constraint
6_track
28_compatible_genre_constraint
26_distance_constraint_state
17_constraint_state
34_compatible_genre_constraint_state
28ML3PurchaseHistoryImportItem
17ML3DAAPImportItem
22ML3DAAPTrackImportItem
26ML3DAAPContainerImportItem
23ML3DAAPPersonImportItem
22ML3DAAPChildImportItem
23ML3DAAPDeleteImportItem
32ML3DAAPContainerDeleteImportItem
NSt3__120__shared_ptr_pointerIP22ML3DAAPChildImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_22ML3DAAPChildImportItemEE
NSt3__120__shared_ptr_emplaceIN6ML3CPP6Parser15ParserContainerENS_9allocatorIS3_EEEE
36ML3ItemStoreDatabaseImportDataSource
18DAAPParserDelegate
N6ML3CPP14ParserDelegateE
NSt3__120__shared_ptr_pointerIP17ML3DAAPImportItemNS_10shared_ptrIS1_E27__shared_ptr_default_deleteIS1_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_S1_EE
NSt3__120__shared_ptr_pointerIP26ML3DAAPContainerImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_26ML3DAAPContainerImportItemEE
NSt3__120__shared_ptr_pointerIP23ML3DAAPPersonImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_23ML3DAAPPersonImportItemEE
NSt3__120__shared_ptr_emplaceIN6ML3CPP6ParserENS_9allocatorIS2_EEEE
NSt3__120__shared_ptr_emplaceI18DAAPParserDelegateNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_pointerIP23ML3DAAPDeleteImportItemNS_10shared_ptrIS1_E27__shared_ptr_default_deleteIS1_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS1_S1_EE
NSt3__120__shared_ptr_pointerIP32ML3DAAPContainerDeleteImportItemNS_10shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS1_32ML3DAAPContainerDeleteImportItemEE
NSt3__120__shared_ptr_emplaceIN6ML3CPP7ElementENS_9allocatorIS2_EEEE
27ML3DatabaseImportDataSource
25ML3VirtualTableDataSource
NSt3__123enable_shared_from_thisI27ML3DatabaseImportDataSourceEE
40ML3ContainerBaseDatabaseImportDataSource
41ML3CollectionBaseDatabaseImportDataSource
NSt3__120__shared_ptr_pointerIP28ML3PurchaseHistoryImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_28ML3PurchaseHistoryImportItemEE
22ML3ProtoSyncImportItem
27ML3ProtoSyncTrackImportItem
28ML3ProtoSyncDeleteImportItem
31ML3ProtoSyncContainerImportItem
13ML3ImportItem
NSt3__120__shared_ptr_pointerIP29ML3HomeSharingTrackImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_29ML3HomeSharingTrackImportItemEE
NSt3__120__shared_ptr_pointerIP33ML3HomeSharingContainerImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_33ML3HomeSharingContainerImportItemEE
40ML3ContainerItemDatabaseImportDataSource
36ML3ItemStatsDatabaseImportDataSource
32ML3ContainerItemPersonImportItem
32ML3AlbumDatabaseImportDataSource
NSt3__120__shared_ptr_pointerIP27ML3ProtoSyncTrackImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_27ML3ProtoSyncTrackImportItemEE
NSt3__120__shared_ptr_pointerIP28ML3ProtoSyncDeleteImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_28ML3ProtoSyncDeleteImportItemEE
NSt3__120__shared_ptr_pointerIP31ML3ProtoSyncContainerImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_31ML3ProtoSyncContainerImportItemEE
10ML3CPPData
NSt3__118codecvt_utf8_utf16IwLm1114111ELNS_12codecvt_modeE0EEE
23ML3ITunesSyncImportItem
28ML3ITunesSyncTrackImportItem
32ML3ITunesSyncContainerImportItem
38ML3AlbumArtistDatabaseImportDataSource
33ML3LyricsDatabaseImportDataSource
33ML3ArtistDatabaseImportDataSource
36ML3ItemVideoDatabaseImportDataSource
26ML3ContainerItemImportItem
46ML3ContainerItemPersonDatabaseImportDataSource
36ML3ContainerDatabaseImportDataSource
34ML3BookletDatabaseImportDataSource
NSt3__120__shared_ptr_emplaceI28ML3SetCloudIDTrackImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI32ML3SetCloudIDContainerImportItemNS_9allocatorIS1_EEEE
18ML3AlbumImportItem
24ML3AlbumArtistImportItem
19ML3ArtistImportItem
21ML3ComposerImportItem
18ML3GenreImportItem
33ML3PersonDatabaseImportDataSource
39ML3ItemPlaybackDatabaseImportDataSource
NSt3__120__shared_ptr_emplaceI18ML3StoreImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI27ML3StoreContainerImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_pointerIP18ML3MatchImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_18ML3MatchImportItemEE
NSt3__120__shared_ptr_pointerIP27ML3MatchContainerImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_27ML3MatchContainerImportItemEE
23ML3SetCloudIDImportItem
28ML3SetCloudIDTrackImportItem
32ML3SetCloudIDContainerImportItem
34ML3ChapterDatabaseImportDataSource
35ML3ComposerDatabaseImportDataSource
36ML3ItemExtraDatabaseImportDataSource
16ML3ImportSession
NSt3__120__shared_ptr_pointerIP32ML3AlbumDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_32ML3AlbumDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP38ML3AlbumArtistDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_38ML3AlbumArtistDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP33ML3ArtistDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3ArtistDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP35ML3ComposerDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_35ML3ComposerDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP32ML3GenreDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_32ML3GenreDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP36ML3ItemStoreDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemStoreDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP31ML3ItemDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_31ML3ItemDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP36ML3ItemExtraDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemExtraDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP39ML3ItemPlaybackDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_39ML3ItemPlaybackDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP37ML3ItemSearchDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_37ML3ItemSearchDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP36ML3ItemStatsDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemStatsDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP36ML3ItemVideoDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemVideoDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP34ML3ChapterDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_34ML3ChapterDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP33ML3LyricsDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3LyricsDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP36ML3ContainerDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ContainerDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP40ML3ContainerSeedDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_40ML3ContainerSeedDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP40ML3ContainerItemDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_40ML3ContainerItemDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP46ML3ContainerItemPersonDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_46ML3ContainerItemPersonDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP33ML3PersonDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3PersonDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP34ML3BookletDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_34ML3BookletDatabaseImportDataSourceEE
NSt3__120__shared_ptr_emplaceI13ML3ArtistDataNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI12ML3AlbumDataNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI15ML3ComposerDataNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI12ML3GenreDataNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI19ML3ArtistImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI24ML3AlbumArtistImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI18ML3AlbumImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI21ML3ComposerImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI18ML3GenreImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_pointerIP26ML3ContainerItemImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_26ML3ContainerItemImportItemEE
NSt3__120__shared_ptr_pointerIP32ML3ContainerItemPersonImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_32ML3ContainerItemPersonImportItemEE
31ML3ItemDatabaseImportDataSource
33ML3HomeSharingContainerImportItem
29ML3HomeSharingTrackImportItem
NSt3__120__shared_ptr_pointerIP10ML3CPPDataNS_10shared_ptrIS1_E27__shared_ptr_default_deleteIS1_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI10ML3CPPDataE27__shared_ptr_default_deleteIS1_S1_EE
40ML3ContainerSeedDatabaseImportDataSource
NSt3__120__shared_ptr_pointerIP28ML3ITunesSyncTrackImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_28ML3ITunesSyncTrackImportItemEE
NSt3__120__shared_ptr_pointerIP32ML3ITunesSyncContainerImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_32ML3ITunesSyncContainerImportItemEE
34ML3SubscriptionContainerImportItem
25ML3SubscriptionImportItem
32ML3GenreDatabaseImportDataSource
29ML3VirtualTableBindingVisitor
37ML3ItemSearchDatabaseImportDataSource
NSt3__120__shared_ptr_pointerIP25ML3SubscriptionImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_25ML3SubscriptionImportItemEE
NSt3__120__shared_ptr_pointerIP34ML3SubscriptionContainerImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_34ML3SubscriptionContainerImportItemEE
27ML3StoreContainerImportItem
14ML3ImportValueINSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE
NSt3__120__shared_ptr_emplaceI10ML3CPPDataNS_9allocatorIS1_EEEE
com.apple.amp.medialibrary
Default
Default_Oversize
SyncData
Writer
Writer_Oversize
Service
Migration
Validation
CacheManagement
Library
SortMap
Import
MultiUser
Indexing
dsid
altDSID
v32@?0@"ACAccount"8Q16^B24
uint32_t ML3DAAPCodeForImportPropertyKey(MLImportPropertyKey)
ML3DAAPImportUtils.m
ML3DAAPCodeForImportPropertyKey - unhandled property key %x
ML3DatabaseForeignKeyConstraint.m
Number of local columns (%lu) does not match the number of foreign columns (%lu)
FOREIGN KEY (%@) REFERENCES %@ (%@)
NSString *NSPersistentStringFromMLMediaType(MLMediaType)
MLTypes.m
This SPI may only be used with single types
MLMediaTypeVideoPodcast
MLMediaTypeTVShow
MLMediaTypeMusicVideo
MLMediaTypeMovie
MLMediaTypeHomeVideo
MLMediaTypeMusicQuiz
MLMediaTypePodcast
MLMediaTypeITunesUAudio
MLMediaTypeAny
MLMediaTypeUndefined
AnyVideo
VideoPodcast
VideoITunesU
Movie
AnyAudio
ITunesUAudio
MLMediaType%@
MLMediaType [%@]
(%d => '%@')
UPDATE artwork SET interest_data = ? WHERE artwork_token = ?
*** Database Exception: %@
ML3UpdateArtworkInterestDataOperation requires an artworkToken attribute and an artwork interest data blob
InsignificantSortPrefixes
the 
ML3ArtworkTokenSet.m
entity != nil
v32@?0@"NSString"8@"NSString"16q24
v32@?0@"NSString"8q16^B24
Acoustic
BassBooster
BassReducer
Classical
Dance
Deep
Electronic
Flat
HipHop
Jazz
Latin
Loudness
Lounge
Piano
Rock
SmallSpeakers
SpokenWord
TrebleBooster
TrebleReducer
VocalBooster
LateNightMode
Bass Booster
Bass Reducer
Hip Hop
Small Speakers
Spoken Word
Treble Booster
Treble Reducer
Vocal Booster
Late Night Mode
<ML3MatchImportItem 
<ML3MatchContainerImportItem 
, cloud_universal_library_id=
, cloud_id=
, isCompleteItem=false
<%@: %p, name = '%@'>
PRIMARY KEY
 ASC
 DESC
 AUTOINCREMENT
NOT NULL
UNIQUE
ML3DatabaseColumn.m
Unsupported default value type %@
DEFAULT %@
NULL
INTEGER
REAL
TEXT
BLOB
seasonNumber
episodeId
episodeSortId
networkName
discNumber
excludeFromShuffle
geniusId
audioFormat
hasVideo
playbackInfo
lyricsChecksum
void ML3StatementBindingVisitor::operator()(const int64_t &)
ML3ImportDatabaseUtilities.mm
Cannot bind int64_t: no sqlite3_stmt*
void ML3StatementBindingVisitor::operator()(const float_t &)
Cannot bind float: no sqlite3_stmt*
void ML3StatementBindingVisitor::operator()(const bool &)
Cannot bind bool: no sqlite3_stmt*
void ML3StatementBindingVisitor::operator()(const std::string &)
Cannot bind string: no sqlite3_stmt*
void ML3StatementBindingVisitor::operator()(ML3CPPDataRef)
Cannot bind data: no sqlite3_stmt*
<ML3StoreImportItem 
 item_pid=
, sagaId=
sim fetches = %lu, successful sim fetches = %lu, metadata fetches = %lu, successful metadata fetches = %lu
metadata_size not being set by metadata_for_global_id callback
fetch metadata: track id = %llu, 
id %d = %llu%s
fetch sims: track id = %llu, count = %lu
constraint eval: %s, track id = %llu, result = %d
constraint not in effect: %s, track id = %llu
distance
already_added
skip_count
random_jitter
compatible_genre
ML3ServiceDatabaseImport.m
writer
client
<ML3PurchaseHistoryImportItem 
 purchaseHistoryId=
uint32_t ML3PurchaseHistoryImportItem::_getFlavorCode(MLImportPropertyKey) const
ML3PurchaseHistoryImportItem.mm
flavorDataForPropertyKey passed unknown key %d
itlp
.epub
<ML3DAAPDeleteImportItem 
 sourceItemId=
<ML3DAAPContainerImportItem 
 store_cloud_id=
contentFilter
smartInfo
geniusSeedTrackIDs
<ML3DAAPPersonImportItem 
 profile_id=
, handle=
Cannot parse more than once.
{?=qiIq}
v80@?0{?=qiIq}8^{CGImage=}32{?=qiIq}40q64@"NSError"72
disc_count
integrity
content_rating
content_rating_level
is_user_disabled
genius_id
description_long
collection_description
pending_genius_checksum
category_id
location_kind_id
display_version
classical_work
classical_movement
classical_movement_count
classical_movement_number
is_preorder
 IF NOT EXISTS
CREATE TABLE%@ %@ (%@, %@)
CREATE TABLE%@ %@ (%@)
libraryName
libraryId
1.2.11
encountered unexpected status %d while inflating
encountered unexpected status %d while finishing inflating
com.apple.medialibrary
ConsoleLoggingLevel
LogFileLoggingLevel
SQLITE_AUTO_TRACE
SQLITE_IOERR_READ
SQLITE_IOERR_SHORT_READ
SQLITE_IOERR_WRITE
SQLITE_IOERR_FSYNC
SQLITE_IOERR_DIR_FSYNC
SQLITE_IOERR_TRUNCATE
SQLITE_IOERR_FSTAT
SQLITE_IOERR_UNLOCK
SQLITE_IOERR_RDLOCK
SQLITE_IOERR_DELETE
SQLITE_IOERR_BLOCKED
SQLITE_IOERR_NOMEM
SQLITE_IOERR_ACCESS
SQLITE_IOERR_CHECKRESERVEDLOCK
SQLITE_IOERR_LOCK
SQLITE_IOERR_CLOSE
SQLITE_IOERR_DIR_CLOSE
SQLITE_LOCKED_SHAREDCACHE
Unknown
medialibrary_sqlite.log
SQLITE_AUTO_TRACE_ML
ML3DAAPImportOperationErrorDomain
Track parser was canceled.
Track parser failed (invalid DAAP payload).
%@ is invalid. use %@ instead
ML3ActiveTransaction.m
Tried to create a transaction object with a nil connection.
Tried to create a transaction object without a library.
Database transaction %@
<%@ %p
identifier:             %@
readonly:               %@
originating process:    %@ [%d]
connection:             %@
last used time:         %f
entity_revision.revision
entity_revision.deleted
keep_local
MAX(entity_revision.revision)
ML3Entity.m
INSERT OR REPLACE INTO 
) VALUES (?
,(?,?,?,?)
REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES 
incrementRevisionForRevisionTypeContentWithConnection called with invalid pid
DELETE FROM entity_revision WHERE revision_type > ? AND entity_pid
Wrong revision type for deletion type: %d, %d
incrementRevisionWithLibrary called with invalid pid
DELETE FROM entity_revision WHERE entity_pid=? AND revision_type > ?
Cannot perform insert with %@ property: no table
Cannot perform insert with %@ property: no column
(pid = %lld)
SELECT 1 FROM 
 WHERE ROWID = ? LIMIT 1;
SELECT 
.ROWID FROM 
.ROWID IN (?
ORDER BY 
SELECT %@ FROM %@ %@%@%@
ML3EntityPropertySelectSQLCache
SELECT %@ FROM %@ %@ WHERE %@.ROWID = ?%@%@
x-media-library
No library with UID: %@
Invalid URL scheme: %@
Library UID mismatch: %@ != %@
Insufficient path components [requires three]: %@
Invalid entity type: %ld
Invalid entity persistentID: %lld
No %@ entity exists with persistentID: %lld
%lld
JOIN entity_revision ON (
.ROWID = entity_revision.entity_pid)
DELETE FROM %@ WHERE %@
no pid column for %@ %@
DELETE FROM item_stats WHERE item_pid IN ( SELECT item_pid FROM item_store WHERE sync_id = 0 AND item_pid
DELETE FROM item_store WHERE sync_id = 0 AND item_pid
%@.%@
Properties requiring a join cannot be indexed
DESC
v44@?0q8q16i24q28^B36
album_artist_pid
sort_album_artist
grouping_key
keep_local_status
classical_experience_available
INSERT OR REPLACE INTO %@ (%@)
virtual void ML3DatabaseImportDataSource::getRow(ML3VirtualTableRow *, uint32_t)
ML3DatabaseImportDataSource.mm
unhandled data type %u
, %@
, CASE WHEN LENGTH(IFNULL(item_extra.location, '')) = 0
 AND LENGTH(IFNULL(item_extra.location, '')) = 0
, CASE WHEN IFNULL((SELECT(1) FROM %@ WHERE ROWID = %@.ROWID), 0) = 0 OR (IFNULL(%@,0) = 0
 AND IFNULL(%@,0) = 0
 THEN (CASE WHEN col%d='%s' THEN %@ ELSE col%d END) ELSE %@ END
, CASE WHEN col%d='%s' THEN %@ ELSE col%d END
CASE WHEN col%d ISNULL THEN %@ ELSE MAX(IFNULL(%@, 0), col%d) END
CASE WHEN col%d ISNULL THEN %@ ELSE col%d END
 THEN (%@) ELSE %@ END
%@ SELECT %@ FROM %@
%@ LEFT OUTER JOIN item_store ON +%@.ROWID = item_store.item_pid LEFT OUTER JOIN %@ ON +%@.ROWID = %@.item_pid
%@ LEFT OUTER JOIN item_store ON +%@.ROWID = item_store.item_pid
%@ LEFT OUTER JOIN container ON %@.ROWID = container.container_pid
%@ LEFT OUTER JOIN container ON %@.ROWID = container.container_pid LEFT OUTER JOIN %@ ON %@.ROWID = %@.container_pid
%@ LEFT OUTER JOIN %@ ON %@.ROWID = %@.%@%@
genre
_pid
_ML_VALUE_NOT_PROVIDED_
CASE WHEN item_store.home_sharing_id OR (item_store.store_saga_id AND item_store.cloud_in_my_library) OR item_store.purchase_history_id OR (item_store.sync_id AND item_store.sync_in_my_library) OR item_store.is_ota_purchased THEN 1 ELSE 0 END
CASE WHEN item_store.home_sharing_id != 0 THEN 300 ELSE ( CASE WHEN IFNULL(item_store.match_redownload_params, '') != '' THEN 200 ELSE ( CASE WHEN IFNULL(item_store.purchase_history_redownload_params, '') != '' AND item_store.purchase_history_id != 0 THEN 100 ELSE ( CASE WHEN item_store.subscription_store_item_id != 0 AND item_store.is_subscription AND item_store.cloud_asset_available THEN 50 ELSE ( CASE WHEN item_store.sync_redownload_params == 'redownload' AND item_store.sync_id != 0 THEN 20 ELSE ( CASE WHEN item_store.sync_redownload_params == 'local' AND item_store.sync_id != 0 THEN 10 ELSE 0 END) END) END) END) END) END
PRAGMA user_version = 992141;
ALTER TABLE item ADD COLUMN base_location_id INTEGER DEFAULT 0
PRAGMA user_version = 992142;
CREATE TABLE entity_revision (revision INTEGER PRIMARY KEY, entity_pid INTEGER NOT NULL UNIQUE, deleted INTEGER NOT NULL DEFAULT 0, class INTEGER NOT NULL DEFAULT 0)
PRAGMA user_version = 1002980;
ALTER TABLE entity_revision ADD COLUMN deleted INTEGER NOT NULL DEFAULT 0
ALTER TABLE entity_revision ADD COLUMN class INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN store_xid TEXT
ALTER TABLE item_extra ADD COLUMN store_flavor TEXT
PRAGMA user_version = 1003342;
ALTER TABLE item_extra ADD COLUMN chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1003964;
ALTER TABLE item_extra ADD COLUMN integrity BLOB
PRAGMA user_version = 1005492;
CREATE TABLE genius_config (id INTEGER PRIMARY KEY, version INTEGER UNIQUE, default_num_results INTEGER DEFAULT 0, min_num_results INTEGER DEFAULT 0, data BLOB)
CREATE TABLE genius_metadata (genius_id INTEGER PRIMARY KEY, revision_level INTEGER, version INTEGER, checksum INTEGER, data BLOB)
CREATE TABLE genius_similarities (genius_id INTEGER PRIMARY KEY, data BLOB)
PRAGMA user_version = 1006189;
CREATE TABLE container_items (container_pid INTEGER PRIMARY KEY, item_pid_data BLOB)
DROP TABLE item_to_container
CREATE VIRTUAL TABLE item_to_container USING ML3ContainerItemToContainer (item_pid INTEGER NOT NULL DEFAULT 0, container_pid INTEGER NOT NULL DEFAULT 0, physical_order INTEGER NOT NULL DEFAULT 0, shuffle_order INTEGER NOT NULL DEFAULT 0)
PRAGMA user_version = 1007541;
ALTER TABLE item_extra ADD COLUMN store_saga_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1011335;
CREATE TABLE artwork_info (cache_id TEXT NOT NULL, format_id INTEGER NOT NULL, length INTEGER, offset INTEGER, extra_length INTEGER NOT NULL DEFAULT 0, UNIQUE (cache_id, format_id))
CREATE TABLE artwork_free_list (offset INTEGER PRIMARY KEY, length INTEGER)
PRAGMA user_version = 1015139;
ALTER TABLE container ADD COLUMN description TEXT
PRAGMA user_version = 1016427;
ALTER TABLE container ADD COLUMN store_cloud_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1021756;
ALTER TABLE album_artist ADD COLUMN artwork_cache_id INTEGER NOT NULL DEFAULT 0
UPDATE album_artist SET artwork_cache_id = IFNULL((SELECT artwork_cache_id FROM item JOIN item_extra USING (item_pid) WHERE item.album_artist_pid = album_artist.album_artist_pid), 0)
UPDATE album_artist SET representative_item_pid = IFNULL((SELECT item_pid FROM item WHERE item.album_artist_pid = album_artist.album_artist_pid), 0)
PRAGMA user_version = 1026201;
PRAGMA user_version = 1028771;
CREATE TABLE ubiquitous_bookmarks (key TEXT PRIMARY KEY, bookmark_time_ms REAL, timestamp REAL)
PRAGMA user_version = 1033275;
ALTER TABLE album ADD COLUMN grouping_key BLOB
UPDATE album SET feed_url = NULL WHERE feed_url = ''
ALTER TABLE item_artist ADD COLUMN grouping_key BLOB
ALTER TABLE album_artist ADD COLUMN grouping_key BLOB
ALTER TABLE composer ADD COLUMN grouping_key BLOB
ALTER TABLE genre ADD COLUMN grouping_key BLOB
PRAGMA user_version = 1046932;
ALTER TABLE item_extra ADD COLUMN is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1050919;
ALTER TABLE artwork_info ADD COLUMN extra_length INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1053827;
ALTER TABLE item_extra ADD COLUMN store_matched_status INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN store_redownloaded_status INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1055456;
CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB)
INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, representative_item_pid, grouping_key) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, (CASE sort_series_name WHEN '' THEN NULL ELSE sort_series_name END), representative_item_pid, grouping_key FROM item_artist
DROP TABLE item_artist
ALTER TABLE item_artist_new RENAME TO item_artist
PRAGMA user_version = 1058985;
ALTER TABLE album ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0
ALTER TABLE album_artist ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_artist ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0
ALTER TABLE composer ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0
ALTER TABLE genre ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1061040;
PRAGMA user_version = 1061159;
PRAGMA user_version = 1061350;
ALTER TABLE item_extra ADD COLUMN pending_genius_checksum INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1062137;
PRAGMA user_version = 1063000;
PRAGMA auto_vacuum = 2;
PRAGMA user_version = 1079529;
ALTER TABLE item_extra ADD COLUMN is_streaming_quality INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1096158;
ALTER TABLE item_extra ADD COLUMN store_bookmark_timestamp REAL DEFAULT NULL
ALTER TABLE item_extra ADD COLUMN store_bookmark_entity_revision INTEGER DEFAULT NULL
PRAGMA user_version = 1102819;
ALTER TABLE item ADD COLUMN exclude_from_shuffle INTEGER NOT NULL DEFAULT 0
UPDATE item SET exclude_from_shuffle=1 WHERE item_pid IN (SELECT item_pid FROM item_extra WHERE exclude_from_shuffle=1)
CREATE TABLE item_extra_new (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, artwork_cache_id INTEGER NOT NULL DEFAULT 0, location_type INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', extension INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, file_size INTEGER NOT NULL DEFAULT 0, file_creator INTEGER NOT NULL DEFAULT 0, file_type INTEGER NOT NULL DEFAULT 0, num_dir_levels_file INTEGER NOT NULL DEFAULT 0, num_dir_levels_lib INTEGER NOT NULL DEFAULT 0, integrity BLOB, media_kind INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, total_burn_time_ms REAL NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, relative_volume INTEGER, eq_preset TEXT, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, is_ota_purchased INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, is_itunes_u INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, copyright TEXT, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0, is_streaming_quality INTEGER NOT NULL DEFAULT 0, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, is_podcast INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, store_kind INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, redownload_action_params TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, audio_format INTEGER NOT NULL DEFAULT 0, sample_rate REAL NOT NULL DEFAULT 0, duration INTEGER NOT NULL DEFAULT 0, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, analysis_inhibit_flags INTEGER NOT NULL DEFAULT 0, audio_fingerprint INTEGER NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER  NOT NULL DEFAULT 0, has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, is_hd INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, subtitle_track_id INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', bit_rate INTEGER NOT NULL DEFAULT 0, pending_genius_checksum INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_extra_new (item_pid, title, sort_title, disc_count, track_count, artwork_cache_id, location_type, location, extension, date_created, file_size, file_creator, file_type, num_dir_levels_file, num_dir_levels_lib, integrity, media_kind, date_modified, year, content_rating, content_rating_level, is_user_disabled, remember_bookmark, start_time_ms, stop_time_ms, total_time_ms, total_burn_time_ms, bpm, relative_volume, eq_preset, genius_id, comment, grouping, description, description_long, collection_description, is_ota_purchased, is_compilation, is_itunes_u, is_audible_audio_book, copyright, chosen_by_auto_fill, is_temporary_cloud_download, is_streaming_quality, store_bookmark_timestamp, store_bookmark_entity_revision, is_podcast, external_guid, feed_url, store_kind, date_purchased, date_released, account_id, key_versions, key_platform_id, key_id, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, artwork_url, store_xid, store_flavor, store_saga_id, store_matched_status, store_redownloaded_status, audio_format, sample_rate, duration, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, analysis_inhibit_flags, audio_fingerprint, volume_normalization_energy, is_rental, is_demo, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, has_alternate_audio, has_subtitles, is_hd, season_number, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, subtitle_track_id, episode_id, network_name, extended_content_rating, movie_info, bit_rate, pending_genius_checksum) SELECT item_pid, title, sort_title, disc_count, track_count, artwork_cache_id, location_type, location, extension, date_created, file_size, file_creator, file_type, num_dir_levels_file, num_dir_levels_lib, integrity, media_kind, date_modified, year, content_rating, content_rating_level, is_user_disabled, remember_bookmark, start_time_ms, stop_time_ms, total_time_ms, total_burn_time_ms, bpm, relative_volume, eq_preset, genius_id, comment, grouping, description, description_long, collection_description, is_ota_purchased, is_compilation, is_itunes_u, is_audible_audio_book, copyright, chosen_by_auto_fill, is_temporary_cloud_download, is_streaming_quality, store_bookmark_timestamp, store_bookmark_entity_revision, is_podcast, external_guid, feed_url, store_kind, date_purchased, date_released, account_id, key_versions, key_platform_id, key_id, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, artwork_url, store_xid, store_flavor, store_saga_id, store_matched_status, store_redownloaded_status, audio_format, sample_rate, duration, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, analysis_inhibit_flags, audio_fingerprint, volume_normalization_energy, is_rental, is_demo, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, has_alternate_audio, has_subtitles, is_hd, season_number, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, subtitle_track_id, episode_id, network_name, extended_content_rating, movie_info, bit_rate, pending_genius_checksum FROM item_extra
DROP TABLE item_extra
ALTER TABLE item_extra_new RENAME TO item_extra
PRAGMA user_version = 1108291;
DROP INDEX IF EXISTS ItemTitle
DROP INDEX IF EXISTS ItemTitle_Section
DROP INDEX IF EXISTS ItemAlbum
DROP INDEX IF EXISTS ItemAlbumArtist
DROP INDEX IF EXISTS ItemAlbumArtist_Section
DROP INDEX IF EXISTS ItemAlbum_Section
DROP INDEX IF EXISTS ItemItemArtist_Section
DROP INDEX IF EXISTS ItemComposer_Section
DROP INDEX IF EXISTS ItemGenre_Section
CREATE TABLE entity_revision_new (revision INTEGER PRIMARY KEY, entity_pid INTEGER NOT NULL, deleted INTEGER NOT NULL DEFAULT 0, class INTEGER NOT NULL DEFAULT 0, revision_type INTEGER NOT NULL DEFAULT 0, UNIQUE(entity_pid, revision_type))
INSERT INTO entity_revision_new (revision, entity_pid, deleted, class) SELECT revision, entity_pid, deleted, class FROM entity_revision
DROP TABLE entity_revision
ALTER TABLE entity_revision_new RENAME TO entity_revision
PRAGMA user_version = 1111152;
PRAGMA user_version = 1111153;
UPDATE item_extra SET location = "" WHERE location = "/"
PRAGMA user_version = 1113775;
PRAGMA user_version = 1114502;
ALTER TABLE container ADD COLUMN has_cloud_play_order INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1114940;
ALTER TABLE composer ADD COLUMN artwork_cache_id INTEGER NOT NULL DEFAULT 0
UPDATE composer SET artwork_cache_id = IFNULL((SELECT artwork_cache_id FROM item JOIN item_extra USING (item_pid) WHERE item.item_pid = composer.representative_item_pid), 0)
PRAGMA user_version = 1115195;
PRAGMA user_version = 1115482;
CREATE TABLE artwork_info_new(cache_id TEXT NOT NULL, format_id INTEGER NOT NULL, length INTEGER, offset INTEGER, extra_length INTEGER NOT NULL DEFAULT 0, UNIQUE (cache_id, format_id))
INSERT INTO artwork_info_new SELECT cache_id, format_id, length, offset, extra_length FROM artwork_info
DROP TABLE artwork_info
ALTER TABLE artwork_info_new RENAME TO artwork_info
PRAGMA user_version = 1118969;
CREATE TABLE purgeable_list (item_pid INTEGER PRIMARY KEY,is_purgeable INTEGER NOT NULL DEFAULT 0)
PRAGMA user_version = 1120346;
CREATE TABLE purgeable_list_new (item_pid INTEGER PRIMARY KEY, is_purgeable INTEGER NOT NULL DEFAULT 1, date_last_used INTEGER DEFAULT 0)
INSERT INTO purgeable_list_new (item_pid, is_purgeable) SELECT item_pid, is_purgeable FROM purgeable_list
DROP TABLE purgeable_list
ALTER TABLE purgeable_list_new RENAME TO purgeable_list
INSERT INTO purgeable_list (item_pid, date_last_used) SELECT item_pid, date_played FROM item_stats
PRAGMA user_version = 1121591;
CREATE TABLE purgeable_list_new (item_pid INTEGER PRIMARY KEY, is_alarm INTEGER NOT NULL DEFAULT 0, date_last_used INTEGER DEFAULT 0)
INSERT INTO purgeable_list_new (item_pid, is_alarm, date_last_used) SELECT item_pid, is_purgeable, date_last_used FROM purgeable_list
PRAGMA user_version = 1124264;
CREATE TABLE item_search (item_pid INTEGER PRIMARY KEY, search_title INTEGER NOT NULL DEFAULT 0, search_album INTEGER NOT NULL DEFAULT 0, search_artist INTEGER NOT NULL DEFAULT 0, search_composer INTEGER NOT NULL DEFAULT 0, search_album_artist INTEGER NOT NULL DEFAULT 0)
UPDATE item_search SET search_artist = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN item_artist ON item_artist.item_artist = sort_map.name JOIN item ON item.item_artist_pid = item_artist.item_artist_pid WHERE item.item_pid = item_search.item_pid), 0)
UPDATE item_search SET search_composer = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN composer ON composer.composer = sort_map.name JOIN item ON item.composer_pid = composer.composer_pid WHERE item.item_pid = item_search.item_pid), 0)
PRAGMA user_version = 1132637;
PRAGMA user_version = 1138219;
CREATE TABLE item_search_new (item_pid INTEGER PRIMARY KEY, search_title INTEGER NOT NULL DEFAULT 0, search_album INTEGER NOT NULL DEFAULT 0, search_artist INTEGER NOT NULL DEFAULT 0, search_composer INTEGER NOT NULL DEFAULT 0, search_album_artist INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_search_new (item_pid, search_title, search_album, search_artist, search_composer) SELECT item_pid, search_title, search_album, search_artist, search_composer FROM item_search
UPDATE item_search_new SET search_album_artist = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN album_artist ON album_artist.album_artist = sort_map.name JOIN item ON item.album_artist_pid = album_artist.album_artist_pid WHERE item.item_pid = item_search_new.item_pid), 0)
DROP TABLE item_search
ALTER TABLE item_search_new RENAME TO item_search
PRAGMA user_version = 1138254;
ALTER TABLE container ADD COLUMN smart_evaluation_order INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140115;
ALTER TABLE item_extra ADD COLUMN jalisco_token INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN codec_type INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN codec_subtype INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN format TEXT
ALTER TABLE item_extra ADD COLUMN data_kind INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN data_url TEXT
ALTER TABLE item_extra ADD COLUMN has_video INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN key_id_2 INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN has_chapter_data INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140116;
ALTER TABLE item_extra ADD COLUMN purchase_history_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140117;
item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, artwork_cache_id INTEGER NOT NULL DEFAULT 0, location_type INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', extension INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, file_size INTEGER NOT NULL DEFAULT 0, file_creator INTEGER NOT NULL DEFAULT 0, file_type INTEGER NOT NULL DEFAULT 0, num_dir_levels_file INTEGER NOT NULL DEFAULT 0, num_dir_levels_lib INTEGER NOT NULL DEFAULT 0, integrity BLOB, media_kind INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, total_burn_time_ms REAL NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, relative_volume INTEGER, eq_preset TEXT, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, is_ota_purchased INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, copyright TEXT, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0, is_streaming_quality INTEGER NOT NULL DEFAULT 0, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, external_guid TEXT, feed_url TEXT, store_kind INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, redownload_action_params TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, audio_format INTEGER NOT NULL DEFAULT 0, sample_rate REAL NOT NULL DEFAULT 0, duration INTEGER NOT NULL DEFAULT 0, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, analysis_inhibit_flags INTEGER NOT NULL DEFAULT 0, audio_fingerprint INTEGER NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER  NOT NULL DEFAULT 0, has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, is_hd INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, subtitle_track_id INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', bit_rate INTEGER NOT NULL DEFAULT 0, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, jalisco_token INTEGER NOT NULL DEFAULT 0, codec_type INTEGER NOT NULL DEFAULT 0, codec_subtype INTEGER NOT NULL DEFAULT 0, format TEXT, data_kind INTEGER NOT NULL DEFAULT 0, data_url TEXT, has_video INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, has_chapter_data INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE item ADD COLUMN is_video INTEGER NOT NULL DEFAULT 0
ALTER TABLE item ADD COLUMN is_podcast INTEGER NOT NULL DEFAULT 0
ALTER TABLE item ADD COLUMN is_itunes_u INTEGER NOT NULL DEFAULT 0
UPDATE item SET is_video = (((item.media_type & ~65280) = 0) OR (item.media_type = 1032)), is_podcast = ((item.media_type & (4 | 256)) != 0), is_itunes_u = ((item.media_type & (32 | 4096)) != 0) 
PRAGMA user_version = 1140118;
CREATE TABLE item_store (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, redownload_action_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_store (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, store_saga_id, purchase_history_id, purchase_history_token, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, store_saga_id, purchase_history_id, jalisco_token, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status FROM item_extra
CREATE TABLE item_playback (item_pid INTEGER PRIMARY KEY, audio_format INTEGER NOT NULL DEFAULT 0, bit_rate INTEGER NOT NULL DEFAULT 0, codec_type INTEGER NOT NULL DEFAULT 0, codec_subtype INTEGER NOT NULL DEFAULT 0, data_kind INTEGER NOT NULL DEFAULT 0, data_url TEXT, duration INTEGER NOT NULL DEFAULT 0, eq_preset TEXT, format TEXT, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, has_video INTEGER NOT NULL DEFAULT 0, relative_volume INTEGER, sample_rate REAL NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_playback (item_pid, audio_format, bit_rate, codec_type, codec_subtype, data_kind, data_url, duration, eq_preset, format, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, has_video, relative_volume, sample_rate, start_time_ms, stop_time_ms, volume_normalization_energy) SELECT item_pid, audio_format, bit_rate, codec_type, codec_subtype, data_kind, data_url, duration, eq_preset, format, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, has_video, relative_volume, sample_rate, start_time_ms, stop_time_ms, volume_normalization_energy FROM item_extra
CREATE TABLE item_video (item_pid INTEGER PRIMARY KEY, video_quality INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, has_chapter_data INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER  NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_video (item_pid, video_quality, is_rental, has_chapter_data, season_number, episode_id, network_name, extended_content_rating, movie_info, has_alternate_audio, has_subtitles, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, is_demo) SELECT item_pid, is_hd, is_rental, has_chapter_data, season_number, episode_id, network_name, extended_content_rating, movie_info, has_alternate_audio, has_subtitles, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, is_demo FROM item_extra
purgeable_list
date_last_used
chosen_by_auto_fill
item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, is_downloading INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0
item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, artwork_cache_id INTEGER NOT NULL DEFAULT 0, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0, is_streaming_quality INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140119;
ALTER TABLE item_store ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
UPDATE item_store SET sync_id = item_pid WHERE item_pid IN (SELECT item_pid from item JOIN base_location USING (base_location_id) WHERE base_location_id != 0 AND path != 'Purchases' AND path != 'CloudAssets')
PRAGMA user_version = 1140120;
UPDATE item SET base_location_id = 200 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'CloudAssets')
UPDATE base_location SET base_location_id = 200 WHERE path = 'CloudAssets'
UPDATE item SET base_location_id = 300 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'Purchases')
UPDATE item SET base_location_id = 300 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = '/var/mobile/Media/Purchases')
UPDATE base_location SET base_location_id = 300 WHERE path = 'Purchases'
UPDATE item SET base_location_id = %d WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'iTunes_Control/Music/F%02d')
UPDATE base_location SET base_location_id = %d WHERE path = 'iTunes_Control/Music/F%02d'
Media/LoFiCloudAssets
SELECT location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE is_streaming_quality = 1 AND path = 'CloudAssets' AND LENGTH(location) > 0
UPDATE item SET base_location_id = 100 WHERE item_pid IN (SELECT item_pid from item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE is_streaming_quality = 1 AND path = 'CloudAssets')
INSERT INTO base_location VALUES (100, 'LoFiCloudAssets')
Media/CloudAssets
.plist
needs_restore
item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0
(CASE store_saga_id WHEN 0 THEN '' ELSE redownload_action_params END)
purchase_history_redownload_params
(CASE WHEN (store_saga_id = 0 AND purchase_history_id != 0) THEN redownload_action_params ELSE '' END)
home_sharing_id
item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0
item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, artwork_cache_id INTEGER NOT NULL DEFAULT 0, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0
remote_location_id
(CASE WHEN store_saga_id != 0 THEN 200 ELSE (CASE WHEN purchase_history_id != 0 THEN 100 ELSE 0 END) END)
base_location_id
(IFNULL(base_location_id, 0))
item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER DEFAULT 0, track_number INTEGER DEFAULT 0, episode_sort_id INTEGER DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, is_video INTEGER NOT NULL DEFAULT 0, is_podcast INTEGER NOT NULL DEFAULT 0, is_itunes_u INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140130;
CREATE TABLE item_storebookmark_identifier (item_pid INTEGER PRIMARY KEY, storebookmark_identifier TEXT NOT NULL)
PRAGMA user_version = 1140140;
DROP TRIGGER IF EXISTS on_update_item_setIsMediaColumns
DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn
DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn
PRAGMA user_version = 1140150;
ALTER TABLE container ADD COLUMN contained_media_type INTEGER NOT NULL DEFAULT 0
CREATE TABLE container_item_media_type (container_pid INTEGER NOT NULL, media_type INTEGER NOT NULL, count INTEGER NOT NULL DEFAULT 0, UNIQUE(container_pid, media_type))
PRAGMA user_version = 1140160;
CREATE TABLE item_upp (item_pid INTEGER PRIMARY KEY, bookkeeper_identifier TEXT NOT NULL, metadata_timestamp REAL DEFAULT NULL, metadata_entity_revision INTEGER DEFAULT NULL)
INSERT INTO item_upp (item_pid, bookkeeper_identifier, metadata_timestamp, metadata_entity_revision) SELECT item_pid, storebookmark_identifier, store_bookmark_timestamp, store_bookmark_entity_revision FROM item JOIN item_storebookmark_identifier USING(item_pid) JOIN item_stats USING(item_pid);
DROP INDEX IF EXISTS ItemStorebookmarkIdentifier_identifier
DROP INDEX IF EXISTS ItemBookkeeperItemLookup
DROP TABLE IF EXISTS item_storebookmark_identifier
item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140170;
ALTER TABLE item_artist ADD COLUMN artist_artwork_cache_id TEXT NOT NULL DEFAULT ''
ALTER TABLE album_artist ADD COLUMN artist_artwork_cache_id TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1140180;
ALTER TABLE container ADD COLUMN is_ignorable_itunes_playlist INTEGER DEFAULT 0
UPDATE container SET is_ignorable_itunes_playlist = 1 WHERE (is_hidden = 1 AND distinguished_kind NOT IN (19, 20, 32))
PRAGMA user_version = 1140190;
PRAGMA user_version = 1140200;
DROP TRIGGER IF EXISTS on_update_container_setIsIgnorableITunesPlaylist
PRAGMA user_version = 1140210;
ALTER TABLE item_extra ADD COLUMN screenshot_cache_id TEXT
PRAGMA user_version = 1140230;
UPDATE item SET base_location_id = 400 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'Podcasts')
UPDATE base_location SET base_location_id = 400 WHERE path = 'Podcasts'
UPDATE item SET base_location_id = 400 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = '/var/mobile/Media/Podcasts')
PRAGMA user_version = 1140240;
PRAGMA user_version = 1140250;
PRAGMA user_version = 1140260;
DROP INDEX IF EXISTS ItemLocation
DROP INDEX IF EXISTS ItemItemArtist
DROP INDEX IF EXISTS ItemComposer
DROP INDEX IF EXISTS ItemGenre
PRAGMA user_version = 1140300;
PRAGMA user_version = 1140310;
select item_pid, item_extra.title, item_extra.total_time_ms from item_store join item_extra using (item_pid) where item_pid in (select sync_id from item_store where sync_id != 0) and sync_id = 0
select item_pid from item_store join item_extra using (item_pid) where item_store.sync_id = ? and (item_extra.title = ? or item_extra.total_time_ms = ?)
update item_store set sync_id = ? where item_pid = ?
delete from item where item_pid = ?
delete from item_extra where item_pid = ?
delete from item_store where item_pid = ?
delete from item_stats where item_pid = ?
delete from item_playback where item_pid = ?
delete from item_search where item_pid = ?
delete from item_video where item_pid = ?
delete from entity_revision where entity_pid = ?
update _MLDatabaseProperties set value=0 where key='MLSyncClientSyncAnchor'
PRAGMA user_version = 1140320;
PRAGMA user_version = 1150000;
DELETE FROM entity_revision where class = 7
PRAGMA user_version = 1150010;
DROP TRIGGER IF EXISTS on_insert_item_setIsMediaColumns;
DROP TRIGGER IF EXISTS on_update_item_setIsMediaColumns;
item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER DEFAULT 0, track_number INTEGER DEFAULT 0, episode_sort_id INTEGER DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1150020;
UPDATE item SET media_type = ML3StandardizedMediaType(media_type);
PRAGMA user_version = 1150030;
update item_store set store_item_id = 0 where store_item_id = -1
PRAGMA user_version = 1150040;
ALTER TABLE album ADD COLUMN album_year INTEGER NOT NULL DEFAULT 0
UPDATE album SET album_year = (SELECT IFNULL(MAX(year), 0) FROM item_extra JOIN item USING(item_pid) WHERE item.album_pid = album.album_pid)
PRAGMA user_version = 1150050;
UPDATE item SET remote_location_id = (SELECT CASE WHEN home_sharing_id != 0 THEN 300 ELSE (CASE WHEN IFNULL(match_redownload_params, '') != '' THEN 200 ELSE (CASE WHEN IFNULL(purchase_history_redownload_params, '') != '' AND purchase_history_id != 0 THEN 100 ELSE 0 END) END) END FROM item_store WHERE item.item_pid = item_store.item_pid)
PRAGMA user_version = 1150060;
PRAGMA user_version = 1150070;
assistant
SELECT 1 FROM item WHERE media_type IN (4, 256) LIMIT 1
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'NeedToRemovePodcastsFromSiri')
PRAGMA user_version = 1150080;
SELECT item.ROWID, base_location.path, item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id != 0 AND item_extra.file_size = 0
UPDATE item_extra SET file_size = %zu WHERE item_pid = %lld
PRAGMA user_version = 1150090;
item_artist
composer
ALTER TABLE %@ ADD COLUMN keep_local INTEGER NOT NULL DEFAULT 0
ALTER TABLE %@ ADD COLUMN keep_local_status INTEGER NOT NULL DEFAULT 0
CREATE INDEX IF NOT EXISTS ItemKeepLocal ON item (keep_local)
CREATE INDEX IF NOT EXISTS ItemArtistKeepLocal ON item_artist (keep_local)
CREATE INDEX IF NOT EXISTS AlbumKeepLocal ON album (keep_local)
CREATE INDEX IF NOT EXISTS AlbumArtistKeepLocal ON album_artist (keep_local)
CREATE INDEX IF NOT EXISTS ContainerKeepLocal ON container (keep_local)
CREATE INDEX IF NOT EXISTS GenreKeepLocal ON genre (keep_local)
CREATE INDEX IF NOT EXISTS ComposerKeepLocal ON composer (keep_local)
PRAGMA user_version = 1160000;
ALTER TABLE item_store ADD COLUMN reserved TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1160010;
ALTER TABLE item_extra ADD COLUMN version TEXT NOT NULL DEFAULT ''
ALTER TABLE item_extra ADD COLUMN display_version TEXT NOT NULL DEFAULT ''
ALTER TABLE item_playback ADD COLUMN progression_direction INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN vpp_is_licensed INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN vpp_org_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN vpp_org_name TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1160020;
CREATE TABLE item_artwork (item_pid INTEGER PRIMARY KEY, best_artwork_token TEXT NOT NULL DEFAULT '', best_artwork_source_type INTEGER NOT NULL DEFAULT 0, cloud_artwork_token TEXT NOT NULL DEFAULT '', sync_artwork_token TEXT NOT NULL DEFAULT '', purchase_history_artwork_token TEXT NOT NULL DEFAULT '', store_artwork_token TEXT NOT NULL DEFAULT '')
CREATE TABLE item_screenshot (item_pid INTEGER PRIMARY KEY, best_screenshot_token TEXT NOT NULL DEFAULT '', best_screenshot_source_type INTEGER NOT NULL DEFAULT 0, cloud_screenshot_token TEXT NOT NULL DEFAULT '', sync_screenshot_token TEXT NOT NULL DEFAULT '', purchase_history_screenshot_token TEXT NOT NULL DEFAULT '', store_screenshot_token TEXT NOT NULL DEFAULT '')
CREATE TABLE artwork (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, relative_path TEXT NOT NULL DEFAULT '', artwork_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_token, artwork_source_type))
INSERT INTO item_artwork (item_pid, cloud_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id != 0
INSERT INTO item_artwork (item_pid, sync_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id = 0 AND sync_id != 0 AND artwork_cache_id < 10001
INSERT INTO item_artwork (item_pid, purchase_history_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id = 0 AND purchase_history_id != 0 AND sync_id = 0
INSERT INTO item_screenshot (item_pid, cloud_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id != 0
INSERT INTO item_screenshot (item_pid, sync_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id = 0 AND sync_id != 0 AND screenshot_cache_id < 10001
INSERT INTO item_screenshot (item_pid, purchase_history_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id = 0 AND purchase_history_id != 0 AND sync_id = 0
UPDATE item_artwork SET best_artwork_token = (CASE WHEN cloud_artwork_token != '' THEN cloud_artwork_token ELSE (CASE WHEN sync_artwork_token != '' THEN sync_artwork_token ELSE (CASE WHEN purchase_history_artwork_token != '' THEN purchase_history_artwork_token ELSE (CASE WHEN store_artwork_token != '' THEN store_artwork_token ELSE '' END) END) END) END), best_artwork_source_type = (CASE WHEN cloud_artwork_token != '' THEN 1 ELSE (CASE WHEN sync_artwork_token != '' THEN 2 ELSE (CASE WHEN purchase_history_artwork_token != '' THEN 3 ELSE (CASE WHEN store_artwork_token != '' THEN 4 ELSE 0 END) END) END) END)
UPDATE item_screenshot SET best_screenshot_token = (CASE WHEN cloud_screenshot_token != '' THEN cloud_screenshot_token ELSE (CASE WHEN sync_screenshot_token != '' THEN sync_screenshot_token ELSE (CASE WHEN purchase_history_screenshot_token != '' THEN purchase_history_screenshot_token ELSE (CASE WHEN store_screenshot_token != '' THEN store_screenshot_token ELSE '' END) END) END) END), best_screenshot_source_type = (CASE WHEN cloud_screenshot_token != '' THEN 1 ELSE (CASE WHEN sync_screenshot_token != '' THEN 2 ELSE (CASE WHEN purchase_history_screenshot_token != '' THEN 3 ELSE (CASE WHEN store_screenshot_token != '' THEN 4 ELSE 0 END) END) END) END)
SELECT DISTINCT(best_artwork_token), best_artwork_source_type FROM item_artwork WHERE best_artwork_token != ''
INSERT INTO artwork (artwork_token, artwork_source_type, relative_path, artwork_type) VALUES (?,?,?,?)
SELECT DISTINCT(best_screenshot_token), best_screenshot_source_type FROM item_screenshot WHERE best_screenshot_token != ''
SELECT item_pid, chapter_data FROM chapter JOIN item USING (item_pid) WHERE chapter_data IS NOT NULL
chapter=%llu
v24@?0@"NSString"8^B16
SELECT DISTINCT(artist_artwork_cache_id) FROM album_artist WHERE artist_artwork_cache_id != ''
CREATE TABLE new_album (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO new_album (album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, artwork_cache_id, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album
UPDATE new_album SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'
DROP TABLE album
ALTER TABLE new_album RENAME TO album
CREATE TABLE new_item_artist (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', artist_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO new_item_artist (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, representative_item_pid, artist_artwork_token, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, representative_item_pid, artist_artwork_cache_id, keep_local, keep_local_status FROM item_artist
UPDATE new_item_artist SET representative_item_artwork_token = IFNULL( (SELECT best_artwork_token FROM item_artwork WHERE item_pid = representative_item_pid), '')
ALTER TABLE new_item_artist RENAME TO item_artist
CREATE TABLE new_album_artist (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO new_album_artist (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_cache_id, representative_item_pid, artwork_cache_id, keep_local, keep_local_status FROM album_artist
UPDATE new_album_artist SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'
DROP TABLE album_artist
ALTER TABLE new_album_artist RENAME TO album_artist
CREATE TABLE new_composer (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO new_composer (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, artwork_cache_id, keep_local, keep_local_status FROM composer
UPDATE new_composer SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'
DROP TABLE composer
ALTER TABLE new_composer RENAME TO composer
CREATE TABLE new_genre (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL UNIQUE, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO new_genre (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM genre
UPDATE new_genre SET representative_item_artwork_token = IFNULL( (SELECT best_artwork_token FROM item_artwork WHERE item_pid = representative_item_pid), '')
DROP TABLE genre
ALTER TABLE new_genre RENAME TO genre
CREATE TABLE new_item_extra (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0, version TEXT NOT NULL DEFAULT '', display_version TEXT NOT NULL DEFAULT '')
INSERT INTO new_item_extra (item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_compilation, is_audible_audio_book, date_created, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version) SELECT item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_compilation, is_audible_audio_book, date_created, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version FROM item_extra
ALTER TABLE new_item_extra RENAME TO item_extra
DROP TABLE IF EXISTS artwork_conversion
PRAGMA user_version = 1160030;
INSERT OR IGNORE INTO item_artwork (item_pid) SELECT item_pid FROM item
INSERT OR IGNORE INTO item_screenshot (item_pid) SELECT item_pid FROM item
PRAGMA user_version = 1160040;
PRAGMA user_version = 1160050;
DELETE FROM artwork WHERE artwork_token=''
PRAGMA user_version = 1160060;
extras_url
CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, reserved TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '')
INSERT INTO item_store_new (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name FROM item_store
DROP TABLE item_store
ALTER TABLE item_store_new RENAME TO item_store
PRAGMA user_version = 1160070;
UPDATE item SET remote_location_id = (SELECT (CASE WHEN home_sharing_id != 0 THEN 300 ELSE (CASE WHEN IFNULL(match_redownload_params, '') != '' THEN 200 ELSE (CASE WHEN IFNULL(purchase_history_redownload_params, '') != '' AND purchase_history_id != 0 THEN 100 ELSE 0 END) END) END) FROM item_store WHERE item_store.item_pid = item.item_pid)
PRAGMA user_version = 1160080;
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'ResetSyncToRemoveMultiverseIdentifiersFromSiri')
PRAGMA user_version = 1160090;
CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0.0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill) SELECT item_pid, IFNULL(user_rating, 0), IFNULL(needs_restore, 0), download_identifier, IFNULL(play_count_user, 0), IFNULL(play_count_recent, 0), IFNULL(has_been_played, 0), IFNULL(date_played, 0), IFNULL(date_skipped, 0), IFNULL(date_accessed, 0), IFNULL(is_alarm, 0), IFNULL(skip_count_user, 0), IFNULL(skip_count_recent, 0), IFNULL(remember_bookmark, 0), IFNULL(bookmark_time_ms, 0.0), IFNULL(hidden, 0), IFNULL(chosen_by_auto_fill, 0) FROM item_stats
DROP TABLE item_stats
ALTER TABLE item_stats_new RENAME TO item_stats
PRAGMA user_version = 1160100;
CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, reserved TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '')
INSERT INTO item_store_new (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name FROM item_store
UPDATE item_store_new SET downloader_account_id = account_id WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id > 0 AND base_location_id <= 3840)
SELECT item_pid, location FROM item JOIN item_extra USING (item_pid) WHERE base_location_id = 300
UPDATE item_store_new SET is_protected = 1 WHERE item_pid = %lld
UPDATE item_store_new SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item WHERE base_location_id IN (100, 200))
UPDATE item_store_new SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id >= 3840 AND key_id > 0)
PRAGMA user_version = 1160110;
UPDATE item_stats SET play_count_recent = 0 WHERE item_pid IN (SELECT item_pid from item WHERE remote_location_id = 200)
UPDATE item_stats SET skip_count_recent = 0 WHERE item_pid IN (SELECT item_pid from item WHERE remote_location_id = 200)
PRAGMA user_version = 1160120;
SELECT artwork_token, relative_path FROM artwork
UPDATE artwork SET relative_path = '%@' WHERE artwork_token = '%@'
PRAGMA user_version = 1160130;
UPDATE container SET play_order = 40 WHERE store_cloud_id != 0 AND play_order = 37
UPDATE container SET play_order = 41 WHERE store_cloud_id != 0 AND play_order = 38
UPDATE container SET play_order = 43 WHERE store_cloud_id != 0 AND play_order = 39
UPDATE container SET play_order =  1 WHERE store_cloud_id != 0 AND play_order = 40
UPDATE container SET play_order = 44 WHERE store_cloud_id != 0 AND play_order = 41
UPDATE container SET play_order = 45 WHERE store_cloud_id != 0 AND play_order = 42
UPDATE container SET play_order = 46 WHERE store_cloud_id != 0 AND play_order = 43
UPDATE container SET play_order = 47 WHERE store_cloud_id != 0 AND play_order = 44
UPDATE container SET play_order = play_order + 4 WHERE store_cloud_id != 0 AND play_order >= 45 AND play_order <= 58
UPDATE container SET play_order = play_order + 5 WHERE store_cloud_id != 0 AND play_order >= 59
PRAGMA user_version = 1160140;
SELECT location_kind_id, kind FROM location_kind
UPDATE item_extra set location_kind_id = ? WHERE location_kind_id = ?
DROP TABLE location_kind
PRAGMA user_version = 1160150;
PRAGMA user_version = 1160160;
ALTER TABLE item_store ADD COLUMN sync_redownload_params TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1162010;
PRAGMA user_version = 1162020;
DROP INDEX IF EXISTS ItemExtraDateModified
PRAGMA user_version = 1162030;
PRAGMA user_version = 1162040;
PRAGMA user_version = 1162050;
CREATE TABLE container_artwork (container_pid INTEGER PRIMARY KEY, best_artwork_token TEXT NOT NULL DEFAULT '', best_artwork_source_type INTEGER NOT NULL DEFAULT 0, cloud_artwork_token TEXT NOT NULL DEFAULT '', sync_artwork_token TEXT NOT NULL DEFAULT '', purchase_history_artwork_token TEXT NOT NULL DEFAULT '', store_artwork_token TEXT NOT NULL DEFAULT '')
INSERT OR IGNORE INTO container_artwork (container_pid) SELECT container_pid FROM container
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', reserved1 INTEGER NOT NULL DEFAULT 0, reserved2 TEXT NOT NULL DEFAULT '', reserved3 INTEGER NOT NULL DEFAULT 0, reserved4 INTEGER NOT NULL DEFAULT 0, reserved5 INTEGER NOT NULL DEFAULT 0, reserved6 TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, keep_local, keep_local_status FROM container
DROP TABLE container
ALTER TABLE container_new RENAME TO container
CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0.0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill) SELECT item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill FROM item_stats
PRAGMA user_version = 1162060;
CREATE TABLE local_playback_event (id INTEGER PRIMARY KEY AUTOINCREMENT, item_pid INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0)
PRAGMA user_version = 1162070;
store_item_pid
local_playback_event
CREATE TABLE local_playback_event_new (id INTEGER PRIMARY KEY AUTOINCREMENT, item_pid INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0)
INSERT INTO local_playback_event_new (id, item_pid, store_item_id, date_played) SELECT id, item_pid, store_item_pid, date_played FROM local_playback_event
DROP TABLE local_playback_event
ALTER TABLE local_playback_event_new RENAME TO local_playback_event
PRAGMA user_version = 1162080;
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', reserved1 INTEGER NOT NULL DEFAULT 0, reserved2 TEXT NOT NULL DEFAULT '', reserved3 INTEGER NOT NULL DEFAULT 0, reserved4 INTEGER NOT NULL DEFAULT 0, reserved5 INTEGER NOT NULL DEFAULT 0, reserved6 TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, reserved6, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, reserved6, keep_local, keep_local_status FROM container
UPDATE container SET is_editable = 1 WHERE distinguished_kind = 0 AND smart_criteria IS NULL AND smart_is_genius = 0 AND is_hidden = 0 AND is_src_remote = 0
PRAGMA user_version = 1162090;
CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status FROM item_artist
UPDATE item_artist SET store_id = IFNULL((SELECT store_artist_id FROM item JOIN item_store USING (item_pid) WHERE purchase_history_id != 0 AND item.item_artist_pid = item_artist.item_artist_pid), 0)
CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token,representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token,representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status FROM album_artist
ALTER TABLE album_artist_new RENAME TO album_artist
UPDATE album_artist SET store_id = IFNULL((SELECT store_artist_id FROM item JOIN item_store USING (item_pid) WHERE purchase_history_id = 0 AND item.album_artist_pid = album_artist.album_artist_pid), 0)
CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '')
INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name, IFNULL(sync_redownload_params, '') FROM item_store
PRAGMA user_version = 1162100;
PRAGMA user_version = 1162110;
ALTER TABLE item_store ADD COLUMN is_foreign INTEGER NOT NULL DEFAULT 0
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_shared INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, keep_local, keep_local_status FROM container
PRAGMA user_version = 1240000;
PRAGMA user_version = 1164010;
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_subscriber_count, cloud_subscriber_play_count, cloud_subscriber_like_count, keep_local, keep_local_status FROM container
CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', is_playlist_only INTEGER NOT NULL DEFAULT 0, needs_reporting INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, is_playlist_only) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, is_foreign FROM item_store
PRAGMA user_version = 1240010;
ALTER TABLE item_store ADD COLUMN matched_store_item_id INTEGER NOT NULL DEFAULT 0
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_shared INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container
CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album
ALTER TABLE album_new RENAME TO album
PRAGMA user_version = 1240020;
SELECT item.album_pid, album.album_artist_pid FROM item JOIN album USING (album_pid) GROUP BY item.album_pid HAVING COUNT(DISTINCT item.album_artist_pid) > 1
SELECT ROWID, album_artist_pid, album_pid FROM item WHERE album_pid IN (%@)
v32@?0@"NSNumber"8@"NSArray"16^B24
PRAGMA user_version = 1240030;
UPDATE album SET sort_album = NULL WHERE sort_album = ''
PRAGMA user_version = 1240040;
CREATE TABLE lyrics_new (item_pid INTEGER PRIMARY KEY, checksum INTEGER NOT NULL DEFAULT 0, pending_checksum INTEGER NOT NULL DEFAULT 0, lyrics TEXT NOT NULL DEFAULT '')
INSERT INTO lyrics_new (item_pid, checksum, pending_checksum, lyrics) SELECT item_pid, IFNULL(checksum, 0), IFNULL(checksum, 0), IFNULL(lyrics, '') FROM lyrics
DROP TABLE lyrics
ALTER TABLE lyrics_new RENAME TO lyrics
PRAGMA user_version = 1260000;
ALTER TABLE item_store ADD COLUMN playback_endpoint_type INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1280000;
PRAGMA user_version = 1280010;
CREATE TABLE artwork_token (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type))
CREATE TABLE best_artwork_token (entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, available_artwork_token TEXT NOT NULL DEFAULT '', fetchable_artwork_token TEXT NOT NULL DEFAULT '', fetchable_artwork_source_type INTEGER NOT NULL DEFAULT 0, UNIQUE (entity_pid, entity_type, artwork_type))
CREATE INDEX ArtworkTokenArtworkToken ON artwork_token (artwork_token)
CREATE INDEX ArtworkTokenEntityPIDEntityType ON artwork_token (entity_pid, entity_type)
ALTER TABLE artwork ADD COLUMN interest_data BLOB
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT cloud_artwork_token, 1, 1, item_pid, 0 FROM item_artwork WHERE cloud_artwork_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT sync_artwork_token, 2, 1, item_pid, 0 FROM item_artwork WHERE sync_artwork_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT purchase_history_artwork_token, 3, 1, item_pid, 0 FROM item_artwork WHERE purchase_history_artwork_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT store_artwork_token, 4, 1, item_pid, 0 FROM item_artwork WHERE store_artwork_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT cloud_screenshot_token, 1, 2, item_pid, 0 FROM item_screenshot WHERE cloud_screenshot_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT sync_screenshot_token, 2, 2, item_pid, 0 FROM item_screenshot WHERE sync_screenshot_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT purchase_history_screenshot_token, 3, 2, item_pid, 0 FROM item_screenshot WHERE purchase_history_screenshot_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT store_screenshot_token, 4, 2, item_pid, 0 FROM item_screenshot WHERE store_screenshot_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT artist_artwork_token, 4, 4, item_artist_pid, 2 FROM item_artist WHERE artist_artwork_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT artist_artwork_token, 4, 4, album_artist_pid, 7 FROM album_artist WHERE artist_artwork_token != ''
CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album
CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status FROM item_artist
CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0,  store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status FROM album_artist
CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM composer
ALTER TABLE composer_new RENAME TO composer
CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL UNIQUE, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM genre
ALTER TABLE genre_new RENAME TO genre
DROP TABLE container_artwork
DROP TABLE item_artwork
DROP TABLE item_screenshot
PRAGMA user_version = 1280020;
is_playlist_only
PRAGMA user_version = 1280030;
matched_store_item_id
subscription_store_item_id
playlist_author_id TEXT NOT NULL DEFAULT ''
radio_station_id TEXT NOT NULL DEFAULT ''
advertisement_unique_id INTEGER NOT NULL DEFAULT 0
advertisement_type INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1280040;
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0,date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1,is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0,is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0,play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0,smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0,smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0,smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0,album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0,filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0,container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0,has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0,cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_id TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0,cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container
PRAGMA user_version = 1280050;
UPDATE artwork_token SET artwork_source_type = 200 WHERE artwork_source_type = 1
UPDATE best_artwork_token SET fetchable_artwork_source_type = 200 WHERE fetchable_artwork_source_type = 1
UPDATE artwork SET artwork_source_type = 200 WHERE artwork_source_type = 1
UPDATE artwork_token SET artwork_source_type = 300 WHERE artwork_source_type = 2
UPDATE best_artwork_token SET fetchable_artwork_source_type = 300 WHERE fetchable_artwork_source_type = 2
UPDATE artwork SET artwork_source_type = 300 WHERE artwork_source_type = 2
UPDATE artwork_token SET artwork_source_type = 400 WHERE artwork_source_type = 3
UPDATE best_artwork_token SET fetchable_artwork_source_type = 400 WHERE fetchable_artwork_source_type = 3
UPDATE artwork SET artwork_source_type = 400 WHERE artwork_source_type = 3
UPDATE artwork_token SET artwork_source_type = 500 WHERE artwork_source_type = 4
UPDATE best_artwork_token SET fetchable_artwork_source_type = 500 WHERE fetchable_artwork_source_type = 4
UPDATE artwork SET artwork_source_type = 500 WHERE artwork_source_type = 4
CREATE TABLE artwork_token_new (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_source_type, artwork_type, entity_pid, entity_type))
INSERT OR REPLACE INTO artwork_token_new SELECT * FROM artwork_token
DROP TABLE artwork_token
ALTER TABLE artwork_token_new RENAME TO artwork_token
PRAGMA user_version = 1280060;
PRAGMA user_version = 1280070;
radio_station_id
ALTER TABLE item_store ADD COLUMN radio_station_id TEXT NOT NULL DEFAULT ''
ALTER TABLE item_store ADD COLUMN advertisement_unique_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN advertisement_type INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1280080;
PRAGMA user_version = 1280090;
DROP INDEX IF EXISTS ItemMediaType
PRAGMA user_version = 1280100;
PRAGMA user_version = 1280110;
PRAGMA auto_vacuum = 0;
PRAGMA user_version = 1280120;
CREATE TABLE container_seed_new (container_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, seed_order INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_seed_new (container_pid, item_pid, seed_order) SELECT container_pid, item_pid, seed_order FROM container_seed
DROP TABLE container_seed
ALTER TABLE container_seed_new RENAME TO container_seed
PRAGMA user_version = 1280130;
ALTER TABLE item_store ADD COLUMN is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1280140;
CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', needs_reporting INTEGER NOT NULL DEFAULT 0, subscription_store_item_id INTEGER NOT NULL DEFAULT 0, playback_endpoint_type INTEGER NOT NULL DEFAULT 0, is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0, radio_station_id TEXT NOT NULL DEFAULT '', advertisement_unique_id TEXT NOT NULL DEFAULT '', advertisement_type INTEGER NOT NULL DEFAULT 0, is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0, cloud_asset_available INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_type, is_artist_uploaded_content) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_type, is_artist_uploaded_content FROM item_store
PRAGMA user_version = 1280150;
DROP INDEX IF EXISTS ItemSeries
DROP INDEX IF EXISTS ItemSeries_Section
DROP INDEX IF EXISTS ItemExtraDateCreated
DROP INDEX IF EXISTS ItemExtraIsCompilation
ALTER TABLE item ADD COLUMN in_my_library INTEGER NOT NULL DEFAULT 0
ALTER TABLE item ADD COLUMN is_compilation INTEGER NOT NULL DEFAULT 0
ALTER TABLE item ADD COLUMN date_added INTEGER NOT NULL DEFAULT 0
UPDATE item SET in_my_library = (remote_location_id != 250), is_compilation = (SELECT is_compilation FROM item_extra WHERE item.item_pid = item_extra.item_pid), date_added = (SELECT date_created FROM item_extra WHERE item.item_pid = item_extra.item_pid)
PRAGMA user_version = 1280160;
PRAGMA user_version = 1280170;
ALTER TABLE item_artist ADD COLUMN app_data BLOB
ALTER TABLE album_artist ADD COLUMN app_data BLOB
PRAGMA user_version = 1280180;
ALTER TABLE item_store ADD COLUMN is_subscription INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1280190;
UPDATE item_store SET store_saga_id = 0 WHERE store_saga_id = -3
UPDATE item SET remote_location_id = 50 WHERE (remote_location_id = 250 OR remote_location_id  = 201) AND (SELECT 1 FROM item_store WHERE item.item_pid = item_store.item_pid AND subscription_store_item_id != 0)
UPDATE item_store SET cloud_asset_available = 1 WHERE IFNULL(purchase_history_redownload_params, '') != '' OR IFNULL(match_redownload_params, '') != ''
PRAGMA user_version = 1280200;
PRAGMA user_version = 1280210;
DROP TRIGGER IF EXISTS on_insert_item_setInMyLibraryColumn
DROP TRIGGER IF EXISTS on_update_item_setInMyLibraryColumn
PRAGMA user_version = 1280220;
UPDATE item SET keep_local = 1 WHERE base_location_id >= 300
PRAGMA user_version = 1280230;
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container
UPDATE container SET distinguished_kind = 10000 WHERE distinguished_kind = 35
PRAGMA user_version = 1280240;
PRAGMA user_version = 1280250;
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container
UPDATE _MLDatabaseProperties SET value = 0 WHERE key = 'MLSyncClientSyncAnchor'
PRAGMA user_version = 1280260;
PRAGMA user_version = 1280270;
UPDATE item_store SET store_saga_id=store_saga_id
PRAGMA user_version = 1280280;
ALTER TABLE item_stats ADD COLUMN liked_state_changed INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1290000;
DROP INDEX IF EXISTS ItemArtistRepresentativeItemPID
DROP INDEX IF EXISTS AlbumArtistRepresentativeItemPID
DROP INDEX IF EXISTS GenreRepresentativeItemPID
DROP INDEX IF EXISTS ComposerRepresentativeItemPID
PRAGMA user_version = 1290010;
ALTER TABLE item_store ADD COLUMN sync_in_my_library INTEGER NOT NULL DEFAULT 0
UPDATE item_store SET sync_in_my_library = 1 WHERE sync_id != 0
PRAGMA user_version = 1310020;
SELECT item_pid FROM item WHERE (media_type & 8 != 0) AND album_pid = 0
SELECT 1 FROM album WHERE album_pid = ?
INSERT INTO album (album_pid, representative_item_pid) VALUES(?, ?)
UPDATE item SET album_pid = ? WHERE item_pid = ?
INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 0, 0)
DELETE FROM entity_revision WHERE entity_pid = ? AND revision_type > 0
INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 4, 0)
PRAGMA user_version = 1310030;
DELETE FROM best_artwork_token WHERE available_artwork_token = '' AND fetchable_artwork_token = ''
PRAGMA user_version = 1310040;
PRAGMA user_version = 1310050;
DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType
UPDATE item_store SET playback_endpoint_type = 1 WHERE store_saga_id = 0 AND purchase_history_id != 0 AND playback_endpoint_type = 3
PRAGMA user_version = 1320000;
UPDATE item_store SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id >= 3840 AND is_protected = 0 AND key_id != 0)
PRAGMA user_version = 1330000;
ALTER TABLE item ADD COLUMN show_composer INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1330010;
ALTER TABLE album ADD COLUMN app_data BLOB
PRAGMA user_version = 1350010;
UPDATE album SET app_data = NULL WHERE LENGTH(app_data) = 0
UPDATE item_artist SET app_data = NULL WHERE LENGTH(app_data) = 0
UPDATE album_artist SET app_data = NULL WHERE LENGTH(app_data) = 0
UPDATE album SET grouping_key = NULL WHERE LENGTH(grouping_key) = 0
UPDATE container SET smart_criteria = NULL WHERE LENGTH(smart_criteria) = 0
UPDATE container_items SET item_pid_data = NULL WHERE LENGTH(item_pid_data) = 0
UPDATE chapter SET chapter_data = NULL WHERE LENGTH(chapter_data) = 0
CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, IFNULL(disc_number, 0), IFNULL(track_number, 0), IFNULL(episode_sort_id, 0), base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, IFNULL(show_composer, 0) FROM item
DROP TABLE item
ALTER TABLE item_new RENAME TO item
PRAGMA user_version = 1350020;
ALTER TABLE item_store ADD COLUMN cloud_in_my_library INTEGER NOT NULL DEFAULT 0
UPDATE item_store SET cloud_in_my_library = 1 WHERE store_saga_id != 0
PRAGMA user_version = 1350030;
DROP TRIGGER IF EXISTS on_remove_source_setNeedsReporting
UPDATE item_store SET needs_reporting = 0 WHERE store_saga_id = 0
PRAGMA user_version = 1350040;
ALTER TABLE container ADD COLUMN external_vendor_identifier TEXT NOT NULL DEFAULT ''
ALTER TABLE container ADD COLUMN external_vendor_display_name TEXT NOT NULL DEFAULT ''
ALTER TABLE container ADD COLUMN external_vendor_container_tag TEXT NOT NULL DEFAULT ''
ALTER TABLE container ADD COLUMN is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1350050;
PRAGMA user_version = 1350060;
UPDATE item_store SET playback_endpoint_type = (CASE WHEN sync_id THEN 0 WHEN purchase_history_id THEN 1 WHEN is_ota_purchased THEN 0 WHEN is_subscription THEN 3 ELSE 0 END) WHERE store_saga_id = 0
PRAGMA user_version = 1360000;
UPDATE item_store SET is_subscription = 0 WHERE playback_endpoint_type = 2
UPDATE item_store SET is_subscription = 1 WHERE playback_endpoint_type = 3
PRAGMA user_version = 1360010;
ALTER TABLE item_extra ADD COLUMN classical_work TEXT NOT NULL DEFAULT ''
ALTER TABLE item_extra ADD COLUMN classical_movement TEXT NOT NULL DEFAULT ''
ALTER TABLE item_extra ADD COLUMN classical_movement_count INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN classical_movement_number INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1410000;
CREATE TABLE container_item (container_item_pid INTEGER PRIMARY KEY, container_pid INTEGER NOT NULL DEFAULT 0, item_pid INTEGER NOT NULL DEFAULT 0, position INTEGER NOT NULL DEFAULT 0)
SELECT container_pid FROM container WHERE smart_criteria IS NULL OR smart_is_genius
SELECT item_pid_data FROM container_items WHERE container_pid = ?
INSERT INTO container_item (container_item_pid, container_pid, item_pid, position) VALUES (?, ?, ?, ?)
DROP TABLE IF EXISTS container_items
PRAGMA user_version = 1410010;
ALTER TABLE item_video ADD COLUMN has_hls INTEGER NOT NULL DEFAULT 0
ALTER TABLE lyrics ADD COLUMN store_lyrics_available INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1410020;
PRAGMA user_version = 1410030;
UPDATE container_item SET position = position - 1 WHERE container_pid IN (SELECT DISTINCT(container_pid) FROM container_item WHERE container_pid IN (SELECT DISTINCT(container_pid) FROM container_item WHERE position > 0) AND container_pid NOT IN (SELECT container_pid FROM container_item WHERE position = 0))
PRAGMA user_version = 1410040;
CREATE TABLE play_event (play_event_pid INTEGER PRIMARY KEY, date_played INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, container_pid INTEGER NOT NULL DEFAULT 0)
INSERT INTO play_event (date_played, container_pid) SELECT date_played, container_pid FROM container WHERE is_hidden = 0 AND date_played > 0 ORDER BY date_played DESC
PRAGMA user_version = 1410050;
ji56BO1mUeT7Qg9RO7Er9w
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'MLArtworkShouldConvertToASTC')
jpeg
UPDATE artwork SET relative_path = SUBSTR(relative_path, 0, 41)
PRAGMA user_version = 1410060;
ALTER TABLE item_store ADD COLUMN cloud_album_id TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1410070;
ALTER TABLE container ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
UPDATE container SET sync_id=container_pid WHERE is_src_remote=1 AND store_cloud_id=0
PRAGMA user_version = 1410080;
PRAGMA user_version = 1410090;
ALTER TABLE album ADD COLUMN contains_classical_work INTEGER NOT NULL DEFAULT 0
UPDATE album SET contains_classical_work=1 WHERE album_pid IN (SELECT DISTINCT(album_pid) FROM item JOIN item_extra USING (item_pid) WHERE classical_work!='' OR (show_composer=1 AND grouping!=''))
PRAGMA user_version = 1410100;
PRAGMA user_version = 1410110;
DROP INDEX IF EXISTS SortMapSortKeys
DROP INDEX IF EXISTS ItemArtistGrouping
DROP INDEX IF EXISTS AlbumArtistGrouping
DROP INDEX IF EXISTS AlbumGrouping
DROP INDEX IF EXISTS ComposerGrouping
DROP INDEX IF EXISTS GenreGrouping
DROP INDEX IF EXISTS AlbumRepresentativeItemPID
DROP INDEX IF EXISTS ItemArtistKeepLocal
DROP INDEX IF EXISTS AlbumKeepLocal
DROP INDEX IF EXISTS AlbumArtistKeepLocal
DROP INDEX IF EXISTS ContainerKeepLocal
DROP INDEX IF EXISTS GenreKeepLocal
DROP INDEX IF EXISTS ComposerKeepLocal
DROP INDEX IF EXISTS ArtworkTokenArtworkToken
DROP INDEX IF EXISTS ArtworkTokenEntityPIDEntityType
DROP INDEX IF EXISTS BestArtworkTokenEntityPIDEntityType
DROP INDEX IF EXISTS ContainerItemItemPid
DROP INDEX IF EXISTS ContainerItemPosition
DROP INDEX IF EXISTS ItemTitleInAlbum
DROP INDEX IF EXISTS ItemTitleInAlbumArtist
DROP INDEX IF EXISTS ItemTitleInItemArtist
DROP INDEX IF EXISTS ItemTitleInComposer
DROP INDEX IF EXISTS ItemTitleInGenre
DROP INDEX IF EXISTS ItemAlbumByAlbumArtist
DROP INDEX IF EXISTS ItemDateCreated
DROP INDEX IF EXISTS ItemExtraGeniusID
DROP INDEX IF EXISTS ItemStoreSagaID
DROP INDEX IF EXISTS ItemStoreItemID
DROP INDEX IF EXISTS ItemSubscriptionStoreItemID
DROP INDEX IF EXISTS ItemStatsPlayCount
DROP INDEX IF EXISTS ItemStatsPlayDate
DROP INDEX IF EXISTS ItemStatsUserRating
DROP INDEX IF EXISTS ItemStatsRememberBookmark
DROP INDEX IF EXISTS ItemUPP_BookkeeperItemLookup
DROP INDEX IF EXISTS ItemUPP_BookkeeperIdentifier
DROP INDEX IF EXISTS ItemKeepLocal
PRAGMA user_version = 1410120;
ALTER TABLE container ADD COLUMN cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0
ALTER TABLE container ADD COLUMN cloud_version_hash TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1410130;
CREATE TABLE genius_config_new (id INTEGER PRIMARY KEY, version INTEGER UNIQUE, default_num_results INTEGER NOT NULL DEFAULT 0, min_num_results INTEGER NOT NULL DEFAULT 0, data BLOB)
INSERT INTO genius_config_new (id, version, default_num_results, min_num_results, data) SELECT id, version, IFNULL(default_num_results, 0), IFNULL(min_num_results, 0), data FROM genius_config
DROP TABLE genius_config
ALTER TABLE genius_config_new RENAME TO genius_config
CREATE TABLE genius_metadata_new (genius_id INTEGER PRIMARY KEY, revision_level INTEGER NOT NULL DEFAULT 0, version INTEGER NOT NULL DEFAULT 0, checksum INTEGER NOT NULL DEFAULT 0, data BLOB)
INSERT INTO genius_metadata_new (genius_id, revision_level, version, checksum, data) SELECT genius_id, IFNULL(revision_level, 0), IFNULL(version, 0), IFNULL(checksum, 0), data FROM genius_metadata
DROP TABLE genius_metadata
ALTER TABLE genius_metadata_new RENAME TO genius_metadata
CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, IFNULL(season_number, 0), album_year, keep_local, keep_local_status, app_data, contains_classical_work FROM album
CREATE TABLE item_extra_new (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER NOT NULL DEFAULT 0, track_count INTEGER NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER NOT NULL DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER NOT NULL DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0, version TEXT NOT NULL DEFAULT '', display_version TEXT NOT NULL DEFAULT '', classical_work TEXT NOT NULL DEFAULT '', classical_movement TEXT NOT NULL DEFAULT '', classical_movement_count INTEGER NOT NULL DEFAULT 0, classical_movement_number INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_extra_new (item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_audible_audio_book, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version, classical_work, classical_movement, classical_movement_count, classical_movement_number) SELECT item_pid, title, sort_title, IFNULL(disc_count, 0), IFNULL(track_count, 0), total_time_ms, IFNULL(year, 0), location, file_size, integrity, is_audible_audio_book, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, IFNULL(bpm, 0), genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, IFNULL(category_id, 0), location_kind_id, version, display_version, classical_work, classical_movement, classical_movement_count, classical_movement_number FROM item_extra
CREATE TABLE entity_changes (class INTEGER NOT NULL, entity_pid INTEGER NOT NULL, source_pid INTEGER NOT NULL, change_type INTEGER NOT NULL, changes TEXT NOT NULL DEFAULT '', UNIQUE (class, entity_pid, source_pid, change_type))
CREATE TABLE source (source_pid INTEGER PRIMARY KEY, source_name TEXT, last_sync_date INTEGER NOT NULL DEFAULT 0, last_sync_revision INTEGER NOT NULL DEFAULT 0)
CREATE TABLE library_property (property_pid INTEGER PRIMARY KEY, source_id INTEGER, key TEXT, value TEXT, UNIQUE (source_id, key))
PRAGMA user_version = 1410140;
ALTER TABLE album ADD COLUMN date_played_local NOT NULL DEFAULT 0
ALTER TABLE container ADD COLUMN date_played_local NOT NULL DEFAULT 0
UPDATE album SET date_played_local = IFNULL((SELECT date_played FROM play_event WHERE play_event.album_pid = album.album_pid), 0)
UPDATE container SET date_played_local = IFNULL((SELECT date_played FROM play_event WHERE play_event.container_pid = container.container_pid), 0)
DROP TABLE play_event
PRAGMA user_version = 1410150;
UPDATE container SET distinguished_kind = 0 WHERE cloud_is_curator_playlist OR is_external_vendor_playlist
PRAGMA user_version = 1410160;
ALTER TABLE item_video ADD COLUMN audio_track_locale TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1410170;
ALTER TABLE item_stats ADD COLUMN user_rating_is_derived INTEGER NOT NULL DEFAULT 0
ALTER TABLE album ADD COLUMN user_rating_is_derived INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1410180;
ALTER TABLE item_store ADD COLUMN cloud_playback_endpoint_type INTEGER NOT NULL DEFAULT 0
UPDATE item_store SET cloud_playback_endpoint_type = playback_endpoint_type
PRAGMA user_version = 1410190;
PRAGMA user_version = 1410200;
PRAGMA user_version = 1410210;
SELECT item_pid, (CASE WHEN store_item_id != 0 THEN store_item_id ELSE subscription_store_item_id END) AS adam_id FROM item_store JOIN item_upp USING (item_pid) WHERE adam_id != 0 AND adam_id != bookkeeper_identifier
UPDATE item_upp SET bookkeeper_identifier = ? WHERE item_pid = ?
PRAGMA user_version = 1430000;
CREATE TABLE cloud_kvs (key TEXT PRIMARY KEY, play_count_user INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0, bookmark_sync_timestamp INTEGER NOT NULL DEFAULT 0, bookmark_sync_revision INTEGER NOT NULL DEFAULT 0)
PRAGMA user_version = 1450000;
CREATE TABLE IF NOT EXISTS item_upp (item_pid INTEGER PRIMARY KEY, bookkeeper_identifier TEXT NOT NULL DEFAULT '', metadata_timestamp REAL, metadata_entity_revision INTEGER)
PRAGMA user_version = 1450010;
SELECT key, propertyValuesBlob, timestamp FROM ubiquitous_bookmarks
timestamp
item_stats.has_been_played
item_stats.bookmark_time_ms
INSERT OR REPLACE INTO cloud_kvs (key, play_count_user, has_been_played, bookmark_time_ms, bookmark_sync_timestamp) VALUES (?, ?, ?, ?, ?)
v32@?0@"NSString"8@"NSDictionary"16^B24
SELECT key, value FROM ubiquitous_database_properties
UPDATE cloud_kvs SET bookmark_sync_revision = IFNULL((SELECT metadata_entity_revision FROM item_upp WHERE cloud_kvs.key = item_upp.bookkeeper_identifier), 0)
CREATE TABLE item_kvs (item_pid INTEGER PRIMARY KEY, key TEXT NOT NULL DEFAULT '')
INSERT INTO item_kvs (item_pid, key) SELECT item_pid, bookkeeper_identifier FROM item_upp
DROP TABLE item_upp
DROP TABLE IF EXISTS ubiquitous_bookmarks
PRAGMA user_version = 1450020;
PRAGMA user_version = 1450030;
ALTER TABLE item_video ADD COLUMN show_sort_type INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN episode_type INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN episode_type_display_name TEXT NOT NULL DEFAULT ''
ALTER TABLE item_video ADD COLUMN episode_sub_sort_order INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1450040;
ALTER TABLE item ADD COLUMN is_music_show INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1450050;
DELETE FROM _MLDatabaseProperties WHERE key = 'MLArtworkShouldConvertToASTC'
PRAGMA user_version = 1450060;
SELECT container_pid, position FROM container_item LEFT OUTER JOIN item USING (item_pid) WHERE item.item_pid IS NULL
PRAGMA user_version = 1450070;
SELECT container_item.container_pid, position FROM container JOIN container_item USING (container_pid) JOIN item USING (item_pid) WHERE distinguished_kind IN (19, 20) AND in_my_library = 0
PRAGMA user_version = 1450080;
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'MLMigrationHasDisabledAstcOnErie')
PRAGMA user_version = 1450090;
ALTER TABLE container ADD COLUMN cloud_author_handle TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1510000;
PRAGMA user_version = 1510010;
PRAGMA user_version = 1510020;
SELECT 1 FROM _MLDatabaseProperties WHERE key = 'MLMigrationHasDisabledAstcOnErie'
DELETE FROM _MLDatabaseProperties WHERE key ='MLMigrationHasDisabledAstcOnErie'
PRAGMA user_version = 1510030;
ALTER TABLE item_video ADD COLUMN hls_offline_playback_keys BLOB
ALTER TABLE item_video ADD COLUMN is_premium INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN color_capability INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN hls_color_capability INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN hls_video_quality INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1510040;
ALTER TABLE album ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1510050;
ALTER TABLE item_store ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''
ALTER TABLE container ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1510060;
ALTER TABLE item_artist ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE album_artist ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE composer ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE genre ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1510070;
ALTER TABLE item_video ADD COLUMN hls_playlist_url TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1550000;
SELECT item_pid FROM item WHERE (media_type & 8 != 0) AND album_order = 0 and album_pid != 0
INSERT INTO album (album_pid, representative_item_pid, album_artist_pid, cloud_status, user_rating, all_compilations, album_year, keep_local, keep_local_status, contains_classical_work, date_played_local, user_rating_is_derived) SELECT ?, ?, album_artist_pid, cloud_status, user_rating, all_compilations, album_year, keep_local, keep_local_status, contains_classical_work, date_played_local, user_rating_is_derived FROM album WHERE album_pid=(SELECT album_pid FROM item WHERE item_pid=?)
PRAGMA user_version = 1550010;
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'ForceSiriResetSync')
PRAGMA user_version = 1560000;
CREATE TABLE account (dsid INTEGER PRIMARY KEY DEFAULT 0, apple_id TEXT NOT NULL DEFAULT '', alt_dsid TEXT NOT NULL DEFAULT '')
Library/MusicLibrary/AccountCache.sqlitedb
SELECT dsid, apple_id FROM account
INSERT OR REPLACE INTO account (dsid, apple_id) VALUES(?, ?)
PRAGMA user_version = 1610000;
ALTER TABLE item_video ADD COLUMN audio_capability INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN hls_audio_capability INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1610010;
CREATE TABLE person (person_pid INTEGER PRIMARY KEY, cloud_id TEXT NOT NULL UNIQUE, handle TEXT NOT NULL DEFAULT '', name TEXT NOT NULL DEFAULT '', image_url TEXT NOT NULL DEFAULT '', image_token TEXT NOT NULL DEFAULT '')
CREATE TABLE container_item_person (container_item_person_pid INTEGER PRIMARY KEY, container_item_pid INTEGER NOT NULL DEFAULT 0, person_pid INTEGER NOT NULL DEFAULT 0, UNIQUE (container_item_pid, person_pid))
CREATE INDEX IF NOT EXISTS PersonPID ON person (person_pid ASC)
CREATE INDEX IF NOT EXISTS PersonCloudID ON person (cloud_id ASC)
CREATE INDEX IF NOT EXISTS ContainerItemPerson ON container_item_person (container_item_pid ASC)
ALTER TABLE container ADD COLUMN should_display_index INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1610020;
-shm
PRAGMA user_version = 1610030;
ALTER TABLE item ADD COLUMN date_downloaded INTEGER NOT NULL DEFAULT 0
ALTER TABLE container ADD COLUMN date_downloaded INTEGER NOT NULL DEFAULT 0
SELECT item.ROWID, base_location.path, item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id >= 300 
UPDATE item SET date_downloaded = ? WHERE item_pid = ?
v32@?0@"NSNumber"8@"NSDate"16^B24
PRAGMA user_version = 1710000;
ML3MigrationFunction1710000to1710010
com.apple.itunescloud
ICDefaultsCachedSubscriptionStatus
PRAGMA user_version = 1710010;
ALTER TABLE album_artist ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1710020;
ALTER TABLE item ADD COLUMN download_source_container_pid INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1710030;
select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) FROM container where distinguished_kind = 10000 AND is_container_type_active_target)
INSERT OR REPLACE INTO entity_revision (entity_pid, revision_type, deleted, class) VALUES(?, ?, ?, ?)
delete from container_item where container_pid in (select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) FROM container where distinguished_kind = 10000 AND is_container_type_active_target))
delete from container where container_pid in (select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) from container where distinguished_kind = 10000 AND is_container_type_active_target))
PRAGMA user_version = 1710040;
PRAGMA user_version = 1710050;
PRAGMA user_version = 1710051;
SELECT item.ROWID, base_location.path, item_extra.location, item.date_downloaded FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id >= 300 AND item.date_downloaded != 0
DELETE FROM _MLDatabaseProperties WHERE key ='MLLastKnownActiveLockerAccountDSID'
DELETE FROM _MLDatabaseProperties WHERE key ='MLCloudLibraryPrefersToMerge'
PRAGMA user_version = 1710060;
PRAGMA user_version = 1710061;
SELECT album_artist_pid, album FROM album GROUP BY album, album_artist_pid HAVING MIN(all_compilations) = 0 AND MAX(all_compilations) = 1
SELECT album_pid FROM album WHERE all_compilations = 0 AND album_artist_pid = ? AND album = ?
SELECT album_pid FROM album WHERE all_compilations = 1 AND album_artist_pid = ? AND album = ?
SELECT item_pid FROM item WHERE album_pid = ?
UPDATE item SET album_pid = ? WHERE album_pid = ?
DELETE FROM album WHERE album_pid = ?
v32@?0@"NSArray"8Q16^B24
PRAGMA user_version = 1750000;
UPDATE item SET media_type=4 WHERE media_type=12
PRAGMA user_version = 1770000;
PRAGMA user_version = 1800000;
PRAGMA user_version = 1810000;
ALTER TABLE container ADD COLUMN is_personalized_mix INTEGER NOT NULL DEFAULT 0
ALTER TABLE container ADD COLUMN personalized_mix_sort_key TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1850000;
ALTER TABLE item_stats ADD COLUMN liked_state_changed_date INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1850010;
ALTER TABLE item_extra ADD COLUMN is_preorder INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1850020;
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, is_personalized_mix, personalized_mix_sort_key FROM container
PRAGMA user_version = 1850030;
ALTER TABLE item_video ADD COLUMN hls_asset_traits INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN hls_key_server_url TEXT NOT NULL DEFAULT ''
ALTER TABLE item_video ADD COLUMN hls_key_cert_url TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1850040;
ALTER TABLE item_store ADD COLUMN reporting_store_item_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN asset_store_item_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1850050;
PRAGMA user_version = 1910000;
PRAGMA user_version = 1910010;
ALTER TABLE lyrics ADD COLUMN time_synced_lyrics_available INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1910020;
PRAGMA user_version = 1910030;
ALTER TABLE item_video ADD COLUMN hls_key_server_protocol TEXT NOT NULL DEFAULT ''
UPDATE item_video SET hls_key_server_protocol = 'simplified' WHERE item_video.hls_key_server_url != '' AND item_video.hls_asset_traits != 0
PRAGMA user_version = 1950000;
CREATE TABLE booklet (booklet_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', store_item_id INTEGER NOT NULL DEFAULT 0, redownload_params TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0)
CREATE INDEX IF NOT EXISTS BookletItemPersistentID ON booklet (item_pid ASC)
PRAGMA user_version = 1950010;
CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0, is_music_show INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, download_source_container_pid INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid FROM item
CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id FROM album
CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id FROM item_artist
CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '')
INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id, cloud_universal_library_id) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id, cloud_universal_library_id FROM album_artist
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key FROM container
CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id FROM genre
CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id FROM composer
PRAGMA user_version = 1950020;
PRAGMA user_version = 1950030;
ALTER TABLE album ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0
ALTER TABLE album_artist ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_artist ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1950040;
ALTER TABLE item_store ADD COLUMN extended_playback_attribute INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 2000000;
CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0, is_music_show INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, download_source_container_pid INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, keep_local_constraints, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, keep_local_constraints, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid FROM item
CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available FROM album
CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, classical_experience_available) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, classical_experience_available FROM item_artist
CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', classical_experience_available INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available FROM album_artist
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key FROM container
CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id FROM genre
CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id FROM composer
PRAGMA user_version = 2000010;
PRAGMA user_version = 2000020;
UPDATE item_extra SET integrity = (SELECT ML3TrackIntegrityCompute(item.item_pid, item.media_type, item_extra.location, item_extra.file_size) FROM item JOIN item_extra AS item_extra2 USING (item_pid) WHERE item_extra.item_pid = item.item_pid)
ML3MusicLibraryBackgroundTasksShouldStopSuppressingChangesNotification
ML3MusicLibraryBackgroundTasksShouldSuppressChangesNotification
ML3MusicLibraryContentsDidChangeNotification
ML3MusicLibraryEntitiesAddedOrRemovedNotification
ML3MusicLibraryDisplayValuesDidChangeNotification
ML3MusicLibraryInvisiblePropertiesDidChangeNotification
ML3MusicLibraryNonContentsPropertiesDidChangeNotification
ML3MusicLibrarySyncGenerationDidChangeNotification
ML3MusicLibraryUIDDidChangeNotification
ML3MusicLibraryCloudLibraryAvailablityDidChangeNotification
ML3MusicLibrarySectionsDidChangeNotification
ML3MusicLibraryWillInvalidateDatabaseConnectionNotification
ML3MusicLibraryImportDidFinishNotification
ML3MusicLibraryKeepLocalStateChangedNotification
ML3MusicLibraryPathDidChangeNotification
com.apple.mobileipod.librarychanged
com.apple.mobileipod.entitiesaddedorremoved
com.apple.mobileipod.noncontentspropertieschanged
com.apple.mobileipod.invisiblepropertieschanged
com.apple.mobileipod.displayvalueschanged
com.apple.mobileipod.syncgenerationchanged
com.apple.mobileipod.libraryUIDchanged
com.apple.mobileipod.cloudlibraryavailabilitychanged
com.apple.mobileipod.sectionschanged
com.apple.mobileipod.libraryimportdidfinish
com.apple.mobileipod.keeplocalstatechanged
_UUID
MLSyncLibraryID
music-video
song
com.apple.MusicLibrary.global.serial.queue
iTunes_Control
ML3MusicLibrary.m
sharedLibrary use is disabled. use initWithPath: in this process
com.apple.MusicLibrary.atomicity
v16@?0@"NSNotification"8
SBFinishedLanguageChangeStartup
isAutoupdatingSharedLibraryKey
resourceManagerKey
MLIsHomeSharingLibrary
SELECT MAX(revision) FROM entity_revision;
SELECT MAX(revision) FROM entity_revision WHERE revision_type=0;
MLSyncClientGenerationID
SELECT 1 FROM item LIMIT 1
SELECT 1 FROM container WHERE distinguished_kind = 0 LIMIT 1
PLAYBACK_HISTORY_PLAYLIST_NAME
Photos Memories
LocalizedSectionIndices
SectionIndices
UNKNOWN_SECTION_HEADER
MPExplicitContentAllowedBoolean
PRAGMA user_version
ANALYZE;
artwork
artwork_token
chapter
cloud_kvs
container_item_media_type
item_playback
item_search
item_stats
sort_map
_MLDatabaseProperties
LocalizedSectionHeaders
B32@?0@8Q16^B24
SectionHeaders
Headers
DBTimestampMasOSDate
SELECT item_store.sync_id, item_video.audio_track_id, item_stats.bookmark_time_ms, entity_revision.deleted, item_stats.play_count_recent, item_stats.date_played, item_stats.has_been_played, item_stats.skip_count_recent, item_stats.date_skipped, item_stats.user_rating, item_stats.liked_state, item_store.item_pid, store_saga_id, album.liked_state, item.in_my_library FROM item JOIN item_stats USING(item_pid) LEFT OUTER JOIN entity_revision ON (item.item_pid = entity_pid) JOIN item_video USING (item_pid) JOIN item_store using (item_pid) LEFT OUTER JOIN album USING (album_pid) WHERE revision > ? AND class = 0 ORDER BY entity_revision.revision DESC;
persistentID
audioTrackID
isPlaylistOnly
tracks
SELECT primary_container_pid FROM db_info
playlistPersistentID
playlistDeleted
%llu
Encountered error validating format. pathFormat=%@ error=%@
deleteWithoutSyncing
dateLastModified
originalDateLastModified
parentPersistentID
external_vendor_display_name
is_external_vendor_playlist
trackPersistentIDs
seedTrackPersistentID
artworkCacheId
artworkFilePath
-[ML3MusicLibrary savePlaylistsSinceRevision:withGrappaID:]_block_invoke
SYNC_MARKER
SELECT COUNT(name) FROM sqlite_master WHERE type='table' AND name = '%@';
SELECT rowid FROM sort_map WHERE name='' AND name_order != 0
SELECT value FROM _MLDatabaseProperties WHERE key = '%@'
MLSortMapTables
plist
Unable to load MLSortMapTables.plist at %@
v32@?0@8@"NSArray"16^B24
WHEN class = 0 THEN deleted != 0 OR EXISTS (SELECT 1 FROM item WHERE item.in_my_library AND item.item_pid = entity_pid) 
WHEN class = 1 THEN deleted != 0 OR EXISTS (SELECT 1 FROM container WHERE container_pid = entity_pid) 
WHEN class = 2 THEN deleted != 0 OR EXISTS (SELECT 1 FROM item_artist JOIN item USING(item_artist_pid) WHERE item.in_my_library AND item_artist_pid = entity_pid LIMIT 1) 
WHEN class = 3 THEN deleted != 0 OR EXISTS (SELECT 1 FROM genre JOIN item USING(genre_id) WHERE item.in_my_library AND genre_id = entity_pid LIMIT 1) 
WHEN class = 4 THEN deleted != 0 OR EXISTS (SELECT 1 FROM album JOIN item USING(album_pid) WHERE item.in_my_library AND album_pid = entity_pid LIMIT 1) 
WHEN class = 5 THEN deleted != 0 OR EXISTS (SELECT 1 FROM composer JOIN item USING(composer_pid) WHERE item.in_my_library AND composer_pid = entity_pid LIMIT 1) 
WHEN class = 7 THEN deleted != 0 OR EXISTS (SELECT 1 FROM album_artist JOIN item USING(album_artist_pid) WHERE item.in_my_library AND album_artist_pid = entity_pid LIMIT 1) 
SELECT entity_pid, revision, revision_type, deleted, class FROM entity_revision 
 LEFT OUTER JOIN item AS mediaType_item ON (mediaType_item.item_pid = entity_pid) 
 WHERE revision > ? 
 AND revision_type <= ? 
 AND CASE 
ELSE 0 END
 AND CASE %@ ELSE 0 END
 AND class = ? 
 AND (deleted != 0
 ((media_type & %lu) != 0)
SELECT entity_pid, revision, deleted, class FROM entity_revision WHERE revision > ? 
SELECT entity_pid, class FROM entity_revision WHERE revision > ?
SELECT 1 FROM entity_revision WHERE entity_pid = ? AND class = ? AND revision > ? 
SELECT COUNT() FROM entity_revision WHERE revision > ? 
SELECT DISTINCT(relative_path), best_artwork_token.artwork_type, media_type FROM item JOIN best_artwork_token ON item_pid = entity_pid AND entity_type = 0 JOIN artwork ON available_artwork_token = artwork_token
SELECT DISTINCT(relative_path), best_artwork_token.artwork_type FROM best_artwork_token JOIN artwork ON available_artwork_token = artwork_token WHERE entity_type IN (2,7)
imagedata.XXXXXX
SELECT artwork_source_type, relative_path, artwork_type FROM artwork WHERE artwork_token = ?
DELETE FROM artwork WHERE artwork_token = ?
SELECT entity_pid, entity_type, artwork_type FROM artwork_token WHERE artwork_token = ?
DELETE FROM artwork_token WHERE artwork_token = ?
SELECT relative_path, artwork_type FROM artwork WHERE artwork_token = ?
DELETE FROM artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ?
SELECT 1 FROM artwork WHERE artwork_token=?
SELECT available_artwork_token, fetchable_artwork_token, fetchable_artwork_source_type FROM best_artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ?
SELECT artwork_token, artwork_source_type FROM artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ?
SELECT 1 FROM container WHERE NOT is_hidden AND distinguished_kind = ? AND smart_criteria IS NULL AND NOT smart_is_genius AND (NOT cloud_is_subscribed OR is_editable) LIMIT 1
SELECT 1 FROM item JOIN item_store USING (item_pid) WHERE in_my_library AND cloud_status = ? LIMIT 1
SELECT 1 FROM container_item JOIN container USING (container_pid) JOIN item_store USING (item_pid) WHERE cloud_status = ? AND NOT is_hidden AND distinguished_kind = ? AND smart_criteria IS NULL AND NOT smart_is_genius AND (NOT cloud_is_subscribed OR is_editable) LIMIT 1
DELETE FROM item_store WHERE item_pid NOT IN (SELECT item_pid FROM item)
DELETE FROM item_stats WHERE item_pid NOT IN (SELECT item_pid FROM item)
Ringtones.plist
Ringtones
Attempting to de-orphan shared resources in a MU library! %@
iTunes_Control/Music
SELECT value FROM _MLDatabaseProperties WHERE key = ?
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (?, ?);
DELETE FROM _MLDatabaseProperties WHERE key = ?
%s%s
com.apple.media.entities
.siri_data_changed
INSERT OR REPLACE INTO artwork (artwork_token, artwork_type, artwork_source_type, relative_path) VALUES (?, ?, ?, ?)
SELECT entity_pid, entity_type FROM artwork_token WHERE artwork_token = ? AND artwork_type = ? AND artwork_source_type = ?
SELECT artwork_token.artwork_token, artwork_token.artwork_source_type, (artwork.relative_path IS NOT NULL) AS has_artwork_on_disk FROM artwork_token LEFT OUTER JOIN artwork USING (artwork_token) WHERE artwork_token.entity_pid = ? AND artwork_token.entity_type = ? AND artwork_token.artwork_type = ? ORDER BY artwork_token.artwork_source_type ASC
DELETE FROM artwork_token WHERE entity_type = ? AND entity_pid NOT IN (SELECT ROWID FROM %@)
DELETE FROM best_artwork_token WHERE entity_type = ? AND entity_pid NOT IN (SELECT ROWID FROM %@)
SELECT artwork_token, artwork_source_type, relative_path, artwork.artwork_type FROM artwork LEFT OUTER JOIN best_artwork_token ON artwork_token = available_artwork_token WHERE artwork.artwork_type != ? AND available_artwork_token IS NULL
SELECT artwork_token, relative_path FROM artwork WHERE artwork_type = ?
SELECT distinct(relative_path) FROM artwork
SELECT artwork_token FROM artwork WHERE relative_path = ?
SELECT entity_pid, entity_type, artwork_type FROM best_artwork_token WHERE available_artwork_token = ?
SELECT entity_pid, entity_type, best_artwork_token.artwork_type, available_artwork_token FROM best_artwork_token LEFT OUTER JOIN artwork ON available_artwork_token = artwork_token WHERE available_artwork_token != '' AND artwork_token IS NULL
DELETE FROM %@
ML3MusicLibrary %p - Database path change failure [unable to close connection pools] - error=%@
ML3MusicLibrary %p - Unable to prepare for account changes during emergency disconnect
Library.itdb
/Media/iTunes_Control/iTunes/MediaLibrary.p7b
INSERT OR REPLACE INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) VALUES (?, ?, ?, ?, ?)
DELETE FROM artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ? AND artwork_source_type = ?
BOOL UpdateBestArtworkToken(ML3DatabaseConnection *__strong, int64_t, ML3EntityType, ML3ArtworkType, NSString *__strong, NSString *__strong, ML3ArtworkSourceType, BOOL)
Available artwork token cannot be nil
Fetchable artwork token cannot be nil
SELECT available_artwork_token FROM best_artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ?
INSERT OR REPLACE INTO best_artwork_token (entity_pid, entity_type, artwork_type, available_artwork_token, fetchable_artwork_token, fetchable_artwork_source_type) VALUES (?, ?, ?, ?, ?, ?)
DELETE FROM best_artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ?
multiverseID
mediaItem
item_extra.genius_id
genius_metadata.checksum
item_extra.pending_genius_checksum
item_extra.content_rating_level
item_extra.title
title_order
title_order_section
item_extra.sort_title
item_artist.item_artist
item_artist_order
item_artist_order_section
item_artist.sort_item_artist
item_artist.keep_local
item_artist.store_id
album.album
album_order
album_order = 0
album_order_section
album.sort_album
album.liked_state
album.album_year
album.keep_local
sort_map.name_order
album_artist_order = 0
album_artist_order_section
album_artist.sort_album_artist
album_artist.keep_local
album_artist.store_id
album_artist.cloud_universal_library_id
composer.composer
composer_order
composer_order_section
composer.keep_local
composer.sort_composer
genre_id
genre.keep_local
genre.genre
genre_order
genre_order_section
item_search.search_title
item_search.search_album
item_search.search_composer
item_search.search_album_artist
disc_number
item_extra.disc_count
item_extra.track_count
download_source_container_pid
best_artwork_token.available_artwork_token IS NOT NULL
IFNULL(best_artwork_token.available_artwork_token, '') != ''
best_artwork_token.available_artwork_token AS available_item_artwork_token
best_artwork_token.fetchable_artwork_source_type AS fetchable_item_artwork_source_type
best_artwork_token.available_artwork_token AS available_item_screenshot_token
best_artwork_token.fetchable_artwork_token AS fetchable_item_screenshot_token
best_artwork_token.fetchable_artwork_source_type AS fetchable_item_screenshot_source_type
item_artist.series_name
series_name_order
series_name_order_section
item_artist.sort_series_name
item_video.season_number
item_video.episode_id
item_video.network_name
item_store.feed_url
item_store.date_released
item_store.external_guid
item_extra.description
item_extra.comment
item_extra.location
base_location.path
(IFNULL(base_location.path, '') || '/' || item_extra.location)
item_extra.grouping
IFNULL(item_artist.series_name, item_artist.item_artist)
IFNULL(ML3SeasonDisplayName(item_video.season_number), album.album)
in_my_library
is_compilation
(item.exclude_from_shuffle = 0)
media_type
((item.media_type & 260)!=0)
((item.media_type & 4128)!=0)
(((item.media_type & ~65280) = 0) OR (item.media_type = 1032))
category.category
item_extra.category_id
item_extra.description_long
item_extra.location_kind_id
item_extra.collection_description
item_playback.eq_preset
item_extra.file_size
item_extra.total_time_ms
item_playback.start_time_ms
item_playback.stop_time_ms
item_extra.year
item_playback.bit_rate
item_playback.sample_rate
item_playback.audio_format
item_playback.duration
item_playback.gapless_heuristic_info
item_playback.gapless_encoding_delay
item_playback.gapless_encoding_drain
item_playback.gapless_last_frame_resynch
item_playback.volume_normalization_energy
item_extra.date_modified
date_downloaded
item_extra.bpm
item_store.store_item_id
item_store.store_playlist_id
item_store.store_composer_id
item_store.store_genre_id
item_store.account_id
item_store.downloader_account_id
item_store.family_account_id
item_store.is_protected
item_store.key_id
item_store.date_purchased
item_store.key_platform_id
item_store.storefront_id
item_store.store_kind
item_store.key_versions
(CASE WHEN LENGTH(IFNULL(item_store.match_redownload_params, '')) > 0 THEN item_store.match_redownload_params ELSE item_store.purchase_history_redownload_params END)
item_store.purchase_history_redownload_params
item_store.match_redownload_params
item_store.cloud_status
(LENGTH(IFNULL(item_store.match_redownload_params, '')) > 0 OR LENGTH(IFNULL(item_store.purchase_history_redownload_params, '')) > 0)
item_store.artwork_url
item_store.store_xid
item_store.store_flavor
item_store.store_saga_id
item_store.store_matched_status
item_store.store_redownloaded_status
item_store.store_link_id
item_store.extras_url
item_store.vpp_is_licensed
item_store.vpp_org_id
item_store.vpp_org_name
item_store.sync_redownload_params
needs_reporting
item_store.subscription_store_item_id
item_store.playback_endpoint_type
item_store.is_mastered_for_itunes
item_store.radio_station_id
item_store.advertisement_unique_id
item_store.advertisement_type
item_store.is_artist_uploaded_content
item_store.cloud_asset_available
item_store.is_subscription
item_store.sync_in_my_library
item_store.cloud_in_my_library
item_store.cloud_album_id
item_store.cloud_playback_endpoint_type
item_store.cloud_universal_library_id
item_store.asset_store_item_id
item_store.reporting_store_item_id
item_store.extended_playback_attribute
store_link.url
item_video.audio_language
item_video.audio_track_index
item_video.audio_track_id
item_video.audio_track_locale
item_video.subtitle_language
item_video.subtitle_track_index
item_video.has_alternate_audio
item_video.has_subtitles
item_extra.content_rating
item_video.extended_content_rating
(item_video.video_quality != 0)
item_extra.is_audible_audio_book
item_video.show_sort_type
item_video.episode_type
item_video.episode_type_display_name
item_video.episode_sub_sort_order
((item.media_type & 1024) = 1024)
item_video.movie_info
item_extra.media_kind
item_extra.is_user_disabled
item_stats.play_count_user
item_stats.play_count_recent
item_stats.date_played
item_stats.skip_count_user
item_stats.skip_count_recent
item_stats.date_skipped
item_stats.user_rating
item_stats.user_rating_is_derived
album.user_rating
album.user_rating_is_derived
item_stats.remember_bookmark
item_stats.hidden
item_stats.liked_state
item_stats.liked_state_changed
item_stats.liked_state_changed_date
item_extra.copyright
lyrics.lyrics
lyrics.checksum
lyrics.pending_checksum
lyrics.store_lyrics_available
lyrics.time_synced_lyrics_available
item_playback.relative_volume
item_video.is_premium
item_video.is_rental
item_video.is_demo
item_video.rental_duration
item_video.rental_playback_duration
item_video.rental_playback_date_started
item_video.rental_date_started
item_video.has_hls
CASE WHEN rental_playback_date_started != 0 THEN MIN(rental_playback_date_started + rental_playback_duration, rental_date_started + rental_duration) ELSE rental_date_started + rental_duration END
(rental_date_started + rental_duration)
item_video.hls_offline_playback_keys
item_video.color_capability
item_video.hls_color_capability
item_video.video_quality
item_video.hls_video_quality
item_video.hls_playlist_url
item_video.audio_capability
item_video.hls_audio_capability
item_video.hls_asset_traits
item_video.hls_key_server_url
item_video.hls_key_cert_url
item_video.hls_key_server_protocol
item_store.is_ota_purchased
item_stats.chosen_by_auto_fill
chapter.chapter_data
(CASE WHEN LENGTH(IFNULL(chapter.chapter_data,'')) > 0 THEN 1 ELSE 0 END)
container_item.container_pid
container_item.position
container_item.container_item_pid
ML3IsCurrentlyRestrictedMedia(item.media_type, item_extra.content_rating, item_extra.content_rating_level, (SELECT value FROM _MLDatabaseProperties WHERE key='MPExplicitContentAllowedBoolean'))
(item_extra.content_rating == 1)
(item_extra.content_rating == 2)
ML3TrackIntegrityCompute(item.item_pid, item.media_type, item_extra.location, item_extra.file_size)
ML3TrackIntegrityVerify(item_extra.integrity, item.item_pid, item.media_type, item_extra.location, item_extra.file_size)
(item.remote_location_id >= 50 AND item.remote_location_id < 300)
(item.remote_location_id = 20)
(item.remote_location_id >= 50 AND item.base_location_id < 300)
(item.remote_location_id != 100)
(NOT item.in_my_library)
((item_extra.total_time_ms - item_stats.bookmark_time_ms < 30000 AND item_extra.total_time_ms > 60000) OR (item_stats.bookmark_time_ms >= .95 * item_extra.total_time_ms))
item_stats.needs_restore
item_stats.download_identifier
(item.base_location_id > 0)
(item.base_location_id BETWEEN 100 AND 200)
(item.base_location_id = 100)
(item.base_location_id > 200)
(item.base_location_id == 0 AND item.remote_location_id == 0 AND item_store.sync_id != 0)
(item.base_location_id OR item.remote_location_id)
(item.base_location_id >= 300)
(item.base_location_id >=300 OR item.remote_location_id = 10)
(item_store.is_protected > 0)
( (item.base_location_id = 0 AND item_store.playback_endpoint_type = 3) OR item_store.is_protected = 2 )
item_stats.is_alarm
item_stats.date_accessed
item_store.purchase_history_token
item_playback.codec_type
item_playback.codec_subtype
item_playback.format
item_playback.data_kind
item_playback.data_url
item_playback.has_video
item_store.key_id_2
item_video.has_chapter_data
item_store.purchase_history_id
item_store.sync_id
item_store.home_sharing_id
ML3TrackPropertyStoreBookmarkMetadataIdentifierFn
ML3TrackPropertyStoreBookmarkMetadataIdentifierFn(item.media_type, item_store.store_item_id, item_store.subscription_store_item_id, item_store.feed_url, item_store.external_guid, item.item_pid, item.item_artist_pid, item.album_pid)
item_kvs.key
cloud_kvs.bookmark_sync_timestamp
cloud_kvs.bookmark_sync_revision
item_extra.version
item_extra.display_version
item_playback.progression_direction
item.is_music_show
item.show_composer
(CASE WHEN item.show_composer = 1 THEN composer.composer ELSE album_artist.album_artist END)
item_extra.classical_work
item_extra.classical_movement
item_extra.classical_movement_count
item_extra.classical_movement_number
(CASE WHEN item_extra.classical_work != '' THEN item_extra.classical_work ELSE (CASE WHEN item.show_composer = 1 THEN item_extra.grouping ELSE '' END) END)
item_extra.is_preorder
property
SELECT genre.genre_id FROM genre WHERE genre.genre
subselect
LEFT OUTER JOIN album USING (album_pid)
LEFT OUTER JOIN sort_map ON album.album = sort_map.name
name_order
LEFT OUTER JOIN album_artist USING (album_artist_pid)
JOIN base_location USING (base_location_id)
JOIN item_extra USING (item_pid)
LEFT OUTER JOIN category USING (category_id)
LEFT OUTER JOIN composer USING (composer_pid)
LEFT OUTER JOIN genre USING (genre_id)
LEFT OUTER JOIN item_artist USING (item_artist_pid)
sort_item_artist
title
sort_title
track_count
description
comment
location
total_time_ms
is_audible_audio_book
media_kind
JOIN item_store USING (item_pid)
store_playlist_id
store_composer_id
store_genre_id
account_id
family_account_id
date_released
date_purchased
key_versions
match_redownload_params
cloud_status
store_saga_id
store_redownloaded_status
store_matched_status
is_ota_purchased
key_id_2
vpp_is_licensed
vpp_org_id
vpp_org_name
sync_redownload_params
playback_endpoint_type
is_mastered_for_itunes
advertisement_unique_id
advertisement_type
is_artist_uploaded_content
cloud_asset_available
is_subscription
sync_in_my_library
cloud_in_my_library
cloud_album_id
cloud_playback_endpoint_type
asset_store_item_id
reporting_store_item_id
extended_playback_attribute
LEFT OUTER JOIN store_link USING (store_link_id)
JOIN item_playback USING (item_pid)
eq_preset
stop_time_ms
bit_rate
audio_format
gapless_heuristic_info
gapless_encoding_delay
gapless_last_frame_resynch
volume_normalization_energy
relative_volume
codec_type
codec_subtype
format
data_kind
data_url
progression_direction
JOIN item_video USING (item_pid)
item_video
network_name
audio_track_index
audio_track_id
audio_track_locale
extended_content_rating
movie_info
is_rental
is_demo
rental_duration
rental_playback_duration
rental_date_started
has_hls
has_chapter_data
hls_offline_playback_keys
is_premium
hls_color_capability
video_quality
audio_capability
hls_asset_traits
hls_key_cert_url
LEFT OUTER JOIN genius_metadata ON (genius_metadata.genius_id = item_extra.genius_id)
JOIN item_stats USING (item_pid)
bookmark_time_ms
date_played
date_skipped
download_identifier
has_been_played
liked_state_changed
liked_state_changed_date
play_count_recent
play_count_user
skip_count_recent
skip_count_user
remember_bookmark
JOIN item_search USING (item_pid)
search_title
search_album
search_artist
search_composer
search_album_artist
LEFT OUTER JOIN item_kvs USING (item_pid)
item_kvs
LEFT OUTER JOIN cloud_kvs USING (key)
LEFT OUTER JOIN best_artwork_token ON entity_pid = item_pid AND entity_type = 0 AND artwork_type = 1
best_artwork_token
available_artwork_token
fetchable_artwork_token
fetchable_artwork_source_type
LEFT OUTER JOIN best_artwork_token ON entity_pid = item_pid AND entity_type = 0 AND artwork_type = 2
JOIN container_item USING (item_pid)
position
LEFT OUTER JOIN chapter USING (item_pid)
LEFT OUTER JOIN lyrics USING (item_pid)
checksum
pending_checksum
time_synced_lyrics_available
JOIN album_artist USING (album_artist_pid)
JOIN composer USING (composer_pid)
deleted
playCount
playMacOSDate
playedState
skipCount
skipMacOSDate
bookmarkTimeInMS
albumLikedState
automated action
user action
SELECT 1 FROM item WHERE ROWID = ?
v32@?0@"NSString"8@"NSString"16r^@24
UPDATE item_extra SET integrity = ? WHERE item_pid = ?
SELECT integrity FROM item_extra WHERE item_pid = ?
DELETE FROM item_kvs WHERE item_pid = ?
INSERT OR REPLACE INTO item_upp (item_pid, bookkeeper_identifier) %@
SELECT %@.%@ FROM %@ WHERE %@ = ?
@"NSString"28@?0@"NSString"8@"NSString"16i24
v28@?0^{sqlite3_context=}8i16^^{sqlite3_value}20
UPDATE item SET base_location_id=0, date_downloaded=0, download_source_container_pid=0, keep_local=-1, keep_local_constraints=0, keep_local_status=0, keep_local_status_reason=0 WHERE item.item_pid
UPDATE item SET base_location_id=0, date_downloaded=0, download_source_container_pid=0 WHERE item.item_pid
UPDATE item_extra SET location = '' WHERE item_extra.item_pid
UPDATE item_store SET sync_id = 0, downloader_account_id = 0, family_account_id = 0, is_protected = 0, is_ota_purchased = 0 WHERE item_store.item_pid
UPDATE item_video SET hls_asset_traits = 0 WHERE item_video.item_pid
UPDATE item_video SET hls_offline_playback_keys = NULL WHERE item_video.item_pid
SELECT item_extra.location, base_location.path, item.item_pid, item.base_location_id, item_store.store_saga_id, item_store.purchase_history_id, item_store.is_subscription FROM item JOIN item_extra USING (item_pid) JOIN item_store USING(item_pid) LEFT OUTER JOIN base_location USING (base_location_id) WHERE item.item_pid
%@ %@
externalGuid
feedUrl
ML3PurchaseHistoryImportOperation.mm
Attempted to start purchase history import operation without DAAP payload.
com.apple.ML3TerminationCoordinator
com.apple.MusicLibrary.execute-coordinated-termination
distinguished_kind
is_editable
parent_pid
contained_media_type
is_hidden
is_ignorable_itunes_playlist
smart_is_folder
smart_is_dynamic
smart_limit_order
smart_reverse_limit_order
play_order
is_reversed
has_been_shuffled
filepath
container_type
is_container_type_active_target
store_cloud_id
has_cloud_play_order
cloud_global_id
cloud_share_url
cloud_is_public
cloud_is_visible
cloud_min_refresh_interval
cloud_user_count
external_vendor_identifier
external_vendor_container_tag
cloud_version_hash
cloud_author_handle
should_display_index
category_type_mask
grouping_sort_key
 [<null> : 
<ML3ProtoSyncTrackImportItem 
virtual int64_t ML3ProtoSyncTrackImportItem::getIntegerValue(MLImportPropertyKey) const
ML3ProtoSyncImportItem.mm
getIntegerValue called with unknown property key %x
virtual float ML3ProtoSyncTrackImportItem::getFloatValue(MLImportPropertyKey) const
getFloatValue called with unknown property key %x
virtual ML3CPPDataRef ML3ProtoSyncTrackImportItem::getDataValue(MLImportPropertyKey) const
getDataValue called with unknown property key %x
virtual bool ML3ProtoSyncTrackImportItem::hasValue(MLImportPropertyKey) const
hasValue called with unknown property key %x
NSString *ML3ProtoSyncTrackImportItem::_getProtoStringValue(MLImportPropertyKey) const
getStringValue called with unknown property key %x
local
redownload
<ML3ProtoSyncContainerImportItem 
 name='
virtual int64_t ML3ProtoSyncContainerImportItem::getIntegerValue(MLImportPropertyKey) const
virtual float ML3ProtoSyncContainerImportItem::getFloatValue(MLImportPropertyKey) const
virtual ML3CPPDataRef ML3ProtoSyncContainerImportItem::getDataValue(MLImportPropertyKey) const
virtual bool ML3ProtoSyncContainerImportItem::hasValue(MLImportPropertyKey) const
NSString *ML3ProtoSyncContainerImportItem::_getProtoStringValue(MLImportPropertyKey) const
_getProtoStringValue called with unknown property key %x
TOTAL
musicLibrary
orderingTerms
usingSections
nonDirectAggregateQuery
propertyToCount
options
ignoreSystemFilterPredicates
ignoreRestrictionsPredicates
%@(_predicate = %@, _orderingTerms = %@, _using sections = %d)
.ROWID
COUNT(DISTINCT %@)
COUNT()
MIN(%@, %lu)
v32@?0@"ML3QuerySection"8Q16^B24
v44@?0q8C16r^@20Q28^B36
%@(%@)
v32@?0@"ML3OrderingTerm"8Q16^B24
 FROM 
 WHERE 
.ROWID = ?
DISTINCT 
 AND (
 OR 
 GROUP BY 
 ORDER BY 
 LIMIT %lu
MIN(COUNT(DISTINCT %@), %lu)
MIN(COUNT(%@), %lu)
COUNT(%@)
COUNT(1)
series_name
sort_series_name
SELECT ROWID FROM item_artist WHERE (grouping_key = ?)
keep_local_status_reason
sync_id
<ML3ImportItem 
    
 bytes : 
bitRate
codecType
codecSubType
dataKind
dataUrl
eqPreset
playbackFormat
gaplessHeuristicCode
gaplessHeuristicDelayCode
gaplessEncodingDrainCode
gaplessFrameResyncCode
relativeVolume
sampleRate
startTime
stopTime
volumeNormalizationEnergy
beatsPerMinute
progressionDirection
durationInSamples
%@-%.f
v28@?0i8d12^B20
INSERT OR REPLACE INTO genius_metadata (genius_id, checksum, data) VALUES (?, ?, ?);
UPDATE item_extra SET pending_genius_checksum = ? WHERE genius_id = ?;
INSERT OR REPLACE INTO genius_similarities (genius_id, data) VALUES (?, ?);
iPhoneSortKeyBuilderCreate
iPhoneSortKey.c
canonicalLanguageIdentifier != NULL
builder != NULL
!CFSafeGetArrayIsEmpty(sectionHeadersDictionaries)
builder->languageCount <= MAXIMUM_LANGUAGE_COUNT
NameTransform
builder->nameTransform == NULL || (CFGetTypeID(builder->nameTransform) == CFStringGetTypeID())
builder->collator != NULL
result != 0
iPhoneSortKey
iPhoneSortSection
iPhoneGroupingKey
NUMERIC_SECTION_HEADER
could not build grouping key
%s:%d: %s
/Library/Caches/com.apple.xbs/Sources/MusicLibrary_Sim/MusicLibrary/Sorting/iPhoneSortKey/iPhoneSortKey.c
BuildLanguage
!CFSafeTypeMismatch(languageDictionary, CFDictionaryGetTypeID)
FirstCharacterAfterLanguage
!CFSafeTypeMismatch(firstCharacterAfterLanguage, CFStringGetTypeID)
!CFSafeGetArrayIsEmpty(headers)
firstCharacterSortKey != NULL
endCharacterSortKey != NULL
album_artist.album_artist
feed_url
album_item_store.store_playlist_id
contains_classical_work
date_played_local
album_item_store.cloud_album_id
LEFT OUTER JOIN item_store AS album_item_store ON (album.representative_item_pid == album_item_store.ROWID)
SELECT ROWID FROM album WHERE feed_url = ?
SELECT ROWID FROM album WHERE (grouping_key = ?) AND (all_compilations = ?) AND (album_artist_pid = ?) AND (season_number = ?)
SELECT ROWID FROM album WHERE (grouping_key = ?) AND (all_compilations = ?) AND (album_artist_pid = ?)
SELECT album_pid FROM album LEFT OUTER JOIN album_artist USING(album_artist_pid) WHERE album_artist IS NULL AND album_artist_pid != 0
SELECT album_artist_pid FROM item WHERE album_artist_pid != 0 AND album_pid = ? LIMIT 1
UPDATE album SET album_artist_pid = ? WHERE album_pid = ?
INSERT INTO base_location (base_location_id, path) VALUES (0, '')
INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES ('OrderingLanguage','%@')
Media library database is too new for this device. (version = %d, latest known version is %d)
Could not build database tables using connection %@.
Failed to migrate database from version %d to %d. %@
VACUUM
PRAGMA user_version = %d;
ANALYZE
item_store.item_pid
NSString *ML3TrackRulesIdentityPropertyForSource(ML3TrackSource)
ML3TrackRules.m
ML3TrackRulesIdentityPropertyForSource called with invalid source=%d
MLImportPropertyKey ML3TrackRulesIdentityImportPropertyForSource(ML3TrackSource)
ML3TrackRulesIdentityImportPropertyForSource called with invalid source=%d
MLMediaType ML3TrackRulesMediaTypesForSource(ML3TrackSource)
ML3TrackRulesMediaTypesForSource called with invalid source=%d
NSString *ML3ContainerRulesIdentityPropertyForSource(ML3TrackSource)
ML3ContainerRulesIdentityPropertyForSource called with invalid source=%d
MLImportPropertyKey ML3ContainerRulesIdentityImportPropertyForSource(ML3TrackSource)
ML3ContainerRulesIdentityImportPropertyForSource called with invalid source=%d
NSString *ML3TrackRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)
ML3TrackRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d
NSString *ML3ContainerRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)
ML3ContainerRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d
NSDictionary *ML3TrackRulesRemovalPropertiesForSource(ML3TrackSource)
ML3TrackRulesRemovalPropertiesForSource called with invalid source=%d
BOOL ML3TrackRulesRemoveLocalAssetForSource(ML3TrackSource)
ML3TrackRulesRemoveLocalAssetForSource called with invalid source=%d
BOOL ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource(ML3TrackSource)
ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource called with invalid source=%d
NSString *ML3TrackRulesGetPropertyNameForKey(MLImportPropertyGroupKey, MLImportPropertyKey)
no track rule found for property %X
item.keep_local
item.keep_local_status
item.keep_local_status_reason
item.keep_local_constraints
item_extra.integrity
item_artwork_token
item_screenshot_token
item_fetchable_artwork_source_type
item_fetchable_artwork_token
container_fetchable_artwork_source_type
container_fetchable_artwork_token
container_item_source_ids
user_rating
all_compilations
season_number
album_year
app_data
store_id
handle
image_url
image_token
MLSortMapUnicodeVersion
(.nameSection=%d, .nameOrder = %15lld, .name = %@)
SELECT COUNT(name) FROM sqlite_master WHERE type='table' AND name = 'sort_map';
SELECT ROWID FROM sort_map LIMIT 1;
DROP TABLE IF EXISTS sort_map_new
INSERT INTO sort_map_new (name, sort_key) SELECT name, iPhoneSortKey(name) FROM sort_map;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(name), iPhoneSortKey(ML3SortString(name)) FROM sort_map;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_composer, iPhoneSortKey(sort_composer) FROM composer WHERE sort_composer IS NOT NULL;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT title, iPhoneSortKey(title) FROM item_extra;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(title), iPhoneSortKey(ML3SortString(title)) FROM item_extra;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_title, iPhoneSortKey(sort_title) FROM item_extra;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT item_artist, iPhoneSortKey(item_artist) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(item_artist), iPhoneSortKey(ML3SortString(item_artist)) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_item_artist, iPhoneSortKey(sort_item_artist) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT series_name, iPhoneSortKey(series_name) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(series_name), iPhoneSortKey(ML3SortString(series_name)) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_series_name, iPhoneSortKey(sort_series_name) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT album_artist, iPhoneSortKey(album_artist) FROM album_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(album_artist), iPhoneSortKey(ML3SortString(album_artist)) FROM album_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_album_artist, iPhoneSortKey(sort_album_artist) FROM album_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT album, iPhoneSortKey(album) FROM album;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(album), iPhoneSortKey(ML3SortString(album)) FROM album;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_album, iPhoneSortKey(sort_album) FROM album;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT season_number, iPhoneSortKey(season_number) FROM album;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT composer, iPhoneSortKey(composer) FROM composer;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(composer), iPhoneSortKey(ML3SortString(composer)) FROM composer;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_composer, iPhoneSortKey(sort_composer) FROM composer;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT genre, iPhoneSortKey(genre) FROM genre;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT name, iPhoneSortKey(name) FROM container;
UPDATE sort_map_new SET name_section = iPhoneSortSection(sort_key);
CREATE TEMPORARY TABLE sort_map_new_in_order (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, UNIQUE (name));
INSERT INTO sort_map_new_in_order (name) SELECT name FROM sort_map_new ORDER BY sort_key;
UPDATE sort_map_new SET name_order = (SELECT sort_map_new_in_order.ROWID << 32 FROM sort_map_new_in_order WHERE sort_map_new.name = sort_map_new_in_order.name);
INSERT OR REPLACE INTO sort_map_new (name, name_order, name_section, sort_key) VALUES ('', 0, %u, '')
DROP TABLE sort_map_new_in_order;
SELECT sort_map.name FROM sort_map JOIN sort_map_new ON sort_map.name = sort_map_new.name WHERE (sort_map_new.name_order != sort_map.name_order) OR (sort_map_new.name_section != sort_map.name_section) LIMIT 1;
item
IFNULL((SELECT sort_map_new.name_order FROM sort_map_new WHERE sort_map_new.name = (CASE %@ WHEN '' THEN NULL ELSE %@ END)), 0)
UPDATE %@ SET %@ = %@;
v40@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32
_view
%1$@(pid, name_order, name_section) AS (SELECT %3$@.pid, sort_map_new.name_order, sort_map_new.name_section FROM sort_map_new JOIN %2$@ AS %3$@ ON sort_map_new.name = %3$@.name UNION SELECT 0, 0, %4$u)
item.
%@.name_order
_section
%@.name_section
%1$@ ON %2$@ = %1$@.pid
v32@?0@"NSString"8@"NSArray"16^B24
WITH %@ INSERT OR REPLACE INTO item_new (%@) SELECT %@ FROM item LEFT JOIN %@;
 LEFT JOIN 
DROP TABLE IF EXISTS item;
ALTER TABLE item_new RENAME TO item;
DROP TABLE IF EXISTS sort_map;
ALTER TABLE sort_map_new RENAME TO sort_map;
CREATE INDEX IF NOT EXISTS SortMapSortKeys ON sort_map (sort_key ASC);
INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES ('OrderingLanguage', '%@')
UPDATE item_artist SET grouping_key = iPhoneGroupingKey((CASE LENGTH(series_name) WHEN 0 THEN item_artist ELSE series_name END))
UPDATE album_artist SET grouping_key = iPhoneGroupingKey(album_artist)
UPDATE album SET grouping_key = iPhoneGroupingKey(album)
UPDATE composer SET grouping_key = iPhoneGroupingKey(composer)
UPDATE genre SET grouping_key = iPhoneGroupingKey(genre)
INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES (?, ?)
INSERT OR REPLACE INTO item_search (item_pid, search_title) SELECT item_extra.item_pid, sort_map.name_order from sort_map JOIN item_extra ON item_extra.title = sort_map.name
UPDATE item_search SET search_album = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN album ON album.album = sort_map.name JOIN item ON item.album_pid = album.album_pid WHERE item.item_pid = item_search.item_pid), 0)
UPDATE item_search SET search_album_artist = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN album_artist ON album_artist.album_artist = sort_map.name JOIN item ON item.album_artist_pid = album_artist.album_artist_pid WHERE item.item_pid = item_search.item_pid), 0)
SELECT name_order, name_section FROM sort_map WHERE name = ? LIMIT 1;
ML3SortMap.m
blank string cannot be inserted into sort map
INSERT INTO sort_map (name, sort_key, name_section) VALUES (?, iPhoneSortKey(?), iPhoneSortSection(iPhoneSortKey(?)))
SELECT sort_map1.name_order, sort_map1.name FROM sort_map AS sort_map1 WHERE sort_map1.sort_key < (SELECT sort_map2.sort_key FROM sort_map AS sort_map2 WHERE name = ?) ORDER BY sort_map1.sort_key DESC, sort_map1.name_order DESC LIMIT 1;
SELECT sort_map1.name_order, sort_map1.name FROM sort_map AS sort_map1 WHERE sort_map1.sort_key >= (SELECT sort_map2.sort_key FROM sort_map AS sort_map2 WHERE name = ?) AND sort_map1.name != ? ORDER BY sort_map1.sort_key ASC, sort_map1.name_order ASC LIMIT 1;
UPDATE sort_map SET name_order = ? WHERE name = ?;
v16@?0^{iPhoneSortKeyBuilder=}8
Collection %@ has no properties for grouping unique collections. This should be impossible!
SELECT %@ FROM %@ GROUP BY %@ HAVING COUNT(*) > 1
%@ = ?
SELECT ROWID FROM %@ WHERE %@
UPDATE item SET %@ = ? WHERE %@ = ?
q24@?0@"ML3MusicLibrary_SortMapEntry"8@"ML3MusicLibrary_SortMapEntry"16
SELECT name, name_order, name_section, sort_key FROM sort_map ORDER BY name_order
got nil name from the sort map!
valueWithML3NameOrder returned nil!
INSERT INTO sort_map (name, sort_key) VALUES (?, '')
corrupted name ordering detected. prevNameOrder=%lld, nextNameOrder=%lld, prevEntry=%@, nextEntry=%@
incorrect sort key distance calculated. sortKeyGap=%lld, sortEntryDelta=%lld. prevEntry=%@, nextEntry=%@
entryDistance = 0, but sort keys are descending
entryDistance = gapDistance, but sort keys are ascending
v32@?0@"ML3MusicLibrary_SortMapEntry"8Q16^B24
'sort_map'
CREATE TABLE IF NOT EXISTS sort_map_no_uniques (name TEXT, name_order INTEGER, name_section INTEGER, sort_key BLOB)
DELETE FROM sort_map_no_uniques;
INSERT INTO sort_map_no_uniques (name, name_order, name_section, sort_key) VALUES (?, ?, ?, ?)
INSERT INTO sort_map (name, name_order, name_section, sort_key) SELECT name, name_order, name_section, sort_key FROM sort_map_no_uniques
SELECT ROWID, name, name_order, name_section, sort_key FROM sort_map_no_uniques WHERE name IN (SELECT name FROM sort_map_no_uniques GROUP BY name HAVING COUNT() > 1)
DELETE FROM sort_map_no_uniques WHERE name = ? AND ROWID != ?
v32@?0@"NSString"8@"NSNumber"16^B24
SELECT sort_map_no_uniques.name, sort_map_no_uniques.name_order, sort_map_no_uniques.name_section, sort_map_no_uniques.sort_key, sort_map.name, sort_map.name_order, sort_map.name_section, sort_map.sort_key FROM sort_map_no_uniques JOIN sort_map USING (name) WHERE sort_map_no_uniques.name IN (SELECT name FROM sort_map)
DELETE FROM sort_map_no_uniques WHERE name = ?
CREATE INDEX IF NOT EXISTS SortMapSortKeys ON sort_map (sort_key ASC)
SELECT COUNT() from sort_map
SELECT name, name_order, name_section, sort_key FROM sort_map ORDER BY name_order LIMIT 1 OFFSET ?
Did not find object at index %ld with %ld inserted objects
v32@?0@8@"ML3MusicLibrary_SortMapEntry"16^B24
SELECT name, name_order, name_section FROM sort_map LIMIT 1 OFFSET ?
SELECT name, name_order, name_section FROM sort_map WHERE name = ?
EnableASTCEncoding
MLArtworkShouldConvertToASTC
truthValue
%@(NOT %@)
(NOT 
ML3Predicate.m
invalid value (nil) for property %@.
values
 [%@]
%@(%@ IN (%@)%@
 IN (
comparison
caseInsensitive
treatNullAsString
transformFunction
%@(%@ %@ %@%@%@)%@
LIKE
GLOB
Unknown comparison: %d
IFNULL(
, '%@')
 IN 
%@%@%@
%@%@
Unexpected value in predicate: %@
%@(%@ IN %@)
shouldContain
persistentIDs
.ROWID%@ IN (
 NOT
mask
%@((%@ & 0x%llx) = 0x%llx)
 & ?) = ?)
properties
searchString
%@((%@) matches '%@')
(?, 
 || ' ' || 
coalesce(%@, '')
predicates
ML3CompoundPredicate is an abstract class; use ML3AllCompoundPredicate or ML3AnyCompoundPredicate
B24@?0@"NSNumber"8^B16
v32@?0@"NSString"8@"ML3ContainmentPredicate"16^B24
 AND 
condition
then
else
%@(If %@ then %@ else %@)
(CASE WHEN 
 THEN 
 ELSE 
 ELSE 1
 END)
%@, _range = %@, _sectionIndex = %lu
item_artist_pid
album_pid
representative_item_pid
must be overridden
SELECT %@ FROM %@ WHERE %@ = 0 OR %@
SELECT DISTINCT item.%@ FROM item JOIN %@ USING (%@) LEFT OUTER JOIN best_artwork_token ON (item.ROWID = best_artwork_token.entity_pid AND best_artwork_token.entity_type = %ld) WHERE %@.%@ = item.ROWID AND (((item.media_type & 1024) = 1024) OR best_artwork_token.available_artwork_token IS NULL)
SELECT %@.ROWID FROM %@ WHERE %@.%@ = 0
SELECT %@.ROWID FROM %@ LEFT OUTER JOIN item ON (%@.%@ = item.ROWID) where %@.ROWID != IFNULL(item.%@, 0)
SELECT album_pid FROM album WHERE album_pid NOT IN (SELECT album_pid FROM item)
SELECT album_artist_pid FROM album_artist WHERE album_artist_pid NOT IN (SELECT album_artist_pid FROM item) AND album_artist_pid NOT IN (SELECT album_artist_pid FROM album)
SELECT item_artist_pid FROM item_artist WHERE item_artist_pid NOT IN (SELECT item_artist_pid FROM item)
SELECT composer_pid FROM composer WHERE composer_pid NOT IN (SELECT composer_pid FROM item)
SELECT genre_id FROM genre WHERE genre_id NOT IN (SELECT genre_id FROM item)
UPDATE %@ SET %@ = IFNULL( (SELECT item_pid FROM item LEFT OUTER JOIN best_artwork_token ON (item.ROWID = best_artwork_token.entity_pid AND best_artwork_token.entity_type = %ld) WHERE item.%@ = %@.ROWID ORDER BY item.media_type, best_artwork_token.available_artwork_token IS NOT NULL DESC LIMIT 1), 0)
 WHERE ROWID
aggregateEntityClass
foreignPersistentIDProperty
sort_composer
ML3DatabaseConnectionAdditions.m
columnDefinition
tableName
ALTER TABLE %@ ADD COLUMN %@
newDefinitions
columnName
newName
block
SELECT sql FROM sqlite_master WHERE type='table' AND name=?
^CREATE( TEMPORARY)* TABLE "*(\w+)"*( IF NOT EXISTS)* \(([\w\s'",]+)\)
(\w+)( \w+)*( \w+)*
%@_new
INSERT INTO %@ (%@) SELECT %@ FROM %@
DROP TABLE %@
ALTER TABLE %@ RENAME TO %@
%@ LEFT OUTER JOIN container_item ON %@.ROWID = container_item.container_item_pid
genre_item_store.store_genre_id
LEFT OUTER JOIN item_store AS genre_item_store ON (genre.representative_item_pid == genre_item_store.ROWID)
SELECT ROWID FROM genre WHERE (grouping_key = ?)
ROWID
<%@: pid=%lld>: %@
is_owner
workout_template_id
smart_evaluation_order
smart_is_filtered
smart_is_genius
smart_enabled_only
smart_limit_kind
album_field_order
container_seed.item_pid
seed_order
is_saveable
is_src_remote
is_ignored_syncing
orig_date_modified
keep_local_constraints
cloud_author_store_id
cloud_author_display_name
cloud_author_store_url
cloud_last_update_time
cloud_global_play_count
cloud_global_like_count
cloud_is_subscribed
cloud_is_curator_playlist
cloud_is_sharing_disabled
best_artwork_token.available_artwork_token AS available_container_artwork_token
best_artwork_token.fetchable_artwork_token AS fetchable_item_artwork_token
(container.distinguished_kind = 0 AND container.is_hidden = 0 AND container.smart_criteria IS NULL AND container.smart_is_genius = 0 AND (container.cloud_is_subscribed = 0 OR container.is_editable = 1))
((IFNULL(container.smart_is_genius, 0) << 2) | ((container.smart_criteria IS NOT NULL) << 1) | IFNULL(container.is_saveable, 0))
(IFNULL(container.workout_template_id, 0) != 0)
(container.distinguished_kind = 17)
(container.distinguished_kind = 32)
(container.is_container_type_active_target AND container.smart_is_genius)
(container.smart_is_genius = 0)
(container.smart_criteria IS NULL)
(container.smart_is_folder = 0)
(container.is_container_type_active_target AND (container.container_type = 2))
(is_src_remote = 0 OR container.distinguished_kind = 0)
((container.smart_criteria IS NOT NULL) AND (container.smart_is_dynamic = 1) AND (container.smart_is_limited = 1))
(container.distinguished_kind = 19 OR container.distinguished_kind = 20)
(container.distinguished_kind = 20 AND container.is_container_type_active_target)
(container.distinguished_kind = 10000 AND container.is_container_type_active_target)
(container.distinguished_kind = 10010 AND container.is_container_type_active_target)
(IFNULL(container_item.container_pid, 0) != 0 OR smart_criteria IS NOT NULL)
(container.is_src_remote = 1)
LEFT OUTER JOIN container_seed USING (container_pid)
LEFT OUTER JOIN container_item ON container.container_pid = container_item.container_pid AND position = 0
LEFT OUTER JOIN best_artwork_token ON entity_pid = container_pid AND entity_type = 1 AND artwork_type = 5
ML3Container.m
persistentID must be specified since it is part of the filename format.
v24@?0@"NSString"8@"NSString"16
Klassiek
Classique
Klassik
Classica
UPDATE container SET name = ? WHERE container_pid = ?
v32@?0@"NSNumber"8@"NSString"16^B24
createdBuiltInSmartPlaylists
autoCreatedSmartPlaylistsDeleted
DELETE FROM container_item_person WHERE container_item_pid in (SELECT container_item_pid from container_item where container_pid = ?)
DELETE FROM container_item WHERE container_pid = ?
DELETE FROM artwork_token WHERE entity_pid = ? AND entity_type = ?
DELETE FROM best_artwork_token WHERE entity_pid = ? AND entity_type = ?
SELECT media_type FROM container_item_media_type WHERE container_pid = ? AND count > 0
UPDATE container SET contained_media_type = ? WHERE container_pid = ?
SELECT media_type, COUNT(media_type) FROM item WHERE item_pid
 GROUP BY media_type
SELECT media_type, COUNT(media_type) FROM item JOIN container_item USING (item_pid) WHERE container_pid = ? GROUP BY media_type
DELETE FROM container_item_media_type WHERE container_pid = ?
INSERT OR IGNORE INTO container_item_media_type (container_pid, media_type) VALUES(?, ?)
UPDATE container_item_media_type SET count = count + ? WHERE container_pid = ? AND media_type = ?
UPDATE container_item_media_type SET count = count - ? WHERE container_pid = ? AND media_type = ?
SELECT ROWID FROM container WHERE smart_is_dynamic = 0 AND is_hidden = 0
v32@?0@"ML3Container"8Q16^B24
setTracksWithPersistentIDs:notify: called on unsupported container
appendTracksWithPersistentIDs:notify: called on unsupported container
UPDATE item set keep_local=0 WHERE (item_pid=? AND keep_local<?);
moveTrackFromIndex:toIndex: called on unsupported container
UPDATE container_item SET position = (CASE WHEN position = ? THEN ? ELSE CASE WHEN position BETWEEN ? AND ? THEN position + ? END END) WHERE container_pid = ? AND position BETWEEN ? AND ?
removeTracksAtIndexes:notify: called on unsupported container
select container_pid from container where (distinguished_kind=?)
select position from container_item where (container_pid=? AND item_pid=?) order by position ASC
UPDATE container_item set position=(position+1) where (container_pid=?)
DELETE FROM container_item_person WHERE container_item_pid in (SELECT container_item_pid from container_item where container_pid = ? AND position = ?)
DELETE FROM container_item where container_pid=? AND position=?
UPDATE container_item set position=(position-1) where (container_pid=? AND position > ?)
v24@?0Q8^B16
SELECT IFNULL(in_my_library, 0), container_pid, position FROM container_item LEFT OUTER JOIN item USING (item_pid) JOIN container USING (container_pid) WHERE distinguished_kind IN (0, 19, 20) AND smart_criteria IS NULL AND is_hidden = 0 AND cloud_is_subscribed = 0 AND cloud_is_curator_playlist = 0 AND (item.item_pid IS NULL OR container_item.item_pid
SELECT position FROM container_item LEFT OUTER JOIN item USING (item_pid) WHERE NOT IFNULL(in_my_library, 0) AND container_pid = ?
SELECT container.container_pid FROM container JOIN container_item ON (container.container_pid = container_item.container_pid AND position = 0) WHERE distinguished_kind = 0 AND smart_criteria IS NULL AND is_hidden = 0 AND cloud_is_subscribed = 0 AND cloud_is_curator_playlist = 0
SELECT IFNULL(MAX(position), -1) FROM container_item WHERE container_pid = ?
Only one of reloadContainedMediaTypes, and removedMediaTypes/addedMediaTypes can be used
[NSIndexSet enumerateRangesUsingBlock:] is not enumerating ranges in order!
DELETE FROM container_item_person WHERE container_item_pid in (SELECT container_item_pid from container_item where container_pid = ? AND position BETWEEN ? AND ?)
DELETE FROM container_seed WHERE container_pid = ?;
INSERT INTO container_seed (container_pid, item_pid) VALUES (?, ?);
DELETE FROM container_item_person WHERE container_item_pid in (SELECT container_item_pid from container_item where container_pid=?)
DELETE FROM container_item_person WHERE container_item_pid
DELETE FROM container_item WHERE ROWID
INSERT OR REPLACE INTO container_item (container_item_pid, container_pid, item_pid, position) VALUES (?, ?, ?, ?)
B24@?0@"NSString"8@"NSString"16
B24@?0@"NSString"8^B16
ML3Predicate *NumericPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)
Could not get value range for %@ criterion: %ld
ML3Predicate *BooleanPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)
Could not get numeric value for %@ criterion: %ld
Could not get boolean value for %@ criterion: %ld
ML3Predicate *DatePredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)
Could not get value range for %@ date criterion: %ld
Classical Music
My Top Rated
Top 25 Most Played
Recently Played
entityClass
containerPersistentID
predicate
orderingTerm
SELECT 1 FROM (%@)
SELECT 1 FROM (%@ LIMIT 1)
ML3ContainerQuery.m
Attempting to get value for unsupported aggregate function %@
revisionBeforeImport
revisionAfterImport
com.apple.amp.MediaLibrary.ML3ProtoSyncImportOperation.accessQueue
B24@?0@"ML3ActiveTransaction"8@"NSError"16
UPDATE item_stats SET play_count_recent=0,skip_count_recent=0,liked_state_changed=0 WHERE item_pid IN (SELECT item_pid FROM item_store WHERE sync_id!=0)
UPDATE item_stats SET play_count_user = play_count_user + ?, play_count_recent = play_count_recent + ?, skip_count_user = skip_count_user + ?, skip_count_recent = skip_count_recent + ? WHERE item_pid = ?
UPDATE item_stats SET bookmark_time_ms = ? WHERE item_pid = ? AND date_played < ?
UPDATE item_stats SET date_played = ?, has_been_played = ? WHERE item_pid = ? AND date_played < ?
container_item_person_pid
container_item_pid
container_item_person
com.apple.MusicLibrary.MLMediaLibraryResourceServiceClient.serial.queue
com.apple.MusicLibrary.MLMediaLibraryResourceServiceClient.callout.queue
com.apple.MusicLibrary.MLMediaLibraryResourceServiceClient.path.change.queue
wstring_convert: from_bytes error
wstring_convert: to_bytes error
failed to truncate database files
DELETE FROM entity_revision WHERE entity_pid=0
SpringBoard
com.apple.datamigrator
Unmigratable Media Library
The media library service has detected that this device has been downgraded from a newer operating system version. The service does not support migration back to previous versions.
Please either erase-install the desired version of the operating system, or select the option to let the service rebuild your media library database. This WILL erase your media library on this device.
[This dialog is shown for internal users only.]
Rebuild Library
Ignore
date_accessed
is_alarm
hidden
composer_item_store.store_composer_id
LEFT OUTER JOIN item_store AS composer_item_store ON (composer.representative_item_pid == composer_item_store.ROWID)
SELECT ROWID FROM composer WHERE (grouping_key = ?)
cloud_universal_library_id
SELECT ROWID FROM album_artist WHERE (grouping_key = ?)
SELECT container_item_pid, item_pid, position FROM container_item WHERE container_pid = ? ORDER BY position
unordered_map::at: key not found
<ML3ITunesSyncImportItem 
 sync_id=
virtual id ML3ITunesSyncImportItem::_getFoundationValue(MLImportPropertyKey) const
ML3ITunesSyncImportItem.mm
_getFoundationValue called with unknown property key %x
avformat_info
podcast_info
rental_info
store_info
video_info
lyrics
operation
insert_track
, store_id=
cloud_id
episode_sort_id
exclude_from_shuffle
date_created
show_composer
is_music_show
sort_name
year
date_modified
genius_checksum
work
movement_name
movement_count
movement_number
gapless_encoding_drain
has_video
sample_rate
start_time_ms
liked_state
user_rating_is_derived
composer_id
playlist_id
storefront_id
store_kind
download_account_id
family_id
external_guid
flavor
matched_status
redownloaded_status
quality
is_hd
audio_language
subtitle_language
rental_playback_date_started
episode_type
artist
album
sort_artist
sort_album
artist_id
album_liked_state
artwork_cache_id
album_rating
album_rating_is_derived
explicit
is_podcast
is_song
is_audio_book
is_music_video
is_movie
is_tv_show
is_home_video
is_voice_memo
is_itunes_u
chapter_info
kind
container
container_ui
item_to_container
insert_playlist
<null>
<MLDITunesSyncPlaylistImportItem 
smart_is_limited
smart_limit_value
smart_criteria
repeat_mode
shuffle_items
external_tag
source_device_guid
UniqueDeviceID
genius_seed_tracks
com.apple.medialibraryd.importOperationQueue
Operation was cancelled by the media library service.
Song
PDFBooklet
MusicVideo
InteractiveBooklet
CoachedAudio
VPass
SWPkg
ForcedMusicPlaylist
Ringtone
Rental
DigitalBookleet
SWApp
SWGame
AudioPass
iTunesU
Book
PDFBook
AlertTone
kITDBTrackField_Invalid
%@ (%d)
kITDBTrackField_PlayStatus
kITDBTrackField_Name
kITDBTrackField_Album
kITDBTrackField_Artist
kITDBTrackField_BitRate
kITDBTrackField_SampleRate
kITDBTrackField_Year
kITDBTrackField_Genre
kITDBTrackField_Kind
kITDBTrackField_Date
kITDBTrackField_TrackNumber
kITDBTrackField_TotalSize
kITDBTrackField_TotalTime
kITDBTrackField_Comment
kITDBTrackField_Location
kITDBTrackField_DateAdded
kITDBTrackField_EQPreset
kITDBTrackField_Composer
kITDBTrackField_ObsoleteDisplayArtist
kITDBTrackField_NormalizedVolume
kITDBTrackField_StreamStatus
kITDBTrackField_UserPlayCount
kITDBTrackField_PlayDate
kITDBTrackField_DiscNumber
kITDBTrackField_TrackRating
kITDBTrackField_Price
kITDBTrackField_ObjectID
kITDBTrackField_PersistentID
kITDBTrackField_OldUserDisabled
kITDBTrackField_PlaylistItemID
kITDBTrackField_Compilation
kITDBTrackField_PurchaseDate
kITDBTrackField_Relevance
kITDBTrackField_ReleaseDate
kITDBTrackField_BeatsPerMinute
kITDBTrackField_ParentContainerID
kITDBTrackField_Artwork
kITDBTrackField_Popularity
kITDBTrackField_Grouping
kITDBTrackField_PlaylistPersistentID
kITDBTrackField_SongID
kITDBTrackField_ArtistID
kITDBTrackField_PlaylistID
kITDBTrackField_ComposerID
kITDBTrackField_GenreID
kITDBTrackField_CodecType
kITDBTrackField_CodecSubType
kITDBTrackField_SongDataKind
kITDBTrackField_DiscCount
kITDBTrackField_StartTime
kITDBTrackField_StopTime
kITDBTrackField_TrackCount
kITDBTrackField_StorefrontID
kITDBTrackField_Description
kITDBTrackField_Category
kITDBTrackField_Keywords
kITDBTrackField_Podcast
kITDBTrackField_CloudMatchState
kITDBTrackField_HasLyrics
kITDBTrackField_MediaKind
kITDBTrackField_Debug
kITDBTrackField_SeriesName
kITDBTrackField_SeasonNumber
kITDBTrackField_EpisodeID
kITDBTrackField_EpisodeSortID
kITDBTrackField_NetworkName
kITDBTrackField_LastBackupDate
kITDBTrackField_UserSkipCount
kITDBTrackField_SkipDate
kITDBTrackField_GaplessAlbum
kITDBTrackField_AlbumArtist
kITDBTrackField_ShuffleID
kITDBTrackField_TrackID
kITDBTrackField_RelativeVolume
kITDBTrackField_Attributes
kITDBTrackField_Private
kITDBTrackField_AlbumInfo
kITDBTrackField_SortName
kITDBTrackField_SortAlbum
kITDBTrackField_SortArtist
kITDBTrackField_SortAlbumArtist
kITDBTrackField_SortComposer
kITDBTrackField_SortSeriesName
kITDBTrackField_MovieInfo
kITDBTrackField_PodcastURL
kITDBTrackField_LongDescription
kITDBTrackField_ExternalGUID
kITDBTrackField_ChapterData
kITDBTrackField_ExtendedContentRating
kITDBTrackField_AlbumRating
kITDBTrackField_RentalExpirationDate
kITDBTrackField_ObsoleteRingtoneStatus
kITDBTrackField_BookmarkTime
kITDBTrackField_RememberBookmark
kITDBTrackField_HasBeenPlayed
kITDBTrackField_HasAlternateAudio
kITDBTrackField_HasSubtitles
kITDBTrackField_AudioLanguage
kITDBTrackField_AudioTrackIndex
kITDBTrackField_AudioTrackID
kITDBTrackField_SubtitleLanguage
kITDBTrackField_SubtitleTrackIndex
kITDBTrackField_SubtitleTrackID
kITDBTrackField_Studio
kITDBTrackField_Reserved1
kITDBTrackField_Reserved2
kITDBTrackField_Reserved3
kITDBTrackField_Reserved4
kITDBTrackField_Reserved5
kITDBTrackField_GaplessInfo
kITDBTrackField_GeniusID
kITDBTrackField_ExcludeFromShuffle
kITDBTrackField_Lyrics
kITDBTrackField_StorePersistentID
kITDBTrackField_JukeboxVotes
kITDBTrackField_VoiceOverLanguage
kITDBTrackField_iTunesU
kITDBTrackField_UncompressedSize
kITDBTrackField_XID
kITDBTrackField_GameGUID
kITDBTrackField_AppIdentifier
kITDBTrackField_ObsoleteTrackKind
kITDBTrackField_Version
kITDBTrackField_Copyright
kITDBTrackField_UserDisabled
kITDBTrackField_AlbumArtwork
kITDBTrackField_CollectionDescription
kITDBTrackField_Flavor
kITDBTrackField_CloudID
kITDBTrackField_CloudDownload
kITDBTrackField_ChosenByAutoFill
kITDBTrackField_CloudUserID
kITDBTrackField_TrackKinds
kITDBTrackField_CloudType
kITDBTrackField_Tags
kITDBTrackField_NumChannels
kITDBTrackField_CloudFlavorID
kITDBTrackField_CloudLibraryKind
kITDBTrackField_StoreVersion
kITDBTrackField_AppFamilyIDMask
kITDBTrackField_ItemIsCompilation
kITDBTrackField_ArtistInfo
kITDBTrackField_PlaylistItemPersistentID
kITDBTrackField_AppleID
kITDBTrackField_OwnerName
kITDBTrackField_URLExtraInfo
kITDBTrackField_ManuallyMarked
kITDBTrackField_DownloaderAppleID
kITDBTrackField_DownloaderName
kITDBTrackField_CloudServerAssetState
kITDBTrackField_SubscriptionAdamID
kITDBTrackField_ReportPlayEvents
kITDBTrackField_IsPlaylistOnly
kITDBTrackField_LikedState
kITDBTrackField_CloudPlaybackEndpointType
kITDBTrackField_AlbumLikedState
kITDBTrackField_MaxValue
Unknown kITDBTrackField_??? (%ld)
'%c%c%c%c'
ChapterDataRef = %p | has[names=%@, urls=%@, pics=%@] | chap count = %d 
loc/fmt=%@%@
name = %@
url = [%@: %@]
pic = %@
{%3d: time=%s%.2f, cookies(name=%2u, pic=%2u, url=%2u), %@
, trackID=%ld sampleNum=%ld
(null)
NSString *MLDescriptionFromChapterData(ITChapterDataRef)
system
label
ratingProvider
localizedRating
ratingLevel
localizedReason
debugInfo
Season %d
MLLocalizable
store_link
CloudAssets
LoFiCloudAssets
Podcasts
base_location
v24@?0@8^B16
chapter_data
GENIUS_PLAYLIST_NAME
ON_THE_GO_PLAYLIST_NAME
-[ML3MusicLibrary(ProcessingAdditions) updateOrderingLanguagesForCurrentLanguage]
ML3MusicLibraryProcessingAdditions.m
currentLanaguage
OrderingLanguage
supportedArtworkTypes
supportedMediaTypes
autogenerate
iPadOnly
com.apple.MusicLibrary
artworkConfig
com.apple.MusicLibrary.ML3ArtworkConfiguration
{CGSize=dd}
<%@ %p %@>
B32@?0@"NSString"8@"NSDictionary"16^B24
MLMediaTypeAudioBook
MLMediaTypeSong
MLMediaTypeVoiceMemo
MLMediaTypeDigitalBooklet
MLMediaTypeVideoITunesU
MLMediaTypeAnyAudio
MLMediaTypeAnyVideo
ML3ArtworkTypeItem
ML3ArtworkTypeScreenshot
ML3ArtworkTypeChapter
ML3ArtworkTypeArtistHero
ML3ArtworkTypePlaylist
_ML3ArtworkConfigurationCGSizeFromString
B16@?0@"ML3DatabaseStatement"8
<%@ %p '%@'>
<%@ %p = {
MLMusicLibraryErrorDomain
sortName
smartPlaylistInfo
sortType
reversedSorting
parentIdentifier
geniusSeedTrackIdentifier
distinguishedKind
cloudGlobalId
cloudIsSubscribed
cloudIsCuratorPlaylist
externalVendorIdentifier
externalVendorDisplayName
externalVendorTag
externalVendorPlaylist
creationDateTime
modificationDateTime
lastPlayedDateTime
cloudIsSharingDisabled
cloudVersionHash
artworkId
likedState
remoteSourceType
owner
editable
shared
visible
authorStoreId
authorDisplayName
authorStoreURL
authorHandle
minRefreshInterval
cloudLastUpdateTime
subscriberCount
subscriberPlayCount
subscriberLikedCount
subscriberURL
playlistDescription
cloudUniversalLibraryId
secondaryArtworkSourceType
playlistCategoryTypeMask
playlistGroupingSortKey
childIdentifiers
items
Normal
Smart
Genius
Folder
None
Name
ReleaseDate
AddedDate
PlayedDate
SeriesName
Physical
Shuffle
TrackID
PlaylistItemID
BitRate
Kind
Date
TrackNumber
TotalSize
TotalTime
Year
SampleRate
Category
Location
StreamStatus
Description
Comment
DateAdded
EQPreset
Composer
NormVolume
UserPlayCount
PlayDate
DiscNumber
TrackRating
CompilationArtist
CompilationGenre
FastArtist
FastAlbumArtistOrArtist
FastAlbum
FastGenre
FastComposer
Relevance
PurchaseDate
BeatsPerMinute
Popularity
Grouping
SeasonNumber
EpisodeID
EpisodeSortID
UserSkipCount
SkipDate
AlbumByArtistYear
AlbumByArtist
AlbumRating
RentalExpirationDate
ComposerAlbum
CategoryAlbum
GenreAlbum
GenreName
GeniusID
PodcastCategory
StorePersistentID
Version
UncompressedSize
AppKind
UserDisabled
CloudDownload
CloudMatchState
CloudID
CloudUserID
CloudStatus
CloudFlavorID
CloudLibraryKind
Tags
ML3MigrationErrorDomain
MLTestHookFailMigration
No migration path exists to upgrade from (%d) to system version (%d)
Failed to upgrade from version %d.
SELECT COUNT() FROM item
SELECT COUNT() FROM item_extra
SELECT ROWID FROM item WHERE item_pid IN (SELECT item.item_pid FROM item LEFT OUTER JOIN item_extra ON item.item_pid=item_extra.item_pid WHERE item_extra.item_pid ISNULL)
DELETE FROM item WHERE item_pid IN (SELECT item.item_pid FROM item LEFT OUTER JOIN item_extra ON item.item_pid=item_extra.item_pid WHERE item_extra.item_pid ISNULL)
SELECT ROWID FROM item_extra WHERE item_pid IN (SELECT item_extra.item_pid FROM item_extra LEFT OUTER JOIN item ON item_extra.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_extra WHERE item_pid IN (SELECT item_extra.item_pid FROM item_extra LEFT OUTER JOIN item ON item_extra.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_stats WHERE item_pid IN (SELECT item_stats.item_pid FROM item_stats LEFT OUTER JOIN item ON item_stats.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_search WHERE item_pid IN (SELECT item_search.item_pid FROM item_search LEFT OUTER JOIN item ON item_search.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_store WHERE item_pid IN (SELECT item_store.item_pid FROM item_store LEFT OUTER JOIN item ON item_store.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_playback WHERE item_pid IN (SELECT item_playback.item_pid FROM item_playback LEFT OUTER JOIN item ON item_playback.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_video WHERE Item_pid IN (SELECT item_video.item_pid FROM item_video LEFT OUTER JOIN item ON item_video.item_pid=item.item_pid WHERE item.item_pid ISNULL)
REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES (?, ?, ?, ?)
DELETE FROM entity_revision WHERE revision_type > ? AND class = ? AND entity_pid = ?
SELECT item_pid FROM item JOIN item_store USING(item_pid) WHERE media_type = 8 AND title_order = 0 AND album_order = 0 AND album_artist_order = 0 AND subscription_store_item_id = 0 AND is_ota_purchased = 0 AND store_saga_id = 0 AND store_item_id = 0 AND sync_id = 0 AND purchase_history_id = 0 AND base_location_id = 0 AND remote_location_id = 0 AND disc_number = 0 AND track_number = 0 AND needs_reporting = 1
UPDATE album SET representative_item_pid = (SELECT item_pid FROM item WHERE item.album_pid = album.album_pid LIMIT 1) WHERE representative_item_pid NOT IN (select item_pid from item)
UPDATE album_artist SET representative_item_pid = IFNULL((SELECT item_pid FROM item WHERE item.album_artist_pid = album_artist.album_artist_pid LIMIT 1), 0) WHERE representative_item_pid NOT IN (select item_pid FROM item)
UPDATE item_artist SET representative_item_pid = (SELECT item_pid FROM item WHERE item.item_artist_pid = item_artist.item_artist_pid LIMIT 1) WHERE representative_item_pid NOT IN (select item_pid FROM item)
UPDATE composer SET representative_item_pid = (SELECT item_pid FROM item WHERE item.composer_pid = composer.composer_pid LIMIT 1) WHERE representative_item_pid NOT IN (select item_pid FROM item)
UPDATE genre SET representative_item_pid = (SELECT item_pid FROM item WHERE item.genre_id = genre.genre_id LIMIT 1) WHERE representative_item_pid NOT IN (select item_pid FROM item)
SELECT DISTINCT title, sort_title FROM item_extra JOIN item USING(item_pid) WHERE title_order = 0 AND LENGTH(title)
SELECT DISTINCT item_artist, sort_item_artist, series_name, sort_series_name FROM item_artist JOIN item USING(item_artist_pid) WHERE item_artist_order = 0 AND LENGTH(item_artist)
SELECT DISTINCT album_artist, sort_album_artist FROM album_artist JOIN item USING(album_artist_pid) WHERE album_artist_order = 0 AND LENGTH(album_artist)
SELECT DISTINCT album, sort_album FROM album JOIN item USING(album_pid) WHERE album_order = 0 AND LENGTH(album)
SELECT DISTINCT composer, sort_composer FROM composer JOIN item USING(composer_pid) WHERE composer_order = 0 AND LENGTH(composer)
SELECT DISTINCT genre FROM genre JOIN item USING(genre_id) WHERE genre_order = 0 AND LENGTH(genre)
INSERT OR REPLACE INTO sort_map (name, sort_key) VALUES (?, '')
SELECT name_order, name_section FROM sort_map ORDER BY sort_key ASC
SELECT COUNT() FROM lyrics
INSERT INTO lyrics (item_pid) SELECT item.item_pid FROM item LEFT OUTER JOIN lyrics USING (item_pid) WHERE lyrics.item_pid ISNULL;
SELECT value FROM _MLDatabaseProperties WHERE key = 'MLCloudDatabaseRevision'
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (?, ?)
MLSagaNeedsFullUpdate
SELECT value FROM _MLDatabaseProperties WHERE key = 'MLJaliscoDatabaseRevision'
DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientLastSyncedRevision'
DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientSyncAnchor'
DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientGenerationID'
DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientHasPendingAssets'
 JOIN %@ USING(%@)
_new
DROP TABLE IF EXISTS %@
INSERT INTO %@ (%@) SELECT %@ FROM %@%@
PRAGMA table_info(%@)
SELECT item.item_pid,base_location.path,item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) JOIN item_store USING(item_pid) WHERE remote_location_id > 0 AND base_location_id > 0 OR LENGTH(item_extra.location) > 0
UPDATE item SET base_location_id=0 WHERE item.item_pid
%@ IN (%@)
UPDATE item_extra SET location='',file_size=0 WHERE item_extra.item_pid
_tmp
iTunes_Control/iTunes/Artwork
Library/Caches/com.apple.mediaplayer/Artwork
%x/%x%x%x%x%x%x%x%x_%d.%@
%@%ld%ld
%02x/
%02x
.jpeg
iTunes_Control/iTunes/Artwork/Originals
iTunes_Control/iTunes/Artwork/Caches
SELECT entity_pid, entity_type, artwork_type FROM artwork_token GROUP BY entity_pid, entity_type, artwork_type
SELECT container_pid FROM container JOIN container_items USING (container_pid) WHERE distinguished_kind = 0 AND smart_criteria IS NULL AND is_hidden = 0 AND LENGTH(item_pid_data) > 0 AND cloud_is_subscribed = 0 AND cloud_is_curator_playlist = 0
SELECT item_pid FROM item WHERE in_my_library
REPLACE INTO container_items (container_pid, item_pid_data) VALUES (?, ?)
DELETE FROM entity_revision WHERE entity_pid = ? AND revision_type > ?
void ML3MigrationRemoveInvalidContainerItems(NSString *__strong, ML3DatabaseConnection *__strong)_block_invoke_3
ML3MigrationUtilities.m
DELETE FROM container_item WHERE container_pid = ? AND position BETWEEN ? AND ?
UPDATE container_item SET position = (position - ?) WHERE container_pid = ? AND position >= ?
v32@?0{_NSRange=QQ}8^B24
REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES (?, 0, 1, 0)
DELETE FROM entity_revision WHERE entity_pid = ? AND class = 1 AND revision_type > 0
v32@?0@"NSNumber"8@"NSIndexSet"16^B24
iTunes_Control/iTunes/UbiquitousMetadata.sqlitedb
-wal
SELECT store_saga_id FROM item_store WHERE item_pid = ?
SELECT purchase_history_id FROM item_store WHERE item_pid = ?
startMS=%7lu
title='%@'
image=%p
imageKey=%@
url=%@
urlTitle='%@'
<%@: %p - [%@] %@>
com.apple.medialibraryd
medialibraryd
cast
copy-warning
directors
producers
screenwriters
studio
adamId
dynamic
filtered
limited
limitKind
evaluationOrder
limitOrder
limitValue
enabledItemsOnly
reverseLimitOrder
smartCriteria
genius
content
rank
SELECT COUNT() FROM %@ LIMIT 1
SELECT %@ FROM %@ LIMIT 1
 LIMIT %d
 WHERE %@
SELECT %@ FROM %@%@%@
SELECT %@ FROM %@%@ LIMIT 1
genius_id = %llu
data
genius_similarities
MLGeniusPlaylistController.m
count
%.16llX
ML3ClientImportSession.m
addItems cannot be called without an active session
v24@?0@"ML3ClientImportResult"8@"NSError"16
updateItems cannot be called without an active session
removeItems cannot be called without an active session
trackNumber
userRating
hlsPlaylistURL
v32@?0@"MLTrackImportChapter"8Q16^B24
url_title
artwork_start_time_ms
v32@?0@"NSDictionary"8Q16^B24
chapters
time-format
decimal-seconds
locales
chapter-list
start
titles
commonKey
extraAttributes
time
value
ML3TrackImporter.m
populateLocationPropertiesWithPath passed file with invalid name '%@'
update container set date_downloaded=? where container_pid in (select DISTINCT container_pid from (select container_pid from container_item join container using(container_pid) where keep_local > 0 AND item_pid=?))
q16@?0@"NSString"8
B32@?0@"NSString"8@"NSString"16@?<v@?@"NSString">24
void MLChapterDataSetChapterArtworkCacheKey(ChapterDataRef, NSUInteger, NSString *__strong)
no cache key specified
MLITChapterTOC.m
MLITChapterTOC is an abstract class.  You must allocate a concrete subclass.
numTracks
numDiscs
compilation
cloudId
_ML3AutofilledTracksArePurgeableKey
OptimizeStorage
MinimumStorageSize
B40@?0q8@"NSArray"16@"NSNumber"24^B32
SELECT COUNT() FROM artwork
DELETE FROM artwork
B32@?0q8@"NSNumber"16^B24
((item.base_location_id > 0) AND (item_stats.is_alarm = 0) AND ((item_stats.chosen_by_auto_fill = 1) OR (item.remote_location_id >= 50 AND item.remote_location_id < 300)))
SELECT DISTINCT album_pid FROM item JOIN item_store USING (item_pid) JOIN item_extra USING (item_pid) JOIN item_stats USING (item_pid) WHERE (item.base_location_id > 0 AND (item.remote_location_id < 200 OR item_stats.liked_state = 2)) OR (item.base_location_id = 0 AND item.keep_local_status = 1)
SELECT DISTINCT album_pid FROM item JOIN item_store USING (item_pid) JOIN item_extra USING (item_pid) JOIN item_stats USING (item_pid) WHERE (item.base_location_id > 0 AND item.remote_location_id < 200) OR (item.base_location_id = 0 AND item.keep_local_status = 1)
SELECT album_pid, max(max(date_accessed), max(date_added), max(date_played)) AS date_accessed, max(liked_state = 2) AS liked_state FROM item JOIN item_stats USING (item_pid) JOIN item_extra USING (item_pid) WHERE album_pid NOT IN (%@) AND (%@) GROUP BY album_pid ORDER BY liked_state, date_accessed
SELECT item_pid, item_extra.file_size FROM item JOIN item_stats USING (item_pid) JOIN item_extra USING (item_pid) WHERE album_pid = ? AND (%@)
UPDATE item SET keep_local=%d WHERE item_pid IN (%@)
MediaPlayer
image_decoding
DisableASTCEncoding
com.apple.mobileipod
GdXjx1ixZYvN9Gg8iSf68A
chapter=%llu-%.0f
%.0fx%.0f
MSVHasher+Algorithms.h
Cannot obtain digest from unknown hasher algorithm
Cannot finalize unknown hasher algorithm
<%@: %p, name='%@'>
videoQuality
hasChapterData
extendedContentName
movieInfo
hasAlternateAudio
hasSubtitles
audioLanguage
audioTrackIndex
audioTrackId
subtitleLanguage
subtitleTrackIndex
rentalDuration
rentalPlaybackDuration
rentalPlaybackStartedDateTime
rentalStartedDateTime
CREATE TABLE category (category_id INTEGER PRIMARY KEY, category TEXT NOT NULL UNIQUE)
CREATE TABLE store_link (store_link_id INTEGER PRIMARY KEY, url TEXT NOT NULL)
CREATE TABLE base_location (base_location_id INTEGER PRIMARY KEY, path TEXT NOT NULL)
CREATE TABLE "sort_map" (name TEXT NOT NULL UNIQUE, name_order INTEGER UNIQUE, name_section INTEGER,  sort_key BLOB NOT NULL)
CREATE TABLE "sort_map_new" (name TEXT NOT NULL UNIQUE, name_order INTEGER UNIQUE, name_section INTEGER, sort_key BLOB NOT NULL DEFAULT x'')
CREATE TRIGGER IF NOT EXISTS on_insert_item_setRemoteLocationColumn AFTER INSERT ON item_store BEGIN UPDATE item SET remote_location_id = ( CASE WHEN new.home_sharing_id != 0 THEN 300 ELSE ( CASE WHEN IFNULL(new.match_redownload_params, '') != '' THEN 200 ELSE ( CASE WHEN IFNULL(new.purchase_history_redownload_params, '') != '' AND new.purchase_history_id != 0 THEN 100 ELSE ( CASE WHEN new.subscription_store_item_id != 0 AND new.is_subscription AND new.cloud_asset_available THEN 50 ELSE ( CASE WHEN new.sync_redownload_params == 'redownload' AND new.sync_id != 0 THEN 20 ELSE ( CASE WHEN new.sync_redownload_params == 'local' AND new.sync_id != 0 THEN 10 ELSE 0 END) END) END) END) END) END) WHERE item_pid = new.item_pid; END;
CREATE TRIGGER IF NOT EXISTS on_update_item_setRemoteLocationColumn AFTER UPDATE OF match_redownload_params, purchase_history_redownload_params, purchase_history_id, home_sharing_id, sync_redownload_params, subscription_store_item_id, store_saga_id, is_subscription, cloud_asset_available ON item_store BEGIN UPDATE item SET remote_location_id = ( CASE WHEN new.home_sharing_id != 0 THEN 300 ELSE ( CASE WHEN IFNULL(new.match_redownload_params, '') != '' THEN 200 ELSE ( CASE WHEN IFNULL(new.purchase_history_redownload_params, '') != '' AND new.purchase_history_id != 0 THEN 100 ELSE ( CASE WHEN new.subscription_store_item_id != 0 AND new.is_subscription AND new.cloud_asset_available THEN 50 ELSE ( CASE WHEN new.sync_redownload_params == 'redownload' AND new.sync_id != 0 THEN 20 ELSE ( CASE WHEN new.sync_redownload_params == 'local' AND new.sync_id != 0 THEN 10 ELSE 0 END) END) END) END) END) END) WHERE item_pid = new.item_pid; END;
CREATE TRIGGER IF NOT EXISTS on_insert_item_setInMyLibraryColumn AFTER INSERT ON item_store BEGIN UPDATE item SET in_my_library = ( CASE WHEN new.home_sharing_id OR (new.store_saga_id AND new.cloud_in_my_library) OR new.purchase_history_id OR (new.sync_id AND new.sync_in_my_library) OR new.is_ota_purchased THEN 1 ELSE 0 END) WHERE item_pid = new.item_pid; END;
CREATE TRIGGER IF NOT EXISTS on_update_item_setInMyLibraryColumn AFTER UPDATE OF purchase_history_id, home_sharing_id, sync_id, subscription_store_item_id, store_saga_id, is_ota_purchased, sync_in_my_library, cloud_in_my_library ON item_store BEGIN UPDATE item SET in_my_library = ( CASE WHEN new.home_sharing_id OR (new.store_saga_id AND new.cloud_in_my_library) OR new.purchase_history_id OR (new.sync_id AND new.sync_in_my_library) OR new.is_ota_purchased THEN 1 ELSE 0 END) WHERE item_pid = new.item_pid; END;
CREATE TRIGGER IF NOT EXISTS on_remove_source_setPlaybackEndpointType AFTER UPDATE OF playback_endpoint_type ON item_store BEGIN UPDATE item_store SET playback_endpoint_type = (CASE WHEN new.playback_endpoint_type >= 0 THEN new.playback_endpoint_type ELSE (CASE WHEN store_saga_id THEN cloud_playback_endpoint_type WHEN sync_id THEN 0 WHEN purchase_history_id THEN 1 WHEN is_ota_purchased THEN 0 WHEN is_subscription THEN 3 ELSE 0 END) END) WHERE item_pid = new.item_pid; END;
item_new
CREATE TABLE container (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')
CREATE TABLE container_item_media_type (container_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, count INTEGER NOT NULL DEFAULT 0, UNIQUE (container_pid, media_type))
CREATE TABLE container_seed (container_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, seed_order INTEGER NOT NULL DEFAULT 0)
CREATE TABLE _MLDatabaseProperties (key TEXT PRIMARY KEY, value TEXT)
CREATE TABLE db_info (db_pid INTEGER PRIMARY KEY, primary_container_pid INTEGER, media_folder_url TEXT, audio_language INTEGER, subtitle_language INTEGER, genius_cuid TEXT, bib BLOB, rib BLOB)
CREATE TABLE entity_revision (revision INTEGER PRIMARY KEY, entity_pid INTEGER NOT NULL DEFAULT 0, deleted INTEGER NOT NULL DEFAULT 0, class INTEGER NOT NULL DEFAULT 0, revision_type INTEGER NOT NULL DEFAULT 0, UNIQUE (entity_pid, revision_type))
CREATE TABLE genius_config (id INTEGER PRIMARY KEY, version INTEGER UNIQUE, default_num_results INTEGER NOT NULL DEFAULT 0, min_num_results INTEGER NOT NULL DEFAULT 0, data BLOB)
CREATE TABLE genius_metadata (genius_id INTEGER PRIMARY KEY, revision_level INTEGER NOT NULL DEFAULT 0, version INTEGER NOT NULL DEFAULT 0, checksum INTEGER NOT NULL DEFAULT 0, data BLOB)
CREATE TABLE artwork_token (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_source_type, artwork_type, entity_pid, entity_type))
CREATE TABLE artwork (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, relative_path TEXT NOT NULL DEFAULT '', artwork_type INTEGER NOT NULL DEFAULT 0, interest_data BLOB, UNIQUE (artwork_token, artwork_source_type))
PRAGMA legacy_file_format = 0;
album_artist
category
item_extra
item_store
container_item
entity_revision
genius_config
genius_metadata
entity_changes
source
library_property
account
person
CREATE INDEX IF NOT EXISTS ItemArtistGrouping ON item_artist (grouping_key ASC)
CREATE INDEX IF NOT EXISTS AlbumArtistGrouping ON album_artist (grouping_key ASC)
CREATE INDEX IF NOT EXISTS AlbumGrouping ON album (grouping_key ASC, album_artist_pid ASC, season_number ASC)
CREATE INDEX IF NOT EXISTS ComposerGrouping ON composer (grouping_key ASC)
CREATE INDEX IF NOT EXISTS GenreGrouping ON genre (grouping_key ASC)
CREATE INDEX IF NOT EXISTS AlbumRepresentativeItemPID ON album (representative_item_pid ASC)
CREATE INDEX IF NOT EXISTS ItemArtistRepresentativeItemPID ON item_artist (representative_item_pid ASC)
CREATE INDEX IF NOT EXISTS AlbumArtistRepresentativeItemPID ON album_artist (representative_item_pid ASC)
CREATE INDEX IF NOT EXISTS GenreRepresentativeItemPID ON genre (representative_item_pid ASC)
CREATE INDEX IF NOT EXISTS ComposerRepresentativeItemPID ON composer (representative_item_pid ASC)
CREATE INDEX IF NOT EXISTS ItemArtistKeepLocal ON item_artist (keep_local ASC)
CREATE INDEX IF NOT EXISTS AlbumKeepLocal ON album (keep_local ASC)
CREATE INDEX IF NOT EXISTS AlbumArtistKeepLocal ON album_artist (keep_local ASC)
CREATE INDEX IF NOT EXISTS ContainerKeepLocal ON container (keep_local ASC)
CREATE INDEX IF NOT EXISTS GenreKeepLocal ON genre (keep_local ASC)
CREATE INDEX IF NOT EXISTS ComposerKeepLocal ON composer (keep_local ASC)
CREATE INDEX IF NOT EXISTS ArtworkTokenArtworkToken ON artwork_token (artwork_token ASC)
CREATE INDEX IF NOT EXISTS ArtworkTokenEntityPIDEntityType ON artwork_token (entity_pid ASC, entity_type ASC)
CREATE INDEX IF NOT EXISTS BestArtworkTokenEntityPIDEntityType ON best_artwork_token (entity_pid ASC, entity_type ASC)
CREATE INDEX IF NOT EXISTS ContainerItemItemPid ON container_item (item_pid ASC)
CREATE INDEX IF NOT EXISTS ContainerItemPosition ON container_item (container_pid ASC, position ASC)
CREATE INDEX IF NOT EXISTS CloudKVSBookmarkSync ON cloud_kvs (bookmark_sync_timestamp ASC, bookmark_sync_revision ASC)
CREATE INDEX IF NOT EXISTS ContainerItemPersons ON container_item_person (container_item_pid ASC)
CREATE INDEX IF NOT EXISTS ItemTitleInAlbum ON item (album_pid ASC, media_type ASC)
CREATE INDEX IF NOT EXISTS ItemTitleInAlbumArtist ON item (album_artist_pid ASC, media_type ASC)
CREATE INDEX IF NOT EXISTS ItemTitleInItemArtist ON item (item_artist_pid ASC, media_type ASC)
CREATE INDEX IF NOT EXISTS ItemTitleInComposer ON item (composer_pid ASC, media_type ASC)
CREATE INDEX IF NOT EXISTS ItemTitleInGenre ON item (genre_id ASC, media_type ASC)
CREATE INDEX IF NOT EXISTS ItemTitle ON item (title_order ASC, item_artist_order ASC, album_order ASC, album_pid ASC, disc_number ASC, track_number ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, title_order_section ASC, in_my_library ASC) WHERE (in_my_library OR title_order)
CREATE INDEX IF NOT EXISTS ItemAlbum ON item (album_order ASC, album_pid ASC, disc_number ASC, track_number ASC, title_order ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, album_order_section ASC, in_my_library ASC) WHERE (in_my_library OR album_order)
CREATE INDEX IF NOT EXISTS ItemAlbumByAlbumArtist ON item (album_artist_order ASC, album_artist_pid ASC, album_order ASC, album_pid ASC, disc_number ASC, track_number ASC, title_order ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, album_artist_order_section ASC, in_my_library ASC, is_compilation ASC) WHERE ((in_my_library OR album_order) OR is_compilation)
CREATE INDEX IF NOT EXISTS ItemItemArtist ON item (item_artist_order ASC, item_artist_pid ASC, album_pid ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, item_artist_order_section ASC, in_my_library ASC) WHERE (in_my_library OR item_artist_order)
CREATE INDEX IF NOT EXISTS ItemAlbumArtist ON item (album_artist_order ASC, album_artist_pid ASC, album_pid ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, album_artist_order_section ASC, in_my_library ASC, is_compilation ASC) WHERE ((in_my_library OR album_artist_order) OR is_compilation)
CREATE INDEX IF NOT EXISTS ItemComposer ON item (composer_order ASC, composer_pid ASC, album_order ASC, title_order ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, composer_order_section ASC, in_my_library ASC) WHERE (in_my_library OR composer_order)
CREATE INDEX IF NOT EXISTS ItemGenre ON item (genre_order ASC, genre_id ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, genre_order_section ASC, in_my_library ASC) WHERE (in_my_library OR genre_order)
CREATE INDEX IF NOT EXISTS ItemSeries ON item (series_name_order ASC, album_order ASC, episode_sort_id ASC, title_order ASC, media_type ASC, in_my_library ASC) WHERE in_my_library
CREATE INDEX IF NOT EXISTS ItemDateCreated ON item (date_added DESC, album_order ASC, album_pid ASC, disc_number ASC, track_number ASC, title_order ASC, media_type ASC, remote_location_id ASC, base_location_id ASC) WHERE in_my_library
CREATE INDEX IF NOT EXISTS ItemExtraGeniusID ON item_extra (genius_id ASC);
CREATE INDEX IF NOT EXISTS ItemStoreSagaID ON item_store (store_saga_id ASC);
CREATE INDEX IF NOT EXISTS ItemStoreItemID ON item_store (store_item_id ASC);
CREATE INDEX IF NOT EXISTS ItemStoreSubscriptionStoreItemID ON item_store (subscription_store_item_id ASC);
CREATE INDEX IF NOT EXISTS ItemStatsPlayCount ON item_stats (play_count_user ASC);
CREATE INDEX IF NOT EXISTS ItemStatsPlayDate ON item_stats (date_played ASC);
CREATE INDEX IF NOT EXISTS ItemStatsUserRating ON item_stats (user_rating ASC);
CREATE INDEX IF NOT EXISTS ItemStatsRememberBookmark ON item_stats (remember_bookmark ASC);
CREATE INDEX IF NOT EXISTS ItemKeepLocal ON item (keep_local ASC)
CREATE INDEX IF NOT EXISTS ItemKVSKey ON item_kvs (key ASC)
CREATE INDEX IF NOT EXISTS CloudKVSBookkeeperItemLookup ON cloud_kvs (bookmark_sync_timestamp ASC, bookmark_sync_revision ASC)
PRAGMA user_version;
SELECT value FROM _MLDatabaseProperties WHERE key = 'OrderingLanguage';
SELECT name FROM sqlite_master WHERE type='index' AND tbl_name IN (%s);
sqlite_autoindex_
DROP INDEX %@;
SenTestCase
ML3MusicLibraryUPPServiceKey
SBCPlaybackPositionDomain
Class getSBCPlaybackPositionDomainClass(void)_block_invoke
ML3MusicLibraryUbiquitousDatabase.m
void *StoreBookkeeperClientLibrary(void)
SBCPlaybackPositionService
Class getSBCPlaybackPositionServiceClass(void)_block_invoke
SBCPlaybackPositionEntity
Class getSBCPlaybackPositionEntityClass(void)_block_invoke
Values and properties arrays are not equal length.
no table for %@ / %@
no column for %@ / %@
v32@?0@"NSString"8Q16^B24
no pidColumn for %@ / %@
SELECT 1 FROM %@ WHERE %@ = ? LIMIT 1;
UPDATE %@ SET %@ WHERE %@ = ?;
genius_cuid
primary_container_pid
album_artist_order
composer_pid
track_number
date_added
{?=qq}
errorDescription
errorCode
lastPackage
header
syncOperation
error
Header
Error
SyncOperation
apple_id
%@ LEFT OUTER JOIN container_item_person ON %@.ROWID = container_item_person.container_item_person_pid
There is more than one child for this code, please use childElementsForCode. ElementCode=
numberOfChildren=
%@ LEFT OUTER JOIN booklet ON %@.ROWID = booklet.booklet_pid
Duplicate Video Detected
The media library service has detected that a duplicate video has been imported.
Please file a radar now using the button below.
[This dialog is shown for internal users only.]
File Radar
tap-to-radar
BundleID
com.apple.music
Title
TTR: Duplicate Videos Detected
ComponentID
638696
ComponentName
MediaLibrary
ComponentVersion
Classification
Serious Bug
ExtensionIdentifiers
com.apple.MediaPlayer.DiagnosticExtension
Reproducibility
Sometimes
v16@?0@"MSVSystemDialogResponse"8
playlists
INSERT OR REPLACE INTO album (%@) SELECT %@ FROM album WHERE album_pid=?
UPDATE album SET album_artist_pid=?, representative_item_pid=? WHERE album_pid=?
UPDATE item SET album_pid=? WHERE item_pid IN (%@)
item_pid
purchase_history_id
purchase_history_token
downloader_account_id
is_protected
key_platform_id
key_id
artwork_url
store_xid
store_flavor
store_link_id
ML3RemovePlaylistsOperation requires a track source attribute
DELETE FROM container
UPDATE container set %@=0
DELETE FROM container WHERE container_pid
UPDATE container set %@=0 WHERE container_pid
totalPackages
syncType
Delta
playlist
playlistId
curatorName
versionHash
lastModifiedDate
en_US_POSIX
yyyy-MM-dd'T'HH:mm:ssZZZZZ
childrenIds
ML3StoreItemPlaylistData.m
booklet_pid
store_item_id
file_size
booklet
operationType
multiverseId
series
Update
Delete
%@ LEFT OUTER JOIN person ON %@.ROWID = person.person_pid
%@ is invalid. Use %@.
Books
DCIM
Downloads
FactoryLogs
MediaAnalysis
PhotoData
Photos
Purchases
Radio
Recordings
iTunes_Control/iTunes/MediaLibrary.sqlitedb
CloudAssets/SharedCache
tmp.
mobile
IPHONE_SHARED_RESOURCES_DIRECTORY
CFFIXED_USER_HOME
ML3ImportOperation.mm
Invalid parameter not satisfying: %@
import
import.writer
import.library
You must provide %@ with a database import. Use %@ instead.
writer:             %p
library:            %@
import data size:   %lu
success:            %@
error:              %@
cancelled:          %@
suspended:          %@
redownload_params
ML3DatabaseNaturalStatementSQLKey
ML3DatabaseNaturalStatementParametersKey
mediaObjectType
mediaType
accountId
sagaId
purchaseHistoryId
libraryIdentifiers
Artist
Genre
Series
MediaItem
Playlist
AlbumArtist
(unknown: %i)
Podcast
VoiceMemo
AudioBook
DigitalBooklet
ITunesUVideo
Index (%ld) out of bounds (%lu)
com.apple.ML3QueryResultSet.coalescing
com.apple.ML3QueryResultSet
v28@?0q8C16^B20
ML3QueryResultSet.mm
Updateable query has no ordering! query: %@
SELECT %@ FROM %@ %@ WHERE %@.ROWID = ?
invalid parameter.  completion block must be specified.
v32@?0@8Q16^B24
updated results
v24@?0q8^B16
v24@?0r^q8Q16
B16@?0@"ML3DatabaseConnection"8
MLTimeQueryOperations
episode_id
has_alternate_audio
has_subtitles
subtitle_track_index
show_sort_type
episode_type_display_name
episode_sub_sort_order
color_capability
hls_video_quality
hls_playlist_url
hls_audio_capability
hls_key_server_url
hls_key_server_protocol
isSourceExternal
ML3LibraryNotificationManager.m
library
com.apple.MusicLibrary.%@
B32@?0@"NSNotification"8Q16^B24
ML3MultiUserErrorDomain
direction
collation
ascending
descending
%@(%@ %@)
 COLLATE 
track_items
YYYY-MM-dd
album-parent
albumArtistId
albumArtistName
v24@?0@"ICStorePlatformResponse"8@"NSError"16
artistId
collectionId
collectionName
isCompilation
isMasteredForItunes
ml3td_radio_station_id
ml3td_advertisement_unique_id
ml3td_advertisement_type
showComposer
shouldBookmarkPlayPosition
episodeSeasonNumber
wasAvailableForSubs
episodeDisplayLabel
hasLyrics
hasTimeSyncedLyrics
videoSubType
screenshots
releaseDate
offers
type
subscription
genreNames
albumArtwork
contentRatingsBySystem
riaa
Explicit
Clean
advisories
%@|%@|%ld|%@
store_collection_id=%lld
store_item_id=%lld
episode
episodebonus
seasonbonus
tvtrailer
tvextra
tvinterview
assets
children
artistName
ICStorePlatformRequest
Class getICStorePlatformRequestClass(void)_block_invoke
ML3StoreItemTrackData.m
Unable to find class %s
void *iTunesCloudLibrary(void)
ICStoreRequestContext
Class getICStoreRequestContextClass(void)_block_invoke
ICUserIdentity
Class getICUserIdentityClass(void)_block_invoke
NSString *getICStorePlatformAudioTraitSpatial(void)
ICStorePlatformAudioTraitSpatial
NSString *getICStorePlatformAudioTraitLossless(void)
ICStorePlatformAudioTraitLossless
NSString *getICStorePlatformAudioTraitHiResLossless(void)
ICStorePlatformAudioTraitHiResLossless
NSString *getICStorePlatformAudioTraitLossyStereo(void)
ICStorePlatformAudioTraitLossyStereo
NSString *getICStorePlatformAudioTraitAtmos(void)
ICStorePlatformAudioTraitAtmos
NSString *getICStorePlatformAudioTraitSurround(void)
ICStorePlatformAudioTraitSurround
ICStoreArtworkInfo
Class getICStoreArtworkInfoClass(void)_block_invoke
NSString *getICStorePlatformMetadataKindAlbum(void)
ICStorePlatformMetadataKindAlbum
NSString *getICStorePlatformMetadataKindArtist(void)
ICStorePlatformMetadataKindArtist
NSString *getICStorePlatformMetadataKindPlaylist(void)
ICStorePlatformMetadataKindPlaylist
NSString *getICStorePlatformMetadataKindTVSeason(void)
ICStorePlatformMetadataKindTVSeason
ICStorePlatformMetadata
Class getICStorePlatformMetadataClass(void)_block_invoke
NSString *getICStorePlatformMetadataKindSong(void)
ICStorePlatformMetadataKindSong
NSString *getICStorePlatformMetadataKindMusicVideo(void)
ICStorePlatformMetadataKindMusicVideo
NSString *getICStorePlatformMetadataKindUploadedAudio(void)
ICStorePlatformMetadataKindUploadedAudio
NSString *getICStorePlatformMetadataKindUploadedVideo(void)
ICStorePlatformMetadataKindUploadedVideo
NSString *getICStorePlatformMetadataKindTVEpisode(void)
ICStorePlatformMetadataKindTVEpisode
NSString *getICStorePlatformMetadataKindMovie(void)
ICStorePlatformMetadataKindMovie
NSString *getICStoreArtworkInfoCropStyleBoundedBox(void)
ICStoreArtworkInfoCropStyleBoundedBox
NSString *getICStoreArtworkInfoCropStyleSquareCenterCrop(void)
ICStoreArtworkInfoCropStyleSquareCenterCrop
NSString *getICStoreArtworkInfoImageFormatJPEG(void)
ICStoreArtworkInfoImageFormatJPEG
UPDATE item_store SET cloud_in_my_library = 1 WHERE item_pid
UPDATE item SET in_my_library = 1 WHERE item_pid
QUICKTIME_MOVIE_KIND
QUICKTIME_MOVIE_URL_KIND
PROTECTED_VIDEO_KIND
UNPROTECTED_VIDEO_KIND
PURCHASED_VIDEO_KIND
MATCHED_VIDEO_KIND
MPEG4_AUDIO_FILE_KIND
MPEG4_PROTECTED_AUDIO_FILE_KIND
MPEG4_PURCHASED_AUDIO_FILE_KIND
MPEG4_AUDIO_STREAM_KIND
MPEG4_PROTECTED_AUDIO_STREAM_KIND
AAC_AUDIO_FILE_KIND
AAC_PROTECTED_AUDIO_FILE_KIND
AAC_PURCHASED_AUDIO_FILE_KIND
AAC_MATCHED_AUDIO_FILE_KIND
AAC_PROTECTED_MASTERED_AUDIO_FILE_KIND
AAC_PURCHASED_MASTERED_AUDIO_FILE_KIND
AAC_MATCHED_MASTERED_AUDIO_FILE_KIND
AAC_AUDIO_STREAM_KIND
AAC_PROTECTED_AUDIO_STREAM_KIND
AAC_PURCHASED_AUDIO_STREAM_KIND
AAC_MATCHED_AUDIO_STREAM_KIND
AAC_PROTECTED_MASTERED_AUDIO_STREAM_KIND
AAC_PURCHASED_MASTERED_AUDIO_STREAM_KIND
AAC_MATCHED_MASTERED_AUDIO_STREAM_KIND
LOSSLESS_AUDIO_FILE_KIND
LOSSLESS_PROTECTED_AUDIO_FILE_KIND
LOSSLESS_AUDIO_STREAM_KIND
LOSSLESS_PROTECTED_AUDIO_STREAM_KIND
RINGTONE_AUDIO_FILE_KIND
AUDIBLE_FILE_KIND
INTERNET_AUDIO_STREAM_KIND
INTERNET_AUDIO_FILE_KIND
MP3_INTERNET_AUDIO_STREAM_KIND
MPEG4_INTERNET_AUDIO_STREAM_KIND
AAC_INTERNET_AUDIO_STREAM_KIND
HEAAC_INTERNET_AUDIO_STREAM_KIND
MP3_AUDIO_FILE_KIND
MP3_AUDIO_STREAM_KIND
AIFF_AUDIO_FILE_KIND
WAV_AUDIO_FILE_KIND
SD2_AUDIO_FILE_KIND
AIFF_AUDIO_STREAM_KIND
WAV_AUDIO_STREAM_KIND
BOOK_FILE_KIND
BOOK_PURCHASED_FILE_KIND
BOOK_PROTECTED_FILE_KIND
ITUNES_EXTRA_KIND
ITUNES_LP_KIND
PDF_FILE_KIND
PLAYLIST_URL_KIND
IPHONE_APPLICATION_KIND
UNIVERSAL_APPLICATION_KIND
IPAD_APPLICATION_KIND
IPOD_GAME_KIND
WMA_AUDIO_FILE_KIND
CAF_AUDIO_FILE_KIND
QUICKTIME_MOVIE_KIND_OLD
QUICKTIME_MOVIE_URL_KIND_OLD
PROTECTED_VIDEO_KIND_OLD
UNPROTECTED_VIDEO_KIND_OLD
PURCHASED_VIDEO_KIND_OLD
MATCHED_VIDEO_KIND_OLD
MPEG4_AUDIO_FILE_KIND_OLD
MPEG4_PROTECTED_AUDIO_FILE_KIND_OLD
MPEG4_PURCHASED_AUDIO_FILE_KIND_OLD
MPEG4_AUDIO_STREAM_KIND_OLD
MPEG4_PROTECTED_AUDIO_STREAM_KIND_OLD
AAC_AUDIO_FILE_KIND_OLD
AAC_PROTECTED_AUDIO_FILE_KIND_OLD
AAC_PURCHASED_AUDIO_FILE_KIND_OLD
AAC_MATCHED_AUDIO_FILE_KIND_OLD
AAC_AUDIO_STREAM_KIND_OLD
AAC_PROTECTED_AUDIO_STREAM_KIND_OLD
AAC_PURCHASED_AUDIO_STREAM_KIND_OLD
AAC_MATCHED_AUDIO_STREAM_KIND_OLD
LOSSLESS_AUDIO_FILE_KIND_OLD
LOSSLESS_PROTECTED_AUDIO_FILE_KIND_OLD
LOSSLESS_AUDIO_STREAM_KIND_OLD
LOSSLESS_PROTECTED_AUDIO_STREAM_KIND_OLD
RINGTONE_AUDIO_FILE_KIND_OLD
AUDIBLE_FILE_KIND_OLD
INTERNET_AUDIO_STREAM_KIND_OLD
INTERNET_AUDIO_FILE_KIND_OLD
MP3_INTERNET_AUDIO_STREAM_KIND_OLD
MPEG4_INTERNET_AUDIO_STREAM_KIND_OLD
AAC_INTERNET_AUDIO_STREAM_KIND_OLD
HEAAC_INTERNET_AUDIO_STREAM_KIND_OLD
MP3_AUDIO_FILE_KIND_OLD
MP3_AUDIO_STREAM_KIND_OLD
AIFF_AUDIO_FILE_KIND_OLD
WAV_AUDIO_FILE_KIND_OLD
SD2_AUDIO_FILE_KIND_OLD
AIFF_AUDIO_STREAM_KIND_OLD
WAV_AUDIO_STREAM_KIND_OLD
BOOK_FILE_KIND_OLD
BOOK_PURCHASED_FILE_KIND_OLD
BOOK_PROTECTED_FILE_KIND_OLD
ITUNES_EXTRA_KIND_OLD
ITUNES_LP_KIND_OLD
PDF_FILE_KIND_OLD
PLAYLIST_URL_KIND_OLD
IPHONE_APPLICATION_KIND_OLD
UNIVERSAL_APPLICATION_KIND_OLD
IPAD_APPLICATION_KIND_OLD
IPOD_GAME_KIND_OLD
WMA_AUDIO_FILE_KIND_OLD
CAF_AUDIO_FILE_KIND_OLD
You must provide %@ with an XPC connection. Use initWithConnection: instead.
<%@: %p %@ [%lld]>
MLWriterErrorDomain
com.apple.ML3MediaLibraryWriter
MediaLibrary Daemon State at %@
Active Transactions:
v32@?0@"NSUUID"8@"ML3ActiveTransaction"16^B24
(None)
Enqueued concurrent operations:
Enqueued serial operations:
Could not obtain writer connection for database.
Could not begin transaction. %@
Database Error: %@
Attempted to execute update without a valid transaction (transaction ID = %@). You must start a transaction first before executing an update.
Attempted to execute illegal update: %@ (%d)
action
ML3MediaLibraryWriter.m
Authorizer failure should have caused executeUpdate: to return NO
Database error while fetching rows: %@
Attempted to execute query without a valid transaction (transaction ID = %@). You must be within an existing transaction first before executing a query.
Attempted to execute illegal query: %@ (%d)
Unable to end transaction with ID %@.
A connection with the transaction ID %@ could not be found.
No operation exists for operation type: %lu
The media library service cancelled all active database transactions.
MediaLibraryWatchdogDisabled
<Unknown>
Media library database transaction was terminated due to inactivity.
MLCloudAccountID
MLLastKnownActiveLockerAccountDSID
MLSagaLastGeniusUpdate
MLCloudLastPlayDataUpdate
MLCloudLastPlaylistPlayDataUpdate
MLCloudLibraryCUID
MLCloudLibraryTroveID
MLCloudDatabaseUserVersion
MLCloudAccountAddToPlaylistBehavior
MLCloudLibraryPrefersToMerge
MLStorefrontID
MLCloudDatabaseRevision
MLCloudLastLibraryUpdate
MLCloudLastSubscribedContainersUpdate
MLCloudDatabasePreferredVideoQuality
{ -empty- }
count[%@] %@
v28@?0I8Q12^B20
%@ types: %@
SELECT name, name_order FROM sort_map
SELECT name_order FROM sort_map WHERE ML3SearchStringMatch(?, name)
ML3SpotlightMatch(
ML3SpotlightMatch(%@, %@, %@, %@)
ML3SpotlightMatch
v16@?0^v8
item_search.search_artist
item_search.search_series
com.apple.ml.SpotlightNameCache
com.apple.ml.SpotlightNameCacheAccess
void ML3SpotlightMatchingNameCacheTimer(ML3SpotlightMatchingNameCache *)
ML3SpotlightQuery.mm
invalid parameter
_MLChangeObserver <%p> - Observer for %@[%d]
Processing shared database path change
v24@?0@"_MLChangeObserver"8^B16
com.apple.medialibraryd.multi-user-resources-service.serialQueue
com.apple.medialibraryd.multi-user-resources-service.workQueue
com.apple.medialibraryd.multi-user-resources-service.calloutQueue
MLTransactionContextPathKey
MLTransactionContextPriorityLevelKey
MLTransactionContextOptionsKey
MLTransactionContextPrivacyContextKey
SELECT item_store.sync_id FROM item JOIN item_store USING (item_pid) WHERE item.ROWID = ?
SELECT item_store.sync_id, item_extra.title, item.media_type, item_store.account_id, item_store.store_item_id, item_store.store_saga_id, item_store.purchase_history_id, item_store.cloud_universal_library_id FROM item JOIN item_store USING (item_pid) JOIN item_extra USING (item_pid) WHERE item.ROWID = ?
SELECT container.name, container.store_cloud_id, container.cloud_universal_library_id FROM container WHERE container.ROWID = ?
SELECT ROWID FROM %@ WHERE ROWID = ?
SELECT ROWID FROM %@ WHERE ROWID > ? LIMIT 1
MLUserDatabasePathDidChangeNotification
octest
MusicLibrary.framework
isManagingResourceForSingleUserWithAccountInfoKey
implementationKey
ML3MusicLibraryResourcesManager.m
Daemon multi-users resources manager context must specify both account info provider and a media library account change observer
Non-daemon multi-users resources manager context must specify the resources service
No implementation of ML3MusicLibraryResourcesManager supports the current configuration
ML3MatchImportOperation.mm
Attempted to start match import operation without DAAP payload data.
persistent-id
cloud-id
<ML3SetCloudIDTrackImportItem 
 persistentID=
, cloudID=
<ML3SetCloudIDContainerImportItem 
com.apple.medialibraryd.xpc
MLMediaLibraryWillDeleteDatabaseNotification
MLMediaLibraryDeletedDatabaseNotification
MLMediaLibraryServiceDidTerminateTransactionNotification
MLDatabaseOperationOptionDatabasePathKey
MLDatabaseOperationOptionPriorityLevelKey
MLDatabaseOperationOptionTransactionIdentifierKey
MLDatabaseOperationOptionReadOnlyKey
MLDatabaseOperationOptionEnqueueSerially
MLImportOperationOptionPreferredVideoQualityKey
MLImportOperationOptionHSBasePlaylistIdKey
MLImportOperationOptionIsResetSyncKey
MLImportOperationOptionIsSagaEnabledKey
MLImportOperationOptionSyncAnchorKey
MLImportOperationOptionStoreAccountIdKey
MLDatabaseQueryOptionLimitPropertyKey
MLDatabaseQueryOptionLimitValueKey
MLDatabaseQueryOptionRangeBeginKey
MLDatabaseQueryOptionCountKey
MLDatabaseOperationAttributePersistentIDsArrayKey
MLDatabaseOperationAttributeEntityURLsArrayKey
MLDatabaseOperationAttributeEntityClassKey
MLDatabaseOperationAttributeValuesKey
MLDatabaseOperationAttributePropertiesKey
MLDatabaseOperationAttributeStatementsKey
MLDatabaseOperationAttributeTrackSourceKey
MLDatabaseOperationAttributeBundleIDKey
MLDatabaseOperationAttributeArtworkTokenKey
MLDatabaseOperationAttributeArtworkInterestDataKey
MLDatabaseOperationAttributeTestWaitTimeInterval
MLDatabaseOperationAttributeDownloadedAssetsListKey
MLDatabaseOperationAttributeDownloadedAssetPersistentIdKey
MLDatabaseOperationAttributeDownloadedAssetEntityTypeKey
MLDatabaseOperationAttributeDownloadedAssetTrackPathKey
MLDatabaseOperationAttributeDownloadedAssetProtectionTypeKey
MLDatabaseOperationAttributeDownloadedAssetArtworkPathKey
MLDatabaseOperationAttributeDownloadedAssetGeniusDataPathKey
MLDatabaseOperationAttributeDownloadedAssetLyricsPathKey
MLDatabaseOperationAttributeDownloadedAssetTrackPropertiesKey
MLDatabaseOperationAttributeDownloadSourceContainerIDKey
MLMediaLibraryServiceOptionLoggingLevelKey
MLTerminatedTransactionIdentifierKey
No lock
Database exchange
Database backup
Database restore
MLTool
com.apple.MusicLibrary.MLMediaLibraryService
com.apple.MusicLibrary.MLMediaLibraryServiceReplyQueue
Could not validate database at path %@.
Could not attempt recovery at path: %@
Failed to obtain service proxy to perform integrity check. err=%@
Could not perform diagnostic
v24@?0@"NSString"8@"NSError"16
Could not recreate database at path %@.
Could not begin transaction for database at path %@.
Could not execute update on transaction %@.
Could not execute query on transaction %@.
Could not end transaction %@.
Could not execute database operation on database at path %@.
Could not set options on media library service.
Could not perform import for database at path %@.
v28@?0B8@"NSError"12@"NSData"20
Could not cancel import operation.
Could not lock database.
Could not unlock database.
Could not update spotlight index.
Could not update spotlight index for identifiers: %@
Could not update siri index for all libraries
Could not perform maintenance task for database at path %@
Could not retrieve XPC listener endpoint for MediaLibraryResourcesService - Try %ld of %ld
v24@?0@"NSXPCListenerEndpoint"8@"NSError"16
ML3ServiceConnectionBug
currentThread=%@ last connection error=%@
MLMediaLibraryService.m
Unable to retrieve XPC listener endpoint for MediaLibraryResourcesService [fatal error after %ld retries] - error=%@
Could not retrieve XPC listener endpoint for ClientImportService - Try %ld of %ld
store_lyrics_available
com.apple.medialibraryd.multi-user-deamon-resources-serial-queue
com.apple.medialibraryd.multi-user-deamon-resources-callout-queue
com.apple.medialibraryd.multi-user-deamon-resources-account-change-queue
final and current dsid are identical: %@
final (%@) and current (%@) dsid are different
Cannot append to unknown hasher algorithm
Unable to open file '%@'
No SQL statements found in %@
Error executing '%@'
DROP TABLE sort_map
/tmp/ML3UnitTests
%@_%@
library.sqlitedb
ML3MusicLibrary+MLUnitTestingAdditions.m
Could not prepare for test '%@/%@' database, unable to load setupSQLFilename = '%@' - no such file in bundle %@
Could not prepare for test '%@/%@' database with setupSQLPath = %@, error = %@
v16@?0@"ML3MusicLibrary"8
mlmediatype
NSString *executableSQLFromUnitTestFileForString(NSString *__strong)
sql contains invalid text at '%@'
MLSiriIndexValidityRevision
%@-%ld-%lld
v24@?0@"KVDatasetStream"8@"NSError"16
v16@?0@"NSString"8
KVDonator
Class getKVDonatorClass(void)_block_invoke
ML3UpdateSiriIndexOperation.m
void *KoaLibrary(void)
NSString *getKVOriginAppIdMediaPlayer(void)
KVOriginAppIdMediaPlayer
KVIncrementalDatasetStream
Class getKVIncrementalDatasetStreamClass(void)_block_invoke
KVFullDatasetStream
Class getKVFullDatasetStreamClass(void)_block_invoke
KVMediaItemBuilder
Class getKVMediaItemBuilderClass(void)_block_invoke
q24@?0@"NSNumber"8@"NSNumber"16
MLJaliscoAccountID
MLJaliscoLastGeniusUpdate
MLJaliscoLastSupportedMediaKinds
MLJaliscoLastExcludedMediaKinds
MLJaliscoHasCloudGeniusData
GeniusUserEnabled
MLJaliscoNeedsUpdateForTokens
MLJaliscoDatabaseRevision
MLJaliscoLastLibraryUpdate
movpkg
m4bpkg
blob
LastCorruptionRestoreAttempt
NSSQLiteErrorDomain
ML3VirtualTable.mm
databaseTable != nil
virtual_%@
%@_module_%u
CREATE VIRTUAL TABLE TEMP.%@ USING %@
col%lu
CREATE TABLE %@ (%@)
int _ML3VirtualTableOpen(sqlite3_vtab *, sqlite3_vtab_cursor **)
Virtual table %@ did not provide a database table structure.
Operation cancelled.
<%@ %p operationType = %@, attributes = %@>
Missing attributes for operation type: %@
Operation does not have library reference.
Operation does not have a transaction set.
MLDatabaseOperationTypeSetValuesForProperties
MLDatabaseOperationTypeBulkStatementExecution
MLDatabaseOperationTypeRemoveTracks
MLDatabaseOperationTypeUpdateSpotlightIndex
MLDatabaseOperationTypeUpdateArtworkInterestData
MLDatabaseOperationTypeRemovePlaylists
ML3ProcessDownloadedAssetsOperation
MLDatabaseOperationTypeUpdateSiriIndex
<Unknown Write Operation Type>
ML3SystemErrorDomain
com.apple.Music
com.apple.videos
com.apple.MobileStore
com.apple.AppStore
com.apple.tv
Failed to chown file %s. Err %d.
Failed to get uid for user 'mobile'. Err %d.
Failed to get permissions info on file %s.
wrong permisions
filePath
chownError
statError
errorMsg
v32@?0q8Q16^B24
SELECT ROWID,%@ FROM container WHERE %@=?
SELECT COUNT() FROM sort_map
MLResetCollectionsOnNextImport
UPDATE album SET representative_item_pid=0
UPDATE album_artist SET representative_item_pid=0
UPDATE item_artist SET representative_item_pid=0
UPDATE item_store SET %@=0
UPDATE container SET %@=0
SELECT 1 FROM sort_map WHERE name_order IS NULL
DELETE FROM container_item_person WHERE ROWID
UPDATE item set keep_local=0 WHERE keep_local<1 AND item_pid
DELETE FROM booklet WHERE ROWID
UPDATE item SET keep_local = ? WHERE ROWID
SELECT cloud_is_subscribed FROM container WHERE container_pid=%lld
UPDATE container SET keep_local = ? WHERE ROWID
B8@?0
SELECT value FROM _MLDatabaseProperties WHERE key = 'MLCloudAccountID'
UPDATE container SET parent_pid = ? WHERE container_pid = ?
UPDATE album SET album_year = (SELECT IFNULL(MAX(year), 0) FROM item_extra JOIN item USING(item_pid) WHERE item.album_pid = ?) WHERE album_pid = ?
UPDATE album SET contains_classical_work=(CASE WHEN EXISTS (SELECT album_pid FROM item JOIN item_extra USING (item_pid) WHERE album_pid=? AND classical_work!='' OR (show_composer=1 AND grouping!='')) THEN 1 ELSE 0 END) WHERE album_pid=?
UPDATE album SET all_compilations=(SELECT IFNULL(MIN(is_compilation), 0) FROM item WHERE item.album_pid = ?) WHERE album_pid = ?
DELETE FROM _MLDatabaseProperties WHERE key = 'MLResetCollectionsOnNextImport'
com.apple.MusicLibrary.importFinished-%@
DuplicateVideosAlert
SELECT store_item_id, title, media_type FROM item JOIN item_store USING(item_pid) JOIN item_extra USING(item_pid) WHERE store_item_id IN (SELECT store_item_id FROM item JOIN item_store USING(item_pid) GROUP BY store_item_id HAVING COUNT() > 1 AND store_item_id !=0 AND media_type IN (512,2048)) AND is_ota_purchased = 1 AND purchase_history_id = 0
%@ | %@ | %@
bool ML3ImportSession::_prepareTrackSortData(ML3ImportItemRef)
ML3ImportSession.mm
invalid track pid
INSERT OR REPLACE INTO artwork_token (artwork_token,artwork_source_type,artwork_type,entity_pid,entity_type)
DELETE FROM artwork_token WHERE artwork_source_type = ? AND artwork_type = ? AND entity_pid = ? AND entity_type = ?
SELECT booklet_pid FROM booklet WHERE item_pid = ?
matched
REPLACE INTO entity_revision (entity_pid, deleted, class) VALUES (?, ?, ?)
SELECT name_order, name_section FROM sort_map WHERE name = ?
SELECT item_artist_pid FROM item WHERE ROWID = ?
SELECT item_artist, sort_item_artist, series_name, sort_series_name, representative_item_pid, store_id, grouping_key, sync_id, classical_experience_available FROM item_artist WHERE item_artist_pid=?
UPDATE item_artist SET representative_item_pid=0 WHERE item_artist_pid=?
UPDATE item_artist SET item_artist = ? WHERE ROWID = ?
UPDATE item_artist SET sort_item_artist = ? WHERE ROWID = ?
UPDATE item SET item_artist_order=?, item_artist_order_section=? WHERE item_artist_pid=?
UPDATE item_artist SET series_name = ? WHERE ROWID = ?
UPDATE item_artist SET sort_series_name = ? WHERE ROWID = ?
UPDATE item SET series_name_order=?, series_name_order_section=? WHERE item_artist_pid=?
UPDATE item_artist SET store_id = ? WHERE ROWID = ?
UPDATE item_artist SET sync_id = ? WHERE ROWID = ?
UPDATE item_artist SET classical_experience_available = ? WHERE ROWID = ?
SELECT album_artist_pid FROM item WHERE ROWID = ?
SELECT album_artist, sort_album_artist, representative_item_pid, store_id, grouping_key, sync_id, cloud_universal_library_id, classical_experience_available FROM album_artist WHERE album_artist_pid=?
UPDATE album_artist SET representative_item_pid=0 WHERE album_artist_pid=?
UPDATE album_artist SET album_artist = ? WHERE ROWID = ?
UPDATE album_artist SET sort_album_artist = ? WHERE ROWID = ?
UPDATE item SET album_artist_order=?, album_artist_order_section=? WHERE album_artist_pid=?
UPDATE album_artist SET store_id = ? WHERE ROWID = ?
UPDATE album_artist SET sync_id = ? WHERE ROWID = ?
UPDATE album_artist SET cloud_universal_library_id = ? WHERE ROWID = ?
UPDATE album_artist SET classical_experience_available = ? WHERE ROWID = ?
SELECT album_pid FROM item WHERE ROWID = ?
SELECT album, sort_album, feed_url, user_rating, liked_state, all_compilations, season_number, representative_item_pid, grouping_key, album_year, contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available FROM album WHERE album_pid=?
UPDATE album SET representative_item_pid=0 WHERE album_pid=?
UPDATE album SET album = ? WHERE ROWID = ?
UPDATE album SET sort_album = ? WHERE ROWID = ?
UPDATE item SET album_order=?, album_order_section=? WHERE album_pid=?
UPDATE album SET user_rating = ? WHERE ROWID = ?
UPDATE album SET user_rating_is_derived = ? WHERE ROWID = ?
UPDATE album SET liked_state = ? WHERE ROWID = ?
UPDATE album SET sync_id = ? WHERE ROWID = ?
UPDATE album SET classical_experience_available = ? WHERE ROWID = ?
SELECT composer_pid FROM item WHERE ROWID = ?
SELECT composer, sort_composer, representative_item_pid, grouping_key, sync_id FROM composer WHERE composer_pid=?
UPDATE composer SET representative_item_pid=0 WHERE composer_pid=?
UPDATE composer SET sort_composer = ? WHERE ROWID = ?
UPDATE composer SET sync_id = ? WHERE ROWID = ?
SELECT genre, ROWID, sync_id FROM genre WHERE (ROWID=? OR sync_id=?) OR grouping_key = (?)
SELECT genre, ROWID, sync_id FROM genre WHERE grouping_key = (?)
SELECT genre, ROWID, sync_id FROM genre WHERE (ROWID=? OR sync_id=?)
UPDATE genre SET genre = ? WHERE ROWID = ?
UPDATE genre SET sync_id = ? WHERE ROWID = ?
SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available FROM album 
WHERE 
(ROWID=? OR sync_id=?) OR
(grouping_key IN (?) AND album_artist_pid = ?)
(grouping_key IS NULL AND album_artist_pid = ?)
SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available FROM item_artist 
WHERE (ROWID = ? OR sync_id = ?) OR grouping_key = ?
WHERE(ROWID = ? OR sync_id = ?)
WHERE grouping_key = ?
SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available FROM album_artist 
WHERE (ROWID = ? OR sync_id = ?)
SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE (ROWID = ? OR sync_id = ?) OR grouping_key = ?
SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE grouping_key = (?)
SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE (ROWID = ? OR sync_id = ?)
SELECT item_pid, store_saga_id, sync_id, purchase_history_id, is_ota_purchased FROM item_store WHERE item_pid = %lld
SELECT ROWID,%@ FROM item_store WHERE %@ IN (%@)
DROP TRIGGER IF EXISTS 
EmptyContainerItemImportBug
Missing reporting_adam_id in PAF event
sourceMapDict
itemSourceIDS
unmappedIDS
updatedItemPersistentIDs
deletedContainerItemPersistentIDs
containerItemsToUpdate
name
SELECT container_item_pid, position FROM container_item WHERE container_pid = ? ORDER BY position
SELECT position, container_item_person_pid, cloud_id FROM container_item_person LEFT OUTER JOIN container_item USING (container_item_pid) JOIN person USING (person_pid) WHERE container_pid = ? ORDER BY position
, albumArtistPersistentID=%lld, groupingKey=%@, feedURL=%@, seasonNumber=%ld, compilation=%@
 VALUES (
on_insert_item_setRemoteLocationColumn
on_update_item_setRemoteLocationColumn
on_insert_item_setInMyLibraryColumn
on_update_item_setInMyLibraryColumn
-[%@ init] is unsupported. Use -[%@ initWithStatement:] instead.
attempt to create a database statement without an underlying sqlite3_stmt
ML3DatabaseStatement.m
%@ %p has a dangling SQLite resource. (%p) A connection should have free'd this resource.
%@ executing=%d, sql='%@'
attempt to step database statement that has already been finalized
v32@?0@"NSString"8@16^B24
'%@'
container_pid
<%@ %p libraryOwnedTracks=%@ libraryOwnedPlaylists=%@ pendingMatch=%@ libraryPath="%@">
ML3DatabaseImport.m
%@: coder must support keyed coding
libraryPath
trackData
playlistData
fileHandle
syncAnchor
resetSync
sagaEnabled
storeAccountID
preferredVideoQuality
homeSharingBasePlaylistID
tracksAreLibraryOwnedContent
playlistsAreLibraryOwnedContent
pendingMatch
isServerImport
syncLibraryUUID
suspendable
clientIdentity
NSData *ML3DatabaseImportDataForDAAPFilePaths(NSArray *__strong)
DAAP file path must be a string.
ML3DatabaseInsertStatementOptionFailureOptionKey
ML3DatabaseInsertStatementOptionDatabaseNameKey
ML3DatabaseInsertStatementOptionTableNameKey
ML3DatabaseInsertStatementOptionColumnNamesKey
ML3DatabaseInsertStatementOptionValuesKey
ML3DatabaseStatementRenderer+Insertions.m
Must specify a table name to render insertion statement.
ABORT
IGNORE
REPLACE
ROLLBACK
FAIL
INSERT OR %@
INSERT
INTO %@.%@
INTO %@
DEFAULT VALUES
(%@)
Number of column names provided doesn't match the number of values provided.
VALUES (%@)
%@ %@ %@
DEFERRED
EXCLUSIVE
IMMEDIATE
BEGIN %@ TRANSACTION
BEGIN TRANSACTION
COMMIT TRANSACTION
ROLLBACK TRANSACTION TO SAVEPOINT %@
ROLLBACK TRANSACTION
ML3DatabaseStatementRenderer+Transactions.m
Must specify a savepoint name.
SAVEPOINT %@
RELEASE SAVEPOINT %@
ML3CompoundSortKey
ML3IsCurrentlyRestrictedMedia
ML3SearchStringMatch
ML3SeasonDisplayName
ML3TrackDigestCompute
ML3TrackIntegrityCompute
ML3TrackIntegrityVerify
ML3StandardizedMediaType
ML3SortString
ML3SortStringWithPrefix
<ML3HomeSharingTrackImportItem 
 homeSharingId=
NSString *ML3MemorySQLiteDatabasePathWithName(NSString *__strong)
ML3SqliteUtilities.m
file:%@?mode=memory&cache=shared
:memory:
mode=memory
Could not open original database. %s (%d)
Could not open database copy. %s (%d)
Could not perform copy: %s (%d)
PRAGMA wal_checkpoint(RESTART);
Warning: could not checkpoint copied SQLite file.
sourceType
allowAccountMerging
privacyContext
-init is unsupported. Use -initWithSQLiteHandle: instead.
bookmark_sync_timestamp
bookmark_sync_revision
/var/mobile/Media/iTunes_Control/Sync/Media/
modified_playlist_pids
update_playlist
delete_playlist
UPDATE item_stats SET play_count_recent=0,skip_count_recent=0 WHERE item_pid IN (SELECT item_pid FROM item_store WHERE sync_id!=0 AND store_saga_id=0)
MLSyncClientLastSyncedRevision
MLSyncClientSyncAnchor
v12@?0B8
Sync_
operations
update_track
delete_track
update_db_info
db_info
apple_ids
v32@?0@"NSString"8@"NSString"16^B24
default_num_results
min_num_results
version
INSERT OR REPLACE INTO genius_config (id, data, default_num_results, min_num_results, version) VALUES (0,?,?,?,?)
iTunes
Reset
q24@?0@8@16
v32@?0@8@16^B24
container_seed
<ML3SubscriptionImportItem 
 sagaId=
, storeId=
, subscriptionId=
<ML3SubscriptionContainerImportItem 
 global_id=
 cloud_id=
, name=
FindRowForRunningSum_UInt64
CFTimeRelativeToStartOfToday
CFTimeRelativeToEndOfToday
success
yMdHms
ML3VirtualTableRow::ML3VirtualTableRow(ML3DatabaseTable *__strong)
ML3VirtualTableRow.mm
No data columns in table schema.
v32@?0@"ML3DatabaseColumn"8Q16^B24
void ML3VirtualTableBindingVisitor::operator()(const int64_t &)
Cannot bind int64_t: NULL context
void ML3VirtualTableBindingVisitor::operator()(const float_t &)
Cannot bind float_t: NULL context
void ML3VirtualTableBindingVisitor::operator()(const bool &)
Cannot bind bool: NULL context
void ML3VirtualTableBindingVisitor::operator()(const std::string &)
Cannot bind std::string: NULL context
void ML3VirtualTableBindingVisitor::operator()(ML3CPPDataRef)
Cannot bind ML3CPPDataRef: NULL context
SELECT COUNT() FROM album
SELECT COUNT(DISTINCT(album_pid)) FROM item
SELECT COUNT() FROM album_artist
SELECT COUNT(DISTINCT(album_artist_pid)) FROM item
SELECT COUNT() FROM item_artist
SELECT COUNT(DISTINCT(item_artist_pid)) FROM item
SELECT COUNT() FROM sort_map WHERE name_order IN (SELECT title_order FROM item) OR name_order IN (SELECT item_artist_order FROM item) OR name_order IN (SELECT series_name_order FROM item) OR name_order IN (SELECT album_order FROM item) OR name_order IN (SELECT album_artist_order FROM item) OR name_order IN (SELECT genre_order FROM item) OR name_order IN (SELECT composer_order FROM item) OR name_order IN (SELECT name_order FROM container) OR name_order IN (SELECT search_title FROM item_search) OR name_order IN (SELECT search_album FROM item_search) OR name_order IN (SELECT search_artist FROM item_search) OR name_order in (SELECT search_composer FROM item_search) OR name_order IN (SELECT search_album_artist FROM item_search)
ML3AccountCacheErrorDomain
com.apple.medialibrary.ML3AccountCacheDatabase.operationQueue.accessQueue
ML3AccountCacheDatabase.m
appleID cannot be nil
REPLACE INTO account (dsid, apple_id, alt_dsid) VALUES (?, ?, ?)
v16@?0@"ML3DatabaseConnection"8
SELECT apple_id,alt_dsid FROM account where dsid=?
v32@?0@"ML3DatabaseRow"8@"NSError"16^B24
UPDATE account SET alt_dsid=? where dsid=?
com.apple.medialibrary.change-proxy-serial-queue
com.apple.medialibrary.change-proxy-callout-queue
com.apple.MusicLibrary.ML3DatabaseValidationClient
ML3DatabaseValidationClient.m
connection.databasePath != nil
com.apple.MusicLibrary.ValidationQueue.%s
-init is invalid. use -initWithDatabasePath: instead.
com.apple.MusicLibrary._ML3ValidationQueueIdentifierKey
person_pid
MLDSpotlightIndexOperationErrorDomain
revision
libraryID
targetRevision
The operation was cancelled before the indexed client state was evaluated.
The operation was cancelled while batching searchable item creation
v48@?0q8q16i24i28q32^B40
The operation was cancelled on searchable items creation
v16@?0@"NSError"8
v16@?0@"NSArray"8
An exeption was thrown by Spotlight when trying to end batch.
ML3UpdateSpotlightIndexOperation.m
_createSearchableItemsForPlaylistsWithQuery must return an array of CSSearchableItems.
Failed to create CSSearchable track items from the library.
cast.name
directors.name
producers.name
v40@?0q8r^@16Q24^B32
Failed to create CSSearchable playlist items from the library.
ML3UpdateSpotlightIndexOperation requires a bundleID attribute
Music
Videos
Unkown bundle index
ML3RemoveTracksOperation requires a track source attribute
UPDATE item_stats SET %@=%@
v36@?0@"NSString"8q16B24q28
UPDATE item_store SET 
=?, 
%@=? WHERE item_pid IN (%@)
v32@?0@"NSNumber"8Q16^B24
UPDATE album SET user_rating=IFNULL((SELECT AVG(user_rating) FROM item_stats JOIN item USING (item_pid) WHERE album.album_pid=item.album_pid), album.user_rating) WHERE album.user_rating_is_derived=1
DELETE FROM artwork_token WHERE artwork_source_type = ?
SELECT entity_pid, entity_type, artwork_type FROM best_artwork_token WHERE fetchable_artwork_source_type = ?
SELECT %@ FROM item WHERE item_pid=?
SELECT 1 FROM container_item JOIN container USING(container_pid) WHERE is_hidden = 0 AND item_pid = ?
DELETE FROM artwork_token WHERE artwork_source_type = ? AND entity_pid = ? AND entity_type = ?
SELECT artwork_type FROM best_artwork_token WHERE fetchable_artwork_source_type = ? AND entity_pid = ? AND entity_type = ?
ML3DatabaseConnectionPoolThreadStorageKey
com.apple.MusicLibrary.ML3DatabaseConectionPool.serialQueue
ML3DatabaseConnectionPool.m
Failed to initialize condition variable.
Failed to initialize mutex.
-init is unsupported. Use -initWithDatabasePath: instead.
ML3DatabaseConnectionPool=%p
maxReaders=%d
maxWriters=%d
journalingMode=%d
useDistantWriterConnections=%d
closed=%d
readersSubPool=
writerSubPool=
Attempted to return connection %@ not owned by connection pool %@. (Connections in this pool: %@)
Connection subpool stored a thread-contested connection %@
Attempted to store local connection for thread %@ when it's already being marked as stored in thread %@
<%@ %p use = %lld, thread = %@, conn = %p>
com.apple.MusicLibrary._ML3DatabaseConnectionSubPool.checkoutQueue
com.apple.MusicLibrary._ML3DatabaseConnectionSubPool.checkinQueue
com.apple.MusicLibrary._ML3DatabaseConnectionSubPool.serialQueue
v12@?0i8
HSCachesClearedNotification
-init is unsupported. use -initWithDatabasePath:maxConcurrentConnections:
deallocating pool %@ has %lld active connections
ML3DatabaseConnectionSubPool=%p
availableConnections=%@
busyConnections=%@
ML3LanguageResourcesSectionsInfoKey
ML3LanguageResourcesSortingDetailsKey
ML3LanguageResourcesCanonicalLanguageIdentifierKey
ML3LanguageResources.m
Encoder %@ does not support keyed coding
com.apple.MusicLibrary.ML3LanguageResourceManager
v24@?0@"ML3LanguageResources"8@"NSError"16
AppleLanguages
ML3DatabaseErrorDomain
ML3DatabaseExceptionErrorUserInfoKey
-[%@ init] is unsupported. Use -[%@ initWithDatabasePath:] instead.
<%@ %p, path=%@, open=%@, readonly=%@, in transaction=%@, owning pool=%@>
Tried to open a database without setting a path to a database file first.
enable SQLITE_FCNTL_PERSIST_WAL option failed
PRAGMA journal_mode=WAL
enable WAL journal mode failed
disable SQLITE_FCNTL_PERSIST_WAL option failed
PRAGMA journal_mode=DELETE
update journaling mode to DELETE failed
PRAGMA cache_size=500
set cache size error
Database Validation Bug
database open error
corrupted
openError
minimalCode
canCreateDatabase
openFlags
isReadOnly
sqliteResult
walResult
path
context
sqlErrorString
SELECT name FROM sqlite_master WHERE type='table' AND name='%@'
ML3DatabaseConnection.m
Cannot register module. SQLite handle not available, or connection is not open.
modules can only be registered one time
SELECT 1 FROM %@ WHERE ROWID=?
main
%s -- extended errcode: %d (%@), last errno = %d
Database connection lost or invalid.
PRAGMA wal_checkpoint;
Could not open database file at %@ (errno = %d)
Database at path %@ is corrupted. (Detected on connection %@) backtrace: %@
-journal
Database corruption has been detected.
Unrecoverable SQLITE_IOERR detected
busy
locked
Error preparing statement SQL. "%@" %@
An unknown error occurred while preparing a database statement.
Error stepping statement. %@ %@
ML3SQLiteBug
Error domain=%@ code=%@
EXPLAIN QUERY PLAN for: %@
EXPLAIN QUERY PLAN 
Executed in %.1f
Attempt to write a readonly database with statement %@
Could not create directory for database file at %@ (error = %@)
Could not create database file at %@, error = %@
true
MediaLibrary.sqlitedb
Failed to close connection for database. %s (errno = %d)
denied
sqlite_
alt_dsid
Distant connection could not open XPC connection to media library service daemon.
You cannot register functions on a distant database connection.
You cannot register modules on a distant database connection.
Incremental I/O using a distant database connection is unsupported.
ML3DatabaseDistantConnection.m
Attempted to begin distant transaction while one is already in process.
v24@?0@"NSUUID"8@"NSError"16
Attempted to end non-existent distant transaction.
The media library service failed to return a valid transaction ID.
No smart playlist criteria
%*c%@ %@ %@ %@
kbps
false
on this computer
on iCloud
MM/dd/yyyy HH:mm
(%@) to (%@)
(%@) and (%@)
%lld (%d stars)
%@ to %@
%@ and %@
%02lld:%02lld.%03lld
(unsupported: %d)
Invalid
Play Status
Album
Bit Rate
Sample Rate
Date Modified
Track Number
Size
Total Time
Date Added
EQ Preset
Obsolete Display Artist
Volume
Stream Status
User Play Count
Play Date
Disc Number
Track Rating
Price
Object ID
Persistent ID
Checked
Playlist Item ID
Compilation
Purchase Date
Release Date
Beat Per Minute
Parent Container ID
Artwork
Popuarity
Purchased
Artist ID
Playlist ID
Composer ID
Genre ID
Codec Type
Codec Sub-Type
Song Data Kind
Disc Count
Start Time
Stop Time
Track Count
Store Front ID
Keywords
Cloud Match State
Has Lyrics
Media Kind
Series Name
Season Number
Epsisode ID
Episode Sort ID
Network Name
Last Backup Date
Skips
Skip Date
Gapless Album
Album Artist
Shuffle ID
Track ID
Relative Volumne
Attributes
Private
Album Info
Sort Name
Sort Album
Sort Artist
Sort Album Artist
Sort Composer
Sort Series Name
Moive Info
Poscast URL
Long Description
Exernal GUID
Chapter Data
Video Rating
Album Rating
Rental Expiration Date
Obsolere Ringtone Status
Bookmark Time
Remember Bookmark
Has Been Played
Has Subtitles
Audio Language
Audio Track Index
Audio Track ID
Subtitle Language
Subtitle Track Index
Subtitle Track ID
Studio
Reserved 1
Reserved 2
Reserved 3
Reserved 4
Reserved 5
Gpaless Info
Genius ID
Exclude From Shuffle
Lyrics
Store Persistent ID
Jukebox Votes
Voice Over Language
iTunes U
Uncompressed Size
Game GUID
App Identifier
Obsolete Track Kind
Copyright
User Disabled
Album Artwork
Collection Description
Flavor
Cloud ID
Cloud Download
Chosen By Auto Fill
Cloud User ID
Location (Track Kinds)
iCloud Type
Liked State
is equal to
invalid
is not equal to
does not contain
contains
does not start with
starts with
does not end with
ends with
is not greater than
is greater than
is not greater than or equal
is greater than or equal
is not less than
is less than
is not less than or equal
is less than or equal
is not in range
is in range
is not between
is between
is not
unknown
purchased
uploaded
ineligible
local only
duplicate
music
podcast
audiobook
PDF booklet
music video
TV show
interactive booklet
coached audio
video pass
home video
future video 3
software package
forced music playlist
ringtone
rental
digital booklet
software application
software game
audio pass
voice memo
book
PDF book
alert tone
-[%@ initWithStatement:] is invalid for distant results. Use -[%@ initWithTransactionID:] instead.
-[%@ init] is unsupported. Use -[%@ initWithTransactionID:] instead.
%@, sql = "%@", parameters = %@
v24@?0@"NSData"8@"NSError"16
storeId
persistentId
ML3SubscriptionImportOperation.mm
Attempted to start subscription import operation without DAAP payload data.
com.apple.MusicLibrary.ML3StatementAccumulator
-init is invalid. Use -initWithDatabasePath: instead.
ML3StatementAccumulator.m
Attempted to flush database statements without a specified database path.
v20@?0B8@"NSError"12
Media
F%02lld
_ML3BaseMusicLibraryResourcesManager.m
Invalid resource
iTunes/iTunesSyncDeletes.plist
iTunes/PlayCounts.plist
iTunes/OnTheGoPlaylist.plist
iTunes/OnTheGoPlaylist_%llu.plist
iTunes/GeniusPlaylist.plist
iTunes/GeniusPlaylist_%llu.plist
iTunes/Playlist_%llu.plist
Originals
Caches
MLSections
SortingDetails
MusicLibrary
FailedArtworkConversion.plist
Backups
Logs
MediaServices
void _MSVHasherAppendBytes(MSVHasher * _Nonnull, const void * _Nonnull, size_t)
NSString * _Nonnull _MSVHashGetDigest(MSVHash)
0123456789abcdef
MSVHash _MSVHasherFinalize(MSVHasher * _Nonnull)
com.apple.medialibraryd.multi-users-resources-serial-queue
LibraryContainerPath
Failed Getting Path
Unable to retrieve media library folder
sortTitle
releaseDateTime
fileSize
duration
contentRating
explicitContent
shortDescription
longDescription
copyright
contentRatingLevel
fileKind
familyAccountId
drmVersionsCode
drmPlatformIdCode
drmKey1IdCode
drmKey2IdCode
chapterMetadataUrl
storeAssetFlavor
extrasUrl
purchaseDateTime
cloudStatus
playCountDelta
skipCountDelta
lastSkippedDateTime
rememberBookmark
bookmarkTimeMilliseconds
storePlaylistId
hasLocalAsset
grouping
needsReporting
likedStateChanged
isInUsersLibrary
cloudAssetAvailable
storeProtectionType
userDisabled
cloudPlaybackEndpointType
playbackEndpointType
cloudMatchedStatus
inUsersCloudLibrary
secondaryArtworkId
flattenedChapterData
isPreorder
likedStateChangeDate
storefrontId
purchaseHistoryToken
purchaseHistoryRedownloadParams
sagaRedownloadParams
storeXID
subscriptionStoreItemId
reportingStoreItemId
assetStoreItemId
movie
tvShow
TVShow
HomeVideo
MusicQuiz
<ML3StoreContainerImportItem 
 name="
", globalID="
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
ML3Artwork.m
Relative path cannot be nil.
v8@?0
SELECT artwork_source_type, artwork_type, interest_data FROM artwork WHERE artwork_token = ?
-initWithParentResult: is invalid for cached rows. Use -initWithArray: instead.
ML3DatabaseCachedRow.m
Attempted to read cached blob data from non-NSData type.
Fetching data using column name is unsupported for cached rows.
%{public}@ Failed to retrieve active itunes account type. err=%{public}@
accountPropertyForKey %{public}@ is nil. Proceeding without dsid
accountPropertyForKey %{public}@ is %{public}@. It should be an NSString or NSNumber instead of %{public}@
%{public}@ Failed to retrieve itunes account type. err=%{public}@
%{public}@ Failed to retrieve accounts for itunes account type. err=%{public}@
Bogus smart playlist info: %{public}@
Failed to save interest data to database for artwork_token %{public}@ with error: %{public}@
[ML3UpdateArtworkInterestDataOperation] Exception while updating artwork interest data: %{public}@
ignoring container with cloud id %lld
got unexpected container properties element. properties=%{public}@
parsed genius seed listing. id=%lld
got unknown container type %lld
Generating video snapshot at time offset %g
Timed out waiting for generateCGImagesAsynchronouslyForTimes: %g
Failed to deserialize track data with error: %{public}@
Importing %llu bytes of track data from: %{public}@
Importing %llu bytes of playlist data from: %{public}@
parsing finished. error=%{public}@
failed to start import session
skipping invalid track
skipping invalid container
starting import session with %lld tracks for update type %d
Invalid item ID length (%u) during import session
DAAP import success=%d. Cancelling parse operation.
[%{public}@] Error registering function: %{public}@
No entities for which to increment revision numbers.
Failed to insert batch of persistent ids in entity_revision, error = %{public}@
Failed to delete persistent ids in entity_revision, error = %{public}@
Invalid count query for entity class %{public}@, count property %{public}@
Warning: ignoring asynchronous flag
Ignoring write to read-only Home Sharing database. Properties: %{public}@
Daemon reported set values for properties was unsuccessful. %{public}@
Could not delete %{public}@ %{public}@
Failed to clean up item_stats where sync_id = 0 with error: %{public}@
Failed to clean up item_store where sync_id = 0 with error: %{public}@
Moving %{public}@ to %{public}@
failed to merge duplicate items for %lld
failed to delete duplicate item for %lld
Found an item (%lld) that has a location in the database, but no file size.
Computed %zu file size for item %lld.
WARNING: item with pid %lld has a location in the database but no file on disk.
Failed to update file size. %@
Failed to migrate artwork from '%{public}@' to '%{public}@' with error: %{public}@
Failed to migrate screenshot from '%{public}@' to '%{public}@' with error: %{public}@
Failed to migrate chapter artwork from '%{public}@' to '%{public}@' with error: %{public}@
Encountered invalid chapter artwork_cache_id '%{public}@', skipping...
Encountered missing chapter artwork_cache_id, skipping...
Failed to migrate artist hero artwork from '%{public}@' to '%{public}@' with error: %{public}@
Failed to delete old artwork directory during migration with error: %{public}@
Failed to update file size. %{public}@
Failed to update is_protected in item_store_new. %{public}@
Failed to create temporary new artwork directory with error: %{public}@
Failed to create temporary new artwork cache directory with error: %{public}@
Failed to create artwork directory '%{public}@' with error: %{public}@
Failed to move original artwork from '%{public}@' to '%{public}@' with error: %{public}@
Failed to create artwork cache directory '%{public}@' with error: %{public}@
Failed to move cached artwork from '%{public}@' to '%{public}@' with error: %{public}@
Failed to delete original artwork directory during migration with error: %{public}@
Failed to rename new temp artwork directory during migration with error: %{public}@
Failed to delete artwork cache directory during migration with error: %{public}@
Failed to update relative_path in artwork. %{public}@
Failed to create new temp original artwork directory during migration with error: %{public}@
Failed to create intermediate directories for new original artwork directory during migration with error: %{public}@
Failed to move to new original artwork directory during migration with error: %{public}@
Failed to move to new cache artwork directory during migration with error: %{public}@
Repairing %lu misgrouped albums: %{public}@
Error while splitting misgrouped track into new album. %{public}@
Failed to rename matched_store_item_id column.
Failed to add playlist_author_id column.
Failed to add radio_station_id column.
Failed to add advertisement_unique_id column.
Failed to add advertisement_type column.
Failed to update item_upp with error: %@
Failed to decode sbk property values. err=%{public}@
There was an error when migrating SBK table while inserting data from SBK %{public}@
There was an error when migrating SBK table while inserting data from SBK properties table, %{public}@
There was an error closing the SBK database file. Migration step will continue, but StoreBookkeeper database files might not be deleted.
Start back filling date_downloaded
Could not get creation date for item at %{public}@
Could not get attributes for item at %{public}@, error=%{public}@
Could not update date downloaded for item_pid %lld, error=%{public}@
Finished back filling date_downloaded for %ld items
%{public}s: Found original user version %d, which indicates a pre-release version of iOS 13.0 was previously installed. Clearing subscription status cache.
%{public}s: Found original user version %d, which pre-dates any work specific to iOS 13.0. Leaving subscription status cache intact.
Will remove duplicate plaback history playlists=%{public}@
Could not update entity_revision table for containerPID=%{public}@, error=%{public}@
Could not delete duplicate container_pids from container_item
Could not delete duplicate container_pids from container
Starting to patch up date_downloaded
Could not get creation date from file attributes for item at %{public}@
Finished patching up date_downloaded for %ld items
Could not remove last known locker account ID
Could not remove cloud library merge preference
Merging split is_compilation albums
Could not update entity_revision table for album_pid=%{public}@, error=%{public}@
Could not update item album_pid from %{public}@ to %{public}@ error=%{public}@
Could not delete album with pid=%{public}@, error=%{public}@
Could not update entity_revision table for item_pid=%{public}@, error=%{public}@
Patch up podcasts synced with incorrect composite media type
Could not patch up composite media_type for synced podcasts
Could not update container table to support personalized type
Could not update container table to support personalized sort key
Could not update item_stats table to support liked state change date
Failed to add is_preorder column to item_extra table
Failed to add hls_key_server_url column to item_video table
Failed to add hls_key_cert_url column to item_video table
Failed to add reporting_store_item_id column to item_store table
Failed to add asset_store_item_id column to item_store table
Failed to add time_synced_lyrics_available column to item_lyrics table
Failed to add hls_key_server_protocol column to item_video table
Failed to back-fill hls_key_server_protocol column
Failed to add classical_experience_available column to album table
Failed to add classical_experience_available column to album_artist table
Failed to add classical_experience_available column to item_artist table
Failed to add extended_playback_attribute column to item_store
%{public}@ - Creating connection pool with path: %{public}@
%{public}@ - Creating database path : %{public}@
Automatic Downloads are %{BOOL}u. enabledKinds=%{public}@
Could not get active account. Treating automatic Downloads as disabled
Could not resolve preferredAudioTracks, missing TCC
Could not resolve preferredSubtitleTracks, missing TCC
Deleted active Genius playlist with pid: %lld
Saved play counts to %{public}@: success=%d
Saving updated container data. container_pid=%lld, revision=%lld, deletionType=%d
no content changes for container %lld - skipping
container artwork has changed. new token=%{public}@
artwork file not found. container_pid=%lld, token=%{public}@, url=%{public}@
Could not serialize plist: %{public}@ (%{public}@)
%{public}s failed with error %{public}@ path = %{public}@
Requires schema upgrade because of a version mismatch
Requires schema upgrade because database is missing table %{public}@
Requires pre-processing because database does not yet exist
Requires pre-processing because database properties table does not exist
Requires pre-processing because of a language mismatch
Requires pre-processing because of integrity
Requires pre-processing because of invalid sort_map entries
Requires pre-processing because of missing database UID
Sending remove tracks request to %{public}@. Attributes: %{public}@, options: %{public}@
Sending remove playlists request to %{public}@. Attributes: %{public}@, options: %{public}@
Original artwork not found at '%{public}@'
Artwork already exists on disk for artwork token %{public}@, ensuring artwork table is consistent
Failed to write original artwork to temporary path with error: %{public}@
Failed to convert original artwork with error: %{public}@
Explicitly deleting artwork at relative path %{public}@
Failed to delete from artwork_token table (token = %{public}@) with error: %{public}@
Cannot migrate exisitng artwork, no artwork found in database with token %{public}@
Failed to delete from artwork_token table with error: %{public}@
Failed to delete from artwork table (token = %{public}@) with error: %{public}@
Failed to move artwork from '%{public}@' to '%{public}@' with error: %{public}@
not cleaning up artwork with options (%d) with database at %{public}@ as current version (%d) is not (%d)
not cleaning up artwork with options (%d) with database at %{public}@ as file does not exist at this location
De-orphaning called on old database, returning immediately
De-orphaning called with no database, removing everything
Skipping de-orphaning of Purchases directory due to locked ringtone.plist
Empty ringtone.plist found, OK to purge.
Couldn't stat ringtone.plist
Could not read old file: %{public}s, %{public}s
Ignoring new unaccounted file %{public}s
Track de-orphaning of '%{public}@']: removing %lu orphaned tracks at paths %{public}@
Removing %llu tracks due to family account removal (family account id = %lld)
persistent_ids = %{public}@
deleting presigned validity
Failed to insert into artwork table with error: %{public}@
Deleting artwork at: %{public}@
Failed to delete artwork at '%{public}@' with error: %{public}@
Failed to remove orphaned artwork tokens with error: %{public}@
Failed to remove orphaned best artwork tokens with error: %{public}@
Found orphaned artwork (type=%d, source=%d) in database with token: %{public}@ relative path: %{public}@
Found orphaned chapter artwork in database with token: %{public}@ relative path: %{public}@
Deleting %ld artwork assets from orphaned metadata.
Found orphaned artwork on disk with relative path: %{public}@
Found %lu artwork metadata without an asset on disk
Found %lu artwork asset without metadata in database
Failed to delete from artwork table with error: %{public}@
Deleting %ld orphaned artwork assets.
Updating best tokens for entity_pid = %lld entity_type = %d artwork_type = %d with invalid available token %{public}@
Succesfully emptied tables in media library database: %{public}@
Failed to empty tables: %{public}@ with error: %{public}@
%{public}@ - Received MLUserDatabasePathDidChangeNotification in medialibraryd which is unexpected
%{public}@ - performDatabasePathChange: - No action to take [returning early]
%{public}@ - performDatabasePathChange: - Process started
%{public}@ - emergencyDisconnectWithCompletion:
%{public}@ - emergencyDisconnectWithCompletion: - No action to take [returning early]
%{public}@ - terminateForFailureToPerformDatabasePathChange [unresponsive process]
%{public}@ - _prepareForAccountChange
%{public}@ - Error attempting to close connections: %{public}@
%{public}@ - _completeAccountChangeWithPath - New database path: %{public}@
%{public}@ - _closeAndLockCurrentDatabaseConnections
%{public}@ - connection pool locked and closed
%{public}@ - _setupNotificationManager
%{public}@ - _tearDownNotificationManager
Could not encode %{public}@: %{public}@
Could not write to %{public}@: %{public}@
Failed to update artwork_token with error: %{public}@
Failed to delete artwork_token with error: %{public}@
Failed to update best_artwork_token with error: %{public}@
Failed to delete best_artwork_token with error: %{public}@
Writing tombstone for track with persistent ID %lld: %{public}@
Skipping writing tombstone for track with persistent ID %lld (sync_id = %lld, base_location_id = %lld)
Deleting %ld assets due to %{public}@
Could not find sort order for %{public}@ of %{public}@
Deleting track that is not from the cloud with persistent-id: %lld
Unlinking %ld assets due to %{public}@
Failed to clear playback keys. %{public}@
[MLPurchaseHistoryImportOperation] Purchase history import operation cancelled=%d success=%d. total time = %.2fs
importing purchased tracks. import.preferredVideoQuality=%lld
failed to process import data
successfully processed import data
%{public}@ is requesting coordinated termination
Received notification to perform coordinated termination. Reasons signed: %{public}@
%{public}@ Error enumerating results. err=%{public}@
No counting query for entity class %{public}@ count property %{public}@
[ML3ProcessDownloadedAssetsOperation] Beginning process assets operation with source %d (%lu downloads)
[ML3ProcessDownloadedAssetsOperation] Processing asset download: %{public}@
[ML3ProcessDownloadedAssetsOperation] got unknown entity type. attrs=%{public}@
[ML3ProcessDownloadedAssetsOperation] Process assets operation success=%d in %.3f seconds
[ML3ProcessDownloadedAssetsOperation] extracted lyrics for track: %lld from %{public}@ with error %{public}@
[ML3ProcessDownloadedAssetsOperation] extracting new lyrics for track: %lld from the asset
[ML3ProcessDownloadedAssetsOperation] updated values=%{public}@ for track:%lld
[ML3ProcessDownloadedAssetsOperation] track: %lld has no updated lyrics or enclosing container pid
[ML3ProcessDownloadedAssetsOperation] No artwork token - skiping
[ML3ProcessDownloadedAssetsOperation] failed to parse genius data for track %lld - skiping
[ML3ProcessDownloadedAssetsOperation] No genius id in data for track %lld - skiping
[ML3ProcessDownloadedAssetsOperation] failed to find container with pid %lld - skipping
[ML3ProcessDownloadedAssetsOperation] Artwork already exists on disk, checking database consistency (artworkToken: %{public}@)
[ML3ProcessDownloadedAssetsOperation] Could not read file attributes for %{public}@: %{public}@
[ML3ProcessDownloadedAssetsOperation] Artwork file too big: %llu bytes. Discarding.
[ML3ProcessDownloadedAssetsOperation] Failed to insert new artwork for token: %{public}@
[ML3ProcessDownloadedAssetsOperation] Unhandled genius metadata format: %{public}@
[ML3ProcessDownloadedAssetsOperation] Unhandled genius similarities format: %{public}@
[ML3ProcessDownloadedAssetsOperation] failed to update genius metadata. err=%{public}@
[ML3ProcessDownloadedAssetsOperation] failed to update genius checksum. err=%{public}@
[ML3ProcessDownloadedAssetsOperation] failed to update genius similarities. err=%{public}@
Album -> AlbumArtist repair: Found %lu albums with invalid album artists %{public}@
Updated album %{public}@ with album artist %{public}@
Could not find valid album artist for album %{public}@
Failed to insert empty base location into table.
Failed to set ordering language with canonical identifier.
User version is 0, building tables for newly created DB
Migrating media library database from %d to %d
Migration error: %{public}@
Recreating un-migratable database...
Successfully deleted un-migratable database and re-created.
Still can't validate database after recreating.
Failed to insert a library UID into the database properties table. (Error = %{public}@)
Successfully validated database
Successfully validated database, but encountered a recoverable error: %{public}@
Failed to validate database with error: %{public}@
Failed to build tables with schema.
Failed to create indexes on database connection.
Failed to create triggers on database connection.
Failed to complete initial insertion statements.
Failed to set latest database version on connection.
Failed to prepare SQLite query optimizer.
Could not delete database
failed to delete existing sort_map_new table
failed to create sort_map_new
failed to populate sort_map_new
failed to re-order sort-map entries
Sort collations changed, need to recompute
failed to create item_new
failed to update tables with new name_orders
failed to swap sort_map tables
failed to update grouping_key fields
Unicode version has changed after sort map update. Coalescing mismatched collections...
Successfully coalesced mismatched collections.
failed to coalesce mismatched collections after rebuilding sort map
failed to update library unicode version
failed to update item_search entries
System unicode version does not match version stored in the library -- upgrading sort map
Could not not insert name_order = %lld (between %lld/%{public}@ and %lld/%{public}@) for %{public}@
Failed to coalesce potentially mismatched collection %{public}@
Failed to repair entities converging on PID %lld
Deleting duplicate %{public}@ %lld
Failed to delete duplicate collection with pid %lld
loaded %lu existing entries
db:fetch
initial sort map insert failed - commit what we have and force a rebuild
insert
nameOrderSpacing <= 0 between %lld and %lld
dropping sort_map indexes for %lu additions
sort map insertion failed for '%{public}@'
insert:nameOrder
Failed to merge into sort_map - attempting to repair and try again
Found duplicate sort_map_no_uniques entry with common name. name='%{public}@', name_order=%lld, name_section=%d, sort_key=%{public}@
Found matching entries in both sort_map_no_uniques and sort_map. NEW: name='%{public}@', name_order=%lld, name_section=%d, sort_key=%{public}@. EXISTING: name='%{public}@', name_order=%lld, name_section=%d, sort_key=%{public}@
Failed to merge into sort_map after removing invalid entries - failing commit
Successfully merged into sort_map after removing invalid entries - rebuilding to repair tables
Failed to rebuild the sort map after merge - failing commit!
failed to delete sort_map_no_uniques
move
recreating sort_map indexes for %lu additions
failed to rebuild sort_map indexes
[MLHomeSharingImportOperation] HomeSharing import operation cancelled=%d success=%d. total time = %.2fs
Found %lu potential orphan tracks to evaluate using query: %{public}@
Keeping the following tracks from subscribed containers...
[SC] %lld - %{public}@
Keeping the following tracks from playback history...
[PH] %lld - %{public}@
Removing assets for track: %lld - %{public}@
Keeping the following tracks from the love cache...
[LC] %lld - %{public}@
Keeping the following tracks that are in albums from the love cache...
[LC] %lld - %{public}@ (%{public}@)
Found %lu orphan tracks to delete.
Deleting track: %lld - %{public}@
No potential orphan tracks to evaluate at this time.
URL %{public}@ is in known list of paths that could not be converted to ASTC .. skipping.
Error %{public}@ converting artwork at %{public}@ to ASTC
Artwork at %{public}@ successfully converted to ASTC format
Error %{public}@ replacing artwork at %{public}@ with %{public}@ - temp file deleted %d
Error deferring artwork conversion activity as the conditions have changed.
All artwork are converted to ASTC
Error removing MLArtworkShouldConvertToASTC key.
Error removing failed assets plist at %{public}@.
Deleted %lu orphaned Albums
Deleted %lu orphaned AlbumArtists
Deleted %lu orphaned Artists
Deleted %lu orphaned Composers
Deleted %lu orphaned Genres
Failed to update collection representative items with error: %{public}@
Could not add column to table %{public}@. %{public}@
Could not find columns in table %{public}@
Unable to parse table schema from sqlite_master.
Failed to create temporary table for rename. %{public}@
Failed to migrate data to temporary table for column rename. %{public}@
Failed to drop old %{public}@ table. %{public}@
Failed to rename temporary table %{public}@ to permanent name %{public}@. %{public}@
Could not parse search criteria list for playlist with error %ld
Could not find sort order for %{public}@ of %{public}@ in %{public}@
unhandled match type: unfilterable type %{public}@
Failed to update name of built-in smart playlist %{public}@ (%{public}@)
Could not parse search criteria list for playlist %p (pid = %lld): %ld
Got an error getting search criterion info: %ld
unhandled match type: unknown type %d
Failed to delete from container_item with error: %{public}@
Failed to delete from artwork_token with error: %{public}@
Failed to delete from best_artwork_token with error: %{public}@
Could not set keep_local to %d for track %lld - error: %{public}@
No tracks in container %p (pid = %lld)
From index (%lu) out of bounds (%ld) of %p (pid = %lld)
To index (%lu) out of bounds (%ld) of %p (pid = %lld)
Failed to update positions in container_item with error: %{public}@
updating My Loved Playlist by adding track=%lld to containerId=%lld - existingItemPositions=%{public}@
Failed to update position of existing items in container. Error=%{public}@
Failed to insert track=%lld at index 0 for container=%lld, error=%{public}@
reloadContainedMediaTypes=%{BOOL}u.
Adding track to My Loved playlist finished with status=%{BOOL}u in %f seconds
updating My Loved Playlist by removing track=%lld to containerId=%lld - existingItemPositions=%{public}@
Found %d existing positions for track=%lld
Removing track with persistentID=%lld at position=%lu, adjustIndex=%lu, adjustedPosition=%lu
Failed to remove track=%lld from container=%lld, error=%{public}@
Failed to update position of current items after position=%d. Error=%{public}@
Removing track to My Loved playlist finished with status=%{BOOL}u in %f seconds
Failed to delete existing container_item row(s) with error: %{public}@
Failed to update container_item position(s) with error: %{public}@
Failed to delete from container_item_persons with error: %{public}@
Failed to delete all existing container_item rows with error: %{public}@
Deleting container_item rows with persistent-ids: %{public}@
Failed to delete container_item_person rows with error: %{public}@
Failed to delete container_item rows with error: %{public}@
Mapped item at position %lld to existing container_item with pid %lld (update position: %lld -> %lld)
Creating new container_item for item at position %lld
Failed to insert container_item with error: %{public}@
Failed to clear keep_local for track %lld - error: %{public}@
Unsupported order type: %u
Unexpected order type: %u
failed to start store import transaction. error=%{public}@
[ML3ProtoSyncImportOperation] import operation cancelled=%d success=%d. total time = %.2fs
[ML3ProtoSyncImportOperation] cancelling import operation %{public}@ _isReadSourceCancelled %d
setting sync library id to %{public}@
%{public}@ starting import with fileHandle %{public}@, fd=%d
%{public}@ Not suspending read source _importFinished %d, _isReadSourceCancelled %d
%{public}@ resuming read source bytesRead %ld parsingLen %d
timed out waiting for import data
failed to read object length from import data stream
failed to read varint length
%{public}@ resuming read source bytesRead %ld pasrsingLen %d
failed to read object from import data stream
failed to parse sync package data
%{public}@ resuming read source
%{public}@ cancelling read source
failed to commit the import session changes
resetting play and skip counts
failed to clear recent counts. err=%{public}@
preparing for a reset sync
Removing %ld playlists for a reset sync
received sync error package. err=%d, desc=%{public}@
unknown object type %d
failed to begin import session
failed to apply stats updates. err=%{public}@
failed to update bookmark time. err=%{public}@
failed to update date_played. err=%{public}@
ignoring failed update for deleted track
failed to process media sync operation
failed to process playlist sync operation
Track with persistent_id:%lld, protection type: %d is local on device with no backing cloud asset
Found %lu unavailable tracks to unlink
Deleting assets with protection type = %d that are no longer cloud available: %{public}@
Failed to clear location for unavailable tracks with asset protection type = %d
_ML3MultiUserAccountChangeOperation %p - Starting operation
_ML3MultiUserAccountChangeOperation %p - Finished operation
MLMediaLibraryResourcesServiceClient %p - sharedService:
%{public}@ - Initializing the shared service:
MLMediaLibraryResourcesServiceClient %p - libraryContainerPathWithError:
MLMediaLibraryResourcesServiceClient %p - BLOCKING - Retrieving libraryContainerPath on serial queue: %@
MLMediaLibraryResourcesServiceClient %p - UNBLOCKED - Retrieved mediaFolderPath on serial queue: %@ - %@
MLMediaLibraryResourcesServiceClient %p - _initWithXPCListenerEndpoint:
MLMediaLibraryResourcesServiceClient %p - Unable to retrieve path [XPC connection interrupted] - Recreating the connection - Attempt %ld of %ld
MLMediaLibraryResourcesServiceClient %p - Unable to retrieve path - error=%{public}@
MLMediaLibraryResourcesServiceClient %p - performDatabasePathChange: - newPath=%{public}@
MLMediaLibraryResourcesServiceClient %p - Database path change completed [posting path change notification]
MLMediaLibraryResourcesServiceClient %p - terminateForFailureToPrepareForAccountChange:
MLMediaLibraryResourcesServiceClient %p - Creating XPC Client Connection [started]
MLMediaLibraryResourcesServiceClient %p - Creating XPC Client Connection [failed] - error=%{public}@
MLMediaLibraryResourcesServiceClient %p - Creating XPC Client Connection [ended] - connection=%{public}@
MLMediaLibraryResourcesServiceClient %p - Unable to create XPC Connection [no listener endpoint]
MLMediaLibraryResourcesServiceClient - XPC Connection interrupted [Unable to process ]
MLMediaLibraryResourcesServiceClient %p - XPC Connection interrupted [Processing] - accountChangeObserver=%p
MLMediaLibraryResourcesServiceClient %p - Connection to media library resources service invalidated
MLMediaLibraryResourcesServiceClient %p - Resetting XPC connection to nil
Database already validated. Returning immediately.
Truncation failed with error=%{public}@
Starting validation at path=%{public}@
Exception performing validation. Error=%{public}@
Device is running an internal install. Asking user for permission to rebuild.
User agrees to rebuild. Deleting database and re-attempting validation.
User did not want to rebuild database. Preparing for nuclear meltdown.
*** Truncating database files at path: %{public}@ ***
Closing all local database connections...
Notifying other clients about database deletion...
Performing truncation...
Failed to truncate database files.
Truncation successful
validateLibraryDatabaseIfNecessary requiresNonSchemaUpdates=%{BOOL}u, requiresSchemaOnlyUpdates=%{BOOL}u
Database requires preprocessing before schema updates for library at path %{public}@
Database requires schema upgrades for library at path %{public}@
Upgrading schema for library at path %{public}@
Preprocessing database for library at path %{public}@
[Preprocessing] Failed to update sort map.
[Preprocessing] Failed to create indexes.
[Preprocessing] Failed to update system playlist names for current language.
finished loading fileSystemAttributes=%{public}@ with error=%{public}@ for path=%{public}@
Directory does not exist at path %{public}@
database at %{public}@ is not a subdirectory of %{public}@
item has both is_podcast and is_song modifiers. Ignoring is_song and treating item as a podcast
item has both is_podcast and is_movie modifiers. Treating media_type as MLMediaTypeVideoPodcast | MLMediaTypePodcast
Disabling smart evaluation for unsupported smart playlist type (%{public}@)
Cancelling all import operations.
Cancelling any active or suspended import operations in progress for process %{public}@ (process ID = %d)
Suspending import operation %{public}@
Import operation %{public}@ is not suspendable - skipping
Waiting for suspended import operations to finish...
Suspended import operations finished.
Resuming %lu suspended import operation(s)
Resuming import operation %{public}@
Successfully executed import operation %{public}@
Import operation failed: %{public}@
Operation %{public}@ cancelled.
Operation %{public}@ suspended--adding to suspension queue.
%{public}s unexpected error
Failed to update name of container %lld (%{public}@)
Conflict merging items from dictionary for key %{public}@: %{public}@ => %{public}@
Error loading artwork configuration at %{public}@ : %{public}@
%s parse error: error parsing '%{public}@'
[Migration] HomeSharing library at %{public}@ has old schema
[Migration] Migration step failed with error: %{public}@
[Migration] Failed to execute directives after migration.
[Migration] Post-migration sanity check failed unrecoverably.
[Migration] Test hook is set to fail migration.
[Migration] Failed to commit transaction.
Failed to commit transaction during migration
[Migration] Database migration to user version %d took %.2fs
[Migration] Sanity check failure: Database is missing table %{public}@
[Migration] Sanity check failure: Database is missing sort_map, rebuilding
[Migration] Sanity check recoverable condition: %lli items in item and %lli items in item_extra
[Migration] Sanity check: Incrementing revision for removed tracks: %{public}@
[Migration] Sanity check: Deleted garbage tracks %{public}@
[Migration] Sanity check recoverable condition: Sort map was missing the following names %{public}@
[Migration] Sort map nextOrder %lli, nameOrder %lli
[Migration] Sort map nextSection %lli, nameSection %lli
[Migration] Sanity check recoverable condition: Sort map is inconsistent
[Migration] Sanity check recoverable condition: %lli rows in item and %lli rows in lyrics
[Migration] Sanity check: flagging cloud library for full refresh after next update
[Migration] Sanity check: flagging purchase history for next update to include all tokens
[Migration] Sanity check: resetting sync anchors
[Migration] Sanity check: removing orphaned assets
[Migration] Migration sanity check complete
[Migration] Failed to remove locations missing assets.
[Migration] Failed to update sort map.
[Migration] Failed to canonicalize collection representative items for class: %{public}@
[Migration] Failed to create indexes.
[Migration] Failed to create triggers.
[Migration] Failed to execute SQLite ANALYZE.
[Migration] Autogeneration of supported sizes completed (error=%{public}@)
ERROR: unable to find column name in definition %{public}@
ERROR: Adding column not found in schema %{public}@
<MLERROR>: Locations for items are set and don't exist, or are missing critical information: %{public}@
NOTE: Fake echo data being used, ignoring genius database
NOTE: Could not create playlist, seedTrackGlobalID == 0.
NOTE: Could not create playlist, too few results (min=%ld, found=%ld)
NOTE: Could not create cluster playlist
Note: Could not locate track with globalID = %llu
ERROR: Could not generate playlist tracks, no active cluster playlist.
%{public}@ Starting import session
%{public}@ Finished starting import session. err=%{public}@
%{public}@ Finishing import session
%{public}@ Ended import session. err=%{public}@
%{public}@ Canceling import session
%{public}@ Canceled import session. err=%{public}@
%{public}@ Finished adding items. err=%{public}@
%{public}@ Finished updating items. err=%{public}@
%{public}@ Failed to connect to the remote service. err=%{public}@
%{public}@ Finished removing items. err=%{public}@
%{public}@ Failed to obtain service listener endpoint. err=%{public}@
%{public}@ Connection to client import service interrupted
%{public}@ Connection to client import service invalidated
Attempting to import store item artwork with invalid artwork token for item pid %lld
Could not create chapter data: %ld
Could not create flattened item chapters: %ld
Unknown time format in chapter data: %{public}@, returning nil
%{public}@ not found in locales, using %{public}@ instead
populateLocationPropertiesWithPath called with invalid path '%{public}@'
failed to obtain file attributes for %{public}@. err=%{public}@
updating container for item_pid=%lld finished with error=%{public}@
updating chapter data from asset file
Deleting orphan asset at path: %{public}@
Skipping purgeable calculation for tracks because DB is not present or invalid (db version=%d, current version=%d)
caught exception gathering purgeable storage amount: %{public}@
force-deleting cached assets to free space
Purgeable size of %lld bytes for urgency %d, includeAutoFilledTracks=%d
Purging media data of at least %lli bytes for urgency %d. includeAutoFilledTracks=%d
Skipping purge for tracks because DB is not present or invalid (db version=%d, current version=%d)
caught exception trying to purge storage: %{public}@
Purged %lld bytes of media data
Clearing removed tracks.
Failed to remove cached asset %{public}@ error %{public}@
Purgeable database free space: %lld bytes
Purgeable artwork size: %lld bytes
clearing purgeable artwork with urgency %d
Removed %lld bytes of artwork
Purgeable cached tracks size: %lld bytes
Purgeable managed tracks size: %lld bytes
Purged streaming assets %{public}@
Failed to purge streaming assets %{public}@
Purging album %lld (%lli bytes): %{public}@
Failed to purge redownloadable assets for album %lld
Successfully purged redownloadable assets for album %lld
Failed to marked purged tracks as keep local
Marked %{public}@ persistentIDs as keep local for later recovery
Purgeable tracks size: %lld bytes
Compacting the database file
Removed %lld bytes compacting the db
Purging all cloud assets
Removed %lld bytes clearing cloud assets
Clearing orphaned assets with urgency %d
Removed %lld bytes of orphaned tracks
Removed %lld bytes of orphaned artwork
Removed %lld bytes of orphaned assets
Purging %{public}@ - %{public}@ (%lli bytes)
Failed to purge redownloadable assets
failed to marked purged tracks as keep-local. err=%{public}@
Removed %lli bytes of track data
[Schema] Checking if the current database version is up-to-date...
[Schema] Database version is %d, not %d
[Schema] Device language changed from %{public}@ to %{public}@
[ML3SetValuesForPropertiesOperation] Exception while setting values: %{public}@
[ML3SetValuesForPropertiesOperation] Failed to set values for persistent ID %lld
failed to map container parent_pid %lld
[ML3SetCloudIDImportOperation] failed to start store import transaction. error=%{public}@
[ML3SetCloudIDImportOperation] [ML3SetCloudIDImportOperation] import operation cancelled=%d success=%d. total time = %.2fs
Importing %llu bytes of track data from: %@
Importing %llu bytes of playlist data from: %@
[ML3SetCloudIDImportOperation] No track data or playlist data to import, finishing import operation...
[ML3SetCloudIDImportOperation] Failed to deserialize track plist with error: %{public}@
[ML3SetCloudIDImportOperation] Failed to begin import session
[ML3SetCloudIDImportOperation] Importing track data
[ML3SetCloudIDImportOperation] Failed to import track data.
[ML3SetCloudIDImportOperation] Failed to deserialize playlist plist with error: %{public}@
[ML3SetCloudIDImportOperation] Importing playlist data
[ML3SetCloudIDImportOperation] Failed to import playlist data.
[ML3SetCloudIDImportOperation] Failed to commit the import session changes
[ML3SetCloudIDImportOperation] No tracks in cloud-id mapping payload, skipping track import.
[ML3SetCloudIDImportOperation] Failed to import track data
[ML3SetCloudIDImportOperation] Set-cloud-id import operation cancelled
[ML3SetCloudIDImportOperation] Skipping invalid track: %s
[ML3SetCloudIDImportOperation] Failed to import tracks
[ML3SetCloudIDImportOperation] No playlists in cloud-id mapping payload, skipping playlist import.
[ML3SetCloudIDImportOperation] Failed to import playlist data
[ML3SetCloudIDImportOperation] Skipping invalid playlist: %s
[ML3SetCloudIDImportOperation] Failed to import playlists
Failed to create new album for misgrouped track. %{public}@
Failed to update entity revision with newly created album. %{public}@
Failed to update representative item for newly created album. %{public}@
Failed to update item's album column with newly created album. %{public}@
[ML3RemovePlaylistsOperation] Beginning remove playlists operation with source %d (%lu specified playlists)
[ML3RemovePlaylistsOperation] Remove playlists operation success=%d in %.3f seconds
[ML3RemovePlaylistsOperation] Removing all containers from library at path %{public}@
[ML3RemovePlaylistsOperation] failed to remove all containers. err=%{public}@
[ML3RemovePlaylistsOperation] Removing source property %{public}@ from all containers in library at path %{public}@
[ML3RemovePlaylistsOperation] failed to remove source %{public}@ from containers. err=%{public}@
[ML3RemovePlaylistsOperation] failed to remove containers. err=%{public}@
[ML3RemovePlaylistsOperation] Removing source property %{public}@ from container pids %{public}@
[ML3RemovePlaylistsOperation] removing %lu containers that no longer have a remote source. container_pids=%{public}@
[ML3RemovePlaylistsOperation] failed to remove sourceless containers. err=%{public}@
Failed to decode playlist data. err=%{public}@
No helper method can be found for SQLite error code %ld.
Failed to create cloud asset shared cache folder %{public}@ error %{public}@
Clearing cached items created before %@ in the shared cache folder
Failed to retrieve attributes of shared cache file %{public}@ error %{public}@
Failed to remove shared cache temporary file %{public}@ error %{public}@
Returning NULL path from MLMobileUserHomeDirectory for %{public}@
Warning: Empty import operation started.
%{public}@ in %.2f seconds for query with criteria: %{public}@
[ML3StoreItemTrackData] not including item with store identifier:%lld
[ML3StoreItemTrackData] Failed to decode track data. err=%{public}@
[ML3StoreItemTrackData] Error fetching album parent store content for item add. %{public}@
[ML3StoreItemTrackData] unsupported audio trait %{public}@
[ML3StoreItemTrackData] unsupported item kind %{public}@
[ML3StoreImportOperation] failed to start store import transaction. error=%{public}@
[ML3StoreImportOperation] [ML3StoreImportOperation] import operation cancelled=%d success=%d. total time = %.2fs
[ML3StoreImportOperation] failed to begin import session
[ML3StoreImportOperation] importing track data
[ML3StoreImportOperation] failed to import track data.
[ML3StoreImportOperation] importing playlist data
[ML3StoreImportOperation] failed to import playlist data.
[ML3StoreImportOperation] failed to commit the import session changes
[ML3StoreImportOperation] no tracks in store payload. skipping track import.
[ML3StoreImportOperation] found %lu tracks to import
[ML3StoreImportOperation] store import operation cancelled
[ML3StoreImportOperation] failed to import track data
[ML3StoreImportOperation] Skipping invalid track
[ML3StoreImportOperation] failed to import tracks
[ML3StoreImportOperation] no playlists in store payload. skipping playlist import.
[ML3StoreImportOperation] found %lu playlists to import
[ML3StoreImportOperation] failed to add container to import session.
[ML3StoreImportOperation] importing artwork for container %lld using token %@
[ML3StoreImportOperation] no playlist artwork provided in playlist data.
Failed to begin transaction for client %{public}@. %{public}@
Successfully began transaction for client %{public}@ with identifier %{public}@.
Failed to execute update %{public}@. %{public}@
Successfully executed update %{public}@.
%{public}@
Error executing query: %{public}@. %{public}@
Successfully executed query "%{public}@" with %lu rows returned.
Rolling back transaction=%p
Committing transaction=%p
Warning: Tried to end non-existent transaction for local connection.
Error executing database operation for %{public}@: %{public}@
Successfully executed database operation %{public}@ for process %{public}@
Enqueueing %{public}@'s database operation to the service's serial queue: %{public}@. current operation count = %d
Enqueueing %{public}@'s database operation to the service's concurrent queue: %{public}@
Cleaning up any remaining transactions for ended process %{public}@ (process ID = %d)
Cancelling all active transactions.
Cancelling all active database operations.
Cancelling database operations for ended process %{public}@ (process ID = %d). waitUntilFinished=%{BOOL}u
Cancelling operation %{public}@
Zombie process with ID %d tried to start a transaction. It already got a connection, but it's being returned.
Zombie process with ID %d tried to start a transaction.
Warning: Attempted to destroy non-existent transaction. Possible deadlock.
** WARNING ** Writer daemon transaction was watchdogged for %{public}@. Forcing return of connection. %{public}@
%{public}@ - performDatabasePathChange: - newPath =%{public}@
%{public}@ - performDatabasePathChange: - Unable to retrieve remote object proxy - error=%{public}@
%{public}@ - performDatabasePathChange: [done]
%{public}@ - terminateForFailureToPerformDatabasePathChange
%{public}@ - terminateForFailureToPerformDatabasePathChange - Unable to retrieve remote object proxy - error=%{public}@
%{public}@ - setupTaskAssertion: %{public}@
%{public}@ - tearDownTaskAssertion
%{public}@ - setupTimeoutTimerWithcompletion:
_MLChangeObserver - Terminating hanging client %{public}@[%d] [aborted: dead connection]
_MLChangeObserver %p - Terminating hanging client %{public}@[%d]
%{public}@ - tearDownTimeoutTimer
%{public}@ - performDatabasePathChange: - queued - newPath=%{public}@
%{public}@ - performDatabasePathChange: - started
%{public}@ - performDatabasePathChange: - Calling completion block
%{public}@ - Connection interrupted for %{public}@[%d]
%{public}@ - Removing observer for %{public}@[%d]
%{public}@ - Connection invalidated for %{public}@[%d]
%{public}@ - Connecting to %{public}@[%d]
Calculated new run starting for table '%{public}@' at %lli until %lli
Creating a multi-users daemon library resource manager
Creating a multi-users client resource manager
Creating a single library resource manager for the default media folder
Creating a single library resource manager for account info: %{public}@
Creating a single library resource manager with library container: %{public}@
[MLMatchImportOperation] Match import operation cancelled=%d success=%d. total time = %.2fs
failed to process match import data
Media library service %{public}@ closed.
Media library service %{public}@ invalidated.
%{public}@ There was an error waiting for a reply from the media library service. %{public}@
%{public}@ - BLOCKING - Retrieving libraryContainerPath on serial queue: %{public}@
%{public}@ - UNBLOCKED - Retrieved libraryContainerPath on serial queue: %{public}@ - %{public}@
%{public}@ - Received account change notification
%{public}@ - User was logged-out and is still logged-out: nothing to to
%{public}@ - User was logged-in and is still logged-in with the same dsid: nothing to to
%{public}@ - current dsid: %{public}@ - new dsid: %{public}@ - Enqueueing change operation
%{public}@ - Current operations on queue: %{public}@
%{public}@ - Posting notification %{public}@
%{public}@ - accountChangeOperationWillStartPerformingDatabasePathChange - final DSID: %{public}@
ML3UpdateSiriIndexOperation %p - skipping index [missing KVDonator class] databasePath=%{public}@
ML3UpdateSiriIndexOperation %p - starting index validity=%{public}@ databasePath=%{public}@
ML3UpdateSiriIndexOperation %p - indexing userID=%{public}@
ML3UpdateSiriIndexOperation %p - failed to index [failed to get donator] error=%{public}@
ML3UpdateSiriIndexOperation %p - failed to index [invalid dataset stream] type=%{public}@
ML3UpdateSiriIndexOperation %p - calling stream finish
ML3UpdateSiriIndexOperation %p - finished index error: %{public}@
ML3UpdateSiriIndexOperation %p - finished index
ML3UpdateSiriIndexOperation %p - calling stream cancel
ML3UpdateSiriIndexOperation %p - failed to index [call to donate failed] error=%{public}@
ML3UpdateSiriIndexOperation %p - operation complete [success = %{BOOL}u]
ML3UpdateSiriIndexOperation %p - skipping full index [same revision] revision=%lld
ML3UpdateSiriIndexOperation %p - performing full index toRevision=%lld
ML3UpdateSiriIndexOperation %p - addingItem [full] itemID=%{public}@ error: %{public}@
ML3UpdateSiriIndexOperation %p - addingItem [full] itemID=%{public}@
ML3UpdateSiriIndexOperation %p - performing incremental index fromRevision=%llu toRevision=%lld
ML3UpdateSiriIndexOperation %p - addingItem [incremental] itemID=%{public}@ error: %{public}@
ML3UpdateSiriIndexOperation %p - addingItem [incremental] itemID=%{public}@
ML3UpdateSiriIndexOperation %p - deletingItemID [incremental] itemID=%{public}@ error: %{public}@
ML3UpdateSiriIndexOperation %p - deletingItemID [incremental] itemID=%{public}@
Could not delete %{public}s: %{public}@
Could not delete %{public}s: %{public}s
Removed file: %{public}s
[ML3DatabaseRecoveryOperation] Starting recovery operation...
[ML3DatabaseRecoveryOperation] Internal device. Backing up database file for analysis...
[ML3DatabaseRecoveryOperation] Error backing up database file: %{public}@
[ML3DatabaseRecoveryOperation] Successfully backed up database file to %{public}@
[ML3DatabaseRecoveryOperation] Recovery operation complete. err=%{public}@
Asking service to recreate database...
[ML3DatabaseRecoveryOperation] Successfully recreated database at path %{public}@
[ML3DatabaseRecoveryOperation] Failed to recreate database. %{public}@
Failed to register virtual table on connection. Could not register module %{public}@.
Failed to create virtual table on connection %p. %{public}@
Could not unregister virtual table. %{public}@
Failed to end transaction for operation %{public}@. %{public}@
Error creating new transaction for operation %{public}@. %{public}@
Successfully repaired permissions for file %{public}s.
Can't repair database permissions because we are not running as root.
saved %lu id mappings for existing tracks with %{public}@ != 0
saved %lu id mappings for existing containers with %{public}@ != 0
matched to cached item pid %lld in source map %d for import source %d
matched to cached item pid %lld in source map %d
skipping existing item pid %lld with source id %lld that does not match import item source id %lld
matched to item pid %lld using query %{public}@
created new item pid %lld
matched to cached container pid %lld
matched to container pid %lld using query %{public}@
created new container pid %lld
created new person pid %lld
matched to cached person pid %lld
matched to person pid %lld using query %{public}@
starting import session %p. source=%d, itemCount=%d, isReset=%d
disabling triggers for _approximateItemCount=%d
resetting collection data
preparing for a reset
failed to remove source for tracks - aborting
failed to remove source for containers - aborting
sort_map contains at least one NULL name_order, updating now...
no identity property for track import item
no identity property for container import item
adding track %{public}s
pid collision detected - flushing
failed to prepare track data
update track %{public}s
updateTrack called for unknown track
updateTrack ignoring non-existing track with pid %lld
removing track %{public}s
failed to locate track to delete. oh well
removing track %lld
adding container %{public}s
updating container %{public}s
updateContainer called for unknown container
updateContainer ignoring non-existing container with pid %lld
removing container %{public}s
failed to find playlist to delete - ignoring
removing container %lld
failed to delete playlist
adding person %{public}s
flushing %u album insertions
failed to import added albums
flushing %u album artist insertions
failed to import added album artists
flushing %u artist insertions
failed to import added artists
flushing %u composer insertions
failed to import added composers
flushing %u genre insertions
failed to import added genres
flushing %u track insertions
flushing %u track updates
failed to import added tracks
flushing %lu track deletes
failed to process deletes
flushing %u playlist insertions
failed to import added playlists
flushing %u playlist updates
failed to import updated playlists
flushing %u person insertions
failed to flush added persons
flushing %u person updates
failed to flush updated persons
flushing %u booklet updates
failed to flush booklets
flushing %u booklet deletes
failed to remove deleted booklets
failed to re-enable triggers
ImportSession: error removing tracks from library. %{public}@
Prepared %lu tracks for automatic download.
Database import failed.
Database container import failed.
failed to finalize container items for automatic download.
Database container item import failed.
Failed to import container item person entries
Failed to delete container_item_person items. err=%{public}@
Will clear keep local for %d playlist items
Failed to update keep_local for container_items. err=%{public}@
Database person import failed.
Database booklet import failed.
Failed to delete booklet items. err=%{public}@
failed to prepare track sort data
failed to prepare item artwork
failed to prepare item screenshot
failed to prepare item secondary source artwork
Failed to update tracks for automatic download: %@
Failed to update containers for automatic download: %{public}@
Error executing import virtual table insert statement. %{public}@
Could not register virtual table %{public}@ on connection %p.
Data source %{public}@ took %.2fs to import
finishing import
removing %lu tracks not re-added by the reset import
failed to remove remaining tracks
removing %lu containers not re-added by the reset import
failed to delete container %lld
re-building indexes after large import
failed to re-create indexes
failed to perform ANALYZE
failed to apply finishing collection changes
failed to commit sort map changes
inserting %lu tracks into purchase playlist
failed to update purchased playlist
re-trying %lu orphaned playlists
failed to find parent of orphaned container. container_pid=%lld, parentSourceId=%lld
updating contains_classical_work for album %lld
updating all_compilations for album %lld
Checking for Duplicate Videos...
Duplicate Videos Detected after source %d import!
No Duplicate Videos found after source %d import.
finished import session %p in %.2f seconds
    tracks: %d adds %d updates %d deletes
    containers: %d adds %d updates %d deletes
    persons: %d adds %d updates %d deletes
gathered collection pids: artistPID=%lld, albumArtistPID=%lld, composerPID=%lld, genrePID=%lld, albumPID=%lld
Insert/replace artwork_token: pid=%lld entity_type=%d source=%d type=%d token=%{public}@
Delete artwork_token: pid=%lld entity_type=%d source=%d type=%d
failed to update artwork_token entry for track. track_pid=%lld
insert/replace booklet: pid=%lld (%{public}s) item_pid=%lld, name=%{public}s, store_item_id=%lld
delete booklet: pid=%lld, item_pid=%lld
failed to update representative item pids
failed to canonicalize collection representative item pids
failed to de-orphan collections
failed to update entity revisions
No existing artist PID for update item %lli
creating new artist entry: pid=%lld, name='%{public}s', sortName='%{public}s', series='%{public}s', sortSeries='%{public}s'
No existing albumArtist PID for update item %lli
creating new album_artist entry: pid=%lld, name='%{public}s', sortName='%{public}s', ulid='%{public}s'
No existing album PID for update item %lli
contains_classical_work differs for album %lld
is_compilation differs for album %lld
creating new album entry: pid=%lld, name='%{public}s', sortName='%{public}s', artistId=%lld
creating new composer entry: pid=%lld, name='%{public}s', sortName='%{public}s'
creating new genre entry: pid=%lld, name='%{public}s'
failed to process sort strings
failed to prepare container artwork
failed to prepare container secondary source artwork
couldnt find parent container with source id %lld - deferring mapping until the end
dropping trigger: %{public}@
failed to drop trigger
enabling triggers
failed to re-create triggers
preparing container_items for container %{public}s
failed to map itemSourceID=%lld for container %{public}s
deleting container_item with persistent-id: %lld
mapped item at position %lld to existing container_item with pid %lld (update position: %lld -> %lld)
creating new container_item for item at position %lld
mapped %d/%d items for container %s
no container items for container %s
Failed to look up person_pid for identifier %s
(enumerateRowsWithBlock:) SQLite was %s after %u retries. %{public}@
Attempting corruption recovery using disk IO recovery routine
[%{public}@] Error while enumerating rows for statement %{public}@. %{public}@
Failed to encode DAAP file paths with error: %{public}@
[%{public}@] %{public}@
Could not truncate database at path: %{public}@. %{public}s (%d)
** COULD NOT DELETE DATABASE! **
MusicLibrary couldn't create a SQLite handle to truncate.
Could not copy database file at path %{public}@. %{public}@
failed to map container_seed item_pid %lld
[ML3ITunesSyncImportOperation] failed to start transaction. error=%{public}@
[ML3ITunesSyncImportOperation] import operation cancelled=%d success=%d. total time = %.2fs
failed to deserialize track data. err=%{public}@
failed to process track data
committing import session changes
unsupported import data. importData=%{public}@
processing plist files: %{public}@
received invalid sync operation %{public}@
failed to process sync operation '%{public}@'
processing playlist changes
failed to process playlist %{public}@
resetting play counts
aborting cancelled sync
Could not read %{public}@: %{public}@
No operations in %{public}@
Invalid sync plist at %{public}@
_processSyncOperation %{public}@
got unhandled sync operation %{public}@
Ignoring empty track update.
Got delete_track for with invalid pid: %{public}@
failed to delete track. pid=%lld
DBInfo values: %{public}@
Updated dbInfo: %{public}@
Could not update dbInfo: %lld
failed to add playlist
failed to update playlist
failed to remove playlist
Asset path differs for pid %lld. ours=%{public}@, theirs=%{public}@
No longer have asset for pid %lld. filePath=%{public}@
recoverExistingAsset called with unknown track pid %lld
Got update_db_info with invalid pid: %{public}@
Unexpected genius config format: %{public}@
Unexpected DSID/AppleID pair format: %{public}@/%{public}@
Unexpected AppleID config format: %@
No valid genius_config found in: %{public}@
Updated Genius configuration: %{public}@
Failed to update Genius configuration: %{public}@
[MaintenanceTasksOperation] Skipping maintenance because no file exists at path '%{public}@'
[MaintenanceTasksOperation] Removing orphaned tracks before %{public}@
[MaintenanceTasksOperation] Removing orphaned assets
[MaintenanceTasksOperation] Cleaning up artwork for maintenance activity.
[MaintenanceTasksOperation] Start maintenance activity to convert existing artwork to ASTC.
[MaintenanceTasksOperation] Start maintenance activity to prune unused metadata
[MaintenanceTasksOperation] Rebuilding collections (itemAlbumCount=%lld, totalAlbumCount=%lld, itemAlbumArtistCount=%lld, totalAlbumArtistCount=%lld, itemItemArtistCount=%lld, totalItemArtistCount=%lld)
[MaintenanceTasksOperation] Rebuilding sort map (usedSortMapEntryCount=%lld, totalSortMapEntryCount=%lld)
[MaintenanceTasksOperation] All maintenance completed.
[MaintenanceTasksOperation] Failed to set state of maintenance activity to DONE.
%{public}@ Failed to resolve altDSID for DSID %lld. err=%{public}@
%{public}@ Failed to update the account database with DSID %lld. err=%{public}@
%{public}@ Failed to query the account table. err=%{public}@
%{public}@ Failed to update the account database with DSID %lld, resolvedAltDSID %@. err=%{public}@
%{public}@ - performDatabasePathChange: - newPath=%{public}@ Observers=%{public}@
%{public}@ - performDatabasePathChange: - Calling completion block - newPath=%{public}@
%{public}@ - emergencyDisconnectWithCompletion - Observers: %{public}@
%{public}@ - emergencyDisconnectWithCompletion - Calling completion block
%{public}@ - terminateForFailureToPrepareForAccountChange - Observers: %{public}@
%{public}@ - addAccountChangeObserver: %{public}@
Database validation succeeded
Database validation FAILED with error: %{public}@
[ML3UpdateSpotlightIndexOperation] Operation %p started for bundleID %{public}@
[ML3UpdateSpotlightIndexOperation] Index update operation will process %lu items for content updates and deletes
[ML3UpdateSpotlightIndexOperation] Indexed client state fetch failed, failing the operation.
[ML3UpdateSpotlightIndexOperation] Indexed database revision and client library revision (%lld) are the same, no index update needed
[ML3UpdateSpotlightIndexOperation] Revisions differ, indexed:%lld current:%lld, updating index with delta changes
[ML3UpdateSpotlightIndexOperation] Indexed client state %lld is invalid (current library state is: %lld), wiping the index and re-indexing everything
[ML3UpdateSpotlightIndexOperation] Indexed client state has an index version (%lld) that's not the current (%lld), wiping the index and re-indexing everything
[ML3UpdateSpotlightIndexOperation] Indexed client state is invalid or indexed library differs from the current library, wiping the index and re-indexing everything. Fetched client state: %{public}@
[ML3UpdateSpotlightIndexOperation] No client state indexed, it's a fresh start. Wiping the index and indexing everything
[ML3UpdateSpotlightIndexOperation] **The operation was cancelled before the indexed client state was evaluated**
[ML3UpdateSpotlightIndexOperation] Index update operation %p finished successfully in %.3f seconds
[ML3UpdateSpotlightIndexOperation] Index update operation %p failed in %.3f seconds
[ML3UpdateSpotlightIndexOperation] Checking for updates and deletes for the received identifiers
[ML3UpdateSpotlightIndexOperation] Will index items with initial revision %lu target revision %lu
[ML3UpdateSpotlightIndexOperation] **The operation was cancelled. Stopping searchable item creation**
[ML3UpdateSpotlightIndexOperation] **The operation was cancelled. Skipping searchable item creation.**
[ML3UpdateSpotlightIndexOperation] Finished items index batch
[ML3UpdateSpotlightIndexOperation] Deleting all indexed items
[ML3UpdateSpotlightIndexOperation] Delete all called in spotlight index for bundle ID %{public}@ called
[ML3UpdateSpotlightIndexOperation] Failed to delete spotlight items
[ML3UpdateSpotlightIndexOperation]  
  Started to delete items
[ML3UpdateSpotlightIndexOperation]  
  Successfully deleted %lu spotlight index items
[ML3UpdateSpotlightIndexOperation]  
  Failed to delete spotlight items
[ML3UpdateSpotlightIndexOperation]  
  Started to index track items
[ML3UpdateSpotlightIndexOperation]  
  Updated %lu track items in spotlight index with bundle ID:%@
[ML3UpdateSpotlightIndexOperation]  
  Failed to index spotlight track items
[ML3UpdateSpotlightIndexOperation]  
  Started to index playlists
[ML3UpdateSpotlightIndexOperation]  
  Updated %lu playlists in spotlight index with bundle ID:%{public}@
[ML3UpdateSpotlightIndexOperation]  
  Failed to index spotlight playlists
[ML3UpdateSpotlightIndexOperation]  
 Beginning Core Spotlight index batch %lu for operation %p
[ML3UpdateSpotlightIndexOperation]  
  Updating indexed client state and fininshing index batch %lu with client state data size: %lu
[ML3UpdateSpotlightIndexOperation]  
  Client state updated with revision:%{public}@, target revision:%{public}@, version:%{public}@
[ML3UpdateSpotlightIndexOperation]  
 Successfully finished Core Spotlight batch operation in %.3f seconds for operation %p
[ML3UpdateSpotlightIndexOperation] Failed to update client state
[ML3UpdateSpotlightIndexOperation]  
 FAILED Core Spotlight batch operation in %.3f seconds
[ML3UpdateSpotlightIndexOperation]  
  Attempted to enumerate searchable items without block, returning
[ML3UpdateSpotlightIndexOperation]  
  Evaluating the need of batching for database fetch
[ML3UpdateSpotlightIndexOperation]  
  Library fetch batching is needed, fetching from the DB in chuncks of %lu
[ML3UpdateSpotlightIndexOperation]  
  Failed to create searchable items batch with library fetch batching
[ML3UpdateSpotlightIndexOperation]  
  Created searchable items batch with library fetch batching
[ML3UpdateSpotlightIndexOperation]  
  Failed to create searchable items
[ML3UpdateSpotlightIndexOperation]  
  Created searchable items batch
[ML3UpdateSpotlightIndexOperation]  
  Searchable item creation is done
[ML3UpdateSpotlightIndexOperation]  
  Some playlists might contain Music Shows & Movies items only, investigating...
[ML3UpdateSpotlightIndexOperation]  
  Found %ld playlists with Music Shows & Movies items only. Adding them to the searchable items array
[ML3UpdateSpotlightIndexOperation]  
  Finished searchable items creation
[ML3UpdateSpotlightIndexOperation]  
  Creating searchable items for tracks
[ML3UpdateSpotlightIndexOperation]  
  Skipping library item with invalid media type
[ML3UpdateSpotlightIndexOperation]  
  Failed to decode movie info plist with error: %{public}@
[ML3UpdateSpotlightIndexOperation]  
  Creating searchable items for playlists
[ML3UpdateSpotlightIndexOperation] Trying get the current index version from an unknown bundle
[ML3UpdateSpotlightIndexOperation] Trying create an index name with an unknown bundle
[ML3UpdateSpotlightIndexOperation] Trying to build searchable items with an unknown bundle id
%{public}@ - Missing delegate - unable to perform operation
%{public}@ - No account change operation to perform - reason=%{public}@
%{public}@ - Starting account change operation from %{public}@ to %{public}@
%{public}@ - Active account changed - Performing dabase path change with observer %{public}@
%{public}@ - Active account changed - Database path change is complete: %{public}@
[ML3RemoveTracksOperation] Beginning remove tracks operation with source %d (%lu specified tracks)
[ML3RemoveTracksOperation] Remove tracks operation success=%d in %.3f seconds
[ML3RemoveTracksOperation] Removing source: %d from entire library
[ML3RemoveTracksOperation] Removing source: %d, failed to set %@ to %@ with error: %@
[ML3RemoveTracksOperation] Found %lu tracks to unlink with asset protection type = %d
[ML3RemoveTracksOperation] Deleting assets due to remove cloud library source:%{public}@
[ML3RemoveTracksOperation] Removing source: %d, failed to clear location for tracks with asset protection type = %d
[ML3RemoveTracksOperation] Removing source: %d, failed to remove source properties: %{public}@
with error: %@
[ML3RemoveTracksOperation] Removing source: %d, deleting %lu tracks, purging %lu assets
[ML3RemoveTracksOperation] deleting batch of %lu tracks
[ML3RemoveTracksOperation] Removing source: %d, failed to delete purged tracks
[ML3RemoveTracksOperation] Deleting assets due to remove source:
[ML3RemoveTracksOperation] %{public}@
[ML3RemoveTracksOperation] clear location for batch of %lu purged tracks
[ML3RemoveTracksOperation] Removing source: %d, failed to clear location for purged tracks
[ML3RemoveTracksOperation] Deleting all non-library tracks from playlists (removing source match)
[ML3RemoveTracksOperation] Removing source: %d, success=%d
[ML3RemoveTracksOperation] removing source %d from %lu tracks
[ML3RemoveTracksOperation] enumeratePathsToDeleteFromLibrary: %lld
[ML3RemoveTracksOperation] deleting %lu tracks
[ML3RemoveTracksOperation] failed to delete purged tracks
[ML3RemoveTracksOperation] Removing potential non-library tracks from all containers: %{public}@
[ML3RemoveTracksOperation] Keeping asset for track %llu because it is ATPWATL
[ML3RemoveTracksOperation] purging %lu assets
[ML3RemoveTracksOperation] failed to clear location for purged tracks
Database connection pool %{public}@ is closed. You may no longer use it.
Database connection subpool %{public}@ received database deletion notification.
Database connection subpool %{public}@ received HomeSharing caches cleared notification.
Connection subpool %{public}@ closing all connections.
Error fetching language resources. (Error = %{public}@) Falling back to building resources in-process.
Connection %{public}@ attempting to open database at %{public}@ _isReadOnly=%{BOOL}u, isDeviceMediaLibraryDatabase=%{BOOL}u, isMediaLibraryDeamon=%{BOOL}u, canCreateDatabase=%{BOOL}u, openFlags=%d,
Connection %{public}@ is readOnly, creating DB is NOT allowed and database file doesn't exist at %{public}@
Connection %{public}@ could not enable SQLITE_FCNTL_PERSIST_WAL option, result %d
Warning: connection %{public}@ could not enable WAL journal mode. %{public}s, result %d
Connection %{public}@ could not disable SQLITE_FCNTL_PERSIST_WAL option, result %d
Warning: connection %{public}@ could not update journaling mode to DELETE. %{public}s, result %d
Warning: connection %{public}@ could not set cache size. %{public}s, result %d
SQLite error %d detected while opening database '%{public}s'
[%@] Unable to open database connection to path %{public}@. %{public}s
failing update request in a transaction marked for rollback. sql=%{public}@
Warning: unable to begin transaction on connection: %{public}@
Warning: unable to end transaction on connection %{public}@
Warning: attempted to end a non-existent transaction.
Error registering module: %{public}@. %{public}@
Could not checkpoint WAL file. %{public}s
[%{public}@] 
 Database Corruption Detected 
Attempting database recovery...
Database recovery was reported to be successful.
Database recovery failed. %{public}@
DISK IO ERROR: attempting to close and re-open connection for recovery.
[_handleDiskIOError] failed to close database connection
[_handleDiskIOError] checking database consistency
[_handleDiskIOError] Database integrity check passed.
[_handleDiskIOError] Database integrity check failed - treating as corrupted
[_handleDiskIOError] failed to re-open database connection
[_handleDiskIOError] failed to restart transaction after re-opening database connection
[_handleDiskIOError] successfully recovered from disk IO error
[_handleDiskIOError] FAILED TO HANDLE DISK IO ERROR
[_handleDiskIOError] unlink successful. performing coordinated termination.
[_handleDiskIOError] unlink successful.
[_handleDiskIOError] failed to delete SHM file from disk (errno = %d)
[_handleDiskIOError] SHM file not found
unable to unlink
Enabling authorizer failed: %d, connection: %p
Enabling defensive mode failed: %d, connection: %p
Disabling defensive mode failed: %d, connection: %p
Disabling authorizer failed: %d, connection: %p
(%s) SQLite was %s after %u retries. %{public}@
Disk IO error detected while preparing statement %{public}@
Disk IO error detected while executing statement %{public}@
Database corruption detected while executing statement %{public}@
Error beginning transaction on connection: %{public}@. %{public}@
Error ending transaction on connection: %{public}@. %{public}@
Error preparing statement SQL. "%{public}@" %{public}@
[%{public}@] Database error while %{public}@ statement '%{public}@': %{public}@
[%{public}@] Database error: %{public}@
** Information about database file at path %{public}@
lastError = %{public}@
writable = %{public}s
attributes = %{public}@
Error fetching attributes from database file. %{public}@
Database connection was unable to close SQLite handle %p. Attempting to clean up remaining resources and close again. (connection = %{public}@)
Cleaning up unfinalized statement %p.
Failed to finalize statement %p. %s (%d)
Reattempting close of connection...
Successfully closed connection.
Failed to close connection.
SQLITE_ATTACH: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DETACH: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_PRAGMA: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_ALTER_TABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_ANALYZE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_INDEX: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TEMP_INDEX: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TEMP_TABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TEMP_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TEMP_VIEW: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_VIEW: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_VTABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_INDEX: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TEMP_INDEX: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TEMP_TABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TEMP_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TEMP_VIEW: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_VIEW: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_VTABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_REINDEX: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DELETE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_INSERT: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_READ: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_UPDATE: %{public}s, param1=%{public}s, param2=%{public}s
Unknown action %d: %{public}s
Successfully began transaction with ID %{public}@
Could not begin transaction on distant connection: %{public}@. %{public}@
The connection asking for a new transaction disappeared. Attempting to cancel the begun transaction...
Reattempting to begin transaction with media library service...
Reattempt to begin transaction succeeded. Proceeding with new transaction ID %{public}@.
Reattempt to begin transaction failed.
Successfully ended transaction with ID %{public}@
Could not end transaction on distant connection: %{public}@. %{public}@
Could not execute update on distant connection: %{public}@. %{public}@
No valid transaction ID for connection %{public}@
Service terminated distant transaction with error: %{public}@
Distant result fetch failed. Trying to fallback to a local connection...
Could not fallback to local connection. Local result could not be obtained from query. %{public}@
Could not fallback to local connection. Result does not have a connection or a pool reference. %{public}@
ERROR: Tried to fetch distant result set without a connection.
ERROR: Tried to fetch distant result set without a transaction ID. (Connection used: %{public}@)
Could not fetch results for distant result set. %{public}@
[ML3SubscriptionImportOperation] Subscription import operation cancelled=%d success=%d. total time = %.2fs
[ML3SubscriptionImportOperation] failed to process import data
[ML3SubscriptionImportOperation] successfully processed import data
!!! ML3 raised exception while exceptions were disabled: %{public}@
failing to enque statement inside a transaction marked for rollback. sql=%{public}@
Error flushing statements in accumulator: %{public}@
%{public}@ - libraryContainerPath - Using the service to retrieve libraryContainerPath
%{public}@ - libraryContainerPath - Fatal error retrieving library container path [throwing] - error=%{public}@
%{public}@ - libraryContainerPath - Using the cached path
%{public}@ - libraryContainerPath - Retrieved path: %{public}@
%{public}@ - performDatabasePathChange: - newPath=%{public}@ - No-Op
%{public}@ - emergencyDisconnectWithCompletion: - Wiping cached media folder path: %{public}@
Failed to unarchive data for artwork_token %{public}@. err=%{public}@
Failed to archive interest data for artwork_token %{public}@.
starting proto export session. numOperations=%d
finished export session: %d bytes, %d add_tracks, %d delete_tracks, %d add_playlists, %d delete_playlists in %.2f seconds
failed to write package len. err=%{public}@
failed to write package data. err=%{public}@
softlink:r:path:/System/Library/PrivateFrameworks/StoreBookkeeperClient.framework/StoreBookkeeperClient
softlink:r:path:/System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud
softlink:r:path:/System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud
softlink:o:path:/System/Library/PrivateFrameworks/Koa.framework/Koa
ML3AccountStore
_MSVAccountInformationProviding
NSObject
ML3DatabaseForeignKeyConstraint
ML3UpdateArtworkInterestDataOperation
InsignificantCharacterFiltering
ImportSanity
ML3ArtworkTokenSet
MLEQPreset
ML3ProcessClient
ML3DatabaseColumn
MIPTVShow
NSCopying
ML3Additions
MIPSong
ML3ServiceDatabaseImport
ML3MigrationDirectives
VideoSnapshot
ML3ItemExtraTable
ML3DatabaseTable
NSMutableCopying
ML3MutableDatabaseTable
MIPLibraryIdentifier
ML3DAAPImportOperation
ML3DatabasePrivacyContext
NSSecureCoding
NSCoding
ML3ActiveTransaction
NSLocking
ML3MusicLibraryResourcesManagerContext
ML3DatabaseFunction
ML3DatabaseFunctionBlock
ML3DatabaseFunctionPointer
ML3PersonTable
ML3Entity
ML3ClientImportServiceSession
ML3AlbumArtistTable
ML3MusicLibrary
ML3DatabaseConnectionDelegate
ML3DatabaseConnectionPoolDelegate
ML3ClientImportItem
ML3Track
ML3PredicateOptimizing
MIPPodcast
ML3Comparing
ML3PurchaseHistoryImportOperation
ML3TerminationCoordinator
ML3ContainerTable
ML3MusicLibraryAdditions
ML3Query
ML3QueryAdditions
ML3Artist
ML3ArtistAdditions
ML3GenreTable
MIPPlaybackInfo
ML3ProcessDownloadedAssetsOperation
ML3Album
ML3AlbumAdditions
Validation
ML3MusicLibrary_SortMapEntry
SortMap
ML3SortMap
ML3SortMapFaultingEntryArray
_ML3SortMapFaultingNameOrderDictionaryEnumerator
ML3SortMapFaultingNameOrderDictionary
ML3HomeSharingImportOperation
ML3Predicate
ML3TruthPredicate
ML3UnaryPredicate
ML3NegationPredicate
ML3PropertyPredicate
ML3ContainmentPredicate
ML3ComparisonPredicate
ML3ContainsPredicate
ML3PersistentIDsPredicate
ML3BitMaskPredicate
ML3SearchStringPredicate
ML3CompoundPredicate
ML3AllCompoundPredicate
ML3AnyCompoundPredicate
ML3ConditionalPredicate
ML3QuerySection
ML3Collection
ML3AggregateQuery
ML3AggregateQueryAdditions
ML3ComposerTable
SchemaUtilities
ML3Genre
ML3GenreAdditions
ML3ExportItem
ML3Container
ML3ContainerAdditions
ML3ContainerQuery
ML3ContainerQueryAdditions
ML3ProtoSyncImportOperation
ML3ChapterTOC
ML3ContainerItemPerson
_ML3MultiUserAccountChangeOperation
MLMediaLibraryResourcesServiceXPCProtocol
MLMediaLibraryAccountChangeObserver
MLMediaLibraryResourcesServiceClient
MLMediaLibraryResourcesServiceProtocol
ML3DatabaseValidation
ML3ItemStatsTable
MIPGenre
ML3Composer
ML3ComposerAdditions
ML3AlbumArtist
ML3AlbumArtistAdditions
ML3ContainerItemDiffMetadata
ML3ContainerItemDiffOperation
ML3DatabaseImportManager
ML3StoreLink
ML3BaseLocation
ML3ChapterTable
ProcessingAdditions
ML3ArtworkAdditions
ML3ArtworkConfiguration
_ML3ArtworkConfigurationMediaArtworkTypeKey
ML3DatabaseStatementCache
ML3StatementCacheNode
ML3StatementCacheList
MusicLibraryAdditions
MIPSeries
MIPPlaylist
MLTrackImportChapter
ML3DaemonClient
MLMovieProperties
MLMovieArtist
ML3MigrationAddedColumn
MIPSmartPlaylistInfo
MLContentRating
MLITDBGeniusDatabase
MLGeniusPlaylistController
ML3ClientImportSessionXPCInterface
ML3ClientImportServiceSessionXPCInterface
ML3ClientImportSession
MIPAudiobook
ML3TrackImporter
MLITChapterTOCMethods
MLITChapterTOC
ML3ItemKVSTable
MIPAlbum
CacheManagement
Artwork
ML3DatabaseModule
MIPMovie
Schema
UbiquitousDatabase
ML3SetValuesForPropertiesOperation
ML3DatabaseMetadata
ML3ItemTable
ML3NameOrderAdditions
MSPMediaSyncError
MSPMediaSyncPackage
ML3AccountTable
ML3SetCloudIDImportOperation
ML3MigrationMisgroupedTrack
ML3MigrationMisgroupedAlbum
ML3ItemStoreTable
ML3ItemSearchTable
ML3RemovePlaylistsOperation
MSPMediaSyncHeader
ML3StoreItemPlaylistData
ML3AlbumTable
ML3Booklet
ML3ImportPersistentIDGenerator
MSPMediaSyncOperation
ML3DatabaseException
ML3Resources
ML3ImportOperation
ML3BookletTable
ML3DatabaseNaturalStatement
MIPMultiverseIdentifier
ML3QueryResultSet_BackingStore
ML3QueryResultSet_MutableBackingStore
ML3QueryResultSet
ML3ContainerQueryResultSet
ML3ItemVideoTable
ML3LibraryNotificationManager
MSVDistributedNotificationObserverDelegate
ML3ArtistTable
ML3OrderingTerm
ML3StoreItemTrackData
ML3StoreImportOperation
ML3Client
ML3MediaLibraryWriter
Saga
ML3ExportSession
MLMediaTypeCountedSet
ML3SpotlightNameCache
ML3SpotlightMatchingNameCache
ML3SpotlightMatchPredicate
SpotlightAdditions
_MLChangeObserver
MLMediaLibraryResourcesServiceServer
NSXPCListenerDelegate
MLTransactionContext
MLMediaLibraryServiceProtocol
MLMediaLibraryServiceClientProtocol
MLMediaLibraryServiceInterface
MLProtocol
ML3PersistentIDGenerator
ML3MusicLibraryResourcesManager
ML3MusicLibraryResourcesProviding
ML3MatchImportOperation
MLMediaLibraryService
ML3LyricsTable
ML3ProtoSyncExportItem
_ML3MultiUserDaemonMusicLibraryResourcesManager
_ML3MultiUserDaemonAccountChangeOperationDelegate
MLUnitTestingAdditions
ML3UpdateSiriIndexOperation
Jalisco
ML3DatabaseRecoveryOperation
ML3VirtualTable
ML3DatabaseModuleContext
ML3Person
ML3DatabaseOperation
ML3AlbumGroupingIdentifier
ML3DatabaseResult
ML3DatabaseRow
ML3DatabaseStatement
ML3DatabaseDatatypesBridge
ML3DatabaseStatementRenderer
ML3ContainerItem
ML3DatabaseImport
ML3MutableDatabaseImport
Insertions
Transactions
ML3BulkStatementExecutionOperation
ML3MatcherAuxData
ML3ClientImportSessionConfiguration
ML3DatabaseBlob
ML3CloudKVSTable
ML3ITunesSyncImportOperation
ML3ContainerSeedTable
MLChapterTOC
ML3ClientImportResult
ML3MaintenanceTasksOperation
ML3AccountCacheEntry
ML3AccountCacheDatabase
ML3MusicLibraryAccountChangeObserverProxy
ML3DatabaseValidationClient
_ML3ValidatableDatabase
ML3ContainerItemPersonTable
ML3UpdateSpotlightIndexOperation
_ML3MultiUserDaemonAccountChangeOperation
ML3RemoveTracksOperation
ML3DatabaseConnectionPool
_ML3DatabaseConnectionWrapper
_ML3DatabaseConnectionSubPool
_ML3DatabaseConnectionPoolDiagnostic
_ML3MutableDatabaseConnectionPoolDiagnostic
ML3ItemPlaybackTable
ML3LanguageResources
ML3LanguageResourceManager
ML3DatabaseConnection
ML3Account
ML3DatabaseDistantConnection
SmartPlaylistDebug
ML3DatabaseDistantResult
ML3ContainerItemTable
MIPArtist
ML3SubscriptionImportOperation
MLException
ML3StatementAccumulator
_ML3BaseMusicLibraryResourcesManager
_ML3MultiUserMusicLibraryResourcesManager
MIPMediaItem
ML3Artwork
ML3DatabaseCachedRow
ML3ProtoSyncExportSession
_init
_accountsWithAccountTypeIdentifier:options:error:
isActive
enumerateObjectsUsingBlock:
accountPropertyForKey:
longLongValue
activeAccount
stringValue
init
defaultStore
accountTypeWithAccountTypeIdentifier:error:
accountsWithAccountType:options:error:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
accountDSID
T@"NSString",R,C,N
T@"ML3AccountStore",R,N
altDSIDForAccountWithDSID:options:error:
T@"ACAccount",R,N
currentHandler
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:description:
length
bytes
copy
count
handleFailureInMethod:object:file:lineNumber:description:
countByEnumeratingWithState:objects:count:
name
addObject:
componentsJoinedByString:
stringWithFormat:
initWithForeignTable:localColumns:foreignColumns:
_foreignKeyClauseSQL
foreignTable
localColumns
foreignColumns
.cxx_destruct
_foreignTable
_localColumns
_foreignColumns
T@"ML3DatabaseTable",R,N,V_foreignTable
T@"NSArray",R,N,V_localColumns
T@"NSArray",R,N,V_foreignColumns
lastObject
attributes
objectForKey:
transaction
connection
arrayWithObjects:count:
executeUpdate:withParameters:error:
writerErrorWithCode:description:
_verifyLibraryConnectionAndAttributesProperties:
type
_execute:
rangeOfCharacterFromSet:options:range:
_rangeWithoutInsignificantPrefix:andCharacters:
_copyWithoutInsignificantPrefix:andCharacters:
copyWithoutInsignificantPrefixAndCharacters
isEqualToString:
copyWithoutInsignificantCharacters
MLSortString
MLSortStringWithPrefix
sanitizedString
alphanumericCharacterSet
mutableCopy
removeCharactersInString:
_faultInBestTokens
_faultInTokens
numberWithInteger:
objectForKeyedSubscript:
library
persistentID
revisionTrackingCode
retrieveBestArtworkTokensForEntityPersistentID:entityType:artworkType:retrievalTime:completionHandler:
dictionary
setObject:forKeyedSubscript:
enumerateArtworkTokensForEntityPersistentID:entityType:artworkType:usingBlock:
initWithEntity:artworkType:
availableArtworkToken
fetchableArtworkToken
fetchableArtworkSourceType
artworkTokenForSource:
retrievalTime
setRetrievalTime:
_entity
_artworkType
_availableArtworkToken
_fetchableArtworkToken
_fetchableArtworkSourceType
_artworkSourceToTokenMap
_faultedInBestTokens
_faultedInTokens
_retrievalTime
Td,N,V_retrievalTime
T@"NSString",R,N
Tq,R,N
objectAtIndex:
indexOfObject:
eqPresetForBuiltInPresetType:
punctuationCharacterSet
stringByTrimmingCharactersInSet:
intValue
initWithBuiltInPresetType:
eqPresetForName:
localizedName
builtInPresetType
typeForAVController
_name
_localizedName
_builtInPresetType
initWithObjects:
localizedStringForKey:value:table:
initWithCapacity:
predicateWithProperty:equalToInt64:
predicateMatchingPredicates:
arrayWithArray:
predicateWithProperty:equalToValue:
initWithConnection:
mainBundle
bundleIdentifier
processInfo
processName
sharedProcessClient
T@"ML3ProcessClient",R,N
bundleID
processID
initWithName:datatype:constraints:defaultValue:
appendString:
ml_stringValueForSQL
columnWithName:datatype:constraints:defaultValue:
_columnDefinitionSQL
datatype
columnConstraints
defaultValue
_datatype
_columnConstraints
_defaultValue
T@"NSString",R,N,V_name
TQ,R,N,V_datatype
TQ,R,N,V_columnConstraints
T@,R,N,V_defaultValue
dictionaryRepresentation
setObject:forKey:
numberWithInt:
setArtist:
setSeries:
setEpisodeId:
setEpisodeSortId:
setNetworkName:
allocWithZone:
copyWithZone:
mergeFrom:
hasArtist
hasSeries
setSeasonNumber:
setHasSeasonNumber:
hasSeasonNumber
hasEpisodeId
hasEpisodeSortId
setVideoQuality:
setHasVideoQuality:
hasVideoQuality
hasNetworkName
readFrom:
writeTo:
copyTo:
artist
series
seasonNumber
episodeId
episodeSortId
videoQuality
networkName
_artist
_episodeId
_episodeSortId
_networkName
_seasonNumber
_series
_videoQuality
_has
TB,R,N
T@"MIPArtist",&,N,V_artist
T@"MIPSeries",&,N,V_series
TB,N
Ti,N,V_seasonNumber
T@"NSString",&,N,V_episodeId
T@"NSString",&,N,V_episodeSortId
Ti,N,V_videoQuality
T@"NSString",&,N,V_networkName
fileDescriptor
ml_lock
ml_unlock
numberWithBool:
numberWithLongLong:
setAlbum:
setComposer:
setGenre:
setLyrics:
setPlaybackInfo:
setHlsPlaylistURL:
hasAlbum
hasComposer
hasGenre
setDiscNumber:
setHasDiscNumber:
hasDiscNumber
setTrackNumber:
setHasTrackNumber:
hasTrackNumber
setUserRating:
setHasUserRating:
hasUserRating
setExcludeFromShuffle:
setHasExcludeFromShuffle:
hasExcludeFromShuffle
setGeniusId:
setHasGeniusId:
hasGeniusId
setAudioFormat:
setHasAudioFormat:
hasAudioFormat
setHasVideo:
setHasHasVideo:
hasHasVideo
hasLyrics
hasPlaybackInfo
setLyricsChecksum:
setHasLyricsChecksum:
hasLyricsChecksum
hasHlsPlaylistURL
album
composer
genre
discNumber
trackNumber
userRating
excludeFromShuffle
geniusId
audioFormat
hasVideo
lyrics
playbackInfo
lyricsChecksum
hlsPlaylistURL
_geniusId
_album
_audioFormat
_composer
_discNumber
_genre
_hlsPlaylistURL
_lyrics
_lyricsChecksum
_playbackInfo
_trackNumber
_userRating
_excludeFromShuffle
_hasVideo
T@"MIPAlbum",&,N,V_album
T@"MIPArtist",&,N,V_composer
T@"MIPGenre",&,N,V_genre
Ti,N,V_discNumber
Ti,N,V_trackNumber
Ti,N,V_userRating
TB,N,V_excludeFromShuffle
Tq,N,V_geniusId
Ti,N,V_audioFormat
TB,N,V_hasVideo
T@"NSString",&,N,V_lyrics
T@"MIPPlaybackInfo",&,N,V_playbackInfo
Ti,N,V_lyricsChecksum
T@"NSString",&,N,V_hlsPlaylistURL
_prepareStatement:error:
_executeStatement:withError:
sqliteStatement
arrayWithCapacity:
predicateWithProperty:value:comparison:caseInsensitive:
orderingTermWithProperty:direction:
numberWithUnsignedInt:
UTF8String
timeIntervalSinceReferenceDate
floatValue
doubleValue
_copyWithZone:usingConcreteClass:
initWithDatabaseImport:library:writer:client:
writer
client
_library
_writer
_client
T@"ML3MusicLibrary",R,N,V_library
T@"ML3MediaLibraryWriter",R,N,V_writer
T@"ML3Client",R,N,V_client
initWithOriginalUserVersion:
originalUserVersion
currentUserVersion
setCurrentUserVersion:
needsToRecreateIndexes
setNeedsToRecreateIndexes:
needsToRecreateTriggers
setNeedsToRecreateTriggers:
needsToRemoveLocationsForItemsMissingAssets
setNeedsToRemoveLocationsForItemsMissingAssets:
needsToReloadStoreBookmarkMetadataIdentifiers
setNeedsToReloadStoreBookmarkMetadataIdentifiers:
needsToReloadContainerMediaTypes
setNeedsToReloadContainerMediaTypes:
needsToReloadCollectionRepresentativeItems
setNeedsToReloadCollectionRepresentativeItems:
needsAnalyze
setNeedsAnalyze:
needsToAutogenerateArtworkVariants
setNeedsToAutogenerateArtworkVariants:
needsToUpdateSortMap
setNeedsToUpdateSortMap:
forceUpdateOriginals
setForceUpdateOriginals:
_needsToRecreateIndexes
_needsToRecreateTriggers
_needsToRemoveLocationsForItemsMissingAssets
_needsToReloadStoreBookmarkMetadataIdentifiers
_needsToReloadContainerMediaTypes
_needsToReloadCollectionRepresentativeItems
_needsAnalyze
_needsToAutogenerateArtworkVariants
_needsToUpdateSortMap
_forceUpdateOriginals
_originalUserVersion
_currentUserVersion
Ti,R,N,V_originalUserVersion
Ti,N,V_currentUserVersion
TB,N,V_needsToRecreateIndexes
TB,N,V_needsToRecreateTriggers
TB,N,V_needsToRemoveLocationsForItemsMissingAssets
TB,N,V_needsToReloadStoreBookmarkMetadataIdentifiers
TB,N,V_needsToReloadContainerMediaTypes
TB,N,V_needsToReloadCollectionRepresentativeItems
TB,N,V_needsAnalyze
TB,N,V_needsToAutogenerateArtworkVariants
TB,N,V_needsToUpdateSortMap
TB,N,V_forceUpdateOriginals
URLWithString:
dictionaryWithContentsOfURL:
flattenedChapterDataFromDAAPInfoDictionary:trackPersistentID:
initWithStringRepresentation:
ratingRank
array
dataWithBytesNoCopy:length:freeWhenDone:
propertyListWithData:options:format:error:
unsignedIntValue
valueForProperty:
boolValue
libraryContainerPathByAppendingPathComponent:
fileURLWithPath:isDirectory:
URLAssetWithURL:options:
hasProtectedContent
duration
assetImageGeneratorWithAsset:
value:withObjCType:
generateCGImagesAsynchronouslyForTimes:completionHandler:
cancelAllCGImageGeneration
devicePreferredImageFormat
data
UUID
UUIDString
importArtworkTokenForEntityPersistentID:entityType:artworkToken:artworkType:sourceType:
importOriginalArtworkFromImageData:withArtworkToken:artworkType:sourceType:mediaType:
needsVideoSnapshot
createVideoSnapshotAtTime:
columns
_columns
_copyWithZone:concreteClass:
columnDefinitionsSQL
foreignKeyConstraints
mutableCopyWithZone:
createTableSQLWithExistenceClause:
_foreignKeyConstraints
T@"NSArray",R,N,V_columns
T@"NSArray",R,N,V_foreignKeyConstraints
setName:
setColumns:
setForeignKeyConstraints:
T@"NSString",C,D,N
T@"NSArray",C,D,N
setLibraryName:
hasLibraryName
setLibraryId:
setHasLibraryId:
hasLibraryId
libraryName
libraryId
_libraryId
_libraryName
T@"NSString",&,N,V_libraryName
Tq,N,V_libraryId
stringByAppendingString:
pathForResourceFileOrFolder:
stringByAppendingPathComponent:
seekToEndOfFile
dataUsingEncoding:
writeData:
standardUserDefaults
boolForKey:
defaultManager
fileExistsAtPath:isDirectory:
stringByDeletingLastPathComponent
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createFileAtPath:contents:attributes:
fileHandleForWritingAtPath:
dealloc
import
trackData
attributesOfItemAtPath:error:
fileSize
playlistData
isCancelled
_importDAAPPayloadFromFile:shouldProcessPlaylists:
setProgress:
fileSystemRepresentation
_startImportSessionIfNeeded
importItemFromDAAPElement:
updateImportProgress:
containerImportItemFromDAAPElement:withTrackIds:trackPersonIdentifiers:
personImportItemFromDAAPElement:
performImportOfSourceType:usingConnection:
_finishParsingWithError:
_processUpdateType:
_processTrackItemCount:
_processTrackElement:
_processDeletedTrackId:
_processContainerItemCount:
_processContainerElement:withTrackIds:trackPersonIdentifiers:
_processDeletedContainerId:
_processPersonElement:
.cxx_construct
_importSession
_importError
_delegate
_updateType
_totalTrackCount
_totalContainerCount
_processedTrackCount
_processedContainerCount
_importSessionStarted
_sourceType
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
initWithPAApplication:
logDatabasePrivacyAccessWithAuditToken:
sharedContext
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
initWithClientIdentity:
initWithAuditToken:
logDatabasePrivacyAccess
initWithLibrary:connection:client:
raise:format:
currentTransactionID
initWithName:
beginTransaction
updateLastUsed
lock
unlock
_relinquishConnection
identifier
lastUsedTime
setLastUsedTime:
terminable
setTerminable:
inUseByOperation
setInUseByOperation:
isReadOnly
setReadOnly:
_connection
_lock
_xpcTransaction
_terminable
_inUseByOperation
_readOnly
_identifier
_lastUsedTime
T@"ML3DatabaseConnection",R,N
T@"NSUUID",R,N,V_identifier
Td,N,V_lastUsedTime
TB,N,V_terminable
TB,N,V_inUseByOperation
readOnly
TB,N,GisReadOnly,V_readOnly
deviceSupportsMultipleLibraries
sharedService
sharedProxy
_initWithResourcesService:accountInfo:libraryContainerIdentifier:accountChangeObserver:supportsMultiUsers:runningInDaemon:
contextForAutoupdatingSharedLibrary
contextForSingleUserLibraryWithAccountInfo:
contextForSingleUserLibraryWithLibraryContainerIdentifier:
contextForMultiUserFrameworkLibraryWithService:
contextForMultiUserDaemonLibraryWithAccountInfo:accountChangeObserver:
isRunningInDaemon
isMultiUserSupported
resourcesService
accountInfo
accountChangeObserver
libraryContainerIdentifier
_runningInDaemon
_multiUserSupported
_resourcesService
_accountInfo
_accountChangeObserver
_libraryContainerIdentifier
runningInDaemon
TB,R,N,GisRunningInDaemon,V_runningInDaemon
multiUserSupported
TB,R,N,GisMultiUserSupported,V_multiUserSupported
T@"<MLMediaLibraryResourcesServiceProtocol>",R,N,V_resourcesService
T@"<_MSVAccountInformationProviding>",R,N,V_accountInfo
T@"<MLMediaLibraryAccountChangeObserver>",R,N,V_accountChangeObserver
T@"NSString",R,N,V_libraryContainerIdentifier
initWithName:argumentCount:
registerWithConnection:
argumentCount
setArgumentCount:
_argumentCount
T@"NSString",C,N,V_name
Ti,N,V_argumentCount
_sqliteHandle
sqliteError
block
setBlock:
_block
T@?,C,N,V_block
userData
functionPointer
setFunctionPointer:
setUserData:
_functionPointer
_userData
T^?,N,V_functionPointer
T^v,N,V_userData
insertValues:intoTable:persistentID:connection:
databaseConnectionAllowingWrites:withBlock:
persistentIDColumnForTable:
allKeys
null
trackWithPersistentID:existsInLibraryWithConnection:
incrementRevisionForRevisionTypeContentWithConnection:deletionType:persistentIDs:
performDatabaseTransactionWithBlock:
_shouldIncrementRevisionForType:persistentID:usingConnection:
stringByPaddingToLength:withString:startingAtIndex:
removeAllObjects
defaultRenderer
statementWithPrefix:inParameterCount:
subarrayWithRange:
arrayByAddingObjectsFromArray:
incrementRevisionWithLibrary:persistentID:deletionType:revisionType:usingConnection:
initWithDictionary:inLibrary:cachedNameOrders:usingConnection:
unsettableProperties
containsObject:
joinClausesForProperty:
foreignDatabaseTableForProperty:
foreignColumnForProperty:
databaseTable
setValue:forKey:
enumerateKeysAndObjectsUsingBlock:
checkoutWriterConnection
insertValues:intoTable:persistentID:library:
extraTablesToInsert
insertionChangesLibraryContents
notifyEntitiesAddedOrRemoved
notifyContentsDidChange
enqueueBlockForTransactionCommit:
performTransactionWithBlock:
checkInDatabaseConnection:
incrementRevisionWithLibrary:persistentID:deletionType:revisionType:
initWithPersistentID:inLibrary:
stringByAppendingFormat:
executeQuery:withParameters:
hasAtLeastOneRow
predicateIncludingSystemwidePredicatesWithPredicate:library:options:
orderedSet
property
SQLJoinClausesForClass:
unionOrderedSet:
appendSQLToMutableString:entityClass:
databaseStatementParameters
int64ForColumnIndex:
enumerateRowsWithBlock:
newSelectSQLForProperties:count:predicate:
addObjectsFromArray:
SQLForEntityClass:
objectEnumerator
allObjects
disambiguatedSelectSQLForProperty:
stringWithString:
initWithFormat:
currentThread
threadDictionary
initWithURL:resolvingAgainstBaseURL:
scheme
entityURLScheme
host
allLibraries
libraryUID
_entityForURLComponents:inLibrary:verifyExistence:reason:
entityFromURL:inLibrary:verifyExistence:
path
pathComponents
objectAtIndexedSubscript:
integerValue
existsInLibrary
setScheme:
setHost:
pathWithComponents:
setPath:
URLForEntityWithPersistentID:libraryUID:
predicateByOptimizingComparisonPredicate:
stringWithCapacity:
propertyIsCountProperty:
columnCount
queryWithLibrary:predicate:
countingQueryForBaseQuery:countProperty:forIdentifier:
countOfEntities
numberWithUnsignedInteger:
dictionaryWithCapacity:
unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:
enumeratePersistentIDsAndProperties:usingBlock:
entityClass
getValues:forProperties:count:
setValues:forProperties:
pushTransaction
setValues:forProperties:usingConnection:
popTransactionAndCommit:
isCurrentThreadInTransaction
performAsyncDatabaseWriteTransactionWithBlock:completionBlock:
setValues:forProperties:forEntityPersistentIDs:inLibrary:usingConnection:
isHomeSharingLibrary
databasePath
dictionaryWithDictionary:
sharedMediaLibraryService
_didChangeValueForProperties:inLibrary:
performDatabaseOperation:withAttributes:options:completionHandler:
allValues
libraryContentsChangeForProperty:
assistantLibraryContentsChangeForProperty:
notifyAssistantContentsDidChange
libraryDynamicChangeForProperty:
notifyNonContentsPropertyDidChange
notifyInvisiblePropertyDidChange
deleteFromLibrary:deletionType:persistentIDs:count:usingConnection:
_deleteRowForPersistentIDs:count:library:table:usingColumn:usingConnection:
extraTablesToDelete
collectionClassesToUpdateBeforeDelete
canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:
incrementRevisionForRevisionTypeContentWithConnection:deletionType:persistentIDs:count:
deleteFromLibrary:deletionType:persistentIDs:count:
_createDisambiguatedSQLForProperty:
predisambiguatedProperties
disambiguatedSQLForProperty:
uppercaseString
enumeratePersistentIDsAfterRevision:revisionTrackingCode:maximumRevisionType:usingBlock:
incrementRevisionForRevisionTypeContentWithLibrary:deletionType:persistentIDs:
enumeratePersistentIDsInLibrary:matchingPredicate:orderingTerms:persistentIDs:count:options:usingBlock:
subselectStatementForProperty:
subselectPropertyForProperty:
newSelectAllEntitiesSQLForProperties:count:predicate:
entityFromURL:reason:
entityFromURL:inLibrary:
defaultFilterPredicates
predicateByOptimizingPredicate:
newWithPersistentID:inLibrary:
newWithDictionary:inLibrary:
newWithDictionary:inLibrary:cachedNameOrders:
newWithDictionary:inLibrary:cachedNameOrders:usingConnection:
defaultOrderingTerms
sectionPropertyForProperty:
foreignPropertyForProperty:entityClass:
removeFromMyLibrary:deletionType:persistentIDs:count:
allProperties
predisambiguateProperties:toDictionary:
indexableSQLForProperties:
orderingSQLForProperties:directionality:
enumeratePersistentIDsInLibrary:afterRevision:usingBlock:
initWithDictionary:inLibrary:cachedNameOrders:
matchesPredicate:
getValuesForProperties:
setValues:forProperties:count:
setValues:forProperties:async:withCompletionBlock:
setValuesForPropertiesWithDictionary:
setValue:forProperty:
didChangeValueForProperties:
deleteFromLibrary
incrementRevision
setLibrary:
_persistentID
T@"ML3MusicLibrary",W,N,V_library
Tq,R,N,V_persistentID
sourceType
allowAccountMerging
operationCount
multiverseIdentifier
mediaItem
initWithLibrary:connection:configuration:
begin
finish
addTrack:persistentID:
updateTrack:persistentID:
removeTrack:persistentID:
_databaseConnection
_configuration
appendFormat:
executeUpdate:
updateTrackIntegrityOnConnection:
initWithName:foreignTable:foreignColumn:joinColumn:
executeQuery:
stringForColumnIndex:
stringByDeletingPathExtension
stringByAppendingPathExtension:
moveItemAtPath:toPath:error:
numberForColumnIndex:
arrayWithObjects:
int64ValueForFirstRowAndColumn
arrayWithObject:
intForColumnIndex:
fileExistsAtPath:
dataForColumnIndex:
rangeOfString:
stringByReplacingCharactersInRange:withString:
enumerateArtworkCacheIDsInFlattenedChapterData:usingBlock:
removeItemAtPath:error:
pathExtension
lowercaseString
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
getResourceValue:forKey:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
URLByAppendingPathComponent:
URLByDeletingLastPathComponent
moveItemAtURL:toURL:error:
lastPathComponent
removeItemAtURL:error:
initWithAlbumPID:albumArtistPID:
initWithPersistentID:albumArtistPID:
addMisgroupedTrack:
misgroupedTracks
albumArtistPID
albumPID
schemaDeleteColumn:inTable:
schemaRenameColumn:inTable:toNewColumnName:
schemaAddColumnDefinition:toTable:
schemaDeleteColumns:inTable:
objectsInColumn:
enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:
URLByDeletingPathExtension
initWithDatabasePath:
open
doubleForColumnIndex:
unarchivedObjectOfClasses:fromData:error:
numberWithDouble:
close
objectForFirstRowAndColumn
initWithSuiteName:
removeObjectForKey:
synchronize
timeIntervalSince1970
globalSerialQueue
initWithPath:
initWithResourcesManager:
autoupdatingSharedLibrary
musicLibraryPerUserDSID
initWithContext:
_onGlobalQueue_shareableMusicLibraryWithResourcesManager:
allLibraryContainerPaths
stringByStandardizingPath
autoupdatingSharedLibraryPath
setAutoupdatingSharedLibraryPath:
initWithClientIdentity:path:readOnly:populateUnitTestTablesBlock:
context
initWithPath:readOnly:populateUnitTestTablesBlock:
_setupNotificationManager
defaultCenter
_effectiveSettingsDidChangeNotification:
addObserver:selector:name:object:
_libraryPathDidChangeNotification:
sharedResourceManager
invalidateCachedResources
addObserverForName:object:queue:usingBlock:
decodeBoolForKey:
decodeObjectOfClass:forKey:
isUsingSharedLibraryPath
encodeBool:forKey:
resourcesManager
encodeObject:forKey:
removeObserver:
sharedManager
initWithDatabasePath:maxReaders:maxWriters:
setDelegate:
isUnitTesting
setUseDistantWriterConnections:
addAccountChangeObserver:
distributedToLocalNotificationMapping
initWithLibrary:distributedAndLocalNames:
setValue:forDatabaseProperty:
ams_automaticDownloadKinds
notificationManager
enqueueDistributedNotificationNamed:
valueForDatabaseProperty:
anyInLibrary:predicate:
anyInLibrary:predicate:options:
databaseInfo
_logDatabaseAccess
strongToStrongObjectsMapTable
sharedCoordinator
isSigned
signForReason:
validateDatabase
privacyContext
setPrivacyContext:
_canConfigureMediaLibraryDatabaseConnection:
_configureMediaLibraryDatabaseConnection:
_teardownMediaLibraryDatabaseConnection:
library:didBeginDatabaseTransactionWithConnection:
library:didCommitDatabaseTransactionWithConnection:
library:didRollbackDatabaseTransactionWithConnection:
setConnectionDelegate:
connectionPool
readerConnection
writerConnection
checkInConnection:
postNotificationName:object:
_closeAllConnectionsAndWaitForBusyConnections:
checkoutReaderConnection
pushTransactionUsingBehaviorType:
widthLimitedSetValuesQueue
addOperationWithBlock:
isCurrentThreadConnectionInTransaction
sharedClient
validateDatabaseForLibrary:
databasePathExists
indexSchemaSQL
_clearAllRowsFromTables:
cleanupArtworkWithOptions:
predicateWithProperty:equalToInteger:
enumeratePersistentIDsUsingBlock:
initWithLibrary:
sortKeyBuilder
accessSortKeyBuilder:
unknownSectionIndex
indexOfObjectPassingTest:
arrayByAddingObject:
sectionIndexTitles
_postClientNotificationWithDistributedName:localName:
assistantSyncDataChangedNotificationName
saveTrackMetadataSinceRevision:withGrappaID:
numberWithUnsignedLongLong:
unsignedLongLongValue
pathForResourceFileOrFolder:basePath:relativeToBase:createParentFolderIfNecessary:
arrayWithContentsOfFile:
writeToFile:atomically:
savePlaylistsSinceRevision:withGrappaID:
stringWithValidatedFormat:validFormatSpecifiers:error:
containerQueryWithContainer:
initWithToken:artworkType:musicLibrary:
originalFileURL
libraryContainerPath
substringFromIndex:
dataWithPropertyList:format:options:error:
enumeratePersistentIDsAfterRevision:revisionTrackingCode:maximumRevisionType:forMediaTypes:inUsersLibrary:usingBlock:
dictionaryWithObjectsAndKeys:
userVersionMatchesSystemUsingConnection:
allTables
tableExists:
orderingLanguageMatchesSystemUsingConnection:
pathForResource:ofType:
initWithContentsOfFile:
updateSortMapOnConnection:forceUpdateOriginals:
unsignedIntegerValue
removeTracksWithPersistentIDs:fromSource:usingConnection:withCompletionHandler:
dictionaryWithObject:forKey:
isInTransaction
purgeableStorageSizeWithUrgency:
clearPurgeableStorageAmount:withUrgency:
_autogenerateArtworkForRelativePath:artworkType:mediaType:completionHandler:
artworkRelativePathFromToken:
originalArtworkDirectory
_insertArtworkRowWithArtworkToken:artworkType:sourceType:relativePath:
_convertOriginalArtworkToDevicePreferredFormatFromSourceURL:toDestinationURL:completionHandler:
writeData:error:
closeFile
_updateBestArtworkTokensForArtworkToken:artworkType:sourceType:preserveExistingAvailableToken:usingConnection:
_deleteAllArtworkVariantsAtRelativePaths:
updateBestArtworkTokenForEntityPersistentID:entityType:artworkType:retrievalTime:usingConnection:
_insertArtworkRowWithArtworkToken:artworkType:sourceType:relativePath:usingConnection:
_allArtworkVariantDirectories
importArtworkTokenForEntityPersistentID:entityType:artworkToken:artworkType:sourceType:usingConnection:
removeArtworkTokenForEntityPersistentID:entityType:artworkType:sourceType:usingConnection:
updateBestArtworkTokenForEntityPersistentID:entityType:artworkType:retrievalTime:preserveExistingAvailableToken:usingConnection:
_determineAndUpdateBestArtworkTokensForEntityPersistentID:entityType:artworkType:retrievalTime:preserveExistingAvailableToken:usingConnection:
artworkTokenForChapterWithItemPID:retrievalTime:
currentDatabaseVersion
cleanupArtworkWithOptions:usingConnection:
_removeOrphanedArtworkTokensUsingConnection:
_removeOrphanedArtworkMetadataUsingConnection:
_removeOrphanedArtworkAssetsUsingConnection:
_removeInvalidAvailableArtworkTokensUsingConnection:
removeOrphanedTracksOnlyInCaches:
date
dictionaryWithContentsOfFile:
enumeratorAtPath:
skipDescendants
mediaFolderPath
predicateWithProperty:value:comparison:
unlinkRedownloadableAssetsFromLibrary:persistentIDs:deletionType:deletedFileSize:
hasPresignedValidity
verifyPresignedValidity
updateTrackIntegrity
deletePresignedValidity
setMaxConcurrentOperationCount:
isArtworkFetchableForPersistentID:entityType:artworkType:artworkSourceType:
rootArtworkCacheDirectory
enumerateChapterTimesInFlattenedChapterData:usingBlock:
removeObject:
initWithSourceURL:destinationURL:destinationFormat:
setDestinationCompressionQuality:
sendRequest:completionHandler:
initWithSourceURL:
systemConfiguration
sizesToAutogenerateForMediaType:artworkType:
getValue:
artworkCacheDirectoryForSize:
addJPEGDestinationWithSize:compressionQuality:url:
addDestinationWithFormat:size:url:
isOpen
registerFunctionName:argumentCount:functionPointer:
registerFunctionName:argumentCount:block:
registerBookmarkMetadataIdentifierFunctionOnConnection:
enqueueLocalNotificationNamed:
_shouldProcessAccountChanges
_prepareForAccountChange:
_completeAccountChangeWithPath:
_closeAndLockCurrentDatabaseConnections
_tearDownNotificationManager
lockAndCloseAllConnectionsForTermination
removeObserverWithDistributedName:
musicLibraryForUserAccount:
registeredLibraries
sharedLibrary
sharedLibraryDatabasePath
setSharedLibraryDatabasePath:
disableSharedLibrary
disableAutomaticDatabaseValidation
enableAutomaticDatabaseValidation
setGlobalPrivacyContextWithAuditToken:
localizedSectionHeaderForSectionHeader:
localizedSectionIndexTitleForSectionHeader:
sectionIndexTitleForSectionHeader:
enumerateSortMapTablesUsingBlock:
removeOrphanedTracks
connectionWillOpenDatabase:
connectionDidOpenDatabase:
connection:didFailToOpenDatabaseWithError:
connectionWillCloseDatabase:
connectionDidCloseDatabase:
connection:didFailToCloseDatabaseWithError:
connectionDidAccessDatabase:
connectionDidBeginDatabaseTransaction:
connection:didEndDatabaseTransactionAndCommit:
connectionPool:createdNewConnection:
T@"NSObject<OS_dispatch_queue>",R,N
T@"NSString",C,N
T@"NSDictionary",R,N
T@"NSMutableDictionary",R,N
T@"ML3MusicLibrary",R,N
T@"NSArray",R,C,N
initWithClientIdentity:forUserAccount:
initWithPath:isUnitTesting:
initWithClientIdentity:path:
setIsHomeSharingLibrary:
downloadOnAddToLibrary
currentRevision
currentContentRevision
setSyncGenerationID:
syncGenerationID
setSyncLibraryID:
syncLibraryID
setLibraryUID:
isLibraryEmpty
currentDevicePurchasesPlaylist
currentDevicePlaybackHistoryPlaylist
currentDevicePhotosMemoriesPlaylist
localizedSectionIndexTitles
preferredAudioTracks
preferredSubtitleTracks
mediaRestrictionEnabled
setLibraryEntityFilterPredicates:
setLibraryContainerFilterPredicates:
setLibraryPublicEntityFilterPredicates:
setLibraryPublicContainerFilterPredicates:
libraryEntityFilterPredicatesForEntityClass:
libraryEntityFilterPredicatesForContainerClass:
setClientIdentity:
reconnectToDatabase
performReadOnlyDatabaseTransactionWithBlock:
automaticDatabaseValidationDisabled
createIndexes
emptyAllTables
clearAllGeniusData
clearAllCloudKVSData
accountCacheDatabase
groupingKeyForString:
groupingKeysForStrings:
localizedSectionHeaderForSectionIndex:
sectionIndexTitleIndexForSectionIndex:
notifyDisplayValuesPropertyDidChange
notifySectionsDidChange
notifyCloudLibraryAvailabilityDidChange
notifyLibraryImportDidFinish
notifyKeepLocalStateDidChange
saveTrackMetadata
savePlaylists
requiresSchemaOnlyUpdatesOnConnection:
requiresNonSchemaUpdatesOnConnection:
updateSortMap
getChangedPersistentIDsAfterRevision:revisionTrackingCode:maximumRevisionType:usingBlock:
persistentID:changedAfterRevision:revisionTrackingCode:
countOfChangedPersistentIdsAfterRevision:revisionTrackingCode:maximumRevisionType:
removeSource:withCompletionHandler:
removeSource:usingConnection:withCompletionHandler:
removeTracksWithPersistentIDs:fromSource:withCompletionHandler:
removePlaylistsWithPersistentIDs:fromSource:usingConnection:withCompletionHandler:
autoFilledTracksTotalSize
autoFilledTracksTotalSizeWithUrgency:
deleteAutoFilledTracksOfAtLeastTotalSize:urgency:respectSongMattress:
deleteAutoFilledTracksOfAtLeastTotalSize:
deleteAutoFilledTracksOfAtLeastTotalSize:urgency:
autogenerateSupportedSizesForAllOriginalArtworkWithConnection:completionHandler:
importExistingOriginalArtworkWithArtworkToken:artworkType:sourceType:mediaType:
importOriginalArtworkFromFileURL:withArtworkToken:artworkType:sourceType:mediaType:
removeArtworkAssetWithToken:
deleteArtworkToken:
migrateExistingArtworkToken:newArtworkToken:newSourceType:
removeArtworkTokenForEntityPersistentID:entityType:artworkType:sourceType:
isArtworkTokenAvailable:
recordPlayEventForAlbumPersistentID:
recordPlayEventForContainerPersistentID:
hasUserPlaylists
hasAddedToLibraryAppleMusicContent
hasUserPlaylistsContainingAppleMusicContent
removeTombstonesForDeletedItems
removeItemsWithFamilyAccountID:purchaserAccountID:downloaderAccountID:
deleteDatabaseProperty:
migratePresignedValidity
_newGeniusDBConnectionAtPath:
performDatabasePathChange:completion:
emergencyDisconnectWithCompletion:
terminateForFailureToPerformDatabasePathChange
setNotificationManager:
serialQueue
delegate
setIsUnitTesting:
libraryEntityFilterPredicates
libraryContainerFilterPredicates
libraryPublicEntityFilterPredicates
libraryPublicContainerFilterPredicates
setUsingSharedLibraryPath:
_libraryUID
_libraryUIDLock
_syncLibraryUID
_accountCacheDatabase
_privacyContext
_optimizedLibraryEntityFilterPredicatesByEntityClass
_optimizedLibraryContainerFilterPredicatesByContainerClass
_optimizedLibraryPublicEntityFilterPredicatesByEntityClass
_optimizedLibraryPublicContainerFilterPredicatesByContainerClass
_isHomeSharingLibraryLoaded
_isHomeSharingLibrary
_isUnitTesting
_usingSharedLibraryPath
_connectionPool
_databasePath
_sortKeyBuilder
_resourcesManager
_notificationManager
_serialQueue
_accountDSID
_libraryEntityFilterPredicates
_libraryContainerFilterPredicates
_libraryPublicEntityFilterPredicates
_libraryPublicContainerFilterPredicates
T@"NSObject<OS_dispatch_queue>",R,N,V_serialQueue
T@"ML3LibraryNotificationManager",&,N,V_notificationManager
T^{iPhoneSortKeyBuilder=},R,N,V_sortKeyBuilder
usingSharedLibraryPath
TB,N,GisUsingSharedLibraryPath,V_usingSharedLibraryPath
T@"ML3MusicLibraryResourcesManager",R,N,V_resourcesManager
T@"<ML3MusicLibraryDelegate>",W,N,V_delegate
T@"ML3DatabaseConnectionPool",R,N,V_connectionPool
T@"NSString",R,N,V_databasePath
T@"ML3DatabasePrivacyContext",R,N
Tq,N
T@"NSString",N
libraryEmpty
TB,R,N,GisLibraryEmpty
T@"ML3Container",R,N
T@"ML3DatabaseMetadata",R,N
T@"NSArray",R,N
TB,N,V_isUnitTesting
T@"NSArray",&,N,V_libraryEntityFilterPredicates
T@"NSArray",&,N,V_libraryContainerFilterPredicates
T@"NSArray",&,N,V_libraryPublicEntityFilterPredicates
T@"NSArray",&,N,V_libraryPublicContainerFilterPredicates
T@"NSString",R,C,N,V_accountDSID
writeToFile:options:error:
initWithMultiverseIdentifier:mediaItem:
_multiverseIdentifier
_mediaItem
T@"MIPMediaItem",R,C,N,V_mediaItem
T@"MIPMultiverseIdentifier",R,C,N,V_multiverseIdentifier
orderingTermWithProperty:
initWithObjectsAndKeys:
initWithDictionary:
enumeratePathsToDeleteFromLibrary:persistentIDs:usingBlock:
_writeSyncDeletesToPlistWithLibrary:forPersistentIDs:
hasEntities
ML3NameOrderValue
nameOrderForString:
populateSortOrdersOfPropertyValues:inLibrary:cachedNameOrders:
setWithObjects:
unlinkRedownloadableAssetsFromLibrary:persistentIDs:deletedFileSize:
clearLocationFromLibrary:persistentIDs:
clearPlaybackKeysFromLibrary:persistentIDs:
initWithChapterDataRef:track:
chapterTOC
updateCloudStatus
supportsUbiquitousPlaybackPositions
predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:
stringValueForFirstRowAndColumn
clearLocationFromLibrary:persistentIDs:disableKeepLocal:
clearLocationFromLibrary:persistentIDs:disableKeepLocal:usingConnection:
localizedDescription
enumeratePathsToDeleteFromLibrary:persistentIDs:usingConnection:usingBlock:
initialize
albumsDefaultOrderingTerms
albumsByAlbumArtistDefaultOrderingTerms
genresDefaultOrderingTerms
podcastsDefaultOrderingTerms
artistAllAlbumsDefaultOrderingTerms
artistsDefaultOrderingTerms
albumAllArtistsDefaultOrderingTerms
albumAndArtistDefaultOrderingTerms
composersDefaultOrderingTerms
podcastsEpisodesDefaultOrderingTerms
TVShowEpisodesDefaultOrderingTerms
trackWithPersistentID:existsInLibrary:
trackWithPersistentID:visibleInLibrary:
unlinkRedownloadableAssetsFromLibrary:persistentIDs:
trackValueAreInTheCloud:
updateAllBookmarkableStoreBookmarkMetadataIdentifiersOnConnection:
clearLocationFromLibrary:persistentIDs:usingConnection:
absoluteFilePath
updateIntegrity
rawIntegrity
artworkTokenAtPlaybackTime:
updateCollectionCloudStatus
updateStoreBookmarkMetadataIdentifier
comparison
value
predicateWithPredicate:
truePredicate
falsePredicate
setWithArray:
predicateWithProperty:values:
initWithUTF8String:
dataWithBytes:length:
initWithMaximumCapacity:
compare:
sortUsingSelector:
setExternalGuid:
setFeedUrl:
hasExternalGuid
hasFeedUrl
externalGuid
feedUrl
_externalGuid
_feedUrl
T@"NSString",&,N,V_externalGuid
T@"NSString",&,N,V_feedUrl
ml_matchesValue:usingComparison:
isEqualToNumber:
containsString:
hasPrefix:
hasSuffix:
_performPurchaseHistoryImportWithTransaction:
setError:
_writerTransactionWithBlock:
setSuccess:
preferredVideoQuality
storeAccountID
importSource
main
_performTermination
T@"ML3TerminationCoordinator",R,N
secedeForReason:
isSignedForReason:
execute
_signatures
_notifyToken
libraryIdentifiers
song
movie
tvShow
podcast
audiobook
mediaType
isInUsersLibrary
compilation
creationDateTime
numDiscs
numTracks
year
modificationDateTime
contentRating
contentRatingLevel
userDisabled
beatsPerMinute
fileKind
isPreorder
bitRate
codecType
codecSubType
dataKind
durationInSamples
gaplessHeuristicCode
gaplessHeuristicDelayCode
gaplessEncodingDrainCode
gaplessFrameResyncCode
relativeVolume
sampleRate
volumeNormalizationEnergy
progressionDirection
playCount
playCountDelta
lastPlayedDateTime
lastSkippedDateTime
skipCount
skipCountDelta
rememberBookmark
bookmarkTimeMilliseconds
hidden
likedState
likedStateChanged
likedStateChangeDate
storeId
storePlaylistId
storefrontId
purchaseHistoryId
purchaseHistoryToken
sagaId
cloudStatus
drmVersionsCode
hasAccountId
accountId
familyAccountId
storeProtectionType
drmPlatformIdCode
drmKey1IdCode
drmKey2IdCode
hasPurchaseDateTime
releaseDateTime
cloudMatchedStatus
needsReporting
subscriptionStoreItemId
playbackEndpointType
hasCloudAssetAvailable
cloudAssetAvailable
inUsersCloudLibrary
cloudPlaybackEndpointType
reportingStoreItemId
assetStoreItemId
rental
hasChapterData
hasAlternateAudio
hasSubtitles
audioLanguage
audioTrackIndex
audioTrackId
subtitleLanguage
subtitleTrackIndex
rentalDuration
rentalPlaybackDuration
rentalPlaybackStartedDateTime
rentalStartedDateTime
persistentId
secondaryArtworkSourceType
startTime
stopTime
flattenedChapterData
hasMediaType
hasIsInUsersLibrary
hasCompilation
hasCreationDateTime
hasTitle
hasSortTitle
hasNumDiscs
hasNumTracks
hasDuration
hasYear
hasFileSize
hasModificationDateTime
hasContentRating
hasContentRatingLevel
hasUserDisabled
hasBeatsPerMinute
hasComment
hasGrouping
hasShortDescription
hasLongDescription
hasCopyright
hasFileKind
hasIsPreorder
hasBitRate
hasCodecType
hasCodecSubType
hasDataKind
hasDataUrl
hasDurationInSamples
hasEqPreset
hasPlaybackFormat
hasGaplessHeuristicCode
hasGaplessHeuristicDelayCode
hasGaplessEncodingDrainCode
hasGaplessFrameResyncCode
hasRelativeVolume
hasSampleRate
hasStartTime
hasStopTime
hasVolumeNormalizationEnergy
hasProgressionDirection
hasPlayCount
hasPlayCountDelta
hasLastPlayedDateTime
hasLastSkippedDateTime
hasSkipCount
hasSkipCountDelta
hasRememberBookmark
hasBookmarkTimeMilliseconds
hasHidden
hasLikedState
hasLikedStateChanged
hasLikedStateChangeDate
hasStoreId
hasStorePlaylistId
hasStorefrontId
hasPurchaseHistoryId
hasPurchaseHistoryToken
hasPurchaseHistoryRedownloadParams
hasSagaId
hasSagaRedownloadParams
hasCloudStatus
hasDrmVersionsCode
hasFamilyAccountId
hasStoreProtectionType
hasDrmPlatformIdCode
hasDrmKey1IdCode
hasDrmKey2IdCode
hasReleaseDateTime
chapterMetadataUrl
hasStoreXID
hasStoreAssetFlavor
hasCloudMatchedStatus
hasExtrasUrl
hasHasLocalAsset
hasSubscriptionStoreItemId
hasNeedsReporting
hasPlaybackEndpointType
hasInUsersCloudLibrary
hasCloudId
hasCloudPlaybackEndpointType
hasCloudUniversalLibraryId
hasReportingStoreItemId
hasAssetStoreItemId
hasRental
hasHasChapterData
hasExtendedContentName
hasHasAlternateAudio
hasHasSubtitles
hasAudioLanguage
hasAudioTrackIndex
hasAudioTrackId
hasSubtitleLanguage
hasSubtitleTrackIndex
hasRentalDuration
hasRentalPlaybackDuration
hasRentalPlaybackStartedDateTime
hasRentalStartedDateTime
hasFlattenedChapterData
hasName
hasSortName
sortName
hasPersistentId
hasArtworkId
hasSecondaryArtworkId
hasSecondaryArtworkSourceType
title
sortTitle
comment
grouping
shortDescription
longDescription
copyright
dataUrl
eqPreset
playbackFormat
purchaseHistoryRedownloadParams
sagaRedownloadParams
storeXID
storeAssetFlavor
extrasUrl
cloudId
cloudUniversalLibraryId
extendedContentName
movieInfo
artworkId
secondaryArtworkId
syncIdFromMultiverseId:
hasLocalAsset
smartPlaylistInfo
itemsCount
itemsAtIndex:
distinguishedKind
owner
editable
parentIdentifier
evaluationOrder
dynamic
filtered
genius
enabledItemsOnly
limited
limitKind
limitOrder
limitValue
reverseLimitOrder
sortType
trackOrderFromProtocolSortType:
reversedSorting
remoteSourceType
shared
visible
authorStoreId
minRefreshInterval
hasCloudLastUpdateTime
subscriberCount
subscriberPlayCount
subscriberLikedCount
cloudIsSubscribed
cloudIsCuratorPlaylist
externalVendorPlaylist
playlistCategoryTypeMask
geniusSeedTrackIdentifier
cloudIsSharingDisabled
smartCriteria
hasDistinguishedKind
hasPlaylistDescription
hasOwner
hasEditable
hasParentIdentifier
hasEvaluationOrder
hasType
hasDynamic
hasFiltered
hasGenius
hasEnabledItemsOnly
hasLimited
hasLimitKind
hasLimitOrder
hasLimitValue
hasReverseLimitOrder
hasSmartCriteria
hasSortType
hasReversedSorting
hasCloudGlobalId
hasSubscriberURL
hasShared
hasVisible
hasAuthorStoreId
hasAuthorDisplayName
hasAuthorStoreURL
hasMinRefreshInterval
hasSubscriberCount
hasSubscriberPlayCount
hasSubscriberLikedCount
hasCloudIsSubscribed
hasCloudIsCuratorPlaylist
hasExternalVendorIdentifier
hasExternalVendorDisplayName
hasExternalVendorTag
hasExternalVendorPlaylist
hasCloudIsSharingDisabled
hasCloudVersionHash
hasAuthorHandle
hasPlaylistCategoryTypeMask
hasPlaylistGroupingSortKey
hasGeniusSeedTrackIdentifier
items
playlistDescription
cloudGlobalId
subscriberURL
authorDisplayName
authorStoreURL
externalVendorIdentifier
externalVendorDisplayName
externalVendorTag
cloudVersionHash
authorHandle
playlistGroupingSortKey
predicateWithProperty:
isSubclassOfClass:
isDynamicForEntityClass:
decodeObjectOfClasses:forKey:
decodeInt64ForKey:
initWithLibrary:entityClass:predicate:orderingTerms:usingSections:nonDirectAggregateQuery:propertyToCount:options:
predicate
orderingTerms
nonDirectAggregateQuery
propertyToCount
usingSections
ignoreSystemFilterPredicates
ignoreRestrictionsPredicates
encodeInt64:forKey:
reversedTerms:
spotlightPredicate
loadNamesFromLibrary:onConnection:forPredicate:loadAllNames:cancelHandler:
selectSQLWithColumns:orderingTerms:limit:
persistentIDParameters
hasRowForColumn:
countOfDistinctRowsForColumn:
enumerateSectionsUsingBlock:
deleteAllEntitiesFromLibraryWithDeletionType:
setRange:
selectSectionsSQL
sectionProperty
sectionsParameters
initWithRange:sectionIndex:
enumeratePersistentIDsAndProperties:ordered:sectionProperty:cancelBlock:usingBlock:
string
nameOrderPropertyForProperty:
replaceObjectAtIndex:withObject:
selectPersistentIDsSQLAndProperties:ordered:
enumerationDatabaseResultForSQL:onConnection:withParameters:
selectSQLWithColumns:orderingTerms:
selectSQLWithColumns:groupBy:orderingTerms:directionality:usingLowerBound:distinct:limit:
predicateIncludingSystemwidePredicates
initWithOrderedSet:
direction
persistentIDProperty
sectionsPersistentIDColumnIsDistinct
selectSQLWithColumns:groupBy:orderingTerms:limit:
selectPersistentIDsSQLAndProperties:ordered:distinct:
selectSQLWithColumns:groupBy:distinct:
selectSQLWithColumns:orderingTerms:distinct:
setIgnoreSystemFilterPredicates:
setIgnoreRestrictionsPredicates:
reverseQuery
anyEntityPersistentID
sections
deleteAllEntitiesFromLibrary
deleteAllEntitiesFromLibraryWithDeletionType:usingConnection:
enumeratePersistentIDsAndSectionsWithProperty:usingBlock:
enumeratePersistentIDsAndProperties:ordered:usingBlock:
enumeratePersistentIDsAndProperties:ordered:cancelBlock:usingBlock:
valueForAggregateFunction:onEntitiesForProperty:
selectSQLWithColumns:groupBy:
selectSQLWithColumns:orderingTerms:directionality:
selectSQLWithColumns:groupBy:orderingTerms:
selectSQLWithColumns:groupBy:orderingTerms:directionality:usingLowerBound:
lowerBoundParametersForOrderingTerms:lowerBoundPersistentID:
selectUnorderedPersistentIDsSQL
selectPersistentIDsSQL
selectCountSQL
countStatementParameters
limit
setLimit:
filtersOnDynamicProperties
options
_entityClass
_predicate
_orderingTerms
_propertyToCount
_nonDirectAggregateQuery
_usingSections
_options
_filtersOnDynamicProperties
_limit
T#,R,N,V_entityClass
T@"ML3Predicate",R,N,V_predicate
T@"ML3Predicate",R,N
T@"NSArray",R,N,V_orderingTerms
T@"NSString",R,N,V_propertyToCount
TQ,R,N
T@"ML3AggregateQuery",R,N,V_nonDirectAggregateQuery
TB,R,N,V_usingSections
TQ,N,V_limit
Tq,R,N,V_options
TB,R,N,V_filtersOnDynamicProperties
queryWithLibrary:predicate:usingSections:
queryWithLibrary:predicate:orderingTerms:usingSections:
queryWithLibrary:predicate:orderingTerms:usingSections:options:
queryWithLibrary:predicate:orderingProperties:
queryWithLibrary:predicate:orderingProperties:usingSections:
queryWithLibrary:predicate:orderingProperties:orderingDirectionMappings:usingSections:
queryWithLibrary:predicate:options:
queryWithLibrary:predicate:orderingTerms:
queryWithLibrary:predicate:orderingTerms:propertyToCount:
queryWithLibrary:predicate:orderingTerms:propertyToCount:options:
unrestrictedQueryWithLibrary:predicate:orderingTerms:
allItemsQueryWithLibrary:predicate:orderingTerms:usingSections:
updateRepresentativeCollectionValues:existingRepresentativePersistentID:forUpdateTrackValues:
propertiesForGroupingKey
trackForeignPersistentID
propertiesForGroupingUniqueCollections
updateTrackValues:
artistGroupingKeyForArtistName:seriesName:
artistForArtistName:seriesName:
setDataUrl:
setEqPreset:
setPlaybackFormat:
setBitRate:
setHasBitRate:
setCodecType:
setHasCodecType:
setCodecSubType:
setHasCodecSubType:
setDataKind:
setHasDataKind:
setGaplessHeuristicCode:
setHasGaplessHeuristicCode:
setGaplessHeuristicDelayCode:
setHasGaplessHeuristicDelayCode:
setGaplessEncodingDrainCode:
setHasGaplessEncodingDrainCode:
setGaplessFrameResyncCode:
setHasGaplessFrameResyncCode:
setRelativeVolume:
setHasRelativeVolume:
setSampleRate:
setHasSampleRate:
setStartTime:
setHasStartTime:
setStopTime:
setHasStopTime:
setVolumeNormalizationEnergy:
setHasVolumeNormalizationEnergy:
setBeatsPerMinute:
setHasBeatsPerMinute:
setProgressionDirection:
setHasProgressionDirection:
setDurationInSamples:
setHasDurationInSamples:
_durationInSamples
_gaplessEncodingDrainCode
_gaplessFrameResyncCode
_gaplessHeuristicCode
_gaplessHeuristicDelayCode
_startTime
_stopTime
_volumeNormalizationEnergy
_beatsPerMinute
_bitRate
_codecSubType
_codecType
_dataKind
_dataUrl
_eqPreset
_playbackFormat
_progressionDirection
_relativeVolume
_sampleRate
Ti,N,V_bitRate
Ti,N,V_codecType
Ti,N,V_codecSubType
Ti,N,V_dataKind
T@"NSString",&,N,V_dataUrl
T@"NSString",&,N,V_eqPreset
T@"NSString",&,N,V_playbackFormat
Tq,N,V_gaplessHeuristicCode
Tq,N,V_gaplessHeuristicDelayCode
Tq,N,V_gaplessEncodingDrainCode
Tq,N,V_gaplessFrameResyncCode
Ti,N,V_relativeVolume
Ti,N,V_sampleRate
Tq,N,V_startTime
Tq,N,V_stopTime
Tq,N,V_volumeNormalizationEnergy
Ti,N,V_beatsPerMinute
Ti,N,V_progressionDirection
Tq,N,V_durationInSamples
initWithLibrary:writer:
setQualityOfService:
_processTrackAsset:forSource:withError:
_processContainerAsset:forSource:withError:
valueForKey:
stringWithContentsOfFile:encoding:error:
populateLocationPropertiesWithPath:protectionType:
assetWithURL:
_artworkSourceFromTrackSource:
_processArtworkIdentifier:artworkToken:artworkType:mediaType:sourceType:
_videoSnapshotTimeForMediaType:
_processGeniusPlist:geniusIDString:geniusChecksum:
hasOriginalArtworkForRelativePath:
albumForAlbumArtistPersistentID:albumName:feedURL:seasonNumber:compilation:
repairAlbumArtistRelationshipsWithConnection:
_validateDatabaseUsingConnection:error:
userVersionUsingConnection:
ml_errorWithCode:description:
populateMediaTypesOfStaticContainersInLibrary:
coerceValidDatabaseWithError:
allPragmaSQL
allSchemaSQL
allTriggersSQL
deleteDatabase
initWithName:nameSection:sortKey:nameOrder:dirtyFlag:
initWithName:nameSection:sortKey:
_nameOrder
_sortKey
_nameSection
_dirty
inTransactionUpdateSortMapOnConnection:forceUpdateOriginals:
inTransactionUpdateSearchMapOnConnection:
inTransactionUpdateSortMapOnConnection:forceRebuild:forceUpdateOriginals:
sortMapNewSchemaSQL
stringByReplacingOccurrencesOfString:withString:
itemNewSchemaSQL
itemIndexSchemaSQL
_systemUnicodeVersionData
isEqualToData:
removeOrphanedCollectionsInLibrary:usingConnection:
coalesceMismatchedCollectionsUsingConnection:
initWithConnection:library:preloadNames:
insertStringsIntoSortMap:didReSortMap:
commitUpdates
nameOrders
collectionEntityClasses
_coalesceMismatchedCollectionClass:usingConnection:
valueForColumnIndex:
updateSortMapOnConnection:
validateSortMapUnicodeVersionOnConnection:
insertStringsIntoSortMap:
insertStringIntoSortMapNoTransaction:
valueWithML3NameOrder:
_sortedNameEntriesToInsertForNames:
_insertSortedNameEntriesIntoSortMap:
loadExistingSortedEntries
getCharacters:range:
sortUsingComparator:
indexSet
indexOfObject:inSortedRange:options:usingComparator:
insertObject:atIndex:
addIndex:
firstIndex
_minNameOrderForSortMapEntry:iPhoneSortKeyBuilder:
_maxNameOrderForSortMapEntry:iPhoneSortKeyBuilder:
_minSortKeyForEntry:iPhoneSortKeyBuilder:
_maxSortKeyForEntry:iPhoneSortKeyBuilder:
_sortKeyDistance:sortKey2:offset:
indexGreaterThanIndex:
appendBytes:length:
dropIndexesUsingConnection:tableNames:
setExistingTransactionIdentifier:
setPriorityLevel:
setStatementThreshold:
naturalStatementWithSQL:parameters:
enqueueStatement:
enumerateIndexesUsingBlock:
flushAndWait:
attemptInsertStringsIntoSortMap:
commitFailedInsertedStrings:
_sortKeyString:
_nameOrders
_entries
_minSortKey
_maxSortKey
_smallestNameDelta
_preloadNames
numberWithUnsignedLong:
numberWithLong:
removeLastObject
removeObjectAtIndex:
_dirtyInserts
nextObject
initWithDirtyInsertsEnumerator:connection:
_dirtyInsertsEnumerator
_offset
keyEnumerator
initWithObjects:forKeys:count:
_performHomeSharingImportWithTransaction:
homeSharingBasePlaylistID
_playlistNameOrder
setWithCapacity:
containerQueryWithContainer:predicate:
artworkDirectory
absoluteString
domain
code
replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:
isTrueAlways
isFalseAlways
containsPropertyPredicate:matchingValue:usingComparison:
_predicateString
_truthValue
setPredicate:
initWithPredicate:
T@"ML3Predicate",&,N,V_predicate
initWithProperty:
setProperty:
orderedSetWithArray:
_property
T@"NSString",C,N,V_property
setValues:
values
sortedArrayUsingSelector:
_orderedValues
initWithProperty:values:
_values
T@"NSSet",&,N,V_values
decodeIntForKey:
encodeInt:forKey:
caseInsensitive
treatNullAsString
transformFunction
operator
valueToBindForOperation:
initWithProperty:value:comparison:caseInsensitive:transformFunction:treatNullAsString:
predicateWithProperty:value:comparison:transformFunction:
_caseInsensitive
_comparison
_value
_treatNullAsString
_transformFunction
T@,R,N,V_value
Ti,R,N,V_comparison
TB,R,N,V_caseInsensitive
T@"NSString",R,C,N,V_treatNullAsString
T@"NSString",R,C,N,V_transformFunction
predicateWithProperty:valueSet:
T@,C,N,V_values
initWithPersistentIDs:shouldContain:
isEqualToArray:
predicateWithPersistentIDs:count:shouldContain:
predicateWithPersistentIDs:shouldContain:
shouldContain
_persistentIDs
_shouldContain
TB,R,N,V_shouldContain
setMask:
setValue:
mask
initWithProperty:mask:value:
predicateWithProperty:mask:value:
_mask
Tq,N,V_mask
Tq,N,V_value
setProperties:
setSearchString:
properties
searchString
initWithConcatenatedProperties:searchString:
predicateWithConcatenatedProperties:searchString:
_properties
_searchString
T@"NSArray",C,N,V_properties
T@"NSString",C,N,V_searchString
setPredicates:
predicates
initWithPredicates:
compoundOperatorJoiner
_predicates
T@"NSArray",&,N,V_predicates
T@"NSString",R,C,D,N
predicateByFlatteningAllCompoundPredicate:
intersectSet:
objectsPassingTest:
predicateByMergingContainmentPredicatesAllCompoundPredicate:
initWithConditionPredicate:thenPredicate:elsePredicate:
conditionPredicate
thenPredicate
elsePredicate
predicateWithConditionPredicate:thenPredicate:elsePredicate:
_conditionPredicate
_thenPredicate
_elsePredicate
T@"ML3Predicate",R,C,N,V_conditionPredicate
T@"ML3Predicate",R,C,N,V_thenPredicate
T@"ML3Predicate",R,C,N,V_elsePredicate
range
sectionIndex
setSectionIndex:
_sectionIndex
_range
T{_NSRange=QQ},N,V_range
TQ,N,V_sectionIndex
_updateRepresentativeItemsForPersistentIDs:usingConnection:
artworkCacheIDProperty
updateRepresentativeItemPersistentIDsInLibrary:persistentIDs:usingConnection:
aggregateEntityClass
foreignPersistentIDProperty
initWithUnitQuery:aggregateEntityClass:foreignPersistentIDProperty:
isFastCountable
setIsFastCountable:
_aggregateEntityClass
_foreignPersistentIDProperty
_isFastCountable
T#,R,N,V_aggregateEntityClass
T@"NSString",R,N,V_foreignPersistentIDProperty
TB,N,V_isFastCountable
aggregateQueryWithUnitQuery:foreignPersistentIDProperty:
schemaInsertColumnDefinitions:intoTable:atIndex:
_enumerateTableColumnNamesAndDefinitionsFromTable:usingBlock:
_alterTableNamed:withNewColumnDefinitions:newColumnNames:oldColumnNames:
regularExpressionWithPattern:options:error:
firstMatchInString:options:range:
numberOfRanges
rangeAtIndex:
substringWithRange:
componentsSeparatedByString:
schemaInsertColumnDefinition:intoTable:atIndex:
genreForGenre:
initWithPersistentId:entityClass:propertyKeysToExport:numKeys:library:
_propertyNamesFromKeys:numKeys:
initWithPersistentId:entityClass:properties:library:
_propertyNameForKey:
charValue
shortValue
allExportPropertyKeysForEntityClass:returnedCount:
archivedDataWithRootObject:requiringSecureCoding:error:
_allExportPropertyNames
initWithPersistentId:entityClass:library:
charValueForProperty:
shortValueForProperty:
longValueForProperty:
longlongValueForProperty:
dataValueForProperty:
stringValueForProperty:
hasValueForProperty:
isValid
propertyKeysToExport:
exportData
_persistentId
Tq,R,N,V_persistentId
hasCriterionInCriteriaList:forITDBTrackField:
nextFilepathForPlaylistType:withPersistentID:inLibrary:
_setContainerSeedItemPersistentIDValue:
removeObjectsAtIndexes:
predicateForCriteriaList:parentMatchedAny:
importedCriteriaList
isEvaluationOrderingDescending
orderingTermsForITTGTrackOrder:descending:
isLimitOrderingDescending
limitOrderingTerms
evaluationOrderingTerms
addMediaType:count:
_updateContainedMediaTypeInContainerWithPersistentID:connection:itemUpdateBlock:
enumerateMediaTypesWithBlock:
reloadContainedMediaTypesForContainerWithPersistID:usingConnection:
_setItemPersistentIDs:reloadContainedMediaTypes:removedMediaTypes:addedMediaTypes:notify:incrementEntityRevision:usingConnection:
_supportsOrderedTrackOperations
_maxPositionForTracksUsingConnection:
initWithDatabaseConnection:tableName:
nextPersistentID
_mediaTypesForTracksWithPersistentIDs:usingConnection:
_reloadContainedMediaTypes:removedMediaTypes:addedMediaTypes:notify:incrementEntityRevision:usingConnection:
_removeTracksAtIndexes:notify:usingConnection:
indexSetWithIndex:
removeTracksAtIndexes:notify:
longValue
_lovedPlaylistContainerPID:trackPositions:forTrackWithPersistentID:usingConnection:
_reloadContainedMediaTypes:removedMediaTypes:addedMediaTypes:notify:incrementEntityRevision:usingLibrary:connection:forContainerPersistentID:
timeIntervalSinceDate:
_allStaticItemContainersInLibrary:usingConnection:
removeNonLibraryItemsFromContainer:usingConnection:
_clearContainerMediaTypeInContainerWithPersistentID:connection:
_mediaTypesForTracksInContainerWithPersistentID:connection:
_addMediaTypesToContainerWithPersistentID:mediaTypes:connection:
_removeMediaTypesFromContainerWithPersistentID:mediaTypes:connection:
enumerateRangesUsingBlock:
initWithContainerPersistentID:updatedItemsPersistentIDs:connection:
start
waitUntilFinished
containerItemsToDelete
containerItemsToUpdate
newPosition
previousPosition
setPersistentID:
itemPersistentID
smartCriteriaCanBeEvaluated:
updateBuiltInSmartPlaylistNamesForCurrentLanguageInLibrary:
autoCreatedBuiltInSmartPlaylistsPIDs:
deleteAutoCreatedBuiltInSmartPlaylistsPIDs:inLibrary:
updateLovedPlaylistByAddingTrackWithPersistentID:inLibrary:
updateLovedPlaylistByRemovingTrackWithPersistentID:inLibrary:
removeAnyNonLibraryItemsInPersistentIDs:fromContainersInLibrary:usingConnection:
removeNonLibraryItemsFromContainersInLibrary:usingConnection:
_insertNewSmartPlaylist:criteriaBlob:evaluationOrder:limited:trackOrder:distinguishedKind:inLibrary:cachedNameOrders:
smartCriteriaPredicate
isLimitedByCount
limitingProperty
cloudDisplayOrderingTerms
displayOrderingTerms
removeAllTracks
setTracksWithPersistentIDs:notify:
appendTracksWithPersistentIDs:notify:
moveTrackFromIndex:toIndex:
removeFirstTrack
trackPersistentIds
childPlaylistPersistentIds
isBuiltInSmartPlaylist
limitedByCount
TB,R,N,GisLimitedByCount
limitOrderingDescending
TB,R,N,GisLimitOrderingDescending
initWithProperty:direction:
initWithCharacters:length:
requiresSmartLimiting
initWithEntityClass:container:predicate:orderingTerms:
container
executeQuery:withParameters:limitProperty:limitValue:
selectPersistentIDsSQLAndPropertiesForResultSet:ordered:
limitedPersistentIDs
_containerPredicate
_container
_limitedPersistentIDs
T@"NSArray",R,N,V_limitedPersistentIDs
T@"ML3Container",R,N,V_container
containerQueryWithContainer:predicate:orderingTerms:
initWithDatabaseImport:
_performImportWithTransaction:
setReturnData:
cancel
isServerImport
fileHandle
initWithData:
_processSyncPackage:withImportSession:
lastPackage
_unlinkUnavailableMediaItems
header
_processSyncHeader:
error
_processSyncError:
syncOperation
_processSyncOperation:withImportSession:
totalPackages
syncType
errorCode
errorDescription
multiverseId
mediaObjectType
_processMediaItemOperation:withImportSession:
_processPlaylistOperation:withImportSession:
operationType
playlist
_totalSyncPackageCount
_syncPackageNum
_syncSessionStarted
_syncType
_isServerImport
_readSourceState
_isReadSourceCancelled
_importFinished
_syncIdsToUnlink
_accessQueue
_readSource
initWithChapterDataRef:totalTimeInMS:
_track
finishWithError:
initWithDatabasePath:accountChangeObserver:
setAccountChangeObserver:
T@"NSString",R,C,N,V_databasePath
T@"<MLMediaLibraryAccountChangeObserver>",W,N,V_accountChangeObserver
_initWithAccountChangeObserver:
accountChangeOperationQueue
_libraryContainerPathWithError:
blockOperationWithBlock:
addOperation:
xpcClientConnection
synchronousRemoteObjectProxyWithErrorHandler:
libraryContainerPathWithCompletion:
calloutQueue
setCompletionBlock:
mediaLibraryResourcesServiceListenerEndpointWithError:
connectionWithListenerEndpoint:
initWithListenerEndpoint:
setExportedObject:
interfaceWithProtocol:
setRemoteObjectInterface:
setExportedInterface:
setInterruptionHandler:
setInvalidationHandler:
resume
libraryContainerPathWithError:
T@"MLMediaLibraryResourcesServiceClient",R,N
setXpcClientConnection:
setAccountChangeOperationQueue:
_calloutQueue
_xpcClientConnection
_accountChangeOperationQueue
T@"NSObject<OS_dispatch_queue>",R,N,V_calloutQueue
T@"NSXPCConnection",&,N,V_xpcClientConnection
T@"<MLMediaLibraryAccountChangeObserver>",&,N,V_accountChangeObserver
T@"NSOperationQueue",&,N,V_accountChangeOperationQueue
shouldValidateDatabaseForLibrary:
truncateBeforeValidating
completionHandler
_truncateDatabaseFileForLibrary:withError:
_validateLibraryDatabaseIfNecessary:withError:
userInfo
writerErrorWithCode:description:userInfo:
_internalUserAgreesToRebuildUnmigratableDatabase
_logDatabasePathDirectoryAttributes
closeAllConnections
_performDatabasePreprocessingWithLibrary:error:
_performSchemaUpgradeWithLibrary:error:
updateSystemPlaylistNamesForCurrentLanguageUsingConnection:
setAlertHeader:
setAlertMessage:
setDefaultButtonTitle:
setAlternateButtonTitle:
initWithOptions:
buttonIdentifier
presentWithCompletion:
initWithLibrary:delegate:completion:
runValidation
setTruncateBeforeValidating:
setCompletionHandler:
_truncateBeforeValidating
_completionHandler
T@"<ML3DatabaseValidationDelegate>",W,N,V_delegate
T@?,C,N,V_completionHandler
TB,N,V_truncateBeforeValidating
setStoreId:
setHasStoreId:
setPersistentId:
setHasPersistentId:
_storeId
Tq,N,V_storeId
T@"NSString",&,N,V_name
Tq,N,V_persistentId
composerForComposerName:
albumArtistForEffectiveAlbumArtistName:
diffMetadataWithPersistentID:
setContainerPersistentID:
setItemPersistentID:
setNewPosition:
setPreviousPosition:
diffMetadataWithPersistentID:containerPersistentID:itemPersistentID:newPosition:previousPosition:
containerPersistentID
_containerPersistentID
_itemPersistentID
_newPosition
_previousPosition
Tq,N,V_persistentID
Tq,N,V_containerPersistentID
Tq,N,V_itemPersistentID
Tq,N,V_newPosition
Tq,N,V_previousPosition
setContainerItemsToUpdate:
setContainerItemsToDelete:
_updatedItemsPersistentIDs
_containerItemsToUpdate
_containerItemsToDelete
T@"NSArray",&,N,V_containerItemsToUpdate
T@"NSArray",&,N,V_containerItemsToDelete
flattenedChapterDataFromSyncInfoDictionaries:trackPersistentID:
firstObject
isSuspended
importOperationWithSourceType:databaseImport:
_setClientCompletionHandler:
setProgressBlock:
_handleImportOperationCancelled:
_handleImportOperationCompleted:
operations
progress
setSuspended:
cancelAllOperations
removeObjectsInArray:
isSuspendable
waitUntilAllOperationsAreFinished
_clientCompletionHandler
progressBlock
performImport:fromSource:progressBlock:withCompletionHandler:
success
returnData
operationsCount
suspendedOperationsCount
currentOperationProgressWithError:
cancelAllImportOperations
cancelImportOperationsOriginatingFromClient:
cancelImportOperationsForSource:withCompletionHandler:
suspendImportOperations
resumeSuspendedImportOperations
_importOperations
_suspendedImportOperations
lastImportError
setLastImportError:
_importOperationQueue
_lastImportError
T@"NSError",&,N,V_lastImportError
suspended
TB,R,N,GisSuspended
initWithCharactersNoCopy:length:freeWhenDone:
fileAttributes
enumerateOrphanedAssetsUsingBlock:
_updateSystemPlaylist:withName:usingConnection:
updateOrderingLanguagesForCurrentLanguage
mergeWithDictionary:
bundleWithIdentifier:
URLsForResourcesWithExtension:subdirectory:
dataWithContentsOfURL:
initWithConfigurationDictionaries:
keyWithMediaType:artworkType:
supportedSizesCache
_supportedSizeKeysForMediaType:artworkType:
valueWithBytes:objCType:
keysOfEntriesPassingTest:
supportedSizesForMediaType:artworkType:
accessQueue
setAccessQueue:
artworkConfigurationDictionary
setArtworkConfigurationDictionary:
setSupportedSizesCache:
mainScreenScale
setMainScreenScale:
_artworkConfigurationDictionary
_supportedSizesCache
_mainScreenScale
T@"NSObject<OS_dispatch_queue>",&,N,V_accessQueue
T@"NSDictionary",&,N,V_artworkConfigurationDictionary
T@"NSMutableDictionary",&,N,V_supportedSizesCache
Td,N,V_mainScreenScale
_mediaType
clearCache
promoteNodeWithDictionaryKey:
initWithDictionaryKey:
appendNode:
isExecuting
msv_firstWhere:
oldestNode
dictionaryKey
deleteOldestNode
finalizeStatement
deleteAllNodes
initWithCacheSize:
cachedStatementForSQL:
allStatements
cacheStatement:
cacheSize
_statementsDictionary
_nodeList
_cacheSize
TQ,R,N,V_cacheSize
setDictionaryKey:
next
setNext:
_dictionaryKey
_next
T@"NSObject<NSCopying>",C,N,V_dictionaryKey
T@"ML3StatementCacheNode",&,N,V_next
firstNode
lastNode
_firstNode
_lastNode
T@"ML3StatementCacheNode",R,N,V_firstNode
T@"ML3StatementCacheNode",R,N,V_lastNode
initWithFormat:arguments:
ml_errorWithCode:
setSortName:
_sortName
T@"NSString",&,N,V_sortName
addChildIdentifiers:
addItems:
setSmartPlaylistInfo:
setParentIdentifier:
setGeniusSeedTrackIdentifier:
setCloudGlobalId:
setExternalVendorIdentifier:
setExternalVendorDisplayName:
setExternalVendorTag:
setCloudVersionHash:
setArtworkId:
setAuthorDisplayName:
setAuthorStoreURL:
setAuthorHandle:
setSubscriberURL:
setPlaylistDescription:
setCloudUniversalLibraryId:
setSecondaryArtworkId:
setPlaylistGroupingSortKey:
childIdentifiersCount
clearChildIdentifiers
childIdentifiersAtIndex:
clearItems
childIdentifiersType
itemsType
setType:
setHasType:
typeAsString:
StringAsType:
setHidden:
setHasHidden:
hasSmartPlaylistInfo
setSortType:
setHasSortType:
sortTypeAsString:
StringAsSortType:
setReversedSorting:
setHasReversedSorting:
setDistinguishedKind:
setHasDistinguishedKind:
setCloudIsSubscribed:
setHasCloudIsSubscribed:
setCloudIsCuratorPlaylist:
setHasCloudIsCuratorPlaylist:
setExternalVendorPlaylist:
setHasExternalVendorPlaylist:
setCreationDateTime:
setHasCreationDateTime:
setModificationDateTime:
setHasModificationDateTime:
setLastPlayedDateTime:
setHasLastPlayedDateTime:
setCloudIsSharingDisabled:
setHasCloudIsSharingDisabled:
setLikedState:
setHasLikedState:
setRemoteSourceType:
setHasRemoteSourceType:
hasRemoteSourceType
setOwner:
setHasOwner:
setEditable:
setHasEditable:
setPlayCount:
setHasPlayCount:
setShared:
setHasShared:
setVisible:
setHasVisible:
setAuthorStoreId:
setHasAuthorStoreId:
setMinRefreshInterval:
setHasMinRefreshInterval:
setCloudLastUpdateTime:
setHasCloudLastUpdateTime:
setSubscriberCount:
setHasSubscriberCount:
setSubscriberPlayCount:
setHasSubscriberPlayCount:
setSubscriberLikedCount:
setHasSubscriberLikedCount:
setSecondaryArtworkSourceType:
setHasSecondaryArtworkSourceType:
setPlaylistCategoryTypeMask:
setHasPlaylistCategoryTypeMask:
cloudLastUpdateTime
childIdentifiers
setChildIdentifiers:
setItems:
_authorStoreId
_cloudLastUpdateTime
_creationDateTime
_lastPlayedDateTime
_minRefreshInterval
_modificationDateTime
_artworkId
_authorDisplayName
_authorHandle
_authorStoreURL
_childIdentifiers
_cloudGlobalId
_cloudUniversalLibraryId
_cloudVersionHash
_distinguishedKind
_externalVendorDisplayName
_externalVendorIdentifier
_externalVendorTag
_geniusSeedTrackIdentifier
_items
_likedState
_parentIdentifier
_playCount
_playlistCategoryTypeMask
_playlistDescription
_playlistGroupingSortKey
_remoteSourceType
_secondaryArtworkId
_secondaryArtworkSourceType
_smartPlaylistInfo
_sortType
_subscriberCount
_subscriberLikedCount
_subscriberPlayCount
_subscriberURL
_type
_cloudIsCuratorPlaylist
_cloudIsSharingDisabled
_cloudIsSubscribed
_editable
_externalVendorPlaylist
_hidden
_owner
_reversedSorting
_shared
_visible
Ti,N,V_type
TB,N,V_hidden
T@"MIPSmartPlaylistInfo",&,N,V_smartPlaylistInfo
Ti,N,V_sortType
TB,N,V_reversedSorting
T@"MIPMultiverseIdentifier",&,N,V_parentIdentifier
T@"MIPMultiverseIdentifier",&,N,V_geniusSeedTrackIdentifier
Ti,N,V_distinguishedKind
T@"NSString",&,N,V_cloudGlobalId
TB,N,V_cloudIsSubscribed
TB,N,V_cloudIsCuratorPlaylist
T@"NSString",&,N,V_externalVendorIdentifier
T@"NSString",&,N,V_externalVendorDisplayName
T@"NSString",&,N,V_externalVendorTag
TB,N,V_externalVendorPlaylist
Tq,N,V_creationDateTime
Tq,N,V_modificationDateTime
Tq,N,V_lastPlayedDateTime
TB,N,V_cloudIsSharingDisabled
T@"NSString",&,N,V_cloudVersionHash
T@"NSString",&,N,V_artworkId
Ti,N,V_likedState
Ti,N,V_remoteSourceType
TB,N,V_owner
TB,N,V_editable
Ti,N,V_playCount
TB,N,V_shared
TB,N,V_visible
Tq,N,V_authorStoreId
T@"NSString",&,N,V_authorDisplayName
T@"NSString",&,N,V_authorStoreURL
T@"NSString",&,N,V_authorHandle
Tq,N,V_minRefreshInterval
Tq,N,V_cloudLastUpdateTime
Ti,N,V_subscriberCount
Ti,N,V_subscriberPlayCount
Ti,N,V_subscriberLikedCount
T@"NSString",&,N,V_subscriberURL
T@"NSString",&,N,V_playlistDescription
T@"NSString",&,N,V_cloudUniversalLibraryId
Ti,N,V_secondaryArtworkSourceType
T@"NSString",&,N,V_secondaryArtworkId
Ti,N,V_playlistCategoryTypeMask
T@"NSString",&,N,V_playlistGroupingSortKey
T@"NSMutableArray",&,N,V_childIdentifiers
T@"NSMutableArray",&,N,V_items
initWithDomain:code:userInfo:
whitespaceCharacterSet
addCharactersInString:
invertedSet
rangeOfCharacterFromSet:options:
shouldImportFromForeignTable
joinColumnName
foreignTableName
columnName
foreignColumnName
stringForColumnName:
whitespaceAndNewlineCharacterSet
contentsOfDirectoryAtPath:error:
initWithLongLong:
mediaFolderPathByAppendingPathComponent:
initWithBytesNoCopy:length:freeWhenDone:
startTimeInMilliseconds
imageData
imageCacheKey
URLTitle
normalizeProperties
isEqualIgnoringTimesAndTitle:
setImageData:
setStartTimeInMilliseconds:
setTitle:
setURL:
setURLTitle:
setImageCacheKey:
_imageData
_imageCacheKey
_startTimeInMilliseconds
_title
_url
_urlTitle
T@"NSData",C,N,V_imageData
T@"NSString",C,N,V_imageCacheKey
TQ,N,V_startTimeInMilliseconds
T@"NSString",C,N,V_title
T@"NSURL",C,N,V_url
T@"NSString",C,N,V_urlTitle
sharedDaemonClient
T@"ML3DaemonClient",R,N
initWithMoviePropertiesDictionary:
_setValueCopy:forKey:
_setValue:forKey:
castMembers
copyrightWarning
directors
producers
screenwriters
setCastMembers:
setCopyrightWarning:
setDirectors:
setProducers:
setScreenwriters:
setStudioName:
studioName
copyMoviePropertiesDictionary
_dictionary
T@"NSArray",C,N
initWithMovieArtistDictionary:
artistName
ITunesStoreIdentifier
setArtistName:
setITunesStoreIdentifier:
copyMovieArtistDictionary
T@"NSNumber",C,N
_columnName
_foreignTableName
_foreignColumnName
_joinColumnName
T@"NSString",R,N,V_columnName
T@"NSString",R,N,V_foreignTableName
T@"NSString",R,N,V_foreignColumnName
T@"NSString",R,N,V_joinColumnName
setSmartCriteria:
setDynamic:
setHasDynamic:
setFiltered:
setHasFiltered:
setLimited:
setHasLimited:
setLimitKind:
setHasLimitKind:
setEvaluationOrder:
setHasEvaluationOrder:
setLimitOrder:
setHasLimitOrder:
setLimitValue:
setHasLimitValue:
setEnabledItemsOnly:
setHasEnabledItemsOnly:
setReverseLimitOrder:
setHasReverseLimitOrder:
setGenius:
setHasGenius:
_evaluationOrder
_limitKind
_limitOrder
_limitValue
_smartCriteria
_dynamic
_enabledItemsOnly
_filtered
_genius
_limited
_reverseLimitOrder
TB,N,V_dynamic
TB,N,V_filtered
TB,N,V_limited
Ti,N,V_limitKind
TI,N,V_evaluationOrder
TI,N,V_limitOrder
TI,N,V_limitValue
TB,N,V_enabledItemsOnly
TB,N,V_reverseLimitOrder
T@"NSData",&,N,V_smartCriteria
TB,N,V_genius
initWithContentRatingDictionary:
ratingSystem
ratingLabel
ratingDescription
setRatingDescription:
setRatingLabel:
setRatingRank:
setRatingSystem:
copyStringRepresentation
T@"NSNumber",&,N
musicLibrary
performGeniusDatabaseReadWithBlock:
appendData:
_copyBlobData:blobAllocType:table:blobColumn:where:
openBlobInTable:column:row:readOnly:
readData:numberOfBytes:offset:
_hasAnySongs
_hasRowsInTable:
_getInt32ValueInTable:column:
_copyBlobDataAndBytesInTable:blobColumn:where:
_readBlobIntoData:table:blobColumn:where:
_readBlobForRowID:intoData:table:blobColumn:
sharedGeniusDatabase
_getInt64ValueInTable:column:where:limit:
hasGeniusDataAvailable
hasGeniusFeatureEnabled
defaultMinTrackCount
defaultTrackCount
copyGeniusConfigrationDataAndBytes
geniusConfigurationVersion
copyGeniusMetadataDataAndBytesForGlobalID:
copyGeniusSimilaritiesDataAndBytesForGlobalID:
getGeniusConfigrationDataAndBytesIntoData:
getGeniusMetadataDataAndBytesForGlobalID:intoData:
getGeniusSimilaritiesDataAndBytesForGlobalID:intoData:
useFakeGeniusData
_onBackgroundQueue_fakePopulateContainer:withSeedTrack:error:
_onBackgroundQueue_populateContainer:seedTrack:error:
_createClusterPlaylistWithSeedTracks:error:
_onBackgroundQueue_tracksFromClusterForPlaylistItemMax:error:
initWithLength:
_debugGetTracksStartingAtTrackWithPersistentID:maxTracks:stride:
_canIncludeTrackInGeniusContainer:
ignoreUnusedWarnings
populateContainer:withSeedTrack:completionBlock:
playlistControllerWithSeedTracks:error:
geniusTracksForSeedTrack:error:
tracksFromClusterForCount:error:
_sharedBlobMutableData
_echo
_echo_library
_echo_cluster_playlist
distantPast
getCString:maxLength:encoding:
progressWithTotalUnitCount:
beginSessionWithConfiguration:completion:
endSessionWithCompletion:
cancelSessionWithCompletion:
addItemsReturningResult:
addItems:completion:
updateItemsReturningResult:
updateItems:completion:
removeItemsReturningResult:
removeItems:completion:
session:failedToAddItem:shouldStop:
session:failedToUpdateItem:shouldStop:
session:failedToRemoveItem:shouldStop:
totalUnitCount
setCompletedUnitCount:
clientImportServiceListenerEndpointWithError:
sessionFailedToAddItem:completion:
sessionFailedToUpdateItem:completion:
sessionFailedToRemoveItem:completion:
sessionDidUpdateProgress:
setClasses:forSelector:argumentIndex:ofReply:
initWithConfiguration:delegate:
updateItems:
removeItems:
_sessionConfiguration
_hasActiveSession
_progress
T@"NSProgress",R,N,V_progress
_normalizedImportChapters:trackPersistentID:
flattenedChapterDataWithImportChapters:library:trackPersistentID:
currentLocale
initWithLocaleIdentifier:
localeIdentifier
availableChapterLocales
systemLocale
chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:
loadValuesAsynchronouslyForKeys:completionHandler:
time
initWithUnsignedInteger:
commonKey
dataValue
extraAttributes
initWithString:
_populateLocationPropertiesWithPath:protectionType:fromLibrary:usingConnection:
libraryContainerRelativePath:
fileURLWithPath:
initWithURL:options:
importChaptersByParsingAsset:
populateChapterDataWithImportChapters:
setWithObject:
populateArtworkCacheWithArtworkData:
populateLocationPropertiesWithPath:
populateLocationPropertiesWithPath:isProtected:
populateLocationPropertiesWithPath:protectionType:completionBlock:
chapterDataRef
_chapterDataCookieIndexMapForProperty:ofChapterTOC:
countOfGroupsForProperty:
_cachedCookieIndexMapForProperty:createIfNecessary:
chapterIndexForGroupIndex:groupingProperty:
totalTimeInMS
timeLocationInMSOfChapterAtIndex:
chapterIndexAtTimeLocationInMS:
groupIndexForChapterIndex:groupingProperty:
urlTitleTrimmingCharacterSet
countOfChapters
durationInMSOfGroupAtIndex:groupingProperty:
groupIndexAtTimeLocationInMS:groupingProperty:
timeLocationInMSOfGroupAtIndex:groupingProperty:
titlePropertyOfChapterAtIndex:
urlTitlePropertyOfChapterAtIndex:
urlPropertyOfChapterAtIndex:
_totalTimeInMS
_chapterDataRef
_picCookieIndexMap
_urlCookieIndexMap
_nameCookieIndexMap
setCloudId:
setNumTracks:
setHasNumTracks:
setNumDiscs:
setHasNumDiscs:
setCompilation:
setHasCompilation:
_cloudId
_numDiscs
_numTracks
_compilation
Ti,N,V_numTracks
Ti,N,V_numDiscs
TB,N,V_compilation
T@"NSString",&,N,V_cloudId
autoFilledTracksArePurgeable
purgeableStorageSizeWithUrgency:includeAutoFilledTracks:
_databaseFileFreeSpace
shouldOptimizeStorage
_managedPurgeableTracksTotalSizeWithUrgency:
_purgeableTracksTotalSizeWithUrgency:includeAutoFilledTracks:
_purgeableArtworkTotalSizeWithUrgency:
_clearAllCloudAssets
clearPurgeableStorageAmount:withUrgency:includeAutoFilledTracks:
_clearOrphanedAssetsOfAmount:withUrgency:
_clearDatabaseFileFreeSpace
_managedClearPurgeableTracksOfAmount:urgency:
_clearPurgeableTracksOfAmount:withUrgency:includeAutoFilledTracks:
_clearPurgeableArtworkOfAmount:withUrgency:
_clearPurgeableTracksOfAmount:withUrgency:includeCloudAssets:includeAutoFilledTracks:
cloudAssetsSharedCacheFolderPath
_enumeratePurgeableAlbumTracksForUrgency:usingBlock:
pathForBaseLocationPath:
_artworkTotalSize
_shouldPurgeAllArtworkAtUrgency:
_purgeAllArtwork
_enumeratePurgeableStreamedTracksForUrgency:usingBlock:
_nonPurgeableAlbumsQuerySQLWithUrgency:
_purgeableItemsPredicateSQLWithUrgency:
minimumPurgeableStorage
_totalSizeForAllNonCacheTracks
_purgeableAlbumsQuerySQLWithUrgency:
_enumeratePurgeableTracksForUrgency:includeAutoFilledTracks:includeCloudAssets:usingBlock:
_purgeableTrackPredicateWithUrgency:includeAutoFilledTracks:includeCloudAssets:
_shouldPurgeKeepLocalTracksForUrgency:
_allKeepLocalPlaylistTracks
_notInKeepLocalCollectionPredicate
_cloudAssetsTotalSize
clearAllRemovedTracks
setAutoFilledTracksArePurgeable:
setShouldOptimizeStorage:
setMinimumPurgeableStorage:
enumeratePurgeableAlbumTracksForUrgency:usingBlock:
clearCloudAssetSharedCache
deviceSupportsASTC
insertString:atIndex:
artworkCacheDirectoryForEffect:
artworkTokenForArtistHeroURL:
artworkSourceTypeForTrackSource:
initWithBytesNoCopy:length:encoding:freeWhenDone:
initWithName:moduleMethods:
moduleMethods
setContext:
_moduleMethods
_context
T^{sqlite3_module=i^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?},R,N,V_moduleMethods
T@"<ML3DatabaseModuleContext>",&,N,V_context
setExtendedContentName:
setMovieInfo:
setFlattenedChapterData:
setRental:
setHasRental:
setHasChapterData:
setHasHasChapterData:
hasMovieInfo
setHasAlternateAudio:
setHasHasAlternateAudio:
setHasSubtitles:
setHasHasSubtitles:
setAudioLanguage:
setHasAudioLanguage:
setAudioTrackIndex:
setHasAudioTrackIndex:
setAudioTrackId:
setHasAudioTrackId:
setSubtitleLanguage:
setHasSubtitleLanguage:
setSubtitleTrackIndex:
setHasSubtitleTrackIndex:
setRentalDuration:
setHasRentalDuration:
setRentalPlaybackDuration:
setHasRentalPlaybackDuration:
setRentalPlaybackStartedDateTime:
setHasRentalPlaybackStartedDateTime:
setRentalStartedDateTime:
setHasRentalStartedDateTime:
_rentalDuration
_rentalPlaybackDuration
_rentalPlaybackStartedDateTime
_rentalStartedDateTime
_audioLanguage
_audioTrackId
_audioTrackIndex
_extendedContentName
_flattenedChapterData
_movieInfo
_subtitleLanguage
_subtitleTrackIndex
_hasAlternateAudio
_hasChapterData
_hasSubtitles
_rental
TB,N,V_rental
TB,N,V_hasChapterData
T@"NSString",&,N,V_extendedContentName
T@"NSString",&,N,V_movieInfo
TB,N,V_hasAlternateAudio
TB,N,V_hasSubtitles
Ti,N,V_audioLanguage
Ti,N,V_audioTrackIndex
Ti,N,V_audioTrackId
Ti,N,V_subtitleLanguage
Ti,N,V_subtitleTrackIndex
Tq,N,V_rentalDuration
Tq,N,V_rentalPlaybackDuration
Tq,N,V_rentalPlaybackStartedDateTime
Tq,N,V_rentalStartedDateTime
T@"NSData",&,N,V_flattenedChapterData
setByAddingObjectsFromArray:
initWithObjects:count:
storeLinkSchemaSQL
sortMapSchemaSQL
itemSchemaSQL
domainForSyncingMusicLibraryWithLibraryPath:
serviceForSyncDomain:
uppService
playbackPositionDomain
initWithPlaybackPositionDomain:ubiquitousIdentifier:foreignDatabaseEntityID:
deletePlaybackPositionEntity:
updateForeignDatabaseWithValuesFromPlaybackPositionEntity:
updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:
updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:
_setValues:forProperties:withEntityClass:usingPersistentID:connection:error:
initWithBytes:objCType:
objCType
setErrorDescription:
hasErrorDescription
setErrorCode:
setHasErrorCode:
hasErrorCode
_errorCode
_errorDescription
T@"NSString",&,N,V_errorDescription
Ti,N,V_errorCode
setHeader:
setSyncOperation:
setLastPackage:
setHasLastPackage:
hasLastPackage
hasHeader
hasSyncOperation
hasError
_error
_header
_syncOperation
_lastPackage
TB,N,V_lastPackage
T@"MSPMediaSyncHeader",&,N,V_header
T@"MSPMediaSyncOperation",&,N,V_syncOperation
T@"MSPMediaSyncError",&,N,V_error
queryItemWithName:value:
setQueryItems:
initWithData:encoding:
dataWithContentsOfFile:options:error:
_importTracksUsingImportSession:
_importPlaylistsUsingImportSession:
_trackInfo
_playlistInfo
_albumArtistPID
Tq,R,N,V_albumArtistPID
_misgroupedTracks
_albumPID
Tq,R,N,V_albumPID
lastInsertionRowID
_removePlaylistsWithPersistentIDs:fromSource:usingTransaction:
_removeSource:usingTransaction:
_removeRemotePlaylistsWithNoSourceUsingTransation:
setTotalPackages:
setHasTotalPackages:
hasTotalPackages
setSyncType:
setHasSyncType:
hasSyncType
syncTypeAsString:
StringAsSyncType:
_totalPackages
Ti,N,V_totalPackages
Ti,N,V_syncType
parsedStorePlaylistsImportProperties
_playlistPropertiesForLookupItems:
_playlistPropertiesFromPlaylistData:
kind
metadataDictionary
artworkInfos
_bestPlaylistArtworkImageURLFromStoreArtworkVariants:
localeWithLocaleIdentifier:
setLocale:
setDateFormat:
dateFromString:
_bestArtworkImageURLFromStoreArtworkVariants:cropStyle:
sizeInfo
maxSupportedSize
artworkURLWithSize:cropStyle:format:preferP3ColorSpace:
initWithLookupItems:
initWithPlaylistsData:
playlistsData
playlistCount
_lookupItems
_playlistData
_parsedPlaylistsImportProperties
T@"NSData",R,N
allKeysForObject:
addIdMapping:forProperty:
nextPersistentIDForImportItem:
removePersistentIDFromIdMapping:
_pregeneratedIdMappings
setMultiverseId:
setMediaItem:
setPlaylist:
setOperationType:
setHasOperationType:
hasOperationType
operationTypeAsString:
StringAsOperationType:
hasMultiverseId
hasMediaItem
hasPlaylist
_multiverseId
_operationType
_playlist
Ti,N,V_operationType
T@"MIPMultiverseIdentifier",&,N,V_multiverseId
T@"MIPMediaItem",&,N,V_mediaItem
T@"MIPPlaylist",&,N,V_playlist
initWithReason:sqliteError:
initWithName:reason:userInfo:
_SQLITE_ERROR
_SQLITE_INTERNAL
_SQLITE_PERM
_SQLITE_ABORT
_SQLITE_BUSY
_SQLITE_LOCKED
_SQLITE_NOMEM
_SQLITE_READONLY
_SQLITE_INTERRUPT
_SQLITE_IOERR
_SQLITE_CORRUPT
_SQLITE_NOTFOUND
_SQLITE_FULL
_SQLITE_CANTOPEN
_SQLITE_PROTOCOL
_SQLITE_EMPTY
_SQLITE_SCHEMA
_SQLITE_TOOBIG
_SQLITE_CONSTRAINT
_SQLITE_MISMATCH
_SQLITE_MISUSE
_SQLITE_NOLFS
_SQLITE_AUTH
_SQLITE_FORMAT
_SQLITE_RANGE
_SQLITE_NOTADB
_SQLITE_ROW
_SQLITE_DONE
methodForSelector:
raise
databaseExceptionWithReason:sqliteError:
_sqliteError
T@"NSError",R,N,V_sqliteError
dateWithTimeIntervalSince1970:
libraryPathForContainerPath:
daemonClient
beginTransactionForLibrary:withClient:options:error:
endTransaction:shouldCommit:error:
_suspended
_success
_import
_progressBlock
_returnData
T@"ML3ServiceDatabaseImport",R,N,V_import
TB,N,GisSuspended,V_suspended
Tf,R,N,V_progress
T@?,C,N,V_progressBlock
TB,R,N,V_success
T@"NSError",R,N,V_error
T@"NSData",R,N,V_returnData
initWithSQL:parameters:
setObject:atIndexedSubscript:
setByAddingObject:
setParameter:forPosition:
setSql:
parameters
setParameters:
_sql
_parameters
T@"NSString",C,N,V_sql
T@"NSMutableArray",&,N,V_parameters
addLibraryIdentifiers:
libraryIdentifiersCount
clearLibraryIdentifiers
libraryIdentifiersAtIndex:
libraryIdentifiersType
setMediaObjectType:
setHasMediaObjectType:
hasMediaObjectType
mediaObjectTypeAsString:
StringAsMediaObjectType:
setMediaType:
setHasMediaType:
mediaTypeAsString:
StringAsMediaType:
setAccountId:
setHasAccountId:
setSagaId:
setHasSagaId:
setPurchaseHistoryId:
setHasPurchaseHistoryId:
setLibraryIdentifiers:
_accountId
_purchaseHistoryId
_sagaId
_libraryIdentifiers
_mediaObjectType
Ti,N,V_mediaObjectType
Ti,N,V_mediaType
Tq,N,V_accountId
Tq,N,V_sagaId
Tq,N,V_purchaseHistoryId
T@"NSMutableArray",&,N,V_libraryIdentifiers
persistentIDAtIndex:
reverseEnumeratePersistentIDsUsingBlock:
containsPersistentIDs:
reverseEnumerateSectionsUsingBlock:
backingStoreByRemovingPersistentIDs:
_sections
_initWithQuery:supportsIncrementalUpdate:
initWithQuery:
entityLimit
_onQueueAddUpdateFinishedBlock:
_updateToLibraryCurrentRevision
_onQueueInvokeAndClearUpdateFinishedBlocksWithDidUpdateResult:
_loadCurrentFullResults
_mergeChangesWithFromNewPIDs:changedPIDs:
updateToLibraryCurrentRevision
query
revision
localRevision
_backingStore
_query
_revision
_localRevision
_supportsIncrementalUpdate
_updateToLibraryCurrentRevisionCompletionBlocks
_queue
_fixedPriorityQueue
T@"ML3Query",R,N,V_query
Tq,R,N,V_revision
Tq,R,N,V_localRevision
sortedBackingStoreForDisplayOrdering
_needsSorting
_needsReversing
_sortedBackingStore
_containerPID
_entityLimit
initWithDistributedName:localName:queue:
distributedName
localName
_postEnqueuedLocalNotifications
initWithName:object:userInfo:
enqueueLocalNotification:
_postEnqueuedDistributedNotifications
notifyToken
postNotification:
_observerForDistributedName:
observerShouldForwardDistributedNotification:
addObserverForDistributedName:localName:
removeObserverWithLocalName:
_observerForLocalName:
_notificationObservers
_queuedLocalNotifications
_queuedDistributedNotificationNames
T@"ML3MusicLibrary",R,W,N,V_library
initWithProperty:direction:collation:
encodeInteger:forKey:
decodeIntegerForKey:
collation
_direction
_collation
T@"NSString",R,N,V_property
Ti,R,N,V_direction
T@"NSString",R,N,V_collation
parsedStoreItemsImportProperties
_storeItemsImportPropertiesFromLookupItems:
_storeItemsImportPropertiesFromTrackData:
_allSongItemsFromLookupItems:
storeAdamID
_importDictionaryForLookupItem:parentCollectionCache:
initWithIdentity:
setRequestContext:
setKeyProfile:
setItemIdentifiers:
setPersonalizationStyle:
allItems
artistStoreAdamID
performWithResponseHandler:
_platformMetadataItemIsMusicKind:
_platformMetadataItemIsAUCKind:
_platformMetadataItemIsVideoKind:
_platformMetadataItemIsMusicVideoKind:
_platformMetadataItemIsAUCVideoKind:
_platformMetadataItemIsTVShowKind:
_platformMetadataItemIsMovieKind:
formerStoreAdamIDs
_parentDictForItemAlbumId:
_episodeTypeFromVideoSubTypeString:
_lookupItemArtworksForArtworkDictionaries:
_bestAlbumArtworkImageURLFromStoreArtworkVariants:
_storePlatformDateFormatter
_songDurationFromOffersArray:
audioTraits
collectionStoreAdamID
_artworkTokenForItemWithCollectionID:itemID:
initWithArtworkResponseDictionary:
_allSongItemsFromCollectionLookupItem:
initWithMetadataDictionary:
compare:options:
_platformMetadataItemIsSongKind:
_platformMetadataItem:matchesKind:
_platformMetadataItemIsAUCAudioKind:
initWithTrackData:
trackCount
_artworkTokenFromLookupItem:
_trackData
_parsedStoreItemsImportProperties
tracksAreLibraryOwnedContent
isPendingMatch
playlistsAreLibraryOwnedContent
processIdentifier
auditToken
processClient
T@"ML3Client",R,N
isDaemonClient
_processID
_bundleID
T@"NSXPCConnection",R,N,V_connection
T@"NSString",R,N,V_bundleID
Ti,R,N,V_processID
TB,R,N,GisDaemonClient
_setupWatchdogTimer
_tearDownWatchdogTimer
cancelAllActiveTransactions
_createNewTransactionForLibrary:fromClient:readOnly:
_destroyTransactionForIdentifier:forceRelinquishConnection:
_transactionForIdentifier:
executeUpdate:withParameters:onTransaction:error:
_distrustQueriesDuringBlock:
arrayRepresentation
executeQuery:withParameters:options:onTransaction:error:
popToRootTransactionAndCommit:
databaseOperationForType:withLibrary:writer:
setOriginatingClient:
setOptions:
setAttributes:
originatingClient
mediaLibraryWriter:terminatedTransaction:withError:
_allDatabaseOperations
cancelAllActiveDatabaseOperationsAndWaitUntilFinished:
ml_isValid
_connectionForWriting:useThreadConnection:storeThreadLocalConnection:
setCurrentTransactionID:
_registerTransaction:
_unregisterTransaction:
mediaLibraryWriter:didDestroyTransaction:
_destroyTransaction:forceRelinquishConnection:
dateWithTimeIntervalSinceNow:
_watchdogTimerFired:
initWithFireDate:interval:target:selector:userInfo:repeats:
mainRunLoop
addTimer:forMode:
invalidate
_shouldWatchdogTransaction:
setTransactionTimeout:
executeUntrustedUpdate:withParameters:onTransaction:error:
executeUntrustedQuery:withParameters:options:onTransaction:error:
performDatabaseOperation:onLibrary:withAttributes:options:fromClient:completionHandler:
cancelActiveTransactionForClient:
cancelAllActiveDatabaseOperationsForClient:waitUntilFinished:
reset
transactionTimeout
transactionMap
databaseOperationQueue
databaseOperationSerialQueue
_watchdogTimer
_transactionTimeout
_transactionMap
_databaseOperationQueue
_databaseOperationSerialQueue
T@"NSMutableDictionary",R,N,V_transactionMap
T@"NSOperationQueue",R,N,V_databaseOperationQueue
T@"NSOperationQueue",R,N,V_databaseOperationSerialQueue
T@"<ML3MediaLibraryWriterDelegate>",W,N,V_delegate
Td,N,V_transactionTimeout
dateWithTimeIntervalSinceReferenceDate:
dateByAddingTimeInterval:
sagaAccountID
setSagaAccountID:
sagaLastKnownActiveLockerAccountDSID
setSagaLastKnownActiveLockerAccountDSID:
sagaLastGeniusUpdateDate
setSagaLastGeniusUpdateDate:
sagaLastItemPlayDataUploadDate
setSagaLastItemPlayDataUploadDate:
sagaLastPlaylistPlayDataUploadDate
setSagaLastPlaylistPlayDataUploadDate:
sagaCloudLibraryCUID
setSagaCloudLibraryCUID:
sagaCloudLibraryTroveID
setSagaCloudLibraryTroveID:
sagaDatabaseUserVersion
setSagaDatabaseUserVersion:
sagaCloudAddToPlaylistBehavior
setSagaCloudAddToPlaylistBehavior:
sagaNeedsFullUpdateAfterNextUpdate
setSagaNeedsFullUpdateAfterNextUpdate:
sagaPrefersToMergeWithCloudLibrary
setSagaPrefersToMergeWithCloudLibrary:
storefrontIdentifier
setStorefrontIdentifier:
sagaOnDiskDatabaseRevision
setSagaOnDiskDatabaseRevision:
sagaLastLibraryUpdateTime
setSagaLastLibraryUpdateTime:
sagaLastSubscribedContainersUpdateTime
setSagaLastSubscribedContainersUpdateTime:
setPreferredVideoQuality:
clearSagaCloudAccountID
clearSagaLastGeniusUpdateDate
clearSagaLastItemPlayDataUploadDate
clearSagaLastPlaylistPlayDataUploadDate
clearSagaCloudLibraryCUID
clearSagaCloudLibraryTroveID
clearSagaPrefersToMergeWithCloudLibrary
clearSagaCloudAddToPlaylistBehavior
T@"NSDate",C,N
doesNotRecognizeSelector:
initWithLibrary:outputStream:
begin:
exportTrackAdded:
exportTrackUpdated:
exportTrackDeleted:
exportPlaylistAdded:
exportPlaylistDeleted:
outputStream
_outputStream
T@"NSOutputStream",R,N,V_outputStream
_map
_initWithLibrary:cancelHandler:
copyFromLibrary:cancelHandler:
_idle
_initWithLibrary:matchString:cancelHandler:
loadFromLibrary:namesMatchingString:cancelHandler:
_matchingSet
_matchString
initWithSearchString:matchingProperties:
orderedSetWithObject:
predicateWithProperties:searchString:
_names
_searchProperties
T@"NSString",R,N,V_searchString
setConnection:
tearDownTaskAssertion
tearDownTimeoutTimer
setupTaskAssertion
setupTimeoutTimer
remoteObjectProxyWithErrorHandler:
initWithName:pid:bundleID:subsystem:reason:flags:
setTaskAssertion:
taskAssertion
timeoutTimer
setTimeoutTimer:
observerWithConnection:
hasTimedOut
setTimedOut:
setBundleID:
_timedOut
_timeoutTimer
_taskAssertion
T@"NSXPCConnection",&,N,V_connection
T@"NSObject<OS_dispatch_source>",&,N,V_timeoutTimer
T@"MSVTaskAssertion",&,N,V_taskAssertion
timedOut
TB,N,GhasTimedOut,V_timedOut
T@"NSString",&,N,V_bundleID
initWithAccountChangeObserver:
_blockExecutionForOnGoingAccountChangeIfNeeded
observers
workQueue
_unblockExecutionForFutureAccountChange
_removeObserver:
_addObserver:
accountChangeSemaphore
sharedInstance
listener:shouldAcceptNewConnection:
T@"MLMediaLibraryResourcesServiceServer",R,N
setWorkQueue:
setCalloutQueue:
setAccountChangeSemaphore:
xpcServiceListener
setXpcServiceListener:
setObservers:
_workQueue
_accountChangeSemaphore
_xpcServiceListener
_observers
T@"NSObject<OS_dispatch_queue>",&,N,V_workQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_calloutQueue
T@"NSObject<OS_dispatch_semaphore>",&,N,V_accountChangeSemaphore
T@"NSXPCListener",&,N,V_xpcServiceListener
T@"NSMutableSet",&,N,V_observers
initWithPrivacyContext:path:priorityLevel:options:
priorityLevel
_path
_priorityLevel
T@"NSString",R,C,N,V_path
TQ,R,N,V_priorityLevel
TQ,R,N,V_options
T@"ML3DatabasePrivacyContext",R,N,V_privacyContext
validateDatabaseAtPath:withCompletionHandler:
attemptDatabaseFileRecoveryAtPath:withCompletionHandler:
checkIntegrityOfDatabaseAtPath:repairFaults:withCompletionHandler:
performDiagnosticWithCompletionHandler:
recreateDatabaseAtPath:withCompletionHandler:
beginTransactionForDatabaseWithContext:completionHandler:
executeUpdate:withParameters:onTransaction:withCompletionHandler:
executeQuery:withParameters:options:onTransaction:withCompletionHandler:
endTransaction:shouldCommit:withCompletionHandler:
setOptions:withCompletionHandler:
performImport:fromSource:withUUID:completionHandler:
cancelImportOperation:completionHandler:
lockDatabaseForReason:withCompletion:
unlockDatabaseWithCompletion:
getLanguageResourcesWithCompletion:
updateSpotlightIndexForBundleID:withCompletion:
updateSpotlightIndexMetadataForItemsWithIdentifiers:bundleID:withCompletion:
updateSiriIndexMetadataForAllLibrariesWithCompletion:
performMaintenanceTasksForDatabaseAtPath:withCompletionHandler:
getMediaLibraryResourcesServiceListenerEndpointWithCompletion:
getClientImportServiceListenerEndpointWithCompletion:
serviceTerminatedTransactionWithIdentifier:error:
importOperationWithIdentifier:didUpdateWithProgress:
serviceInterface
clientInterface
multiverseIdentifierLibraryOnly:
setSortTitle:
setReleaseDateTime:
setFileSize:
setDuration:
setContentRating:
setExplicitContent:
setShortDescription:
setLongDescription:
setCopyright:
setStorefrontId:
setPurchaseHistoryToken:
setPurchaseHistoryRedownloadParams:
setYear:
setContentRatingLevel:
setSagaRedownloadParams:
setComment:
setFileKind:
setDrmVersionsCode:
setDrmPlatformIdCode:
setDrmKey1IdCode:
setDrmKey2IdCode:
setChapterMetadataUrl:
setStoreXID:
setExtrasUrl:
setCloudStatus:
setPlayCountDelta:
setSkipCount:
setSkipCountDelta:
setLastSkippedDateTime:
setRememberBookmark:
setBookmarkTimeMilliseconds:
setHasLocalAsset:
setGrouping:
setStorePlaylistId:
setLikedStateChanged:
setNeedsReporting:
setSubscriptionStoreItemId:
setIsInUsersLibrary:
setCloudAssetAvailable:
setStoreProtectionType:
setUserDisabled:
setCloudPlaybackEndpointType:
setPlaybackEndpointType:
setCloudMatchedStatus:
setInUsersCloudLibrary:
setIsPreorder:
setLikedStateChangeDate:
setReportingStoreItemId:
setAssetStoreItemId:
setSong:
setTvShow:
setMovie:
setPodcast:
setAudiobook:
protocolItem
protocolItemForDynamicUpdate
protocolItemWithProperties:inLibrary:
_albumArtistProtocolItemWithTrackProperties:inLibrary:
protocolSortTypeFromTrackOrder:
_calculateNewRun
_tableName
_validateStartingPersistentIdSQL
_nextUsedPersistentIdSQL
_currentPersistentID
_nextUsedPersistentID
bundleForClass:
bundlePath
bundleWithPath:
implementation
initWithBaseResourcesManager:
initWithAccountInfo:accountChangeObserver:
initWithLibraryResourcesService:
initWithAccountInfo:
initWithLibraryContainerIdentifier:
T@"ML3MusicLibraryResourcesManager",R,N
setImplementation:
_implementation
T@"_ML3BaseMusicLibraryResourcesManager",&,N,V_implementation
T@"ML3MusicLibraryResourcesManagerContext",&,N,V_context
_performMatchImportWithTransaction:
scannerWithString:
scanHexLongLong:
_serviceConnection
libraryPath
snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:
postNotificationName:object:userInfo:
initWithMachServiceName:options:
_setDaemonProcessInfo:
validateDatabaseAtPath:error:
performImport:fromSource:withProgressBlock:completionHandler:
_replyQueue
_serviceProxy
_progressBlocksByUUID
_setupNotifications
_tearDownNotifications
currentActiveAccountDSID
_libraryContainerPathForDSID:
_accountStoreDidChangeNotification:
_processAccountChangeNotification
initWithInitialDSID:finalDSID:accountChangeObserver:
postNotificationName:object:userInfo:deliverImmediately:
finalDSID
setCurrentActiveAccountDSID:
shouldExecuteAccountChangeOperation:reason:
databasePathForDSID:
accountChangeOperationWillStartPerformingDatabasePathChange:newDatabasePath:
_notifyClients:
setSerialQueue:
setAccountInfo:
accountStore
setAccountStore:
_currentActiveAccountDSID
_accountStore
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
T@"<_MSVAccountInformationProviding>",&,N,V_accountInfo
T@"NSString",C,N,V_currentActiveAccountDSID
T@"ACAccountStore",&,N,V_accountStore
initWithContentsOfFile:encoding:error:
selector
databasePathForUnitTest:withBasePath:
prepareUnitTestDatabaseWithSQLFromContentsOfFile:error:
unitTestableLibraryForTest:basePath:setupSQLFilenames:
replaceOccurrencesOfString:withString:options:range:
rangeOfString:options:
donatorWithItemType:originAppId:error:
donatorWithItemType:originAppId:userId:error:
_performIncrementalIndexToRevision:withDatasetStream:
_performFullIndexToRevision:withDatasetStream:
finish:
donateWithOptions:version:validity:usingStream:
_enumerateUserIDsWithBlock:
registerItem:error:
itemId
priorVersion
addOrUpdateItem:error:
removeItemWithItemId:error:
donators
_donators
T@"NSMutableArray",R,N,V_donators
musicVideoItemWithName:itemId:albumArtistId:songArtistId:albumId:genreId:
songItemWithName:itemId:albumArtistId:songArtistId:albumId:genreId:
tvEpisodeItemWithName:itemId:showId:
movieItemWithName:itemId:
audioBookItemWithName:itemId:artistId:
albumItemWithName:itemId:albumArtistId:
albumArtistItemWithName:itemId:
songArtistItemWithName:itemId:
tvShowItemWithName:itemId:
audioBookArtistItemWithName:itemId:
genreItemWithName:itemId:
playlistItemWithName:itemId:
sortedArrayUsingComparator:
jaliscoGetSortedMediaKinds:
jaliscoLastSupportedMediaKinds
setJaliscoLastSupportedMediaKinds:
jaliscoLastExcludedMediaKinds
unionSet:
minusSet:
clearJaliscoLastExcludedMediaKinds
jaliscoAccountID
setJaliscoAccountID:
jaliscoLastGeniusUpdateDate
setJaliscoLastGeniusUpdateDate:
jaliscoHasCloudGeniusData
setJaliscoHasCloudGeniusData:
jaliscoIsMusicGeniusUserEnabled
setJaliscoIsMusicGeniusUserEnabled:
jaliscoNeedsUpdateForTokens
setJaliscoNeedsUpdateForTokens:
jaliscoOnDiskDatabaseRevision
setJaliscoOnDiskDatabaseRevision:
jaliscoLastLibraryUpdateTime
setJaliscoLastLibraryUpdateTime:
clearJaliscoAccountID
clearJaliscoLastGeniusUpdateDate
sortJaliscoLastSupportedMediaKinds
updateJaliscoExcludedMediaKindsWith:excludingMediaKindsInSet:
_recreateDatabaseWithCompletion:
initWithDatabaseFilePath:
_createSQLiteErrorWithCode:description:
_lastCorruptionRestoreAttemptDate
_updateLastCorruptionRestoreAttemptDate
T@"NSString",R,N,V_path
unregister
registerModule:
removeModuleNamed:
initWithDatabaseTable:
dataSource
setDataSource:
_virtualTableName
_module
_databaseTable
_dataSource
T{shared_ptr<ML3VirtualTableDataSource>=^{ML3VirtualTableDataSource}^{__shared_weak_count}},N,V_dataSource
T@"<ML3VirtualTableDelegate>",W,N,V_delegate
T@"ML3DatabaseTable",R,N,V_databaseTable
T@"ML3DatabaseConnection",R,N,V_connection
virtualTableDidOpenCursor:
virtualTableDidCloseCursor:
_operationTypeDescription
_transaction
_beganNewTransaction
_originatingClient
_attributes
TQ,R,N,V_type
T@"ML3Client",&,N,V_originatingClient
T@"NSDictionary",C,N,V_options
T@"NSDictionary",C,N,V_attributes
T@"ML3ActiveTransaction",R,N
currentProcess
isApplication
resources
canonicalLanguageIdentifier
sectionsInfo
sortingDetails
journalingMode
cStringForColumnIndex:
initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:
groupingKey
albumArtistPersistentID
keyValue
feedURL
_albumArtistPersistentID
_groupingKey
_feedURL
Tq,R,N,V_albumArtistPersistentID
T@"NSData",R,N,V_groupingKey
T@"NSString",R,N,V_feedURL
Tq,R,N,V_seasonNumber
TB,R,N,V_compilation
parentResult
_statement
indexForColumnName:
setLimitProperty:
columnNameIndexMap
initWithParentResult:
_ensureConnectionIsOpen
setIsExecuting:
clearBindingsAfterRunning
clearBindings
_handleBusyLockWithNumberOfRetries:
_alreadyAttemptedCorruptionRecovery
_handleDiskIOError
_setAlreadyAttemptedCorruptionRecovery:
_handleDatabaseCorruption
initWithArray:
initWithStatement:connection:
setLimitProperty:limitValue:
rows
limitProperty
_columnNameIndexMap
_limitIndex
_limitProperty
T@"NSString",C,N,V_limitProperty
Tq,N,V_limitValue
initWithBytesNoCopy:length:
getBlobBytes:outLength:forColumnIndex:
valueForColumnName:
dataForColumnName:
doubleForColumnName:
intForColumnName:
int64ForColumnName:
cStringForColumnName:
numberForColumnName:
getBlobBytes:outLength:forColumnName:
_stmt
_parentResult
T@"ML3DatabaseResult",R,N,V_parentResult
exceptionWithName:reason:userInfo:
ml_bindToSQLiteStatement:atPosition:
bindValue:forParameterAtPosition:
initWithSQLiteStatement:SQL:
step
isBusy
bindInt:forParameterAtPosition:
bindInt64:forParameterAtPosition:
bindDouble:forParameterAtPosition:
bindNullForParameterAtPosition:
bindBytes:length:forParameterAtPosition:
bindBytesNoCopy:length:forParameterAtPosition:
bindUTF8String:forParameterAtPosition:
bindUTF8StringNoCopy:forParameterAtPosition:
bindUTF8StringNoCopy:length:forParameterAtPosition:
bindValuesForParameterNames:
bindValuesInArray:
setClearBindingsAfterRunning:
_clearBindingsAfterRunning
_isExecuting
_sqliteStatement
T^{sqlite3_stmt=},R,N,V_sqliteStatement
TB,N,V_clearBindingsAfterRunning
TB,N,V_isExecuting
initWithLibraryPath:trackData:playlistData:clientIdentity:
initWithLibraryPath:trackData:playlistData:
allowsKeyedCoding
encodeInt32:forKey:
encodeTCCIdentity:forKey:
decodeTCCIdentityForKey:
decodeInt32ForKey:
syncAnchor
isResetSync
isSagaEnabled
clientIdentity
_libraryPath
_fileHandle
_syncAnchor
_resetSync
_sagaEnabled
_storeAccountID
_preferredVideoQuality
_homeSharingBasePlaylistID
_tracksAreLibraryOwnedContent
_playlistsAreLibraryOwnedContent
_pendingMatch
_syncLibraryID
_suspendable
_clientIdentity
T@"NSString",R,N,V_libraryPath
T@"NSData",R,N,V_trackData
T@"NSData",R,N,V_playlistData
T@"NSFileHandle",R,N,V_fileHandle
T@"NSString",R,N,V_syncAnchor
resetSync
TB,R,N,GisResetSync,V_resetSync
sagaEnabled
TB,R,N,GisSagaEnabled,V_sagaEnabled
Tq,R,N,V_storeAccountID
Tq,R,N,V_preferredVideoQuality
TI,R,N,V_homeSharingBasePlaylistID
TB,R,N,V_tracksAreLibraryOwnedContent
TB,R,N,V_playlistsAreLibraryOwnedContent
pendingMatch
TB,R,N,GisPendingMatch,V_pendingMatch
TB,R,N,V_isServerImport
T@"NSString",R,N,V_syncLibraryID
suspendable
TB,R,N,GisSuspendable,V_suspendable
T@"NSObject<OS_tcc_identity>",R,N,V_clientIdentity
setLibraryPath:
setTrackData:
setPlaylistData:
setFileHandle:
setSyncAnchor:
setResetSync:
setSagaEnabled:
setStoreAccountID:
setHomeSharingBasePlaylistID:
setTracksAreLibraryOwnedContent:
setPlaylistsAreLibraryOwnedContent:
setPendingMatch:
setIsServerImport:
setSuspendable:
T@"NSData",C,D,N
T@"NSFileHandle",&,D,N
TB,D,N,GisResetSync
TB,D,N,GisSagaEnabled
Tq,D,N
TI,D,N
TB,D,N
TB,D,N,GisPendingMatch
TB,D,N,GisSuspendable
insertStatementWithOptions:
insertStatementForTableName:columnNames:
insertStatementUsingDefaultValuesForTableName:
rollbackTranscationStatementToSavepointName:
beginTransactionStatementWithBehaviorType:
commitTransactionStatement
rollbackTranscationStatement
savepointStatementWithName:
savepointReleaseStatementWithName:
sharedConnection
effectiveValueForSetting:
effectiveBoolValueForSetting:
_executeStatements:onConnection:withError:
_searchMatcher
_searchUTF8String
rangeOfCharacterFromSet:
initWithSearchString:options:
matchesUTF8String:
setSourceType:
setOperationCount:
setAllowAccountMerging:
_allowAccountMerging
_operationCount
T@"NSString",C,N,V_libraryPath
Ti,N,V_sourceType
TQ,N,V_operationCount
TB,N,V_allowAccountMerging
T@"ML3DatabasePrivacyContext",N,V_privacyContext
setLength:
mutableBytes
initWithSQLiteHandle:
writeData:numberOfBytes:offset:
_performImportOfTrackData:WithTransaction:
_archiveSyncPlistFiles
_syncPlistFilesFromDirectory:
_performImportFromPlistFiles:withTransaction:
_syncOperationsFromPlistFile:
_recoverExistingAsset:forTrackId:
dataWithContentsOfFile:
_processInsertTrackOperation:withImportSession:
_processUpdateTrackOperation:withImportSession:
_processDeleteTrackOperation:withImportSession:
_processInsertPlaylistOperation:withImportSession:
_processUpdatePlaylistOperation:withImportSession:
_processDeletePlaylistOperation:withImportSession:
_processUpdateDBInfoOperation:withImportSession:
_dbInfoValuesForStep:
getObjects:andKeys:count:
_processGeniusConfigPlist:
setAppleID:forDSID:
fileURLWithPathComponents:
copyItemAtPath:toPath:error:
setAttributes:ofItemAtPath:error:
_sagaIsEnabled
_cachedPIDToFilePathMap
_cachedPIDToLocationPropertyMap
_cachedSyncIDsToPIDsMap
_importedPlaylists
_devicePrimaryContainer
hasDataForProperty:
initWithSuccess:resultingDatabasePersistentIDs:
resultingDatabasePersistentIDs
_resultingDatabasePersistentIDs
T@"NSDictionary",R,C,N,V_resultingDatabasePersistentIDs
initWithLibrary:activity:
activity
_activity
T@"NSObject<OS_xpc_object>",R,N,V_activity
initWithAppleID:altDSID:
appleID
setAppleID:
altDSID
setAltDSID:
_appleID
_altDSID
T@"NSString",&,N,V_appleID
T@"NSString",&,N,V_altDSID
setAppleID:altDSID:forDSID:
_cacheEntryForDSID:
_setCacheEntry:forDSID:
getPropertiesForDSID:appleID:altDSID:
appleIDForDSID:
_propertiesCache
readonlyObservers
weakObservers
weakObjectsHashTable
T@"ML3MusicLibraryAccountChangeObserverProxy",R,N
removeAccountChangeObserver:
_weakObservers
T@"NSHashTable",R,N,V_weakObservers
T@"NSHashTable",R,N
_validateDatabaseForPath:usingLibrary:
_validatableDatabaseForPath:
currentQueueIsValidationQueue
validationSerialQueue
validationState
setValidationState:
validateDatabaseAtPath:
validateDatabaseForConnection:
isValidatingDatabaseForPath:
_validatableDatabases
setDatabasePath:
setValidationSerialQueue:
_queueID
_validationState
_validationSerialQueue
T@"NSString",C,N,V_databasePath
TQ,N,V_validationState
T@"NSObject<OS_dispatch_queue>",&,N,V_validationSerialQueue
setBundleIdentifier:
setBundle:
bundle
initWithName:protectionClass:bundleIdentifier:
setIndex:
_updateIndexedItemsWithIdentifiers:error:
index
fetchLastClientStateWithCompletionHandler:
_indexItemsFromLibrarySinceRevision:targetRevision:error:
_deleteAllIndexedItemsWithError:
_deleteIndexedItemsWithEntityStringIDs:error:
_indexTracksWithPersistentIDs:playlistsWithPersistentIDs:error:
_batchIndexWithTrackPersistentIDsToUpdate:playlistsPersistentIDsToUpdateSet:entityStringsToDelete:currentRevision:targetRevision:error:
deleteAllSearchableItemsWithCompletionHandler:
deleteSearchableItemsWithIdentifiers:completionHandler:
indexSearchableItems:completionHandler:
_enumerateSearchableItemsWithPersistentIDs:entityType:error:usingBlock:
batchCount
beginIndexBatch
endIndexBatchWithClientState:completionHandler:
_createSearchableItemsWithPersistentIDs:entityType:error:
_createSearchableItemsForTracksWithQuery:error:
_createSearchableItemsForPlaylistsWithQuery:error:
_queryForPlaylistsContainingMusicShowsMissedByQuery:inContainerPIDs:
valueForKeyPath:
initWithItemContentType:
setDisplayName:
setContentCreationDate:
setMediaTypes:
setStreamable:
setRating:
setDirector:
setProducer:
setPerformers:
setLocal:
setAudioTrackNumber:
setMusicalGenre:
setAdamID:
setExtendedContentRating:
setAlternateNames:
setLastUsedDate:
initWithUniqueIdentifier:domainIdentifier:attributeSet:
initWithContentType:
setInformation:
setBatchCount:
_index
_bundleIdentifier
_bundle
_batchCount
T@"CSSearchableIndex",&,N,V_index
T@"NSString",&,N,V_bundleIdentifier
TQ,N,V_bundle
TQ,N,V_batchCount
initialDSID
_initialDSID
_finalDSID
T@"NSString",R,C,N,V_initialDSID
T@"NSString",R,C,N,V_finalDSID
T@"<_ML3MultiUserDaemonAccountChangeOperationDelegate>",W,N,V_delegate
_removeTracksWithPersistentIDs:fromSource:usingTransaction:
initWithDatabasePath:maxConcurrentConnections:
setUseReadOnlyConnections:
setUseDistantConnections:
setConnectionsJournalingMode:
isClosed
closeConnectionsAndWaitForBusyConnections:
_localConnectionForThread:
checkoutConnection:
_setOwningPool:
_setLocalConnection:forThread:
uniqueIdentifier
_setConnection:forIdentifier:
useCount
setUseCount:
_connectionForIdentifier:
owningThread
setOwningThread:
setClosed:
handleDiagnostic:
borrowingThread
initWithDatabasePath:maxReaders:
useDistantWriterConnections
_generateDiagnostic
maxReaders
maxWriters
connectionsJournalingMode
isLocked
_readersSubPool
_writersSubPool
_identifiersConnectionsMap
_poolStorageKey
_useDistantWriterConnections
_poolLockCondition
_poolLockMutex
_closed
_locked
_maxReaders
_maxWriters
_connectionsJournalingMode
closed
TB,N,GisClosed,V_closed
T@"<ML3DatabaseConnectionPoolDelegate>",W,N,V_delegate
TQ,R,N,V_maxReaders
TQ,R,N,V_maxWriters
TQ,N,V_connectionsJournalingMode
locked
TB,R,N,GisLocked,V_locked
setBorrowingThread:
_owningThread
_borrowingThread
_useCount
T@"ML3DatabaseConnection",&,N,V_connection
T@"NSThread",&,N,V_owningThread
T@"NSThread",&,N,V_borrowingThread
TQ,N,V_useCount
_handleDatabaseDeletion
anyObject
setJournalingMode:
checkInConnection:returnToPool:
flush
setReaderAvailableConnections:
setReaderBusyConnections:
setWriterAvailableConnections:
setWriterBusyConnections:
maxConcurrentConnections
useReadOnlyConnections
useDistantConnections
_checkoutQueue
_checkinQueue
_waitingSemaphore
_availableConnections
_busyConnections
_willDeleteDatabaseNotifyToken
_homeSharingCachesClearedNotifyToken
_useReadOnlyConnections
_useDistantConnections
_maxConcurrentConnections
TQ,R,N,V_maxConcurrentConnections
TB,N,V_useReadOnlyConnections
TB,N,V_useDistantConnections
readerAvailableConnections
readerBusyConnections
writerAvailableConnections
writerBusyConnections
_readerAvailableConnections
_readerBusyConnections
_writerAvailableConnections
_writerBusyConnections
T@"NSArray",R,N,V_readerAvailableConnections
T@"NSArray",R,N,V_readerBusyConnections
T@"NSArray",R,N,V_writerAvailableConnections
T@"NSArray",R,N,V_writerBusyConnections
initWithSectionsInfo:sortingDetails:canonicalLanguageIdentifier:
_sectionsInfo
_sortingDetails
_canonicalLanguageIdentifier
T@"NSDictionary",R,N,V_sectionsInfo
T@"NSDictionary",R,N,V_sortingDetails
T@"NSString",R,N,V_canonicalLanguageIdentifier
_buildLanguageResources
T@"ML3LanguageResourceManager",R,N
cachedResources
setCachedResources:
_cachedResources
T@"ML3LanguageResources",&,N,V_cachedResources
T@"ML3LanguageResources",R,N
_isDeviceMediaLibraryDatabase
_openWithFlags:
_databaseFilesAreWritable
_createDatabaseDirectoryIfNonexistent
_handleConnectionErrorWhileOpening:
_logDatabaseFileDebugInformation
_closeAndFlushTransactionState:
setTransactionLevel:
_finalizeAllStatements
_handleZombieSQLiteConnection:
_logCurrentError
_resetUnfinalizedStatements
_internalExecuteQuery:withParameters:limitProperty:limitValue:
transactionMarkedForRollBack
_internalExecuteUpdate:withParameters:error:
transactionLevel
_internalBeginTransactionWithBehaviorType:
_internalEndTransactionAndCommit:
_executeTransactionCommitBlocks:
performTransactionWithBlock:usingBehaviorType:
registerFunctionName:argumentCount:functionPointer:userData:
_registeredModuleNamed:
callStackSymbols
_databaseFilePaths
_validatePreparedStatement:error:
logQueryPlans
setLogQueryPlans:
_internalLogQuery:withParameters:limitProperty:limitValue:
checkpointDatabase
isWritableFileAtPath:
_databaseFileExists
registerModuleName:moduleMethods:
_owningPool
_shortDescription
_createDatabaseFileIfNonexistent
_logCurrentErrorWhilePerformingStatementOperation:statementSQL:
_logCurrentErrorWhilePerformingStatementOperation:statement:
connectionDelegate
protectionLevel
setProtectionLevel:
automaticCheckpointingEnabled
setAutomaticCheckpointingEnabled:
checkpointStatementThreshold
setCheckpointStatementThreshold:
_sqlitedb
_isOpen
_statementCache
_statementsSinceLastCheckpoint
_transactionLevel
_nestedTransactionWantsToRollback
_enqueuedTransactionCommitBlocks
_registeredFunctions
_registeredModules
_iTunesExtensions
_isHandlingIOError
_isReadOnly
_automaticCheckpointingEnabled
_logQueryPlans
_connectionDelegate
_journalingMode
_protectionLevel
_currentTransactionID
_uniqueIdentifier
_checkpointStatementThreshold
T@"<ML3DatabaseConnectionDelegate>",W,N,V_connectionDelegate
T@"ML3DatabasePrivacyContext",&,N,V_privacyContext
TB,N,SsetReadOnly:,V_isReadOnly
TQ,N,V_journalingMode
TQ,N,V_protectionLevel
T@"NSUUID",R,N,V_currentTransactionID
T@"NSUUID",R,N,V_uniqueIdentifier
TB,N,V_automaticCheckpointingEnabled
TQ,N,V_checkpointStatementThreshold
TB,N,V_logQueryPlans
_serviceTerminatedTransactionNotification:
removeObserver:name:object:
_internalBeginTransactionWithBehaviorType:isRetry:
isMainThread
initWithDistantConnection:sql:parameters:
shouldCacheStatements
distantDelegate
setDistantDelegate:
_mediaLibraryService
_connectionOpen
_distantDelegate
T@"<ML3DatabaseDistantConnectionDelegate>",W,N,V_distantDelegate
_criteriaListDescription:level:
_stringForCriterionMatchKey:
_stringForCriterionMatchType:
_stringForCriterionBuffer:
_addUnitesForCriterionInfo:
stringFromDate:
_booleanStringForCriteriaInfo:
_stringForTrackFieldMediaKind:
_stringForTrackFieldCloudStatus:
_convertNumericValueFromCriterionMatchKey:criteriaValue:
_formatTime:
_stringStringForCriteriaInfo:
_numericStringForCriteriaInfo:
_nonzeroStringForCriteriaInfo:
_dateStringForCriteriaInfo:
criteriaListDescription
_localEnumerateRowsWithBlock:
_remoteEnumerateRowsWithBlock:
_fetchRowsIfEmpty
initWithStatement:
distantConnection
_cachedRows
_cachedColumnNameIndexMap
_distantConnection
T@"ML3DatabaseDistantConnection",R,N,V_distantConnection
T@"NSString",R,N,V_sql
T@"NSArray",R,N,V_parameters
_performDAAPImportWithTransaction:
_onQueueFlushAndWait:
statementThreshold
statementQueue
existingTransactionIdentifier
_xpcService
_statementThreshold
_statementQueue
_existingTransactionIdentifier
TQ,N,V_statementThreshold
T@"NSMutableArray",R,N,V_statementQueue
T@"NSUUID",&,N,V_existingTransactionIdentifier
TQ,N,V_priorityLevel
isAbsolutePath
_pathForResourceFileOrFolder:basePath:relativeToBase:isFolder:
_controlDirectoryPathWithBasePath:
_mediaResourceRequiresLibraryContainerAccess:
T@"NSString",R,C,N,V_libraryContainerIdentifier
cachedLibraryContainerPath
libraryResourcesServices
setCachedLibraryContainerPath:
setLibraryResourcesServices:
_cachedLibraryContainerPath
_libraryResourcesServices
T@"<MLMediaLibraryResourcesServiceProtocol>",&,N,V_libraryResourcesServices
T@"NSString",C,N,V_cachedLibraryContainerPath
setStoreAssetFlavor:
setHasReleaseDateTime:
setHasFileSize:
setHasDuration:
setHasContentRating:
setHasExplicitContent:
hasExplicitContent
setHasYear:
setHasContentRatingLevel:
setHasFileKind:
setFamilyAccountId:
setHasFamilyAccountId:
setHasDrmVersionsCode:
setHasDrmPlatformIdCode:
setHasDrmKey1IdCode:
setHasDrmKey2IdCode:
hasChapterMetadataUrl
setPurchaseDateTime:
setHasPurchaseDateTime:
setHasCloudStatus:
setHasPlayCountDelta:
setHasSkipCount:
setHasSkipCountDelta:
setHasLastSkippedDateTime:
setHasRememberBookmark:
setHasBookmarkTimeMilliseconds:
setHasStorePlaylistId:
setHasHasLocalAsset:
setHasNeedsReporting:
setHasLikedStateChanged:
setHasIsInUsersLibrary:
setHasCloudAssetAvailable:
setHasStoreProtectionType:
setHasUserDisabled:
setHasCloudPlaybackEndpointType:
setHasPlaybackEndpointType:
setHasCloudMatchedStatus:
setHasInUsersCloudLibrary:
setHasIsPreorder:
setHasLikedStateChangeDate:
setHasStorefrontId:
setHasPurchaseHistoryToken:
setHasSubscriptionStoreItemId:
setHasReportingStoreItemId:
setHasAssetStoreItemId:
hasSong
hasMovie
hasTvShow
hasPodcast
hasAudiobook
explicitContent
purchaseDateTime
_assetStoreItemId
_bookmarkTimeMilliseconds
_drmKey1IdCode
_drmKey2IdCode
_drmPlatformIdCode
_duration
_familyAccountId
_fileSize
_lastSkippedDateTime
_likedStateChangeDate
_purchaseDateTime
_releaseDateTime
_reportingStoreItemId
_storePlaylistId
_storefrontId
_subscriptionStoreItemId
_audiobook
_chapterMetadataUrl
_cloudMatchedStatus
_cloudPlaybackEndpointType
_cloudStatus
_comment
_contentRating
_contentRatingLevel
_copyright
_drmVersionsCode
_extrasUrl
_fileKind
_grouping
_longDescription
_movie
_playCountDelta
_playbackEndpointType
_podcast
_purchaseHistoryRedownloadParams
_purchaseHistoryToken
_sagaRedownloadParams
_skipCount
_skipCountDelta
_song
_sortTitle
_storeAssetFlavor
_storeProtectionType
_storeXID
_tvShow
_year
_cloudAssetAvailable
_explicitContent
_hasLocalAsset
_inUsersCloudLibrary
_isInUsersLibrary
_isPreorder
_likedStateChanged
_needsReporting
_rememberBookmark
_userDisabled
T@"NSString",&,N,V_title
T@"NSString",&,N,V_sortTitle
Tq,N,V_releaseDateTime
Tq,N,V_fileSize
Tq,N,V_duration
Ti,N,V_contentRating
TB,N,V_explicitContent
T@"NSString",&,N,V_shortDescription
T@"NSString",&,N,V_longDescription
T@"NSString",&,N,V_copyright
Ti,N,V_year
Ti,N,V_contentRatingLevel
T@"NSString",&,N,V_comment
Ti,N,V_fileKind
Tq,N,V_familyAccountId
Ti,N,V_drmVersionsCode
Tq,N,V_drmPlatformIdCode
Tq,N,V_drmKey1IdCode
Tq,N,V_drmKey2IdCode
T@"NSString",&,N,V_chapterMetadataUrl
T@"NSString",&,N,V_storeAssetFlavor
T@"NSString",&,N,V_extrasUrl
Tq,N,V_purchaseDateTime
Ti,N,V_cloudStatus
Ti,N,V_playCountDelta
Ti,N,V_skipCount
Ti,N,V_skipCountDelta
Tq,N,V_lastSkippedDateTime
TB,N,V_rememberBookmark
Tq,N,V_bookmarkTimeMilliseconds
Tq,N,V_storePlaylistId
TB,N,V_hasLocalAsset
T@"NSString",&,N,V_grouping
TB,N,V_needsReporting
TB,N,V_likedStateChanged
TB,N,V_isInUsersLibrary
TB,N,V_cloudAssetAvailable
Ti,N,V_storeProtectionType
TB,N,V_userDisabled
Ti,N,V_cloudPlaybackEndpointType
Ti,N,V_playbackEndpointType
Ti,N,V_cloudMatchedStatus
TB,N,V_inUsersCloudLibrary
TB,N,V_isPreorder
Tq,N,V_likedStateChangeDate
Tq,N,V_storefrontId
Ti,N,V_purchaseHistoryToken
T@"NSString",&,N,V_purchaseHistoryRedownloadParams
T@"NSString",&,N,V_sagaRedownloadParams
T@"NSString",&,N,V_storeXID
Tq,N,V_subscriptionStoreItemId
Tq,N,V_reportingStoreItemId
Tq,N,V_assetStoreItemId
T@"MIPSong",&,N,V_song
T@"MIPMovie",&,N,V_movie
T@"MIPTVShow",&,N,V_tvShow
T@"MIPPodcast",&,N,V_podcast
T@"MIPAudiobook",&,N,V_audiobook
initWithToken:relativePath:artworkType:musicLibrary:
relativePath
_onSerialQueue_faultInProperties
artworkToken
_interestDataFromInterestDictionary:
_interestDictionaryFromInterestData:
fileURLForSize:
fileURLForEffect:
artworkType
interestDictionary
setInterestDictionary:
_interestDictionary
_musicLibrary
_artworkToken
_relativePath
_originalFileURL
T@"ML3MusicLibrary",R,N,V_musicLibrary
T@"NSString",R,N,V_artworkToken
Tq,R,N,V_artworkType
Tq,R,N,V_sourceType
T@"NSString",R,N,V_relativePath
T@"NSDictionary",&,N,V_interestDictionary
T@"NSURL",R,N,V_originalFileURL
_numberOrZeroForColumnIndex:
_arrayRepresentation
initWithOutputStream:queue:
_writSyncPackageToStream:
stop
writeAllData:error:
initWithLibrary:outputStream:syncType:
_libraryUUID
_streamWriter
_stats
_sessionStartTime
@16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@40@0:8q16Q24^@32
@40@0:8@16Q24^@32
@40@0:8@16@24@32
v16@0:8
@"ML3DatabaseTable"
@"NSArray"
B24@0:8^@16
{_NSRange=QQ}24@0:8B16B20
@24@0:8B16B20
@32@0:8@16q24
q16@0:8
@24@0:8q16
d16@0:8
v24@0:8d16
@"ML3Entity"
@"NSString"
@"NSDictionary"
@24@0:8@16
@20@0:8i16
i16@0:8
@48@0:8@16Q24Q32@40
@24@0:8^{_NSZone=}16
v20@0:8i16
v20@0:8B16
v24@0:8@16
@"MIPArtist"
@"MIPSeries"
{?="seasonNumber"b1"videoQuality"b1}
v24@0:8q16
@"MIPAlbum"
@"MIPGenre"
@"MIPPlaybackInfo"
{?="geniusId"b1"audioFormat"b1"discNumber"b1"lyricsChecksum"b1"trackNumber"b1"userRating"b1"excludeFromShuffle"b1"hasVideo"b1}
@48@0:8@16@24@32@40
@"ML3MusicLibrary"
@"ML3MediaLibraryWriter"
@"ML3Client"
@20@0:8B16
@32@0:8^{_NSZone=}16#24
{?="libraryId"b1}
B28@0:8i16@20
{shared_ptr<ML3DAAPImportItem>=^{ML3DAAPImportItem}^{__shared_weak_count}}32@0:8{shared_ptr<ML3CPP::Element>=^{Element}^{__shared_weak_count}}16
{shared_ptr<ML3DAAPImportItem>=^{ML3DAAPImportItem}^{__shared_weak_count}}80@0:8{shared_ptr<ML3CPP::Element>=^{Element}^{__shared_weak_count}}16{vector<long long, std::allocator<long long>>=^q^q{__compressed_pair<long long *, std::allocator<long long>>=^q}}32{vector<std::unordered_set<std::string>, std::allocator<std::unordered_set<std::string>>>=^v^v{__compressed_pair<std::unordered_set<std::string> *, std::allocator<std::unordered_set<std::string>>>=^v}}56
v20@0:8f16
B28@0:8@16B24
B20@0:8C16
B20@0:8i16
B32@0:8{shared_ptr<ML3CPP::Element>=^{Element}^{__shared_weak_count}}16
B24@0:8q16
B80@0:8{shared_ptr<ML3CPP::Element>=^{Element}^{__shared_weak_count}}16{vector<long long, std::allocator<long long>>=^q^q{__compressed_pair<long long *, std::allocator<long long>>=^q}}32{vector<std::unordered_set<std::string>, std::allocator<std::unordered_set<std::string>>>=^v^v{__compressed_pair<std::unordered_set<std::string> *, std::allocator<std::unordered_set<std::string>>>=^v}}56
@"NSError"
{shared_ptr<DAAPParserDelegate>="__ptr_"^{DAAPParserDelegate}"__cntrl_"^{__shared_weak_count}}
v48@0:8{?=[8I]}16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@48@0:8{?=[8I]}16
@"ML3DatabaseConnection"
@"NSLock"
@"MSVXPCTransaction"
@"NSUUID"
@32@0:8@16@24
@56@0:8@16@24@32@40B48B52
@"<MLMediaLibraryResourcesServiceProtocol>"
@"<_MSVAccountInformationProviding>"
@"<MLMediaLibraryAccountChangeObserver>"
@28@0:8@16i24
@?16@0:8
v24@0:8@?16
^?16@0:8
v24@0:8^?16
^v16@0:8
v24@0:8^v16
B48@0:8@16@24q32@40
B36@0:8i16q20@28
B36@0:8@16i24@28
B44@0:8@16i24r^q28Q36
B40@0:8@16q24i32i36
B48@0:8@16q24i32i36@40
v72@0:8@16@24@32r^q40Q48q56@?64
@40@0:8r^@16Q24@32
@32@0:8@16^@24
@36@0:8@16@24B32
@44@0:8@16@24B32^@36
@32@0:8q16@24
@32@0:8@16#24
@40@0:8@16@24q32
B56@0:8@16@24@32@40@48
v32@0:8@16@24
B64@0:8r^q16Q24@32@40@48@56
B52@0:8@16i24r^q28Q36@44
v40@0:8@16q24@?32
v40@0:8^@16r^@24Q32
B40@0:8r^@16r^@24Q32
B32@0:8@16@24
v44@0:8@16@24B32@?36
B40@0:8@16@24@32
B32@0:8@16^@24
@"ML3ClientImportSessionConfiguration"
v28@0:8@16B24
v24@0:8@"ML3DatabaseConnection"16
v32@0:8@"ML3DatabaseConnection"16@"NSError"24
v28@0:8@"ML3DatabaseConnection"16B24
v32@0:8@"ML3DatabaseConnectionPool"16@"ML3DatabaseConnection"24
@28@0:8@16B24
@36@0:8@16B24@?28
@44@0:8@16@24B32@?36
^{iPhoneSortKeyBuilder=}16@0:8
@24@0:8#16
v28@0:8B16@?20
v32@0:8@?16@?24
@24@0:8Q16
Q24@0:8Q16
v28@0:8q16I24
v56@0:8q16Q24i32@36B44@?48
v44@0:8q16Q24i32@?36
v44@0:8q16q24i32@?36
B40@0:8q16q24q32
Q36@0:8q16Q24i32
v28@0:8i16@?20
v36@0:8i16@20@?28
v36@0:8@16i24@?28
v44@0:8@16i24@28@?36
q24@0:8Q16
q36@0:8q16Q24B32
q24@0:8q16
q32@0:8q16Q24
v32@0:8@16@?24
B44@0:8@16q24q32I40
B52@0:8@16@24q32q40I48
v40@0:8@16@24q32
v56@0:8q16q24@32q40q48
v64@0:8q16q24@32q40q48@56
v48@0:8q16q24q32q40
v56@0:8q16q24q32q40@48
v56@0:8q16q24q32d40@48
v60@0:8q16q24q32d40B48@52
v56@0:8q16q24q32d40@?48
v48@0:8q16q24q32@?40
B24@0:8Q16
B32@0:8Q16@24
v40@0:8Q16Q24Q32
B48@0:8@16q24q32@40
B56@0:8@16q24q32@40@48
B52@0:8@16q24q32B40@44
B60@0:8q16q24q32d40B48@52
v40@0:8@16@24@?32
v44@0:8@16q24I32@?36
@"ML3AccountCacheDatabase"
@"ML3DatabasePrivacyContext"
@"NSMapTable"
@"ML3DatabaseConnectionPool"
^{iPhoneSortKeyBuilder=}
@"ML3MusicLibraryResourcesManager"
@"ML3LibraryNotificationManager"
@"NSObject<OS_dispatch_queue>"
@"<ML3MusicLibraryDelegate>"
@"MIPMultiverseIdentifier"
@"MIPMediaItem"
B32@0:8q16@24
v40@0:8@16@24@32
B40@0:8@16@24^q32
B44@0:8@16@24i32^q36
B36@0:8@16@24B32
B44@0:8@16@24B32@36
v48@0:8@16@24@32@?40
@24@0:8d16
B28@0:8@16i24
@"NSMutableSet"
@76@0:8@16#24@32@40B48@52@60q68
Q24@0:8@16
v36@0:8@16B24@?28
v44@0:8@16B24@?28@?36
v52@0:8@16B24@28@?36@?44
@40@0:8@16@24Q32
@48@0:8@16@24@32Q40
@52@0:8@16@24@32@40B48
@64@0:8@16@24@32@40B48B52Q56
@32@0:8@16B24B28
v24@0:8Q16
@"ML3Predicate"
@"ML3AggregateQuery"
@44@0:8@16@24@32B40
@56@0:8@16@24@32@40q48
@52@0:8@16@24@32B40q44
{?="durationInSamples"b1"gaplessEncodingDrainCode"b1"gaplessFrameResyncCode"b1"gaplessHeuristicCode"b1"gaplessHeuristicDelayCode"b1"startTime"b1"stopTime"b1"volumeNormalizationEnergy"b1"beatsPerMinute"b1"bitRate"b1"codecSubType"b1"codecType"b1"dataKind"b1"progressionDirection"b1"relativeVolume"b1"sampleRate"b1}
B36@0:8@16i24^@28
B52@0:8@16@24q32I40q44
d20@0:8I16
B40@0:8@16@24q32
q20@0:8i16
@52@0:8q16@24@32@40B48
@48@0:8@16i24@28q36B44
@36@0:8@16i24@28
@"NSData"
B32@0:8@16B24B28
{?=qq}24@0:8@16
@32@0:8@16^B24
q24@0:8@16
B32@0:8#16@24
B32@0:8@16^B24
@32@0:8@16^{iPhoneSortKeyBuilder=}24
q32@0:8@16^{iPhoneSortKeyBuilder=}24
q40@0:8@16@24Q32
@"NSMutableDictionary"
@"NSMutableArray"
v32@0:8@16Q24
v32@0:8Q16@24
@"NSEnumerator"
@40@0:8r^@16r^@24Q32
v32@0:8@16#24
B36@0:8@16@24i32
@"NSSet"
@36@0:8@16@24i32
@40@0:8@16@24i32B36
@48@0:8@16@24i32B36@40
@44@0:8@16@24i32@36
@56@0:8@16@24i32B36@40@48
@36@0:8r^q16Q24B32
@40@0:8@16q24q32
@40@0:8{_NSRange=QQ}16Q32
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
{_NSRange="location"Q"length"Q}
v40@0:8@16Q24@32
@40@0:8@16#24@32
B40@0:8@16@24Q32
B48@0:8@16@24@32@40
^I32@0:8#16^I24
@40@0:8q16#24@32
@52@0:8q16#24^I32I40@44
@48@0:8q16@24@32@40
@20@0:8I16
c20@0:8I16
s20@0:8I16
i20@0:8I16
q20@0:8I16
B20@0:8I16
^I24@0:8^I16
@28@0:8^I16I24
@36@0:8i16Q20@28
B28@0:8^{SearchCriteriaList=}16i24
@28@0:8^{SearchCriteriaList=}16B24
v40@0:8q16@24@?32
v32@0:8q16@24
v40@0:8q16@24@32
v48@0:8^@16^@24@32@40
v64@0:8@16@24I32B36I40i44@48@56
B68@0:8B16@20@28B36B40@44@52q60
^{SearchCriteriaList=}16@0:8
B32@0:8Q16Q24
B52@0:8B16@20@28B36B40@44
B36@0:8@16B24@28
B60@0:8@16B24@28@36B44B48@52
@24@0:8I16B20
@48@0:8#16@24@32@40
@"ML3Container"
B32@0:8@16^v24
@"NSObject<OS_dispatch_source>"
@32@0:8^{ChapterData=}16@24
@"ML3Track"
v24@0:8@?<v@?@"NSString">16
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v24@0:8@?<v@?B@"NSError">16
@24@0:8^@16
@"NSString"24@0:8^@16
@"NSXPCConnection"
@"NSOperationQueue"
@40@0:8@16@24@?32
@"<ML3DatabaseValidationDelegate>"
{?="persistentId"b1"storeId"b1}
@56@0:8q16q24q32q40q48
@40@0:8q16@24@32
v48@0:8@16Q24@?32@?40
f24@0:8^@16
v32@0:8Q16@?24
@28@0:8I16q20
@"ML3StatementCacheList"
@"NSObject<NSCopying>"
@"ML3StatementCacheNode"
@32@0:8Q16@24
{?="storeId"b1}
i24@0:8@16
@"MIPSmartPlaylistInfo"
{?="authorStoreId"b1"cloudLastUpdateTime"b1"creationDateTime"b1"lastPlayedDateTime"b1"minRefreshInterval"b1"modificationDateTime"b1"storeId"b1"distinguishedKind"b1"likedState"b1"playCount"b1"playlistCategoryTypeMask"b1"remoteSourceType"b1"secondaryArtworkSourceType"b1"sortType"b1"subscriberCount"b1"subscriberLikedCount"b1"subscriberPlayCount"b1"type"b1"cloudIsCuratorPlaylist"b1"cloudIsSharingDisabled"b1"cloudIsSubscribed"b1"editable"b1"externalVendorPlaylist"b1"hidden"b1"owner"b1"reversedSorting"b1"shared"b1"visible"b1}
@"NSURL"
v20@0:8I16
I16@0:8
{?="evaluationOrder"b1"limitKind"b1"limitOrder"b1"limitValue"b1"dynamic"b1"enabledItemsOnly"b1"filtered"b1"genius"b1"limited"b1"reverseLimitOrder"b1}
I32@0:8@16@24
Q44@0:8@16@24@32I40
B52@0:8^@16i24@28@36@44
B48@0:8Q16@24r*32r*40
@32@0:8Q16^@24
@36@0:8Q16Q24i32
B40@0:8@16@24^@32
@"NSMutableData"
v32@0:8@"ML3ClientImportItem"16@?<v@?B@"NSError">24
v32@0:8@"ML3ClientImportSessionConfiguration"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSError">16
v32@0:8@"NSArray"16@?<v@?@"ML3ClientImportResult"@"NSError">24
@"<ML3ClientImportSessionDelegate>"
@"NSProgress"
{?="audioFormat"b1"discNumber"b1"trackNumber"b1"userRating"b1"excludeFromShuffle"b1"hasVideo"b1}
v32@0:8@16q24
B48@0:8@16q24@32@40
^{ChapterData=}16@0:8
^^I28@0:8i16@20
@28@0:8^{ChapterData=}16I24
^I24@0:8i16B20
I20@0:8i16
I24@0:8I16i20
I20@0:8I16
^{ChapterData=}
{?="persistentId"b1"storeId"b1"numDiscs"b1"numTracks"b1"userRating"b1"compilation"b1}
q28@0:8Q16B24
Q32@0:8q16Q24
Q32@0:8Q16Q24
v40@0:8Q16B24B28@?32
@32@0:8Q16B24B28
q40@0:8q16Q24B32B36
@32@0:8{CGSize=dd}16
B48@0:8q16q24q32q40
@32@0:8q16d24
@32@0:8@16^{sqlite3_module=i^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}24
^{sqlite3_module=i^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}16@0:8
^{sqlite3_module=i^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}
@"<ML3DatabaseModuleContext>"
{?="rentalDuration"b1"rentalPlaybackDuration"b1"rentalPlaybackStartedDateTime"b1"rentalStartedDateTime"b1"audioLanguage"b1"audioTrackId"b1"audioTrackIndex"b1"subtitleLanguage"b1"subtitleTrackIndex"b1"videoQuality"b1"hasAlternateAudio"b1"hasChapterData"b1"hasSubtitles"b1"rental"b1}
B32@0:8@16r*24
B64@0:8@16@24#32q40@48^@56
{?=qq}16@0:8
@32@0:8{?=qq}16
{?="errorCode"b1}
@"MSPMediaSyncError"
@"MSPMediaSyncHeader"
@"MSPMediaSyncOperation"
{?="type"b1"lastPackage"b1}
B24@0:8^v16
@32@0:8q16q24
{?="syncType"b1"totalPackages"b1}
v28@0:8@16I24
q32@0:8{shared_ptr<ML3ImportItem>=^{ML3ImportItem}^{__shared_weak_count}}16
@"MIPPlaylist"
{?="operationType"b1}
@36@0:8i16@20B28B32
f16@0:8
@"ML3ServiceDatabaseImport"
{?="accountId"b1"purchaseHistoryId"b1"sagaId"b1"storeId"b1"mediaObjectType"b1"mediaType"b1}
B24@0:8r^v16
@24@0:8r^v16
{vector<long long, std::allocator<long long>>="__begin_"^q"__end_"^q"__end_cap_"{__compressed_pair<long long *, std::allocator<long long>>="__value_"^q}}
{vector<unsigned char, std::allocator<unsigned char>>="__begin_"*"__end_"*"__end_cap_"{__compressed_pair<unsigned char *, std::allocator<unsigned char>>="__value_"*}}
v32@0:8r^v16^v24
@"ML3QueryResultSet_BackingStore"
@"ML3Query"
B24@0:8@"MSVDistributedNotificationObserver"16
@"NSMutableOrderedSet"
d24@0:8@16
@"NSDateFormatter"
@"ML3StoreItemTrackData"
@"ML3StoreItemPlaylistData"
@48@0:8@16@24Q32^@40
B48@0:8@16@24@32^@40
@56@0:8@16@24@32@40^@48
B36@0:8@16B24^@28
v64@0:8Q16@24@32@40@48@?56
@"NSTimer"
@"<ML3MediaLibraryWriterDelegate>"
@"NSOutputStream"
v28@0:8I16Q20
{map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>>="__tree_"{__tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>>="__value_"Q}}}
@32@0:8@16@?24
{unordered_map<long long, NSString *, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, NSString *>>>="__table_"{__hash_table<std::__hash_value_type<long long, NSString *>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, NSString *>, std::hash<long long>, std::equal_to<long long>, true>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, NSString *>, std::equal_to<long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<long long, NSString *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, NSString *>, std::hash<long long>, std::equal_to<long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, NSString *>, std::equal_to<long long>, std::hash<long long>, true>>="__value_"f}}}
{unordered_set<long long, std::hash<long long>, std::equal_to<long long>, std::allocator<long long>>="__table_"{__hash_table<long long, std::hash<long long>, std::equal_to<long long>, std::allocator<long long>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<long long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<long long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<long long, void *> *>, std::allocator<std::__hash_node<long long, void *>>>="__value_"{__hash_node_base<std::__hash_node<long long, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<long long>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<long long>>="__value_"f}}}
@"ML3SpotlightNameCache"
v52@0:8@16@24@32B40@?44
@"MSVTaskAssertion"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@"NSObject<OS_dispatch_semaphore>"
@"NSXPCListener"
@48@0:8@16@24Q32Q40
v56@0:8@16@24@32@40@?48
v48@0:8Q16@24@32@?40
v48@0:8@16Q24@32@?40
v32@0:8q16@?24
v36@0:8@"NSString"16B24@?<v@?B@"NSError">28
v24@0:8@?<v@?@"NSString"@"NSError">16
v32@0:8@"MLTransactionContext"16@?<v@?@"NSUUID"@"NSError">24
v48@0:8@"NSString"16@"NSArray"24@"NSUUID"32@?<v@?B@"NSError">40
v56@0:8@"NSString"16@"NSArray"24@"NSDictionary"32@"NSUUID"40@?<v@?@"NSData"@"NSError">48
v36@0:8@"NSUUID"16B24@?<v@?B@"NSError">28
v48@0:8Q16@"NSDictionary"24@"NSDictionary"32@?<v@?B@"NSError">40
v32@0:8@"NSDictionary"16@?<v@?B@"NSError">24
v48@0:8@"ML3DatabaseImport"16Q24@"NSUUID"32@?<v@?B@"NSError"@"NSData">40
v32@0:8Q16@?<v@?B@"NSError">24
v32@0:8q16@?<v@?B@"NSError">24
v24@0:8@?<v@?@"ML3LanguageResources"@"NSError">16
v40@0:8@"NSArray"16@"NSString"24@?<v@?B@"NSError">32
v24@0:8@?<v@?@"NSXPCListenerEndpoint"@"NSError">16
v28@0:8@16f24
v32@0:8@"NSUUID"16@"NSError"24
v28@0:8@"NSUUID"16f24
@"NSString"24@0:8@"NSString"16
@"NSString"20@0:8i16
@"NSString"36@0:8i16@"NSString"20B28B32
@"NSString"24@0:8q16
@"_ML3BaseMusicLibraryResourcesManager"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"ML3MusicLibraryResourcesManagerContext"
@"<MLMediaLibraryServiceProtocol>"
B32@0:8@"_ML3MultiUserDaemonAccountChangeOperation"16^@24
v32@0:8@"_ML3MultiUserDaemonAccountChangeOperation"16@"NSString"24
@"ACAccountStore"
@28@0:8i16@20
{shared_ptr<ML3VirtualTableDataSource>=^{ML3VirtualTableDataSource}^{__shared_weak_count}}16@0:8
v32@0:8{shared_ptr<ML3VirtualTableDataSource>=^{ML3VirtualTableDataSource}^{__shared_weak_count}}16
@"ML3DatabaseModule"
@"<ML3VirtualTableDelegate>"
{shared_ptr<ML3VirtualTableDataSource>="__ptr_"^{ML3VirtualTableDataSource}"__cntrl_"^{__shared_weak_count}}
@40@0:8Q16@24@32
@"ML3ActiveTransaction"
@52@0:8q16@24@32q40B48
@"ML3DatabaseStatement"
d24@0:8Q16
i24@0:8Q16
r*24@0:8@16
r*24@0:8Q16
v40@0:8r^^v16^i24@32
v40@0:8r^^v16^i24Q32
^{sqlite3_stmt=}
@"ML3DatabaseResult"
@32@0:8^{sqlite3_stmt=}16@24
v24@0:8i16i20
v28@0:8q16i24
v28@0:8d16i24
v32@0:8r^v16i24i28
v28@0:8r*16i24
v32@0:8r*16i24i28
v28@0:8@16i24
^{sqlite3_stmt=}16@0:8
v28@0:8^{sqlite3_stmt=}16i24
@32@0:8@16Q24
@"NSFileHandle"
@"NSObject<OS_tcc_identity>"
@"CPSearchMatcher"
@24@0:8^{sqlite3_blob=}16
i40@0:8@16Q24Q32
^{sqlite3_blob=}
@28@0:8B16@20
@"NSObject<OS_xpc_object>"
B32@0:8@16Q24
B40@0:8Q16^@24^@32
@"NSHashTable"
B40@0:8q16q24^@32
B64@0:8@16@24@32@40@48^@56
B48@0:8@16q24^@32@?40
@40@0:8@16q24^@32
@"CSSearchableIndex"
@"<_ML3MultiUserDaemonAccountChangeOperationDelegate>"
@40@0:8@16Q24Q32
@28@0:8B16B20B24
@"_ML3DatabaseConnectionSubPool"
{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@"<ML3DatabaseConnectionPoolDelegate>"
@"NSThread"
@24@0:8^B16
@"ML3LanguageResources"
B20@0:8B16
@48@0:8@16@24@32q40
B24@0:8@?16
B32@0:8@?16Q24
B36@0:8@16i24@?28
B36@0:8@16i24^?28
B44@0:8@16i24^?28^v36
B32@0:8@16^{sqlite3_module=i^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}24
@44@0:8@16@24q32B40
^{sqlite3=}16@0:8
i24@0:8@?16
v48@0:8@16@24@32q40
B24@0:8^{sqlite3=}16
^{sqlite3=}
@"ML3DatabaseStatementCache"
@"<ML3DatabaseConnectionDelegate>"
B28@0:8Q16B24
@"MLMediaLibraryService"
@"<ML3DatabaseDistantConnectionDelegate>"
@32@0:8^{SearchCriteriaList=}16q24
@48@0:8{?=IICCCC(?={?=^vI}^{SearchCriteriaList})}16
@"ML3DatabaseDistantConnection"
@40@0:8i16@20B28^B32
@"MIPAudiobook"
@"MIPMovie"
@"MIPPodcast"
@"MIPSong"
@"MIPTVShow"
{?="accountId"b1"assetStoreItemId"b1"bookmarkTimeMilliseconds"b1"creationDateTime"b1"drmKey1IdCode"b1"drmKey2IdCode"b1"drmPlatformIdCode"b1"duration"b1"familyAccountId"b1"fileSize"b1"lastPlayedDateTime"b1"lastSkippedDateTime"b1"likedStateChangeDate"b1"modificationDateTime"b1"purchaseDateTime"b1"purchaseHistoryId"b1"releaseDateTime"b1"reportingStoreItemId"b1"sagaId"b1"storeId"b1"storePlaylistId"b1"storefrontId"b1"subscriptionStoreItemId"b1"cloudMatchedStatus"b1"cloudPlaybackEndpointType"b1"cloudStatus"b1"contentRating"b1"contentRatingLevel"b1"drmVersionsCode"b1"fileKind"b1"likedState"b1"mediaType"b1"playCount"b1"playCountDelta"b1"playbackEndpointType"b1"purchaseHistoryToken"b1"secondaryArtworkSourceType"b1"skipCount"b1"skipCountDelta"b1"storeProtectionType"b1"year"b1"cloudAssetAvailable"b1"explicitContent"b1"hasChapterData"b1"hasLocalAsset"b1"hidden"b1"inUsersCloudLibrary"b1"isInUsersLibrary"b1"isPreorder"b1"likedStateChanged"b1"needsReporting"b1"rememberBookmark"b1"userDisabled"b1}
@40@0:8@16q24@32
@48@0:8@16@24q32@40
@"MSVStreamWriter"
{?="trackAdds"i"trackUpdates"i"trackDeletes"i"playlistAdds"i"playlistDeletes"i"totalSize"I}
?@:Q
Ademi
'/*///-
.MSYx
GIKO#SUY]a#eh##l
00000'000000257:e<CEGIgP00R000o$UUUU0UUUUUUU
BUUUUUH
RW++\+afk+++p
@CFKNQTWZ]`c
147:VVVVV=
&6666)
?GBGGGE
#)/Kj
HHHH
 33333337J]p
33333
WWWW
WWWM
"'),136;>AHHSss//
PPnnY

&+F0FFF5j
;h>hhhA
#)/5T
"),0=Kbv|
27ML3MatchContainerImportItem
18ML3MatchImportItem
18ML3StoreImportItem
11_constraint
20_distance_constraint
25_already_added_constraint
22_skip_count_constraint
25_random_jitter_constraint
6_track
28_compatible_genre_constraint
26_distance_constraint_state
17_constraint_state
34_compatible_genre_constraint_state
28ML3PurchaseHistoryImportItem
17ML3DAAPImportItem
22ML3DAAPTrackImportItem
26ML3DAAPContainerImportItem
23ML3DAAPPersonImportItem
22ML3DAAPChildImportItem
23ML3DAAPDeleteImportItem
32ML3DAAPContainerDeleteImportItem
NSt3__120__shared_ptr_pointerIP22ML3DAAPChildImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_22ML3DAAPChildImportItemEE
NSt3__114default_deleteI22ML3DAAPChildImportItemEE
NSt3__120__shared_ptr_emplaceIN6ML3CPP6Parser15ParserContainerENS_9allocatorIS3_EEEE
36ML3ItemStoreDatabaseImportDataSource
18DAAPParserDelegate
N6ML3CPP14ParserDelegateE
NSt3__120__shared_ptr_pointerIP17ML3DAAPImportItemNS_10shared_ptrIS1_E27__shared_ptr_default_deleteIS1_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_S1_EE
NSt3__114default_deleteI17ML3DAAPImportItemEE
NSt3__120__shared_ptr_pointerIP26ML3DAAPContainerImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_26ML3DAAPContainerImportItemEE
NSt3__114default_deleteI26ML3DAAPContainerImportItemEE
NSt3__120__shared_ptr_pointerIP23ML3DAAPPersonImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_23ML3DAAPPersonImportItemEE
NSt3__114default_deleteI23ML3DAAPPersonImportItemEE
NSt3__120__shared_ptr_emplaceIN6ML3CPP6ParserENS_9allocatorIS2_EEEE
NSt3__120__shared_ptr_emplaceI18DAAPParserDelegateNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_pointerIP23ML3DAAPDeleteImportItemNS_10shared_ptrIS1_E27__shared_ptr_default_deleteIS1_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS1_S1_EE
NSt3__114default_deleteI23ML3DAAPDeleteImportItemEE
NSt3__120__shared_ptr_pointerIP32ML3DAAPContainerDeleteImportItemNS_10shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI23ML3DAAPDeleteImportItemE27__shared_ptr_default_deleteIS1_32ML3DAAPContainerDeleteImportItemEE
NSt3__114default_deleteI32ML3DAAPContainerDeleteImportItemEE
NSt3__120__shared_ptr_emplaceIN6ML3CPP7ElementENS_9allocatorIS2_EEEE
27ML3DatabaseImportDataSource
25ML3VirtualTableDataSource
NSt3__123enable_shared_from_thisI27ML3DatabaseImportDataSourceEE
40ML3ContainerBaseDatabaseImportDataSource
41ML3CollectionBaseDatabaseImportDataSource
NSt3__120__shared_ptr_pointerIP28ML3PurchaseHistoryImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_28ML3PurchaseHistoryImportItemEE
NSt3__114default_deleteI28ML3PurchaseHistoryImportItemEE
22ML3ProtoSyncImportItem
27ML3ProtoSyncTrackImportItem
28ML3ProtoSyncDeleteImportItem
31ML3ProtoSyncContainerImportItem
13ML3ImportItem
NSt3__120__shared_ptr_pointerIP29ML3HomeSharingTrackImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_29ML3HomeSharingTrackImportItemEE
NSt3__114default_deleteI29ML3HomeSharingTrackImportItemEE
NSt3__120__shared_ptr_pointerIP33ML3HomeSharingContainerImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_33ML3HomeSharingContainerImportItemEE
NSt3__114default_deleteI33ML3HomeSharingContainerImportItemEE
40ML3ContainerItemDatabaseImportDataSource
36ML3ItemStatsDatabaseImportDataSource
32ML3ContainerItemPersonImportItem
32ML3AlbumDatabaseImportDataSource
NSt3__120__shared_ptr_pointerIP27ML3ProtoSyncTrackImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_27ML3ProtoSyncTrackImportItemEE
NSt3__114default_deleteI27ML3ProtoSyncTrackImportItemEE
NSt3__120__shared_ptr_pointerIP28ML3ProtoSyncDeleteImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_28ML3ProtoSyncDeleteImportItemEE
NSt3__114default_deleteI28ML3ProtoSyncDeleteImportItemEE
NSt3__120__shared_ptr_pointerIP31ML3ProtoSyncContainerImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_31ML3ProtoSyncContainerImportItemEE
NSt3__114default_deleteI31ML3ProtoSyncContainerImportItemEE
10ML3CPPData
NSt3__118codecvt_utf8_utf16IwLm1114111ELNS_12codecvt_modeE0EEE
23ML3ITunesSyncImportItem
28ML3ITunesSyncTrackImportItem
32ML3ITunesSyncContainerImportItem
38ML3AlbumArtistDatabaseImportDataSource
33ML3LyricsDatabaseImportDataSource
33ML3ArtistDatabaseImportDataSource
36ML3ItemVideoDatabaseImportDataSource
26ML3ContainerItemImportItem
46ML3ContainerItemPersonDatabaseImportDataSource
36ML3ContainerDatabaseImportDataSource
34ML3BookletDatabaseImportDataSource
NSt3__120__shared_ptr_emplaceI28ML3SetCloudIDTrackImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI32ML3SetCloudIDContainerImportItemNS_9allocatorIS1_EEEE
18ML3AlbumImportItem
24ML3AlbumArtistImportItem
19ML3ArtistImportItem
21ML3ComposerImportItem
18ML3GenreImportItem
33ML3PersonDatabaseImportDataSource
39ML3ItemPlaybackDatabaseImportDataSource
NSt3__120__shared_ptr_emplaceI18ML3StoreImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI27ML3StoreContainerImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_pointerIP18ML3MatchImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_18ML3MatchImportItemEE
NSt3__114default_deleteI18ML3MatchImportItemEE
NSt3__120__shared_ptr_pointerIP27ML3MatchContainerImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_27ML3MatchContainerImportItemEE
NSt3__114default_deleteI27ML3MatchContainerImportItemEE
23ML3SetCloudIDImportItem
28ML3SetCloudIDTrackImportItem
32ML3SetCloudIDContainerImportItem
34ML3ChapterDatabaseImportDataSource
35ML3ComposerDatabaseImportDataSource
36ML3ItemExtraDatabaseImportDataSource
16ML3ImportSession
NSt3__120__shared_ptr_pointerIP32ML3AlbumDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_32ML3AlbumDatabaseImportDataSourceEE
NSt3__114default_deleteI32ML3AlbumDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP38ML3AlbumArtistDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_38ML3AlbumArtistDatabaseImportDataSourceEE
NSt3__114default_deleteI38ML3AlbumArtistDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP33ML3ArtistDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3ArtistDatabaseImportDataSourceEE
NSt3__114default_deleteI33ML3ArtistDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP35ML3ComposerDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_35ML3ComposerDatabaseImportDataSourceEE
NSt3__114default_deleteI35ML3ComposerDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP32ML3GenreDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_32ML3GenreDatabaseImportDataSourceEE
NSt3__114default_deleteI32ML3GenreDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP36ML3ItemStoreDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemStoreDatabaseImportDataSourceEE
NSt3__114default_deleteI36ML3ItemStoreDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP31ML3ItemDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_31ML3ItemDatabaseImportDataSourceEE
NSt3__114default_deleteI31ML3ItemDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP36ML3ItemExtraDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemExtraDatabaseImportDataSourceEE
NSt3__114default_deleteI36ML3ItemExtraDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP39ML3ItemPlaybackDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_39ML3ItemPlaybackDatabaseImportDataSourceEE
NSt3__114default_deleteI39ML3ItemPlaybackDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP37ML3ItemSearchDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_37ML3ItemSearchDatabaseImportDataSourceEE
NSt3__114default_deleteI37ML3ItemSearchDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP36ML3ItemStatsDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemStatsDatabaseImportDataSourceEE
NSt3__114default_deleteI36ML3ItemStatsDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP36ML3ItemVideoDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ItemVideoDatabaseImportDataSourceEE
NSt3__114default_deleteI36ML3ItemVideoDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP34ML3ChapterDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_34ML3ChapterDatabaseImportDataSourceEE
NSt3__114default_deleteI34ML3ChapterDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP33ML3LyricsDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3LyricsDatabaseImportDataSourceEE
NSt3__114default_deleteI33ML3LyricsDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP36ML3ContainerDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_36ML3ContainerDatabaseImportDataSourceEE
NSt3__114default_deleteI36ML3ContainerDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP40ML3ContainerSeedDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_40ML3ContainerSeedDatabaseImportDataSourceEE
NSt3__114default_deleteI40ML3ContainerSeedDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP40ML3ContainerItemDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_40ML3ContainerItemDatabaseImportDataSourceEE
NSt3__114default_deleteI40ML3ContainerItemDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP46ML3ContainerItemPersonDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_46ML3ContainerItemPersonDatabaseImportDataSourceEE
NSt3__114default_deleteI46ML3ContainerItemPersonDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP33ML3PersonDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_33ML3PersonDatabaseImportDataSourceEE
NSt3__114default_deleteI33ML3PersonDatabaseImportDataSourceEE
NSt3__120__shared_ptr_pointerIP34ML3BookletDatabaseImportDataSourceNS_10shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI27ML3DatabaseImportDataSourceE27__shared_ptr_default_deleteIS1_34ML3BookletDatabaseImportDataSourceEE
NSt3__114default_deleteI34ML3BookletDatabaseImportDataSourceEE
NSt3__120__shared_ptr_emplaceI13ML3ArtistDataNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI12ML3AlbumDataNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI15ML3ComposerDataNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI12ML3GenreDataNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI19ML3ArtistImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI24ML3AlbumArtistImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI18ML3AlbumImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI21ML3ComposerImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_emplaceI18ML3GenreImportItemNS_9allocatorIS1_EEEE
NSt3__120__shared_ptr_pointerIP26ML3ContainerItemImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_26ML3ContainerItemImportItemEE
NSt3__114default_deleteI26ML3ContainerItemImportItemEE
NSt3__120__shared_ptr_pointerIP32ML3ContainerItemPersonImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_32ML3ContainerItemPersonImportItemEE
NSt3__114default_deleteI32ML3ContainerItemPersonImportItemEE
31ML3ItemDatabaseImportDataSource
33ML3HomeSharingContainerImportItem
29ML3HomeSharingTrackImportItem
NSt3__120__shared_ptr_pointerIP10ML3CPPDataNS_10shared_ptrIS1_E27__shared_ptr_default_deleteIS1_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI10ML3CPPDataE27__shared_ptr_default_deleteIS1_S1_EE
NSt3__114default_deleteI10ML3CPPDataEE
40ML3ContainerSeedDatabaseImportDataSource
NSt3__120__shared_ptr_pointerIP28ML3ITunesSyncTrackImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_28ML3ITunesSyncTrackImportItemEE
NSt3__114default_deleteI28ML3ITunesSyncTrackImportItemEE
NSt3__120__shared_ptr_pointerIP32ML3ITunesSyncContainerImportItemNS_10shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI13ML3ImportItemE27__shared_ptr_default_deleteIS1_32ML3ITunesSyncContainerImportItemEE
NSt3__114default_deleteI32ML3ITunesSyncContainerImportItemEE
34ML3SubscriptionContainerImportItem
25ML3SubscriptionImportItem
32ML3GenreDatabaseImportDataSource
29ML3VirtualTableBindingVisitor
37ML3ItemSearchDatabaseImportDataSource
NSt3__120__shared_ptr_pointerIP25ML3SubscriptionImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_25ML3SubscriptionImportItemEE
NSt3__114default_deleteI25ML3SubscriptionImportItemEE
NSt3__120__shared_ptr_pointerIP34ML3SubscriptionContainerImportItemNS_10shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS4_S1_EENS_9allocatorIS1_EEEE
NSt3__110shared_ptrI17ML3DAAPImportItemE27__shared_ptr_default_deleteIS1_34ML3SubscriptionContainerImportItemEE
NSt3__114default_deleteI34ML3SubscriptionContainerImportItemEE
27ML3StoreContainerImportItem
14ML3ImportValueINSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEE
NSt3__120__shared_ptr_emplaceI10ML3CPPDataNS_9allocatorIS1_EEEE
com.apple.amp.medialibrary
Default
Default_Oversize
SyncData
Writer
Writer_Oversize
Service
Migration
Validation
CacheManagement
Library
SortMap
Import
MultiUser
Indexing
dsid
altDSID
v32@?0@"ACAccount"8Q16^B24
uint32_t ML3DAAPCodeForImportPropertyKey(MLImportPropertyKey)
ML3DAAPImportUtils.m
ML3DAAPCodeForImportPropertyKey - unhandled property key %x
ML3DatabaseForeignKeyConstraint.m
Number of local columns (%lu) does not match the number of foreign columns (%lu)
FOREIGN KEY (%@) REFERENCES %@ (%@)
NSString *NSPersistentStringFromMLMediaType(MLMediaType)
MLTypes.m
This SPI may only be used with single types
MLMediaTypeVideoPodcast
MLMediaTypeVideoITunesU
MLMediaTypeTVShow
MLMediaTypeMusicVideo
MLMediaTypeMovie
MLMediaTypeHomeVideo
MLMediaTypeMusicQuiz
MLMediaTypeAudioBook
MLMediaTypePodcast
MLMediaTypeSong
MLMediaTypeVoiceMemo
MLMediaTypeITunesUAudio
MLMediaTypeAny
MLMediaTypeUndefined
AnyVideo
VideoPodcast
VideoITunesU
TVShow
MusicVideo
Movie
HomeVideo
AnyAudio
MusicQuiz
AudioBook
Podcast
Song
VoiceMemo
ITunesUAudio
MLMediaType%@
MLMediaType [%@]
(%d => '%@')
UPDATE artwork SET interest_data = ? WHERE artwork_token = ?
*** Database Exception: %@
ML3UpdateArtworkInterestDataOperation requires an artworkToken attribute and an artwork interest data blob
InsignificantSortPrefixes
the 
ML3ArtworkTokenSet.m
Invalid parameter not satisfying: %@
entity != nil
v32@?0@"NSString"8@"NSString"16q24
v32@?0@"NSString"8q16^B24
Acoustic
BassBooster
BassReducer
Classical
Dance
Deep
Electronic
Flat
HipHop
Jazz
Latin
Loudness
Lounge
Piano
Rock
SmallSpeakers
SpokenWord
TrebleBooster
TrebleReducer
VocalBooster
LateNightMode
MLLocalizable
Bass Booster
Bass Reducer
Hip Hop
Small Speakers
Spoken Word
Treble Booster
Treble Reducer
Vocal Booster
Late Night Mode
<ML3MatchImportItem 
<ML3MatchContainerImportItem 
, cloud_universal_library_id=
, cloud_id=
, isCompleteItem=false
<%@: %p, name = '%@'>
PRIMARY KEY
 ASC
 DESC
 AUTOINCREMENT
NOT NULL
UNIQUE
ML3DatabaseColumn.m
Unsupported default value type %@
DEFAULT %@
%@ %@ %@
%@ %@
NULL
INTEGER
REAL
TEXT
BLOB
artist
series
seasonNumber
episodeId
episodeSortId
videoQuality
networkName
album
composer
genre
discNumber
trackNumber
userRating
excludeFromShuffle
geniusId
audioFormat
hasVideo
lyrics
playbackInfo
lyricsChecksum
hlsPlaylistURL
void ML3StatementBindingVisitor::operator()(const int64_t &)
ML3ImportDatabaseUtilities.mm
Cannot bind int64_t: no sqlite3_stmt*
void ML3StatementBindingVisitor::operator()(const float_t &)
Cannot bind float: no sqlite3_stmt*
void ML3StatementBindingVisitor::operator()(const bool &)
Cannot bind bool: no sqlite3_stmt*
void ML3StatementBindingVisitor::operator()(const std::string &)
Cannot bind string: no sqlite3_stmt*
void ML3StatementBindingVisitor::operator()(ML3CPPDataRef)
Cannot bind data: no sqlite3_stmt*
<ML3StoreImportItem 
 item_pid=
, sagaId=
sim fetches = %lu, successful sim fetches = %lu, metadata fetches = %lu, successful metadata fetches = %lu
metadata_size not being set by metadata_for_global_id callback
fetch metadata: track id = %llu, 
id %d = %llu%s
fetch sims: track id = %llu, count = %lu
constraint eval: %s, track id = %llu, result = %d
constraint not in effect: %s, track id = %llu
distance
already_added
skip_count
random_jitter
compatible_genre
ML3ServiceDatabaseImport.m
library
writer
client
<ML3PurchaseHistoryImportItem 
 purchaseHistoryId=
uint32_t ML3PurchaseHistoryImportItem::_getFlavorCode(MLImportPropertyKey) const
ML3PurchaseHistoryImportItem.mm
flavorDataForPropertyKey passed unknown key %d
itlp
.epub
<ML3DAAPDeleteImportItem 
 sourceItemId=
<ML3DAAPContainerImportItem 
 store_cloud_id=
contentFilter
smartInfo
geniusSeedTrackIDs
<ML3DAAPPersonImportItem 
 profile_id=
, handle=
Cannot parse more than once.
{?=qiIq}
v80@?0{?=qiIq}8^{CGImage=}32{?=qiIq}40q64@"NSError"72
item_extra
item_pid
title
sort_title
disc_count
track_count
total_time_ms
year
location
file_size
integrity
is_audible_audio_book
date_modified
media_kind
content_rating
content_rating_level
is_user_disabled
genius_id
comment
grouping
description
description_long
collection_description
copyright
pending_genius_checksum
category_id
location_kind_id
version
display_version
classical_work
classical_movement
classical_movement_count
classical_movement_number
is_preorder
 IF NOT EXISTS
CREATE TABLE%@ %@ (%@, %@)
CREATE TABLE%@ %@ (%@)
libraryName
libraryId
1.2.11
encountered unexpected status %d while inflating
encountered unexpected status %d while finishing inflating
com.apple.medialibrary
com.apple.Music
ConsoleLoggingLevel
LogFileLoggingLevel
SQLITE_AUTO_TRACE
SQLITE_IOERR_READ
SQLITE_IOERR_SHORT_READ
SQLITE_IOERR_WRITE
SQLITE_IOERR_FSYNC
SQLITE_IOERR_DIR_FSYNC
SQLITE_IOERR_TRUNCATE
SQLITE_IOERR_FSTAT
SQLITE_IOERR_UNLOCK
SQLITE_IOERR_RDLOCK
SQLITE_IOERR_DELETE
SQLITE_IOERR_BLOCKED
SQLITE_IOERR_NOMEM
SQLITE_IOERR_ACCESS
SQLITE_IOERR_CHECKRESERVEDLOCK
SQLITE_IOERR_LOCK
SQLITE_IOERR_CLOSE
SQLITE_IOERR_DIR_CLOSE
SQLITE_LOCKED_SHAREDCACHE
Unknown
medialibrary_sqlite.log
SQLITE_AUTO_TRACE_ML
ML3DAAPImportOperationErrorDomain
Track parser was canceled.
Track parser failed (invalid DAAP payload).
%@ is invalid. use %@ instead
ML3ActiveTransaction.m
Tried to create a transaction object with a nil connection.
Tried to create a transaction object without a library.
Database transaction %@
<%@ %p
identifier:             %@
readonly:               %@
originating process:    %@ [%d]
connection:             %@
last used time:         %f
person
person_pid
cloud_id
handle
name
image_url
image_token
ROWID
entity_revision.revision
entity_revision.deleted
keep_local
keep_local_status
keep_local_status_reason
keep_local_constraints
MAX(entity_revision.revision)
ML3Entity.m
INSERT OR REPLACE INTO 
) VALUES (?
,(?,?,?,?)
REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES 
incrementRevisionForRevisionTypeContentWithConnection called with invalid pid
DELETE FROM entity_revision WHERE revision_type > ? AND entity_pid
Wrong revision type for deletion type: %d, %d
incrementRevisionWithLibrary called with invalid pid
REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES (?, ?, ?, ?)
DELETE FROM entity_revision WHERE entity_pid=? AND revision_type > ?
Cannot perform insert with %@ property: no table
Cannot perform insert with %@ property: no column
(pid = %lld)
SELECT 1 FROM 
 WHERE ROWID = ? LIMIT 1;
SELECT 
.ROWID FROM 
 WHERE 
 AND 
.ROWID IN (?
ORDER BY 
SELECT %@ FROM %@ %@%@%@
ML3EntityPropertySelectSQLCache
SELECT %@ FROM %@ %@ WHERE %@.ROWID = ?%@%@
x-media-library
No library with UID: %@
Invalid URL scheme: %@
Library UID mismatch: %@ != %@
Insufficient path components [requires three]: %@
Invalid entity type: %ld
Invalid entity persistentID: %lld
No %@ entity exists with persistentID: %lld
%lld
JOIN entity_revision ON (
.ROWID = entity_revision.entity_pid)
DELETE FROM %@ WHERE %@
no pid column for %@ %@
DELETE FROM item_stats WHERE item_pid IN ( SELECT item_pid FROM item_store WHERE sync_id = 0 AND item_pid
DELETE FROM item_store WHERE sync_id = 0 AND item_pid
%@.%@
Properties requiring a join cannot be indexed
DESC
v44@?0q8q16i24q28^B36
album_artist
album_artist_pid
sort_album_artist
grouping_key
cloud_status
store_id
representative_item_pid
app_data
sync_id
cloud_universal_library_id
classical_experience_available
INSERT OR REPLACE INTO %@ (%@)
virtual void ML3DatabaseImportDataSource::getRow(ML3VirtualTableRow *, uint32_t)
ML3DatabaseImportDataSource.mm
unhandled data type %u
.ROWID
, %@
, CASE WHEN LENGTH(IFNULL(item_extra.location, '')) = 0
 AND LENGTH(IFNULL(item_extra.location, '')) = 0
, CASE WHEN IFNULL((SELECT(1) FROM %@ WHERE ROWID = %@.ROWID), 0) = 0 OR (IFNULL(%@,0) = 0
 AND IFNULL(%@,0) = 0
 THEN (CASE WHEN col%d='%s' THEN %@ ELSE col%d END) ELSE %@ END
, CASE WHEN col%d='%s' THEN %@ ELSE col%d END
CASE WHEN col%d ISNULL THEN %@ ELSE MAX(IFNULL(%@, 0), col%d) END
CASE WHEN col%d ISNULL THEN %@ ELSE col%d END
 THEN (%@) ELSE %@ END
%@ SELECT %@ FROM %@
item_store
%@ LEFT OUTER JOIN item_store ON +%@.ROWID = item_store.item_pid LEFT OUTER JOIN %@ ON +%@.ROWID = %@.item_pid
%@ LEFT OUTER JOIN item_store ON +%@.ROWID = item_store.item_pid
container
%@ LEFT OUTER JOIN container ON %@.ROWID = container.container_pid
%@ LEFT OUTER JOIN container ON %@.ROWID = container.container_pid LEFT OUTER JOIN %@ ON %@.ROWID = %@.container_pid
%@ LEFT OUTER JOIN %@ ON %@.ROWID = %@.%@%@
_pid
_ML_VALUE_NOT_PROVIDED_
CASE WHEN item_store.home_sharing_id OR (item_store.store_saga_id AND item_store.cloud_in_my_library) OR item_store.purchase_history_id OR (item_store.sync_id AND item_store.sync_in_my_library) OR item_store.is_ota_purchased THEN 1 ELSE 0 END
CASE WHEN item_store.home_sharing_id != 0 THEN 300 ELSE ( CASE WHEN IFNULL(item_store.match_redownload_params, '') != '' THEN 200 ELSE ( CASE WHEN IFNULL(item_store.purchase_history_redownload_params, '') != '' AND item_store.purchase_history_id != 0 THEN 100 ELSE ( CASE WHEN item_store.subscription_store_item_id != 0 AND item_store.is_subscription AND item_store.cloud_asset_available THEN 50 ELSE ( CASE WHEN item_store.sync_redownload_params == 'redownload' AND item_store.sync_id != 0 THEN 20 ELSE ( CASE WHEN item_store.sync_redownload_params == 'local' AND item_store.sync_id != 0 THEN 10 ELSE 0 END) END) END) END) END) END
PRAGMA user_version = 992141;
ALTER TABLE item ADD COLUMN base_location_id INTEGER DEFAULT 0
PRAGMA user_version = 992142;
CREATE TABLE entity_revision (revision INTEGER PRIMARY KEY, entity_pid INTEGER NOT NULL UNIQUE, deleted INTEGER NOT NULL DEFAULT 0, class INTEGER NOT NULL DEFAULT 0)
PRAGMA user_version = 1002980;
ALTER TABLE entity_revision ADD COLUMN deleted INTEGER NOT NULL DEFAULT 0
ALTER TABLE entity_revision ADD COLUMN class INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN store_xid TEXT
ALTER TABLE item_extra ADD COLUMN store_flavor TEXT
PRAGMA user_version = 1003342;
ALTER TABLE item_extra ADD COLUMN chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1003964;
ALTER TABLE item_extra ADD COLUMN integrity BLOB
PRAGMA user_version = 1005492;
CREATE TABLE genius_config (id INTEGER PRIMARY KEY, version INTEGER UNIQUE, default_num_results INTEGER DEFAULT 0, min_num_results INTEGER DEFAULT 0, data BLOB)
CREATE TABLE genius_metadata (genius_id INTEGER PRIMARY KEY, revision_level INTEGER, version INTEGER, checksum INTEGER, data BLOB)
CREATE TABLE genius_similarities (genius_id INTEGER PRIMARY KEY, data BLOB)
PRAGMA user_version = 1006189;
CREATE TABLE container_items (container_pid INTEGER PRIMARY KEY, item_pid_data BLOB)
DROP TABLE item_to_container
CREATE VIRTUAL TABLE item_to_container USING ML3ContainerItemToContainer (item_pid INTEGER NOT NULL DEFAULT 0, container_pid INTEGER NOT NULL DEFAULT 0, physical_order INTEGER NOT NULL DEFAULT 0, shuffle_order INTEGER NOT NULL DEFAULT 0)
PRAGMA user_version = 1007541;
ALTER TABLE item_extra ADD COLUMN store_saga_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1011335;
CREATE TABLE artwork_info (cache_id TEXT NOT NULL, format_id INTEGER NOT NULL, length INTEGER, offset INTEGER, extra_length INTEGER NOT NULL DEFAULT 0, UNIQUE (cache_id, format_id))
CREATE TABLE artwork_free_list (offset INTEGER PRIMARY KEY, length INTEGER)
PRAGMA user_version = 1015139;
ALTER TABLE container ADD COLUMN description TEXT
PRAGMA user_version = 1016427;
ALTER TABLE container ADD COLUMN store_cloud_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1021756;
ALTER TABLE album_artist ADD COLUMN artwork_cache_id INTEGER NOT NULL DEFAULT 0
UPDATE album_artist SET artwork_cache_id = IFNULL((SELECT artwork_cache_id FROM item JOIN item_extra USING (item_pid) WHERE item.album_artist_pid = album_artist.album_artist_pid), 0)
UPDATE album_artist SET representative_item_pid = IFNULL((SELECT item_pid FROM item WHERE item.album_artist_pid = album_artist.album_artist_pid), 0)
PRAGMA user_version = 1026201;
PRAGMA user_version = 1028771;
CREATE TABLE ubiquitous_bookmarks (key TEXT PRIMARY KEY, bookmark_time_ms REAL, timestamp REAL)
PRAGMA user_version = 1033275;
ALTER TABLE album ADD COLUMN grouping_key BLOB
UPDATE album SET feed_url = NULL WHERE feed_url = ''
ALTER TABLE item_artist ADD COLUMN grouping_key BLOB
ALTER TABLE album_artist ADD COLUMN grouping_key BLOB
ALTER TABLE composer ADD COLUMN grouping_key BLOB
ALTER TABLE genre ADD COLUMN grouping_key BLOB
PRAGMA user_version = 1046932;
ALTER TABLE item_extra ADD COLUMN is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1050919;
ALTER TABLE artwork_info ADD COLUMN extra_length INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1053827;
ALTER TABLE item_extra ADD COLUMN store_matched_status INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN store_redownloaded_status INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1055456;
CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB)
INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, representative_item_pid, grouping_key) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, (CASE sort_series_name WHEN '' THEN NULL ELSE sort_series_name END), representative_item_pid, grouping_key FROM item_artist
DROP TABLE item_artist
ALTER TABLE item_artist_new RENAME TO item_artist
PRAGMA user_version = 1058985;
ALTER TABLE album ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0
ALTER TABLE album_artist ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_artist ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0
ALTER TABLE composer ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0
ALTER TABLE genre ADD COLUMN cloud_status INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1061040;
PRAGMA user_version = 1061159;
PRAGMA user_version = 1061350;
ALTER TABLE item_extra ADD COLUMN pending_genius_checksum INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1062137;
PRAGMA user_version = 1063000;
PRAGMA auto_vacuum = 2;
PRAGMA user_version = 1079529;
ALTER TABLE item_extra ADD COLUMN is_streaming_quality INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1096158;
ALTER TABLE item_extra ADD COLUMN store_bookmark_timestamp REAL DEFAULT NULL
ALTER TABLE item_extra ADD COLUMN store_bookmark_entity_revision INTEGER DEFAULT NULL
PRAGMA user_version = 1102819;
ALTER TABLE item ADD COLUMN exclude_from_shuffle INTEGER NOT NULL DEFAULT 0
UPDATE item SET exclude_from_shuffle=1 WHERE item_pid IN (SELECT item_pid FROM item_extra WHERE exclude_from_shuffle=1)
CREATE TABLE item_extra_new (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, artwork_cache_id INTEGER NOT NULL DEFAULT 0, location_type INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', extension INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, file_size INTEGER NOT NULL DEFAULT 0, file_creator INTEGER NOT NULL DEFAULT 0, file_type INTEGER NOT NULL DEFAULT 0, num_dir_levels_file INTEGER NOT NULL DEFAULT 0, num_dir_levels_lib INTEGER NOT NULL DEFAULT 0, integrity BLOB, media_kind INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, total_burn_time_ms REAL NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, relative_volume INTEGER, eq_preset TEXT, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, is_ota_purchased INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, is_itunes_u INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, copyright TEXT, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0, is_streaming_quality INTEGER NOT NULL DEFAULT 0, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, is_podcast INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, store_kind INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, redownload_action_params TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, audio_format INTEGER NOT NULL DEFAULT 0, sample_rate REAL NOT NULL DEFAULT 0, duration INTEGER NOT NULL DEFAULT 0, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, analysis_inhibit_flags INTEGER NOT NULL DEFAULT 0, audio_fingerprint INTEGER NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER  NOT NULL DEFAULT 0, has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, is_hd INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, subtitle_track_id INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', bit_rate INTEGER NOT NULL DEFAULT 0, pending_genius_checksum INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_extra_new (item_pid, title, sort_title, disc_count, track_count, artwork_cache_id, location_type, location, extension, date_created, file_size, file_creator, file_type, num_dir_levels_file, num_dir_levels_lib, integrity, media_kind, date_modified, year, content_rating, content_rating_level, is_user_disabled, remember_bookmark, start_time_ms, stop_time_ms, total_time_ms, total_burn_time_ms, bpm, relative_volume, eq_preset, genius_id, comment, grouping, description, description_long, collection_description, is_ota_purchased, is_compilation, is_itunes_u, is_audible_audio_book, copyright, chosen_by_auto_fill, is_temporary_cloud_download, is_streaming_quality, store_bookmark_timestamp, store_bookmark_entity_revision, is_podcast, external_guid, feed_url, store_kind, date_purchased, date_released, account_id, key_versions, key_platform_id, key_id, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, artwork_url, store_xid, store_flavor, store_saga_id, store_matched_status, store_redownloaded_status, audio_format, sample_rate, duration, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, analysis_inhibit_flags, audio_fingerprint, volume_normalization_energy, is_rental, is_demo, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, has_alternate_audio, has_subtitles, is_hd, season_number, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, subtitle_track_id, episode_id, network_name, extended_content_rating, movie_info, bit_rate, pending_genius_checksum) SELECT item_pid, title, sort_title, disc_count, track_count, artwork_cache_id, location_type, location, extension, date_created, file_size, file_creator, file_type, num_dir_levels_file, num_dir_levels_lib, integrity, media_kind, date_modified, year, content_rating, content_rating_level, is_user_disabled, remember_bookmark, start_time_ms, stop_time_ms, total_time_ms, total_burn_time_ms, bpm, relative_volume, eq_preset, genius_id, comment, grouping, description, description_long, collection_description, is_ota_purchased, is_compilation, is_itunes_u, is_audible_audio_book, copyright, chosen_by_auto_fill, is_temporary_cloud_download, is_streaming_quality, store_bookmark_timestamp, store_bookmark_entity_revision, is_podcast, external_guid, feed_url, store_kind, date_purchased, date_released, account_id, key_versions, key_platform_id, key_id, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, artwork_url, store_xid, store_flavor, store_saga_id, store_matched_status, store_redownloaded_status, audio_format, sample_rate, duration, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, analysis_inhibit_flags, audio_fingerprint, volume_normalization_energy, is_rental, is_demo, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, has_alternate_audio, has_subtitles, is_hd, season_number, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, subtitle_track_id, episode_id, network_name, extended_content_rating, movie_info, bit_rate, pending_genius_checksum FROM item_extra
DROP TABLE item_extra
ALTER TABLE item_extra_new RENAME TO item_extra
PRAGMA user_version = 1108291;
DROP INDEX IF EXISTS ItemTitle
DROP INDEX IF EXISTS ItemTitle_Section
DROP INDEX IF EXISTS ItemAlbum
DROP INDEX IF EXISTS ItemAlbumArtist
DROP INDEX IF EXISTS ItemAlbumArtist_Section
DROP INDEX IF EXISTS ItemAlbum_Section
DROP INDEX IF EXISTS ItemItemArtist_Section
DROP INDEX IF EXISTS ItemComposer_Section
DROP INDEX IF EXISTS ItemGenre_Section
CREATE TABLE entity_revision_new (revision INTEGER PRIMARY KEY, entity_pid INTEGER NOT NULL, deleted INTEGER NOT NULL DEFAULT 0, class INTEGER NOT NULL DEFAULT 0, revision_type INTEGER NOT NULL DEFAULT 0, UNIQUE(entity_pid, revision_type))
INSERT INTO entity_revision_new (revision, entity_pid, deleted, class) SELECT revision, entity_pid, deleted, class FROM entity_revision
DROP TABLE entity_revision
ALTER TABLE entity_revision_new RENAME TO entity_revision
PRAGMA user_version = 1111152;
PRAGMA user_version = 1111153;
UPDATE item_extra SET location = "" WHERE location = "/"
PRAGMA user_version = 1113775;
PRAGMA user_version = 1114502;
ALTER TABLE container ADD COLUMN has_cloud_play_order INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1114940;
ALTER TABLE composer ADD COLUMN artwork_cache_id INTEGER NOT NULL DEFAULT 0
UPDATE composer SET artwork_cache_id = IFNULL((SELECT artwork_cache_id FROM item JOIN item_extra USING (item_pid) WHERE item.item_pid = composer.representative_item_pid), 0)
PRAGMA user_version = 1115195;
PRAGMA user_version = 1115482;
CREATE TABLE artwork_info_new(cache_id TEXT NOT NULL, format_id INTEGER NOT NULL, length INTEGER, offset INTEGER, extra_length INTEGER NOT NULL DEFAULT 0, UNIQUE (cache_id, format_id))
INSERT INTO artwork_info_new SELECT cache_id, format_id, length, offset, extra_length FROM artwork_info
DROP TABLE artwork_info
ALTER TABLE artwork_info_new RENAME TO artwork_info
PRAGMA user_version = 1118969;
CREATE TABLE purgeable_list (item_pid INTEGER PRIMARY KEY,is_purgeable INTEGER NOT NULL DEFAULT 0)
PRAGMA user_version = 1120346;
CREATE TABLE purgeable_list_new (item_pid INTEGER PRIMARY KEY, is_purgeable INTEGER NOT NULL DEFAULT 1, date_last_used INTEGER DEFAULT 0)
INSERT INTO purgeable_list_new (item_pid, is_purgeable) SELECT item_pid, is_purgeable FROM purgeable_list
DROP TABLE purgeable_list
ALTER TABLE purgeable_list_new RENAME TO purgeable_list
INSERT INTO purgeable_list (item_pid, date_last_used) SELECT item_pid, date_played FROM item_stats
PRAGMA user_version = 1121591;
CREATE TABLE purgeable_list_new (item_pid INTEGER PRIMARY KEY, is_alarm INTEGER NOT NULL DEFAULT 0, date_last_used INTEGER DEFAULT 0)
INSERT INTO purgeable_list_new (item_pid, is_alarm, date_last_used) SELECT item_pid, is_purgeable, date_last_used FROM purgeable_list
PRAGMA user_version = 1124264;
CREATE TABLE item_search (item_pid INTEGER PRIMARY KEY, search_title INTEGER NOT NULL DEFAULT 0, search_album INTEGER NOT NULL DEFAULT 0, search_artist INTEGER NOT NULL DEFAULT 0, search_composer INTEGER NOT NULL DEFAULT 0, search_album_artist INTEGER NOT NULL DEFAULT 0)
INSERT OR REPLACE INTO item_search (item_pid, search_title) SELECT item_extra.item_pid, sort_map.name_order from sort_map JOIN item_extra ON item_extra.title = sort_map.name
UPDATE item_search SET search_album = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN album ON album.album = sort_map.name JOIN item ON item.album_pid = album.album_pid WHERE item.item_pid = item_search.item_pid), 0)
UPDATE item_search SET search_artist = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN item_artist ON item_artist.item_artist = sort_map.name JOIN item ON item.item_artist_pid = item_artist.item_artist_pid WHERE item.item_pid = item_search.item_pid), 0)
UPDATE item_search SET search_composer = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN composer ON composer.composer = sort_map.name JOIN item ON item.composer_pid = composer.composer_pid WHERE item.item_pid = item_search.item_pid), 0)
PRAGMA user_version = 1132637;
PRAGMA user_version = 1138219;
CREATE TABLE item_search_new (item_pid INTEGER PRIMARY KEY, search_title INTEGER NOT NULL DEFAULT 0, search_album INTEGER NOT NULL DEFAULT 0, search_artist INTEGER NOT NULL DEFAULT 0, search_composer INTEGER NOT NULL DEFAULT 0, search_album_artist INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_search_new (item_pid, search_title, search_album, search_artist, search_composer) SELECT item_pid, search_title, search_album, search_artist, search_composer FROM item_search
UPDATE item_search_new SET search_album_artist = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN album_artist ON album_artist.album_artist = sort_map.name JOIN item ON item.album_artist_pid = album_artist.album_artist_pid WHERE item.item_pid = item_search_new.item_pid), 0)
DROP TABLE item_search
ALTER TABLE item_search_new RENAME TO item_search
PRAGMA user_version = 1138254;
ALTER TABLE container ADD COLUMN smart_evaluation_order INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140115;
ALTER TABLE item_extra ADD COLUMN jalisco_token INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN codec_type INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN codec_subtype INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN format TEXT
ALTER TABLE item_extra ADD COLUMN data_kind INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN data_url TEXT
ALTER TABLE item_extra ADD COLUMN has_video INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN key_id_2 INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN has_chapter_data INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140116;
ALTER TABLE item_extra ADD COLUMN purchase_history_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140117;
item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, artwork_cache_id INTEGER NOT NULL DEFAULT 0, location_type INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', extension INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, file_size INTEGER NOT NULL DEFAULT 0, file_creator INTEGER NOT NULL DEFAULT 0, file_type INTEGER NOT NULL DEFAULT 0, num_dir_levels_file INTEGER NOT NULL DEFAULT 0, num_dir_levels_lib INTEGER NOT NULL DEFAULT 0, integrity BLOB, media_kind INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, total_burn_time_ms REAL NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, relative_volume INTEGER, eq_preset TEXT, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, is_ota_purchased INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, copyright TEXT, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0, is_streaming_quality INTEGER NOT NULL DEFAULT 0, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, external_guid TEXT, feed_url TEXT, store_kind INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, redownload_action_params TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, audio_format INTEGER NOT NULL DEFAULT 0, sample_rate REAL NOT NULL DEFAULT 0, duration INTEGER NOT NULL DEFAULT 0, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, analysis_inhibit_flags INTEGER NOT NULL DEFAULT 0, audio_fingerprint INTEGER NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER  NOT NULL DEFAULT 0, has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, is_hd INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, subtitle_track_id INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', bit_rate INTEGER NOT NULL DEFAULT 0, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, jalisco_token INTEGER NOT NULL DEFAULT 0, codec_type INTEGER NOT NULL DEFAULT 0, codec_subtype INTEGER NOT NULL DEFAULT 0, format TEXT, data_kind INTEGER NOT NULL DEFAULT 0, data_url TEXT, has_video INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, has_chapter_data INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE item ADD COLUMN is_video INTEGER NOT NULL DEFAULT 0
ALTER TABLE item ADD COLUMN is_podcast INTEGER NOT NULL DEFAULT 0
ALTER TABLE item ADD COLUMN is_itunes_u INTEGER NOT NULL DEFAULT 0
UPDATE item SET is_video = (((item.media_type & ~65280) = 0) OR (item.media_type = 1032)), is_podcast = ((item.media_type & (4 | 256)) != 0), is_itunes_u = ((item.media_type & (32 | 4096)) != 0) 
PRAGMA user_version = 1140118;
CREATE TABLE item_store (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, redownload_action_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_store (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, store_saga_id, purchase_history_id, purchase_history_token, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, redownload_action_params, store_saga_id, purchase_history_id, jalisco_token, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status FROM item_extra
CREATE TABLE item_playback (item_pid INTEGER PRIMARY KEY, audio_format INTEGER NOT NULL DEFAULT 0, bit_rate INTEGER NOT NULL DEFAULT 0, codec_type INTEGER NOT NULL DEFAULT 0, codec_subtype INTEGER NOT NULL DEFAULT 0, data_kind INTEGER NOT NULL DEFAULT 0, data_url TEXT, duration INTEGER NOT NULL DEFAULT 0, eq_preset TEXT, format TEXT, gapless_heuristic_info INTEGER NOT NULL DEFAULT 0, gapless_encoding_delay INTEGER NOT NULL DEFAULT 0, gapless_encoding_drain INTEGER NOT NULL DEFAULT 0, gapless_last_frame_resynch INTEGER NOT NULL DEFAULT 0, has_video INTEGER NOT NULL DEFAULT 0, relative_volume INTEGER, sample_rate REAL NOT NULL DEFAULT 0, start_time_ms REAL NOT NULL DEFAULT 0, stop_time_ms REAL NOT NULL DEFAULT 0, volume_normalization_energy INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_playback (item_pid, audio_format, bit_rate, codec_type, codec_subtype, data_kind, data_url, duration, eq_preset, format, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, has_video, relative_volume, sample_rate, start_time_ms, stop_time_ms, volume_normalization_energy) SELECT item_pid, audio_format, bit_rate, codec_type, codec_subtype, data_kind, data_url, duration, eq_preset, format, gapless_heuristic_info, gapless_encoding_delay, gapless_encoding_drain, gapless_last_frame_resynch, has_video, relative_volume, sample_rate, start_time_ms, stop_time_ms, volume_normalization_energy FROM item_extra
CREATE TABLE item_video (item_pid INTEGER PRIMARY KEY, video_quality INTEGER NOT NULL DEFAULT 0, is_rental INTEGER NOT NULL DEFAULT 0, has_chapter_data INTEGER NOT NULL DEFAULT 0, season_number INTEGER NOT NULL DEFAULT 0, episode_id TEXT NOT NULL DEFAULT '', network_name TEXT NOT NULL DEFAULT '', extended_content_rating TEXT NOT NULL DEFAULT '', movie_info TEXT NOT NULL DEFAULT '', has_alternate_audio INTEGER NOT NULL DEFAULT 0, has_subtitles INTEGER NOT NULL DEFAULT 0, audio_language INTEGER NOT NULL DEFAULT 0, audio_track_index INTEGER NOT NULL DEFAULT 0, audio_track_id INTEGER NOT NULL DEFAULT 0, subtitle_language INTEGER NOT NULL DEFAULT 0, subtitle_track_index INTEGER NOT NULL DEFAULT 0, rental_duration INTEGER NOT NULL DEFAULT 0, rental_playback_duration INTEGER NOT NULL DEFAULT 0, rental_playback_date_started INTEGER NOT NULL DEFAULT 0, rental_date_started INTEGER  NOT NULL DEFAULT 0, is_demo INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_video (item_pid, video_quality, is_rental, has_chapter_data, season_number, episode_id, network_name, extended_content_rating, movie_info, has_alternate_audio, has_subtitles, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, is_demo) SELECT item_pid, is_hd, is_rental, has_chapter_data, season_number, episode_id, network_name, extended_content_rating, movie_info, has_alternate_audio, has_subtitles, audio_language, audio_track_index, audio_track_id, subtitle_language, subtitle_track_index, rental_duration, rental_playback_duration, rental_playback_date_started, rental_date_started, is_demo FROM item_extra
date_accessed
purgeable_list
date_last_used
is_alarm
chosen_by_auto_fill
item_stats
item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, is_downloading INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0
item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, artwork_cache_id INTEGER NOT NULL DEFAULT 0, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_temporary_cloud_download INTEGER NOT NULL DEFAULT 0, is_streaming_quality INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140119;
ALTER TABLE item_store ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
UPDATE item_store SET sync_id = item_pid WHERE item_pid IN (SELECT item_pid from item JOIN base_location USING (base_location_id) WHERE base_location_id != 0 AND path != 'Purchases' AND path != 'CloudAssets')
PRAGMA user_version = 1140120;
UPDATE item SET base_location_id = 200 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'CloudAssets')
UPDATE base_location SET base_location_id = 200 WHERE path = 'CloudAssets'
UPDATE item SET base_location_id = 300 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'Purchases')
UPDATE item SET base_location_id = 300 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = '/var/mobile/Media/Purchases')
UPDATE base_location SET base_location_id = 300 WHERE path = 'Purchases'
UPDATE item SET base_location_id = %d WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'iTunes_Control/Music/F%02d')
UPDATE base_location SET base_location_id = %d WHERE path = 'iTunes_Control/Music/F%02d'
Media/LoFiCloudAssets
SELECT location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE is_streaming_quality = 1 AND path = 'CloudAssets' AND LENGTH(location) > 0
UPDATE item SET base_location_id = 100 WHERE item_pid IN (SELECT item_pid from item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE is_streaming_quality = 1 AND path = 'CloudAssets')
INSERT INTO base_location VALUES (100, 'LoFiCloudAssets')
Media/CloudAssets
.plist
needs_restore
item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, store_bookmark_timestamp REAL DEFAULT NULL, store_bookmark_entity_revision INTEGER DEFAULT NULL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0
match_redownload_params
(CASE store_saga_id WHEN 0 THEN '' ELSE redownload_action_params END)
purchase_history_redownload_params
(CASE WHEN (store_saga_id = 0 AND purchase_history_id != 0) THEN redownload_action_params ELSE '' END)
home_sharing_id
store_link_id
item
item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0
item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, artwork_cache_id INTEGER NOT NULL DEFAULT 0, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0
remote_location_id
(CASE WHEN store_saga_id != 0 THEN 200 ELSE (CASE WHEN purchase_history_id != 0 THEN 100 ELSE 0 END) END)
base_location_id
(IFNULL(base_location_id, 0))
item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER DEFAULT 0, track_number INTEGER DEFAULT 0, episode_sort_id INTEGER DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, is_video INTEGER NOT NULL DEFAULT 0, is_podcast INTEGER NOT NULL DEFAULT 0, is_itunes_u INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140130;
CREATE TABLE item_storebookmark_identifier (item_pid INTEGER PRIMARY KEY, storebookmark_identifier TEXT NOT NULL)
PRAGMA user_version = 1140140;
DROP TRIGGER IF EXISTS on_update_item_setIsMediaColumns
DROP TRIGGER IF EXISTS on_insert_item_setRemoteLocationColumn
DROP TRIGGER IF EXISTS on_update_item_setRemoteLocationColumn
PRAGMA user_version = 1140150;
ALTER TABLE container ADD COLUMN contained_media_type INTEGER NOT NULL DEFAULT 0
CREATE TABLE container_item_media_type (container_pid INTEGER NOT NULL, media_type INTEGER NOT NULL, count INTEGER NOT NULL DEFAULT 0, UNIQUE(container_pid, media_type))
PRAGMA user_version = 1140160;
CREATE TABLE item_upp (item_pid INTEGER PRIMARY KEY, bookkeeper_identifier TEXT NOT NULL, metadata_timestamp REAL DEFAULT NULL, metadata_entity_revision INTEGER DEFAULT NULL)
INSERT INTO item_upp (item_pid, bookkeeper_identifier, metadata_timestamp, metadata_entity_revision) SELECT item_pid, storebookmark_identifier, store_bookmark_timestamp, store_bookmark_entity_revision FROM item JOIN item_storebookmark_identifier USING(item_pid) JOIN item_stats USING(item_pid);
DROP INDEX IF EXISTS ItemStorebookmarkIdentifier_identifier
DROP INDEX IF EXISTS ItemBookkeeperItemLookup
DROP TABLE IF EXISTS item_storebookmark_identifier
item_pid INTEGER PRIMARY KEY, user_rating INTEGER DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER DEFAULT 0, play_count_recent INTEGER DEFAULT 0, has_been_played INTEGER DEFAULT 0, date_played INTEGER DEFAULT 0, date_skipped INTEGER DEFAULT 0, date_accessed INTEGER DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER DEFAULT 0, skip_count_recent INTEGER DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL, hidden INTEGER DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1140170;
ALTER TABLE item_artist ADD COLUMN artist_artwork_cache_id TEXT NOT NULL DEFAULT ''
ALTER TABLE album_artist ADD COLUMN artist_artwork_cache_id TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1140180;
ALTER TABLE container ADD COLUMN is_ignorable_itunes_playlist INTEGER DEFAULT 0
UPDATE container SET is_ignorable_itunes_playlist = 1 WHERE (is_hidden = 1 AND distinguished_kind NOT IN (19, 20, 32))
PRAGMA user_version = 1140190;
PRAGMA user_version = 1140200;
DROP TRIGGER IF EXISTS on_update_container_setIsIgnorableITunesPlaylist
PRAGMA user_version = 1140210;
ALTER TABLE item_extra ADD COLUMN screenshot_cache_id TEXT
PRAGMA user_version = 1140230;
UPDATE item SET base_location_id = 400 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = 'Podcasts')
UPDATE base_location SET base_location_id = 400 WHERE path = 'Podcasts'
UPDATE item SET base_location_id = 400 WHERE item_pid IN (SELECT item_pid FROM item JOIN base_location USING(base_location_id) WHERE path = '/var/mobile/Media/Podcasts')
PRAGMA user_version = 1140240;
PRAGMA user_version = 1140250;
PRAGMA user_version = 1140260;
DROP INDEX IF EXISTS ItemLocation
DROP INDEX IF EXISTS ItemItemArtist
DROP INDEX IF EXISTS ItemComposer
DROP INDEX IF EXISTS ItemGenre
PRAGMA user_version = 1140300;
PRAGMA user_version = 1140310;
select item_pid, item_extra.title, item_extra.total_time_ms from item_store join item_extra using (item_pid) where item_pid in (select sync_id from item_store where sync_id != 0) and sync_id = 0
select item_pid from item_store join item_extra using (item_pid) where item_store.sync_id = ? and (item_extra.title = ? or item_extra.total_time_ms = ?)
update item_store set sync_id = ? where item_pid = ?
delete from item where item_pid = ?
delete from item_extra where item_pid = ?
delete from item_store where item_pid = ?
delete from item_stats where item_pid = ?
delete from item_playback where item_pid = ?
delete from item_search where item_pid = ?
delete from item_video where item_pid = ?
delete from entity_revision where entity_pid = ?
update _MLDatabaseProperties set value=0 where key='MLSyncClientSyncAnchor'
PRAGMA user_version = 1140320;
PRAGMA user_version = 1150000;
DELETE FROM entity_revision where class = 7
PRAGMA user_version = 1150010;
DROP TRIGGER IF EXISTS on_insert_item_setIsMediaColumns;
DROP TRIGGER IF EXISTS on_update_item_setIsMediaColumns;
item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER DEFAULT 0, track_number INTEGER DEFAULT 0, episode_sort_id INTEGER DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1150020;
UPDATE item SET media_type = ML3StandardizedMediaType(media_type);
PRAGMA user_version = 1150030;
update item_store set store_item_id = 0 where store_item_id = -1
PRAGMA user_version = 1150040;
ALTER TABLE album ADD COLUMN album_year INTEGER NOT NULL DEFAULT 0
UPDATE album SET album_year = (SELECT IFNULL(MAX(year), 0) FROM item_extra JOIN item USING(item_pid) WHERE item.album_pid = album.album_pid)
PRAGMA user_version = 1150050;
UPDATE item SET remote_location_id = (SELECT CASE WHEN home_sharing_id != 0 THEN 300 ELSE (CASE WHEN IFNULL(match_redownload_params, '') != '' THEN 200 ELSE (CASE WHEN IFNULL(purchase_history_redownload_params, '') != '' AND purchase_history_id != 0 THEN 100 ELSE 0 END) END) END FROM item_store WHERE item.item_pid = item_store.item_pid)
PRAGMA user_version = 1150060;
PRAGMA user_version = 1150070;
assistant
SELECT 1 FROM item WHERE media_type IN (4, 256) LIMIT 1
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'NeedToRemovePodcastsFromSiri')
PRAGMA user_version = 1150080;
Media
SELECT item.ROWID, base_location.path, item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id != 0 AND item_extra.file_size = 0
UPDATE item_extra SET file_size = %zu WHERE item_pid = %lld
PRAGMA user_version = 1150090;
item_artist
ALTER TABLE %@ ADD COLUMN keep_local INTEGER NOT NULL DEFAULT 0
ALTER TABLE %@ ADD COLUMN keep_local_status INTEGER NOT NULL DEFAULT 0
CREATE INDEX IF NOT EXISTS ItemKeepLocal ON item (keep_local)
CREATE INDEX IF NOT EXISTS ItemArtistKeepLocal ON item_artist (keep_local)
CREATE INDEX IF NOT EXISTS AlbumKeepLocal ON album (keep_local)
CREATE INDEX IF NOT EXISTS AlbumArtistKeepLocal ON album_artist (keep_local)
CREATE INDEX IF NOT EXISTS ContainerKeepLocal ON container (keep_local)
CREATE INDEX IF NOT EXISTS GenreKeepLocal ON genre (keep_local)
CREATE INDEX IF NOT EXISTS ComposerKeepLocal ON composer (keep_local)
PRAGMA user_version = 1160000;
ALTER TABLE item_store ADD COLUMN reserved TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1160010;
ALTER TABLE item_extra ADD COLUMN version TEXT NOT NULL DEFAULT ''
ALTER TABLE item_extra ADD COLUMN display_version TEXT NOT NULL DEFAULT ''
ALTER TABLE item_playback ADD COLUMN progression_direction INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN vpp_is_licensed INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN vpp_org_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN vpp_org_name TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1160020;
CREATE TABLE item_artwork (item_pid INTEGER PRIMARY KEY, best_artwork_token TEXT NOT NULL DEFAULT '', best_artwork_source_type INTEGER NOT NULL DEFAULT 0, cloud_artwork_token TEXT NOT NULL DEFAULT '', sync_artwork_token TEXT NOT NULL DEFAULT '', purchase_history_artwork_token TEXT NOT NULL DEFAULT '', store_artwork_token TEXT NOT NULL DEFAULT '')
CREATE TABLE item_screenshot (item_pid INTEGER PRIMARY KEY, best_screenshot_token TEXT NOT NULL DEFAULT '', best_screenshot_source_type INTEGER NOT NULL DEFAULT 0, cloud_screenshot_token TEXT NOT NULL DEFAULT '', sync_screenshot_token TEXT NOT NULL DEFAULT '', purchase_history_screenshot_token TEXT NOT NULL DEFAULT '', store_screenshot_token TEXT NOT NULL DEFAULT '')
CREATE TABLE artwork (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, relative_path TEXT NOT NULL DEFAULT '', artwork_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_token, artwork_source_type))
INSERT INTO item_artwork (item_pid, cloud_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id != 0
INSERT INTO item_artwork (item_pid, sync_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id = 0 AND sync_id != 0 AND artwork_cache_id < 10001
INSERT INTO item_artwork (item_pid, purchase_history_artwork_token) SELECT item_pid, artwork_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE artwork_cache_id IS NOT NULL AND artwork_cache_id != 0 AND store_saga_id = 0 AND purchase_history_id != 0 AND sync_id = 0
INSERT INTO item_screenshot (item_pid, cloud_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id != 0
INSERT INTO item_screenshot (item_pid, sync_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id = 0 AND sync_id != 0 AND screenshot_cache_id < 10001
INSERT INTO item_screenshot (item_pid, purchase_history_screenshot_token) SELECT item_pid, screenshot_cache_id FROM item_extra JOIN item_store USING (item_pid) WHERE screenshot_cache_id IS NOT NULL AND screenshot_cache_id != 0 AND store_saga_id = 0 AND purchase_history_id != 0 AND sync_id = 0
UPDATE item_artwork SET best_artwork_token = (CASE WHEN cloud_artwork_token != '' THEN cloud_artwork_token ELSE (CASE WHEN sync_artwork_token != '' THEN sync_artwork_token ELSE (CASE WHEN purchase_history_artwork_token != '' THEN purchase_history_artwork_token ELSE (CASE WHEN store_artwork_token != '' THEN store_artwork_token ELSE '' END) END) END) END), best_artwork_source_type = (CASE WHEN cloud_artwork_token != '' THEN 1 ELSE (CASE WHEN sync_artwork_token != '' THEN 2 ELSE (CASE WHEN purchase_history_artwork_token != '' THEN 3 ELSE (CASE WHEN store_artwork_token != '' THEN 4 ELSE 0 END) END) END) END)
UPDATE item_screenshot SET best_screenshot_token = (CASE WHEN cloud_screenshot_token != '' THEN cloud_screenshot_token ELSE (CASE WHEN sync_screenshot_token != '' THEN sync_screenshot_token ELSE (CASE WHEN purchase_history_screenshot_token != '' THEN purchase_history_screenshot_token ELSE (CASE WHEN store_screenshot_token != '' THEN store_screenshot_token ELSE '' END) END) END) END), best_screenshot_source_type = (CASE WHEN cloud_screenshot_token != '' THEN 1 ELSE (CASE WHEN sync_screenshot_token != '' THEN 2 ELSE (CASE WHEN purchase_history_screenshot_token != '' THEN 3 ELSE (CASE WHEN store_screenshot_token != '' THEN 4 ELSE 0 END) END) END) END)
SELECT DISTINCT(best_artwork_token), best_artwork_source_type FROM item_artwork WHERE best_artwork_token != ''
INSERT INTO artwork (artwork_token, artwork_source_type, relative_path, artwork_type) VALUES (?,?,?,?)
SELECT DISTINCT(best_screenshot_token), best_screenshot_source_type FROM item_screenshot WHERE best_screenshot_token != ''
SELECT item_pid, chapter_data FROM chapter JOIN item USING (item_pid) WHERE chapter_data IS NOT NULL
chapter=%llu
v24@?0@"NSString"8^B16
SELECT DISTINCT(artist_artwork_cache_id) FROM album_artist WHERE artist_artwork_cache_id != ''
CREATE TABLE new_album (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO new_album (album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, artwork_cache_id, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album
UPDATE new_album SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'
DROP TABLE album
ALTER TABLE new_album RENAME TO album
CREATE TABLE new_item_artist (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', artist_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO new_item_artist (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, representative_item_pid, artist_artwork_token, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, representative_item_pid, artist_artwork_cache_id, keep_local, keep_local_status FROM item_artist
UPDATE new_item_artist SET representative_item_artwork_token = IFNULL( (SELECT best_artwork_token FROM item_artwork WHERE item_pid = representative_item_pid), '')
ALTER TABLE new_item_artist RENAME TO item_artist
CREATE TABLE new_album_artist (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO new_album_artist (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_cache_id, representative_item_pid, artwork_cache_id, keep_local, keep_local_status FROM album_artist
UPDATE new_album_artist SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'
DROP TABLE album_artist
ALTER TABLE new_album_artist RENAME TO album_artist
CREATE TABLE new_composer (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO new_composer (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, artwork_cache_id, keep_local, keep_local_status FROM composer
UPDATE new_composer SET representative_item_artwork_token = '' WHERE representative_item_artwork_token = '0'
DROP TABLE composer
ALTER TABLE new_composer RENAME TO composer
CREATE TABLE new_genre (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL UNIQUE, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO new_genre (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM genre
UPDATE new_genre SET representative_item_artwork_token = IFNULL( (SELECT best_artwork_token FROM item_artwork WHERE item_pid = representative_item_pid), '')
DROP TABLE genre
ALTER TABLE new_genre RENAME TO genre
CREATE TABLE new_item_extra (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER DEFAULT 0, track_count INTEGER DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_compilation INTEGER NOT NULL DEFAULT 0, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0, version TEXT NOT NULL DEFAULT '', display_version TEXT NOT NULL DEFAULT '')
INSERT INTO new_item_extra (item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_compilation, is_audible_audio_book, date_created, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version) SELECT item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_compilation, is_audible_audio_book, date_created, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version FROM item_extra
ALTER TABLE new_item_extra RENAME TO item_extra
DROP TABLE IF EXISTS artwork_conversion
PRAGMA user_version = 1160030;
INSERT OR IGNORE INTO item_artwork (item_pid) SELECT item_pid FROM item
INSERT OR IGNORE INTO item_screenshot (item_pid) SELECT item_pid FROM item
PRAGMA user_version = 1160040;
PRAGMA user_version = 1160050;
DELETE FROM artwork WHERE artwork_token=''
PRAGMA user_version = 1160060;
extras_url
CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, reserved TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '')
INSERT INTO item_store_new (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name FROM item_store
DROP TABLE item_store
ALTER TABLE item_store_new RENAME TO item_store
PRAGMA user_version = 1160070;
UPDATE item SET remote_location_id = (SELECT (CASE WHEN home_sharing_id != 0 THEN 300 ELSE (CASE WHEN IFNULL(match_redownload_params, '') != '' THEN 200 ELSE (CASE WHEN IFNULL(purchase_history_redownload_params, '') != '' AND purchase_history_id != 0 THEN 100 ELSE 0 END) END) END) FROM item_store WHERE item_store.item_pid = item.item_pid)
PRAGMA user_version = 1160080;
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'ResetSyncToRemoveMultiverseIdentifiersFromSiri')
PRAGMA user_version = 1160090;
CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0.0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill) SELECT item_pid, IFNULL(user_rating, 0), IFNULL(needs_restore, 0), download_identifier, IFNULL(play_count_user, 0), IFNULL(play_count_recent, 0), IFNULL(has_been_played, 0), IFNULL(date_played, 0), IFNULL(date_skipped, 0), IFNULL(date_accessed, 0), IFNULL(is_alarm, 0), IFNULL(skip_count_user, 0), IFNULL(skip_count_recent, 0), IFNULL(remember_bookmark, 0), IFNULL(bookmark_time_ms, 0.0), IFNULL(hidden, 0), IFNULL(chosen_by_auto_fill, 0) FROM item_stats
DROP TABLE item_stats
ALTER TABLE item_stats_new RENAME TO item_stats
PRAGMA user_version = 1160100;
CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_artist_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, reserved TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '')
INSERT INTO item_store_new (item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name) SELECT item_pid, store_item_id, store_artist_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name FROM item_store
UPDATE item_store_new SET downloader_account_id = account_id WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id > 0 AND base_location_id <= 3840)
SELECT item_pid, location FROM item JOIN item_extra USING (item_pid) WHERE base_location_id = 300
UPDATE item_store_new SET is_protected = 1 WHERE item_pid = %lld
UPDATE item_store_new SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item WHERE base_location_id IN (100, 200))
UPDATE item_store_new SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id >= 3840 AND key_id > 0)
PRAGMA user_version = 1160110;
UPDATE item_stats SET play_count_recent = 0 WHERE item_pid IN (SELECT item_pid from item WHERE remote_location_id = 200)
UPDATE item_stats SET skip_count_recent = 0 WHERE item_pid IN (SELECT item_pid from item WHERE remote_location_id = 200)
PRAGMA user_version = 1160120;
SELECT artwork_token, relative_path FROM artwork
UPDATE artwork SET relative_path = '%@' WHERE artwork_token = '%@'
PRAGMA user_version = 1160130;
UPDATE container SET play_order = 40 WHERE store_cloud_id != 0 AND play_order = 37
UPDATE container SET play_order = 41 WHERE store_cloud_id != 0 AND play_order = 38
UPDATE container SET play_order = 43 WHERE store_cloud_id != 0 AND play_order = 39
UPDATE container SET play_order =  1 WHERE store_cloud_id != 0 AND play_order = 40
UPDATE container SET play_order = 44 WHERE store_cloud_id != 0 AND play_order = 41
UPDATE container SET play_order = 45 WHERE store_cloud_id != 0 AND play_order = 42
UPDATE container SET play_order = 46 WHERE store_cloud_id != 0 AND play_order = 43
UPDATE container SET play_order = 47 WHERE store_cloud_id != 0 AND play_order = 44
UPDATE container SET play_order = play_order + 4 WHERE store_cloud_id != 0 AND play_order >= 45 AND play_order <= 58
UPDATE container SET play_order = play_order + 5 WHERE store_cloud_id != 0 AND play_order >= 59
PRAGMA user_version = 1160140;
SELECT location_kind_id, kind FROM location_kind
UPDATE item_extra set location_kind_id = ? WHERE location_kind_id = ?
DROP TABLE location_kind
PRAGMA user_version = 1160150;
PRAGMA user_version = 1160160;
ALTER TABLE item_store ADD COLUMN sync_redownload_params TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1162010;
PRAGMA user_version = 1162020;
DROP INDEX IF EXISTS ItemExtraDateModified
PRAGMA user_version = 1162030;
PRAGMA user_version = 1162040;
PRAGMA user_version = 1162050;
CREATE TABLE container_artwork (container_pid INTEGER PRIMARY KEY, best_artwork_token TEXT NOT NULL DEFAULT '', best_artwork_source_type INTEGER NOT NULL DEFAULT 0, cloud_artwork_token TEXT NOT NULL DEFAULT '', sync_artwork_token TEXT NOT NULL DEFAULT '', purchase_history_artwork_token TEXT NOT NULL DEFAULT '', store_artwork_token TEXT NOT NULL DEFAULT '')
INSERT OR IGNORE INTO container_artwork (container_pid) SELECT container_pid FROM container
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', reserved1 INTEGER NOT NULL DEFAULT 0, reserved2 TEXT NOT NULL DEFAULT '', reserved3 INTEGER NOT NULL DEFAULT 0, reserved4 INTEGER NOT NULL DEFAULT 0, reserved5 INTEGER NOT NULL DEFAULT 0, reserved6 TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, keep_local, keep_local_status FROM container
DROP TABLE container
ALTER TABLE container_new RENAME TO container
CREATE TABLE item_stats_new (item_pid INTEGER PRIMARY KEY, user_rating INTEGER NOT NULL DEFAULT 0, needs_restore INTEGER NOT NULL DEFAULT 0, download_identifier TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, date_skipped INTEGER NOT NULL DEFAULT 0, date_accessed INTEGER NOT NULL DEFAULT 0, is_alarm INTEGER NOT NULL DEFAULT 0, skip_count_user INTEGER NOT NULL DEFAULT 0, skip_count_recent INTEGER NOT NULL DEFAULT 0, remember_bookmark INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0.0, hidden INTEGER NOT NULL DEFAULT 0, chosen_by_auto_fill INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_stats_new (item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill) SELECT item_pid, user_rating, needs_restore, download_identifier, play_count_user, play_count_recent, has_been_played, date_played, date_skipped, date_accessed, is_alarm, skip_count_user, skip_count_recent, remember_bookmark, bookmark_time_ms, hidden, chosen_by_auto_fill FROM item_stats
PRAGMA user_version = 1162060;
CREATE TABLE local_playback_event (id INTEGER PRIMARY KEY AUTOINCREMENT, item_pid INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0)
PRAGMA user_version = 1162070;
store_item_pid
local_playback_event
CREATE TABLE local_playback_event_new (id INTEGER PRIMARY KEY AUTOINCREMENT, item_pid INTEGER NOT NULL DEFAULT 0, store_item_id INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0)
INSERT INTO local_playback_event_new (id, item_pid, store_item_id, date_played) SELECT id, item_pid, store_item_pid, date_played FROM local_playback_event
DROP TABLE local_playback_event
ALTER TABLE local_playback_event_new RENAME TO local_playback_event
PRAGMA user_version = 1162080;
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', reserved1 INTEGER NOT NULL DEFAULT 0, reserved2 TEXT NOT NULL DEFAULT '', reserved3 INTEGER NOT NULL DEFAULT 0, reserved4 INTEGER NOT NULL DEFAULT 0, reserved5 INTEGER NOT NULL DEFAULT 0, reserved6 TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, reserved6, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, reserved6, keep_local, keep_local_status FROM container
UPDATE container SET is_editable = 1 WHERE distinguished_kind = 0 AND smart_criteria IS NULL AND smart_is_genius = 0 AND is_hidden = 0 AND is_src_remote = 0
PRAGMA user_version = 1162090;
CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, artist_artwork_token, representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status FROM item_artist
UPDATE item_artist SET store_id = IFNULL((SELECT store_artist_id FROM item JOIN item_store USING (item_pid) WHERE purchase_history_id != 0 AND item.item_artist_pid = item_artist.item_artist_pid), 0)
CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, artist_artwork_token TEXT NOT NULL DEFAULT '', representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token,representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, artist_artwork_token,representative_item_pid, representative_item_artwork_token, keep_local, keep_local_status FROM album_artist
ALTER TABLE album_artist_new RENAME TO album_artist
UPDATE album_artist SET store_id = IFNULL((SELECT store_artist_id FROM item JOIN item_store USING (item_pid) WHERE purchase_history_id = 0 AND item.album_artist_pid = album_artist.album_artist_pid), 0)
CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '')
INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, reserved, vpp_is_licensed, vpp_org_id, vpp_org_name, IFNULL(sync_redownload_params, '') FROM item_store
PRAGMA user_version = 1162100;
PRAGMA user_version = 1162110;
ALTER TABLE item_store ADD COLUMN is_foreign INTEGER NOT NULL DEFAULT 0
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_shared INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, reserved1, reserved2, reserved3, reserved4, reserved5, keep_local, keep_local_status FROM container
PRAGMA user_version = 1240000;
PRAGMA user_version = 1164010;
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_subscriber_count, cloud_subscriber_play_count, cloud_subscriber_like_count, keep_local, keep_local_status FROM container
CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', is_playlist_only INTEGER NOT NULL DEFAULT 0, needs_reporting INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, is_playlist_only) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, is_foreign FROM item_store
PRAGMA user_version = 1240010;
ALTER TABLE item_store ADD COLUMN matched_store_item_id INTEGER NOT NULL DEFAULT 0
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_shared INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container
CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, representative_item_artwork_token TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, representative_item_artwork_token, grouping_key, cloud_status, user_rating, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album
ALTER TABLE album_new RENAME TO album
PRAGMA user_version = 1240020;
SELECT item.album_pid, album.album_artist_pid FROM item JOIN album USING (album_pid) GROUP BY item.album_pid HAVING COUNT(DISTINCT item.album_artist_pid) > 1
SELECT ROWID, album_artist_pid, album_pid FROM item WHERE album_pid IN (%@)
v32@?0@"NSNumber"8@"NSArray"16^B24
PRAGMA user_version = 1240030;
UPDATE album SET sort_album = NULL WHERE sort_album = ''
PRAGMA user_version = 1240040;
CREATE TABLE lyrics_new (item_pid INTEGER PRIMARY KEY, checksum INTEGER NOT NULL DEFAULT 0, pending_checksum INTEGER NOT NULL DEFAULT 0, lyrics TEXT NOT NULL DEFAULT '')
INSERT INTO lyrics_new (item_pid, checksum, pending_checksum, lyrics) SELECT item_pid, IFNULL(checksum, 0), IFNULL(checksum, 0), IFNULL(lyrics, '') FROM lyrics
DROP TABLE lyrics
ALTER TABLE lyrics_new RENAME TO lyrics
PRAGMA user_version = 1260000;
ALTER TABLE item_store ADD COLUMN playback_endpoint_type INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1280000;
pending_checksum
PRAGMA user_version = 1280010;
CREATE TABLE artwork_token (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type))
CREATE TABLE best_artwork_token (entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, available_artwork_token TEXT NOT NULL DEFAULT '', fetchable_artwork_token TEXT NOT NULL DEFAULT '', fetchable_artwork_source_type INTEGER NOT NULL DEFAULT 0, UNIQUE (entity_pid, entity_type, artwork_type))
CREATE INDEX ArtworkTokenArtworkToken ON artwork_token (artwork_token)
CREATE INDEX ArtworkTokenEntityPIDEntityType ON artwork_token (entity_pid, entity_type)
ALTER TABLE artwork ADD COLUMN interest_data BLOB
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT cloud_artwork_token, 1, 1, item_pid, 0 FROM item_artwork WHERE cloud_artwork_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT sync_artwork_token, 2, 1, item_pid, 0 FROM item_artwork WHERE sync_artwork_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT purchase_history_artwork_token, 3, 1, item_pid, 0 FROM item_artwork WHERE purchase_history_artwork_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT store_artwork_token, 4, 1, item_pid, 0 FROM item_artwork WHERE store_artwork_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT cloud_screenshot_token, 1, 2, item_pid, 0 FROM item_screenshot WHERE cloud_screenshot_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT sync_screenshot_token, 2, 2, item_pid, 0 FROM item_screenshot WHERE sync_screenshot_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT purchase_history_screenshot_token, 3, 2, item_pid, 0 FROM item_screenshot WHERE purchase_history_screenshot_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT store_screenshot_token, 4, 2, item_pid, 0 FROM item_screenshot WHERE store_screenshot_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT artist_artwork_token, 4, 4, item_artist_pid, 2 FROM item_artist WHERE artist_artwork_token != ''
INSERT INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) SELECT artist_artwork_token, 4, 4, album_artist_pid, 7 FROM album_artist WHERE artist_artwork_token != ''
CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status FROM album
CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status FROM item_artist
CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0,  store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status FROM album_artist
CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM composer
ALTER TABLE composer_new RENAME TO composer
CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL UNIQUE, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status FROM genre
ALTER TABLE genre_new RENAME TO genre
DROP TABLE container_artwork
DROP TABLE item_artwork
DROP TABLE item_screenshot
PRAGMA user_version = 1280020;
is_playlist_only
PRAGMA user_version = 1280030;
matched_store_item_id
subscription_store_item_id
playlist_author_id TEXT NOT NULL DEFAULT ''
radio_station_id TEXT NOT NULL DEFAULT ''
advertisement_unique_id INTEGER NOT NULL DEFAULT 0
advertisement_type INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1280040;
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0,date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1,is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0,is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0,play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0,smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0,smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0,smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0,album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0,filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0,container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0,has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0,cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_id TEXT NOT NULL DEFAULT '', cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0,cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_shared, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container
PRAGMA user_version = 1280050;
UPDATE artwork_token SET artwork_source_type = 200 WHERE artwork_source_type = 1
UPDATE best_artwork_token SET fetchable_artwork_source_type = 200 WHERE fetchable_artwork_source_type = 1
UPDATE artwork SET artwork_source_type = 200 WHERE artwork_source_type = 1
UPDATE artwork_token SET artwork_source_type = 300 WHERE artwork_source_type = 2
UPDATE best_artwork_token SET fetchable_artwork_source_type = 300 WHERE fetchable_artwork_source_type = 2
UPDATE artwork SET artwork_source_type = 300 WHERE artwork_source_type = 2
UPDATE artwork_token SET artwork_source_type = 400 WHERE artwork_source_type = 3
UPDATE best_artwork_token SET fetchable_artwork_source_type = 400 WHERE fetchable_artwork_source_type = 3
UPDATE artwork SET artwork_source_type = 400 WHERE artwork_source_type = 3
UPDATE artwork_token SET artwork_source_type = 500 WHERE artwork_source_type = 4
UPDATE best_artwork_token SET fetchable_artwork_source_type = 500 WHERE fetchable_artwork_source_type = 4
UPDATE artwork SET artwork_source_type = 500 WHERE artwork_source_type = 4
CREATE TABLE artwork_token_new (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_source_type, artwork_type, entity_pid, entity_type))
INSERT OR REPLACE INTO artwork_token_new SELECT * FROM artwork_token
DROP TABLE artwork_token
ALTER TABLE artwork_token_new RENAME TO artwork_token
PRAGMA user_version = 1280060;
PRAGMA user_version = 1280070;
radio_station_id
ALTER TABLE item_store ADD COLUMN radio_station_id TEXT NOT NULL DEFAULT ''
ALTER TABLE item_store ADD COLUMN advertisement_unique_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN advertisement_type INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1280080;
PRAGMA user_version = 1280090;
DROP INDEX IF EXISTS ItemMediaType
PRAGMA user_version = 1280100;
PRAGMA user_version = 1280110;
PRAGMA auto_vacuum = 0;
PRAGMA user_version = 1280120;
CREATE TABLE container_seed_new (container_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, seed_order INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_seed_new (container_pid, item_pid, seed_order) SELECT container_pid, item_pid, seed_order FROM container_seed
DROP TABLE container_seed
ALTER TABLE container_seed_new RENAME TO container_seed
PRAGMA user_version = 1280130;
ALTER TABLE item_store ADD COLUMN is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1280140;
CREATE TABLE item_store_new (item_pid INTEGER PRIMARY KEY, store_item_id INTEGER NOT NULL DEFAULT 0, store_composer_id INTEGER NOT NULL DEFAULT 0, store_genre_id INTEGER NOT NULL DEFAULT 0, store_playlist_id INTEGER NOT NULL DEFAULT 0, storefront_id INTEGER NOT NULL DEFAULT 0, purchase_history_id INTEGER NOT NULL DEFAULT 0, purchase_history_token INTEGER NOT NULL DEFAULT 0, purchase_history_redownload_params TEXT, store_saga_id INTEGER NOT NULL DEFAULT 0, match_redownload_params TEXT, cloud_status INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, home_sharing_id INTEGER NOT NULL DEFAULT 0, is_ota_purchased INTEGER NOT NULL DEFAULT 0, store_kind INTEGER NOT NULL DEFAULT 0, account_id INTEGER NOT NULL DEFAULT 0, downloader_account_id INTEGER NOT NULL DEFAULT 0, family_account_id INTEGER NOT NULL DEFAULT 0, is_protected INTEGER NOT NULL DEFAULT 0, key_versions INTEGER NOT NULL DEFAULT 0, key_platform_id INTEGER NOT NULL DEFAULT 0, key_id INTEGER NOT NULL DEFAULT 0, key_id_2 INTEGER NOT NULL DEFAULT 0, date_purchased INTEGER NOT NULL DEFAULT 0, date_released INTEGER NOT NULL DEFAULT 0, external_guid TEXT, feed_url TEXT, artwork_url TEXT, store_xid TEXT, store_flavor TEXT, store_matched_status INTEGER NOT NULL DEFAULT 0, store_redownloaded_status INTEGER NOT NULL DEFAULT 0, store_link_id INTEGER NOT NULL DEFAULT 0, extras_url TEXT NOT NULL DEFAULT '', vpp_is_licensed INTEGER NOT NULL DEFAULT 0, vpp_org_id INTEGER NOT NULL DEFAULT 0, vpp_org_name TEXT NOT NULL DEFAULT '', sync_redownload_params TEXT NOT NULL DEFAULT '', needs_reporting INTEGER NOT NULL DEFAULT 0, subscription_store_item_id INTEGER NOT NULL DEFAULT 0, playback_endpoint_type INTEGER NOT NULL DEFAULT 0, is_mastered_for_itunes INTEGER NOT NULL DEFAULT 0, radio_station_id TEXT NOT NULL DEFAULT '', advertisement_unique_id TEXT NOT NULL DEFAULT '', advertisement_type INTEGER NOT NULL DEFAULT 0, is_artist_uploaded_content INTEGER NOT NULL DEFAULT 0, cloud_asset_available INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_store_new (item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_type, is_artist_uploaded_content) SELECT item_pid, store_item_id, store_composer_id, store_genre_id, store_playlist_id, storefront_id, purchase_history_id, purchase_history_token, purchase_history_redownload_params, store_saga_id, match_redownload_params, cloud_status, sync_id, home_sharing_id, is_ota_purchased, store_kind, account_id, downloader_account_id, family_account_id, is_protected, key_versions, key_platform_id, key_id, key_id_2, date_purchased, date_released, external_guid, feed_url, artwork_url, store_xid, store_flavor, store_matched_status, store_redownloaded_status, store_link_id, extras_url, vpp_is_licensed, vpp_org_id, vpp_org_name, sync_redownload_params, needs_reporting, subscription_store_item_id, playback_endpoint_type, is_mastered_for_itunes, radio_station_id, advertisement_type, is_artist_uploaded_content FROM item_store
PRAGMA user_version = 1280150;
DROP INDEX IF EXISTS ItemSeries
DROP INDEX IF EXISTS ItemSeries_Section
DROP INDEX IF EXISTS ItemExtraDateCreated
DROP INDEX IF EXISTS ItemExtraIsCompilation
ALTER TABLE item ADD COLUMN in_my_library INTEGER NOT NULL DEFAULT 0
ALTER TABLE item ADD COLUMN is_compilation INTEGER NOT NULL DEFAULT 0
ALTER TABLE item ADD COLUMN date_added INTEGER NOT NULL DEFAULT 0
UPDATE item SET in_my_library = (remote_location_id != 250), is_compilation = (SELECT is_compilation FROM item_extra WHERE item.item_pid = item_extra.item_pid), date_added = (SELECT date_created FROM item_extra WHERE item.item_pid = item_extra.item_pid)
is_compilation
date_created
PRAGMA user_version = 1280160;
PRAGMA user_version = 1280170;
ALTER TABLE item_artist ADD COLUMN app_data BLOB
ALTER TABLE album_artist ADD COLUMN app_data BLOB
PRAGMA user_version = 1280180;
ALTER TABLE item_store ADD COLUMN is_subscription INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1280190;
UPDATE item_store SET store_saga_id = 0 WHERE store_saga_id = -3
UPDATE item SET remote_location_id = 50 WHERE (remote_location_id = 250 OR remote_location_id  = 201) AND (SELECT 1 FROM item_store WHERE item.item_pid = item_store.item_pid AND subscription_store_item_id != 0)
UPDATE item_store SET cloud_asset_available = 1 WHERE IFNULL(purchase_history_redownload_params, '') != '' OR IFNULL(match_redownload_params, '') != ''
PRAGMA user_version = 1280200;
PRAGMA user_version = 1280210;
DROP TRIGGER IF EXISTS on_insert_item_setInMyLibraryColumn
DROP TRIGGER IF EXISTS on_update_item_setInMyLibraryColumn
PRAGMA user_version = 1280220;
UPDATE item SET keep_local = 1 WHERE base_location_id >= 300
PRAGMA user_version = 1280230;
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_display_name, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container
UPDATE container SET distinguished_kind = 10000 WHERE distinguished_kind = 35
PRAGMA user_version = 1280240;
PRAGMA user_version = 1280250;
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0)
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_is_public, cloud_is_subscribed, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status FROM container
UPDATE _MLDatabaseProperties SET value = 0 WHERE key = 'MLSyncClientSyncAnchor'
PRAGMA user_version = 1280260;
PRAGMA user_version = 1280270;
UPDATE item_store SET store_saga_id=store_saga_id
PRAGMA user_version = 1280280;
ALTER TABLE item_stats ADD COLUMN liked_state_changed INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1290000;
DROP INDEX IF EXISTS ItemArtistRepresentativeItemPID
DROP INDEX IF EXISTS AlbumArtistRepresentativeItemPID
DROP INDEX IF EXISTS GenreRepresentativeItemPID
DROP INDEX IF EXISTS ComposerRepresentativeItemPID
PRAGMA user_version = 1290010;
ALTER TABLE item_store ADD COLUMN sync_in_my_library INTEGER NOT NULL DEFAULT 0
UPDATE item_store SET sync_in_my_library = 1 WHERE sync_id != 0
PRAGMA user_version = 1310020;
SELECT item_pid FROM item WHERE (media_type & 8 != 0) AND album_pid = 0
SELECT 1 FROM album WHERE album_pid = ?
INSERT INTO album (album_pid, representative_item_pid) VALUES(?, ?)
UPDATE item SET album_pid = ? WHERE item_pid = ?
INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 0, 0)
DELETE FROM entity_revision WHERE entity_pid = ? AND revision_type > 0
INSERT OR REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES(?, 0, 4, 0)
PRAGMA user_version = 1310030;
DELETE FROM best_artwork_token WHERE available_artwork_token = '' AND fetchable_artwork_token = ''
PRAGMA user_version = 1310040;
PRAGMA user_version = 1310050;
DROP TRIGGER IF EXISTS on_remove_source_setPlaybackEndpointType
UPDATE item_store SET playback_endpoint_type = 1 WHERE store_saga_id = 0 AND purchase_history_id != 0 AND playback_endpoint_type = 3
PRAGMA user_version = 1320000;
UPDATE item_store SET is_protected = 1 WHERE item_pid IN (SELECT item_pid FROM item JOIN item_store USING (item_pid) WHERE base_location_id >= 3840 AND is_protected = 0 AND key_id != 0)
PRAGMA user_version = 1330000;
ALTER TABLE item ADD COLUMN show_composer INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1330010;
ALTER TABLE album ADD COLUMN app_data BLOB
PRAGMA user_version = 1350010;
UPDATE album SET app_data = NULL WHERE LENGTH(app_data) = 0
UPDATE item_artist SET app_data = NULL WHERE LENGTH(app_data) = 0
UPDATE album_artist SET app_data = NULL WHERE LENGTH(app_data) = 0
UPDATE album SET grouping_key = NULL WHERE LENGTH(grouping_key) = 0
UPDATE container SET smart_criteria = NULL WHERE LENGTH(smart_criteria) = 0
UPDATE container_items SET item_pid_data = NULL WHERE LENGTH(item_pid_data) = 0
UPDATE chapter SET chapter_data = NULL WHERE LENGTH(chapter_data) = 0
CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, IFNULL(disc_number, 0), IFNULL(track_number, 0), IFNULL(episode_sort_id, 0), base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, IFNULL(show_composer, 0) FROM item
DROP TABLE item
ALTER TABLE item_new RENAME TO item
PRAGMA user_version = 1350020;
ALTER TABLE item_store ADD COLUMN cloud_in_my_library INTEGER NOT NULL DEFAULT 0
UPDATE item_store SET cloud_in_my_library = 1 WHERE store_saga_id != 0
PRAGMA user_version = 1350030;
DROP TRIGGER IF EXISTS on_remove_source_setNeedsReporting
UPDATE item_store SET needs_reporting = 0 WHERE store_saga_id = 0
PRAGMA user_version = 1350040;
ALTER TABLE container ADD COLUMN external_vendor_identifier TEXT NOT NULL DEFAULT ''
ALTER TABLE container ADD COLUMN external_vendor_display_name TEXT NOT NULL DEFAULT ''
ALTER TABLE container ADD COLUMN external_vendor_container_tag TEXT NOT NULL DEFAULT ''
ALTER TABLE container ADD COLUMN is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1350050;
PRAGMA user_version = 1350060;
UPDATE item_store SET playback_endpoint_type = (CASE WHEN sync_id THEN 0 WHEN purchase_history_id THEN 1 WHEN is_ota_purchased THEN 0 WHEN is_subscription THEN 3 ELSE 0 END) WHERE store_saga_id = 0
PRAGMA user_version = 1360000;
UPDATE item_store SET is_subscription = 0 WHERE playback_endpoint_type = 2
UPDATE item_store SET is_subscription = 1 WHERE playback_endpoint_type = 3
PRAGMA user_version = 1360010;
ALTER TABLE item_extra ADD COLUMN classical_work TEXT NOT NULL DEFAULT ''
ALTER TABLE item_extra ADD COLUMN classical_movement TEXT NOT NULL DEFAULT ''
ALTER TABLE item_extra ADD COLUMN classical_movement_count INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_extra ADD COLUMN classical_movement_number INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1410000;
CREATE TABLE container_item (container_item_pid INTEGER PRIMARY KEY, container_pid INTEGER NOT NULL DEFAULT 0, item_pid INTEGER NOT NULL DEFAULT 0, position INTEGER NOT NULL DEFAULT 0)
SELECT container_pid FROM container WHERE smart_criteria IS NULL OR smart_is_genius
SELECT item_pid_data FROM container_items WHERE container_pid = ?
INSERT INTO container_item (container_item_pid, container_pid, item_pid, position) VALUES (?, ?, ?, ?)
DROP TABLE IF EXISTS container_items
PRAGMA user_version = 1410010;
ALTER TABLE item_video ADD COLUMN has_hls INTEGER NOT NULL DEFAULT 0
ALTER TABLE lyrics ADD COLUMN store_lyrics_available INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1410020;
PRAGMA user_version = 1410030;
UPDATE container_item SET position = position - 1 WHERE container_pid IN (SELECT DISTINCT(container_pid) FROM container_item WHERE container_pid IN (SELECT DISTINCT(container_pid) FROM container_item WHERE position > 0) AND container_pid NOT IN (SELECT container_pid FROM container_item WHERE position = 0))
PRAGMA user_version = 1410040;
CREATE TABLE play_event (play_event_pid INTEGER PRIMARY KEY, date_played INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, container_pid INTEGER NOT NULL DEFAULT 0)
INSERT INTO play_event (date_played, container_pid) SELECT date_played, container_pid FROM container WHERE is_hidden = 0 AND date_played > 0 ORDER BY date_played DESC
PRAGMA user_version = 1410050;
ji56BO1mUeT7Qg9RO7Er9w
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'MLArtworkShouldConvertToASTC')
jpeg
UPDATE artwork SET relative_path = SUBSTR(relative_path, 0, 41)
PRAGMA user_version = 1410060;
ALTER TABLE item_store ADD COLUMN cloud_album_id TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1410070;
ALTER TABLE container ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
UPDATE container SET sync_id=container_pid WHERE is_src_remote=1 AND store_cloud_id=0
PRAGMA user_version = 1410080;
PRAGMA user_version = 1410090;
ALTER TABLE album ADD COLUMN contains_classical_work INTEGER NOT NULL DEFAULT 0
UPDATE album SET contains_classical_work=1 WHERE album_pid IN (SELECT DISTINCT(album_pid) FROM item JOIN item_extra USING (item_pid) WHERE classical_work!='' OR (show_composer=1 AND grouping!=''))
PRAGMA user_version = 1410100;
PRAGMA user_version = 1410110;
DROP INDEX IF EXISTS SortMapSortKeys
DROP INDEX IF EXISTS ItemArtistGrouping
DROP INDEX IF EXISTS AlbumArtistGrouping
DROP INDEX IF EXISTS AlbumGrouping
DROP INDEX IF EXISTS ComposerGrouping
DROP INDEX IF EXISTS GenreGrouping
DROP INDEX IF EXISTS AlbumRepresentativeItemPID
DROP INDEX IF EXISTS ItemArtistKeepLocal
DROP INDEX IF EXISTS AlbumKeepLocal
DROP INDEX IF EXISTS AlbumArtistKeepLocal
DROP INDEX IF EXISTS ContainerKeepLocal
DROP INDEX IF EXISTS GenreKeepLocal
DROP INDEX IF EXISTS ComposerKeepLocal
DROP INDEX IF EXISTS ArtworkTokenArtworkToken
DROP INDEX IF EXISTS ArtworkTokenEntityPIDEntityType
DROP INDEX IF EXISTS BestArtworkTokenEntityPIDEntityType
DROP INDEX IF EXISTS ContainerItemItemPid
DROP INDEX IF EXISTS ContainerItemPosition
DROP INDEX IF EXISTS ItemTitleInAlbum
DROP INDEX IF EXISTS ItemTitleInAlbumArtist
DROP INDEX IF EXISTS ItemTitleInItemArtist
DROP INDEX IF EXISTS ItemTitleInComposer
DROP INDEX IF EXISTS ItemTitleInGenre
DROP INDEX IF EXISTS ItemAlbumByAlbumArtist
DROP INDEX IF EXISTS ItemDateCreated
DROP INDEX IF EXISTS ItemExtraGeniusID
DROP INDEX IF EXISTS ItemStoreSagaID
DROP INDEX IF EXISTS ItemStoreItemID
DROP INDEX IF EXISTS ItemSubscriptionStoreItemID
DROP INDEX IF EXISTS ItemStatsPlayCount
DROP INDEX IF EXISTS ItemStatsPlayDate
DROP INDEX IF EXISTS ItemStatsUserRating
DROP INDEX IF EXISTS ItemStatsRememberBookmark
DROP INDEX IF EXISTS ItemUPP_BookkeeperItemLookup
DROP INDEX IF EXISTS ItemUPP_BookkeeperIdentifier
DROP INDEX IF EXISTS ItemKeepLocal
PRAGMA user_version = 1410120;
ALTER TABLE container ADD COLUMN cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0
ALTER TABLE container ADD COLUMN cloud_version_hash TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1410130;
CREATE TABLE genius_config_new (id INTEGER PRIMARY KEY, version INTEGER UNIQUE, default_num_results INTEGER NOT NULL DEFAULT 0, min_num_results INTEGER NOT NULL DEFAULT 0, data BLOB)
INSERT INTO genius_config_new (id, version, default_num_results, min_num_results, data) SELECT id, version, IFNULL(default_num_results, 0), IFNULL(min_num_results, 0), data FROM genius_config
DROP TABLE genius_config
ALTER TABLE genius_config_new RENAME TO genius_config
CREATE TABLE genius_metadata_new (genius_id INTEGER PRIMARY KEY, revision_level INTEGER NOT NULL DEFAULT 0, version INTEGER NOT NULL DEFAULT 0, checksum INTEGER NOT NULL DEFAULT 0, data BLOB)
INSERT INTO genius_metadata_new (genius_id, revision_level, version, checksum, data) SELECT genius_id, IFNULL(revision_level, 0), IFNULL(version, 0), IFNULL(checksum, 0), data FROM genius_metadata
DROP TABLE genius_metadata
ALTER TABLE genius_metadata_new RENAME TO genius_metadata
CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, IFNULL(season_number, 0), album_year, keep_local, keep_local_status, app_data, contains_classical_work FROM album
CREATE TABLE item_extra_new (item_pid INTEGER PRIMARY KEY, title TEXT NOT NULL DEFAULT '', sort_title TEXT, disc_count INTEGER NOT NULL DEFAULT 0, track_count INTEGER NOT NULL DEFAULT 0, total_time_ms REAL NOT NULL DEFAULT 0, year INTEGER NOT NULL DEFAULT 0, location TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0, integrity BLOB, is_audible_audio_book INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, media_kind INTEGER NOT NULL DEFAULT 0, content_rating INTEGER NOT NULL DEFAULT 0, content_rating_level INTEGER NOT NULL DEFAULT 0, is_user_disabled INTEGER NOT NULL DEFAULT 0, bpm INTEGER NOT NULL DEFAULT 0, genius_id INTEGER NOT NULL DEFAULT 0, comment TEXT, grouping TEXT, description TEXT, description_long TEXT, collection_description TEXT, copyright TEXT, pending_genius_checksum INTEGER NOT NULL DEFAULT 0, category_id INTEGER NOT NULL DEFAULT 0, location_kind_id INTEGER NOT NULL DEFAULT 0, version TEXT NOT NULL DEFAULT '', display_version TEXT NOT NULL DEFAULT '', classical_work TEXT NOT NULL DEFAULT '', classical_movement TEXT NOT NULL DEFAULT '', classical_movement_count INTEGER NOT NULL DEFAULT 0, classical_movement_number INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_extra_new (item_pid, title, sort_title, disc_count, track_count, total_time_ms, year, location, file_size, integrity, is_audible_audio_book, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, bpm, genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, category_id, location_kind_id, version, display_version, classical_work, classical_movement, classical_movement_count, classical_movement_number) SELECT item_pid, title, sort_title, IFNULL(disc_count, 0), IFNULL(track_count, 0), total_time_ms, IFNULL(year, 0), location, file_size, integrity, is_audible_audio_book, date_modified, media_kind, content_rating, content_rating_level, is_user_disabled, IFNULL(bpm, 0), genius_id, comment, grouping, description, description_long, collection_description, copyright, pending_genius_checksum, IFNULL(category_id, 0), location_kind_id, version, display_version, classical_work, classical_movement, classical_movement_count, classical_movement_number FROM item_extra
CREATE TABLE entity_changes (class INTEGER NOT NULL, entity_pid INTEGER NOT NULL, source_pid INTEGER NOT NULL, change_type INTEGER NOT NULL, changes TEXT NOT NULL DEFAULT '', UNIQUE (class, entity_pid, source_pid, change_type))
CREATE TABLE source (source_pid INTEGER PRIMARY KEY, source_name TEXT, last_sync_date INTEGER NOT NULL DEFAULT 0, last_sync_revision INTEGER NOT NULL DEFAULT 0)
CREATE TABLE library_property (property_pid INTEGER PRIMARY KEY, source_id INTEGER, key TEXT, value TEXT, UNIQUE (source_id, key))
PRAGMA user_version = 1410140;
ALTER TABLE album ADD COLUMN date_played_local NOT NULL DEFAULT 0
ALTER TABLE container ADD COLUMN date_played_local NOT NULL DEFAULT 0
UPDATE album SET date_played_local = IFNULL((SELECT date_played FROM play_event WHERE play_event.album_pid = album.album_pid), 0)
UPDATE container SET date_played_local = IFNULL((SELECT date_played FROM play_event WHERE play_event.container_pid = container.container_pid), 0)
DROP TABLE play_event
PRAGMA user_version = 1410150;
UPDATE container SET distinguished_kind = 0 WHERE cloud_is_curator_playlist OR is_external_vendor_playlist
PRAGMA user_version = 1410160;
ALTER TABLE item_video ADD COLUMN audio_track_locale TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1410170;
ALTER TABLE item_stats ADD COLUMN user_rating_is_derived INTEGER NOT NULL DEFAULT 0
ALTER TABLE album ADD COLUMN user_rating_is_derived INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1410180;
ALTER TABLE item_store ADD COLUMN cloud_playback_endpoint_type INTEGER NOT NULL DEFAULT 0
UPDATE item_store SET cloud_playback_endpoint_type = playback_endpoint_type
PRAGMA user_version = 1410190;
PRAGMA user_version = 1410200;
PRAGMA user_version = 1410210;
SELECT item_pid, (CASE WHEN store_item_id != 0 THEN store_item_id ELSE subscription_store_item_id END) AS adam_id FROM item_store JOIN item_upp USING (item_pid) WHERE adam_id != 0 AND adam_id != bookkeeper_identifier
UPDATE item_upp SET bookkeeper_identifier = ? WHERE item_pid = ?
PRAGMA user_version = 1430000;
CREATE TABLE cloud_kvs (key TEXT PRIMARY KEY, play_count_user INTEGER NOT NULL DEFAULT 0, has_been_played INTEGER NOT NULL DEFAULT 0, bookmark_time_ms REAL NOT NULL DEFAULT 0, bookmark_sync_timestamp INTEGER NOT NULL DEFAULT 0, bookmark_sync_revision INTEGER NOT NULL DEFAULT 0)
PRAGMA user_version = 1450000;
CREATE TABLE IF NOT EXISTS item_upp (item_pid INTEGER PRIMARY KEY, bookkeeper_identifier TEXT NOT NULL DEFAULT '', metadata_timestamp REAL, metadata_entity_revision INTEGER)
PRAGMA user_version = 1450010;
SELECT key, propertyValuesBlob, timestamp FROM ubiquitous_bookmarks
timestamp
item_stats.play_count_user
item_stats.has_been_played
item_stats.bookmark_time_ms
INSERT OR REPLACE INTO cloud_kvs (key, play_count_user, has_been_played, bookmark_time_ms, bookmark_sync_timestamp) VALUES (?, ?, ?, ?, ?)
v32@?0@"NSString"8@"NSDictionary"16^B24
SELECT key, value FROM ubiquitous_database_properties
INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES (?, ?)
UPDATE cloud_kvs SET bookmark_sync_revision = IFNULL((SELECT metadata_entity_revision FROM item_upp WHERE cloud_kvs.key = item_upp.bookkeeper_identifier), 0)
CREATE TABLE item_kvs (item_pid INTEGER PRIMARY KEY, key TEXT NOT NULL DEFAULT '')
INSERT INTO item_kvs (item_pid, key) SELECT item_pid, bookkeeper_identifier FROM item_upp
DROP TABLE item_upp
DROP TABLE IF EXISTS ubiquitous_bookmarks
PRAGMA user_version = 1450020;
PRAGMA user_version = 1450030;
ALTER TABLE item_video ADD COLUMN show_sort_type INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN episode_type INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN episode_type_display_name TEXT NOT NULL DEFAULT ''
ALTER TABLE item_video ADD COLUMN episode_sub_sort_order INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1450040;
ALTER TABLE item ADD COLUMN is_music_show INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1450050;
DELETE FROM _MLDatabaseProperties WHERE key = 'MLArtworkShouldConvertToASTC'
PRAGMA user_version = 1450060;
SELECT container_pid, position FROM container_item LEFT OUTER JOIN item USING (item_pid) WHERE item.item_pid IS NULL
PRAGMA user_version = 1450070;
SELECT container_item.container_pid, position FROM container JOIN container_item USING (container_pid) JOIN item USING (item_pid) WHERE distinguished_kind IN (19, 20) AND in_my_library = 0
PRAGMA user_version = 1450080;
GdXjx1ixZYvN9Gg8iSf68A
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'MLMigrationHasDisabledAstcOnErie')
PRAGMA user_version = 1450090;
ALTER TABLE container ADD COLUMN cloud_author_handle TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1510000;
PRAGMA user_version = 1510010;
PRAGMA user_version = 1510020;
SELECT 1 FROM _MLDatabaseProperties WHERE key = 'MLMigrationHasDisabledAstcOnErie'
DELETE FROM _MLDatabaseProperties WHERE key ='MLMigrationHasDisabledAstcOnErie'
PRAGMA user_version = 1510030;
ALTER TABLE item_video ADD COLUMN hls_offline_playback_keys BLOB
ALTER TABLE item_video ADD COLUMN is_premium INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN color_capability INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN hls_color_capability INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN hls_video_quality INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1510040;
ALTER TABLE album ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1510050;
ALTER TABLE item_store ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''
ALTER TABLE container ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1510060;
ALTER TABLE item_artist ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE album_artist ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE composer ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE genre ADD COLUMN sync_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1510070;
ALTER TABLE item_video ADD COLUMN hls_playlist_url TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1550000;
SELECT item_pid FROM item WHERE (media_type & 8 != 0) AND album_order = 0 and album_pid != 0
INSERT INTO album (album_pid, representative_item_pid, album_artist_pid, cloud_status, user_rating, all_compilations, album_year, keep_local, keep_local_status, contains_classical_work, date_played_local, user_rating_is_derived) SELECT ?, ?, album_artist_pid, cloud_status, user_rating, all_compilations, album_year, keep_local, keep_local_status, contains_classical_work, date_played_local, user_rating_is_derived FROM album WHERE album_pid=(SELECT album_pid FROM item WHERE item_pid=?)
PRAGMA user_version = 1550010;
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (1, 'ForceSiriResetSync')
PRAGMA user_version = 1560000;
CREATE TABLE account (dsid INTEGER PRIMARY KEY DEFAULT 0, apple_id TEXT NOT NULL DEFAULT '', alt_dsid TEXT NOT NULL DEFAULT '')
Library/MusicLibrary/AccountCache.sqlitedb
SELECT dsid, apple_id FROM account
INSERT OR REPLACE INTO account (dsid, apple_id) VALUES(?, ?)
PRAGMA user_version = 1610000;
ALTER TABLE item_video ADD COLUMN audio_capability INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN hls_audio_capability INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1610010;
CREATE TABLE person (person_pid INTEGER PRIMARY KEY, cloud_id TEXT NOT NULL UNIQUE, handle TEXT NOT NULL DEFAULT '', name TEXT NOT NULL DEFAULT '', image_url TEXT NOT NULL DEFAULT '', image_token TEXT NOT NULL DEFAULT '')
CREATE TABLE container_item_person (container_item_person_pid INTEGER PRIMARY KEY, container_item_pid INTEGER NOT NULL DEFAULT 0, person_pid INTEGER NOT NULL DEFAULT 0, UNIQUE (container_item_pid, person_pid))
CREATE INDEX IF NOT EXISTS PersonPID ON person (person_pid ASC)
CREATE INDEX IF NOT EXISTS PersonCloudID ON person (cloud_id ASC)
CREATE INDEX IF NOT EXISTS ContainerItemPerson ON container_item_person (container_item_pid ASC)
ALTER TABLE container ADD COLUMN should_display_index INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1610020;
-shm
-wal
PRAGMA user_version = 1610030;
ALTER TABLE item ADD COLUMN date_downloaded INTEGER NOT NULL DEFAULT 0
ALTER TABLE container ADD COLUMN date_downloaded INTEGER NOT NULL DEFAULT 0
SELECT item.ROWID, base_location.path, item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id >= 300 
UPDATE item SET date_downloaded = ? WHERE item_pid = ?
v32@?0@"NSNumber"8@"NSDate"16^B24
PRAGMA user_version = 1710000;
ML3MigrationFunction1710000to1710010
com.apple.itunescloud
ICDefaultsCachedSubscriptionStatus
PRAGMA user_version = 1710010;
ALTER TABLE album_artist ADD COLUMN cloud_universal_library_id TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1710020;
ALTER TABLE item ADD COLUMN download_source_container_pid INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1710030;
select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) FROM container where distinguished_kind = 10000 AND is_container_type_active_target)
INSERT OR REPLACE INTO entity_revision (entity_pid, revision_type, deleted, class) VALUES(?, ?, ?, ?)
delete from container_item where container_pid in (select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) FROM container where distinguished_kind = 10000 AND is_container_type_active_target))
delete from container where container_pid in (select container_pid from container where distinguished_kind = 10000 AND is_container_type_active_target AND date_created != (select max(date_created) from container where distinguished_kind = 10000 AND is_container_type_active_target))
PRAGMA user_version = 1710040;
download_source_container_pid
PRAGMA user_version = 1710050;
PRAGMA user_version = 1710051;
SELECT item.ROWID, base_location.path, item_extra.location, item.date_downloaded FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) WHERE item.base_location_id >= 300 AND item.date_downloaded != 0
DELETE FROM _MLDatabaseProperties WHERE key ='MLLastKnownActiveLockerAccountDSID'
DELETE FROM _MLDatabaseProperties WHERE key ='MLCloudLibraryPrefersToMerge'
PRAGMA user_version = 1710060;
PRAGMA user_version = 1710061;
SELECT album_artist_pid, album FROM album GROUP BY album, album_artist_pid HAVING MIN(all_compilations) = 0 AND MAX(all_compilations) = 1
SELECT album_pid FROM album WHERE all_compilations = 0 AND album_artist_pid = ? AND album = ?
SELECT album_pid FROM album WHERE all_compilations = 1 AND album_artist_pid = ? AND album = ?
SELECT item_pid FROM item WHERE album_pid = ?
UPDATE item SET album_pid = ? WHERE album_pid = ?
DELETE FROM album WHERE album_pid = ?
v32@?0@"NSArray"8Q16^B24
PRAGMA user_version = 1750000;
UPDATE item SET media_type=4 WHERE media_type=12
PRAGMA user_version = 1770000;
PRAGMA user_version = 1800000;
PRAGMA user_version = 1810000;
ALTER TABLE container ADD COLUMN is_personalized_mix INTEGER NOT NULL DEFAULT 0
ALTER TABLE container ADD COLUMN personalized_mix_sort_key TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1850000;
ALTER TABLE item_stats ADD COLUMN liked_state_changed_date INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1850010;
ALTER TABLE item_extra ADD COLUMN is_preorder INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1850020;
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER  NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, is_personalized_mix, personalized_mix_sort_key FROM container
PRAGMA user_version = 1850030;
ALTER TABLE item_video ADD COLUMN hls_asset_traits INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_video ADD COLUMN hls_key_server_url TEXT NOT NULL DEFAULT ''
ALTER TABLE item_video ADD COLUMN hls_key_cert_url TEXT NOT NULL DEFAULT ''
PRAGMA user_version = 1850040;
ALTER TABLE item_store ADD COLUMN reporting_store_item_id INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_store ADD COLUMN asset_store_item_id INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1850050;
PRAGMA user_version = 1910000;
PRAGMA user_version = 1910010;
ALTER TABLE lyrics ADD COLUMN time_synced_lyrics_available INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1910020;
PRAGMA user_version = 1910030;
ALTER TABLE item_video ADD COLUMN hls_key_server_protocol TEXT NOT NULL DEFAULT ''
UPDATE item_video SET hls_key_server_protocol = 'simplified' WHERE item_video.hls_key_server_url != '' AND item_video.hls_asset_traits != 0
PRAGMA user_version = 1950000;
CREATE TABLE booklet (booklet_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', store_item_id INTEGER NOT NULL DEFAULT 0, redownload_params TEXT NOT NULL DEFAULT '', file_size INTEGER NOT NULL DEFAULT 0)
CREATE INDEX IF NOT EXISTS BookletItemPersistentID ON booklet (item_pid ASC)
PRAGMA user_version = 1950010;
CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0, is_music_show INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, download_source_container_pid INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid FROM item
CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id FROM album
CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id FROM item_artist
CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '')
INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id, cloud_universal_library_id) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, app_data, sync_id, cloud_universal_library_id FROM album_artist
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key FROM container
CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id FROM genre
CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, sync_id FROM composer
PRAGMA user_version = 1950020;
PRAGMA user_version = 1950030;
ALTER TABLE album ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0
ALTER TABLE album_artist ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0
ALTER TABLE item_artist ADD COLUMN classical_experience_available INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 1950040;
ALTER TABLE item_store ADD COLUMN extended_playback_attribute INTEGER NOT NULL DEFAULT 0
PRAGMA user_version = 2000000;
CREATE TABLE item_new (item_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, title_order INTEGER NOT NULL DEFAULT 0, title_order_section INTEGER NOT NULL DEFAULT 0, item_artist_pid INTEGER NOT NULL DEFAULT 0, item_artist_order INTEGER NOT NULL DEFAULT 0, item_artist_order_section INTEGER NOT NULL DEFAULT 0, series_name_order INTEGER NOT NULL DEFAULT 0, series_name_order_section INTEGER NOT NULL DEFAULT 0, album_pid INTEGER NOT NULL DEFAULT 0, album_order INTEGER NOT NULL DEFAULT 0, album_order_section INTEGER NOT NULL DEFAULT 0, album_artist_pid INTEGER NOT NULL DEFAULT 0, album_artist_order INTEGER NOT NULL DEFAULT 0, album_artist_order_section INTEGER NOT NULL DEFAULT 0, composer_pid INTEGER NOT NULL DEFAULT 0, composer_order INTEGER NOT NULL DEFAULT 0, composer_order_section INTEGER NOT NULL DEFAULT 0, genre_id INTEGER NOT NULL DEFAULT 0, genre_order INTEGER NOT NULL DEFAULT 0, genre_order_section INTEGER NOT NULL DEFAULT 0, disc_number INTEGER NOT NULL DEFAULT 0, track_number INTEGER NOT NULL DEFAULT 0, episode_sort_id INTEGER NOT NULL DEFAULT 0, base_location_id INTEGER NOT NULL DEFAULT 0, remote_location_id INTEGER NOT NULL DEFAULT 0, exclude_from_shuffle INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, in_my_library INTEGER NOT NULL DEFAULT 0, is_compilation INTEGER NOT NULL DEFAULT 0, date_added INTEGER NOT NULL DEFAULT 0, show_composer INTEGER NOT NULL DEFAULT 0, is_music_show INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, download_source_container_pid INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_new (item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, keep_local_constraints, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid) SELECT item_pid, media_type, title_order, title_order_section, item_artist_pid, item_artist_order, item_artist_order_section, series_name_order, series_name_order_section, album_pid, album_order, album_order_section, album_artist_pid, album_artist_order, album_artist_order_section, composer_pid, composer_order, composer_order_section, genre_id, genre_order, genre_order_section, disc_number, track_number, episode_sort_id, base_location_id, remote_location_id, exclude_from_shuffle, keep_local, keep_local_status, keep_local_constraints, in_my_library, is_compilation, date_added, show_composer, is_music_show, date_downloaded, download_source_container_pid FROM item
CREATE TABLE album_new (album_pid INTEGER PRIMARY KEY, album TEXT NOT NULL DEFAULT '', sort_album TEXT, album_artist_pid INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, user_rating INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, all_compilations INTEGER NOT NULL DEFAULT 0, feed_url TEXT, season_number INTEGER NOT NULL DEFAULT 0, album_year INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, contains_classical_work INTEGER NOT NULL DEFAULT 0, date_played_local INTEGER NOT NULL DEFAULT 0, user_rating_is_derived INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_new (album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available) SELECT album_pid, album, sort_album, album_artist_pid, representative_item_pid, grouping_key, cloud_status, user_rating, liked_state, all_compilations, feed_url, season_number, album_year, keep_local, keep_local_status, keep_local_constraints, app_data, contains_classical_work, date_played_local, user_rating_is_derived, sync_id, classical_experience_available FROM album
CREATE TABLE item_artist_new (item_artist_pid INTEGER PRIMARY KEY, item_artist TEXT NOT NULL DEFAULT '', sort_item_artist TEXT, series_name TEXT NOT NULL DEFAULT '', sort_series_name TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, classical_experience_available INTEGER NOT NULL DEFAULT 0)
INSERT INTO item_artist_new (item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, classical_experience_available) SELECT item_artist_pid, item_artist, sort_item_artist, series_name, sort_series_name, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, classical_experience_available FROM item_artist
CREATE TABLE album_artist_new (album_artist_pid INTEGER PRIMARY KEY, album_artist TEXT NOT NULL DEFAULT '', sort_album_artist TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, store_id INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, app_data BLOB, sync_id INTEGER NOT NULL DEFAULT 0, cloud_universal_library_id TEXT NOT NULL DEFAULT '', classical_experience_available INTEGER NOT NULL DEFAULT 0)
INSERT INTO album_artist_new (album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available) SELECT album_artist_pid, album_artist, sort_album_artist, grouping_key, cloud_status, store_id, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, app_data, sync_id, cloud_universal_library_id, classical_experience_available FROM album_artist
CREATE TABLE container_new (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')
INSERT INTO container_new (container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key) SELECT container_pid, distinguished_kind, date_created, date_modified, date_played, name, name_order, is_owner, is_editable, parent_pid, contained_media_type, workout_template_id, is_hidden, is_ignorable_itunes_playlist, description, play_count_user, play_count_recent, liked_state, smart_evaluation_order, smart_is_folder, smart_is_dynamic, smart_is_filtered, smart_is_genius, smart_enabled_only, smart_is_limited, smart_limit_kind, smart_limit_order, smart_limit_value, smart_reverse_limit_order, smart_criteria, play_order, is_reversed, album_field_order, repeat_mode, shuffle_items, has_been_shuffled, filepath, is_saveable, is_src_remote, is_ignored_syncing, container_type, is_container_type_active_target, orig_date_modified, store_cloud_id, has_cloud_play_order, cloud_global_id, cloud_share_url, cloud_is_public, cloud_is_visible, cloud_is_subscribed, cloud_is_curator_playlist, cloud_author_store_id, cloud_author_display_name, cloud_author_store_url, cloud_min_refresh_interval, cloud_last_update_time, cloud_user_count, cloud_global_play_count, cloud_global_like_count, keep_local, keep_local_status, keep_local_constraints, external_vendor_identifier, external_vendor_display_name, external_vendor_container_tag, is_external_vendor_playlist, sync_id, cloud_is_sharing_disabled, cloud_version_hash, date_played_local, cloud_author_handle, cloud_universal_library_id, should_display_index, date_downloaded, category_type_mask, grouping_sort_key FROM container
CREATE TABLE genre_new (genre_id INTEGER PRIMARY KEY, genre TEXT NOT NULL DEFAULT '', grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO genre_new (genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id) SELECT genre_id, genre, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id FROM genre
CREATE TABLE composer_new (composer_pid INTEGER PRIMARY KEY, composer TEXT NOT NULL DEFAULT '', sort_composer TEXT, grouping_key BLOB, cloud_status INTEGER NOT NULL DEFAULT 0, representative_item_pid INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0)
INSERT INTO composer_new (composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id) SELECT composer_pid, composer, sort_composer, grouping_key, cloud_status, representative_item_pid, keep_local, keep_local_status, keep_local_constraints, sync_id FROM composer
PRAGMA user_version = 2000010;
PRAGMA user_version = 2000020;
UPDATE item_extra SET integrity = (SELECT ML3TrackIntegrityCompute(item.item_pid, item.media_type, item_extra.location, item_extra.file_size) FROM item JOIN item_extra AS item_extra2 USING (item_pid) WHERE item_extra.item_pid = item.item_pid)
ML3MusicLibraryBackgroundTasksShouldStopSuppressingChangesNotification
ML3MusicLibraryBackgroundTasksShouldSuppressChangesNotification
ML3MusicLibraryContentsDidChangeNotification
ML3MusicLibraryEntitiesAddedOrRemovedNotification
ML3MusicLibraryDisplayValuesDidChangeNotification
ML3MusicLibraryInvisiblePropertiesDidChangeNotification
ML3MusicLibraryNonContentsPropertiesDidChangeNotification
ML3MusicLibrarySyncGenerationDidChangeNotification
ML3MusicLibraryUIDDidChangeNotification
ML3MusicLibraryCloudLibraryAvailablityDidChangeNotification
ML3MusicLibrarySectionsDidChangeNotification
ML3MusicLibraryWillInvalidateDatabaseConnectionNotification
ML3MusicLibraryImportDidFinishNotification
ML3MusicLibraryKeepLocalStateChangedNotification
ML3MusicLibraryPathDidChangeNotification
com.apple.mobileipod.librarychanged
com.apple.mobileipod.entitiesaddedorremoved
com.apple.mobileipod.noncontentspropertieschanged
com.apple.mobileipod.invisiblepropertieschanged
com.apple.mobileipod.displayvalueschanged
com.apple.mobileipod.syncgenerationchanged
com.apple.mobileipod.libraryUIDchanged
com.apple.mobileipod.cloudlibraryavailabilitychanged
com.apple.mobileipod.sectionschanged
com.apple.mobileipod.libraryimportdidfinish
com.apple.mobileipod.keeplocalstatechanged
_UUID
MLSyncLibraryID
music-video
song
com.apple.MusicLibrary.global.serial.queue
iTunes_Control
ML3MusicLibrary.m
sharedLibrary use is disabled. use initWithPath: in this process
com.apple.MusicLibrary.atomicity
v16@?0@"NSNotification"8
SBFinishedLanguageChangeStartup
isAutoupdatingSharedLibraryKey
resourceManagerKey
MLIsHomeSharingLibrary
SELECT MAX(revision) FROM entity_revision;
SELECT MAX(revision) FROM entity_revision WHERE revision_type=0;
MLSyncClientGenerationID
SELECT 1 FROM item LIMIT 1
SELECT 1 FROM container WHERE distinguished_kind = 0 LIMIT 1
PLAYBACK_HISTORY_PLAYLIST_NAME
Photos Memories
LocalizedSectionIndices
SectionIndices
NUMERIC_SECTION_HEADER
UNKNOWN_SECTION_HEADER
MPExplicitContentAllowedBoolean
PRAGMA user_version
ANALYZE;
artwork
artwork_token
best_artwork_token
base_location
category
chapter
cloud_kvs
container_item_media_type
container_seed
container_item
entity_revision
genius_config
item_kvs
item_playback
item_search
item_video
sort_map
store_link
_MLDatabaseProperties
LocalizedSectionHeaders
B32@?0@8Q16^B24
SectionHeaders
Headers
DBTimestampMasOSDate
SELECT item_store.sync_id, item_video.audio_track_id, item_stats.bookmark_time_ms, entity_revision.deleted, item_stats.play_count_recent, item_stats.date_played, item_stats.has_been_played, item_stats.skip_count_recent, item_stats.date_skipped, item_stats.user_rating, item_stats.liked_state, item_store.item_pid, store_saga_id, album.liked_state, item.in_my_library FROM item JOIN item_stats USING(item_pid) LEFT OUTER JOIN entity_revision ON (item.item_pid = entity_pid) JOIN item_video USING (item_pid) JOIN item_store using (item_pid) LEFT OUTER JOIN album USING (album_pid) WHERE revision > ? AND class = 0 ORDER BY entity_revision.revision DESC;
persistentID
deleted
playCount
playMacOSDate
playedState
skipCount
skipMacOSDate
bookmarkTimeInMS
audioTrackID
likedState
albumLikedState
isPlaylistOnly
tracks
SELECT primary_container_pid FROM db_info
playlistPersistentID
playlistDeleted
Encountered error validating format. pathFormat=%@ error=%@
deleteWithoutSyncing
dateLastModified
originalDateLastModified
parentPersistentID
external_vendor_identifier
external_vendor_display_name
external_tag
is_external_vendor_playlist
trackPersistentIDs
seedTrackPersistentID
distinguishedKind
artworkCacheId
artworkFilePath
-[ML3MusicLibrary savePlaylistsSinceRevision:withGrappaID:]_block_invoke
SYNC_MARKER
SELECT COUNT(name) FROM sqlite_master WHERE type='table' AND name = '%@';
SELECT rowid FROM sort_map WHERE name='' AND name_order != 0
SELECT value FROM _MLDatabaseProperties WHERE key = '%@'
MLSortMapTables
plist
Unable to load MLSortMapTables.plist at %@
v32@?0@8@"NSArray"16^B24
WHEN class = 0 THEN deleted != 0 OR EXISTS (SELECT 1 FROM item WHERE item.in_my_library AND item.item_pid = entity_pid) 
WHEN class = 1 THEN deleted != 0 OR EXISTS (SELECT 1 FROM container WHERE container_pid = entity_pid) 
WHEN class = 2 THEN deleted != 0 OR EXISTS (SELECT 1 FROM item_artist JOIN item USING(item_artist_pid) WHERE item.in_my_library AND item_artist_pid = entity_pid LIMIT 1) 
WHEN class = 3 THEN deleted != 0 OR EXISTS (SELECT 1 FROM genre JOIN item USING(genre_id) WHERE item.in_my_library AND genre_id = entity_pid LIMIT 1) 
WHEN class = 4 THEN deleted != 0 OR EXISTS (SELECT 1 FROM album JOIN item USING(album_pid) WHERE item.in_my_library AND album_pid = entity_pid LIMIT 1) 
WHEN class = 5 THEN deleted != 0 OR EXISTS (SELECT 1 FROM composer JOIN item USING(composer_pid) WHERE item.in_my_library AND composer_pid = entity_pid LIMIT 1) 
WHEN class = 7 THEN deleted != 0 OR EXISTS (SELECT 1 FROM album_artist JOIN item USING(album_artist_pid) WHERE item.in_my_library AND album_artist_pid = entity_pid LIMIT 1) 
SELECT entity_pid, revision, revision_type, deleted, class FROM entity_revision 
 LEFT OUTER JOIN item AS mediaType_item ON (mediaType_item.item_pid = entity_pid) 
 WHERE revision > ? 
 AND revision_type <= ? 
 AND CASE 
ELSE 0 END
 AND CASE %@ ELSE 0 END
 AND class = ? 
 AND (deleted != 0
 ((media_type & %lu) != 0)
SELECT entity_pid, revision, deleted, class FROM entity_revision WHERE revision > ? 
SELECT entity_pid, class FROM entity_revision WHERE revision > ?
SELECT 1 FROM entity_revision WHERE entity_pid = ? AND class = ? AND revision > ? 
SELECT COUNT() FROM entity_revision WHERE revision > ? 
SELECT DISTINCT(relative_path), best_artwork_token.artwork_type, media_type FROM item JOIN best_artwork_token ON item_pid = entity_pid AND entity_type = 0 JOIN artwork ON available_artwork_token = artwork_token
SELECT DISTINCT(relative_path), best_artwork_token.artwork_type FROM best_artwork_token JOIN artwork ON available_artwork_token = artwork_token WHERE entity_type IN (2,7)
imagedata.XXXXXX
SELECT artwork_source_type, relative_path, artwork_type FROM artwork WHERE artwork_token = ?
DELETE FROM artwork WHERE artwork_token = ?
SELECT entity_pid, entity_type, artwork_type FROM artwork_token WHERE artwork_token = ?
DELETE FROM artwork_token WHERE artwork_token = ?
SELECT relative_path, artwork_type FROM artwork WHERE artwork_token = ?
DELETE FROM artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ?
SELECT 1 FROM artwork WHERE artwork_token=?
SELECT available_artwork_token, fetchable_artwork_token, fetchable_artwork_source_type FROM best_artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ?
SELECT artwork_token, artwork_source_type FROM artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ?
SELECT 1 FROM container WHERE NOT is_hidden AND distinguished_kind = ? AND smart_criteria IS NULL AND NOT smart_is_genius AND (NOT cloud_is_subscribed OR is_editable) LIMIT 1
SELECT 1 FROM item JOIN item_store USING (item_pid) WHERE in_my_library AND cloud_status = ? LIMIT 1
SELECT 1 FROM container_item JOIN container USING (container_pid) JOIN item_store USING (item_pid) WHERE cloud_status = ? AND NOT is_hidden AND distinguished_kind = ? AND smart_criteria IS NULL AND NOT smart_is_genius AND (NOT cloud_is_subscribed OR is_editable) LIMIT 1
DELETE FROM item_store WHERE item_pid NOT IN (SELECT item_pid FROM item)
DELETE FROM item_stats WHERE item_pid NOT IN (SELECT item_pid FROM item)
Ringtones.plist
Ringtones
Purchases
Attempting to de-orphan shared resources in a MU library! %@
iTunes_Control/Music
Podcasts
CloudAssets
LoFiCloudAssets
SELECT value FROM _MLDatabaseProperties WHERE key = ?
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (?, ?);
DELETE FROM _MLDatabaseProperties WHERE key = ?
%s%s
com.apple.media.entities
.siri_data_changed
INSERT OR REPLACE INTO artwork (artwork_token, artwork_type, artwork_source_type, relative_path) VALUES (?, ?, ?, ?)
SELECT entity_pid, entity_type FROM artwork_token WHERE artwork_token = ? AND artwork_type = ? AND artwork_source_type = ?
SELECT artwork_token.artwork_token, artwork_token.artwork_source_type, (artwork.relative_path IS NOT NULL) AS has_artwork_on_disk FROM artwork_token LEFT OUTER JOIN artwork USING (artwork_token) WHERE artwork_token.entity_pid = ? AND artwork_token.entity_type = ? AND artwork_token.artwork_type = ? ORDER BY artwork_token.artwork_source_type ASC
DELETE FROM artwork_token WHERE entity_type = ? AND entity_pid NOT IN (SELECT ROWID FROM %@)
DELETE FROM best_artwork_token WHERE entity_type = ? AND entity_pid NOT IN (SELECT ROWID FROM %@)
SELECT artwork_token, artwork_source_type, relative_path, artwork.artwork_type FROM artwork LEFT OUTER JOIN best_artwork_token ON artwork_token = available_artwork_token WHERE artwork.artwork_type != ? AND available_artwork_token IS NULL
SELECT artwork_token, relative_path FROM artwork WHERE artwork_type = ?
SELECT distinct(relative_path) FROM artwork
SELECT artwork_token FROM artwork WHERE relative_path = ?
SELECT entity_pid, entity_type, artwork_type FROM best_artwork_token WHERE available_artwork_token = ?
SELECT entity_pid, entity_type, best_artwork_token.artwork_type, available_artwork_token FROM best_artwork_token LEFT OUTER JOIN artwork ON available_artwork_token = artwork_token WHERE available_artwork_token != '' AND artwork_token IS NULL
DELETE FROM %@
ML3MusicLibrary %p - Database path change failure [unable to close connection pools] - error=%@
ML3MusicLibrary %p - Unable to prepare for account changes during emergency disconnect
Library.itdb
/Media/iTunes_Control/iTunes/MediaLibrary.p7b
INSERT OR REPLACE INTO artwork_token (artwork_token, artwork_source_type, artwork_type, entity_pid, entity_type) VALUES (?, ?, ?, ?, ?)
DELETE FROM artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ? AND artwork_source_type = ?
BOOL UpdateBestArtworkToken(ML3DatabaseConnection *__strong, int64_t, ML3EntityType, ML3ArtworkType, NSString *__strong, NSString *__strong, ML3ArtworkSourceType, BOOL)
Available artwork token cannot be nil
Fetchable artwork token cannot be nil
SELECT available_artwork_token FROM best_artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ?
INSERT OR REPLACE INTO best_artwork_token (entity_pid, entity_type, artwork_type, available_artwork_token, fetchable_artwork_token, fetchable_artwork_source_type) VALUES (?, ?, ?, ?, ?, ?)
DELETE FROM best_artwork_token WHERE entity_pid = ? AND entity_type = ? AND artwork_type = ?
multiverseID
mediaItem
item_extra.genius_id
genius_metadata.checksum
item_extra.pending_genius_checksum
item_extra.content_rating_level
item_extra.title
title_order
title_order_section
item_extra.sort_title
item_artist_pid
item_artist.item_artist
item_artist_order
item_artist_order_section
item_artist.sort_item_artist
item_artist.keep_local
item_artist.store_id
album_pid
album.album
album_order
album_order = 0
album_order_section
album.sort_album
album.liked_state
album.album_year
album.keep_local
sort_map.name_order
album_artist_order = 0
album_artist.album_artist
album_artist_order
album_artist_order_section
album_artist.sort_album_artist
album_artist.keep_local
album_artist.store_id
album_artist.cloud_universal_library_id
composer_pid
composer.composer
composer_order
composer_order_section
composer.keep_local
composer.sort_composer
genre_id
genre.keep_local
genre.genre
genre_order
genre_order_section
item_search.search_title
item_search.search_album
item_search.search_artist
item_search.search_composer
item_search.search_album_artist
disc_number
item_extra.disc_count
track_number
item_extra.track_count
best_artwork_token.available_artwork_token IS NOT NULL
IFNULL(best_artwork_token.available_artwork_token, '') != ''
best_artwork_token.available_artwork_token AS available_item_artwork_token
best_artwork_token.fetchable_artwork_token AS fetchable_item_artwork_token
best_artwork_token.fetchable_artwork_source_type AS fetchable_item_artwork_source_type
best_artwork_token.available_artwork_token AS available_item_screenshot_token
best_artwork_token.fetchable_artwork_token AS fetchable_item_screenshot_token
best_artwork_token.fetchable_artwork_source_type AS fetchable_item_screenshot_source_type
item_artist.series_name
series_name_order
series_name_order_section
item_artist.sort_series_name
item_video.season_number
item_video.episode_id
item_video.network_name
item_store.feed_url
item_store.date_released
item_store.external_guid
item_extra.description
item_extra.comment
item_extra.location
base_location.path
(IFNULL(base_location.path, '') || '/' || item_extra.location)
item_extra.grouping
IFNULL(item_artist.series_name, item_artist.item_artist)
IFNULL(ML3SeasonDisplayName(item_video.season_number), album.album)
in_my_library
exclude_from_shuffle
(item.exclude_from_shuffle = 0)
media_type
((item.media_type & 260)!=0)
((item.media_type & 4128)!=0)
(((item.media_type & ~65280) = 0) OR (item.media_type = 1032))
category.category
item_extra.category_id
item_extra.description_long
item_extra.location_kind_id
item_extra.collection_description
item_playback.eq_preset
item_extra.file_size
item_extra.total_time_ms
item_playback.start_time_ms
item_playback.stop_time_ms
item_extra.year
item_playback.bit_rate
item_playback.sample_rate
item_playback.audio_format
item_playback.duration
item_playback.gapless_heuristic_info
item_playback.gapless_encoding_delay
item_playback.gapless_encoding_drain
item_playback.gapless_last_frame_resynch
item_playback.volume_normalization_energy
item_extra.date_modified
date_added
date_downloaded
item_extra.bpm
item_store.store_item_id
item_store.store_playlist_id
item_store.store_composer_id
item_store.store_genre_id
item_store.account_id
item_store.downloader_account_id
item_store.family_account_id
item_store.is_protected
item_store.key_id
item_store.date_purchased
item_store.key_platform_id
item_store.storefront_id
item_store.store_kind
item_store.key_versions
(CASE WHEN LENGTH(IFNULL(item_store.match_redownload_params, '')) > 0 THEN item_store.match_redownload_params ELSE item_store.purchase_history_redownload_params END)
item_store.purchase_history_redownload_params
item_store.match_redownload_params
item_store.cloud_status
(LENGTH(IFNULL(item_store.match_redownload_params, '')) > 0 OR LENGTH(IFNULL(item_store.purchase_history_redownload_params, '')) > 0)
item_store.artwork_url
item_store.store_xid
item_store.store_flavor
item_store.store_saga_id
item_store.store_matched_status
item_store.store_redownloaded_status
item_store.store_link_id
item_store.extras_url
item_store.vpp_is_licensed
item_store.vpp_org_id
item_store.vpp_org_name
item_store.sync_redownload_params
needs_reporting
item_store.subscription_store_item_id
item_store.playback_endpoint_type
item_store.is_mastered_for_itunes
item_store.radio_station_id
item_store.advertisement_unique_id
item_store.advertisement_type
item_store.is_artist_uploaded_content
item_store.cloud_asset_available
item_store.is_subscription
item_store.sync_in_my_library
item_store.cloud_in_my_library
item_store.cloud_album_id
item_store.cloud_playback_endpoint_type
item_store.cloud_universal_library_id
item_store.asset_store_item_id
item_store.reporting_store_item_id
item_store.extended_playback_attribute
store_link.url
item_video.audio_language
item_video.audio_track_index
item_video.audio_track_id
item_video.audio_track_locale
item_video.subtitle_language
item_video.subtitle_track_index
episode_sort_id
item_video.has_alternate_audio
item_video.has_subtitles
item_extra.content_rating
item_video.extended_content_rating
(item_video.video_quality != 0)
item_extra.is_audible_audio_book
item_video.show_sort_type
item_video.episode_type
item_video.episode_type_display_name
item_video.episode_sub_sort_order
((item.media_type & 1024) = 1024)
item_video.movie_info
item_extra.media_kind
item_extra.is_user_disabled
item_stats.play_count_recent
item_stats.date_played
item_stats.skip_count_user
item_stats.skip_count_recent
item_stats.date_skipped
item_stats.user_rating
item_stats.user_rating_is_derived
album.user_rating
album.user_rating_is_derived
item_stats.remember_bookmark
item_stats.hidden
item_stats.liked_state
item_stats.liked_state_changed
item_stats.liked_state_changed_date
item_extra.copyright
lyrics.lyrics
lyrics.checksum
lyrics.pending_checksum
lyrics.store_lyrics_available
lyrics.time_synced_lyrics_available
item_playback.relative_volume
item_video.is_premium
item_video.is_rental
item_video.is_demo
item_video.rental_duration
item_video.rental_playback_duration
item_video.rental_playback_date_started
item_video.rental_date_started
item_video.has_hls
CASE WHEN rental_playback_date_started != 0 THEN MIN(rental_playback_date_started + rental_playback_duration, rental_date_started + rental_duration) ELSE rental_date_started + rental_duration END
(rental_date_started + rental_duration)
item_video.hls_offline_playback_keys
item_video.color_capability
item_video.hls_color_capability
item_video.video_quality
item_video.hls_video_quality
item_video.hls_playlist_url
item_video.audio_capability
item_video.hls_audio_capability
item_video.hls_asset_traits
item_video.hls_key_server_url
item_video.hls_key_cert_url
item_video.hls_key_server_protocol
item_store.is_ota_purchased
item_stats.chosen_by_auto_fill
chapter.chapter_data
(CASE WHEN LENGTH(IFNULL(chapter.chapter_data,'')) > 0 THEN 1 ELSE 0 END)
container_item.container_pid
container_item.position
container_item.container_item_pid
ML3IsCurrentlyRestrictedMedia(item.media_type, item_extra.content_rating, item_extra.content_rating_level, (SELECT value FROM _MLDatabaseProperties WHERE key='MPExplicitContentAllowedBoolean'))
(item_extra.content_rating == 1)
(item_extra.content_rating == 2)
ML3TrackIntegrityCompute(item.item_pid, item.media_type, item_extra.location, item_extra.file_size)
ML3TrackIntegrityVerify(item_extra.integrity, item.item_pid, item.media_type, item_extra.location, item_extra.file_size)
(item.remote_location_id >= 50 AND item.remote_location_id < 300)
(item.remote_location_id = 20)
(item.remote_location_id >= 50 AND item.base_location_id < 300)
(item.remote_location_id != 100)
(NOT item.in_my_library)
((item_extra.total_time_ms - item_stats.bookmark_time_ms < 30000 AND item_extra.total_time_ms > 60000) OR (item_stats.bookmark_time_ms >= .95 * item_extra.total_time_ms))
item_stats.needs_restore
item_stats.download_identifier
(item.base_location_id > 0)
(item.base_location_id BETWEEN 100 AND 200)
(item.base_location_id = 100)
(item.base_location_id > 200)
(item.base_location_id == 0 AND item.remote_location_id == 0 AND item_store.sync_id != 0)
(item.base_location_id OR item.remote_location_id)
(item.base_location_id >= 300)
(item.base_location_id >=300 OR item.remote_location_id = 10)
(item_store.is_protected > 0)
( (item.base_location_id = 0 AND item_store.playback_endpoint_type = 3) OR item_store.is_protected = 2 )
item_stats.is_alarm
item_stats.date_accessed
item_store.purchase_history_token
item_playback.codec_type
item_playback.codec_subtype
item_playback.format
item_playback.data_kind
item_playback.data_url
item_playback.has_video
item_store.key_id_2
item_video.has_chapter_data
item_store.purchase_history_id
item_store.sync_id
item_store.home_sharing_id
ML3TrackPropertyStoreBookmarkMetadataIdentifierFn
ML3TrackPropertyStoreBookmarkMetadataIdentifierFn(item.media_type, item_store.store_item_id, item_store.subscription_store_item_id, item_store.feed_url, item_store.external_guid, item.item_pid, item.item_artist_pid, item.album_pid)
item_kvs.key
cloud_kvs.bookmark_sync_timestamp
cloud_kvs.bookmark_sync_revision
item_extra.version
item_extra.display_version
item_playback.progression_direction
item.is_music_show
item.show_composer
(CASE WHEN item.show_composer = 1 THEN composer.composer ELSE album_artist.album_artist END)
item_extra.classical_work
item_extra.classical_movement
item_extra.classical_movement_count
item_extra.classical_movement_number
(CASE WHEN item_extra.classical_work != '' THEN item_extra.classical_work ELSE (CASE WHEN item.show_composer = 1 THEN item_extra.grouping ELSE '' END) END)
item_extra.is_preorder
property
SELECT genre.genre_id FROM genre WHERE genre.genre
subselect
LEFT OUTER JOIN album USING (album_pid)
sort_album
user_rating
user_rating_is_derived
liked_state
album_year
LEFT OUTER JOIN sort_map ON album.album = sort_map.name
name_order
LEFT OUTER JOIN album_artist USING (album_artist_pid)
JOIN base_location USING (base_location_id)
path
JOIN item_extra USING (item_pid)
LEFT OUTER JOIN category USING (category_id)
LEFT OUTER JOIN composer USING (composer_pid)
sort_composer
LEFT OUTER JOIN genre USING (genre_id)
LEFT OUTER JOIN item_artist USING (item_artist_pid)
sort_item_artist
series_name
sort_series_name
JOIN item_store USING (item_pid)
store_item_id
store_playlist_id
store_composer_id
store_genre_id
account_id
downloader_account_id
family_account_id
is_protected
key_id
date_released
date_purchased
key_platform_id
storefront_id
store_kind
key_versions
artwork_url
store_xid
store_flavor
store_saga_id
store_redownloaded_status
store_matched_status
feed_url
is_ota_purchased
external_guid
purchase_history_token
key_id_2
purchase_history_id
vpp_is_licensed
vpp_org_id
vpp_org_name
sync_redownload_params
playback_endpoint_type
is_mastered_for_itunes
advertisement_unique_id
advertisement_type
is_artist_uploaded_content
cloud_asset_available
is_subscription
item_store.item_pid
sync_in_my_library
cloud_in_my_library
cloud_album_id
cloud_playback_endpoint_type
asset_store_item_id
reporting_store_item_id
extended_playback_attribute
LEFT OUTER JOIN store_link USING (store_link_id)
JOIN item_playback USING (item_pid)
eq_preset
start_time_ms
stop_time_ms
bit_rate
sample_rate
audio_format
duration
gapless_heuristic_info
gapless_encoding_delay
gapless_encoding_drain
gapless_last_frame_resynch
volume_normalization_energy
relative_volume
codec_type
codec_subtype
format
data_kind
data_url
has_video
progression_direction
JOIN item_video USING (item_pid)
season_number
episode_id
network_name
audio_language
audio_track_index
audio_track_id
audio_track_locale
subtitle_language
subtitle_track_index
has_alternate_audio
extended_content_rating
movie_info
has_subtitles
is_rental
is_demo
rental_duration
rental_playback_duration
rental_playback_date_started
rental_date_started
has_hls
has_chapter_data
show_sort_type
episode_type
episode_type_display_name
episode_sub_sort_order
hls_offline_playback_keys
is_premium
color_capability
hls_color_capability
video_quality
hls_video_quality
hls_playlist_url
audio_capability
hls_audio_capability
hls_asset_traits
hls_key_server_url
hls_key_cert_url
hls_key_server_protocol
LEFT OUTER JOIN genius_metadata ON (genius_metadata.genius_id = item_extra.genius_id)
JOIN item_stats USING (item_pid)
bookmark_time_ms
date_played
date_skipped
download_identifier
has_been_played
hidden
liked_state_changed
liked_state_changed_date
play_count_recent
play_count_user
skip_count_recent
skip_count_user
remember_bookmark
JOIN item_search USING (item_pid)
search_title
search_album
search_artist
search_composer
search_album_artist
LEFT OUTER JOIN item_kvs USING (item_pid)
LEFT OUTER JOIN cloud_kvs USING (key)
LEFT OUTER JOIN best_artwork_token ON entity_pid = item_pid AND entity_type = 0 AND artwork_type = 1
available_artwork_token
fetchable_artwork_token
fetchable_artwork_source_type
LEFT OUTER JOIN best_artwork_token ON entity_pid = item_pid AND entity_type = 0 AND artwork_type = 2
JOIN container_item USING (item_pid)
container_pid
position
container_item_pid
LEFT OUTER JOIN chapter USING (item_pid)
chapter_data
LEFT OUTER JOIN lyrics USING (item_pid)
checksum
store_lyrics_available
time_synced_lyrics_available
JOIN album_artist USING (album_artist_pid)
JOIN composer USING (composer_pid)
booklet
automated action
user action
SELECT 1 FROM item WHERE ROWID = ?
v32@?0@"NSString"8@"NSString"16r^@24
UPDATE item_extra SET integrity = ? WHERE item_pid = ?
SELECT integrity FROM item_extra WHERE item_pid = ?
DELETE FROM item_kvs WHERE item_pid = ?
INSERT OR REPLACE INTO item_upp (item_pid, bookkeeper_identifier) %@
SELECT %@.%@ FROM %@ WHERE %@ = ?
@"NSString"28@?0@"NSString"8@"NSString"16i24
v28@?0^{sqlite3_context=}8i16^^{sqlite3_value}20
UPDATE item SET base_location_id=0, date_downloaded=0, download_source_container_pid=0, keep_local=-1, keep_local_constraints=0, keep_local_status=0, keep_local_status_reason=0 WHERE item.item_pid
UPDATE item SET base_location_id=0, date_downloaded=0, download_source_container_pid=0 WHERE item.item_pid
UPDATE item_extra SET location = '' WHERE item_extra.item_pid
UPDATE item_store SET sync_id = 0, downloader_account_id = 0, family_account_id = 0, is_protected = 0, is_ota_purchased = 0 WHERE item_store.item_pid
UPDATE item_video SET hls_asset_traits = 0 WHERE item_video.item_pid
UPDATE item_video SET hls_offline_playback_keys = NULL WHERE item_video.item_pid
SELECT item_extra.location, base_location.path, item.item_pid, item.base_location_id, item_store.store_saga_id, item_store.purchase_history_id, item_store.is_subscription FROM item JOIN item_extra USING (item_pid) JOIN item_store USING(item_pid) LEFT OUTER JOIN base_location USING (base_location_id) WHERE item.item_pid
%02x
externalGuid
feedUrl
ML3PurchaseHistoryImportOperation.mm
Attempted to start purchase history import operation without DAAP payload.
com.apple.ML3TerminationCoordinator
com.apple.MusicLibrary.execute-coordinated-termination
distinguished_kind
is_owner
is_editable
parent_pid
contained_media_type
workout_template_id
is_hidden
is_ignorable_itunes_playlist
smart_evaluation_order
smart_is_folder
smart_is_dynamic
smart_is_filtered
smart_is_genius
smart_enabled_only
smart_is_limited
smart_limit_kind
smart_limit_order
smart_limit_value
smart_reverse_limit_order
smart_criteria
play_order
is_reversed
album_field_order
repeat_mode
shuffle_items
has_been_shuffled
filepath
is_saveable
is_src_remote
is_ignored_syncing
container_type
is_container_type_active_target
orig_date_modified
store_cloud_id
has_cloud_play_order
cloud_global_id
cloud_share_url
cloud_is_public
cloud_is_visible
cloud_is_subscribed
cloud_is_curator_playlist
cloud_author_store_id
cloud_author_display_name
cloud_author_store_url
cloud_min_refresh_interval
cloud_last_update_time
cloud_user_count
cloud_global_play_count
cloud_global_like_count
external_vendor_container_tag
cloud_is_sharing_disabled
cloud_version_hash
date_played_local
cloud_author_handle
should_display_index
category_type_mask
grouping_sort_key
 [<null> : 
<ML3ProtoSyncTrackImportItem 
virtual int64_t ML3ProtoSyncTrackImportItem::getIntegerValue(MLImportPropertyKey) const
ML3ProtoSyncImportItem.mm
getIntegerValue called with unknown property key %x
virtual float ML3ProtoSyncTrackImportItem::getFloatValue(MLImportPropertyKey) const
getFloatValue called with unknown property key %x
virtual ML3CPPDataRef ML3ProtoSyncTrackImportItem::getDataValue(MLImportPropertyKey) const
getDataValue called with unknown property key %x
virtual bool ML3ProtoSyncTrackImportItem::hasValue(MLImportPropertyKey) const
hasValue called with unknown property key %x
NSString *ML3ProtoSyncTrackImportItem::_getProtoStringValue(MLImportPropertyKey) const
getStringValue called with unknown property key %x
local
redownload
<ML3ProtoSyncContainerImportItem 
 name='
virtual int64_t ML3ProtoSyncContainerImportItem::getIntegerValue(MLImportPropertyKey) const
virtual float ML3ProtoSyncContainerImportItem::getFloatValue(MLImportPropertyKey) const
virtual ML3CPPDataRef ML3ProtoSyncContainerImportItem::getDataValue(MLImportPropertyKey) const
virtual bool ML3ProtoSyncContainerImportItem::hasValue(MLImportPropertyKey) const
NSString *ML3ProtoSyncContainerImportItem::_getProtoStringValue(MLImportPropertyKey) const
_getProtoStringValue called with unknown property key %x
TOTAL
musicLibrary
entityClass
predicate
orderingTerms
usingSections
nonDirectAggregateQuery
propertyToCount
options
ignoreSystemFilterPredicates
ignoreRestrictionsPredicates
%@(_predicate = %@, _orderingTerms = %@, _using sections = %d)
COUNT(DISTINCT %@)
COUNT()
MIN(%@, %lu)
v32@?0@"ML3QuerySection"8Q16^B24
v44@?0q8C16r^@20Q28^B36
%@(%@)
v32@?0@"ML3OrderingTerm"8Q16^B24
 FROM 
.ROWID = ?
DISTINCT 
 AND (
 OR 
 GROUP BY 
 ORDER BY 
 LIMIT %lu
MIN(COUNT(DISTINCT %@), %lu)
MIN(COUNT(%@), %lu)
COUNT(%@)
COUNT(1)
SELECT ROWID FROM item_artist WHERE (grouping_key = ?)
<ML3ImportItem 
    
 bytes : 
bitRate
codecType
codecSubType
dataKind
dataUrl
eqPreset
playbackFormat
gaplessHeuristicCode
gaplessHeuristicDelayCode
gaplessEncodingDrainCode
gaplessFrameResyncCode
relativeVolume
sampleRate
startTime
stopTime
volumeNormalizationEnergy
beatsPerMinute
progressionDirection
durationInSamples
%@-%.f
v28@?0i8d12^B20
INSERT OR REPLACE INTO genius_metadata (genius_id, checksum, data) VALUES (?, ?, ?);
UPDATE item_extra SET pending_genius_checksum = ? WHERE genius_id = ?;
INSERT OR REPLACE INTO genius_similarities (genius_id, data) VALUES (?, ?);
iPhoneSortKeyBuilderCreate
iPhoneSortKey.c
canonicalLanguageIdentifier != NULL
builder != NULL
!CFSafeGetArrayIsEmpty(sectionHeadersDictionaries)
builder->languageCount <= MAXIMUM_LANGUAGE_COUNT
NameTransform
builder->nameTransform == NULL || (CFGetTypeID(builder->nameTransform) == CFStringGetTypeID())
builder->collator != NULL
result != 0
iPhoneSortKey
iPhoneSortSection
iPhoneGroupingKey
could not build grouping key
%s:%d: %s
/Library/Caches/com.apple.xbs/Sources/MusicLibrary_Sim/MusicLibrary/Sorting/iPhoneSortKey/iPhoneSortKey.c
BuildLanguage
!CFSafeTypeMismatch(languageDictionary, CFDictionaryGetTypeID)
FirstCharacterAfterLanguage
!CFSafeTypeMismatch(firstCharacterAfterLanguage, CFStringGetTypeID)
!CFSafeGetArrayIsEmpty(headers)
firstCharacterSortKey != NULL
endCharacterSortKey != NULL
all_compilations
album_item_store.store_playlist_id
contains_classical_work
album_item_store.cloud_album_id
LEFT OUTER JOIN item_store AS album_item_store ON (album.representative_item_pid == album_item_store.ROWID)
SELECT ROWID FROM album WHERE feed_url = ?
SELECT ROWID FROM album WHERE (grouping_key = ?) AND (all_compilations = ?) AND (album_artist_pid = ?) AND (season_number = ?)
SELECT ROWID FROM album WHERE (grouping_key = ?) AND (all_compilations = ?) AND (album_artist_pid = ?)
SELECT album_pid FROM album LEFT OUTER JOIN album_artist USING(album_artist_pid) WHERE album_artist IS NULL AND album_artist_pid != 0
SELECT album_artist_pid FROM item WHERE album_artist_pid != 0 AND album_pid = ? LIMIT 1
UPDATE album SET album_artist_pid = ? WHERE album_pid = ?
INSERT INTO base_location (base_location_id, path) VALUES (0, '')
INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES ('OrderingLanguage','%@')
Media library database is too new for this device. (version = %d, latest known version is %d)
Could not build database tables using connection %@.
Failed to migrate database from version %d to %d. %@
VACUUM
PRAGMA user_version = %d;
ANALYZE
NSString *ML3TrackRulesIdentityPropertyForSource(ML3TrackSource)
ML3TrackRules.m
ML3TrackRulesIdentityPropertyForSource called with invalid source=%d
MLImportPropertyKey ML3TrackRulesIdentityImportPropertyForSource(ML3TrackSource)
ML3TrackRulesIdentityImportPropertyForSource called with invalid source=%d
MLMediaType ML3TrackRulesMediaTypesForSource(ML3TrackSource)
ML3TrackRulesMediaTypesForSource called with invalid source=%d
NSString *ML3ContainerRulesIdentityPropertyForSource(ML3TrackSource)
ML3ContainerRulesIdentityPropertyForSource called with invalid source=%d
MLImportPropertyKey ML3ContainerRulesIdentityImportPropertyForSource(ML3TrackSource)
ML3ContainerRulesIdentityImportPropertyForSource called with invalid source=%d
NSString *ML3TrackRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)
ML3TrackRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d
NSString *ML3ContainerRulesRemovalSourceIdentityPropertyForSource(ML3TrackSource)
ML3ContainerRulesRemovalSourceIdentityPropertyForSource called with invalid source=%d
NSDictionary *ML3TrackRulesRemovalPropertiesForSource(ML3TrackSource)
ML3TrackRulesRemovalPropertiesForSource called with invalid source=%d
BOOL ML3TrackRulesRemoveLocalAssetForSource(ML3TrackSource)
ML3TrackRulesRemoveLocalAssetForSource called with invalid source=%d
BOOL ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource(ML3TrackSource)
ML3TrackRulesShouldSetRemovalPropertiesOnAssetDeleteForSource called with invalid source=%d
NSString *ML3TrackRulesGetPropertyNameForKey(MLImportPropertyGroupKey, MLImportPropertyKey)
no track rule found for property %X
item.keep_local
item.keep_local_status
item.keep_local_status_reason
item.keep_local_constraints
item_extra.integrity
item_artwork_token
item_screenshot_token
item_fetchable_artwork_source_type
item_fetchable_artwork_token
container_fetchable_artwork_source_type
container_fetchable_artwork_token
container_item_source_ids
redownload_params
MLSortMapUnicodeVersion
(.nameSection=%d, .nameOrder = %15lld, .name = %@)
SELECT COUNT(name) FROM sqlite_master WHERE type='table' AND name = 'sort_map';
SELECT ROWID FROM sort_map LIMIT 1;
DROP TABLE IF EXISTS sort_map_new
INSERT INTO sort_map_new (name, sort_key) SELECT name, iPhoneSortKey(name) FROM sort_map;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(name), iPhoneSortKey(ML3SortString(name)) FROM sort_map;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_composer, iPhoneSortKey(sort_composer) FROM composer WHERE sort_composer IS NOT NULL;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT title, iPhoneSortKey(title) FROM item_extra;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(title), iPhoneSortKey(ML3SortString(title)) FROM item_extra;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_title, iPhoneSortKey(sort_title) FROM item_extra;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT item_artist, iPhoneSortKey(item_artist) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(item_artist), iPhoneSortKey(ML3SortString(item_artist)) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_item_artist, iPhoneSortKey(sort_item_artist) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT series_name, iPhoneSortKey(series_name) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(series_name), iPhoneSortKey(ML3SortString(series_name)) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_series_name, iPhoneSortKey(sort_series_name) FROM item_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT album_artist, iPhoneSortKey(album_artist) FROM album_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(album_artist), iPhoneSortKey(ML3SortString(album_artist)) FROM album_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_album_artist, iPhoneSortKey(sort_album_artist) FROM album_artist;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT album, iPhoneSortKey(album) FROM album;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(album), iPhoneSortKey(ML3SortString(album)) FROM album;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_album, iPhoneSortKey(sort_album) FROM album;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT season_number, iPhoneSortKey(season_number) FROM album;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT composer, iPhoneSortKey(composer) FROM composer;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT ML3SortString(composer), iPhoneSortKey(ML3SortString(composer)) FROM composer;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT sort_composer, iPhoneSortKey(sort_composer) FROM composer;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT genre, iPhoneSortKey(genre) FROM genre;
INSERT OR IGNORE INTO sort_map_new (name, sort_key) SELECT name, iPhoneSortKey(name) FROM container;
UPDATE sort_map_new SET name_section = iPhoneSortSection(sort_key);
CREATE TEMPORARY TABLE sort_map_new_in_order (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, UNIQUE (name));
INSERT INTO sort_map_new_in_order (name) SELECT name FROM sort_map_new ORDER BY sort_key;
UPDATE sort_map_new SET name_order = (SELECT sort_map_new_in_order.ROWID << 32 FROM sort_map_new_in_order WHERE sort_map_new.name = sort_map_new_in_order.name);
INSERT OR REPLACE INTO sort_map_new (name, name_order, name_section, sort_key) VALUES ('', 0, %u, '')
DROP TABLE sort_map_new_in_order;
SELECT sort_map.name FROM sort_map JOIN sort_map_new ON sort_map.name = sort_map_new.name WHERE (sort_map_new.name_order != sort_map.name_order) OR (sort_map_new.name_section != sort_map.name_section) LIMIT 1;
IFNULL((SELECT sort_map_new.name_order FROM sort_map_new WHERE sort_map_new.name = (CASE %@ WHEN '' THEN NULL ELSE %@ END)), 0)
UPDATE %@ SET %@ = %@;
v40@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32
_view
%1$@(pid, name_order, name_section) AS (SELECT %3$@.pid, sort_map_new.name_order, sort_map_new.name_section FROM sort_map_new JOIN %2$@ AS %3$@ ON sort_map_new.name = %3$@.name UNION SELECT 0, 0, %4$u)
item.
%@.name_order
_section
%@.name_section
%1$@ ON %2$@ = %1$@.pid
v32@?0@"NSString"8@"NSArray"16^B24
WITH %@ INSERT OR REPLACE INTO item_new (%@) SELECT %@ FROM item LEFT JOIN %@;
 LEFT JOIN 
DROP TABLE IF EXISTS item;
ALTER TABLE item_new RENAME TO item;
DROP TABLE IF EXISTS sort_map;
ALTER TABLE sort_map_new RENAME TO sort_map;
CREATE INDEX IF NOT EXISTS SortMapSortKeys ON sort_map (sort_key ASC);
INSERT OR REPLACE INTO _MLDatabaseProperties (key, value) VALUES ('OrderingLanguage', '%@')
UPDATE item_artist SET grouping_key = iPhoneGroupingKey((CASE LENGTH(series_name) WHEN 0 THEN item_artist ELSE series_name END))
UPDATE album_artist SET grouping_key = iPhoneGroupingKey(album_artist)
UPDATE album SET grouping_key = iPhoneGroupingKey(album)
UPDATE composer SET grouping_key = iPhoneGroupingKey(composer)
UPDATE genre SET grouping_key = iPhoneGroupingKey(genre)
UPDATE item_search SET search_album_artist = IFNULL((SELECT sort_map.name_order FROM sort_map JOIN album_artist ON album_artist.album_artist = sort_map.name JOIN item ON item.album_artist_pid = album_artist.album_artist_pid WHERE item.item_pid = item_search.item_pid), 0)
SELECT name_order, name_section FROM sort_map WHERE name = ? LIMIT 1;
ML3SortMap.m
blank string cannot be inserted into sort map
INSERT INTO sort_map (name, sort_key, name_section) VALUES (?, iPhoneSortKey(?), iPhoneSortSection(iPhoneSortKey(?)))
SELECT sort_map1.name_order, sort_map1.name FROM sort_map AS sort_map1 WHERE sort_map1.sort_key < (SELECT sort_map2.sort_key FROM sort_map AS sort_map2 WHERE name = ?) ORDER BY sort_map1.sort_key DESC, sort_map1.name_order DESC LIMIT 1;
SELECT sort_map1.name_order, sort_map1.name FROM sort_map AS sort_map1 WHERE sort_map1.sort_key >= (SELECT sort_map2.sort_key FROM sort_map AS sort_map2 WHERE name = ?) AND sort_map1.name != ? ORDER BY sort_map1.sort_key ASC, sort_map1.name_order ASC LIMIT 1;
UPDATE sort_map SET name_order = ? WHERE name = ?;
v16@?0^{iPhoneSortKeyBuilder=}8
Collection %@ has no properties for grouping unique collections. This should be impossible!
SELECT %@ FROM %@ GROUP BY %@ HAVING COUNT(*) > 1
%@ = ?
SELECT ROWID FROM %@ WHERE %@
UPDATE item SET %@ = ? WHERE %@ = ?
q24@?0@"ML3MusicLibrary_SortMapEntry"8@"ML3MusicLibrary_SortMapEntry"16
SELECT name, name_order, name_section, sort_key FROM sort_map ORDER BY name_order
got nil name from the sort map!
valueWithML3NameOrder returned nil!
INSERT INTO sort_map (name, sort_key) VALUES (?, '')
corrupted name ordering detected. prevNameOrder=%lld, nextNameOrder=%lld, prevEntry=%@, nextEntry=%@
incorrect sort key distance calculated. sortKeyGap=%lld, sortEntryDelta=%lld. prevEntry=%@, nextEntry=%@
entryDistance = 0, but sort keys are descending
entryDistance = gapDistance, but sort keys are ascending
v32@?0@"ML3MusicLibrary_SortMapEntry"8Q16^B24
'sort_map'
CREATE TABLE IF NOT EXISTS sort_map_no_uniques (name TEXT, name_order INTEGER, name_section INTEGER, sort_key BLOB)
DELETE FROM sort_map_no_uniques;
INSERT INTO sort_map_no_uniques (name, name_order, name_section, sort_key) VALUES (?, ?, ?, ?)
INSERT INTO sort_map (name, name_order, name_section, sort_key) SELECT name, name_order, name_section, sort_key FROM sort_map_no_uniques
SELECT ROWID, name, name_order, name_section, sort_key FROM sort_map_no_uniques WHERE name IN (SELECT name FROM sort_map_no_uniques GROUP BY name HAVING COUNT() > 1)
DELETE FROM sort_map_no_uniques WHERE name = ? AND ROWID != ?
v32@?0@"NSString"8@"NSNumber"16^B24
SELECT sort_map_no_uniques.name, sort_map_no_uniques.name_order, sort_map_no_uniques.name_section, sort_map_no_uniques.sort_key, sort_map.name, sort_map.name_order, sort_map.name_section, sort_map.sort_key FROM sort_map_no_uniques JOIN sort_map USING (name) WHERE sort_map_no_uniques.name IN (SELECT name FROM sort_map)
DELETE FROM sort_map_no_uniques WHERE name = ?
CREATE INDEX IF NOT EXISTS SortMapSortKeys ON sort_map (sort_key ASC)
SELECT COUNT() from sort_map
SELECT name, name_order, name_section, sort_key FROM sort_map ORDER BY name_order LIMIT 1 OFFSET ?
Did not find object at index %ld with %ld inserted objects
v32@?0@8@"ML3MusicLibrary_SortMapEntry"16^B24
SELECT name, name_order, name_section FROM sort_map LIMIT 1 OFFSET ?
SELECT name, name_order, name_section FROM sort_map WHERE name = ?
EnableASTCEncoding
com.apple.mobileipod
MLArtworkShouldConvertToASTC
truthValue
%@(NOT %@)
(NOT 
ML3Predicate.m
invalid value (nil) for property %@.
values
 [%@]
%@(%@ IN (%@)%@
 IN (
value
comparison
caseInsensitive
treatNullAsString
transformFunction
%@(%@ %@ %@%@%@)%@
LIKE
GLOB
Unknown comparison: %d
IFNULL(
, '%@')
 IN 
%@%@%@
%@%@
Unexpected value in predicate: %@
%@(%@ IN %@)
shouldContain
persistentIDs
.ROWID%@ IN (
 NOT
mask
%@((%@ & 0x%llx) = 0x%llx)
 & ?) = ?)
properties
searchString
%@((%@) matches '%@')
(?, 
 || ' ' || 
coalesce(%@, '')
predicates
ML3CompoundPredicate is an abstract class; use ML3AllCompoundPredicate or ML3AnyCompoundPredicate
B24@?0@"NSNumber"8^B16
v32@?0@"NSString"8@"ML3ContainmentPredicate"16^B24
condition
then
else
%@(If %@ then %@ else %@)
(CASE WHEN 
 THEN 
 ELSE 
 ELSE 1
 END)
%@, _range = %@, _sectionIndex = %lu
must be overridden
SELECT %@ FROM %@ WHERE %@ = 0 OR %@
SELECT DISTINCT item.%@ FROM item JOIN %@ USING (%@) LEFT OUTER JOIN best_artwork_token ON (item.ROWID = best_artwork_token.entity_pid AND best_artwork_token.entity_type = %ld) WHERE %@.%@ = item.ROWID AND (((item.media_type & 1024) = 1024) OR best_artwork_token.available_artwork_token IS NULL)
SELECT %@.ROWID FROM %@ WHERE %@.%@ = 0
SELECT %@.ROWID FROM %@ LEFT OUTER JOIN item ON (%@.%@ = item.ROWID) where %@.ROWID != IFNULL(item.%@, 0)
SELECT album_pid FROM album WHERE album_pid NOT IN (SELECT album_pid FROM item)
SELECT album_artist_pid FROM album_artist WHERE album_artist_pid NOT IN (SELECT album_artist_pid FROM item) AND album_artist_pid NOT IN (SELECT album_artist_pid FROM album)
SELECT item_artist_pid FROM item_artist WHERE item_artist_pid NOT IN (SELECT item_artist_pid FROM item)
SELECT composer_pid FROM composer WHERE composer_pid NOT IN (SELECT composer_pid FROM item)
SELECT genre_id FROM genre WHERE genre_id NOT IN (SELECT genre_id FROM item)
UPDATE %@ SET %@ = IFNULL( (SELECT item_pid FROM item LEFT OUTER JOIN best_artwork_token ON (item.ROWID = best_artwork_token.entity_pid AND best_artwork_token.entity_type = %ld) WHERE item.%@ = %@.ROWID ORDER BY item.media_type, best_artwork_token.available_artwork_token IS NOT NULL DESC LIMIT 1), 0)
 WHERE ROWID
aggregateEntityClass
foreignPersistentIDProperty
ML3DatabaseConnectionAdditions.m
columnDefinition
tableName
ALTER TABLE %@ ADD COLUMN %@
newDefinitions
columnName
newName
block
SELECT sql FROM sqlite_master WHERE type='table' AND name=?
^CREATE( TEMPORARY)* TABLE "*(\w+)"*( IF NOT EXISTS)* \(([\w\s'",]+)\)
(\w+)( \w+)*( \w+)*
%@_new
CREATE TABLE %@ (%@)
INSERT INTO %@ (%@) SELECT %@ FROM %@
DROP TABLE %@
ALTER TABLE %@ RENAME TO %@
%@ LEFT OUTER JOIN container_item ON %@.ROWID = container_item.container_item_pid
genre_item_store.store_genre_id
LEFT OUTER JOIN item_store AS genre_item_store ON (genre.representative_item_pid == genre_item_store.ROWID)
SELECT ROWID FROM genre WHERE (grouping_key = ?)
<%@: pid=%lld>: %@
container_seed.item_pid
seed_order
best_artwork_token.available_artwork_token AS available_container_artwork_token
(container.distinguished_kind = 0 AND container.is_hidden = 0 AND container.smart_criteria IS NULL AND container.smart_is_genius = 0 AND (container.cloud_is_subscribed = 0 OR container.is_editable = 1))
((IFNULL(container.smart_is_genius, 0) << 2) | ((container.smart_criteria IS NOT NULL) << 1) | IFNULL(container.is_saveable, 0))
(IFNULL(container.workout_template_id, 0) != 0)
(container.distinguished_kind = 17)
(container.distinguished_kind = 32)
(container.is_container_type_active_target AND container.smart_is_genius)
(container.smart_is_genius = 0)
(container.smart_criteria IS NULL)
(container.smart_is_folder = 0)
(container.is_container_type_active_target AND (container.container_type = 2))
(is_src_remote = 0 OR container.distinguished_kind = 0)
((container.smart_criteria IS NOT NULL) AND (container.smart_is_dynamic = 1) AND (container.smart_is_limited = 1))
(container.distinguished_kind = 19 OR container.distinguished_kind = 20)
(container.distinguished_kind = 20 AND container.is_container_type_active_target)
(container.distinguished_kind = 10000 AND container.is_container_type_active_target)
(container.distinguished_kind = 10010 AND container.is_container_type_active_target)
(IFNULL(container_item.container_pid, 0) != 0 OR smart_criteria IS NOT NULL)
(container.is_src_remote = 1)
LEFT OUTER JOIN container_seed USING (container_pid)
LEFT OUTER JOIN container_item ON container.container_pid = container_item.container_pid AND position = 0
LEFT OUTER JOIN best_artwork_token ON entity_pid = container_pid AND entity_type = 1 AND artwork_type = 5
ML3Container.m
persistentID must be specified since it is part of the filename format.
v24@?0@"NSString"8@"NSString"16
Klassiek
Classique
Klassik
Classica
UPDATE container SET name = ? WHERE container_pid = ?
v32@?0@"NSNumber"8@"NSString"16^B24
createdBuiltInSmartPlaylists
autoCreatedSmartPlaylistsDeleted
DELETE FROM container_item_person WHERE container_item_pid in (SELECT container_item_pid from container_item where container_pid = ?)
DELETE FROM container_item WHERE container_pid = ?
DELETE FROM artwork_token WHERE entity_pid = ? AND entity_type = ?
DELETE FROM best_artwork_token WHERE entity_pid = ? AND entity_type = ?
SELECT media_type FROM container_item_media_type WHERE container_pid = ? AND count > 0
UPDATE container SET contained_media_type = ? WHERE container_pid = ?
SELECT media_type, COUNT(media_type) FROM item WHERE item_pid
 GROUP BY media_type
SELECT media_type, COUNT(media_type) FROM item JOIN container_item USING (item_pid) WHERE container_pid = ? GROUP BY media_type
DELETE FROM container_item_media_type WHERE container_pid = ?
INSERT OR IGNORE INTO container_item_media_type (container_pid, media_type) VALUES(?, ?)
UPDATE container_item_media_type SET count = count + ? WHERE container_pid = ? AND media_type = ?
UPDATE container_item_media_type SET count = count - ? WHERE container_pid = ? AND media_type = ?
SELECT ROWID FROM container WHERE smart_is_dynamic = 0 AND is_hidden = 0
v32@?0@"ML3Container"8Q16^B24
setTracksWithPersistentIDs:notify: called on unsupported container
appendTracksWithPersistentIDs:notify: called on unsupported container
UPDATE item set keep_local=0 WHERE (item_pid=? AND keep_local<?);
moveTrackFromIndex:toIndex: called on unsupported container
UPDATE container_item SET position = (CASE WHEN position = ? THEN ? ELSE CASE WHEN position BETWEEN ? AND ? THEN position + ? END END) WHERE container_pid = ? AND position BETWEEN ? AND ?
removeTracksAtIndexes:notify: called on unsupported container
select container_pid from container where (distinguished_kind=?)
select position from container_item where (container_pid=? AND item_pid=?) order by position ASC
UPDATE container_item set position=(position+1) where (container_pid=?)
DELETE FROM container_item_person WHERE container_item_pid in (SELECT container_item_pid from container_item where container_pid = ? AND position = ?)
DELETE FROM container_item where container_pid=? AND position=?
UPDATE container_item set position=(position-1) where (container_pid=? AND position > ?)
v24@?0Q8^B16
SELECT IFNULL(in_my_library, 0), container_pid, position FROM container_item LEFT OUTER JOIN item USING (item_pid) JOIN container USING (container_pid) WHERE distinguished_kind IN (0, 19, 20) AND smart_criteria IS NULL AND is_hidden = 0 AND cloud_is_subscribed = 0 AND cloud_is_curator_playlist = 0 AND (item.item_pid IS NULL OR container_item.item_pid
SELECT position FROM container_item LEFT OUTER JOIN item USING (item_pid) WHERE NOT IFNULL(in_my_library, 0) AND container_pid = ?
SELECT container.container_pid FROM container JOIN container_item ON (container.container_pid = container_item.container_pid AND position = 0) WHERE distinguished_kind = 0 AND smart_criteria IS NULL AND is_hidden = 0 AND cloud_is_subscribed = 0 AND cloud_is_curator_playlist = 0
SELECT IFNULL(MAX(position), -1) FROM container_item WHERE container_pid = ?
Only one of reloadContainedMediaTypes, and removedMediaTypes/addedMediaTypes can be used
[NSIndexSet enumerateRangesUsingBlock:] is not enumerating ranges in order!
DELETE FROM container_item_person WHERE container_item_pid in (SELECT container_item_pid from container_item where container_pid = ? AND position BETWEEN ? AND ?)
DELETE FROM container_item WHERE container_pid = ? AND position BETWEEN ? AND ?
UPDATE container_item SET position = (position - ?) WHERE container_pid = ? AND position >= ?
DELETE FROM container_seed WHERE container_pid = ?;
INSERT INTO container_seed (container_pid, item_pid) VALUES (?, ?);
DELETE FROM container_item_person WHERE container_item_pid in (SELECT container_item_pid from container_item where container_pid=?)
DELETE FROM container_item_person WHERE container_item_pid
DELETE FROM container_item WHERE ROWID
INSERT OR REPLACE INTO container_item (container_item_pid, container_pid, item_pid, position) VALUES (?, ?, ?, ?)
B24@?0@"NSString"8@"NSString"16
B24@?0@"NSString"8^B16
ML3Predicate *NumericPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)
Could not get value range for %@ criterion: %ld
ML3Predicate *BooleanPredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)
Could not get numeric value for %@ criterion: %ld
Could not get boolean value for %@ criterion: %ld
ML3Predicate *DatePredicateForCriteriaInfo(CriterionInfo *, NSString *__strong)
Could not get value range for %@ date criterion: %ld
Classical Music
My Top Rated
Top 25 Most Played
Recently Played
containerPersistentID
orderingTerm
SELECT 1 FROM (%@)
SELECT 1 FROM (%@ LIMIT 1)
ML3ContainerQuery.m
Attempting to get value for unsupported aggregate function %@
revisionBeforeImport
revisionAfterImport
com.apple.amp.MediaLibrary.ML3ProtoSyncImportOperation.accessQueue
B24@?0@"ML3ActiveTransaction"8@"NSError"16
UPDATE item_stats SET play_count_recent=0,skip_count_recent=0,liked_state_changed=0 WHERE item_pid IN (SELECT item_pid FROM item_store WHERE sync_id!=0)
UPDATE item_stats SET play_count_user = play_count_user + ?, play_count_recent = play_count_recent + ?, skip_count_user = skip_count_user + ?, skip_count_recent = skip_count_recent + ? WHERE item_pid = ?
UPDATE item_stats SET bookmark_time_ms = ? WHERE item_pid = ? AND date_played < ?
UPDATE item_stats SET date_played = ?, has_been_played = ? WHERE item_pid = ? AND date_played < ?
container_item_person_pid
container_item_person
com.apple.MusicLibrary.MLMediaLibraryResourceServiceClient.serial.queue
com.apple.MusicLibrary.MLMediaLibraryResourceServiceClient.callout.queue
com.apple.MusicLibrary.MLMediaLibraryResourceServiceClient.path.change.queue
wstring_convert: from_bytes error
wstring_convert: to_bytes error
failed to truncate database files
DELETE FROM entity_revision WHERE entity_pid=0
SpringBoard
com.apple.datamigrator
Unmigratable Media Library
The media library service has detected that this device has been downgraded from a newer operating system version. The service does not support migration back to previous versions.
Please either erase-install the desired version of the operating system, or select the option to let the service rebuild your media library database. This WILL erase your media library on this device.
[This dialog is shown for internal users only.]
Rebuild Library
Ignore
storeId
persistentId
composer_item_store.store_composer_id
LEFT OUTER JOIN item_store AS composer_item_store ON (composer.representative_item_pid == composer_item_store.ROWID)
SELECT ROWID FROM composer WHERE (grouping_key = ?)
SELECT ROWID FROM album_artist WHERE (grouping_key = ?)
SELECT container_item_pid, item_pid, position FROM container_item WHERE container_pid = ? ORDER BY position
unordered_map::at: key not found
<ML3ITunesSyncImportItem 
 sync_id=
virtual id ML3ITunesSyncImportItem::_getFoundationValue(MLImportPropertyKey) const
ML3ITunesSyncImportItem.mm
_getFoundationValue called with unknown property key %x
avformat_info
podcast_info
rental_info
store_info
video_info
operation
insert_track
, store_id=
show_composer
is_music_show
sort_name
genius_checksum
work
movement_name
movement_count
movement_number
composer_id
playlist_id
download_account_id
family_id
flavor
matched_status
redownloaded_status
quality
is_hd
sort_artist
artist_id
album_liked_state
artwork_cache_id
album_rating
album_rating_is_derived
explicit
is_podcast
is_song
is_audio_book
is_music_video
is_movie
is_tv_show
is_home_video
is_voice_memo
is_itunes_u
chapter_info
kind
container_ui
item_to_container
insert_playlist
<null>
<MLDITunesSyncPlaylistImportItem 
source_device_guid
UniqueDeviceID
genius_seed_tracks
com.apple.medialibraryd.importOperationQueue
Operation was cancelled by the media library service.
PDFBooklet
InteractiveBooklet
CoachedAudio
VPass
SWPkg
ForcedMusicPlaylist
Ringtone
Rental
DigitalBookleet
SWApp
SWGame
AudioPass
iTunesU
Book
PDFBook
AlertTone
kITDBTrackField_Invalid
%@ (%d)
kITDBTrackField_PlayStatus
kITDBTrackField_Name
kITDBTrackField_Album
kITDBTrackField_Artist
kITDBTrackField_BitRate
kITDBTrackField_SampleRate
kITDBTrackField_Year
kITDBTrackField_Genre
kITDBTrackField_Kind
kITDBTrackField_Date
kITDBTrackField_TrackNumber
kITDBTrackField_TotalSize
kITDBTrackField_TotalTime
kITDBTrackField_Comment
kITDBTrackField_Location
kITDBTrackField_DateAdded
kITDBTrackField_EQPreset
kITDBTrackField_Composer
kITDBTrackField_ObsoleteDisplayArtist
kITDBTrackField_NormalizedVolume
kITDBTrackField_StreamStatus
kITDBTrackField_UserPlayCount
kITDBTrackField_PlayDate
kITDBTrackField_DiscNumber
kITDBTrackField_TrackRating
kITDBTrackField_Price
kITDBTrackField_ObjectID
kITDBTrackField_PersistentID
kITDBTrackField_OldUserDisabled
kITDBTrackField_PlaylistItemID
kITDBTrackField_Compilation
kITDBTrackField_PurchaseDate
kITDBTrackField_Relevance
kITDBTrackField_ReleaseDate
kITDBTrackField_BeatsPerMinute
kITDBTrackField_ParentContainerID
kITDBTrackField_Artwork
kITDBTrackField_Popularity
kITDBTrackField_Grouping
kITDBTrackField_PlaylistPersistentID
kITDBTrackField_SongID
kITDBTrackField_ArtistID
kITDBTrackField_PlaylistID
kITDBTrackField_ComposerID
kITDBTrackField_GenreID
kITDBTrackField_CodecType
kITDBTrackField_CodecSubType
kITDBTrackField_SongDataKind
kITDBTrackField_DiscCount
kITDBTrackField_StartTime
kITDBTrackField_StopTime
kITDBTrackField_TrackCount
kITDBTrackField_StorefrontID
kITDBTrackField_Description
kITDBTrackField_Category
kITDBTrackField_Keywords
kITDBTrackField_Podcast
kITDBTrackField_CloudMatchState
kITDBTrackField_HasLyrics
kITDBTrackField_MediaKind
kITDBTrackField_Debug
kITDBTrackField_SeriesName
kITDBTrackField_SeasonNumber
kITDBTrackField_EpisodeID
kITDBTrackField_EpisodeSortID
kITDBTrackField_NetworkName
kITDBTrackField_LastBackupDate
kITDBTrackField_UserSkipCount
kITDBTrackField_SkipDate
kITDBTrackField_GaplessAlbum
kITDBTrackField_AlbumArtist
kITDBTrackField_ShuffleID
kITDBTrackField_TrackID
kITDBTrackField_RelativeVolume
kITDBTrackField_Attributes
kITDBTrackField_Private
kITDBTrackField_AlbumInfo
kITDBTrackField_SortName
kITDBTrackField_SortAlbum
kITDBTrackField_SortArtist
kITDBTrackField_SortAlbumArtist
kITDBTrackField_SortComposer
kITDBTrackField_SortSeriesName
kITDBTrackField_MovieInfo
kITDBTrackField_PodcastURL
kITDBTrackField_LongDescription
kITDBTrackField_ExternalGUID
kITDBTrackField_ChapterData
kITDBTrackField_ExtendedContentRating
kITDBTrackField_AlbumRating
kITDBTrackField_RentalExpirationDate
kITDBTrackField_ObsoleteRingtoneStatus
kITDBTrackField_BookmarkTime
kITDBTrackField_RememberBookmark
kITDBTrackField_HasBeenPlayed
kITDBTrackField_HasAlternateAudio
kITDBTrackField_HasSubtitles
kITDBTrackField_AudioLanguage
kITDBTrackField_AudioTrackIndex
kITDBTrackField_AudioTrackID
kITDBTrackField_SubtitleLanguage
kITDBTrackField_SubtitleTrackIndex
kITDBTrackField_SubtitleTrackID
kITDBTrackField_Studio
kITDBTrackField_Reserved1
kITDBTrackField_Reserved2
kITDBTrackField_Reserved3
kITDBTrackField_Reserved4
kITDBTrackField_Reserved5
kITDBTrackField_GaplessInfo
kITDBTrackField_GeniusID
kITDBTrackField_ExcludeFromShuffle
kITDBTrackField_Lyrics
kITDBTrackField_StorePersistentID
kITDBTrackField_JukeboxVotes
kITDBTrackField_VoiceOverLanguage
kITDBTrackField_iTunesU
kITDBTrackField_UncompressedSize
kITDBTrackField_XID
kITDBTrackField_GameGUID
kITDBTrackField_AppIdentifier
kITDBTrackField_ObsoleteTrackKind
kITDBTrackField_Version
kITDBTrackField_Copyright
kITDBTrackField_UserDisabled
kITDBTrackField_AlbumArtwork
kITDBTrackField_CollectionDescription
kITDBTrackField_Flavor
kITDBTrackField_CloudID
kITDBTrackField_CloudDownload
kITDBTrackField_ChosenByAutoFill
kITDBTrackField_CloudUserID
kITDBTrackField_TrackKinds
kITDBTrackField_CloudType
kITDBTrackField_Tags
kITDBTrackField_NumChannels
kITDBTrackField_CloudFlavorID
kITDBTrackField_CloudLibraryKind
kITDBTrackField_StoreVersion
kITDBTrackField_AppFamilyIDMask
kITDBTrackField_ItemIsCompilation
kITDBTrackField_ArtistInfo
kITDBTrackField_PlaylistItemPersistentID
kITDBTrackField_AppleID
kITDBTrackField_OwnerName
kITDBTrackField_URLExtraInfo
kITDBTrackField_ManuallyMarked
kITDBTrackField_DownloaderAppleID
kITDBTrackField_DownloaderName
kITDBTrackField_CloudServerAssetState
kITDBTrackField_SubscriptionAdamID
kITDBTrackField_ReportPlayEvents
kITDBTrackField_IsPlaylistOnly
kITDBTrackField_LikedState
kITDBTrackField_CloudPlaybackEndpointType
kITDBTrackField_AlbumLikedState
kITDBTrackField_MaxValue
Unknown kITDBTrackField_??? (%ld)
'%c%c%c%c'
ChapterDataRef = %p | has[names=%@, urls=%@, pics=%@] | chap count = %d 
loc/fmt=%@%@
name = %@
url = [%@: %@]
pic = %@
{%3d: time=%s%.2f, cookies(name=%2u, pic=%2u, url=%2u), %@
, trackID=%ld sampleNum=%ld
(null)
NSString *MLDescriptionFromChapterData(ITChapterDataRef)
system
label
rank
content
ratingProvider
localizedRating
ratingLevel
localizedReason
debugInfo
Season %d
v24@?0@8^B16
GENIUS_PLAYLIST_NAME
ON_THE_GO_PLAYLIST_NAME
-[ML3MusicLibrary(ProcessingAdditions) updateOrderingLanguagesForCurrentLanguage]
ML3MusicLibraryProcessingAdditions.m
currentLanaguage
OrderingLanguage
supportedArtworkTypes
supportedMediaTypes
autogenerate
iPadOnly
com.apple.MusicLibrary
artworkConfig
com.apple.MusicLibrary.ML3ArtworkConfiguration
{CGSize=dd}
<%@ %p %@>
B32@?0@"NSString"8@"NSDictionary"16^B24
MLMediaTypeDigitalBooklet
MLMediaTypeAnyAudio
MLMediaTypeAnyVideo
ML3ArtworkTypeItem
ML3ArtworkTypeScreenshot
ML3ArtworkTypeChapter
ML3ArtworkTypeArtistHero
ML3ArtworkTypePlaylist
_ML3ArtworkConfigurationCGSizeFromString
B16@?0@"ML3DatabaseStatement"8
<%@ %p '%@'>
<%@ %p = {
MLMusicLibraryErrorDomain
sortName
type
smartPlaylistInfo
sortType
reversedSorting
parentIdentifier
geniusSeedTrackIdentifier
cloudGlobalId
cloudIsSubscribed
cloudIsCuratorPlaylist
externalVendorIdentifier
externalVendorDisplayName
externalVendorTag
externalVendorPlaylist
creationDateTime
modificationDateTime
lastPlayedDateTime
cloudIsSharingDisabled
cloudVersionHash
artworkId
remoteSourceType
owner
editable
shared
visible
authorStoreId
authorDisplayName
authorStoreURL
authorHandle
minRefreshInterval
cloudLastUpdateTime
subscriberCount
subscriberPlayCount
subscriberLikedCount
subscriberURL
playlistDescription
cloudUniversalLibraryId
secondaryArtworkSourceType
secondaryArtworkId
playlistCategoryTypeMask
playlistGroupingSortKey
childIdentifiers
items
Normal
Smart
Genius
Folder
(unknown: %i)
None
Artist
Album
Name
ReleaseDate
AddedDate
PlayedDate
SeriesName
Physical
Shuffle
TrackID
PlaylistItemID
BitRate
Genre
Kind
Date
TrackNumber
TotalSize
TotalTime
Year
SampleRate
Category
Location
StreamStatus
Description
Comment
DateAdded
EQPreset
Composer
NormVolume
UserPlayCount
PlayDate
DiscNumber
TrackRating
CompilationArtist
CompilationGenre
FastArtist
FastAlbumArtistOrArtist
FastAlbum
FastGenre
FastComposer
Price
Relevance
PurchaseDate
BeatsPerMinute
Popularity
Grouping
SeasonNumber
EpisodeID
EpisodeSortID
UserSkipCount
SkipDate
AlbumArtist
AlbumByArtistYear
AlbumByArtist
AlbumRating
RentalExpirationDate
ComposerAlbum
CategoryAlbum
GenreAlbum
GenreName
GeniusID
PodcastCategory
StorePersistentID
Version
UncompressedSize
AppKind
UserDisabled
CloudDownload
CloudMatchState
CloudID
CloudUserID
CloudStatus
CloudFlavorID
CloudLibraryKind
Tags
ML3MigrationErrorDomain
MLTestHookFailMigration
No migration path exists to upgrade from (%d) to system version (%d)
Failed to upgrade from version %d.
SELECT COUNT() FROM item
SELECT COUNT() FROM item_extra
SELECT ROWID FROM item WHERE item_pid IN (SELECT item.item_pid FROM item LEFT OUTER JOIN item_extra ON item.item_pid=item_extra.item_pid WHERE item_extra.item_pid ISNULL)
DELETE FROM item WHERE item_pid IN (SELECT item.item_pid FROM item LEFT OUTER JOIN item_extra ON item.item_pid=item_extra.item_pid WHERE item_extra.item_pid ISNULL)
SELECT ROWID FROM item_extra WHERE item_pid IN (SELECT item_extra.item_pid FROM item_extra LEFT OUTER JOIN item ON item_extra.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_extra WHERE item_pid IN (SELECT item_extra.item_pid FROM item_extra LEFT OUTER JOIN item ON item_extra.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_stats WHERE item_pid IN (SELECT item_stats.item_pid FROM item_stats LEFT OUTER JOIN item ON item_stats.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_search WHERE item_pid IN (SELECT item_search.item_pid FROM item_search LEFT OUTER JOIN item ON item_search.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_store WHERE item_pid IN (SELECT item_store.item_pid FROM item_store LEFT OUTER JOIN item ON item_store.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_playback WHERE item_pid IN (SELECT item_playback.item_pid FROM item_playback LEFT OUTER JOIN item ON item_playback.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM item_video WHERE Item_pid IN (SELECT item_video.item_pid FROM item_video LEFT OUTER JOIN item ON item_video.item_pid=item.item_pid WHERE item.item_pid ISNULL)
DELETE FROM entity_revision WHERE revision_type > ? AND class = ? AND entity_pid = ?
SELECT item_pid FROM item JOIN item_store USING(item_pid) WHERE media_type = 8 AND title_order = 0 AND album_order = 0 AND album_artist_order = 0 AND subscription_store_item_id = 0 AND is_ota_purchased = 0 AND store_saga_id = 0 AND store_item_id = 0 AND sync_id = 0 AND purchase_history_id = 0 AND base_location_id = 0 AND remote_location_id = 0 AND disc_number = 0 AND track_number = 0 AND needs_reporting = 1
UPDATE album SET representative_item_pid = (SELECT item_pid FROM item WHERE item.album_pid = album.album_pid LIMIT 1) WHERE representative_item_pid NOT IN (select item_pid from item)
UPDATE album_artist SET representative_item_pid = IFNULL((SELECT item_pid FROM item WHERE item.album_artist_pid = album_artist.album_artist_pid LIMIT 1), 0) WHERE representative_item_pid NOT IN (select item_pid FROM item)
UPDATE item_artist SET representative_item_pid = (SELECT item_pid FROM item WHERE item.item_artist_pid = item_artist.item_artist_pid LIMIT 1) WHERE representative_item_pid NOT IN (select item_pid FROM item)
UPDATE composer SET representative_item_pid = (SELECT item_pid FROM item WHERE item.composer_pid = composer.composer_pid LIMIT 1) WHERE representative_item_pid NOT IN (select item_pid FROM item)
UPDATE genre SET representative_item_pid = (SELECT item_pid FROM item WHERE item.genre_id = genre.genre_id LIMIT 1) WHERE representative_item_pid NOT IN (select item_pid FROM item)
SELECT DISTINCT title, sort_title FROM item_extra JOIN item USING(item_pid) WHERE title_order = 0 AND LENGTH(title)
SELECT DISTINCT item_artist, sort_item_artist, series_name, sort_series_name FROM item_artist JOIN item USING(item_artist_pid) WHERE item_artist_order = 0 AND LENGTH(item_artist)
SELECT DISTINCT album_artist, sort_album_artist FROM album_artist JOIN item USING(album_artist_pid) WHERE album_artist_order = 0 AND LENGTH(album_artist)
SELECT DISTINCT album, sort_album FROM album JOIN item USING(album_pid) WHERE album_order = 0 AND LENGTH(album)
SELECT DISTINCT composer, sort_composer FROM composer JOIN item USING(composer_pid) WHERE composer_order = 0 AND LENGTH(composer)
SELECT DISTINCT genre FROM genre JOIN item USING(genre_id) WHERE genre_order = 0 AND LENGTH(genre)
INSERT OR REPLACE INTO sort_map (name, sort_key) VALUES (?, '')
SELECT name_order, name_section FROM sort_map ORDER BY sort_key ASC
SELECT COUNT() FROM lyrics
INSERT INTO lyrics (item_pid) SELECT item.item_pid FROM item LEFT OUTER JOIN lyrics USING (item_pid) WHERE lyrics.item_pid ISNULL;
SELECT value FROM _MLDatabaseProperties WHERE key = 'MLCloudDatabaseRevision'
INSERT OR REPLACE INTO _MLDatabaseProperties (value, key) VALUES (?, ?)
MLSagaNeedsFullUpdate
SELECT value FROM _MLDatabaseProperties WHERE key = 'MLJaliscoDatabaseRevision'
MLJaliscoNeedsUpdateForTokens
DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientLastSyncedRevision'
DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientSyncAnchor'
DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientGenerationID'
DELETE FROM _MLDatabaseProperties WHERE key = 'MLSyncClientHasPendingAssets'
 JOIN %@ USING(%@)
_new
DROP TABLE IF EXISTS %@
INSERT INTO %@ (%@) SELECT %@ FROM %@%@
PRAGMA table_info(%@)
SELECT item.item_pid,base_location.path,item_extra.location FROM item JOIN item_extra USING(item_pid) JOIN base_location USING(base_location_id) JOIN item_store USING(item_pid) WHERE remote_location_id > 0 AND base_location_id > 0 OR LENGTH(item_extra.location) > 0
UPDATE item SET base_location_id=0 WHERE item.item_pid
%@ IN (%@)
UPDATE item_extra SET location='',file_size=0 WHERE item_extra.item_pid
_tmp
iTunes_Control/iTunes/Artwork
Library/Caches/com.apple.mediaplayer/Artwork
%x/%x%x%x%x%x%x%x%x_%d.%@
%@%ld%ld
%02x/
.jpeg
iTunes_Control/iTunes/Artwork/Originals
iTunes_Control/iTunes/Artwork/Caches
SELECT entity_pid, entity_type, artwork_type FROM artwork_token GROUP BY entity_pid, entity_type, artwork_type
SELECT container_pid FROM container JOIN container_items USING (container_pid) WHERE distinguished_kind = 0 AND smart_criteria IS NULL AND is_hidden = 0 AND LENGTH(item_pid_data) > 0 AND cloud_is_subscribed = 0 AND cloud_is_curator_playlist = 0
SELECT item_pid FROM item WHERE in_my_library
REPLACE INTO container_items (container_pid, item_pid_data) VALUES (?, ?)
DELETE FROM entity_revision WHERE entity_pid = ? AND revision_type > ?
void ML3MigrationRemoveInvalidContainerItems(NSString *__strong, ML3DatabaseConnection *__strong)_block_invoke_3
ML3MigrationUtilities.m
v32@?0{_NSRange=QQ}8^B24
REPLACE INTO entity_revision (entity_pid, deleted, class, revision_type) VALUES (?, 0, 1, 0)
DELETE FROM entity_revision WHERE entity_pid = ? AND class = 1 AND revision_type > 0
v32@?0@"NSNumber"8@"NSIndexSet"16^B24
iTunes_Control/iTunes/UbiquitousMetadata.sqlitedb
SELECT store_saga_id FROM item_store WHERE item_pid = ?
SELECT purchase_history_id FROM item_store WHERE item_pid = ?
startMS=%7lu
title='%@'
image=%p
imageKey=%@
url=%@
urlTitle='%@'
<%@: %p - [%@] %@>
com.apple.medialibraryd
medialibraryd
cast
copy-warning
directors
producers
screenwriters
studio
adamId
dynamic
filtered
limited
limitKind
evaluationOrder
limitOrder
limitValue
enabledItemsOnly
reverseLimitOrder
smartCriteria
genius
SELECT COUNT() FROM %@ LIMIT 1
SELECT %@ FROM %@ LIMIT 1
 LIMIT %d
 WHERE %@
SELECT %@ FROM %@%@%@
SELECT %@ FROM %@%@ LIMIT 1
min_num_results
default_num_results
genius_id = %llu
genius_metadata
data
genius_similarities
MLGeniusPlaylistController.m
count
%.16llX
%llu
ML3ClientImportSession.m
addItems cannot be called without an active session
v24@?0@"ML3ClientImportResult"8@"NSError"16
updateItems cannot be called without an active session
removeItems cannot be called without an active session
v32@?0@"MLTrackImportChapter"8Q16^B24
url_title
artwork_start_time_ms
v32@?0@"NSDictionary"8Q16^B24
chapters
time-format
decimal-seconds
locales
chapter-list
start
titles
commonKey
extraAttributes
time
ML3TrackImporter.m
populateLocationPropertiesWithPath passed file with invalid name '%@'
update container set date_downloaded=? where container_pid in (select DISTINCT container_pid from (select container_pid from container_item join container using(container_pid) where keep_local > 0 AND item_pid=?))
q16@?0@"NSString"8
B32@?0@"NSString"8@"NSString"16@?<v@?@"NSString">24
void MLChapterDataSetChapterArtworkCacheKey(ChapterDataRef, NSUInteger, NSString *__strong)
no cache key specified
MLITChapterTOC.m
MLITChapterTOC is an abstract class.  You must allocate a concrete subclass.
invalid parameter
numTracks
numDiscs
compilation
cloudId
_ML3AutofilledTracksArePurgeableKey
OptimizeStorage
MinimumStorageSize
B40@?0q8@"NSArray"16@"NSNumber"24^B32
SELECT COUNT() FROM artwork
DELETE FROM artwork
B32@?0q8@"NSNumber"16^B24
((item.base_location_id > 0) AND (item_stats.is_alarm = 0) AND ((item_stats.chosen_by_auto_fill = 1) OR (item.remote_location_id >= 50 AND item.remote_location_id < 300)))
SELECT DISTINCT album_pid FROM item JOIN item_store USING (item_pid) JOIN item_extra USING (item_pid) JOIN item_stats USING (item_pid) WHERE (item.base_location_id > 0 AND (item.remote_location_id < 200 OR item_stats.liked_state = 2)) OR (item.base_location_id = 0 AND item.keep_local_status = 1)
SELECT DISTINCT album_pid FROM item JOIN item_store USING (item_pid) JOIN item_extra USING (item_pid) JOIN item_stats USING (item_pid) WHERE (item.base_location_id > 0 AND item.remote_location_id < 200) OR (item.base_location_id = 0 AND item.keep_local_status = 1)
SELECT album_pid, max(max(date_accessed), max(date_added), max(date_played)) AS date_accessed, max(liked_state = 2) AS liked_state FROM item JOIN item_stats USING (item_pid) JOIN item_extra USING (item_pid) WHERE album_pid NOT IN (%@) AND (%@) GROUP BY album_pid ORDER BY liked_state, date_accessed
SELECT item_pid, item_extra.file_size FROM item JOIN item_stats USING (item_pid) JOIN item_extra USING (item_pid) WHERE album_pid = ? AND (%@)
UPDATE item SET keep_local=%d WHERE item_pid IN (%@)
MediaPlayer
image_decoding
DisableASTCEncoding
chapter=%llu-%.0f
%.0fx%.0f
MSVHasher+Algorithms.h
Cannot append to unknown hasher algorithm
Cannot obtain digest from unknown hasher algorithm
Cannot finalize unknown hasher algorithm
<%@: %p, name='%@'>
rental
hasChapterData
extendedContentName
movieInfo
hasAlternateAudio
hasSubtitles
audioLanguage
audioTrackIndex
audioTrackId
subtitleLanguage
subtitleTrackIndex
rentalDuration
rentalPlaybackDuration
rentalPlaybackStartedDateTime
rentalStartedDateTime
flattenedChapterData
CREATE TABLE category (category_id INTEGER PRIMARY KEY, category TEXT NOT NULL UNIQUE)
CREATE TABLE store_link (store_link_id INTEGER PRIMARY KEY, url TEXT NOT NULL)
CREATE TABLE base_location (base_location_id INTEGER PRIMARY KEY, path TEXT NOT NULL)
CREATE TABLE "sort_map" (name TEXT NOT NULL UNIQUE, name_order INTEGER UNIQUE, name_section INTEGER,  sort_key BLOB NOT NULL)
CREATE TABLE "sort_map_new" (name TEXT NOT NULL UNIQUE, name_order INTEGER UNIQUE, name_section INTEGER, sort_key BLOB NOT NULL DEFAULT x'')
CREATE TRIGGER IF NOT EXISTS on_insert_item_setRemoteLocationColumn AFTER INSERT ON item_store BEGIN UPDATE item SET remote_location_id = ( CASE WHEN new.home_sharing_id != 0 THEN 300 ELSE ( CASE WHEN IFNULL(new.match_redownload_params, '') != '' THEN 200 ELSE ( CASE WHEN IFNULL(new.purchase_history_redownload_params, '') != '' AND new.purchase_history_id != 0 THEN 100 ELSE ( CASE WHEN new.subscription_store_item_id != 0 AND new.is_subscription AND new.cloud_asset_available THEN 50 ELSE ( CASE WHEN new.sync_redownload_params == 'redownload' AND new.sync_id != 0 THEN 20 ELSE ( CASE WHEN new.sync_redownload_params == 'local' AND new.sync_id != 0 THEN 10 ELSE 0 END) END) END) END) END) END) WHERE item_pid = new.item_pid; END;
CREATE TRIGGER IF NOT EXISTS on_update_item_setRemoteLocationColumn AFTER UPDATE OF match_redownload_params, purchase_history_redownload_params, purchase_history_id, home_sharing_id, sync_redownload_params, subscription_store_item_id, store_saga_id, is_subscription, cloud_asset_available ON item_store BEGIN UPDATE item SET remote_location_id = ( CASE WHEN new.home_sharing_id != 0 THEN 300 ELSE ( CASE WHEN IFNULL(new.match_redownload_params, '') != '' THEN 200 ELSE ( CASE WHEN IFNULL(new.purchase_history_redownload_params, '') != '' AND new.purchase_history_id != 0 THEN 100 ELSE ( CASE WHEN new.subscription_store_item_id != 0 AND new.is_subscription AND new.cloud_asset_available THEN 50 ELSE ( CASE WHEN new.sync_redownload_params == 'redownload' AND new.sync_id != 0 THEN 20 ELSE ( CASE WHEN new.sync_redownload_params == 'local' AND new.sync_id != 0 THEN 10 ELSE 0 END) END) END) END) END) END) WHERE item_pid = new.item_pid; END;
CREATE TRIGGER IF NOT EXISTS on_insert_item_setInMyLibraryColumn AFTER INSERT ON item_store BEGIN UPDATE item SET in_my_library = ( CASE WHEN new.home_sharing_id OR (new.store_saga_id AND new.cloud_in_my_library) OR new.purchase_history_id OR (new.sync_id AND new.sync_in_my_library) OR new.is_ota_purchased THEN 1 ELSE 0 END) WHERE item_pid = new.item_pid; END;
CREATE TRIGGER IF NOT EXISTS on_update_item_setInMyLibraryColumn AFTER UPDATE OF purchase_history_id, home_sharing_id, sync_id, subscription_store_item_id, store_saga_id, is_ota_purchased, sync_in_my_library, cloud_in_my_library ON item_store BEGIN UPDATE item SET in_my_library = ( CASE WHEN new.home_sharing_id OR (new.store_saga_id AND new.cloud_in_my_library) OR new.purchase_history_id OR (new.sync_id AND new.sync_in_my_library) OR new.is_ota_purchased THEN 1 ELSE 0 END) WHERE item_pid = new.item_pid; END;
CREATE TRIGGER IF NOT EXISTS on_remove_source_setPlaybackEndpointType AFTER UPDATE OF playback_endpoint_type ON item_store BEGIN UPDATE item_store SET playback_endpoint_type = (CASE WHEN new.playback_endpoint_type >= 0 THEN new.playback_endpoint_type ELSE (CASE WHEN store_saga_id THEN cloud_playback_endpoint_type WHEN sync_id THEN 0 WHEN purchase_history_id THEN 1 WHEN is_ota_purchased THEN 0 WHEN is_subscription THEN 3 ELSE 0 END) END) WHERE item_pid = new.item_pid; END;
item_new
CREATE TABLE container (container_pid INTEGER PRIMARY KEY, distinguished_kind INTEGER NOT NULL DEFAULT 0, date_created INTEGER NOT NULL DEFAULT 0, date_modified INTEGER NOT NULL DEFAULT 0, date_played INTEGER NOT NULL DEFAULT 0, name TEXT NOT NULL DEFAULT '', name_order INTEGER NOT NULL DEFAULT 0, is_owner INTEGER NOT NULL DEFAULT 1, is_editable INTEGER NOT NULL DEFAULT 0, parent_pid INTEGER NOT NULL DEFAULT 0, contained_media_type INTEGER NOT NULL DEFAULT 0, workout_template_id INTEGER NOT NULL DEFAULT 0, is_hidden INTEGER NOT NULL DEFAULT 0, is_ignorable_itunes_playlist INTEGER NOT NULL DEFAULT 0, description TEXT, play_count_user INTEGER NOT NULL DEFAULT 0, play_count_recent INTEGER NOT NULL DEFAULT 0, liked_state INTEGER NOT NULL DEFAULT 0, smart_evaluation_order INTEGER NOT NULL DEFAULT 0, smart_is_folder INTEGER NOT NULL DEFAULT 0, smart_is_dynamic INTEGER NOT NULL DEFAULT 0, smart_is_filtered INTEGER NOT NULL DEFAULT 0, smart_is_genius INTEGER NOT NULL DEFAULT 0, smart_enabled_only INTEGER NOT NULL DEFAULT 0, smart_is_limited INTEGER NOT NULL DEFAULT 0, smart_limit_kind INTEGER NOT NULL DEFAULT 0, smart_limit_order INTEGER NOT NULL DEFAULT 0, smart_limit_value INTEGER NOT NULL DEFAULT 0, smart_reverse_limit_order INTEGER NOT NULL DEFAULT 0, smart_criteria BLOB, play_order INTEGER NOT NULL DEFAULT 0, is_reversed INTEGER NOT NULL DEFAULT 0, album_field_order INTEGER NOT NULL DEFAULT 0, repeat_mode INTEGER NOT NULL DEFAULT 0, shuffle_items INTEGER NOT NULL DEFAULT 0, has_been_shuffled INTEGER NOT NULL DEFAULT 0, filepath TEXT NOT NULL DEFAULT '', is_saveable INTEGER NOT NULL DEFAULT 0, is_src_remote INTEGER NOT NULL DEFAULT 0, is_ignored_syncing INTEGER NOT NULL DEFAULT 0, container_type INTEGER NOT NULL DEFAULT 0, is_container_type_active_target INTEGER NOT NULL DEFAULT 0, orig_date_modified INTEGER NOT NULL DEFAULT 0, store_cloud_id INTEGER NOT NULL DEFAULT 0, has_cloud_play_order INTEGER NOT NULL DEFAULT 0, cloud_global_id TEXT NOT NULL DEFAULT '', cloud_share_url TEXT NOT NULL DEFAULT '', cloud_is_public INTEGER NOT NULL DEFAULT 0, cloud_is_visible INTEGER NOT NULL DEFAULT 0, cloud_is_subscribed INTEGER NOT NULL DEFAULT 0, cloud_is_curator_playlist INTEGER NOT NULL DEFAULT 0, cloud_author_store_id INTEGER NOT NULL DEFAULT 0, cloud_author_display_name TEXT NOT NULL DEFAULT '', cloud_author_store_url TEXT NOT NULL DEFAULT '', cloud_min_refresh_interval INTEGER NOT NULL DEFAULT 0, cloud_last_update_time INTEGER NOT NULL DEFAULT 0, cloud_user_count INTEGER NOT NULL DEFAULT 0, cloud_global_play_count INTEGER NOT NULL DEFAULT 0, cloud_global_like_count INTEGER NOT NULL DEFAULT 0, keep_local INTEGER NOT NULL DEFAULT 0, keep_local_status INTEGER NOT NULL DEFAULT 0, keep_local_status_reason INTEGER NOT NULL DEFAULT 0, keep_local_constraints INTEGER NOT NULL DEFAULT 0, external_vendor_identifier TEXT NOT NULL DEFAULT '', external_vendor_display_name TEXT NOT NULL DEFAULT '', external_vendor_container_tag TEXT NOT NULL DEFAULT '', is_external_vendor_playlist INTEGER NOT NULL DEFAULT 0, sync_id INTEGER NOT NULL DEFAULT 0, cloud_is_sharing_disabled INTEGER NOT NULL DEFAULT 0, cloud_version_hash TEXT NOT NULL DEFAULT '', date_played_local NOT NULL DEFAULT 0, cloud_author_handle TEXT NOT NULL DEFAULT '', cloud_universal_library_id TEXT NOT NULL DEFAULT '', should_display_index INTEGER NOT NULL DEFAULT 0, date_downloaded INTEGER NOT NULL DEFAULT 0, category_type_mask INTEGER NOT NULL DEFAULT 0, grouping_sort_key TEXT NOT NULL DEFAULT '')
CREATE TABLE container_item_media_type (container_pid INTEGER PRIMARY KEY, media_type INTEGER NOT NULL DEFAULT 0, count INTEGER NOT NULL DEFAULT 0, UNIQUE (container_pid, media_type))
CREATE TABLE container_seed (container_pid INTEGER PRIMARY KEY, item_pid INTEGER NOT NULL DEFAULT 0, seed_order INTEGER NOT NULL DEFAULT 0)
CREATE TABLE _MLDatabaseProperties (key TEXT PRIMARY KEY, value TEXT)
CREATE TABLE db_info (db_pid INTEGER PRIMARY KEY, primary_container_pid INTEGER, media_folder_url TEXT, audio_language INTEGER, subtitle_language INTEGER, genius_cuid TEXT, bib BLOB, rib BLOB)
CREATE TABLE entity_revision (revision INTEGER PRIMARY KEY, entity_pid INTEGER NOT NULL DEFAULT 0, deleted INTEGER NOT NULL DEFAULT 0, class INTEGER NOT NULL DEFAULT 0, revision_type INTEGER NOT NULL DEFAULT 0, UNIQUE (entity_pid, revision_type))
CREATE TABLE genius_config (id INTEGER PRIMARY KEY, version INTEGER UNIQUE, default_num_results INTEGER NOT NULL DEFAULT 0, min_num_results INTEGER NOT NULL DEFAULT 0, data BLOB)
CREATE TABLE genius_metadata (genius_id INTEGER PRIMARY KEY, revision_level INTEGER NOT NULL DEFAULT 0, version INTEGER NOT NULL DEFAULT 0, checksum INTEGER NOT NULL DEFAULT 0, data BLOB)
CREATE TABLE artwork_token (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, artwork_type INTEGER NOT NULL DEFAULT 0, entity_pid INTEGER NOT NULL DEFAULT 0, entity_type INTEGER NOT NULL DEFAULT 0, UNIQUE (artwork_source_type, artwork_type, entity_pid, entity_type))
CREATE TABLE artwork (artwork_token TEXT NOT NULL DEFAULT '', artwork_source_type INTEGER NOT NULL DEFAULT 0, relative_path TEXT NOT NULL DEFAULT '', artwork_type INTEGER NOT NULL DEFAULT 0, interest_data BLOB, UNIQUE (artwork_token, artwork_source_type))
PRAGMA legacy_file_format = 0;
db_info
entity_changes
source
library_property
account
CREATE INDEX IF NOT EXISTS ItemArtistGrouping ON item_artist (grouping_key ASC)
CREATE INDEX IF NOT EXISTS AlbumArtistGrouping ON album_artist (grouping_key ASC)
CREATE INDEX IF NOT EXISTS AlbumGrouping ON album (grouping_key ASC, album_artist_pid ASC, season_number ASC)
CREATE INDEX IF NOT EXISTS ComposerGrouping ON composer (grouping_key ASC)
CREATE INDEX IF NOT EXISTS GenreGrouping ON genre (grouping_key ASC)
CREATE INDEX IF NOT EXISTS AlbumRepresentativeItemPID ON album (representative_item_pid ASC)
CREATE INDEX IF NOT EXISTS ItemArtistRepresentativeItemPID ON item_artist (representative_item_pid ASC)
CREATE INDEX IF NOT EXISTS AlbumArtistRepresentativeItemPID ON album_artist (representative_item_pid ASC)
CREATE INDEX IF NOT EXISTS GenreRepresentativeItemPID ON genre (representative_item_pid ASC)
CREATE INDEX IF NOT EXISTS ComposerRepresentativeItemPID ON composer (representative_item_pid ASC)
CREATE INDEX IF NOT EXISTS ItemArtistKeepLocal ON item_artist (keep_local ASC)
CREATE INDEX IF NOT EXISTS AlbumKeepLocal ON album (keep_local ASC)
CREATE INDEX IF NOT EXISTS AlbumArtistKeepLocal ON album_artist (keep_local ASC)
CREATE INDEX IF NOT EXISTS ContainerKeepLocal ON container (keep_local ASC)
CREATE INDEX IF NOT EXISTS GenreKeepLocal ON genre (keep_local ASC)
CREATE INDEX IF NOT EXISTS ComposerKeepLocal ON composer (keep_local ASC)
CREATE INDEX IF NOT EXISTS ArtworkTokenArtworkToken ON artwork_token (artwork_token ASC)
CREATE INDEX IF NOT EXISTS ArtworkTokenEntityPIDEntityType ON artwork_token (entity_pid ASC, entity_type ASC)
CREATE INDEX IF NOT EXISTS BestArtworkTokenEntityPIDEntityType ON best_artwork_token (entity_pid ASC, entity_type ASC)
CREATE INDEX IF NOT EXISTS ContainerItemItemPid ON container_item (item_pid ASC)
CREATE INDEX IF NOT EXISTS ContainerItemPosition ON container_item (container_pid ASC, position ASC)
CREATE INDEX IF NOT EXISTS CloudKVSBookmarkSync ON cloud_kvs (bookmark_sync_timestamp ASC, bookmark_sync_revision ASC)
CREATE INDEX IF NOT EXISTS ContainerItemPersons ON container_item_person (container_item_pid ASC)
CREATE INDEX IF NOT EXISTS ItemTitleInAlbum ON item (album_pid ASC, media_type ASC)
CREATE INDEX IF NOT EXISTS ItemTitleInAlbumArtist ON item (album_artist_pid ASC, media_type ASC)
CREATE INDEX IF NOT EXISTS ItemTitleInItemArtist ON item (item_artist_pid ASC, media_type ASC)
CREATE INDEX IF NOT EXISTS ItemTitleInComposer ON item (composer_pid ASC, media_type ASC)
CREATE INDEX IF NOT EXISTS ItemTitleInGenre ON item (genre_id ASC, media_type ASC)
CREATE INDEX IF NOT EXISTS ItemTitle ON item (title_order ASC, item_artist_order ASC, album_order ASC, album_pid ASC, disc_number ASC, track_number ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, title_order_section ASC, in_my_library ASC) WHERE (in_my_library OR title_order)
CREATE INDEX IF NOT EXISTS ItemAlbum ON item (album_order ASC, album_pid ASC, disc_number ASC, track_number ASC, title_order ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, album_order_section ASC, in_my_library ASC) WHERE (in_my_library OR album_order)
CREATE INDEX IF NOT EXISTS ItemAlbumByAlbumArtist ON item (album_artist_order ASC, album_artist_pid ASC, album_order ASC, album_pid ASC, disc_number ASC, track_number ASC, title_order ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, album_artist_order_section ASC, in_my_library ASC, is_compilation ASC) WHERE ((in_my_library OR album_order) OR is_compilation)
CREATE INDEX IF NOT EXISTS ItemItemArtist ON item (item_artist_order ASC, item_artist_pid ASC, album_pid ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, item_artist_order_section ASC, in_my_library ASC) WHERE (in_my_library OR item_artist_order)
CREATE INDEX IF NOT EXISTS ItemAlbumArtist ON item (album_artist_order ASC, album_artist_pid ASC, album_pid ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, album_artist_order_section ASC, in_my_library ASC, is_compilation ASC) WHERE ((in_my_library OR album_artist_order) OR is_compilation)
CREATE INDEX IF NOT EXISTS ItemComposer ON item (composer_order ASC, composer_pid ASC, album_order ASC, title_order ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, composer_order_section ASC, in_my_library ASC) WHERE (in_my_library OR composer_order)
CREATE INDEX IF NOT EXISTS ItemGenre ON item (genre_order ASC, genre_id ASC, media_type ASC, remote_location_id ASC, base_location_id ASC, genre_order_section ASC, in_my_library ASC) WHERE (in_my_library OR genre_order)
CREATE INDEX IF NOT EXISTS ItemSeries ON item (series_name_order ASC, album_order ASC, episode_sort_id ASC, title_order ASC, media_type ASC, in_my_library ASC) WHERE in_my_library
CREATE INDEX IF NOT EXISTS ItemDateCreated ON item (date_added DESC, album_order ASC, album_pid ASC, disc_number ASC, track_number ASC, title_order ASC, media_type ASC, remote_location_id ASC, base_location_id ASC) WHERE in_my_library
CREATE INDEX IF NOT EXISTS ItemExtraGeniusID ON item_extra (genius_id ASC);
CREATE INDEX IF NOT EXISTS ItemStoreSagaID ON item_store (store_saga_id ASC);
CREATE INDEX IF NOT EXISTS ItemStoreItemID ON item_store (store_item_id ASC);
CREATE INDEX IF NOT EXISTS ItemStoreSubscriptionStoreItemID ON item_store (subscription_store_item_id ASC);
CREATE INDEX IF NOT EXISTS ItemStatsPlayCount ON item_stats (play_count_user ASC);
CREATE INDEX IF NOT EXISTS ItemStatsPlayDate ON item_stats (date_played ASC);
CREATE INDEX IF NOT EXISTS ItemStatsUserRating ON item_stats (user_rating ASC);
CREATE INDEX IF NOT EXISTS ItemStatsRememberBookmark ON item_stats (remember_bookmark ASC);
CREATE INDEX IF NOT EXISTS ItemKeepLocal ON item (keep_local ASC)
CREATE INDEX IF NOT EXISTS ItemKVSKey ON item_kvs (key ASC)
CREATE INDEX IF NOT EXISTS CloudKVSBookkeeperItemLookup ON cloud_kvs (bookmark_sync_timestamp ASC, bookmark_sync_revision ASC)
PRAGMA user_version;
SELECT value FROM _MLDatabaseProperties WHERE key = 'OrderingLanguage';
SELECT name FROM sqlite_master WHERE type='index' AND tbl_name IN (%s);
sqlite_autoindex_
DROP INDEX %@;
SenTestCase
ML3MusicLibraryUPPServiceKey
SBCPlaybackPositionDomain
Class getSBCPlaybackPositionDomainClass(void)_block_invoke
ML3MusicLibraryUbiquitousDatabase.m
Unable to find class %s
void *StoreBookkeeperClientLibrary(void)
SBCPlaybackPositionService
Class getSBCPlaybackPositionServiceClass(void)_block_invoke
SBCPlaybackPositionEntity
Class getSBCPlaybackPositionEntityClass(void)_block_invoke
Values and properties arrays are not equal length.
no table for %@ / %@
no column for %@ / %@
v32@?0@"NSString"8Q16^B24
no pidColumn for %@ / %@
SELECT 1 FROM %@ WHERE %@ = ? LIMIT 1;
UPDATE %@ SET %@ WHERE %@ = ?;
genius_cuid
primary_container_pid
{?=qq}
errorDescription
errorCode
lastPackage
header
syncOperation
error
Header
Error
SyncOperation
apple_id
alt_dsid
%@ LEFT OUTER JOIN container_item_person ON %@.ROWID = container_item_person.container_item_person_pid
There is more than one child for this code, please use childElementsForCode. ElementCode=
numberOfChildren=
%@ LEFT OUTER JOIN booklet ON %@.ROWID = booklet.booklet_pid
Duplicate Video Detected
The media library service has detected that a duplicate video has been imported.
Please file a radar now using the button below.
[This dialog is shown for internal users only.]
File Radar
tap-to-radar
BundleID
com.apple.music
Title
TTR: Duplicate Videos Detected
ComponentID
638696
ComponentName
MediaLibrary
ComponentVersion
Classification
Serious Bug
ExtensionIdentifiers
com.apple.MediaPlayer.DiagnosticExtension
Reproducibility
Sometimes
v16@?0@"MSVSystemDialogResponse"8
playlists
INSERT OR REPLACE INTO album (%@) SELECT %@ FROM album WHERE album_pid=?
UPDATE album SET album_artist_pid=?, representative_item_pid=? WHERE album_pid=?
UPDATE item SET album_pid=? WHERE item_pid IN (%@)
ML3RemovePlaylistsOperation requires a track source attribute
DELETE FROM container
UPDATE container set %@=0
DELETE FROM container WHERE container_pid
UPDATE container set %@=0 WHERE container_pid
totalPackages
syncType
Reset
Delta
playlist
playlistId
curatorName
versionHash
lastModifiedDate
en_US_POSIX
yyyy-MM-dd'T'HH:mm:ssZZZZZ
childrenIds
ML3StoreItemPlaylistData.m
booklet_pid
operationType
multiverseId
Update
Delete
%@ LEFT OUTER JOIN person ON %@.ROWID = person.person_pid
%@ is invalid. Use %@.
Books
DCIM
Downloads
FactoryLogs
MediaAnalysis
PhotoData
Photos
Radio
Recordings
iTunes_Control/iTunes/MediaLibrary.sqlitedb
CloudAssets/SharedCache
tmp.
mobile
IPHONE_SHARED_RESOURCES_DIRECTORY
CFFIXED_USER_HOME
ML3ImportOperation.mm
import
import.writer
import.library
You must provide %@ with a database import. Use %@ instead.
writer:             %p
library:            %@
import data size:   %lu
success:            %@
error:              %@
cancelled:          %@
suspended:          %@
ML3DatabaseNaturalStatementSQLKey
ML3DatabaseNaturalStatementParametersKey
mediaObjectType
mediaType
accountId
sagaId
purchaseHistoryId
libraryIdentifiers
Series
MediaItem
Playlist
DigitalBooklet
ITunesUVideo
Index (%ld) out of bounds (%lu)
com.apple.ML3QueryResultSet.coalescing
com.apple.ML3QueryResultSet
v28@?0q8C16^B20
ML3QueryResultSet.mm
Updateable query has no ordering! query: %@
SELECT %@ FROM %@ %@ WHERE %@.ROWID = ?
invalid parameter.  completion block must be specified.
v32@?0@8Q16^B24
updated results
v24@?0q8^B16
v24@?0r^q8Q16
B16@?0@"ML3DatabaseConnection"8
MLTimeQueryOperations
isSourceExternal
ML3LibraryNotificationManager.m
com.apple.MusicLibrary.%@
B32@?0@"NSNotification"8Q16^B24
ML3MultiUserErrorDomain
direction
collation
ascending
descending
%@(%@ %@)
ML3SpotlightMatch
 COLLATE 
track_items
YYYY-MM-dd
album-parent
albumArtistId
albumArtistName
v24@?0@"ICStorePlatformResponse"8@"NSError"16
artistId
collectionId
collectionName
isCompilation
isMasteredForItunes
ml3td_radio_station_id
ml3td_advertisement_unique_id
ml3td_advertisement_type
showComposer
shouldBookmarkPlayPosition
episodeSeasonNumber
wasAvailableForSubs
episodeDisplayLabel
hasLyrics
hasTimeSyncedLyrics
videoSubType
screenshots
releaseDate
offers
subscription
genreNames
albumArtwork
contentRatingsBySystem
riaa
Explicit
Clean
advisories
%@|%@|%ld|%@
store_collection_id=%lld
store_item_id=%lld
episode
episodebonus
seasonbonus
tvtrailer
tvextra
tvinterview
assets
children
artistName
ICStorePlatformRequest
Class getICStorePlatformRequestClass(void)_block_invoke
ML3StoreItemTrackData.m
void *iTunesCloudLibrary(void)
ICStoreRequestContext
Class getICStoreRequestContextClass(void)_block_invoke
ICUserIdentity
Class getICUserIdentityClass(void)_block_invoke
NSString *getICStorePlatformAudioTraitSpatial(void)
ICStorePlatformAudioTraitSpatial
NSString *getICStorePlatformAudioTraitLossless(void)
ICStorePlatformAudioTraitLossless
NSString *getICStorePlatformAudioTraitHiResLossless(void)
ICStorePlatformAudioTraitHiResLossless
NSString *getICStorePlatformAudioTraitLossyStereo(void)
ICStorePlatformAudioTraitLossyStereo
NSString *getICStorePlatformAudioTraitAtmos(void)
ICStorePlatformAudioTraitAtmos
NSString *getICStorePlatformAudioTraitSurround(void)
ICStorePlatformAudioTraitSurround
ICStoreArtworkInfo
Class getICStoreArtworkInfoClass(void)_block_invoke
NSString *getICStorePlatformMetadataKindAlbum(void)
ICStorePlatformMetadataKindAlbum
NSString *getICStorePlatformMetadataKindArtist(void)
ICStorePlatformMetadataKindArtist
NSString *getICStorePlatformMetadataKindPlaylist(void)
ICStorePlatformMetadataKindPlaylist
NSString *getICStorePlatformMetadataKindTVSeason(void)
ICStorePlatformMetadataKindTVSeason
ICStorePlatformMetadata
Class getICStorePlatformMetadataClass(void)_block_invoke
NSString *getICStorePlatformMetadataKindSong(void)
ICStorePlatformMetadataKindSong
NSString *getICStorePlatformMetadataKindMusicVideo(void)
ICStorePlatformMetadataKindMusicVideo
NSString *getICStorePlatformMetadataKindUploadedAudio(void)
ICStorePlatformMetadataKindUploadedAudio
NSString *getICStorePlatformMetadataKindUploadedVideo(void)
ICStorePlatformMetadataKindUploadedVideo
NSString *getICStorePlatformMetadataKindTVEpisode(void)
ICStorePlatformMetadataKindTVEpisode
NSString *getICStorePlatformMetadataKindMovie(void)
ICStorePlatformMetadataKindMovie
NSString *getICStoreArtworkInfoCropStyleBoundedBox(void)
ICStoreArtworkInfoCropStyleBoundedBox
NSString *getICStoreArtworkInfoCropStyleSquareCenterCrop(void)
ICStoreArtworkInfoCropStyleSquareCenterCrop
NSString *getICStoreArtworkInfoImageFormatJPEG(void)
ICStoreArtworkInfoImageFormatJPEG
UPDATE item_store SET cloud_in_my_library = 1 WHERE item_pid
UPDATE item SET in_my_library = 1 WHERE item_pid
QUICKTIME_MOVIE_KIND
QUICKTIME_MOVIE_URL_KIND
PROTECTED_VIDEO_KIND
UNPROTECTED_VIDEO_KIND
PURCHASED_VIDEO_KIND
MATCHED_VIDEO_KIND
MPEG4_AUDIO_FILE_KIND
MPEG4_PROTECTED_AUDIO_FILE_KIND
MPEG4_PURCHASED_AUDIO_FILE_KIND
MPEG4_AUDIO_STREAM_KIND
MPEG4_PROTECTED_AUDIO_STREAM_KIND
AAC_AUDIO_FILE_KIND
AAC_PROTECTED_AUDIO_FILE_KIND
AAC_PURCHASED_AUDIO_FILE_KIND
AAC_MATCHED_AUDIO_FILE_KIND
AAC_PROTECTED_MASTERED_AUDIO_FILE_KIND
AAC_PURCHASED_MASTERED_AUDIO_FILE_KIND
AAC_MATCHED_MASTERED_AUDIO_FILE_KIND
AAC_AUDIO_STREAM_KIND
AAC_PROTECTED_AUDIO_STREAM_KIND
AAC_PURCHASED_AUDIO_STREAM_KIND
AAC_MATCHED_AUDIO_STREAM_KIND
AAC_PROTECTED_MASTERED_AUDIO_STREAM_KIND
AAC_PURCHASED_MASTERED_AUDIO_STREAM_KIND
AAC_MATCHED_MASTERED_AUDIO_STREAM_KIND
LOSSLESS_AUDIO_FILE_KIND
LOSSLESS_PROTECTED_AUDIO_FILE_KIND
LOSSLESS_AUDIO_STREAM_KIND
LOSSLESS_PROTECTED_AUDIO_STREAM_KIND
RINGTONE_AUDIO_FILE_KIND
AUDIBLE_FILE_KIND
INTERNET_AUDIO_STREAM_KIND
INTERNET_AUDIO_FILE_KIND
MP3_INTERNET_AUDIO_STREAM_KIND
MPEG4_INTERNET_AUDIO_STREAM_KIND
AAC_INTERNET_AUDIO_STREAM_KIND
HEAAC_INTERNET_AUDIO_STREAM_KIND
MP3_AUDIO_FILE_KIND
MP3_AUDIO_STREAM_KIND
AIFF_AUDIO_FILE_KIND
WAV_AUDIO_FILE_KIND
SD2_AUDIO_FILE_KIND
AIFF_AUDIO_STREAM_KIND
WAV_AUDIO_STREAM_KIND
BOOK_FILE_KIND
BOOK_PURCHASED_FILE_KIND
BOOK_PROTECTED_FILE_KIND
ITUNES_EXTRA_KIND
ITUNES_LP_KIND
PDF_FILE_KIND
PLAYLIST_URL_KIND
IPHONE_APPLICATION_KIND
UNIVERSAL_APPLICATION_KIND
IPAD_APPLICATION_KIND
IPOD_GAME_KIND
WMA_AUDIO_FILE_KIND
CAF_AUDIO_FILE_KIND
QUICKTIME_MOVIE_KIND_OLD
QUICKTIME_MOVIE_URL_KIND_OLD
PROTECTED_VIDEO_KIND_OLD
UNPROTECTED_VIDEO_KIND_OLD
PURCHASED_VIDEO_KIND_OLD
MATCHED_VIDEO_KIND_OLD
MPEG4_AUDIO_FILE_KIND_OLD
MPEG4_PROTECTED_AUDIO_FILE_KIND_OLD
MPEG4_PURCHASED_AUDIO_FILE_KIND_OLD
MPEG4_AUDIO_STREAM_KIND_OLD
MPEG4_PROTECTED_AUDIO_STREAM_KIND_OLD
AAC_AUDIO_FILE_KIND_OLD
AAC_PROTECTED_AUDIO_FILE_KIND_OLD
AAC_PURCHASED_AUDIO_FILE_KIND_OLD
AAC_MATCHED_AUDIO_FILE_KIND_OLD
AAC_AUDIO_STREAM_KIND_OLD
AAC_PROTECTED_AUDIO_STREAM_KIND_OLD
AAC_PURCHASED_AUDIO_STREAM_KIND_OLD
AAC_MATCHED_AUDIO_STREAM_KIND_OLD
LOSSLESS_AUDIO_FILE_KIND_OLD
LOSSLESS_PROTECTED_AUDIO_FILE_KIND_OLD
LOSSLESS_AUDIO_STREAM_KIND_OLD
LOSSLESS_PROTECTED_AUDIO_STREAM_KIND_OLD
RINGTONE_AUDIO_FILE_KIND_OLD
AUDIBLE_FILE_KIND_OLD
INTERNET_AUDIO_STREAM_KIND_OLD
INTERNET_AUDIO_FILE_KIND_OLD
MP3_INTERNET_AUDIO_STREAM_KIND_OLD
MPEG4_INTERNET_AUDIO_STREAM_KIND_OLD
AAC_INTERNET_AUDIO_STREAM_KIND_OLD
HEAAC_INTERNET_AUDIO_STREAM_KIND_OLD
MP3_AUDIO_FILE_KIND_OLD
MP3_AUDIO_STREAM_KIND_OLD
AIFF_AUDIO_FILE_KIND_OLD
WAV_AUDIO_FILE_KIND_OLD
SD2_AUDIO_FILE_KIND_OLD
AIFF_AUDIO_STREAM_KIND_OLD
WAV_AUDIO_STREAM_KIND_OLD
BOOK_FILE_KIND_OLD
BOOK_PURCHASED_FILE_KIND_OLD
BOOK_PROTECTED_FILE_KIND_OLD
ITUNES_EXTRA_KIND_OLD
ITUNES_LP_KIND_OLD
PDF_FILE_KIND_OLD
PLAYLIST_URL_KIND_OLD
IPHONE_APPLICATION_KIND_OLD
UNIVERSAL_APPLICATION_KIND_OLD
IPAD_APPLICATION_KIND_OLD
IPOD_GAME_KIND_OLD
WMA_AUDIO_FILE_KIND_OLD
CAF_AUDIO_FILE_KIND_OLD
You must provide %@ with an XPC connection. Use initWithConnection: instead.
<%@: %p %@ [%lld]>
MLWriterErrorDomain
com.apple.ML3MediaLibraryWriter
MediaLibrary Daemon State at %@
Active Transactions:
v32@?0@"NSUUID"8@"ML3ActiveTransaction"16^B24
(None)
Enqueued concurrent operations:
Enqueued serial operations:
Could not obtain writer connection for database.
Could not begin transaction. %@
Database Error: %@
Attempted to execute update without a valid transaction (transaction ID = %@). You must start a transaction first before executing an update.
Attempted to execute illegal update: %@ (%d)
action
ML3MediaLibraryWriter.m
Authorizer failure should have caused executeUpdate: to return NO
Database error while fetching rows: %@
Attempted to execute query without a valid transaction (transaction ID = %@). You must be within an existing transaction first before executing a query.
Attempted to execute illegal query: %@ (%d)
Unable to end transaction with ID %@.
A connection with the transaction ID %@ could not be found.
No operation exists for operation type: %lu
The media library service cancelled all active database transactions.
MediaLibraryWatchdogDisabled
<Unknown>
Media library database transaction was terminated due to inactivity.
MLCloudAccountID
MLLastKnownActiveLockerAccountDSID
MLSagaLastGeniusUpdate
MLCloudLastPlayDataUpdate
MLCloudLastPlaylistPlayDataUpdate
MLCloudLibraryCUID
MLCloudLibraryTroveID
MLCloudDatabaseUserVersion
MLCloudAccountAddToPlaylistBehavior
MLCloudLibraryPrefersToMerge
MLStorefrontID
MLCloudDatabaseRevision
MLCloudLastLibraryUpdate
MLCloudLastSubscribedContainersUpdate
MLCloudDatabasePreferredVideoQuality
{ -empty- }
count[%@] %@
v28@?0I8Q12^B20
%@ types: %@
SELECT name, name_order FROM sort_map
SELECT name_order FROM sort_map WHERE ML3SearchStringMatch(?, name)
ML3SpotlightMatch(
ML3SpotlightMatch(%@, %@, %@, %@)
v16@?0^v8
item_search.search_series
com.apple.ml.SpotlightNameCache
com.apple.ml.SpotlightNameCacheAccess
void ML3SpotlightMatchingNameCacheTimer(ML3SpotlightMatchingNameCache *)
ML3SpotlightQuery.mm
_MLChangeObserver <%p> - Observer for %@[%d]
Processing shared database path change
v24@?0@"_MLChangeObserver"8^B16
com.apple.medialibraryd.multi-user-resources-service.serialQueue
com.apple.medialibraryd.multi-user-resources-service.workQueue
com.apple.medialibraryd.multi-user-resources-service.calloutQueue
MLTransactionContextPathKey
MLTransactionContextPriorityLevelKey
MLTransactionContextOptionsKey
MLTransactionContextPrivacyContextKey
SELECT item_store.sync_id FROM item JOIN item_store USING (item_pid) WHERE item.ROWID = ?
SELECT item_store.sync_id, item_extra.title, item.media_type, item_store.account_id, item_store.store_item_id, item_store.store_saga_id, item_store.purchase_history_id, item_store.cloud_universal_library_id FROM item JOIN item_store USING (item_pid) JOIN item_extra USING (item_pid) WHERE item.ROWID = ?
SELECT container.name, container.store_cloud_id, container.cloud_universal_library_id FROM container WHERE container.ROWID = ?
SELECT ROWID FROM %@ WHERE ROWID = ?
SELECT ROWID FROM %@ WHERE ROWID > ? LIMIT 1
MLUserDatabasePathDidChangeNotification
octest
MusicLibrary.framework
isManagingResourceForSingleUserWithAccountInfoKey
implementationKey
ML3MusicLibraryResourcesManager.m
Daemon multi-users resources manager context must specify both account info provider and a media library account change observer
Non-daemon multi-users resources manager context must specify the resources service
No implementation of ML3MusicLibraryResourcesManager supports the current configuration
ML3MatchImportOperation.mm
Attempted to start match import operation without DAAP payload data.
persistent-id
cloud-id
<ML3SetCloudIDTrackImportItem 
 persistentID=
, cloudID=
<ML3SetCloudIDContainerImportItem 
com.apple.medialibraryd.xpc
MLMediaLibraryWillDeleteDatabaseNotification
MLMediaLibraryDeletedDatabaseNotification
MLMediaLibraryServiceDidTerminateTransactionNotification
MLDatabaseOperationOptionDatabasePathKey
MLDatabaseOperationOptionPriorityLevelKey
MLDatabaseOperationOptionTransactionIdentifierKey
MLDatabaseOperationOptionReadOnlyKey
MLDatabaseOperationOptionEnqueueSerially
MLImportOperationOptionPreferredVideoQualityKey
MLImportOperationOptionHSBasePlaylistIdKey
MLImportOperationOptionIsResetSyncKey
MLImportOperationOptionIsSagaEnabledKey
MLImportOperationOptionSyncAnchorKey
MLImportOperationOptionStoreAccountIdKey
MLDatabaseQueryOptionLimitPropertyKey
MLDatabaseQueryOptionLimitValueKey
MLDatabaseQueryOptionRangeBeginKey
MLDatabaseQueryOptionCountKey
MLDatabaseOperationAttributePersistentIDsArrayKey
MLDatabaseOperationAttributeEntityURLsArrayKey
MLDatabaseOperationAttributeEntityClassKey
MLDatabaseOperationAttributeValuesKey
MLDatabaseOperationAttributePropertiesKey
MLDatabaseOperationAttributeStatementsKey
MLDatabaseOperationAttributeTrackSourceKey
MLDatabaseOperationAttributeBundleIDKey
MLDatabaseOperationAttributeArtworkTokenKey
MLDatabaseOperationAttributeArtworkInterestDataKey
MLDatabaseOperationAttributeTestWaitTimeInterval
MLDatabaseOperationAttributeDownloadedAssetsListKey
MLDatabaseOperationAttributeDownloadedAssetPersistentIdKey
MLDatabaseOperationAttributeDownloadedAssetEntityTypeKey
MLDatabaseOperationAttributeDownloadedAssetTrackPathKey
MLDatabaseOperationAttributeDownloadedAssetProtectionTypeKey
MLDatabaseOperationAttributeDownloadedAssetArtworkPathKey
MLDatabaseOperationAttributeDownloadedAssetGeniusDataPathKey
MLDatabaseOperationAttributeDownloadedAssetLyricsPathKey
MLDatabaseOperationAttributeDownloadedAssetTrackPropertiesKey
MLDatabaseOperationAttributeDownloadSourceContainerIDKey
MLMediaLibraryServiceOptionLoggingLevelKey
MLTerminatedTransactionIdentifierKey
No lock
Database exchange
Database backup
Database restore
MLTool
com.apple.MusicLibrary.MLMediaLibraryService
com.apple.MusicLibrary.MLMediaLibraryServiceReplyQueue
Could not validate database at path %@.
Could not attempt recovery at path: %@
Failed to obtain service proxy to perform integrity check. err=%@
Could not perform diagnostic
v24@?0@"NSString"8@"NSError"16
Could not recreate database at path %@.
Could not begin transaction for database at path %@.
Could not execute update on transaction %@.
Could not execute query on transaction %@.
Could not end transaction %@.
Could not execute database operation on database at path %@.
Could not set options on media library service.
Could not perform import for database at path %@.
v28@?0B8@"NSError"12@"NSData"20
Could not cancel import operation.
Could not lock database.
Could not unlock database.
Could not update spotlight index.
Could not update spotlight index for identifiers: %@
Could not update siri index for all libraries
Could not perform maintenance task for database at path %@
Could not retrieve XPC listener endpoint for MediaLibraryResourcesService - Try %ld of %ld
v24@?0@"NSXPCListenerEndpoint"8@"NSError"16
ML3ServiceConnectionBug
currentThread=%@ last connection error=%@
MLMediaLibraryService.m
Unable to retrieve XPC listener endpoint for MediaLibraryResourcesService [fatal error after %ld retries] - error=%@
Could not retrieve XPC listener endpoint for ClientImportService - Try %ld of %ld
com.apple.medialibraryd.multi-user-deamon-resources-serial-queue
com.apple.medialibraryd.multi-user-deamon-resources-callout-queue
com.apple.medialibraryd.multi-user-deamon-resources-account-change-queue
final and current dsid are identical: %@
final (%@) and current (%@) dsid are different
Unable to open file '%@'
No SQL statements found in %@
Error executing '%@'
DROP TABLE sort_map
/tmp/ML3UnitTests
%@_%@
library.sqlitedb
ML3MusicLibrary+MLUnitTestingAdditions.m
Could not prepare for test '%@/%@' database, unable to load setupSQLFilename = '%@' - no such file in bundle %@
Could not prepare for test '%@/%@' database with setupSQLPath = %@, error = %@
v16@?0@"ML3MusicLibrary"8
mlmediatype
NSString *executableSQLFromUnitTestFileForString(NSString *__strong)
sql contains invalid text at '%@'
MLSiriIndexValidityRevision
%@-%ld-%lld
v24@?0@"KVDatasetStream"8@"NSError"16
v16@?0@"NSString"8
KVDonator
Class getKVDonatorClass(void)_block_invoke
ML3UpdateSiriIndexOperation.m
void *KoaLibrary(void)
NSString *getKVOriginAppIdMediaPlayer(void)
KVOriginAppIdMediaPlayer
KVIncrementalDatasetStream
Class getKVIncrementalDatasetStreamClass(void)_block_invoke
KVFullDatasetStream
Class getKVFullDatasetStreamClass(void)_block_invoke
KVMediaItemBuilder
Class getKVMediaItemBuilderClass(void)_block_invoke
q24@?0@"NSNumber"8@"NSNumber"16
MLJaliscoAccountID
MLJaliscoLastGeniusUpdate
MLJaliscoLastSupportedMediaKinds
MLJaliscoLastExcludedMediaKinds
MLJaliscoHasCloudGeniusData
GeniusUserEnabled
MLJaliscoDatabaseRevision
MLJaliscoLastLibraryUpdate
movpkg
m4bpkg
blob
LastCorruptionRestoreAttempt
NSSQLiteErrorDomain
ML3VirtualTable.mm
databaseTable != nil
virtual_%@
%@_module_%u
CREATE VIRTUAL TABLE TEMP.%@ USING %@
col%lu
int _ML3VirtualTableOpen(sqlite3_vtab *, sqlite3_vtab_cursor **)
Virtual table %@ did not provide a database table structure.
Operation cancelled.
<%@ %p operationType = %@, attributes = %@>
Missing attributes for operation type: %@
Operation does not have library reference.
Operation does not have a transaction set.
MLDatabaseOperationTypeSetValuesForProperties
MLDatabaseOperationTypeBulkStatementExecution
MLDatabaseOperationTypeRemoveTracks
MLDatabaseOperationTypeUpdateSpotlightIndex
MLDatabaseOperationTypeUpdateArtworkInterestData
MLDatabaseOperationTypeRemovePlaylists
ML3ProcessDownloadedAssetsOperation
MLDatabaseOperationTypeUpdateSiriIndex
<Unknown Write Operation Type>
ML3SystemErrorDomain
com.apple.videos
com.apple.MobileStore
com.apple.AppStore
com.apple.tv
Failed to chown file %s. Err %d.
Failed to get uid for user 'mobile'. Err %d.
Failed to get permissions info on file %s.
Database Validation Bug
wrong permisions
filePath
chownError
statError
errorMsg
v32@?0q8Q16^B24
SELECT ROWID,%@ FROM container WHERE %@=?
SELECT COUNT() FROM sort_map
MLResetCollectionsOnNextImport
UPDATE album SET representative_item_pid=0
UPDATE album_artist SET representative_item_pid=0
UPDATE item_artist SET representative_item_pid=0
UPDATE item_store SET %@=0
UPDATE container SET %@=0
SELECT 1 FROM sort_map WHERE name_order IS NULL
DELETE FROM container_item_person WHERE ROWID
UPDATE item set keep_local=0 WHERE keep_local<1 AND item_pid
DELETE FROM booklet WHERE ROWID
UPDATE item SET keep_local = ? WHERE ROWID
SELECT cloud_is_subscribed FROM container WHERE container_pid=%lld
UPDATE container SET keep_local = ? WHERE ROWID
B8@?0
SELECT value FROM _MLDatabaseProperties WHERE key = 'MLCloudAccountID'
UPDATE container SET parent_pid = ? WHERE container_pid = ?
UPDATE album SET album_year = (SELECT IFNULL(MAX(year), 0) FROM item_extra JOIN item USING(item_pid) WHERE item.album_pid = ?) WHERE album_pid = ?
UPDATE album SET contains_classical_work=(CASE WHEN EXISTS (SELECT album_pid FROM item JOIN item_extra USING (item_pid) WHERE album_pid=? AND classical_work!='' OR (show_composer=1 AND grouping!='')) THEN 1 ELSE 0 END) WHERE album_pid=?
UPDATE album SET all_compilations=(SELECT IFNULL(MIN(is_compilation), 0) FROM item WHERE item.album_pid = ?) WHERE album_pid = ?
DELETE FROM _MLDatabaseProperties WHERE key = 'MLResetCollectionsOnNextImport'
com.apple.MusicLibrary.importFinished-%@
DuplicateVideosAlert
SELECT store_item_id, title, media_type FROM item JOIN item_store USING(item_pid) JOIN item_extra USING(item_pid) WHERE store_item_id IN (SELECT store_item_id FROM item JOIN item_store USING(item_pid) GROUP BY store_item_id HAVING COUNT() > 1 AND store_item_id !=0 AND media_type IN (512,2048)) AND is_ota_purchased = 1 AND purchase_history_id = 0
%@ | %@ | %@
bool ML3ImportSession::_prepareTrackSortData(ML3ImportItemRef)
ML3ImportSession.mm
invalid track pid
INSERT OR REPLACE INTO artwork_token (artwork_token,artwork_source_type,artwork_type,entity_pid,entity_type)
DELETE FROM artwork_token WHERE artwork_source_type = ? AND artwork_type = ? AND entity_pid = ? AND entity_type = ?
SELECT booklet_pid FROM booklet WHERE item_pid = ?
matched
REPLACE INTO entity_revision (entity_pid, deleted, class) VALUES (?, ?, ?)
SELECT name_order, name_section FROM sort_map WHERE name = ?
SELECT item_artist_pid FROM item WHERE ROWID = ?
SELECT item_artist, sort_item_artist, series_name, sort_series_name, representative_item_pid, store_id, grouping_key, sync_id, classical_experience_available FROM item_artist WHERE item_artist_pid=?
UPDATE item_artist SET representative_item_pid=0 WHERE item_artist_pid=?
UPDATE item_artist SET item_artist = ? WHERE ROWID = ?
UPDATE item_artist SET sort_item_artist = ? WHERE ROWID = ?
UPDATE item SET item_artist_order=?, item_artist_order_section=? WHERE item_artist_pid=?
UPDATE item_artist SET series_name = ? WHERE ROWID = ?
UPDATE item_artist SET sort_series_name = ? WHERE ROWID = ?
UPDATE item SET series_name_order=?, series_name_order_section=? WHERE item_artist_pid=?
UPDATE item_artist SET store_id = ? WHERE ROWID = ?
UPDATE item_artist SET sync_id = ? WHERE ROWID = ?
UPDATE item_artist SET classical_experience_available = ? WHERE ROWID = ?
SELECT album_artist_pid FROM item WHERE ROWID = ?
SELECT album_artist, sort_album_artist, representative_item_pid, store_id, grouping_key, sync_id, cloud_universal_library_id, classical_experience_available FROM album_artist WHERE album_artist_pid=?
UPDATE album_artist SET representative_item_pid=0 WHERE album_artist_pid=?
UPDATE album_artist SET album_artist = ? WHERE ROWID = ?
UPDATE album_artist SET sort_album_artist = ? WHERE ROWID = ?
UPDATE item SET album_artist_order=?, album_artist_order_section=? WHERE album_artist_pid=?
UPDATE album_artist SET store_id = ? WHERE ROWID = ?
UPDATE album_artist SET sync_id = ? WHERE ROWID = ?
UPDATE album_artist SET cloud_universal_library_id = ? WHERE ROWID = ?
UPDATE album_artist SET classical_experience_available = ? WHERE ROWID = ?
SELECT album_pid FROM item WHERE ROWID = ?
SELECT album, sort_album, feed_url, user_rating, liked_state, all_compilations, season_number, representative_item_pid, grouping_key, album_year, contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available FROM album WHERE album_pid=?
UPDATE album SET representative_item_pid=0 WHERE album_pid=?
UPDATE album SET album = ? WHERE ROWID = ?
UPDATE album SET sort_album = ? WHERE ROWID = ?
UPDATE item SET album_order=?, album_order_section=? WHERE album_pid=?
UPDATE album SET user_rating = ? WHERE ROWID = ?
UPDATE album SET user_rating_is_derived = ? WHERE ROWID = ?
UPDATE album SET liked_state = ? WHERE ROWID = ?
UPDATE album SET sync_id = ? WHERE ROWID = ?
UPDATE album SET classical_experience_available = ? WHERE ROWID = ?
SELECT composer_pid FROM item WHERE ROWID = ?
SELECT composer, sort_composer, representative_item_pid, grouping_key, sync_id FROM composer WHERE composer_pid=?
UPDATE composer SET representative_item_pid=0 WHERE composer_pid=?
UPDATE composer SET sort_composer = ? WHERE ROWID = ?
UPDATE composer SET sync_id = ? WHERE ROWID = ?
SELECT genre, ROWID, sync_id FROM genre WHERE (ROWID=? OR sync_id=?) OR grouping_key = (?)
SELECT genre, ROWID, sync_id FROM genre WHERE grouping_key = (?)
SELECT genre, ROWID, sync_id FROM genre WHERE (ROWID=? OR sync_id=?)
UPDATE genre SET genre = ? WHERE ROWID = ?
UPDATE genre SET sync_id = ? WHERE ROWID = ?
SELECT album, sort_album, feed_url, rowid, grouping_key, album_artist_pid, season_number, all_compilations, user_rating, liked_state, album_year, (CASE WHEN season_number > 0 THEN season_number ELSE IFNULL(sort_album, album) END), contains_classical_work, user_rating_is_derived, sync_id, classical_experience_available FROM album 
WHERE 
(ROWID=? OR sync_id=?) OR
(grouping_key IN (?) AND album_artist_pid = ?)
(grouping_key IS NULL AND album_artist_pid = ?)
SELECT item_artist, sort_item_artist, series_name, sort_series_name, rowid, store_id, IFNULL(sort_item_artist, ML3SortString(item_artist)), IFNULL(IFNULL(sort_series_name, ML3SortString(series_name)), IFNULL(sort_item_artist, ML3SortString(item_artist))), sync_id, classical_experience_available FROM item_artist 
WHERE (ROWID = ? OR sync_id = ?) OR grouping_key = ?
WHERE(ROWID = ? OR sync_id = ?)
WHERE grouping_key = ?
SELECT album_artist, sort_album_artist, rowid, store_id, IFNULL(sort_album_artist, ML3SortString(album_artist)), sync_id, cloud_universal_library_id, classical_experience_available FROM album_artist 
WHERE (ROWID = ? OR sync_id = ?)
SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE (ROWID = ? OR sync_id = ?) OR grouping_key = ?
SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE grouping_key = (?)
SELECT composer, sort_composer, ROWID, IFNULL(sort_composer, ML3SortString(composer)), sync_id FROM composer WHERE (ROWID = ? OR sync_id = ?)
SELECT item_pid, store_saga_id, sync_id, purchase_history_id, is_ota_purchased FROM item_store WHERE item_pid = %lld
SELECT ROWID,%@ FROM item_store WHERE %@ IN (%@)
DROP TRIGGER IF EXISTS 
EmptyContainerItemImportBug
Missing reporting_adam_id in PAF event
sourceMapDict
itemSourceIDS
unmappedIDS
updatedItemPersistentIDs
deletedContainerItemPersistentIDs
containerItemsToUpdate
SELECT container_item_pid, position FROM container_item WHERE container_pid = ? ORDER BY position
SELECT position, container_item_person_pid, cloud_id FROM container_item_person LEFT OUTER JOIN container_item USING (container_item_pid) JOIN person USING (person_pid) WHERE container_pid = ? ORDER BY position
, albumArtistPersistentID=%lld, groupingKey=%@, feedURL=%@, seasonNumber=%ld, compilation=%@
 VALUES (
on_insert_item_setRemoteLocationColumn
on_update_item_setRemoteLocationColumn
on_insert_item_setInMyLibraryColumn
on_update_item_setInMyLibraryColumn
-[%@ init] is unsupported. Use -[%@ initWithStatement:] instead.
attempt to create a database statement without an underlying sqlite3_stmt
ML3DatabaseStatement.m
%@ %p has a dangling SQLite resource. (%p) A connection should have free'd this resource.
%@ executing=%d, sql='%@'
attempt to step database statement that has already been finalized
v32@?0@"NSString"8@16^B24
'%@'
<%@ %p libraryOwnedTracks=%@ libraryOwnedPlaylists=%@ pendingMatch=%@ libraryPath="%@">
ML3DatabaseImport.m
%@: coder must support keyed coding
libraryPath
trackData
playlistData
fileHandle
syncAnchor
resetSync
sagaEnabled
storeAccountID
preferredVideoQuality
homeSharingBasePlaylistID
tracksAreLibraryOwnedContent
playlistsAreLibraryOwnedContent
pendingMatch
isServerImport
syncLibraryUUID
suspendable
clientIdentity
NSData *ML3DatabaseImportDataForDAAPFilePaths(NSArray *__strong)
DAAP file path must be a string.
ML3DatabaseInsertStatementOptionFailureOptionKey
ML3DatabaseInsertStatementOptionDatabaseNameKey
ML3DatabaseInsertStatementOptionTableNameKey
ML3DatabaseInsertStatementOptionColumnNamesKey
ML3DatabaseInsertStatementOptionValuesKey
ML3DatabaseStatementRenderer+Insertions.m
Must specify a table name to render insertion statement.
ABORT
IGNORE
REPLACE
ROLLBACK
FAIL
INSERT OR %@
INSERT
INTO %@.%@
INTO %@
DEFAULT VALUES
(%@)
Number of column names provided doesn't match the number of values provided.
VALUES (%@)
DEFERRED
EXCLUSIVE
IMMEDIATE
BEGIN %@ TRANSACTION
BEGIN TRANSACTION
COMMIT TRANSACTION
ROLLBACK TRANSACTION TO SAVEPOINT %@
ROLLBACK TRANSACTION
ML3DatabaseStatementRenderer+Transactions.m
Must specify a savepoint name.
SAVEPOINT %@
RELEASE SAVEPOINT %@
ML3CompoundSortKey
ML3IsCurrentlyRestrictedMedia
ML3SearchStringMatch
ML3SeasonDisplayName
ML3TrackDigestCompute
ML3TrackIntegrityCompute
ML3TrackIntegrityVerify
ML3StandardizedMediaType
ML3SortString
ML3SortStringWithPrefix
<ML3HomeSharingTrackImportItem 
 homeSharingId=
NSString *ML3MemorySQLiteDatabasePathWithName(NSString *__strong)
ML3SqliteUtilities.m
file:%@?mode=memory&cache=shared
:memory:
mode=memory
Could not open original database. %s (%d)
Could not open database copy. %s (%d)
Could not perform copy: %s (%d)
PRAGMA wal_checkpoint(RESTART);
Warning: could not checkpoint copied SQLite file.
sourceType
allowAccountMerging
privacyContext
-init is unsupported. Use -initWithSQLiteHandle: instead.
bookmark_sync_timestamp
bookmark_sync_revision
/var/mobile/Media/iTunes_Control/Sync/Media/
modified_playlist_pids
update_playlist
delete_playlist
UPDATE item_stats SET play_count_recent=0,skip_count_recent=0 WHERE item_pid IN (SELECT item_pid FROM item_store WHERE sync_id!=0 AND store_saga_id=0)
MLSyncClientLastSyncedRevision
MLSyncClientSyncAnchor
v12@?0B8
Sync_
operations
update_track
delete_track
update_db_info
apple_ids
v32@?0@"NSString"8@"NSString"16^B24
INSERT OR REPLACE INTO genius_config (id, data, default_num_results, min_num_results, version) VALUES (0,?,?,?,?)
iTunes
q24@?0@8@16
v32@?0@8@16^B24
<ML3SubscriptionImportItem 
 sagaId=
, storeId=
, subscriptionId=
<ML3SubscriptionContainerImportItem 
 global_id=
 cloud_id=
, name=
FindRowForRunningSum_UInt64
CFTimeRelativeToStartOfToday
CFTimeRelativeToEndOfToday
success
yMdHms
ML3VirtualTableRow::ML3VirtualTableRow(ML3DatabaseTable *__strong)
ML3VirtualTableRow.mm
No data columns in table schema.
v32@?0@"ML3DatabaseColumn"8Q16^B24
void ML3VirtualTableBindingVisitor::operator()(const int64_t &)
Cannot bind int64_t: NULL context
void ML3VirtualTableBindingVisitor::operator()(const float_t &)
Cannot bind float_t: NULL context
void ML3VirtualTableBindingVisitor::operator()(const bool &)
Cannot bind bool: NULL context
void ML3VirtualTableBindingVisitor::operator()(const std::string &)
Cannot bind std::string: NULL context
void ML3VirtualTableBindingVisitor::operator()(ML3CPPDataRef)
Cannot bind ML3CPPDataRef: NULL context
SELECT COUNT() FROM album
SELECT COUNT(DISTINCT(album_pid)) FROM item
SELECT COUNT() FROM album_artist
SELECT COUNT(DISTINCT(album_artist_pid)) FROM item
SELECT COUNT() FROM item_artist
SELECT COUNT(DISTINCT(item_artist_pid)) FROM item
SELECT COUNT() FROM sort_map WHERE name_order IN (SELECT title_order FROM item) OR name_order IN (SELECT item_artist_order FROM item) OR name_order IN (SELECT series_name_order FROM item) OR name_order IN (SELECT album_order FROM item) OR name_order IN (SELECT album_artist_order FROM item) OR name_order IN (SELECT genre_order FROM item) OR name_order IN (SELECT composer_order FROM item) OR name_order IN (SELECT name_order FROM container) OR name_order IN (SELECT search_title FROM item_search) OR name_order IN (SELECT search_album FROM item_search) OR name_order IN (SELECT search_artist FROM item_search) OR name_order in (SELECT search_composer FROM item_search) OR name_order IN (SELECT search_album_artist FROM item_search)
ML3AccountCacheErrorDomain
com.apple.medialibrary.ML3AccountCacheDatabase.operationQueue.accessQueue
ML3AccountCacheDatabase.m
appleID cannot be nil
REPLACE INTO account (dsid, apple_id, alt_dsid) VALUES (?, ?, ?)
v16@?0@"ML3DatabaseConnection"8
SELECT apple_id,alt_dsid FROM account where dsid=?
v32@?0@"ML3DatabaseRow"8@"NSError"16^B24
UPDATE account SET alt_dsid=? where dsid=?
com.apple.medialibrary.change-proxy-serial-queue
com.apple.medialibrary.change-proxy-callout-queue
com.apple.MusicLibrary.ML3DatabaseValidationClient
ML3DatabaseValidationClient.m
connection.databasePath != nil
com.apple.MusicLibrary.ValidationQueue.%s
-init is invalid. use -initWithDatabasePath: instead.
com.apple.MusicLibrary._ML3ValidationQueueIdentifierKey
MLDSpotlightIndexOperationErrorDomain
revision
libraryID
targetRevision
The operation was cancelled before the indexed client state was evaluated.
The operation was cancelled while batching searchable item creation
v48@?0q8q16i24i28q32^B40
The operation was cancelled on searchable items creation
v16@?0@"NSError"8
v16@?0@"NSArray"8
An exeption was thrown by Spotlight when trying to end batch.
ML3UpdateSpotlightIndexOperation.m
_createSearchableItemsForPlaylistsWithQuery must return an array of CSSearchableItems.
Failed to create CSSearchable track items from the library.
cast.name
directors.name
producers.name
v40@?0q8r^@16Q24^B32
Failed to create CSSearchable playlist items from the library.
ML3UpdateSpotlightIndexOperation requires a bundleID attribute
Music
Videos
Unkown bundle index
ML3RemoveTracksOperation requires a track source attribute
UPDATE item_stats SET %@=%@
v36@?0@"NSString"8q16B24q28
UPDATE item_store SET 
=?, 
%@=? WHERE item_pid IN (%@)
v32@?0@"NSNumber"8Q16^B24
UPDATE album SET user_rating=IFNULL((SELECT AVG(user_rating) FROM item_stats JOIN item USING (item_pid) WHERE album.album_pid=item.album_pid), album.user_rating) WHERE album.user_rating_is_derived=1
DELETE FROM artwork_token WHERE artwork_source_type = ?
SELECT entity_pid, entity_type, artwork_type FROM best_artwork_token WHERE fetchable_artwork_source_type = ?
SELECT %@ FROM item WHERE item_pid=?
SELECT 1 FROM container_item JOIN container USING(container_pid) WHERE is_hidden = 0 AND item_pid = ?
DELETE FROM artwork_token WHERE artwork_source_type = ? AND entity_pid = ? AND entity_type = ?
SELECT artwork_type FROM best_artwork_token WHERE fetchable_artwork_source_type = ? AND entity_pid = ? AND entity_type = ?
ML3DatabaseConnectionPoolThreadStorageKey
com.apple.MusicLibrary.ML3DatabaseConectionPool.serialQueue
ML3DatabaseConnectionPool.m
Failed to initialize condition variable.
Failed to initialize mutex.
-init is unsupported. Use -initWithDatabasePath: instead.
ML3DatabaseConnectionPool=%p
maxReaders=%d
maxWriters=%d
journalingMode=%d
useDistantWriterConnections=%d
closed=%d
readersSubPool=
writerSubPool=
Attempted to return connection %@ not owned by connection pool %@. (Connections in this pool: %@)
Connection subpool stored a thread-contested connection %@
Attempted to store local connection for thread %@ when it's already being marked as stored in thread %@
<%@ %p use = %lld, thread = %@, conn = %p>
com.apple.MusicLibrary._ML3DatabaseConnectionSubPool.checkoutQueue
com.apple.MusicLibrary._ML3DatabaseConnectionSubPool.checkinQueue
com.apple.MusicLibrary._ML3DatabaseConnectionSubPool.serialQueue
v12@?0i8
HSCachesClearedNotification
-init is unsupported. use -initWithDatabasePath:maxConcurrentConnections:
deallocating pool %@ has %lld active connections
ML3DatabaseConnectionSubPool=%p
availableConnections=%@
busyConnections=%@
ML3LanguageResourcesSectionsInfoKey
ML3LanguageResourcesSortingDetailsKey
ML3LanguageResourcesCanonicalLanguageIdentifierKey
ML3LanguageResources.m
Encoder %@ does not support keyed coding
com.apple.MusicLibrary.ML3LanguageResourceManager
v24@?0@"ML3LanguageResources"8@"NSError"16
AppleLanguages
ML3DatabaseErrorDomain
ML3DatabaseExceptionErrorUserInfoKey
-[%@ init] is unsupported. Use -[%@ initWithDatabasePath:] instead.
<%@ %p, path=%@, open=%@, readonly=%@, in transaction=%@, owning pool=%@>
Tried to open a database without setting a path to a database file first.
enable SQLITE_FCNTL_PERSIST_WAL option failed
PRAGMA journal_mode=WAL
enable WAL journal mode failed
disable SQLITE_FCNTL_PERSIST_WAL option failed
PRAGMA journal_mode=DELETE
update journaling mode to DELETE failed
PRAGMA cache_size=500
set cache size error
database open error
corrupted
openError
minimalCode
canCreateDatabase
openFlags
isReadOnly
sqliteResult
walResult
context
sqlErrorString
SELECT name FROM sqlite_master WHERE type='table' AND name='%@'
ML3DatabaseConnection.m
Cannot register module. SQLite handle not available, or connection is not open.
modules can only be registered one time
SELECT 1 FROM %@ WHERE ROWID=?
main
%s -- extended errcode: %d (%@), last errno = %d
Database connection lost or invalid.
PRAGMA wal_checkpoint;
Could not open database file at %@ (errno = %d)
Database at path %@ is corrupted. (Detected on connection %@) backtrace: %@
-journal
Database corruption has been detected.
Unrecoverable SQLITE_IOERR detected
busy
locked
Error preparing statement SQL. "%@" %@
An unknown error occurred while preparing a database statement.
Error stepping statement. %@ %@
ML3SQLiteBug
Error domain=%@ code=%@
EXPLAIN QUERY PLAN for: %@
EXPLAIN QUERY PLAN 
Executed in %.1f
Attempt to write a readonly database with statement %@
Could not create directory for database file at %@ (error = %@)
Could not create database file at %@, error = %@
true
false
MediaLibrary.sqlitedb
Failed to close connection for database. %s (errno = %d)
denied
sqlite_
Distant connection could not open XPC connection to media library service daemon.
You cannot register functions on a distant database connection.
You cannot register modules on a distant database connection.
Incremental I/O using a distant database connection is unsupported.
ML3DatabaseDistantConnection.m
Attempted to begin distant transaction while one is already in process.
v24@?0@"NSUUID"8@"NSError"16
Attempted to end non-existent distant transaction.
The media library service failed to return a valid transaction ID.
No smart playlist criteria
%*c%@ %@ %@ %@
kbps
on this computer
on iCloud
MM/dd/yyyy HH:mm
(%@) to (%@)
(%@) and (%@)
%lld (%d stars)
%@ to %@
%@ and %@
%02lld:%02lld.%03lld
(unsupported: %d)
Invalid
Play Status
Bit Rate
Sample Rate
Date Modified
Track Number
Size
Total Time
Date Added
EQ Preset
Obsolete Display Artist
Volume
Stream Status
User Play Count
Play Date
Disc Number
Track Rating
Object ID
Persistent ID
Checked
Playlist Item ID
Compilation
Purchase Date
Release Date
Beat Per Minute
Parent Container ID
Artwork
Popuarity
Purchased
Artist ID
Playlist ID
Composer ID
Genre ID
Codec Type
Codec Sub-Type
Song Data Kind
Disc Count
Start Time
Stop Time
Track Count
Store Front ID
Keywords
Cloud Match State
Has Lyrics
Media Kind
Series Name
Season Number
Epsisode ID
Episode Sort ID
Network Name
Last Backup Date
Skips
Skip Date
Gapless Album
Album Artist
Shuffle ID
Track ID
Relative Volumne
Attributes
Private
Album Info
Sort Name
Sort Album
Sort Artist
Sort Album Artist
Sort Composer
Sort Series Name
Moive Info
Poscast URL
Long Description
Exernal GUID
Chapter Data
Video Rating
Album Rating
Rental Expiration Date
Obsolere Ringtone Status
Bookmark Time
Remember Bookmark
Has Been Played
Has Subtitles
Audio Language
Audio Track Index
Audio Track ID
Subtitle Language
Subtitle Track Index
Subtitle Track ID
Studio
Reserved 1
Reserved 2
Reserved 3
Reserved 4
Reserved 5
Gpaless Info
Genius ID
Exclude From Shuffle
Lyrics
Store Persistent ID
Jukebox Votes
Voice Over Language
iTunes U
Uncompressed Size
Game GUID
App Identifier
Obsolete Track Kind
Copyright
User Disabled
Album Artwork
Collection Description
Flavor
Cloud ID
Cloud Download
Chosen By Auto Fill
Cloud User ID
Location (Track Kinds)
iCloud Type
Liked State
is equal to
invalid
is not equal to
does not contain
contains
does not start with
starts with
does not end with
ends with
is not greater than
is greater than
is not greater than or equal
is greater than or equal
is not less than
is less than
is not less than or equal
is less than or equal
is not in range
is in range
is not between
is between
is not
unknown
purchased
uploaded
ineligible
local only
duplicate
music
movie
podcast
audiobook
PDF booklet
music video
TV show
interactive booklet
coached audio
video pass
home video
future video 3
software package
forced music playlist
ringtone
digital booklet
software application
software game
audio pass
voice memo
book
PDF book
alert tone
-[%@ initWithStatement:] is invalid for distant results. Use -[%@ initWithTransactionID:] instead.
-[%@ init] is unsupported. Use -[%@ initWithTransactionID:] instead.
%@, sql = "%@", parameters = %@
v24@?0@"NSData"8@"NSError"16
ML3SubscriptionImportOperation.mm
Attempted to start subscription import operation without DAAP payload data.
com.apple.MusicLibrary.ML3StatementAccumulator
-init is invalid. Use -initWithDatabasePath: instead.
ML3StatementAccumulator.m
Attempted to flush database statements without a specified database path.
v20@?0B8@"NSError"12
F%02lld
_ML3BaseMusicLibraryResourcesManager.m
Invalid resource
iTunes/iTunesSyncDeletes.plist
iTunes/PlayCounts.plist
iTunes/OnTheGoPlaylist.plist
iTunes/OnTheGoPlaylist_%llu.plist
iTunes/GeniusPlaylist.plist
iTunes/GeniusPlaylist_%llu.plist
iTunes/Playlist_%llu.plist
Originals
Caches
MLSections
SortingDetails
MusicLibrary
FailedArtworkConversion.plist
Backups
Logs
MediaServices
void _MSVHasherAppendBytes(MSVHasher * _Nonnull, const void * _Nonnull, size_t)
NSString * _Nonnull _MSVHashGetDigest(MSVHash)
0123456789abcdef
MSVHash _MSVHasherFinalize(MSVHasher * _Nonnull)
com.apple.medialibraryd.multi-users-resources-serial-queue
LibraryContainerPath
Failed Getting Path
Unable to retrieve media library folder
sortTitle
releaseDateTime
fileSize
contentRating
explicitContent
shortDescription
longDescription
contentRatingLevel
fileKind
familyAccountId
drmVersionsCode
drmPlatformIdCode
drmKey1IdCode
drmKey2IdCode
chapterMetadataUrl
storeAssetFlavor
extrasUrl
purchaseDateTime
cloudStatus
playCountDelta
skipCountDelta
lastSkippedDateTime
rememberBookmark
bookmarkTimeMilliseconds
storePlaylistId
hasLocalAsset
needsReporting
likedStateChanged
isInUsersLibrary
cloudAssetAvailable
storeProtectionType
userDisabled
cloudPlaybackEndpointType
playbackEndpointType
cloudMatchedStatus
inUsersCloudLibrary
isPreorder
likedStateChangeDate
storefrontId
purchaseHistoryToken
purchaseHistoryRedownloadParams
sagaRedownloadParams
storeXID
subscriptionStoreItemId
reportingStoreItemId
assetStoreItemId
tvShow
<ML3StoreContainerImportItem 
 name="
", globalID="
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
ML3Artwork.m
Relative path cannot be nil.
v8@?0
SELECT artwork_source_type, artwork_type, interest_data FROM artwork WHERE artwork_token = ?
-initWithParentResult: is invalid for cached rows. Use -initWithArray: instead.
ML3DatabaseCachedRow.m
Attempted to read cached blob data from non-NSData type.
Fetching data using column name is unsupported for cached rows.
%{public}@ Failed to retrieve active itunes account type. err=%{public}@
accountPropertyForKey %{public}@ is nil. Proceeding without dsid
accountPropertyForKey %{public}@ is %{public}@. It should be an NSString or NSNumber instead of %{public}@
%{public}@ Failed to retrieve itunes account type. err=%{public}@
%{public}@ Failed to retrieve accounts for itunes account type. err=%{public}@
Bogus smart playlist info: %{public}@
Failed to save interest data to database for artwork_token %{public}@ with error: %{public}@
[ML3UpdateArtworkInterestDataOperation] Exception while updating artwork interest data: %{public}@
ignoring container with cloud id %lld
got unexpected container properties element. properties=%{public}@
parsed genius seed listing. id=%lld
got unknown container type %lld
Generating video snapshot at time offset %g
Timed out waiting for generateCGImagesAsynchronouslyForTimes: %g
Failed to deserialize track data with error: %{public}@
Importing %llu bytes of track data from: %{public}@
Importing %llu bytes of playlist data from: %{public}@
parsing finished. error=%{public}@
failed to start import session
skipping invalid track
skipping invalid container
starting import session with %lld tracks for update type %d
Invalid item ID length (%u) during import session
DAAP import success=%d. Cancelling parse operation.
[%{public}@] Error registering function: %{public}@
No entities for which to increment revision numbers.
Failed to insert batch of persistent ids in entity_revision, error = %{public}@
Failed to delete persistent ids in entity_revision, error = %{public}@
Invalid count query for entity class %{public}@, count property %{public}@
Warning: ignoring asynchronous flag
Ignoring write to read-only Home Sharing database. Properties: %{public}@
Daemon reported set values for properties was unsuccessful. %{public}@
Could not delete %{public}@ %{public}@
Failed to clean up item_stats where sync_id = 0 with error: %{public}@
Failed to clean up item_store where sync_id = 0 with error: %{public}@
Moving %{public}@ to %{public}@
failed to merge duplicate items for %lld
failed to delete duplicate item for %lld
Found an item (%lld) that has a location in the database, but no file size.
Computed %zu file size for item %lld.
WARNING: item with pid %lld has a location in the database but no file on disk.
Failed to update file size. %@
Failed to migrate artwork from '%{public}@' to '%{public}@' with error: %{public}@
Failed to migrate screenshot from '%{public}@' to '%{public}@' with error: %{public}@
Failed to migrate chapter artwork from '%{public}@' to '%{public}@' with error: %{public}@
Encountered invalid chapter artwork_cache_id '%{public}@', skipping...
Encountered missing chapter artwork_cache_id, skipping...
Failed to migrate artist hero artwork from '%{public}@' to '%{public}@' with error: %{public}@
Failed to delete old artwork directory during migration with error: %{public}@
Failed to update file size. %{public}@
Failed to update is_protected in item_store_new. %{public}@
Failed to create temporary new artwork directory with error: %{public}@
Failed to create temporary new artwork cache directory with error: %{public}@
Failed to create artwork directory '%{public}@' with error: %{public}@
Failed to move original artwork from '%{public}@' to '%{public}@' with error: %{public}@
Failed to create artwork cache directory '%{public}@' with error: %{public}@
Failed to move cached artwork from '%{public}@' to '%{public}@' with error: %{public}@
Failed to delete original artwork directory during migration with error: %{public}@
Failed to rename new temp artwork directory during migration with error: %{public}@
Failed to delete artwork cache directory during migration with error: %{public}@
Failed to update relative_path in artwork. %{public}@
Failed to create new temp original artwork directory during migration with error: %{public}@
Failed to create intermediate directories for new original artwork directory during migration with error: %{public}@
Failed to move to new original artwork directory during migration with error: %{public}@
Failed to move to new cache artwork directory during migration with error: %{public}@
Repairing %lu misgrouped albums: %{public}@
Error while splitting misgrouped track into new album. %{public}@
Failed to rename matched_store_item_id column.
Failed to add playlist_author_id column.
Failed to add radio_station_id column.
Failed to add advertisement_unique_id column.
Failed to add advertisement_type column.
Failed to update item_upp with error: %@
Failed to decode sbk property values. err=%{public}@
There was an error when migrating SBK table while inserting data from SBK %{public}@
There was an error when migrating SBK table while inserting data from SBK properties table, %{public}@
There was an error closing the SBK database file. Migration step will continue, but StoreBookkeeper database files might not be deleted.
Start back filling date_downloaded
Could not get creation date for item at %{public}@
Could not get attributes for item at %{public}@, error=%{public}@
Could not update date downloaded for item_pid %lld, error=%{public}@
Finished back filling date_downloaded for %ld items
%{public}s: Found original user version %d, which indicates a pre-release version of iOS 13.0 was previously installed. Clearing subscription status cache.
%{public}s: Found original user version %d, which pre-dates any work specific to iOS 13.0. Leaving subscription status cache intact.
Will remove duplicate plaback history playlists=%{public}@
Could not update entity_revision table for containerPID=%{public}@, error=%{public}@
Could not delete duplicate container_pids from container_item
Could not delete duplicate container_pids from container
Starting to patch up date_downloaded
Could not get creation date from file attributes for item at %{public}@
Finished patching up date_downloaded for %ld items
Could not remove last known locker account ID
Could not remove cloud library merge preference
Merging split is_compilation albums
Could not update entity_revision table for album_pid=%{public}@, error=%{public}@
Could not update item album_pid from %{public}@ to %{public}@ error=%{public}@
Could not delete album with pid=%{public}@, error=%{public}@
Could not update entity_revision table for item_pid=%{public}@, error=%{public}@
Patch up podcasts synced with incorrect composite media type
Could not patch up composite media_type for synced podcasts
Could not update container table to support personalized type
Could not update container table to support personalized sort key
Could not update item_stats table to support liked state change date
Failed to add is_preorder column to item_extra table
Failed to add hls_key_server_url column to item_video table
Failed to add hls_key_cert_url column to item_video table
Failed to add reporting_store_item_id column to item_store table
Failed to add asset_store_item_id column to item_store table
Failed to add time_synced_lyrics_available column to item_lyrics table
Failed to add hls_key_server_protocol column to item_video table
Failed to back-fill hls_key_server_protocol column
Failed to add classical_experience_available column to album table
Failed to add classical_experience_available column to album_artist table
Failed to add classical_experience_available column to item_artist table
Failed to add extended_playback_attribute column to item_store
%{public}@ - Creating connection pool with path: %{public}@
%{public}@ - Creating database path : %{public}@
Automatic Downloads are %{BOOL}u. enabledKinds=%{public}@
Could not get active account. Treating automatic Downloads as disabled
Could not resolve preferredAudioTracks, missing TCC
Could not resolve preferredSubtitleTracks, missing TCC
Deleted active Genius playlist with pid: %lld
Saved play counts to %{public}@: success=%d
Saving updated container data. container_pid=%lld, revision=%lld, deletionType=%d
no content changes for container %lld - skipping
container artwork has changed. new token=%{public}@
artwork file not found. container_pid=%lld, token=%{public}@, url=%{public}@
Could not serialize plist: %{public}@ (%{public}@)
%{public}s failed with error %{public}@ path = %{public}@
Requires schema upgrade because of a version mismatch
Requires schema upgrade because database is missing table %{public}@
Requires pre-processing because database does not yet exist
Requires pre-processing because database properties table does not exist
Requires pre-processing because of a language mismatch
Requires pre-processing because of integrity
Requires pre-processing because of invalid sort_map entries
Requires pre-processing because of missing database UID
Sending remove tracks request to %{public}@. Attributes: %{public}@, options: %{public}@
Sending remove playlists request to %{public}@. Attributes: %{public}@, options: %{public}@
Original artwork not found at '%{public}@'
Artwork already exists on disk for artwork token %{public}@, ensuring artwork table is consistent
Failed to write original artwork to temporary path with error: %{public}@
Failed to convert original artwork with error: %{public}@
Explicitly deleting artwork at relative path %{public}@
Failed to delete from artwork_token table (token = %{public}@) with error: %{public}@
Cannot migrate exisitng artwork, no artwork found in database with token %{public}@
Failed to delete from artwork_token table with error: %{public}@
Failed to delete from artwork table (token = %{public}@) with error: %{public}@
Failed to move artwork from '%{public}@' to '%{public}@' with error: %{public}@
not cleaning up artwork with options (%d) with database at %{public}@ as current version (%d) is not (%d)
not cleaning up artwork with options (%d) with database at %{public}@ as file does not exist at this location
De-orphaning called on old database, returning immediately
De-orphaning called with no database, removing everything
Skipping de-orphaning of Purchases directory due to locked ringtone.plist
Empty ringtone.plist found, OK to purge.
Couldn't stat ringtone.plist
Could not read old file: %{public}s, %{public}s
Ignoring new unaccounted file %{public}s
Track de-orphaning of '%{public}@']: removing %lu orphaned tracks at paths %{public}@
Removing %llu tracks due to family account removal (family account id = %lld)
persistent_ids = %{public}@
deleting presigned validity
Failed to insert into artwork table with error: %{public}@
Deleting artwork at: %{public}@
Failed to delete artwork at '%{public}@' with error: %{public}@
Failed to remove orphaned artwork tokens with error: %{public}@
Failed to remove orphaned best artwork tokens with error: %{public}@
Found orphaned artwork (type=%d, source=%d) in database with token: %{public}@ relative path: %{public}@
Found orphaned chapter artwork in database with token: %{public}@ relative path: %{public}@
Deleting %ld artwork assets from orphaned metadata.
Found orphaned artwork on disk with relative path: %{public}@
Found %lu artwork metadata without an asset on disk
Found %lu artwork asset without metadata in database
Failed to delete from artwork table with error: %{public}@
Deleting %ld orphaned artwork assets.
Updating best tokens for entity_pid = %lld entity_type = %d artwork_type = %d with invalid available token %{public}@
Succesfully emptied tables in media library database: %{public}@
Failed to empty tables: %{public}@ with error: %{public}@
%{public}@ - Received MLUserDatabasePathDidChangeNotification in medialibraryd which is unexpected
%{public}@ - performDatabasePathChange: - No action to take [returning early]
%{public}@ - performDatabasePathChange: - Process started
%{public}@ - emergencyDisconnectWithCompletion:
%{public}@ - emergencyDisconnectWithCompletion: - No action to take [returning early]
%{public}@ - terminateForFailureToPerformDatabasePathChange [unresponsive process]
%{public}@ - _prepareForAccountChange
%{public}@ - Error attempting to close connections: %{public}@
%{public}@ - _completeAccountChangeWithPath - New database path: %{public}@
%{public}@ - _closeAndLockCurrentDatabaseConnections
%{public}@ - connection pool locked and closed
%{public}@ - _setupNotificationManager
%{public}@ - _tearDownNotificationManager
Could not encode %{public}@: %{public}@
Could not write to %{public}@: %{public}@
Failed to update artwork_token with error: %{public}@
Failed to delete artwork_token with error: %{public}@
Failed to update best_artwork_token with error: %{public}@
Failed to delete best_artwork_token with error: %{public}@
Writing tombstone for track with persistent ID %lld: %{public}@
Skipping writing tombstone for track with persistent ID %lld (sync_id = %lld, base_location_id = %lld)
Deleting %ld assets due to %{public}@
Could not find sort order for %{public}@ of %{public}@
Deleting track that is not from the cloud with persistent-id: %lld
Unlinking %ld assets due to %{public}@
Failed to clear playback keys. %{public}@
[MLPurchaseHistoryImportOperation] Purchase history import operation cancelled=%d success=%d. total time = %.2fs
importing purchased tracks. import.preferredVideoQuality=%lld
failed to process import data
successfully processed import data
%{public}@ is requesting coordinated termination
Received notification to perform coordinated termination. Reasons signed: %{public}@
%{public}@ Error enumerating results. err=%{public}@
No counting query for entity class %{public}@ count property %{public}@
[ML3ProcessDownloadedAssetsOperation] Beginning process assets operation with source %d (%lu downloads)
[ML3ProcessDownloadedAssetsOperation] Processing asset download: %{public}@
[ML3ProcessDownloadedAssetsOperation] got unknown entity type. attrs=%{public}@
[ML3ProcessDownloadedAssetsOperation] Process assets operation success=%d in %.3f seconds
[ML3ProcessDownloadedAssetsOperation] extracted lyrics for track: %lld from %{public}@ with error %{public}@
[ML3ProcessDownloadedAssetsOperation] extracting new lyrics for track: %lld from the asset
[ML3ProcessDownloadedAssetsOperation] updated values=%{public}@ for track:%lld
[ML3ProcessDownloadedAssetsOperation] track: %lld has no updated lyrics or enclosing container pid
[ML3ProcessDownloadedAssetsOperation] No artwork token - skiping
[ML3ProcessDownloadedAssetsOperation] failed to parse genius data for track %lld - skiping
[ML3ProcessDownloadedAssetsOperation] No genius id in data for track %lld - skiping
[ML3ProcessDownloadedAssetsOperation] failed to find container with pid %lld - skipping
[ML3ProcessDownloadedAssetsOperation] Artwork already exists on disk, checking database consistency (artworkToken: %{public}@)
[ML3ProcessDownloadedAssetsOperation] Could not read file attributes for %{public}@: %{public}@
[ML3ProcessDownloadedAssetsOperation] Artwork file too big: %llu bytes. Discarding.
[ML3ProcessDownloadedAssetsOperation] Failed to insert new artwork for token: %{public}@
[ML3ProcessDownloadedAssetsOperation] Unhandled genius metadata format: %{public}@
[ML3ProcessDownloadedAssetsOperation] Unhandled genius similarities format: %{public}@
[ML3ProcessDownloadedAssetsOperation] failed to update genius metadata. err=%{public}@
[ML3ProcessDownloadedAssetsOperation] failed to update genius checksum. err=%{public}@
[ML3ProcessDownloadedAssetsOperation] failed to update genius similarities. err=%{public}@
Album -> AlbumArtist repair: Found %lu albums with invalid album artists %{public}@
Updated album %{public}@ with album artist %{public}@
Could not find valid album artist for album %{public}@
Failed to insert empty base location into table.
Failed to set ordering language with canonical identifier.
User version is 0, building tables for newly created DB
Migrating media library database from %d to %d
Migration error: %{public}@
Recreating un-migratable database...
Successfully deleted un-migratable database and re-created.
Still can't validate database after recreating.
Failed to insert a library UID into the database properties table. (Error = %{public}@)
Successfully validated database
Successfully validated database, but encountered a recoverable error: %{public}@
Failed to validate database with error: %{public}@
Failed to build tables with schema.
Failed to create indexes on database connection.
Failed to create triggers on database connection.
Failed to complete initial insertion statements.
Failed to set latest database version on connection.
Failed to prepare SQLite query optimizer.
Could not delete database
failed to delete existing sort_map_new table
failed to create sort_map_new
failed to populate sort_map_new
failed to re-order sort-map entries
Sort collations changed, need to recompute
failed to create item_new
failed to update tables with new name_orders
failed to swap sort_map tables
failed to update grouping_key fields
Unicode version has changed after sort map update. Coalescing mismatched collections...
Successfully coalesced mismatched collections.
failed to coalesce mismatched collections after rebuilding sort map
failed to update library unicode version
failed to update item_search entries
System unicode version does not match version stored in the library -- upgrading sort map
Could not not insert name_order = %lld (between %lld/%{public}@ and %lld/%{public}@) for %{public}@
Failed to coalesce potentially mismatched collection %{public}@
Failed to repair entities converging on PID %lld
Deleting duplicate %{public}@ %lld
Failed to delete duplicate collection with pid %lld
loaded %lu existing entries
db:fetch
initial sort map insert failed - commit what we have and force a rebuild
insert
nameOrderSpacing <= 0 between %lld and %lld
dropping sort_map indexes for %lu additions
sort map insertion failed for '%{public}@'
insert:nameOrder
Failed to merge into sort_map - attempting to repair and try again
Found duplicate sort_map_no_uniques entry with common name. name='%{public}@', name_order=%lld, name_section=%d, sort_key=%{public}@
Found matching entries in both sort_map_no_uniques and sort_map. NEW: name='%{public}@', name_order=%lld, name_section=%d, sort_key=%{public}@. EXISTING: name='%{public}@', name_order=%lld, name_section=%d, sort_key=%{public}@
Failed to merge into sort_map after removing invalid entries - failing commit
Successfully merged into sort_map after removing invalid entries - rebuilding to repair tables
Failed to rebuild the sort map after merge - failing commit!
failed to delete sort_map_no_uniques
move
recreating sort_map indexes for %lu additions
failed to rebuild sort_map indexes
[MLHomeSharingImportOperation] HomeSharing import operation cancelled=%d success=%d. total time = %.2fs
Found %lu potential orphan tracks to evaluate using query: %{public}@
Keeping the following tracks from subscribed containers...
[SC] %lld - %{public}@
Keeping the following tracks from playback history...
[PH] %lld - %{public}@
Removing assets for track: %lld - %{public}@
Keeping the following tracks from the love cache...
[LC] %lld - %{public}@
Keeping the following tracks that are in albums from the love cache...
[LC] %lld - %{public}@ (%{public}@)
Found %lu orphan tracks to delete.
Deleting track: %lld - %{public}@
No potential orphan tracks to evaluate at this time.
URL %{public}@ is in known list of paths that could not be converted to ASTC .. skipping.
Error %{public}@ converting artwork at %{public}@ to ASTC
Artwork at %{public}@ successfully converted to ASTC format
Error %{public}@ replacing artwork at %{public}@ with %{public}@ - temp file deleted %d
Error deferring artwork conversion activity as the conditions have changed.
All artwork are converted to ASTC
Error removing MLArtworkShouldConvertToASTC key.
Error removing failed assets plist at %{public}@.
Deleted %lu orphaned Albums
Deleted %lu orphaned AlbumArtists
Deleted %lu orphaned Artists
Deleted %lu orphaned Composers
Deleted %lu orphaned Genres
Failed to update collection representative items with error: %{public}@
Could not add column to table %{public}@. %{public}@
Could not find columns in table %{public}@
Unable to parse table schema from sqlite_master.
Failed to create temporary table for rename. %{public}@
Failed to migrate data to temporary table for column rename. %{public}@
Failed to drop old %{public}@ table. %{public}@
Failed to rename temporary table %{public}@ to permanent name %{public}@. %{public}@
Could not parse search criteria list for playlist with error %ld
Could not find sort order for %{public}@ of %{public}@ in %{public}@
unhandled match type: unfilterable type %{public}@
Failed to update name of built-in smart playlist %{public}@ (%{public}@)
Could not parse search criteria list for playlist %p (pid = %lld): %ld
Got an error getting search criterion info: %ld
unhandled match type: unknown type %d
Failed to delete from container_item with error: %{public}@
Failed to delete from artwork_token with error: %{public}@
Failed to delete from best_artwork_token with error: %{public}@
Could not set keep_local to %d for track %lld - error: %{public}@
No tracks in container %p (pid = %lld)
From index (%lu) out of bounds (%ld) of %p (pid = %lld)
To index (%lu) out of bounds (%ld) of %p (pid = %lld)
Failed to update positions in container_item with error: %{public}@
updating My Loved Playlist by adding track=%lld to containerId=%lld - existingItemPositions=%{public}@
Failed to update position of existing items in container. Error=%{public}@
Failed to insert track=%lld at index 0 for container=%lld, error=%{public}@
reloadContainedMediaTypes=%{BOOL}u.
Adding track to My Loved playlist finished with status=%{BOOL}u in %f seconds
updating My Loved Playlist by removing track=%lld to containerId=%lld - existingItemPositions=%{public}@
Found %d existing positions for track=%lld
Removing track with persistentID=%lld at position=%lu, adjustIndex=%lu, adjustedPosition=%lu
Failed to remove track=%lld from container=%lld, error=%{public}@
Failed to update position of current items after position=%d. Error=%{public}@
Removing track to My Loved playlist finished with status=%{BOOL}u in %f seconds
Failed to delete existing container_item row(s) with error: %{public}@
Failed to update container_item position(s) with error: %{public}@
Failed to delete from container_item_persons with error: %{public}@
Failed to delete all existing container_item rows with error: %{public}@
Deleting container_item rows with persistent-ids: %{public}@
Failed to delete container_item_person rows with error: %{public}@
Failed to delete container_item rows with error: %{public}@
Mapped item at position %lld to existing container_item with pid %lld (update position: %lld -> %lld)
Creating new container_item for item at position %lld
Failed to insert container_item with error: %{public}@
Failed to clear keep_local for track %lld - error: %{public}@
Unsupported order type: %u
Unexpected order type: %u
failed to start store import transaction. error=%{public}@
[ML3ProtoSyncImportOperation] import operation cancelled=%d success=%d. total time = %.2fs
[ML3ProtoSyncImportOperation] cancelling import operation %{public}@ _isReadSourceCancelled %d
setting sync library id to %{public}@
%{public}@ starting import with fileHandle %{public}@, fd=%d
%{public}@ Not suspending read source _importFinished %d, _isReadSourceCancelled %d
%{public}@ resuming read source bytesRead %ld parsingLen %d
failed to read object length from import data stream
failed to read varint length
%{public}@ resuming read source bytesRead %ld pasrsingLen %d
timed out waiting for import data
failed to read object from import data stream
failed to parse sync package data
%{public}@ resuming read source
%{public}@ cancelling read source
failed to commit the import session changes
resetting play and skip counts
failed to clear recent counts. err=%{public}@
preparing for a reset sync
Removing %ld playlists for a reset sync
received sync error package. err=%d, desc=%{public}@
unknown object type %d
failed to begin import session
failed to apply stats updates. err=%{public}@
failed to update bookmark time. err=%{public}@
failed to update date_played. err=%{public}@
ignoring failed update for deleted track
failed to process media sync operation
failed to process playlist sync operation
Track with persistent_id:%lld, protection type: %d is local on device with no backing cloud asset
Found %lu unavailable tracks to unlink
Deleting assets with protection type = %d that are no longer cloud available: %{public}@
Failed to clear location for unavailable tracks with asset protection type = %d
_ML3MultiUserAccountChangeOperation %p - Starting operation
_ML3MultiUserAccountChangeOperation %p - Finished operation
MLMediaLibraryResourcesServiceClient %p - sharedService:
%{public}@ - Initializing the shared service:
MLMediaLibraryResourcesServiceClient %p - libraryContainerPathWithError:
MLMediaLibraryResourcesServiceClient %p - BLOCKING - Retrieving libraryContainerPath on serial queue: %@
MLMediaLibraryResourcesServiceClient %p - UNBLOCKED - Retrieved mediaFolderPath on serial queue: %@ - %@
MLMediaLibraryResourcesServiceClient %p - _initWithXPCListenerEndpoint:
MLMediaLibraryResourcesServiceClient %p - Unable to retrieve path [XPC connection interrupted] - Recreating the connection - Attempt %ld of %ld
MLMediaLibraryResourcesServiceClient %p - Unable to retrieve path - error=%{public}@
MLMediaLibraryResourcesServiceClient %p - performDatabasePathChange: - newPath=%{public}@
MLMediaLibraryResourcesServiceClient %p - Database path change completed [posting path change notification]
MLMediaLibraryResourcesServiceClient %p - terminateForFailureToPrepareForAccountChange:
MLMediaLibraryResourcesServiceClient %p - Creating XPC Client Connection [started]
MLMediaLibraryResourcesServiceClient %p - Creating XPC Client Connection [failed] - error=%{public}@
MLMediaLibraryResourcesServiceClient %p - Creating XPC Client Connection [ended] - connection=%{public}@
MLMediaLibraryResourcesServiceClient %p - Unable to create XPC Connection [no listener endpoint]
MLMediaLibraryResourcesServiceClient - XPC Connection interrupted [Unable to process ]
MLMediaLibraryResourcesServiceClient %p - XPC Connection interrupted [Processing] - accountChangeObserver=%p
MLMediaLibraryResourcesServiceClient %p - Connection to media library resources service invalidated
MLMediaLibraryResourcesServiceClient %p - Resetting XPC connection to nil
Database already validated. Returning immediately.
Truncation failed with error=%{public}@
Starting validation at path=%{public}@
Exception performing validation. Error=%{public}@
Device is running an internal install. Asking user for permission to rebuild.
User agrees to rebuild. Deleting database and re-attempting validation.
User did not want to rebuild database. Preparing for nuclear meltdown.
*** Truncating database files at path: %{public}@ ***
Closing all local database connections...
Notifying other clients about database deletion...
Performing truncation...
Failed to truncate database files.
Truncation successful
validateLibraryDatabaseIfNecessary requiresNonSchemaUpdates=%{BOOL}u, requiresSchemaOnlyUpdates=%{BOOL}u
Database requires preprocessing before schema updates for library at path %{public}@
Database requires schema upgrades for library at path %{public}@
Upgrading schema for library at path %{public}@
Preprocessing database for library at path %{public}@
[Preprocessing] Failed to update sort map.
[Preprocessing] Failed to create indexes.
[Preprocessing] Failed to update system playlist names for current language.
finished loading fileSystemAttributes=%{public}@ with error=%{public}@ for path=%{public}@
Directory does not exist at path %{public}@
database at %{public}@ is not a subdirectory of %{public}@
item has both is_podcast and is_song modifiers. Ignoring is_song and treating item as a podcast
item has both is_podcast and is_movie modifiers. Treating media_type as MLMediaTypeVideoPodcast | MLMediaTypePodcast
Disabling smart evaluation for unsupported smart playlist type (%{public}@)
Cancelling all import operations.
Cancelling any active or suspended import operations in progress for process %{public}@ (process ID = %d)
Suspending import operation %{public}@
Import operation %{public}@ is not suspendable - skipping
Waiting for suspended import operations to finish...
Suspended import operations finished.
Resuming %lu suspended import operation(s)
Resuming import operation %{public}@
Successfully executed import operation %{public}@
Import operation failed: %{public}@
Operation %{public}@ cancelled.
Operation %{public}@ suspended--adding to suspension queue.
%{public}s unexpected error
Failed to update name of container %lld (%{public}@)
Conflict merging items from dictionary for key %{public}@: %{public}@ => %{public}@
Error loading artwork configuration at %{public}@ : %{public}@
%s parse error: error parsing '%{public}@'
[Migration] HomeSharing library at %{public}@ has old schema
[Migration] Migration step failed with error: %{public}@
[Migration] Failed to execute directives after migration.
[Migration] Post-migration sanity check failed unrecoverably.
[Migration] Test hook is set to fail migration.
[Migration] Failed to commit transaction.
Failed to commit transaction during migration
[Migration] Database migration to user version %d took %.2fs
[Migration] Sanity check failure: Database is missing table %{public}@
[Migration] Sanity check failure: Database is missing sort_map, rebuilding
[Migration] Sanity check recoverable condition: %lli items in item and %lli items in item_extra
[Migration] Sanity check: Incrementing revision for removed tracks: %{public}@
[Migration] Sanity check: Deleted garbage tracks %{public}@
[Migration] Sanity check recoverable condition: Sort map was missing the following names %{public}@
[Migration] Sort map nextOrder %lli, nameOrder %lli
[Migration] Sort map nextSection %lli, nameSection %lli
[Migration] Sanity check recoverable condition: Sort map is inconsistent
[Migration] Sanity check recoverable condition: %lli rows in item and %lli rows in lyrics
[Migration] Sanity check: flagging cloud library for full refresh after next update
[Migration] Sanity check: flagging purchase history for next update to include all tokens
[Migration] Sanity check: resetting sync anchors
[Migration] Sanity check: removing orphaned assets
[Migration] Migration sanity check complete
[Migration] Failed to remove locations missing assets.
[Migration] Failed to update sort map.
[Migration] Failed to canonicalize collection representative items for class: %{public}@
[Migration] Failed to create indexes.
[Migration] Failed to create triggers.
[Migration] Failed to execute SQLite ANALYZE.
[Migration] Autogeneration of supported sizes completed (error=%{public}@)
ERROR: unable to find column name in definition %{public}@
ERROR: Adding column not found in schema %{public}@
<MLERROR>: Locations for items are set and don't exist, or are missing critical information: %{public}@
NOTE: Fake echo data being used, ignoring genius database
NOTE: Could not create playlist, seedTrackGlobalID == 0.
NOTE: Could not create playlist, too few results (min=%ld, found=%ld)
NOTE: Could not create cluster playlist
Note: Could not locate track with globalID = %llu
ERROR: Could not generate playlist tracks, no active cluster playlist.
%{public}@ Starting import session
%{public}@ Finished starting import session. err=%{public}@
%{public}@ Finishing import session
%{public}@ Ended import session. err=%{public}@
%{public}@ Canceling import session
%{public}@ Canceled import session. err=%{public}@
%{public}@ Finished adding items. err=%{public}@
%{public}@ Finished updating items. err=%{public}@
%{public}@ Failed to connect to the remote service. err=%{public}@
%{public}@ Finished removing items. err=%{public}@
%{public}@ Failed to obtain service listener endpoint. err=%{public}@
%{public}@ Connection to client import service interrupted
%{public}@ Connection to client import service invalidated
Attempting to import store item artwork with invalid artwork token for item pid %lld
Could not create chapter data: %ld
Could not create flattened item chapters: %ld
Unknown time format in chapter data: %{public}@, returning nil
%{public}@ not found in locales, using %{public}@ instead
populateLocationPropertiesWithPath called with invalid path '%{public}@'
failed to obtain file attributes for %{public}@. err=%{public}@
updating container for item_pid=%lld finished with error=%{public}@
updating chapter data from asset file
Deleting orphan asset at path: %{public}@
Skipping purgeable calculation for tracks because DB is not present or invalid (db version=%d, current version=%d)
caught exception gathering purgeable storage amount: %{public}@
force-deleting cached assets to free space
Purgeable size of %lld bytes for urgency %d, includeAutoFilledTracks=%d
Purging media data of at least %lli bytes for urgency %d. includeAutoFilledTracks=%d
Skipping purge for tracks because DB is not present or invalid (db version=%d, current version=%d)
caught exception trying to purge storage: %{public}@
Purged %lld bytes of media data
Clearing removed tracks.
Failed to remove cached asset %{public}@ error %{public}@
Purgeable database free space: %lld bytes
Purgeable artwork size: %lld bytes
clearing purgeable artwork with urgency %d
Removed %lld bytes of artwork
Purgeable cached tracks size: %lld bytes
Purgeable managed tracks size: %lld bytes
Purged streaming assets %{public}@
Failed to purge streaming assets %{public}@
Purging album %lld (%lli bytes): %{public}@
Failed to purge redownloadable assets for album %lld
Successfully purged redownloadable assets for album %lld
Failed to marked purged tracks as keep local
Marked %{public}@ persistentIDs as keep local for later recovery
Purgeable tracks size: %lld bytes
Compacting the database file
Removed %lld bytes compacting the db
Purging all cloud assets
Removed %lld bytes clearing cloud assets
Clearing orphaned assets with urgency %d
Removed %lld bytes of orphaned tracks
Removed %lld bytes of orphaned artwork
Removed %lld bytes of orphaned assets
Purging %{public}@ - %{public}@ (%lli bytes)
Failed to purge redownloadable assets
failed to marked purged tracks as keep-local. err=%{public}@
Removed %lli bytes of track data
[Schema] Checking if the current database version is up-to-date...
[Schema] Database version is %d, not %d
[Schema] Device language changed from %{public}@ to %{public}@
[ML3SetValuesForPropertiesOperation] Exception while setting values: %{public}@
[ML3SetValuesForPropertiesOperation] Failed to set values for persistent ID %lld
failed to map container parent_pid %lld
[ML3SetCloudIDImportOperation] failed to start store import transaction. error=%{public}@
[ML3SetCloudIDImportOperation] [ML3SetCloudIDImportOperation] import operation cancelled=%d success=%d. total time = %.2fs
Importing %llu bytes of track data from: %@
Importing %llu bytes of playlist data from: %@
[ML3SetCloudIDImportOperation] No track data or playlist data to import, finishing import operation...
[ML3SetCloudIDImportOperation] Failed to deserialize track plist with error: %{public}@
[ML3SetCloudIDImportOperation] Failed to begin import session
[ML3SetCloudIDImportOperation] Importing track data
[ML3SetCloudIDImportOperation] Failed to import track data.
[ML3SetCloudIDImportOperation] Failed to deserialize playlist plist with error: %{public}@
[ML3SetCloudIDImportOperation] Importing playlist data
[ML3SetCloudIDImportOperation] Failed to import playlist data.
[ML3SetCloudIDImportOperation] Failed to commit the import session changes
[ML3SetCloudIDImportOperation] No tracks in cloud-id mapping payload, skipping track import.
[ML3SetCloudIDImportOperation] Failed to import track data
[ML3SetCloudIDImportOperation] Set-cloud-id import operation cancelled
[ML3SetCloudIDImportOperation] Skipping invalid track: %s
[ML3SetCloudIDImportOperation] Failed to import tracks
[ML3SetCloudIDImportOperation] No playlists in cloud-id mapping payload, skipping playlist import.
[ML3SetCloudIDImportOperation] Failed to import playlist data
[ML3SetCloudIDImportOperation] Skipping invalid playlist: %s
[ML3SetCloudIDImportOperation] Failed to import playlists
Failed to create new album for misgrouped track. %{public}@
Failed to update entity revision with newly created album. %{public}@
Failed to update representative item for newly created album. %{public}@
Failed to update item's album column with newly created album. %{public}@
[ML3RemovePlaylistsOperation] Beginning remove playlists operation with source %d (%lu specified playlists)
[ML3RemovePlaylistsOperation] Remove playlists operation success=%d in %.3f seconds
[ML3RemovePlaylistsOperation] Removing all containers from library at path %{public}@
[ML3RemovePlaylistsOperation] failed to remove all containers. err=%{public}@
[ML3RemovePlaylistsOperation] Removing source property %{public}@ from all containers in library at path %{public}@
[ML3RemovePlaylistsOperation] failed to remove source %{public}@ from containers. err=%{public}@
[ML3RemovePlaylistsOperation] failed to remove containers. err=%{public}@
[ML3RemovePlaylistsOperation] Removing source property %{public}@ from container pids %{public}@
[ML3RemovePlaylistsOperation] removing %lu containers that no longer have a remote source. container_pids=%{public}@
[ML3RemovePlaylistsOperation] failed to remove sourceless containers. err=%{public}@
Failed to decode playlist data. err=%{public}@
No helper method can be found for SQLite error code %ld.
Failed to create cloud asset shared cache folder %{public}@ error %{public}@
Clearing cached items created before %@ in the shared cache folder
Failed to retrieve attributes of shared cache file %{public}@ error %{public}@
Failed to remove shared cache temporary file %{public}@ error %{public}@
Returning NULL path from MLMobileUserHomeDirectory for %{public}@
Warning: Empty import operation started.
%{public}@ in %.2f seconds for query with criteria: %{public}@
[ML3StoreItemTrackData] not including item with store identifier:%lld
[ML3StoreItemTrackData] Failed to decode track data. err=%{public}@
[ML3StoreItemTrackData] Error fetching album parent store content for item add. %{public}@
[ML3StoreItemTrackData] unsupported audio trait %{public}@
[ML3StoreItemTrackData] unsupported item kind %{public}@
[ML3StoreImportOperation] failed to start store import transaction. error=%{public}@
[ML3StoreImportOperation] [ML3StoreImportOperation] import operation cancelled=%d success=%d. total time = %.2fs
[ML3StoreImportOperation] failed to begin import session
[ML3StoreImportOperation] importing track data
[ML3StoreImportOperation] failed to import track data.
[ML3StoreImportOperation] importing playlist data
[ML3StoreImportOperation] failed to import playlist data.
[ML3StoreImportOperation] failed to commit the import session changes
[ML3StoreImportOperation] no tracks in store payload. skipping track import.
[ML3StoreImportOperation] found %lu tracks to import
[ML3StoreImportOperation] store import operation cancelled
[ML3StoreImportOperation] failed to import track data
[ML3StoreImportOperation] Skipping invalid track
[ML3StoreImportOperation] failed to import tracks
[ML3StoreImportOperation] no playlists in store payload. skipping playlist import.
[ML3StoreImportOperation] found %lu playlists to import
[ML3StoreImportOperation] failed to add container to import session.
[ML3StoreImportOperation] importing artwork for container %lld using token %@
[ML3StoreImportOperation] no playlist artwork provided in playlist data.
%{public}@
Failed to begin transaction for client %{public}@. %{public}@
Successfully began transaction for client %{public}@ with identifier %{public}@.
Failed to execute update %{public}@. %{public}@
Successfully executed update %{public}@.
Error executing query: %{public}@. %{public}@
Successfully executed query "%{public}@" with %lu rows returned.
Rolling back transaction=%p
Committing transaction=%p
Warning: Tried to end non-existent transaction for local connection.
Error executing database operation for %{public}@: %{public}@
Successfully executed database operation %{public}@ for process %{public}@
Enqueueing %{public}@'s database operation to the service's serial queue: %{public}@. current operation count = %d
Enqueueing %{public}@'s database operation to the service's concurrent queue: %{public}@
Cleaning up any remaining transactions for ended process %{public}@ (process ID = %d)
Cancelling all active transactions.
Cancelling all active database operations.
Cancelling database operations for ended process %{public}@ (process ID = %d). waitUntilFinished=%{BOOL}u
Cancelling operation %{public}@
Zombie process with ID %d tried to start a transaction. It already got a connection, but it's being returned.
Zombie process with ID %d tried to start a transaction.
Warning: Attempted to destroy non-existent transaction. Possible deadlock.
** WARNING ** Writer daemon transaction was watchdogged for %{public}@. Forcing return of connection. %{public}@
%{public}@ - performDatabasePathChange: - newPath =%{public}@
%{public}@ - performDatabasePathChange: - Unable to retrieve remote object proxy - error=%{public}@
%{public}@ - performDatabasePathChange: [done]
%{public}@ - terminateForFailureToPerformDatabasePathChange
%{public}@ - terminateForFailureToPerformDatabasePathChange - Unable to retrieve remote object proxy - error=%{public}@
%{public}@ - setupTaskAssertion: %{public}@
%{public}@ - tearDownTaskAssertion
%{public}@ - setupTimeoutTimerWithcompletion:
_MLChangeObserver - Terminating hanging client %{public}@[%d] [aborted: dead connection]
_MLChangeObserver %p - Terminating hanging client %{public}@[%d]
%{public}@ - tearDownTimeoutTimer
%{public}@ - performDatabasePathChange: - queued - newPath=%{public}@
%{public}@ - performDatabasePathChange: - started
%{public}@ - performDatabasePathChange: - Calling completion block
%{public}@ - Connection interrupted for %{public}@[%d]
%{public}@ - Removing observer for %{public}@[%d]
%{public}@ - Connection invalidated for %{public}@[%d]
%{public}@ - Connecting to %{public}@[%d]
Calculated new run starting for table '%{public}@' at %lli until %lli
Creating a multi-users daemon library resource manager
Creating a multi-users client resource manager
Creating a single library resource manager for the default media folder
Creating a single library resource manager for account info: %{public}@
Creating a single library resource manager with library container: %{public}@
[MLMatchImportOperation] Match import operation cancelled=%d success=%d. total time = %.2fs
failed to process match import data
Media library service %{public}@ closed.
Media library service %{public}@ invalidated.
%{public}@ There was an error waiting for a reply from the media library service. %{public}@
%{public}@ - BLOCKING - Retrieving libraryContainerPath on serial queue: %{public}@
%{public}@ - UNBLOCKED - Retrieved libraryContainerPath on serial queue: %{public}@ - %{public}@
%{public}@ - Received account change notification
%{public}@ - User was logged-out and is still logged-out: nothing to to
%{public}@ - User was logged-in and is still logged-in with the same dsid: nothing to to
%{public}@ - current dsid: %{public}@ - new dsid: %{public}@ - Enqueueing change operation
%{public}@ - Current operations on queue: %{public}@
%{public}@ - Posting notification %{public}@
%{public}@ - accountChangeOperationWillStartPerformingDatabasePathChange - final DSID: %{public}@
ML3UpdateSiriIndexOperation %p - skipping index [missing KVDonator class] databasePath=%{public}@
ML3UpdateSiriIndexOperation %p - starting index validity=%{public}@ databasePath=%{public}@
ML3UpdateSiriIndexOperation %p - indexing userID=%{public}@
ML3UpdateSiriIndexOperation %p - failed to index [failed to get donator] error=%{public}@
ML3UpdateSiriIndexOperation %p - failed to index [invalid dataset stream] type=%{public}@
ML3UpdateSiriIndexOperation %p - calling stream finish
ML3UpdateSiriIndexOperation %p - finished index error: %{public}@
ML3UpdateSiriIndexOperation %p - finished index
ML3UpdateSiriIndexOperation %p - calling stream cancel
ML3UpdateSiriIndexOperation %p - failed to index [call to donate failed] error=%{public}@
ML3UpdateSiriIndexOperation %p - operation complete [success = %{BOOL}u]
ML3UpdateSiriIndexOperation %p - skipping full index [same revision] revision=%lld
ML3UpdateSiriIndexOperation %p - performing full index toRevision=%lld
ML3UpdateSiriIndexOperation %p - addingItem [full] itemID=%{public}@ error: %{public}@
ML3UpdateSiriIndexOperation %p - addingItem [full] itemID=%{public}@
ML3UpdateSiriIndexOperation %p - performing incremental index fromRevision=%llu toRevision=%lld
ML3UpdateSiriIndexOperation %p - addingItem [incremental] itemID=%{public}@ error: %{public}@
ML3UpdateSiriIndexOperation %p - addingItem [incremental] itemID=%{public}@
ML3UpdateSiriIndexOperation %p - deletingItemID [incremental] itemID=%{public}@ error: %{public}@
ML3UpdateSiriIndexOperation %p - deletingItemID [incremental] itemID=%{public}@
Could not delete %{public}s: %{public}@
Could not delete %{public}s: %{public}s
Removed file: %{public}s
[ML3DatabaseRecoveryOperation] Starting recovery operation...
[ML3DatabaseRecoveryOperation] Internal device. Backing up database file for analysis...
[ML3DatabaseRecoveryOperation] Error backing up database file: %{public}@
[ML3DatabaseRecoveryOperation] Successfully backed up database file to %{public}@
[ML3DatabaseRecoveryOperation] Recovery operation complete. err=%{public}@
Asking service to recreate database...
[ML3DatabaseRecoveryOperation] Successfully recreated database at path %{public}@
[ML3DatabaseRecoveryOperation] Failed to recreate database. %{public}@
Failed to register virtual table on connection. Could not register module %{public}@.
Failed to create virtual table on connection %p. %{public}@
Could not unregister virtual table. %{public}@
Failed to end transaction for operation %{public}@. %{public}@
Error creating new transaction for operation %{public}@. %{public}@
Successfully repaired permissions for file %{public}s.
Can't repair database permissions because we are not running as root.
saved %lu id mappings for existing tracks with %{public}@ != 0
saved %lu id mappings for existing containers with %{public}@ != 0
matched to cached item pid %lld in source map %d for import source %d
matched to cached item pid %lld in source map %d
skipping existing item pid %lld with source id %lld that does not match import item source id %lld
matched to item pid %lld using query %{public}@
created new item pid %lld
matched to cached container pid %lld
matched to container pid %lld using query %{public}@
created new container pid %lld
created new person pid %lld
matched to cached person pid %lld
matched to person pid %lld using query %{public}@
starting import session %p. source=%d, itemCount=%d, isReset=%d
disabling triggers for _approximateItemCount=%d
resetting collection data
preparing for a reset
failed to remove source for tracks - aborting
failed to remove source for containers - aborting
sort_map contains at least one NULL name_order, updating now...
no identity property for track import item
no identity property for container import item
adding track %{public}s
pid collision detected - flushing
failed to prepare track data
update track %{public}s
updateTrack called for unknown track
updateTrack ignoring non-existing track with pid %lld
removing track %{public}s
failed to locate track to delete. oh well
removing track %lld
adding container %{public}s
updating container %{public}s
updateContainer called for unknown container
updateContainer ignoring non-existing container with pid %lld
removing container %{public}s
failed to find playlist to delete - ignoring
removing container %lld
failed to delete playlist
adding person %{public}s
flushing %u album insertions
failed to import added albums
flushing %u album artist insertions
failed to import added album artists
flushing %u artist insertions
failed to import added artists
flushing %u composer insertions
failed to import added composers
flushing %u genre insertions
failed to import added genres
flushing %u track insertions
flushing %u track updates
failed to import added tracks
flushing %lu track deletes
failed to process deletes
flushing %u playlist insertions
failed to import added playlists
flushing %u playlist updates
failed to import updated playlists
flushing %u person insertions
failed to flush added persons
flushing %u person updates
failed to flush updated persons
flushing %u booklet updates
failed to flush booklets
flushing %u booklet deletes
failed to remove deleted booklets
failed to re-enable triggers
ImportSession: error removing tracks from library. %{public}@
Prepared %lu tracks for automatic download.
Database import failed.
Database container import failed.
failed to finalize container items for automatic download.
Database container item import failed.
Failed to import container item person entries
Failed to delete container_item_person items. err=%{public}@
Will clear keep local for %d playlist items
Failed to update keep_local for container_items. err=%{public}@
Database person import failed.
Database booklet import failed.
Failed to delete booklet items. err=%{public}@
failed to prepare track sort data
failed to prepare item artwork
failed to prepare item screenshot
failed to prepare item secondary source artwork
Failed to update tracks for automatic download: %@
Failed to update containers for automatic download: %{public}@
Error executing import virtual table insert statement. %{public}@
Could not register virtual table %{public}@ on connection %p.
Data source %{public}@ took %.2fs to import
finishing import
removing %lu tracks not re-added by the reset import
failed to remove remaining tracks
removing %lu containers not re-added by the reset import
failed to delete container %lld
re-building indexes after large import
failed to re-create indexes
failed to perform ANALYZE
failed to apply finishing collection changes
failed to commit sort map changes
inserting %lu tracks into purchase playlist
failed to update purchased playlist
re-trying %lu orphaned playlists
failed to find parent of orphaned container. container_pid=%lld, parentSourceId=%lld
updating contains_classical_work for album %lld
updating all_compilations for album %lld
Checking for Duplicate Videos...
Duplicate Videos Detected after source %d import!
No Duplicate Videos found after source %d import.
finished import session %p in %.2f seconds
    tracks: %d adds %d updates %d deletes
    containers: %d adds %d updates %d deletes
    persons: %d adds %d updates %d deletes
gathered collection pids: artistPID=%lld, albumArtistPID=%lld, composerPID=%lld, genrePID=%lld, albumPID=%lld
Insert/replace artwork_token: pid=%lld entity_type=%d source=%d type=%d token=%{public}@
Delete artwork_token: pid=%lld entity_type=%d source=%d type=%d
failed to update artwork_token entry for track. track_pid=%lld
insert/replace booklet: pid=%lld (%{public}s) item_pid=%lld, name=%{public}s, store_item_id=%lld
delete booklet: pid=%lld, item_pid=%lld
failed to update representative item pids
failed to canonicalize collection representative item pids
failed to de-orphan collections
failed to update entity revisions
No existing artist PID for update item %lli
creating new artist entry: pid=%lld, name='%{public}s', sortName='%{public}s', series='%{public}s', sortSeries='%{public}s'
No existing albumArtist PID for update item %lli
creating new album_artist entry: pid=%lld, name='%{public}s', sortName='%{public}s', ulid='%{public}s'
No existing album PID for update item %lli
contains_classical_work differs for album %lld
is_compilation differs for album %lld
creating new album entry: pid=%lld, name='%{public}s', sortName='%{public}s', artistId=%lld
creating new composer entry: pid=%lld, name='%{public}s', sortName='%{public}s'
creating new genre entry: pid=%lld, name='%{public}s'
failed to process sort strings
failed to prepare container artwork
failed to prepare container secondary source artwork
couldnt find parent container with source id %lld - deferring mapping until the end
dropping trigger: %{public}@
failed to drop trigger
enabling triggers
failed to re-create triggers
preparing container_items for container %{public}s
failed to map itemSourceID=%lld for container %{public}s
deleting container_item with persistent-id: %lld
mapped item at position %lld to existing container_item with pid %lld (update position: %lld -> %lld)
creating new container_item for item at position %lld
mapped %d/%d items for container %s
no container items for container %s
Failed to look up person_pid for identifier %s
(enumerateRowsWithBlock:) SQLite was %s after %u retries. %{public}@
Attempting corruption recovery using disk IO recovery routine
[%{public}@] Error while enumerating rows for statement %{public}@. %{public}@
Failed to encode DAAP file paths with error: %{public}@
[%{public}@] %{public}@
Could not truncate database at path: %{public}@. %{public}s (%d)
** COULD NOT DELETE DATABASE! **
MusicLibrary couldn't create a SQLite handle to truncate.
Could not copy database file at path %{public}@. %{public}@
failed to map container_seed item_pid %lld
[ML3ITunesSyncImportOperation] failed to start transaction. error=%{public}@
[ML3ITunesSyncImportOperation] import operation cancelled=%d success=%d. total time = %.2fs
failed to deserialize track data. err=%{public}@
failed to process track data
committing import session changes
unsupported import data. importData=%{public}@
processing plist files: %{public}@
received invalid sync operation %{public}@
failed to process sync operation '%{public}@'
processing playlist changes
failed to process playlist %{public}@
resetting play counts
aborting cancelled sync
Could not read %{public}@: %{public}@
No operations in %{public}@
Invalid sync plist at %{public}@
_processSyncOperation %{public}@
got unhandled sync operation %{public}@
Ignoring empty track update.
Got delete_track for with invalid pid: %{public}@
failed to delete track. pid=%lld
DBInfo values: %{public}@
Updated dbInfo: %{public}@
Could not update dbInfo: %lld
failed to add playlist
failed to update playlist
failed to remove playlist
Asset path differs for pid %lld. ours=%{public}@, theirs=%{public}@
No longer have asset for pid %lld. filePath=%{public}@
recoverExistingAsset called with unknown track pid %lld
Got update_db_info with invalid pid: %{public}@
Unexpected genius config format: %{public}@
Unexpected DSID/AppleID pair format: %{public}@/%{public}@
Unexpected AppleID config format: %@
No valid genius_config found in: %{public}@
Updated Genius configuration: %{public}@
Failed to update Genius configuration: %{public}@
[MaintenanceTasksOperation] Skipping maintenance because no file exists at path '%{public}@'
[MaintenanceTasksOperation] Removing orphaned tracks before %{public}@
[MaintenanceTasksOperation] Removing orphaned assets
[MaintenanceTasksOperation] Cleaning up artwork for maintenance activity.
[MaintenanceTasksOperation] Start maintenance activity to convert existing artwork to ASTC.
[MaintenanceTasksOperation] Start maintenance activity to prune unused metadata
[MaintenanceTasksOperation] Rebuilding collections (itemAlbumCount=%lld, totalAlbumCount=%lld, itemAlbumArtistCount=%lld, totalAlbumArtistCount=%lld, itemItemArtistCount=%lld, totalItemArtistCount=%lld)
[MaintenanceTasksOperation] Rebuilding sort map (usedSortMapEntryCount=%lld, totalSortMapEntryCount=%lld)
[MaintenanceTasksOperation] All maintenance completed.
[MaintenanceTasksOperation] Failed to set state of maintenance activity to DONE.
%{public}@ Failed to resolve altDSID for DSID %lld. err=%{public}@
%{public}@ Failed to update the account database with DSID %lld. err=%{public}@
%{public}@ Failed to query the account table. err=%{public}@
%{public}@ Failed to update the account database with DSID %lld, resolvedAltDSID %@. err=%{public}@
%{public}@ - performDatabasePathChange: - newPath=%{public}@ Observers=%{public}@
%{public}@ - performDatabasePathChange: - Calling completion block - newPath=%{public}@
%{public}@ - emergencyDisconnectWithCompletion - Observers: %{public}@
%{public}@ - emergencyDisconnectWithCompletion - Calling completion block
%{public}@ - terminateForFailureToPrepareForAccountChange - Observers: %{public}@
%{public}@ - addAccountChangeObserver: %{public}@
Database validation succeeded
Database validation FAILED with error: %{public}@
[ML3UpdateSpotlightIndexOperation] Operation %p started for bundleID %{public}@
[ML3UpdateSpotlightIndexOperation] Index update operation will process %lu items for content updates and deletes
[ML3UpdateSpotlightIndexOperation] Indexed client state fetch failed, failing the operation.
[ML3UpdateSpotlightIndexOperation] Indexed database revision and client library revision (%lld) are the same, no index update needed
[ML3UpdateSpotlightIndexOperation] Revisions differ, indexed:%lld current:%lld, updating index with delta changes
[ML3UpdateSpotlightIndexOperation] Indexed client state %lld is invalid (current library state is: %lld), wiping the index and re-indexing everything
[ML3UpdateSpotlightIndexOperation] Indexed client state has an index version (%lld) that's not the current (%lld), wiping the index and re-indexing everything
[ML3UpdateSpotlightIndexOperation] Indexed client state is invalid or indexed library differs from the current library, wiping the index and re-indexing everything. Fetched client state: %{public}@
[ML3UpdateSpotlightIndexOperation] No client state indexed, it's a fresh start. Wiping the index and indexing everything
[ML3UpdateSpotlightIndexOperation] **The operation was cancelled before the indexed client state was evaluated**
[ML3UpdateSpotlightIndexOperation] Index update operation %p finished successfully in %.3f seconds
[ML3UpdateSpotlightIndexOperation] Index update operation %p failed in %.3f seconds
[ML3UpdateSpotlightIndexOperation] Checking for updates and deletes for the received identifiers
[ML3UpdateSpotlightIndexOperation] Will index items with initial revision %lu target revision %lu
[ML3UpdateSpotlightIndexOperation] **The operation was cancelled. Stopping searchable item creation**
[ML3UpdateSpotlightIndexOperation] **The operation was cancelled. Skipping searchable item creation.**
[ML3UpdateSpotlightIndexOperation] Finished items index batch
[ML3UpdateSpotlightIndexOperation] Deleting all indexed items
[ML3UpdateSpotlightIndexOperation] Delete all called in spotlight index for bundle ID %{public}@ called
[ML3UpdateSpotlightIndexOperation] Failed to delete spotlight items
[ML3UpdateSpotlightIndexOperation]  
  Started to delete items
[ML3UpdateSpotlightIndexOperation]  
  Successfully deleted %lu spotlight index items
[ML3UpdateSpotlightIndexOperation]  
  Failed to delete spotlight items
[ML3UpdateSpotlightIndexOperation]  
  Started to index track items
[ML3UpdateSpotlightIndexOperation]  
  Updated %lu track items in spotlight index with bundle ID:%@
[ML3UpdateSpotlightIndexOperation]  
  Failed to index spotlight track items
[ML3UpdateSpotlightIndexOperation]  
  Started to index playlists
[ML3UpdateSpotlightIndexOperation]  
  Updated %lu playlists in spotlight index with bundle ID:%{public}@
[ML3UpdateSpotlightIndexOperation]  
  Failed to index spotlight playlists
[ML3UpdateSpotlightIndexOperation]  
 Beginning Core Spotlight index batch %lu for operation %p
[ML3UpdateSpotlightIndexOperation]  
  Updating indexed client state and fininshing index batch %lu with client state data size: %lu
[ML3UpdateSpotlightIndexOperation]  
  Client state updated with revision:%{public}@, target revision:%{public}@, version:%{public}@
[ML3UpdateSpotlightIndexOperation]  
 Successfully finished Core Spotlight batch operation in %.3f seconds for operation %p
[ML3UpdateSpotlightIndexOperation] Failed to update client state
[ML3UpdateSpotlightIndexOperation]  
 FAILED Core Spotlight batch operation in %.3f seconds
[ML3UpdateSpotlightIndexOperation]  
  Attempted to enumerate searchable items without block, returning
[ML3UpdateSpotlightIndexOperation]  
  Evaluating the need of batching for database fetch
[ML3UpdateSpotlightIndexOperation]  
  Library fetch batching is needed, fetching from the DB in chuncks of %lu
[ML3UpdateSpotlightIndexOperation]  
  Failed to create searchable items batch with library fetch batching
[ML3UpdateSpotlightIndexOperation]  
  Created searchable items batch with library fetch batching
[ML3UpdateSpotlightIndexOperation]  
  Failed to create searchable items
[ML3UpdateSpotlightIndexOperation]  
  Created searchable items batch
[ML3UpdateSpotlightIndexOperation]  
  Searchable item creation is done
[ML3UpdateSpotlightIndexOperation]  
  Some playlists might contain Music Shows & Movies items only, investigating...
[ML3UpdateSpotlightIndexOperation]  
  Found %ld playlists with Music Shows & Movies items only. Adding them to the searchable items array
[ML3UpdateSpotlightIndexOperation]  
  Finished searchable items creation
[ML3UpdateSpotlightIndexOperation]  
  Creating searchable items for tracks
[ML3UpdateSpotlightIndexOperation]  
  Skipping library item with invalid media type
[ML3UpdateSpotlightIndexOperation]  
  Failed to decode movie info plist with error: %{public}@
[ML3UpdateSpotlightIndexOperation]  
  Creating searchable items for playlists
[ML3UpdateSpotlightIndexOperation] Trying get the current index version from an unknown bundle
[ML3UpdateSpotlightIndexOperation] Trying create an index name with an unknown bundle
[ML3UpdateSpotlightIndexOperation] Trying to build searchable items with an unknown bundle id
%{public}@ - Missing delegate - unable to perform operation
%{public}@ - No account change operation to perform - reason=%{public}@
%{public}@ - Starting account change operation from %{public}@ to %{public}@
%{public}@ - Active account changed - Performing dabase path change with observer %{public}@
%{public}@ - Active account changed - Database path change is complete: %{public}@
[ML3RemoveTracksOperation] Beginning remove tracks operation with source %d (%lu specified tracks)
[ML3RemoveTracksOperation] Remove tracks operation success=%d in %.3f seconds
[ML3RemoveTracksOperation] Removing source: %d from entire library
[ML3RemoveTracksOperation] Removing source: %d, failed to set %@ to %@ with error: %@
[ML3RemoveTracksOperation] Found %lu tracks to unlink with asset protection type = %d
[ML3RemoveTracksOperation] Deleting assets due to remove cloud library source:%{public}@
[ML3RemoveTracksOperation] Removing source: %d, failed to clear location for tracks with asset protection type = %d
[ML3RemoveTracksOperation] Removing source: %d, failed to remove source properties: %{public}@
with error: %@
[ML3RemoveTracksOperation] Removing source: %d, deleting %lu tracks, purging %lu assets
[ML3RemoveTracksOperation] deleting batch of %lu tracks
[ML3RemoveTracksOperation] Removing source: %d, failed to delete purged tracks
[ML3RemoveTracksOperation] Deleting assets due to remove source:
[ML3RemoveTracksOperation] %{public}@
[ML3RemoveTracksOperation] clear location for batch of %lu purged tracks
[ML3RemoveTracksOperation] Removing source: %d, failed to clear location for purged tracks
[ML3RemoveTracksOperation] Deleting all non-library tracks from playlists (removing source match)
[ML3RemoveTracksOperation] Removing source: %d, success=%d
[ML3RemoveTracksOperation] removing source %d from %lu tracks
[ML3RemoveTracksOperation] enumeratePathsToDeleteFromLibrary: %lld
[ML3RemoveTracksOperation] deleting %lu tracks
[ML3RemoveTracksOperation] failed to delete purged tracks
[ML3RemoveTracksOperation] Removing potential non-library tracks from all containers: %{public}@
[ML3RemoveTracksOperation] Keeping asset for track %llu because it is ATPWATL
[ML3RemoveTracksOperation] purging %lu assets
[ML3RemoveTracksOperation] failed to clear location for purged tracks
Database connection pool %{public}@ is closed. You may no longer use it.
Database connection subpool %{public}@ received database deletion notification.
Database connection subpool %{public}@ received HomeSharing caches cleared notification.
Connection subpool %{public}@ closing all connections.
Error fetching language resources. (Error = %{public}@) Falling back to building resources in-process.
Connection %{public}@ attempting to open database at %{public}@ _isReadOnly=%{BOOL}u, isDeviceMediaLibraryDatabase=%{BOOL}u, isMediaLibraryDeamon=%{BOOL}u, canCreateDatabase=%{BOOL}u, openFlags=%d,
Connection %{public}@ is readOnly, creating DB is NOT allowed and database file doesn't exist at %{public}@
Connection %{public}@ could not enable SQLITE_FCNTL_PERSIST_WAL option, result %d
Warning: connection %{public}@ could not enable WAL journal mode. %{public}s, result %d
Connection %{public}@ could not disable SQLITE_FCNTL_PERSIST_WAL option, result %d
Warning: connection %{public}@ could not update journaling mode to DELETE. %{public}s, result %d
Warning: connection %{public}@ could not set cache size. %{public}s, result %d
SQLite error %d detected while opening database '%{public}s'
[%@] Unable to open database connection to path %{public}@. %{public}s
failing update request in a transaction marked for rollback. sql=%{public}@
Warning: unable to begin transaction on connection: %{public}@
Warning: unable to end transaction on connection %{public}@
Warning: attempted to end a non-existent transaction.
Error registering module: %{public}@. %{public}@
Could not checkpoint WAL file. %{public}s
[%{public}@] 
 Database Corruption Detected 
Attempting database recovery...
Database recovery was reported to be successful.
Database recovery failed. %{public}@
DISK IO ERROR: attempting to close and re-open connection for recovery.
[_handleDiskIOError] failed to close database connection
[_handleDiskIOError] checking database consistency
[_handleDiskIOError] Database integrity check passed.
[_handleDiskIOError] Database integrity check failed - treating as corrupted
[_handleDiskIOError] failed to re-open database connection
[_handleDiskIOError] failed to restart transaction after re-opening database connection
[_handleDiskIOError] successfully recovered from disk IO error
[_handleDiskIOError] FAILED TO HANDLE DISK IO ERROR
[_handleDiskIOError] unlink successful. performing coordinated termination.
[_handleDiskIOError] unlink successful.
[_handleDiskIOError] failed to delete SHM file from disk (errno = %d)
[_handleDiskIOError] SHM file not found
unable to unlink
Enabling authorizer failed: %d, connection: %p
Enabling defensive mode failed: %d, connection: %p
Disabling defensive mode failed: %d, connection: %p
Disabling authorizer failed: %d, connection: %p
(%s) SQLite was %s after %u retries. %{public}@
Disk IO error detected while preparing statement %{public}@
Disk IO error detected while executing statement %{public}@
Database corruption detected while executing statement %{public}@
Error beginning transaction on connection: %{public}@. %{public}@
Error ending transaction on connection: %{public}@. %{public}@
Error preparing statement SQL. "%{public}@" %{public}@
[%{public}@] Database error while %{public}@ statement '%{public}@': %{public}@
[%{public}@] Database error: %{public}@
** Information about database file at path %{public}@
lastError = %{public}@
writable = %{public}s
attributes = %{public}@
Error fetching attributes from database file. %{public}@
Database connection was unable to close SQLite handle %p. Attempting to clean up remaining resources and close again. (connection = %{public}@)
Cleaning up unfinalized statement %p.
Failed to finalize statement %p. %s (%d)
Reattempting close of connection...
Successfully closed connection.
Failed to close connection.
SQLITE_ATTACH: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DETACH: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_PRAGMA: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_ALTER_TABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_ANALYZE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_INDEX: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TEMP_INDEX: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TEMP_TABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TEMP_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TEMP_VIEW: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_VIEW: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_CREATE_VTABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_INDEX: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TEMP_INDEX: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TEMP_TABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TEMP_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TEMP_VIEW: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_TRIGGER: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_VIEW: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DROP_VTABLE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_REINDEX: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_DELETE: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_INSERT: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_READ: %{public}s, param1=%{public}s, param2=%{public}s
SQLITE_UPDATE: %{public}s, param1=%{public}s, param2=%{public}s
Unknown action %d: %{public}s
Successfully began transaction with ID %{public}@
Could not begin transaction on distant connection: %{public}@. %{public}@
The connection asking for a new transaction disappeared. Attempting to cancel the begun transaction...
Reattempting to begin transaction with media library service...
Reattempt to begin transaction succeeded. Proceeding with new transaction ID %{public}@.
Reattempt to begin transaction failed.
Successfully ended transaction with ID %{public}@
Could not end transaction on distant connection: %{public}@. %{public}@
Could not execute update on distant connection: %{public}@. %{public}@
No valid transaction ID for connection %{public}@
Service terminated distant transaction with error: %{public}@
Distant result fetch failed. Trying to fallback to a local connection...
Could not fallback to local connection. Local result could not be obtained from query. %{public}@
Could not fallback to local connection. Result does not have a connection or a pool reference. %{public}@
ERROR: Tried to fetch distant result set without a connection.
ERROR: Tried to fetch distant result set without a transaction ID. (Connection used: %{public}@)
Could not fetch results for distant result set. %{public}@
[ML3SubscriptionImportOperation] Subscription import operation cancelled=%d success=%d. total time = %.2fs
[ML3SubscriptionImportOperation] failed to process import data
[ML3SubscriptionImportOperation] successfully processed import data
!!! ML3 raised exception while exceptions were disabled: %{public}@
failing to enque statement inside a transaction marked for rollback. sql=%{public}@
Error flushing statements in accumulator: %{public}@
%{public}@ - libraryContainerPath - Using the service to retrieve libraryContainerPath
%{public}@ - libraryContainerPath - Fatal error retrieving library container path [throwing] - error=%{public}@
%{public}@ - libraryContainerPath - Using the cached path
%{public}@ - libraryContainerPath - Retrieved path: %{public}@
%{public}@ - performDatabasePathChange: - newPath=%{public}@ - No-Op
%{public}@ - emergencyDisconnectWithCompletion: - Wiping cached media folder path: %{public}@
Failed to unarchive data for artwork_token %{public}@. err=%{public}@
Failed to archive interest data for artwork_token %{public}@.
starting proto export session. numOperations=%d
finished export session: %d bytes, %d add_tracks, %d delete_tracks, %d add_playlists, %d delete_playlists in %.2f seconds
failed to write package len. err=%{public}@
failed to write package data. err=%{public}@
softlink:r:path:/System/Library/PrivateFrameworks/StoreBookkeeperClient.framework/StoreBookkeeperClient
softlink:r:path:/System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud
softlink:r:path:/System/Library/PrivateFrameworks/iTunesCloud.framework/iTunesCloud
softlink:o:path:/System/Library/PrivateFrameworks/Koa.framework/Koa
ML3AccountStore
_MSVAccountInformationProviding
NSObject
ML3DatabaseForeignKeyConstraint
ML3UpdateArtworkInterestDataOperation
InsignificantCharacterFiltering
ImportSanity
ML3ArtworkTokenSet
MLEQPreset
ML3ProcessClient
ML3DatabaseColumn
MIPTVShow
NSCopying
ML3Additions
MIPSong
ML3ServiceDatabaseImport
ML3MigrationDirectives
VideoSnapshot
ML3ItemExtraTable
ML3DatabaseTable
NSMutableCopying
ML3MutableDatabaseTable
MIPLibraryIdentifier
ML3DAAPImportOperation
ML3DatabasePrivacyContext
NSSecureCoding
NSCoding
ML3ActiveTransaction
NSLocking
ML3MusicLibraryResourcesManagerContext
ML3DatabaseFunction
ML3DatabaseFunctionBlock
ML3DatabaseFunctionPointer
ML3PersonTable
ML3Entity
ML3ClientImportServiceSession
ML3AlbumArtistTable
ML3MusicLibrary
ML3DatabaseConnectionDelegate
ML3DatabaseConnectionPoolDelegate
ML3ClientImportItem
ML3Track
ML3PredicateOptimizing
MIPPodcast
ML3Comparing
ML3PurchaseHistoryImportOperation
ML3TerminationCoordinator
ML3ContainerTable
ML3MusicLibraryAdditions
ML3Query
ML3QueryAdditions
ML3Artist
ML3ArtistAdditions
ML3GenreTable
MIPPlaybackInfo
ML3ProcessDownloadedAssetsOperation
ML3Album
ML3AlbumAdditions
Validation
ML3MusicLibrary_SortMapEntry
SortMap
ML3SortMap
ML3SortMapFaultingEntryArray
_ML3SortMapFaultingNameOrderDictionaryEnumerator
ML3SortMapFaultingNameOrderDictionary
ML3HomeSharingImportOperation
ML3Predicate
ML3TruthPredicate
ML3UnaryPredicate
ML3NegationPredicate
ML3PropertyPredicate
ML3ContainmentPredicate
ML3ComparisonPredicate
ML3ContainsPredicate
ML3PersistentIDsPredicate
ML3BitMaskPredicate
ML3SearchStringPredicate
ML3CompoundPredicate
ML3AllCompoundPredicate
ML3AnyCompoundPredicate
ML3ConditionalPredicate
ML3QuerySection
ML3Collection
ML3AggregateQuery
ML3AggregateQueryAdditions
ML3ComposerTable
SchemaUtilities
ML3Genre
ML3GenreAdditions
ML3ExportItem
ML3Container
ML3ContainerAdditions
ML3ContainerQuery
ML3ContainerQueryAdditions
ML3ProtoSyncImportOperation
ML3ChapterTOC
ML3ContainerItemPerson
_ML3MultiUserAccountChangeOperation
MLMediaLibraryResourcesServiceXPCProtocol
MLMediaLibraryAccountChangeObserver
MLMediaLibraryResourcesServiceClient
MLMediaLibraryResourcesServiceProtocol
ML3DatabaseValidation
ML3ItemStatsTable
MIPGenre
ML3Composer
ML3ComposerAdditions
ML3AlbumArtist
ML3AlbumArtistAdditions
ML3ContainerItemDiffMetadata
ML3ContainerItemDiffOperation
ML3DatabaseImportManager
ML3StoreLink
ML3BaseLocation
ML3ChapterTable
ProcessingAdditions
ML3ArtworkAdditions
ML3ArtworkConfiguration
_ML3ArtworkConfigurationMediaArtworkTypeKey
ML3DatabaseStatementCache
ML3StatementCacheNode
ML3StatementCacheList
MusicLibraryAdditions
MIPSeries
MIPPlaylist
MLTrackImportChapter
ML3DaemonClient
MLMovieProperties
MLMovieArtist
ML3MigrationAddedColumn
MIPSmartPlaylistInfo
MLContentRating
MLITDBGeniusDatabase
MLGeniusPlaylistController
ML3ClientImportSessionXPCInterface
ML3ClientImportServiceSessionXPCInterface
ML3ClientImportSession
MIPAudiobook
ML3TrackImporter
MLITChapterTOCMethods
MLITChapterTOC
ML3ItemKVSTable
MIPAlbum
CacheManagement
Artwork
ML3DatabaseModule
MIPMovie
Schema
UbiquitousDatabase
ML3SetValuesForPropertiesOperation
ML3DatabaseMetadata
ML3ItemTable
ML3NameOrderAdditions
MSPMediaSyncError
MSPMediaSyncPackage
ML3AccountTable
ML3SetCloudIDImportOperation
ML3MigrationMisgroupedTrack
ML3MigrationMisgroupedAlbum
ML3ItemStoreTable
ML3ItemSearchTable
ML3RemovePlaylistsOperation
MSPMediaSyncHeader
ML3StoreItemPlaylistData
ML3AlbumTable
ML3Booklet
ML3ImportPersistentIDGenerator
MSPMediaSyncOperation
ML3DatabaseException
ML3Resources
ML3ImportOperation
ML3BookletTable
ML3DatabaseNaturalStatement
MIPMultiverseIdentifier
ML3QueryResultSet_BackingStore
ML3QueryResultSet_MutableBackingStore
ML3QueryResultSet
ML3ContainerQueryResultSet
ML3ItemVideoTable
ML3LibraryNotificationManager
MSVDistributedNotificationObserverDelegate
ML3ArtistTable
ML3OrderingTerm
ML3StoreItemTrackData
ML3StoreImportOperation
ML3Client
ML3MediaLibraryWriter
Saga
ML3ExportSession
MLMediaTypeCountedSet
ML3SpotlightNameCache
ML3SpotlightMatchingNameCache
ML3SpotlightMatchPredicate
SpotlightAdditions
_MLChangeObserver
MLMediaLibraryResourcesServiceServer
NSXPCListenerDelegate
MLTransactionContext
MLMediaLibraryServiceProtocol
MLMediaLibraryServiceClientProtocol
MLMediaLibraryServiceInterface
MLProtocol
ML3PersistentIDGenerator
ML3MusicLibraryResourcesManager
ML3MusicLibraryResourcesProviding
ML3MatchImportOperation
MLMediaLibraryService
ML3LyricsTable
ML3ProtoSyncExportItem
_ML3MultiUserDaemonMusicLibraryResourcesManager
_ML3MultiUserDaemonAccountChangeOperationDelegate
MLUnitTestingAdditions
ML3UpdateSiriIndexOperation
Jalisco
ML3DatabaseRecoveryOperation
ML3VirtualTable
ML3DatabaseModuleContext
ML3Person
ML3DatabaseOperation
ML3AlbumGroupingIdentifier
ML3DatabaseResult
ML3DatabaseRow
ML3DatabaseStatement
ML3DatabaseDatatypesBridge
ML3DatabaseStatementRenderer
ML3ContainerItem
ML3DatabaseImport
ML3MutableDatabaseImport
Insertions
Transactions
ML3BulkStatementExecutionOperation
ML3MatcherAuxData
ML3ClientImportSessionConfiguration
ML3DatabaseBlob
ML3CloudKVSTable
ML3ITunesSyncImportOperation
ML3ContainerSeedTable
MLChapterTOC
ML3ClientImportResult
ML3MaintenanceTasksOperation
ML3AccountCacheEntry
ML3AccountCacheDatabase
ML3MusicLibraryAccountChangeObserverProxy
ML3DatabaseValidationClient
_ML3ValidatableDatabase
ML3ContainerItemPersonTable
ML3UpdateSpotlightIndexOperation
_ML3MultiUserDaemonAccountChangeOperation
ML3RemoveTracksOperation
ML3DatabaseConnectionPool
_ML3DatabaseConnectionWrapper
_ML3DatabaseConnectionSubPool
_ML3DatabaseConnectionPoolDiagnostic
_ML3MutableDatabaseConnectionPoolDiagnostic
ML3ItemPlaybackTable
ML3LanguageResources
ML3LanguageResourceManager
ML3DatabaseConnection
ML3Account
ML3DatabaseDistantConnection
SmartPlaylistDebug
ML3DatabaseDistantResult
ML3ContainerItemTable
MIPArtist
ML3SubscriptionImportOperation
MLException
ML3StatementAccumulator
_ML3BaseMusicLibraryResourcesManager
_ML3MultiUserMusicLibraryResourcesManager
MIPMediaItem
ML3Artwork
ML3DatabaseCachedRow
ML3ProtoSyncExportSession
setRemoteObjectInterface:
setDisplayName:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
addObserverForName:object:queue:usingBlock:
intersectSet:
stringByTrimmingCharactersInSet:
serviceForSyncDomain:
initWithListenerEndpoint:
setWithArray:
addOperation:
hasProtectedContent
enumerateIndexesUsingBlock:
invalidate
initWithLocaleIdentifier:
presentWithCompletion:
addOperationWithBlock:
setWithCapacity:
setLocal:
enumerateKeysAndObjectsUsingBlock:
removeObject:
initWithLongLong:
setLocale:
setWithObject:
invertedSet
addOrUpdateItem:error:
audioTraits
setWithObjects:
initWithMachServiceName:options:
enumerateObjectsUsingBlock:
stringFromDate:
addTimer:forMode:
initWithMaximumCapacity:
priorVersion
removeObjectsAtIndexes:
copy
isAbsolutePath
isActive
unsignedIntValue
removeObjectsInArray:
initWithMetadataDictionary:
auditToken
setAdamID:
unsignedIntegerValue
deleteAllSearchableItemsWithCompletionHandler:
stringWithCapacity:
removeObserver:
processIdentifier
isApplication
setAlertHeader:
albumArtistItemWithName:itemId:
unsignedLongLongValue
copyItemAtPath:toPath:error:
stringWithContentsOfFile:encoding:error:
processInfo
setRequestContext:
setAlertMessage:
isCancelled
pathComponents
removeObserver:name:object:
stringWithFormat:
initWithName:
setMaxConcurrentOperationCount:
processName
indexGreaterThanIndex:
setAlternateButtonTitle:
pathExtension
stringWithString:
indexOfObject:
stringWithUTF8String:
albumItemWithName:itemId:albumArtistId:
setAlternateNames:
indexOfObject:inSortedRange:options:usingComparator:
pathForResource:ofType:
stringWithValidatedFormat:validFormatSpecifiers:error:
formerStoreAdamIDs
sharedConnection
indexOfObjectPassingTest:
strongToStrongObjectsMapTable
progressWithTotalUnitCount:
deletePlaybackPositionEntity:
countByEnumeratingWithState:objects:count:
setMediaTypes:
closeFile
allItems
subarrayWithRange:
pathWithComponents:
setScheme:
indexSearchableItems:completionHandler:
allKeys
updateForeignDatabaseWithValuesFromPlaybackPositionEntity:
availableChapterLocales
indexSet
deleteSearchableItemsWithIdentifiers:completionHandler:
enumerateRangesUsingBlock:
allKeysForObject:
generateCGImagesAsynchronouslyForTimes:completionHandler:
initWithName:object:userInfo:
indexSetWithIndex:
isEqualToArray:
initWithName:pid:bundleID:subsystem:reason:flags:
isEqualToData:
setAttributes:ofItemAtPath:error:
isEqualToNumber:
initWithName:protectionClass:bundleIdentifier:
initWithObjects:
allObjects
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
setExportedInterface:
beginIndexBatch
isEqualToString:
setMusicalGenre:
dictionary
propertyListWithData:options:format:error:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
enumeratorAtPath:
initWithObjects:count:
setExportedObject:
initWithObjectsAndKeys:
beginTransaction
createFileAtPath:contents:attributes:
loadValuesAsynchronouslyForKeys:completionHandler:
enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:
substringFromIndex:
initWithOptions:
replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:
localName
genreItemWithName:itemId:
setExtendedContentRating:
substringWithRange:
dictionaryWithCapacity:
initWithOrderedSet:
localeIdentifier
setAudioTrackNumber:
dictionaryWithContentsOfFile:
shortValue
replaceOccurrencesOfString:withString:options:range:
getCString:maxLength:encoding:
localeWithLocaleIdentifier:
dictionaryWithContentsOfURL:
localizedDescription
initWithOutputStream:queue:
initWithArtworkResponseDictionary:
dictionaryWithDictionary:
localizedStringForKey:value:table:
punctuationCharacterSet
allValues
getCharacters:range:
dictionaryWithObject:forKey:
allocWithZone:
dictionaryWithObjects:forKeys:count:
isMainThread
shouldValidateDatabaseForLibrary:
code
dictionaryWithObjectsAndKeys:
performWithResponseHandler:
blockOperationWithBlock:
initWithBytes:objCType:
errorWithDomain:code:userInfo:
allowsKeyedCoding
alphanumericCharacterSet
sizeInfo
boolForKey:
initWithBytesNoCopy:length:
currentHandler
initWithBytesNoCopy:length:encoding:freeWhenDone:
boolValue
initWithBytesNoCopy:length:freeWhenDone:
currentLocale
ams_automaticDownloadKinds
exceptionWithName:reason:userInfo:
resume
currentProcess
getObjects:andKeys:count:
synchronize
initWithCapacity:
skipDescendants
longValue
uppercaseString
collectionStoreAdamID
synchronousRemoteObjectProxyWithErrorHandler:
initWithPlaybackPositionDomain:ubiquitousIdentifier:foreignDatabaseEntityID:
getResourceValue:forKey:error:
queryItemWithName:value:
bundleForClass:
setByAddingObject:
setObject:atIndexedSubscript:
initWithCharacters:length:
currentThread
lowercaseString
getValue:
setByAddingObjectsFromArray:
distantPast
initWithCharactersNoCopy:length:freeWhenDone:
systemLocale
setObject:forKeyedSubscript:
anyObject
appendBytes:length:
notifyToken
null
bundlePath
distributedName
mainBundle
snapshotWithDomain:type:subType:context:triggerThresholdValues:events:completion:
appendData:
isSubclassOfClass:
setClasses:forSelector:argumentIndex:ofReply:
appendFormat:
bundleWithIdentifier:
mainRunLoop
userInfo
bundleWithPath:
setStreamable:
doesNotRecognizeSelector:
domain
buttonIdentifier
songArtistItemWithName:itemId:
matchesUTF8String:
songItemWithName:itemId:albumArtistId:songArtistId:albumId:genreId:
playbackPositionDomain
bytes
numberOfRanges
appendString:
domainForSyncingMusicLibraryWithLibraryPath:
maxSupportedSize
numberWithBool:
raise:format:
donateWithOptions:version:validity:usingStream:
URLAssetWithURL:options:
threadDictionary
numberWithDouble:
handleFailureInFunction:file:lineNumber:description:
dataUsingEncoding:
donatorWithItemType:originAppId:error:
isWritableFileAtPath:
rangeAtIndex:
numberWithInt:
setPath:
URLByAppendingPathComponent:
time
handleFailureInMethod:object:file:lineNumber:description:
rangeOfCharacterFromSet:
itemId
archivedDataWithRootObject:requiringSecureCoding:error:
donatorWithItemType:originAppId:userId:error:
dataValue
commonKey
numberWithInteger:
URLByDeletingLastPathComponent
timeIntervalSince1970
rangeOfCharacterFromSet:options:
dataWithBytes:length:
setPerformers:
initWithContentType:
URLByDeletingPathExtension
numberWithLong:
array
rangeOfCharacterFromSet:options:range:
dataWithBytesNoCopy:length:freeWhenDone:
timeIntervalSinceDate:
initWithContentsOfFile:
sortUsingComparator:
callStackSymbols
numberWithLongLong:
timeIntervalSinceReferenceDate
compare:options:
rangeOfString:
arrayByAddingObject:
sortUsingSelector:
hasSuffix:
initWithContentsOfFile:encoding:error:
numberWithUnsignedInt:
dataWithContentsOfFile:
arrayByAddingObjectsFromArray:
playlistItemWithName:itemId:
dataWithContentsOfFile:options:error:
rangeOfString:options:
sortedArrayUsingComparator:
setPersonalizationStyle:
URLWithString:
numberWithUnsignedInteger:
sortedArrayUsingSelector:
initWithData:
dataWithContentsOfURL:
numberWithUnsignedLong:
URLsForResourcesWithExtension:subdirectory:
scanHexLongLong:
arrayWithArray:
dataWithPropertyList:format:options:error:
extraAttributes
componentsJoinedByString:
initWithData:encoding:
cancelAllCGImageGeneration
UTF8String
numberWithUnsignedLongLong:
arrayWithCapacity:
scannerWithString:
setHost:
componentsSeparatedByString:
value:withObjCType:
initWithSearchString:options:
UUID
arrayWithContentsOfFile:
cancelAllOperations
objCType
UUIDString
arrayWithObject:
totalUnitCount
absoluteString
metadataDictionary
initWithSourceURL:
arrayWithObjects:
methodForSelector:
objectEnumerator
initWithSourceURL:destinationURL:destinationFormat:
arrayWithObjects:count:
setCompletedUnitCount:
valueForKey:
setCompletionBlock:
postNotification:
effectiveBoolValueForSetting:
scheme
fetchLastClientStateWithCompletionHandler:
standardUserDefaults
initWithString:
postNotificationName:object:
fileAttributes
effectiveValueForSetting:
initWithDictionary:
valueForKeyPath:
fileDescriptor
minusSet:
setInformation:
initWithSuiteName:
postNotificationName:object:userInfo:
fileExistsAtPath:
setInterruptionHandler:
keysOfEntriesPassingTest:
artistStoreAdamID
postNotificationName:object:userInfo:deliverImmediately:
objectsPassingTest:
setInvalidationHandler:
chapterMetadataGroupsWithTitleLocale:containingItemsWithCommonKeys:
fileExistsAtPath:isDirectory:
valueWithBytes:objCType:
kind
encodeBool:forKey:
date
ml_isValid
registerItem:error:
lastObject
fileHandleForWritingAtPath:
charValue
initWithURL:options:
initWithDistributedName:localName:queue:
dateByAddingTimeInterval:
host
encodeInt32:forKey:
initWithURL:resolvingAgainstBaseURL:
stop
encodeInt64:forKey:
initWithDomain:code:userInfo:
dateFromString:
artworkInfos
lastPathComponent
accountPropertyForKey:
setItemIdentifiers:
setProducer:
initWithUTF8String:
encodeInt:forKey:
setContentCreationDate:
regularExpressionWithPattern:options:error:
accountTypeWithAccountTypeIdentifier:error:
fileSystemRepresentation
dateWithTimeIntervalSince1970:
encodeInteger:forKey:
storeAdamID
accountsWithAccountType:options:error:
initWithUniqueIdentifier:domainIdentifier:attributeSet:
dateWithTimeIntervalSinceNow:
fileURLWithPath:
encodeObject:forKey:
initWithFireDate:interval:target:selector:userInfo:repeats:
dateWithTimeIntervalSinceReferenceDate:
fileURLWithPath:isDirectory:
seekToEndOfFile
operations
initWithUnsignedInteger:
initWithFormat:
encodeTCCIdentity:forKey:
setKeyProfile:
moveItemAtPath:toPath:error:
decodeBoolForKey:
fileURLWithPathComponents:
endIndexBatchWithClientState:completionHandler:
addCharactersInString:
initWithFormat:arguments:
waitUntilAllOperationsAreFinished
moveItemAtURL:toURL:error:
initWithIdentity:
decodeInt32ForKey:
waitUntilFinished
orderedSet
tvEpisodeItemWithName:itemId:showId:
decodeInt64ForKey:
artworkURLWithSize:cropStyle:format:preferP3ColorSpace:
remoteObjectProxyWithErrorHandler:
addDestinationWithFormat:size:url:
orderedSetWithArray:
assetImageGeneratorWithAsset:
insertString:atIndex:
weakObjectsHashTable
decodeIntForKey:
setLastUsedDate:
addIndex:
setQualityOfService:
initWithItemContentType:
string
removeAllObjects
initWithLength:
orderedSetWithObject:
decodeIntegerForKey:
setValue:forKey:
tvShowItemWithName:itemId:
whitespaceAndNewlineCharacterSet
movieItemWithName:itemId:
setLength:
stringByAppendingFormat:
decodeObjectOfClass:forKey:
setQueryItems:
assetWithURL:
whitespaceCharacterSet
msv_firstWhere:
unarchivedObjectOfClasses:fromData:error:
finish:
stringByAppendingPathComponent:
decodeObjectOfClasses:forKey:
unionOrderedSet:
finishWithError:
stringByAppendingPathExtension:
containsObject:
addJPEGDestinationWithSize:compressionQuality:url:
firstIndex
decodeTCCIdentityForKey:
setRating:
setDateFormat:
removeCharactersInString:
stringByAppendingString:
defaultCenter
unionSet:
setDefaultButtonTitle:
firstMatchInString:options:range:
stringByDeletingLastPathComponent
removeItemAtPath:error:
writeAllData:error:
firstObject
writeData:
defaultManager
removeItemAtURL:error:
stringByDeletingPathExtension
writeData:error:
setDestinationCompressionQuality:
containsString:
stringByPaddingToLength:withString:startingAtIndex:
attributesOfItemAtPath:error:
selector
writeToFile:atomically:
removeItemWithItemId:error:
intValue
musicVideoItemWithName:itemId:albumArtistId:songArtistId:albumId:genreId:
sendRequest:completionHandler:
stringByReplacingCharactersInRange:withString:
setDirector:
audioBookArtistItemWithName:itemId:
addObjectsFromArray:
writeToFile:options:error:
hasPrefix:
mutableBytes
mutableCopy
stringByReplacingOccurrencesOfString:withString:
contentsOfDirectoryAtPath:error:
audioBookItemWithName:itemId:artistId:
addObserver:selector:name:object:
interfaceWithProtocol:
stringByStandardizingPath
init
defaultStore
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
accountDSID
T@"NSString",R,C,N
T@"ML3AccountStore",R,N
activeAccount
altDSIDForAccountWithDSID:options:error:
_init
_accountsWithAccountTypeIdentifier:options:error:
T@"ACAccount",R,N
initWithForeignTable:localColumns:foreignColumns:
_foreignKeyClauseSQL
foreignTable
localColumns
foreignColumns
.cxx_destruct
_foreignTable
_localColumns
_foreignColumns
T@"ML3DatabaseTable",R,N,V_foreignTable
T@"NSArray",R,N,V_localColumns
T@"NSArray",R,N,V_foreignColumns
_verifyLibraryConnectionAndAttributesProperties:
type
_execute:
_rangeWithoutInsignificantPrefix:andCharacters:
_copyWithoutInsignificantPrefix:andCharacters:
copyWithoutInsignificantPrefixAndCharacters
copyWithoutInsignificantCharacters
MLSortString
MLSortStringWithPrefix
sanitizedString
initWithEntity:artworkType:
availableArtworkToken
fetchableArtworkToken
fetchableArtworkSourceType
artworkTokenForSource:
_faultInBestTokens
_faultInTokens
retrievalTime
setRetrievalTime:
_entity
_artworkType
_availableArtworkToken
_fetchableArtworkToken
_fetchableArtworkSourceType
_artworkSourceToTokenMap
_faultedInBestTokens
_faultedInTokens
_retrievalTime
Td,N,V_retrievalTime
T@"NSString",R,N
Tq,R,N
eqPresetForName:
eqPresetForBuiltInPresetType:
initWithBuiltInPresetType:
name
localizedName
builtInPresetType
typeForAVController
_name
_localizedName
_builtInPresetType
initWithConnection:
sharedProcessClient
T@"ML3ProcessClient",R,N
bundleID
processID
columnWithName:datatype:constraints:defaultValue:
initWithName:datatype:constraints:defaultValue:
_columnDefinitionSQL
datatype
columnConstraints
defaultValue
_datatype
_columnConstraints
_defaultValue
T@"NSString",R,N,V_name
TQ,R,N,V_datatype
TQ,R,N,V_columnConstraints
T@,R,N,V_defaultValue
copyWithZone:
hasArtist
hasSeries
setSeasonNumber:
setHasSeasonNumber:
hasSeasonNumber
hasEpisodeId
hasEpisodeSortId
setVideoQuality:
setHasVideoQuality:
hasVideoQuality
hasNetworkName
dictionaryRepresentation
readFrom:
writeTo:
copyTo:
mergeFrom:
artist
setArtist:
series
setSeries:
seasonNumber
episodeId
setEpisodeId:
episodeSortId
setEpisodeSortId:
videoQuality
networkName
setNetworkName:
_artist
_episodeId
_episodeSortId
_networkName
_seasonNumber
_series
_videoQuality
_has
TB,R,N
T@"MIPArtist",&,N,V_artist
T@"MIPSeries",&,N,V_series
TB,N
Ti,N,V_seasonNumber
T@"NSString",&,N,V_episodeId
T@"NSString",&,N,V_episodeSortId
Ti,N,V_videoQuality
T@"NSString",&,N,V_networkName
ml_lock
ml_unlock
hasAlbum
hasComposer
hasGenre
setDiscNumber:
setHasDiscNumber:
hasDiscNumber
setTrackNumber:
setHasTrackNumber:
hasTrackNumber
setUserRating:
setHasUserRating:
hasUserRating
setExcludeFromShuffle:
setHasExcludeFromShuffle:
hasExcludeFromShuffle
setGeniusId:
setHasGeniusId:
hasGeniusId
setAudioFormat:
setHasAudioFormat:
hasAudioFormat
setHasVideo:
setHasHasVideo:
hasHasVideo
hasLyrics
hasPlaybackInfo
setLyricsChecksum:
setHasLyricsChecksum:
hasLyricsChecksum
hasHlsPlaylistURL
album
setAlbum:
composer
setComposer:
genre
setGenre:
discNumber
trackNumber
userRating
excludeFromShuffle
geniusId
audioFormat
hasVideo
lyrics
setLyrics:
playbackInfo
setPlaybackInfo:
lyricsChecksum
hlsPlaylistURL
setHlsPlaylistURL:
_geniusId
_album
_audioFormat
_composer
_discNumber
_genre
_hlsPlaylistURL
_lyrics
_lyricsChecksum
_playbackInfo
_trackNumber
_userRating
_excludeFromShuffle
_hasVideo
T@"MIPAlbum",&,N,V_album
T@"MIPArtist",&,N,V_composer
T@"MIPGenre",&,N,V_genre
Ti,N,V_discNumber
Ti,N,V_trackNumber
Ti,N,V_userRating
TB,N,V_excludeFromShuffle
Tq,N,V_geniusId
Ti,N,V_audioFormat
TB,N,V_hasVideo
T@"NSString",&,N,V_lyrics
T@"MIPPlaybackInfo",&,N,V_playbackInfo
Ti,N,V_lyricsChecksum
T@"NSString",&,N,V_hlsPlaylistURL
longLongValue
floatValue
doubleValue
initWithDatabaseImport:library:writer:client:
library
writer
client
_library
_writer
_client
T@"ML3MusicLibrary",R,N,V_library
T@"ML3MediaLibraryWriter",R,N,V_writer
T@"ML3Client",R,N,V_client
initWithOriginalUserVersion:
originalUserVersion
currentUserVersion
setCurrentUserVersion:
needsToRecreateIndexes
setNeedsToRecreateIndexes:
needsToRecreateTriggers
setNeedsToRecreateTriggers:
needsToRemoveLocationsForItemsMissingAssets
setNeedsToRemoveLocationsForItemsMissingAssets:
needsToReloadStoreBookmarkMetadataIdentifiers
setNeedsToReloadStoreBookmarkMetadataIdentifiers:
needsToReloadContainerMediaTypes
setNeedsToReloadContainerMediaTypes:
needsToReloadCollectionRepresentativeItems
setNeedsToReloadCollectionRepresentativeItems:
needsAnalyze
setNeedsAnalyze:
needsToAutogenerateArtworkVariants
setNeedsToAutogenerateArtworkVariants:
needsToUpdateSortMap
setNeedsToUpdateSortMap:
forceUpdateOriginals
setForceUpdateOriginals:
_needsToRecreateIndexes
_needsToRecreateTriggers
_needsToRemoveLocationsForItemsMissingAssets
_needsToReloadStoreBookmarkMetadataIdentifiers
_needsToReloadContainerMediaTypes
_needsToReloadCollectionRepresentativeItems
_needsAnalyze
_needsToAutogenerateArtworkVariants
_needsToUpdateSortMap
_forceUpdateOriginals
_originalUserVersion
_currentUserVersion
Ti,R,N,V_originalUserVersion
Ti,N,V_currentUserVersion
TB,N,V_needsToRecreateIndexes
TB,N,V_needsToRecreateTriggers
TB,N,V_needsToRemoveLocationsForItemsMissingAssets
TB,N,V_needsToReloadStoreBookmarkMetadataIdentifiers
TB,N,V_needsToReloadContainerMediaTypes
TB,N,V_needsToReloadCollectionRepresentativeItems
TB,N,V_needsAnalyze
TB,N,V_needsToAutogenerateArtworkVariants
TB,N,V_needsToUpdateSortMap
TB,N,V_forceUpdateOriginals
needsVideoSnapshot
createVideoSnapshotAtTime:
columns
_columns
mutableCopyWithZone:
columnDefinitionsSQL
createTableSQLWithExistenceClause:
_copyWithZone:concreteClass:
foreignKeyConstraints
_foreignKeyConstraints
T@"NSArray",R,N,V_columns
T@"NSArray",R,N,V_foreignKeyConstraints
setName:
setColumns:
setForeignKeyConstraints:
T@"NSString",C,D,N
T@"NSArray",C,D,N
hasLibraryName
setLibraryId:
setHasLibraryId:
hasLibraryId
libraryName
setLibraryName:
libraryId
_libraryId
_libraryName
T@"NSString",&,N,V_libraryName
Tq,N,V_libraryId
dealloc
performImportOfSourceType:usingConnection:
importItemFromDAAPElement:
containerImportItemFromDAAPElement:withTrackIds:trackPersonIdentifiers:
personImportItemFromDAAPElement:
updateImportProgress:
_importDAAPPayloadFromFile:shouldProcessPlaylists:
_finishParsingWithError:
_processUpdateType:
_processTrackItemCount:
_processTrackElement:
_processDeletedTrackId:
_processContainerItemCount:
_processContainerElement:withTrackIds:trackPersonIdentifiers:
_processDeletedContainerId:
_processPersonElement:
_startImportSessionIfNeeded
.cxx_construct
_importSession
_importError
_delegate
_updateType
_totalTrackCount
_totalContainerCount
_processedTrackCount
_processedContainerCount
_importSessionStarted
_sourceType
logDatabasePrivacyAccessWithAuditToken:
sharedContext
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
initWithClientIdentity:
initWithAuditToken:
initWithPAApplication:
logDatabasePrivacyAccess
initWithLibrary:connection:client:
lock
unlock
connection
updateLastUsed
_relinquishConnection
identifier
lastUsedTime
setLastUsedTime:
terminable
setTerminable:
inUseByOperation
setInUseByOperation:
isReadOnly
setReadOnly:
_connection
_lock
_xpcTransaction
_terminable
_inUseByOperation
_readOnly
_identifier
_lastUsedTime
T@"ML3DatabaseConnection",R,N
T@"NSUUID",R,N,V_identifier
Td,N,V_lastUsedTime
TB,N,V_terminable
TB,N,V_inUseByOperation
readOnly
TB,N,GisReadOnly,V_readOnly
contextForAutoupdatingSharedLibrary
contextForSingleUserLibraryWithAccountInfo:
contextForSingleUserLibraryWithLibraryContainerIdentifier:
contextForMultiUserFrameworkLibraryWithService:
contextForMultiUserDaemonLibraryWithAccountInfo:accountChangeObserver:
_initWithResourcesService:accountInfo:libraryContainerIdentifier:accountChangeObserver:supportsMultiUsers:runningInDaemon:
isRunningInDaemon
isMultiUserSupported
resourcesService
accountInfo
accountChangeObserver
libraryContainerIdentifier
_runningInDaemon
_multiUserSupported
_resourcesService
_accountInfo
_accountChangeObserver
_libraryContainerIdentifier
runningInDaemon
TB,R,N,GisRunningInDaemon,V_runningInDaemon
multiUserSupported
TB,R,N,GisMultiUserSupported,V_multiUserSupported
T@"<MLMediaLibraryResourcesServiceProtocol>",R,N,V_resourcesService
T@"<_MSVAccountInformationProviding>",R,N,V_accountInfo
T@"<MLMediaLibraryAccountChangeObserver>",R,N,V_accountChangeObserver
T@"NSString",R,N,V_libraryContainerIdentifier
initWithName:argumentCount:
registerWithConnection:
argumentCount
setArgumentCount:
_argumentCount
T@"NSString",C,N,V_name
Ti,N,V_argumentCount
block
setBlock:
_block
T@?,C,N,V_block
functionPointer
setFunctionPointer:
userData
setUserData:
_functionPointer
_userData
T^?,N,V_functionPointer
T^v,N,V_userData
insertValues:intoTable:persistentID:library:
insertValues:intoTable:persistentID:connection:
unsettableProperties
_shouldIncrementRevisionForType:persistentID:usingConnection:
incrementRevisionForRevisionTypeContentWithLibrary:deletionType:persistentIDs:
incrementRevisionForRevisionTypeContentWithConnection:deletionType:persistentIDs:
incrementRevisionForRevisionTypeContentWithConnection:deletionType:persistentIDs:count:
incrementRevisionWithLibrary:persistentID:deletionType:revisionType:
incrementRevisionWithLibrary:persistentID:deletionType:revisionType:usingConnection:
insertionChangesLibraryContents
enumeratePersistentIDsInLibrary:matchingPredicate:orderingTerms:persistentIDs:count:options:usingBlock:
subselectStatementForProperty:
subselectPropertyForProperty:
newSelectAllEntitiesSQLForProperties:count:predicate:
newSelectSQLForProperties:count:predicate:
entityURLScheme
entityFromURL:reason:
entityFromURL:inLibrary:
entityFromURL:inLibrary:verifyExistence:
_entityForURLComponents:inLibrary:verifyExistence:reason:
URLForEntityWithPersistentID:libraryUID:
defaultFilterPredicates
predicateByOptimizingPredicate:
predicateByOptimizingComparisonPredicate:
joinClausesForProperty:
newWithPersistentID:inLibrary:
newWithDictionary:inLibrary:
newWithDictionary:inLibrary:cachedNameOrders:
newWithDictionary:inLibrary:cachedNameOrders:usingConnection:
defaultOrderingTerms
sectionPropertyForProperty:
foreignDatabaseTableForProperty:
foreignColumnForProperty:
foreignPropertyForProperty:entityClass:
propertyIsCountProperty:
countingQueryForBaseQuery:countProperty:forIdentifier:
setValues:forProperties:forEntityPersistentIDs:inLibrary:usingConnection:
_didChangeValueForProperties:inLibrary:
libraryContentsChangeForProperty:
assistantLibraryContentsChangeForProperty:
libraryDynamicChangeForProperty:
_deleteRowForPersistentIDs:count:library:table:usingColumn:usingConnection:
deleteFromLibrary:deletionType:persistentIDs:count:
deleteFromLibrary:deletionType:persistentIDs:count:usingConnection:
removeFromMyLibrary:deletionType:persistentIDs:count:
extraTablesToDelete
extraTablesToInsert
persistentIDColumnForTable:
collectionClassesToUpdateBeforeDelete
predisambiguatedProperties
allProperties
predisambiguateProperties:toDictionary:
disambiguatedSQLForProperty:
_createDisambiguatedSQLForProperty:
disambiguatedSelectSQLForProperty:
indexableSQLForProperties:
orderingSQLForProperties:directionality:
revisionTrackingCode
enumeratePersistentIDsInLibrary:afterRevision:usingBlock:
initWithPersistentID:inLibrary:
initWithDictionary:inLibrary:cachedNameOrders:
initWithDictionary:inLibrary:cachedNameOrders:usingConnection:
existsInLibrary
matchesPredicate:
getValues:forProperties:count:
getValuesForProperties:
valueForProperty:
setValues:forProperties:count:
setValues:forProperties:
setValues:forProperties:async:withCompletionBlock:
setValues:forProperties:usingConnection:
setValuesForPropertiesWithDictionary:
setValue:forProperty:
didChangeValueForProperties:
deleteFromLibrary
incrementRevision
setLibrary:
persistentID
_persistentID
T@"ML3MusicLibrary",W,N,V_library
Tq,R,N,V_persistentID
initWithLibrary:connection:configuration:
begin
finish
addTrack:persistentID:
updateTrack:persistentID:
removeTrack:persistentID:
_databaseConnection
_configuration
_effectiveSettingsDidChangeNotification:
_libraryPathDidChangeNotification:
library:didBeginDatabaseTransactionWithConnection:
library:didCommitDatabaseTransactionWithConnection:
library:didRollbackDatabaseTransactionWithConnection:
globalSerialQueue
_onGlobalQueue_shareableMusicLibraryWithResourcesManager:
musicLibraryForUserAccount:
registeredLibraries
allLibraries
autoupdatingSharedLibrary
autoupdatingSharedLibraryPath
setAutoupdatingSharedLibraryPath:
musicLibraryPerUserDSID
sharedLibrary
sharedLibraryDatabasePath
setSharedLibraryDatabasePath:
disableSharedLibrary
disableAutomaticDatabaseValidation
enableAutomaticDatabaseValidation
deviceSupportsMultipleLibraries
setGlobalPrivacyContextWithAuditToken:
localizedSectionHeaderForSectionHeader:
localizedSectionIndexTitleForSectionHeader:
sectionIndexTitles
sectionIndexTitleForSectionHeader:
enumerateSortMapTablesUsingBlock:
removeOrphanedTracks
updateTrackIntegrityOnConnection:
widthLimitedSetValuesQueue
assistantSyncDataChangedNotificationName
distributedToLocalNotificationMapping
connectionWillOpenDatabase:
connectionDidOpenDatabase:
connection:didFailToOpenDatabaseWithError:
connectionWillCloseDatabase:
connectionDidCloseDatabase:
connection:didFailToCloseDatabaseWithError:
connectionDidAccessDatabase:
connectionDidBeginDatabaseTransaction:
connection:didEndDatabaseTransactionAndCommit:
connectionPool:createdNewConnection:
T@"NSObject<OS_dispatch_queue>",R,N
T@"NSString",C,N
T@"NSDictionary",R,N
T@"NSMutableDictionary",R,N
T@"ML3MusicLibrary",R,N
T@"NSArray",R,C,N
initWithClientIdentity:forUserAccount:
initWithResourcesManager:
initWithPath:
initWithPath:isUnitTesting:
initWithPath:readOnly:populateUnitTestTablesBlock:
initWithClientIdentity:path:
initWithClientIdentity:path:readOnly:populateUnitTestTablesBlock:
resourcesManager
connectionPool
databasePath
notificationManager
sortKeyBuilder
isHomeSharingLibrary
setIsHomeSharingLibrary:
downloadOnAddToLibrary
currentRevision
currentContentRevision
setSyncGenerationID:
syncGenerationID
setSyncLibraryID:
syncLibraryID
libraryUID
setLibraryUID:
isLibraryEmpty
currentDevicePurchasesPlaylist
currentDevicePlaybackHistoryPlaylist
currentDevicePhotosMemoriesPlaylist
databaseInfo
localizedSectionIndexTitles
preferredAudioTracks
preferredSubtitleTracks
mediaRestrictionEnabled
setLibraryEntityFilterPredicates:
setLibraryContainerFilterPredicates:
setLibraryPublicEntityFilterPredicates:
setLibraryPublicContainerFilterPredicates:
libraryEntityFilterPredicatesForEntityClass:
libraryEntityFilterPredicatesForContainerClass:
privacyContext
setClientIdentity:
checkoutReaderConnection
checkoutWriterConnection
checkInDatabaseConnection:
reconnectToDatabase
databaseConnectionAllowingWrites:withBlock:
performDatabaseTransactionWithBlock:
performReadOnlyDatabaseTransactionWithBlock:
performAsyncDatabaseWriteTransactionWithBlock:completionBlock:
isCurrentThreadInTransaction
automaticDatabaseValidationDisabled
validateDatabase
currentDatabaseVersion
createIndexes
emptyAllTables
clearAllGeniusData
clearAllCloudKVSData
accountCacheDatabase
accessSortKeyBuilder:
groupingKeyForString:
groupingKeysForStrings:
localizedSectionHeaderForSectionIndex:
sectionIndexTitleIndexForSectionIndex:
unknownSectionIndex
notifyContentsDidChange
notifyAssistantContentsDidChange
notifyEntitiesAddedOrRemoved
notifyNonContentsPropertyDidChange
notifyInvisiblePropertyDidChange
notifyDisplayValuesPropertyDidChange
notifySectionsDidChange
notifyCloudLibraryAvailabilityDidChange
notifyLibraryImportDidFinish
notifyKeepLocalStateDidChange
saveTrackMetadata
saveTrackMetadataSinceRevision:withGrappaID:
savePlaylists
savePlaylistsSinceRevision:withGrappaID:
requiresSchemaOnlyUpdatesOnConnection:
requiresNonSchemaUpdatesOnConnection:
updateSortMap
enumeratePersistentIDsAfterRevision:revisionTrackingCode:maximumRevisionType:forMediaTypes:inUsersLibrary:usingBlock:
enumeratePersistentIDsAfterRevision:revisionTrackingCode:maximumRevisionType:usingBlock:
getChangedPersistentIDsAfterRevision:revisionTrackingCode:maximumRevisionType:usingBlock:
persistentID:changedAfterRevision:revisionTrackingCode:
countOfChangedPersistentIdsAfterRevision:revisionTrackingCode:maximumRevisionType:
removeSource:withCompletionHandler:
removeSource:usingConnection:withCompletionHandler:
removeTracksWithPersistentIDs:fromSource:withCompletionHandler:
removeTracksWithPersistentIDs:fromSource:usingConnection:withCompletionHandler:
removePlaylistsWithPersistentIDs:fromSource:usingConnection:withCompletionHandler:
autoFilledTracksTotalSize
autoFilledTracksTotalSizeWithUrgency:
deleteAutoFilledTracksOfAtLeastTotalSize:urgency:respectSongMattress:
deleteAutoFilledTracksOfAtLeastTotalSize:
deleteAutoFilledTracksOfAtLeastTotalSize:urgency:
autogenerateSupportedSizesForAllOriginalArtworkWithConnection:completionHandler:
importExistingOriginalArtworkWithArtworkToken:artworkType:sourceType:mediaType:
importOriginalArtworkFromFileURL:withArtworkToken:artworkType:sourceType:mediaType:
importOriginalArtworkFromImageData:withArtworkToken:artworkType:sourceType:mediaType:
removeArtworkAssetWithToken:
deleteArtworkToken:
migrateExistingArtworkToken:newArtworkToken:newSourceType:
importArtworkTokenForEntityPersistentID:entityType:artworkToken:artworkType:sourceType:
importArtworkTokenForEntityPersistentID:entityType:artworkToken:artworkType:sourceType:usingConnection:
removeArtworkTokenForEntityPersistentID:entityType:artworkType:sourceType:
removeArtworkTokenForEntityPersistentID:entityType:artworkType:sourceType:usingConnection:
updateBestArtworkTokenForEntityPersistentID:entityType:artworkType:retrievalTime:usingConnection:
updateBestArtworkTokenForEntityPersistentID:entityType:artworkType:retrievalTime:preserveExistingAvailableToken:usingConnection:
isArtworkTokenAvailable:
retrieveBestArtworkTokensForEntityPersistentID:entityType:artworkType:retrievalTime:completionHandler:
enumerateArtworkTokensForEntityPersistentID:entityType:artworkType:usingBlock:
recordPlayEventForAlbumPersistentID:
recordPlayEventForContainerPersistentID:
hasUserPlaylists
hasAddedToLibraryAppleMusicContent
hasUserPlaylistsContainingAppleMusicContent
cleanupArtworkWithOptions:
cleanupArtworkWithOptions:usingConnection:
removeTombstonesForDeletedItems
removeOrphanedTracksOnlyInCaches:
removeItemsWithFamilyAccountID:purchaserAccountID:downloaderAccountID:
valueForDatabaseProperty:
setValue:forDatabaseProperty:
deleteDatabaseProperty:
migratePresignedValidity
hasPresignedValidity
verifyPresignedValidity
deletePresignedValidity
updateTrackIntegrity
_logDatabaseAccess
_insertArtworkRowWithArtworkToken:artworkType:sourceType:relativePath:
_insertArtworkRowWithArtworkToken:artworkType:sourceType:relativePath:usingConnection:
_updateBestArtworkTokensForArtworkToken:artworkType:sourceType:preserveExistingAvailableToken:usingConnection:
_determineAndUpdateBestArtworkTokensForEntityPersistentID:entityType:artworkType:retrievalTime:preserveExistingAvailableToken:usingConnection:
_allArtworkVariantDirectories
_deleteAllArtworkVariantsAtRelativePaths:
_removeOrphanedArtworkTokensUsingConnection:
_removeOrphanedArtworkMetadataUsingConnection:
_removeOrphanedArtworkAssetsUsingConnection:
_removeInvalidAvailableArtworkTokensUsingConnection:
_convertOriginalArtworkToDevicePreferredFormatFromSourceURL:toDestinationURL:completionHandler:
_autogenerateArtworkForRelativePath:artworkType:mediaType:completionHandler:
_newGeniusDBConnectionAtPath:
_canConfigureMediaLibraryDatabaseConnection:
_configureMediaLibraryDatabaseConnection:
_teardownMediaLibraryDatabaseConnection:
_clearAllRowsFromTables:
performDatabasePathChange:completion:
emergencyDisconnectWithCompletion:
terminateForFailureToPerformDatabasePathChange
_prepareForAccountChange:
_completeAccountChangeWithPath:
_shouldProcessAccountChanges
_closeAndLockCurrentDatabaseConnections
_setupNotificationManager
_tearDownNotificationManager
_postClientNotificationWithDistributedName:localName:
setNotificationManager:
serialQueue
delegate
setDelegate:
isUnitTesting
setIsUnitTesting:
libraryEntityFilterPredicates
libraryContainerFilterPredicates
libraryPublicEntityFilterPredicates
libraryPublicContainerFilterPredicates
isUsingSharedLibraryPath
setUsingSharedLibraryPath:
_libraryUID
_libraryUIDLock
_syncLibraryUID
_accountCacheDatabase
_privacyContext
_optimizedLibraryEntityFilterPredicatesByEntityClass
_optimizedLibraryContainerFilterPredicatesByContainerClass
_optimizedLibraryPublicEntityFilterPredicatesByEntityClass
_optimizedLibraryPublicContainerFilterPredicatesByContainerClass
_isHomeSharingLibraryLoaded
_isHomeSharingLibrary
_isUnitTesting
_usingSharedLibraryPath
_connectionPool
_databasePath
_sortKeyBuilder
_resourcesManager
_notificationManager
_serialQueue
_accountDSID
_libraryEntityFilterPredicates
_libraryContainerFilterPredicates
_libraryPublicEntityFilterPredicates
_libraryPublicContainerFilterPredicates
T@"NSObject<OS_dispatch_queue>",R,N,V_serialQueue
T@"ML3LibraryNotificationManager",&,N,V_notificationManager
T^{iPhoneSortKeyBuilder=},R,N,V_sortKeyBuilder
usingSharedLibraryPath
TB,N,GisUsingSharedLibraryPath,V_usingSharedLibraryPath
T@"ML3MusicLibraryResourcesManager",R,N,V_resourcesManager
T@"<ML3MusicLibraryDelegate>",W,N,V_delegate
T@"ML3DatabaseConnectionPool",R,N,V_connectionPool
T@"NSString",R,N,V_databasePath
T@"ML3DatabasePrivacyContext",R,N
Tq,N
T@"NSString",N
libraryEmpty
TB,R,N,GisLibraryEmpty
T@"ML3Container",R,N
T@"ML3DatabaseMetadata",R,N
T@"NSArray",R,N
TB,N,V_isUnitTesting
T@"NSArray",&,N,V_libraryEntityFilterPredicates
T@"NSArray",&,N,V_libraryContainerFilterPredicates
T@"NSArray",&,N,V_libraryPublicEntityFilterPredicates
T@"NSArray",&,N,V_libraryPublicContainerFilterPredicates
T@"NSString",R,C,N,V_accountDSID
initWithMultiverseIdentifier:mediaItem:
mediaItem
multiverseIdentifier
_multiverseIdentifier
_mediaItem
T@"MIPMediaItem",R,C,N,V_mediaItem
T@"MIPMultiverseIdentifier",R,C,N,V_multiverseIdentifier
initialize
databaseTable
albumsDefaultOrderingTerms
albumsByAlbumArtistDefaultOrderingTerms
genresDefaultOrderingTerms
podcastsDefaultOrderingTerms
artistAllAlbumsDefaultOrderingTerms
artistsDefaultOrderingTerms
albumAllArtistsDefaultOrderingTerms
albumAndArtistDefaultOrderingTerms
composersDefaultOrderingTerms
podcastsEpisodesDefaultOrderingTerms
TVShowEpisodesDefaultOrderingTerms
_writeSyncDeletesToPlistWithLibrary:forPersistentIDs:
trackWithPersistentID:existsInLibrary:
trackWithPersistentID:visibleInLibrary:
trackWithPersistentID:existsInLibraryWithConnection:
populateSortOrdersOfPropertyValues:inLibrary:cachedNameOrders:
unlinkRedownloadableAssetsFromLibrary:persistentIDs:
unlinkRedownloadableAssetsFromLibrary:persistentIDs:deletedFileSize:
unlinkRedownloadableAssetsFromLibrary:persistentIDs:deletionType:deletedFileSize:
trackValueAreInTheCloud:
updateAllBookmarkableStoreBookmarkMetadataIdentifiersOnConnection:
registerBookmarkMetadataIdentifierFunctionOnConnection:
clearLocationFromLibrary:persistentIDs:
clearLocationFromLibrary:persistentIDs:disableKeepLocal:
clearLocationFromLibrary:persistentIDs:usingConnection:
clearLocationFromLibrary:persistentIDs:disableKeepLocal:usingConnection:
clearPlaybackKeysFromLibrary:persistentIDs:
enumeratePathsToDeleteFromLibrary:persistentIDs:usingBlock:
enumeratePathsToDeleteFromLibrary:persistentIDs:usingConnection:usingBlock:
absoluteFilePath
updateIntegrity
rawIntegrity
chapterTOC
artworkTokenAtPlaybackTime:
updateCollectionCloudStatus
updateStoreBookmarkMetadataIdentifier
compare:
hasExternalGuid
hasFeedUrl
externalGuid
setExternalGuid:
feedUrl
setFeedUrl:
_externalGuid
_feedUrl
T@"NSString",&,N,V_externalGuid
T@"NSString",&,N,V_feedUrl
ml_matchesValue:usingComparison:
importSource
main
_performPurchaseHistoryImportWithTransaction:
sharedCoordinator
T@"ML3TerminationCoordinator",R,N
signForReason:
secedeForReason:
isSigned
isSignedForReason:
execute
_performTermination
_signatures
_notifyToken
predicateIncludingSystemwidePredicatesWithPredicate:library:options:
setIgnoreSystemFilterPredicates:
ignoreSystemFilterPredicates
setIgnoreRestrictionsPredicates:
ignoreRestrictionsPredicates
predicateIncludingSystemwidePredicates
initWithLibrary:entityClass:predicate:orderingTerms:usingSections:nonDirectAggregateQuery:propertyToCount:options:
reverseQuery
hasRowForColumn:
anyEntityPersistentID
hasEntities
countOfDistinctRowsForColumn:
countOfEntities
sections
persistentIDProperty
deleteAllEntitiesFromLibrary
deleteAllEntitiesFromLibraryWithDeletionType:
deleteAllEntitiesFromLibraryWithDeletionType:usingConnection:
enumerateSectionsUsingBlock:
enumerationDatabaseResultForSQL:onConnection:withParameters:
enumeratePersistentIDsUsingBlock:
enumeratePersistentIDsAndProperties:usingBlock:
enumeratePersistentIDsAndSectionsWithProperty:usingBlock:
enumeratePersistentIDsAndProperties:ordered:usingBlock:
enumeratePersistentIDsAndProperties:ordered:cancelBlock:usingBlock:
enumeratePersistentIDsAndProperties:ordered:sectionProperty:cancelBlock:usingBlock:
valueForAggregateFunction:onEntitiesForProperty:
selectSQLWithColumns:groupBy:
selectSQLWithColumns:groupBy:distinct:
selectSQLWithColumns:orderingTerms:directionality:
selectSQLWithColumns:orderingTerms:
selectSQLWithColumns:orderingTerms:limit:
selectSQLWithColumns:orderingTerms:distinct:
selectSQLWithColumns:groupBy:orderingTerms:
selectSQLWithColumns:groupBy:orderingTerms:limit:
selectSQLWithColumns:groupBy:orderingTerms:directionality:usingLowerBound:
lowerBoundParametersForOrderingTerms:lowerBoundPersistentID:
selectSQLWithColumns:groupBy:orderingTerms:directionality:usingLowerBound:distinct:limit:
selectSectionsSQL
sectionsParameters
selectUnorderedPersistentIDsSQL
selectPersistentIDsSQL
selectPersistentIDsSQLAndProperties:ordered:
selectPersistentIDsSQLAndProperties:ordered:distinct:
persistentIDParameters
selectCountSQL
countStatementParameters
sectionProperty
sectionsPersistentIDColumnIsDistinct
entityClass
predicate
orderingTerms
propertyToCount
usingSections
limit
setLimit:
nonDirectAggregateQuery
filtersOnDynamicProperties
options
_entityClass
_predicate
_orderingTerms
_propertyToCount
_nonDirectAggregateQuery
_usingSections
_options
_filtersOnDynamicProperties
_limit
T#,R,N,V_entityClass
T@"ML3Predicate",R,N,V_predicate
T@"ML3Predicate",R,N
T@"NSArray",R,N,V_orderingTerms
T@"NSString",R,N,V_propertyToCount
TQ,R,N
T@"ML3AggregateQuery",R,N,V_nonDirectAggregateQuery
TB,R,N,V_usingSections
TQ,N,V_limit
Tq,R,N,V_options
TB,R,N,V_filtersOnDynamicProperties
anyInLibrary:predicate:
anyInLibrary:predicate:options:
queryWithLibrary:predicate:orderingProperties:
queryWithLibrary:predicate:orderingProperties:usingSections:
queryWithLibrary:predicate:orderingProperties:orderingDirectionMappings:usingSections:
queryWithLibrary:predicate:
queryWithLibrary:predicate:options:
queryWithLibrary:predicate:usingSections:
queryWithLibrary:predicate:orderingTerms:
queryWithLibrary:predicate:orderingTerms:propertyToCount:
queryWithLibrary:predicate:orderingTerms:propertyToCount:options:
queryWithLibrary:predicate:orderingTerms:usingSections:
queryWithLibrary:predicate:orderingTerms:usingSections:options:
unrestrictedQueryWithLibrary:predicate:orderingTerms:
allItemsQueryWithLibrary:predicate:orderingTerms:usingSections:
unrestrictedAllItemsQueryWithlibrary:predicate:orderingTerms:
propertiesForGroupingKey
trackForeignPersistentID
propertiesForGroupingUniqueCollections
updateTrackValues:
artistGroupingKeyForArtistName:seriesName:
artistForArtistName:seriesName:
setBitRate:
setHasBitRate:
hasBitRate
setCodecType:
setHasCodecType:
hasCodecType
setCodecSubType:
setHasCodecSubType:
hasCodecSubType
setDataKind:
setHasDataKind:
hasDataKind
hasDataUrl
hasEqPreset
hasPlaybackFormat
setGaplessHeuristicCode:
setHasGaplessHeuristicCode:
hasGaplessHeuristicCode
setGaplessHeuristicDelayCode:
setHasGaplessHeuristicDelayCode:
hasGaplessHeuristicDelayCode
setGaplessEncodingDrainCode:
setHasGaplessEncodingDrainCode:
hasGaplessEncodingDrainCode
setGaplessFrameResyncCode:
setHasGaplessFrameResyncCode:
hasGaplessFrameResyncCode
setRelativeVolume:
setHasRelativeVolume:
hasRelativeVolume
setSampleRate:
setHasSampleRate:
hasSampleRate
setStartTime:
setHasStartTime:
hasStartTime
setStopTime:
setHasStopTime:
hasStopTime
setVolumeNormalizationEnergy:
setHasVolumeNormalizationEnergy:
hasVolumeNormalizationEnergy
setBeatsPerMinute:
setHasBeatsPerMinute:
hasBeatsPerMinute
setProgressionDirection:
setHasProgressionDirection:
hasProgressionDirection
setDurationInSamples:
setHasDurationInSamples:
hasDurationInSamples
bitRate
codecType
codecSubType
dataKind
dataUrl
setDataUrl:
eqPreset
setEqPreset:
playbackFormat
setPlaybackFormat:
gaplessHeuristicCode
gaplessHeuristicDelayCode
gaplessEncodingDrainCode
gaplessFrameResyncCode
relativeVolume
sampleRate
startTime
stopTime
volumeNormalizationEnergy
beatsPerMinute
progressionDirection
durationInSamples
_durationInSamples
_gaplessEncodingDrainCode
_gaplessFrameResyncCode
_gaplessHeuristicCode
_gaplessHeuristicDelayCode
_startTime
_stopTime
_volumeNormalizationEnergy
_beatsPerMinute
_bitRate
_codecSubType
_codecType
_dataKind
_dataUrl
_eqPreset
_playbackFormat
_progressionDirection
_relativeVolume
_sampleRate
Ti,N,V_bitRate
Ti,N,V_codecType
Ti,N,V_codecSubType
Ti,N,V_dataKind
T@"NSString",&,N,V_dataUrl
T@"NSString",&,N,V_eqPreset
T@"NSString",&,N,V_playbackFormat
Tq,N,V_gaplessHeuristicCode
Tq,N,V_gaplessHeuristicDelayCode
Tq,N,V_gaplessEncodingDrainCode
Tq,N,V_gaplessFrameResyncCode
Ti,N,V_relativeVolume
Ti,N,V_sampleRate
Tq,N,V_startTime
Tq,N,V_stopTime
Tq,N,V_volumeNormalizationEnergy
Ti,N,V_beatsPerMinute
Ti,N,V_progressionDirection
Tq,N,V_durationInSamples
initWithLibrary:writer:
_processTrackAsset:forSource:withError:
_processContainerAsset:forSource:withError:
_processArtworkIdentifier:artworkToken:artworkType:mediaType:sourceType:
_videoSnapshotTimeForMediaType:
_processGeniusPlist:geniusIDString:geniusChecksum:
_artworkSourceFromTrackSource:
albumForAlbumArtistPersistentID:albumName:feedURL:seasonNumber:compilation:
repairAlbumArtistRelationshipsWithConnection:
coerceValidDatabaseWithError:
_validateDatabaseUsingConnection:error:
initWithName:nameSection:sortKey:nameOrder:dirtyFlag:
initWithName:nameSection:sortKey:
_nameOrder
_sortKey
_nameSection
_dirty
updateSortMapOnConnection:
updateSortMapOnConnection:forceUpdateOriginals:
inTransactionUpdateSortMapOnConnection:forceUpdateOriginals:
inTransactionUpdateSortMapOnConnection:forceRebuild:forceUpdateOriginals:
inTransactionUpdateSearchMapOnConnection:
validateSortMapUnicodeVersionOnConnection:
nameOrderForString:
insertStringsIntoSortMap:didReSortMap:
insertStringsIntoSortMap:
insertStringIntoSortMapNoTransaction:
_systemUnicodeVersionData
coalesceMismatchedCollectionsUsingConnection:
_coalesceMismatchedCollectionClass:usingConnection:
initWithConnection:library:preloadNames:
loadExistingSortedEntries
attemptInsertStringsIntoSortMap:
commitFailedInsertedStrings:
_sortedNameEntriesToInsertForNames:
_insertSortedNameEntriesIntoSortMap:
_minSortKeyForEntry:iPhoneSortKeyBuilder:
_maxSortKeyForEntry:iPhoneSortKeyBuilder:
_minNameOrderForSortMapEntry:iPhoneSortKeyBuilder:
_maxNameOrderForSortMapEntry:iPhoneSortKeyBuilder:
_sortKeyDistance:sortKey2:offset:
_sortKeyString:
commitUpdates
nameOrders
_nameOrders
_entries
_minSortKey
_maxSortKey
_smallestNameDelta
_preloadNames
count
objectAtIndex:
addObject:
insertObject:atIndex:
removeLastObject
removeObjectAtIndex:
replaceObjectAtIndex:withObject:
_dirtyInserts
initWithDirtyInsertsEnumerator:connection:
nextObject
_dirtyInsertsEnumerator
_offset
initWithObjects:forKeys:count:
setObject:forKey:
removeObjectForKey:
objectForKey:
keyEnumerator
_performHomeSharingImportWithTransaction:
_playlistNameOrder
SQLJoinClausesForClass:
appendSQLToMutableString:entityClass:
databaseStatementParameters
SQLForEntityClass:
isDynamicForEntityClass:
isTrueAlways
isFalseAlways
spotlightPredicate
containsPropertyPredicate:matchingValue:usingComparison:
truePredicate
falsePredicate
_predicateString
_truthValue
predicateWithPredicate:
initWithPredicate:
setPredicate:
T@"ML3Predicate",&,N,V_predicate
predicateWithProperty:
initWithProperty:
property
setProperty:
_property
T@"NSString",C,N,V_property
predicateWithProperty:values:
initWithProperty:values:
_orderedValues
values
setValues:
_values
T@"NSSet",&,N,V_values
predicateWithProperty:value:comparison:
predicateWithProperty:value:comparison:caseInsensitive:
predicateWithProperty:value:comparison:caseInsensitive:treatNullAsString:
predicateWithProperty:value:comparison:transformFunction:
predicateWithProperty:equalToInt64:
predicateWithProperty:equalToInteger:
predicateWithProperty:equalToValue:
initWithProperty:value:comparison:caseInsensitive:transformFunction:treatNullAsString:
operator
valueToBindForOperation:
value
comparison
caseInsensitive
treatNullAsString
transformFunction
_caseInsensitive
_comparison
_value
_treatNullAsString
_transformFunction
T@,R,N,V_value
Ti,R,N,V_comparison
TB,R,N,V_caseInsensitive
T@"NSString",R,C,N,V_treatNullAsString
T@"NSString",R,C,N,V_transformFunction
predicateWithProperty:valueSet:
T@,C,N,V_values
predicateWithPersistentIDs:count:shouldContain:
predicateWithPersistentIDs:shouldContain:
initWithPersistentIDs:shouldContain:
shouldContain
_persistentIDs
_shouldContain
TB,R,N,V_shouldContain
predicateWithProperty:mask:value:
initWithProperty:mask:value:
mask
setMask:
setValue:
_mask
Tq,N,V_mask
Tq,N,V_value
predicateWithConcatenatedProperties:searchString:
initWithConcatenatedProperties:searchString:
properties
setProperties:
searchString
setSearchString:
_properties
_searchString
T@"NSArray",C,N,V_properties
T@"NSString",C,N,V_searchString
predicateMatchingPredicates:
initWithPredicates:
predicates
setPredicates:
_predicates
T@"NSArray",&,N,V_predicates
compoundOperatorJoiner
T@"NSString",R,C,D,N
predicateByFlatteningAllCompoundPredicate:
predicateByMergingContainmentPredicatesAllCompoundPredicate:
predicateWithConditionPredicate:thenPredicate:elsePredicate:
initWithConditionPredicate:thenPredicate:elsePredicate:
conditionPredicate
thenPredicate
elsePredicate
_conditionPredicate
_thenPredicate
_elsePredicate
T@"ML3Predicate",R,C,N,V_conditionPredicate
T@"ML3Predicate",R,C,N,V_thenPredicate
T@"ML3Predicate",R,C,N,V_elsePredicate
initWithRange:sectionIndex:
range
setRange:
sectionIndex
setSectionIndex:
_sectionIndex
_range
T{_NSRange=QQ},N,V_range
TQ,N,V_sectionIndex
artworkCacheIDProperty
updateRepresentativeItemPersistentIDsInLibrary:persistentIDs:usingConnection:
canonicalizeCollectionRepresentativeItemsInLibrary:usingConnection:
removeOrphanedCollectionsInLibrary:usingConnection:
collectionEntityClasses
_updateRepresentativeItemsForPersistentIDs:usingConnection:
updateRepresentativeCollectionValues:existingRepresentativePersistentID:forUpdateTrackValues:
updateCloudStatus
initWithUnitQuery:aggregateEntityClass:foreignPersistentIDProperty:
aggregateEntityClass
foreignPersistentIDProperty
isFastCountable
setIsFastCountable:
_aggregateEntityClass
_foreignPersistentIDProperty
_isFastCountable
T#,R,N,V_aggregateEntityClass
T@"NSString",R,N,V_foreignPersistentIDProperty
TB,N,V_isFastCountable
aggregateQueryWithUnitQuery:foreignPersistentIDProperty:
schemaAddColumnDefinition:toTable:
schemaInsertColumnDefinition:intoTable:atIndex:
schemaInsertColumnDefinitions:intoTable:atIndex:
schemaRenameColumn:inTable:toNewColumnName:
schemaDeleteColumn:inTable:
schemaDeleteColumns:inTable:
_enumerateTableColumnNamesAndDefinitionsFromTable:usingBlock:
_alterTableNamed:withNewColumnDefinitions:newColumnNames:oldColumnNames:
genreForGenre:
allExportPropertyKeysForEntityClass:returnedCount:
initWithPersistentId:entityClass:library:
initWithPersistentId:entityClass:propertyKeysToExport:numKeys:library:
initWithPersistentId:entityClass:properties:library:
charValueForProperty:
shortValueForProperty:
longValueForProperty:
longlongValueForProperty:
dataValueForProperty:
stringValueForProperty:
hasValueForProperty:
isValid
propertyKeysToExport:
exportData
_propertyNameForKey:
_propertyNamesFromKeys:numKeys:
_allExportPropertyNames
persistentId
_persistentId
Tq,R,N,V_persistentId
nextFilepathForPlaylistType:withPersistentID:inLibrary:
smartCriteriaCanBeEvaluated:
hasCriterionInCriteriaList:forITDBTrackField:
predicateForCriteriaList:parentMatchedAny:
updateBuiltInSmartPlaylistNamesForCurrentLanguageInLibrary:
autoCreatedBuiltInSmartPlaylistsPIDs:
deleteAutoCreatedBuiltInSmartPlaylistsPIDs:inLibrary:
_updateContainedMediaTypeInContainerWithPersistentID:connection:itemUpdateBlock:
_mediaTypesForTracksWithPersistentIDs:usingConnection:
_mediaTypesForTracksInContainerWithPersistentID:connection:
_clearContainerMediaTypeInContainerWithPersistentID:connection:
_addMediaTypesToContainerWithPersistentID:mediaTypes:connection:
_removeMediaTypesFromContainerWithPersistentID:mediaTypes:connection:
populateMediaTypesOfStaticContainersInLibrary:
_lovedPlaylistContainerPID:trackPositions:forTrackWithPersistentID:usingConnection:
updateLovedPlaylistByAddingTrackWithPersistentID:inLibrary:
updateLovedPlaylistByRemovingTrackWithPersistentID:inLibrary:
removeAnyNonLibraryItemsInPersistentIDs:fromContainersInLibrary:usingConnection:
removeNonLibraryItemsFromContainersInLibrary:usingConnection:
removeNonLibraryItemsFromContainer:usingConnection:
reloadContainedMediaTypesForContainerWithPersistID:usingConnection:
_allStaticItemContainersInLibrary:usingConnection:
_insertNewSmartPlaylist:criteriaBlob:evaluationOrder:limited:trackOrder:distinguishedKind:inLibrary:cachedNameOrders:
_reloadContainedMediaTypes:removedMediaTypes:addedMediaTypes:notify:incrementEntityRevision:usingLibrary:connection:forContainerPersistentID:
importedCriteriaList
smartCriteriaPredicate
isEvaluationOrderingDescending
isLimitedByCount
isLimitOrderingDescending
limitingProperty
evaluationOrderingTerms
limitOrderingTerms
limitValue
cloudDisplayOrderingTerms
displayOrderingTerms
removeAllTracks
setTracksWithPersistentIDs:notify:
appendTracksWithPersistentIDs:notify:
moveTrackFromIndex:toIndex:
removeTracksAtIndexes:notify:
removeFirstTrack
trackPersistentIds
childPlaylistPersistentIds
isBuiltInSmartPlaylist
_maxPositionForTracksUsingConnection:
_reloadContainedMediaTypes:removedMediaTypes:addedMediaTypes:notify:incrementEntityRevision:usingConnection:
_removeTracksAtIndexes:notify:usingConnection:
_setContainerSeedItemPersistentIDValue:
_supportsOrderedTrackOperations
_setItemPersistentIDs:reloadContainedMediaTypes:removedMediaTypes:addedMediaTypes:notify:incrementEntityRevision:usingConnection:
limitedByCount
TB,R,N,GisLimitedByCount
limitOrderingDescending
TB,R,N,GisLimitOrderingDescending
orderingTermsForITTGTrackOrder:descending:
initWithEntityClass:container:predicate:orderingTerms:
requiresSmartLimiting
selectPersistentIDsSQLAndPropertiesForResultSet:ordered:
container
limitedPersistentIDs
_containerPredicate
_container
_limitedPersistentIDs
T@"NSArray",R,N,V_limitedPersistentIDs
T@"ML3Container",R,N,V_container
containerQueryWithContainer:
containerQueryWithContainer:predicate:
containerQueryWithContainer:predicate:orderingTerms:
initWithDatabaseImport:
cancel
_performImportWithTransaction:
_processSyncPackage:withImportSession:
_processSyncHeader:
_processSyncError:
_processSyncOperation:withImportSession:
_processMediaItemOperation:withImportSession:
_processPlaylistOperation:withImportSession:
_unlinkUnavailableMediaItems
_totalSyncPackageCount
_syncPackageNum
_syncSessionStarted
_syncType
_isServerImport
_readSourceState
_isReadSourceCancelled
_importFinished
_syncIdsToUnlink
_accessQueue
_readSource
initWithChapterDataRef:totalTimeInMS:
initWithChapterDataRef:track:
_track
initWithDatabasePath:accountChangeObserver:
setAccountChangeObserver:
T@"NSString",R,C,N,V_databasePath
T@"<MLMediaLibraryAccountChangeObserver>",W,N,V_accountChangeObserver
libraryContainerPathWithCompletion:
sharedService
libraryContainerPathWithError:
T@"MLMediaLibraryResourcesServiceClient",R,N
_initWithAccountChangeObserver:
_libraryContainerPathWithError:
xpcClientConnection
connectionWithListenerEndpoint:
calloutQueue
setXpcClientConnection:
accountChangeOperationQueue
setAccountChangeOperationQueue:
_calloutQueue
_xpcClientConnection
_accountChangeOperationQueue
T@"NSObject<OS_dispatch_queue>",R,N,V_calloutQueue
T@"NSXPCConnection",&,N,V_xpcClientConnection
T@"<MLMediaLibraryAccountChangeObserver>",&,N,V_accountChangeObserver
T@"NSOperationQueue",&,N,V_accountChangeOperationQueue
initWithLibrary:delegate:completion:
runValidation
_truncateDatabaseFileForLibrary:withError:
_validateLibraryDatabaseIfNecessary:withError:
_performSchemaUpgradeWithLibrary:error:
_performDatabasePreprocessingWithLibrary:error:
_internalUserAgreesToRebuildUnmigratableDatabase
_logDatabasePathDirectoryAttributes
truncateBeforeValidating
setTruncateBeforeValidating:
completionHandler
setCompletionHandler:
_truncateBeforeValidating
_completionHandler
T@"<ML3DatabaseValidationDelegate>",W,N,V_delegate
T@?,C,N,V_completionHandler
TB,N,V_truncateBeforeValidating
setStoreId:
setHasStoreId:
hasStoreId
hasName
setPersistentId:
setHasPersistentId:
hasPersistentId
storeId
_storeId
Tq,N,V_storeId
T@"NSString",&,N,V_name
Tq,N,V_persistentId
composerForComposerName:
albumArtistForEffectiveAlbumArtistName:
diffMetadataWithPersistentID:
diffMetadataWithPersistentID:containerPersistentID:itemPersistentID:newPosition:previousPosition:
setPersistentID:
containerPersistentID
setContainerPersistentID:
itemPersistentID
setItemPersistentID:
newPosition
setNewPosition:
previousPosition
setPreviousPosition:
_containerPersistentID
_itemPersistentID
_newPosition
_previousPosition
Tq,N,V_persistentID
Tq,N,V_containerPersistentID
Tq,N,V_itemPersistentID
Tq,N,V_newPosition
Tq,N,V_previousPosition
initWithContainerPersistentID:updatedItemsPersistentIDs:connection:
containerItemsToUpdate
setContainerItemsToUpdate:
containerItemsToDelete
setContainerItemsToDelete:
_updatedItemsPersistentIDs
_containerItemsToUpdate
_containerItemsToDelete
T@"NSArray",&,N,V_containerItemsToUpdate
T@"NSArray",&,N,V_containerItemsToDelete
operationsCount
suspendedOperationsCount
isSuspended
performImport:fromSource:progressBlock:withCompletionHandler:
currentOperationProgressWithError:
cancelAllImportOperations
cancelImportOperationsOriginatingFromClient:
cancelImportOperationsForSource:withCompletionHandler:
suspendImportOperations
resumeSuspendedImportOperations
_importOperations
_suspendedImportOperations
_handleImportOperationCompleted:
_handleImportOperationCancelled:
lastImportError
setLastImportError:
_importOperationQueue
_lastImportError
T@"NSError",&,N,V_lastImportError
suspended
TB,R,N,GisSuspended
enumerateOrphanedAssetsUsingBlock:
updateSystemPlaylistNamesForCurrentLanguageUsingConnection:
updateOrderingLanguagesForCurrentLanguage
_updateSystemPlaylist:withName:usingConnection:
mergeWithDictionary:
systemConfiguration
initWithConfigurationDictionaries:
supportedSizesForMediaType:artworkType:
sizesToAutogenerateForMediaType:artworkType:
_supportedSizeKeysForMediaType:artworkType:
accessQueue
setAccessQueue:
artworkConfigurationDictionary
setArtworkConfigurationDictionary:
supportedSizesCache
setSupportedSizesCache:
mainScreenScale
setMainScreenScale:
_artworkConfigurationDictionary
_supportedSizesCache
_mainScreenScale
T@"NSObject<OS_dispatch_queue>",&,N,V_accessQueue
T@"NSDictionary",&,N,V_artworkConfigurationDictionary
T@"NSMutableDictionary",&,N,V_supportedSizesCache
Td,N,V_mainScreenScale
keyWithMediaType:artworkType:
_mediaType
initWithCacheSize:
cachedStatementForSQL:
allStatements
cacheStatement:
clearCache
cacheSize
_statementsDictionary
_nodeList
_cacheSize
TQ,R,N,V_cacheSize
initWithDictionaryKey:
dictionaryKey
setDictionaryKey:
next
setNext:
_dictionaryKey
_next
T@"NSObject<NSCopying>",C,N,V_dictionaryKey
T@"ML3StatementCacheNode",&,N,V_next
appendNode:
promoteNodeWithDictionaryKey:
oldestNode
deleteOldestNode
deleteAllNodes
firstNode
lastNode
_firstNode
_lastNode
T@"ML3StatementCacheNode",R,N,V_firstNode
T@"ML3StatementCacheNode",R,N,V_lastNode
ml_errorWithCode:
ml_errorWithCode:description:
hasSortName
sortName
setSortName:
_sortName
T@"NSString",&,N,V_sortName
childIdentifiersType
itemsType
setType:
setHasType:
hasType
typeAsString:
StringAsType:
setHidden:
setHasHidden:
hasHidden
hasSmartPlaylistInfo
sortType
setSortType:
setHasSortType:
hasSortType
sortTypeAsString:
StringAsSortType:
setReversedSorting:
setHasReversedSorting:
hasReversedSorting
hasParentIdentifier
hasGeniusSeedTrackIdentifier
setDistinguishedKind:
setHasDistinguishedKind:
hasDistinguishedKind
hasCloudGlobalId
setCloudIsSubscribed:
setHasCloudIsSubscribed:
hasCloudIsSubscribed
setCloudIsCuratorPlaylist:
setHasCloudIsCuratorPlaylist:
hasCloudIsCuratorPlaylist
hasExternalVendorIdentifier
hasExternalVendorDisplayName
hasExternalVendorTag
setExternalVendorPlaylist:
setHasExternalVendorPlaylist:
hasExternalVendorPlaylist
setCreationDateTime:
setHasCreationDateTime:
hasCreationDateTime
setModificationDateTime:
setHasModificationDateTime:
hasModificationDateTime
setLastPlayedDateTime:
setHasLastPlayedDateTime:
hasLastPlayedDateTime
setCloudIsSharingDisabled:
setHasCloudIsSharingDisabled:
hasCloudIsSharingDisabled
hasCloudVersionHash
hasArtworkId
setLikedState:
setHasLikedState:
hasLikedState
setRemoteSourceType:
setHasRemoteSourceType:
hasRemoteSourceType
setOwner:
setHasOwner:
hasOwner
setEditable:
setHasEditable:
hasEditable
setPlayCount:
setHasPlayCount:
hasPlayCount
setShared:
setHasShared:
hasShared
setVisible:
setHasVisible:
hasVisible
setAuthorStoreId:
setHasAuthorStoreId:
hasAuthorStoreId
hasAuthorDisplayName
hasAuthorStoreURL
hasAuthorHandle
setMinRefreshInterval:
setHasMinRefreshInterval:
hasMinRefreshInterval
setCloudLastUpdateTime:
setHasCloudLastUpdateTime:
hasCloudLastUpdateTime
setSubscriberCount:
setHasSubscriberCount:
hasSubscriberCount
setSubscriberPlayCount:
setHasSubscriberPlayCount:
hasSubscriberPlayCount
setSubscriberLikedCount:
setHasSubscriberLikedCount:
hasSubscriberLikedCount
hasSubscriberURL
hasPlaylistDescription
hasCloudUniversalLibraryId
setSecondaryArtworkSourceType:
setHasSecondaryArtworkSourceType:
hasSecondaryArtworkSourceType
hasSecondaryArtworkId
setPlaylistCategoryTypeMask:
setHasPlaylistCategoryTypeMask:
hasPlaylistCategoryTypeMask
hasPlaylistGroupingSortKey
clearChildIdentifiers
addChildIdentifiers:
childIdentifiersCount
childIdentifiersAtIndex:
clearItems
addItems:
itemsCount
itemsAtIndex:
hidden
smartPlaylistInfo
setSmartPlaylistInfo:
reversedSorting
parentIdentifier
setParentIdentifier:
geniusSeedTrackIdentifier
setGeniusSeedTrackIdentifier:
distinguishedKind
cloudGlobalId
setCloudGlobalId:
cloudIsSubscribed
cloudIsCuratorPlaylist
externalVendorIdentifier
setExternalVendorIdentifier:
externalVendorDisplayName
setExternalVendorDisplayName:
externalVendorTag
setExternalVendorTag:
externalVendorPlaylist
creationDateTime
modificationDateTime
lastPlayedDateTime
cloudIsSharingDisabled
cloudVersionHash
setCloudVersionHash:
artworkId
setArtworkId:
likedState
remoteSourceType
owner
editable
playCount
shared
visible
authorStoreId
authorDisplayName
setAuthorDisplayName:
authorStoreURL
setAuthorStoreURL:
authorHandle
setAuthorHandle:
minRefreshInterval
cloudLastUpdateTime
subscriberCount
subscriberPlayCount
subscriberLikedCount
subscriberURL
setSubscriberURL:
playlistDescription
setPlaylistDescription:
cloudUniversalLibraryId
setCloudUniversalLibraryId:
secondaryArtworkSourceType
secondaryArtworkId
setSecondaryArtworkId:
playlistCategoryTypeMask
playlistGroupingSortKey
setPlaylistGroupingSortKey:
childIdentifiers
setChildIdentifiers:
items
setItems:
_authorStoreId
_cloudLastUpdateTime
_creationDateTime
_lastPlayedDateTime
_minRefreshInterval
_modificationDateTime
_artworkId
_authorDisplayName
_authorHandle
_authorStoreURL
_childIdentifiers
_cloudGlobalId
_cloudUniversalLibraryId
_cloudVersionHash
_distinguishedKind
_externalVendorDisplayName
_externalVendorIdentifier
_externalVendorTag
_geniusSeedTrackIdentifier
_items
_likedState
_parentIdentifier
_playCount
_playlistCategoryTypeMask
_playlistDescription
_playlistGroupingSortKey
_remoteSourceType
_secondaryArtworkId
_secondaryArtworkSourceType
_smartPlaylistInfo
_sortType
_subscriberCount
_subscriberLikedCount
_subscriberPlayCount
_subscriberURL
_type
_cloudIsCuratorPlaylist
_cloudIsSharingDisabled
_cloudIsSubscribed
_editable
_externalVendorPlaylist
_hidden
_owner
_reversedSorting
_shared
_visible
Ti,N,V_type
TB,N,V_hidden
T@"MIPSmartPlaylistInfo",&,N,V_smartPlaylistInfo
Ti,N,V_sortType
TB,N,V_reversedSorting
T@"MIPMultiverseIdentifier",&,N,V_parentIdentifier
T@"MIPMultiverseIdentifier",&,N,V_geniusSeedTrackIdentifier
Ti,N,V_distinguishedKind
T@"NSString",&,N,V_cloudGlobalId
TB,N,V_cloudIsSubscribed
TB,N,V_cloudIsCuratorPlaylist
T@"NSString",&,N,V_externalVendorIdentifier
T@"NSString",&,N,V_externalVendorDisplayName
T@"NSString",&,N,V_externalVendorTag
TB,N,V_externalVendorPlaylist
Tq,N,V_creationDateTime
Tq,N,V_modificationDateTime
Tq,N,V_lastPlayedDateTime
TB,N,V_cloudIsSharingDisabled
T@"NSString",&,N,V_cloudVersionHash
T@"NSString",&,N,V_artworkId
Ti,N,V_likedState
Ti,N,V_remoteSourceType
TB,N,V_owner
TB,N,V_editable
Ti,N,V_playCount
TB,N,V_shared
TB,N,V_visible
Tq,N,V_authorStoreId
T@"NSString",&,N,V_authorDisplayName
T@"NSString",&,N,V_authorStoreURL
T@"NSString",&,N,V_authorHandle
Tq,N,V_minRefreshInterval
Tq,N,V_cloudLastUpdateTime
Ti,N,V_subscriberCount
Ti,N,V_subscriberPlayCount
Ti,N,V_subscriberLikedCount
T@"NSString",&,N,V_subscriberURL
T@"NSString",&,N,V_playlistDescription
T@"NSString",&,N,V_cloudUniversalLibraryId
Ti,N,V_secondaryArtworkSourceType
T@"NSString",&,N,V_secondaryArtworkId
Ti,N,V_playlistCategoryTypeMask
T@"NSString",&,N,V_playlistGroupingSortKey
T@"NSMutableArray",&,N,V_childIdentifiers
T@"NSMutableArray",&,N,V_items
normalizeProperties
isEqualIgnoringTimesAndTitle:
imageData
setImageData:
startTimeInMilliseconds
setStartTimeInMilliseconds:
title
setTitle:
setURL:
URLTitle
setURLTitle:
imageCacheKey
setImageCacheKey:
_imageData
_imageCacheKey
_startTimeInMilliseconds
_title
_url
_urlTitle
T@"NSData",C,N,V_imageData
T@"NSString",C,N,V_imageCacheKey
TQ,N,V_startTimeInMilliseconds
T@"NSString",C,N,V_title
T@"NSURL",C,N,V_url
T@"NSString",C,N,V_urlTitle
sharedDaemonClient
T@"ML3DaemonClient",R,N
initWithMoviePropertiesDictionary:
castMembers
copyrightWarning
directors
producers
screenwriters
setCastMembers:
setCopyrightWarning:
setDirectors:
setProducers:
setScreenwriters:
setStudioName:
studioName
copyMoviePropertiesDictionary
_setValue:forKey:
_setValueCopy:forKey:
_dictionary
T@"NSArray",C,N
initWithMovieArtistDictionary:
artistName
ITunesStoreIdentifier
setArtistName:
setITunesStoreIdentifier:
copyMovieArtistDictionary
T@"NSNumber",C,N
initWithName:foreignTable:foreignColumn:joinColumn:
shouldImportFromForeignTable
columnName
foreignTableName
foreignColumnName
joinColumnName
_columnName
_foreignTableName
_foreignColumnName
_joinColumnName
T@"NSString",R,N,V_columnName
T@"NSString",R,N,V_foreignTableName
T@"NSString",R,N,V_foreignColumnName
T@"NSString",R,N,V_joinColumnName
setDynamic:
setHasDynamic:
hasDynamic
setFiltered:
setHasFiltered:
hasFiltered
setLimited:
setHasLimited:
hasLimited
setLimitKind:
setHasLimitKind:
hasLimitKind
setEvaluationOrder:
setHasEvaluationOrder:
hasEvaluationOrder
setLimitOrder:
setHasLimitOrder:
hasLimitOrder
setLimitValue:
setHasLimitValue:
hasLimitValue
setEnabledItemsOnly:
setHasEnabledItemsOnly:
hasEnabledItemsOnly
setReverseLimitOrder:
setHasReverseLimitOrder:
hasReverseLimitOrder
hasSmartCriteria
setGenius:
setHasGenius:
hasGenius
dynamic
filtered
limited
limitKind
evaluationOrder
limitOrder
enabledItemsOnly
reverseLimitOrder
smartCriteria
setSmartCriteria:
genius
_evaluationOrder
_limitKind
_limitOrder
_limitValue
_smartCriteria
_dynamic
_enabledItemsOnly
_filtered
_genius
_limited
_reverseLimitOrder
TB,N,V_dynamic
TB,N,V_filtered
TB,N,V_limited
Ti,N,V_limitKind
TI,N,V_evaluationOrder
TI,N,V_limitOrder
TI,N,V_limitValue
TB,N,V_enabledItemsOnly
TB,N,V_reverseLimitOrder
T@"NSData",&,N,V_smartCriteria
TB,N,V_genius
initWithContentRatingDictionary:
ratingDescription
ratingLabel
ratingRank
ratingSystem
setRatingDescription:
setRatingLabel:
setRatingRank:
setRatingSystem:
initWithStringRepresentation:
copyStringRepresentation
T@"NSNumber",&,N
sharedGeniusDatabase
musicLibrary
performGeniusDatabaseReadWithBlock:
_hasRowsInTable:
_getInt32ValueInTable:column:
_getInt64ValueInTable:column:where:limit:
_copyBlobData:blobAllocType:table:blobColumn:where:
_copyBlobDataAndBytesInTable:blobColumn:where:
_readBlobIntoData:table:blobColumn:where:
_readBlobForRowID:intoData:table:blobColumn:
_hasAnySongs
hasGeniusDataAvailable
hasGeniusFeatureEnabled
defaultMinTrackCount
defaultTrackCount
copyGeniusConfigrationDataAndBytes
geniusConfigurationVersion
copyGeniusMetadataDataAndBytesForGlobalID:
copyGeniusSimilaritiesDataAndBytesForGlobalID:
getGeniusConfigrationDataAndBytesIntoData:
getGeniusMetadataDataAndBytesForGlobalID:intoData:
getGeniusSimilaritiesDataAndBytesForGlobalID:intoData:
ignoreUnusedWarnings
useFakeGeniusData
populateContainer:withSeedTrack:completionBlock:
playlistControllerWithSeedTracks:error:
geniusTracksForSeedTrack:error:
tracksFromClusterForCount:error:
_sharedBlobMutableData
_canIncludeTrackInGeniusContainer:
_debugGetTracksStartingAtTrackWithPersistentID:maxTracks:stride:
_onBackgroundQueue_fakePopulateContainer:withSeedTrack:error:
_onBackgroundQueue_populateContainer:seedTrack:error:
_createClusterPlaylistWithSeedTracks:error:
_onBackgroundQueue_tracksFromClusterForPlaylistItemMax:error:
_echo
_echo_library
_echo_cluster_playlist
session:failedToAddItem:shouldStop:
session:failedToUpdateItem:shouldStop:
session:failedToRemoveItem:shouldStop:
sessionFailedToAddItem:completion:
sessionFailedToUpdateItem:completion:
sessionFailedToRemoveItem:completion:
sessionDidUpdateProgress:
beginSessionWithConfiguration:completion:
endSessionWithCompletion:
cancelSessionWithCompletion:
addItems:completion:
updateItems:completion:
removeItems:completion:
initWithConfiguration:delegate:
start
addItemsReturningResult:
updateItems:
updateItemsReturningResult:
removeItems:
removeItemsReturningResult:
progress
_sessionConfiguration
_hasActiveSession
_progress
T@"NSProgress",R,N,V_progress
populateArtworkCacheWithArtworkData:
populateChapterDataWithImportChapters:
populateLocationPropertiesWithPath:
populateLocationPropertiesWithPath:isProtected:
populateLocationPropertiesWithPath:protectionType:
populateLocationPropertiesWithPath:protectionType:completionBlock:
_populateLocationPropertiesWithPath:protectionType:fromLibrary:usingConnection:
_normalizedImportChapters:trackPersistentID:
flattenedChapterDataWithImportChapters:library:trackPersistentID:
flattenedChapterDataFromSyncInfoDictionaries:trackPersistentID:
flattenedChapterDataFromDAAPInfoDictionary:trackPersistentID:
importChaptersByParsingAsset:
chapterDataRef
_chapterDataCookieIndexMapForProperty:ofChapterTOC:
enumerateArtworkCacheIDsInFlattenedChapterData:usingBlock:
enumerateChapterTimesInFlattenedChapterData:usingBlock:
countOfChapters
_cachedCookieIndexMapForProperty:createIfNecessary:
countOfGroupsForProperty:
chapterIndexForGroupIndex:groupingProperty:
groupIndexForChapterIndex:groupingProperty:
totalTimeInMS
durationInMSOfGroupAtIndex:groupingProperty:
groupIndexAtTimeLocationInMS:groupingProperty:
timeLocationInMSOfGroupAtIndex:groupingProperty:
timeLocationInMSOfChapterAtIndex:
titlePropertyOfChapterAtIndex:
urlTitleTrimmingCharacterSet
urlTitlePropertyOfChapterAtIndex:
urlPropertyOfChapterAtIndex:
_totalTimeInMS
_chapterDataRef
_picCookieIndexMap
_urlCookieIndexMap
_nameCookieIndexMap
setNumTracks:
setHasNumTracks:
hasNumTracks
setNumDiscs:
setHasNumDiscs:
hasNumDiscs
setCompilation:
setHasCompilation:
hasCompilation
hasCloudId
numTracks
numDiscs
compilation
cloudId
setCloudId:
_cloudId
_numDiscs
_numTracks
_compilation
Ti,N,V_numTracks
Ti,N,V_numDiscs
TB,N,V_compilation
T@"NSString",&,N,V_cloudId
purgeableStorageSizeWithUrgency:
purgeableStorageSizeWithUrgency:includeAutoFilledTracks:
clearPurgeableStorageAmount:withUrgency:
clearPurgeableStorageAmount:withUrgency:includeAutoFilledTracks:
clearAllRemovedTracks
setAutoFilledTracksArePurgeable:
autoFilledTracksArePurgeable
setShouldOptimizeStorage:
shouldOptimizeStorage
setMinimumPurgeableStorage:
minimumPurgeableStorage
enumeratePurgeableAlbumTracksForUrgency:usingBlock:
_shouldPurgeKeepLocalTracksForUrgency:
_databaseFileFreeSpace
_cloudAssetsTotalSize
_artworkTotalSize
_shouldPurgeAllArtworkAtUrgency:
_purgeAllArtwork
_purgeableArtworkTotalSizeWithUrgency:
_clearPurgeableArtworkOfAmount:withUrgency:
_managedPurgeableTracksTotalSizeWithUrgency:
_managedClearPurgeableTracksOfAmount:urgency:
_purgeableItemsPredicateSQLWithUrgency:
_nonPurgeableAlbumsQuerySQLWithUrgency:
_purgeableAlbumsQuerySQLWithUrgency:
_totalSizeForAllNonCacheTracks
_enumeratePurgeableStreamedTracksForUrgency:usingBlock:
_enumeratePurgeableAlbumTracksForUrgency:usingBlock:
_purgeableTracksTotalSizeWithUrgency:includeAutoFilledTracks:
_enumeratePurgeableTracksForUrgency:includeAutoFilledTracks:includeCloudAssets:usingBlock:
_purgeableTrackPredicateWithUrgency:includeAutoFilledTracks:includeCloudAssets:
_allKeepLocalPlaylistTracks
_notInKeepLocalCollectionPredicate
_clearDatabaseFileFreeSpace
_clearAllCloudAssets
_clearOrphanedAssetsOfAmount:withUrgency:
_clearPurgeableTracksOfAmount:withUrgency:includeAutoFilledTracks:
_clearPurgeableTracksOfAmount:withUrgency:includeCloudAssets:includeAutoFilledTracks:
clearCloudAssetSharedCache
artworkDirectory
originalArtworkDirectory
rootArtworkCacheDirectory
artworkCacheDirectoryForSize:
artworkCacheDirectoryForEffect:
hasOriginalArtworkForRelativePath:
isArtworkFetchableForPersistentID:entityType:artworkType:artworkSourceType:
deviceSupportsASTC
devicePreferredImageFormat
artworkRelativePathFromToken:
artworkTokenForArtistHeroURL:
artworkTokenForChapterWithItemPID:retrievalTime:
artworkSourceTypeForTrackSource:
initWithName:moduleMethods:
moduleMethods
context
setContext:
_moduleMethods
_context
T^{sqlite3_module=i^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?},R,N,V_moduleMethods
T@"<ML3DatabaseModuleContext>",&,N,V_context
setRental:
setHasRental:
hasRental
setHasChapterData:
setHasHasChapterData:
hasHasChapterData
hasExtendedContentName
hasMovieInfo
setHasAlternateAudio:
setHasHasAlternateAudio:
hasHasAlternateAudio
setHasSubtitles:
setHasHasSubtitles:
hasHasSubtitles
setAudioLanguage:
setHasAudioLanguage:
hasAudioLanguage
setAudioTrackIndex:
setHasAudioTrackIndex:
hasAudioTrackIndex
setAudioTrackId:
setHasAudioTrackId:
hasAudioTrackId
setSubtitleLanguage:
setHasSubtitleLanguage:
hasSubtitleLanguage
setSubtitleTrackIndex:
setHasSubtitleTrackIndex:
hasSubtitleTrackIndex
setRentalDuration:
setHasRentalDuration:
hasRentalDuration
setRentalPlaybackDuration:
setHasRentalPlaybackDuration:
hasRentalPlaybackDuration
setRentalPlaybackStartedDateTime:
setHasRentalPlaybackStartedDateTime:
hasRentalPlaybackStartedDateTime
setRentalStartedDateTime:
setHasRentalStartedDateTime:
hasRentalStartedDateTime
hasFlattenedChapterData
rental
hasChapterData
extendedContentName
setExtendedContentName:
movieInfo
setMovieInfo:
hasAlternateAudio
hasSubtitles
audioLanguage
audioTrackIndex
audioTrackId
subtitleLanguage
subtitleTrackIndex
rentalDuration
rentalPlaybackDuration
rentalPlaybackStartedDateTime
rentalStartedDateTime
flattenedChapterData
setFlattenedChapterData:
_rentalDuration
_rentalPlaybackDuration
_rentalPlaybackStartedDateTime
_rentalStartedDateTime
_audioLanguage
_audioTrackId
_audioTrackIndex
_extendedContentName
_flattenedChapterData
_movieInfo
_subtitleLanguage
_subtitleTrackIndex
_hasAlternateAudio
_hasChapterData
_hasSubtitles
_rental
TB,N,V_rental
TB,N,V_hasChapterData
T@"NSString",&,N,V_extendedContentName
T@"NSString",&,N,V_movieInfo
TB,N,V_hasAlternateAudio
TB,N,V_hasSubtitles
Ti,N,V_audioLanguage
Ti,N,V_audioTrackIndex
Ti,N,V_audioTrackId
Ti,N,V_subtitleLanguage
Ti,N,V_subtitleTrackIndex
Tq,N,V_rentalDuration
Tq,N,V_rentalPlaybackDuration
Tq,N,V_rentalPlaybackStartedDateTime
Tq,N,V_rentalStartedDateTime
T@"NSData",&,N,V_flattenedChapterData
storeLinkSchemaSQL
sortMapSchemaSQL
sortMapNewSchemaSQL
itemSchemaSQL
itemNewSchemaSQL
allSchemaSQL
allPragmaSQL
allTriggersSQL
allTables
indexSchemaSQL
itemIndexSchemaSQL
userVersionUsingConnection:
userVersionMatchesSystemUsingConnection:
orderingLanguageMatchesSystemUsingConnection:
dropIndexesUsingConnection:tableNames:
supportsUbiquitousPlaybackPositions
uppService
updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:
updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:
_setValues:forProperties:withEntityClass:usingPersistentID:connection:error:
ML3NameOrderValue
valueWithML3NameOrder:
hasErrorDescription
setErrorCode:
setHasErrorCode:
hasErrorCode
errorDescription
setErrorDescription:
errorCode
_errorCode
_errorDescription
T@"NSString",&,N,V_errorDescription
Ti,N,V_errorCode
lastPackage
setLastPackage:
setHasLastPackage:
hasLastPackage
hasHeader
hasSyncOperation
hasError
header
setHeader:
syncOperation
setSyncOperation:
error
setError:
_error
_header
_syncOperation
_lastPackage
TB,N,V_lastPackage
T@"MSPMediaSyncHeader",&,N,V_header
T@"MSPMediaSyncOperation",&,N,V_syncOperation
T@"MSPMediaSyncError",&,N,V_error
_importTracksUsingImportSession:
_importPlaylistsUsingImportSession:
_trackInfo
_playlistInfo
initWithPersistentID:albumArtistPID:
albumArtistPID
_albumArtistPID
Tq,R,N,V_albumArtistPID
initWithAlbumPID:albumArtistPID:
addMisgroupedTrack:
misgroupedTracks
albumPID
_misgroupedTracks
_albumPID
Tq,R,N,V_albumPID
_removeSource:usingTransaction:
_removePlaylistsWithPersistentIDs:fromSource:usingTransaction:
_removeRemotePlaylistsWithNoSourceUsingTransation:
setTotalPackages:
setHasTotalPackages:
hasTotalPackages
syncType
setSyncType:
setHasSyncType:
hasSyncType
syncTypeAsString:
StringAsSyncType:
totalPackages
_totalPackages
Ti,N,V_totalPackages
Ti,N,V_syncType
initWithLookupItems:
initWithPlaylistsData:
playlistsData
parsedStorePlaylistsImportProperties
playlistCount
_playlistPropertiesForLookupItems:
_playlistPropertiesFromPlaylistData:
_bestPlaylistArtworkImageURLFromStoreArtworkVariants:
_bestArtworkImageURLFromStoreArtworkVariants:cropStyle:
_lookupItems
_playlistData
_parsedPlaylistsImportProperties
T@"NSData",R,N
initWithDatabaseConnection:tableName:
nextPersistentID
addIdMapping:forProperty:
nextPersistentIDForImportItem:
removePersistentIDFromIdMapping:
_pregeneratedIdMappings
operationType
setOperationType:
setHasOperationType:
hasOperationType
operationTypeAsString:
StringAsOperationType:
hasMultiverseId
hasMediaItem
hasPlaylist
multiverseId
setMultiverseId:
setMediaItem:
playlist
setPlaylist:
_multiverseId
_operationType
_playlist
Ti,N,V_operationType
T@"MIPMultiverseIdentifier",&,N,V_multiverseId
T@"MIPMediaItem",&,N,V_mediaItem
T@"MIPPlaylist",&,N,V_playlist
initWithName:reason:userInfo:
initWithReason:sqliteError:
_SQLITE_ERROR
_SQLITE_INTERNAL
_SQLITE_PERM
_SQLITE_ABORT
_SQLITE_BUSY
_SQLITE_LOCKED
_SQLITE_NOMEM
_SQLITE_READONLY
_SQLITE_INTERRUPT
_SQLITE_IOERR
_SQLITE_CORRUPT
_SQLITE_NOTFOUND
_SQLITE_FULL
_SQLITE_CANTOPEN
_SQLITE_PROTOCOL
_SQLITE_EMPTY
_SQLITE_SCHEMA
_SQLITE_TOOBIG
_SQLITE_CONSTRAINT
_SQLITE_MISMATCH
_SQLITE_MISUSE
_SQLITE_NOLFS
_SQLITE_AUTH
_SQLITE_FORMAT
_SQLITE_RANGE
_SQLITE_NOTADB
_SQLITE_ROW
_SQLITE_DONE
raise
databaseExceptionWithReason:sqliteError:
sqliteError
_sqliteError
T@"NSError",R,N,V_sqliteError
libraryContainerPath
libraryContainerPathByAppendingPathComponent:
libraryContainerRelativePath:
pathForResourceFileOrFolder:
pathForResourceFileOrFolder:basePath:relativeToBase:createParentFolderIfNecessary:
pathForBaseLocationPath:
mediaFolderPath
mediaFolderPathByAppendingPathComponent:
allLibraryContainerPaths
libraryPathForContainerPath:
cloudAssetsSharedCacheFolderPath
importOperationWithSourceType:databaseImport:
longDescription
setProgress:
setSuccess:
setReturnData:
_writerTransactionWithBlock:
_clientCompletionHandler
_setClientCompletionHandler:
import
setSuspended:
progressBlock
setProgressBlock:
success
returnData
_suspended
_success
_import
_progressBlock
_returnData
T@"ML3ServiceDatabaseImport",R,N,V_import
TB,N,GisSuspended,V_suspended
Tf,R,N,V_progress
T@?,C,N,V_progressBlock
TB,R,N,V_success
T@"NSError",R,N,V_error
T@"NSData",R,N,V_returnData
naturalStatementWithSQL:parameters:
initWithSQL:parameters:
setParameter:forPosition:
setSql:
parameters
setParameters:
_sql
_parameters
T@"NSString",C,N,V_sql
T@"NSMutableArray",&,N,V_parameters
libraryIdentifiersType
mediaObjectType
setMediaObjectType:
setHasMediaObjectType:
hasMediaObjectType
mediaObjectTypeAsString:
StringAsMediaObjectType:
mediaType
setMediaType:
setHasMediaType:
hasMediaType
mediaTypeAsString:
StringAsMediaType:
setAccountId:
setHasAccountId:
hasAccountId
setSagaId:
setHasSagaId:
hasSagaId
setPurchaseHistoryId:
setHasPurchaseHistoryId:
hasPurchaseHistoryId
clearLibraryIdentifiers
addLibraryIdentifiers:
libraryIdentifiersCount
libraryIdentifiersAtIndex:
accountId
sagaId
purchaseHistoryId
libraryIdentifiers
setLibraryIdentifiers:
_accountId
_purchaseHistoryId
_sagaId
_libraryIdentifiers
_mediaObjectType
Ti,N,V_mediaObjectType
Ti,N,V_mediaType
Tq,N,V_accountId
Tq,N,V_sagaId
Tq,N,V_purchaseHistoryId
T@"NSMutableArray",&,N,V_libraryIdentifiers
persistentIDAtIndex:
reverseEnumeratePersistentIDsUsingBlock:
containsPersistentIDs:
reverseEnumerateSectionsUsingBlock:
backingStoreByRemovingPersistentIDs:
_sections
_initWithQuery:supportsIncrementalUpdate:
initWithQuery:
_loadCurrentFullResults
_mergeChangesWithFromNewPIDs:changedPIDs:
_onQueueAddUpdateFinishedBlock:
_onQueueInvokeAndClearUpdateFinishedBlocksWithDidUpdateResult:
updateToLibraryCurrentRevision
_updateToLibraryCurrentRevision
entityLimit
query
revision
localRevision
_backingStore
_query
_revision
_localRevision
_supportsIncrementalUpdate
_updateToLibraryCurrentRevisionCompletionBlocks
_queue
_fixedPriorityQueue
T@"ML3Query",R,N,V_query
Tq,R,N,V_revision
Tq,R,N,V_localRevision
sortedBackingStoreForDisplayOrdering
_needsSorting
_needsReversing
_sortedBackingStore
_containerPID
_entityLimit
observerShouldForwardDistributedNotification:
initWithLibrary:distributedAndLocalNames:
addObserverForDistributedName:localName:
removeObserverWithDistributedName:
removeObserverWithLocalName:
enqueueLocalNotification:
enqueueLocalNotificationNamed:
enqueueDistributedNotificationNamed:
_observerForLocalName:
_observerForDistributedName:
_postEnqueuedLocalNotifications
_postEnqueuedDistributedNotifications
_notificationObservers
_queuedLocalNotifications
_queuedDistributedNotificationNames
T@"ML3MusicLibrary",R,W,N,V_library
reversedTerms:
orderingTermWithProperty:
orderingTermWithProperty:direction:
initWithProperty:direction:
initWithProperty:direction:collation:
direction
collation
_direction
_collation
T@"NSString",R,N,V_property
Ti,R,N,V_direction
T@"NSString",R,N,V_collation
integerValue
initWithTrackData:
trackData
parsedStoreItemsImportProperties
trackCount
_storePlatformDateFormatter
_storeItemsImportPropertiesFromLookupItems:
_storeItemsImportPropertiesFromTrackData:
_parentDictForItemAlbumId:
_importDictionaryForLookupItem:parentCollectionCache:
_artworkTokenFromLookupItem:
_artworkTokenForItemWithCollectionID:itemID:
_episodeTypeFromVideoSubTypeString:
_lookupItemArtworksForArtworkDictionaries:
_songDurationFromOffersArray:
_allSongItemsFromLookupItems:
_allSongItemsFromCollectionLookupItem:
_platformMetadataItem:matchesKind:
_platformMetadataItemIsMusicKind:
_platformMetadataItemIsSongKind:
_platformMetadataItemIsMusicVideoKind:
_platformMetadataItemIsAUCKind:
_platformMetadataItemIsAUCAudioKind:
_platformMetadataItemIsAUCVideoKind:
_platformMetadataItemIsVideoKind:
_platformMetadataItemIsTVShowKind:
_platformMetadataItemIsMovieKind:
_bestAlbumArtworkImageURLFromStoreArtworkVariants:
_trackData
_parsedStoreItemsImportProperties
daemonClient
processClient
T@"ML3Client",R,N
isDaemonClient
_processID
_bundleID
T@"NSXPCConnection",R,N,V_connection
T@"NSString",R,N,V_bundleID
Ti,R,N,V_processID
TB,R,N,GisDaemonClient
mediaLibraryWriter:terminatedTransaction:withError:
mediaLibraryWriter:didDestroyTransaction:
_watchdogTimerFired:
writerErrorWithCode:description:userInfo:
writerErrorWithCode:description:
setTransactionTimeout:
beginTransactionForLibrary:withClient:options:error:
executeUpdate:withParameters:onTransaction:error:
executeUntrustedUpdate:withParameters:onTransaction:error:
executeQuery:withParameters:options:onTransaction:error:
executeUntrustedQuery:withParameters:options:onTransaction:error:
endTransaction:shouldCommit:error:
performDatabaseOperation:onLibrary:withAttributes:options:fromClient:completionHandler:
cancelActiveTransactionForClient:
cancelAllActiveTransactions
cancelAllActiveDatabaseOperationsAndWaitUntilFinished:
cancelAllActiveDatabaseOperationsForClient:waitUntilFinished:
reset
_transactionForIdentifier:
_registerTransaction:
_unregisterTransaction:
_allDatabaseOperations
_createNewTransactionForLibrary:fromClient:readOnly:
_destroyTransaction:forceRelinquishConnection:
_destroyTransactionForIdentifier:forceRelinquishConnection:
_setupWatchdogTimer
_tearDownWatchdogTimer
_shouldWatchdogTransaction:
transactionTimeout
transactionMap
databaseOperationQueue
databaseOperationSerialQueue
_watchdogTimer
_transactionTimeout
_transactionMap
_databaseOperationQueue
_databaseOperationSerialQueue
T@"NSMutableDictionary",R,N,V_transactionMap
T@"NSOperationQueue",R,N,V_databaseOperationQueue
T@"NSOperationQueue",R,N,V_databaseOperationSerialQueue
T@"<ML3MediaLibraryWriterDelegate>",W,N,V_delegate
Td,N,V_transactionTimeout
sagaAccountID
setSagaAccountID:
sagaLastKnownActiveLockerAccountDSID
setSagaLastKnownActiveLockerAccountDSID:
sagaLastGeniusUpdateDate
setSagaLastGeniusUpdateDate:
sagaLastItemPlayDataUploadDate
setSagaLastItemPlayDataUploadDate:
sagaLastPlaylistPlayDataUploadDate
setSagaLastPlaylistPlayDataUploadDate:
sagaCloudLibraryCUID
setSagaCloudLibraryCUID:
sagaCloudLibraryTroveID
setSagaCloudLibraryTroveID:
sagaDatabaseUserVersion
setSagaDatabaseUserVersion:
sagaCloudAddToPlaylistBehavior
setSagaCloudAddToPlaylistBehavior:
sagaNeedsFullUpdateAfterNextUpdate
setSagaNeedsFullUpdateAfterNextUpdate:
sagaPrefersToMergeWithCloudLibrary
setSagaPrefersToMergeWithCloudLibrary:
storefrontIdentifier
setStorefrontIdentifier:
sagaOnDiskDatabaseRevision
setSagaOnDiskDatabaseRevision:
sagaLastLibraryUpdateTime
setSagaLastLibraryUpdateTime:
sagaLastSubscribedContainersUpdateTime
setSagaLastSubscribedContainersUpdateTime:
preferredVideoQuality
setPreferredVideoQuality:
clearSagaCloudAccountID
clearSagaLastGeniusUpdateDate
clearSagaLastItemPlayDataUploadDate
clearSagaLastPlaylistPlayDataUploadDate
clearSagaCloudLibraryCUID
clearSagaCloudLibraryTroveID
clearSagaPrefersToMergeWithCloudLibrary
clearSagaCloudAddToPlaylistBehavior
T@"NSDate",C,N
initWithLibrary:outputStream:
begin:
exportTrackAdded:
exportTrackUpdated:
exportTrackDeleted:
exportPlaylistAdded:
exportPlaylistDeleted:
outputStream
_outputStream
T@"NSOutputStream",R,N,V_outputStream
addMediaType:count:
enumerateMediaTypesWithBlock:
_map
copyFromLibrary:cancelHandler:
_initWithLibrary:cancelHandler:
_idle
loadFromLibrary:namesMatchingString:cancelHandler:
_initWithLibrary:matchString:cancelHandler:
_matchingSet
_matchString
predicateWithProperties:searchString:
initWithSearchString:matchingProperties:
_names
_searchProperties
T@"NSString",R,N,V_searchString
loadNamesFromLibrary:onConnection:forPredicate:loadAllNames:cancelHandler:
nameOrderPropertyForProperty:
observerWithConnection:
setConnection:
setupTaskAssertion
tearDownTaskAssertion
setupTimeoutTimer
tearDownTimeoutTimer
timeoutTimer
setTimeoutTimer:
taskAssertion
setTaskAssertion:
hasTimedOut
setTimedOut:
setBundleID:
_timedOut
_timeoutTimer
_taskAssertion
T@"NSXPCConnection",&,N,V_connection
T@"NSObject<OS_dispatch_source>",&,N,V_timeoutTimer
T@"MSVTaskAssertion",&,N,V_taskAssertion
timedOut
TB,N,GhasTimedOut,V_timedOut
T@"NSString",&,N,V_bundleID
sharedInstance
listener:shouldAcceptNewConnection:
T@"MLMediaLibraryResourcesServiceServer",R,N
initWithAccountChangeObserver:
observers
_blockExecutionForOnGoingAccountChangeIfNeeded
_unblockExecutionForFutureAccountChange
accountChangeSemaphore
_addObserver:
_removeObserver:
workQueue
setWorkQueue:
setCalloutQueue:
setAccountChangeSemaphore:
xpcServiceListener
setXpcServiceListener:
setObservers:
_workQueue
_accountChangeSemaphore
_xpcServiceListener
_observers
T@"NSObject<OS_dispatch_queue>",&,N,V_workQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_calloutQueue
T@"NSObject<OS_dispatch_semaphore>",&,N,V_accountChangeSemaphore
T@"NSXPCListener",&,N,V_xpcServiceListener
T@"NSMutableSet",&,N,V_observers
initWithPrivacyContext:path:priorityLevel:options:
path
priorityLevel
_path
_priorityLevel
T@"NSString",R,C,N,V_path
TQ,R,N,V_priorityLevel
TQ,R,N,V_options
T@"ML3DatabasePrivacyContext",R,N,V_privacyContext
validateDatabaseAtPath:withCompletionHandler:
attemptDatabaseFileRecoveryAtPath:withCompletionHandler:
checkIntegrityOfDatabaseAtPath:repairFaults:withCompletionHandler:
performDiagnosticWithCompletionHandler:
recreateDatabaseAtPath:withCompletionHandler:
beginTransactionForDatabaseWithContext:completionHandler:
executeUpdate:withParameters:onTransaction:withCompletionHandler:
executeQuery:withParameters:options:onTransaction:withCompletionHandler:
endTransaction:shouldCommit:withCompletionHandler:
performDatabaseOperation:withAttributes:options:completionHandler:
setOptions:withCompletionHandler:
performImport:fromSource:withUUID:completionHandler:
cancelImportOperation:completionHandler:
lockDatabaseForReason:withCompletion:
unlockDatabaseWithCompletion:
getLanguageResourcesWithCompletion:
updateSpotlightIndexForBundleID:withCompletion:
updateSpotlightIndexMetadataForItemsWithIdentifiers:bundleID:withCompletion:
updateSiriIndexMetadataForAllLibrariesWithCompletion:
performMaintenanceTasksForDatabaseAtPath:withCompletionHandler:
getMediaLibraryResourcesServiceListenerEndpointWithCompletion:
getClientImportServiceListenerEndpointWithCompletion:
serviceTerminatedTransactionWithIdentifier:error:
importOperationWithIdentifier:didUpdateWithProgress:
serviceInterface
clientInterface
syncIdFromMultiverseId:
multiverseIdentifierLibraryOnly:
protocolItem
protocolItemForDynamicUpdate
protocolItemWithProperties:inLibrary:
_albumArtistProtocolItemWithTrackProperties:inLibrary:
trackOrderFromProtocolSortType:
protocolSortTypeFromTrackOrder:
_calculateNewRun
_tableName
_validateStartingPersistentIdSQL
_nextUsedPersistentIdSQL
_currentPersistentID
_nextUsedPersistentID
sharedManager
T@"ML3MusicLibraryResourcesManager",R,N
initWithContext:
initWithBaseResourcesManager:
implementation
setImplementation:
_implementation
T@"_ML3BaseMusicLibraryResourcesManager",&,N,V_implementation
T@"ML3MusicLibraryResourcesManagerContext",&,N,V_context
_performMatchImportWithTransaction:
sharedMediaLibraryService
_setDaemonProcessInfo:
validateDatabaseAtPath:error:
performImport:fromSource:withProgressBlock:completionHandler:
mediaLibraryResourcesServiceListenerEndpointWithError:
clientImportServiceListenerEndpointWithError:
_serviceConnection
_replyQueue
_serviceProxy
_progressBlocksByUUID
_accountStoreDidChangeNotification:
shouldExecuteAccountChangeOperation:reason:
databasePathForDSID:
accountChangeOperationWillStartPerformingDatabasePathChange:newDatabasePath:
initWithAccountInfo:accountChangeObserver:
currentActiveAccountDSID
setCurrentActiveAccountDSID:
_libraryContainerPathForDSID:
_setupNotifications
_tearDownNotifications
_processAccountChangeNotification
_notifyClients:
setSerialQueue:
setAccountInfo:
accountStore
setAccountStore:
_currentActiveAccountDSID
_accountStore
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
T@"<_MSVAccountInformationProviding>",&,N,V_accountInfo
T@"NSString",C,N,V_currentActiveAccountDSID
T@"ACAccountStore",&,N,V_accountStore
prepareUnitTestDatabaseWithSQLFromContentsOfFile:error:
databasePathForUnitTest:withBasePath:
unitTestableLibraryForTest:basePath:setupSQLFilenames:
_enumerateUserIDsWithBlock:
_performFullIndexToRevision:withDatasetStream:
_performIncrementalIndexToRevision:withDatasetStream:
donators
_donators
T@"NSMutableArray",R,N,V_donators
jaliscoAccountID
setJaliscoAccountID:
jaliscoLastGeniusUpdateDate
setJaliscoLastGeniusUpdateDate:
jaliscoLastSupportedMediaKinds
setJaliscoLastSupportedMediaKinds:
jaliscoLastExcludedMediaKinds
jaliscoHasCloudGeniusData
setJaliscoHasCloudGeniusData:
jaliscoIsMusicGeniusUserEnabled
setJaliscoIsMusicGeniusUserEnabled:
jaliscoNeedsUpdateForTokens
setJaliscoNeedsUpdateForTokens:
jaliscoOnDiskDatabaseRevision
setJaliscoOnDiskDatabaseRevision:
jaliscoLastLibraryUpdateTime
setJaliscoLastLibraryUpdateTime:
clearJaliscoAccountID
clearJaliscoLastGeniusUpdateDate
clearJaliscoLastExcludedMediaKinds
sortJaliscoLastSupportedMediaKinds
updateJaliscoExcludedMediaKindsWith:excludingMediaKindsInSet:
jaliscoGetSortedMediaKinds:
initWithDatabaseFilePath:
_createSQLiteErrorWithCode:description:
_lastCorruptionRestoreAttemptDate
_updateLastCorruptionRestoreAttemptDate
_recreateDatabaseWithCompletion:
T@"NSString",R,N,V_path
initWithDatabaseTable:
unregister
dataSource
setDataSource:
_virtualTableName
_module
_databaseTable
_dataSource
T{shared_ptr<ML3VirtualTableDataSource>=^{ML3VirtualTableDataSource}^{__shared_weak_count}},N,V_dataSource
T@"<ML3VirtualTableDelegate>",W,N,V_delegate
T@"ML3DatabaseTable",R,N,V_databaseTable
T@"ML3DatabaseConnection",R,N,V_connection
virtualTableDidOpenCursor:
virtualTableDidCloseCursor:
databaseOperationForType:withLibrary:writer:
transaction
_operationTypeDescription
originatingClient
setOriginatingClient:
setOptions:
attributes
setAttributes:
_transaction
_beganNewTransaction
_originatingClient
_attributes
TQ,R,N,V_type
T@"ML3Client",&,N,V_originatingClient
T@"NSDictionary",C,N,V_options
T@"NSDictionary",C,N,V_attributes
T@"ML3ActiveTransaction",R,N
initWithAlbumArtistPersistentID:groupingKey:feedURL:seasonNumber:compilation:
keyValue
albumArtistPersistentID
groupingKey
feedURL
_albumArtistPersistentID
_groupingKey
_feedURL
Tq,R,N,V_albumArtistPersistentID
T@"NSData",R,N,V_groupingKey
T@"NSString",R,N,V_feedURL
Tq,R,N,V_seasonNumber
TB,R,N,V_compilation
initWithStatement:connection:
setLimitProperty:
setLimitProperty:limitValue:
indexForColumnName:
columnNameIndexMap
enumerateRowsWithBlock:
rows
hasAtLeastOneRow
objectForFirstRowAndColumn
int64ValueForFirstRowAndColumn
stringValueForFirstRowAndColumn
objectsInColumn:
_statement
limitProperty
_columnNameIndexMap
_limitIndex
_limitProperty
T@"NSString",C,N,V_limitProperty
Tq,N,V_limitValue
initWithParentResult:
columnCount
dataForColumnName:
dataForColumnIndex:
doubleForColumnName:
doubleForColumnIndex:
intForColumnName:
intForColumnIndex:
int64ForColumnName:
int64ForColumnIndex:
cStringForColumnName:
cStringForColumnIndex:
stringForColumnName:
stringForColumnIndex:
numberForColumnName:
numberForColumnIndex:
getBlobBytes:outLength:forColumnName:
getBlobBytes:outLength:forColumnIndex:
valueForColumnName:
valueForColumnIndex:
arrayRepresentation
objectForKeyedSubscript:
objectAtIndexedSubscript:
parentResult
_stmt
_parentResult
T@"ML3DatabaseResult",R,N,V_parentResult
initWithSQLiteStatement:SQL:
step
finalizeStatement
isBusy
clearBindings
bindInt:forParameterAtPosition:
bindInt64:forParameterAtPosition:
bindDouble:forParameterAtPosition:
bindNullForParameterAtPosition:
bindBytes:length:forParameterAtPosition:
bindBytesNoCopy:length:forParameterAtPosition:
bindUTF8String:forParameterAtPosition:
bindUTF8StringNoCopy:forParameterAtPosition:
bindUTF8StringNoCopy:length:forParameterAtPosition:
bindValue:forParameterAtPosition:
bindValuesForParameterNames:
bindValuesInArray:
sqliteStatement
clearBindingsAfterRunning
setClearBindingsAfterRunning:
isExecuting
setIsExecuting:
_clearBindingsAfterRunning
_isExecuting
_sqliteStatement
T^{sqlite3_stmt=},R,N,V_sqliteStatement
TB,N,V_clearBindingsAfterRunning
TB,N,V_isExecuting
ml_bindToSQLiteStatement:atPosition:
ml_stringValueForSQL
defaultRenderer
statementWithPrefix:inParameterCount:
initWithLibraryPath:trackData:playlistData:
initWithLibraryPath:trackData:playlistData:clientIdentity:
_copyWithZone:usingConcreteClass:
libraryPath
playlistData
fileHandle
syncAnchor
isResetSync
isSagaEnabled
storeAccountID
homeSharingBasePlaylistID
tracksAreLibraryOwnedContent
playlistsAreLibraryOwnedContent
isPendingMatch
isServerImport
isSuspendable
clientIdentity
_libraryPath
_fileHandle
_syncAnchor
_resetSync
_sagaEnabled
_storeAccountID
_preferredVideoQuality
_homeSharingBasePlaylistID
_tracksAreLibraryOwnedContent
_playlistsAreLibraryOwnedContent
_pendingMatch
_syncLibraryID
_suspendable
_clientIdentity
T@"NSString",R,N,V_libraryPath
T@"NSData",R,N,V_trackData
T@"NSData",R,N,V_playlistData
T@"NSFileHandle",R,N,V_fileHandle
T@"NSString",R,N,V_syncAnchor
resetSync
TB,R,N,GisResetSync,V_resetSync
sagaEnabled
TB,R,N,GisSagaEnabled,V_sagaEnabled
Tq,R,N,V_storeAccountID
Tq,R,N,V_preferredVideoQuality
TI,R,N,V_homeSharingBasePlaylistID
TB,R,N,V_tracksAreLibraryOwnedContent
TB,R,N,V_playlistsAreLibraryOwnedContent
pendingMatch
TB,R,N,GisPendingMatch,V_pendingMatch
TB,R,N,V_isServerImport
T@"NSString",R,N,V_syncLibraryID
suspendable
TB,R,N,GisSuspendable,V_suspendable
T@"NSObject<OS_tcc_identity>",R,N,V_clientIdentity
setLibraryPath:
setTrackData:
setPlaylistData:
setFileHandle:
setSyncAnchor:
setResetSync:
setSagaEnabled:
setStoreAccountID:
setHomeSharingBasePlaylistID:
setTracksAreLibraryOwnedContent:
setPlaylistsAreLibraryOwnedContent:
setPendingMatch:
setIsServerImport:
setSuspendable:
T@"NSData",C,D,N
T@"NSFileHandle",&,D,N
TB,D,N,GisResetSync
TB,D,N,GisSagaEnabled
Tq,D,N
TI,D,N
TB,D,N
TB,D,N,GisPendingMatch
TB,D,N,GisSuspendable
stringValue
insertStatementForTableName:columnNames:
insertStatementUsingDefaultValuesForTableName:
insertStatementWithOptions:
beginTransactionStatementWithBehaviorType:
commitTransactionStatement
rollbackTranscationStatement
rollbackTranscationStatementToSavepointName:
savepointStatementWithName:
savepointReleaseStatementWithName:
_executeStatements:onConnection:withError:
_searchMatcher
_searchUTF8String
sourceType
setSourceType:
operationCount
setOperationCount:
allowAccountMerging
setAllowAccountMerging:
setPrivacyContext:
_allowAccountMerging
_operationCount
T@"NSString",C,N,V_libraryPath
Ti,N,V_sourceType
TQ,N,V_operationCount
TB,N,V_allowAccountMerging
T@"ML3DatabasePrivacyContext",N,V_privacyContext
initWithSQLiteHandle:
length
readData:numberOfBytes:offset:
writeData:numberOfBytes:offset:
data
_sqliteHandle
_performImportOfTrackData:WithTransaction:
_performImportFromPlistFiles:withTransaction:
_syncPlistFilesFromDirectory:
_syncOperationsFromPlistFile:
_processInsertTrackOperation:withImportSession:
_processUpdateTrackOperation:withImportSession:
_processDeleteTrackOperation:withImportSession:
_processUpdateDBInfoOperation:withImportSession:
_processInsertPlaylistOperation:withImportSession:
_processUpdatePlaylistOperation:withImportSession:
_processDeletePlaylistOperation:withImportSession:
_recoverExistingAsset:forTrackId:
_dbInfoValuesForStep:
_processGeniusConfigPlist:
_archiveSyncPlistFiles
_sagaIsEnabled
_cachedPIDToFilePathMap
_cachedPIDToLocationPropertyMap
_cachedSyncIDsToPIDsMap
_importedPlaylists
_devicePrimaryContainer
hasDataForProperty:
chapterIndexAtTimeLocationInMS:
initWithSuccess:resultingDatabasePersistentIDs:
resultingDatabasePersistentIDs
_resultingDatabasePersistentIDs
T@"NSDictionary",R,C,N,V_resultingDatabasePersistentIDs
initWithLibrary:activity:
activity
_activity
T@"NSObject<OS_xpc_object>",R,N,V_activity
initWithAppleID:altDSID:
appleID
setAppleID:
altDSID
setAltDSID:
_appleID
_altDSID
T@"NSString",&,N,V_appleID
T@"NSString",&,N,V_altDSID
initWithLibrary:
setAppleID:forDSID:
setAppleID:altDSID:forDSID:
appleIDForDSID:
getPropertiesForDSID:appleID:altDSID:
_cacheEntryForDSID:
_setCacheEntry:forDSID:
_propertiesCache
sharedProxy
T@"ML3MusicLibraryAccountChangeObserverProxy",R,N
addAccountChangeObserver:
removeAccountChangeObserver:
weakObservers
readonlyObservers
_weakObservers
T@"NSHashTable",R,N,V_weakObservers
T@"NSHashTable",R,N
sharedClient
validateDatabaseAtPath:
validateDatabaseForLibrary:
validateDatabaseForConnection:
_validatableDatabaseForPath:
_validateDatabaseForPath:usingLibrary:
isValidatingDatabaseForPath:
_validatableDatabases
initWithDatabasePath:
currentQueueIsValidationQueue
setDatabasePath:
validationState
setValidationState:
validationSerialQueue
setValidationSerialQueue:
_queueID
_validationState
_validationSerialQueue
T@"NSString",C,N,V_databasePath
TQ,N,V_validationState
T@"NSObject<OS_dispatch_queue>",&,N,V_validationSerialQueue
_updateIndexedItemsWithIdentifiers:error:
_indexItemsFromLibrarySinceRevision:targetRevision:error:
_deleteAllIndexedItemsWithError:
_deleteIndexedItemsWithEntityStringIDs:error:
_indexTracksWithPersistentIDs:playlistsWithPersistentIDs:error:
_batchIndexWithTrackPersistentIDsToUpdate:playlistsPersistentIDsToUpdateSet:entityStringsToDelete:currentRevision:targetRevision:error:
_enumerateSearchableItemsWithPersistentIDs:entityType:error:usingBlock:
_createSearchableItemsWithPersistentIDs:entityType:error:
_createSearchableItemsForTracksWithQuery:error:
_createSearchableItemsForPlaylistsWithQuery:error:
_queryForPlaylistsContainingMusicShowsMissedByQuery:inContainerPIDs:
index
setIndex:
bundleIdentifier
setBundleIdentifier:
bundle
setBundle:
batchCount
setBatchCount:
_index
_bundleIdentifier
_bundle
_batchCount
T@"CSSearchableIndex",&,N,V_index
T@"NSString",&,N,V_bundleIdentifier
TQ,N,V_bundle
TQ,N,V_batchCount
initWithInitialDSID:finalDSID:accountChangeObserver:
initialDSID
finalDSID
_initialDSID
_finalDSID
T@"NSString",R,C,N,V_initialDSID
T@"NSString",R,C,N,V_finalDSID
T@"<_ML3MultiUserDaemonAccountChangeOperationDelegate>",W,N,V_delegate
_removeTracksWithPersistentIDs:fromSource:usingTransaction:
initWithDatabasePath:maxReaders:
initWithDatabasePath:maxReaders:maxWriters:
setConnectionsJournalingMode:
useDistantWriterConnections
setUseDistantWriterConnections:
readerConnection
writerConnection
isCurrentThreadConnectionInTransaction
_connectionForWriting:useThreadConnection:storeThreadLocalConnection:
checkInConnection:
closeAllConnections
lockAndCloseAllConnectionsForTermination
isClosed
setClosed:
_closeAllConnectionsAndWaitForBusyConnections:
_generateDiagnostic
_connectionForIdentifier:
_setConnection:forIdentifier:
_localConnectionForThread:
_setLocalConnection:forThread:
maxReaders
maxWriters
connectionsJournalingMode
isLocked
_readersSubPool
_writersSubPool
_identifiersConnectionsMap
_poolStorageKey
_useDistantWriterConnections
_poolLockCondition
_poolLockMutex
_closed
_locked
_maxReaders
_maxWriters
_connectionsJournalingMode
closed
TB,N,GisClosed,V_closed
T@"<ML3DatabaseConnectionPoolDelegate>",W,N,V_delegate
TQ,R,N,V_maxReaders
TQ,R,N,V_maxWriters
TQ,N,V_connectionsJournalingMode
locked
TB,R,N,GisLocked,V_locked
owningThread
setOwningThread:
borrowingThread
setBorrowingThread:
useCount
setUseCount:
_owningThread
_borrowingThread
_useCount
T@"ML3DatabaseConnection",&,N,V_connection
T@"NSThread",&,N,V_owningThread
T@"NSThread",&,N,V_borrowingThread
TQ,N,V_useCount
initWithDatabasePath:maxConcurrentConnections:
checkoutConnection:
checkInConnection:returnToPool:
closeConnectionsAndWaitForBusyConnections:
handleDiagnostic:
_handleDatabaseDeletion
maxConcurrentConnections
useReadOnlyConnections
setUseReadOnlyConnections:
useDistantConnections
setUseDistantConnections:
_checkoutQueue
_checkinQueue
_waitingSemaphore
_availableConnections
_busyConnections
_willDeleteDatabaseNotifyToken
_homeSharingCachesClearedNotifyToken
_useReadOnlyConnections
_useDistantConnections
_maxConcurrentConnections
TQ,R,N,V_maxConcurrentConnections
TB,N,V_useReadOnlyConnections
TB,N,V_useDistantConnections
readerAvailableConnections
readerBusyConnections
writerAvailableConnections
writerBusyConnections
_readerAvailableConnections
_readerBusyConnections
_writerAvailableConnections
_writerBusyConnections
T@"NSArray",R,N,V_readerAvailableConnections
T@"NSArray",R,N,V_readerBusyConnections
T@"NSArray",R,N,V_writerAvailableConnections
T@"NSArray",R,N,V_writerBusyConnections
setReaderAvailableConnections:
setReaderBusyConnections:
setWriterAvailableConnections:
setWriterBusyConnections:
initWithSectionsInfo:sortingDetails:canonicalLanguageIdentifier:
sectionsInfo
sortingDetails
canonicalLanguageIdentifier
_sectionsInfo
_sortingDetails
_canonicalLanguageIdentifier
T@"NSDictionary",R,N,V_sectionsInfo
T@"NSDictionary",R,N,V_sortingDetails
T@"NSString",R,N,V_canonicalLanguageIdentifier
sharedResourceManager
T@"ML3LanguageResourceManager",R,N
resources
invalidateCachedResources
_buildLanguageResources
cachedResources
setCachedResources:
_cachedResources
T@"ML3LanguageResources",&,N,V_cachedResources
T@"ML3LanguageResources",R,N
isOpen
setCurrentTransactionID:
open
_openWithFlags:
close
_closeAndFlushTransactionState:
flush
databasePathExists
executeQuery:
executeQuery:withParameters:
executeQuery:withParameters:limitProperty:limitValue:
tableExists:
executeUpdate:
executeUpdate:withParameters:error:
isInTransaction
transactionMarkedForRollBack
pushTransaction
pushTransactionUsingBehaviorType:
popTransactionAndCommit:
popToRootTransactionAndCommit:
performTransactionWithBlock:
performTransactionWithBlock:usingBehaviorType:
enqueueBlockForTransactionCommit:
registerFunctionName:argumentCount:block:
registerFunctionName:argumentCount:functionPointer:
registerFunctionName:argumentCount:functionPointer:userData:
registerModule:
registerModuleName:moduleMethods:
removeModuleNamed:
openBlobInTable:column:row:readOnly:
lastInsertionRowID
deleteDatabase
checkpointDatabase
_owningPool
_setOwningPool:
_ensureConnectionIsOpen
_handleDatabaseCorruption
_handleBusyLockWithNumberOfRetries:
_handleDiskIOError
_databaseFilePaths
_distrustQueriesDuringBlock:
transactionLevel
setTransactionLevel:
_alreadyAttemptedCorruptionRecovery
_setAlreadyAttemptedCorruptionRecovery:
_prepareStatement:error:
_executeStatement:withError:
_internalLogQuery:withParameters:limitProperty:limitValue:
_internalExecuteQuery:withParameters:limitProperty:limitValue:
_internalExecuteUpdate:withParameters:error:
_internalBeginTransactionWithBehaviorType:
_internalEndTransactionAndCommit:
_shortDescription
_validatePreparedStatement:error:
_registeredModuleNamed:
_databaseFileExists
_databaseFilesAreWritable
_createDatabaseDirectoryIfNonexistent
_createDatabaseFileIfNonexistent
_logCurrentErrorWhilePerformingStatementOperation:statementSQL:
_logCurrentErrorWhilePerformingStatementOperation:statement:
_logCurrentError
_logDatabaseFileDebugInformation
_isDeviceMediaLibraryDatabase
_finalizeAllStatements
_resetUnfinalizedStatements
_executeTransactionCommitBlocks:
_handleConnectionErrorWhileOpening:
_handleZombieSQLiteConnection:
connectionDelegate
setConnectionDelegate:
journalingMode
setJournalingMode:
protectionLevel
setProtectionLevel:
currentTransactionID
uniqueIdentifier
automaticCheckpointingEnabled
setAutomaticCheckpointingEnabled:
checkpointStatementThreshold
setCheckpointStatementThreshold:
logQueryPlans
setLogQueryPlans:
_sqlitedb
_isOpen
_statementCache
_statementsSinceLastCheckpoint
_transactionLevel
_nestedTransactionWantsToRollback
_enqueuedTransactionCommitBlocks
_registeredFunctions
_registeredModules
_iTunesExtensions
_isHandlingIOError
_isReadOnly
_automaticCheckpointingEnabled
_logQueryPlans
_connectionDelegate
_journalingMode
_protectionLevel
_currentTransactionID
_uniqueIdentifier
_checkpointStatementThreshold
T@"<ML3DatabaseConnectionDelegate>",W,N,V_connectionDelegate
T@"ML3DatabasePrivacyContext",&,N,V_privacyContext
TB,N,SsetReadOnly:,V_isReadOnly
TQ,N,V_journalingMode
TQ,N,V_protectionLevel
T@"NSUUID",R,N,V_currentTransactionID
T@"NSUUID",R,N,V_uniqueIdentifier
TB,N,V_automaticCheckpointingEnabled
TQ,N,V_checkpointStatementThreshold
TB,N,V_logQueryPlans
_serviceTerminatedTransactionNotification:
shouldCacheStatements
_internalBeginTransactionWithBehaviorType:isRetry:
distantDelegate
setDistantDelegate:
_mediaLibraryService
_connectionOpen
_distantDelegate
T@"<ML3DatabaseDistantConnectionDelegate>",W,N,V_distantDelegate
criteriaListDescription
_criteriaListDescription:level:
_addUnitesForCriterionInfo:
_booleanStringForCriteriaInfo:
_dateStringForCriteriaInfo:
_nonzeroStringForCriteriaInfo:
_numericStringForCriteriaInfo:
_convertNumericValueFromCriterionMatchKey:criteriaValue:
_formatTime:
_stringForCriterionBuffer:
_stringForCriterionMatchKey:
_stringForCriterionMatchType:
_stringForTrackFieldCloudStatus:
_stringForTrackFieldMediaKind:
_stringStringForCriteriaInfo:
initWithDistantConnection:sql:parameters:
initWithStatement:
_remoteEnumerateRowsWithBlock:
_localEnumerateRowsWithBlock:
_fetchRowsIfEmpty
distantConnection
_cachedRows
_cachedColumnNameIndexMap
_distantConnection
T@"ML3DatabaseDistantConnection",R,N,V_distantConnection
T@"NSString",R,N,V_sql
T@"NSArray",R,N,V_parameters
_performDAAPImportWithTransaction:
enqueueStatement:
flushAndWait:
_onQueueFlushAndWait:
statementThreshold
setStatementThreshold:
statementQueue
existingTransactionIdentifier
setExistingTransactionIdentifier:
setPriorityLevel:
_xpcService
_statementThreshold
_statementQueue
_existingTransactionIdentifier
TQ,N,V_statementThreshold
T@"NSMutableArray",R,N,V_statementQueue
T@"NSUUID",&,N,V_existingTransactionIdentifier
TQ,N,V_priorityLevel
initWithAccountInfo:
initWithLibraryContainerIdentifier:
_mediaResourceRequiresLibraryContainerAccess:
_controlDirectoryPathWithBasePath:
_pathForResourceFileOrFolder:basePath:relativeToBase:isFolder:
T@"NSString",R,C,N,V_libraryContainerIdentifier
initWithLibraryResourcesService:
cachedLibraryContainerPath
setCachedLibraryContainerPath:
libraryResourcesServices
setLibraryResourcesServices:
_cachedLibraryContainerPath
_libraryResourcesServices
T@"<MLMediaLibraryResourcesServiceProtocol>",&,N,V_libraryResourcesServices
T@"NSString",C,N,V_cachedLibraryContainerPath
hasTitle
hasSortTitle
setReleaseDateTime:
setHasReleaseDateTime:
hasReleaseDateTime
setFileSize:
setHasFileSize:
hasFileSize
setDuration:
setHasDuration:
hasDuration
setContentRating:
setHasContentRating:
hasContentRating
setExplicitContent:
setHasExplicitContent:
hasExplicitContent
hasShortDescription
hasLongDescription
hasCopyright
setYear:
setHasYear:
hasYear
setContentRatingLevel:
setHasContentRatingLevel:
hasContentRatingLevel
hasComment
setFileKind:
setHasFileKind:
hasFileKind
setFamilyAccountId:
setHasFamilyAccountId:
hasFamilyAccountId
setDrmVersionsCode:
setHasDrmVersionsCode:
hasDrmVersionsCode
setDrmPlatformIdCode:
setHasDrmPlatformIdCode:
hasDrmPlatformIdCode
setDrmKey1IdCode:
setHasDrmKey1IdCode:
hasDrmKey1IdCode
setDrmKey2IdCode:
setHasDrmKey2IdCode:
hasDrmKey2IdCode
hasChapterMetadataUrl
hasStoreAssetFlavor
hasExtrasUrl
setPurchaseDateTime:
setHasPurchaseDateTime:
hasPurchaseDateTime
setCloudStatus:
setHasCloudStatus:
hasCloudStatus
setPlayCountDelta:
setHasPlayCountDelta:
hasPlayCountDelta
setSkipCount:
setHasSkipCount:
hasSkipCount
setSkipCountDelta:
setHasSkipCountDelta:
hasSkipCountDelta
setLastSkippedDateTime:
setHasLastSkippedDateTime:
hasLastSkippedDateTime
setRememberBookmark:
setHasRememberBookmark:
hasRememberBookmark
setBookmarkTimeMilliseconds:
setHasBookmarkTimeMilliseconds:
hasBookmarkTimeMilliseconds
setStorePlaylistId:
setHasStorePlaylistId:
hasStorePlaylistId
setHasLocalAsset:
setHasHasLocalAsset:
hasHasLocalAsset
hasGrouping
setNeedsReporting:
setHasNeedsReporting:
hasNeedsReporting
setLikedStateChanged:
setHasLikedStateChanged:
hasLikedStateChanged
setIsInUsersLibrary:
setHasIsInUsersLibrary:
hasIsInUsersLibrary
setCloudAssetAvailable:
setHasCloudAssetAvailable:
hasCloudAssetAvailable
setStoreProtectionType:
setHasStoreProtectionType:
hasStoreProtectionType
setUserDisabled:
setHasUserDisabled:
hasUserDisabled
setCloudPlaybackEndpointType:
setHasCloudPlaybackEndpointType:
hasCloudPlaybackEndpointType
setPlaybackEndpointType:
setHasPlaybackEndpointType:
hasPlaybackEndpointType
setCloudMatchedStatus:
setHasCloudMatchedStatus:
hasCloudMatchedStatus
setInUsersCloudLibrary:
setHasInUsersCloudLibrary:
hasInUsersCloudLibrary
setIsPreorder:
setHasIsPreorder:
hasIsPreorder
setLikedStateChangeDate:
setHasLikedStateChangeDate:
hasLikedStateChangeDate
setStorefrontId:
setHasStorefrontId:
hasStorefrontId
setPurchaseHistoryToken:
setHasPurchaseHistoryToken:
hasPurchaseHistoryToken
hasPurchaseHistoryRedownloadParams
hasSagaRedownloadParams
hasStoreXID
setSubscriptionStoreItemId:
setHasSubscriptionStoreItemId:
hasSubscriptionStoreItemId
setReportingStoreItemId:
setHasReportingStoreItemId:
hasReportingStoreItemId
setAssetStoreItemId:
setHasAssetStoreItemId:
hasAssetStoreItemId
hasSong
hasMovie
hasTvShow
hasPodcast
hasAudiobook
sortTitle
setSortTitle:
releaseDateTime
fileSize
duration
contentRating
explicitContent
shortDescription
setShortDescription:
setLongDescription:
copyright
setCopyright:
year
contentRatingLevel
comment
setComment:
fileKind
familyAccountId
drmVersionsCode
drmPlatformIdCode
drmKey1IdCode
drmKey2IdCode
chapterMetadataUrl
setChapterMetadataUrl:
storeAssetFlavor
setStoreAssetFlavor:
extrasUrl
setExtrasUrl:
purchaseDateTime
cloudStatus
playCountDelta
skipCount
skipCountDelta
lastSkippedDateTime
rememberBookmark
bookmarkTimeMilliseconds
storePlaylistId
hasLocalAsset
grouping
setGrouping:
needsReporting
likedStateChanged
isInUsersLibrary
cloudAssetAvailable
storeProtectionType
userDisabled
cloudPlaybackEndpointType
playbackEndpointType
cloudMatchedStatus
inUsersCloudLibrary
isPreorder
likedStateChangeDate
storefrontId
purchaseHistoryToken
purchaseHistoryRedownloadParams
setPurchaseHistoryRedownloadParams:
sagaRedownloadParams
setSagaRedownloadParams:
storeXID
setStoreXID:
subscriptionStoreItemId
reportingStoreItemId
assetStoreItemId
song
setSong:
movie
setMovie:
tvShow
setTvShow:
podcast
setPodcast:
audiobook
setAudiobook:
_assetStoreItemId
_bookmarkTimeMilliseconds
_drmKey1IdCode
_drmKey2IdCode
_drmPlatformIdCode
_duration
_familyAccountId
_fileSize
_lastSkippedDateTime
_likedStateChangeDate
_purchaseDateTime
_releaseDateTime
_reportingStoreItemId
_storePlaylistId
_storefrontId
_subscriptionStoreItemId
_audiobook
_chapterMetadataUrl
_cloudMatchedStatus
_cloudPlaybackEndpointType
_cloudStatus
_comment
_contentRating
_contentRatingLevel
_copyright
_drmVersionsCode
_extrasUrl
_fileKind
_grouping
_longDescription
_movie
_playCountDelta
_playbackEndpointType
_podcast
_purchaseHistoryRedownloadParams
_purchaseHistoryToken
_sagaRedownloadParams
_skipCount
_skipCountDelta
_song
_sortTitle
_storeAssetFlavor
_storeProtectionType
_storeXID
_tvShow
_year
_cloudAssetAvailable
_explicitContent
_hasLocalAsset
_inUsersCloudLibrary
_isInUsersLibrary
_isPreorder
_likedStateChanged
_needsReporting
_rememberBookmark
_userDisabled
T@"NSString",&,N,V_title
T@"NSString",&,N,V_sortTitle
Tq,N,V_releaseDateTime
Tq,N,V_fileSize
Tq,N,V_duration
Ti,N,V_contentRating
TB,N,V_explicitContent
T@"NSString",&,N,V_shortDescription
T@"NSString",&,N,V_longDescription
T@"NSString",&,N,V_copyright
Ti,N,V_year
Ti,N,V_contentRatingLevel
T@"NSString",&,N,V_comment
Ti,N,V_fileKind
Tq,N,V_familyAccountId
Ti,N,V_drmVersionsCode
Tq,N,V_drmPlatformIdCode
Tq,N,V_drmKey1IdCode
Tq,N,V_drmKey2IdCode
T@"NSString",&,N,V_chapterMetadataUrl
T@"NSString",&,N,V_storeAssetFlavor
T@"NSString",&,N,V_extrasUrl
Tq,N,V_purchaseDateTime
Ti,N,V_cloudStatus
Ti,N,V_playCountDelta
Ti,N,V_skipCount
Ti,N,V_skipCountDelta
Tq,N,V_lastSkippedDateTime
TB,N,V_rememberBookmark
Tq,N,V_bookmarkTimeMilliseconds
Tq,N,V_storePlaylistId
TB,N,V_hasLocalAsset
T@"NSString",&,N,V_grouping
TB,N,V_needsReporting
TB,N,V_likedStateChanged
TB,N,V_isInUsersLibrary
TB,N,V_cloudAssetAvailable
Ti,N,V_storeProtectionType
TB,N,V_userDisabled
Ti,N,V_cloudPlaybackEndpointType
Ti,N,V_playbackEndpointType
Ti,N,V_cloudMatchedStatus
TB,N,V_inUsersCloudLibrary
TB,N,V_isPreorder
Tq,N,V_likedStateChangeDate
Tq,N,V_storefrontId
Ti,N,V_purchaseHistoryToken
T@"NSString",&,N,V_purchaseHistoryRedownloadParams
T@"NSString",&,N,V_sagaRedownloadParams
T@"NSString",&,N,V_storeXID
Tq,N,V_subscriptionStoreItemId
Tq,N,V_reportingStoreItemId
Tq,N,V_assetStoreItemId
T@"MIPSong",&,N,V_song
T@"MIPMovie",&,N,V_movie
T@"MIPTVShow",&,N,V_tvShow
T@"MIPPodcast",&,N,V_podcast
T@"MIPAudiobook",&,N,V_audiobook
initWithToken:artworkType:musicLibrary:
initWithToken:relativePath:artworkType:musicLibrary:
fileURLForSize:
fileURLForEffect:
artworkType
interestDictionary
setInterestDictionary:
_onSerialQueue_faultInProperties
_interestDictionaryFromInterestData:
_interestDataFromInterestDictionary:
artworkToken
relativePath
originalFileURL
_interestDictionary
_musicLibrary
_artworkToken
_relativePath
_originalFileURL
T@"ML3MusicLibrary",R,N,V_musicLibrary
T@"NSString",R,N,V_artworkToken
Tq,R,N,V_artworkType
Tq,R,N,V_sourceType
T@"NSString",R,N,V_relativePath
T@"NSDictionary",&,N,V_interestDictionary
T@"NSURL",R,N,V_originalFileURL
initWithArray:
_numberOrZeroForColumnIndex:
_arrayRepresentation
initWithLibrary:outputStream:syncType:
_writSyncPackageToStream:
_libraryUUID
_streamWriter
_stats
_sessionStartTime
@16@0:8
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@40@0:8q16Q24^@32
@40@0:8@16Q24^@32
@40@0:8@16@24@32
v16@0:8
@"ML3DatabaseTable"
@"NSArray"
B24@0:8^@16
{_NSRange=QQ}24@0:8B16B20
@24@0:8B16B20
@32@0:8@16q24
q16@0:8
@24@0:8q16
d16@0:8
v24@0:8d16
@"ML3Entity"
@"NSString"
@"NSDictionary"
@24@0:8@16
@20@0:8i16
i16@0:8
@48@0:8@16Q24Q32@40
@24@0:8^{_NSZone=}16
v20@0:8i16
v20@0:8B16
v24@0:8@16
@"MIPArtist"
@"MIPSeries"
{?="seasonNumber"b1"videoQuality"b1}
v24@0:8q16
@"MIPAlbum"
@"MIPGenre"
@"MIPPlaybackInfo"
{?="geniusId"b1"audioFormat"b1"discNumber"b1"lyricsChecksum"b1"trackNumber"b1"userRating"b1"excludeFromShuffle"b1"hasVideo"b1}
@48@0:8@16@24@32@40
@"ML3MusicLibrary"
@"ML3MediaLibraryWriter"
@"ML3Client"
@20@0:8B16
@32@0:8^{_NSZone=}16#24
{?="libraryId"b1}
B28@0:8i16@20
{shared_ptr<ML3DAAPImportItem>=^{ML3DAAPImportItem}^{__shared_weak_count}}32@0:8{shared_ptr<ML3CPP::Element>=^{Element}^{__shared_weak_count}}16
{shared_ptr<ML3DAAPImportItem>=^{ML3DAAPImportItem}^{__shared_weak_count}}80@0:8{shared_ptr<ML3CPP::Element>=^{Element}^{__shared_weak_count}}16{vector<long long, std::allocator<long long>>=^q^q{__compressed_pair<long long *, std::allocator<long long>>=^q}}32{vector<std::unordered_set<std::string>, std::allocator<std::unordered_set<std::string>>>=^v^v{__compressed_pair<std::unordered_set<std::string> *, std::allocator<std::unordered_set<std::string>>>=^v}}56
v20@0:8f16
B28@0:8@16B24
B20@0:8C16
B20@0:8i16
B32@0:8{shared_ptr<ML3CPP::Element>=^{Element}^{__shared_weak_count}}16
B24@0:8q16
B80@0:8{shared_ptr<ML3CPP::Element>=^{Element}^{__shared_weak_count}}16{vector<long long, std::allocator<long long>>=^q^q{__compressed_pair<long long *, std::allocator<long long>>=^q}}32{vector<std::unordered_set<std::string>, std::allocator<std::unordered_set<std::string>>>=^v^v{__compressed_pair<std::unordered_set<std::string> *, std::allocator<std::unordered_set<std::string>>>=^v}}56
@"NSError"
{shared_ptr<DAAPParserDelegate>="__ptr_"^{DAAPParserDelegate}"__cntrl_"^{__shared_weak_count}}
v48@0:8{?=[8I]}16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@48@0:8{?=[8I]}16
@"ML3DatabaseConnection"
@"NSLock"
@"MSVXPCTransaction"
@"NSUUID"
@32@0:8@16@24
@56@0:8@16@24@32@40B48B52
@"<MLMediaLibraryResourcesServiceProtocol>"
@"<_MSVAccountInformationProviding>"
@"<MLMediaLibraryAccountChangeObserver>"
@28@0:8@16i24
@?16@0:8
v24@0:8@?16
^?16@0:8
v24@0:8^?16
^v16@0:8
v24@0:8^v16
B48@0:8@16@24q32@40
B36@0:8i16q20@28
B36@0:8@16i24@28
B44@0:8@16i24r^q28Q36
B40@0:8@16q24i32i36
B48@0:8@16q24i32i36@40
v72@0:8@16@24@32r^q40Q48q56@?64
@40@0:8r^@16Q24@32
@32@0:8@16^@24
@36@0:8@16@24B32
@44@0:8@16@24B32^@36
@32@0:8q16@24
@32@0:8@16#24
@40@0:8@16@24q32
B56@0:8@16@24@32@40@48
v32@0:8@16@24
B64@0:8r^q16Q24@32@40@48@56
B52@0:8@16i24r^q28Q36@44
v40@0:8@16q24@?32
v40@0:8^@16r^@24Q32
B40@0:8r^@16r^@24Q32
B32@0:8@16@24
v44@0:8@16@24B32@?36
B40@0:8@16@24@32
B32@0:8@16^@24
@"ML3ClientImportSessionConfiguration"
v28@0:8@16B24
v24@0:8@"ML3DatabaseConnection"16
v32@0:8@"ML3DatabaseConnection"16@"NSError"24
v28@0:8@"ML3DatabaseConnection"16B24
v32@0:8@"ML3DatabaseConnectionPool"16@"ML3DatabaseConnection"24
@28@0:8@16B24
@36@0:8@16B24@?28
@44@0:8@16@24B32@?36
^{iPhoneSortKeyBuilder=}16@0:8
@24@0:8#16
v28@0:8B16@?20
v32@0:8@?16@?24
@24@0:8Q16
Q24@0:8Q16
v28@0:8q16I24
v56@0:8q16Q24i32@36B44@?48
v44@0:8q16Q24i32@?36
v44@0:8q16q24i32@?36
B40@0:8q16q24q32
Q36@0:8q16Q24i32
v28@0:8i16@?20
v36@0:8i16@20@?28
v36@0:8@16i24@?28
v44@0:8@16i24@28@?36
q24@0:8Q16
q36@0:8q16Q24B32
q24@0:8q16
q32@0:8q16Q24
v32@0:8@16@?24
B44@0:8@16q24q32I40
B52@0:8@16@24q32q40I48
v40@0:8@16@24q32
v56@0:8q16q24@32q40q48
v64@0:8q16q24@32q40q48@56
v48@0:8q16q24q32q40
v56@0:8q16q24q32q40@48
v56@0:8q16q24q32d40@48
v60@0:8q16q24q32d40B48@52
v56@0:8q16q24q32d40@?48
v48@0:8q16q24q32@?40
B24@0:8Q16
B32@0:8Q16@24
v40@0:8Q16Q24Q32
B48@0:8@16q24q32@40
B56@0:8@16q24q32@40@48
B52@0:8@16q24q32B40@44
B60@0:8q16q24q32d40B48@52
v40@0:8@16@24@?32
v44@0:8@16q24I32@?36
@"ML3AccountCacheDatabase"
@"ML3DatabasePrivacyContext"
@"NSMapTable"
@"ML3DatabaseConnectionPool"
^{iPhoneSortKeyBuilder=}
@"ML3MusicLibraryResourcesManager"
@"ML3LibraryNotificationManager"
@"NSObject<OS_dispatch_queue>"
@"<ML3MusicLibraryDelegate>"
@"MIPMultiverseIdentifier"
@"MIPMediaItem"
B32@0:8q16@24
v40@0:8@16@24@32
B40@0:8@16@24^q32
B44@0:8@16@24i32^q36
B36@0:8@16@24B32
B44@0:8@16@24B32@36
v48@0:8@16@24@32@?40
@24@0:8d16
B28@0:8@16i24
@"NSMutableSet"
@76@0:8@16#24@32@40B48@52@60q68
Q24@0:8@16
v36@0:8@16B24@?28
v44@0:8@16B24@?28@?36
v52@0:8@16B24@28@?36@?44
@40@0:8@16@24Q32
@48@0:8@16@24@32Q40
@52@0:8@16@24@32@40B48
@64@0:8@16@24@32@40B48B52Q56
@32@0:8@16B24B28
v24@0:8Q16
@"ML3Predicate"
@"ML3AggregateQuery"
@44@0:8@16@24@32B40
@56@0:8@16@24@32@40q48
@52@0:8@16@24@32B40q44
{?="durationInSamples"b1"gaplessEncodingDrainCode"b1"gaplessFrameResyncCode"b1"gaplessHeuristicCode"b1"gaplessHeuristicDelayCode"b1"startTime"b1"stopTime"b1"volumeNormalizationEnergy"b1"beatsPerMinute"b1"bitRate"b1"codecSubType"b1"codecType"b1"dataKind"b1"progressionDirection"b1"relativeVolume"b1"sampleRate"b1}
B36@0:8@16i24^@28
B52@0:8@16@24q32I40q44
d20@0:8I16
B40@0:8@16@24q32
q20@0:8i16
@52@0:8q16@24@32@40B48
@48@0:8@16i24@28q36B44
@36@0:8@16i24@28
@"NSData"
B32@0:8@16B24B28
{?=qq}24@0:8@16
@32@0:8@16^B24
q24@0:8@16
B32@0:8#16@24
B32@0:8@16^B24
@32@0:8@16^{iPhoneSortKeyBuilder=}24
q32@0:8@16^{iPhoneSortKeyBuilder=}24
q40@0:8@16@24Q32
@"NSMutableDictionary"
@"NSMutableArray"
v32@0:8@16Q24
v32@0:8Q16@24
@"NSEnumerator"
@40@0:8r^@16r^@24Q32
v32@0:8@16#24
B36@0:8@16@24i32
@"NSSet"
@36@0:8@16@24i32
@40@0:8@16@24i32B36
@48@0:8@16@24i32B36@40
@44@0:8@16@24i32@36
@56@0:8@16@24i32B36@40@48
@36@0:8r^q16Q24B32
@40@0:8@16q24q32
@40@0:8{_NSRange=QQ}16Q32
{_NSRange=QQ}16@0:8
v32@0:8{_NSRange=QQ}16
{_NSRange="location"Q"length"Q}
v40@0:8@16Q24@32
@40@0:8@16#24@32
B40@0:8@16@24Q32
B48@0:8@16@24@32@40
^I32@0:8#16^I24
@40@0:8q16#24@32
@52@0:8q16#24^I32I40@44
@48@0:8q16@24@32@40
@20@0:8I16
c20@0:8I16
s20@0:8I16
i20@0:8I16
q20@0:8I16
B20@0:8I16
^I24@0:8^I16
@28@0:8^I16I24
@36@0:8i16Q20@28
B28@0:8^{SearchCriteriaList=}16i24
@28@0:8^{SearchCriteriaList=}16B24
v40@0:8q16@24@?32
v32@0:8q16@24
v40@0:8q16@24@32
v48@0:8^@16^@24@32@40
v64@0:8@16@24I32B36I40i44@48@56
B68@0:8B16@20@28B36B40@44@52q60
^{SearchCriteriaList=}16@0:8
B32@0:8Q16Q24
B52@0:8B16@20@28B36B40@44
B36@0:8@16B24@28
B60@0:8@16B24@28@36B44B48@52
@24@0:8I16B20
@48@0:8#16@24@32@40
@"ML3Container"
B32@0:8@16^v24
@"NSObject<OS_dispatch_source>"
@32@0:8^{ChapterData=}16@24
@"ML3Track"
v24@0:8@?<v@?@"NSString">16
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v24@0:8@?<v@?B@"NSError">16
@24@0:8^@16
@"NSString"24@0:8^@16
@"NSXPCConnection"
@"NSOperationQueue"
@40@0:8@16@24@?32
@"<ML3DatabaseValidationDelegate>"
{?="persistentId"b1"storeId"b1}
@56@0:8q16q24q32q40q48
@40@0:8q16@24@32
v48@0:8@16Q24@?32@?40
f24@0:8^@16
v32@0:8Q16@?24
@28@0:8I16q20
@"ML3StatementCacheList"
@"NSObject<NSCopying>"
@"ML3StatementCacheNode"
@32@0:8Q16@24
{?="storeId"b1}
i24@0:8@16
@"MIPSmartPlaylistInfo"
{?="authorStoreId"b1"cloudLastUpdateTime"b1"creationDateTime"b1"lastPlayedDateTime"b1"minRefreshInterval"b1"modificationDateTime"b1"storeId"b1"distinguishedKind"b1"likedState"b1"playCount"b1"playlistCategoryTypeMask"b1"remoteSourceType"b1"secondaryArtworkSourceType"b1"sortType"b1"subscriberCount"b1"subscriberLikedCount"b1"subscriberPlayCount"b1"type"b1"cloudIsCuratorPlaylist"b1"cloudIsSharingDisabled"b1"cloudIsSubscribed"b1"editable"b1"externalVendorPlaylist"b1"hidden"b1"owner"b1"reversedSorting"b1"shared"b1"visible"b1}
@"NSURL"
v20@0:8I16
I16@0:8
{?="evaluationOrder"b1"limitKind"b1"limitOrder"b1"limitValue"b1"dynamic"b1"enabledItemsOnly"b1"filtered"b1"genius"b1"limited"b1"reverseLimitOrder"b1}
I32@0:8@16@24
Q44@0:8@16@24@32I40
B52@0:8^@16i24@28@36@44
B48@0:8Q16@24r*32r*40
@32@0:8Q16^@24
@36@0:8Q16Q24i32
B40@0:8@16@24^@32
@"NSMutableData"
v32@0:8@"ML3ClientImportItem"16@?<v@?B@"NSError">24
v32@0:8@"ML3ClientImportSessionConfiguration"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSError">16
v32@0:8@"NSArray"16@?<v@?@"ML3ClientImportResult"@"NSError">24
@"<ML3ClientImportSessionDelegate>"
@"NSProgress"
{?="audioFormat"b1"discNumber"b1"trackNumber"b1"userRating"b1"excludeFromShuffle"b1"hasVideo"b1}
v32@0:8@16q24
B48@0:8@16q24@32@40
^{ChapterData=}16@0:8
^^I28@0:8i16@20
@28@0:8^{ChapterData=}16I24
^I24@0:8i16B20
I20@0:8i16
I24@0:8I16i20
I20@0:8I16
^{ChapterData=}
{?="persistentId"b1"storeId"b1"numDiscs"b1"numTracks"b1"userRating"b1"compilation"b1}
q28@0:8Q16B24
Q32@0:8q16Q24
Q32@0:8Q16Q24
v40@0:8Q16B24B28@?32
@32@0:8Q16B24B28
q40@0:8q16Q24B32B36
@32@0:8{CGSize=dd}16
B48@0:8q16q24q32q40
@32@0:8q16d24
@32@0:8@16^{sqlite3_module=i^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}24
^{sqlite3_module=i^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}16@0:8
^{sqlite3_module=i^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}
@"<ML3DatabaseModuleContext>"
{?="rentalDuration"b1"rentalPlaybackDuration"b1"rentalPlaybackStartedDateTime"b1"rentalStartedDateTime"b1"audioLanguage"b1"audioTrackId"b1"audioTrackIndex"b1"subtitleLanguage"b1"subtitleTrackIndex"b1"videoQuality"b1"hasAlternateAudio"b1"hasChapterData"b1"hasSubtitles"b1"rental"b1}
B32@0:8@16r*24
B64@0:8@16@24#32q40@48^@56
{?=qq}16@0:8
@32@0:8{?=qq}16
{?="errorCode"b1}
@"MSPMediaSyncError"
@"MSPMediaSyncHeader"
@"MSPMediaSyncOperation"
{?="type"b1"lastPackage"b1}
B24@0:8^v16
@32@0:8q16q24
{?="syncType"b1"totalPackages"b1}
v28@0:8@16I24
q32@0:8{shared_ptr<ML3ImportItem>=^{ML3ImportItem}^{__shared_weak_count}}16
@"MIPPlaylist"
{?="operationType"b1}
@36@0:8i16@20B28B32
f16@0:8
@"ML3ServiceDatabaseImport"
{?="accountId"b1"purchaseHistoryId"b1"sagaId"b1"storeId"b1"mediaObjectType"b1"mediaType"b1}
B24@0:8r^v16
@24@0:8r^v16
{vector<long long, std::allocator<long long>>="__begin_"^q"__end_"^q"__end_cap_"{__compressed_pair<long long *, std::allocator<long long>>="__value_"^q}}
{vector<unsigned char, std::allocator<unsigned char>>="__begin_"*"__end_"*"__end_cap_"{__compressed_pair<unsigned char *, std::allocator<unsigned char>>="__value_"*}}
v32@0:8r^v16^v24
@"ML3QueryResultSet_BackingStore"
@"ML3Query"
B24@0:8@"MSVDistributedNotificationObserver"16
@"NSMutableOrderedSet"
d24@0:8@16
@"NSDateFormatter"
@"ML3StoreItemTrackData"
@"ML3StoreItemPlaylistData"
@48@0:8@16@24Q32^@40
B48@0:8@16@24@32^@40
@56@0:8@16@24@32@40^@48
B36@0:8@16B24^@28
v64@0:8Q16@24@32@40@48@?56
@"NSTimer"
@"<ML3MediaLibraryWriterDelegate>"
@"NSOutputStream"
v28@0:8I16Q20
{map<unsigned int, unsigned long, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned long>>>="__tree_"{__tree<std::__value_type<unsigned int, unsigned long>, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>, std::allocator<std::__value_type<unsigned int, unsigned long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned int, unsigned long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned int, std::__value_type<unsigned int, unsigned long>, std::less<unsigned int>, true>>="__value_"Q}}}
@32@0:8@16@?24
{unordered_map<long long, NSString *, std::hash<long long>, std::equal_to<long long>, std::allocator<std::pair<const long long, NSString *>>>="__table_"{__hash_table<std::__hash_value_type<long long, NSString *>, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, NSString *>, std::hash<long long>, std::equal_to<long long>, true>, std::__unordered_map_equal<long long, std::__hash_value_type<long long, NSString *>, std::equal_to<long long>, std::hash<long long>, true>, std::allocator<std::__hash_value_type<long long, NSString *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<long long, NSString *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<long long, std::__hash_value_type<long long, NSString *>, std::hash<long long>, std::equal_to<long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<long long, std::__hash_value_type<long long, NSString *>, std::equal_to<long long>, std::hash<long long>, true>>="__value_"f}}}
{unordered_set<long long, std::hash<long long>, std::equal_to<long long>, std::allocator<long long>>="__table_"{__hash_table<long long, std::hash<long long>, std::equal_to<long long>, std::allocator<long long>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<long long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<long long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<long long, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<long long, void *> *>, std::allocator<std::__hash_node<long long, void *>>>="__value_"{__hash_node_base<std::__hash_node<long long, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<long long>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<long long>>="__value_"f}}}
@"ML3SpotlightNameCache"
v52@0:8@16@24@32B40@?44
@"MSVTaskAssertion"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@"NSObject<OS_dispatch_semaphore>"
@"NSXPCListener"
@48@0:8@16@24Q32Q40
v56@0:8@16@24@32@40@?48
v48@0:8Q16@24@32@?40
v48@0:8@16Q24@32@?40
v32@0:8q16@?24
v36@0:8@"NSString"16B24@?<v@?B@"NSError">28
v24@0:8@?<v@?@"NSString"@"NSError">16
v32@0:8@"MLTransactionContext"16@?<v@?@"NSUUID"@"NSError">24
v48@0:8@"NSString"16@"NSArray"24@"NSUUID"32@?<v@?B@"NSError">40
v56@0:8@"NSString"16@"NSArray"24@"NSDictionary"32@"NSUUID"40@?<v@?@"NSData"@"NSError">48
v36@0:8@"NSUUID"16B24@?<v@?B@"NSError">28
v48@0:8Q16@"NSDictionary"24@"NSDictionary"32@?<v@?B@"NSError">40
v32@0:8@"NSDictionary"16@?<v@?B@"NSError">24
v48@0:8@"ML3DatabaseImport"16Q24@"NSUUID"32@?<v@?B@"NSError"@"NSData">40
v32@0:8Q16@?<v@?B@"NSError">24
v32@0:8q16@?<v@?B@"NSError">24
v24@0:8@?<v@?@"ML3LanguageResources"@"NSError">16
v40@0:8@"NSArray"16@"NSString"24@?<v@?B@"NSError">32
v24@0:8@?<v@?@"NSXPCListenerEndpoint"@"NSError">16
v28@0:8@16f24
v32@0:8@"NSUUID"16@"NSError"24
v28@0:8@"NSUUID"16f24
@"NSString"24@0:8@"NSString"16
@"NSString"20@0:8i16
@"NSString"36@0:8i16@"NSString"20B28B32
@"NSString"24@0:8q16
@"_ML3BaseMusicLibraryResourcesManager"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"ML3MusicLibraryResourcesManagerContext"
@"<MLMediaLibraryServiceProtocol>"
B32@0:8@"_ML3MultiUserDaemonAccountChangeOperation"16^@24
v32@0:8@"_ML3MultiUserDaemonAccountChangeOperation"16@"NSString"24
@"ACAccountStore"
@28@0:8i16@20
{shared_ptr<ML3VirtualTableDataSource>=^{ML3VirtualTableDataSource}^{__shared_weak_count}}16@0:8
v32@0:8{shared_ptr<ML3VirtualTableDataSource>=^{ML3VirtualTableDataSource}^{__shared_weak_count}}16
@"ML3DatabaseModule"
@"<ML3VirtualTableDelegate>"
{shared_ptr<ML3VirtualTableDataSource>="__ptr_"^{ML3VirtualTableDataSource}"__cntrl_"^{__shared_weak_count}}
@40@0:8Q16@24@32
@"ML3ActiveTransaction"
@52@0:8q16@24@32q40B48
@"ML3DatabaseStatement"
d24@0:8Q16
i24@0:8Q16
r*24@0:8@16
r*24@0:8Q16
v40@0:8r^^v16^i24@32
v40@0:8r^^v16^i24Q32
^{sqlite3_stmt=}
@"ML3DatabaseResult"
@32@0:8^{sqlite3_stmt=}16@24
v24@0:8i16i20
v28@0:8q16i24
v28@0:8d16i24
v32@0:8r^v16i24i28
v28@0:8r*16i24
v32@0:8r*16i24i28
v28@0:8@16i24
^{sqlite3_stmt=}16@0:8
v28@0:8^{sqlite3_stmt=}16i24
@32@0:8@16Q24
@"NSFileHandle"
@"NSObject<OS_tcc_identity>"
@"CPSearchMatcher"
@24@0:8^{sqlite3_blob=}16
i40@0:8@16Q24Q32
^{sqlite3_blob=}
@28@0:8B16@20
@"NSObject<OS_xpc_object>"
B32@0:8@16Q24
B40@0:8Q16^@24^@32
@"NSHashTable"
B40@0:8q16q24^@32
B64@0:8@16@24@32@40@48^@56
B48@0:8@16q24^@32@?40
@40@0:8@16q24^@32
@"CSSearchableIndex"
@"<_ML3MultiUserDaemonAccountChangeOperationDelegate>"
@40@0:8@16Q24Q32
@28@0:8B16B20B24
@"_ML3DatabaseConnectionSubPool"
{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
@"<ML3DatabaseConnectionPoolDelegate>"
@"NSThread"
@24@0:8^B16
@"ML3LanguageResources"
B20@0:8B16
@48@0:8@16@24@32q40
B24@0:8@?16
B32@0:8@?16Q24
B36@0:8@16i24@?28
B36@0:8@16i24^?28
B44@0:8@16i24^?28^v36
B32@0:8@16^{sqlite3_module=i^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}24
@44@0:8@16@24q32B40
^{sqlite3=}16@0:8
i24@0:8@?16
v48@0:8@16@24@32q40
B24@0:8^{sqlite3=}16
^{sqlite3=}
@"ML3DatabaseStatementCache"
@"<ML3DatabaseConnectionDelegate>"
B28@0:8Q16B24
@"MLMediaLibraryService"
@"<ML3DatabaseDistantConnectionDelegate>"
@32@0:8^{SearchCriteriaList=}16q24
@48@0:8{?=IICCCC(?={?=^vI}^{SearchCriteriaList})}16
@"ML3DatabaseDistantConnection"
@40@0:8i16@20B28^B32
@"MIPAudiobook"
@"MIPMovie"
@"MIPPodcast"
@"MIPSong"
@"MIPTVShow"
{?="accountId"b1"assetStoreItemId"b1"bookmarkTimeMilliseconds"b1"creationDateTime"b1"drmKey1IdCode"b1"drmKey2IdCode"b1"drmPlatformIdCode"b1"duration"b1"familyAccountId"b1"fileSize"b1"lastPlayedDateTime"b1"lastSkippedDateTime"b1"likedStateChangeDate"b1"modificationDateTime"b1"purchaseDateTime"b1"purchaseHistoryId"b1"releaseDateTime"b1"reportingStoreItemId"b1"sagaId"b1"storeId"b1"storePlaylistId"b1"storefrontId"b1"subscriptionStoreItemId"b1"cloudMatchedStatus"b1"cloudPlaybackEndpointType"b1"cloudStatus"b1"contentRating"b1"contentRatingLevel"b1"drmVersionsCode"b1"fileKind"b1"likedState"b1"mediaType"b1"playCount"b1"playCountDelta"b1"playbackEndpointType"b1"purchaseHistoryToken"b1"secondaryArtworkSourceType"b1"skipCount"b1"skipCountDelta"b1"storeProtectionType"b1"year"b1"cloudAssetAvailable"b1"explicitContent"b1"hasChapterData"b1"hasLocalAsset"b1"hidden"b1"inUsersCloudLibrary"b1"isInUsersLibrary"b1"isPreorder"b1"likedStateChanged"b1"needsReporting"b1"rememberBookmark"b1"userDisabled"b1}
@40@0:8@16q24@32
@48@0:8@16@24q32@40
@"MSVStreamWriter"
{?="trackAdds"i"trackUpdates"i"trackDeletes"i"playlistAdds"i"playlistDeletes"i"totalSize"I}
