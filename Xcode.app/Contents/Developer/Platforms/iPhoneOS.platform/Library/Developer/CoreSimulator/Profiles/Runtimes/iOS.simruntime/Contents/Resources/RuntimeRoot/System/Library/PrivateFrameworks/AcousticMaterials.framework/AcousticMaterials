@(#)PROGRAM:AcousticMaterials  PROJECT:AcousticMaterials-15.1
333333.@
materialName
materialDescription
frequencyBands
absorptionUserData
absorptionReferenceData
uncertaintyReferenceData
numDataPointsReferenceData
totalNumDataSetsReferenceData
At least one mandatory key was not found in input dictionary.
Data arrays have different lengths.
Name and/or description is empty.
The value of totalNumDataSetsReferenceData is negative.
At least one value in one of the data sets lies outside the permitted value ranges.
Failed to open SQLite database: '%s'.
Failed to close SQLite database [%s]
pragma integrity_check
integrity_check
Database integrity test failed: %s
Failed to prepare query statement: '%s'.
%@(%d)
Database query [%@] did not return any results
Database query did not return any results
visual material
ARMeshMaterial
object
ARMeshClassification
object attribute
scene
geo location
acoustic absorption
acoustic scattering
acoustic sound reduction index
Default
SELECT * FROM [semantics]
Visual material %@ was not found in the database
ARMeshMaterial %lld and ARMeshClassification % lld were not found in the database
AMDatabase.db
SELECT DISTINCT
%@ [materialName] FROM [%@]
Materials for %@ don't exist in the database.
%@ [%@] FROM [semantics]
SELECT DISTINCT * FROM [%@] WHERE [materialName]='%@'
Could not classify data returned for query [%@]
Unknown acoustic parameter type [%@]
At least one query input (parameterTypes, semanticQuery) was empty.
At least one semantic type not found in database.
SELECT
%@ [%@], 
%@ FROM [semantics] WHERE
%@ [%@] = '%@' AND
%@ [%@] = %@ AND
Other
%@ [%@] = '%@'
%@ [%@] = %@
Unknown
parameter %@ in semanticQuery has wrong type
scatteringUserData
scatteringReferenceData
soundReductionIndexUserData
soundReductionIndexReferenceData
averageSoundReductionIndex
materialDepth
uncertaintyMaterialDepth
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
Material %@ is not found in %@
SELECT * FROM [%@]
Name and or description is empty or corrupted.
The value of materialDepth, uncertainityMaterialDepth or averageSoundReductionIndex is negative.
com.apple.acousticmaterials.ErrorDomain
AMAbsorption
SemanticsTable
AMDatabase
AMSoundReductionIndex
AMScattering
init
allKeys
setWithArray:
initWithObjects:
isSubsetOfSet:
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
objectForKeyedSubscript:
intValue
validatedWithoutError:
materialName
isEqualToString:
materialDescription
frequencyBands
isEqualToArray:
absorptionUserData
absorptionReferenceData
uncertaintyReferenceData
numDataPointsReferenceData
totalNumDataSetsReferenceData
count
isEqual:
objectAtIndexedSubscript:
numberWithInt:
initWithValues:error:
initWithMaterialName:
setAbsorptionUserData:
.cxx_destruct
_totalNumDataSetsReferenceData
_materialName
_materialDescription
_frequencyBands
_absorptionUserData
_absorptionReferenceData
_uncertaintyReferenceData
_numDataPointsReferenceData
T@"NSString",R,V_materialName
T@"NSString",R,V_materialDescription
T@"NSArray",R,V_frequencyBands
T@"NSArray",C,V_absorptionUserData
T@"NSArray",R,V_absorptionReferenceData
T@"NSArray",R,V_uncertaintyReferenceData
T@"NSArray",R,V_numDataPointsReferenceData
Ti,R,V_totalNumDataSetsReferenceData
path
fileSystemRepresentation
stringWithFormat:
objectForKey:
UTF8String
dictionaryWithCapacity:
numberWithFloat:
stringWithUTF8String:
setObject:forKey:
copy
arrayWithCapacity:
array
addObject:
arrayWithArray:
removeAllObjects
longValue
longLongValue
numberWithLongLong:
readTable:
labelsForSemanticType:error:
getARMeshMaterialID:ARMeshMaterialID:error:
getARMeshClassificationID:ARMeshClassificationID:error:
getMaterialsForPair:error:
SemanticsMap
setSemanticsMap:
MeshMaterialMap
setMeshMaterialMap:
MeshClassificationMap
setMeshClassificationMap:
.cxx_construct
_SemanticsMap
_MeshMaterialMap
_MeshClassificationMap
T{unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>>={__hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>>=f}}},V_SemanticsMap
T{unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>>={__hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>>=f}}},V_MeshMaterialMap
T{unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>>={__hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>>=f}}},V_MeshClassificationMap
bundleForClass:
resourcePath
stringByAppendingPathComponent:
fileURLWithPath:
materialNamesForAcousticParameterTypeFromCache:error:
checkDatabaseReadAccess:
allValues
labelsForSemanticTypeFromCache:error:
acousticParametersFromCache:forMaterialName:error:
acousticParametersFromCache:forSemanticLabels:error:
countByEnumeratingWithState:objects:count:
length
substringToIndex:
openDatabase:
closeDatabase:
materialNamesForAcousticParameterType:error:
materialNamesForAcousticParameterTypeSQL:error:
labelsForSemanticTypeSQL:error:
acousticParameters:forMaterialName:error:
acousticParametersSQL:forMaterialName:error:
acousticParameters:forSemanticLabels:error:
acousticParametersSQL:forSemanticLabels:error:
arrayWithObjects:
hash
dictionaryWithObjects:forKeys:
compare:
componentsSeparatedByString:
null
doubleValue
numberWithDouble:
materialDepth
isEqualToNumber:
uncertaintyMaterialDepth
soundReductionIndexUserData
soundReductionIndexReferenceData
averageSoundReductionIndex
floatValue
setSoundReductionIndexUserData:
_materialDepth
_uncertaintyMaterialDepth
_soundReductionIndexUserData
_soundReductionIndexReferenceData
_averageSoundReductionIndex
T@"NSNumber",R,V_materialDepth
T@"NSNumber",R,V_uncertaintyMaterialDepth
T@"NSArray",C,V_soundReductionIndexUserData
T@"NSArray",R,V_soundReductionIndexReferenceData
T@"NSNumber",R,V_averageSoundReductionIndex
scatteringUserData
scatteringReferenceData
setScatteringUserData:
_scatteringUserData
_scatteringReferenceData
T@"NSArray",C,V_scatteringUserData
T@"NSArray",R,V_scatteringReferenceData
@32@0:8@16^@24
@24@0:8@16
B24@0:8@16
B24@0:8^@16
@16@0:8
v24@0:8@16
i16@0:8
v16@0:8
@"NSString"
@"NSArray"
v24@0:8^@16
B40@0:8@16^q24^@32
^{materialsForPair=@@@}32@0:8r^{semantic_pair=qqQ}16^@24
{unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>>={__hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>>=f}}}16@0:8
v56@0:8{unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>>={__hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>>=f}}}16
{unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>>={__hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>>=f}}}16@0:8
v56@0:8{unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>>={__hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>>=f}}}16
{unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>>="__table_"{__hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>>="__value_"f}}}
{unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>>="__table_"{__hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>>="__value_"f}}}
@40@0:8@16@24^@32
@"NSNumber"
@(#)PROGRAM:AcousticMaterials  PROJECT:AcousticMaterials-15.1
333333.@
materialName
materialDescription
frequencyBands
absorptionUserData
absorptionReferenceData
uncertaintyReferenceData
numDataPointsReferenceData
totalNumDataSetsReferenceData
At least one mandatory key was not found in input dictionary.
Data arrays have different lengths.
Name and/or description is empty.
The value of totalNumDataSetsReferenceData is negative.
At least one value in one of the data sets lies outside the permitted value ranges.
Failed to open SQLite database: '%s'.
Failed to close SQLite database [%s]
pragma integrity_check
integrity_check
Database integrity test failed: %s
Failed to prepare query statement: '%s'.
%@(%d)
Database query [%@] did not return any results
Database query did not return any results
visual material
ARMeshMaterial
object
ARMeshClassification
object attribute
scene
geo location
acoustic absorption
acoustic scattering
acoustic sound reduction index
Default
SELECT * FROM [semantics]
Visual material %@ was not found in the database
ARMeshMaterial %lld and ARMeshClassification % lld were not found in the database
AMDatabase.db
SELECT DISTINCT
%@ [materialName] FROM [%@]
Materials for %@ don't exist in the database.
%@ [%@] FROM [semantics]
SELECT DISTINCT * FROM [%@] WHERE [materialName]='%@'
Could not classify data returned for query [%@]
Unknown acoustic parameter type [%@]
At least one query input (parameterTypes, semanticQuery) was empty.
At least one semantic type not found in database.
SELECT
%@ [%@], 
%@ FROM [semantics] WHERE
%@ [%@] = '%@' AND
%@ [%@] = %@ AND
Other
%@ [%@] = '%@'
%@ [%@] = %@
Unknown
parameter %@ in semanticQuery has wrong type
scatteringUserData
scatteringReferenceData
soundReductionIndexUserData
soundReductionIndexReferenceData
averageSoundReductionIndex
materialDepth
uncertaintyMaterialDepth
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
Material %@ is not found in %@
SELECT * FROM [%@]
Name and or description is empty or corrupted.
The value of materialDepth, uncertainityMaterialDepth or averageSoundReductionIndex is negative.
com.apple.acousticmaterials.ErrorDomain
AMAbsorption
SemanticsTable
AMDatabase
AMSoundReductionIndex
AMScattering
isEqualToNumber:
objectForKey:
count
doubleValue
initWithObjects:
fileURLWithPath:
arrayWithCapacity:
compare:
length
stringWithUTF8String:
stringByAppendingPathComponent:
removeAllObjects
numberWithInt:
dictionaryWithCapacity:
copy
intValue
floatValue
fileSystemRepresentation
setWithArray:
null
isSubsetOfSet:
arrayWithObjects:
arrayWithArray:
objectAtIndexedSubscript:
allKeys
isEqualToArray:
countByEnumeratingWithState:objects:count:
dictionaryWithObjects:forKeys:count:
componentsSeparatedByString:
longValue
numberWithFloat:
hash
array
UTF8String
stringWithFormat:
numberWithDouble:
setObject:forKey:
objectForKeyedSubscript:
resourcePath
errorWithDomain:code:userInfo:
dictionaryWithObjects:forKeys:
substringToIndex:
numberWithLongLong:
isEqualToString:
addObject:
bundleForClass:
path
allValues
longLongValue
init
initWithValues:error:
initWithMaterialName:
isEqual:
validatedWithoutError:
materialName
materialDescription
frequencyBands
absorptionUserData
setAbsorptionUserData:
absorptionReferenceData
uncertaintyReferenceData
numDataPointsReferenceData
totalNumDataSetsReferenceData
.cxx_destruct
_totalNumDataSetsReferenceData
_materialName
_materialDescription
_frequencyBands
_absorptionUserData
_absorptionReferenceData
_uncertaintyReferenceData
_numDataPointsReferenceData
T@"NSString",R,V_materialName
T@"NSString",R,V_materialDescription
T@"NSArray",R,V_frequencyBands
T@"NSArray",C,V_absorptionUserData
T@"NSArray",R,V_absorptionReferenceData
T@"NSArray",R,V_uncertaintyReferenceData
T@"NSArray",R,V_numDataPointsReferenceData
Ti,R,V_totalNumDataSetsReferenceData
readTable:
labelsForSemanticType:error:
getARMeshMaterialID:ARMeshMaterialID:error:
getARMeshClassificationID:ARMeshClassificationID:error:
getMaterialsForPair:error:
SemanticsMap
setSemanticsMap:
MeshMaterialMap
setMeshMaterialMap:
MeshClassificationMap
setMeshClassificationMap:
.cxx_construct
_SemanticsMap
_MeshMaterialMap
_MeshClassificationMap
T{unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>>={__hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>>=f}}},V_SemanticsMap
T{unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>>={__hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>>=f}}},V_MeshMaterialMap
T{unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>>={__hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>>=f}}},V_MeshClassificationMap
openDatabase:
closeDatabase:
materialNamesForAcousticParameterType:error:
materialNamesForAcousticParameterTypeSQL:error:
materialNamesForAcousticParameterTypeFromCache:error:
labelsForSemanticTypeSQL:error:
labelsForSemanticTypeFromCache:error:
acousticParameters:forMaterialName:error:
acousticParametersSQL:forMaterialName:error:
acousticParametersFromCache:forMaterialName:error:
acousticParameters:forSemanticLabels:error:
acousticParametersSQL:forSemanticLabels:error:
acousticParametersFromCache:forSemanticLabels:error:
checkDatabaseReadAccess:
materialDepth
uncertaintyMaterialDepth
soundReductionIndexUserData
setSoundReductionIndexUserData:
soundReductionIndexReferenceData
averageSoundReductionIndex
_materialDepth
_uncertaintyMaterialDepth
_soundReductionIndexUserData
_soundReductionIndexReferenceData
_averageSoundReductionIndex
T@"NSNumber",R,V_materialDepth
T@"NSNumber",R,V_uncertaintyMaterialDepth
T@"NSArray",C,V_soundReductionIndexUserData
T@"NSArray",R,V_soundReductionIndexReferenceData
T@"NSNumber",R,V_averageSoundReductionIndex
scatteringUserData
setScatteringUserData:
scatteringReferenceData
_scatteringUserData
_scatteringReferenceData
T@"NSArray",C,V_scatteringUserData
T@"NSArray",R,V_scatteringReferenceData
@32@0:8@16^@24
@24@0:8@16
B24@0:8@16
B24@0:8^@16
@16@0:8
v24@0:8@16
i16@0:8
v16@0:8
@"NSString"
@"NSArray"
v24@0:8^@16
B40@0:8@16^q24^@32
^{materialsForPair=@@@}32@0:8r^{semantic_pair=qqQ}16^@24
{unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>>={__hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>>=f}}}16@0:8
v56@0:8{unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>>={__hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>>=f}}}16
{unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>>={__hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>>=f}}}16@0:8
v56@0:8{unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>>={__hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>>=f}}}16
{unordered_map<semantic_pair, materialsForPair, std::hash<semantic_pair>, std::equal_to<semantic_pair>, std::allocator<std::pair<const semantic_pair, materialsForPair>>>="__table_"{__hash_table<std::__hash_value_type<semantic_pair, materialsForPair>, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>, std::allocator<std::__hash_value_type<semantic_pair, materialsForPair>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<semantic_pair, materialsForPair>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::hash<semantic_pair>, std::equal_to<semantic_pair>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<semantic_pair, std::__hash_value_type<semantic_pair, materialsForPair>, std::equal_to<semantic_pair>, std::hash<semantic_pair>, true>>="__value_"f}}}
{unordered_map<NSString *, long long, std::hash<NSString *>, std::equal_to<NSString *>, std::allocator<std::pair<NSString *const, long long>>>="__table_"{__hash_table<std::__hash_value_type<NSString *, long long>, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>, std::allocator<std::__hash_value_type<NSString *, long long>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<NSString *, long long>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<NSString *, std::__hash_value_type<NSString *, long long>, std::hash<NSString *>, std::equal_to<NSString *>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<NSString *, std::__hash_value_type<NSString *, long long>, std::equal_to<NSString *>, std::hash<NSString *>, true>>="__value_"f}}}
@40@0:8@16@24^@32
@"NSNumber"
