@(#)PROGRAM:IMDaemonCore  PROJECT:IMDaemonCore-
?UUUUUU
IMDaemonCore
BackwardCompatibilityMessageIdentifier
BackwardCompatibilityMessageType
DaemonCoreHelloWorldClass
IMDaemonCoreHelloWorld
IMDaemonCore
CallManager
IMDaemonCore
IncomingClientConnectionListener
IncomingClientConnectionListening
TextInfixParser
WrappingPair
Liked "%
Disliked
Laughed 
Emphasiz
Question
PlainTextTapbackInterpreter
IMAssociatedMessageType
_NSRange
UncheckedSendable
ClientRequestHandling
DaemonWorkActor
IMDInternalWorkQueue
IMDaemonCore
ClientConnectionManager
MessagesClientCapabilities
NIMClientCapabilities
IMSharedUtilities
IMDaemonCore
CollaborationNoticeStore
ClientConnection
audit_token_t
ClientConnectionManaging
PersistedCollaborationNotice
IMDMessagePTaskStoreAddedProcessingTask
Initial
FetchMomentShare
Accepting
FetchingAssets
GeneratingTransfers
Invalid Ingestion State: %ld
IMDAccount
Creating account id: %@    defaults: %@    on service: %@
IMDAccount: incoming 'defaults' is not a dictionary, %@, %@
AccountManaged
%@ - write account defaults: %@
accountID
accountDefaults
capabilities
serviceLoginStatus
serviceLoginStatusMessage
buddyProperties
groups
Session
%@: Telling session it became active
%@: Forcing login
-[%@ _forceSetLoginStatus:%d message:%@ reason:%d properties:%@] session=%@
IMDSIMSubscriptionUpdateTracker
Broadcasting: Subscriptions have changed
read-receipt-tracking
IMDAccountController
Loading services: %@ (First load: %@)
Loading service: %@
service: %@ has been discontinued. Loading default disabled account
   Creating account with ID: %@
   Creating persistent session with ID: %@
  Service wants new accounts active, setting active: %@
 Not loading accounts from defaults, appears to be IDS Based: %@
 Found accounts: %@
 Loading: %@
 Done
  Setting active accounts: %@
  Service wants accounts always active, setting active: %@
Logging in previously logged in accounts: %@
  * Logging in previously logged in account: %@
  * No account found for account ID: %@
Done loading service: %@
iMessage
PlaceholderAccount
Done loading all services
   Found account: %@
      => Disabled, continuing
      Found service: %@
      => Service discontinued, skipping.
      Adding account: %@ to active set: %@
Reusing session: %@
      Active account set is: %@
      Building sesssion
      Enable the associated account
Tried to deactivate an account, but found no account: %@
Tried to deactivate an account, but found no service; %@
Add account: %@
Remove account: %@
B16@?0@8
@16@?0@8
activeSessions = %@
Could not find a service session for string: %@, account: %@, allAccounts: %@
IMDAccountController: Could not find a service for string: %@
IMDAccountController: Could not find an account for serviceString: %@, accountsForService: %@, accounts: %@
IMDAccountController: Could not find a session for account: %@
Rebuilding operational accounts, old: (%@)  new: (%@)
Operational accounts changed
__kIMDBadgeUtilitiesOperationalAccountsChangedNotification
com.apple.madrid
IDS account %@ is active %@ can send %@ is madrid account %@
calling setNetwork %@
  => broadcasting
FaceTime
Receiving id (%@) with country code (%@) is a candidate for spam filtering.
Receiving id (%@) with country code (%@) is not a candidate for spam filtering.
Receiving id (%@) with region (%@) is a candidate for spam filtering.
Receiving id (%@) with region (%@) is not a candidate for spam filtering.
Found an account (%@) that isn't IMDIDS (%@), can't determien region -- falling through.
IMDCKUtilitiesErrorDomain
CKSubType
IMD-IDS-Aliases
selectedAliases
allAliases
com.apple.Messages
IMDCKUtilities
%@/CKMessagesLogDump/
key roll pending check returned: %@
Added key roll pending error to sync state
Not performing key roll check didKeyRollPendingCheck %@ cloudKitSyncingEnabled %@
fetchCloudKitAccountStatusAndCheckForAccountNeedsRepairWithCompletion failed with error: %@
v24@?0q8@"NSError"16
updating key roll pending state
shouldForceArchivedMessagesSync
v20@?0B8@"NSError"12
Get file size on path: %@
Check if there is enough iCloud quota
User quota completion block return with available Quota %llu, and Error: %@
Available Quota in bytes:  and message database size: %llu, %llu
v24@?0Q8@"NSError"16
Madrid server bag does not allow us to sync. Our client version %d server client version %ld
_shouldiCloudSwitchBeEnabled is FALSE as iCloud and iMessage accounts do not match up
_shouldiCloudSwitchBeEnabled is FALSE because server does not allow sync
_shouldiCloudSwitchBeEnabled is FALSE because we are in exit state. Is moc feature enabled %@
We are not in exit state, _shouldiCloudSwitchBeEnabled is based on whether feature is enabled or not: %@
ck-client-min-version
**** cloudKitSyncingEnabled is turned off in this build
Setting cloudkit enabled: %@
Starting initial sync
IMDCKCacheDeleteManager
Attachment watermark reset to 0
ck-submit-metrics-min-version
ck-submit-analytics-min-version
ck-submit-analytics-details-min-version
server allows submitting metrics result %@ clientVersion %@ serverVersion %@
server allows submitting analytics result %@ clientVersion %@ serverVersion %@
server allows submitting analytics details result %@ clientVersion %@ serverVersion %@
Keep Messages value should be altered from %@ to 0
Resetting Keep Message setting to Keep forever.  VersionID: %ld
ck-cache-delete-version-V3
server allows cached delete check result %@ clientVersion %@ serverVersion %@
ck-enable-attachment-validation
enableAttachmentMetricCollection overridden by iMessage server
Should enable attachment metric-ing %@
CacheDeleteEnabled %@
ck-remove-from-backup-version-V3
server allows removal from backup result %@ serverVersion %@
This is an internal install so overriding server bag check and defaulting to yes
Removal from back up allowed %@
com.apple.private.IMDCKUtilitiesInternal
accountIsVerifiedForMOCAndSafeForCacheDelete
Checking if account is verified
Return account validForCD with error: %@ accountStatus: %@
About to wait for accountIsVerifiedForMOCAndSafeForCacheDelete call
Finished blocking accountIsVerifiedForMOCAndSafeForCacheDelete with time: %@ and accountValidForCD %@
AKAppleIDAuthenticationController
AuthKit
isEligibleForTruthZoneOverride
Overriding isEligibleForTruthZone: %@
Fetched cloud kit account status: %@, error: %@
Fetched cloud kit account status: %@
Fetching cloud kit account info with cloudkit api
accountInfoWithCompletionHandler called with accountInfo %@, error %@
Checking for cloudkit account info failed with error: %@ 
failed fetching account status
Checking for cloudkit eligibility returned: %@ inCarry: %@
Unrecognized account status %ld
v24@?0@"CKAccountInfo"8@"NSError"16
ck-account-repair-override
account needs repair override is: %@
account repair overridden
MiC is disabled, does not need repair
Account needs repair: %@ (account status: %@)
Got local account security level %@
Not checking account for needed repair because fetching account status returned an error: %@
Fetching security level and updating mic switch eligible on imagent launch
Server allowing %@: %@
Defaults over allowing %@: %@
should-ttr-on-icloud-kit-error
should-dump-logs-on-icloud-kit-error
should-dump-logs-daily-if-havent-synced
disable-dumping-logs-daily-for_restore_failures
msgs_on_icloud_logs@icloud.com
log-collector-handle
A cloudkit error(%@) occured checking if we should try to report the error
Should log dump on cloudkit error? %@
TriggeredByCKError
LSApplicationWorkspace
CoreServices
File a radar
Dismiss
Messages on iCloud Debug UI
We present a CK UI
TTR:%@ MoIC Sync Fail %@
tap-to-radar://new?Title=%@&ComponentID=644010&ComponentName=Messages Frameworks&ComponentVersion=iOS&Classification=Serious Bug&Description=%@&Reproducibility=I Didn't Try
User tapped file a radar. Opening URL %@
v16@?0@"IMUserNotification"8
%@%@
IMDCKUtilities recordNameForMessageWithGUID invalid parameters [key length] %@ guid %@
%@-%@-%@-%@
RecoverableError
NonRecoverableError
******** IMDCKUtilities not a partial error %@
Resetting last sync date to nil
Last sync date was reset to nil
ACAccountStore
AppleAccount
IMDaemon_CloudKit
Force switching icloud switch to %@ since default has not been set.
Trying to set iCloud Settings Swtich to enabled ? %@
Error saving enabling for kAccountDataclassMessages.
Success saving enabling for kAccountDataclassMessages.
Found primary account: %@ error: %@
v24@?0@"ACAccount"8@"NSError"16
fetchiCloudAccountPersonID returning with error: %@
Found DSID: %@
Account has backup enabled: %@
ck-sync-paused
Is syncing paused override: %@
syncing paused because syncing override is YES
syncing not paused because syncing not enabled
syncing not paused because we have a valid sync date
syncing not paused because we are syncing
syncing not paused because we are connected wifi and device is charging
syncing paused: connected to Wifi: %@, device is charging: %@
PCSReportKeyRollPending
ProtectedCloudStorage
Linked linkedPCSReportKeyRollPending ok: %@
Messages3
isOnWifiAndPower %@, Is charging %@ , isOnWifi %@ , lastSyncDate %@ lastCompleteSyncedDBDate %@
isOnWifiAndPower %@, Is charging %@ , isOnWifi %@ 
Found duplicate record while syncing or record does not have a record name. Dropping record: %@
Found duplicate recordID while syncing or recordID does not have a record name. Dropping record: %@
active
inActive
Active state %@ last activity date %@
Just send
Notify me each time
User chose to always auto send logs
User chose to show pop up before sending logs
ck-should-use-rtc-reporting
ck-should-use-analytics-reporting
Read server bag bool: [%@] for key: [%@]
Server bag bool default: [%@] for key: [%@]
groupName
deviceState
ZoneCreateDate-%@
IMDCKUtilites
logDumpAndSendMessage not allowed with error: %@
logDumpAndSendMessageTo called for recipient %@, hrs %@, reason %@, initialSync %@ logDumpGuid %@
User has opted out of auto log collection. Not dumping logs for logDumpGuid %@
User has never seen a prompt and this collection requires a previous prompt. Not dumping logs for logDumpGuid %@
LogDump
<StartDeviceID> Device ID: %@ <EndDeviceID> logDumpGuid %@
We didn't get a device ID back from cloudkit error: %@
dd-MM-yyyy_HH:mm
%@_MT_%@_%@_%@_%@_Messages
Unknown
RestoreFailure
Could not create dir at path %@, failed with error %@. Aborting log dump with logDumpGuid %@
Succeeded creating dir at path %@ for logDumpGuid %@
subsystem CONTAINS[cd] "com.apple.messages"
Error occurred trying to log dump messages logs: %@
Succeeded logging messages log to file at path %@
v24@?0@"NSString"8@"NSError"16
Not log dumping since not on internal device
In logDumpAndSendMessageTo but caught an exception %@
Returning %@ for logDumpIsExpcted - _isLogDumpAllowed: %@, _isOnPowerAndWifi: %@, _isRunningInAutomation: %@
For some reason we do not have the sync counts prior to syncing
All items have been synced, noting down last complete synced DB date %@
Could not log db sync date because not all items synced: chatsLeftToSync %@ | messagesLeftToSync %@ | attachmentsLeftToSync %@
<StartSyncStats> syncedChatDifference %@ | syncedMessageDifference %@ | syncedAttachmentDifference %@ <EndSyncStats>
Log dump needed -- didn't sync enough items | syncedMessages %@ | syncedChats %@ | syncedAttachments %@
PCSReportManateeStatus
Linked linkedPCSReportManateeStatus ok: %@
Failed to weak link ProtectedCloudStorage, this should not happen
Engram
AKAccountManager
is phone or watch: [%@]
D:%@
iCloud DSID %@
iMessage account DSID %@
iCloud account %@ and iMessage account %@ DO NOT match up
We found one that matches up (icloud: %@, iMessage: %@), the ids account is active: [%@]
enableMOCIfNeeded was called, but this is now a no-op bailing
/**---DISABLING MESSAGES ON ICLOUD---**/
Fetching eligibility for truth zone before attempting to sync
Not eligible for truth zone
***** Timed out checking truth zone eligibility *******
eligibleForTruthZone %@
com.apple.imagent
ck-demo-mode
Attempt to disable MOC across all devices
Unable to request exit record when trying to disable all devices. Error: %@
DisableAllDevices
AKAuthenticationSecurityLevelKey
Calculating selected/all aliases
Saving (domain %@) selected aliases %@
IMDCKAccountStatusUnknown
IMDCKAccountStatusLoggedOut
IMDCKAccountStatusLoggedInWithNoD2DEncryptionSupport
IMDCKAccountStatusLoggedInWithD2DEncryptionSupport
AKAppleIDSecurityLevelUnknown
AKAppleIDSecurityLevelPasswordOnly
AKAppleIDSecurityLevelStandard
AKAppleIDSecurityLevelHSA1
AKAppleIDSecurityLevelHSA2
AKAppleIDSecurityLevelManaged
%@: Start sync should not be called more than once.  Ignoring request.
MessageProcessing
%@: Begin syncing IDS transaction log history for %ld services
%@: Starting sync task for %@ service 
%@:Received a batch of %lu messages to process.
%@: Finished processing batch of %lu messages.
v24@?0@"NSArray"8@?<v@?q>16
v24@?0@"NSArray"8@?<v@?@"NSArray">16
%@: Finished sync task for %@ service. Error: %@
%@: Finished Syncing all services for task
v16@?0@"NSError"8
IMDMessageHistoryCKChatSyncTask: Start sync should not be called more than once.  Ignoring request.
IMDMessageHistoryCKChatSyncTask
Back online, start syncing chats
IMDCKSyncStatsCollector
Refreshing CloudKit sync statistics from the database
Skipping the refresh of CloudKit sync statistics from the database
com.apple.messages.IMDClientRequestContext.currentContext
No instance IMDClientRequestContext available for current thread, -currentContext caller may not be within a client request handler
%@-syncStoreVersion
IMDCKSyncTokenStore
Migrating sync token {key: %@, db: %@, version: %ld}
IMDCKChatSyncController
Found token data, saving to sms.db {key: %@}
No token data found {key: %@}
Failed to unarchive ckserver change token. Error: %@
Fetched token {key: %@, token: %@}
Persisting token {key: %@, token: %@}
ServiceProperties
plist
Discontinued-%@
%@.%@
%@Defaults
%@AccountDefaults
IMDService (%@)
CKBBContextKeyBalloonBundleID
IMDScreenTimeAskReponseHandler
requestID
Sending sent ST response with answer: %@
Successfully sent ST response with answer: %@
[%@: <Device%@ activeDate:%@ readReceipt:%@, read ReceiptDate %@>]
OTCManager
Asked to track a new OTC with guid %@
Asked to track a OTC but code appears to be invalid %@
Send out OTC to all interested clients.
Clearing code for GUID: %@
Asked to consume code for guid %@, but unable, current code count: %@
Timer fired to clear code with GUID: %@
v16@?0@"NSTimer"8
IMDSoundUtilities
Play message sent sound type: %@, for message: %@
Acknowledgment
Suppressing play sound for downgraded message[%@]
Suppressing play sound because it was already played [%@]
Suppressing play sound for auto-reply message [%@]
Unable to find a sound action ID for %@  errorResult: %d
Unable to set property on sound ID   errorResult: %d
com.apple.MobileSMS
SuppressingSendSoundMessageGUIDs
Setting timer to evaluate deferred message processing in: %f
Checking for deferred message processing task
MessageProcessing: Unable to retrieve ptask from store
Found %ld messages that need processing
Scheduling next batch of messages to process
Finished processing deferred messages
IMDCoreSpotlight
Not indexing message, spotlight has not finished migrating yet
message-format-version
message-id
sender-uri
time-of-message
message-has-image
message-length
message-text
message-app-bundle-id
message-spam-model-version
message-spam-model-detected-spam
mmcs-url
mmcs-signature-hex
mmcs-owner
file-size
decryption-key
mmcs-owner-id
mmcs-file-size-string
mmcs-symmetric-key
mmcs-UTI-type
message-attachment-info
conversation-group-size
payment-info
is-self
is-payment
is-informal
message-service
notify-security
v32@?0@"NSString"8@"NSArray"16^B24
IDSReportiMessageUnknownSenderWithBlackholeStatus
PKPeerPaymentMessageTypeFromDataURL
PassKitCore
PKPeerPaymentMessageDictionaryRepresentationFromDataURL
__kIMDaemonWillShutdownNotification
__kIMDManagedPreferencesChangedNotification
v32@?0@"CUTWeakReference"8Q16^B24
@16@?0@"CUTWeakReference"8
v32@?0@"IMDServiceSession"8Q16^B24
IMDServiceSession
initWithAccount: %@       service:%@  defaults: %@
DEALLOC: %@
[%@ addAccount:%@]
[%@ removeAccount:%@]
[%@ sessionDidBecomeActive]
Scheduling watchdog timer before first unlock
Not scheduling routing, expire and watchdog timer before first unlock
[%@ sessionWillBecomeInactiveWithAccount:%@]
-[IMDServiceSession _connectionMonitor] monitor: %@:%@
_updateConnectionMonitorWithRemoteHost: %@:%@
Creating connection monitor to global reachability: %@
Forcing an invocation of connectionMonitorDidUpdate 10 seconds after setting it up.
Already have connection monitor to global reachability: %@
Going disconnected for connection monitor: %@
_reconnectIfNecessary: %@:%@
  shouldAlwaysBeLoggedIn: %@    shouldReconnect: %@   wasLikelyNetworkError: %@  loginStatus: %d  disconnectReason: %d
%@: we're disconnected properly - and we're supposed to try to reconnect now, 
IMConnectionMonitor
%@       forcing disconnect
%@: Network connection to %@ is down -- disconnecting
%@       Data connection is active, going into login server ready
%@       I can be reached
%@ connectionMonitorDidUpdate: Currently connected: %@   (Reachable: %@  Data Active: %@  On Call: %@  Data+Voice: %@   Result: %@)
Network
-[IMDServiceSession networkConditionsAllowLogin]: %@ (%@)   (Ignoring network)
-[IMDServiceSession networkConditionsAllowLogin]: %@ (%@)   ([[%@]_connectionMonitor isImmediatelyReachable])
-[IMDServiceSession networkConditionsAllowLogin]: %@ (%@)   (Fallback)
Refreshing capabilities: %@
%@ System did unlock - ending message suppression
IMDServiceSession | Expected to blocklist chat for chatDict: %@ but groupID nil
Blocklisted GroupID: %@
IMDServiceSession | Deletion: did not find any chats for received guid: %@ or received groupID: %@
removing chat: %@, permanently: %@
recoverably deleting %@: messages
IMDServiceSession | Recently Deleted: deferring to recoverable delete - unexpected permanent delete received for command dictionary: %@
Recently Deleted | messages delete date: %@
IMDServiceSession | Recovery: did not find any chats for existingChatWithGUID: %@, existingChatsWithGroupID: %@
guid
IMDServiceSession: Recently Deleted | Received empty parts-mardid command
IMDServiceSession: Recently Deleted | Received permanent delete command. This is unsupported
Recently Deleted | Deleting message parts from %lu messages: %@
IMDServiceSession: Recently Deleted | could not find messageItem for GUID: %@
IMDServiceSession: Recently Deleted | did not find indexes to delete at for GUID: %@
Recently Deleted | Removed parts from old item %@, got new item: %@
Recently Deleted | Mardid: deleting message part: found no message-part body-text to store for recovery
v16@?0@"NSAttributedString"8
Recently Deleted | _updateLastMessageTimeStampForChat received nil chat
Recently Deleted
IMDserviceSession
Recently Deleted | IMDChat: %@, updating last message timestamp on load: %@
IMDSpamController
Instantiated IMDSpamController
Performing server query with alias: %@, count: %@
Server request returned status: %ld, abusive: %@, delay: %f, error: %@
v36@?0q8B16d20@"NSError"28
Chat
Stopping spam check for chatGUID: %@ interval: %f
Scheduling a spam check with interval: %f for chatGUID: %@
message-spam-check-timer
disable-auto-detect-spam
hasViewedPotentialSpamChat
detectSpam for Chat Identifier: %@
wasAutoDetectedForSpam
shouldn't retry again: %@
don't try to detect spam for chat: %@, disabled: %@, properties: %@
CloudKitExitRecord
Exit
CloudKitExitOnDate
ExitRecordKeyManateeZoneSubscription
com.apple.Messages.IMDCKExitManagerErrorDomain
SyncCompleteRecordType
SyncCompleteDateKey
AnalyticDataRecordType
AnalyticDataKey
SyncCompleteRecord
AnalyticZoneRecord
SyncCompletedRecently
SyncNotCompletedRecently
SyncInProgress
SyncDueToIMAuto
SyncCompleted30Hours
IMNotSyncDueToIMAuto
Recent
Power
Wifi
Syncing
FirstUnlock
Crash
LastCompleteDBCKSyncWasWithin3Days
LastCompleteDBCKSyncWasNotWithin3Days
LastCompleteDBCKSyncWasWithin7Days
LastCompleteDBCKSyncWasNotWithin7Days
LastCKSyncWasWithin3Days
LastCKSyncWasNotWithin3Days
LastCKSyncWasWithin7Days
LastCKSyncWasNotWithin7Days
PreFlightZoneFetch
FullSyncInitiated
FullSyncFailed
FullSyncCompleted
FullChatSyncStarted
FullChatSyncFailed
PeriodicChatSyncStarted
PeriodicChatSyncCompleted
PeriodicChatSyncFailed
MessageSyncStarted
MessageSyncFailed
MessageSyncStoppedDueToDeviceConditions
AttachmentSyncStarted
AttachmentSyncFailed
AttachmentSyncStoppedDueToDeviceConditions
ManateeNotAvailable
NotStartingCoreDuetSync
BackUpCompletedRecently
BackUpNotCompletedRecently
InitialSyncInitiated
InitialSyncCompleted
InitialChatSyncInitiated
InitialChatSyncFailed
InitialMessageSyncInitiated
InitialMessageSyncFailed
InitialAttachmentSyncInitiated
InitialAttachmentSyncFailed
ChatSyncCompleted
WriteSyncCompleted
DeletionSyncCompleted
AttachmentMetadataSyncCompleted
WithOver20HoursOfPowerAndWiFi
FirstSyncInitiated
FirstSyncCompleted
FirstChatSyncFailed
FirstMessageSyncInitiated
FirstMessageSyncFailed
FirstAttachmentSyncInitiated
FirstAttachmentSyncFailed
FirstSyncFailed
RecievedMissingMessageNotification
PostingMissingMessageData
CrashDuringFirstSync
MaxRecoverableAttemptReached
PCSIdentityWasLost
ManateeIdentityFetchAttemptFullSync
ManateeIdentityFetchAttemptFullSyncFailed
ManateeIdentityFetchAttemptRestoreSync
ManateeIdentityFetchAttemptRestoreSyncFailed
FullSyncInitiatedWithOver20HoursOfPowerAndWifi
FullSyncCompletedWithOver20HoursOfPowerAndWifi
RestoredAllContentFromCloudKit
com.apple.ProtectedCloudStorage.mobileBackupStateChange
com.apple.ProtectedCloudStorage.test.mobileBackupStateChange
com.apple.ProtectedCloudStorage.test.mobileBackupStateChange.success
com.apple.ProtectedCloudStorage.PendingKeyRoll
PCSBackupDisabledKeyroll
PCSBackupDisabledUserToggledKeyroll
PCSBackupDisabledTestToggledKeyroll
PCSBackupDisabledSuccessfulKeyroll
PCSPendingKeyroll
com.apple.private.IMDCKExitManager
IMDCKExitManager
Exit Record date has been modified, changing it from %@ to %@. Are we in exit state ? %@
Error fetching exit record date has been modified, changing it from %@ to %@
Handling notification for subscriptionID: %@
Calling writeExitRecordWithDate. ExitDate: %@
writeExitRecordWithDate, must be called with a non-nil exit date ignoring request
We were not able to create the subscription, we'll still try to write the exit record as we'll retry updating the subscription on imagent launch
writeExitRecordWithDate returned with error: %@
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
writeExitRecordWithDate scheduling opperation
******* Failed writeExitRecordWithDate salt zone was not present *********
Calling exitRecordDateWithCompletion date: %@ error: %@ fetchedExitDateOnLaunch: %@
Updating our exit date to %@  with error %@. fetchedExitDateOnLaunch [%@] or previous errorFetchingDate [%@]
v24@?0@"NSDate"8@"NSError"16
Dispatching back to main queue exitDate: %@ error: %@
Already on main queue exitDate: %@ error: %@
Calling _fetchExitRecordDateWithCompletion
** Error fetching exit record %@
Done fetching exit record successfully
Exit date has been modified from %@ to %@, attempting to toggle icloud settings toggle
Unable to fetch exit zone record Error: %@
ExitRecord
v24@?0@"NSDictionary"8@"NSError"16
_fetchExitRecordDateWithCompletion scheduling opperation %@
Calling deleteExitRecordCompletionBlock
deleteExitRecordWithCompletion returned with error: %@
deleteExitRecordWithCompletion scheduling opperation
QOS: 0x%lX target qos: 0x%lX
Checking if salt zone needs to be created
Error creating salt zone %@
***** Timed out creating salt zone *******
Checking if exit zone subscription needs to be created
Error creating exit zone subscription %@
***** Timed out creating exit zone subscription *******
writeInitialSyncCompletedRecordIfNeeded Not doing under first unlock
initialSyncRecordHasBeenWritten
writeInitialSyncCompletedRecordIfNeeded Requesting last sync date for metrics: %@
Last sync was within the last 7 days
Wrote last sync date to CK first time, success %@, error %@
writeInitialSyncCompletedRecordIfNeeded last sync date %@ was not in last 7 days
writeInitialSyncCompletedRecordIfNeeded No last sync date
writeInitialSyncCompletedRecordIfNeeded We have already done this. Not doing again unless you do defaults delete com.apple.madrid initialSyncRecordHasBeenWritten
IMDCKSubmitMetric
Submitted metric with opGroupName %@ Error %@
*** submitCloudKitMetricWithOperationGroupName not submitting MOC enabled: %@, serverAllowsSubmission: %@
Error creating analytic zone %@
***** Timed out creating analytic zone *******
IMDCKSubmitAnalytic
Request to submit dictionary (%@) opGroupName %@
Analytic zone does not exist, so creating it before resubmitting metric.
Successfully created analytic zone so trying to submit metric again.
Issue, we created the zone and we got back same error again.
Submitted metric with opName %@, dict: %@
Reporting errors: %@
syncErrors
Failed to create analytic zone.
*** submitCloudKitMetricWithOperationGroupName not submitting as analytic submission is not enabled
Performing metric operation name %@ using DB %@
Trying to submit CK metric operation with ID %@
Completion called for submittion metric operation with ID %@. ignoreZoneNotFoundError %@ OperationError %@
IMDCKSyncCompletion
We should not be submitting metrics to CloudKit: serverAllowsMetricSubmission: %@ isInternal: %@ isSeed: %@
Writing up sync metric using opGroup %@
We should not be submitting metrics to CloudKit so calling completion with success.
Failed to serizlize analyticdict as JSON %@. Posting operationGroupName %@ only.
Writing up sync analytic using opGroup %@
Not submitting metrics to CloudKit because notAllowed: %@ noJsonData: %@ so calling completion with success.
sendCloudKitZoneFetchRequestToNoteFeatureIsOn
sendCloudKitZoneFetchRequestToNoteFeatureIsOn not pinging CK as feature is off
Pinging cloudkit to tell feature is on.
Messages_Enabled
Messages Enabled Ping
sendCloudKitZoneFetchRequestToNoteFeatureIsOn: Fetch zone operation error %@
Scheduling ping cloudkit fetch zone operation %@
chatManateeZone
messageManateeZone
attachmentManateeZone
messageUpdateZone
analyticManateeZone
RecordKeyManateeZone
MetricsManateeZone
recoverableMessageDeleteZone
com.apple.aps.imagent
We couldn't create the push connection for the IMDRecordZoneManager
com.apple.icloud-container.
IMDCKRecordManager
Created push connection %@ with enabled topics %@
APSConnection didReceivePublicToken
APSConnection didReceiveIncomingMessage pushPayload: %@ ckNotification: %@
Received a notification for an unsupported notitifcation type: %@
Received a notification for zoneID: %@ for subscriptionID: %@
Received a notification for zoneID we haven't set up: %@ subscriptionID: %@
Creating subscription: %@ for zoneID: %@
We failed to create the subscription: %@  with error: %@
We successfully created subscription: %@
v24@?0@"CKSubscription"8@"NSError"16
We are already subscribed to: %@
We are not subscribed to subscriptionID: %@ so let's create it
_checkRecordZoneExists invalid parameter: recordZoneID %@
IMDRecordZoneManager
Created CKFetchRecordZonesOperation operation ID %@ zoneID %@
Did not get back a zone for recordZoneID %@
IMRecordZoneManager
Found zone %@
Error initializing fetchOperation 
Successfully created zone %@ 
***** Failed to createzone %@ %@ 
Zone %@ already exists
createRecordZoneIfNeededWithCompletionBlock zone %@ exists %@ error %@
Attempting to create zone %@
Successfully deleted zone IDs%@
Failed to delete zone IDs%@ error %@
Going to create subscription on deDupe zone for subscriptionID: %@ recordType: %@
Request to delete zones %@ for database %@
Result of deleting all zones
Successfully deleted zone IDs%@ DB %@
Failed to delete zone IDs%@ error %@ DB %@
Attempting to infer manatee status by fetching chat zone.
Error obtaining zones %@
******* Error indicates device does not have keys to sync *****
Not a fatal manatee error %@. Proceeding
com.apple.private.IM.IMRecordZoneManagerErrorDomain
IMDCKMessageSyncCKOperationFactory
Created fetch message operation ID %@ operationGroupName %@
Created modify message operation ID %@ operationGroupName %@
MessageDelete
Created deleted message operation ID %@
RecoverableMessageDelete
Created recoverable deleted message operation ID %@
Created fetched archived operation ID %@ using zone id %@
com.apple.Messages.IMDAvailabilityVerificationManager
SKStatusSubscriptionService
StatusKit
AKAvailabilityStatusTypeIdentifier
AvailabilityKit
IMDAvailabilityVerificationManager
Using cached availability verification tokens %@ for message to handleID "%@"
Subscription validation tokens %@ is already cached for handleID: "%@". Not fetching again
Fetching subscription validation token for handle handleID: %@
SKHandle
Caching subscription validation tokens "%@" for handle handleID: %@
v24@?0@"SKSubscriptionValidationTokens"8@"NSError"16
Caching subscription validation token "%@" and no encryption token for handle handleID: %@
This device will validate subscription validation tokens
Received request to validate validation token "%@" from senderHandleID "%@"
Skipping validation, this device should not validate tokens
Not processing validation token "%@" for old message from %@ with date: %@
Received validity response of %ld for validation token "%@" from senderHandleID "%@"
Received a valid validity response, no further action needed.
SKSubscriptionValidationTokens
v24@?0B8B12@"NSError"16
Completed invitation. CanShare: %ld, DidShare: %ld, Error: %@
Subscription invitation received, clearing cache. Subscription: %@
Subscription received status update, no verification manager action required. Subscription: %@
Subscription state changed, clearing cache. Subscription: %@
Subscription service daemon disconnected, clearing cache, but not reconnecting.
<%@: %p; subscriptionValidationToken = "%@", encryptionValidationToken = "%@">
com.apple.distnoted.matching
INVocabulary
Intents
IMDChatVocabularyUpdater
Received request to update vocabulary for added chat, but chat registry is not yet loaded. Deferring update. Added Chat: %@
Updating SiriKit group name vocabulary for added chat: %@
Received request to update vocabulary for deleted chat, but chat registry is not yet loaded. Deferring update. Deleted Chat: %@
Updating group name vocabulary for deleted chat: %@
Received request to update vocabulary for renamed chat, but chat registry is not yet loaded. Deferring update. Renamed Chat: %@
Updating group name vocabulary for renamed chat: %@
Chat registry was reloaded, but merge is not yet completed (e.g. we're still under first data protection). Not updating vocabulary.
Chat registry has finished loading. Updating group name vocabulary due to a deferred update request.
Chat registry has finished loading. No deffered update request.
q24@?0@"IMDChat"8@"IMDChat"16
Updated the SiriKit group names vocabulary with %lu named group chats
Performing initial group name vocabulary update
com.apple.private.alloy.electrictouch
IMDLegacyDTController
Loaded dtService: %@
_senderIDFromToken invalid input
_senderIDFromToken could not split into legitimate components %@
Received incoming DT message service %@ account %@ [data length] %@ fromID %@ context %@
IMDLegacyDTController No data %@ or fromID %@ on DT message. Bailing early
IMDLegacyDTController could not get senderID from fromID:%@
Got senderID %@
Created new DT message %@
Processed message %@ with session  %@
Could not find suitable session to process message %@
wasReportedAsJunk
permanentDeleteChatMetadataArray
chat
groupID
isPermanentDelete
recoverableDeleteDate
message
recoverChatMetadataArray
parts
messageGuid
indexes
indexToRange
deleteSubject
@16@?0@"IDSURI"8
v32@?0@"NSURL"8@"NSArray"16^B24
Updating moment share %@ in response to photo library change for message %@
Updating moment share fetch for message %@ with change %@. Count is now %lu
IMDMomentShareManager
v24@?0@"PHMomentShare"8@"NSError"16
Starting to monitor fetch result: %@ for message: %@ moment share: %@
Moment share %@ is done fetching %lu assets. Generating transfers
Moment share ingestion complete for message %@. moment share UUID %@
Fetching moment share from %@ for message %@ CMM state %@ (%lu)
Fetched moment share %@ for message %@
IMDMomentShareManager - Request for moment share %@ for message %@ has not completed after 5 seconds
Register and accept ShareURL for message: %@ with bundleID: %@ hasPayload: %@ reset asset transfers: %@
No share URL found for %@
Processing CMM shareURL %@ for message %@ with state %@ (%lu)
Moment shareURL %@ for message %@ is already done
Message %@. No need to reset transfers for in-progress ingestion of moment share %@
Clearing and restarting transfers for in-progress message %@, moment share %@
Resetting transfers on message %@ in state %@ and restarting ingestion
Registering moment shareURL %@ for message %@ and beginning ingestion
Ingestion of moment shareURL %@ for message %@ is already underway
Accepting share %@ for message %@
Moment share %@ accepted success %@ error %@ for message %@
Transitioning to accepted state for moment share %@ message %@
TransferMap entry %@ to %@
v32@?0@"IMFileTransfer"8Q16^B24
Message %@: Begin request for resource file URLs for asset %@
v24@?0@"NSURL"8@"NSError"16
Message %@: Not requesting asset for %@, not in transfer map. %lu left for processing
Message %@: Original transfer %@ not found for asset %@
Message %@: Completed request for resource file URLs for asset: %@
Setting syndication identifier to %@ on asset with UUID %@
IMDMomentShareManager - Not setting syndication identifier on asset with UUID %@ due to missing syndication identifier
No photo or video file URL in file URLs: %@, for transfer: %@
IMDMomentShareManagerErrorDomain
Persisting attachment at fileURL: %@ for transfer: %@
Last outstanding asset requested for message %@, setting IMCMMStateCompleted
%lu assets still pending export
Deleting %lu transferGUIDS from CMM message %@, rl transfers left %@
Not generating transfers for message %@ because there are no asset UUIDs moment share with count %@: %@
Starting with RL transfer GUIDs %@
Generated transfer %@ for asset %@
v32@?0@"NSString"8Q16^B24
Setting Message %@ to CMM state Generated
Persisted attachments to message %@
Existing transfer found for %@, setting attribution %@
IMCMMStateNotCMM
IMCMMStateRegistered
IMCMMStateAccepted
IMCMMStateGenerated
IMCMMStateCompleted
invalid CMM state
schema_version
schema
IMDCKMockRecordKeyZone
Dispatching operation %@
handleOperation : %@
Mocking writing up Cloudkit metrics
Mock fetching exit record
-DRR
/var/mobile/Library/SMS/CloudKitMetaData/AttachmentSyncZoneMetaData.db
AssetFetchFailure
com.apple.private.IMDCKAttachmentSyncController
IMDCKAttachmentSyncController
_shouldMarkAllAttachmentsAsNeedingSync %@
ck-max-number-of-attachment-batches
 overriding max number of attachment batches to fetch %@
Marking any unsuccessfully synced attachments as needing sync
Finished Marking any unsuccessfully synced attachments as needing sync
Not marking unsuccessful attachments as needing sync. Last attempt date %@
IMDCKInitialAttachmentSyncController
overriding max number of attachment metadata batches to fetch as this is in demo mode.
ck-max-number-of-attachment-metadata-batches
overriding max number of attachment metadata batches to fetch %@
Initiating attachment syncing with type %ld
syncAttachmentsWithSyncType with type %ld finished
Completed Delete Recovery Resync!
Initial attachment sync succeeded. Proceeding with metadata only sync.
Initial attachment sync failed. skipping metadata only sync.
*** Called into to do initial sync ****
fetchAttachmentDataForTransferGUIDs %@ HQ %@
fetchAttachmentDataForTransfers: we weren't able to get a CKRecordID from a transfer; transfer sync state %@, non-empty salt %@
.UserInit
.Compute
@16@?0@"IMFileTransfer"8
v24@?0@"NSError"8@"NSArray"16
accepting file transfer %@
Transfer %@ - %f complete of %llu bytes
v32@?0@"IMFileTransfer"8f16B20@"NSError"24
accepting file transfers %@
Won't download assets, we are optimizing attachment storage.
We have a nil salt so we can't download assets anyway -- bailing
CloudKit Asset download already in progress, ignoring request
Won't download download assets, we don't meet the resource conditions currently
Starting attachment download batch with %lu items retries %@
Finished download of assets with Error: %@
Found a fatal partial error: %@
Kicking off another asset download batch in %f seconds
Attachment download can't start at this time, so stopping attachment sync
Failed downloading batch of assets, not kicking off another batch. (number of retries: %lu) Error was %@
No assets to downloand
v28@?0B8Q12@"NSArray"20
purgedAttachmentsForChat Request to download purged assets for chats %@ on services %@
Got %lu purged assets to download
No assets that have been purged
**** failed to create IMFileTransfer from IMDAttachmentRecordRef rowid: %lld, marking as synced ***
purgedAttachmentsCountForChat Request to get count of purged assets for chats %@ on services %@
Request to download purged assets for chats %@ on services %@
ck-client-download-purged-attachments-batch-size
Got %@
Done downloading purged attachments for chat %@
Found records to donwload {%@}
**** failed to create IMFileTransfer from IMDAttachmentRecordRef rowid: %lld, marking as failed to sync ***
This is a periodic sync and deviceConditionstoCheck is set to IMCheckNoDeviceConditions, changing it to IMCheckAllDeviceConditions
This is an initial sync but current batch count [%@] >= maxBatchCount [%@] and deviceConditionstoCheck is set to IMCheckNoDeviceConditions, changing it to IMCheckAllDeviceConditions
Setting xpc_activity_t to XPC_ACTIVITY_STATE_DEFER because conditions are no longer met
Error forcing xpc_activity_t to XPC_ACTIVITY_STATE_DEFER
Attachment sync: device conditions allow sync: %@ deviceConditionsToCheck %@
Fixed up guid for transfer old guid: %@ new guid: %@
******** Marking attachment as synced up, as we could not update it's guid %@ (rowid %@)
Writing up a batch of attachments to cloudKit
**** failed to create IMFileTransfer from IMDAttachmentRecordRef rowid: %lld, marking as clean ***
Got %lu dirty results to sync, filtered to %lu
Fixing up attachment GUIDs if needed
Removing attachments that were marked as clean 
Transfer to sync %@ 
Got %lu records to sync, filtered to %lu unique records
*** This is the last batch of attachments to write up. Number of records to write %lu < max batch size %lu
Got error %@ writing attachment records. Stopping further writes
NO error writing attachment records.
Kicking off another batch of attachments to write
** This was the last batch of attachment writes as the number of attachments to write up was less than max batch size Not writing more.
Failed to write any of these %lu dirty attachments, looking for more attachments to write
Failed to write any of these %lu dirty attachments, looks like there's nothing left to do
Device conditions dont allow us to sync
Fetching assets for %@
OptimizeRedownload
v24@?0@"CKRecordID"8d16
v32@?0@"CKRecord"8@"CKRecordID"16@"NSError"24
Starting Delete Recovery Resync
Continuing Delete Recovery Resync
Fetching attachment batch count %@ (max: %@) syncType %@ batch size %@ token %@
FullRestore
PeriodicSync
AttachmentSync
*** Exceeded max number of attachment batches to fetch. Stopping attachment fetch ***
Downloading asset while performing periodic syncing with cloudkit
v16@?0@"CKRecord"8
v32@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24
recordZoneChangeTokensUpdatedBlock should not get called
v24@?0@"CKRecordID"8@"NSString"16
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
Scheduling a fetch operation from attachment zone
Device conditions dont allow sync OR continueFetching %@. Disk Space Available: %@
PeriodicAttachmentSync
BackfillAttachmentSync
v24@?0@"CKRecord"8d16
v24@?0@"CKRecord"8@"NSError"16
Attempting to write %@ records to truth zone 
Error creating attachment zone %@
***** Timed out creating attachment zone *******
ChangeTokenExpired
IMDCKMessageSyncController
Kicking off an attachment write after fetching messages
Not kicking off a write because cachedSalt is not present.
Not writing up messages as sync type does not allow it
recordZoneChangeTokensUpdatedBlock recordZoneID %@ serverChangeToken %@ clientChangeToken %@ moreComing %@ recordZoneError %@
Saving sync token %@
Done fetching attachments in initial fetch
Kicking off another fetch of attachments
No more attachments to pull down. Setting IMCKFinishedFetchingAttachmentsFromCloudKit and kicking off a write
No more attachments to pull down. Should write back changes was no *****
We got back a change token has expired for processing the record zone for attachments going to try and fetch again
We got a %@ error while fetching attachments. %@
user deleted zone
zone not created
Resetting local attachment sync state & last sync date after received user deleted zone error
Attachment zone missing, attempting to create it
****** Failed creating attachment zone
//---*** Error fetching attachments from CloudKit with error: %@ ---- ***//
Attachment per-record completion %@ changeTag %@ error %@
_writeCKRecordsToAttachmentZone uploaded record successfully
_writeCKRecordsToAttachmentZone had a conflict 
Server's GUID was different than we expected; aligning with the server's data
On conflict, the server record's GUID (%@) was different than the record we tried to update with GUID (%@); marking local attachment as synced, to skip it
Conflicting serverRecord was different than the one being updated (server: %@, local: %@)
Record had invalid arguments, we'll try this record again on the next sync
Record had unknown error code. Clearing out CK metadata
We couldn't find the attachment zone for this record so marking the attachment as dirty and clearing the state
_writeCKRecordsToAttachmentZone perRecordCompletionBlock encountered an error.  Will try this record again on next sync. %@
_processFetchRecordChangesCompleted error %@
_processRecordDeletion deleted record %@
_processRecordChanged changed recordID:%@ for attachmentGUID %@
recordZoneChangeTokensUpdatedBlock recordZoneID %@ serverChangeToken %@ clientChangeToken %@
Modify attachment had errors we can deal with, so treating this as a non error case
_processModifyRecordCompletion error: %@
Number of records saved %@ with error %@
Asset fetch complete for %@ error %@
Attachment batch fetch complete with error %@
Attachments to process %@
Finalizing asset download for transfer %@
Asset not found in record, must not be synced to the cloud transfer %@
Can't find transfer in pre-transfer map, for a CKRecord we fetched an asset for, recordID %@. CAN'T UPDATE!
We failed to fetch asset from CloudKit -- failing the transfer: %@
Can't find transfer in pre-transfer map, for a CKRecord we failed to fetch asset for, recordID %@, error %@
Removing attachment at path '%@' for %@ from iCloud backups
Attachment at path '%@' for %@ not found, NOT removing from iCloud backups
Going to fetch the asset for transfer guid at the end of this batch: %@
** No IMFileTransfer found for GUID %@
attachmentZoneChangeToken
attachmentZoneChangeTokenForMetadata
Clearing local chat sync state, flags 0x%x
We fetched a record that we didn't try to fetch!! we wanted (guid %@) for recordName: %@
We successfully fetched and validated that we can delete the transfer with guid: %@
We failed to validate that we can delete transfer with guid: %@
We got to the last object in the array so we will call our completion block with transfers to delete count: %@
v32@?0@"CKRecord"8Q16^B24
Attempting to fetch a nil file transfers from CloudKit for attachment purging
Validating %lu attachment downloads %@
Adding transfer to fetch: %@ with record name: %@
Couldn't retrieve CKRecordID from file transfer %@
We got an error back from CloudKit trying to fetch recordID: %@ with error: %@ transfer: %@
Attachment zone ID is nil
recordID
deleteAfterRow
Removed duplicate recordID %@ from delete syncing
rowid
No GUIDs passed in to delete
Deleting attachment operation deletedRecordIDs %@
@16@?0@"CKRecordID"8
Adding additional deleted record IDs from error
v32@?0@"CKRecordID"8@"CKRecord"16@"NSError"24
Kicking off deleted of recordIDs %@
Cloudkit sync is not enabled. Not deleting attachments
No pending messages to delete/fetch from CloudKit
Attachment %@ was to be deleted, but is still being referenced. Fetching instead.
Got %lu recordIDs queued for delete processing which split sa %lu records to RE-fetch and  %lu to delete
********* Error while deleting attachments %@
Rate limited while deleting
DeleteRecovery
********* Error while fetching non-orphaned deleted attachments %@
Kicking off another batch delete to cloudKit
IMDCKSyncState
Exception while adding syncError. exception:%@, error:%@, simplifying
ProductBuildVersion
Setting object %@ for key %@ in analyticDict.
Setting ProductBuildVersion %@ for key %@ in analyticDict.
Removing keys %@ %@ from analyticDict.
Request to set analytic sync date for object %@ and key %@ shouldOverrideIfExists %@
Errors(%lu total)
NewUser
RestoringUser
chat %@ init %@ %@ full %@ %@ %@
syncAttempts
syncSuccess
syncDuration
syncCounts
pcsStatus
%@, isFeatureEnabled: %@, isSyncing: %@, isEligibleForTruthzone %@, isSyncingEnabled: %@, isRemovedFromBackup: %@, isInExitState: %@, exitDate: %@, isStartingDisabledDisableDevice: %@, lastSyncDate: %@, isSyncingPaused: %@, startingChangingEnabledSetting: %@, isPaused: %@, syncControllerSyncState: %@, syncControllerRecordType: %@, syncType: %@, accountStatus: %@, syncErrors: %@
Account needs repair
IMDMessageHistoryFirstUnlockReplaySyncTask: Begin replaying first unlock database for %ld services
IMDFamilyInviteReponseHandler
inviteUrl
The file transfer does not exist on disk, but the transfer was explicitly ended.
IMDFileTransferCenter
Sending completion notification for explicit download of transfer:%@
Sending completion notification for explicit download of transfer with guid %@. transfer:%@
__kIMDFileTransferCreatedNotification
__kIMDFileTransferAcceptedNotification
__kIMDFileTransferBatchAcceptedNotification
__kIMDFileTransferStoppedNotification
__kIMDFileTransferRemovedNotification
__kIMDFileTransferUpdatedNotification
__kIMDFileTransferHighQualityDownloadInitiatedNotification
__kIMDFileTransferHighQualityDownloadCompletedNotification
__kIMDFileTransferHighQualityDownloadCompletedSuccessKey
__kIMDFileTransferHighQualityDownloadCompletedFileURLKey
__kIMDFileTransferExplicitDownloadCompletedNotification
__kIMDFileTransferExplicitDownloadCompletedErrorKey
__kIMDFileTransferExplicitDownloadCompletedSuccessKey
__kIMDFileTransferExplicitDownloadCompletedFileURLKey
File transfer operation was unsuccessful.
File transfer local file URL retrieval operation was unsuccessful.
See error code and compare against IMFileTransferErrorReason.
Attachments
FileTransferCenter updating guid for transfer in cache map:%@ to %@
Transfer failed. See underlying error. transfer.errorDescription:%@
IMDFileTransfer posting recoverable error state for IMFileTransfer
IMDFileTransfer reset file transfer to waiting state
Transfer was reset. See underlying error. transfer.errorDescription:%@
Marking transfer %@ as failing preview generation
Updating transfer %@ with size %@
New attribution info is %@
Attachments - Failed to update transfer preview size for %@, transfer not found
IMDFileTransfer posting recoverable error state (%zd) for IMFileTransfer %@
Failed to consume sandbox token, %@ token:%@
file-read-data
Denying transfer, (check %d, errno %d) client with audit token:%u not allowed to access request path:%@
Failed to release sandbox token, %@ token:%@
_handleFileTransfer accepted %@ - %@
ForceAllTransfersExpired
Invalid transfer state. transferState:%@ cloudKitSyncState:%@ existsAtLocalPath:%@
_handleFileTransfers accepted %@ - %@
Invalid transfer state. transferState: %@ cloudKitSyncState: %@ existsAtLocalPath: %@
IMFileTransferCenter
stopping transfer to guid
File transfer stopped locally.
File transfer removed.
MessageService Failed writing attachment to disk on incoming:%@
%s Requested to size with zero transferGUIDs
-[IMDFileTransferCenter sizePreviewsForTransferGUIDs:]
overall
Attempting to generate size for guid %@
Generated size for guid %@ size %f-%f error %@
v36@?0B8{CGSize=dd}12@"NSError"28
IMDFileTransferCenter - Timed out sizing transfer with guid %@, failing!
%s Skipping sizing guid %@. Needs sizing %@ hasLocalURL %@
Sizing complete, timing %@
Found message GUId %@ from IMFileTransferGUID %@ so that we can upadte the transfer. Record hasAsset %@
Taking asset from CKRecord for %@
Setting local record to upload asset for %@
Keeping local asset and sync state for %@
Fetched from CK. Updating existing transfer %@ for message GUID %@
IMDFileTransferCenter - Update from CKRecord found no existing attachment for %@, but was on the write path
Fetched from CK. Created new transfer %@ from CKRecord. Associating with message guid %@ hasAsset: %@
Do we want to download the transfer later? downloadAsset: %@, shouldDownloadAssetForTransfer: %@, hasAsset: %@
Going to auto downloading asset at the end of batch fetch for transfer: %@ addedTransfer %@ for messageItem: %@ groupPhotoUpdate: %@
Storing attachment %@ with no associate-able message %@
Nil CKRecord
markTransferAsNotSyncedSuccessfullyUsingCKRecord transferGUID %@
Could not find transferGUID %@ to mark as not synced successfully
markTransferAsNotSyncSuccessfullyDownloadedFromCloud transfer %@
resetSyncStateForRecord transfer %@ toNewState:%ld
Tried to clear the sync state for a transfer we don't have on disk transfer: %@ record: %@
{CGSize=dd}
IMDCKAttachmentSyncCKOperationFactory
Created fetch attachment operation  ID %@ fetch operation dictionary %@
Created modify attachment operation ID %@ operationGroupName %@
AttachmentDelete
Created deleted attachment operation ID %@
ExposureNotification
Activated ENManager: %@
en-push-allow-domains
en.express
enexpress.app
en-push-disabled
v40@?0@"NSURL"8{_NSRange=QQ}16^B32
ENTextMessage
Error: %@
Verified success
Running on an old build - unable to run through ENManager
com.apple.private.alloy.messagesquickswitch
MessagesQSwitch
tempSMS.db
tempDowngradedSMS.db
QuickSwitch
Instantiated IMDQuickSwitchController
Sending dummy request
Current db version is %ld
Recents
compressedSMSRecents.zip
compressedSMSDB.zip
QuickSwitch Could not determine file size as path was nil
QuickSwitch Could not determine file size at path %@ with error %@
Size of file at path %@ is %lu
QuickSwitch We got a nil path to truncate to.
QuickSwitch Could not delete DB at path %@
QuickSwitchTruncating
Messages
Started truncating quick switch DB
QuickSwitch Could not trim DB with error %@ 
Finished truncating quick switch DB
QuickSwitch we were given a nil path to delete
QuickSwitch Could not delete file at path %@ with error domain '%@' code: %ld
Deleted file at path %@ 
Cleaning up temporary files
QuickSwitch Could not delete DB at path %@ %@
QuickSwitch. We do not expect file to already exist. Clearing it.
QuickSwitch Could not delete zipped file DB at path %@ with error %@
QuickSwitchZipping
Finished zipping quick switch DB
QuickSwitch Could not create zipped DB
v16@?0@"IMFileCopier"8
Started zipping quick switch DB
QuickSwitch. We do not expect file to already exist.
Finished unzipping quick switch DB
QuickSwitch Could not create unzipped DB
Started unzipping quick switch DB
Initiating quick switch
QuickSwitch Could not send initiate QuickSwitch message. Bailing!
Could not send initiate QuickSwitch message. Bailing!
Could not send QuickSwitch Recents request. Bailing!
We tried to _handleQuickSwitchInitiateRequest a non watch device for QuickSwitch. This is really bad!
Finished with success %@
dbVersionResponse %@
Downgrade: found a database that can be downgraded to version: %ld
Trying to QuickSwitch to incompatible gizmo. Bailing quick switch. localDBVersion %ld gizmoDBVersion %ld
QuickSwitch Truncated DB did not succeed at path %@, Really bad! 
Truncation succeeded! :-)
Attempting downgrade from %ld to %ld...
Error Trying to QuickSwitch watch to version %ld from %ld. Downgrade failed with error: %@
Downgraded from %ld to %ld ok! :-D
QuickSwitch failed to rename downgraded db to tempdb with error: %@
renamed %@ to %@ in preperation for compression - this means the downgrade completed ok. :-D
We could not create zip file for QuickSwitch
Sent zipped file to watch
Database QuickSwitch: Could not send file over to gizmo. Bailing
Copying from %@ to %@
QuickSwitch could not copy path to temp directory with error %@. Bailing!!
QuickSwitch we could not create zip file
QuickSwitch could not send file over to gizmo. Bailing
_handleQuickSwitchCompleted %@
QuickSwitch got _handleIncomingDB on a non gizmo. Really bad!!
QuickSwitch got _handleIncomingRecents on a non gizmo. Really bad!!
Sending file at URL %@ to local account (identifier %@)  (error %@)  (metadata %@) success: %@
Sending message to local account (identifier %@)  (error %@)  (request %@) success: %@
service %@, account %@, incomingData %@ fromID %@ context %@
Not an IDSDevice: fromID %@. Bailing
Got request %@
Got IMDQuickSwitchControllerCommandInitiateQuickSwitch
Got IMDQuickSwitchControllerCommandResponeDBVersion
Got IMDQuickSwitchControllerCommandRequestRecents
Got IMDQuickSwitchControllerCommandQuickSwitchCompleted
QuickSwitch got unknown request over quick switch service %ld
service %@, account %@, resourceURL %@ metadata %@ fromID %@ context %@
Got IMDQuickSwitchControllerCommandIncomingDB at url %@
Got IMDQuickSwitchControllerCommandIncomingRecents at url %@
QuickSwitch got unknown resource ULR callback over quick switch service %ld
message sent with identifier %@ 
Checking if we are in proxy mode
Not in proxy mode. Found active iMessage account signed into email %@ 
In proxy mode. Did not find any active iMessage account logged in using email.
Found default paired device %@
QuickSwitch Did not find default paired device
QuickSwitch _notifyPSYWithResult not available on this platform
QuickSwitch _notifyPSYDataSent not available on this platform
SWCollaborationNoticeTransmissionMessage
SharedWithYouCore
com.apple.private.alloy.gelato
Loaded notice dispatch service: %@
IMDCollaborationNoticeDispatcher
-[IMDCollaborationNoticeDispatcher sendNotice:toHandles:]
%s: Bailing due to rate limiting for notice: %@
Sending notice (command: %@) %@ to %@, message: %@
%s Successfully sent Collaboration Notice (guid: %@) to handles: %@
%s Received request to send Collaboration Notice, but the feature is not enabled. Dropping message.
%s: Handling request to reflect notice dismissal for guids: %@
-[IMDCollaborationNoticeDispatcher reflectDismissalForNoticeGUIDs:]
%s Dropping request to reflect notice dismissal because notices are not enabled, guids: %@
%s: Handling incoming Collaboration Notice from: %@
-[IMDCollaborationNoticeDispatcher handleIncomingNoticeProtobuf:service:account:fromID:context:]
%s Received notice from %@ but unable to process notice, incompatible version of BlastDoor. Dropping notice.
%s Received notice from %@ but notices are not enabled. Dropping notice.
%s fromID: %@, message: %@
-[IMDCollaborationNoticeDispatcher service:account:incomingMessage:fromID:context:]
%s Received incomingMessage from %@ but unable to process Collaboration Notice Action, incompatible version of BlastDoor. Dropping notice.
%s Received incomingMessage from %@ but notices are not enabled. Dropping notice.
notice-fanout-threshold
__kCKRecordIMMessageIncompatibleDeleteNotification
time
sender
chatID
SubType
SubTypeMsg
msgType
subject
body
pdata
esid
tRead
tDelivered
tPlayed
flags
msgSummaryInfo
msgProto
msgProto2
msgProto3
dcId
rGuid
eCode
ROWID
TOID
TOPart
MessageEncryptedV3
messageUpdateV1
***Error _populateCKRecordWithIMMessageItemFields called on object %@ %@
***Error _populateCKRecordWithIMMessageItemFields (reply data) called on object %@ %@
***Error compressedProtobufDataForGroupTitleChangeItem called on object %@ %@
***Error _populateCKRecordWithIMGroupTitleChangeItemFields called on object %@ %@
***Error compressedProtobufDataForParticipantChangeItem called on object %@ %@
***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@
***Error compressedProtobufDataForLocationShareStatusChangeItem called on object %@ %@
***Error compressedProtobufDataForGroupActionItem called on object %@ %@
***Error compressedProtobufDataForMessageActionItem called on object %@ %@
-UpT1
-UpT2
MSGID
TPart
Failed to unarchive ckrecord. Error: %@
IMItem+CKRecord
Cannot create record from recordID because it is nil %@
Cannot sync item because it is an incompatible action type %lld
***** Error Tried to generate a CKRecord from class %@ ******
****** initiWithCKRecord called with unsupported message type %@ *****
We don't have a valid guid for the message record we want to reset sync state: %@
IMItem_CKRecord
Phone number destination callerID [%@] is unselected on phone but phone does not have SIM inserted and caller ID is a phone number so will store message [%@] anyways
We have an iMessage account that is not backed by an ids account ---- please file a radar
v32@?0@"IMDAccount"8Q16^B24
Skipping shouldStore check, destinationCallerID: %@
We should not store the message [%@] because our destination callerID [%@] has been unselected from list of available aliases
CacheDelete
Is already updating file sizes, returning
attachment-filesize-update-not-allowed
Server bag does not allow attachment filesize updating, retunring
Calling IMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark with rowID %@ iteration %@
No more attachment fileSizes to fix up, got nil back from query
filename
rowID
Got an empty set of attachments back - there are still more so increasing watermark by 20
Previous batch of attachment filesize updates completed, setting new watermark to be %@
Stopping filesize update. Set state attachment filesizes updated activity result %d
Registering with cache delete upon launch
Setting up cache delete callbacks cache delete enabled %@
com.apple.imagent.cache-delete
com.apple.messages-cache-delete
~/Library/Messages
Purge event: %@
rescan
historyDone
Purge notification - All done
path
v16@?0r^{__CFSet=}8
CacheDelete -- purgeable block called with urgency: %d info: %@ isMainThread: %@
purgeable callback dictionary: %@
r^{__CFDictionary=}20@?0i8r^{__CFDictionary=}12
CacheDelete -- purge block called with urgency: %d info: %@ isMainThread: %@
Purge callback with callback dictionary: %@
CacheDelete -- periodic block called with info: %@ and urgency: %d isMainThread: %@
AttachmentWatermarkResetDone50600874
CACHE_DELETE_GUIDANCE
CACHE_DELETE_GUIDANCE_DO_NOT_EXPAND_CACHE
Cache delete  guidance %@ requested size %@
CACHE_DELETE_VOLUME
Purgeable callback -- purgeableSpace: %lld purgeableNumber: %@
CACHE_DELETE_AMOUNT
Purge callback -- Deleted bytes: %lld, volume: %@ is running on main thread: %@
nothingToPurgeDictionary -- volume: %@ purgeableSpace: %@
_purgeableSpaceGivenUrgency -- Bytes available to purge: %lld result: %lld urgency: %d
We somehow got back a negative number of bytes to delete so we don't want to delete anything
Tried to obtain purgeable attachments without proper default ---- please set them: defaults write com.apple.madrid EnableCacheDelete -bool YES
Purgeable space %@
Tried to purge attachments without proper default ---- please set them: defaults write com.apple.madrid PurgeWithCacheDelete -bool YES
PurgeWithCacheDelete default not enabled
purgeAttachments with bytes: %lld
We got back %lu records from persistence to delete which resulted in %lu file transfers to delete
No attachments to delete
 We didn't get back any attachments to purge
We failed to create an IMFileTransfer for IMDAttachmentRecordRef with identifier: %lld
Tried to call _deleteFilesOnDiskAndUpdateTransfers without proper default ---- please set them: defaults write com.apple.madrid EnableCacheDelete -bool YES
We are removing the file at path: %@ for transfer: %@
We attempted to delete a path that was not safe to delete for guid: %@ path: %@
There was an error trying to remove the file: %@
We successfully removed the file - setting the transfer state to waiting for accept
The transfer we want to remove does not exist at its local path -- transfer (%@) local path (%@)
existsAtLocalPath
localPath
transferState
success
Created %lu dictionarie(s) for transfer info of deleted attachment(s)
Did NOT metric fetching synced attachments from CloudKit. CK Enabled %@ , device conditions allow sync %@
We are going to try and fetch attachments we would want to delete from local disk with bytes to free up: %lld
We got a fileTransfer that doesn't exist that we think we can delete for CacheDelete: %@
Going to try and fetch from sync controller with %ld batches to fetch
We disconnected from power or wifi in between batches, so cutting the batches short
_fetchTransfers with totalTransferCount: %@ index of transfers: %@ number of batches to fetch: %@
Completed fetching batch with starting index: %@ index of next batch: %@ for number of batches: %@
/*-------Fetched all transfers we wanted to validate------*/
com.apple.private.IMDAvailabilityAutoReplier
CARAutomaticDNDStatus
CarKit
Chat is not eligible for availability auto replies or dnd breakthrough
Message sender not eligible for availability reply or dnd breakthrough
Message items should break through do not disturb, sending did notify recipient receipt, and triggering urgent notifications
Message items did not break through do not disturb, attempting to send unavailability receipt or SMS message
No message items support availability reply, ending processing
DNDModeConfigurationService
DoNotDisturb
com.apple.messages
IMDAvailabilityAutoReplier
UserIsUnavailable
DNDMutableContactHandle
Not processing possible availability reply for non 1-1 chat
Not processing possible availability reply for business chat
Not processing possible availability reply for chat with more than one participant
Not processing possible availability reply for sender with zero length handle
Not processing possible availability reply for sender who is not a contact
Not processing possible availability reply, DND framework says we should appear available to this user
Message item does not support availability reply
Reducing messages to process for availability reply from %ld messages to %ld messages.
Not sending delivered quietely receipts in SMS chat
Requesting delivered quietely receipt be sent to message guids: %@
Not sending text auto reply to chat: %@
Sending text auto reply to chat: %@
Device does not support iMessage auto reply becuase it is not an iPhone
Device does not support SMS auto reply becuase it does not support CoreTelephony subscriptions
SMS auto reply not supported becuase device is not an iPhone
SMS auto reply not supported becuase local device does not have a SIM matching the last addressed SIM ID
DNDStateService
Driving focus is active
Driving focus is not active, current focus semantic type is %ld
DND mode is nil
DND active mode configuraiton is nil
Determined that we have not recently sent an availability auto reply. Message time %@ is older than recency window %@
Determined that we have not recently sent an availability auto reply. We haven't sent an auto reply in the last %ld messages.
Found a recent auto reply message from me: %@
Message %@ was not an auto reply from me. isFromMe: %ld, isAutoReply: %ld
Item is not a message. Item class: %@
v32@?0@"IMItem"8Q16^B24
Message item does not support breakthrough notification
Reducing messages to process for breakthrough notifications from %ld messages to %ld messages.
Not processing possible dnd breakthrough for message from me
Not processing possible dnd breakthrough for empty message
Not processing possible dnd breakthrough for typing message
Not processing possible dnd breakthrough for locating message
Not processing possible dnd breakthrough for auto reply message
Not processing possible dnd breakthrough for unfinished message
Not processing possible dnd breakthrough for system message
Not processing possible availability reply for message from me
Not processing possible availability reply for emote message
Not processing possible availability reply for empty message
Not processing possible availability reply for typing message
Not processing possible availability reply for locating message
Not processing possible availability reply for auto reply message
Not processing possible availability reply for unfinished message
Not processing possible availability reply for system message
Not processing possible availability reply for message that is a legacy urgent trigger
Message is flagged to notify recipient, should ignore do not disturb
Message has a legacy urgent trigger text, should ignore do not disturb
Message is SOS, should ignore do not disturb
Message received in chat that is in an urgent message grace period, should ignore do not disturb
Messages are not urgent, will not break though do not disturb
Determining if we should alert for this message by checking if we are in an urgent message grace period. Looking for received urgent messages in the last %ld minutes.
Determined that we are not in urgent message grace period. Message time %@ grace period start window %@
Found a recent message that broke through our dnd within the grace period window. Grace period is active.
Found a recent message that contains the urgent trigger phrase within the grace period window. Grace period is active.
Found a reply sent by me to the chat within the grace period window, extending grace period to %ld minutes.
Message %@ did not impact grace period. isFromMe: %ld, didNotify: %ld
Not checking grace period for non 1-1 chat
Chat is missing identifier or service: %@
Urgent
DaemonCoreLocalizable
Message has a legacy urgent trigger match
Sending %ld auto-reply messages to chat: %@
No sending auto-reply because no message text was available to send
Device is not in driving focus, not sending text auto reply
This device does not support text auto reply
We have already sent a recent text auto reply, not auto-replying again.
Not sending auto reply becuase the user auto reply audience preference does not match this chat. Audience %ld=%@
Auto reply audience preference matches this chat. Audience %ld=%@
Nobody
Contacts
Favorites
Auto-reply audience is %ld=%@
Is using customized auto reply message: %ld
Audience %ld=%@ allows replies: %ld
Participant %@ is not in contacts
Participant %@ is a favorite?: %ld
Participant %@ is not a contact, and cannot be a favorite
chatID %@ is recent?: %i
Message is SOS
AllowSOSViaNonSMS
maps.apple.com
^(http)s?(\:\/\/maps\.apple\.com\/\?ll\=)\-?\d+\.\d+,\-?\d+\.\d+\&q\=[^\&]+$
Message has an SOS URL match
recordKeyZone
chatEncryptedv2
attachment
IMDCKMockDatabase
Adding operation %@
Did not find mock database for operation %@ zoneID %@
CKBBContextKeyChatGUIDs
CKBBContextKeyMessageGUID
IMDNotificationResponseUtilities
couldn't find chat for %@ to mark message as read
receive notification response for bundleID [%@]
ChatSync
IMDCKChatSyncCKOperationFactory
fetchChatZoneChangesCKOperationUsingToken was passed in a nil zone
Created fetch chat operation ID %@
writeChatsOperationUsingRecordsToSave was passed in a nil records array
Created modify chat operation ID %@
Created deleted chat operation ID %@
IMCKChatSyncCKOperationFactory
IMDService
Registering bundle: %@
   => Internal service with name: %@
mcSV
mcAK
mcEK
mcNFK
mcIFK
pnHK
nRID
nBWV
pRID
IMDMeCardUpdatedNotification
Nickname feature is turned off, don't load nickname info into memory
nickNameKeyStore.db
nicknamekeystore
handledNicknamesKeyStore.db
handledNicknamesStore
pendingNicknamesKeyStore.db
pendingNicknameUpdatesStore
handleSharingPreferences.db
handleSharingPreferences
Evaluating account state for feature eligibility {refreshediCloudAndAppleIDMatch: %@ currentiCloudAndAppleIDMatch: %@}
Received aliases did change hasMultiplePhoneNumbers %@
nickname-reupload-profile-version
UseOldProfilesContainer
We successfully reuploaded our local nickname %@ %@
We were not successful in reuploading our nickname to the new container
Told this device just signed into iMessage, we need to ask our peers for nickname info requestedInfoBefore %@ retry count %@
Successfully sent request to peers for nickname info
We did not have the IDSDevices to send the request to, going to try again in %@
We do not have enough retries to get nickname info, not trying again
Told this device signed out of iMessage, we need to reset the bit that we've asked for the nickname feature info
Nickname sharing is not enabled or trying to verify on a group chat -- bailing verifying record ids
Going to verify if truncated record ID %@ is equivalent to our personal record id %@ current truncated id %@ recordIDS are equals %@
Truncated record id does not match, marking this chat as dirty so we send a nickname on the next message send
Beginning upload of nickname profile to CloudKit
Nickname is still uploading after time out %@ setting upload to done
Nickname upload has completed -- sending out of band nickname updates
We couldn't find a chat to send nickname info to for guid %@
Client request to store new personal nickname %@ path%@
Trying to set a personal nickname when the feature is off
Uploading Personal Nickname
Successfully Uploaded Personal Nickname
Unable to store in Public Database, aborting fanout to other devices
Failed Uploading Personal Nickname
Error: %@
 Fallback nickname: %@
v44@?0B8@"IMNickname"12@"NSString"20@"NSData"28@"NSError"36
Loaded pending nickname from disk: %@ and uploading
Found Pending Nickname Upload
No pending nickname found.
Resetting handle allow/denylist
Going to retreive the current nickname from CloudKit
v24@?0@"IMNickname"8@"NSError"16
Nickname feature is disabled, not fetching current nickname
Failed to fetch public nickname {error: %@, recordName: %@}
Failed Personal Nickname Fetch
recordID: %@
decryptionKey: %@
error: %@
Got personal nickname from IMTransferAgent: %@
Fetched Personal Nickname
Nickname Download
Public Nickname fetched or failed in time: %f
Name+Photo sharing feature is disabled, not fetching CloudKit record
We are missing parameters to fetch the CloudKit record (recordID: %@) (URI: %@) (decryptionKey: %@)
Already have this one, no need to grab it again from CloudKit with recordID %@
Retreiving nickname from IMTransferAgent with recordID %@
Fetched Nickname for %@
Nicknames - Failed getting nickname for record ID %@ from transfer agent with error %@
Failed Nickname Fetch for %@
recordID: %@
error:%@
The nickname feature is disabled, we shouldn't make any requests to CloudKit
Client request to delete personal nickname with recordID
Transfer agent succeeded in deleting public nickname from CloudKit
Did not succeed in deleting public nickname from CloudKit!
The nickname feature is disabled, not taking updates coming from madrid
audienceValue %@ enabledValue %@ nameForked %@ imageForked %@
Going to update Me Card preferences %@
Sharing Preferences Changed
Not enabled, deleting local recordID and cache
Transporting sharingEnabled %@
Transporting meCardSharingAudience %@ nicknameVersion %@ decryptionKey %@ nickNameID %@ nameForked %@ imageForked %@
Marking nickname as handled %@
updateHandledNicknamesIfneeded incomingPendingNicknameVersion %@ currentPendingNicknameUpdatesVersion %@
Our current pending handles %@ our incoming pending handles %@
We need to mark the following handles as having been updated %@
Peer Device Updated Handled Nicknames
Alert header: %@
Alert message: %@
Finished personal nickname fetch with nickname: %@, updating key store
Failed fetching new personal nickname: %@
Received newer version number (%lu, old: %lu), updating the deny/allow list store
Deny list added: %@
Deny list removed: %@
Allow list added: %@
Allow list removed: %@
Deny list
 and 
Allow list
 Updated from Peer Device
handleBlacklist
handleWhitelist
Broadcasting changes to the deny and allow list
Received older version number (%lu, old: %lu), dropping deny/allow list update
Nickname feature is disabled, ignoring updates from peer device
Nickname Updates from Peer Device
We got a request to send nickname info to a specific device %@
Nicknames not enabled, deleting the one we know about.
No nickname stored locally. Not querying CK.
Nicknames enabled, and we already have one in cloudkit. Broadcasting to my other devices.
We should send personal nickname info to all of our own devices
Nickname feature is disabled, not sending updates to peers
Sending nickname info to destinations %@
We could not find a service session for imessage to send the nickname info or no contents in message dictionary %@ %@
We are still uploading the nickname to iCloud, queue to send info out of band for chat %@
Nickname feature is disabled, not sending personal nickname to chat
Sending nickname info to chat %@
We didn't have a session to send the nickname info over
Writing %lu nicknames to allow list
We have an iMessage chat for guid so sending nickname info %@
Writing %lu nicknames to deny list
Nicknames - We had a problem writing a handle list update with key %@ -  %@
Nicknames - We had a problem archiving handle list for key %@ error %@
We could not replace incoming nickname in our handled map, add to pending
We replaced userNickname in our handled map w/ an existing handled record
We got a pending nickname to handle %@
We don't have a pending nickname to clear for handle ID %@
We got a malicious pending nickname to handle %@
We don't have a malicious pending nickname to clear for handle ID %@
Tried to add a nil nickname to our pending map
New pending nickname has no image %@
New pending nickname name hasn't changed, silently updating record ID for previously handled nickname %@
Adding new nickname to our pending map %@
add nickname to pending updates %@ %@
Existing nickname %@ and new nickname %@ are different %@
Marking nickname %@ as handled
Trying to update a nil nickname
Replacing handled nickname for handle id %@ from record id %@ to new record id %@
For nickname %@, deleting old avatar image at path during mark as updated %@. Error %@
writing nickname %@ to kvstore %@
We had a problem writing the nickname to the pendingNicknameUpdatesKVStore %@
We had a problem archiving the nickname object %@
We got an error trying to remove %@ from the pending map %@
We got an error trying to remove %@ from the handled map %@
Got called to clean up nickname for id %@
Removing %@ from allow list 
Removing %@ from deny list 
Removing %@ from pending nickname updates
Removing %@ from handled nickname updates
Sending updated handled and pending nicknames to peers and client
Nicknames
Deleting data from handled nicknames KVStore
Deleting data from pending nicknames KVStore
Exiting scrutiny mode
Nickname feature is disabled, not loading nickname info from disk
Device is under first unlock so we need to put updates into a temporary map until we leave first unlock
We are not under first unlock so we are able to load all data
IMDNicknameController is already in scrutiny mode before attempting to load data from disk. Will delete existing data.
Not going to load personal nickname, feature is disabled
Limit to load of nicknames %@
Setting the IMDNicknameController scrutiny flag
Clearing the IMDNicknameController scrutiny flag
We did not have success loading handled nicknames %@ or updates %@
created handled nickname map %@
created pending nickname map %@
Nicknames - We got an error loading the handle allow list data store %@
Nicknames - We got an error loading the handle deny list data store %@
Nicknames - Failed to unarchive allow list %@
No allow list data to load
Nicknames - Failed to unarchive deny list %@
No deny list data to load
Successfully loaded %lu allow list handles %lu deny list handles
We got an error loading the nicknames data store %@
We had an error %@ unarchiving data %@
Converting all nickname contents to Class C!
Failed making file class C: %@ with error %@
Storing personal nickname %@ and recordID %@ on disk
Writing nickname data of size %lu, recordID data of size %lu, and encryption key of size %lu to disk
NicknameRecordID
NicknameRecordKey
NicknameDataKey
Error writing data to KVStore %@ %@
Error writing personal nickname data to KVStore %@
Personal nickname data is nil, not writing to disk
Storing pending nickname %@ while waiting on upload
NicknamePendingKey
Error writing data to kvStore %@
Error reading pendingNickname %@
Error unarchiving storedPersonalNickname %@
storedPersonalNickname is nil
Error deleting data from kvStore %@
Error deleting data from KVStore %@
Error reading nickNameDecryptionKey %@
Error reading storedPersonalNickname %@
Error Loading Personal Nickname From Disk
Stored personal nickname doesn't exist
No Personal Nickname On Disk
Loaded Personal Nickname From Disk
Nickname loaded from disk did not have a recordID. Attempting to load recordID from disk.
Error reading nickname for pending upload %@
Error unarching pending nickname upload %@
Error deleting nickname avatar from path: %@
Passed in empty recordID
Did not find nickname for recordID %@
Found existing nickname
No nickname for handle %@
I'm being asked for handleURI %@
System did leave first unlock, loading maps into memory
FakeID
First
Last
IMDMessageSortOrderAssigner
%s assigning %@ sortID %@
-[IMDMessageSortOrderAssigner compareMessageToOtherMessagesWithSameReplyToGUIDAndAssignSortID:existingMessagesWithSameReplyToGUID:]
-[IMDMessageSortOrderAssigner assignSortIDToIncomingMessageWithNoExistingMessagesWithSameReplyToGUID:onChat:]
IMFocusStateManager
Dispatching with 15s delay to register for NSUserDefaults KVO.
15s delay completed
Performing initial database housekeeping
Bailing out of initial housekeeping, currently under unit testing
Daemon
Registering for the DB reconnect notification.
Got a mandatory DB reconnect notification, I will now exit.
  => Failing all unsent, unfailed messages
  => Database was full, waiting to post
  => Posting database full
Focus state changed, rebuilding unread message count
Resetting _cachedUnreadMessageCount because _updateModificationDate
Updating cache for message guid: %@ calculateUnreadCount %@
  **** Updating this chat!
Storing Aux image transfer %@
_storeAttachmentsForMessage did not find Aux video transfer %@
Updating transfer: %@
Posting resulting transfer to clients; %@
Not storing: %@
Stored item to database: %@:%@
SyndicationActions
Updated syndication ranges with SyndicationAction %@. newRange: %@
Did NOT update IMMessageItem's syndication ranges for SyndicationAction %@
Message not found for syndication action for guid: %@
Updated syndication ranges for message item with guid %@. newRange: %@
Did not updated syndication ranges for message item with guid %@. newRange: %@
Updating syndication ranges for message item with guid %@. newRange: %@
Database
Stored message: %@
Updated from %@->%@  on service: %@
IMDMessageRecordCopyMessagesForAssociatedGUID resulted in a non-associated message item: %@
************* Please file a radar!!!!!!!!!!! *******************************
A message returned by IMDMessageRecordCopyMessagesForAssociatedGUID is associated to %@ instead of the requested GUID %@.
GUID we got from IMDMessageRecordCopyMessagesForGUIDs wasn't one of the guids we requested. IMItem we got back was: %@, IMDMessageRecordRef guid we got was: %@, requested guids was: %@
history query
Requesting history with guid: %@ handles: %@ services: %@ limit: %llu thread identifier: %@ only messages: %@
generate chat items
IMTiming
history query timing: %@
_messagesWithRoomNames: %@ onServices %@ limit %d recordStoreRecords: %@
paged history query
Requesting history with guid: %@ handles: %@ services: %@ number before: %llu number after: %llu thread identifier: %@
_limitedNumberOfMessagesWithHandles: %@ services: %@ messageGUID: %@ numberOfMessagesBefore: %d, numberOfMessagesAfter: %d record count: %d
paged history query timing: %@
_unreadMessagesWithHandles: %@ onServices %@ limit %d recordStoreRecords: %@
_unreadMessagesWithRoomNames: %@ onServices %@ limit %d fallbackGUID %@ recordStoreRecords: %@
Ensure transfers(count=%lu) with GUIDs registered: %@ for message: %@
Existing transfer: %lu/%lu %@
Found saved transfer from DB: %@
New transfer: %@
Not registering %lu/%lu transfers, too many for one message
Should load attachments for associated messages %@
Found messages with associated guids: %@  (%@)
Found messages with guids: %@  (%@)
Have stored message for guid (%@): %@
Fetched item from database for guid (%@): %@
Stored message for guid (%@): %@
Found existing message: %@ similar to: %@   (Skip Services: %@   Skip GUIDs: %@   Within Time Interval: %f)
No existing message similar to: %@   (Skip Services: %@   Skip GUIDs: %@   Within Time Interval: %f)
Stored message for replace ID (%d): %@
Found %d messages with handles: %@ on services: %@  limit: %d
Found %d messages with room names: %@ on services: %@  limit: %d
messagesWithHandlesBeforeAndAfterGUID found %d messages for number of ids: %d on number of services: %d numberOfMessagesBefore: %d numberOfMessagesAfter: %d
Found last message: %@ with handles: %@ on services: %@
Found %d messages with handle: %@ on service: %@  limit: %d
Found last message: %@ with room names: %@ on services: %@
v16@?0@"IMDMessageRecord"8
%K = %lld
Found %d filenames with handles: %@ on services: %@
Found %d filenames with room names: %@ on services: %@ 
Found %d message action items for original message guid: %@
MessageStore
Adding message GUID to readReceiptsForMissingMessage cache: %@ (size: %lu)
Found chat guids: %@ for message guid: %@
Couldn't find existing chat with guid: %@ in IMDChatRegistry for messageGUID: %@
   Found Chats: %@
Found chat guids: %@ for message identifier: %lld
Couldn't find existing chat with guid: %@ in IMDChatRegistry for messageIdentifier: %lld
PNIsValidPhoneNumberForCountry
CorePhoneNumbers
Cleaning up symbols from unformatted phone number %@ based on phoneNumberIsValid %d and phoneNumberIsShortCode %d
Canonicalized handle (%@) and unformatted handle (%@) were not equal - TU canonical: (%@) TU unformatted: (%@)
Deleted %d messages with guids: %@ in chat: %@
Deleted %d messages with guids: %@
Deleting batch %d of messages for chatIdentifiers %@ onServices %@. %d messages will be deleted.
deleteMessageswithChatIdentifiers: %@ onServices: %@
Found %d messages to delete
Deleted %d messages with replace ID: %d from handle: %@ on service: %@
Attempted to mark a message as unread that wasn't the last message: %@
Marked %@ as unread
Marked %d messages as read with handles: %@ on service: %@  from me: %@
Marked %d messages as read with chat guid: %@ from me: %@
Returning _cachedUnreadMessageCount %@
Computed _cachedUnreadMessageCount %@
Determined unread badge count is %ld for active focus, totalUnreadCount: %ld
Attachment %@ orphaned: not in message(nil:%@), bundle %@
Attachment %@ orphaned: not in group action type %lu
Attachment %@ orphaned: not in item type %lu
Attachment %@ orphaned: mssage %@ not found
suppress DB update timer fired
setSuppressDatabaseUpdates called with suppressUpdates %d 
Scheduling a suppress DB invalidation timer
Going to retract user notifications for read messages
Posting urgent notifications for messages
Updating posted notifications for messages: %@
Going to post user notifications
Rebuilding lastFailedMessageDateChanged with new value: %lld 
Suppressed: Rebuilding lastFailedMessageDateChanged with new value: %lld 
Rebuilding/Broadcasting unreadCountChanged with new value: %lld 
Suppressed: Rebuilding/Broadcasting unreadCountChanged with new value: %lld 
Broadcasting unreadCountChanged with new value: %lld 
Broadcasting lastFailedMessageDateChanged with new value: %lld 
Suppressed: Broadcasting unreadCountChanged with new value: %lld 
Suppressed: Broadcasting lastFailedMessageDateChanged with new value: %lld 
/Library/Caches/com.apple.xbs/Sources/MessagesCore_Sim/IMCore/IMDaemonCore/IMDMessageStore.m
-[IMDMessageStore replaceMessageAcknowledgmentsWithNewMessageAcknowledgment:associatedMessageGUID:sender:]
Unexpected nil '%@' in %s at %s:%d. %@
newGUID
ASSERTION FAILED: %@
associatedMessageGUID
Deleting previous acknowledgments failed with error: %@
v40@?0@"NSString"8{_NSRange=QQ}16^B32
Applying edits to the content of message: %@
Edited message does not contain file transfer guid: %@
Message already had originalTextRangesByPartIndex, messages is being edited for a second (or more) time. Not overriding original values.
Message no longer contains any parts, all parts have been retracted, marking message as read
Message is fully retracted, deleting payload data
We retracted the payload data on a message that had no body and was a payload only. Inserting a retraction stamp at index 0.
p:%ld/%@
Found %ld associated message items for retracted message part %ld in edited message %@
Associated message item %@ refers to messagePartGUID %@ that was retracted. Deleting the associated message item.
v24@?0Q8^B16
Deleting associated message GUIDs: %@
B16@?0@"IMItem"8
Breadcrumbs
Observed more than one unconsumed breadcrumb: %@ for '%@' session %@
B16@?0@"IMAssociatedMessageItem"8
History query found breadcrumb %@ with payload history: %tu items.
IMDMessageStore
************* We hit max number of attempts to load dirty messages. Bailing for now
load messages needing CK sync with limit %ld, attemptCount %lu
**** Marking message with rowID %lld as clean ***
**** We had corrupt messages amongst dirty messages. Trying to load messages again. numberOfAttempts %lu
loaded %lu messages needing CK sync with limit, messages %@
************* We hit max number of attempts to load dirty messages needing a T1 update. Bailing for now
load messages needing CK update T1 with limit %ld, attemptCount %lu
************* We hit max number of attempts to load dirty messages needing a T2 update. Bailing for now
load messages needing CK update T2 with limit %ld, attemptCount %lu
Clearing tombstone message table
SMS_FULL_WARNING
DISMISS
__kIMDMessageStoreHandleUnformattedIDKey
__kIMDMessageStoreHandleCanonicalIDKey
__kIMDMessageStoreHandleCountryCodeKey
@"IMDAccount"32@?0@"NSString"8@"NSString"16@"NSString"24
Built IMItem: %@    from IMDMessageRecordRef: %@
 => Not storing item, service: %@  does not support a database
 => Not storing message, service: %@  does not support a database
com.apple.imagent.SyndicationLibraryChangeObserver
IMDPhotosSyndicationLibraryChangeListener
Started listening for changes to the syndication library. syndicationLibrary: %@
Stopped listening to changes to the syndication library. syndicationLibrary: %@
creationDate
Syndication library changed. Ingesting new analysis data. change: %@
Total change count: %lu.
Asset at index %lu had changes! syndicationIdentifier: %@
Ingesting new analysis data. transfer %@, asset: %@
A syndication library change was received for a particular asset, but a corresponding file transfer was not found using the asset's syndicationIdentifier. syndicationIdentifier: %@, asset: %@
EngroupCreationDateKey
wasDetectedAsSMSSpam
SMSCategory
SMSSubCategory
wasDetectedAsiMessageSpam
shouldForceToSMS
smsSpamExtensionName
numberOfTimesRespondedtoThread
LSMD
RBHE
smsHandshakeState
messageHandshakeState
restoredFromBlackhole
GPUFC
__kIMChatPreviouslyBlackholedChatHasBeenLoaded
__kIMDChatParticipantsDidChangeNotification
__kIMDChatParticipantsDidChangeAddedParticipantsKey
__kIMDChatParticipantsDidChangeRemovedParticipantsKey
Attempting to init chat with zero length chat identifier, guid: %@
Attempting to init chat with invalid guid %@
%s (%@)
-[IMDChat initWithAccountID:service:guid:groupID:chatIdentifier:participants:roomName:displayName:lastAddressedLocalHandle:lastAddressedSIMID:properties:state:style:isFiltered:hasHadSuccessfulQuery:engramID:serverChangeToken:cloudKitSyncState:originalGroupID:lastReadMessageTimeStamp:lastMessageTimeStampOnLoad:cloudKitRecordID:isBlackholed:autoDonationBehavior:autoDonationBehaviorLastModificationDate:]
Created chat: %@
-[IMDChat dealloc]
Dealloc chat: %@
chatIdentifier
serviceName
roomName
displayName
Updating chatInfo with autoDonationBehavior: %ld
IMDChat
engramID
serverChangeToken
cloudKitSyncState
originalGroupID
lastReadMessageTimeStamp
lastTUConversationCreatedDate
lastAddressedLocalHandle
lastAddressedSIMID
properties
style
state
unreadCount
isBlackholed
isFiltered
hasHadSuccessfulQuery
lastMessageTimeStampOnLoad
participants
Chat: %@  Adding participants: %@
Trying to add participants: %@ to 1:1 chat :%@
Chat: %@  Removing participants: %@
Trying to remove participant from a group chat with 2 or less participants %@
Chat: %@  Resetting to participants: %@
1:1 chat was missing participant, re-added %@ to %@
Cannot recover participant due to empty chatIdentifier for chat: %@
Reassociating chat: %@  to account: %@
IMDChat: %p GUID: %@ Style: %c State: %d Participants: %@  Room Name: %@  Display Name: %@  Identifier: %@  Unread count: %d  Row ID: %lld  Group ID: %@, originalGroupID: %@ lastAddressedHandle: %@ lastAddressedSIMID: %@ isFiltered: %d, hasHadSuccessfulQuery: %@, Engram ID: %@, serverChangeToken:%@, cKSate:%@ lastReadTime:%@ engroupCreationDate: %@ %@ cloudKitRecordID, isBlackholed: %@ groupPhotoGuid: %@
lastMessage
pcmid
Chat: %@   Updating last message: %@
Chat: %@   Property update: %@
     Resulting properties: %@
     => Saving changes
ChatRegistry
   Generating group ID for chat: %@    groupID: %@
   Generating group ID for chat: %@    groupID: %@  using IDs = %@
Updating lastReadMessaeTimeStamp from: %@ to: %@ for chat: %@
Updating record change tag (etag) from: %@ to: %@ for chat: %@
Updating ck record ID from: %@ to: %@ for chat: %@
resetting CK Sync state
Updating last addressed handle ID from %@ to %@. force update %@
Updating last addressed sim ID from %@ to %@
Updating isFiltered to: %d
Request
Failed to find messageGUID for spotlight reindexing when isBlackholed set to (expecting 0): %d
Checking if last seen message guid needs updating, old %@ new %@
Trying to persist legacy mergedID-based merged chats - 48047873
For handle [%@] we found another handle [%@] with contactID [%@] that has the same mergedID: [%@]
handle [%@] gets a mergedContactID: [%@]
handle [%@] doesn't have mergedID siblings
invalidHandle
%@:%@
<IMDChat %p _ckUniqueID %@, ckSyncState %ld recordChangeTag %@>
Loaded message profile: %@
msgNicknames
The meCard has been edited
com.apple.private.Messages.IMDCKRecordSaltManager
IMDCKRecordSaltManager
Starting salt fetch on internal queue
*** Error fetching user ID %@
Cached salt : %@
** Fetched salt was 0 length **
v24@?0@"CKRecordID"8@"NSError"16
CloudKit Salt not fetched: syncing enabled %@ first unlock %@
Request to fetch salt
Fetched salt %@
__kIMDChatsLoadedNotification
__kIMDChatRegistryAddedChatNotification
__kIMDChatRegistryChatKey
Received first unlock merge complete notification, re-syncing chats
Resetting LastBulletinboardPostedMessageRowID: %lld
LastBulletinboardPostedMessageRowID
Not Resetting LastBulletinboardPostedMessageRowID: %lld
v20@?0i8Q12
Received merge complete notification, re-syncing chats
com.apple.imdpersistenceagent.notification.mergecompleted
com.apple.imdpersistenceagent.notification.switchcompleted
com.apple.automatichistorydeletion.deleted
Deleted history automatically, re-syncing chats
com.apple.imdpersistenceagent.notification.lastaddressedidsmodified
Last addressed handle/simIDs of chats got modified, force reloading chats
B16@?0@"IMDChat"8
Found existing chat: %@
Created chat: %@ lastAddressedHandle %@
B16@?0@"NSString"8
Cache miss for chat with guid: %@ result: %@
Cache miss for chats with group ID: %@ result: %@
Cache miss for chat with identifier: %@ account: %@ result: %@
Cache miss for chats with ID: %@ account: %@ result: %@
Cache miss for chat with roomname: %@ account: %@ result: %@
@16@?0@"IMDHandle"8
 ==> ERROR sanity check failed: ChatRegistry returned chat that did not match inputs: %@
 ==> Ignoring %@, has incorrect service: %@
 ==> Found exact match based on groupID and participants: %@
 ==> Found a newer chat based on groupID: %@
 ==> Skipping chat with display name of %@, requested display name was zero length, chat: %@
 ==> Found a newer chat based on participants and display name: %@
 ==> Migrating siblings to new groupID if needed: %@
 ==> Updating chat (%@) group ID from %@ => %@
@16@?0@"NSString"8
Finding best candidate group chat with toIdentifier: %@ fromIdentifier: %@ displayName: %@ partipciants: %@ groupID: %@
 ==> Looking up with groupID %@
 ==> groupID lookup failed, falling back to display name: %@ participants: %@
 ==> Found matching chat: %@
 Hint message for last message was older than the current last message: %@, current: %@
 Querying db for last message: %@
 => Using last message: %@ for chat: %@
 Updating unread count for chat: %@ to: %d
Updating the unread count on chat: %@
Forcing unread count to zero on chat: %@
We believe the failed message might have changed, lets rebuild with fromMessage: %@
    => toMessage: %@
Updating groupID from (%@) to (%@) for chat %@
Spam
Handling request (autoReport %@) to mark IDs (%@) for services (%@) as spam for chatGUID (%@)
max-spam-messages-per-report
max-spam-message-size
Server Bag has no value for max-spam-message-size, using the default 50
Server Bag has no value for max-spam-messages-per-report, using the default 2
Marked %lu messages as spam
Reporting message: %@
Chat %@ did not have final message, loaded %@
Adding cache missed chat but existing chat found with GUID %@, preferring existing chat
Adding cache missed chat, no existing chat found with GUID %@
@16@?0@"IMDChat"8
Adding cache missed chat with GUID %@, not preferring existing chats
Registering chat: %@
@"NSString"16@?0@"IMDHandle"8
IMDChatRegistry
Adding handle %@ handleCNID  %@ to chat %@
Evicting chat: %@
Unregistering chat: %@
Deleting chat: %@
CloudKit syncing is on. Writing deleted chat to deleted sync table
%s: item: %@ chat: %@
-[IMDChatRegistry addItem:toChat:]
%s: message: %@ chat: %@
-[IMDChatRegistry addMessage:toChat:deferSpotlightIndexing:]
******* Not storing message %@ to chat %@
******* IMDMessageStore cannot store message %@ to chat %@
Storing SMS chat %@ old display name %@, old group ID %@ new display name %@, new group ID %@
Found SMS chat with different participants than its iMessage sibling. Chat: %@. Updating participants using %@
Attempting to fix up chat participants if needed
*********** Caught exception while fixing up chat participants on client connection %@ **********
Could not retrieve chats in range (%ld,%ld) as there are not that many, so retrieving all chats, range (%ld,%ld).
Retrieving %ld most recent chats out of %ld chats
********* Calling setInitialLoadForTesting in non unit tests is not supported ***** 
com.apple.IMDaemonCore.unsupportedAction
Would have ignored reload of chats but has zero chats, forcing reload
Forcing reload of chats _isLoading: %d _doneLoadingAfterMerge: %d forced: %d
Dropping all chats in registry
Updating database clients
Posting the update chat registry to all listeners
=> Done notifying clients
NOT forcing reload of chats _isLoading: %d _doneLoadingAfterMerge: %d forced: %d
Received request to wait for chats to be loaded
Setting up observer for loaded notification...
Notified that chats were loaded
Chats are done loading! Calling completionHandler
Chats aren't done loading, this is likely because of first unlock. Continuing to wait
v16@?0@"NSNotification"8
Loading Chats... (Chat Caching: %@)
DidRegenerateGroupID63841559
Should fix unnamed groupID: %@
 Found %d chats
No service found, looking at name: %@
No service found for name: %@: removing this chat [%@]
No account: removing this chat [%@]
/Library/Caches/com.apple.xbs/Sources/MessagesCore_Sim/IMCore/IMDaemonCore/IMDChatRegistry.m
-[IMDChatRegistry loadChatsWithCompletionBlock:]
generatedGroupID
Unnamed group with non UUID style groupID, lets fix this chat: %@
    New groupID: %@
=> Done Loading %d Chats
Caught exception %@ while merging forks
Merge fork
Not merging forks before first unlock
try to persist mergeID merged chats for [%lu] handles
Will not add malformed IMHandle:%@ to IMDHandleRegistry
Unable to add IMDHandle to _idToHandlesMap due to exception %@ -- nilling idToHandlesMap
Removing IMDHandle:%@ from IMDHandleRegistry
Device left first unlock, re-syncing chats
calling update routing, expire and watch dog after first unlock
Done fetching latest salt after unlock
Performing one time account check after upgrade
systemDidUnlock
DidMakeAllAttachmentsClassC
Making all attachments class C
/var/mobile/Library/SMS/Attachments
ForkMerge
did not find winner %@ in list of duplicates %@
Finding group chats
Found %ld duplicate chats needing merging: %@
winningChat unexpectedly nil
losingChats is unexpectedly nil
found winning chat %@, and losing chats %@, in list of chat duplicates: %@
will merge losing chats %@ into winning chat id %@
repairing duplicate chats failed: %@
merged losing chats %@ into winning chat id %@
Deleted unwanted chat %@
finished merging %ld duplicate chats
No duplicate chats found to merge
-[IMDChatRegistry repairDuplicateChatsIfNeeded]
Unexepectedly true '%@' in %s at %s:%d. %@
_isLoading
DidCheckForDuplicateChats
will check for duplicate chats after checking pref key %@:merged-duplicate-chats
Set pref for duplicate check (%@:merged-duplicate-chats) to YES
Finished repairing duplicate chats in %f seconds
Will NOT check for duplicate chats after checking pref key %@:merged-duplicate-chats
DidMarkGroupPhotosAsUnpurgeable
NOT Using person centric grouped chats cache
Using person centric grouped chats cache
Truncating person centric grouped chats to %ld chats.
q24@?0@"NSArray"8@"NSArray"16
mergedPinningIdentifiers
Number of person centric chats created to send to client %@
Group photo inconsistency detected among merged chats. Attempting to repair
    Chat %@ has groupPhotoGuid %@
Could not find file transfer matching group photo guid: %@
Have file transfer matching groupPhotoGuid: %@. FileTransfer: %@
Accepting groupPhotoGuid %@ as the initial preferred group photo.
Preferring %@ over %@ because the creation date is newer.
Not preferring %@ over %@ because the creation date is older.
Not preferring %@ because it does not have a creation date
The preferred groupPhotoGuid is %@. Transfer: %@
Applying groupPhotoGuid %@ to chat %@ which previously had groupPhotoGuid %@
Chat %@ already had groupPhotoGuid %@, leaving as is.
Completed repair of group photo inconsistency.
Could not determine a preferred group photo among inconsistent merged chats. Leaving inconsistency as is.
(%K = %@ OR %K = %@) AND %K != %d
%@: Chat's _ckUniqueID is nil: %@
We already have a chat to upload for groupID: %@ so we need to compare last message time's
The current chat we have stored has a last message that is later than it's sibling so we don't want to write it to CloudKit and want to replace it with it's sibling. Current GUID: %@ Sibling GUID: %@
We are going to replace the current chat: %@ with: %@ so we should mark it as modified so we don't modify it twice
v24@?0@"IMDChat"8^B16
Got %llu chats to upload
Chat is not SMS or iMessage -- so no need to sync to cloudkit: %@
The current chat we have stored has a last message that is later than it's sibling so we don't want to write it to CloudKit and want to replace it with it's sibling. Current Guid: %@ Sibling GUID: %@
IMChatRegistry
Did not find chat for GUID %@
Searching for the newest chat with OriginalGroupID:%@ on service:%@
Found newer chat match for Original Group ID: %@
Searching for the newest chat with groupID: %@ service: %@
Found newer chat match for groupID: %@
Looking for chat for CKRecord with GUID: %@
Looking for chat for CKRecord with originalGroupID: %@ service: %@
Failed to find group chat with originalGroupID as regular groupID (%@) in %llu chats, trying with client groupID (%@)
Failed to find group chat with current group ID, trying with originalGroupID (%@) as groupID
Found existing chat for CKRecord: %@
No existing chat with originalGroupID (%@) found, checking client groupID (%@)
IMDChatRegistry: Found an existing chat that's not in the registry. This is likely because the registry failed it's chat load. OriginalGroupID:%@ Chat:%@
TriedToInsertDuplicateChat
Won't _ensureNoExistingGroupForCKRecord style:%hhu, originalGroupID:%@ service:%@
Found groupd_id fork for chat while applying changes from cloudKit %@
Marking fork as clean %@
Found original_groupd_id fork for chat while applying changes from cloudKit %@
Chat already exists: %@ to apply changes to
Creating new chat %@ with record %@
Marking existing chat %@ as deferred
%K = %d
Marking existing chat %@ as needing sync from deferred state 
Trying to remove chat with nil groupID: %@
Setting sort id %@ for message %@ on chat %@ synced from CloudKit
Found item that is incompatible with the current device version: %@
Message %@ is an ignorable backward compatibility message, ignoring.
Found GUID for attachment part, associating with attachment: %@ at part id %lu
v24@?0@"NSString"8Q16
Updated msg %@ to have CKSyncState %@ stored message: %@
UpdateSyncT1 relating msgID %@ to thread %@ (threadGuid %@ threadPart %@)
ThreadIdentifier update rejected, thread identifier already populated as %@, update would be %@
Update record for non-message type, ignoring
Ignoring update T1 message: could not find message for id %@ (maybe it hasn't synced or has been deleted?)
Ignoring update message T1: no message ID or thread ID %@
Ignoring message update %@, unrecognized update type
Failed to handle conflict for unknown update type %@, rowID %lu
Can't apply updated syndication ranges for %@, message not found!
Applied updated syndicationRanges to %@, was newer data? %@)
Can't apply updated syndication ranges for %@, invalid message type for item %@
Clearing pending chat delete table
Found iMessage chat %@ for chatID %@ style %@
Did not find iMessage chat for ID %@ and style %@
No handles or servicename to receive a message from: {handles: %@ serviceName: %@}
No session for serviceName %@ -- can't simulate receive
Invalidating person centric grouped chats cache
ContactStore history token updated.
Not updating the ContactStore history token with %@
All handles and CachedAliasToCNIDMap
iMessage;-;%@
SMS;-;%@
UnnamedGroupChats
NamedGroupChats
Contacts based merging is disabled.
Contacts changed notification %@ 
v24@?0@"NSMutableArray"8@"NSArray"16
Computed chats to merge. Broadcasting to clients
No chats to merge/un-merge. NOT Broadcasting to clients
aliasMap
historyToken
v16@?0@"NSDictionary"8
# chats that need update after contacts changed notification %@
No CNContact for alias %@
IMDChatRegistry_Nickname
Clean up nickname for alias %@
Hawking: New contact (%@) added, removing chat (%@) from blackhole.
Chat %@ needs to be merged / un-merged & updated in spotlight
No of entries in chat dictionary %@
Update MeCard for all IMDChats
IMDCKDatabaseManager
**** Initializing dev container with ID %@
com.apple.messages.cloud
Initializing production container %@
Manatee container %@
use-old-nickname-container
Server says to use new container? %@ {serverbagValue: %@ version: %@}
com.apple.internal.messages.memoji
com.apple.messages.profiles
**** Initializing dev nick name container with ID %@
Using Manatee Container
Nicknames NOT enabled, returning nil public database
%@/%@
/var/mobile/Library/SMS/CloudKitMockStore/
IMDCKMockRecordZone
Mock Handle operation %@ identifier %@
Adding random delay of %@ seconds
Failed to unarchive mock ck record data. Error: %@
ID %@ MOCK Handling fetchRecordZoneChangesOperation
%@ Error reading from MOCK store %@ 
About to give back %@ records moreComing %@ fetchAllChanges %@
%@ Error deleting from MOCK store %@ 
Introducing random error %@
%s: Unable to archive record %@, error %@
-[IMDCKMockRecordZone _serializedCKRecordData:]
ID %@ MOCK Handling modifyRecordsOperation
Error persisting record %@ error %@
Successfully persisted record %@ 
com.apple.private.Messages.IMDCKRampManager
metadata_zone
metadata_rampstate_v2
IMDCKRampManager
Starting ramp state fetch on internal queue
FeatureAllowed
FeaturePromoted
FeatureVisible
RetryAfter
Sending request as priority
RampPriority
Not a priority ramp request
Ramp operation %@ Desired keys %@
Fetch operation records %@ fetchError %@
Fetch ramp state - featureAllowed %@, featurePromoted: %@, featureVisible: %@, retryAfter: %ld
Couldn't find CKRecord for ramp. Defaulting to not ramped in
FetchRampState
Attempting to fetch ramp state from CloudKit with operation %@
Writing cachedRampState featureAllowed(%@) featurePromoted(%@) featureVisible(%@) fetchHadServerError(%@)
scheduling new timer with retryAfter %f
retry timer fired
Not setting up new retryAfter, last one is firing at %@
Not Requesting ramp state. Is under first unlock.
Request to fetch ramp state
Cached featureAllowed and featurePromoted are true and there wasn't an error fetching state from the server last time. Not fetching again
calling recordFetchedCompletionBlock
Not fetching from server, next one is firing at %@
Cached values: featureAllowed(%@) featurePromoted(%@). Something is not YES, or we had a server error last time(%@) so fetching from server
Fetched ramp record
Scheduling retry: %@
v36@?0B8B12B16q20@"NSError"28
v24@?0B8B12B16B20
RampStateOverride
Defaults override, returning YES
cachedRampState featureAllowed(%@) featurePromoted(%@) featureVisible(%@) fetchHadServerError(%@)
Setting.
Not enough time passed since last jettison
Max number of failure occurrences exceeded
Max time since failure occurrence exceeded
Max time or occurrences not yet met
Context has expired
IMDInconsistency
Setting inconsistency handler
Noticed inconsistency at context %@ (count = %llu)
Resolving inconsistency at context %@
LastJettisonTimeInterval
Finished initialization, last jettison was %@
v32@?0@"IMDInconsistency"8Q16^B24
Enabling timer, since we have inconsistencies we need to check up on
Disabling timer, all inconsistencies resolved
Checking our inconsistencies to see if it's time to jettison state
Too many inconsistencies found in imagent, jettisoning state and starting over (reason: %@)
Inconsistencies aren't bad enough to merit a jettison (reasons: %@)
Removing expired inconsistencies: %@
Unable to create IMFileTransfer from NULL IMDAttachmentRecordRef.
This transfer doesn't have a guid, returning nil.
Exception raised while attempting to create IMFileTransfer: %@
Created: %@ from attachment record: %@
Unable to create IMDAttachmentRecordRef from nil IMFileTransfer.
Local path: %@, filename: %@
v32@?0@"NSString"8@"NSString"16@"NSString"24
Persisting transfer failed.
Not creating entry in DB for Aux video transfer %@
IMFileTransfer
 ** Error creating video complement for file transfer: %@ imageTransfer: %@
Created: %@ from imfiletransfer: %@
Updating %@ from %@
 Storing transfer at path: %@
 File eligible for purging: %@
 File NOT eligible for purging: %@, updatedPurgeableState: %@
 ** Not storing transfer
Unable to find an attachment record for guid: %@.
We are downgrading an attachment from finished to waiting accept --> so we've deleted the path on disk and should not store the attachment
Request to store transfer: %@
  => Updating existing : %@
  => Created new : %@
  ** Associated transfer GUID %@ with message GUID: %@
Over ridiing return val in storeAttachment for Aux transfer %@
Request to unassociate transfer: %@ from message guid: %@
Request to update transfer: %@
  => Updating existing: %@ with: %@
  => Found no transfer, storing instead
Not marking path as eligible for cachedelete, cloudkit syncing is not on
Not marking attachment path for cachedelete, last component is Attachments
GroupPhotoImage
Not marking path as eligible for cachedelete, last path component matches group photo file name. path: %@
Not marking attachment path for cachedelete, not in attachment store: %@
pluginpayload
pluginpayloadattachment
Not marking path as eligible for cachedelete, file extension is a plugin payload. path: %@
Not marking path as eligible for cachedelete, file extension is an audio message. path: %@
No attachment path to mark as purgable
Found aux video path: %@
EnableCacheDeleteTTR
File a Radar
Messages Storage Management
An attachment was unexpectedly marked as not purgeable.
Presenting CacheDelete TTR UI
TTR:%@ Messages storage issue: %@
A Messages attachment was unexpectedly removed from purgable state %@.
Serious Bug
I Didn't Try
450305
tap-to-radar://new?Title=%@&Description=%@&Classification=%@&Reproducibility=%@&ComponentID=%@&ComponentName=%@&ComponentVersion=%@&AutoDiagnostics=phone
Request for attachment with guid: %@
Request for attachments with guids: %@
Request for attachment with attachmentRecord: %@
updateLegacyTransferGUID failed to get a matching record
updateLegacyTransferGUIDOnMessageIfNeeded got something thats not a IMMessageItem: %@
Re-targeting transfer GUID at part %lu to %@
_updateAttachmentGUID completed with success %@
We are updating the in-memory transfer's guid that we will sync to CloudKit in-memory transfer: %@ partKey %lu newGUID: %@
Couldn't find guid %@ in list of fileTransferGUIDs to update; aborting. Body part (id %lu) contains reference to attachment not in DB, and we've updated the transfer to reflect.
Got null attachment record for %@
Re-targeting transfer GUID at index %d to %@
We are updating the in-memory transfer's guid that we will sync to CloudKit in-memory transfer: %@ index %lu newGUID: %@
Couldn't find guid %@ in list of fileTransferGUIDs to update; aborting. List of FileTransferGUIDs (id %d) contains reference to attachment not in DB, and we've updated the transfer to reflect.
We may have failed to update a message (guid %@) in the DB, and orphaned its attachments whose GUIDs we just updated %@
Message body attachment attributes update %@!
succeeded
FAILED (maybe)
Finished reindexing %@
Deleting attachments, guids %@
Failed to delete attachments
Request to delete attachments with guids: %@
deleteAttachmentsWithGUIDs failed to get a matching message record
Found corresponding IMMessageItem for legacy GUID %@
Deleting attachments with guids from spotlight: %@
Request to delete attachment with nil guid
Request to check if the attachment path is safe: %@
Transfer is group photo? %@ transfer: %@
(%lu,%lu,%lu)
syncState
v32@?0@"NSNumber"8@"NSArray"16^B24
com.apple.sms
IMDChatStore-Schema
Archiving chat: %@
No chat record found to archive for chat: %@
Unarchiving chat: %@
No chat record found to unarchive for chat: %@
Blackholing chat: %@
Unblackholing chat: %@
Transfer already exists in transfer center. not overwriting. Transfer: %@
Adding group photo to IMDFileTransferCenter for guid: %@.
Group file transfer is nil for guid: %@. Not adding anything to file transfers.
loadAllChatsForChatStore
v16@?0^{_IMDChatRecordStruct={__CFRuntimeBase=QAQ}q^{__CFArray}^{__CFArray}q^{_IMDMessageRecordStruct}q}8
RecentChatsToLoad
RecentFilteredChatsToLoad
Loading recent chats (budget %lld for known senders, %lld for other filters)
v32@?0@"IMDChat"8Q16^B24
Loading all chats took %f seconds for %lu chats
No incoming chat record.
No incoming chat records.
Tried to load chat for unsupported service (%@): %@
Lookup failed, NIL or empty message GUID.
Couldn't find chat for message guid: %@
Couldn't find message for guid: %@
Couldn't find chat for message identifier: %lld
Association failed, NIL or empty message GUID.
Association failed, NIL or empty chat GUID.
Associating message guid: %@ to chat: %@
Not indexing message:%@ with CoreSpotlight
Disassociation failed, NIL or empty message GUID.
Disassociation failed, NIL or empty chat GUID.
-[IMDChatStore deleteChat:]
Setting chat isFiltered failed, nil chat guid
MergeIT
Not persisting merge id due to override
Updating handle(%@) from:%@ to:%@
Writing to DB
Done
Location
Going to add location item: %@ to the corresponding chats with handleID: %@ hasStoredItem: %@ broadcastChanges: %@
Not sharing location group chat %@
Not sharing location with non-iMessage chat %@
Found matching participant: %@<=>%@ in chat: %@
Storing item: %@
Associating item: %@ to chat: %@
No matching chat found, ignoring
/var/mobile/Library/SMS/CloudKitMetaData/MessageSyncZoneMetaData.db
/var/mobile/Library/SMS/CloudKitMetaData/MessageSyncArchivedRecordMetaData.db
com.apple.private.IMDCKMessageSyncController
ck-max-number-of-message-batches
 overriding max number of message batches to fetch %@
**** Message %lu CKRecord size exceeds max limit.
**** We hit max number of attempts to creat CKRecords
**** Message [%@] could not be converted to CKRecord, marking it as clean and moving on.
**** Message %@ is too big. Marking it as clean and moving on
We had invalid records attempting to load records again. Attempt count %lu
Error creating message zone %@
***** Timed out creating message zone *******
Wrote message with GUID %@, error %@, recordName:%@
Encountered an unknown error.  We'll try syncing this message again on the next sync. Error code: %llu
Modify message had conflicts or the zone was not found, so treating this as a non error case
_processModifyRecordsCompletion error %@
Kicking off another batch of message writes to cloudKit
We completed writing messages. isLastBatch %@, write error %@, writeSuccess %@
PeriodicMessageSync
BackFillMessageSync
Got %@ records to sync, filtered to %@ unique records
**** We completed writing up messages. No more messages to write up. ***
Number of messages to upload %lu < max batch size. %lu 
**** This is the last batch of messages we will write
Did not schedule a write. Device Conditions suitable to write:%@
Fetched message record with GUID %@
Found parentChatID: %@, updatedLastMessageCount: %d
This is a coreduet sync at currentBatchCount %@, coreduet says to defer syncing
This is a coreduet sync at currentBatchCount %@, coreduet says to continue syncing
Message sync: device conditions allow sync: %@ deviceConditionsToCheck %@ currentBatchCount %@
Message sync: Not checking device conditions for full sync at current batch count %@ isCoreDuetSync %@
Message sync: Not checking device conditions for initial sync at current batchCount %@
Message sync: Stop syncing, feature enabled %@ hasMatchingAccounts %@.
archivedMessagesChangeToken
messagesChangeToken
Resetting the archived message sync token to nil
Resetting the message sync token to nil
processArchivedRecordsFetchCompletionZoneID serverChangeToken %@ moreComing %@ recordZoneError %@
There are more changes to fetch from archived zone. Kicking off another batch of fetching
No more archived records to fetch. Resetting defaults to fetch archived records
Record Zone Error says that the change token has expired
//---** Error fetching archived messages: %@
****** We are done fetching archived messages as max batch attempt limit reached ********
Fetching archived currentBatchCount %@ maxNumberOfBatches %@
******** Fetching archived records ***** sync token is %@
Fetch archived record %@ guid %@
v24@?0@"CKRecordZoneID"8@"CKServerChangeToken"16
** THIS SHOULD NOT GET CALLED WHILE FETCHING ARCHIVED RECORDS **
v36@?0@"CKRecordZoneID"8@"CKServerChangeToken"16B24@"NSError"28
Did not fetch archived records from message zone as device condition does not allow sync
Did not fetch archived records from message zone as no archived hint present
*** Encountered error while fetching archived records %@
*** Did not encounter error while fetching archived records
recordZoneFetchCompletionBlock serverChangeToken %@ moreComing %@ recordZoneError %@ archivedRecordsHintIsPresent %@, currentBatchCount %@ maxNumberOfBatches:%@
Setting shouldFetchArchivedRecords to true
There are more changes to fetch. Kicking off another batch of fetching
Done fetching changes from message zone.
Done fetching changes from message zone during an initial sync. Let's not write up
Done fetching live records. Will now fetch archived records
We got a %@ error while fetching messages. %@
Resetting local message sync state & last sync date after received user deleted zone error
Messages zone does not exist. Attempting to create one
//---** Error creating  messages zone
//---** Error fetching messages: %@
Failed fetching messages %@
_processFetchRecordZoneChangesCompletionWithError with no error
****** We are done fetching live messages as max batch attempt limit reached ********
shouldForceArchivedMessagesSync is YES, fetched max live record batches but will also fetch initial sync archived records if needed: %@
Since we fetched max live batch records, we will not fetch archived records
We completed fetching %@ batches of messages during a full sync, setting fullPartialSyncFirstCompletedDate to %@
Fetching live messages, currentBatchCount %@ maxNumberOfBatches %@
***recordZoneChangeTokensUpdatedBlock should not get called
*** Deleted recordID %@ type %@
Scheduling a fetch operation from message zone, using token %@
Did not fetch changes from message zone. Device condition allows sync %@. Disk Space Available %@
Need to kick off a sync of deletes because we had an incompatible message earlier.
Finished a sync of deletes because we had an incompatible message earlier (%@): %@
Mark all incompatible messages for deletion from cloudkit
_shouldMarkAllMessagesAsNeedingSync %@
Kicking off a message write after fetching messages
Completed message write %@ %@
syncMessagesWithSyncType with type %ld deviceConditionsToCheck %@
*** We were called to do an initial sync. Let's only fetch the first set of messages ***
Marking any unsuccessfully synced messages as needing sync
Finished Marking any unsuccessfully synced messages as needing sync
Done fetching archived records.
 ****** This was an initial fetch. Not writing messages *****
Not calling write messages on second callback from fetch archived records
******** Failed fetching archived messages with CKError %@ completionBlockCalledWhenFetchFailed %@
******** Failed fetching live messages with CKError %@ completionBlockCalledWhenFetchFailed %@
v28@?0B8B12B16@"NSError"20
Unsupported sync type
Clearing local sync tokens for Messages
Delete message callback with error %@
Deleted recordIDs %@
Not doing CloudKit message deletes as CK syncing is off
Got %lu recordIDs to sync, filtered to %lu unique recordID
No pending messages to delete from CloudKit
********* Error while deleting messages %@
deleteDate
partBody
com.apple.Messages.recoverableMessageSync
recoverableMessageChangeToken
recoverableMessage
com.apple.private.IMDCKRecoverableMessageSyncController
IMDCKRecoverableMessageSyncController
Skipping recoverable message sync due to Feature being disabled.
Scheduling a fetch recoverable message zone changes operation %@
Recently Deleted | Reading recoverable message record: %@
Recently Deleted | Failed reading recoverable message record. deleteDate: %@ and messageGUID:%@ cannot be nil
Recently Deleted | Reading recoverable message part record
Recently Deleted | Found stored part number %@
v40@?0@"NSNumber"8{_NSRange=QQ}16^B32
Did not find partIndex: %@ in message GUID: %@
Delete record operation unsupported.
Record Zone fetch complete zoneID %@ changeToken %@ tokenData %@ moreComing %d error %@
We got a %@ error while fetching recoverable messages. %@
Attempting to create recoverable message zone
** Failed to create recoverable message zone **
We completed fetching changes from recoverable message zone with no error
We got an expired server change token back so resetting local sync state, and fetching the recoverable messages again %@
********* We got an error fetching changes from recoverable messages zone %@
Recently Deleted | Clearing local recoverable sync state, flags 0x%x
Resetting the sync token to nil
Error creating recoverable message zone %@
***** Timed out creating recoverable message zone *******
Scheduling write recoverable message operation %@
Wrote recoverable message record %@ with error %@
IMDCKRecoverableMessageSyncController | Recently Deleted: could not write record: %@ encountered error: %@
messageRowID
partIndex
Recently Deleted | Marking row %@ with partIndex: %@ for %@ as clean
Recoverable messages writes completed sucess: %@ error %@
Recently Deleted | Not performing CloudKit recoverable message deletes as CK syncing is off
Recently Deleted | Got %lu recordIDs to sync, filtered to %lu unique recordID
Recently Deleted | No pending recoverable messages to delete from CloudKit
Recently Deleted | ********* Error while deleting recoverable messages %@
Recently Deleted | kicking off another batch delete to cloudKit
Recently Deleted | No GUIDs passed in to delete
Recently Deleted | Kicking off recoverable delete of recordIDs %@
messageGUID
chatGUID
_fetchOperationFactory was passed in a nil zone
_saveRecoverableMessagesOperationFactory was passed in a nil zone
Recently Deleted | No recoverable messages data to sync
IMDCKRecoverableMessageSyncController | Recently Deleted: marking clean: Using partIndex fallback: could not convert message to CKRecord with metadata: %@
v32@?0@"NSDictionary"8Q16^B24
Found %lu of %u max recoverable messages to write up
Delete recoverable message callback with error %@
Adding additional deleted recoverable record IDs from error
Deleted recoverable recordIDs %@
deleteDateInterval
IMDCKRecoverableMessageSyncController | Recently Deleted: returning nil record. messageGUID: %@, deleteDateNanosecondIntervalNumber: %@
IMDCKRecoverableMessageSyncController | Recently Deleted: returning nil record. recordID nil for metadata: %@
Recently Delete | Was not able to construct CKRecord with given data. This is bad.
%@+%@+%ld
action
incomingMessageProcessedByDaemon
lastUpdated
collaborationNoticeDefaultThreshold
collaborationNoticeCommentThreshold
collaborationNoticeParticipantChangedThreshold
IMDCollaborationNoticeRateLimiter.persistenceQueue
rateLimiter.plist
Creating rateLimiter persistence.
Loaded empty dictionary, creating a new dictionary.
Loaded noticeEventHistory: %@
IMDCollaborationNoticeRateLimiter
aguid
avid
pathc
auxpathc
vers
mimet
IMFileTransfer_CKRecord ***** Failed to write md5 hash of file at path: %@ with exception: %@
IMFileTransfer+CKRecord
Cannot generate record ID because salt is nil.
No cloudKitRecordID, derived record ID
Record ID from existing cloudKitRecordID: %@
Cannot initialize CKRecord using derived record ID because salt is nil.
Initializing CKRecord using derived record ID
Initialed CKRecord %@ for transfer %@ using record data from DB
IMFileTransfer_CKRecord
**** File a radar **** Asset last path component %@ from url %@ is empty
**** File a radar **** Asset last path component from url %@ is nil so cannot save it to metadata
IMFileTransfer_CKRecord **** Transfer did not have URL or asset was missing on disk. URL %@
Transfer file path %@
%@ transfer has an aux video asset
**** File a radar **** Aux asset last path component from url %@ is nil so cannot save it to metadata
No transfer metadata found for record:%@
Failed cleaning up attachment asset at %@, error %@
Cleaned up attachment asset at %@
Found a better asset in CKRecord %@, cloud size %@ local size %@
Missing file size to compare: cloud size %@ local size %@
Could not read file attributes of new attachment at %@, %@
Could not find file of the asset at %@, %@
Could not read file attributes of existing attachment at %@, %@
IMDFileTransfer+CKRecord
For attachment %@ local file not found at %@
Local asset is bigger than the one in CKRecord %@, taking %@ over %@
Can't find incoming attachment from CKRecord at %@
Could not read file attributes of local attachment at %@, %@
Moving transfer asset from CK cache to final spot
IMTransfer+CKRecord
CKRecord did not have a lastPathComponent, using %@ from filename
Failed to remove existing file at %@ to replace with version from CKRecord, sucess %@ error %@
Failed to move file from %@ to %@, error %@
Created transfer %@, finalAssetPath %@
Failed to write asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@ and asset fileURL %@
CKRecord did not have a auxVideoLastPathComponent, using %@ from auxVideoPath
Failed to remove existing aux file at %@ to replace with version from CKRecord, success %@ error %@
Failed to move file from %@ to %@ error %@
Stored aux video for transfer %@, finalAssetPath %@
Failed to write aux asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@ and asset fileURL %@
Failed to write record image asset to %@ GUID:%@
Got IMFileTransfer record with guid %@ with no file name
Invalid record passed to initWithCKRecord %@
Trying to create imfiletransfer ckrecord with guid %@ and filename %@
Invalid record passed to utiTypeForRecord %@
Invalid record passed to sizeOfAssetForRecord %@
Invalid record passed to transferGUIDOfRecord %@
Invalid record passed to attachmentRecordHasAsset %@
Invalid record passed to cleanUpAssetsOnDiskForRecord: %@
Invalid record passed to md5HashForRecord: %@
We didn't have an md5 hash for fetched record: %@
IMFileTransfer_CKRecord ***** Failed to grab hash of file at path: %@ with exception: %@ when validating attachment
IMFileTransfer_CKRecord *** asset was nil for record id: %@
IMFileTransfer_CKRecord *** fileName [%@] or utiType [%@] is nil
We failed to validate md5HashOfCKAsset: %@ md5HashStoredOnRecord: %@
__kIMDReplayControllerErrorDomain
IMDReplayContoller
Request to store replay message %@ type %d
IMDReplayContoller message was nil
IMDReplayContoller Incorrect message type %d
IMDReplayContoller Unable to archive message object: %@
Warning, missing %@ to add to %s
dict
IMDReplayMessageController. Storing message %@ failed with error %@
IMDReplayContoller: Found an empty message payload while replaying
IMDReplayContoller Trying to replay message of unknown type %@ %d
v16@?0q8
IMDReplayController
Request received to replay messages.
Deleting replay DB after replaying messages
deleteReplayDBIfNotUnderFirstUnlock isUnderFirstUnlock %@
Not deleting replay DB
Deleting replay DB on imagent launch after first unlock
Setting up new replay database at path: %@
Unable to setup replayStorageController, previous store controller with database at path %@ remains active
An replay database was already overriding the default, ending previous override
Restoring default replay database
Attempted to restore a database when no override database was set
Starting to recording replay database
End recording replay database
/var/mobile/Library/SMS/replayDB.db
Couldn't get local asset URL from CKRecord: %@
Failed to create attachment persistent path for aux video source, bad transfer/data (assetPath %@ mimeType %@ utiType %@ guid %@)
Failed to get valid attachment aux filename for aux video copy dest, bad transfer/data (auxAssetPath %@)
Failed to get aux video asset fileURL for aux video copy dest, bad transfer/data (assetPath %@ auxAssetPath %@)
com.apple.protectedcloudstorage.roll.Messages3
ck-client-max-time-to-defer-nightly-sync
IMDCKSyncController
Max Time to defer from server bag %@
Max Time to defer default value %@
_postMetricsToCloudKitOnAutomaticHistoryDeletionAgentLaunch
Received iCloud Account change notification, syncing enabled: %@
Account status is: %ld. Error: %@
SyncAfterAccountUpdate
Account status update, and we stopped sync due to missing TLKs. Launching one-off periodic sync.
Account.update
Registering for account notifications
Registered for cloudkit account change notifications
ck-imahd-sync-interval
_IMAHDAgentFallbackInterval %@
Last synced date %@ timeInterval %@, syncNotCompletedRecently %@
Scheduling nightlySyncTimer. Firing time: in %f sec.
nightlySyncTimer fired
Ignoring request to kick off of eager sync, since syncing is disabled
attempting to kick off an eager sync in %@ seconds
Kicking off a sync on power and wifi isSyncing %@ isUnderFirstUnlock %@ lastSyncDate %@ deviceConditionsAllowSync %@
postInitialSync
Not kicking off a sync on power and wifi isSyncing %@ isUnderFirstUnlock %@ lastSyncDate %@ deviceConditionsAllowSync %@
Init IMDCKSyncController
Got notified to kick off a sync due to IMAutomaticDeletionAgent
IMPowerWifiUsageCollectorOnPowerAndWifiNotification
Not doing account check on launch as device is locked
performInitialSyncOnFirstConnectionOfImagentIfNeeded {hasPerformedInitialSync: %@ hasTriedToEnableCKAndSyncForFirstTime: %@ cloudKitEnabled: %@
This is our first time connecting to imagent on this device (either first time ever or from a restore) and cloudkit is disabled --- will attempt to enable and perform initial sync -- we won't do this again
SyncAfterIdentityUpdate
Request to beginInitialSync
**** Has performed initial sync, or we aren't enabled. Not kicking off initial sync *** | isEnabled %@, hasPerformedInitalSync %@
InitialSync
We aren't ready to perform an initial sync.  We've tried %ld times.  We'll try again in %ld seconds 
We'e tried %ld times to begin an initial sync.  Giving up.
BeginInitialSync
*** Manatee keys not available not kicking off initial sync
MissingTLK
MissingTLKNoInitalSync
Restore Fail
Request to begin chat sync isPeriodic:%@
Not syncing chats from xpc activity -- mocEnabled: %@
Set state for chat syncing with result %d
We synced recently chats not syncing again after coming back online
CoreduetChatPeriodic
ManualChatSync
We dont have manatee TLK. Not kicking off chat only sync
Request to determine if we should mark all incompatibleMessagesForDeletion, set version (%ld) current version (%d)
Request to begin full sync checks %lu (reason %@)
com.apple.Messages.PeriodicSync.
Check-in for a periodic sync at priority %s
Run a User-Initiated periodic sync
Ignoring activity request to sync messages, as syncing is disabled
We did not set the state of a user-initiated xpc_activity to continue successfully for message syncing
v16@?0@"NSObject<OS_xpc_object>"8
Request to begin full sync activity:%@
CloudKit allows sync, beginning periodic sync attempt 0
CoreduetFullPeriodic
ck-stop-online-sync
ck-chat-sync-interval
_minimumChatComingOnlineSyncInterval %@
Last coming online chat sync date %@
Server override prevents us from syncing chats when coming back online
ck-block-single-device-limitation
The server is not allowing us to block chat syncing for iMessage accounts with only one device: %@
Number of devices for iMessage account: %@
Cleaning up tombstone table as CloudKit syncing is off
Request to beginChatSync from coming back online
Not syncing chats from coming back online -- clearing tombstones for deletes only 
Proceeding with coming back online sync
ComingBackOnlineChatSync
kickOffCloudKitSyncIfNeededOnImagentLaunch
disableSyncRetryOnCrash
Not attempting to kick off periodic sync as we are under first unlock AND/OR we have a defaults set com.apple.madrid disableSyncRetryOnCrash
Not kicking off a sync as this is a periodic sync attempt %ld and coreduet should decide whether to kick off a sync again
CrashedDuringSync
duringPeriodicSync
imagent started and we were in the middle of manual sync attempt %ud
duringManualSync
Is charging %@ , isOnWifi %@
NOT Kicking off a periodic sync after we got back as we are not on battery and wifi
We are on power and wifi. Kicking off a sync
ContinuingManualFullSyncAfterLaunch
startedWhileInProgress
Not kicking off a sync as there was no sync in progress or we hit max limit attempts of sync
wasXPCtriggered
restoreSync
nightlyTriggerCrash
Unknown/Crash
clearLocalCloudKitSyncState
ResetSyncDate
disable-mic-ui-refresh-during-sync
RefreshConversationList
Server disallows refreshing UI while syncing
disable-mic-ui-refresh-timer-during-sync
Server disallows refreshing UI while syncing using timer
Setting up a timer to reload the UI
Refreshing UI after time because device is unlocked
Not Refreshing UI after time because device is locked
Invalidating reload timer.
Refreshing UI after unlock
Dumped logs in past hour
Dumped restore failure logs in past hour
Current hour %@
Deleted restore failures directory at path %@
Failed to delete restore failures directory at path %@ with error %@
Dumping restore failure logs
Feature is on, time to send restore failure logdumps, found %@ to send
RestoreFailuresDump
Sending restore failure log (guid %@) at path %@ to recipient %@
Checking we whould send logs. allowedToSendLogs %@ withinAnHourOfLogDumpHour %@ hasDumpedRestoreFailureLogsInPastHour %@
It is dump log time but feature is off, deleting restore failures directory
Not auto dumping Restore Failure MOC logs withingLogDumpHour %@ hasDumpedLogsInPastHour %@ lastLogDumpTime %@
Checking if we need to dump logs using LastErrorDate:%@ and LastSyncDate%@
We haven't reported any errors in the last 24 hours and haven't syned.  Dumping logs 
NoSyncFor24Hours
Not auto dumping MOC logs withingLogDumpHour %@ hasDumpedLogsInPastHour %@ lastLogDumpTime %@
Sync
Failed syncing %@ with error %@
IMDCKSyncDomain
syncStep
Failed
Failed syncing Messages %@, please file a radar
Set activity to state %ld success %@
IMDCKRestoreDomain
Caused by: %@
Beginning initial new device sync with CloudKit. , attemptCount %@
Max attempts to sync due to recoverAble error exceeded
Messages: Failed syncing to CloudKit please file a radar
Retry
Deferring initial sync on attempt %lu, in state %ld
Failed to set activity to STATE_DEFER(3) on attempt %lu, in state %ld
Successfully synced chats after new device bringup
Successfully synced messages after new device bringup
Successfully synced attachments after new device bringup
******** Nuking CloudKit data ******
Deleting CloudKit Data
Attempting periodicSync for attemptCount %@ so setting fullSyncAttempted date.
First full sync is complete, noting down date %@
We need to dump logs after syncing
LowSyncStats
We don't need to dump logs
****** Manatee keys not available. Not syncing %@ ******
Could retry periodic sync based on error %@
Doing an attachment metadata only sync before we continue with the full sync
Attachment metadata only sync failed with error: %@
Attachment metadata only sync succeeded
First full sync has completed - lets just do a normal sync flows
Initiating full sync with CloudKit. Core Duet Sync %@, attemptCount %@
stopManateeSync
Asked to sync but we are not allowed to do so
Set state full sync activity result %d
Max attempts to sync due to recoverable error exceeded
FullMessageSync
RetryAttemptExceeded
Deferring periodic sync on attempt %lu, in state %ld
Successfully synced chats
Successfully synced messages
Successfully synced updates
Successfully synced attachments
Completed syncing deletes
Failed syncing updates with error %@
Kicking off delete sync to CloudKit
Done deleteing chat with error %@
ChatDeletionComplete
Done deleteing messages with error %@
MessageDeletionComplete
Done deleteing attachments with error %@
AttachmentDeletionComplete
RecoverableMessageDeletionComplete
IMDCKRecoverableMessageController
[Recently Deleted] Successfully synced recoverable messages
[Recently Deleted] Recoverable messages sync unsuccessful. Will Retry
Request to sync all chats
Synced chats with success:%@
Ramping says we are allowed
Unable to check exit zone record Error: %@
Entered exit zone at %@. Aborting sync, downloading all attachments. {shouldDownloadAssets: %@}
We are downgrading the security level, downgrade date %@. We can't download at this time. When the Identity is restored, we will kick sync appropriately
Not in exit state, continuing sync
** We are already performing a sync.  Ignoring current request to sync.
 Syncing Self:%@ Chat:%@ Message:%@ Attachment:%@ Exit:%@
iCloud and iMessage accounts match up ? %@
Cache says featureAllowed(%@) featurePromoted(%@) featureVisible(%@) fetchHadServerError(%@)
The ramp cache says we are not rampped.  Let us try to fetch the ramp state one more time.
fetchedFeatureAllowed: %@ fetchedFeaturePromoted: %@ fetchedFeatureVisible: %@ secondFetchHadServerError: %@
IMDCKSyncControlelr
We were ramped in on second fetch -- continuing
We were not ramped in or encountered another error trying to fetch the ramp state. Failing
Set state to DONE for sync activity result %d
v28@?0B8B12B16B20B24
Could not fetch salt, aborting cleaning up MOC
NSDebugDescription
Noting down sync started. Initial value Key %@ value %@
Noting down sync started. After setting value Key %@ value %@
IMDCKSyncController: We started a second sync before a previous one was finished.  Likely there is an exit path that isn't calling _noteMeticsForSyncEndedWithSuccces
Started by %@, running since: %@:
LongRunningSync
Resetting sync state, and attempt counts
_periodicSyncAttemptCount %@
_manualSyncAttemptCount %@
Chats, messages, and attachments have synced successfully, sync time: %@
Updating sync date for Manatee sync %@
Wrote sync date success to CloudKit %@ error %@
Request to syncChats from XPC
sync-state-user-defaults
assembled sync state debugging info: %@
Handling event with name %@ userInfo %@
Got user signed into HSA2 account notification
exitRecordDateWithCompletion in updateDowngradedDateIfNeeded failed with error: %@
Finished updating security level with error: %@
Handling AKUserInfoChangedNotification with user info: %@
Account level changed to %@
We are downgrading from HSA2 -- turning off messages on iCloud
Account level changed to unknown, not turning off messages in iCloud or refreshing values associated with IMCloudKitAppleIDSecurityLevelHSA2.
Finished checking for possible security level downgraded with error: %@. Broadcasting new state if needed.
iCloud and iMessage account match up ? %@
iCloud and iMessage accounts do not match up. Turning off MOC
Messages in iCloud not available
Messages in iCloud is not available because iCloud and iMessage accounts are different.
com.apple.IMDCKSyncController
performOneTimeAccountUpgradeCheckIfNeeded
Will performing MOIC account check on upgrade after %f seconds
Clear analytic defaults and local sync state
User has completed a first full sync so device has started doing periodic syncs. Logging full periodic sync metric.
completedPeriodicSyncSinceFirstFullSync
analytic-zone-periodic-sync-logging-not-allowed
analytic-zone-daily-state-logging-not-allowed
Not logging analytics
dailySyncState-
Device will be uploading %@ analytic dict %@ to CK. CreatedZones: %@ DeletedZones:%@
Not uploading daily sync state.
Will be uploading dailySyncState-PeriodicSync analytic dict %@ to CK.
dailySyncState-PeriodicSync
Not uploading periodic sync activity.
Received key roll pending state did change event notification
Handling Backup State Did Change
We did not have an IMDCKSyncController when trying report _PCSBackupStateDidChange
Handling Test Backup State Did Change
We did not have an IMDCKSyncController when trying report _PCSTestBackupStateDidChange
Handling Successful Keyroll from Backup
We did not have an IMDCKSyncController when trying report _PCSBackupStateKeyrollSuccessful
Handling Pending Keyroll Notification
We did not have an IMDCKSyncController when trying report _PCSPendingKeyroll
Handling Identity/TLK keys available notification, name: %@, userInfo: %@
Identity/TLK update, and we stopped sync due to missing TLKs. Launching one-off periodic sync.
Identity.update
com.apple.private.Messages.IMMessagesToTrack
Registering chat identifier: %@   style: %d  hash: %@ handleInfo: %@ lastAddressedHandle %@ lastAddressedSIMID %@
 => Found chat, but it had no particpants. Updating with handleInfo: %@
********** Created bad chat: %@ *************
1:1 chat identifier mismatch
 => We already have one, nothing to do here. Chat: [%@]
Failed to canonicalize chat identifier
Failed to find chat for hash hash %@ with chatIdentifier: %@, style: %c
Updating account ID from: %@ => %@
Failed to accept moment share for message guid: %@
Configuring Syndication Ranges for Message: %@. isSWYSpam %@, showQuickAction: %@ swyAppName: %@
v28@?0B8@"IMMessageItem"12@"IMMessageItem"20
  => Message was stored. Input: %@   Output: %@
  => No result? Using the requested message: %@
com.apple.imessage
DropSendingMessage
 ** DropSendingMessage is enabled, failing send message
Chat: Could not find a chat for itemGUID: %@
Failed to store item %@
Not sending message up to client because this message is being retried. Guid %@
Removing message: %@   from chat: %@ due to send on different service
v16@?0@"IMMessageItem"8
Not sending delivery receipt
Not handling, subclass for iMessage should handle
Chat_GroupPhoto
Not requesting group photo, subclass for iMessage should handle
Did leave chat: %@  style: %c setting state: %d
Did join chat: %@  style: %c setting state: %d   name: %@   groupID: %@ lastAddressedHandle %@ lastAddressedSIMID %@
Did join chat: %@  style: %c setting state: %d   name: %@   groupID: %@  category %ld extensionName %@
Did join chat: %@  style: %c setting state: %d   name: %@   groupID: %@
Found old message: %@  for error: %d
Updated message: %@
Message is already delivered, and we're not forcing an error here (%@)
Unable to mark error: %d, no messages found for guid: %@
Found old message for read receipt: %@
Unable to mark send of read receipt, message is on a different service: %@ vs %@
Unable to mark send of read receipt, no messages found for guid: %@
Found old message for delivered quietly receipt: %@
Setting was delivered quietly flag on local device for message: %@
Unable to mark message delivered quietly, message is on a different service: %@ vs %@
Unable to mark message delivered quietly, no messages found for guid: %@
Found old message for notify recipient command: %@
Setting did notify recipient flag on local device for message: %@
Unable to mark message notified command, message is on a different service: %@ vs %@
Unable to mark message notified command, no messages found for guid: %@
Found old message for played receipt: %@
Expire received message played on local device: %@
Unable to mark send of played receipt, message is on a different service: %@ vs %@
Unable to mark send of played receipt, no messages found for guid: %@
Found old message for saved receipt: %@
Unable to mark send of saved receipt, message is on a different service: %@ vs %@
Unable to mark send of saved receipt, no messages found for guid: %@
Received didSendSyndicationAction: %@ for Chat: %@
Updated message: %@ with action item: %@
Message not update updated for SyndicationAction - doing nothing with syndication action: %@
Updated syndication state to: %@ was successful: %@ for chat with GUID: %@
   Found message from chat: %@
   Message was already marked as delivered, ignoring
   Message was already marked as black holed, ignoring
Found old message for delivery receipt: %@
MessageService
Received delivery receipt for message: %@
Delivery receipt time was: %f
Message had error: %d
Updated message: %@  had error: %@
B8@?0
MessageSuppression
No message found for guid: %@ to mark as delivered, trying again in a bit
Second to last try, waiting longer
Last try, waiting a lot longer
No message ever found for guid: %@ to mark as read, bailing
Found chats to mark as read: %@
Updating local chat (fromMe: %@): %@
Returning early in _didReceiveMessageReadForMessageID because !_activated
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessageReadForMessageID:date:attempts:useMessageSuppression:completionBlock:]
message: %@
Returning early in _didReceiveMessageReadForMessageID because messageID: %@, [[self service] supportsDatabase]: %@, service: %@
Found chats for messageID: %@   chats: %@
Found no chats for messageID: %@
Found chat for messageID: %@, chat: %@
Received reflected read receipt. Setting suppression flag for chat %@
Noting received reflected read receipt for: %@ (%@)  (self: %@)
Remaining messages: %@
  Also adding message: %@
  Skipping message: %@
No message found for guid: %@ to mark as read, trying again in a bit
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessageReadReceiptForMessageID:date:attempts:completionBlock:]
Found chat for messageID: %@   chat: %@
Unable notify about message, message is on a different service: %@ vs %@
Unable notify about message, no message found
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessagePlayedForMessageID:date:attempts:useMessageSuppression:completionBlock:]
Received reflected played receipt. Setting suppression flag for chat %@
Noting received reflected played receipt for: %@ (%@)  (self: %@)
No message found for guid: %@ to mark as played, trying again in a bit
No message ever found for guid: %@ to mark as played, bailing
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessagePlayedReceiptForMessageID:date:attempts:completionBlock:]
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:attempts:useMessageSuppression:account:completionBlock:]
   Message was already marked as saved, ignoring
Received reflected saved receipt. Setting suppression flag for chat %@
Noting received reflected saved receipt for: %@ (%@)  (self: %@)
v16@?0@"IMItem"8
Stored item: %@     Actually stored: %@
Posting received message: %@
Item was not stored, ignoring
v28@?0B8@"IMItem"12@"IMItem"20
Message with guid %@ has been deleted!
No message found for guid: %@ to mark as saved, trying again in a bit
No message ever found for guid: %@ to mark as saved, bailing
-[IMDServiceSession(IMDServiceSession_Chat) didSendMessage:forChat:style:account:forceDate:itemIsComingFromStorage:]
Not notifying for message: %@   this is a typing indicator, and we've already stored a completed message
Not notifying for message: %@   this is a typing indicator, and it failed
Automatically saving message sent from local device: %@
Expire message sent from local device: %@
Updating date on message guid %@ to be: %@
Updating isFiltered to NO, replying to chatId: %@
Posting sent message: %@
-[IMDServiceSession(IMDServiceSession_Chat) notifyDidSendMessageID:account:shouldNotify:]
Updated sent message: %@   duration: %@
Unable notify about message, no messages found for guid: %@
Noting messages for chat GUID %@ marked as read
Suppressed messages now marked as read: %@
Cleared suppression flag for chat %@
%@ ending message suppression for all outstanding timers: %@
v32@?0@8@16^B24
%@ _endMessageSuppressionForChatGUID: %@
Found old message: %@
Removed read flag: %@
Updating chat: %@
Message is already not read: %@
Message suppression timer fired for chat guid %@
Setting suppressed message: %@
Can't delete on this service %@
Ignoring name update, already the current name
The existing message was read, let's mark the new one is read
The existing message has a time: %@, so lets set the new message to have the same time
We are setting the reply to guid for message %@ to be %@ as a reply to guid has not been set
Assigning sort id %@ to message %@ for chat %@
Chat's last read message time date (%@) guid (%@) timestamp: (%@) Messages time date (%@) timestamp: (%@) Server timestamp: (%@)
Last read message time is in the future. Not marking incoming message %@ as read
Setting message %@ as read as incoming message is older than the chat's last read message time
Marking message as failed due to preflight rendering
v12@?0I8
Bailing, we had a similar message: %@
Service was SMS, let's move it over to iMessage
Broadcasting service update for message with GUID %@ after suppression
*** Bailing, we already had a finished message for this in the database. ***
Should suppress message: %@
Found suppression timer %@ for chat %@
message-suppression-timer %lu
Suppressing message: %@
Setting suppressed message flag: %@
The input message disagrees with the "from me" attribute, creating a new message ID
@"IMMessageItem"16@?0@"IMMessageItem"8
No timing information available for incoming message processing with guid %@
  Ensuring the app is alive here
Stored message: %@     Actually stored: %@
Not donating to Message: %@ to CoreSpotlight. isSWYSpam %@, showQuickAction: %@
Message was not stored, ignoring
Updating invitation message after DB store: %@
Invalid chat identifier, ignoring
Chat: %@  status update: %d  style: %c lastAddressedHandle %@ lastAddressedSIMID %@
Updating isFiltered to NO, chat ID is a business chat: %@
Chat: %@  member: %@ from member: %@ unformated: %@ country: %@ status update: %d  style: %c
Storing participant leave: %@
Storing %@ participant change item  %@ => %@
invite
remove
Hawking: New participant (%@) added to chat (%@) is a known contact.
Hawking: New participant (%@) added to chat (%@) is not a known contact.
_CDSpotlightItemRecorder
CoreDuet
Going to remove chat guid from core duet %@
done deleting searchable items with domain identifiers %@. success %@ error %@
No chat to update downgrade properties for.
Handling routing dictionary: %@
Chat: Got a missing service in routing dictionary for GUID (%@): %@
Chat: could not find a session to route message GUID: %@
Chat: Could not re-route missing message GUID: %@
Chat: Could not find a chat for message: %@
Not routing message (%@) because it is not sent and has no error, not a candidate for routing
Re-routing message (guid:%@):%@   chat:%@   service:%@   session:%@
No chat registered, creating on one on service %@  identifier: %@   style: %c  (Chat: %@)
Generated handle info: %@ for group chat: %@
Found iMessage chat [%@], will use lastAddressedHandle %@ lastSIMID %@
No iMessage chat found for chat identifier: %@
Chat: could not find iMessage session to find iMessage chat.
Chat already exists for the other session, nothing to do here: %@
Sending message to session: %@  chatGUID: %@
v24@?0@"NSDictionary"8d16
Scheduling a routing check with interval: %f
message-routing-timer
Handling expire state dictionary: %@
Chat: Could not expire missing message GUID: %@
Not deleting message (%@) because was already saved
Not expiring message (%@) because its expire state %d is already %d
Expire message (guid:%@):%@   chat:%@   session:%@
   delete expired messages: %@
   deleted expired messages: %@
Don't schedule expire state check with interval: %f, one is already scheduled with interval: %f
Scheduling an expire state check with interval: %f
message-expire-state-timer
Handling watchdog dictionary: %@
Chat: Could not watchdog missing message GUID: %@
Don't schedule watchdog check with interval: %f, one is already scheduled with interval: %f
Scheduling a watchdog check with interval: %f
message-watchdog-timer
Going to user user notifications to notify for urgent messages
Auto Replier sending delivered quietly receipt for messageGuid %@ in chatGuid %@
Auto Replier sending notify recipient command for messageGuid %@ in chatGuid %@
Successfully consumed EN url, marking message as read: %@
Scheduling a storage invalidation timer in: %f
We have pending read receipts to process after storage timer fired
Storage timer fired, guids we need to process: %@
Chat: Missed lastItemProcessed.  This time is likely off by the last storage timer
Noting suppressed item updated while processing messages from storage (%@)
Noting item from storage (%@)
This is the first item from stroage starting timer
ProcessingMessagesFromStorage
Noting last item from storage (%@)
Finished processing %lu items from storage%@
Incremented pending read receipt to %lu
Decremented pending read receipt to %lu
Setting pending read receipt to %lu
Predominant service check for incoming message:%@ in chat:%@ was determined to be %@
Not showing quick action since we did not get an AppName
Invalid chat or incorrect number of messages
Identifying the predominant service for chat: %@
Invalid parameter. chatGUID: %@ service: %@ number of messages:%lu
Incorrect chat %@, has more than the number of participants we expected!
Chat %@, has the wrong number of participants than what was expected!
Failed to fetch %lu number of messages from chat %@
Chat opted out of Auto donation. Not configuring syndication ranges
Configuring syndication ranges for incoming message:%@ in chat:%@
Storing message: %@
/Library/Caches/com.apple.xbs/Sources/MessagesCore_Sim/IMCore/IMDaemonCore/IMDServiceSession_Chat.m
void _IMDStoreMessage(IMDService *__strong, IMMessageItem *__strong, BOOL, BOOL, BOOL, BOOL, FZMessageFlags, __strong _IMDMessageStoreShouldStoreBlock, __strong _IMDMessageStoreDidStoreBlock, __strong _IMDMessageStoreCompletionBlock)
_IMDStoreMessage
Unexpected false '%@' in %s at %s:%d. %@
[resultMessage isKindOfClass:[inMessage class]]
input and output message types are not the same. input message has type %@. output message has type %@
  => Result message: %@
Set avatar likeness data for message %@
Set biz intent data for message %@
Set locale data for message %@
Set meCard sharing preferences data for message %@
%@;%c;%@
Found messages guids to mark as read: %@
Notifying about messages: %@
Found message to mark as played: %@
Automatically saving received message played on linked device: %@
Expire received message played on linked device: %@
Found chats to mark as played: %@
Notifying about message: %@
Found message to mark as saved: %@
Found chats to mark as saved: %@
  => Result item: %@
v56@?0@"IMDiMessageIDSDelegate"8@16@"IMDiMessageIDSTrustedData"24@"IMDiMessagePipelineResources"32@"IMMessageContext"40@"IMPowerAssertion"48
IMTransferServicesController_Preview
Generating preview OOP with tmpURL %@ finalURL %@ previewURL %@ maxWidth %f scale %f
IMTranscoderAgent OOP generation completed with error %@
OOP preview generation failed in imagent with error %@
Storing size value %@ for previewURL %@
Transcoder Preview Generation Failure
IMPreviewGeneratorDomain
Timed out getting preview from IMTranscodeController in imagent
persistedPreviewURL: %@
Received CommSafety response from Media-Analysis-Daemon with result %@, %@
Received CommSafety response from Media-Analysis-Daemon with error %@
Timed out waiting for sensitive image check
Not pregenerating preview, no persistedPreviewURL
Not pregenerating preview, utiSupported %@ isCMM %@ aux Video %@, calling completion directly
kMarkSensitiveKey
Not pregenerating preview: IM_BLASTDOOR_ATTACHMENT_PREVIEW_ENABLED NOT set
v44@?0@"NSString"8@"NSString"16B24@"NSError"28@"NSString"36
com.apple.MobileSMSPreview
IMFailPreviewGeneration
Initial sync device conditions check if CloudKit sync is enabled: %@ has accounts %@
Initial sync device conditions check if CloudKit sync is enabled: %@, hasAccounts %@
Initial sync device conditions check if CloudKit sync is enabled: %d
Initial sync device conditions ignoring feature enabled: always TRUE
Initial sync. Not writing up attachments
IMDMessageHistorySyncController
ReplayController requested a history Sync
ReplayController already has sync in flight ignoring request
IDS Transport Log requested a history Sync
IDS Transport Log already has sync in flight ignoring request
Cloudkit Chat Controller requested a history Sync
Cloudkit Chat Controller  already has sync in flight ignoring request
Checking if any sync task need to be started
Already performing a sync task, waiting for that to complete before kicking off the next task
Starting Sync
Finished Sync
v16@?0Q8
No Message History to sync.
Will check in %u seconds if another sync needs to be done
/var/mobile/Library/SMS/CloudKitMetaData/ChatSyncZoneMetaData.db
chatLockRecordType
chatLockRecordName
lRKey
com.apple.private.IMDCKChatSyncController
************ CREATING CHAT LOCK RECORD **************** OH BOY **************
changeToken
**** Do not call -[IMDCKChatSyncController _chatsToUpload] on main thread *******
Error creating chat zone %@
***** Timed out creating chat zone *******
per record completion block record %@ changeTag %@ error %@
We are setting the lock record on the callback for processing records
We got back error [%@] on the lock record, setting the lock record to nil to re-generate on next sync
Error %@ while writing up record %@ 
Extracted record from server error%@ 
Got a conflict while fetching lock record %@
modifyRecordsCompletionBlock error %@
Number of records saved %@
We got back that we have exceeded quota in chat sync -- failing to continue writes
We only had partial error and the whole batch failed 
lock record is present amongst chats
******** LOCK RECORD IS NOT PRESENT ******
We failed to sync Chats due to op lock Not doing ABC %@
Number of chats to write up %@
Chat to sync up %@
This is the last batch of chats to write up
Adding lock record %@
Kicking off another batch of chats to write up
*** This was the last batch of chats to write up. Done writing up chats
**** Error %@ writing chat records %@ to cloudKit *****
No chats to sync up at this moment
No completion block to call
Creating a fetch chat record operation using sync token %@ for zone %@ limit %@
**** _processRecordDeletion:Dropping delete as IDS syncs it real time. ***
** We got the lock record %@ **
_processRecordChanged changed recordID:%@ for ChatGUID %@
Kicking off chat write
Not writing up chats as sync type does not allow it
We got a %@ error while fetching chats. %@
Resetting local chat sync state & last sync date after receiving user deleted zone error
Attempting to create chat zone
Attempting to create chat zone so setting createdChatZone BOOL to YES
** Failed to create chat zone **
We completed fetching changes from chat zone with no error
We got an expired server change token back so resetting local sync state, and fetching the chats again %@
********* We got an error fetching changes from chat zone %@
Scheduling a fetch chat zone changes operation %@
chatExistsWithCompletion (batch size %d)
ChatsExistCheck
Fetched record %@
Completed query %@ with error: %@, foundRecord: %d
Scheduled fetch changes operation to check for the existence of a single chat with identifier: %@ (batch size %d)
chat sync controller checking eligibility
Received error checking eligibility: %@
Returning cached value: %@
_shouldMarkAllChatsAsNeedingSync %@
IMCKChatSyncController
Resetting fetched chats bool to NO
Starting chat sync attempt count %@
Exceeded number of chat sync attempts
**** Not Eligible For Truth Zone, but earlier we were able to fetch the chat zone. Something is up! ****
Syncing chats in new device bring up scenario
Chat sync error %@
*********** we failed to sync Chats due to op lock %@, kicking off another chat sync
Not syncing chats due to missing defaults. Please do following as mobile and try again - defaults write com.apple.madrid enableCKSyncingV2 YES
Marking all chats as dirty
_handleChatDeletionCompletionForRecordIDs error %@
Deleted chat with recordID %@
Error deleteing chats from CloudKit %@
CloudKit Syncing is disable
com.apple.IMDCKChatSyncController
Got %lu recordIDs to sync, filtered to %lu unique recordIDs
Failed to filter record IDs for chat deletion sync, error: %@
No pending chats at this moment
***** WE should not get record completion block in delete operation
Filtering chat recordIDs to those with modification date after %@
Completed chat record fetch with %llu results, error: %@
Including chat with record ID %@ modification date %@ since it is before %@
Filtering out chat with record ID %@ modification date %@ since it is after %@
v32@?0@"CKRecordID"8@"CKRecord"16^B24
IMDMessageHistorySyncNotifyReplayControllerWantsSync
IMDMessageHistorySyncNotifyCKChatSyncControllerWantsSync
IMDMessageHistorySyncNotifyIDSTransactionLogWantsSync
task_flags
/var/mobile/Library/SMS/Stickers
IMDStickerRegistry
Deleting legacy Sticker folder at path %@, error %@
Initialized IMDStickerStore
_isRecipeBasedSticker invalid properties
Retrieve sticker with properties %@, completionBlock %@
IMDStickerRegistry. No completion block passed in.
sticker found in cache %@
Received ME-sticker from balloon %@
IMDStickerRegistry. Failed retrieving sticker me-sticker with error %@, outputURLS %@
Received transcoded output from balloon bundle id %@ path %@
v40@?0@"NSArray"8@"NSString"16@"NSError"24B32B36
Sticker not found in cache
Invalid sticker properties passed to retrieveStickerWithProperties %@
com.apple.private.IMDaemonCore.IMDStickerRegistry
typing-indicator-cleanup
Tried to change property %@ with nil buddy ID
Tried to change empty property for buddy ID: %@
Tried to change IDProperty for buddy ID: %@   bailing
IMDServiceSession_BuddyList.m
Too many calls to [IMDService endBuddyChanges]!
com.apple.Messages.UpdateSync
com.apple.private.IMDCKUpdateSyncController
mic-delete-update-zone
IMDCKUpdateSyncController
Deleting zone based on default, and skipping Update syncs
Scheduling a fetch update zone changes operation %@
Fetched update record with type %@
We got a %@ error while fetching updates. %@
Attempting to create update zone
** Failed to create update zone **
We completed fetching changes from update zone with no error
We got an expired server change token back so resetting local sync state, and fetching the updates again %@
********* We got an error fetching changes from update zone %@
updateChangeToken
Error creating update zone %@
***** Timed out creating update zone *******
Scheduling write updates T1 operation %@
Wrote T1 update record %@ with error %@
Marking row %lld for %@ as clean
Update T1 writes completed sucess: %@ error %@
Scheduling write updates T2 operation %@
Wrote T2 update record %@ with error %@
Successful write of T2 update to the server, updating syncedSyndicationRanges for message guid %@ 
Update T2 writes completed sucess: %@ error %@
fetchOperationFactory was passed in a nil zone
saveT1OperationFactory was passed in a nil zone
**** T1 Update item [%@] could not be converted to CKRecord, marking it as clean and moving on.
Found %lu of %u max T1 updates to write up
saveT2OperationFactory was passed in a nil zone
**** T2 Update item [%@] could not be converted to CKRecord.
Found %lu of %u max T2 updates to write up
XPC Activity state was NOT in state continue(4), was in state %ld!
Keychain
Abandoning password fetcher with request ID: %@  session: %@
No pending password fetch requests for session: %@
IMDServiceSessionBase
/*-------calling into leaveiMessageChat from legacy service session, please file a radar-------*/
/*-------calling into invitePersonInfoToiMessageChat from legacy service session, please file a radar-------*/
/*-------calling into sendGroupPhotoUpdate from legacy service session, please file a radar-------*/
/*-------calling into retryGroupPhotoUpload from legacy service session, please file a radar-------*/
/*-------calling into removePersonInfoFromiMessageChat from legacy service session, please file a radar-------*/
/*-------calling into closeSessionForChat from legacy service session, please file a radar-------*/
/*-------calling into sendNicknameUpdatesToPeerDevices: from service that doesn't support it. File a radar-------*/
/*-------calling into sendNicknameInfoToChatID: from service that doesn't support it. File a radar-------*/
/*-------calling into reflectMarkUnreadToPeerDevicesForMessageGUID: from service that doesn't support it. File a radar-------*/
/*-------calling into sendEditedMessage: from service that doesn't support it. File a radar-------*/
__kIMDReplayMessageStorageControllerErrorDomain
passing in nil filePath to initWithFilePath
IMDReplayStorageController
IMDReplayStorageController was asked to store nil dictionary
Deleting replay db with path %@
IMDCKInitialMessageSyncController
Initial sync device Not writing up messages
UserInfo
IMDXPCEventStreamHandler
%@ received event with name %@ and user info %@.
__ksFirewallUserNotificationIdentifier
RememberPassword
Not Connected
Unexpectedly disconnected
Disconnecting...
Connecting...
Connecfted
-[IMDServiceSession disallowReconnection] %@
Auto-Reconnect Request: %@:%@
Auto-Reconnect failed (Network conditions don't allow it): %@:%@
Reconnecting account: %@:%@
Do Login: %@:%@  (serviceLoginStatus: %d)
Ignoring Login: %@:%@  (serviceLoginStatus: %d)
_login_serverSettingsReadyWithAccount: %@:%@
The account name or server is not valid.
  setting service status to disconnected, account or server is invalid
****** No IMConnectionMonitor for login of account: %@
A network error occurred.
_data_connection_ready: %@:%@
v72@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64
_login_usernameAndPasswordReady: %@:%@
_login_checkUsernameAndPassword: %@:%@  has pass: %@   bad pass: %@
_login_checkUsernameAndPassword: connectionMonitor says we're not reachable
Skipping login, we're not activated
Strange, we're here, but already logged in
Building password notification dialog for: %@   (has pass: %@   has login: %@  bad pass: %@)
v76@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56B64B68B72
autoLogin: %@:%@
Login request: %@:%@ (Setting should reconnect flag = YES)
-[IMDServiceSession logoutServiceSession]: %@, account:%@
-[%@ logoutWithAccount:%@] (activated = %@)
Tried to logout: %@  but we're not supposed to, reflecting this!
<<Connected>>
** %@: clearing _shouldReconnectFlag at logout
%@: Login status changed to %@ (%@)
__kIMDBadgeUtilitiesLoginStatusChangedNotification
-[IMDServiceSession _autoReconnectTimer]: %@
 => Network appears to be up, we'll try to auto reconnect
 ** Network does not appear to be up, we'll skip this attempt
-[IMDServiceSession _clearAutoReconnectTimer]: %@
<%@:%@:%@>
[%@: <%@:%@:%@:%@:%@>]
ogid
name
filt
sqry
prop
prop001
ptcpts
gpid
CKRecord_GroupPhoto
Transfer not found for group photo guid %@
Transfer not finished for group photo guid %@
Resource not reachable for %@ with error %@
ckAsset not able to initialize from transfer file URL: %@
*********Cannot create record without a salt
@"NSData"16@?0@"IMDHandle"8
Couldn't add group photo to CKRecord. Returning nil.
Syncing new syndication attributes up %@
Invalid record passed to chatWithCKRecord %@
@"IMDHandle"16@?0@"NSData"8
Server Chat record has props001 %@, pulling isAutoDonating and donationDate
Server Chat record had props001 data, but we failed to decode to a dictionary!
Group photo exists, setting up transfer
Failed to move group photo file from %@ to %@, error %@
CKRecord_GroupPhoto+CKRecord
Found transfer: %@
Failed making group photo file class C: %@ with error %@
Group photo stored for chat guid %@ with transfer %@
Failed to write asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@
applying changes on chat %@ state %ld
Local last read timestamp %lld, server record last read timestamp %@
Server Chat record has props001 %@, pulling syndication_type and syndication_ranges
Server Chat record has older props001 %@, local syndicationDate: %lu, skipping
Updating chat:%@ madeChanges %d serverHadMoreRecentData %@
Updating chat %@ record name %@ change tag %@
com.apple.demo-settings
StoreDemoMode
IMDBadgeUtilities
_lastFailedMessageDate saved date %@  last failed message data in DB %@ 
__kMessagesBadgeControllerClearFailureBadgeNotification
com.apple.IMSharedUtilities.IMUserLoginIntentChangedInternal
-[IMDBadgeUtilities updateBadgeForUnreadCountChangeIfNeeded:]
Unread count changed from %d to %d
-[IMDBadgeUtilities updateBadgeForLastFailedMessageDateChangeIfNeeded:]
Failed message date changed from %lld to %lld
-[IMDBadgeUtilities _postBadgeNumber:]
Call notification center to post badge number %@
-[IMDBadgeUtilities _postBadgeNumber:]_block_invoke
Notification Center post badge number with error: [%@]
-[IMDBadgeUtilities _postBadgeString:]
Call notification center to post badge string %@
-[IMDBadgeUtilities _postBadgeString:]_block_invoke
Notification Center post badge string with error: [%@]
_shouldShowFailureString _showingFailure %@ _isUnexpectedlyLoggedOut %@ 
Alias
-[IMDBadgeUtilities _clearFailureBadge]
Clearing failure badge, old value = %@
SuppressingReceiveSoundMessageGUIDs
-[IMDBadgeUtilities _cacheFailureDate:]
Cached failure id %lld    alert failure id %lld
com.apple.imdbadgeutilities
lastMadridFailureID
Clear failure badge notification
Unexpected log out dependent value changed
Device does not support FaceTime, not registering TUConversation delegate
Setting up conversation manager for imagent
TUConversation registered
Completed conversation manager setup for imagent
Chats count: %@
chat handle %@ vs conversation handle %@
@16@?0@"TUConversationMember"8
We mapped a chat %@ to a TUConversation with messagesGroupUUID %@ for chat groupID %@
While groupID matched, Messages participants (%@) did not equal TUConversation remoteMembers (%@)
While groupID matched, Messages participants (%@) count did not equal TUConversation remoteMembers (%@)
Attempting to map 1x1 chat for conversation: %@
v24@?0@"TUConversation"8^B16
Not able to find lastAddressedLocalHandle, falling back to account's loginID
Conversation initiator handle value %@
Not creating IMTUConversationItem - likely a nil lastAddressedHandle on chat: %@ or nil handles in conversation: %@
TUConversation UUID %@ for conversation %@
Callback for addedMembersLocally conversation: %@ member: %@
Found chat to potentially add members to: %@
ChatRegistry_CallManagement
@"NSString"16@?0@"TUConversationMember"8
This is a lightweight member - skipping: %@
IMDChatRegistry_CallManagement
Destination is registered for iMessage, adding to group: %@
Destination is NOT registered for iMessage, skipping adding to group: %@
Couldn't find chat, trying to create a new one!
Indicating to TU that we are now mapped to a messages group.
CKRecordUtilities
Computed message record name hash %@ from guid %@ and salt %@
Could not compute message record name hash %@ from guid %@ and salt %@ as one or both are nil
<IMDIDSAccount:%p, ID:%@, idsAccount:%@ >
P:%@
E:%@
iMessageBusiness
imessage
********** We don't have an IDSAccount, please file a radar ********** State: service session = %@, accounts = %@
********** We couldn't find an IMDAccount for the IDSAccount, please file a radar ********** State: service session = %@, IDSAccount = %@, accounts = %@
********** Requesting registered URIs but we don't have an IDSAccount, please file a radar ********** State: service session = %@, accounts = %@
-[IMDAppleServiceSession sessionDidBecomeActive]
-[IMDAppleServiceSession sessionWillBecomeInactiveWithAccount:]
AppleServiceSession
IMDAppleServiceSession
%@ callerID - choosing %@ from %@, idsAccount %@
 ** Selected display ID: %@  was not in URIs set: %@
callerURI - No bindings !!, idsAccount %@ registeredURIs %@
CallerID
IDS Account (%@) registered for: %@ but registration status was wrong. Saving for later
IDS Account (%@) not registered for: %@, serviceName: %@, moving on
No backward compatibility message match found %s
Could not find edited message matching backward compatibility message %s. Message cannot be dropped.
Found edited message matching backward compatibility message %s. Message can be dropped.
No plain body found for message %s
__IMDBackwardCompatibilityMessageIdentifier
B32@0:8@16@24
v16@0:8
parser
v16@?0@"NSArray"8
Backward compatibility message %s does not match any edited message in our database.
Backward compatibility message %s matches an existing message %s at message part %ld.
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
IMSharedUtilities
EDITED_MESSAGE_BACKWARD_COMPATIBILITY_FORMAT
EDITED_MESSAGE_BACKWARD_COMPATIBILITY_EDITED
Backward compatibility message prefix is unlocalized in %s
Backward compatibility message format is unlocalized in %s
IMDaemonCoreHelloWorldClass_Impl
sharedUtilitiesHelloWorld
persistenceHelloWorld
v8@?0
IMDaemonCore.CallManager
Failed to find existing chat for conversation: %s
Invalid call to CallManager's registerChat function for conversation %@
registerChat(for:)
Can't create chat for conversation %@ since the remoteMember %s isn't iMessage-able
Failed to create IMTUConversationItem for conversation %@ on chat %@
Storing conversationItem %@ on chat %@
Not adding IMTUConversationItem since item GUID %s already exists
Found existing item mapping to chatIdentifier: %s
IMDCallManager_Impl
@24@0:8@16
queue
serviceSession
conversationManager
featureFlags
newChatListenerTask
v32@0:8@16@24
Couldn't pick initiator for conversation %@ on chat %@
Not mapping conversation %@ to chat %@ because of remaining handles %s
Received notification that conversation messagesGroupUUID was added: %@
Couldn't find chat for conversation %@
Couldn't find chat for 1-1 conversation with %s, attempting chat creation!
Can't post notification since we couldn't fetch initiator from conversation %@
SharePlay notification will be posted for "%s" app in chat %@ and conversation %s
Received request to post notification for conversation %@ on chat %@
Received notification that conversation was added: %@
v12@?0B8
Received invalid object type from IMDChatAddedNotification %s
Notified that chat was added %@
Notified that all IMDChats are loaded.
Waiting for new chats 
Couldn't find conversation for chat %@
TUConversationManager registered
TUConversationManagerDelegate
v40@0:8@16@24@32
v44@0:8@16@24Q32B40
v48@0:8@16@24@32@40
v48@0:8@16@24Q32@40
v36@0:8@16@24B32
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversation"32
v32@0:8@"TUConversationManager"16@"NSArray"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"TUConversationManager"16@"TUConversation"24Q32B40
v32@0:8@"TUConversationManager"16@"NSString"24
v48@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationMember"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSData"32
v40@0:8@"TUConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v48@0:8@"TUConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v36@0:8@"TUConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"TUConversationManager"16@"NSError"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v28@0:8@"TUConversationManager"16B24
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
B24@0:8@"Protocol"16
@"NSString"16@0:8
com.apple.Messages.IncomingClientConnectionListenerWorkloop
Resuming XPC listener for %s
Invalidating XPC listener for %s
IMDaemonCore.IncomingClientConnectionListener
init()
IMDIncomingClientConnectionListener
$defaultActor
machServiceName
allowedEntitlements
listener
clients
requestHandlers
clientConnectionWorkloop
Removing client %s
ClientConnection
v24@?0:8@?<v@?@>16
Resumed connection for PID %d
Configuring XPC connection for %s from PID %d
Connection invalidated for PID %d
Connection interrupted for PID %d
Client %d does not have any of allowed entitlements %s, invalidating connection
Incoming XPC connection for %s
Client %d has entitlement %s
No required entitlements have been specified, allowing all clients
NSXPCListenerDelegate
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
IMDaemonProtocol
v24@0:8Q16
v20@0:8I16
B24@0:8@16
IMDaemonAccountsProtocol
v28@0:8B16@20
v24@0:8@"NSArray"16
v32@0:8@"NSString"16@"NSDictionary"24
v40@0:8@"NSString"16@"NSDictionary"24@"NSString"32
v24@0:8@"NSString"16
v40@0:8@"NSString"16@"NSString"24@"NSString"32
v28@0:8I16@"NSString"20
v32@0:8@"NSArray"16@"NSString"24
v28@0:8B16@"NSString"20
v32@0:8@"NSString"16@"NSString"24
IMDaemonAnyProtocol
v48@0:8@16Q24@32@?40
v44@0:8@16@24C32@36
v40@0:8@16q24@?32
v44@0:8@16C24@28@36
v32@0:8@16q24
v32@0:8@16B24B28
v28@0:8@16B24
v40@0:8@16@24@?32
v40@0:8@16q24@32
v48@0:8@"NSString"16Q24@"NSDictionary"32@?<v@?B@"NSDictionary">40
v48@0:8@"NSString"16Q24@"NSDictionary"32@?<v@?B@"IMXPCDictionary">40
v32@0:8@16@"NSString"24
v44@0:8@"NSString"16@"NSArray"24C32@"NSArray"36
v40@0:8@"NSString"16q24@?<v@?B>32
v44@0:8@"NSArray"16C24@"NSArray"28@"IMMessageItem"36
v32@0:8@"NSString"16q24
v24@0:8@"NSDictionary"16
v44@0:8@"NSArray"16C24@"NSArray"28@"NSString"36
v32@0:8@"NSSet"16@"NSArray"24
v24@0:8@"NSSet"16
v24@0:8@"IMNickname"16
v40@0:8@"NSString"16@"NSData"24@"NSString"32
v32@0:8@"NSDictionary"16@"NSArray"24
v24@0:8@"NSURL"16
v32@0:8@"NSString"16B24B28
v48@0:8@16@"NSString"24@"NSString"32@"NSString"40
v28@0:8@"NSString"16B24
v40@0:8@"IMCollaborationNoticeTransmission"16@"NSSet"24@?<v@?B>32
v40@0:8@"NSString"16q24@"NSString"32
IMDaemonAutomationProtocol
v56@0:8@16@24@32@40@48
v80@0:8@16@24@32@40@48@56q64@72
v48@0:8B16@20@28B36@40
v28@0:8@16i24
v56@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSString"48
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSString"48@"NSDate"56q64@"NSString"72
v40@0:8@"NSDictionary"16@"NSDictionary"24@"NSArray"32
v32@0:8@"NSDictionary"16@"NSString"24
v48@0:8B16@"NSString"20@"NSString"28B36@"NSString"40
v28@0:8@"NSString"16i24
v32@0:8q16@"NSString"24
IMDaemonBuddyListProtocol
v36@0:8B16@20@28
v36@0:8B16@"NSString"20@"NSString"28
IMDaemonChatFileTransferProtocol
v52@0:8@16@24C32@36@?44
v52@0:8@16C24@28@36@44
v52@0:8@"NSString"16@"NSArray"24C32@"NSArray"36@?<v@?B>44
v52@0:8@"NSArray"16C24@"NSArray"28@"NSString"36@"NSString"44
IMDaemonChatMessageHistoryProtocol
v84@0:8@16@24C32@36q44@52@60@68@?76
v84@0:8@16@24@32C40@44q52q60@68@?76
v68@0:8@16@24C32@36q44@52@?60
v60@0:8@16@24C32@36q44@?52
v68@0:8@16C24@28@36@44@52@60
v56@0:8@16@24C32@36B44@?48
v84@0:8@16C24@28q36@44@52@60@68@76
v84@0:8@16@24C32@36q44q52@60@68@76
v56@0:8@16C24@28@36@44B52
v60@0:8@16C24@28q36@44@52
v68@0:8@16C24@28q36@44@52@60
v84@0:8@"NSString"16@"NSArray"24C32@"NSArray"36q44@"NSString"52@"NSString"60@"NSString"68@?<v@?@"NSArray"@"NSArray">76
v84@0:8@"NSString"16@"NSString"24@"NSArray"32C40@"NSArray"44q52q60@"NSString"68@?<v@?@"NSArray"@"NSArray"BB>76
v68@0:8@"NSString"16@"NSArray"24C32@"NSArray"36q44@"NSString"52@?<v@?@"NSArray"@"NSArray">60
v52@0:8@"NSString"16@"NSArray"24C32@"NSArray"36@?<v@?@"NSArray">44
v60@0:8@"NSString"16@"NSArray"24C32@"NSArray"36q44@?<v@?@"NSArray">52
v52@0:8@"NSString"16@"NSArray"24C32@"NSArray"36@?<v@?Q>44
v68@0:8@"NSArray"16C24@"NSArray"28@"NSString"36@"NSString"44@"NSString"52@"NSString"60
v56@0:8@"NSString"16@"NSArray"24C32@"NSArray"36B44@?<v@?Q>48
v40@0:8@"NSArray"16@"NSDate"24@"NSString"32
v84@0:8@"NSArray"16C24@"NSArray"28q36@"NSString"44@"NSString"52@"NSString"60@"NSString"68@"NSString"76
v84@0:8@"NSString"16@"NSArray"24C32@"NSArray"36q44q52@"NSString"60@"NSString"68@"NSString"76
v56@0:8@"NSArray"16C24@"NSArray"28@"NSString"36@"NSString"44B52
v60@0:8@"NSArray"16C24@"NSArray"28q36@"NSString"44@"NSString"52
v68@0:8@"NSArray"16C24@"NSArray"28q36@"NSString"44@"NSString"52@"NSString"60
IMDaemonChatModifyReadStateProtocol
v52@0:8@16C24@28@36q44
v56@0:8@16C24@28@36q44B52
v36@0:8@16C24@28
v52@0:8@"NSArray"16C24@"NSArray"28@"NSArray"36q44
v56@0:8@"NSArray"16C24@"NSArray"28@"NSArray"36q44B52
v36@0:8@"NSArray"16C24@"NSArray"28
IMDaemonChatProtocol
v32@0:8@16@?24
v48@0:8@16@24q32@?40
v52@0:8@16@24@32C40@?44
v72@0:8@16@24q32@40@48@56@64
v52@0:8@16@24@32C40@44
v60@0:8@16@24@32@40C48@52
v68@0:8@16@24@32@40@48@56C64
v48@0:8@16@24q32@40
v32@0:8@"NSString"16@?<v@?@"NSArray">24
v32@0:8@"NSPredicate"16@?<v@?@"NSArray">24
v48@0:8@"NSPredicate"16@"NSDate"24q32@?<v@?@"NSArray">40
v52@0:8@"NSArray"16@"NSString"24@"NSString"32C40@?<v@?@"NSArray">44
v32@0:8@"NSArray"16@?<v@?@"NSArray">24
v24@0:8@"IMMessageItem"16
v48@0:8@"IMMessageItem"16@"NSIndexSet"24@"NSDictionary"32@"NSDate"40
v32@0:8@"IMItem"16@"NSString"24
v72@0:8@"NSString"16@"NSString"24q32@"NSString"40@"NSString"48@"NSString"56@"NSString"64
v52@0:8@"IMMessageItem"16@"NSString"24@"NSString"32C40@"NSString"44
v32@0:8@"IMSyndicationAction"16@"NSArray"24
v48@0:8@"NSData"16@"NSArray"24@"NSString"32@"NSString"40
v40@0:8@"NSData"16@"NSArray"24@"NSString"32
v60@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40C48@"NSString"52
v44@0:8@"NSString"16@"NSString"24C32@"NSString"36
v48@0:8@"NSNumber"16@"NSDictionary"24@"NSString"32@"NSString"40
v68@0:8@"NSNumber"16@"NSDictionary"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56C64
v24@0:8@"IMCollaborationNotice"16
v32@0:8@"NSPredicate"16@"NSString"24
v48@0:8@"NSPredicate"16@"NSDate"24q32@"NSString"40
v52@0:8@"NSArray"16@"NSString"24@"NSString"32C40@"NSString"44
v40@0:8@"NSArray"16@"NSString"24@?<v@?B@"NSDictionary">32
IMDaemonChatSendMessageProtocol
v76@0:8@16@24q32Q40@48C56@60@68
v84@0:8@16@24@32C40@44@52@60@68@76
v32@0:8@"IMMessageItem"16@"NSString"24
v76@0:8@"IMMessageItem"16@"IMMessageItem"24q32Q40@"NSString"48C56@"NSString"60@"NSAttributedString"68
v84@0:8@"NSString"16@"NSArray"24@"NSString"32C40@"NSString"44@"NSString"52@"NSString"60@"NSDictionary"68@"NSString"76
v60@0:8@"NSDictionary"16@"IMMessageItem"24@"NSString"32@"NSString"40C48@"NSString"52
v52@0:8@"NSString"16@"NSString"24@"NSString"32C40@"NSString"44
v52@0:8@"NSDictionary"16@"NSString"24@"NSString"32C40@"NSString"44
IMDaemonCloudSyncProtocol
v24@0:8q16
IMDaemonFileTransferProtocol
v48@0:8@16@24B32B36q40
v44@0:8@16@24@32B40
v48@0:8@"NSString"16@"NSString"24B32B36q40
v44@0:8@"NSString"16@"NSString"24@"NSArray"32B40
IMDaemonFileProviderProtocol
v32@0:8@"NSArray"16q24
IMDaemonManageStatusProtocol
IMDaemonModifyReadStateProtocol
v32@0:8@"NSString"16@"NSDate"24
IMDaemonVCACProtocol
v56@0:8@16I24I28@32@40@48
v48@0:8@"NSString"16@"NSDictionary"24@"NSString"32@"NSString"40
v56@0:8@"NSString"16@"NSDictionary"24@"NSString"32@"NSNumber"40@"NSString"48
v48@0:8@"NSData"16@"NSString"24@"NSString"32@"NSString"40
v56@0:8@"NSString"16I24I28@"NSDictionary"32@"NSString"40@"NSString"48
IMDaemonVCInvitationsAVObserverProtocol
v48@0:8@16I24@28@36B44
v48@0:8@"NSString"16I24@"NSDictionary"28@"NSString"36B44
IMDaemonVCProtocol
infix associatedValue 
wrappingPairs
No plain text tapback found for message %s
Interpreted plain text tapback %s but could not find original message using infix string
Interpreted plain text tapback %s for %s, attaching to %s with range %s, took %fs
__IMDPlainTextTapbackInterpreterImpl
@32@0:8@16@24
v32@?0@"IMMessagePartDescriptor"8q16^B24
PlainTextTapbacks
Removed a heart from "%@"
Removed a like from "%@"
Removed a dislike from "%@"
Removed a laugh from "%@"
Removed an exclamation from "%@"
Removed a question mark from "%@"
DaemonCallManager
CollaborationNotices
DaemonClientConnections
NSObject
_TtC12IMDaemonCore15DaemonWorkActor
_IMDInternalWorkQueue
v24@0:8@?16
Starting to accept incoming connections
Notifying clients they need to re-request setup
IMDaemonCore.ClientConnectionManager
IMDClientConnectionManager
connectionListener
@20@0:8B16
broadcasterForAllListeners
T@"<IMDaemonListenerAnyProtocol>",N,R
broadcasterForAccountListeners
T@"<IMDaemonListenerAccountsProtocol>",N,R
broadcasterForChatListeners
T@"<IMDaemonListenerChatProtocol>",N,R
broadcasterForBlackholeChatListeners
broadcasterForChatDatabaseListeners
T@"<IMDaemonListenerChatDatabaseProtocol>",N,R
broadcasterForChatCountsListeners
T@"<IMDaemonListenerChatCountsProtocol>",N,R
broadcasterForFileProviderListeners
T@"<IMDaemonListenerFileProviderProtocol>",N,R
broadcasterForAVConferenceListeners
T@"<IMDaemonListenerAVProtocol>",N,R
broadcasterForACConferenceListeners
Broadcasting %s to: %s
IMDaemonListenerProtocol
v28@0:8B16@"NSDictionary"20
IMDaemonListenerChatDatabaseProtocol
IMDaemonListenerChatCountsProtocol
IMDBroadcasterProviding
@"<IMDaemonListenerAnyProtocol>"16@0:8
@"<IMDaemonListenerAccountsProtocol>"16@0:8
@"<IMDaemonListenerServiceProtocol>"24@0:8@"IMDService"16
@"<IMDaemonListenerChatProtocol>"16@0:8
@"<IMDaemonListenerChatProtocol>"24@0:8@"IMDService"16
@"<IMDaemonListenerChatProtocol>"20@0:8B16
@"<IMDaemonListenerChatDatabaseProtocol>"16@0:8
@"<IMDaemonListenerChatCountsProtocol>"16@0:8
@"<IMDaemonListenerFileProviderProtocol>"16@0:8
@"<IMDaemonListenerNotificationsProtocol>"24@0:8@"IMDService"16
@"<IMDaemonListenerAVProtocol>"24@0:8@"IMDService"16
@"<IMDaemonListenerAVProtocol>"16@0:8
IMDaemonListenerAccountsProtocol
v44@0:8B16Q20@28@36
v20@0:8B16
v44@0:8B16Q20@"NSString"28@"NSError"36
v32@0:8@"NSString"16@"NSData"24
v32@0:8@"NSDictionary"16@"NSDictionary"24
v32@0:8@"NSSet"16@"NSSet"24
IMDaemonListenerAnyProtocol
v48@0:8@16Q24Q32Q40
v32@0:8q16@24
v40@0:8@"NSString"16@24@32
v36@0:8@"NSString"16@"NSDictionary"24B32
v32@0:8@"NSArray"16@"NSArray"24
v48@0:8@"NSString"16Q24Q32Q40
v32@0:8q16@"NSError"24
IMDaemonListenerAVProtocol
v56@0:8@16@24I32@36I44@48
v48@0:8@"NSString"16@"NSString"24@"NSDictionary"32@"NSDictionary"40
v48@0:8@"NSString"16@"NSString"24@"NSDictionary"32@"NSData"40
v56@0:8@"NSString"16@"NSString"24I32@"NSDictionary"36I44@"NSDictionary"48
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSDictionary"40
v36@0:8@"NSString"16@"NSString"24B32
IMDaemonListenerChatMessageHistoryProtocol
v56@0:8@16@24@32@40q48
v72@0:8@16@24@32q40q48@56B64B68
v40@0:8@"NSString"16@"IMMessageItem"24@"NSArray"32
v56@0:8@"NSString"16@"NSString"24@"NSArray"32@"NSArray"40q48
v72@0:8@"NSString"16@"NSString"24@"NSArray"32q40q48@"NSArray"56B64B68
v48@0:8@"NSString"16@"NSString"24@"NSArray"32@"NSArray"40
v48@0:8@"NSString"16@"NSString"24@"NSArray"32@"NSNumber"40
IMDaemonListenerChatProtocol
v32@0:8@16d24
v52@0:8@16@24C32@36@44
v36@0:8@16B24@28
v68@0:8@16@24C32@36@44@52@60
v60@0:8@16@24C32@36@44@52
v72@0:8@16@24C32@36@44@52@60B68
v56@0:8@16@24C32@36@44B52
v72@0:8@16@24C32@36@44@52i60@64
v64@0:8@16@24C32@36@44@52i60
v56@0:8@16@24@32@40B48B52
v28@0:8I16@20
v32@0:8@"NSString"16d24
v32@0:8@"NSString"16@"NSNumber"24
v52@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSDictionary"44
v52@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSError"44
v36@0:8@"NSString"16B24@"NSString"28
v32@0:8@"NSString"16@"NSArray"24
v52@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"IMMessageItem"44
v68@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSString"44@"NSString"52@"IMMessageItem"60
v60@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"IMMessageItem"44@"NSNumber"52
v68@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSString"44@"NSString"52@"IMItem"60
v72@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSString"44@"NSString"52@"NSArray"60B68
v52@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"IMItem"44
v56@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"IMItem"44B52
v52@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSArray"44
v44@0:8@"NSString"16@"NSString"24C32@"NSArray"36
v72@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSString"44@"NSString"52i60@"NSArray"64
v64@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSString"44@"NSDictionary"52i60
v40@0:8@"NSArray"16@"NSArray"24@"NSString"32
v32@0:8@"NSArray"16@"NSDictionary"24
v44@0:8@"NSString"16C24@"NSString"28@"NSDictionary"36
v56@0:8@"NSString"16@"NSNumber"24@"NSString"32@"NSString"40@"NSString"48
v56@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40B48B52
IMDaemonListenerFileProviderProtocol
v40@0:8@"NSString"16@"NSString"24@"NSError"32
v32@0:8@"NSURL"16@"NSError"24
IMDaemonListenerNotificationsProtocol
IMDaemonListenerServiceProtocol
v84@0:8@16@24@32@40I48B52@56Q64I72@76
v48@0:8@16I24@28i36@40
v32@0:8@16Q24
v28@0:8@16I24
v84@0:8@"NSString"16@"NSDictionary"24@"NSArray"32@"NSArray"40I48B52@"NSDictionary"56Q64I72@"NSString"76
v48@0:8@"NSString"16I24@"NSString"28i36@"NSDictionary"40
v32@0:8@"NSString"16Q24
v28@0:8@"NSString"16I24
v48@0:8@"NSString"16@"NSString"24@"NSData"32@"NSString"40
v40@0:8@"NSString"16@"NSDictionary"24@"NSDictionary"32
v40@0:8@"NSString"16@"NSArray"24@"NSError"32
v32@0:8@"NSString"16@"NSError"24
v24@0:8@"NSData"16
Unable to save notice, can't retrieve object context
Unable to save notice, error: %s
Saved notice: %@
Unable to get notices, can't retrieve object context
Failed to retrieve notices, error: %s
Retrieved %ld notices for urls (%ld: %s
No URLs provided, unable to retrieve any notices
Unable to get metadata from PersistedCollaborationNotice, %@
Unable to get guidString from PersistedCollaborationNotice, %@
Unable to delete notice, can't retrieve object context
guidString == %@
Failed to delete notice, error: %s
Found %ld notices for guidString: %s
No notices to delete for guidString: %s
Unable to delete notices, can't retrieve object context
Failed to delete notices, error: %s
Successfully deleted %ld notices
No notices to delete
IMDCollaborationNoticeStore
v24@0:8@16
$__lazy_storage_$_persistenceContainer
Successfully deleted notice with guidString: %s, %@
Fatal error
PersistedCollaborationNotice
IMDCollaboration
Unable to generate objectModelURL, aborting.
Unable to resolve collaboration notice directory path %s
collaborationNotices.db
v24@?0@"NSPersistentStoreDescription"8@"NSError"16
Loading store at storeURL: %s with persistenceContainer:%@
Successfully loaded store: %s
Error loading store: %s
com.apple.Messages.ClientConnection
No current client connection when invoking request for %s, ignoring request
_TtC12IMDaemonCore16ClientConnection
unlockedConnection
unlockedCapabilities
unlockedID
unlockedSupportedServices
unlockedRequestHandlers
Rejecting %s for client %s as it has insufficient capabilities %s, needs %s
Receiving message from client with PID: %d id: %s selector: %s
q16@0:8
#16@0:8
@16@0:8
@24@0:8:16
v24@0:8B16B20
_TtC12IMDaemonCore28PersistedCollaborationNotice
IMDaemonCore
date
T@"NSDate",N,D,C
guidString
T@"NSString",N,D,C
metadata
T@"NSData",N,D,C
senderHandle
version
Ts,N,D
%@: Account is restricted, not creating session
%@: Created active session: %@ of service type: %@   (Session class: %@)
%@: Reused existing session: %@
%@: Done setting up session: %@
iMessage service found: %@    accounts: %@
   Empty iMessage accounts, created one: %@
   Added, and moving along
   No account created
   We have iMessage acounts, good to go
No iMessage service found
Activating accounts: %@
Deactivating accounts: %@
*** Removing placeholder account: %@
Created IMDCKSyncState in IMDCKUtilities
will update sync state: %@
broadcasting current sync state: %@
broadcasting final requested update: %@
Loading internal party service with bundle: %@
%@: Loading request for service bundle: %@   Loaded: %@
%@: Loading service bundle: %@   Loaded: %@   identifier: %@
%@: Load success: %@    (Error: %@)
%@: Session class: %@
%@: Service properties: %@
%@: Load failed! Disabling any active accounts  (Error: %@)
   => Disabling: %@
Failed to respond to ST request payloadURL == nil
Failed to respond to ST request requestID == nil
Failed to respond to ST request with answer: %@ error: %@
                                        remoteHost: %@
                            isDataConnectionActive: %@
                                       isReachable: %@
                                          isOnCall: %@
                  supportsSimultaneousDataAndVoice: %@
                            isImmediatelyReachable: %@
                               awaitingDataContext: %@
Latest item time is nil, can't update chat's lastTUConversationCreatedDate! item: %@
Cache miss for subscription validation token, not including token on this message
Error fetching subscription validation tokens for handle handleID: %@ Error: %@
Forward declared API is not available, subscriptionValidationTokenForHandle:completion:
Error fetching subscription validation token for handle handleID: %@ Error: %@
Error validating subscription validation token: %@
Received an unknown validity response, ignoring.
Received an invalid validity response, attempting to fix by potentially re-inviting senderHandleID: %@ fromHandleID: %@
Forward declared API is not available, validatePersonalStatusSubscriptionMatchesSubscriptionValidationToken:fromSender:completion:
Invalid state transition attempted %@ -> %@
Invalid state transition attempted %@ -> Complete
Failed to fetch moment share from %@ for message %@ with CMMstate %@
Error fetching moment share from %@. Error: %@
Encountered indefinite failure for moment share %@. Clearing ingestion state state and setting CMMState back to registered for message %@
Moment share %@ has a context in state %@ and needs to reset transfers
Failed to accept the share at url: %@, error: %@ for message %@
Scheduling retry of moment share fetch after %{public}@ seconds
Accept failed too many times for moment share %@. Giving up
Attempted to accept a moment share that is in an unknown state %@
Regenerating transfers for a moment share is not supported
Error setting syndication identifier to %@ on asset with UUID %@: %@
Message %@: Failed request for resource file URLs for asset: %@, error: %@
Failed to create temporary directory: %@
Failed to remove existing item from temporary directory: %@
Failed to copy item to temporary directory: %@
Failed copy photo/video URL: %@, error: %@
Failed copy of video complement URL: %@, error: %@
Failed fetch for resources to share for asset: %@, error: %@
Failed copy of file URLs: %@, error: %@
Failed export for asset: %@, error: %@
Failed to create export request for asset: %@, error: %@
Unable to mark message %@ as completed when it should be
Missing transfer map for message %@
Unexpected number of curated assets for moment share: %{public}@
Target count requested before a moment share has been fetched for message %@
Unknown fetch type for moment share %@. This may lead to issues ingesting the moment share
syncing finished
clearing all sync states
Set starting periodic sync
Set starting initial sync
Setting controller sync type to %@ for record type: %@
Key value store will update: %@
Updating syncing to: %@
Key value store did update value: %@
broadcasting sync state changed event: %@
Account in need of repair detected, setting sync error
Failed to respond to Family invite payloadURL == nil
Failed to respond to Family invite inviteUrl == nil
%s: Bailing due to empty handle set. This could mean we attempted to send a notice to ourselves.
%s: Bailing because collaboration membership (%@) exceeds the fanout threshold (%@).
Unable to create noticeMessage to send, aborting.
Failed to send Collaboration Notice with error: %@
%s: Bailing receive notice. Zero length fromHandle. Dropping message
%s: Bailing receive notice for highlightEvent generated by self (%@). Dropping message
Error fetching local user availability for contact. Error: %@
Error querying DND state: %@
DND state is nil
Chunk contained no valid message guids, stopping chunking.
Error retrieving allowed auto reply audience. Error: %@
Error retrieving allowed custom auto reply message. Error: %@
Missing last sent date for chatID %@
Nickname data loading has previously caused imagent to crash, deleting all handled and pending nickname data to allow imagent to properly handle future nickname changes.
SyndicationAction is nil when attempting to update a message
MessageGUID is nil when attempting to update a message
MessageItem is nil when attempting to update a message
SyndicationRange is nil when attempting to update a message
Updated syndication ranges for message: %@
Did NOT update syndication ranges for message: %@
New Range:
Original Ranges:
IMDMessageRecordRef was not created for %@
IMMessageItem was not created for %@
Record of itemType TUConversation did not recover as IMTUConversationItem record: %@ recovered as: %@
Failed to get a chat for message to be marked as unread: %@
Failed to find message to mark as unread for GUID:%@
Will delete old ack %@: %@: %lld
Will NOT delete old ack %@: %@: %lld
Edited message contains a file transfer not found in original message. FileTransferGuid: %@
Nil syndication date parameter
Syndication Date (%@ vs %@) is in the past. Not setting syndication type %ld for chat: %@
Setting syndication type to: %ld, syndication date to: %@, for chat: %@
Should never have nil modification date with non-default autoDonationBehavior
handle: %@  account: %@  chatIdentifier: %@  guid: %@
handles: %@  account: %@  chatIdentifier: %@  guid: %@
room: %@  account: %@  chatIdentifier: %@  guid: %@
Could not derive message item from legacy GUID %@
ASSERTION FAILED: %s is unexpectedly nil in "%s" at line %d [%@]
Deleted chat in %f seconds (%@) 
Updated chat with GUID: %@ donation setting to %@ with SyndicationAction: %@
Chat %@ not updated with incoming SyndicationAction: %@
SyndicationAction is nil when attempting to update IMDChat: %@
Error persisting noticeEventHistory, error: %@
Received sendSyndicationAction!.
error: %d  message: %@  force error: %@
Could not find message to update with message editing unsupported handleIDs. GUID: %@
Could not find message to update with message editing error. GUID: %@
Could not find message to update after succesfully sending edit of message. GUID: %@
Message had previous failed deliveries for message part edits. This edit delivery was successful. Clearing previous failed part delivery. GUID: %@
message: %@
Failed to find chat for sent SyndicationAction: %@
Replacing previous message acknowledgements with new acknowledgment for sent message; sender: '%@':'%@'
name: %@   fromID: %@  toIdentifier:%@  identifier: %@ style: %d
messages: %@
Automatically saving message sent from linked device: %@
Expire message sent from linked device: %@
Found existing message: %@
Date last call ended: %@
Looking for a similar message %f seconds back
Found similar message? %@
 enableTelemetry=YES 
IncomingMessage
Replacing previous message acknowledgements with new acknowledgment for received message; sender: '%@':'%@':'%@'
com.apple.messages.AttachmentDownload
Could not find a session for iMessage service
Couldn't upgrade 1:1 chat to Group chat for conversation %@
Can't upgrade from 1:1 chat to Group chat -- Invalid chat style: %c
Failed to find/create chat for conversation %@
%@ - write account defaults: %@
writeAccountDefaults - Started with %@ as the login ID
writeAccountDefaults - Setting %@ as the login ID
writeAccountDefaults - Removing login ID %@
Adding registration delegate for account %@
IMDAccount added %@, adding corresponding IDSAccount %@
IMDAccount removed %@, removing corresponding IDSAccount %@
Enabling IDSAccount %@
Disabling IDSAccount %@
Received account added %@
Received account updates %@
Received accountRemoved %@
** Received account removed for account: %@, but we can't find an account for it
Received accountEnabled %@
** Received account enabled for account: %@, but we can't find an account for it
Received accountDisabled %@
** Received account disabled for account: %@, but we can't find an account for it
IMDIDSService received registration status changed: %@ (%@)
IMDIDSService received aliases changed to %@: %@ (%@)
IMDIDSService received vetted aliases changed: %@ (%@)
IMDIDSService received profile changed to %@: %@ (%@)
IMDIDSService received login changed to %@: %@ (%@)
IMDIDSService received display name changed to %@: %@ (%@)
 => Registration failed, deactivating...: %@ (%@)
IMDIDSService received refresh registration: %@ (%@)
%@: Initialized!  (Environment: %@)
Dealloc service session: %@
Session activating: %@ on Environment: %@
Session deactivating: %@ on Environment: %@
AppleServiceSession: %@
Client requested re-authenticate (Environment: %@) account: %@
Found account to re-authenticate account: %@
Client requested re-register (Environment: %@)
Found account to re-register account: %@
Client requested de-register (Environment: %@)
Found account to de-register account: %@
Client requested password updated (account: %@)
Found account to update password account: %@
Client updateAuthorizationCredentials (account: %@)
Found account to updateAuthorizationCredentials: %@
Client request to remove aliases: %@ account: %@
Found account to remove aliases: %@  account: %@
Client request to add aliases: %@  account: %@
Found account to add aliases: %@  account: %@
Client request to validate: %@  account: %@
Found account to validate aliases: %@  account: %@
Client request to unvalidate: %@  account: %@
Found account to unvalidate aliases: %@  account: %@
Client request to validate profile info: %@
Found account to validate profile info account: %@
Checking specified caller ID: %@ on account: %@, accountDefaults: %@
Caller ID isn't validated, clearing caller ID settings
 Caller ID is valid, registered and in good shape, moving along
No caller ID specified, moving along
%@ callerID - choosing %@ from %@
$ss12CaseIterableP
So8NSObjectC
yyXlG
So13IMMessageItemC
Sbz_Xx
XDXMT
ScPSg
SgXw
ytIeghHr_
ySSG
ScCySb
So8NSObjectCSg
So17OS_dispatch_queueC
So17IMDServiceSessionC
So21TUConversationManagerC
So14IMFeatureFlagsC
ScTyyt
_yptG
_ypt
ySo8TUHandleCG
So14TUConversationC
SSSg
ypSg
ypGSg
So19SwiftNativeNSObjectC
SaySSG
So13NSXPCListenerC
_pXpG
So15NSXPCConnectionC
yXlIeyBy_
$s12IMDaemonCore33IncomingClientConnectionListeningP
yx_GG
SS4guid_
5rangetSg
SS4guid_
5rangetSgz_Xx
Sgz_Xx
ySS3key_
4typetG
$sSY
$s12IMDaemonCore21ClientRequestHandlingP
IeyBh_
$ss11GlobalActorP
Iegh_
So10IMDServiceCSg
yypG
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
ypIegn_
yypc
yyypcG
So21NSPersistentContainerCSgSg
_pSg
$ss12IdentifiableP
ShySSG
_A7At
So24IMDaemonListenerProtocol_pSg
So24IMDaemonListenerProtocol_p
ySSG
$s12IMDaemonCore24ClientConnectionManagingP
So15NSManagedObjectC
AllCases
parser
editedMesssage
sharedUtilitiesHelloWorld
persistenceHelloWorld
queue
serviceSession
conversationManager
featureFlags
newChatListenerTask
$defaultActor
machServiceName
allowedEntitlements
listener
clients
requestHandlers
clientConnectionWorkloop
wrappingPairs
prefix
suffix
associatedValue
parser
location
length
RawValue
rawValue
ActorType
connectionListener
rawValue
ArrayLiteralElement
RawValue
Element
$__lazy_storage_$_persistenceContainer
queue
unlockedConnection
unlockedCapabilities
unlockedID
unlockedSupportedServices
unlockedRequestHandlers
IMDMomentShareIngestionContext
IMDAccount
IMSystemMonitorListener
IMDBroadcastController
IMDMessageHistorySyncTaskLiveFactory
IMDMessageHistorySyncTaskFactory
NSObject
IMDSIMSubscriptionUpdateTracker
IMReadReceiptsMetrics
IMDAccountController
IDSAccountDelegate
Mentions
IMSpamFilterHelper
IMDCKUtilities
IMDCKSyncStateDelegate
IMDMessageHistoryIDSTransactionLogSyncTask
IMDMessageHistorySyncTask
IMDMessageHistoryCKChatSyncTask
IMDCKSyncStatsCollector
IMDClientRequestContext
IMDCKSyncTokenStore
IMDService
IMDScreenTimeAskReponseHandler
IMDMessageActiveDevice
IMDaemonCoreHelloWorldClass
IMDOneTimeCodeManager
IMDSoundUtilities
IMDMessageProcessingController
IMDSpamMessageCreator
IMDWorkQueue
IMDServiceSession
IMConnectionMonitorDelegate
IMServiceSessionProtocol
IMDSpamController
IMDBackwardCompatibilityMessageIdentifier
IMDCKExitManager
IMDRecordZoneManager
APSConnectionDelegate
IMDCKMessageSyncCKOperationFactory
IMDAvailabilityVerificationManager
SKStatusSubscriptionServiceDelegate
IMDAvailabilityVerificationTokens
IMDLocalDaemon
IMDDistributedNotificationXPCEventStreamHandler
IMDTransferDictionaries
IMDChatVocabularyUpdater
INSpeakable
IMDLegactDTController
IDSServiceDelegate
IMDCallerIDUtilities
IMDMomentShareManager
PHPhotoLibraryChangeObserver
IMDCallManager
IMStateLoggable
IMDCKMockRecordKeyZone
DeferredSavingAdditions
IMDCKAttachmentSyncController
IMDCKSyncState
IMKeyValueCollectionDelegate
IMDMessageHistoryFirstUnlockReplaySyncTask
IMDFamilyInviteReponseHandler
IMDPlainTextTapbackInterpreter
IMLegacyAdditions
Hubble
IMDFileTransferCenter
IMPowerLogChatDescription
IMDCKAttachmentSyncCKOperationFactory
IMDExposureNotificationManager
IMDQuickSwitchController
IMDCollaborationNoticeDispatcher
IMItem_CKRecord
IMDCKCacheDeleteManager
IMDAvailabilityAutoReplier
IMDAutoReplying
IMDCKMockDatabase
IMDNotificationResponseUtilities
UNUserNotificationCenterDelegate
IMDCKChatSyncCKOperationFactory
IMDServiceController
IMDNicknameController
IMDMessageSortOrderAssigner
IMDMessageStore
IMFocusStateManagerDelegate
IMDPhotosSyndicationLibraryChangeListener
IMDChat
IMDCKRecordSaltManager
IMDChatRegistry
IMDCKDatabaseManager
CKRecord_IMDaemonCore
IMDCKMockRecordZone
IMDCKRampManager
IMDDaemonPropertyManager
IMDInconsistency
IMDAttachmentStore
IMDCKAbstractSyncController
IMDDeletePartsHelper
MessageProcessing
IMDChatStore
IMDLocationSharingController
IMDCKMessageSyncController
IMDCKRecoverableMessageSyncController
IMDaemonCoreMessageReceivedTimingAdditions
IMDaemonCoreIncomingMessageTracking
IMDInvocationForwarder
SyndicationActions
IMDCollaborationNoticeRateLimiter
IMFileTransfer_CKRecord
IMDReplayController
CloudKit
IMDCKSyncController
IMDXPCEventStreamHandlerDelegate
IMDCKAbstractSyncControllerDelegate
IMMessagesToTrack
IMDServiceSession_Chat
IMDiMessageIDSDelegateHandlerRegistry
IMTransferServicesController_PreviewGeneration
IMDCKInitialAttachmentSyncController
IMDMessageHistorySyncController
IMDCKChatSyncController
IMDCollaborationNoticeController
IMDMessagePTask
IMDStickerRegistry
IMDRecentsController
IMDServiceSession_BuddyList
IMDCKUpdateSyncController
IMDMessagePTaskXPCStore
IMDMessagePTaskStore
Messages
IMDServiceSession_Base
IMDReplayStorageIterationContext
IMDReplayStorageController
IMDCKInitialMessageSyncController
IMDXPCEventStreamHandler
IMDServiceSession_Firewall
IMDServiceSession_LoginManagement
IMDHandle
IMDServiceSession_MessageReplay
IMDChat_CKRecord
IMDBadgeUtilities
IMDChatRegistry_CallManagement
TUConversationManagerDelegate
CKRecordUtilities
IMDSpotlightIndexDelegate
CSSearchableIndexDelegate
IMDIDSAccount
IMDIDSService
IDSAccountControllerDelegate
IDSAccountRegistrationDelegate
IMDAppleServiceSession
stringWithFormat:
init
addEntriesFromDictionary:
removeAllObjects
removeObjectForKey:
initWithURL:message:inChat:
assetUUIDsToFileTransfers
addTransfers:
clearAllTransfers
completeTransferForAssetUUID:
shareURL
message
chat
momentShare
setMomentShare:
assetsFetch
setAssetsFetch:
fetchType
setFetchType:
state
setState:
.cxx_destruct
_assetUUIDsToFileTransfers
_shareURL
_message
_chat
_momentShare
_assetsFetch
_fetchType
_state
T@"NSURL",R,N,V_shareURL
T@"IMMessageItem",R,N,V_message
T@"IMDChat",R,N,V_chat
T@"PHMomentShare",&,N,V_momentShare
T@"PHFetchResult",&,N,V_assetsFetch
Tq,N,V_fetchType
Tq,N,V_state
T@"NSDictionary",R,N
sharedInstance
addListener:
mutableCopy
removeListener:
dealloc
loginID
rangeOfString:
service
serviceSupportsAuthorization
numberWithBool:
dictionaryWithObject:forKey:
writeAccountDefaults:
sharedAccountController
accountID
isAccountActive:
accountDefaults
objectForKey:
boolValue
sharedDaemon
parentalControls
disableAccount:
count
allKeys
countByEnumeratingWithState:objects:count:
isNull
length
sharedProvider
broadcasterForListenersSupportingService:
account:defaultsChanged:
session
accountDefaultsChanged:
isLoading
isManaged
delayedSaveSettings
blockList
allowList
blockingMode
blockIdleStatus
capabilities
serviceLoginStatus
serviceLoginStatusMessage
account:defaults:blockList:allowList:blockingMode:blockIdleStatus:status:capabilities:serviceLoginStatus:loginStatusMessage:
numberWithUnsignedLongLong:
numberWithInt:
buddyProperties
copy
groups
isDisabled
registration
wasDisabledAutomatically
setWasDisabledAutomatically:
mainService
serviceSupportsOneSessionForAllAccounts
existingServiceSessionForService:
setSession:
sessionClass
initWithAccount:service:
internalName
addAccount:
sessionDidBecomeActive
shouldForceAccountsConnected
login
sessionWillBecomeInactiveWithAccount:
isEqualToString:
_registrationInfo
intValue
serviceDisconnectReason
_forceSetLoginStatus:message:reason:properties:
setLoginStatus:message:reason:properties:
setServiceLoginStatus:
setServiceDisconnectReason:
setServiceLoginStatusMessage:
__forceSetLoginStatus:oldStatus:message:reason:properties:account:
systemDidBecomeIdle
systemDidBecomeUnidle
screenSaverDidStart
screenSaverDidStop
screenLocked
screenUnlocked
systemWillSleep
systemDidWake
systemDidEnterMemoryPressure
systemDidLeaveMemoryPressure
systemWillShutdown
systemApplicationDidEnterBackground
systemApplicationWillEnterForeground
systemApplicationDidBecomeActive
systemApplicationWillResignActive
systemApplicationDidSuspend
systemApplicationDidResume
systemApplicationDidSuspendForEventsOnly
systemApplicationDidResumeForEventsOnly
notificationCenterWillAppear
notificationCenterDidDisappear
systemDidStartBackup
systemDidStopBackup
systemDidFinishMigration
systemRestoreStateDidChange
systemDidFastUserSwitchOut
systemDidFastUserSwitchIn
systemDidLogout
systemDidLock
systemDidUnlock
systemScreenDidPowerUp
systemScreenDidPowerDown
systemDidLeaveFirstDataProtectionLock
systemDidLeaveDataProtectionLock
systemDidEnterDataProtectionLock
initWithAccountID:defaults:service:
accountType
setIsManaged:
isActive
canMakeDowngradeRoutingChecks
postAccountCapabilities
accountInfoToPost
createSessionIfNecessary
releaseSession
setRegistrationStatus:error:alertInfo:
registrationStatus
registrationError
registrationAlertInfo
setLoginStatus:message:
setAccountID:
setService:
setManaged:
setLoading:
shouldPublishNowPlaying
setLoginID:
_accountDefaults
_managed
_loading
_shouldPublishNowPlaying
_serviceLoginStatus
_serviceDisconnectReason
_accountID
_service
_session
_serviceLoginStatusMessage
_loginID
loading
TB,N,GisLoading,V_loading
TB,N
TB,R,N,V_shouldPublishNowPlaying
T@"NSString",C,N,V_accountID
T@"NSString",C,N,V_loginID
T@"IMDService",&,N,V_service
T@"IMDServiceSession",&,N,V_session
TI,N,V_serviceLoginStatus
Ti,N,V_serviceDisconnectReason
T@"NSString",C,N,V_serviceLoginStatusMessage
Ti,R,N
T@"NSDictionary",R,&,N
T@"NSDictionary",R,&,N,V_accountDefaults
active
TB,R,N,GisActive
disabled
TB,R,N,GisDisabled
managed
TB,N,GisManaged,V_managed
TB,R,N
Tq,R,N
registerSharedProvider:
T@"<IMDBroadcasterProviding>",R,N
_initWithCKSyncController:accountController:replayController:
_newFirstUnlockReplaySyncTask
_newIDSTransactionLogSyncTask
_newKChatSyncTask
initWithCKSyncController:
initWithReplayController:accountController:
initWithAccountController:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
newSyncTaskForType:
_ckSyncController
_accountController
_replayController
broadcasterForAccountListeners
simSubscriptionsDidChange
sharedTrackerInstance
activeSubscriptionsDidChange
sharedInstanceForBagType:
isInternalInstall
_IMDTrackMetric:ForMessageGUID:
_readReceiptTrackingEnabled
defaultCenter
_daemonWillShutdown:
addObserver:selector:name:object:
idsAccount
removeDelegate:
save
allServices
arrayByApplyingSelector:
isDiscontinued
createDiscontinuedAccount
isIDSBased
serviceDefaults
accountsForService:
serviceRequiresSingleAccount
accountForAccountID:
defaultAccountSettings
serviceProperties
stringGUID
shouldCreateActiveAccounts
activateAccount:
accountsLoadedFromIdentityServices
activeAccountsFromIdentityServices
activateAccounts:
disallowDeactivation
shouldForceAccountsActive
serviceWithName:
_checkPowerAssertion
cancelPreviousPerformRequestsWithTarget:selector:object:
performSelector:withObject:afterDelay:
saveSettings
containsObject:
lastObject
loginWithAccount:
addObject:
setObject:forKey:
enableAccount:
activeAccountsForService:
activeAccountsChanged:forService:
_rebuildOperationalAccountsCache
removeObject:
logout
removeAccount:
deactivateAccounts:
deactivateAccounts:force:
_isAccountActive:forService:
accountAdded:defaults:service:
accountAdded:
isEqualToIgnoringCase:
accounts
addDelegate:queue:
allKeysForObject:
deactivateAccount:force:
removeObjectsForKeys:
accountRemoved:
allValues
caseInsensitiveCompare:
__imArrayByFilteringWithBlock:
activeAccounts
aliasStrings
accountForHandle:
uniqueID
__imArrayByApplyingBlock:filter:
__imFirstObject
_operationalAccounts
isEqualToSet:
_isOperationalForAccount:
serviceSupportsRegistration
profileValidationStatus
serviceName
canSend
_nicknameController
newDeviceDidSignIntoiMessage
deviceSignedOutOfiMessage
broadcasterForAllListeners
networkDataAvailabilityChanged:
account:isActiveChanged:
account:devicesChanged:
account:nearbyDevicesChanged:
account:connectedDevicesChanged:
load
deferredSave
deactivateAccount:
accountsForLoginID:onService:
connectedAccounts
connectedAccountsForService:
connectingAccounts
connectingAccountsForService:
accountAssociatedWithHandle:
accountForIDSAccountUniqueID:
activeSessions
sessionForAccount:
anySessionForServiceName:
setNetworkDataAvailable:
networkDataAvailable
_accounts
_activeAccounts
_operationalAccountsCache
_isLoading
_isFirstLoad
_networkDataAvailable
TB,R,N,V_isLoading
T@"NSArray",R,N
TB,N,V_networkDataAvailable
allObjects
activeAliases
regionID
accountRegionIsCandidateForHawking:
receiverIsCandidateForHawking:
mapID:usingKey:
activeAccountsAreEligibleForHawking
hasActivePhoneAccount
logHandle
truthContainer
truthDatabase
_authenticationController
initWithServerBag:lockDownmanager:deviceSupport:imDefaults:
initWithDomain:
initWithKeyValueStorage:
initWithKeyValueCollection:
setDelegate:
cloudKitSyncingEnabled
setSyncingEnabled:
isSyncingPaused
setSyncingPaused:
setRemovedFromBackup:
didKeyRollPendingCheck
setDidKeyRollPendingCheck:
isKeyRollPending
setErrorToKeyRollingError
syncState
broadcastSyncState
_startBatchChange
syncStateWillUpdate:
_finishBatchChange
fetchCloudKitAccountStatusAndUpdateEligibilityAndNeedsRepairStatusWithCompletion:
clearSyncErrors
broadcastCloudKitStateAfterFetchingAccountStatus
lockdownManager
integerValue
anyChatExistsOnServerWithActivity:completion:
setQualityOfService:
setDiscretionaryNetworkBehavior:
setAutomaticallyRetryNetworkFailures:
setAllowsCellularAccess:
setConfiguration:
messageDatabaseSize
setFetchUserQuotaCompletionBlock:
_truthDatabase
addOperation:
_mininimumServerBagClientValue
isFeatureEnabled
iCloudAccountMatchesiMessageAccount
setFeatureEnabled:
_serverAllowsSync
_mocFeatureEnabled
_isInExitState
serverBag
_resetKeepMessagesSettingandBroadcastToAllDevices
beginInitialSyncWithActivity:
markAllAttachmentsAsNotPurgeable
evalToggleiCloudSettingsSwitch
unsignedIntegerValue
numberWithUnsignedInteger:
_getKeepMessagesValue
_shouldDisplayPopUpForResettingKeepMessages
numberWithInteger:
_allowDestructiveMOCFeaturesBasedOnDSID
_serverAllowsCacheDelete
_serverAllowsRemovalFromBackUp
startTimingForKey:
internalQueue
fetchCloudKitAccountStatusWithCompletion:
stopTimingForKey:
cacheDeleteEnabled
supportsDeviceToDeviceEncryption
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
_truthContainer
accountStatus
_createAccountError:
_checkEligibilityWithAccountInfo:
accountPartition
trackEvent:withCount:
accountInfoWithCompletionHandler:
standardUserDefaults
_accountNeedsRepairOverride
isSyncingEnabled
_primaryiCloudAccountSecurityLevel
setAccountStatus:
setEligibleForTruthZone:
_setEligibleToToggleMiCSwitch:
shouldRepairAccountWithAccountStatus:securityLevel:
setErrorToAccountNeedsRepair
fetchAccountStatusAndUpdateMiCSwitchEligibility
_checkIfEnabledByServerBagOrDefault:
_isLogDumpAllowed
logCollectorAddress
reportMOCDebuggingErrorWithString:internalOnly:initialSync:sendToHandle:
reportMOCDebuggingErrorWithString:internalOnly:initialSync:sendToHandle:reasonString:
shouldLogDumpOnCloudKitError
logDumpAndSendMessageTo:forHours:reason:isInitialSync:requirePreviousPrompt:willSendBlock:
shouldPresentTTROnCloudKitError
_askToTapToRadarWithString:internalOnly:
date
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
trackEvent:
setUsesNotificationCenter:
setRepresentedApplicationBundle:
response
productBuildVersion
stringByAddingURLEscapes
URLWithString:
defaultWorkspace
openURL:configuration:completionHandler:
addUserNotification:listener:completionHandler:
domain
code
userInfo
valueForKey:
removeObjectFromAnalyticSyncDatesDictionaryForKey:
reportMOCDebuggingErrorWithString:internalOnly:initialSync:
clearConnectedToPowerWifiOver20Hours
_shouldiCloudSwitchBeEnabled
_setiCloudSettingsSwitchEnabled:
_accountStore
aa_primaryAppleAccountWithPreloadedDataclasses
setEnabled:forDataclass:
saveVerifiedAccount:withCompletionHandler:
localizedDescription
aa_primaryAppleAccountWithCompletion:
_personIdFromAccount:
_fetchPrimaryAccountWithCompletion:
aa_personID
isEnabledForDataclass:
isDeviceCharging
isDeviceOnWifi
_isSyncingPausedOverride
lastSyncDate
isSyncing
getAnalyticSyncDatesObjectForKey:
initWithCapacity:
recordID
recordName
_deviceActive
timeIntervalSinceDate:
cachedSalt
readServerBagBoolForKey:defaultValue:
shouldReportToRTC
syncReportDictionary
postSyncStateToRTC:category:reportDictionary:
shouldReportToAnalytics
serverAllowsAnalyticDetailsSubmission
exitManager
submitCloudKitAnalyticWithOperationGroupName:analyticDictionary:
deviceActiveString
telemetryReporter
postMessage:category:
setAnalyticSyncDatesDictionaryObject:forKey:shouldOverrideIfExists:
addSyncError:
updateConnectedToPowerWifiIntervalIfConnected
connectedToPowerAndWifiForOver20Hours
stringByAppendingString:
syncReportDictionaryForAttempt:withSuccess:duration:
finalSyncStateFor:
serverAllowsAnalyticSubmission
isCKPartialError:
objectForKeyedSubscript:
setDateFormat:
stringFromDate:
defaultManager
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:
sendLogDumpMessageAtFilePath:toRecipient:shouldDeleteFile:withCompletion:
_showCKLogNotificationWithCompletion:
dumpLogsToFolderAtPath:withFileName:lastHours:predicate:includeCKDebug:withCompletion:
fetchCurrentDeviceIDWithCompletionHandler:
deviceConditionsAllowPeriodicSync
_isRunningInAutomation
logDumpIsExpected
ckStatisticCalculations
PCSReportManateeStatus
aa_primaryAppleAccount
_primaryiCloudAccount
_accountManager
altDSIDForAccount:
_primaryiCloudAccountAltDSID
authKitAccountWithAltDSID:
securityLevelForAccount:
deviceType
deviceIsPhoneOrWatch
dsid
profileID
setCloudKitSyncingEnabled:
autoBugCaptureWithSubType:errorPayload:
writeExitRecordWithDate:completion:
initWithService:
objectForKey:inDomain:
setWithArray:
IMPhoneNumbersEnabledForMultipleSubscriptionDevice
addObjectsFromArray:
_idsAccountController
im_registeredURIs
vettedAliases
calculateAliasesForDefaults
setObject:forKey:inDomain:
restoreFailuresDirectory
im_AKSecurityLevelKey
readAliasesFromDefaults
calculateAndSaveAliasesToDefaults
addConditionChecks:toCriteria:
syncStateDidUpdate:
deviceSupport
imDefaults
broadcastCloudKitState
broadcastCloudKitStateAfterClearingErrors
keyRollPendingStateDidChange
shouldUseDevContainer
shouldUseDevNickNameContainer
shouldForceArchivedMessagesSync
overrideNumberOfChatsToFetch
overrideNumberOfChatsToWrite
isFirstSyncWithActivity:completion:
checkiCloudQuota:
cloudKitSyncDownloadAssetsOnly
serverAllowsMetricSubmission
enableAttachmentMetricCollection
removeFromBackUpAllowed
accountIsVerifiedForMOCAndSafeForCacheDelete
fetchAccountStatusAndUpdateMiCSwitchEligibilityIfNeededOnImagentLaunch
shouldCollectDailyLogDump
shouldCollectDailyLogDumpForRestoreFailures
reportMOCDebuggingErrorWithString:internalOnly:
recordNameForMessageWithGUID:usingSalt:
syncFailureMetricString:isRecoverable:error:
extractServerRecordFromCKServerErrorRecordChanged:
resetLastSyncDate
checkCloudkitEnabledStatusAndToggleiCloudSwitchIfNeeded
fetchiCloudAccountPersonID:
primaryAccountHasiCloudBackupEnabledWithCompletion:
deviceConditions
newfilteredArrayRemovingCKRecordDupes:
newfilteredArrayRemovingCKRecordIDDupes:
lastDeviceBackUpDate
shouldKickOffWriteForSyncType:
isLocalCachedSaltPresent
postSyncStateToCloudKit:
reportZoneCreation:
reportErrorForSyncType:syncStep:response:error:
reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:
findRootCauses:
simplifiedError:
logDumpAndSendMessageTo:forHours:reason:
logDumpAndSendMessageTo:forHours:reason:requirePreviousPrompt:willSendBlock:
logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didStartSync:didFinishSync:didSucceedSyncing:
logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:
logDumpIsNecessaryAfterSync
PCSReportManateeStatusAsync:timeout:
signedIntoiCloudAndiMessageAndiCloudAccountMatchesiMessageAccount
enableMOCIfNeeded
downgradingFromHSA2AndDisablingMOC
eligibleForTruthZoneWithCompletion:
isInCloudKitDemoMode
disableAllDevicesWithCompletion:
setLockdownManager:
setServerBag:
setDeviceSupport:
setImDefaults:
setTelemetryReporter:
useDeprecatedApi
setUseDeprecatedApi:
_didKeyRollPendingCheck
_useDeprecatedApi
_syncState
_lockdownManager
_serverBag
_deviceSupport
_imDefaults
_telemetryReporter
TB,N,V_didKeyRollPendingCheck
T@"IMLockdownManager",&,N,V_lockdownManager
T@"IDSServerBag",&,N,V_serverBag
T@"FTDeviceSupport",&,N,V_deviceSupport
T@"IMDefaults",&,N,V_imDefaults
T@"IMDSyncTelemetryReporter",&,N,V_telemetryReporter
TB,N,V_useDeprecatedApi
T@"IMDCKSyncState",R,N,V_syncState
keyRollPending
TB,R,N,GisKeyRollPending
deviceCharging
TB,R,N,GisDeviceCharging
deviceOnWifi
TB,R,N,GisDeviceOnWifi
setSyncTaskCompletionBlock:
_setupAndBeginSync
dictionaryWithCapacity:
setTaskGroupedByServiceName:
_createProcessBatchBlockWithServiceSession:
_createKnownRecordBlock
_createSyncCompletionBlockForServiceSession:
setBatchProcessingBlock:
setKnownRecordIDsFromList:
setCompletionBlock:
setValue:forKey:
scheduleTransactionLogTask:
replayMessage:
enqueReplayMessageCallback:
startSyncTask:
syncTaskType
accountController
setAccountController:
taskGroupedByServiceName
syncTaskCompletionBlock
_className
_taskGroupedByServiceName
_syncTaskCompletionBlock
T@"IMDAccountController",&,N,V_accountController
T@"NSMutableDictionary",&,N,V_taskGroupedByServiceName
T@?,C,N,V_syncTaskCompletionBlock
_startICloudSyncWithActivity:
beginComingBackOnlineSyncWithActivity:
setInMemorySyncStatistics:
inMemorySyncStatistics
_incrementCountsForColumnSyncedKey:syncedColumnAmountToIncrease:totalColumnAmountKey:totalColumnAmountToIncrease:
refreshWithDBSyncStatistics
currentInMemorySyncStatistics
incrementSyncedChatCount:incrementTotalChatCount:
incrementSyncedMessageCount:incrementTotalMessageCount:
incrementSyncedAttachmentCount:incrementTotalAttachmentCount:
_inMemorySyncStatistics
T@"NSMutableDictionary",&,N,V_inMemorySyncStatistics
currentThread
threadDictionary
exceptionWithName:reason:userInfo:
setObject:forKeyedSubscript:
currentContext
setCurrentContext:
T@"IMDClientRequestContext",&,N
initWithListenerID:auditToken:capabilities:replyProxy:
listenerID
auditToken
replyProxy
_listenerID
_capabilities
_replyProxy
_auditToken
T@"NSString",R,C,N,V_listenerID
T{?=[8I]},R,N,V_auditToken
TQ,R,N,V_capabilities
T@"<IMDaemonListenerProtocol>",R,N,V_replyProxy
migrateKey:fromDatabase:
tokenForKey:
persistToken:forKey:
stringByExpandingTildeInPath
initWithPath:storeName:dataProtectionClass:
dataForKey:error:
deleteDatabase
initForReadingFromData:error:
initWithCoder:
initRequiringSecureCoding:
encodeWithCoder:
encodedData
_copyServicePropertiesFromIMServiceBundle:
synchronizeServiceDefaults
unloadServiceBundle
pathForResource:ofType:
dictionaryWithContentsOfFile:
localizedStringForKey:value:table:
isLoaded
_reallyUnloadServiceBundle
bundleIdentifier
loadAndReturnError:
unload
initWithFormat:
serviceProtocolVersion
_serviceDomain
oldInternalName
loadServiceBundle
principalClass
fileExistsAtPath:
initWithContentsOfFile:
_defaultDefaults
serviceDomain
_serviceDefaultsForDomain:
_oldServiceDomain
array
defaultsChanged:forService:
purgeMemoryCaches
initWithBundle:
accountClass
isLegacy
serviceDefaultsForSetup
clearOneTimeImportAccounts
newAccountWithAccountDefaults:accountID:
supportsDatabase
serviceIgnoresNetworkConnectivity
serviceWantsNullHostReachability
serviceNeedsLogin
serviceNeedsPassword
serviceShouldBeAlwaysLoggedIn
serviceRequiresHost
serviceChatsIgnoreLoginStatus
serviceSupportsPresence
bundle
setServiceProperties:
_bundle
_sessionClass
_internalName
_serviceDefaults
_serviceProperties
_cachedServiceDefaults
_cachedSetupServiceDefaults
_blockPrefWriting
T@"NSDictionary",&,N,V_serviceProperties
T#,R,N
T@"NSBundle",R,&,N,V_bundle
T@"NSString",R,&,N
discontinued
TB,R,N,GisDiscontinued
notification
request
content
componentsWithURL:resolvingAgainstBaseURL:
queryItems
name
value
actionIdentifier
respondToAskForTimeRequestWithIdentifier:answer:error:
canHandleNotificationResponse:userNotificationCenter:
handleNotificationResponse:userNotificationCenter:completionHandler:
idsDestination
_hasReceivedReadReceiptRecently
initWithIDSDestination:latestDate:latestReadReceiptDate:hasReceivedReadReceipt:
shouldSendTypingIndicator
shouldDisplayAttachmentDownloadFailure
shouldDisplayRemoteDecryptionFailure
setIdsDestination:
latestActiveDate
setLatestActiveDate:
hasReceivedReadReceipt
setHasReceivedReadReceipt:
latestReadReceipt
setLatestReadReceipt:
_hasReceivedReadReceipt
_idsDestination
_latestActiveDate
_latestReadReceipt
T@"NSString",&,N,V_idsDestination
T@"NSDate",&,N,V_latestActiveDate
TB,N,V_hasReceivedReadReceipt
T@"NSDate",&,N,V_latestReadReceipt
printGreeting
_swiftImpl
setValidCodes:
setOtcUtilities:
setBroadcasterOverride:
initWithBroadcaster:otcUtilities:
codeInvalidationTimer
invalidate
setCodeInvalidationTimer:
setBroadcaster:
otcUtilities
isValidOneTimeCode:
_setNewCodeAndPrepareInvalidationTimer:
broadcastCodeStatusToClients
broadcaster
validCodes
oneTimeCodesDidChange:
firstObject
broadcasterOverride
arrayWithObjects:count:
consumeCodeWithGuid:
scheduledTimerWithTimeInterval:repeats:block:
startTrackingCode:
_validCodes
_codeInvalidationTimer
_broadcaster
_broadcasterOverride
_otcUtilities
T@"NSArray",&,N,V_validCodes
T@"NSTimer",&,N,V_codeInvalidationTimer
T@"<IMDaemonListenerProtocol>",&,N,V_broadcaster
T@"<IMDaemonListenerProtocol>",&,N,V_broadcasterOverride
T@"IMOneTimeCodeUtilities",&,N,V_otcUtilities
_soundTypeForMessage:
guid
_playSoundType:
_smsSoundsToPlay
_isSMSMessage:
_wasDowngraded:
_isSuppressedForGUID:
_stopSuppressingForGUID:
_isAssociatedMessage:
_isAcknowledgmentMessage:
_isAutoPlay:
isBeingRetried
sharedToneManager
currentToneIdentifierForAlertType:
_playSMSSound
_playAcknowledgmentSentSound
bundleForClass:
URLForResource:withExtension:
flags
associatedMessageGUID
associatedMessageType
playMessageSentSoundIfNeeded:
_installSystemSound:
messageProcessingTaskAdded:
initWithMessagesPTaskStore:
removeObserver:
_scheduleDeferredProcessingWithTimeInterval:
mainThread
_processingTimerFired
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
__im_performBlock:
loadMostRecentMessagePTasks
_indexSpotlightIfNeedForPTask:
deleteAllCompletedTasks
needsProccesingFor:
compeletedTask:
updateTaskFlagsForPTask:
_pref_IMDCoreSpotlightHasMigrated
_xpc_IMDCoreSpotlightAddMessageGUID:
scheduleInitialProcessingCheck
pTaskStore
setPTaskStore:
processingTimer
setProcessingTimer:
_pTaskStore
_processingTimer
T@"<IMDMessagePTaskStore>",&,N,V_pTaskStore
T@"NSTimer",&,N,V_processingTimer
transferForGUID:
type
isTypingMessage
fileTransferGUIDs
plainBody
dataUsingEncoding:
body
string
data
sender
_stripFZIDPrefix
_bestGuessURI
isFromMe
account
time
timeIntervalSince1970
getBytes:length:
dataWithBytes:length:
numberWithDouble:
balloonBundleID
messageSummaryInfo
isSpam
transferForGuid:
_stringForKey:
participants
containsString:
surfURLForIMMessageItem:
metaDataForSurfURL:
isSurfPayment:
hasDataDetectedInformalPayment:
isBlackholed
reportUnknownToIDS:messageID:isBlackholed:messageServerTimestamp:toURI:
enumerateKeysAndObjectsUsingBlock:
messageContainsSurfDD:
payloadData
_enableStrictSecureDecodingMode
decodeObjectOfClasses:forKey:
reportMessageDictionaryForMessages:withLastAddressedHandle:maxMessageLength:isAutoReport:withChat:maxMessagesToReport:totalMessageCount:onlyReportForiMessageService:notifyInternalSecurity:
enqueueWorkBlock:
enqueueBlock:
object
enumerateObjectsUsingBlock:
removeObjectsInArray:
__allServiceSessionsWeakReferenceArray
weakRefWithObject:
__imArrayByApplyingBlock:
allServiceSessions
enableNotifications
lock
_setAutoReconnectTimer
unlock
_managedPrefsNotification:
_networkChanged:
_callMonitorStateChanged:
setWatchesSystemLockState:
__registerNewServiceSession:
removeObserver:name:object:
_processConnectionMonitorUpdate
cancelPreviousPerformRequestsWithTarget:
_abandonSystemProxySettingsFetcher
_abandonPWFetcher
_clearAutoReconnectTimer
_clearConnectionMonitor
setReplyDelegate:
_updateConnectionMonitorFromAccountDefaultsIgnoringProxy:
isUnderFirstDataProtectionLock
_updateWatchdogTimerWithInterval:
clear
initWithRemoteHost:delegate:
connectionMonitorDidUpdate:
remoteHost
goConnectedWithLocalSocketAddress:remoteSocketAddress:
server
initWithHost:port:delegate:
retrieveProxySettings
stringByRemovingWhitespace
_updateConnectionMonitorWithRemoteHost:
_reconnectIfNecessaryWithAccount:
accountShouldBeAlwaysLoggedIn
_doLoginIgnoringProxy:withAccount:
isImmediatelyReachable
overrideNetworkAvailability
goDisconnected
logoutServiceSessionWithAccount:
isDataConnectionActive
isOnTelephonyCall
supportsSimultaneousVoiceAndDataRightNow
processNetworkDataAvailabilityChange:
_setPendingConnectionMonitorUpdate
_processPotentialNetworkChange
isNetworkUp
autoReconnectWithAccount:
disableServiceSession:
allowedAsChild
lowercaseString
canonicalFormOfID:
account:capabilitiesChanged:
broadcasterForChatListenersSupportingService:
broadcasterForBlackholeChatListenersSupportingService:
broadcasterForChatListeners
broadcasterForSentMessageListenersSupportingService:
arrayWithObjects:
initWithTargets:
broadcasterForAVConferenceListenersSupportingService:
broadcasterForACConferenceListenersSupportingService:
broadcasterForVCConferenceListenersSupportingService:
broadcasterForNotificationListenersSupportingService:
endMessageSuppression
null
initWithObjectsAndKeys:
updateProperties:chat:style:
chatForChatIdentifier:style:
properties
chat:propertiesUpdated:
blocklistGroupId:
broadcasterForChatListenersWithBlackholeStatus:
_blocklistIfNeededForChatDict:
chatRegistry
existingChatWithGUID:
existingChatsWithGroupID:
permanentlyDeletedRecoverableMessagesForChatsWithGUIDs:deletedChatGUIDs:
permanentlyDeleteRecoverableMessagesInChatsWithGUIDs:completionHandler:
moveMessagesInChatsWithGUIDsToRecentlyDeleted:deleteDate:
_updateLastMessageTimeStampForChat:broadcaster:
movedMessagesToRecentlyDeletedForChatsWithGUIDs:queryID:
chatForMessageGUID:
moveMessagesWithGUIDsToRecentlyDeleted:deleteDate:
historicalMessageGUIDsDeleted:chatGUIDs:queryID:
recoverMessagesWithChatGUIDs:
recoveredMessagesFromRecentlyDeletedForChatsWithGUIDs:
objectAtIndexedSubscript:
messageWithGUID:
_convertDeletedPartsDict:toIndexSet:toMap:
_messageItemWithIndexesDeleted:subRangesToDeleteMapping:deleteSubject:deleteTransferCallback:createItemCallback:fromMessageItem:
sharedDatabase
storeRecoverableMessagePartWithBody:forMessageWithGUID:deleteDate:
_enumerateBodyByPartsWithIndexesDeleted:rangesDeletedMap:block:
account:chat:style:chatProperties:messageUpdated:
rowID
lastMessageForChatWithRowID:
setLastMessage:
lastMessage
timeIntervalSinceReferenceDate
setLastMessageTimeStampOnLoad:
sharedFeatureFlags
isAVLessSharePlayEnabled
lastTUConversationItemForChat:
setLastTUConversationCreatedDate:
lastMessageTimeStampOnLoad
chat:lastMessageTimeStampOnLoadUpdated:
autoLogin
autoReconnect
logoutWithAccount:
holdBuddyUpdates
resumeBuddyUpdates
authenticateAccount:
registerAccount:
unregisterAccount:
requestGroups
changeGroups:
changeGroup:changes:
renameGroup:to:
acceptSubscriptionRequest:from:
requestSubscriptionTo:
startWatchingBuddy:
stopWatchingBuddy:
requestProperty:ofPerson:
setValue:ofProperty:ofPerson:
updateAuthorizationCredentials:token:account:
joinChatID:handleInfo:identifier:style:joinProperties:
joinChatID:handleInfo:identifier:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:
leaveChatID:identifier:style:
leaveiMessageChatID:identifier:style:
removeChatID:identifier:style:
invitePersonInfo:withMessage:toChatID:identifier:style:
invitePersonInfoToiMessageChat:withMessage:toChatID:identifier:style:
sendGroupPhotoUpdate:toChatID:identifier:style:account:
retryGroupPhotoUpload:toChatID:identifier:style:account:
removePersonInfo:chatID:identifier:style:
removePersonInfoFromiMessageChat:chatID:identifier:style:
declineInvitationToChatID:identifier:style:
updateDisplayName:fromDisplayName:forChatID:identifier:style:
eagerUploadTransfer:recipients:
eagerUploadCancel:
sendMessage:toChatID:identifier:style:
sendJunkReportMessage:
sendReadReceiptForMessage:toChatID:identifier:style:
sendDeliveredQuietlyReceiptForMessage:forIncomingMessageFromIDSID:toChatGuid:identifier:style:withWillSendToDestinationsHandler:
sendNotifyRecipientCommandForMessage:toChatGuid:identifier:style:
sendPlayedReceiptForMessage:toChatID:identifier:style:
sendSavedReceiptForMessage:toChatID:identifier:style:
noteMessagesMarkedAsReadForChatWithGUID:
sendEditedMessage:previousMessage:partIndex:editType:toChatIdentifier:style:account:backwardCompatabilityText:
sendSyndicationAction:toChatsWithIdentifiers:
setProperties:ofParticipant:inChatID:identifier:style:
setBlockingMode:
setAllowList:
setBlockList:
setBlockIdleStatus:
passwordUpdatedWithAccount:
importMessage:isRead:
sendCommand:withProperties:toPerson:
sendCommand:withProperties:toPerson:toChatID:identifier:style:
sendDeleteCommand:forChatGUID:
sendRecoverCommand:forChatGUID:
requestVCWithPerson:properties:conference:
respondToVCInvitationWithPerson:properties:conference:
cancelVCRequestWithPerson:properties:conference:reason:
sendCounterProposalToPerson:properties:conference:
sendVCUpdate:toPerson:conference:
sendAVMessageToPerson:sessionID:type:userInfo:conference:
relay:sendInitateRequest:toPerson:
relay:sendUpdate:toPerson:
relay:sendCancel:toPerson:
addAliases:account:
removeAliases:account:
validateAliases:account:
unvalidateAliases:account:
validateProfileWithAccount:
enrollDeviceInSMSRelay:
unEnrollDeviceInSMSRelay:
enrollSelfDeviceInSMSRelay
closeSessionChatID:identifier:style:
sendNicknameUpdatesToPeerDevices:toDestinations:
sendNicknameInfoToChatID:
reflectMarkUnreadToPeerDevicesForMessageGUID:
sendDeliveryReceiptForMessageID:toID:deliveryContext:needsDeliveryReceipt:callerID:account:
_blastDoorProcessingWithIMMessageItem:chat:account:fromToken:fromIDSID:fromIdentifier:toIdentifier:participants:groupName:groupID:isEncrypted:isFromMe:isLastFromStorage:isFromStorage:hideLockScreenNotification:wantsCheckpointing:needsDeliveryReceipt:messageBalloonPayloadAttachmentDictionary:inlineAttachments:attributionInfoArray:nicknameDictionary:availabilityVerificationRecipientChannelIDPrefix:availabilityVerificationRecipientEncryptionValidationToken:messageContext:completionBlock:
requestGroupPhotoIfNecessary:incomingGroupPhotoCreationTime:toIdentifier:fromIdentifier:messageIsFromStorage:
accountNeedsLogin
accountNeedsPassword
displayName
updateConnectionMonitorWithLocalSocketAddress:remoteSocketAddress:
_reconnectIfNecessary
_IDSService
networkConditionsAllowLogin
canonicalFormOfChatRoom:
equalID:andID:
refreshServiceCapabilities
broadcasterForChatObserverListeners
broadcasterForAVConferenceListeners
broadcasterForACConferenceListeners
broadcasterForVCConferenceListeners
broadcasterForNotificationsListeners
_clearDowngradeMarkersForChat:
shouldInferRecoverableDeleteForCommandDictionary:
deleteCommandDictionaryWithIncomingDictionary:inferredRecoverableDeleteForLegacyCommandsWithDate:
deleteChatsForCommandDictionary:
deleteMessagesForCommandDictionary:
recoverChatsForCommandDictionary:
deleteMessagePartsForCommandDictionary:
serverHost
serverPort
proxyType
proxyHost
proxyPort
proxyAccount
proxyPassword
useSSL
password
setChatRegistry:
_lock
_account
_localProperties
_changedBuddies
_groupChatIdentifierToChatRoomMap
_chatRoomToGroupChatIdentifierMap
_chatSuppressionFlagMap
_chatSuppressionTimerMap
_suppressedMessages
_messageRoutingTimer
_messageExpireStateTimer
_messageWatchdogTimer
_messageAutoReplier
_storageTimer
_messagesReceivedDuringStorage
_pendingReadReceiptFromStorageCount
_timingComingBackFromStorage
_messagesProcessedComingBackFromStorage
_connectionMonitor
_reconnectTimer
_pwRequestID
_systemProxySettingsFetcher
_buddyChangeLevel
_activated
_saveKeychainPassword
_awaitingDataContext
_shouldReconnect
_badPass
_buddies
_proxyHost
_proxyAccount
_proxyPassword
_password
_serverHost
_proxyType
_proxyPort
_useSSL
_serverPort
_chatRegistry
T@"IMDChatRegistry",&,N,V_chatRegistry
T@"IMDAccount",R,&,N,V_account
T@"IMDService",R,&,N,V_service
T@"NSArray",R,&,N,V_accounts
T@"NSString",R,&,N,V_password
T@"NSString",R,&,N,V_serverHost
TS,R,N,V_serverPort
Tq,R,N,V_proxyType
T@"NSString",R,&,N,V_proxyHost
TS,R,N,V_proxyPort
T@"NSString",R,&,N,V_proxyAccount
T@"NSString",R,&,N,V_proxyPassword
TB,R,N,V_useSSL
setChatGUIDToSpamCheckTimerMap:
setChatGUIDToCountMap:
setSpamExtensionCutoffTime:
_spamCheckTimerFired:
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
detectSpam:chatGUID:
_isDisabled
chatGUIDToCountMap
updateProperties:
_updateSpamCheckTimerWithInterval:forChatGUID:
__queryServerForID:count:completion:
shouldCheckForSpamWithExtensionInChat:fromIdentifier:toIdentifier:
checkForSpamWithExtensionInChat:forMessageBody:sender:withCompletion:
chatGUIDToSpamCheckTimerMap
spamExtensionCutoffTime
_chatGUIDToSpamCheckTimerMap
_chatGUIDToCountMap
_spamExtensionCutoffTime
T@"NSMutableDictionary",&,V_chatGUIDToSpamCheckTimerMap
T@"NSMutableDictionary",&,V_chatGUIDToCountMap
Td,N,V_spamExtensionCutoffTime
isIgnorableBackwardCompatibilityMessage:inChat:
sharedIdentifier
T@"IMDBackwardCompatibilityMessageIdentifier",R,N
swiftImplementation
setSwiftImplementation:
_swiftImplementation
T@"__IMDBackwardCompatibilityMessageIdentifier",&,N,V_swiftImplementation
initRecordZoneManager:databaseManager:
_setUpSubscription
ckQueue
recordZoneManager
createSubscriptionIfNeededOnDeDupeZoneForSubscription:recordType:completionBlock:
exitRecordDate
isEqualToDate:
initWithSerializedError_im:
errorFetchingExitDate
serializedError_im
_fetchExitRecordDateWithCompletion:
_saltZoneCreated
_subscriptionCreated
exitRecordID
initWithRecordType:recordID:
initWithRecordsToSave:recordIDsToDelete:
exitConfiguration
setExitRecordDate:
setErrorFetchingExitDate:
setModifyRecordsCompletionBlock:
_scheduleOperation:
fetchedExitDateOnLaunch
setFetchedExitDateOnLaunch:
isMainThread
setIsSyncing:
initWithRecordIDs:
errorAnalyzer
CKPartialError:onlyHasErrorCodes:
_evalToggleiCloudSettingsSwitch
setFetchRecordsCompletionBlock:
setAtomic:
setSavePolicy:
deDupeSaltZoneID
initWithRecordName:zoneID:
metricZoneID
analyticRecordZoneID
qualityOfService
derivedQualityOfService
databaseManager
createDeDupeSaltZoneIfNeededWithCompletionBlock:
differenceFromDate:
writeSyncCompletedRecordWithDate:completion:
submitCloudKitMetricWithData:operationGroupName:completion:
ckUtilities
errorIndicatesZoneNotCreated:
createAnalyticZoneIfNeededWithCompletionBlock:
_analyticZoneCreated
submitCloudKitAnalyticWithDictionary:operationGroupName:completion:
manateeDataBase
group
_sharedCKUtilities
setName:
setGroup:
operationID
_scheduleMetricOperation:
_canSubmitCloudKitMetric
_modifiedOpGroupName:
syncCompleteRecordID
_submitCloudKitMetricWithOperationGroupName:record:ignoreZoneNotFoundError:completion:
_canSubmitCloudKitAnalytic
isValidJSONObject:
dataWithJSONObject:options:error:
analyticZoneRecordID
initWithZoneName:ownerName:
initWithRecordZoneIDs:
setDefaultConfiguration:
setQuantity:
setFetchRecordZonesCompletionBlock:
handleNotificationForSubscriptionID:
exitRecordDateWithCompletion:
deleteExitRecordWithCompletion:
writeInitialSyncCompletedRecordIfNeeded
submitCloudKitMetricWithOperationGroupName:
sendCloudKitZoneFetchRequestToNoteFeatureIsOn
setExitRecordID:
saltZoneCreatedOverride
setSaltZoneCreatedOverride:
subscriptionCreatedOverride
setSubscriptionCreatedOverride:
setCkQueue:
setRecordZoneManager:
setDatabaseManager:
_fetchedExitDateOnLaunch
_exitRecordDate
_errorFetchingExitDate
_exitRecordID
_saltZoneCreatedOverride
_subscriptionCreatedOverride
_ckQueue
_recordZoneManager
_databaseManager
T@"CKRecordID",&,N,V_exitRecordID
T@"NSNumber",&,N,V_saltZoneCreatedOverride
T@"NSNumber",&,N,V_subscriptionCreatedOverride
T@"NSObject<OS_dispatch_queue>",&,N,V_ckQueue
T@"IMDRecordZoneManager",&,N,V_recordZoneManager
T@"IMDCKDatabaseManager",&,N,V_databaseManager
T@"NSDate",&,N,V_exitRecordDate
T@"NSError",&,N,V_errorFetchingExitDate
TB,N,V_fetchedExitDateOnLaunch
initWithZoneID:
_setUpPushConnection
initWithEnvironmentName:namedDelegatePort:queue:
pushConnection
mainBundle
executablePath
lastPathComponent
setEnabledTopics:
notificationFromRemoteNotificationDictionary:
notificationType
recordZoneID
subscriptionID
_handleNotificationForZoneID:subscriptionID:
initWithZoneID:subscriptionID:
setRecordType:
dataBaseManager
saveSubscription:completionHandler:
_createSubscriptionForZoneID:subscriptionID:recordType:completionBlock:
fetchSubscriptionWithID:completionHandler:
recordZoneIDs
initWithRecordZonesToSave:recordZoneIDsToDelete:
setModifyRecordZonesCompletionBlock:
zoneID
zoneName
_createRecordZone:completionBlock:
_checkRecordZoneExists:completionBlock:
_deleteZone:forDatabase:
chatRecordZone
_createRecordZoneIfNeeded:completionBlock:
_deleteZone:
attachmentRecordZone
messageRecordZone
updateRecordZone
analyticRecordZone
deDupeSaltRecordZone
_createSubscriptionIfNeededForZoneID:subscriptionID:recordType:completionBlock:
recoverableMessageRecordZone
_deleteAllZonesForDatabase:
chatRecordZoneID
messageRecordZoneID
attachmentRecordZoneID
recoverableMessageRecordZoneID
initWithObjects:
errorIndicateDeviceDoesNotHaveKeysToSync:
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveToken:forInfo:
connection:didReceiveURLToken:forInfo:
connection:didReceiveURLTokenError:forInfo:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
createChatZoneIfNeededWithCompletionBlock:
deleteChatZone
createAttachmentZoneIfNeededWithCompletionBlock:
deleteAttachmentZone
createMessageZoneIfNeededWithCompletionBlock:
deleteMessageZone
createUpdateZoneIfNeededWithCompletionBlock:
deleteUpdateZone
deleteAnalyticZone
deleteDeDupeSaltZone
createRecoverableMessageZoneIfNeededWithCompletionBlock:
deleteRecoverableMessageZone
deleteAllZones
fetchChatZoneToCheckManateeStatus:
updateRecordZoneID
setDataBaseManager:
setPushConnection:
_chatRecordZoneID
_chatRecordZone
_attachmentRecordZoneID
_attachmentRecordZone
_messageRecordZoneID
_messageRecordZone
_updateRecordZoneID
_updateRecordZone
_analyticRecordZoneID
_analyticRecordZone
_deDupeSaltZoneID
_deDupeSaltRecordZone
_metricZoneID
_recoverableMessageRecordZoneID
_recoverableMessageRecordZone
_dataBaseManager
_pushConnection
T@"IMDCKDatabaseManager",&,N,V_dataBaseManager
T@"APSConnection",&,N,V_pushConnection
T@"CKRecordZoneID",R,N,V_chatRecordZoneID
T@"CKRecordZone",R,N,V_chatRecordZone
T@"CKRecordZoneID",R,N,V_attachmentRecordZoneID
T@"CKRecordZone",R,N,V_attachmentRecordZone
T@"CKRecordZoneID",R,N,V_messageRecordZoneID
T@"CKRecordZone",R,N,V_messageRecordZone
T@"CKRecordZoneID",R,N,V_updateRecordZoneID
T@"CKRecordZone",R,N,V_updateRecordZone
T@"CKRecordZoneID",R,N,V_analyticRecordZoneID
T@"CKRecordZone",R,N,V_analyticRecordZone
T@"CKRecordZoneID",R,N,V_deDupeSaltZoneID
T@"CKRecordZone",R,N,V_deDupeSaltRecordZone
T@"CKRecordZoneID",R,N,V_metricZoneID
T@"CKRecordZoneID",R,N,V_recoverableMessageRecordZoneID
T@"CKRecordZone",R,N,V_recoverableMessageRecordZone
setDesiredKeys:
setPreviousServerChangeToken:
setResultsLimit:
setFetchNewestChangesFirst:
_messageFetchRecordZoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:
initWithRecordZoneIDs:configurationsByRecordZoneID:
im_setActivity:
_operationGroupWithName:
setFetchAllChanges:
dictionaryWithObjectsAndKeys:
_fetchOptionsDictionaryWithFetchOptions:andZoneID:
fetchMessageZoneChangesCKOperationUsingToken:zoneID:resultsLimit:operationGroupName:activity:
saveMessagesCKOperationUsingRecordsToSave:operationGroupName:activity:
deleteMessageCKOperationUsingRecordIDstoDelete:
deleteRecoverableMessageCKOperationUsingRecordIDstoDelete:
fetchArchivedRecordsOperationWithSyncToken:zoneID:activity:
availabilityStatusTypeIdentifier
initWithStatusTypeIdentifier:
populateCacheWithAvailbailityVerificationTokensForHandleID:
initWithString:
subscriptionValidationTokensForHandle:completion:
subscriptionValidationToken
encryptionValidationToken
initWithSubscriptionValidationToken:encryptionValidationToken:
subscriptionValidationTokenForHandle:completion:
deviceSupportsSubscriptionValidationTokens
timeIntervalSinceNow
validatePersonalStatusSubscriptionMatchesSubscriptionValidationToken:fromSender:completion:
_inviteSenderHandleID:fromHandleID:
_validatePersonalStatusSubscriptionMatchesSubscriptionValidationToken:encryptionValidationToken:fromSender:completion:
validatePersonalStatusSubscriptionMatchesSubscriptionValidationTokens:fromSender:completion:
repairSharedFocusStatusFollowingFailedValidationWithHandleID:fromHandleID:completion:
subscriptionInvitationReceived:
subscriptionReceivedStatusUpdate:
subscriptionStateChanged:
subscriptionServiceDaemonDisconnected:
cachedAvailabilityVerificationTokensForHandleID:
verifyPersonalSubscriptionMatchesSubscriptionValidationToken:encryptionValidationToken:receivedByHandleID:fromHandleID:messageDate:
availabilitySubscriptionService
setAvailabilitySubscriptionService:
subscriptionValidationTokenByHandleIDCache
setSubscriptionValidationTokenByHandleIDCache:
privateWorkQueue
setPrivateWorkQueue:
_availabilitySubscriptionService
_subscriptionValidationTokenByHandleIDCache
_privateWorkQueue
T@"SKStatusSubscriptionService",&,N,V_availabilitySubscriptionService
T@"NSCache",&,N,V_subscriptionValidationTokenByHandleIDCache
T@"NSObject<OS_dispatch_queue>",&,N,V_privateWorkQueue
isEqualToAvailabilityVerificationTokens:
_subscriptionValidationToken
_encryptionValidationToken
T@"NSString",R,N,V_subscriptionValidationToken
T@"NSString",R,N,V_encryptionValidationToken
setSharedDaemon:
T@"<IMLocalDaemonProtocol>",&,N
initWithEventStreamName:
doesNotRecognizeSelector:
_dictionaryRepresentation
copyFileTransferDictionaryRepresentationsFromCenter:
initWithChatRegistry:vocabulary:
sharedVocabulary
doneLoadingAfterMerge
_updateVocabularyExcludingChat:completionHandler:
cachedChats
style
compareBySequenceNumberAndDateDescending:
sortUsingComparator:
setVocabulary:ofType:
performInitialUpdateIfNeeded
updateVocabularyForAddedChat:completionHandler:
updateVocabularyForDeletedChat:completionHandler:
updateVocabularyForRenamedChat:completionHandler:
updateVocabularyForDeferredUpdateRequestIfNecessaryWithCompletionHandler:
vocabulary
setVocabulary:
haveDeferredUpdateRequest
setHaveDeferredUpdateRequest:
_haveDeferredUpdateRequest
_vocabulary
T@"INVocabulary",&,N,V_vocabulary
TB,N,V_haveDeferredUpdateRequest
spokenPhrase
pronunciationHint
vocabularyIdentifier
alternativeSpeakableMatches
identifier
T@"NSString",R,N
componentsSeparatedByString:
_senderIDFromToken:
initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:
setPayloadData:
setBalloonBundleID:
didReceiveMessage:forChat:style:fromIDSID:
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:linkedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantUpdate:context:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
dtService
setDtService:
_dtService
T@"IDSService",&,N,V_dtService
accountRegisteredURIs
unprefixedURI
setShareURLsToContexts:
sharedMomentSharePhotoLibrary
registerChangeObserver:
shareURLsToContexts
_updateContext:withChange:
changeDetailsForObject:
objectAfterChanges
uuid
changeDetailsForFetchResult:
fetchResultAfterChanges
_transitionToGenerateTransfersStateForContextIfNecessary:
_handleMomentShareFetchForContext:momentShare:error:
fetchMomentShareFromShareURL:forMessage:completionHandler:
_acceptMomentShareIfNecessaryForContext:isRetry:
_handleIngestionFailureForContext:
_fetchResultForCuratedOrFirstForMomentShare:outFetchType:
_targetCountForContext:
_generateTransfersForContext:
_removeFinishedIngestionContext:
arrayWithCapacity:
_generateTransfersForAssetUUIDs:forMessage:inChat:momentShare:
_assetUUIDToUnfinishedTransferMapFromTransfers:
_startAssetExportForContext:
getCMMState
librarySpecificFetchOptions
fetchMomentShareFromShareURL:options:completionHandler:
acceptMomentShareWithCompletion:
arrayWithObject:
setCMMState:
storeMessage:forceReplace:modifyError:modifyFlags:flagMask:updateMessageCache:calculateUnreadCount:reindexMessage:
photoShareURLFromPluginBundleID:contentString:payload:
_contextForMomentShareURL:forMessage:inChat:createIfNeeded:
setCMMAssetOffset:
_clearCMMTransfersForCMMMessage:
setCMMStateToRegisteredAndAssetOffsetTo:
_transitionToFetchingMomentShareForContext:
status
_fetchAssetsForAcceptedMomentShareWithContext:
doubleValue
_acceptMomentShare:completionHandler:
_transitionToWaitingForAssetsForContext:
getCMMAssetOffset
subarrayWithRange:
attachmentsWithGUIDs:
attributionInfo
transferState
_loadCMMTransfersForMessage:
isFinished
_handleResourceRequestForContext:asset:transfer:didCompleteWithFileURL:error:
_requestResourceFileURLsForAsset:fileTransfer:completionHandler:
changeRequestForAsset:
setSyndicationIdentifierOnMomentSharedAsset:
performChanges:completionHandler:
_persistAttachmentAtFileURL:forFileTransfer:
_updatePendingTransferMapForContext:completedTransfer:
stringByAppendingPathComponent:
removeItemAtPath:error:
fileURLWithPath:isDirectory:
copyItemAtURL:toURL:error:
_copyItemAtURL:toTemporaryDirectoryWithName:isDirectory:error:
exportRequestForAsset:error:
setDontAllowRAW:
fetchResourcesToShareForAsset:requestOptions:error:
fileSize
updateTransfer:currentBytes:totalBytes:
setVariant:
setDisableMetadataCorrections:
setResultHandlerQueue:
_copiedFileURLFromAssetExportFileURLs:transferGUID:error:
exportWithOptions:completionHandler:
path
setFilename:
setTransferredFilename:
setType:
_setLocalPath:
_setLocalURL:
storeAttachment:associateWithMessageWithGUID:
endTransfer:
messageHasUnfinishedTransfers:
_transitionToCompletedStateForContext:
deleteAttachmentsWithGUIDs:
setFileTransferGUIDs:
assetCount
_fileTransferForAssetUUID:forMessage:momentShare:atIndex:ofTotal:
__im_dateWithCurrentServerTime
setTimeRead:
setFlags:
broadcasterForChatListenersUsingBlackholeRegistry:
chatIdentifier
account:chat:style:chatProperties:messagesUpdated:
absoluteString
makeNewIncomingTransferWithGUID:filename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
setMessageGUID:
setAttributionInfo:
preview
curatedAssetIdentifiers
setFetchLimit:
fetchAssetsInAssetCollection:options:
fetchCuratedAssetsInAssetCollection:options:
photoLibraryDidChange:
registerAndAcceptMomentShareForMessage:inChat:resetAssetTransfers:
regenerateTransfersForMessage:inChat:addingAssetWithUUID:
_shareURLsToContexts
T@"NSMutableDictionary",&,N,V_shareURLsToContexts
initWithServiceSession:
numberWithUnsignedInt:
stateDictionaryForDiagnosticsRequest
recordsToSave
queue
recordIDs
_handleFetchingExitRecordOperation:
_operationIsCloudKitMetricsOperation:
_handleWritingCloudKitMetrics:
modifyRecordsCompletionBlock
fetchRecordsCompletionBlock
handleOperation:
synchronize
delayedSynchronize
_migrateSyncToken
initWithSyncTokenStore:
setBool:forDomain:forKey:
getBoolFromDomain:forKey:defaultValue:
getValueFromDomain:forKey:
_shouldMarkAttachmentsAsNeedingReupload
_hasCompletedRecoveryResync
_markResyncForDeleteRecoveryAs:
setIsDoingDeleteRecoverySync:
setDeviceConditionsToCheck:
_numberOfMetadataBatchesOfAttachmentsToFetchInInitialSync
latestSyncTokenForSyncType:
_fetchAttachmentZoneChangesShouldWriteBackChanges:desiredKeys:syncType:currentBatchCount:maxBatchCount:syncToken:activity:completionBlock:
resetRecordCounts
_fetchedAllChangesFromCloudKit
_initResyncForDeleteRecovery
_shouldMarkAllAttachmentsAsNeedingSync
clearLocalSyncState:
_hasMarkedAllAttachmentsAsNeedingSync
setLatestSyncToken:forSyncType:
_writeAttachmentsToCloudKitWithActivity:completionBlock:
_markAllFailedAttachmentsAsNeedingSync
_numberOfBatchesOfAttachmentsToFetchInInitialSync
_attachmentZoneID
_attachmentZoneSalt
recordIDWithZoneID:salt:
recordIDToTransferMap
cloudKitSyncState
fetchOptions
setPerTransferProgress:
__imSetFromArray
_fetchAttachmentZoneRecords:desiredKeys:ognSuffix:removeTombstones:activity:completion:
totalBytes
fetchAttachmentDataForTransfers:highQuality:perTransferProgress:activity:completion:
__shouldOptimizeAttachmentDefault
assetDownloadInProgress
_deviceConditionsAllowsMessageSyncIgnoreFeatureEnabled:activity:
_downloadAttachmentAssetsWithActivity:restoringAttachments:retryCount:numAttachmentsDownloaded:transfers:completion:
setAssetDownloadInProgress:
__databaseRequestForAttachmentsWithAssets
fileTransferCenter
removeTransferForGUID:
_attachmentDownloadCanStart:withActivity:
_downloadAttachmentAssetsWithActivity:restoringAttachments:retryCount:numAttachmentsDownloaded:completion:
addTransfer:forGUID:
downloadAttachmentAssetsWithActivity:restoringAttachments:completion:
purgedAttachmentsForChat:services:limit:
_numberOfAttachmentsToDownload
deviceConditionsToCheck
_updateDeviceConditionsToCheckIfNeededForCurrentBatchCount:maxBatchCount:
_deviceConditionsAllowsMessageSyncWithActivity:
_ckUtilitiesInstance
_recordKeyManagerSharedInstance
updateLegacyTransferGUIDIfNeeded:transfersToSync:
_markAttachmentWithROWIDAsFailedToUploadToCloudKit:
_deviceConditionsAllowsMessageSyncForCurrentBatchCount:maxBatchCount:activity:
setBroadcastedSyncStateToUploading
_numberOfAttachmentsToWriteUp
numberWithLongLong:
_updateAttachmentGUIDIfNeededAndReturnTransfersToForceMarkAsSync:transfersToSyncRowIDs:
copyCKRecordRepresentationWithZoneID:salt:
addNewAttachmentsSyncedCount:
_kickOffWriteOnCKQueueWithActivity:completion:
_writeCKRecordsToAttachmentZone:activity:withCompletion:
isDoingDeleteRecoverySync
CKOperationFactory
fetchAttachmentZoneRecords:desiredKeys:operationGroupName:activity:
_processAssetFetchPerRecordProgressBlock:progress:
setPerRecordProgressBlock:
_processAssetFetchPerRecordCompletionBlock:recordID:error:
setPerRecordCompletionBlock:
_processAssetFetchOperationCompletionBlock:removeTombstones:operationID:error:
completionBlocksForAssetFetchOperations
_resyncForDeleteRecoveryState
setValue:forDomain:forKey:
canWriteFileOfEstimatedSize:refreshCachedValue:
shouldDownloadAssetsOfSize:refreshCachedValue:
setBroadcastedSyncStateToDownloading
fetchAttachmentZoneChangesCKOperationUsingToken:zoneID:resultsLimit:desiredKeys:operationGroupName:activity:
_processRecordChanged:
setRecordChangedBlock:
setRecordZoneChangeTokensUpdatedBlock:
_processRecordDeletion:
setRecordWithIDWasDeletedBlock:
_processRecordZoneFetchCompletion:zoneID:clientChangeTokenData:moreComing:shouldWriteBackChanges:desiredKeys:syncType:error:currentBatchCount:maxBatchCount:activity:completionBlock:
setRecordZoneFetchCompletionBlock:
_processFetchRecordChangesCompleted:completionBlock:
setFetchRecordZoneChangesCompletionBlock:
saveAttachmentsCKOperationUsingRecordsToSave:operationGroupName:activity:
_processModifyPerRecordCallBack:error:
_processModifyRecordCompletion:deletedRecordIDs:error:completionBlock:
errorIndicatesUserDeletedZone:
_kickOffAssetFetchForTransfersIfNeededWithActivity:
syncBatchCompleted:
_kickOffWriteIfNeededForSyncType:activity:completion:
CKPartialError:hasErrorCode:
_attachmentZoneCreated
recordChangeTag
countRecordOnRead:didSucceed:
_updateTransferUsingCKRecord:wasFetched:
transferGUIDOfRecord:
_markAttachmentWithROWIDAsSyncedWithCloudKit:
_resetAttachmentSyncStateForRecord:toState:
_markTransferAsNotBeingAbleToSyncUsingCKRecord:
_operationErrorForModifyingRecordCompletion:
perTransferProgress
markTransferAsNotSuccessfullyDownloadedFromCloudCK:
_recordsToProcessWithError:error:
fileURL
moveAssetFromRecord:
_setFetchOptions:
initWithDomain:code:userInfo:
failTransfer:reason:
cleanUpAssetsOnDiskForRecord:
extractRecordIDsNotFoundFromCKPartialError:
updateTransferAsWaitingForAccept:
arrayByExcludingObjectsInArray:
attachmentWithGUID:
localPath
fileExistsAtPath:isDirectory:
updateTransfersWithCKRecordCK:recordWasFetched:downloadAsset:
_removeTransferFromiCloudBackupWithGuid:
downloadAssetsForTransferGUIDs
acceptTransfer:path:
setDownloadAssetsForTransferGUIDs:
markTransferAsNotSyncedSuccessfullyCK:
resetSyncStateForRecordCK:toState:
syncTokenStore
_changeTokenKeyForSyncType:
deleteAttachmentSyncToken
markAllAttachmentsAsNeedingCloudKitSync
_needsToMarkAllAttachmentsAsNeedingSync
validateMD5HashForRecord:
metricAttachmentValidation:attachmentSize:operationalErrorDomain:operationalErrorCode:validationErrorDomain:validationErrorCode:
_validateTransferFromCloudKit:localTransfer:validateCompletion:
ckRecordIDFromExistingMetadata
numberWithLong:
_processAndValidateAttachmentRecordsEligibleForPurge:recordIDsToTransfers:capturedWithABC:completion:
unsignedLongValue
_readNextDeleteAfterRow
_constructAttachmentRecordIDUsingTombStoneDictionary:
_setNextDeleteAfterRow:
setBroadcastedSyncStateToDeleting
deleteAttachmentCKOperationUsingRecordIDstoDelete:
extractRecordIDsDeletedFromCKPartialError:
setPerRecordSaveBlock:
_attachmentDeleteBatchSize
_copyRecordIDsToDeleteWithLimit:
isAttachmentReferencedByMessage:
syncAttachmentDeletesToCloudKitWithActivity:completion:
_deleteAttachmentsWithRecordIDs:completion:
syncControllerRecordType
syncAttachmentsWithSyncType:deviceConditionsToCheck:activity:completionBlock:
acceptFileTransfer:completion:
acceptFileTransfers:completion:
downloadAttachmentAssetsWithActivity:restoringAttachments:
purgedAttachmentsCountForChatsWithChatIdentifiers:services:
downloadAttachmentAssetsForChatIDs:services:style:completion:
_processRecordZoneChangeTokenUpdated:zoneID:clienChangeToken:syncType:
_markTransferAsNotBeingAbleToSync:
_fetchAndValidateFileTransfersFromCloudKit:capturedWithABC:activity:completion:
setCKOperationFactory:
setSyncTokenStore:
setCompletionBlocksForAssetFetchOperations:
setRecordIDToTransferMap:
_isDoingDeleteRecoverySync
_assetDownloadInProgress
_CKOperationFactory
_syncTokenStore
_completionBlocksForAssetFetchOperations
_recordIDToTransferMap
_perTransferProgress
_downloadAssetsForTransferGUIDs
_deviceConditionsToCheck
T@"IMDCKAttachmentSyncCKOperationFactory",&,N,V_CKOperationFactory
T@"<IMDCKSyncTokenStore>",&,N,V_syncTokenStore
T@"NSMutableDictionary",&,N,V_completionBlocksForAssetFetchOperations
T@"NSMutableDictionary",&,N,V_recordIDToTransferMap
T@?,C,N,V_perTransferProgress
TB,N,V_assetDownloadInProgress
T@"NSMutableArray",&,N,V_downloadAssetsForTransferGUIDs
TQ,N,V_deviceConditionsToCheck
TB,N,V_isDoingDeleteRecoverySync
keyValueCollection
boolForKey:withDefault:
setBool:forKey:
integerForKey:withDefault:
setInteger:forKey:
errorArrayForKey:
addErrorToArray:forKey:
_startBatchWrite
_commitBatchWrite
keyEnumerator
hasSuffix:
analyticSyncDatesDictionary
initWithDictionary:
_removeObjectForKey:forDictionary:
setAnalyticSyncDatesDictionary:
_setObject:forKey:forDictionary:shouldSetBuild:
syncErrors
_describeErrors:
appendFormat:
createdChatZone
deletedZones
_shouldReportNewUserIfCreatedChatZones:deletedZones:
dictionaryWithDictionary:
removeBuildObjectsFromDict:
syncUserType
describeErrors
describeRecordCounts
isEligibleForTruthZone
isRemovedFromBackup
isInExitState
exitDate
isDisablingDevices
isStartingEnabledSettingChange
syncControllerSyncState
syncControllerSyncType
setStartingPeriodicSyncSetByCloudKitHooks:
setStartingInitialSyncSetByCloudKitHooks:
setSyncControllerSyncState:
setSyncControllerRecordType:
setSyncControllerSyncType:
setStartingEnabledSettingChange:
setDisablingDevices:
_setStartingSync
setSyncControllerSyncState:withRecordType:
setSyncing:
delegate
serializedRepresentation
updateCloudKitStateWithDictionary:
keyValueCollection:willUpdateValues:
keyValueCollection:didUpdateValues:
setCreatedChatZone:
setDeletedZones:
setInExitState:
isStartingPeriodicSyncSetByCloudKitHooks
isStartingInitialSyncSetByCloudKitHooks
setExitDate:
setLastSyncDate:
setSyncingFinished
clearLocalCloudKitSyncState
setStartingPeriodicSyncWithRecordType:
setStartingInitialSyncWithRecordType:
_storage
_delegate
TQ,D,N
Tq,D,N
syncing
TB,D,N,GisSyncing
startingPeriodicSyncSetByCloudKitHooks
TB,D,N,GisStartingPeriodicSyncSetByCloudKitHooks
startingInitialSyncSetByCloudKitHooks
TB,D,N,GisStartingInitialSyncSetByCloudKitHooks
T@"IMKeyValueCollection",R,N,V_storage
T@"<IMDCKSyncStateDelegate>",W,N,V_delegate
featureEnabled
TB,D,N,GisFeatureEnabled
TB,D,N
eligibleForTruthZone
TB,D,N,GisEligibleForTruthZone
syncingEnabled
TB,D,N,GisSyncingEnabled
removedFromBackup
TB,D,N,GisRemovedFromBackup
inExitState
TB,D,N,GisInExitState
syncingPaused
TB,D,N,GisSyncingPaused
T@"NSDate",C,D,N
disablingDevices
TB,D,N,GisDisablingDevices
startingEnabledSettingChange
TB,D,N,GisStartingEnabledSettingChange
T@"NSDictionary",C,D,N
scheduleSyncTaskForServices:
openSensitiveURL:withOptions:
impl
interpretMessageItem:inChat:
setImpl:
_impl
T@"__IMDPlainTextTapbackInterpreterImpl",&,N,V_impl
stringValue
activeHubbleRequestedTransfers
_removeHubbleRequestedTransfer:
existsAtLocalPath
_completeHubbleDownloadForTransfer:
localFileURLRetrievalErrorWithReason:description:
_postHubbleDownloadFailedForTransfer:error:
localURL
postNotificationName:object:userInfo:
addHubbleRequestedTransfer:
postHubbleDownloadFinishedIfNeededForTransfer:
postHubbleDownloadFailedIfNeededForTransfer:error:
setContextStamp:
setGuidToTransferMap:
setActiveTransfers:
setTransferringTransfers:
setActiveHubbleRequestedTransfers:
_postUpdated:forceNotify:
_updateContextStamp
fileTransfer:updatedWithProperties:forceNotify:
__mainThreadPostNotificationName:object:
fileTransferErrorWithReason:description:
_addGatekeeperProperties:toFileAtPath:
enumeratorAtPath:
_needsWrapper
stringByDeletingLastPathComponent
stringByDeletingPathExtension
createUniqueDirectoryWithName:atPath:ofType:
writeToFile:atomically:encoding:error:
fileURLWithPath:
activeTransfers
transferringTransfers
_transferTimerTick:
setTransferTimer:
transferTimer
_copyForEnumerating
averageTransferRate
currentBytes
_lastAveragedInterval
_lastAveragedBytes
_setAveragedTransferRate:lastAveragedInterval:lastAveragedBytes:
_setLastUpdatedInterval:
fileTransfer:updatedWithCurrentBytes:totalBytes:averageTransferRate:
_initWithGUID:filename:isDirectory:localURL:account:otherPerson:totalBytes:hfsType:hfsCreator:hfsFlags:isIncoming:
guidToTransferMap
defaultHFSFileManager
attributesOfItemAtPath:error:
fileHFSTypeCode
fileHFSCreatorCode
fileHFSFlags
fileTransfers:createdWithLocalPaths:
makeNewOutgoingTransferWithGUID:filename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
_setAccount:otherPerson:
fileTransfer:createdWithProperties:
_addTransfer:forGUID:shouldNotify:forceNotify:
_handleFileTransferRemoved:
deleteAttachmentWithGUID:
_updateTransferGUID:toGUID:
setGuid:
_addActiveTransfer:
_setTransferState:
_setError:
_postUpdated:
isIncoming
_createWrapperForTransfer:
resetTransfer:andPostReason:
_setStartDate:
_addTransferringTransfer:
_setCurrentBytes:totalBytes:
_attachmentStoreSharedInstance
updateAttachment:
_removeWrapperForTransfer:
_setDirectory:hfsType:hfsCreator:hfsFlags:
_removeActiveTransfer:
_removeTransferringTransfer:
startFinalizingTransfer:
setCloudKitSyncState:
_addSpotlightPropertiesFromFileTransfer:toDirectory:
_completeProgressForTransferGUID:
_clearProgressForTransferGUID:
errorDescription
localFileURLRetrievalErrorWithReason:underlyingReason:description:
_setErrorDescription:
_handleFileTransfer:acceptedWithPath:autoRename:overwrite:options:postNotification:
_dictionaryRepresentationsForFileTransfers:toSave:
dictionaryWithObjects:forKeys:
_updateWithDictionaryRepresentation:
sandboxToken
UTF8String
transferredFilename
_resetTransferStateIfAttachmentIsMissingAndDownloadable
filename
_randomTemporaryPathWithFileName:
error
_handleFileTransferStopped:
hasPrefix:
setHideAttachment:
stringByAppendingPathExtension:
stringByResolvingAndStandardizingPath
writeToFile:options:error:
guidForNewOutgoingTransferWithLocalURL:
_getNewFileTransferForStoredAttachmentPayloadDataWithTransferGUID:messageGUID:
broadcastTransfersWithGUIDs:atLocalPaths:
_transferRequiresPreviewSizing:
fixIMTranscoderAgentPriorityInversion
_transcodeControllerSharedInstance
_clientPreviewConstraints
sizePreview:constraints:completionBlock:blockUntilReply:
updateTransfer:withPreviewSize:forConstraints:
_statsCollector
isAudioMessage
isSticker
hideAttachment
isLocation
isContact
attachmentRecordHasAsset:
_messageStoreSharedInstance
itemWithGUID:
actionIsGroupPhoto
updateLegacyTransferGUIDOnMessageIfNeeded:
wantsAssetFromRecord:
hasPreferredAssetOverRecord:
setCloudKitRecordID:
copyEncodedSystemFields
setCloudKitServerChangeTokenBlob:
_shouldUpdateSyncStats:originalSyncState:
_updateSyncStatsForAttachments:incrementTotalAttachmentCount:
initWithCKRecord:writeAssetToDisk:
_shouldDownloadAssetForTransfer:forMessageItem:
_progressForTransferGUID:allowCreate:path:
_addGatekeeperProperties:toDirectory:
addDefaultGatekeeperPropertiesToDirectory:
guidForNewIncomingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
guidForNewOutgoingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
registerGUID:forNewOutgoingTransferWithLocalURL:
assignTransfer:toAccount:otherPerson:
addTransfer:forGUID:forceNotify:
_addTransfer:forGUID:shouldNotify:
deleteTransferForGUID:
updateTransferGUID:toGUID:
startTransfer:
updateTransfer:
failTransferPreviewGeneration:
rejectTransfer:
resetTransferAndPostError:error:
setRecoverableErrorForTransfer:error:
failTransfer:error:
_allFileTransfers
_handleFileTransfer:createdWithProperties:withAuditToken:
_handleFileTransfer:updatedWithProperties:
_handleFileTransfers:autoRename:overwrite:options:postNotification:
guidsForStoredAttachmentPayloadData:messageGUID:
guidsForStoredAttachmentPayloadDataURLs:messageGUID:
markAttachment:sender:recipients:isIncoming:
sizePreviewsForTransferGUIDs:
updateTransfersWithCKRecord:recordWasFetched:downloadAsset:
markTransferAsNotSyncedSuccessfully:
markTransferAsNotSuccessfullyDownloadedFromCloud:
resetSyncStateForRecord:toState:
_reset
contextStamp
_contextStamp
_guidToTransferMap
_activeTransfers
_transferTimer
_transferringTransfers
_activeHubbleRequestedTransfers
T@"NSString",&,N,V_contextStamp
T@"NSMutableDictionary",&,N,V_guidToTransferMap
T@"NSMutableSet",&,N,V_activeTransfers
T@"NSTimer",&,N,V_transferTimer
T@"NSMutableArray",&,N,V_transferringTransfers
T@"NSMutableSet",&,N,V_activeHubbleRequestedTransfers
valueWithBytes:objCType:
isBusiness
powerLogConversationType
_attachmentFetchRecordZoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:desiredKeys:
_desiredKeysArrayForType:
_defaultsSayWeHaveSyncedOnce
_enManager
activateWithCompletionHandler:
_bagDisabled
_allowedDomains
__im_conformsToDomain:
enumerateAttribute:inRange:options:usingBlock:
_enURLsForMessageBody:
textMessageWithMessage:embeddedURLs:
_isMessageItemEligibleForEN:
exposureNotificationEnabled
_enTextMessageForMessageBody:
verifyTextMessage:completionHandler:
processMessageItemForENURL:withCompletionHandler:
_cleanUpTemporaryFiles
_isPairedDeviceInProxyMode
_initiateQuickSwitch
_getFileSizeAtPath:
_getTempDBPath
_deleteFileAtPath:
_getTempRecentsPath
_getZippedDBPath
_getZippedRecentsPath
_getTruncatedDBPath
_getDowngradedDBPath
initWithInputURL:outputURL:identifier:operation:completionBlock:queue:
start
_sendIDSMessage:
_quickSwitchCompleted:
_notifyPSYWithResult:
_sendIDSFile:withCommand:
_getCurrentDBVersion
_truncateDBToPath:
moveItemAtPath:toPath:error:
_sendZippedFileAtPath:withCommand:
_notifyPSYDataSent
_compressFileAtPath:toPath:withCompletionBlock:
stringByStandardizingPath
copyItemAtPath:toPath:error:
setWithObject:
sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:
_FTCopyGzippedData
sendData:toDestinations:priority:options:identifier:error:
deviceForFromID:
_FTOptionallyDecompressData
_handleQuickSwitchInitiateRequest
_handleDBVersionResponse:
_handleRecentsRequest
_handleQuickSwitchCompleted:
_handleIncomingDB:
_handleIncomingRecents:
_appearsToBeEmail
devices
isDefaultPairedDevice
dummyMethod
_decompressFileAtPath:toPath:withCompletionBlock:
_sendDBVersionResponse:
_sendRecentsRequest
_sendQuickSwitchCompletedWithResult:
_defaultPairedDevice
quickSwitchIDSService
setQuickSwitchIDSService:
_quickSwitchIDSService
T@"IDSService",&,N,V_quickSwitchIDSService
handleIncomingNoticeProtobuf:service:account:fromID:context:
setProtobufAction:forIncomingRequestsOfType:
isGelatoNoticesEnabled
_handlesMinusSenderServiceAccountID:
noticeFanoutThreshold
rateLimiter
shouldSendNotice:
_SWCollaborationNoticeTransmissionMessageClass
setVersion:
setGuidString:
guidString
setHighlightChangeEvent:
eventData
eventType
setHighlightChangeEventType:
setDateAsTimeIntervalSince1970:
initWithProtobufData:type:isResponse:
sendProtobuf:toDestinations:priority:options:identifier:error:
didSendNotice:
senderLoginIDs
sendMessage:toDestinations:priority:options:identifier:error:
minusSet:
gelatoService
unarchiveNoticeTransmissionEvent:
sendNotice:toHandles:
reflectDismissalForNoticeGUIDs:
setRateLimiter:
setGelatoService:
_rateLimiter
_gelatoService
T@"IDSService",&,N,V_gelatoService
T@"<IMDCollaborationNoticeDispatcherDelegate>",W,N,V_delegate
T@"IMDCollaborationNoticeRateLimiter",&,N,V_rateLimiter
paddingForMessageOfSize:
setPadding:
timeExpressiveSendPlayed
__im_nanosecondTimeInterval
setTimeExpressiveSentPlayed:
timePlayed
setTimePlayed:
timeRead
timeDelivered
setTimeDelivered:
setBaloonBundleId:
expressiveSendStyleID
setExpressiveSendId:
setMessageBody:
bodyData
setMessageBodyData:
subject
setMessageSubject:
setMessageSummaryInfo:
expireState
setExpireState:
setAssociatedMessageGuid:
setAssociatedMessageType:
associatedMessageRange
setAssociatedMessageRangeLocation:
setAssociatedMessageRangeLength:
compressedProtobufDataWithPadding:
callStackSymbols
threadIdentifier
setThreadIdentifier:
setCmmState:
setCmmAssetOffset:
setMsgid:
setThreadGuid:
setThreadPart:
setSr:
initWithData:
protobufForCompressedData:
timeExpressiveSentPlayed
__im_dateWithNanosecondTimeIntervalSinceReferenceDate:
setTimeExpressiveSendPlayed:
baloonBundleId
expressiveSendId
setExpressiveSendStyleID:
messageBodyData
setBodyData:
messageSubject
setSubject:
associatedMessageGuid
setAssociatedMessageGUID:
associatedMessageRangeLocation
associatedMessageRangeLength
setAssociatedMessageRange:
protobufForCompressedDataP2:
protobufForCompressedDataP3:
cmmState
cmmAssetOffset
_setCKRecordString:forKey:
_setCKRecordDate:forKey:
parentChatID
destinationCallerID
replyToGUID
dateWithTimeIntervalSinceReferenceDate:
_setUnencryptedCKRecordNumber:forKey:
_setCKRecordNumber:forKey:
compressedProtobufDataForMessage
_setCKRecordData:forKey:
messageSyncP2Enabled
compressedProtobufDataForMessageP2
compressedProtobufDataForMessageP3
errorCode
groupTitleChangeProtobufForCompressedData:
groupTitle
setTitle:
otherHandle
setOtherHandle:
title
setGroupTitle:
compressedProtobufDataForGroupTitleChangeItem
participantChangeProtobufForCompressedData:
participantChangeType
setChangeType:
changeType
setParticipantChangeType:
compressedProtobufDataForParticipantChangeItem
locationShareStatusChangeProtobufForCompressedData:
shareDirection
setDirection:
shareStatus
setStatus:
setShareStatus:
direction
setShareDirection:
compressedProtobufDataForLocationShareStatusChangeItem
groupActionProtobufForCompressedData:
groupActionType
setActionType:
actionType
setGroupActionType:
compressedProtobufDataForGroupActionItem
messageActionChangeProtobufForCompressedData:
messageActionType
originalMessageGuid
setOriginalMessageGUID:
setMessageActionType:
originalMessageGUID
setOriginalMessageGuid:
compressedProtobufDataForMessageActionItem
recordNameForRecordChangeTag:ckRecordID:salt:guid:
_updateV1RecordType
recordIDUsingName:zoneID:
compressedProtobufDataForUpdateT1:
compressedProtobufDataForUpdateT2:
_dataForKey:
protobufForUpdateT1:
msgid
threadGuid
threadPart
cloudKitServerChangeTokenBlob
cloudKitRecordChangeTag
cloudKitRecordID
_recordType
setEtag:
setKnownToServer:
_populateCKRecordWithIMItemFields:
_populateCKRecordWithIMMessageItemFields:
_populateCKRecordWithIMGroupTitleChangeItemFields:
_populateCKRecordWithIMParticipantChangeItemFields:
_populateCKRecordWithIMLocationShareStatusChangeItemFields:
_populateCKRecordWithIMGroupActionItemFields:
_populateCKRecordWithIMMessageActionItemFields:
_dateForKey:
whitespaceAndNewlineCharacterSet
stringByRemovingCharactersFromSet:
__im_countMessageParts
_numberForKey:
unsignedIntValue
initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:bizIntent:locale:errorType:threadIdentifier:syndicationRanges:syncedSyndicationRanges:partCount:dateEdited:
recordType
populateIMMessageItemWithProtobufFields:withProtobufData:
populateIMMessageItemWithProtobufFields:withProtobufDataP2:
populateIMMessageItemWithProtobufFields:withProtobufDataP3:
initWithSenderInfo:time:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:type:
populateIMGroupTitleChangeItem:withProtobufData:
initWithSender:time:guid:type:
populateIMParticipantChangeItem:withProtobufData:
populateIMLocationShareStatusChangeItem:withProtobufData:
setSender:
populateIMGroupActionItem:withProtobufData:
populateIMMessageActionItem:withProtobufData:
setDestinationCallerID:
setReplyToGUID:
setParentChatID:
setCloudKitRecordChangeTag:
storeMessage:forceReplace:modifyError:modifyFlags:flagMask:
storeItem:forceReplace:
SIMInserted
callerIDShouldBeCheckedForRegistration:
_accountControllerSharedInstance
_shouldDownloadIfPhoneNumberAndNoSIM:
_recordFromServerChangeToken
shouldStoreMessage
isCompatibleWithMiC
protobufForUpdateT2:
createCKRecordForUpdateT1:zoneID:salt:
createCKRecordForUpdateT2:zoneID:salt:
createUpdateT1Info:
createItemWithCKRecord:
resetSyncStateForMessage:toState:
isUpdatingAttachmentFileSizes
setIsUpdatingAttachmentFileSizes:
longLongValue
_deviceConditionsAllowsAttachmentFileSizeUpdateForActivity:
markAttachmentPurgeable:
_cacheDeleteSetUp
_ckUtilitiesSharedInstance
isUsingCentralizedModel
setIsUsingCentralizedModel:
fileSystemRepresentation
__wrapperAroundCacheDeletePurgeNotificationCallback:
__wrapperAroundCacheDeletePurgeableCallback:urgency:
createDictionaryForNotDeletingAnyAttachments:urgency:
setDeviceLowOnDiskSpace:
__wrapperAroundCacheDeletePurgingCallback:urgency:
numberWithUnsignedLong:
_cacheDeleteRequestCacheableSpaceGuidanceWithID:diskVolume:urgency:requestedSize:
setAllowsWritingToDisk:
allowsWritingToDisk
_purgeableSpaceGivenUrgency:
_deleteAttachmentsAndReturnBytesDeleted:
purgeableAttachmentSize
purgeAttachments:
reportAvailableSpaceToBeDeleted:urgency:
deleteAttachmentsAndReturnBytesDeleted:urgency:
_copyAttachmentRecord:
_postTransferInfoOfDeletedTransfers:
postCoreAutomationNotificationFinishedPurgingAttachments:withErrorString:
_fileTransfersToDelete:
_deleteFilesOnDiskAndUpdateTransfers:
isSafeToDeleteAttachmentAtPath:
_fileTransfersToValidate:
_fetchTransfersFromCloudKit:withActivity:
_fetchTransfersFromCloudKit:indexOfTransfers:numberOfBatchesToFetch:activity:withCompletion:
initWithIndexesInRange:
_getIndexSetForBatch:indexOfTransfers:
objectsAtIndexes:
_indexOfNextBatch:totalTransfers:indexOfTransfers:
_shouldFetchNextBatch:totalTransfers:
updateAttachmentFileSizesWithActivity:
registerWithCacheDelete
resetAttachmentWatermark
isUsingCentralizeCacheDelete
metricAttachmentsToPurge:withActivity:
alreadyCapturedErrorWithAutoBugCapture
setAlreadyCapturedErrorWithAutoBugCapture:
isDeviceLowOnDiskSpace
_alreadyCapturedErrorWithAutoBugCapture
_allowsWritingToDisk
_deviceLowOnDiskSpace
_isUsingCentralizedModel
_isUpdatingAttachmentFileSizes
TB,N,V_alreadyCapturedErrorWithAutoBugCapture
TB,N,V_allowsWritingToDisk
deviceLowOnDiskSpace
TB,N,GisDeviceLowOnDiskSpace,V_deviceLowOnDiskSpace
TB,N,V_isUsingCentralizedModel
TB,V_isUpdatingAttachmentFileSizes
_processMessagesForAvailabilityAutoReply:forIncomingMessageFromIDSID:inChat:
_chatEligibleForAvailabilityInformation:
_messageSenderEligibleToReceiveAvailabilityInformation:
_messageItemsSupportingBreakthroughNotifications:
_shouldIgnoreDoNotDisturbForMessages:inChat:
autoReplier:sendNotifyRecipientCommandForMessages:inChat:
_messageGuidsForMessages:
autoReplier:receivedUrgentRequestForMessages:
_messageItemsSupportingAvailabilityReplyFromItems:
_sendDeliveredQuietelyForMessages:forIncomingMessageFromIDSID:inChat:
isLocalUserAvailableForContactInActiveMode:error:
instancesRespondToSelector:
serviceForClientIdentifier:
_dndHandleForIMDHandle:
setValue:
isBusinessChat
_userIsAvailableToHandle:
_messageItemSupportsAvailabilityReply:
_isSMSChat:
_sendTextAutoReplyIfNecessaryForMessages:withUrgentBreakthroughInstructions:inChat:
autoReplier:sendDeliveredQuietlyReceiptForMessages:forIncomingMessageFromIDSID:inChat:withWillSendToDestinationsHandler:
_shouldSendTextAutoReplyForChat:
_sendTextAutoReplyToChat:withUrgentBreakthroughInstructions:
_deviceIsPhone
_localDeviceHasSIMMatchingChat:
queryCurrentStateWithError:
activeModeConfiguration
mode
semanticType
dateByAddingTimeInterval:
compare:
isAutoReply
iterateRecentMessagesInChat:withBlock:
_messageItemSupportsBreakthroughNotification:
isEmpty
isLocatingMessage
isUnfinished
isSystemMessage
isEmote
_messageHasLegacyUrgentTriggerMatchInText:
didNotifyRecipient
_messageIsSOS:
_haveRecentUrgentMessageInGracePeriodForChat:
itemsWithHandles:onServices:limit:
enumerateObjectsWithOptions:usingBlock:
itemsWithHandles:onServices:messageGUID:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:hasMessagesBefore:hasMessagesAfter:
punctuationCharacterSet
formUnionWithCharacterSet:
stringByTrimmingCharactersInSet:
localizedStandardRangeOfString:
_customizedAutoReplyMessage
initWithString:attributes:
_autoReplyMessageTextWithUrgentBreakthroughInstructions:
autoReplier:generatedAutoReplyText:forChat:
_isInDrivingFocus
_deviceSupportsSMSAutoReplyForChat:
_deviceSupportsiMessageAutoReply
_haveRecentlySentUnavailabilityAutoReplyMessageToChat:
_autoReplyAudience
_stringForAutoReplyAudience:
_audience:allowsRepliesToChat:
automaticDNDStatus
allowedAutoReplyAudience:
autoReplyMessageWithReply:
_favoritesContainsParticipants:
_hasRecentOutgoingMessagesInChat:
_contactsContainsParticipants:
lastSentMessageDate
currentCalendar
isDateInToday:
isDateInYesterday:
_sosTransportValidForMessage:
_sosURLMatchInText:
regularExpressionWithPattern:options:error:
numberOfMatchesInString:options:range:
processMessages:inChat:fromIDSID:
replyDelegate
T@"<IMDAutoReplyDelegate>",W,N
setAutomaticDNDStatus:
_replyDelegate
_automaticDNDStatus
T@"CARAutomaticDNDStatus",&,N,V_automaticDNDStatus
T@"<IMDAutoReplyDelegate>",W,N,V_replyDelegate
_initWithContainer:scope:
initWithIdentifier:
_zoneManager
_zoneIdentifierForOperation:
identifierToZoneMap
_identifierToZoneMap
T@"NSDictionary",R,N,V_identifierToZoneMap
_setupNotificationCenter
initWithBundleIdentifier:
setWantsNotificationResponsesDelivered
serviceSession
updateNotificationUnreadCountForChat:
screenTimeAskReponseHandler
_markMessageAsRead:inChat:withCompletionHandler:
familyInviteResponseHandler
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
notificationCenter
setNotificationCenter:
setScreenTimeAskReponseHandler:
setFamilyInviteResponseHandler:
_notificationCenter
_screenTimeAskReponseHandler
_familyInviteResponseHandler
T@"UNUserNotificationCenter",&,N,V_notificationCenter
T@"IMDScreenTimeAskReponseHandler",&,N,V_screenTimeAskReponseHandler
T@"IMDFamilyInviteReponseHandler",&,N,V_familyInviteResponseHandler
_chatSyncOperationGroupWithName:
_chatFetchRecordZoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:
_chatFetchRecordZoneChangesCKConfiguration:
fetchChatZoneChangesCKOperationUsingToken:zone:resultsLimit:groupName:activity:
_chatWriteRecordsCKConfiguration:
_chatSyncOperationGroup
fetchChatZoneChangesCKOperationUsingToken:zone:resultsLimit:activity:
saveChatsCKOperationUsingRecordsToSave:activity:
deleteChatCKOperationUsingRecordIDstoDelete:
fetchChatCKOperationUsingRecordIDs:
initWithBundle:subServiceName:
registerSessionClassWithBundle:
_services
_makeAllNicknameContentsClassC
_nicknameFeatureEnabled
_ckAccountChanged:
_loadAllInfoFromDiskIfAble
evaluateAccountStateForFeatureEligibility
defaults
multiplePhoneNumbersTiedToAccount
aliasesDidChange:
getBoolFromDomain:forKey:
personalNickname
_tryToReuploadPersonalNicknameWithRetryCount:reuploadVersion:
setPersonalNickname:completionBlock:
_reuploadLocalProfileVersionNumber
_newDeviceDidSignIntoiMessageWithRetryCount:
_sendMessageDictionary:toDevice:
_retryPeerRequestWithRetry:
_deletePublicNicknameLocationAndKey
substringRecordIDForNickname:
meCardHasUpdated
_storePendingNicknameForUpload:
_deletePendingNicknameForUpload
chatsToSendNicknameInfoTo
sendPersonalNicknameToChat:
updatePersonalNickname:
avatar
imageFilePath
_isNicknamesSharingEnabled
transferServicesController
setPersonalNickname:oldRecordID:completionBlock:
_beginNicknameUpload:
nickNameRecordID
_showDebugAlertWithHeader:message:
setPersonalNickname:
_resetHandleSharingList
_storePublicNickname:nicknameLocation:encryptionKey:
_endNicknameUpload
sendPersonalNicknameRecordIDAndVersionToAllPeers
_getPendingNicknameForUpload
_clearSharingLists
_updateDenyAllowListHandlesVersion
_syncHandleAllowDenyListToOtherDevices
handlesSharingNicknamesDidChange
handleAllowList
handleDenyList
handleSharingKVStore
nickNameDecryptionKey
currentPersonalNicknameWithRecordID:decryptionKey:completionBlock:
getNicknameWithRecordID:decryptionKey:completionBlock:
totalTimeForKey:
nicknameForRecordID:handle:
saveNicknameForRecordID:handleID:userNickname:
deleteAllPersonalNicknamesWithCompletion:
pendingNicknameUpdates
initWithDictionaryRepresentation:
_markNicknameAsUpdated:incrementPendingNicknameVersion:
_markNicknameAsUpdatedForHandleID:
stringWithString:
appendString:
_updateHandleList:withHandles:forKey:broadcastUpdates:
_requestingToSendLocalNicknameInfo:
sendPersonalNicknameRecordIDAndVersionRequestedByDevice:
_updateSharingPreferencesIfNeededFromMadridMessage:
_updateCloudKitRecordIDAndDecryptionKeyIfNeededFromMadridMessage:
_updateHandledNicknamesIfNeeded:
_updateHandleDenyAllowListIfNeeded:
_updateMessageDictionaryWithPendingNicknameUpdates:
storedPersonalNickname
deleteAllPersonalNicknames:withCompletion:
messageDictionaryWithPersonalRecordIDAndVersion
nicknameIsUploadingToCK
broadcastHandlesSharingNicknamesDidChange
unionSet:
archivedDataWithRootObject:requiringSecureCoding:error:
persistData:forKey:error:
setRecordID:
setHandle:
replacedNicknameForHandleIDInHandledMapIfNeeded:nickname:
addNicknameToPendingUpdates:
markNicknameAsUpdated:
_updatePendingNicknameVersion
sendPendingNicknameUpdatesDidChange
setFirstName:
setLastName:
initWithImageName:imageFilePath:
setAvatar:
pendingNicknamesOrHandledNicknamesDidChange
hasImage
handledNicknames
handle
isUpdateFromNickname:withOptions:
dictionaryRepresentation
handledNicknamesKVStore
_writeNicknameToKVStore:nickname:
pendingNicknameUpdatesKVStore
_broadcastPendingMapChanged
_updateNicknameInHandledMap:
_deleteNicknameFromPendingMap:
_deleteHandleIDFromPendingMap:
_deleteHandleIDFromHandledMap:
_setUnderScrutiny:
_deviceUnderFirstUnlock
_isUnderScrutiny
_deleteDataUnderScrutiny
loadPersonalNicknameIfNeeded
reuploadProfileIfNeeded
loadHandledNicknamesAndPendingUpdates
loadSharingHandlesPrefs
_evaluateIfAccountHasMultiplePhoneNumbers
_uploadPendingNicknameIfNecessary
currentPersonalNicknamewithCompletionBlock:
_populateNicknameDictionary:forKVStore:limitToLoad:
setWithObjects:
unarchivedObjectOfClasses:fromData:error:
datasUpToLimit:deleteContext:error:
_strictlyUnarchivedObjectOfClasses:fromData:error:
nextObject
setAttributes:ofItemAtPath:error:
dataRepresentation
kvStore
initWithData:encoding:
arrayByAddingObjectsFromArray:
allNicknames
nicknameForRecordID:
nicknameForHandle:
substringToIndex:
verifyTruncatedRecordIDMatchesPersonalNickname:forChat:
NicknameWithRecordID:URI:decryptionKey:withCompletionBlock:
handleNicknameUpdatesFromPeerDevice:fromPeerDevice:
sendNicknamePreferencesDidChange
queueChatToSendNicknamePostUploadIfNeeded:
allowListedHandlesForSharing
denyListedHandlesForSharing
allowHandlesForSharing:onChatGUIDs:
denyHandlesForSharing:
clearPendingNicknameForHandleID:
ignorePendingNicknameForHandleID:
cleanUpNicknameForID:
pendingPersonalNickname
_deleteAvatarForNickname:
nicknameForHandleURI:
markAllNicknamesAsPending
setKvStore:
lastMeContactStoreSync
setLastMeContactStoreSync:
setHandledNicknamesKVStore:
setPendingNicknameUpdatesKVStore:
setHandleSharingKVStore:
setHandledNicknames:
setPendingNicknameUpdates:
setHandleAllowList:
setHandleDenyList:
needToLoadMapsInfoFromDisk
setNeedToLoadMapsInfoFromDisk:
setChatsToSendNicknameInfoTo:
setNicknameIsUploadingToCK:
_needToLoadMapsInfoFromDisk
_nicknameIsUploadingToCK
_personalNickname
_kvStore
_lastMeContactStoreSync
_handledNicknamesKVStore
_pendingNicknameUpdatesKVStore
_handleSharingKVStore
_handledNicknames
_pendingNicknameUpdates
_handleAllowList
_handleDenyList
_chatsToSendNicknameInfoTo
T@"IDSKVStore",&,N,V_kvStore
Td,N,V_lastMeContactStoreSync
T@"IDSKVStore",&,N,V_handledNicknamesKVStore
T@"IDSKVStore",&,N,V_pendingNicknameUpdatesKVStore
T@"IDSKVStore",&,N,V_handleSharingKVStore
T@"NSMutableDictionary",&,N,V_handledNicknames
T@"NSMutableDictionary",&,N,V_pendingNicknameUpdates
T@"NSMutableSet",&,N,V_handleAllowList
T@"NSMutableSet",&,N,V_handleDenyList
T@"IMNickname",&,N,V_personalNickname
TB,N,V_needToLoadMapsInfoFromDisk
T@"NSMutableArray",&,N,V_chatsToSendNicknameInfoTo
TB,N,V_nicknameIsUploadingToCK
T@"NSSet",R,N
messagesWithReplyToGUID:
isOlderThanItem:
messageID
sortID
setSortID:
copyOfMessagesWithReplyToGUID:
compareMessageToOtherMessagesWithSameReplyToGUIDAndAssignSortID:existingMessagesWithSameReplyToGUID:
assignSortIDToIncomingMessageWithNoExistingMessagesWithSameReplyToGUID:onChat:
assignSortIDToIncomingMessage:onChat:
persistMessage:
assignAndPersistSortIDForIncomingMessage:onChat:
setModificationStamp:
performInitialHousekeeping
sharedManager
addDelegate:
databaseFull
rebuildUnreadMessageCount
updateLastMessageForChat:hintMessage:
updateStateForChat:fromMessage:toMessage:forcePost:hintMessage:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:setUnreadCountToZero:
isAuxImage
AuxGUIDFromFileTransferGUID:
messageGUID
_itemsWithGUIDs:
updateStamp
initWithSyndicationAction:
messagePartGUID
updateSyndicatedMessageWithMessageGUID:newRange:
updateSyndicatedMessageWithMessageItem:newRange:
syndicationRanges
updateMessagesRanges:withMessagePartSyndicationRanges:didUpdate:
setSyndicationRanges:
componentsJoinedByString:
storeMessage:forceReplace:modifyError:modifyFlags:flagMask:updateMessageCache:calculateUnreadCount:
_storeAttachmentsForMessage:
isFullyRetracted
_updateCacheForMessageGUID:fromMessage:toMessage:updateLastMessage:calculateUnreadCount:
notificationIDSTokenURI
setNotificationIDSTokenURI:
reverseObjectEnumerator
initWithArray:
_itemsForMessageRecords:handleID:useAttachmentCache:shouldLoadAttachments:reverseOrder:
_messageItemsForMessageRecords:handleID:useAttachmentCache:shouldLoadAttachments:reverseOrder:
_fileTransferCenter
messagesWithAssociatedGUID:shouldLoadAttachments:
_itemsWithAssociatedGUID:shouldLoadAttachments:
registerTransfersWithGUIDs:forMessageGUID:
_hasMessagesWithGUIDs:
messageWithGUID:registerAttachments:
__stringByStrippingAttachmentAndControlCharacters
existingChatsForIDs:onService:style:
itemsWithHandles:onServices:messageGUID:threadIdentifier:limit:
_itemsWithHandles:onServices:messageGUID:threadIdentifier:limit:onlyMessages:
itemsWithRoomNames:onServices:messageGUID:threadIdentifier:limit:
_itemsWithRoomNames:onServices:messageGUID:threadIdentifier:limit:onlyMessages:
_itemsWithHandlesBeforeAndAfterGUID:handles:onServices:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:hasMessagesBefore:hasMessagesAfter:
_unreadMessagesWithHandles:onServices:limit:fallbackGUID:
_unreadMessagesWithRoomNames:onServices:limit:fallbackGUID:
fetchLastMessageRecordForChatRecordWithRowID:completionHandler:
predicateWithFormat:
sortDescriptorWithKey:ascending:
itemType
fetchMessageRecordsForChatRecordWithGUID:filteredUsingPredicate:sortedUsingDescriptors:limit:completionHandler:
objectAtIndex:
_missingMessageReadReceiptCache
chatForMessageGUID:enableVerboseLogging:
_chatsForMessageGUID:enableVerboseLogging:
chatsForMessageGUID:
chatsGUIDsForMessageWithGUID:
_chatsForMessageIdentifier:
chatsGUIDsForMessageWithIdentifier:
_isValidPhoneNumber:forCountryCode:
_cleanupPhoneNumber:
_copyHandle:onService:
countryCode
unformattedID
im_stripCategoryLabel
normalizedPhoneNumberHandleForValue:isoCountryCode:
isoCountryCode
isEquivalentToHandle:
cleanUnformattedPhoneNumber:countryCode:
deleteMessageGUIDs:
removeMessage:fromChat:
deleteInteractionsWithMessageGUIDs:
_deleteMessagesWithGUIDs:chatIdentifiers:style:onServices:batchNumber:completion:
_performBlock:afterDelay:
deleteMessagesWithChatIdentifiers:style:onServices:completion:
messageWithReplaceMessageID:fromHandle:onService:
account:chat:style:chatProperties:messageUpdated:suppressNotification:
updateStateForChat:forcePost:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:
markMessagesAsReadWithChatGUIDs:upToGUID:readDate:fromMe:
initWithLongLong:
shouldFilterUnreadMessageCount
_calculateUnreadMessagesCountFilteredByFocus
unreadCount
_handlesForChat:
activeFocusModeMatchesConversationWithHandleStrings:
partKeyForAttachmentGUID:
_suppressDBUpdateTimerFired
__postDBUpdate
broadcasterForChatDatabaseListeners
modificationStamp
databaseUpdated:
postCountChanges
notificationContext
_updateModificationDate
_postDBUpdate
databaseChatSpamUpdated:
lastFailedMessageDate
broadcasterForChatCountsListeners
lastFailedMessageDateChanged:
updateBadgeForLastFailedMessageDateChangeIfNeeded:
unreadMessagesCount
unreadCountChanged:
_shouldUseBadgeUtilities
updateBadgeForUnreadCountChangeIfNeeded:
_fileTransferGUIDsInMessageBody:
originalTextRangesByPartIndex
__im_messagePartIndexToRangeMap
setOriginalTextRangesByPartIndex:
historyForMessagePart:
__im_messagePartMatchingPartIndex:
messagePartBody
initWithMessagePartText:dateSent:backwardCompatibleMessageGUID:
dateEdited
setHistory:forMessagePart:
isRead
retractedPartIndexes
addRetractedPartIndex:
setErrorCode:
supportsDataDetectors
setBody:
_updateAssociatedMessageItemsFromMessage:toMessage:
updatePostedNotificationsForMessageGUIDs:
enumerateIndexesUsingBlock:
pluginSessionGUID
setConsumedSessionPayloads:
consumedSessionPayloads
_messagesThatNeedSyncWithCloudKitWithLimit:attemptCount:
_itemClassShouldUpdateTransferForItem:
_messagesPendingUpdateT1ToCloudKitWithLimit:attemptCount:
_messagesPendingUpdateT2ToCloudKitWithLimit:attemptCount:
_displayDatabaseFullAlert
localizedStringWithFormat:
databaseNoLongerFull
focusStateDidChange
_chatRegistrySharedInstance
updateFileTransfer:
updateSyndicatedMessageWithSyndicationMessageAction:
updateUnformattedID:forBuddyID:onService:
messagesWithAssociatedGUID:
messagesWithGUIDs:
canStoreItem:onService:
canStoreMessage:onService:
hasStoredMessageWithGUID:
existingMessageSimilarToMessage:skipServices:skipGUIDs:withinTimeInterval:participants:
markMessageAsDeduplicated:
itemsWithHandles:onServices:messageGUID:limit:
itemsWithRoomNames:onServices:limit:
itemsWithRoomNames:onServices:messageGUID:limit:
lastMessageWithHandles:onServices:
unreadMessagesWithHandles:onServices:limit:fallbackGUID:
unreadMessagesWithRoomNames:onServices:limit:fallbackGUID:
lastMessageWithRoomNames:onServices:
attachmentsWithHandles:onServices:
attachmentsWithRoomNames:onServices:
messageActionItemsForOriginalMessageGUID:
frequentRepliesForForChatIdentifiers:onServices:limit:
addMissingMessageReadReceipt:
popReadReceiptForMissingGUID:
chatForMessage:
chatsForMessage:
chatForMessageIdentifier:
existingChatForMessageGUID:
resolveUnformattedRepresentationsForHandles:onService:message:completionBlock:
deleteMessageGUIDs:inChat:
deleteMessagesWithChatIdentifiers:style:onServices:
deleteMessagesWithReplaceMessageID:fromHandle:onService:
markMessageGUIDUnread:
markMessagesAsReadWithIdentifiers:onServices:chatStyle:upToGUID:readDate:fromMe:
deleteMessageFromSpotlightWithGUID:
cleanseAttachments
isSuppressDatabaseUpdates
setSuppressDatabaseUpdates:
retractPostedNotificationsForMessageGUIDs:
postUrgentNotificationsForMessageGUIDs:
rebuildLastFailedMessageDate
replaceMessageAcknowledgmentsWithNewMessageAcknowledgment:associatedMessageGUID:sender:
storeEditedMessage:editedPartIndex:editType:previousMessage:chat:updatedAssociatedMessageItems:
loadConsumedSessionPayloadsForItems:
messagesThatNeedSyncWithCloudKitWithLimit:
messagesPendingUpdateT1ToCloudKitWithLimit:
messagesPendingUpdateT2ToCloudKitWithLimit:
markAllMessagesAsNeedingCloudKitSync
copyMessagesThatNeedToBeDeletedInCloudKitWithLimit:
deleteMessagesFromTombStoneTableWithRecordIDs:
clearMessagesTombStoneTable
markMessageAsCleanWithROWID:
markMessageAsIgnoreButNeedingSyncWithROWID:
lastSyncedMessageRowID
_modificationStamp
_cachedUnreadMessageCount
_cachedLastFailedMessageDate
_suppressedUpdates
_pendingDBUpdatePost
_suppressedUpdatesTimer
T@"NSString",&,V_modificationStamp
photoAnalysisInSpotlightEnabled
wellKnownPhotoLibraryURLForIdentifier:
initWithPhotoLibraryURL:
stopListening
unregisterChangeObserver:
setPhotoLibrary:
setSortDescriptors:
setFetchPropertySets:
totalChangeCount
changeObservationQueue
analysisFetchOptions
fetchAssetsWithOptions:
curationProperties
syndicationIdentifier
startListening
syndicationLibrary
_analysisFetchOptions
_syndicationLibrary
_changeObservationQueue
T@"PHPhotoLibrary",R,N,V_syndicationLibrary
T@"NSObject<OS_dispatch_queue>",R,N,V_changeObservationQueue
T@"PHFetchOptions",R,N,V_analysisFetchOptions
sortUsingSelector:
SHA1HexString
setGroupID:
setEngramID:
setProperties:
setDisplayName:
setIsFiltered:
setLastAddressedLocalHandle:
setLastAddressedSIMID:
setChatIdentifier:
setServiceName:
setStyle:
setParticipants:
setHasHadSuccessfulQuery:
setCreateEngramGroupOnMessageSend:
setPendingENGroupParticipantUpdate:
setRoomName:
_updateCachedParticipants
setServerChangeToken:
setOriginalGroupID:
setLastReadMessageTimeStamp:
setIsBlackholed:
setWasReportedAsJunk:
_setAutoDonationBehavior:lastModificationDate:
storeChat:
copyDictionaryRepresentation:
chat:updated:
lastTUConversationCreatedDate
numberWithChar:
handleInfo
compareIDs:
indexOfObject:matchingComparison:
isBetterDefinedThan:
replaceObjectAtIndex:withObject:
__mainThreadPostNotificationName:object:userInfo:
invalidatePersonCentricGroupedChatsCache
addParticipants:
removeObjectAtIndex:
removeParticipants:
initWithID:unformattedID:countryCode:
addParticipant:
isGroupChat
groupID
persistentID
isSMS
_sortedParticipantIDHashForParticipants:usesPersonCentricID:
deviceIndependentID
personCentricID
roomName
originalGroupID
lastAddressedLocalHandle
lastAddressedSIMID
isFiltered
hasHadSuccessfulQuery
engramID
serverChangeToken
lastReadMessageTimeStamp
engroupCreationDate
groupPhotoGuid
copyDictionaryRepresentation
setLastSentMessageDate:
isEqualToDictionary:
storeAndBroadcastChatChanges
chat:engramIDUpdated:
updateLastAddressedHandle:forceUpdate:
trimmedString
chat:lastAddressedHandleUpdated:
chat:lastAddressedSIMIDUpdated:
updateDisplayName:sender:
updateFaceTimeGroupName:
chat:chatPersonCentricID:displayNameUpdated:sender:
chat:isFilteredUpdated:
acquireAssertionToUnsuspendProcess
leftChat:
dictionaryRepresentationIncludingLastMessage
previouslyBlackholedChatLoadedWithChatIdentifier:chats:
chatLoadedWithChatIdentifier:chats:
checkBlackholedChatsExistAfterUpdatingChatWithAdd:
getNumberOfTimesRespondedToThread
updateIsFiltered:
isSMSSubClassificationEnabled
fetchSMSFilterParamForCategory:subCategory:
category
subCategory
lastSeenMessageGuid
micGroupPhotoEnabled
groupPhotoUploadFailureCount
isEqualToNumber:
CNContactID
setCNContactID:
_mergeParticipantIDs
personCentricIDForChatWithGUID:chatIdentifier:chatStyle:groupID:displayName:participantIDs:
_ckUniqueID
tearDownSessionForChatIdentifier:
chat:nicknamesUpdated:
setMeCardUpdated:
initWithAccountID:service:guid:groupID:chatIdentifier:participants:roomName:displayName:lastAddressedLocalHandle:lastAddressedSIMID:properties:state:style:isFiltered:hasHadSuccessfulQuery:engramID:serverChangeToken:cloudKitSyncState:originalGroupID:lastReadMessageTimeStamp:lastMessageTimeStampOnLoad:cloudKitRecordID:isBlackholed:autoDonationBehavior:autoDonationBehaviorLastModificationDate:
autoDonationBehavior
autoDonationBehaviorLastModificationDate
setAutoDonationBehavior:lastModificationDate:
_setUnreadCount:
isArchived
_setRowID:
participantHandles
removeParticipant:
resetParticipants:
recoverParticipantsIfNeeded
pinningIdentifier
_sortedParticipantIDHashForParticipants:
isOlderThan:
isNewerThan:
chatProperties
_updateLastMessage:
generateNewGroupID
isUnnamedChat
updateGroupID:
updateEngramID:
updateEngroupCreationDate:
updateLastReadMessageTimeStampIfNeeded:
updateServerChangeToken:
updateCloudKitSyncState:
updateOriginalGroupID:
updateCloudKitRecordID:
resetCKSyncState
updateLastAddressedHandle:
updateLastAddressedSIMID:
updateDisplayName:
updateIsBlackholed:
updateNumberOfTimesRespondedToThread
updateIsiMessageSpam:
updateSMSCategory:subCategory:
updateShouldForceToSMS:
updateSMSSpamExtensionNameChatProperty:
updateReceivedBlackholeError:
updateSMSHandshakeState:
updateMessageHandshakeState:
isiMessageSpam
isSMSSpam
receivedBlackholeError
smsHandshakeState
messageHandshakeState
lastSeenMessageGUID
updateLastSeenMessageGuidIfNeeded:
lastTranslatableMessageGUIDWithLanguageCode:
updateLastMessageGUID:forLanguageCode:
isEmergencyChat
updateIsEmergencyChat:
updateHasHadSuccessfulQuery:
updateGroupPhotoGuid:
updateGroupPhotoUploadFailureCount:
_persistMergedIDMergedChatsIfNeeded:
cloudKitChatID
cloudKitDebugDescription
tearDownToneNotificationSessionIfNeeded
updateNicknamesForParticipants:
createEngramGroupOnMessageSend
pendingENGroupParticipantUpdate
nicknamesForParticipants
wasReportedAsJunk
numMessagesSent
setNumMessagesSent:
meCardUpdated
_serviceName
_properties
_chatIdentifier
_guid
_groupID
_engramID
_roomName
_displayName
_lastAddressedLocalHandle
_lastAddressedSIMID
_participants
_lastMessage
_chatInfo
_unreadCount
_rowID
_cloudKitSyncState
_originalGroupID
_serverChangeToken
_lastReadMessageTimeStamp
_lastMessageTimeStampOnLoad
_style
_createEngramGroupOnMessageSend
_pendingENGroupParticipantUpdate
_isArchived
_isFiltered
_isBlackholed
_hasHadSuccessfulQuery
_autoDonationBehavior
_autoDonationBehaviorLastModificationDate
_wasReportedAsJunk
_meCardUpdated
_cloudKitRecordID
_lastSeenMessageGuid
_nicknamesForParticipants
_numMessagesSent
T@"<IMDaemonListenerChatProtocol>",R,N
T@"NSString",C
T@"NSString",C,SsetGroupID:
T@"NSString",C,SsetEngramID:
T@"IMMessageItem",&
T@"NSDictionary",&
TQ,S_setUnreadCount:
Tq,S_setRowID:
T@"NSArray",C
TQ,V_numMessagesSent
TB,V_meCardUpdated
T@"NSString",C,N
T@"NSString",C,V_cloudKitRecordID
Tq,N
T@"NSString",R,C,V_lastSeenMessageGuid
T@"NSDate",&,N
T@"IMDServiceSession",R,&
T@"IMDAccount",R,&
T@"IMDService",R,&
T@"NSDictionary",R,&
TB,R
TB,V_createEngramGroupOnMessageSend
TB,V_pendingENGroupParticipantUpdate
T@"NSDictionary",R,N,V_nicknamesForParticipants
TB,V_wasReportedAsJunk
T@"NSDate",R,N
_container
setCachedSalt:
fetchUserRecordIDWithCompletionHandler:
fetchLatestRecordKeyFromCKAndCreateIfKeyDoesNotExistWithCompletion:forceFetch:
_CKUtilitiesSharedInstance
_fetchLatestSaltFromCloudKitAndPersistWithCompletion:
clearLocalSyncState
fetchLatestRecordKeyFromCKAndCreateIfKeyDoesNotExistWithCompletion:
deleteDeDupeRecordZone
_cachedSalt
T@"NSObject<OS_dispatch_queue>",R,N,V_ckQueue
T@"NSString",&,V_cachedSalt
initWithID:unformattedID:countryCode:personCentricID:
uppercaseString
_forceReloadChats:
replayMessages
initialize
_contactsChanged:
updateMeCardHasUpdatedForAllChats
_chatsWithBlackholed:
blackholedChats
existingChatForID:account:
addChat:
isInternationalSpamFilteringEnabled
existingSMSChatForID:withChatStyle:
addIMDHandleToRegistry:
existingChatWithIdentifier:account:
existingChatForRoom:account:
allExistingChatsWithIdentifier:
generateUnusedChatIdentifierForGroupChatWithServiceName:chatWithChatIdentifierExists:
existingiMessageChatForID:withChatStyle:
_cachedChatWithGUID:
chatCacheEnabled
chatStore
chatWithGUID:
_addChatFromCacheMiss:preferExistingChat:
chatsFilteredUsingPredicate:
_addChatsFromCacheMisses:preferExistingChats:
existingChatsFilteredUsingPredicate:sortedUsingLastMessageDateAscending:olderThan:limit:
chatsFilteredUsingPredicate:sortedUsingLastMessageDateAscending:olderThan:limit:
_cachedChatsWithGroupID:
chatsWithGroupID:
chatsWithIdentifier:onService:
allChats
supportedServiceNames
allChatsWithIdentifier:style:serviceNames:
chatsWithPinningIdentifier:
chatsWithHandle:onService:
existingChatForIDs:account:displayName:groupID:style:
existingChatsForIDs:onService:displayName:groupID:style:
_existingChatsForIDs:serviceName:displayName:groupID:style:
_legacyExistingLoadedChatsForIDs:onService:displayName:groupID:style:
chatsWithHandles:onService:displayName:groupID:style:
chatsWithRoomname:onService:
chatsWithIdentifier:
_participantIDSetFromHandles:toIdentifier:
allExistingChatsWithIdentifier:style:
updateGroupIDForChat:newGroupID:
_exactGroupChatMatchOrNewestMatchingGroupID:serviceName:participants:toIdentifier:
_newestGroupChatMatchingParticipants:displayName:strictDisplayNameMatching:serviceName:toIdentifier:
_setGroupID:forChatAndAllSiblings:
updateLastMessageForChat:hintMessage:historyQuery:
unreadCountForChat:
isBeingSetup
updateUnreadCountForChat:
_sharedMessageStore
updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:
updateStateForChat:forcePost:shouldRebuildFailedMessageDate:
__removeChatFromGroupIDChatIndex:
__addChatToGroupIDChatIndex:
blackholedChatsExist
broadcasterForBlackholeChatListeners
blackholedChatsExist:
_reportMessageDictionaryForMessages:withLastAddressedHandle:maxMessageLength:isAutoReport:withChat:maxMessagesToReport:totalMessageCount:
_reportToIDSiMessageSpam:
_shouldHandleInternalPhishingAttempts
_reportMessageDictionaryForMessages:withLastAddressedHandle:maxMessageLength:isAutoReport:withChat:maxMessagesToReport:totalMessageCount:onlyReportForiMessageService:notifyInternalSecurity:
_spamMessageCreator
_populateLastMessageForChat:
addChat:firstLoad:
_finalizeIncomingChat:
personCentricGroupedChatsCache
_contactsBasedMerginEnabled
_updateCachedCNIDMapForHandles:
cachedAliasToCNIDMap
_evictCachedChat:
deleteChat:
deleteInteractionsWithChatGUIDs:
removeIMDHandleFromRegistry:
addMessageWithGUID:toChat:
removeMessageWithGUID:fromChat:
updateStateForChat:hintMessage:
addMessage:toChat:deferSpotlightIndexing:
addMessageWithGUID:toChat:deferSpotlightIndexing:
_fixSMSGroupChatAndStoreIfNeeded:iMessageChat:chatToRegenerate:
_chatGUIDToChatMapForChats:
_siblingChatForChat:usingChatGUIDToChatMap:
_fixUpChatParticipantsIfNeeded:usingChatGUIDToChatMap:
stringForChatStyle:
_chatInfoInRange:wantsBlackholed:
sortedArrayUsingComparator:
cachedChatCount
loadChatsWithCompletionBlock:
notifyClientsNewSetupInfoAvailable
mainQueue
addObserverForName:object:queue:usingBlock:
loadRecentChats
loadAllChats
trackEvent:withDictionary:
initWithUUIDString:
repairDuplicateChatsIfNeeded
_populateContactIDOnHandles
_persistMergeIDMergedChatsIfNeeded
_markGroupPhotosAsUnpurgeableIfNecessary
initWithMessageHistorySyncTaskFactory:
postNotificationName:object:
setUpInitialConversationManager
_allHandles
indexOfObject:
_makeAllAttachmentsClassC
_updateRoutingTimerWithInterval:
_updateExpireStateTimerWithInterval:
fetchLatestRampStateFromCK:
performOneTimeAccountUpgradeCheckIfNeeded
_chat:isDuplicateOfChat:
_createGroupChatsArray
findDuplicateChats:
_findChatWinnerInDuplicateChatArray:fixDisplayName:
_findLosingChatGUIDsInArrayOfChats:withWinner:
removeChat:
_mergeDuplicateGroupsIfNeeded
markAttachmentUnpurgeable:
groupChatsBasedOnIdentity:
setPersonCentricGroupedChatsCache:
groupChatsBasedOnIdentityUsingCacheIfApplicable:
sortPersonCentricChatGroups:
truncatedSortedChatsGroupedByPersonCentricID:count:pinnedChatIdentifiers:
_mergedPinningIdentifiersForChats:chatGUIDToChatMap:groupedChatsByPersonCentricIdWithSortedChats:
_repairInconsistentGroupPhotoGuidOnMergedChatsIfNecessary:
_haveInconsistentGroupPhotoGuidOnMergedChats:
createdDate
enumerateBatchedChatsFilteredUsingPredicate:batchSize:block:
chatWithCKRecord:
_updateSyncStatisticsForChat:incrementTotalCount:
newestChatWithOriginalGroupID:onService:
_newestExistingChatWithOriginalGroupID:onService:
_newestExistingChatWithGroupID:onService:
newestChatWithGroupID:onService:
hasDumpedLogsForNoExisitingGroup
setHasDumpedLogsForNoExisitingGroup:
applyChangesUsingCKRecord:
_markForksAsSyncedForChat:
_shouldUpdateSyncStatsForChat:originalSyncState:
_existingChatForCKRecord:
_updateChat:usingRecord:
_ensureNoExistingGroupForCKRecord:
_insertChatUsingCKRecord:
enumerateBatchedChatsFilteredUsingPredicate:block:
addLocationShareItemToMatchingChats:
addItem:toChat:
processMessageUsingCKRecord:updatedLastMessageCount:
_itemFromCKRecord:
_parentChatIDFromCKRecord:
_lookupChatUsingParentChatID:service:
_existingItemRequiresUpgrade:itemFromCKRecord:
_adoptUpdatedStateForExistingItem:itemFromCKRecord:
_shouldUpdateSyncStatsForMessage:originalSyncState:
_updateSyncStatisticsForMessage:incrementTotalCount:
_setSortIDOnIncomingMessage:forChat:
enumerateAttachmentGUIDsWithBlock:
_addItemToParentChatIfNotLocationItem:parentChat:updatedLastMessageCount:
updateSyncedSyndicationRanges:forGUID:
handleMessageUpdate:
rangesFromSerializedString:
maxStartDateForRanges:
setSyncedSyndicationRanges:
numberWithUnsignedChar:
initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:associatedMessageGUID:associatedMessageType:associatedMessageRange:messageSummaryInfo:threadIdentifier:
generatedRoomNameForGroupChat
didJoinChat:style:displayName:groupID:handleInfo:account:isBlackholed:
setHistoryToken:
isEqualToData:
aliasToCNIDMap
_updateCachedAliasToCNIDMap:withHistoryToken:completionHandler:
idToHandlesMap
_aliasToCNIDMapForAliases:
_generateCurrentAliasToCNIDDictionary
setCachedAliasToCNIDMap:
logHandleIDs:checkAdditionalLoggingEnabled:
logDictionary:
_extractHandlesFromMap:usingCNID:
dictionary
_checkForContactChanges
chatsNeedRemerging:groupedChats:
_chatGUIDsThatNeedRemergingWithCompletionHandler:
_chatGUIDsThatNeedRemerging:chatDictionaryArray:aliasMap:
_updateCurrentAliasToCNIDDictionaryAndHistoryTokenWithCompletionHandler:
_handlesWithChangedContactsOriginalMap:newMap:
existingOneOnOneChatsWithIdentifiers:
existingGroupChatsContainingHandles:
trackSpamEvent:
personCentricGroupedChatsArrayWithMaximumNumberOfChats:skipsLastMessageLoading:usingChats:useCachedChatGroups:includingPinnedChatIdentifiers:
moveMessageRecordsToRecoveryForMessageGUIDs:deleteDate:
moveMessageRecordsToRecoveryForChatRecordsWithGUIDs:deleteDate:
recoverMessageRecordsForChatRecordsWithGUIDs:
loadRecoverableMessagesMetadataGroupedByChatGUID
recoverableMessagesMetadataPendingCloudKitSaveWithLimit:
recoverableMessagesMetadataPendingCloudKitDeleteWithLimit:
clearRecoverableMessageTombStones
updateRecoverableMessageSyncState:forMessageRowID:onPartIndex:
chats
chatForHandle:account:chatIdentifier:guid:lastAddressedHandle:lastAddressedSIMID:isBlackholed:
chatForHandles:account:chatIdentifier:style:groupID:displayName:guid:lastAddressedHandle:lastAddressedSIMID:isBlackholed:
chatForRoom:account:chatIdentifier:guid:
generateUnusedChatIdentifierForGroupChatWithAccount:
existingiMessageChatForID:
existingSMSChatForID:
existingChatsFilteredUsingPredicate:
existingChatsFilteredUsingPredicate:sortedUsingLastMessageDateAscending:limit:
existingChatsWithPinningIdentifier:
existingChatWithEngramID:
existingChatForIDs:account:style:
existingChatsForIDs:displayName:groupID:style:
allExistingSupportedServiceChatsWithIdentifier:style:
bestCandidateGroupChatWithFromIdentifier:toIdentifier:displayName:participants:groupID:serviceName:
updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:
updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:setUnreadCountToZero:
updateStateForChat:forcePost:
updateStateForChat:forcePost:shouldRebuildFailedMessageDate:setUnreadCountToZero:
markAsSpamForIDs:style:onServices:chatID:queryID:autoReport:
removeItem:fromChat:
addMessage:toChat:
_fixUpChatParticipantsIfNeeded:
_chatInfoForChats:
_chatInfoForConnection
_allChatInfo
_chatInfoForNumberOfChats:
_blackholedChatInfoForNumberOfChats:
_setInitialLoadForTesting:
refreshUIWhileSyncing
waitForLoadedChatsWithCompletionHandler:
allHandlesForID:
findDuplicateUnnamedGroups:
chatsToUploadToCloudKitWithLimit:
updateChatWithGUID:serverChangeToken:recordID:
updateChatUsingCKRecord:
resolveChatConflictUsingCKRecord:localGUID:
markChatAsDeferredForSyncingUsingCKRecord:
markDeferredChatsAsNeedingSync
messagesToUploadToCloudKitWithLimit:
processMessageUsingCKRecord:
handleMessageUpdateConflictType:serverRecord:localRowID:
copyRecordIDsAndGUIDsPendingCloudKitDelete
clearPendingDeleteTable
_existingiMessageChatForChatIdentifier:style:
simulateMessageReceive:serviceName:groupID:handles:sender:date:associatedMessageType:associatedMessageGuid:
recoverableMessagesMetadata
persistedChatCount
setIdToHandlesMap:
historyToken
setCkUtilities:
setChatStore:
messageProcessingController
messageHistorySyncController
conversationManager
_chatsByGroupID
_chatsLock
_handlesLock
_chats
_doneLoadingAfterMerge
_blackholedChatsExistCache
_hasDumpedLogsForNoExisitingGroup
_persistedChatCount
_idToHandlesMap
_historyToken
_ckUtilities
_chatStore
_messageProcessingController
_messageHistorySyncController
_personCentricGroupedChatsCache
_cachedAliasToCNIDMap
_conversationManager
T@"NSMutableDictionary",&,N,V_idToHandlesMap
T@"NSData",R,N,V_historyToken
T@"IMDCKUtilities",&,N,V_ckUtilities
T@"IMDChatStore",&,N,V_chatStore
TB,N,V_hasDumpedLogsForNoExisitingGroup
T@"IMDMessageProcessingController",R,N,V_messageProcessingController
T@"IMDMessageHistorySyncController",R,N,V_messageHistorySyncController
T@"NSMutableDictionary",&,N,V_personCentricGroupedChatsCache
T@"NSMutableDictionary",&,N,V_cachedAliasToCNIDMap
T@"TUConversationManager",R,N,V_conversationManager
TQ,R,N
TQ,R,N,V_persistedChatCount
initWithContainerIdentifier:environment:
setMmcsEncryptionSupport:
setUseZoneWidePCS:
initWithContainerID:options:
_serverSaysToUseOldContainer
_nickNameContainerIdentifier
privateCloudDatabase
publicCloudDatabase
manateeContainer
_nickNameContainer
truthPublicDatabase
nickNamePublicDatabase
fetchCurrentUserForNicknameContainer:
nickNameContainer
_manateeContainer
T@"CKContainer",R,N,V_manateeContainer
T@"CKContainer",R,N,V_nickNameContainer
T@"CKContainer",R,N
encodeSystemFieldsWithCoder:
finishEncoding
cStringUsingEncoding:
_kvStorePath
_handleFetchZoneChangesOperation:
_handleModifyRecordsOperation:
configurationsByRecordZoneID
_fetchRecordZoneChangesOptionsFromOperation:
resultsLimit
unarchivedObjectOfClass:fromData:error:
fetchAllChanges
_fetchResultLimit:
recordStore
_ckRecordFromData:
recordChangedBlock
deleteBatchWithContext:error:
recordZoneChangeTokensUpdatedBlock
recordZoneFetchCompletionBlock
fetchRecordZoneChangesCompletionBlock
_serializedCKRecordData:
perRecordCompletionBlock
setRecordStore:
_identifier
_queue
_recordStore
T@"NSString",R,N,V_identifier
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
T@"IDSKVStore",&,N,V_recordStore
retryTimer
setRetryTimer:
initWithZoneName:
_rampUpRecordID
_shouldSendPriorityRequest
desiredKeys
isValid
timerWithTimeInterval:repeats:block:
mainRunLoop
addTimer:forMode:
fireDate
_writeRampStateAllowed:promoted:visible:fetchHadServerError:
_performRampCheckWithRetryAfter:
_persistRampFetchServerError:
_fetchLatestRampStateFromCK:
cachedRampState:
_retryTimer
T@"NSTimer",&,N,V_retryTimer
substringFromIndex:
mutableProperties
property:changedTo:from:
mutablePersistentProperties
persistentProperty:changedTo:from:
T@"IMDDaemonPropertyManager",R,N
setValue:ofProperty:
valueOfProperty:
persistentProperties
setValue:ofPersistentProperty:
valueOfPersistentProperty:
setMutableProperties:
setMutablePersistentProperties:
_mutableProperties
_mutablePersistentProperties
T@"NSMutableDictionary",&,N,V_mutableProperties
T@"NSMutableDictionary",&,N,V_mutablePersistentProperties
T@"NSDictionary",R,C,N
context
firstOccurrence
setContext:
shouldJettison:
setCount:
_contextWeakReference
_firstOccurrence
_count
T@,W,N
T@"NSDate",R,V_firstOccurrence
TQ,N,V_count
initWithFormat:arguments:
setCreatedDate:
setIsIncoming:
setUserInfo:
setTotalBytes:
setIsSticker:
setStickerUserInfo:
setOriginalGUID:
setCommSafetySensitive:
saveAttachmentsForTransfer:chatGUID:storeAtExternalLocation:completion:
isAuxVideo
guidByStrippingAuxPrefix:
createAndPersistLivePhotoBundleIfNecessary
startDate
mimeType
stickerUserInfo
commSafetySensitive
originalGUID
_transferCanBeMarkedPurgable:
storeAttachment:associateWithMessageWithGUID:chatGUID:storeAtExternalLocation:
updateAttachment:chatGUID:storeAtExternalPath:
fileTransferWithAttachmentRecordRef:
_cloudkitSyncingEnabled
pathExtension
markAttachment:purgeable:
markFile:asPurgeable:
im_livePhotoVideoPath
URLHostAllowedCharacterSet
stringByAddingPercentEncodingWithAllowedCharacters:
fetchAttachmentRecordsFilteredUsingPredicate:limit:completionHandler:
_updateLegacyTransferGUIDOn:andUpdateMessageIfNeeded:transfersToSync:
_shouldEarlyReturnForWrongItemType:
_loadAttachmentRecordForGUID:
_newFileTransferFromIMDAttachmentRecordRef:
_IMTransferGUIDForMessageGUID:andIndex:
_updateAttachmentGUID:withGUID:
updateTransferIn:fromGUID:toGUID:
_updatedMessageBody:replacingGuid:withGuid:
_reindexMessage:completion:
characterAtIndex:
attribute:atIndex:effectiveRange:
removeAttribute:range:
addAttribute:value:range:
coreSpotlightDeleteAttachmentGUIDs:
deleteAttachmentsForTransfer:
isSafeToDeleteAttachmentPath:
deleteAttachmentsDirectWithPredicate:
canMarkPurgable
fileEligibleForCacheDelete:
_askToTapToRadarForErrorString:path:
removeAttachment:fromMessageWithGUID:
attachmentsFilteredUsingPredicate:limit:
database
deleteAttachmentsForMessage:
deleteAttachmentDataForTransfer:
setBroadcastedSyncStateStateToStarting
setBroadcastedSyncStateStateToFinished
setRecordsRead:
setRecordsWritten:
setRecordsWriteFailed:
recordsRead
recordsWriteFailed
recordsWritten
addSyncDebuggingInfoToDictionary:
syncController:syncBatchCompleted:
setBroadcastedSyncStateToStartingPeriodicSync
setBroadcastedSyncStateToStartingInitialSync
syncStateDebuggingInfo:
_isSyncing
_recordsRead
_recordsWritten
_recordsWriteFailed
TB,N,V_isSyncing
TQ,N,V_recordsRead
TQ,N,V_recordsWritten
TQ,N,V_recordsWriteFailed
T@"IMDCKSyncState",R,N
T@"<IMDCKAbstractSyncControllerDelegate>",W,V_delegate
rangeValue
scannerWithString:
scanUnsignedLongLong:
_unsignedIntegerFromString:
addIndex:
valueWithRange:
_makeDeletePartsDictFor:withIndexes:withIndexToRangeMap:deleteDate:
addBlock:withTimeout:forKey:description:
im_enqueuiMessageBlock:withTimeout:description:
im_enqueuSMSBlock:withTimeout:description:
initWithObject:title:queue:
setStateCaptureAssistant:
_addGroupPhotoToTransferCenterForChat:
_loadChatsIncludingAllChats:
loadAllChatsProgressivelyEnabled
isReducedChatCacheSizeEnabled
_processIncomingChat:
_incomingChatsWithChatRecords:
_incomingChatWithChatRecord:
chatRecordsFilteredByPredicate:
fetchChatRecordsFilteredUsingPredicate:sortedUsingDescriptors:limit:completionHandler:
fetchChatRecordsFilteredUsingPredicate:sortedUsingLastMessageDateAscending:olderThan:limit:completionHandler:
chatRecordsWithIdentifier:
fetchChatRecordsWithPinningIdentifier:completionHandler:
chatRecordsWithHandles:serviceName:displayName:groupID:style:
setBatchSize:
setPredicate:
initWithGUID:
setTaskFlag:
storePTask:
syndicationStatus
setPersonCentricID:
updateHandle:sourceMessage:personCentricID:onService:
archiveChat:
unarchiveChat:
blackholeChat:
unblackholeChat:
chatsFilteredUsingPredicate:sortedUsingDescriptors:limit:
remapMessageError:toError:forChat:completion:
setChatIsFiltered:withChatGuid:
updatePersonCentricIDForHandlesInChatWithMessage:fromIdentifier:personCentricID:chat:
_broadcastToForceReloadChats
messagePTaskStore
setMessagePTaskStore:
stateCaptureAssistant
_lastModificationStamp
_messagePTaskStore
_stateCaptureAssistant
T@"NSString",&,V_lastModificationStamp
T@"<IMDMessagePTaskStore>",&,V_messagePTaskStore
T@"IMStateCaptureAssistant",&,N,V_stateCaptureAssistant
T@"<IMDRemoteDatabaseProtocol>",R,N
_addLocationShareItemToMatchingChats:handleID:hasStoredItem:broadcastChanges:
_generateLocationSharingItemWithHandleID:direction:action:
receivedIncomingLocationSharePacket:
_forwardMappingPacket:toID:account:
_migrateSyncTokens
incompatibleMessageDeleteDetected:
size
_numberOfMessagesToUpload
_messageZoneID
_messageRecordSalt
_sharedIMDMessageStore
_isValidCKRecordToSync:
_recordsToSaveWithAttemptCount:
addNewMessagesSyncedCount:
_writeDirtyMessagesToCloudKitWithActivity:completion:
_recordsToSave
_syncOperationGroupName
_processRecordWriteCompletionForRecord:NSError:
_processModifyRecordsCompletion:deletedRecordIDs:operationError:isLastBatchOfWrite:activity:writeCompletionBlock:
_deviceConditionsAllowsMessageSyncForActivity:deviceConditionsToCheck:currentBatchCount:maxBatchCount:
_isCoreDuetSyncForMaxBatchCount:activity:
_shouldDeferCoreDuetMessagesSyncWithActivity:
_numberOfBatchesOfMessagesToFetchInInitialSync
setArchivedRecordSyncToken:
_changeTokenKey
setLatestSyncToken:
_fetchArchivedRecordsIfNeeded:currentBatchCount:maxNumberOfBatches:activity:withCompletionBlock:
_resetArvchivedRecordSyncToken
archivedRecordSyncToken
_processRecordChange:
setRecordFetchedBlock:
_processArchivedRecordsFetchCompletionZoneID:serverChangeToken:moreComing:currentBatchCount:maxNumberOfBatches:activity:error:completionBlock:
_processFetchArchivedRecordCompletionWithError:WithCompletionBlock:
setFetchArchivedRecordsCompletionBlock:
_fetchMessageZoneChangesSyncType:currentBatchCount:maxNumberOfBatches:activity:completionBlock:
_messageZoneCreated
recordZoneIDsWithPendingArchivedRecords
_doesAnyRecordZoneIDHavePendingArchivedRecords:
_numberOfRecordsToFetchForSyncType:
_isDiskSpaceAvailableForSyncType:currentBatchCount:
latestSyncToken
_shouldFetchArchivedRecords:
_processRecordZoneFetchCompletionZoneID:serverChangeToken:clientChangeTokenData:moreComing:NSError:syncType:currentBatchCount:maxNumberOfBatches:shouldFetchArchivedRecords:activity:completionBlock:
_processFetchRecordZoneChangesCompletionWithError:completionBlock:
encounteredIncompatibleMessage
setEncounteredIncompatibleMessage:
syncDeletedMessagesToCloudKitWithCompletion:
_noteSyncEnded
_shouldMarkAllMessagesAsNeedingSync
_hasMarkedAllMessagesAsNeedingSync
_markAllUnsuccessFullSyncMessagesAsNeedingSync
deleteMessageSyncToken
_needsToMarkAllMessagesAsNeedingSync
_processRecordDeletionCompletion:error:completionBlock:
_constructMessageRecordIDUsingTombStoneDictionary:
_messageDeleteBatchSize
_deleteMessagesWithRecordIDs:completion:
_resetSyncToken
_markAllIncompatibleMessagesForDeletion
syncMessagesWithSyncType:deviceConditionsToCheck:activity:completionBlock:
deleteMessagesZone
visitedChats
setVisitedChats:
_encounteredIncompatibleMessage
_archivedRecordSyncToken
_visitedChats
T@"CKServerChangeToken",&,N
T@"IMDCKMessageSyncCKOperationFactory",&,N,V_CKOperationFactory
T@"CKServerChangeToken",&,N,V_archivedRecordSyncToken
T@"NSMutableDictionary",&,N,V_visitedChats
TB,N,V_encounteredIncompatibleMessage
isRecentlyDeletedEnabled
_readRecordsWithType:attemptCount:activity:completion:
_fetchRecordsOperationWithActivity:
_onRecordRead:
_onRecordDeleted:type:
_onChangeTokenUpdated:token:data:
_onRecordZoneFetchComplete:token:tokenData:moreComing:error:
_onReadComplete:error:activity:completion:
_onRecoverableMessagePartRecordReadWithDeleteDate:messageGUID:partBody:
initWithIndex:
_zoneCreated
_writeRecordsWithType:activity:completion:
_saveRecordsOperationWithMap:activity:
_onRecordWrite:error:recordNameToPartIndexAndRowID:
_onWriteComplete:error:shouldWriteMore:activity:completion:
_deleteBatchSize
syncRemovedRecoverableMessagesToCloudKitWithCompletion:
_deleteRecoverableMessagesWithRecordIDs:completion:
_constructRecoverableMessageRecordIDUsingTombStoneDictionary:
recoverableGUIDFromMessageGUID:chatGUID:partIndex:
recordIDUsingSalt:zoneID:guid:
_fetchOperationFactory:token:batchSize:activity:
_saveRecoverableMessagesOperationFactory:token:batchSize:recordNameToPartIndexAndRowID:activity:
_zoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:
_fetchRecoverableMessagesCKConfiguration:
createCKRecordforRecoverableMessageMetadata:zoneID:recordNameToPartIndexAndRowID:
_writeRecoverableMessagesCKConfiguration:
unsignedLongLongValue
attributesAtIndex:effectiveRange:
syncWithType:withActivity:withCompletion:
_latestSyncToken
T@"CKServerChangeToken",&,N,V_latestSyncToken
IMDaemonCoreMessageReceivedTimingCollection
postCoreAutomationNotificationWithDictionary:withVerboseLogging:
postCoreAutomationNotificationIncomingMessageProcessedWithDuration:
containsObjectIdenticalTo:
removeObjectIdenticalTo:
methodSignatureForSelector:
invokeWithTarget:
addTarget:
removeTarget:
forwardInvocation:
_targets
set_targets:
set_lock:
T@"NSMutableArray",&,N,V_targets
T@"NSLock",&,N,V_lock
isAutoDonatingMessages
syndicationStartDate
updateDonationStateWithSyndicationAction:
loadNoticeEventHistory
noticeEventHistory
commentThreshold
participantChangeThreshold
defaultThreshold
peristencePath
createFileAtPath:contents:attributes:
initWithContentsOfURL:
writeToURL:error:
dateLastUpdatedForURL:
thresholdForNoticeType:
saveNoticeEventHistory
persistenceQueue
setPersistenceQueue:
setNoticeEventHistory:
_persistenceQueue
_noticeEventHistory
T@"NSObject<OS_dispatch_queue>",&,N,V_persistenceQueue
T@"NSMutableDictionary",&,N,V_noticeEventHistory
permanentHighQualityLocalPath
_fileManager
_copyCKRecordFromExistingCKMetadata
_assetURLToInsertToRecord
md5HashForURL:
etag
_setRecordPropertiesBasedOnExistingRecord:
initWithFileURL:
_setCKRecordAsset:forKey:
_auxVideoPathIfItExists
removeItemAtURL:error:
_assetForKey:
transferMetaDataFromRecord:
im_lastPathComponent
moveItemAtURL:toURL:error:
cleanUpAsset:
writeToURL:atomically:
_recordIsInvalid:
md5HashForTransfer
utiTypeForRecord:
sizeOfAssetForRecord:
md5HashForRecord:
initWithFilePath:
storeDictionary:error:
transactionLogMessageFromDictionaryRepresentation:
_fetchNexBatchOfMessagesAndReplay
batchProcessingBlock
setHeldDeletionContext:
setSyncTaskByServiceName:
heldDeletionContext
copyNextBatchWithSize:iterationContext:
completionBlock
automationCompletionBlock
setAutomationCompletionBlock:
deleteReplayDB
_processBatch:
filePath
endRecordingReplayDatabase
batchSize
initWithStorageController:
storeMessage:type:error:
deleteReplayDBIfNotUnderFirstUnlock
overrideStorageControllerWithDatabaseFromPath:
restoreDefaultStoreControllerInstance
startRecordingReplayDatabase
replayMessagesWithCompletion:
isRecordingReplayDB
syncTaskByServiceName
storageController
setStorageController:
_suspendedStorageController
_isRecordingReplayDB
_syncTaskByServiceName
_heldDeletionContext
_automationCompletionBlock
_storageController
T@"NSDictionary",&,N,V_syncTaskByServiceName
T@"IMDReplayStorageIterationContext",&,N,V_heldDeletionContext
T@?,C,N,V_automationCompletionBlock
T@"IMDReplayStorageController",&,N,V_storageController
TB,R,N,V_isRecordingReplayDB
_statsCollectorCK
_messageStoreSharedInstanceCK
_shouldUpdateSyncStatsCK:originalSyncState:
_updateSyncStatsForAttachmentsCK:incrementTotalAttachmentCount:
_shouldDownloadAssetForTransferCK:forMessageItem:
populateLocalURLsForTransfer:fromCKRecord:
beginPeriodicSyncWithChecks:priority:reason:
_accountDidChange:
dateBySettingHour:minute:second:ofDate:options:
_IMAHDAgentFallbackIntervalInSeconds
_maxTimeToDeferInSeconds
_nightlySyncTimerFired
setNightlySyncTimer:
dumpMOCLoggingMetaData
nightlySyncTimer
registerForAccountNotifications
_kickOffNightlyPeriodicSyncIfApplicable
_dispatchNotification:withBlock:
kickOffEagerSyncIfApplicable
isSystemLocked
longRunningSyncTimer
setLongRunningSyncTimer:
reloadTimer
setReloadTimer:
deviceIsLockedDown
setInitialSyncAttempts:
_recordManager
_didPassAccountAndIdentityUpdateNeeds
_noteMetricsForSyncStartFrom:fullSync:
beginInitialSyncAttemptCount:withActivity:
initialSyncAllowed
_retryError
_ifCloudKitAbleToSyncWithActivity:callBlock:
_needsSyncOnIdentityUpdate
_keychainErrorWithCause:
forceAutoBugCaptureWithSubType:errorPayload:
_clearTombstonesWithActivity:
_chatSyncedRecently
_syncChatsWithActivity:
beginPeriodicSyncWithActivity:
incrementCoreDuetSyncAttempts
shouldMarkAllIncompatibleMessagesForDeletion
messageSyncController
_noteSyncStarted:
_beginPeriodicSyncWithActivity:attemptCount:
_serverDoesNotAllowComingBackOnlineChatSync
_minimumChatComingOnlineSyncInterval
_serverDoesNotSingleDeviceLimitation
_resetSyncStateAndAttemptCounts
_periodicSyncAttemptCount
_autoBugCaptureWithSubType:debugDescription:
_manualSyncAttemptCount
clearCKRelatedDefaults
deleteChatSyncToken
refreshUIIfApplicableWithBatchCount:
_serverAllowsUIRefreshWhileSyncing
setShouldReloadConversations:
_serverAllowsUIRefreshTimerWhileSyncing
reloadTimeInterval
_refreshUIWhileSyncing
shouldReloadConversations
lastLogDumpDate
lastRestoreFailureLogDumpDate
initWithCalendarIdentifier:
components:fromDate:
hour
_currentHour
setLastRestoreFailureLogDumpDate:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
_deleteRestoreFailuresDirectory
_withinAnHourOfLogDumpHour
_hasDumpedRestoreFailureLogsInPastHour
sendRestoreFailuresLogDumps
createTodaysStatisticDictionaryIfNeeded
_hasDumpedLogsInPastHour
setLastLogDumpDate:
dateWithTimeIntervalSinceNow:
_reloadChatRegistryOnMainThread
responseForError:attempt:retryInterval:
_errorIndicatesDeviceNotGoodForSync:
_needsSyncOnAccountUpdate
_nukeCKData
_noteMeticsForSyncEndedWithSuccces:
errorIndicatesDeviceConditionsDontAllowSync:
postCoreAutomationNotificationFinishedPeriodicSyncNotificationWithStartTime:chatsDidsync:messagesDidSync:attachmentsDidSync:recoverableMessagesDidSync:
syncStartDate
trackEvent:withStatistic:
chatSyncController
initialMessageSyncController
fetchedChatsDuringLastSync
initialAttachmentSyncController
_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:
syncChatsWithType:withActivity:completion:
noteCoreDuetSyncEnded
_beginPeriodicSyncWithActivity:attemptCount:syncChatsCompletionBlock:
attachmentSyncController
updateSyncController
_writeDownSyncDate
_syncRecoverableMessagesToCloudKitWithActivity:syncAttemptCount:startTime:syncCompletionBlock:retryCompletionBock:
syncDeletesToCloudKitWithActivity:completion:
syncAttachmentMetadataFirstSyncWithActivity:deviceConditionsToCheck:completionBlock:
recoverableMessageSyncController
syncPendingDeletionWithCompletion:
_beginExitStateCleanupIfNeededWithActivity:
rampManager
_callSyncWithCompletion:activity:
recordMetricIsCloudKitEnabled
setSyncStartDate:
IMAKUserInfoChangedNotification
handleAKUserInfoChangedNotification:
enforceAccountsMatchForMocAndShowDialogIfNeeded
IMAKUserInfoChangedAltDSIDKey
IMAKUserInfoChangedSecurityLevelKey
updateSecurityLevelDowngradedIfNeeded:
_addDatesDefaultsIfNeededToDictionary:keys:
initWithTimeIntervalSince1970:
_addDatesDefaultsIfNeededToDictionary:
_completedPeriodicSyncSinceFirstFullSyncForLastSyncDate:firstFullSyncCompletedDate:
_dailySyncStateDictionary
_submitCloudKitAnalyticWithOperationGroupName:analyticDictionary:
_periodicSyncStateDictionary
eventStreamHandler:didReceiveEventWithName:userInfo:
_postMetricsToCloudKitOnAutomaticHistoryDeletionAgentLaunch
_dateForNext24LogDumpAtHour:timeNow:dumpNow:
_syncNotCompletedRecently
performInitialSyncOnFirstConnectionOfImagentIfNeeded
beginChatSyncPeriodic:activity:
_accountHasMultipleDevices
kickOffCloudKitSyncIfNeededOnImagentLaunch
sendRestoreFailuresLogDumpsIfNeeded
collectLogsIfNeeded
_keychainError
_sharedDatabaseManager
syncChatsWithMessageContext:
clearAnalyticDefaultsAndLocalSyncState
_serverDeniesPeriodicSyncAnalytics
_serverDeniesDailySyncStateAnalytics
logCloudKitAnalytics
initialSyncAttempts
_shouldReloadConversations
_syncStartDate
_longRunningSyncTimer
_nightlySyncTimer
_initialSyncAttempts
_lastLogDumpDate
_lastRestoreFailureLogDumpDate
_reloadTimer
T@"NSDate",&,N,V_syncStartDate
T@"NSTimer",&,N,V_longRunningSyncTimer
T@"IMTimer",&,N,V_nightlySyncTimer
Tq,N,V_initialSyncAttempts
T@"NSDate",&,N,V_lastLogDumpDate
T@"NSDate",&,N,V_lastRestoreFailureLogDumpDate
TB,V_shouldReloadConversations
T@"NSTimer",&,V_reloadTimer
maxNumberOfMessages
recentMessageIDs
addMessagesID:
containsMessageID:completion:
currentNumberOfMessages
setRecentMessageIDs:
setInternalQueue:
_recentMessageIDs
_internalQueue
T@"NSMutableOrderedSet",&,N,V_recentMessageIDs
T@"NSObject<OS_dispatch_queue>",&,N,V_internalQueue
registerChat:style:displayName:groupID:handleInfo:
registerChat:style:displayName:groupID:handleInfo:account:
registerChat:style:displayName:groupID:lastAddressedHandle:handleInfo:account:isBlackholed:
registerChat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:isBlackholed:
canonicalizeChatIdentifier:style:
_newHashForChat:style:
isEngramEnabled
processInfo
processName
shouldImitateGroupChatUsingChatRooms
chatRoomForGroupChatIdentifier:
groupChatIdentifierForChatRoom:
UUIDString
chatForChatIdentifier:style:account:
processMessageForSending:toChat:style:allowWatchdog:account:completionBlock:
_mapRoomChatToGroupChat:style:
_updateWatchdogForMessageGUID:
_configureSessionInformationOnItem:toChat:withStyle:forAccount:
_setOutgoingFlagsOnMessage:
containsRichLink
_isMessageSWYSpamMessage:inChat:
_shouldShowSWYQuickActionForMessage:outAppName:outBundleID:
_configureSyndicationRangesForMessage:forChat:withSyndicationStatus:
setWasDetectedAsSWYSpam:
setSwyAppName:
setSwyBundleID:
_messageStoreCompletion:inputMessage:outputMessage:originalMessage:completionBlock:
_IMDStoreMessage:inMessage:forceReplace:modifyError:modifyFlags:calculateUnreadCount:flagMask:shouldStoreBlock:didStoreBlock:block:
setAccount:
setTime:
_configureTimeOnOutgoingItem:
_configureAccountInformationOnItem:withAccount:
_configureIdentifierForOutgoingItem:withIdentifier:withStyle:
_determineResultMessageForInput:output:original:
_shouldDropSendingMessage
setIsBeingRetried:
retryToParticipant
setRetryToParticipant:
sendMessage:toChat:style:account:
account:chat:style:chatProperties:groupID:chatPersonCentricID:messageReceived:
didSendMessageReadReceiptForMessageID:account:
didSendDeliveredQuietlyReceiptForMessageID:account:
didSendNotifyRecipientCommandForMessageID:account:
didSendMessagePlayedReceiptForMessageID:account:
didSendMessageSavedReceiptForMessageID:account:
didUpdateChatStatus:chat:style:handleInfo:
didUpdateChatStatus:chat:style:account:
didJoinChat:style:displayName:groupID:handleInfo:
didJoinChat:style:displayName:groupID:lastAddressedHandle:handleInfo:
didJoinChat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:account:category:spamExtensionName:
didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:account:isBlackholed:
isAwaitingStorageTimer
account:chat:style:chatProperties:error:
didReceiveError:forMessageID:forceError:account:
isDelivered
noteSuppressedMessageUpdate:
messagePartText
dateSent
removeLastObject
__im_diffPartIndexesInEditedMessage:previousMessage:editedPartIndexes:removedPartIndexes:
addFailedEditPartIndex:
addFailedRetractPartIndex:
wasDeliveredQuietly
isExpirable
_updateExpireStateForMessageGUID:
syndicatedItemType
chatGUID
_didReceiveMessageDeliveryReceiptForMessageID:attempts:date:account:
_hasSuppressedMessageID:chatGUID:
_didReceiveMessageReadForMessageID:date:attempts:useMessageSuppression:completionBlock:
didReceiveMessageReadForMessageID:date:useMessageSuppression:completionBlock:
_didReceiveMessageReadReceiptForMessageID:date:attempts:completionBlock:
_didReceiveMessagePlayedForMessageID:date:attempts:useMessageSuppression:completionBlock:
didReceiveMessagePlayedForMessageID:date:useMessageSuppression:completionBlock:
_didReceiveMessagePlayedReceiptForMessageID:date:attempts:completionBlock:
_didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:attempts:useMessageSuppression:account:completionBlock:
didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:useMessageSuppression:completionBlock:
didSendMessage:forChat:style:forceDate:
didSendMessage:forChat:style:account:forceDate:
didSendMessage:forChat:style:account:forceDate:itemIsComingFromStorage:
account:chat:style:chatProperties:groupID:chatPersonCentricID:messageSent:
sendSavedReceiptForMessage:toChatID:identifier:style:account:
_updateRoutingForMessageGUID:chatGUID:error:account:
isAssociatedMessageItem
notifyDidSendMessageID:shouldNotify:
notifyDidSendMessageID:account:shouldNotify:
isSent
account:chat:style:chatProperties:notifySentMessage:sendTime:
_endMessageSuppressionForChatGUID:
didReceiveDisplayNameChange:fromID:toIdentifier:forChat:style:account:sender:
didReceiveMessage:forChat:style:account:fromIDSID:
didReceiveMessages:forChat:style:account:fromIDSID:
_isActivated
_setReplyGUIDOnMessage:forChat:
_setSortIDForMessage:forChat:
_storeMessage:chatIdentifier:localChat:style:account:messagesToPostArray:
account:chat:style:chatProperties:groupID:chatPersonCentricID:messagesReceived:messagesComingFromStorage:
_autoReplier
dateLastCallEnded
_updateInputMessage:forExistingMessage:
_suppresionTimerFired:
_setSuppressedMessage:inChatWithGUID:
removeTimingForKey:
launchListenerForCapability:
_checkMessageForOneTimeCodes:
_checkMessageForENURL:
roomNameIsProbablyAutomaticallyGenerated
useChatRoom:forGroupChatIdentifier:
account:chat:style:chatProperties:invitationReceived:
account:chat:style:chatProperties:updateProperties:
didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:isBlackholed:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:category:spamExtensionName:isBlackholed:
_removeChatGuidFromCoreDuet:
account:chat:style:chatProperties:groupID:chatPersonCentricID:statusChanged:handleInfo:
didChangeMemberStatus:forHandle:unformattedNumber:countryCode:forChat:style:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:account:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:account:destinationCallerID:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:account:destinationCallerID:messageTime:
account:chat:style:chatProperties:chatPersonCentricID:member:statusChanged:
setOtherUnformattedID:
setOtherCountryCode:
isKnownContact:
spotlightItemRecorderClass
spotlightItemRecorder
deleteSearchableItemsWithDomainIdentifiers:bundleID:withCompletion:
initWithUnsignedInteger:
_sharedAccountController
sendMessage:toChat:style:
_markChatAsDowngraded:
_handleRoutingWithDictionary:
requestRoutingForMessageGuid:inChat:error:completionBlock:
_routingTimerFired
requestRoutingWithCompletion:
canMakeExpireStateChecks
_handleExpireStateDictionary:
requestExpireStateForMessageGuid:completionBlock:
_expireStateTimerFired
requestExpireStateWithCompletion:
_handleWatchdogWithDictionary:
requestWatchdogForMessageGuid:completionBlock:
_watchdogTimerFired
requestWatchdogWithCompletion:
receivedUrgentRequestForMessages:
createOTCFromMessageBody:sender:guid:
_storageTimerFired
pendingReadReceiptFromStorageCount
setPendingReadReceiptFromStorageCount:
_updateStorageTimerWithInterval:
initWithSet:
noteLastItemProcessed
_postMessagesFromStorage:
_predominantServiceForChat:usingMessageThreshold:
richLinkURLs
lsAppRecordForURL:checkInstalledAppsOnly:
localizedName
showPinningStatusTextForBundleID:
_fetchMessagesFromChat:onService:numberOfMessages:
initWithAssociatedChatGUID:
nextBatch
initWithMessageBody:messageGUID:
messageParts
messagePartRange
initWithSyndicationType:messagePartRange:syndicationStartDate:syndicationStatus:
registerChat:groupID:style:
registerChat:style:
registerChat:style:handleInfo:
existingChatsForGroupID:
existingChatsForIDs:style:
processMessageForSending:toChat:style:allowWatchdog:completionBlock:
chatForItemWithGUID:
storeItem:toChat:style:
sendLocationSharingInfo:toID:completionBlock:
didLeaveChat:style:
didLeaveChat:style:account:
didJoinChat:style:
didJoinChat:style:handleInfo:
didJoinChat:style:handleInfo:account:
didJoinChat:style:displayName:groupID:handleInfo:category:spamExtensionName:
didJoinReadOnlyChat:style:displayName:groupID:handleInfo:category:spamExtensionName:
didReceiveReplaceMessageID:forChat:style:
didReceiveErrorMessage:forChat:style:
didReceiveError:forMessageID:forceError:
didReceiveMessageEditingUnsupportedHandleIDs:forMessageGUID:partIndex:previousMessage:backwardCompatibilityMessageGUID:
didReceiveMessageEditingSendFailure:forMessageGUID:previousMessage:
didSendMessageEditForMessageGUID:
didSendMessageReadReceiptForMessageID:
didSendDeliveredQuietlyReceiptForMessageID:
didSendNotifyRecipientCommandForMessageID:
didSendMessagePlayedReceiptForMessageID:
didSendMessageSavedReceiptForMessageID:
didSendSyndicationActionItem:forChat:
didReceiveMessageDeliveryReceiptForMessageID:date:
didReceiveMessageDeliveryReceiptForMessageID:date:account:
updateChatGUID:withLastReadTimeStamp:withLastSeenMessageGUID:fromMe:
didReceiveMessageReadForMessageID:date:completionBlock:
didReceiveMessageReadReceiptForMessageID:date:completionBlock:
didReceiveMessagePlayedForMessageID:date:completionBlock:
didReceiveMessagePlayedReceiptForMessageID:date:completionBlock:
didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:completionBlock:
didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:useMessageSuppression:account:completionBlock:
didSendMessage:forChat:style:
notifyDidSendMessageID:
didReceiveDisplayNameChange:fromID:toIdentifier:forChat:style:account:
_transcodeController
testOverrideTextValidationDidFail
didReceiveInvitation:forChat:style:
didUpdateChatStatus:chat:style:
didChangeMemberStatus:forHandle:forChat:style:
_shouldBlackholeGroupChatFromSender:toRecipient:withOtherParticipants:forAccount:
didSendBalloonPayload:forChat:style:messageGUID:account:completionBlock:
didReceiveBalloonPayload:forChat:style:messageGUID:account:
noteItemFromStorage:
noteLastItemFromStorage:
incrementPendingReadReceiptFromStorageCount
decrementPendingReadReceiptFromStorageCount
contactsAvatarRecipeData
setContactsAvatarRecipeData:
bizIntent
setBizIntent:
locale
setLocale:
shouldSendMeCard
setShouldSendMeCard:
laterDate:
canAddCommand:
noopHandlerForCommand:
isFromMomentShare
emitPreviewGenerationBeginFromUTI:
generatePreview:previewURL:constraints:balloonBundleID:completionBlock:blockUntilReply:
emitPreviewGenerationEndFromUTI:
commSafetyUIEnabled
checkSensitivePhotos
_markSensitiveDefault
logPrivatizedImageReceivedEvent:
isSensitiveImage:withChatID:completionHandler:
receiveFileTransfer:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:progressBlock:completionBlock:
generatePreviewForTransfer:attachmentPath:balloonBundleID:isFromMe:completionBlock:
receiveFileTransfer:transferGUID:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:generatePreview:balloonBundleID:isFromMe:progressBlock:completionBlock:
failTransfersOnPreviewGenerationFailure
setSyncToken:
syncToken
_deviceConditionsAllowsMessageSyncForCurrentBatchCount:maxBatchCount:
_deviceConditionsAllowsMessageSync
_deviceConditionsAllowsMessageSyncIgnoreFeatureEnabled:
_syncToken
T@"CKServerChangeToken",&,N,V_syncToken
ckChatSyncControllerWantsToSync
replayControllerWantsToSync
IDSTransportLogWantsToSync
replayControllerNeedsSync
setReplayControllerNeedsSync:
_evaluateStateAndActIfNeeded
idsTransportLogNeedsSync
setIdsTransportLogNeedsSync:
ckChatSyncControllerNeedsSync
setCkChatSyncControllerNeedsSync:
_scheduleNextEvaluation
currentlyExecutingSyncTask
setCurrentlyExecutingSyncTask:
syncTaskFactory
setSyncTaskFactory:
_replayControllerNeedsSync
_ckChatSyncControllerNeedsSync
_idsTransportLogNeedsSync
_currentlyExecutingSyncTask
_syncTaskFactory
TB,N,V_replayControllerNeedsSync
TB,N,V_ckChatSyncControllerNeedsSync
TB,N,V_idsTransportLogNeedsSync
T@"<IMDMessageHistorySyncTask>",&,N,V_currentlyExecutingSyncTask
T@"<IMDMessageHistorySyncTaskFactory>",&,N,V_syncTaskFactory
_migrateServerChangeToken
_randomSalt
setLockRecord:
_updateChatUsingCKRecord:onRead:didSucceed:
_markChatAsDefferedForSyncingUsingRecord:
_resolveChatConflictUsingCKRecord:localGUID:
errorIndicatesQuotaExceeded:
_processModifyPerRecordCallBack:error:recordIDtoGUIDmap:
_numberOfChatsToWrite
_copyChatsToUploadWithLimit:
_logGreenTeaLogsForChats:
_newckRecordsFromChats:
lockRecord
_generateLockRecord
addNewChatsSyncedCount:
_writeDirtyChatsToCloudKitWithActivity:completion:
_shouldResyncChatsForError:
_writeCKRecordsToChatZone:activity:withCompletion:
_chatZoneID
_numberOfChatsToFetch
setFetchedChatsDuringLastSync:
_chatZoneCreated
_fetchChatRecordOperationWithActivity:
_processRecordZoneChangeTokenUpdated:zoneID:clienChangeToken:
_processRecordZoneFetchCompletion:zoneID:clientChangeTokenData:moreComing:error:
_processFetchRecordChangesCompleted:activity:completion:syncType:
setConfigurationsByRecordZoneID:
_anyChatExistsOnServerWithResultsLimit:changeToken:activity:completion:
_shouldMarkAllChatsAsNeedingSync
_hasMarkedAllChatsAsNeedingSync
__syncChatsWithCloudKit:attemptCount:activity:withCompletion:
_eligibleForTruthZone
_syncChatsWithCloudKitWithCompletionType:activity:syncChatsCompletionBlock:
_needsToMarkAllChatsAsNeedingSync
acceptableErrorCodeWhileDeleting:
_copyRecordIDsToDelete
_deleteChatRecordsWithRecordIDs:completion:
_filterRecordIDsToChatsWithNoRecentModifications:completion:
_handleChatDeletionCompletionForRecordIDs:error:
__im_dateByAddingDays:
modificationDate
earlierDate:
_lockRecordHadConflict:
_fetchedChatsDuringLastSync
_lockRecord
T@"IMDCKChatSyncCKOperationFactory",&,N,V_CKOperationFactory
T@"CKRecord",&,N,V_lockRecord
TB,N,V_fetchedChatsDuringLastSync
sharedController
receiveHighlightEvent:fromSender:guid:date:
dismissNotice:
noticesForChatGUID:
broadcastNoticesDidChangeForChatGUIDs:
noticeDispatcher
_noticeDispatcher
T@"IMDCollaborationNoticeDispatcher",R,N,V_noticeDispatcher
initWithStoreDictionary:
taskFlags
_taskFlags
T@"NSString",R,N,V_guid
TQ,R,N,V_taskFlags
_cachedPathForStickerWithProperties:
_isRecipeBasedSticker:
_FTDataFromHexString
transcodeLocalTransferPayloadData:balloonBundleID:completionBlock:
retrieveStickerWithProperties:completionBlock:
stickerPackGUIDToPackMap
setStickerPackGUIDToPackMap:
_stickerPackGUIDToPackMap
T@"NSMutableDictionary",&,V_stickerPackGUIDToPackMap
__pruneTypingContexts
_setTimerForPruningTypingContext
initWithTimeIntervalSinceNow:
hasRecentlyMessaged:
noteRecentMessageForPeople:
updateLatestActiveDestination:ForHandle:incomingType:
activeDeviceForHandle:
_typingContext
_typingContextTimer
_activeDeviceForHandle
beginBuddyChanges
endBuddyChanges
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
account:buddyPropertiesChanged:
localPropertiesOfBuddy:
buddyPictures
pictureOfBuddy:
pictureKeyForBuddy:
allBuddies
markBuddiesAsChanged:
changeProperty:ofBuddy:to:
clearPropertiesOfBuddy:
property:ofBuddy:
localProperty:ofBuddy:
clearLocalProperties
changeLocalProperty:ofBuddy:to:
T@"NSArray",R,&,N
deleteUpdateSyncToken
_writeUpdatesWithType:updateStep:activity:completion:
stepAfter:
_writeT1RecordUpdatesWithType:activity:completion:
_writeT2RecordUpdatesWithType:activity:completion:
_saveRecordsT1OperationWithMap:activity:
_onRecordT1Write:error:recordNameToRowIDMap:
_numberOfRecordsToFetchPerBatch
_onWriteT1Complete:error:shouldWriteMore:activity:completion:
_saveRecordsT2OperationWithMap:activity:
_onRecordT2Write:error:recordNameToItemMap:
_onWriteT2Complete:error:shouldWriteMore:activity:completion:
fetchOperationFactory:token:batchSize:activity:
saveT1UpdatesOperationFactory:token:batchSize:recordNameToRowIDMap:activity:
saveT2UpdatesOperationFactory:token:batchSize:recordNameToRowIDMap:activity:
_fetchUpdatesCKConfiguration:
_writeUpdatesCKConfiguration:
messageUpdateV1RecordType
writeMsgIDToRowIDMap
setWriteMsgIDToRowIDMap:
_writeMsgIDToRowIDMap
T@"NSMutableDictionary",&,N,V_writeMsgIDToRowIDMap
_networkCall_InsertRowGuid:taskFlags:
_networkCall_IMDMessagePTaskSelectWithLimit:
_networkCall_IMDMessagePTaskDeleteAllCompletedTask
_networkCall_IMDMessagePTaskUpdateTaskFlagsForGUID:taskFlags:
setXpcActivity:
loginIDForAccount:
disallowReconnection
cancelRequestID:serviceIdentifier:
joinChat:style:groupID:joinProperties:
invitePersonInfo:withMessage:toChat:style:
invitePerson:withMessage:toChat:style:
invitePersonInfoToiMessageChat:withMessage:toChat:style:
joinChat:handleInfo:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:
leaveChat:style:
leaveiMessageChat:style:
removeChat:style:
declineInvitationToChat:style:
isCarrierReportJunkEnabled
setProperties:ofParticipant:inChat:style:
closeSessionChat:style:
hasCapability:
noteBadPassword
loginServiceSessionWithAccount:
defaultChatSuffix
joinChat:style:joinProperties:
joinChat:handleInfo:style:groupID:joinProperties:
validityOfChatRoomName:
cancelVCRequestWithPerson:properties:conference:
deleteContext
setDeleteContext:
_deleteContext
T@"IDSKVDeleteContext",&,N,V_deleteContext
store
setStore:
_filePath
_store
T@"IDSKVStore",&,N,V_store
T@"NSString",R,&,N,V_filePath
weakToStrongObjectsMapTable
stringWithUTF8String:
didReceiveEventWithName:userInfo:
delegateToQueue
queueForDelegate:
_delegateToQueue
T@"NSMapTable",R,N,V_delegateToQueue
_handleFirewallUserNotificationDidFinish:
warnIfPortBlocked:forAction:
userNotificationDidFinish:
_firewallUserNotificationForService:
_login_serverSettingsReadyWithAccount:
requiresDataConnectionActivation
_data_connection_readyWithAccount:
_login_usernameAndPasswordReadyWithAccount:
fetchPasswordForProfileID:username:service:outRequestID:completionBlock:
initWithProxyProtocol:proxyHost:proxyPort:delegate:
retrieveProxyAccountSettings
_login_checkUsernameAndPasswordWithAccount:
showForgotPasswordNotificationForAccount:
requestPasswordForUsername:service:badPassword:showForgotPassword:shouldRememberPassword:outRequestID:completionBlock:
_doLoginIgnoringProxy:
account:loginStatusChanged:message:reason:properties:
_wentOfflineWithAccount:
systemProxySettingsFetcher:retrievedHost:port:protocol:
systemProxySettingsFetcher:retrievedAccount:password:
serviceSessionDidLoginWithAccount:
serviceSessionDidLogoutWithAccount:
serviceSessionDidLogoutWithMessage:reason:properties:account:
_autoReconnectTimer:
setID:
setCountryCode:
setUnformattedID:
_unformattedID
_countryCode
_personCentricID
_CNContactID
T@"NSString",&,N,V_id
T@"NSString",&,N,V_unformattedID
T@"NSString",&,N,V_countryCode
T@"NSString",&,N,V_personCentricID
T@"NSString",C,N,V_CNContactID
checkResourceIsReachableAndReturnError:
_copyCKRecordFromExistingCKMetadataWithZoneID:salt:
_setCKRecordArray:forKey:
_addGroupPhotoToCKRecord:
_arrayForKey:
initWithMessageStore:
initWithMessageStore:defaultsStore:
_savedFailureDate
_saveFailureDate:
_updateBadgeAndCancelPreviousUpdate
_cacheFailureDate:
_compareLastFailureDateAndUpdateBadge:
_stopSuppressingSound
_updateBadge
_shouldShowFailureString
_postBadgeString:
_postBadgeNumber:
setBadgeCount:withCompletionHandler:
setBadgeString:withCompletionHandler:
isInAppleStoreDemoMode
isUnexpectedlyLoggedOut
_checkIfUnexpectedlyLoggedOut
_iMessageEnabled
_isTryingToLogin
_iMessageFailedAccountIsIrreparable
_isUserIntentNotLoggedOut
_accountsArrayForServiceIMessage
_isUsableSendingForAccount:
aliases
sharedDefaultsInstance
_clearFailureBadge
_handleUnexpectedLogout
_isUnexpectedlyLogOutValue
setUnreadCount:
setLastFailedMessageDate:
isShowingFailure
setShowingFailure:
setUnexpectedlyLoggedOut:
addedObserverForUnexpectedlyLoggedOut
setAddedObserverForUnexpectedlyLoggedOut:
setSharedDefaultsInstance:
_showingFailure
_unexpectedlyLoggedOut
_addedObserverForUnexpectedlyLoggedOut
_lastFailedMessageDate
_sharedDefaultsInstance
TQ,N,V_unreadCount
Tq,N,V_lastFailedMessageDate
showingFailure
TB,N,GisShowingFailure,V_showingFailure
unexpectedlyLoggedOut
TB,N,GisUnexpectedlyLoggedOut,V_unexpectedlyLoggedOut
TB,N,V_addedObserverForUnexpectedlyLoggedOut
T@"IMDefaults",&,N,V_sharedDefaultsInstance
supportsFaceTime
registerWithCompletionHandler:
activeConversations
_tuConversationForChat:
updateMessagesGroupName:onConversation:
conversationUpdateMessagesGroupPhoto:
normalizedHandleWithDestinationID:
isExpanseEnabled
__imSetByApplyingBlock:
messagesGroupUUID
remoteMembers
_chatForTUGroupID:participants:
avMode
anyObject
_oneToOneChatForRemoteHandle:
_activeTUConversations
isLocallyCreated
initiator
handles
_initiatorForConversation:chat:
UUID
setAvMode:
groupUUID
isLightweightMember
refreshIDStatusForDestinations:service:listenerID:queue:completionBlock:
_upgradeChatToGroupChat:forConversation:
_findExistingGroupChatForConversation:onSession:
_createGroupChatForConversation:onSession:
registerMessagesGroupUUIDForConversationUUID:
normalizedValue
updateFaceTimeGroupPhoto:
_chatForTUConversation:
_conversationItemForChat:conversation:
conversationManager:conversation:addedMembersLocally:
_messageStore
conversationsChangedForConversationManager:
conversationManager:stateChangedForConversation:
conversationManager:stateChangedForConversation:fromOldConversation:
conversationManager:letMeInRequestStateChangedForConversation:
conversationManager:letMeInRequestStateChangedForConversation:fromOldConversation:
conversationManager:localVideoToggledForConversation:
conversationManager:localVideoToggledForConversation:fromOldConversation:
conversationManager:remoteMembersChangedForConversation:
conversationManager:remoteMembersChangedForConversation:fromOldConversation:
conversationManager:pendingMembersChangedForConversation:
conversationManager:pendingMembersChangedForConversation:fromOldConversation:
conversationManager:kickedMembersChangedForConversation:
conversationManager:kickedMembersChangedForConversation:fromOldConversation:
conversationManager:rejectedMembersChangedForConversation:
conversationManager:rejectedMembersChangedForConversation:fromOldConversation:
conversationManager:otherInvitedHandlesChangedForConversation:
conversationManager:otherInvitedHandlesChangedForConversation:fromOldConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:fromOldConversation:
conversationManager:activitySessionsChangedForConversation:
conversationManager:activitySessionsChangedForConversation:fromOldConversation:
conversationManager:oneToOneModeChangedForConversation:
conversationManager:oneToOneModeChangedForConversation:fromOldConversation:
conversationManager:avModeChangedForConversation:
conversationManager:avModeChangedForConversation:fromOldConversation:
conversationManager:resolvedAudioVideoModeChangedForConversation:
conversationManager:resolvedAudioVideoModeChangedForConversation:fromOldConversation:
conversationManager:removedActiveConversation:
conversationManager:addedActiveConversation:
conversationManager:didChangeActivatedLinks:
conversationManager:linkChangedForConversation:
conversationManager:linkChangedForConversation:fromOldConversation:
conversationManager:linkInvitedMemberHandlesChangedForConversation:
conversationManager:linkInvitedMemberHandlesChangedForConversation:fromOldConversation:
conversationManager:conversation:requestedScreenShareForParticipant:
serverDisconnectedForConversationManager:
conversationManager:migratingFromConversation:toConversation:
conversationManager:conversation:receivedActivitySessionEvent:
conversationManager:conversation:remoteParticipantWithIdentifier:updatedAudioEnabled:
conversationManager:conversation:remoteParticipantWithIdentifier:updatedVideoEnabled:
conversationManager:changedActivityAuthorizationForBundleIdentifier:
conversationManager:conversation:participant:addedNotice:
conversationManager:conversation:buzzedMember:
conversationManager:conversationUpdatedMessagesGroupName:
conversationManager:conversationUpdatedMessagesGroupName:fromOldConversation:
conversationManager:conversation:updatedMessagesGroupPhoto:
conversationManager:conversationUpdatedMessagesGroupUUID:
conversationManager:updatedIncomingPendingConversations:
conversationManager:trackedPendingMember:forConversationLink:
conversationManager:conversation:screenSharingChangedForParticipant:
conversationManager:conversation:launchStateChanged:forActivitySession:
conversationManager:remoteScreenShareAttributesChanged:isLocallySharing:
conversationManager:remoteScreenShareEndedWithReason:
conversationManager:ignoreLMIRequestsChangedForConversation:
conversationManager:conversation:didChangeStateForActivitySession:
conversationManager:conversation:didChangeSceneAssociationForActivitySession:
conversationManager:sharePlayAvailableChanged:
conversationManager:screenSharingAvailableChanged:
conversationManager:handoffEligibilityChangedForConversation:
conversationManager:handoffEligibilityChangedToConversation:fromPreviousConversation:
conversationManager:systemActivitySessionsChangedForConversation:
conversationManager:systemActivitySessionsChangedForConversation:fromOldConversation:
encryptedValuesByKey
_setValue:forKey:
valuesByKey
_valueForKey:
recordNameUsingSalt:guid:
searchableIndex:reindexAllSearchableItemsWithAcknowledgementHandler:
searchableIndex:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:
searchableIndexDidThrottle:
searchableIndexDidFinishThrottle:
dataForSearchableIndex:itemIdentifier:typeIdentifier:error:
fileURLForSearchableIndex:itemIdentifier:typeIdentifier:inPlace:error:
updateAccountWithAccountInfo:
accountInfo
imdAccountLoginFromIDSAccountWithType:login:
linkedUserURIs
initWithAccountID:defaults:service:idsAccount:
_idsAccount
T@"IDSAccount",R,&,N,V_idsAccount
isSubService
addRegistrationDelegate:queue:
subService
_loadIDSAccountController
initWithBundle:isMainService:
setMainService:
setSubServiceName:
removeRegistrationDelegate:
subServiceName
enabledAccounts
_removeAccount:
initWithDictionary:uniqueID:serviceName:
accountFromIDSAccountWithUniqueID:
updateAccountActivation
refreshRegistration
accountController:accountAdded:
accountController:accountUpdated:
accountController:accountRemoved:
accountController:accountEnabled:
accountController:accountDisabled:
account:registrationStatusInfoChanged:
account:aliasesChanged:
account:vettedAliasesChanged:
account:profileChanged:
account:loginChanged:
account:displayNameChanged:
account:pseudonymsChanged:
refreshRegistrationForAccount:
registrationFailedForAccount:needsDeletion:
setMockAccountController:
mockAccountController
setSubService:
_activatingAccount
_deactivatingAccount
_subService
_subServiceName
_mainService
T@"IMDIDSService",&,N,V_subService
T@"NSString",&,N,V_subServiceName
T@"IMDIDSService",W,N,V_mainService
deviceInformationString
idsAccounts
_FZBestGuessFZIDType
_URIFromFZIDType:
_updateAccountStatusToUnregistered:withAccount:
authenticateAccount
registerAccount
unregisterAccount
passwordUpdated
updateAuthorizationCredentials:token:
_aliasesForIDSAccount:
removeAliases:
addAliases:
validateAliases:
unvalidateAliases:
validateProfile
_isDeviceRegisteredForAccount:
validationStatusForAlias:onAccount:
resetCallerIDForIDSAccount:
_reregisterAndReidentify:
_aliasStringsForIDSAccount:
_validationStatusForAlias:onAccount:
callerURIForIDSAccount:
_URIFromCanonicalizedPhoneNumber
_appearsToBeDSID
registeredURIs
setByAddingObjectsFromSet:
idsAccountForURI:IDSServiceName:
imdAccountForIDSAccount:
_isDeviceRegistered
_aliases
activeDevicesUpdated
reregister
reIdentify
validationStatusForAlias:
callerURI
idsAccountForFromURI:toURI:
GUID
_GUID
T@"IDSAccount",R,&,N
T@"NSString",R,&,N,V_GUID
localizedStringForKey:value:table:localization:
andPredicateWithSubpredicates:
initWithKey:ascending:
editedPartIndexes
localizations
refreshIDStatusForDestination:service:listenerID:queue:completionBlock:
stagedActivitySession
activitySessions
postSharePlayNotificationForChatGUID:faceTimeConversationUUID:handleIdentifier:localizedApplicationName:
activity
localizedApplicationName
initWithMachServiceName:
resume
listener:shouldAcceptNewConnection:
_setQueue:
setExportedInterface:
initWithProtocol:forwardingHandler:
setExportedObject:
setRemoteObjectInterface:
setInterruptionHandler:
setInvalidationHandler:
processIdentifier
valueForEntitlement:
setVCCapabilities:
setListenerCapabilities:
writeAccount:defaults:
addAccount:defaults:service:
validateProfileAccount:
setBlockingMode:account:
setAllowList:account:
setBlockList:account:
setBlockIdleStatus:account:
passwordUpdatedAccount:
enrollDeviceForSMSRelay:account:
unEnrollDeviceForSMSRelay:account:
enrollSelfDeviceForSMSRelay:
requestSetupWithClientID:capabilities:context:reply:
requestSetupXPCObjectWithClientID:capabilities:context:reply:
markUnreadForMessageGUID:IDs:style:services:
markMessageAsReadWithGUID:callerOrigin:reply:
markPlayedForMessageGUID:
markPlayedForIDs:style:onServices:message:
playSendSoundForMessageGUID:callerOrigin:
requestNetworkDataAvailability
requestBuddyPicturesAndPropertiesForAccount:
forceReloadChatRegistryWithQueryID:
requestOneTimeCodeStatus
consumeCodeWithMessageGUID:
simulateOneTimeCodeArriving:
preWarm
downloadPurgedAttachmentsForIDs:style:onServices:chatID:
initiateQuickSwitch
requestQOSClassWhileServicingRequestsWithID:
fetchNicknames
fetchHandleSharingState
clearPendingNicknameUpdatesForHandleIDs:
ignorePendingNicknameUpdatesForHandleIDs:
allowHandleIDsForNicknameSharing:onChatGUIDs:
denyHandleIDsForNicknameSharing:
nicknamePreferencesDidChange
fetchPersonalNickname
setNewPersonalNickname:
userNicknameForRecordID:decryptionKey:requestID:
downloadStickerWithGUID:
downloadStickerPackWithGUID:isIncomingMessage:ignoreCache:
holdBuddyUpdatesAccount:
resumeBuddyUpdatesAccount:
startWatchingBuddy:account:
stopWatchingBuddy:account:
requestProperty:ofPerson:account:
setValue:ofProperty:ofPerson:account:
requestGroupsAccount:
sendNotificationMessageToUniqueID:withCommand:
inviteHandleIDToShareMyScreen:isContact:
askHandleIDToShareTheirScreen:isContact:
requestPendingVCInvites
requestPendingACInvites
conference:account:notifyInvitationCancelledFromPerson:
terminateForcingIfNeeded:
sendNotice:toHandles:reply:
markReadForMessageGUID:callerOrigin:queryID:
simulateMessageReceive:serviceName:groupID:handles:sender:
replayMessagesFromDatabasePath:
beginRecordingMessagesToReplayDatabase:
stopRecordingMessagesReplayDatabase
_automation_sendDictionary:options:toHandles:
_automation_receiveDictionary:fromID:
_automation_markMessagesAsRead:messageGUID:forChatGUID:fromMe:queryID:
logDumpAndSendMessageTo:forHours:
debugUpdateGroupParticipantversion:chatIdentifier:
changeGroups:account:
changeGroup:changes:account:
renameGroup:to:account:
acceptSubscriptionRequest:from:account:
requestSubscriptionTo:account:
loadIsDownloadingPurgedAttachmentsForChatWithGUID:chatIdentifiers:style:services:reply:
loadIsDownloadingPurgedAttachmentsForIDs:style:onServices:chatID:queryID:
loadMessageWithGUID:queryID:
loadMessageItemWithGUID:queryID:
loadHistoryForChatWithGUID:chatIdentifiers:style:services:limit:beforeGUID:afterGUID:threadIdentifier:reply:
loadPagedHistoryAroundMessageWithGUID:chatGUID:chatIdentifiers:style:services:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:reply:
loadUnreadHistoryForChatWithGUID:chatIdentifiers:style:services:limit:fallbackMessageGUID:reply:
loadAttachmentsForChatWithGUID:chatIdentifiers:style:services:reply:
loadFrequentRepliesForChatWithGUID:chatIdentifiers:style:services:limit:reply:
loadUncachedAttachmentCountForChatWithGUID:chatIdentifiers:style:services:reply:
deleteMessageWithGUIDs:queryID:
clearHistoryForIDs:style:onServices:beforeGUID:afterGUID:chatID:queryID:
markChatAsSpamWithGUID:chatIdentifiers:style:services:isAutoReport:reply:
retractNotificationsForReadMessagesWithGUIDs:
purgeAttachmentsForChatGUID:
cleanupAttachments
moveMessagesWithGUIDsToRecentlyDeleted:deleteDate:queryID:
moveMessagesInChatsWithGUIDsToRecentlyDeleted:deleteDate:queryID:
recoverMessagesWithChatGUIDs:queryID:
loadRecoverableMessagesMetadataWithQueryID:
permanentlyDeleteRecoverableMessagesInChatsWithGUIDs:queryID:
loadHistoryForIDs:style:onServices:limit:beforeGUID:afterGUID:threadIdentifier:chatID:queryID:
loadPagedHistoryForGUID:chatIdentifiers:style:onServices:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:chatID:queryID:
loadFrequentRepliesForIDs:style:onServices:limit:chatID:queryID:
loadUnreadForIDs:style:onServices:limit:fallbackGUID:chatId:queryID:
loadAttachmentsForIDs:style:onServices:chatID:queryID:
loadUncachedAttachmentCountForIDs:style:onServices:chatID:queryID:
markReadForIDs:style:onServices:messages:clientUnreadCount:
markReadForIDs:style:onServices:messages:clientUnreadCount:setUnreadCountToZero:
markPlayedExpressiveSendForIDs:style:onServices:message:
markSavedForMessageGUID:
markSavedForIDs:style:onServices:message:
markHasHadSuccessfulQueryForIDs:style:onServices:
sendNotifyRecipientCommandForIDs:style:onServices:message:
loadChatWithGUID:reply:
loadChatsFilteredUsingPredicate:reply:
loadChatsFilteredUsingPredicate:lastMessageOlderThan:limit:reply:
loadChatsWithIdentifier:reply:
loadChatsWithPinningIdentifier:reply:
loadChatsWithGroupID:reply:
loadChatsWithHandleIDs:groupID:displayName:style:reply:
loadAnyChatsContainingHandleIDsIn:reply:
loadChatWithChatIdentifier:
requestPendingMessages
updateMessage:
updateMessage:withIndexesOfDeletedItems:withIndexToRangeMapOfDeletedItems:deleteDate:
markMessageAsCorrupt:setCorrupt:
storeItem:inChatGUID:
sendStickerAtPath:toChatID:forNBubbleFromTheBottom:atX:atY:scale:balloonWidth:
sendReadReceiptForMessage:toChatID:identifier:style:account:
sendPlayedReceiptForMessage:toChatID:identifier:style:account:
sendBalloonPayload:attachments:withMessageGUID:bundleID:
updateBalloonPayload:attachments:forMessageGUID:
setProperties:ofParticipant:inChatID:identifier:style:account:
chat:updateProperties:
chat:updateDisplayName:
chat:updateIsFiltered:
chat:updateIsBlackholed:
chat:updateLastAddressHandle:
chat:updateLastAddressedSIMID:
unblackholeAndLoadChatWithHandleIDs:reply:
closeSessionChatID:identifier:style:account:
declineInvitationToChatID:identifier:style:account:
leaveChatID:identifier:style:account:
leaveiMessageChatID:identifier:style:account:
removeChatID:identifier:style:account:
sendCommand:withProperties:toPerson:account:
sendCommand:withProperties:toPerson:account:toChatID:identifier:style:
fetchCollaborationNoticesForChatGUID:reply:
loadChatWithGUID:queryID:
loadChatsFilteredUsingPredicate:queryID:
loadChatsFilteredUsingPredicate:lastMessageOlderThan:limit:queryID:
loadChatsWithIdentifier:queryID:
loadChatsWithGroupID:queryID:
loadChatsWithHandleIDs:groupID:displayName:style:queryID:
fetchCommonCapabilities:fromChatWithGUID:reply:
sendMessage:toChatID:identifier:style:account:
sendJunkReportMessage:account:
sendMappingPacket:toHandle:account:
joinChatID:handleInfo:identifier:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:account:
invitePersonInfo:withMessage:toChatID:identifier:style:account:
invitePersonInfoToiMessageChat:withMessage:toChatID:identifier:style:account:
removePersonInfo:chatID:identifier:style:account:
removePersonInfoFromiMessageChat:chatID:identifier:style:account:
createChatZone
writeDirtyChats
syncChats
markAllChatsAsDirty
clearChatZoneSyncToken
createAttachmentZone
writeAttachments
syncAttachments
downloadAttachmentAssets
writeDirtyMessages
syncMessages
initiatePeriodicSync
loadDirtyMessagesWithLimit:
loadDeletedMessagesWithLimit:
writeExitRecord
fetchExitRecord
deleteExitRecord
clearDataFromCloudKit
setCloudKitEnabled:
performAdditionalStorageRequiredCheck
tryToDisableAllDevices
initiateSync
uploadDailyAnalyticstoCloudKit
fetchLatestSalt
printCachedSalt
deleteSalt
metricAttachments:
updateAttachmentFileSizes
fetchSyncStateStatistics
writeCloudKitSyncCounts:
reportMetricToCK:withDict:
toggleiCloudBackupsIfNeeded
setiCloudBackupsDisabled:
removePathFromiCloudBackups:
fetchLatestRampState
printCachedRampState
syncDeletesToCloudKit
fetchCloudKitSyncStateDebuggingInfo:
tryToAutoCollectLogsWithErrorString:sendLogsTo:
fileTransfer:updatedWithProperties:
fileTransfer:acceptedWithPath:autoRename:overwrite:options:
fileTransferStopped:
fileTransferRemoved:
fileTransfersRecoverablyDeleted:
deleteFileTransferWithGUID:
downloadHighQualityVariantOfFileTransferWithGUID:
createItemForPHAssetWithUUID:parentChatItemGUID:chatGUID:
retrieveLocalFileURLForFileTransferWithGUID:options:
retrieveLocalFileURLForFileTransferWithGUIDs:options:
downloadFileTransferWithLocalURL:
autoLoginActiveAccountsIfNecessary
loginAllAccounts
logoutAllAccounts
autoLoginAccount:
autoReconnectAccount:
loginAccount:
logoutAccount:
silenceChat:untilDate:
relay:sendInitateRequest:toPerson:account:
relay:sendUpdate:toPerson:account:
relay:sendCancel:toPerson:account:
requestVCWithPerson:properties:conference:account:
respondToVCInvitationWithPerson:properties:conference:account:
cancelVCRequestWithPerson:properties:conference:account:
cancelVCRequestWithPerson:properties:conference:reason:account:
sendCounterProposalToPerson:properties:conference:account:
sendVCUpdate:toPerson:conference:account:
sendAVMessageToPerson:sessionID:type:userInfo:conference:account:
account:avAction:withArguments:toAVChat:isVideo:
attributedBodyText
__im_visitMessageParts:
isAssociatedMessage
newSetupInfoAvailable
broadcasterForFileProviderListeners
setupComplete:info:
setupComplete
pendingVCRequestComplete
pendingACRequestComplete
vcCapabilitiesChanged:
databaseUpdated
updateCloudKitState
didAttemptToSetEnabledTo:result:
didPerformAdditionalStorageRequiredCheckWithSuccess:additionalStorageRequired:forAccountId:error:
didAttemptToDisableAllDevicesResult:
nicknameRequestResponse:encodedNicknameData:
updatePendingNicknameUpdates:handledNicknameUpdates:
updateNicknameHandlesForSharing:blocked:
stickerPackUpdated:
stickerPackRemoved:
didFetchSyncStateStats:
didFetchRampState:
didAttemptToDisableiCloudBackups:error:
didFetchCloudKitSyncDebuggingInfo:
account:conference:receivedInvitationFrom:properties:
account:conference:receivedResponseToInvitationFrom:properties:
account:conference:receivedCancelInvitationFrom:properties:
account:conference:receivedCounterProposalFrom:properties:
account:conference:receivedUpdateFrom:data:
account:conference:receivedAVMessage:from:sessionID:userInfo:
account:conference:changedToNewConferenceID:
account:conference:peerIDChangedFromID:toID:
account:conference:peerID:propertiesUpdated:
account:conference:invitationSentSuccessfully:
account:relay:handleInitate:fromPerson:
account:relay:handleUpdate:fromPerson:
account:relay:handleCancel:fromPerson:
messageQuery:finishedWithResult:chatGUIDs:
messageItemQuery:finishedWithResult:chatGUIDs:
historyQuery:chatID:services:finishedWithResult:limit:
pagedHistoryQuery:chatID:services:numberOfMessagesBefore:numberOfMessagesAfter:finishedWithResult:hasMessagesBefore:hasMessagesAfter:
attachmentQuery:chatID:services:finishedWithResult:
uncachedAttachmentCountQuery:chatID:services:finishedWithResult:
isDownloadingQuery:chatID:services:finishedWithResult:
markAsSpamQuery:chatID:services:finishedWithResult:
frequentRepliesQuery:chatID:services:finishedWithResult:limit:
_automation_markAsReadQuery:finishedWithResult:
chat:chatPersonCentricID:displayNameUpdated:
chat:uncachedAttachmentCountUpdated:
engroupParticipantsUpdatedForChat:
loadedChats:
loadedChats:queryID:
markedAsReadForMessageGUID:success:queryID:
forcedReloadingChatRegistryWithQueryID:
movedMessagesToRecentlyDeletedWithQueryID:
recoveredMessagesWithQueryID:
loadedRecoverableMessagesMetadata:queryID:
permanentlyDeletedMessagesInChatsWithDeletedChatGUIDs:queryID:
service:chat:style:messagesUpdated:
downloadedPurgedAssetBatchForChatIDs:completedTransferGUIDs:
finishedDownloadingPurgedAssetsForChatIDs:
previouslyBlackholedChatLoadedWithHandleIDs:chat:
groupPhotoUpdatedForChatIdentifier:style:account:userInfo:
displayPinCodeForAccount:pinCode:deviceName:deviceType:phoneNumber:
pinCodeAlertCompleted:deviceName:deviceType:phoneNumber:responseFromDevice:wasCancelled:
screenTimeEnablementChanged:
collaborationNoticesDidChangeForChatGUIDs:
qosClassWhileServicingRequestsResponse:identifier:
fileTransfer:highQualityDownloadSucceededWithPath:
fileTransfer:explicitDownloadSucceededWithPath:livePhotoBundlePath:
fileTransferExplicitDownloadFailed:suggestedRetryGUID:error:
fileTransferHighQualityDownloadFailed:
fileTransferDownloadedSucceededWithLocalURL:
fileTransferDownloadFailedWithLocalURL:error:
showInvalidCertNotificationForAccount:
account:blockListChanged:
account:allowListChanged:
account:blockingModeChanged:
account:blockIdleStatusChanged:
account:buddyPictureChanged:imageData:imageHash:
account:buddyProperties:buddyPictures:
account:groupsChanged:error:
account:handleSubscriptionRequestFrom:withMessage:
account:statusChanged:
account:postedError:
updateNicknameData:
viewContext
initWithContext:
setDate:
metadata
contentURL
setUrl:
senderHandle
setSenderHandle:
setMetadata:
save:
initWithGUIDString:sender:metadata:date:
deleteObject:
saveNotice:
noticesForURLs:
deleteNotice:
deleteNoticeWithGUIDString:
deleteNoticesForURLs:
orPredicateWithSubpredicates:
initWithName:managedObjectModel:
initWithURL:
setPersistentStoreDescriptions:
loadPersistentStoresWithCompletionHandler:
currentConnection
remoteObjectProxy
initWithEntity:insertIntoManagedObjectContext:
initWithEntityName:
version
@40@0:8@16@24@32
@16@0:8
v24@0:8@16
v16@0:8
q16@0:8
v24@0:8q16
@"NSMutableDictionary"
@"NSURL"
@"IMMessageItem"
@"IMDChat"
@"PHMomentShare"
@"PHFetchResult"
v20@0:8B16
B16@0:8
v32@0:8i16i20@24
i16@0:8
v40@0:8I16@20i28@32
v28@0:8I16@20
I16@0:8
v20@0:8I16
v20@0:8i16
@"NSString"
@"IMDService"
@"IMDServiceSession"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@24@0:8Q16
@"<IMDMessageHistorySyncTask>"24@0:8Q16
@"IMDCKSyncController"
@"IMDAccountController"
@"IMDReplayController"
v32@0:8q16@24
v28@0:8@16B24
v32@0:8@16@24
v28@0:8@"IDSAccount"16B24
v32@0:8@"IDSAccount"16@"NSArray"24
B32@0:8@16@24
@32@0:8@16@24
@24@0:8@16
@"NSSet"
v32@0:8Q16@24
v24@0:8@"IMDCKSyncState"16
@48@0:8@16@24@32@40
v32@0:8@16@?24
v24@0:8@?16
B32@0:8q16Q24
v32@0:8@16B24B28
v40@0:8@16B24B28@32
v48@0:8@16B24B28@32@40
@36@0:8@16B24@28
B24@0:8q16
B28@0:8@16B24
v40@0:8@16q24@32
v48@0:8q16@24q32@40
@24@0:8q16
v48@0:8q16B24Q28B36d40
v36@0:8@16i24@28
v48@0:8@16i24@28B36@?40
v48@0:8@16B24B28B32B36@40
v40@0:8q16B24B28B32B36
v68@0:8q16B24B28B32B36B40B44B48B52B56Q60
v52@0:8@16i24@28B36B40@?44
v32@0:8@?16d24
@"IMDCKSyncState"
@"IMLockdownManager"
@"IDSServerBag"
@"FTDeviceSupport"
@"IMDefaults"
@"IMDSyncTelemetryReporter"
v24@0:8@?<v@?Q>16
@?24@0:8@16
@?16@0:8
v32@0:8Q16Q24
v48@0:8@16Q24@32Q40
@72@0:8@16{?=[8I]}24Q56@64
{?=[8I]}16@0:8
@"<IMDaemonListenerProtocol>"
{?="val"[8I]}
v32@0:8@"NSString"16@"NSString"24
@"CKServerChangeToken"24@0:8@"NSString"16
v32@0:8@"CKServerChangeToken"16@"NSString"24
@"NSBundle"
@"NSDictionary"
v40@0:8@16@24@?32
@44@0:8@16@24@32B40
@"NSDate"
@"IMDaemonCoreHelloWorldClass_Impl"
@"NSArray"
@"NSTimer"
@"IMOneTimeCodeUtilities"
q24@0:8@16
I24@0:8@16
v24@0:8d16
@"<IMDMessagePTaskStore>"
@76@0:8@16@24Q32B40@44Q52^Q60B68B72
v52@0:8@16@24B32@36@44
v24@0:8@"IMConnectionMonitor"16
v28@0:8B16@20
v40@0:8@16@24@32
v52@0:8@16@24@32C40@44
v76@0:8@16@24@32C40@44@52@60@68
v36@0:8@16@24C32
v52@0:8@16@24@32@40C48
v44@0:8@16@24@32C40
v44@0:8@16@24B32@?36
v60@0:8@16@24@32@40C48@?52
v76@0:8@16@24q32Q40@48C56@60@68
v60@0:8@16@24@32@40@48C56
v48@0:8@16@24@32@40
v48@0:8@16I24I28@32@40
v64@0:8@16@24@32@40@48@56
v192@0:8@16@24@32@40@48@56@64@72@80@88B96B100B104B108B112B116@120@128@136@144@152@160@168@176@?184
v52@0:8@16@24@32@40B48
v24@0:8@"IMDAccount"16
v24@0:8@"NSString"16
v24@0:8@"NSDictionary"16
v32@0:8@"NSString"16@"NSDictionary"24
v28@0:8B16@"NSString"20
v40@0:8@16@"NSString"24@"NSString"32
v40@0:8@"NSString"16@"NSString"24@"NSString"32
v52@0:8@"NSString"16@"NSDictionary"24@"NSString"32C40@"NSDictionary"44
v76@0:8@"NSString"16@"NSDictionary"24@"NSString"32C40@"NSString"44@"NSString"52@"NSString"60@"NSDictionary"68
v36@0:8@"NSString"16@"NSString"24C32
v52@0:8@"NSDictionary"16@"IMMessageItem"24@"NSString"32@"NSString"40C48
v52@0:8@"NSString"16@"NSString"24@"NSString"32C40@"NSString"44
v44@0:8@"NSDictionary"16@"NSString"24@"NSString"32C40
v52@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40C48
v32@0:8@"NSDictionary"16@"NSArray"24
v24@0:8@"NSURL"16
v44@0:8@"IMMessageItem"16@"NSString"24@"NSString"32C40
v24@0:8@"IMMessageItem"16
v44@0:8@"NSString"16@"NSString"24B32@?<v@?B>36
v60@0:8@"IMMessageItem"16@"NSString"24@"NSString"32@"NSString"40C48@?<v@?B>52
v76@0:8@"IMMessageItem"16@"IMMessageItem"24q32Q40@"NSString"48C56@"NSString"60@"NSAttributedString"68
v32@0:8@"IMSyndicationAction"16@"NSArray"24
v52@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40C48
v24@0:8@"NSArray"16
v28@0:8@"NSDictionary"16B24
v40@0:8@"NSNumber"16@"NSDictionary"24@"NSString"32
v60@0:8@"NSNumber"16@"NSDictionary"24@"NSString"32@"NSString"40@"NSString"48C56
v32@0:8@"NSDictionary"16@"NSString"24
v40@0:8@"NSString"16@"NSDictionary"24@"NSString"32
v48@0:8@"NSString"16@"NSDictionary"24@"NSString"32@"NSNumber"40
v40@0:8@"NSData"16@"NSString"24@"NSString"32
v48@0:8@"NSString"16I24I28@"NSDictionary"32@"NSString"40
v32@0:8@"NSArray"16@"NSString"24
B32@0:8@"NSDictionary"16@"NSArray"24
B24@0:8@"NSString"16
v64@0:8@"NSString"16@"NSString"24@"NSDictionary"32@"NSNumber"40@"NSString"48@"IDSAccount"56
v192@0:8@"IMMessageItem"16@"IMDChat"24@"IMDAccount"32@"NSData"40@"NSString"48@"NSString"56@"NSString"64@"NSArray"72@"NSString"80@"NSString"88B96B100B104B108B112B116@"NSNumber"120@"NSDictionary"128@"NSDictionary"136@"NSArray"144@"NSDictionary"152@"NSString"160@"NSString"168@176@?<v@?>184
v52@0:8@"IMDChat"16@"NSNumber"24@"NSString"32@"NSString"40B48
@20@0:8B16
S16@0:8
@"NSRecursiveLock"
@"IMDAccount"
@"NSMutableArray"
@"NSMutableSet"
@"IMTimer"
@"<IMDAutoReplying>"
@"IMTimingCollection"
@"IMConnectionMonitor"
@"IMSystemProxySettingsFetcher"
@"IMDChatRegistry"
v32@0:8d16@24
B40@0:8@16@24@32
v48@0:8@16@24@32@?40
d16@0:8
@"__IMDBackwardCompatibilityMessageIdentifier"
@"NSError"
@"CKRecordID"
@"NSNumber"
@"NSObject<OS_dispatch_queue>"
@"IMDRecordZoneManager"
@"IMDCKDatabaseManager"
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v40@0:8@"APSConnection"16@"NSData"24@"APSAppTokenInfo"32
v40@0:8@"APSConnection"16@"APSURLToken"24@"APSURLTokenInfo"32
v40@0:8@"APSConnection"16@"NSError"24@"APSURLTokenInfo"32
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
@"CKRecordZoneID"
@"CKRecordZone"
@"APSConnection"
@40@0:8@16@24Q32
@56@0:8@16@24Q32@40@48
v24@0:8@"SKStatusSubscription"16
v24@0:8@"SKStatusSubscriptionService"16
v56@0:8@16@24@32@40@48
@"SKStatusSubscriptionService"
@"NSCache"
@24@0:8r*16
@"INVocabulary"
@"NSArray"16@0:8
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
@"IDSService"
@44@0:8@16@24B32^@36
@40@0:8@16@24^@32
@56@0:8@16@24@32Q40Q48
@32@0:8@16^q24
v24@0:8@"PHChange"16
v36@0:8@16@24B32
@"IMDCallManager_Impl"
@"NSDictionary"16@0:8
v48@0:8q16Q24@32@?40
v52@0:8@16B24@?28@36@?44
B28@0:8B16@20
v52@0:8@16B24Q28Q36@?44
v60@0:8@16B24Q28Q36@44@?52
v36@0:8@16B24@?28
@40@0:8@16@24q32
Q32@0:8@16@24
v44@0:8@16@24C32@?36
v32@0:8q16q24
B40@0:8q16q24@32
v60@0:8@16q24@32B40@44@?52
v76@0:8B16q20q28q36q44@52@60@?68
B40@0:8q16@24@?32
v104@0:8@16@24@32B40B44q48q56@64q72q80@88@?96
v48@0:8@16@24@32q40
v32@0:8@16d24
v44@0:8@16B24@28@36
v32@0:8@16q24
v24@0:8Q16
v44@0:8@16B24@28@?36
@"IMDCKAttachmentSyncCKOperationFactory"
@"<IMDCKSyncTokenStore>"
v32@0:8@"IMKeyValueCollection"16@"NSDictionary"24
v44@0:8@16@24@32B40
B24@0:8B16B20
@36@0:8Q16B24d28
v32@0:8Q16q24
@"IMKeyValueCollection"
@"<IMDCKSyncStateDelegate>"
@"__IMDPlainTextTapbackInterpreterImpl"
@32@0:8q16@24
@40@0:8q16q24@32
@28@0:8@16B24
v56@0:8@16@24B32Q36I44I48S52
@48@0:8@16B24Q28I36I40S44
v40@0:8@16@24B32B36
v40@0:8@16Q24Q32
v72@0:8@16@24{IMPreviewConstraints=d{CGSize=dd}dBB}32
v64@0:8@16@24{?=[8I]}32
v52@0:8@16@24B32B36q40B48
v44@0:8@16B24B28q32B40
B44@0:8@16@24@32B40
{IMPreviewConstraints=d{CGSize=dd}dBB}16@0:8
B32@0:8@16q24
v32@0:8@16Q24
@36@0:8@16B24^B28
@64@0:8@16@24Q32q40@48@56
@48@0:8@16q24@32@40
@48@0:8@16@24Q32q40
Q24@0:8@16
@"<IMDCollaborationNoticeDispatcherDelegate>"
@"IMDCollaborationNoticeRateLimiter"
@44@0:8@16@24i32Q36
B28@0:8Q16B24
@28@0:8@16i24
q20@0:8i16
q24@0:8q16
@32@0:8@16Q24
Q40@0:8@16@24Q32
B32@0:8Q16@24
v56@0:8@16Q24Q32@40@?48
v40@0:8@"NSArray"16@"IMDChat"24@"NSString"32
@"<IMDAutoReplyDelegate>"16@0:8
v24@0:8@"<IMDAutoReplyDelegate>"16
v36@0:8@16B24@28
@"<IMDAutoReplyDelegate>"
@"CARAutomaticDNDStatus"
@32@0:8@16q24
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
@"UNUserNotificationCenter"
@"IMDScreenTimeAskReponseHandler"
@"IMDFamilyInviteReponseHandler"
@48@0:8@16@24Q32@40
v28@0:8B16@?20
B40@0:8@16@24Q32
@"IMNickname"
@"IDSKVStore"
B48@0:8@16@24@32B40B44
@44@0:8@16B24B28B32Q36
@52@0:8@16B24B28B32Q36B44B48
@56@0:8@16B24B28B32Q36B44B48B52
@44@0:8@16@24B32B36B40
@60@0:8@16@24@32@40Q48B56
@80@0:8@16@24@32Q40Q48@56^B64^B72
@56@0:8@16@24@32d40@48
@36@0:8i16@20@28
@48@0:8@16@24@32Q40
@56@0:8@16@24@32@40Q48
^{_IMDHandleRecordStruct={__CFRuntimeBase=QAQ}q^{__CFArray}}32@0:8@16@24
v60@0:8@16@24C32@36Q44@?52
@44@0:8@16C24@28@?36
@36@0:8@16C24@28
@56@0:8@16@24C32@36@44B52
@64@0:8@16q24Q32@40@48^@56
@32@0:8q16Q24
@"PHFetchOptions"
@"PHPhotoLibrary"
@204@0:8@16@24@32@40@48@56@64@72@80@88@96q104C112q116B124@128@136q144@152q160q168@176B184q188@196
B32@0:8q16@24
C16@0:8
v20@0:8C16
v28@0:8@?16B24
@68@0:8@16@24@32@40@48@56B64
@88@0:8@16@24@32C40@44@52@60@68@76B84
@28@0:8@16C24
@36@0:8@16B24Q28
@44@0:8@16B24@28Q36
@36@0:8@16@24C32
@52@0:8@16@24@32@40C48
@44@0:8@16@24@32C40
@52@0:8@16@24B32@36@44
@64@0:8@16@24@32@40@48@56
v64@0:8@16@24@32B40@44B52B56B60
v36@0:8@16B24B28B32
Q56@0:8@16C24@28@36@44B52
@68@0:8@16@24Q32B40@44Q52^Q60
@20@0:8C16
v40@0:8@16@24^@32
@36@0:8{_NSRange=QQ}16B32
B24@0:8@?16
B36@0:8@16@24C32
@32@0:8@16^B24
@40@0:8@16q24@32
@48@0:8q16B24@28B36@40
v40@0:8@16@24Q32
v28@0:8@16i24
v40@0:8@16@24q32
v80@0:8@16@24@32@40@48@56q64@72
v40@0:8^@16^@24@32
v40@0:8q16q24q32
@"NSData"
@"IMDCKUtilities"
@"IMDChatStore"
@"IMDMessageProcessingController"
@"IMDMessageHistorySyncController"
@"TUConversationManager"
@"CKContainer"
v32@0:8B16B20B24B28
B24@0:8^@16
@"CUTWeakReference"
B36@0:8@16@24B32
@24@0:8^{_IMDAttachmentRecordStruct={__CFRuntimeBase=QAQ}q^{__CFArray}}16
^{_IMDAttachmentRecordStruct={__CFRuntimeBase=QAQ}q^{__CFArray}}24@0:8@16
v24@0:8B16B20
@"<IMDCKAbstractSyncControllerDelegate>"
B40@0:8@16^@24^@32
v40@0:8@?16d24@32
v40@0:8@16Q24@?32
v40@0:8I16I20@24@?32
B48@0:8@16@24@32@40
@"IMStateCaptureAssistant"
v40@0:8@16q24q32
@"FMFSession"
Q24@0:8q16
v60@0:8@16@24@32B40@44@?52
B48@0:8@16Q24q32q40
v76@0:8@16@24B32q36q44@52@60@?68
v52@0:8B16q20q28@36@?44
v96@0:8@16@24@32B40@44q52q60q68B76@80@?88
B32@0:8q16q24
v56@0:8q16q24q32@40@?48
@"CKServerChangeToken"
@"IMDCKMessageSyncCKOperationFactory"
v40@0:8q16@24@?32
v48@0:8q16@24@32@?40
v52@0:8q16@24B32@36@?44
@"NSLock"
B36@0:8@16C24^@28
@"IMDReplayStorageController"
@"IMDReplayStorageIterationContext"
v40@0:8@"IMDXPCEventStreamHandler"16@"NSString"24@"NSDictionary"32
v32@0:8@"IMDCKAbstractSyncController"16Q24
@40@0:8q16@24^B32
v40@0:8Q16r*24@32
B72@0:8q16q24@32Q40@48@56@?64
v56@0:8@16Q24@32@?40@?48
v32@0:8@?16@24
@"NSMutableOrderedSet"
v80@0:8@16@24B32B36B40B44Q48@?56@?64@?72
v28@0:8@16C24
v36@0:8@16C24@28
v52@0:8@16C24@28@36@44
v60@0:8@16C24@28@36@44@52
v72@0:8@16C24@28@36@44@52@60B68
v80@0:8@16C24@28@36@44@52@60@68B76
v32@0:8^@16^C24
v48@0:8@16@24C32B36@?40
v56@0:8@16@24C32B36@40@?48
v44@0:8@16@24C32@36
v52@0:8B16@20@28@36@?44
v44@0:8@16C24@28@36
v68@0:8@16C24@28@36@44@52@60
v68@0:8@16C24@28@36@44q52@60
v64@0:8@16C24@28@36@44@52B60
v32@0:8i16@20C28
v32@0:8I16@20B28
v40@0:8I16@20B28@32
v36@0:8I16@20@28
B48@0:8@16q24@32@40
v44@0:8@16q24@32B40
v52@0:8@16@24q32B40@?44
v48@0:8@16@24q32@?40
v88@0:8@16q24@32@40B48@52q60B68@72@?80
v68@0:8@16q24@32@40B48@52@?60
v80@0:8@16q24@32@40B48@52B60@64@?72
v52@0:8@16@24C32@36@44
v56@0:8@16@24C32@36@44B52
v60@0:8@16@24@32@40C48@52
v68@0:8@16@24@32@40C48@52@60
B52@0:8@16@24C32@36@44
B60@0:8@16@24@32C40@44@52
v40@0:8i16@20C28@32
v56@0:8i16@20C28@32@40@48
v64@0:8i16@20C28@32@40@48@56
v72@0:8i16@20C28@32@40@48@56@64
v68@0:8i16@20C28@32@40@48@56B64
v84@0:8i16@20C28@32@40@48@56@64@72B80
v80@0:8i16@20C28@32@40@48@56q64@72
v100@0:8i16@20C28@32@40@48@56@64@72q80@88B96
v40@0:8i16@20@28C36
v56@0:8i16@20@28@36@44C52
v64@0:8i16@20@28@36@44@52C60
v72@0:8i16@20@28@36@44@52C60@64
v80@0:8i16@20@28@36@44@52C60@64@72
v88@0:8i16@20@28@36@44@52C60@64@72@80
v44@0:8@16@24I32@36
v56@0:8@16@24@32@40@?48
v60@0:8@16@24C32@36@44@?52
v52@0:8@16@24@32B40@?44
v120@0:8@16@24@32@40@48@56@64@72Q80B88@92B100@?104@?112
B20@0:8B16
@"<IMDMessageHistorySyncTask>"
@"<IMDMessageHistorySyncTaskFactory>"
v48@0:8@16@24@?32q40
v44@0:8i16@20@28@?36
@"IMDCKChatSyncCKOperationFactory"
@"CKRecord"
@"IMDCollaborationNoticeDispatcher"
B24@0:8Q16
v48@0:8q16q24@32@?40
B24@0:8@"IMDMessagePTask"16
v68@0:8@16@24C32@36@44@52@60
{_FZChatRoomValidity=iS}24@0:8@16
@"IDSKVDeleteContext"
B32@0:8@16^@24
@32@0:8Q16^@24
@"NSMapTable"
B28@0:8i16@20
v44@0:8@16@24S32q36
v44@0:8@16i24@28@36
v52@0:8I16I20@24i32@36@44
v44@0:8@16@24Q32B40
v48@0:8@16@24Q32@40
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversation"32
v32@0:8@"TUConversationManager"16@"NSArray"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"TUConversationManager"16@"TUConversation"24Q32B40
v32@0:8@"TUConversationManager"16@"NSString"24
v48@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationMember"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSData"32
v40@0:8@"TUConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v48@0:8@"TUConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v36@0:8@"TUConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"TUConversationManager"16@"NSError"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v28@0:8@"TUConversationManager"16B24
@48@0:8@16@24@32o^@40
@52@0:8@16@24@32B40o^@44
v32@0:8@"CSSearchableIndex"16@?<v@?>24
v40@0:8@"CSSearchableIndex"16@"NSArray"24@?<v@?>32
v24@0:8@"CSSearchableIndex"16
@"NSData"48@0:8@"CSSearchableIndex"16@"NSString"24@"NSString"32o^@40
@"NSURL"52@0:8@"CSSearchableIndex"16@"NSString"24@"NSString"32B40o^@44
@"IDSAccount"
v32@0:8@"IDSAccountController"16@"IDSAccount"24
v32@0:8@"NSString"16@"NSArray"24
@28@0:8i16@20
@"IDSAccountController"
@"IMDIDSService"
q32@0:8@16@24
iMessage
FaceTime
@(#)PROGRAM:IMDaemonCore  PROJECT:IMDaemonCore-
%??O
UUUUUU
BackwardCompatibilityMessageIdentifier
BackwardCompatibilityMessageType
IMDaemonCore
DaemonCoreHelloWorldClass
IMDaemonCoreHelloWorld
IMDaemonCore
CallManager
IMDaemonCore
IncomingClientConnectionListener
IncomingClientConnectionListening
TextInfixParser
WrappingPair
Liked "%
Disliked
Laughed 
Emphasiz
Question
PlainTextTapbackInterpreter
IMAssociatedMessageType
_NSRange
UncheckedSendable
ClientRequestHandling
DaemonWorkActor
IMDInternalWorkQueue
IMDaemonCore
ClientConnectionManager
MessagesClientCapabilities
NIMClientCapabilities
IMSharedUtilities
IMDaemonCore
CollaborationNoticeStore
ClientConnection
audit_token_t
ClientConnectionManaging
PersistedCollaborationNotice
IMDMessagePTaskStoreAddedProcessingTask
Initial
FetchMomentShare
Accepting
FetchingAssets
GeneratingTransfers
Invalid Ingestion State: %ld
IMDAccount
Creating account id: %@    defaults: %@    on service: %@
IMDAccount: incoming 'defaults' is not a dictionary, %@, %@
AccountManaged
%@ - write account defaults: %@
accountID
accountDefaults
capabilities
serviceLoginStatus
serviceLoginStatusMessage
buddyProperties
groups
Session
%@: Telling session it became active
%@: Forcing login
-[%@ _forceSetLoginStatus:%d message:%@ reason:%d properties:%@] session=%@
IMDSIMSubscriptionUpdateTracker
Broadcasting: Subscriptions have changed
read-receipt-tracking
IMDAccountController
Loading services: %@ (First load: %@)
Loading service: %@
service: %@ has been discontinued. Loading default disabled account
   Creating account with ID: %@
   Creating persistent session with ID: %@
  Service wants new accounts active, setting active: %@
 Not loading accounts from defaults, appears to be IDS Based: %@
 Found accounts: %@
 Loading: %@
 Done
  Setting active accounts: %@
  Service wants accounts always active, setting active: %@
Logging in previously logged in accounts: %@
  * Logging in previously logged in account: %@
  * No account found for account ID: %@
Done loading service: %@
iMessage
PlaceholderAccount
Done loading all services
   Found account: %@
      => Disabled, continuing
      Found service: %@
      => Service discontinued, skipping.
      Adding account: %@ to active set: %@
Reusing session: %@
      Active account set is: %@
      Building sesssion
      Enable the associated account
Tried to deactivate an account, but found no account: %@
Tried to deactivate an account, but found no service; %@
Add account: %@
Remove account: %@
B16@?0@8
@16@?0@8
activeSessions = %@
Could not find a service session for string: %@, account: %@, allAccounts: %@
IMDAccountController: Could not find a service for string: %@
IMDAccountController: Could not find an account for serviceString: %@, accountsForService: %@, accounts: %@
IMDAccountController: Could not find a session for account: %@
Rebuilding operational accounts, old: (%@)  new: (%@)
Operational accounts changed
__kIMDBadgeUtilitiesOperationalAccountsChangedNotification
com.apple.madrid
IDS account %@ is active %@ can send %@ is madrid account %@
calling setNetwork %@
  => broadcasting
FaceTime
Receiving id (%@) with country code (%@) is a candidate for spam filtering.
Receiving id (%@) with country code (%@) is not a candidate for spam filtering.
Receiving id (%@) with region (%@) is a candidate for spam filtering.
Receiving id (%@) with region (%@) is not a candidate for spam filtering.
Found an account (%@) that isn't IMDIDS (%@), can't determien region -- falling through.
IMDCKUtilitiesErrorDomain
CKSubType
IMD-IDS-Aliases
selectedAliases
allAliases
com.apple.Messages
IMDCKUtilities
%@/CKMessagesLogDump/
key roll pending check returned: %@
Added key roll pending error to sync state
Not performing key roll check didKeyRollPendingCheck %@ cloudKitSyncingEnabled %@
fetchCloudKitAccountStatusAndCheckForAccountNeedsRepairWithCompletion failed with error: %@
v24@?0q8@"NSError"16
updating key roll pending state
shouldForceArchivedMessagesSync
v20@?0B8@"NSError"12
Get file size on path: %@
Check if there is enough iCloud quota
User quota completion block return with available Quota %llu, and Error: %@
Available Quota in bytes:  and message database size: %llu, %llu
v24@?0Q8@"NSError"16
Madrid server bag does not allow us to sync. Our client version %d server client version %ld
_shouldiCloudSwitchBeEnabled is FALSE as iCloud and iMessage accounts do not match up
_shouldiCloudSwitchBeEnabled is FALSE because server does not allow sync
_shouldiCloudSwitchBeEnabled is FALSE because we are in exit state. Is moc feature enabled %@
We are not in exit state, _shouldiCloudSwitchBeEnabled is based on whether feature is enabled or not: %@
ck-client-min-version
**** cloudKitSyncingEnabled is turned off in this build
Setting cloudkit enabled: %@
Starting initial sync
IMDCKCacheDeleteManager
Attachment watermark reset to 0
ck-submit-metrics-min-version
ck-submit-analytics-min-version
ck-submit-analytics-details-min-version
server allows submitting metrics result %@ clientVersion %@ serverVersion %@
server allows submitting analytics result %@ clientVersion %@ serverVersion %@
server allows submitting analytics details result %@ clientVersion %@ serverVersion %@
Keep Messages value should be altered from %@ to 0
Resetting Keep Message setting to Keep forever.  VersionID: %ld
ck-cache-delete-version-V3
server allows cached delete check result %@ clientVersion %@ serverVersion %@
ck-enable-attachment-validation
enableAttachmentMetricCollection overridden by iMessage server
Should enable attachment metric-ing %@
CacheDeleteEnabled %@
ck-remove-from-backup-version-V3
server allows removal from backup result %@ serverVersion %@
This is an internal install so overriding server bag check and defaulting to yes
Removal from back up allowed %@
com.apple.private.IMDCKUtilitiesInternal
accountIsVerifiedForMOCAndSafeForCacheDelete
Checking if account is verified
Return account validForCD with error: %@ accountStatus: %@
About to wait for accountIsVerifiedForMOCAndSafeForCacheDelete call
Finished blocking accountIsVerifiedForMOCAndSafeForCacheDelete with time: %@ and accountValidForCD %@
AKAppleIDAuthenticationController
AuthKit
isEligibleForTruthZoneOverride
Overriding isEligibleForTruthZone: %@
Fetched cloud kit account status: %@, error: %@
Fetched cloud kit account status: %@
Fetching cloud kit account info with cloudkit api
accountInfoWithCompletionHandler called with accountInfo %@, error %@
Checking for cloudkit account info failed with error: %@ 
failed fetching account status
Checking for cloudkit eligibility returned: %@ inCarry: %@
Unrecognized account status %ld
v24@?0@"CKAccountInfo"8@"NSError"16
ck-account-repair-override
account needs repair override is: %@
account repair overridden
MiC is disabled, does not need repair
Account needs repair: %@ (account status: %@)
Got local account security level %@
Not checking account for needed repair because fetching account status returned an error: %@
Fetching security level and updating mic switch eligible on imagent launch
Server allowing %@: %@
Defaults over allowing %@: %@
should-ttr-on-icloud-kit-error
should-dump-logs-on-icloud-kit-error
should-dump-logs-daily-if-havent-synced
disable-dumping-logs-daily-for_restore_failures
msgs_on_icloud_logs@icloud.com
log-collector-handle
A cloudkit error(%@) occured checking if we should try to report the error
Should log dump on cloudkit error? %@
TriggeredByCKError
LSApplicationWorkspace
CoreServices
File a radar
Dismiss
Messages on iCloud Debug UI
We present a CK UI
TTR:%@ MoIC Sync Fail %@
tap-to-radar://new?Title=%@&ComponentID=644010&ComponentName=Messages Frameworks&ComponentVersion=iOS&Classification=Serious Bug&Description=%@&Reproducibility=I Didn't Try
User tapped file a radar. Opening URL %@
v16@?0@"IMUserNotification"8
%@%@
IMDCKUtilities recordNameForMessageWithGUID invalid parameters [key length] %@ guid %@
%@-%@-%@-%@
RecoverableError
NonRecoverableError
******** IMDCKUtilities not a partial error %@
Resetting last sync date to nil
Last sync date was reset to nil
ACAccountStore
AppleAccount
IMDaemon_CloudKit
Force switching icloud switch to %@ since default has not been set.
Trying to set iCloud Settings Swtich to enabled ? %@
Error saving enabling for kAccountDataclassMessages.
Success saving enabling for kAccountDataclassMessages.
Found primary account: %@ error: %@
v24@?0@"ACAccount"8@"NSError"16
fetchiCloudAccountPersonID returning with error: %@
Found DSID: %@
Account has backup enabled: %@
ck-sync-paused
Is syncing paused override: %@
syncing paused because syncing override is YES
syncing not paused because syncing not enabled
syncing not paused because we have a valid sync date
syncing not paused because we are syncing
syncing not paused because we are connected wifi and device is charging
syncing paused: connected to Wifi: %@, device is charging: %@
PCSReportKeyRollPending
ProtectedCloudStorage
Linked linkedPCSReportKeyRollPending ok: %@
Messages3
isOnWifiAndPower %@, Is charging %@ , isOnWifi %@ , lastSyncDate %@ lastCompleteSyncedDBDate %@
isOnWifiAndPower %@, Is charging %@ , isOnWifi %@ 
Found duplicate record while syncing or record does not have a record name. Dropping record: %@
Found duplicate recordID while syncing or recordID does not have a record name. Dropping record: %@
active
inActive
Active state %@ last activity date %@
Just send
Notify me each time
User chose to always auto send logs
User chose to show pop up before sending logs
ck-should-use-rtc-reporting
ck-should-use-analytics-reporting
Read server bag bool: [%@] for key: [%@]
Server bag bool default: [%@] for key: [%@]
groupName
deviceState
ZoneCreateDate-%@
IMDCKUtilites
logDumpAndSendMessage not allowed with error: %@
logDumpAndSendMessageTo called for recipient %@, hrs %@, reason %@, initialSync %@ logDumpGuid %@
User has opted out of auto log collection. Not dumping logs for logDumpGuid %@
User has never seen a prompt and this collection requires a previous prompt. Not dumping logs for logDumpGuid %@
LogDump
<StartDeviceID> Device ID: %@ <EndDeviceID> logDumpGuid %@
We didn't get a device ID back from cloudkit error: %@
dd-MM-yyyy_HH:mm
%@_MT_%@_%@_%@_%@_Messages
Unknown
RestoreFailure
Could not create dir at path %@, failed with error %@. Aborting log dump with logDumpGuid %@
Succeeded creating dir at path %@ for logDumpGuid %@
subsystem CONTAINS[cd] "com.apple.messages"
Error occurred trying to log dump messages logs: %@
Succeeded logging messages log to file at path %@
v24@?0@"NSString"8@"NSError"16
Not log dumping since not on internal device
In logDumpAndSendMessageTo but caught an exception %@
Returning %@ for logDumpIsExpcted - _isLogDumpAllowed: %@, _isOnPowerAndWifi: %@, _isRunningInAutomation: %@
For some reason we do not have the sync counts prior to syncing
All items have been synced, noting down last complete synced DB date %@
Could not log db sync date because not all items synced: chatsLeftToSync %@ | messagesLeftToSync %@ | attachmentsLeftToSync %@
<StartSyncStats> syncedChatDifference %@ | syncedMessageDifference %@ | syncedAttachmentDifference %@ <EndSyncStats>
Log dump needed -- didn't sync enough items | syncedMessages %@ | syncedChats %@ | syncedAttachments %@
PCSReportManateeStatus
Linked linkedPCSReportManateeStatus ok: %@
Failed to weak link ProtectedCloudStorage, this should not happen
Engram
AKAccountManager
is phone or watch: [%@]
D:%@
iCloud DSID %@
iMessage account DSID %@
iCloud account %@ and iMessage account %@ DO NOT match up
We found one that matches up (icloud: %@, iMessage: %@), the ids account is active: [%@]
enableMOCIfNeeded was called, but this is now a no-op bailing
/**---DISABLING MESSAGES ON ICLOUD---**/
Fetching eligibility for truth zone before attempting to sync
Not eligible for truth zone
***** Timed out checking truth zone eligibility *******
eligibleForTruthZone %@
com.apple.imagent
ck-demo-mode
Attempt to disable MOC across all devices
Unable to request exit record when trying to disable all devices. Error: %@
DisableAllDevices
AKAuthenticationSecurityLevelKey
Calculating selected/all aliases
Saving (domain %@) selected aliases %@
IMDCKAccountStatusUnknown
IMDCKAccountStatusLoggedOut
IMDCKAccountStatusLoggedInWithNoD2DEncryptionSupport
IMDCKAccountStatusLoggedInWithD2DEncryptionSupport
AKAppleIDSecurityLevelUnknown
AKAppleIDSecurityLevelPasswordOnly
AKAppleIDSecurityLevelStandard
AKAppleIDSecurityLevelHSA1
AKAppleIDSecurityLevelHSA2
AKAppleIDSecurityLevelManaged
%@: Start sync should not be called more than once.  Ignoring request.
MessageProcessing
%@: Begin syncing IDS transaction log history for %ld services
%@: Starting sync task for %@ service 
%@:Received a batch of %lu messages to process.
%@: Finished processing batch of %lu messages.
v24@?0@"NSArray"8@?<v@?q>16
v24@?0@"NSArray"8@?<v@?@"NSArray">16
%@: Finished sync task for %@ service. Error: %@
%@: Finished Syncing all services for task
v16@?0@"NSError"8
IMDMessageHistoryCKChatSyncTask: Start sync should not be called more than once.  Ignoring request.
IMDMessageHistoryCKChatSyncTask
Back online, start syncing chats
IMDCKSyncStatsCollector
Refreshing CloudKit sync statistics from the database
Skipping the refresh of CloudKit sync statistics from the database
com.apple.messages.IMDClientRequestContext.currentContext
No instance IMDClientRequestContext available for current thread, -currentContext caller may not be within a client request handler
%@-syncStoreVersion
IMDCKSyncTokenStore
Migrating sync token {key: %@, db: %@, version: %ld}
IMDCKChatSyncController
Found token data, saving to sms.db {key: %@}
No token data found {key: %@}
Failed to unarchive ckserver change token. Error: %@
Fetched token {key: %@, token: %@}
Persisting token {key: %@, token: %@}
ServiceProperties
plist
Discontinued-%@
%@.%@
%@Defaults
%@AccountDefaults
IMDService (%@)
CKBBContextKeyBalloonBundleID
IMDScreenTimeAskReponseHandler
requestID
Sending sent ST response with answer: %@
Successfully sent ST response with answer: %@
[%@: <Device%@ activeDate:%@ readReceipt:%@, read ReceiptDate %@>]
OTCManager
Asked to track a new OTC with guid %@
Asked to track a OTC but code appears to be invalid %@
Send out OTC to all interested clients.
Clearing code for GUID: %@
Asked to consume code for guid %@, but unable, current code count: %@
Timer fired to clear code with GUID: %@
v16@?0@"NSTimer"8
IMDSoundUtilities
Play message sent sound type: %@, for message: %@
Acknowledgment
Suppressing play sound for downgraded message[%@]
Suppressing play sound because it was already played [%@]
Suppressing play sound for auto-reply message [%@]
Unable to find a sound action ID for %@  errorResult: %d
Unable to set property on sound ID   errorResult: %d
com.apple.MobileSMS
SuppressingSendSoundMessageGUIDs
Setting timer to evaluate deferred message processing in: %f
Checking for deferred message processing task
MessageProcessing: Unable to retrieve ptask from store
Found %ld messages that need processing
Scheduling next batch of messages to process
Finished processing deferred messages
IMDCoreSpotlight
Not indexing message, spotlight has not finished migrating yet
message-format-version
message-id
sender-uri
time-of-message
message-has-image
message-length
message-text
message-app-bundle-id
message-spam-model-version
message-spam-model-detected-spam
mmcs-url
mmcs-signature-hex
mmcs-owner
file-size
decryption-key
mmcs-owner-id
mmcs-file-size-string
mmcs-symmetric-key
mmcs-UTI-type
message-attachment-info
conversation-group-size
payment-info
is-self
is-payment
is-informal
message-service
notify-security
v32@?0@"NSString"8@"NSArray"16^B24
IDSReportiMessageUnknownSenderWithBlackholeStatus
PKPeerPaymentMessageTypeFromDataURL
PassKitCore
PKPeerPaymentMessageDictionaryRepresentationFromDataURL
__kIMDaemonWillShutdownNotification
__kIMDManagedPreferencesChangedNotification
v32@?0@"CUTWeakReference"8Q16^B24
@16@?0@"CUTWeakReference"8
v32@?0@"IMDServiceSession"8Q16^B24
IMDServiceSession
initWithAccount: %@       service:%@  defaults: %@
DEALLOC: %@
[%@ addAccount:%@]
[%@ removeAccount:%@]
[%@ sessionDidBecomeActive]
Scheduling watchdog timer before first unlock
Not scheduling routing, expire and watchdog timer before first unlock
[%@ sessionWillBecomeInactiveWithAccount:%@]
-[IMDServiceSession _connectionMonitor] monitor: %@:%@
_updateConnectionMonitorWithRemoteHost: %@:%@
Creating connection monitor to global reachability: %@
Forcing an invocation of connectionMonitorDidUpdate 10 seconds after setting it up.
Already have connection monitor to global reachability: %@
Going disconnected for connection monitor: %@
_reconnectIfNecessary: %@:%@
  shouldAlwaysBeLoggedIn: %@    shouldReconnect: %@   wasLikelyNetworkError: %@  loginStatus: %d  disconnectReason: %d
%@: we're disconnected properly - and we're supposed to try to reconnect now, 
IMConnectionMonitor
%@       forcing disconnect
%@: Network connection to %@ is down -- disconnecting
%@       Data connection is active, going into login server ready
%@       I can be reached
%@ connectionMonitorDidUpdate: Currently connected: %@   (Reachable: %@  Data Active: %@  On Call: %@  Data+Voice: %@   Result: %@)
Network
-[IMDServiceSession networkConditionsAllowLogin]: %@ (%@)   (Ignoring network)
-[IMDServiceSession networkConditionsAllowLogin]: %@ (%@)   ([[%@]_connectionMonitor isImmediatelyReachable])
-[IMDServiceSession networkConditionsAllowLogin]: %@ (%@)   (Fallback)
Refreshing capabilities: %@
%@ System did unlock - ending message suppression
IMDServiceSession | Expected to blocklist chat for chatDict: %@ but groupID nil
Blocklisted GroupID: %@
IMDServiceSession | Deletion: did not find any chats for received guid: %@ or received groupID: %@
removing chat: %@, permanently: %@
recoverably deleting %@: messages
IMDServiceSession | Recently Deleted: deferring to recoverable delete - unexpected permanent delete received for command dictionary: %@
Recently Deleted | messages delete date: %@
IMDServiceSession | Recovery: did not find any chats for existingChatWithGUID: %@, existingChatsWithGroupID: %@
guid
IMDServiceSession: Recently Deleted | Received empty parts-mardid command
IMDServiceSession: Recently Deleted | Received permanent delete command. This is unsupported
Recently Deleted | Deleting message parts from %lu messages: %@
IMDServiceSession: Recently Deleted | could not find messageItem for GUID: %@
IMDServiceSession: Recently Deleted | did not find indexes to delete at for GUID: %@
Recently Deleted | Removed parts from old item %@, got new item: %@
Recently Deleted | Mardid: deleting message part: found no message-part body-text to store for recovery
v16@?0@"NSAttributedString"8
Recently Deleted | _updateLastMessageTimeStampForChat received nil chat
Recently Deleted
IMDserviceSession
Recently Deleted | IMDChat: %@, updating last message timestamp on load: %@
IMDSpamController
Instantiated IMDSpamController
Performing server query with alias: %@, count: %@
Server request returned status: %ld, abusive: %@, delay: %f, error: %@
v36@?0q8B16d20@"NSError"28
Chat
Stopping spam check for chatGUID: %@ interval: %f
Scheduling a spam check with interval: %f for chatGUID: %@
message-spam-check-timer
disable-auto-detect-spam
hasViewedPotentialSpamChat
detectSpam for Chat Identifier: %@
wasAutoDetectedForSpam
shouldn't retry again: %@
don't try to detect spam for chat: %@, disabled: %@, properties: %@
CloudKitExitRecord
Exit
CloudKitExitOnDate
ExitRecordKeyManateeZoneSubscription
com.apple.Messages.IMDCKExitManagerErrorDomain
SyncCompleteRecordType
SyncCompleteDateKey
AnalyticDataRecordType
AnalyticDataKey
SyncCompleteRecord
AnalyticZoneRecord
SyncCompletedRecently
SyncNotCompletedRecently
SyncInProgress
SyncDueToIMAuto
SyncCompleted30Hours
IMNotSyncDueToIMAuto
Recent
Power
Wifi
Syncing
FirstUnlock
Crash
LastCompleteDBCKSyncWasWithin3Days
LastCompleteDBCKSyncWasNotWithin3Days
LastCompleteDBCKSyncWasWithin7Days
LastCompleteDBCKSyncWasNotWithin7Days
LastCKSyncWasWithin3Days
LastCKSyncWasNotWithin3Days
LastCKSyncWasWithin7Days
LastCKSyncWasNotWithin7Days
PreFlightZoneFetch
FullSyncInitiated
FullSyncFailed
FullSyncCompleted
FullChatSyncStarted
FullChatSyncFailed
PeriodicChatSyncStarted
PeriodicChatSyncCompleted
PeriodicChatSyncFailed
MessageSyncStarted
MessageSyncFailed
MessageSyncStoppedDueToDeviceConditions
AttachmentSyncStarted
AttachmentSyncFailed
AttachmentSyncStoppedDueToDeviceConditions
ManateeNotAvailable
NotStartingCoreDuetSync
BackUpCompletedRecently
BackUpNotCompletedRecently
InitialSyncInitiated
InitialSyncCompleted
InitialChatSyncInitiated
InitialChatSyncFailed
InitialMessageSyncInitiated
InitialMessageSyncFailed
InitialAttachmentSyncInitiated
InitialAttachmentSyncFailed
ChatSyncCompleted
WriteSyncCompleted
DeletionSyncCompleted
AttachmentMetadataSyncCompleted
WithOver20HoursOfPowerAndWiFi
FirstSyncInitiated
FirstSyncCompleted
FirstChatSyncFailed
FirstMessageSyncInitiated
FirstMessageSyncFailed
FirstAttachmentSyncInitiated
FirstAttachmentSyncFailed
FirstSyncFailed
RecievedMissingMessageNotification
PostingMissingMessageData
CrashDuringFirstSync
MaxRecoverableAttemptReached
PCSIdentityWasLost
ManateeIdentityFetchAttemptFullSync
ManateeIdentityFetchAttemptFullSyncFailed
ManateeIdentityFetchAttemptRestoreSync
ManateeIdentityFetchAttemptRestoreSyncFailed
FullSyncInitiatedWithOver20HoursOfPowerAndWifi
FullSyncCompletedWithOver20HoursOfPowerAndWifi
RestoredAllContentFromCloudKit
com.apple.ProtectedCloudStorage.mobileBackupStateChange
com.apple.ProtectedCloudStorage.test.mobileBackupStateChange
com.apple.ProtectedCloudStorage.test.mobileBackupStateChange.success
com.apple.ProtectedCloudStorage.PendingKeyRoll
PCSBackupDisabledKeyroll
PCSBackupDisabledUserToggledKeyroll
PCSBackupDisabledTestToggledKeyroll
PCSBackupDisabledSuccessfulKeyroll
PCSPendingKeyroll
com.apple.private.IMDCKExitManager
IMDCKExitManager
Exit Record date has been modified, changing it from %@ to %@. Are we in exit state ? %@
Error fetching exit record date has been modified, changing it from %@ to %@
Handling notification for subscriptionID: %@
Calling writeExitRecordWithDate. ExitDate: %@
writeExitRecordWithDate, must be called with a non-nil exit date ignoring request
We were not able to create the subscription, we'll still try to write the exit record as we'll retry updating the subscription on imagent launch
writeExitRecordWithDate returned with error: %@
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
writeExitRecordWithDate scheduling opperation
******* Failed writeExitRecordWithDate salt zone was not present *********
Calling exitRecordDateWithCompletion date: %@ error: %@ fetchedExitDateOnLaunch: %@
Updating our exit date to %@  with error %@. fetchedExitDateOnLaunch [%@] or previous errorFetchingDate [%@]
v24@?0@"NSDate"8@"NSError"16
Dispatching back to main queue exitDate: %@ error: %@
Already on main queue exitDate: %@ error: %@
Calling _fetchExitRecordDateWithCompletion
** Error fetching exit record %@
Done fetching exit record successfully
Exit date has been modified from %@ to %@, attempting to toggle icloud settings toggle
Unable to fetch exit zone record Error: %@
ExitRecord
v24@?0@"NSDictionary"8@"NSError"16
_fetchExitRecordDateWithCompletion scheduling opperation %@
Calling deleteExitRecordCompletionBlock
deleteExitRecordWithCompletion returned with error: %@
deleteExitRecordWithCompletion scheduling opperation
QOS: 0x%lX target qos: 0x%lX
Checking if salt zone needs to be created
Error creating salt zone %@
***** Timed out creating salt zone *******
Checking if exit zone subscription needs to be created
Error creating exit zone subscription %@
***** Timed out creating exit zone subscription *******
writeInitialSyncCompletedRecordIfNeeded Not doing under first unlock
initialSyncRecordHasBeenWritten
writeInitialSyncCompletedRecordIfNeeded Requesting last sync date for metrics: %@
Last sync was within the last 7 days
Wrote last sync date to CK first time, success %@, error %@
writeInitialSyncCompletedRecordIfNeeded last sync date %@ was not in last 7 days
writeInitialSyncCompletedRecordIfNeeded No last sync date
writeInitialSyncCompletedRecordIfNeeded We have already done this. Not doing again unless you do defaults delete com.apple.madrid initialSyncRecordHasBeenWritten
IMDCKSubmitMetric
Submitted metric with opGroupName %@ Error %@
*** submitCloudKitMetricWithOperationGroupName not submitting MOC enabled: %@, serverAllowsSubmission: %@
Error creating analytic zone %@
***** Timed out creating analytic zone *******
IMDCKSubmitAnalytic
Request to submit dictionary (%@) opGroupName %@
Analytic zone does not exist, so creating it before resubmitting metric.
Successfully created analytic zone so trying to submit metric again.
Issue, we created the zone and we got back same error again.
Submitted metric with opName %@, dict: %@
Reporting errors: %@
syncErrors
Failed to create analytic zone.
*** submitCloudKitMetricWithOperationGroupName not submitting as analytic submission is not enabled
Performing metric operation name %@ using DB %@
Trying to submit CK metric operation with ID %@
Completion called for submittion metric operation with ID %@. ignoreZoneNotFoundError %@ OperationError %@
IMDCKSyncCompletion
We should not be submitting metrics to CloudKit: serverAllowsMetricSubmission: %@ isInternal: %@ isSeed: %@
Writing up sync metric using opGroup %@
We should not be submitting metrics to CloudKit so calling completion with success.
Failed to serizlize analyticdict as JSON %@. Posting operationGroupName %@ only.
Writing up sync analytic using opGroup %@
Not submitting metrics to CloudKit because notAllowed: %@ noJsonData: %@ so calling completion with success.
sendCloudKitZoneFetchRequestToNoteFeatureIsOn
sendCloudKitZoneFetchRequestToNoteFeatureIsOn not pinging CK as feature is off
Pinging cloudkit to tell feature is on.
Messages_Enabled
Messages Enabled Ping
sendCloudKitZoneFetchRequestToNoteFeatureIsOn: Fetch zone operation error %@
Scheduling ping cloudkit fetch zone operation %@
chatManateeZone
messageManateeZone
attachmentManateeZone
messageUpdateZone
analyticManateeZone
RecordKeyManateeZone
MetricsManateeZone
recoverableMessageDeleteZone
com.apple.aps.imagent
We couldn't create the push connection for the IMDRecordZoneManager
com.apple.icloud-container.
IMDCKRecordManager
Created push connection %@ with enabled topics %@
APSConnection didReceivePublicToken
APSConnection didReceiveIncomingMessage pushPayload: %@ ckNotification: %@
Received a notification for an unsupported notitifcation type: %@
Received a notification for zoneID: %@ for subscriptionID: %@
Received a notification for zoneID we haven't set up: %@ subscriptionID: %@
Creating subscription: %@ for zoneID: %@
We failed to create the subscription: %@  with error: %@
We successfully created subscription: %@
v24@?0@"CKSubscription"8@"NSError"16
We are already subscribed to: %@
We are not subscribed to subscriptionID: %@ so let's create it
_checkRecordZoneExists invalid parameter: recordZoneID %@
IMDRecordZoneManager
Created CKFetchRecordZonesOperation operation ID %@ zoneID %@
Did not get back a zone for recordZoneID %@
IMRecordZoneManager
Found zone %@
Error initializing fetchOperation 
Successfully created zone %@ 
***** Failed to createzone %@ %@ 
Zone %@ already exists
createRecordZoneIfNeededWithCompletionBlock zone %@ exists %@ error %@
Attempting to create zone %@
Successfully deleted zone IDs%@
Failed to delete zone IDs%@ error %@
Going to create subscription on deDupe zone for subscriptionID: %@ recordType: %@
Request to delete zones %@ for database %@
Result of deleting all zones
Successfully deleted zone IDs%@ DB %@
Failed to delete zone IDs%@ error %@ DB %@
Attempting to infer manatee status by fetching chat zone.
Error obtaining zones %@
******* Error indicates device does not have keys to sync *****
Not a fatal manatee error %@. Proceeding
com.apple.private.IM.IMRecordZoneManagerErrorDomain
IMDCKMessageSyncCKOperationFactory
Created fetch message operation ID %@ operationGroupName %@
Created modify message operation ID %@ operationGroupName %@
MessageDelete
Created deleted message operation ID %@
RecoverableMessageDelete
Created recoverable deleted message operation ID %@
Created fetched archived operation ID %@ using zone id %@
com.apple.Messages.IMDAvailabilityVerificationManager
SKStatusSubscriptionService
StatusKit
AKAvailabilityStatusTypeIdentifier
AvailabilityKit
IMDAvailabilityVerificationManager
Using cached availability verification tokens %@ for message to handleID "%@"
Subscription validation tokens %@ is already cached for handleID: "%@". Not fetching again
Fetching subscription validation token for handle handleID: %@
SKHandle
Caching subscription validation tokens "%@" for handle handleID: %@
v24@?0@"SKSubscriptionValidationTokens"8@"NSError"16
Caching subscription validation token "%@" and no encryption token for handle handleID: %@
This device will validate subscription validation tokens
Received request to validate validation token "%@" from senderHandleID "%@"
Skipping validation, this device should not validate tokens
Not processing validation token "%@" for old message from %@ with date: %@
Received validity response of %ld for validation token "%@" from senderHandleID "%@"
Received a valid validity response, no further action needed.
SKSubscriptionValidationTokens
v24@?0B8B12@"NSError"16
Completed invitation. CanShare: %ld, DidShare: %ld, Error: %@
Subscription invitation received, clearing cache. Subscription: %@
Subscription received status update, no verification manager action required. Subscription: %@
Subscription state changed, clearing cache. Subscription: %@
Subscription service daemon disconnected, clearing cache, but not reconnecting.
<%@: %p; subscriptionValidationToken = "%@", encryptionValidationToken = "%@">
com.apple.distnoted.matching
INVocabulary
Intents
IMDChatVocabularyUpdater
Received request to update vocabulary for added chat, but chat registry is not yet loaded. Deferring update. Added Chat: %@
Updating SiriKit group name vocabulary for added chat: %@
Received request to update vocabulary for deleted chat, but chat registry is not yet loaded. Deferring update. Deleted Chat: %@
Updating group name vocabulary for deleted chat: %@
Received request to update vocabulary for renamed chat, but chat registry is not yet loaded. Deferring update. Renamed Chat: %@
Updating group name vocabulary for renamed chat: %@
Chat registry was reloaded, but merge is not yet completed (e.g. we're still under first data protection). Not updating vocabulary.
Chat registry has finished loading. Updating group name vocabulary due to a deferred update request.
Chat registry has finished loading. No deffered update request.
q24@?0@"IMDChat"8@"IMDChat"16
Updated the SiriKit group names vocabulary with %lu named group chats
Performing initial group name vocabulary update
com.apple.private.alloy.electrictouch
IMDLegacyDTController
Loaded dtService: %@
_senderIDFromToken invalid input
_senderIDFromToken could not split into legitimate components %@
Received incoming DT message service %@ account %@ [data length] %@ fromID %@ context %@
IMDLegacyDTController No data %@ or fromID %@ on DT message. Bailing early
IMDLegacyDTController could not get senderID from fromID:%@
Got senderID %@
Created new DT message %@
Processed message %@ with session  %@
Could not find suitable session to process message %@
wasReportedAsJunk
permanentDeleteChatMetadataArray
chat
groupID
isPermanentDelete
recoverableDeleteDate
message
recoverChatMetadataArray
parts
messageGuid
indexes
indexToRange
deleteSubject
@16@?0@"IDSURI"8
v32@?0@"NSURL"8@"NSArray"16^B24
Updating moment share %@ in response to photo library change for message %@
Updating moment share fetch for message %@ with change %@. Count is now %lu
IMDMomentShareManager
v24@?0@"PHMomentShare"8@"NSError"16
Starting to monitor fetch result: %@ for message: %@ moment share: %@
Moment share %@ is done fetching %lu assets. Generating transfers
Moment share ingestion complete for message %@. moment share UUID %@
Fetching moment share from %@ for message %@ CMM state %@ (%lu)
Fetched moment share %@ for message %@
IMDMomentShareManager - Request for moment share %@ for message %@ has not completed after 5 seconds
Register and accept ShareURL for message: %@ with bundleID: %@ hasPayload: %@ reset asset transfers: %@
No share URL found for %@
Processing CMM shareURL %@ for message %@ with state %@ (%lu)
Moment shareURL %@ for message %@ is already done
Message %@. No need to reset transfers for in-progress ingestion of moment share %@
Clearing and restarting transfers for in-progress message %@, moment share %@
Resetting transfers on message %@ in state %@ and restarting ingestion
Registering moment shareURL %@ for message %@ and beginning ingestion
Ingestion of moment shareURL %@ for message %@ is already underway
Accepting share %@ for message %@
Moment share %@ accepted success %@ error %@ for message %@
Transitioning to accepted state for moment share %@ message %@
TransferMap entry %@ to %@
v32@?0@"IMFileTransfer"8Q16^B24
Message %@: Begin request for resource file URLs for asset %@
v24@?0@"NSURL"8@"NSError"16
Message %@: Not requesting asset for %@, not in transfer map. %lu left for processing
Message %@: Original transfer %@ not found for asset %@
Message %@: Completed request for resource file URLs for asset: %@
Setting syndication identifier to %@ on asset with UUID %@
IMDMomentShareManager - Not setting syndication identifier on asset with UUID %@ due to missing syndication identifier
No photo or video file URL in file URLs: %@, for transfer: %@
IMDMomentShareManagerErrorDomain
Persisting attachment at fileURL: %@ for transfer: %@
Last outstanding asset requested for message %@, setting IMCMMStateCompleted
%lu assets still pending export
Deleting %lu transferGUIDS from CMM message %@, rl transfers left %@
Not generating transfers for message %@ because there are no asset UUIDs moment share with count %@: %@
Starting with RL transfer GUIDs %@
Generated transfer %@ for asset %@
v32@?0@"NSString"8Q16^B24
Setting Message %@ to CMM state Generated
Persisted attachments to message %@
Existing transfer found for %@, setting attribution %@
IMCMMStateNotCMM
IMCMMStateRegistered
IMCMMStateAccepted
IMCMMStateGenerated
IMCMMStateCompleted
invalid CMM state
schema_version
schema
IMDCKMockRecordKeyZone
Dispatching operation %@
handleOperation : %@
Mocking writing up Cloudkit metrics
Mock fetching exit record
-DRR
/var/mobile/Library/SMS/CloudKitMetaData/AttachmentSyncZoneMetaData.db
AssetFetchFailure
com.apple.private.IMDCKAttachmentSyncController
IMDCKAttachmentSyncController
_shouldMarkAllAttachmentsAsNeedingSync %@
ck-max-number-of-attachment-batches
 overriding max number of attachment batches to fetch %@
Marking any unsuccessfully synced attachments as needing sync
Finished Marking any unsuccessfully synced attachments as needing sync
Not marking unsuccessful attachments as needing sync. Last attempt date %@
IMDCKInitialAttachmentSyncController
overriding max number of attachment metadata batches to fetch as this is in demo mode.
ck-max-number-of-attachment-metadata-batches
overriding max number of attachment metadata batches to fetch %@
Initiating attachment syncing with type %ld
syncAttachmentsWithSyncType with type %ld finished
Completed Delete Recovery Resync!
Initial attachment sync succeeded. Proceeding with metadata only sync.
Initial attachment sync failed. skipping metadata only sync.
*** Called into to do initial sync ****
fetchAttachmentDataForTransferGUIDs %@ HQ %@
fetchAttachmentDataForTransfers: we weren't able to get a CKRecordID from a transfer; transfer sync state %@, non-empty salt %@
.UserInit
.Compute
@16@?0@"IMFileTransfer"8
v24@?0@"NSError"8@"NSArray"16
accepting file transfer %@
Transfer %@ - %f complete of %llu bytes
v32@?0@"IMFileTransfer"8f16B20@"NSError"24
accepting file transfers %@
Won't download assets, we are optimizing attachment storage.
We have a nil salt so we can't download assets anyway -- bailing
CloudKit Asset download already in progress, ignoring request
Won't download download assets, we don't meet the resource conditions currently
Starting attachment download batch with %lu items retries %@
Finished download of assets with Error: %@
Found a fatal partial error: %@
Kicking off another asset download batch in %f seconds
Attachment download can't start at this time, so stopping attachment sync
Failed downloading batch of assets, not kicking off another batch. (number of retries: %lu) Error was %@
No assets to downloand
v28@?0B8Q12@"NSArray"20
purgedAttachmentsForChat Request to download purged assets for chats %@ on services %@
Got %lu purged assets to download
No assets that have been purged
**** failed to create IMFileTransfer from IMDAttachmentRecordRef rowid: %lld, marking as synced ***
purgedAttachmentsCountForChat Request to get count of purged assets for chats %@ on services %@
Request to download purged assets for chats %@ on services %@
ck-client-download-purged-attachments-batch-size
Got %@
Done downloading purged attachments for chat %@
Found records to donwload {%@}
**** failed to create IMFileTransfer from IMDAttachmentRecordRef rowid: %lld, marking as failed to sync ***
This is a periodic sync and deviceConditionstoCheck is set to IMCheckNoDeviceConditions, changing it to IMCheckAllDeviceConditions
This is an initial sync but current batch count [%@] >= maxBatchCount [%@] and deviceConditionstoCheck is set to IMCheckNoDeviceConditions, changing it to IMCheckAllDeviceConditions
Setting xpc_activity_t to XPC_ACTIVITY_STATE_DEFER because conditions are no longer met
Error forcing xpc_activity_t to XPC_ACTIVITY_STATE_DEFER
Attachment sync: device conditions allow sync: %@ deviceConditionsToCheck %@
Fixed up guid for transfer old guid: %@ new guid: %@
******** Marking attachment as synced up, as we could not update it's guid %@ (rowid %@)
Writing up a batch of attachments to cloudKit
**** failed to create IMFileTransfer from IMDAttachmentRecordRef rowid: %lld, marking as clean ***
Got %lu dirty results to sync, filtered to %lu
Fixing up attachment GUIDs if needed
Removing attachments that were marked as clean 
Transfer to sync %@ 
Got %lu records to sync, filtered to %lu unique records
*** This is the last batch of attachments to write up. Number of records to write %lu < max batch size %lu
Got error %@ writing attachment records. Stopping further writes
NO error writing attachment records.
Kicking off another batch of attachments to write
** This was the last batch of attachment writes as the number of attachments to write up was less than max batch size Not writing more.
Failed to write any of these %lu dirty attachments, looking for more attachments to write
Failed to write any of these %lu dirty attachments, looks like there's nothing left to do
Device conditions dont allow us to sync
Fetching assets for %@
OptimizeRedownload
v24@?0@"CKRecordID"8d16
v32@?0@"CKRecord"8@"CKRecordID"16@"NSError"24
Starting Delete Recovery Resync
Continuing Delete Recovery Resync
Fetching attachment batch count %@ (max: %@) syncType %@ batch size %@ token %@
FullRestore
PeriodicSync
AttachmentSync
*** Exceeded max number of attachment batches to fetch. Stopping attachment fetch ***
Downloading asset while performing periodic syncing with cloudkit
v16@?0@"CKRecord"8
v32@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24
recordZoneChangeTokensUpdatedBlock should not get called
v24@?0@"CKRecordID"8@"NSString"16
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
Scheduling a fetch operation from attachment zone
Device conditions dont allow sync OR continueFetching %@. Disk Space Available: %@
PeriodicAttachmentSync
BackfillAttachmentSync
v24@?0@"CKRecord"8d16
v24@?0@"CKRecord"8@"NSError"16
Attempting to write %@ records to truth zone 
Error creating attachment zone %@
***** Timed out creating attachment zone *******
ChangeTokenExpired
IMDCKMessageSyncController
Kicking off an attachment write after fetching messages
Not kicking off a write because cachedSalt is not present.
Not writing up messages as sync type does not allow it
recordZoneChangeTokensUpdatedBlock recordZoneID %@ serverChangeToken %@ clientChangeToken %@ moreComing %@ recordZoneError %@
Saving sync token %@
Done fetching attachments in initial fetch
Kicking off another fetch of attachments
No more attachments to pull down. Setting IMCKFinishedFetchingAttachmentsFromCloudKit and kicking off a write
No more attachments to pull down. Should write back changes was no *****
We got back a change token has expired for processing the record zone for attachments going to try and fetch again
We got a %@ error while fetching attachments. %@
user deleted zone
zone not created
Resetting local attachment sync state & last sync date after received user deleted zone error
Attachment zone missing, attempting to create it
****** Failed creating attachment zone
//---*** Error fetching attachments from CloudKit with error: %@ ---- ***//
Attachment per-record completion %@ changeTag %@ error %@
_writeCKRecordsToAttachmentZone uploaded record successfully
_writeCKRecordsToAttachmentZone had a conflict 
Server's GUID was different than we expected; aligning with the server's data
On conflict, the server record's GUID (%@) was different than the record we tried to update with GUID (%@); marking local attachment as synced, to skip it
Conflicting serverRecord was different than the one being updated (server: %@, local: %@)
Record had invalid arguments, we'll try this record again on the next sync
Record had unknown error code. Clearing out CK metadata
We couldn't find the attachment zone for this record so marking the attachment as dirty and clearing the state
_writeCKRecordsToAttachmentZone perRecordCompletionBlock encountered an error.  Will try this record again on next sync. %@
_processFetchRecordChangesCompleted error %@
_processRecordDeletion deleted record %@
_processRecordChanged changed recordID:%@ for attachmentGUID %@
recordZoneChangeTokensUpdatedBlock recordZoneID %@ serverChangeToken %@ clientChangeToken %@
Modify attachment had errors we can deal with, so treating this as a non error case
_processModifyRecordCompletion error: %@
Number of records saved %@ with error %@
Asset fetch complete for %@ error %@
Attachment batch fetch complete with error %@
Attachments to process %@
Finalizing asset download for transfer %@
Asset not found in record, must not be synced to the cloud transfer %@
Can't find transfer in pre-transfer map, for a CKRecord we fetched an asset for, recordID %@. CAN'T UPDATE!
We failed to fetch asset from CloudKit -- failing the transfer: %@
Can't find transfer in pre-transfer map, for a CKRecord we failed to fetch asset for, recordID %@, error %@
Removing attachment at path '%@' for %@ from iCloud backups
Attachment at path '%@' for %@ not found, NOT removing from iCloud backups
Going to fetch the asset for transfer guid at the end of this batch: %@
** No IMFileTransfer found for GUID %@
attachmentZoneChangeToken
attachmentZoneChangeTokenForMetadata
Clearing local chat sync state, flags 0x%x
We fetched a record that we didn't try to fetch!! we wanted (guid %@) for recordName: %@
We successfully fetched and validated that we can delete the transfer with guid: %@
We failed to validate that we can delete transfer with guid: %@
We got to the last object in the array so we will call our completion block with transfers to delete count: %@
v32@?0@"CKRecord"8Q16^B24
Attempting to fetch a nil file transfers from CloudKit for attachment purging
Validating %lu attachment downloads %@
Adding transfer to fetch: %@ with record name: %@
Couldn't retrieve CKRecordID from file transfer %@
We got an error back from CloudKit trying to fetch recordID: %@ with error: %@ transfer: %@
Attachment zone ID is nil
recordID
deleteAfterRow
Removed duplicate recordID %@ from delete syncing
rowid
No GUIDs passed in to delete
Deleting attachment operation deletedRecordIDs %@
@16@?0@"CKRecordID"8
Adding additional deleted record IDs from error
v32@?0@"CKRecordID"8@"CKRecord"16@"NSError"24
Kicking off deleted of recordIDs %@
Cloudkit sync is not enabled. Not deleting attachments
No pending messages to delete/fetch from CloudKit
Attachment %@ was to be deleted, but is still being referenced. Fetching instead.
Got %lu recordIDs queued for delete processing which split sa %lu records to RE-fetch and  %lu to delete
********* Error while deleting attachments %@
Rate limited while deleting
DeleteRecovery
********* Error while fetching non-orphaned deleted attachments %@
Kicking off another batch delete to cloudKit
IMDCKSyncState
Exception while adding syncError. exception:%@, error:%@, simplifying
ProductBuildVersion
Setting object %@ for key %@ in analyticDict.
Setting ProductBuildVersion %@ for key %@ in analyticDict.
Removing keys %@ %@ from analyticDict.
Request to set analytic sync date for object %@ and key %@ shouldOverrideIfExists %@
Errors(%lu total)
NewUser
RestoringUser
chat %@ init %@ %@ full %@ %@ %@
syncAttempts
syncSuccess
syncDuration
syncCounts
pcsStatus
%@, isFeatureEnabled: %@, isSyncing: %@, isEligibleForTruthzone %@, isSyncingEnabled: %@, isRemovedFromBackup: %@, isInExitState: %@, exitDate: %@, isStartingDisabledDisableDevice: %@, lastSyncDate: %@, isSyncingPaused: %@, startingChangingEnabledSetting: %@, isPaused: %@, syncControllerSyncState: %@, syncControllerRecordType: %@, syncType: %@, accountStatus: %@, syncErrors: %@
Account needs repair
IMDMessageHistoryFirstUnlockReplaySyncTask: Begin replaying first unlock database for %ld services
IMDFamilyInviteReponseHandler
inviteUrl
The file transfer does not exist on disk, but the transfer was explicitly ended.
IMDFileTransferCenter
Sending completion notification for explicit download of transfer:%@
Sending completion notification for explicit download of transfer with guid %@. transfer:%@
__kIMDFileTransferCreatedNotification
__kIMDFileTransferAcceptedNotification
__kIMDFileTransferBatchAcceptedNotification
__kIMDFileTransferStoppedNotification
__kIMDFileTransferRemovedNotification
__kIMDFileTransferUpdatedNotification
__kIMDFileTransferHighQualityDownloadInitiatedNotification
__kIMDFileTransferHighQualityDownloadCompletedNotification
__kIMDFileTransferHighQualityDownloadCompletedSuccessKey
__kIMDFileTransferHighQualityDownloadCompletedFileURLKey
__kIMDFileTransferExplicitDownloadCompletedNotification
__kIMDFileTransferExplicitDownloadCompletedErrorKey
__kIMDFileTransferExplicitDownloadCompletedSuccessKey
__kIMDFileTransferExplicitDownloadCompletedFileURLKey
File transfer operation was unsuccessful.
File transfer local file URL retrieval operation was unsuccessful.
See error code and compare against IMFileTransferErrorReason.
Attachments
FileTransferCenter updating guid for transfer in cache map:%@ to %@
Transfer failed. See underlying error. transfer.errorDescription:%@
IMDFileTransfer posting recoverable error state for IMFileTransfer
IMDFileTransfer reset file transfer to waiting state
Transfer was reset. See underlying error. transfer.errorDescription:%@
Marking transfer %@ as failing preview generation
Updating transfer %@ with size %@
New attribution info is %@
Attachments - Failed to update transfer preview size for %@, transfer not found
IMDFileTransfer posting recoverable error state (%zd) for IMFileTransfer %@
Failed to consume sandbox token, %@ token:%@
file-read-data
Denying transfer, (check %d, errno %d) client with audit token:%u not allowed to access request path:%@
Failed to release sandbox token, %@ token:%@
_handleFileTransfer accepted %@ - %@
ForceAllTransfersExpired
Invalid transfer state. transferState:%@ cloudKitSyncState:%@ existsAtLocalPath:%@
_handleFileTransfers accepted %@ - %@
Invalid transfer state. transferState: %@ cloudKitSyncState: %@ existsAtLocalPath: %@
IMFileTransferCenter
stopping transfer to guid
File transfer stopped locally.
File transfer removed.
MessageService Failed writing attachment to disk on incoming:%@
%s Requested to size with zero transferGUIDs
-[IMDFileTransferCenter sizePreviewsForTransferGUIDs:]
overall
Attempting to generate size for guid %@
Generated size for guid %@ size %f-%f error %@
v36@?0B8{CGSize=dd}12@"NSError"28
IMDFileTransferCenter - Timed out sizing transfer with guid %@, failing!
%s Skipping sizing guid %@. Needs sizing %@ hasLocalURL %@
Sizing complete, timing %@
Found message GUId %@ from IMFileTransferGUID %@ so that we can upadte the transfer. Record hasAsset %@
Taking asset from CKRecord for %@
Setting local record to upload asset for %@
Keeping local asset and sync state for %@
Fetched from CK. Updating existing transfer %@ for message GUID %@
IMDFileTransferCenter - Update from CKRecord found no existing attachment for %@, but was on the write path
Fetched from CK. Created new transfer %@ from CKRecord. Associating with message guid %@ hasAsset: %@
Do we want to download the transfer later? downloadAsset: %@, shouldDownloadAssetForTransfer: %@, hasAsset: %@
Going to auto downloading asset at the end of batch fetch for transfer: %@ addedTransfer %@ for messageItem: %@ groupPhotoUpdate: %@
Storing attachment %@ with no associate-able message %@
Nil CKRecord
markTransferAsNotSyncedSuccessfullyUsingCKRecord transferGUID %@
Could not find transferGUID %@ to mark as not synced successfully
markTransferAsNotSyncSuccessfullyDownloadedFromCloud transfer %@
resetSyncStateForRecord transfer %@ toNewState:%ld
Tried to clear the sync state for a transfer we don't have on disk transfer: %@ record: %@
{CGSize=dd}
IMDCKAttachmentSyncCKOperationFactory
Created fetch attachment operation  ID %@ fetch operation dictionary %@
Created modify attachment operation ID %@ operationGroupName %@
AttachmentDelete
Created deleted attachment operation ID %@
ExposureNotification
Activated ENManager: %@
en-push-allow-domains
en.express
enexpress.app
en-push-disabled
v40@?0@"NSURL"8{_NSRange=QQ}16^B32
ENTextMessage
Error: %@
Verified success
Running on an old build - unable to run through ENManager
com.apple.private.alloy.messagesquickswitch
MessagesQSwitch
tempSMS.db
tempDowngradedSMS.db
QuickSwitch
Instantiated IMDQuickSwitchController
Sending dummy request
Current db version is %ld
Recents
compressedSMSRecents.zip
compressedSMSDB.zip
QuickSwitch Could not determine file size as path was nil
QuickSwitch Could not determine file size at path %@ with error %@
Size of file at path %@ is %lu
QuickSwitch We got a nil path to truncate to.
QuickSwitch Could not delete DB at path %@
QuickSwitchTruncating
Messages
Started truncating quick switch DB
QuickSwitch Could not trim DB with error %@ 
Finished truncating quick switch DB
QuickSwitch we were given a nil path to delete
QuickSwitch Could not delete file at path %@ with error domain '%@' code: %ld
Deleted file at path %@ 
Cleaning up temporary files
QuickSwitch Could not delete DB at path %@ %@
QuickSwitch. We do not expect file to already exist. Clearing it.
QuickSwitch Could not delete zipped file DB at path %@ with error %@
QuickSwitchZipping
Finished zipping quick switch DB
QuickSwitch Could not create zipped DB
v16@?0@"IMFileCopier"8
Started zipping quick switch DB
QuickSwitch. We do not expect file to already exist.
Finished unzipping quick switch DB
QuickSwitch Could not create unzipped DB
Started unzipping quick switch DB
Initiating quick switch
QuickSwitch Could not send initiate QuickSwitch message. Bailing!
Could not send initiate QuickSwitch message. Bailing!
Could not send QuickSwitch Recents request. Bailing!
We tried to _handleQuickSwitchInitiateRequest a non watch device for QuickSwitch. This is really bad!
Finished with success %@
dbVersionResponse %@
Downgrade: found a database that can be downgraded to version: %ld
Trying to QuickSwitch to incompatible gizmo. Bailing quick switch. localDBVersion %ld gizmoDBVersion %ld
QuickSwitch Truncated DB did not succeed at path %@, Really bad! 
Truncation succeeded! :-)
Attempting downgrade from %ld to %ld...
Error Trying to QuickSwitch watch to version %ld from %ld. Downgrade failed with error: %@
Downgraded from %ld to %ld ok! :-D
QuickSwitch failed to rename downgraded db to tempdb with error: %@
renamed %@ to %@ in preperation for compression - this means the downgrade completed ok. :-D
We could not create zip file for QuickSwitch
Sent zipped file to watch
Database QuickSwitch: Could not send file over to gizmo. Bailing
Copying from %@ to %@
QuickSwitch could not copy path to temp directory with error %@. Bailing!!
QuickSwitch we could not create zip file
QuickSwitch could not send file over to gizmo. Bailing
_handleQuickSwitchCompleted %@
QuickSwitch got _handleIncomingDB on a non gizmo. Really bad!!
QuickSwitch got _handleIncomingRecents on a non gizmo. Really bad!!
Sending file at URL %@ to local account (identifier %@)  (error %@)  (metadata %@) success: %@
Sending message to local account (identifier %@)  (error %@)  (request %@) success: %@
service %@, account %@, incomingData %@ fromID %@ context %@
Not an IDSDevice: fromID %@. Bailing
Got request %@
Got IMDQuickSwitchControllerCommandInitiateQuickSwitch
Got IMDQuickSwitchControllerCommandResponeDBVersion
Got IMDQuickSwitchControllerCommandRequestRecents
Got IMDQuickSwitchControllerCommandQuickSwitchCompleted
QuickSwitch got unknown request over quick switch service %ld
service %@, account %@, resourceURL %@ metadata %@ fromID %@ context %@
Got IMDQuickSwitchControllerCommandIncomingDB at url %@
Got IMDQuickSwitchControllerCommandIncomingRecents at url %@
QuickSwitch got unknown resource ULR callback over quick switch service %ld
message sent with identifier %@ 
Checking if we are in proxy mode
Not in proxy mode. Found active iMessage account signed into email %@ 
In proxy mode. Did not find any active iMessage account logged in using email.
Found default paired device %@
QuickSwitch Did not find default paired device
QuickSwitch _notifyPSYWithResult not available on this platform
QuickSwitch _notifyPSYDataSent not available on this platform
SWCollaborationNoticeTransmissionMessage
SharedWithYouCore
com.apple.private.alloy.gelato
Loaded notice dispatch service: %@
IMDCollaborationNoticeDispatcher
-[IMDCollaborationNoticeDispatcher sendNotice:toHandles:]
%s: Bailing due to rate limiting for notice: %@
Sending notice (command: %@) %@ to %@, message: %@
%s Successfully sent Collaboration Notice (guid: %@) to handles: %@
%s Received request to send Collaboration Notice, but the feature is not enabled. Dropping message.
%s: Handling request to reflect notice dismissal for guids: %@
-[IMDCollaborationNoticeDispatcher reflectDismissalForNoticeGUIDs:]
%s Dropping request to reflect notice dismissal because notices are not enabled, guids: %@
%s: Handling incoming Collaboration Notice from: %@
-[IMDCollaborationNoticeDispatcher handleIncomingNoticeProtobuf:service:account:fromID:context:]
%s Received notice from %@ but unable to process notice, incompatible version of BlastDoor. Dropping notice.
%s Received notice from %@ but notices are not enabled. Dropping notice.
%s fromID: %@, message: %@
-[IMDCollaborationNoticeDispatcher service:account:incomingMessage:fromID:context:]
%s Received incomingMessage from %@ but unable to process Collaboration Notice Action, incompatible version of BlastDoor. Dropping notice.
%s Received incomingMessage from %@ but notices are not enabled. Dropping notice.
notice-fanout-threshold
__kCKRecordIMMessageIncompatibleDeleteNotification
time
sender
chatID
SubType
SubTypeMsg
msgType
subject
body
pdata
esid
tRead
tDelivered
tPlayed
flags
msgSummaryInfo
msgProto
msgProto2
msgProto3
dcId
rGuid
eCode
ROWID
TOID
TOPart
MessageEncryptedV3
messageUpdateV1
***Error _populateCKRecordWithIMMessageItemFields called on object %@ %@
***Error _populateCKRecordWithIMMessageItemFields (reply data) called on object %@ %@
***Error compressedProtobufDataForGroupTitleChangeItem called on object %@ %@
***Error _populateCKRecordWithIMGroupTitleChangeItemFields called on object %@ %@
***Error compressedProtobufDataForParticipantChangeItem called on object %@ %@
***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@
***Error compressedProtobufDataForLocationShareStatusChangeItem called on object %@ %@
***Error compressedProtobufDataForGroupActionItem called on object %@ %@
***Error compressedProtobufDataForMessageActionItem called on object %@ %@
-UpT1
-UpT2
MSGID
TPart
Failed to unarchive ckrecord. Error: %@
IMItem+CKRecord
Cannot create record from recordID because it is nil %@
Cannot sync item because it is an incompatible action type %lld
***** Error Tried to generate a CKRecord from class %@ ******
****** initiWithCKRecord called with unsupported message type %@ *****
We don't have a valid guid for the message record we want to reset sync state: %@
IMItem_CKRecord
Phone number destination callerID [%@] is unselected on phone but phone does not have SIM inserted and caller ID is a phone number so will store message [%@] anyways
We have an iMessage account that is not backed by an ids account ---- please file a radar
v32@?0@"IMDAccount"8Q16^B24
Skipping shouldStore check, destinationCallerID: %@
We should not store the message [%@] because our destination callerID [%@] has been unselected from list of available aliases
CacheDelete
Is already updating file sizes, returning
attachment-filesize-update-not-allowed
Server bag does not allow attachment filesize updating, retunring
Calling IMDAttachmentUpdateAttachmentFileSizeWithRowIDGreaterThanWatermark with rowID %@ iteration %@
No more attachment fileSizes to fix up, got nil back from query
filename
rowID
Got an empty set of attachments back - there are still more so increasing watermark by 20
Previous batch of attachment filesize updates completed, setting new watermark to be %@
Stopping filesize update. Set state attachment filesizes updated activity result %d
Registering with cache delete upon launch
Setting up cache delete callbacks cache delete enabled %@
com.apple.imagent.cache-delete
com.apple.messages-cache-delete
~/Library/Messages
Purge event: %@
rescan
historyDone
Purge notification - All done
path
v16@?0r^{__CFSet=}8
CacheDelete -- purgeable block called with urgency: %d info: %@ isMainThread: %@
purgeable callback dictionary: %@
r^{__CFDictionary=}20@?0i8r^{__CFDictionary=}12
CacheDelete -- purge block called with urgency: %d info: %@ isMainThread: %@
Purge callback with callback dictionary: %@
CacheDelete -- periodic block called with info: %@ and urgency: %d isMainThread: %@
AttachmentWatermarkResetDone50600874
CACHE_DELETE_GUIDANCE
CACHE_DELETE_GUIDANCE_DO_NOT_EXPAND_CACHE
Cache delete  guidance %@ requested size %@
CACHE_DELETE_VOLUME
Purgeable callback -- purgeableSpace: %lld purgeableNumber: %@
CACHE_DELETE_AMOUNT
Purge callback -- Deleted bytes: %lld, volume: %@ is running on main thread: %@
nothingToPurgeDictionary -- volume: %@ purgeableSpace: %@
_purgeableSpaceGivenUrgency -- Bytes available to purge: %lld result: %lld urgency: %d
We somehow got back a negative number of bytes to delete so we don't want to delete anything
Tried to obtain purgeable attachments without proper default ---- please set them: defaults write com.apple.madrid EnableCacheDelete -bool YES
Purgeable space %@
Tried to purge attachments without proper default ---- please set them: defaults write com.apple.madrid PurgeWithCacheDelete -bool YES
PurgeWithCacheDelete default not enabled
purgeAttachments with bytes: %lld
We got back %lu records from persistence to delete which resulted in %lu file transfers to delete
No attachments to delete
 We didn't get back any attachments to purge
We failed to create an IMFileTransfer for IMDAttachmentRecordRef with identifier: %lld
Tried to call _deleteFilesOnDiskAndUpdateTransfers without proper default ---- please set them: defaults write com.apple.madrid EnableCacheDelete -bool YES
We are removing the file at path: %@ for transfer: %@
We attempted to delete a path that was not safe to delete for guid: %@ path: %@
There was an error trying to remove the file: %@
We successfully removed the file - setting the transfer state to waiting for accept
The transfer we want to remove does not exist at its local path -- transfer (%@) local path (%@)
existsAtLocalPath
localPath
transferState
success
Created %lu dictionarie(s) for transfer info of deleted attachment(s)
Did NOT metric fetching synced attachments from CloudKit. CK Enabled %@ , device conditions allow sync %@
We are going to try and fetch attachments we would want to delete from local disk with bytes to free up: %lld
We got a fileTransfer that doesn't exist that we think we can delete for CacheDelete: %@
Going to try and fetch from sync controller with %ld batches to fetch
We disconnected from power or wifi in between batches, so cutting the batches short
_fetchTransfers with totalTransferCount: %@ index of transfers: %@ number of batches to fetch: %@
Completed fetching batch with starting index: %@ index of next batch: %@ for number of batches: %@
/*-------Fetched all transfers we wanted to validate------*/
com.apple.private.IMDAvailabilityAutoReplier
CARAutomaticDNDStatus
CarKit
Chat is not eligible for availability auto replies or dnd breakthrough
Message sender not eligible for availability reply or dnd breakthrough
Message items should break through do not disturb, sending did notify recipient receipt, and triggering urgent notifications
Message items did not break through do not disturb, attempting to send unavailability receipt or SMS message
No message items support availability reply, ending processing
DNDModeConfigurationService
DoNotDisturb
com.apple.messages
IMDAvailabilityAutoReplier
UserIsUnavailable
DNDMutableContactHandle
Not processing possible availability reply for non 1-1 chat
Not processing possible availability reply for business chat
Not processing possible availability reply for chat with more than one participant
Not processing possible availability reply for sender with zero length handle
Not processing possible availability reply for sender who is not a contact
Not processing possible availability reply, DND framework says we should appear available to this user
Message item does not support availability reply
Reducing messages to process for availability reply from %ld messages to %ld messages.
Not sending delivered quietely receipts in SMS chat
Requesting delivered quietely receipt be sent to message guids: %@
Not sending text auto reply to chat: %@
Sending text auto reply to chat: %@
Device does not support iMessage auto reply becuase it is not an iPhone
Device does not support SMS auto reply becuase it does not support CoreTelephony subscriptions
SMS auto reply not supported becuase device is not an iPhone
SMS auto reply not supported becuase local device does not have a SIM matching the last addressed SIM ID
DNDStateService
Driving focus is active
Driving focus is not active, current focus semantic type is %ld
DND mode is nil
DND active mode configuraiton is nil
Determined that we have not recently sent an availability auto reply. Message time %@ is older than recency window %@
Determined that we have not recently sent an availability auto reply. We haven't sent an auto reply in the last %ld messages.
Found a recent auto reply message from me: %@
Message %@ was not an auto reply from me. isFromMe: %ld, isAutoReply: %ld
Item is not a message. Item class: %@
v32@?0@"IMItem"8Q16^B24
Message item does not support breakthrough notification
Reducing messages to process for breakthrough notifications from %ld messages to %ld messages.
Not processing possible dnd breakthrough for message from me
Not processing possible dnd breakthrough for empty message
Not processing possible dnd breakthrough for typing message
Not processing possible dnd breakthrough for locating message
Not processing possible dnd breakthrough for auto reply message
Not processing possible dnd breakthrough for unfinished message
Not processing possible dnd breakthrough for system message
Not processing possible availability reply for message from me
Not processing possible availability reply for emote message
Not processing possible availability reply for empty message
Not processing possible availability reply for typing message
Not processing possible availability reply for locating message
Not processing possible availability reply for auto reply message
Not processing possible availability reply for unfinished message
Not processing possible availability reply for system message
Not processing possible availability reply for message that is a legacy urgent trigger
Message is flagged to notify recipient, should ignore do not disturb
Message has a legacy urgent trigger text, should ignore do not disturb
Message is SOS, should ignore do not disturb
Message received in chat that is in an urgent message grace period, should ignore do not disturb
Messages are not urgent, will not break though do not disturb
Determining if we should alert for this message by checking if we are in an urgent message grace period. Looking for received urgent messages in the last %ld minutes.
Determined that we are not in urgent message grace period. Message time %@ grace period start window %@
Found a recent message that broke through our dnd within the grace period window. Grace period is active.
Found a recent message that contains the urgent trigger phrase within the grace period window. Grace period is active.
Found a reply sent by me to the chat within the grace period window, extending grace period to %ld minutes.
Message %@ did not impact grace period. isFromMe: %ld, didNotify: %ld
Not checking grace period for non 1-1 chat
Chat is missing identifier or service: %@
Urgent
DaemonCoreLocalizable
Message has a legacy urgent trigger match
Sending %ld auto-reply messages to chat: %@
No sending auto-reply because no message text was available to send
Device is not in driving focus, not sending text auto reply
This device does not support text auto reply
We have already sent a recent text auto reply, not auto-replying again.
Not sending auto reply becuase the user auto reply audience preference does not match this chat. Audience %ld=%@
Auto reply audience preference matches this chat. Audience %ld=%@
Nobody
Contacts
Favorites
Auto-reply audience is %ld=%@
Is using customized auto reply message: %ld
Audience %ld=%@ allows replies: %ld
Participant %@ is not in contacts
Participant %@ is a favorite?: %ld
Participant %@ is not a contact, and cannot be a favorite
chatID %@ is recent?: %i
Message is SOS
AllowSOSViaNonSMS
maps.apple.com
^(http)s?(\:\/\/maps\.apple\.com\/\?ll\=)\-?\d+\.\d+,\-?\d+\.\d+\&q\=[^\&]+$
Message has an SOS URL match
recordKeyZone
chatEncryptedv2
attachment
IMDCKMockDatabase
Adding operation %@
Did not find mock database for operation %@ zoneID %@
CKBBContextKeyChatGUIDs
CKBBContextKeyMessageGUID
IMDNotificationResponseUtilities
couldn't find chat for %@ to mark message as read
receive notification response for bundleID [%@]
ChatSync
IMDCKChatSyncCKOperationFactory
fetchChatZoneChangesCKOperationUsingToken was passed in a nil zone
Created fetch chat operation ID %@
writeChatsOperationUsingRecordsToSave was passed in a nil records array
Created modify chat operation ID %@
Created deleted chat operation ID %@
IMCKChatSyncCKOperationFactory
IMDService
Registering bundle: %@
   => Internal service with name: %@
mcSV
mcAK
mcEK
mcNFK
mcIFK
pnHK
nRID
nBWV
pRID
IMDMeCardUpdatedNotification
Nickname feature is turned off, don't load nickname info into memory
nickNameKeyStore.db
nicknamekeystore
handledNicknamesKeyStore.db
handledNicknamesStore
pendingNicknamesKeyStore.db
pendingNicknameUpdatesStore
handleSharingPreferences.db
handleSharingPreferences
Evaluating account state for feature eligibility {refreshediCloudAndAppleIDMatch: %@ currentiCloudAndAppleIDMatch: %@}
Received aliases did change hasMultiplePhoneNumbers %@
nickname-reupload-profile-version
UseOldProfilesContainer
We successfully reuploaded our local nickname %@ %@
We were not successful in reuploading our nickname to the new container
Told this device just signed into iMessage, we need to ask our peers for nickname info requestedInfoBefore %@ retry count %@
Successfully sent request to peers for nickname info
We did not have the IDSDevices to send the request to, going to try again in %@
We do not have enough retries to get nickname info, not trying again
Told this device signed out of iMessage, we need to reset the bit that we've asked for the nickname feature info
Nickname sharing is not enabled or trying to verify on a group chat -- bailing verifying record ids
Going to verify if truncated record ID %@ is equivalent to our personal record id %@ current truncated id %@ recordIDS are equals %@
Truncated record id does not match, marking this chat as dirty so we send a nickname on the next message send
Beginning upload of nickname profile to CloudKit
Nickname is still uploading after time out %@ setting upload to done
Nickname upload has completed -- sending out of band nickname updates
We couldn't find a chat to send nickname info to for guid %@
Client request to store new personal nickname %@ path%@
Trying to set a personal nickname when the feature is off
Uploading Personal Nickname
Successfully Uploaded Personal Nickname
Unable to store in Public Database, aborting fanout to other devices
Failed Uploading Personal Nickname
Error: %@
 Fallback nickname: %@
v44@?0B8@"IMNickname"12@"NSString"20@"NSData"28@"NSError"36
Loaded pending nickname from disk: %@ and uploading
Found Pending Nickname Upload
No pending nickname found.
Resetting handle allow/denylist
Going to retreive the current nickname from CloudKit
v24@?0@"IMNickname"8@"NSError"16
Nickname feature is disabled, not fetching current nickname
Failed to fetch public nickname {error: %@, recordName: %@}
Failed Personal Nickname Fetch
recordID: %@
decryptionKey: %@
error: %@
Got personal nickname from IMTransferAgent: %@
Fetched Personal Nickname
Nickname Download
Public Nickname fetched or failed in time: %f
Name+Photo sharing feature is disabled, not fetching CloudKit record
We are missing parameters to fetch the CloudKit record (recordID: %@) (URI: %@) (decryptionKey: %@)
Already have this one, no need to grab it again from CloudKit with recordID %@
Retreiving nickname from IMTransferAgent with recordID %@
Fetched Nickname for %@
Nicknames - Failed getting nickname for record ID %@ from transfer agent with error %@
Failed Nickname Fetch for %@
recordID: %@
error:%@
The nickname feature is disabled, we shouldn't make any requests to CloudKit
Client request to delete personal nickname with recordID
Transfer agent succeeded in deleting public nickname from CloudKit
Did not succeed in deleting public nickname from CloudKit!
The nickname feature is disabled, not taking updates coming from madrid
audienceValue %@ enabledValue %@ nameForked %@ imageForked %@
Going to update Me Card preferences %@
Sharing Preferences Changed
Not enabled, deleting local recordID and cache
Transporting sharingEnabled %@
Transporting meCardSharingAudience %@ nicknameVersion %@ decryptionKey %@ nickNameID %@ nameForked %@ imageForked %@
Marking nickname as handled %@
updateHandledNicknamesIfneeded incomingPendingNicknameVersion %@ currentPendingNicknameUpdatesVersion %@
Our current pending handles %@ our incoming pending handles %@
We need to mark the following handles as having been updated %@
Peer Device Updated Handled Nicknames
Alert header: %@
Alert message: %@
Finished personal nickname fetch with nickname: %@, updating key store
Failed fetching new personal nickname: %@
Received newer version number (%lu, old: %lu), updating the deny/allow list store
Deny list added: %@
Deny list removed: %@
Allow list added: %@
Allow list removed: %@
Deny list
 and 
Allow list
 Updated from Peer Device
handleBlacklist
handleWhitelist
Broadcasting changes to the deny and allow list
Received older version number (%lu, old: %lu), dropping deny/allow list update
Nickname feature is disabled, ignoring updates from peer device
Nickname Updates from Peer Device
We got a request to send nickname info to a specific device %@
Nicknames not enabled, deleting the one we know about.
No nickname stored locally. Not querying CK.
Nicknames enabled, and we already have one in cloudkit. Broadcasting to my other devices.
We should send personal nickname info to all of our own devices
Nickname feature is disabled, not sending updates to peers
Sending nickname info to destinations %@
We could not find a service session for imessage to send the nickname info or no contents in message dictionary %@ %@
We are still uploading the nickname to iCloud, queue to send info out of band for chat %@
Nickname feature is disabled, not sending personal nickname to chat
Sending nickname info to chat %@
We didn't have a session to send the nickname info over
Writing %lu nicknames to allow list
We have an iMessage chat for guid so sending nickname info %@
Writing %lu nicknames to deny list
Nicknames - We had a problem writing a handle list update with key %@ -  %@
Nicknames - We had a problem archiving handle list for key %@ error %@
We could not replace incoming nickname in our handled map, add to pending
We replaced userNickname in our handled map w/ an existing handled record
We got a pending nickname to handle %@
We don't have a pending nickname to clear for handle ID %@
We got a malicious pending nickname to handle %@
We don't have a malicious pending nickname to clear for handle ID %@
Tried to add a nil nickname to our pending map
New pending nickname has no image %@
New pending nickname name hasn't changed, silently updating record ID for previously handled nickname %@
Adding new nickname to our pending map %@
add nickname to pending updates %@ %@
Existing nickname %@ and new nickname %@ are different %@
Marking nickname %@ as handled
Trying to update a nil nickname
Replacing handled nickname for handle id %@ from record id %@ to new record id %@
For nickname %@, deleting old avatar image at path during mark as updated %@. Error %@
writing nickname %@ to kvstore %@
We had a problem writing the nickname to the pendingNicknameUpdatesKVStore %@
We had a problem archiving the nickname object %@
We got an error trying to remove %@ from the pending map %@
We got an error trying to remove %@ from the handled map %@
Got called to clean up nickname for id %@
Removing %@ from allow list 
Removing %@ from deny list 
Removing %@ from pending nickname updates
Removing %@ from handled nickname updates
Sending updated handled and pending nicknames to peers and client
Nicknames
Deleting data from handled nicknames KVStore
Deleting data from pending nicknames KVStore
Exiting scrutiny mode
Nickname feature is disabled, not loading nickname info from disk
Device is under first unlock so we need to put updates into a temporary map until we leave first unlock
We are not under first unlock so we are able to load all data
IMDNicknameController is already in scrutiny mode before attempting to load data from disk. Will delete existing data.
Not going to load personal nickname, feature is disabled
Limit to load of nicknames %@
Setting the IMDNicknameController scrutiny flag
Clearing the IMDNicknameController scrutiny flag
We did not have success loading handled nicknames %@ or updates %@
created handled nickname map %@
created pending nickname map %@
Nicknames - We got an error loading the handle allow list data store %@
Nicknames - We got an error loading the handle deny list data store %@
Nicknames - Failed to unarchive allow list %@
No allow list data to load
Nicknames - Failed to unarchive deny list %@
No deny list data to load
Successfully loaded %lu allow list handles %lu deny list handles
We got an error loading the nicknames data store %@
We had an error %@ unarchiving data %@
Converting all nickname contents to Class C!
Failed making file class C: %@ with error %@
Storing personal nickname %@ and recordID %@ on disk
Writing nickname data of size %lu, recordID data of size %lu, and encryption key of size %lu to disk
NicknameRecordID
NicknameRecordKey
NicknameDataKey
Error writing data to KVStore %@ %@
Error writing personal nickname data to KVStore %@
Personal nickname data is nil, not writing to disk
Storing pending nickname %@ while waiting on upload
NicknamePendingKey
Error writing data to kvStore %@
Error reading pendingNickname %@
Error unarchiving storedPersonalNickname %@
storedPersonalNickname is nil
Error deleting data from kvStore %@
Error deleting data from KVStore %@
Error reading nickNameDecryptionKey %@
Error reading storedPersonalNickname %@
Error Loading Personal Nickname From Disk
Stored personal nickname doesn't exist
No Personal Nickname On Disk
Loaded Personal Nickname From Disk
Nickname loaded from disk did not have a recordID. Attempting to load recordID from disk.
Error reading nickname for pending upload %@
Error unarching pending nickname upload %@
Error deleting nickname avatar from path: %@
Passed in empty recordID
Did not find nickname for recordID %@
Found existing nickname
No nickname for handle %@
I'm being asked for handleURI %@
System did leave first unlock, loading maps into memory
FakeID
First
Last
IMDMessageSortOrderAssigner
%s assigning %@ sortID %@
-[IMDMessageSortOrderAssigner compareMessageToOtherMessagesWithSameReplyToGUIDAndAssignSortID:existingMessagesWithSameReplyToGUID:]
-[IMDMessageSortOrderAssigner assignSortIDToIncomingMessageWithNoExistingMessagesWithSameReplyToGUID:onChat:]
IMFocusStateManager
Dispatching with 15s delay to register for NSUserDefaults KVO.
15s delay completed
Performing initial database housekeeping
Bailing out of initial housekeeping, currently under unit testing
Daemon
Registering for the DB reconnect notification.
Got a mandatory DB reconnect notification, I will now exit.
  => Failing all unsent, unfailed messages
  => Database was full, waiting to post
  => Posting database full
Focus state changed, rebuilding unread message count
Resetting _cachedUnreadMessageCount because _updateModificationDate
Updating cache for message guid: %@ calculateUnreadCount %@
  **** Updating this chat!
Storing Aux image transfer %@
_storeAttachmentsForMessage did not find Aux video transfer %@
Updating transfer: %@
Posting resulting transfer to clients; %@
Not storing: %@
Stored item to database: %@:%@
SyndicationActions
Updated syndication ranges with SyndicationAction %@. newRange: %@
Did NOT update IMMessageItem's syndication ranges for SyndicationAction %@
Message not found for syndication action for guid: %@
Updated syndication ranges for message item with guid %@. newRange: %@
Did not updated syndication ranges for message item with guid %@. newRange: %@
Updating syndication ranges for message item with guid %@. newRange: %@
Database
Stored message: %@
Updated from %@->%@  on service: %@
IMDMessageRecordCopyMessagesForAssociatedGUID resulted in a non-associated message item: %@
************* Please file a radar!!!!!!!!!!! *******************************
A message returned by IMDMessageRecordCopyMessagesForAssociatedGUID is associated to %@ instead of the requested GUID %@.
GUID we got from IMDMessageRecordCopyMessagesForGUIDs wasn't one of the guids we requested. IMItem we got back was: %@, IMDMessageRecordRef guid we got was: %@, requested guids was: %@
history query
Requesting history with guid: %@ handles: %@ services: %@ limit: %llu thread identifier: %@ only messages: %@
generate chat items
IMTiming
history query timing: %@
_messagesWithRoomNames: %@ onServices %@ limit %d recordStoreRecords: %@
paged history query
Requesting history with guid: %@ handles: %@ services: %@ number before: %llu number after: %llu thread identifier: %@
_limitedNumberOfMessagesWithHandles: %@ services: %@ messageGUID: %@ numberOfMessagesBefore: %d, numberOfMessagesAfter: %d record count: %d
paged history query timing: %@
_unreadMessagesWithHandles: %@ onServices %@ limit %d recordStoreRecords: %@
_unreadMessagesWithRoomNames: %@ onServices %@ limit %d fallbackGUID %@ recordStoreRecords: %@
Ensure transfers(count=%lu) with GUIDs registered: %@ for message: %@
Existing transfer: %lu/%lu %@
Found saved transfer from DB: %@
New transfer: %@
Not registering %lu/%lu transfers, too many for one message
Should load attachments for associated messages %@
Found messages with associated guids: %@  (%@)
Found messages with guids: %@  (%@)
Have stored message for guid (%@): %@
Fetched item from database for guid (%@): %@
Stored message for guid (%@): %@
Found existing message: %@ similar to: %@   (Skip Services: %@   Skip GUIDs: %@   Within Time Interval: %f)
No existing message similar to: %@   (Skip Services: %@   Skip GUIDs: %@   Within Time Interval: %f)
Stored message for replace ID (%d): %@
Found %d messages with handles: %@ on services: %@  limit: %d
Found %d messages with room names: %@ on services: %@  limit: %d
messagesWithHandlesBeforeAndAfterGUID found %d messages for number of ids: %d on number of services: %d numberOfMessagesBefore: %d numberOfMessagesAfter: %d
Found last message: %@ with handles: %@ on services: %@
Found %d messages with handle: %@ on service: %@  limit: %d
Found last message: %@ with room names: %@ on services: %@
v16@?0@"IMDMessageRecord"8
%K = %lld
Found %d filenames with handles: %@ on services: %@
Found %d filenames with room names: %@ on services: %@ 
Found %d message action items for original message guid: %@
MessageStore
Adding message GUID to readReceiptsForMissingMessage cache: %@ (size: %lu)
Found chat guids: %@ for message guid: %@
Couldn't find existing chat with guid: %@ in IMDChatRegistry for messageGUID: %@
   Found Chats: %@
Found chat guids: %@ for message identifier: %lld
Couldn't find existing chat with guid: %@ in IMDChatRegistry for messageIdentifier: %lld
PNIsValidPhoneNumberForCountry
CorePhoneNumbers
Cleaning up symbols from unformatted phone number %@ based on phoneNumberIsValid %d and phoneNumberIsShortCode %d
Canonicalized handle (%@) and unformatted handle (%@) were not equal - TU canonical: (%@) TU unformatted: (%@)
Deleted %d messages with guids: %@ in chat: %@
Deleted %d messages with guids: %@
Deleting batch %d of messages for chatIdentifiers %@ onServices %@. %d messages will be deleted.
deleteMessageswithChatIdentifiers: %@ onServices: %@
Found %d messages to delete
Deleted %d messages with replace ID: %d from handle: %@ on service: %@
Attempted to mark a message as unread that wasn't the last message: %@
Marked %@ as unread
Marked %d messages as read with handles: %@ on service: %@  from me: %@
Marked %d messages as read with chat guid: %@ from me: %@
Returning _cachedUnreadMessageCount %@
Computed _cachedUnreadMessageCount %@
Determined unread badge count is %ld for active focus, totalUnreadCount: %ld
Attachment %@ orphaned: not in message(nil:%@), bundle %@
Attachment %@ orphaned: not in group action type %lu
Attachment %@ orphaned: not in item type %lu
Attachment %@ orphaned: mssage %@ not found
suppress DB update timer fired
setSuppressDatabaseUpdates called with suppressUpdates %d 
Scheduling a suppress DB invalidation timer
Going to retract user notifications for read messages
Posting urgent notifications for messages
Updating posted notifications for messages: %@
Going to post user notifications
Rebuilding lastFailedMessageDateChanged with new value: %lld 
Suppressed: Rebuilding lastFailedMessageDateChanged with new value: %lld 
Rebuilding/Broadcasting unreadCountChanged with new value: %lld 
Suppressed: Rebuilding/Broadcasting unreadCountChanged with new value: %lld 
Broadcasting unreadCountChanged with new value: %lld 
Broadcasting lastFailedMessageDateChanged with new value: %lld 
Suppressed: Broadcasting unreadCountChanged with new value: %lld 
Suppressed: Broadcasting lastFailedMessageDateChanged with new value: %lld 
/Library/Caches/com.apple.xbs/Sources/MessagesCore_Sim/IMCore/IMDaemonCore/IMDMessageStore.m
-[IMDMessageStore replaceMessageAcknowledgmentsWithNewMessageAcknowledgment:associatedMessageGUID:sender:]
Unexpected nil '%@' in %s at %s:%d. %@
newGUID
ASSERTION FAILED: %@
associatedMessageGUID
Deleting previous acknowledgments failed with error: %@
v40@?0@"NSString"8{_NSRange=QQ}16^B32
Applying edits to the content of message: %@
Edited message does not contain file transfer guid: %@
Message already had originalTextRangesByPartIndex, messages is being edited for a second (or more) time. Not overriding original values.
Message no longer contains any parts, all parts have been retracted, marking message as read
Message is fully retracted, deleting payload data
We retracted the payload data on a message that had no body and was a payload only. Inserting a retraction stamp at index 0.
p:%ld/%@
Found %ld associated message items for retracted message part %ld in edited message %@
Associated message item %@ refers to messagePartGUID %@ that was retracted. Deleting the associated message item.
v24@?0Q8^B16
Deleting associated message GUIDs: %@
B16@?0@"IMItem"8
Breadcrumbs
Observed more than one unconsumed breadcrumb: %@ for '%@' session %@
B16@?0@"IMAssociatedMessageItem"8
History query found breadcrumb %@ with payload history: %tu items.
IMDMessageStore
************* We hit max number of attempts to load dirty messages. Bailing for now
load messages needing CK sync with limit %ld, attemptCount %lu
**** Marking message with rowID %lld as clean ***
**** We had corrupt messages amongst dirty messages. Trying to load messages again. numberOfAttempts %lu
loaded %lu messages needing CK sync with limit, messages %@
************* We hit max number of attempts to load dirty messages needing a T1 update. Bailing for now
load messages needing CK update T1 with limit %ld, attemptCount %lu
************* We hit max number of attempts to load dirty messages needing a T2 update. Bailing for now
load messages needing CK update T2 with limit %ld, attemptCount %lu
Clearing tombstone message table
SMS_FULL_WARNING
DISMISS
__kIMDMessageStoreHandleUnformattedIDKey
__kIMDMessageStoreHandleCanonicalIDKey
__kIMDMessageStoreHandleCountryCodeKey
@"IMDAccount"32@?0@"NSString"8@"NSString"16@"NSString"24
Built IMItem: %@    from IMDMessageRecordRef: %@
 => Not storing item, service: %@  does not support a database
 => Not storing message, service: %@  does not support a database
com.apple.imagent.SyndicationLibraryChangeObserver
IMDPhotosSyndicationLibraryChangeListener
Started listening for changes to the syndication library. syndicationLibrary: %@
Stopped listening to changes to the syndication library. syndicationLibrary: %@
creationDate
Syndication library changed. Ingesting new analysis data. change: %@
Total change count: %lu.
Asset at index %lu had changes! syndicationIdentifier: %@
Ingesting new analysis data. transfer %@, asset: %@
A syndication library change was received for a particular asset, but a corresponding file transfer was not found using the asset's syndicationIdentifier. syndicationIdentifier: %@, asset: %@
EngroupCreationDateKey
wasDetectedAsSMSSpam
SMSCategory
SMSSubCategory
wasDetectedAsiMessageSpam
shouldForceToSMS
smsSpamExtensionName
numberOfTimesRespondedtoThread
LSMD
RBHE
smsHandshakeState
messageHandshakeState
restoredFromBlackhole
GPUFC
__kIMChatPreviouslyBlackholedChatHasBeenLoaded
__kIMDChatParticipantsDidChangeNotification
__kIMDChatParticipantsDidChangeAddedParticipantsKey
__kIMDChatParticipantsDidChangeRemovedParticipantsKey
Attempting to init chat with zero length chat identifier, guid: %@
Attempting to init chat with invalid guid %@
%s (%@)
-[IMDChat initWithAccountID:service:guid:groupID:chatIdentifier:participants:roomName:displayName:lastAddressedLocalHandle:lastAddressedSIMID:properties:state:style:isFiltered:hasHadSuccessfulQuery:engramID:serverChangeToken:cloudKitSyncState:originalGroupID:lastReadMessageTimeStamp:lastMessageTimeStampOnLoad:cloudKitRecordID:isBlackholed:autoDonationBehavior:autoDonationBehaviorLastModificationDate:]
Created chat: %@
-[IMDChat dealloc]
Dealloc chat: %@
chatIdentifier
serviceName
roomName
displayName
Updating chatInfo with autoDonationBehavior: %ld
IMDChat
engramID
serverChangeToken
cloudKitSyncState
originalGroupID
lastReadMessageTimeStamp
lastTUConversationCreatedDate
lastAddressedLocalHandle
lastAddressedSIMID
properties
style
state
unreadCount
isBlackholed
isFiltered
hasHadSuccessfulQuery
lastMessageTimeStampOnLoad
participants
Chat: %@  Adding participants: %@
Trying to add participants: %@ to 1:1 chat :%@
Chat: %@  Removing participants: %@
Trying to remove participant from a group chat with 2 or less participants %@
Chat: %@  Resetting to participants: %@
1:1 chat was missing participant, re-added %@ to %@
Cannot recover participant due to empty chatIdentifier for chat: %@
Reassociating chat: %@  to account: %@
IMDChat: %p GUID: %@ Style: %c State: %d Participants: %@  Room Name: %@  Display Name: %@  Identifier: %@  Unread count: %d  Row ID: %lld  Group ID: %@, originalGroupID: %@ lastAddressedHandle: %@ lastAddressedSIMID: %@ isFiltered: %d, hasHadSuccessfulQuery: %@, Engram ID: %@, serverChangeToken:%@, cKSate:%@ lastReadTime:%@ engroupCreationDate: %@ %@ cloudKitRecordID, isBlackholed: %@ groupPhotoGuid: %@
lastMessage
pcmid
Chat: %@   Updating last message: %@
Chat: %@   Property update: %@
     Resulting properties: %@
     => Saving changes
ChatRegistry
   Generating group ID for chat: %@    groupID: %@
   Generating group ID for chat: %@    groupID: %@  using IDs = %@
Updating lastReadMessaeTimeStamp from: %@ to: %@ for chat: %@
Updating record change tag (etag) from: %@ to: %@ for chat: %@
Updating ck record ID from: %@ to: %@ for chat: %@
resetting CK Sync state
Updating last addressed handle ID from %@ to %@. force update %@
Updating last addressed sim ID from %@ to %@
Updating isFiltered to: %d
Request
Failed to find messageGUID for spotlight reindexing when isBlackholed set to (expecting 0): %d
Checking if last seen message guid needs updating, old %@ new %@
Trying to persist legacy mergedID-based merged chats - 48047873
For handle [%@] we found another handle [%@] with contactID [%@] that has the same mergedID: [%@]
handle [%@] gets a mergedContactID: [%@]
handle [%@] doesn't have mergedID siblings
invalidHandle
%@:%@
<IMDChat %p _ckUniqueID %@, ckSyncState %ld recordChangeTag %@>
Loaded message profile: %@
msgNicknames
The meCard has been edited
com.apple.private.Messages.IMDCKRecordSaltManager
IMDCKRecordSaltManager
Starting salt fetch on internal queue
*** Error fetching user ID %@
Cached salt : %@
** Fetched salt was 0 length **
v24@?0@"CKRecordID"8@"NSError"16
CloudKit Salt not fetched: syncing enabled %@ first unlock %@
Request to fetch salt
Fetched salt %@
__kIMDChatsLoadedNotification
__kIMDChatRegistryAddedChatNotification
__kIMDChatRegistryChatKey
Received first unlock merge complete notification, re-syncing chats
Resetting LastBulletinboardPostedMessageRowID: %lld
LastBulletinboardPostedMessageRowID
Not Resetting LastBulletinboardPostedMessageRowID: %lld
v20@?0i8Q12
Received merge complete notification, re-syncing chats
com.apple.imdpersistenceagent.notification.mergecompleted
com.apple.imdpersistenceagent.notification.switchcompleted
com.apple.automatichistorydeletion.deleted
Deleted history automatically, re-syncing chats
com.apple.imdpersistenceagent.notification.lastaddressedidsmodified
Last addressed handle/simIDs of chats got modified, force reloading chats
B16@?0@"IMDChat"8
Found existing chat: %@
Created chat: %@ lastAddressedHandle %@
B16@?0@"NSString"8
Cache miss for chat with guid: %@ result: %@
Cache miss for chats with group ID: %@ result: %@
Cache miss for chat with identifier: %@ account: %@ result: %@
Cache miss for chats with ID: %@ account: %@ result: %@
Cache miss for chat with roomname: %@ account: %@ result: %@
@16@?0@"IMDHandle"8
 ==> ERROR sanity check failed: ChatRegistry returned chat that did not match inputs: %@
 ==> Ignoring %@, has incorrect service: %@
 ==> Found exact match based on groupID and participants: %@
 ==> Found a newer chat based on groupID: %@
 ==> Skipping chat with display name of %@, requested display name was zero length, chat: %@
 ==> Found a newer chat based on participants and display name: %@
 ==> Migrating siblings to new groupID if needed: %@
 ==> Updating chat (%@) group ID from %@ => %@
@16@?0@"NSString"8
Finding best candidate group chat with toIdentifier: %@ fromIdentifier: %@ displayName: %@ partipciants: %@ groupID: %@
 ==> Looking up with groupID %@
 ==> groupID lookup failed, falling back to display name: %@ participants: %@
 ==> Found matching chat: %@
 Hint message for last message was older than the current last message: %@, current: %@
 Querying db for last message: %@
 => Using last message: %@ for chat: %@
 Updating unread count for chat: %@ to: %d
Updating the unread count on chat: %@
Forcing unread count to zero on chat: %@
We believe the failed message might have changed, lets rebuild with fromMessage: %@
    => toMessage: %@
Updating groupID from (%@) to (%@) for chat %@
Spam
Handling request (autoReport %@) to mark IDs (%@) for services (%@) as spam for chatGUID (%@)
max-spam-messages-per-report
max-spam-message-size
Server Bag has no value for max-spam-message-size, using the default 50
Server Bag has no value for max-spam-messages-per-report, using the default 2
Marked %lu messages as spam
Reporting message: %@
Chat %@ did not have final message, loaded %@
Adding cache missed chat but existing chat found with GUID %@, preferring existing chat
Adding cache missed chat, no existing chat found with GUID %@
@16@?0@"IMDChat"8
Adding cache missed chat with GUID %@, not preferring existing chats
Registering chat: %@
@"NSString"16@?0@"IMDHandle"8
IMDChatRegistry
Adding handle %@ handleCNID  %@ to chat %@
Evicting chat: %@
Unregistering chat: %@
Deleting chat: %@
CloudKit syncing is on. Writing deleted chat to deleted sync table
%s: item: %@ chat: %@
-[IMDChatRegistry addItem:toChat:]
%s: message: %@ chat: %@
-[IMDChatRegistry addMessage:toChat:deferSpotlightIndexing:]
******* Not storing message %@ to chat %@
******* IMDMessageStore cannot store message %@ to chat %@
Storing SMS chat %@ old display name %@, old group ID %@ new display name %@, new group ID %@
Found SMS chat with different participants than its iMessage sibling. Chat: %@. Updating participants using %@
Attempting to fix up chat participants if needed
*********** Caught exception while fixing up chat participants on client connection %@ **********
Could not retrieve chats in range (%ld,%ld) as there are not that many, so retrieving all chats, range (%ld,%ld).
Retrieving %ld most recent chats out of %ld chats
********* Calling setInitialLoadForTesting in non unit tests is not supported ***** 
com.apple.IMDaemonCore.unsupportedAction
Would have ignored reload of chats but has zero chats, forcing reload
Forcing reload of chats _isLoading: %d _doneLoadingAfterMerge: %d forced: %d
Dropping all chats in registry
Updating database clients
Posting the update chat registry to all listeners
=> Done notifying clients
NOT forcing reload of chats _isLoading: %d _doneLoadingAfterMerge: %d forced: %d
Received request to wait for chats to be loaded
Setting up observer for loaded notification...
Notified that chats were loaded
Chats are done loading! Calling completionHandler
Chats aren't done loading, this is likely because of first unlock. Continuing to wait
v16@?0@"NSNotification"8
Loading Chats... (Chat Caching: %@)
DidRegenerateGroupID63841559
Should fix unnamed groupID: %@
 Found %d chats
No service found, looking at name: %@
No service found for name: %@: removing this chat [%@]
No account: removing this chat [%@]
/Library/Caches/com.apple.xbs/Sources/MessagesCore_Sim/IMCore/IMDaemonCore/IMDChatRegistry.m
-[IMDChatRegistry loadChatsWithCompletionBlock:]
generatedGroupID
Unnamed group with non UUID style groupID, lets fix this chat: %@
    New groupID: %@
=> Done Loading %d Chats
Caught exception %@ while merging forks
Merge fork
Not merging forks before first unlock
try to persist mergeID merged chats for [%lu] handles
Will not add malformed IMHandle:%@ to IMDHandleRegistry
Unable to add IMDHandle to _idToHandlesMap due to exception %@ -- nilling idToHandlesMap
Removing IMDHandle:%@ from IMDHandleRegistry
Device left first unlock, re-syncing chats
calling update routing, expire and watch dog after first unlock
Done fetching latest salt after unlock
Performing one time account check after upgrade
systemDidUnlock
DidMakeAllAttachmentsClassC
Making all attachments class C
/var/mobile/Library/SMS/Attachments
ForkMerge
did not find winner %@ in list of duplicates %@
Finding group chats
Found %ld duplicate chats needing merging: %@
winningChat unexpectedly nil
losingChats is unexpectedly nil
found winning chat %@, and losing chats %@, in list of chat duplicates: %@
will merge losing chats %@ into winning chat id %@
repairing duplicate chats failed: %@
merged losing chats %@ into winning chat id %@
Deleted unwanted chat %@
finished merging %ld duplicate chats
No duplicate chats found to merge
-[IMDChatRegistry repairDuplicateChatsIfNeeded]
Unexepectedly true '%@' in %s at %s:%d. %@
_isLoading
DidCheckForDuplicateChats
will check for duplicate chats after checking pref key %@:merged-duplicate-chats
Set pref for duplicate check (%@:merged-duplicate-chats) to YES
Finished repairing duplicate chats in %f seconds
Will NOT check for duplicate chats after checking pref key %@:merged-duplicate-chats
DidMarkGroupPhotosAsUnpurgeable
NOT Using person centric grouped chats cache
Using person centric grouped chats cache
Truncating person centric grouped chats to %ld chats.
q24@?0@"NSArray"8@"NSArray"16
mergedPinningIdentifiers
Number of person centric chats created to send to client %@
Group photo inconsistency detected among merged chats. Attempting to repair
    Chat %@ has groupPhotoGuid %@
Could not find file transfer matching group photo guid: %@
Have file transfer matching groupPhotoGuid: %@. FileTransfer: %@
Accepting groupPhotoGuid %@ as the initial preferred group photo.
Preferring %@ over %@ because the creation date is newer.
Not preferring %@ over %@ because the creation date is older.
Not preferring %@ because it does not have a creation date
The preferred groupPhotoGuid is %@. Transfer: %@
Applying groupPhotoGuid %@ to chat %@ which previously had groupPhotoGuid %@
Chat %@ already had groupPhotoGuid %@, leaving as is.
Completed repair of group photo inconsistency.
Could not determine a preferred group photo among inconsistent merged chats. Leaving inconsistency as is.
(%K = %@ OR %K = %@) AND %K != %d
%@: Chat's _ckUniqueID is nil: %@
We already have a chat to upload for groupID: %@ so we need to compare last message time's
The current chat we have stored has a last message that is later than it's sibling so we don't want to write it to CloudKit and want to replace it with it's sibling. Current GUID: %@ Sibling GUID: %@
We are going to replace the current chat: %@ with: %@ so we should mark it as modified so we don't modify it twice
v24@?0@"IMDChat"8^B16
Got %llu chats to upload
Chat is not SMS or iMessage -- so no need to sync to cloudkit: %@
The current chat we have stored has a last message that is later than it's sibling so we don't want to write it to CloudKit and want to replace it with it's sibling. Current Guid: %@ Sibling GUID: %@
IMChatRegistry
Did not find chat for GUID %@
Searching for the newest chat with OriginalGroupID:%@ on service:%@
Found newer chat match for Original Group ID: %@
Searching for the newest chat with groupID: %@ service: %@
Found newer chat match for groupID: %@
Looking for chat for CKRecord with GUID: %@
Looking for chat for CKRecord with originalGroupID: %@ service: %@
Failed to find group chat with originalGroupID as regular groupID (%@) in %llu chats, trying with client groupID (%@)
Failed to find group chat with current group ID, trying with originalGroupID (%@) as groupID
Found existing chat for CKRecord: %@
No existing chat with originalGroupID (%@) found, checking client groupID (%@)
IMDChatRegistry: Found an existing chat that's not in the registry. This is likely because the registry failed it's chat load. OriginalGroupID:%@ Chat:%@
TriedToInsertDuplicateChat
Won't _ensureNoExistingGroupForCKRecord style:%hhu, originalGroupID:%@ service:%@
Found groupd_id fork for chat while applying changes from cloudKit %@
Marking fork as clean %@
Found original_groupd_id fork for chat while applying changes from cloudKit %@
Chat already exists: %@ to apply changes to
Creating new chat %@ with record %@
Marking existing chat %@ as deferred
%K = %d
Marking existing chat %@ as needing sync from deferred state 
Trying to remove chat with nil groupID: %@
Setting sort id %@ for message %@ on chat %@ synced from CloudKit
Found item that is incompatible with the current device version: %@
Message %@ is an ignorable backward compatibility message, ignoring.
Found GUID for attachment part, associating with attachment: %@ at part id %lu
v24@?0@"NSString"8Q16
Updated msg %@ to have CKSyncState %@ stored message: %@
UpdateSyncT1 relating msgID %@ to thread %@ (threadGuid %@ threadPart %@)
ThreadIdentifier update rejected, thread identifier already populated as %@, update would be %@
Update record for non-message type, ignoring
Ignoring update T1 message: could not find message for id %@ (maybe it hasn't synced or has been deleted?)
Ignoring update message T1: no message ID or thread ID %@
Ignoring message update %@, unrecognized update type
Failed to handle conflict for unknown update type %@, rowID %lu
Can't apply updated syndication ranges for %@, message not found!
Applied updated syndicationRanges to %@, was newer data? %@)
Can't apply updated syndication ranges for %@, invalid message type for item %@
Clearing pending chat delete table
Found iMessage chat %@ for chatID %@ style %@
Did not find iMessage chat for ID %@ and style %@
No handles or servicename to receive a message from: {handles: %@ serviceName: %@}
No session for serviceName %@ -- can't simulate receive
Invalidating person centric grouped chats cache
ContactStore history token updated.
Not updating the ContactStore history token with %@
All handles and CachedAliasToCNIDMap
iMessage;-;%@
SMS;-;%@
UnnamedGroupChats
NamedGroupChats
Contacts based merging is disabled.
Contacts changed notification %@ 
v24@?0@"NSMutableArray"8@"NSArray"16
Computed chats to merge. Broadcasting to clients
No chats to merge/un-merge. NOT Broadcasting to clients
aliasMap
historyToken
v16@?0@"NSDictionary"8
# chats that need update after contacts changed notification %@
No CNContact for alias %@
IMDChatRegistry_Nickname
Clean up nickname for alias %@
Hawking: New contact (%@) added, removing chat (%@) from blackhole.
Chat %@ needs to be merged / un-merged & updated in spotlight
No of entries in chat dictionary %@
Update MeCard for all IMDChats
IMDCKDatabaseManager
**** Initializing dev container with ID %@
com.apple.messages.cloud
Initializing production container %@
Manatee container %@
use-old-nickname-container
Server says to use new container? %@ {serverbagValue: %@ version: %@}
com.apple.internal.messages.memoji
com.apple.messages.profiles
**** Initializing dev nick name container with ID %@
Using Manatee Container
Nicknames NOT enabled, returning nil public database
%@/%@
/var/mobile/Library/SMS/CloudKitMockStore/
IMDCKMockRecordZone
Mock Handle operation %@ identifier %@
Adding random delay of %@ seconds
Failed to unarchive mock ck record data. Error: %@
ID %@ MOCK Handling fetchRecordZoneChangesOperation
%@ Error reading from MOCK store %@ 
About to give back %@ records moreComing %@ fetchAllChanges %@
%@ Error deleting from MOCK store %@ 
Introducing random error %@
%s: Unable to archive record %@, error %@
-[IMDCKMockRecordZone _serializedCKRecordData:]
ID %@ MOCK Handling modifyRecordsOperation
Error persisting record %@ error %@
Successfully persisted record %@ 
com.apple.private.Messages.IMDCKRampManager
metadata_zone
metadata_rampstate_v2
IMDCKRampManager
Starting ramp state fetch on internal queue
FeatureAllowed
FeaturePromoted
FeatureVisible
RetryAfter
Sending request as priority
RampPriority
Not a priority ramp request
Ramp operation %@ Desired keys %@
Fetch operation records %@ fetchError %@
Fetch ramp state - featureAllowed %@, featurePromoted: %@, featureVisible: %@, retryAfter: %ld
Couldn't find CKRecord for ramp. Defaulting to not ramped in
FetchRampState
Attempting to fetch ramp state from CloudKit with operation %@
Writing cachedRampState featureAllowed(%@) featurePromoted(%@) featureVisible(%@) fetchHadServerError(%@)
scheduling new timer with retryAfter %f
retry timer fired
Not setting up new retryAfter, last one is firing at %@
Not Requesting ramp state. Is under first unlock.
Request to fetch ramp state
Cached featureAllowed and featurePromoted are true and there wasn't an error fetching state from the server last time. Not fetching again
calling recordFetchedCompletionBlock
Not fetching from server, next one is firing at %@
Cached values: featureAllowed(%@) featurePromoted(%@). Something is not YES, or we had a server error last time(%@) so fetching from server
Fetched ramp record
Scheduling retry: %@
v36@?0B8B12B16q20@"NSError"28
v24@?0B8B12B16B20
RampStateOverride
Defaults override, returning YES
cachedRampState featureAllowed(%@) featurePromoted(%@) featureVisible(%@) fetchHadServerError(%@)
Setting.
Not enough time passed since last jettison
Max number of failure occurrences exceeded
Max time since failure occurrence exceeded
Max time or occurrences not yet met
Context has expired
IMDInconsistency
Setting inconsistency handler
Noticed inconsistency at context %@ (count = %llu)
Resolving inconsistency at context %@
LastJettisonTimeInterval
Finished initialization, last jettison was %@
v32@?0@"IMDInconsistency"8Q16^B24
Enabling timer, since we have inconsistencies we need to check up on
Disabling timer, all inconsistencies resolved
Checking our inconsistencies to see if it's time to jettison state
Too many inconsistencies found in imagent, jettisoning state and starting over (reason: %@)
Inconsistencies aren't bad enough to merit a jettison (reasons: %@)
Removing expired inconsistencies: %@
Unable to create IMFileTransfer from NULL IMDAttachmentRecordRef.
This transfer doesn't have a guid, returning nil.
Exception raised while attempting to create IMFileTransfer: %@
Created: %@ from attachment record: %@
Unable to create IMDAttachmentRecordRef from nil IMFileTransfer.
Local path: %@, filename: %@
v32@?0@"NSString"8@"NSString"16@"NSString"24
Persisting transfer failed.
Not creating entry in DB for Aux video transfer %@
IMFileTransfer
 ** Error creating video complement for file transfer: %@ imageTransfer: %@
Created: %@ from imfiletransfer: %@
Updating %@ from %@
 Storing transfer at path: %@
 File eligible for purging: %@
 File NOT eligible for purging: %@, updatedPurgeableState: %@
 ** Not storing transfer
Unable to find an attachment record for guid: %@.
We are downgrading an attachment from finished to waiting accept --> so we've deleted the path on disk and should not store the attachment
Request to store transfer: %@
  => Updating existing : %@
  => Created new : %@
  ** Associated transfer GUID %@ with message GUID: %@
Over ridiing return val in storeAttachment for Aux transfer %@
Request to unassociate transfer: %@ from message guid: %@
Request to update transfer: %@
  => Updating existing: %@ with: %@
  => Found no transfer, storing instead
Not marking path as eligible for cachedelete, cloudkit syncing is not on
Not marking attachment path for cachedelete, last component is Attachments
GroupPhotoImage
Not marking path as eligible for cachedelete, last path component matches group photo file name. path: %@
Not marking attachment path for cachedelete, not in attachment store: %@
pluginpayload
pluginpayloadattachment
Not marking path as eligible for cachedelete, file extension is a plugin payload. path: %@
Not marking path as eligible for cachedelete, file extension is an audio message. path: %@
No attachment path to mark as purgable
Found aux video path: %@
EnableCacheDeleteTTR
File a Radar
Messages Storage Management
An attachment was unexpectedly marked as not purgeable.
Presenting CacheDelete TTR UI
TTR:%@ Messages storage issue: %@
A Messages attachment was unexpectedly removed from purgable state %@.
Serious Bug
I Didn't Try
450305
tap-to-radar://new?Title=%@&Description=%@&Classification=%@&Reproducibility=%@&ComponentID=%@&ComponentName=%@&ComponentVersion=%@&AutoDiagnostics=phone
Request for attachment with guid: %@
Request for attachments with guids: %@
Request for attachment with attachmentRecord: %@
updateLegacyTransferGUID failed to get a matching record
updateLegacyTransferGUIDOnMessageIfNeeded got something thats not a IMMessageItem: %@
Re-targeting transfer GUID at part %lu to %@
_updateAttachmentGUID completed with success %@
We are updating the in-memory transfer's guid that we will sync to CloudKit in-memory transfer: %@ partKey %lu newGUID: %@
Couldn't find guid %@ in list of fileTransferGUIDs to update; aborting. Body part (id %lu) contains reference to attachment not in DB, and we've updated the transfer to reflect.
Got null attachment record for %@
Re-targeting transfer GUID at index %d to %@
We are updating the in-memory transfer's guid that we will sync to CloudKit in-memory transfer: %@ index %lu newGUID: %@
Couldn't find guid %@ in list of fileTransferGUIDs to update; aborting. List of FileTransferGUIDs (id %d) contains reference to attachment not in DB, and we've updated the transfer to reflect.
We may have failed to update a message (guid %@) in the DB, and orphaned its attachments whose GUIDs we just updated %@
Message body attachment attributes update %@!
succeeded
FAILED (maybe)
Finished reindexing %@
Deleting attachments, guids %@
Failed to delete attachments
Request to delete attachments with guids: %@
deleteAttachmentsWithGUIDs failed to get a matching message record
Found corresponding IMMessageItem for legacy GUID %@
Deleting attachments with guids from spotlight: %@
Request to delete attachment with nil guid
Request to check if the attachment path is safe: %@
Transfer is group photo? %@ transfer: %@
(%lu,%lu,%lu)
syncState
v32@?0@"NSNumber"8@"NSArray"16^B24
com.apple.sms
IMDChatStore-Schema
Archiving chat: %@
No chat record found to archive for chat: %@
Unarchiving chat: %@
No chat record found to unarchive for chat: %@
Blackholing chat: %@
Unblackholing chat: %@
Transfer already exists in transfer center. not overwriting. Transfer: %@
Adding group photo to IMDFileTransferCenter for guid: %@.
Group file transfer is nil for guid: %@. Not adding anything to file transfers.
loadAllChatsForChatStore
v16@?0^{_IMDChatRecordStruct={__CFRuntimeBase=QAQ}q^{__CFArray}^{__CFArray}q^{_IMDMessageRecordStruct}q}8
RecentChatsToLoad
RecentFilteredChatsToLoad
Loading recent chats (budget %lld for known senders, %lld for other filters)
v32@?0@"IMDChat"8Q16^B24
Loading all chats took %f seconds for %lu chats
No incoming chat record.
No incoming chat records.
Tried to load chat for unsupported service (%@): %@
Lookup failed, NIL or empty message GUID.
Couldn't find chat for message guid: %@
Couldn't find message for guid: %@
Couldn't find chat for message identifier: %lld
Association failed, NIL or empty message GUID.
Association failed, NIL or empty chat GUID.
Associating message guid: %@ to chat: %@
Not indexing message:%@ with CoreSpotlight
Disassociation failed, NIL or empty message GUID.
Disassociation failed, NIL or empty chat GUID.
-[IMDChatStore deleteChat:]
Setting chat isFiltered failed, nil chat guid
MergeIT
Not persisting merge id due to override
Updating handle(%@) from:%@ to:%@
Writing to DB
Done
Location
Going to add location item: %@ to the corresponding chats with handleID: %@ hasStoredItem: %@ broadcastChanges: %@
Not sharing location group chat %@
Not sharing location with non-iMessage chat %@
Found matching participant: %@<=>%@ in chat: %@
Storing item: %@
Associating item: %@ to chat: %@
No matching chat found, ignoring
/var/mobile/Library/SMS/CloudKitMetaData/MessageSyncZoneMetaData.db
/var/mobile/Library/SMS/CloudKitMetaData/MessageSyncArchivedRecordMetaData.db
com.apple.private.IMDCKMessageSyncController
ck-max-number-of-message-batches
 overriding max number of message batches to fetch %@
**** Message %lu CKRecord size exceeds max limit.
**** We hit max number of attempts to creat CKRecords
**** Message [%@] could not be converted to CKRecord, marking it as clean and moving on.
**** Message %@ is too big. Marking it as clean and moving on
We had invalid records attempting to load records again. Attempt count %lu
Error creating message zone %@
***** Timed out creating message zone *******
Wrote message with GUID %@, error %@, recordName:%@
Encountered an unknown error.  We'll try syncing this message again on the next sync. Error code: %llu
Modify message had conflicts or the zone was not found, so treating this as a non error case
_processModifyRecordsCompletion error %@
Kicking off another batch of message writes to cloudKit
We completed writing messages. isLastBatch %@, write error %@, writeSuccess %@
PeriodicMessageSync
BackFillMessageSync
Got %@ records to sync, filtered to %@ unique records
**** We completed writing up messages. No more messages to write up. ***
Number of messages to upload %lu < max batch size. %lu 
**** This is the last batch of messages we will write
Did not schedule a write. Device Conditions suitable to write:%@
Fetched message record with GUID %@
Found parentChatID: %@, updatedLastMessageCount: %d
This is a coreduet sync at currentBatchCount %@, coreduet says to defer syncing
This is a coreduet sync at currentBatchCount %@, coreduet says to continue syncing
Message sync: device conditions allow sync: %@ deviceConditionsToCheck %@ currentBatchCount %@
Message sync: Not checking device conditions for full sync at current batch count %@ isCoreDuetSync %@
Message sync: Not checking device conditions for initial sync at current batchCount %@
Message sync: Stop syncing, feature enabled %@ hasMatchingAccounts %@.
archivedMessagesChangeToken
messagesChangeToken
Resetting the archived message sync token to nil
Resetting the message sync token to nil
processArchivedRecordsFetchCompletionZoneID serverChangeToken %@ moreComing %@ recordZoneError %@
There are more changes to fetch from archived zone. Kicking off another batch of fetching
No more archived records to fetch. Resetting defaults to fetch archived records
Record Zone Error says that the change token has expired
//---** Error fetching archived messages: %@
****** We are done fetching archived messages as max batch attempt limit reached ********
Fetching archived currentBatchCount %@ maxNumberOfBatches %@
******** Fetching archived records ***** sync token is %@
Fetch archived record %@ guid %@
v24@?0@"CKRecordZoneID"8@"CKServerChangeToken"16
** THIS SHOULD NOT GET CALLED WHILE FETCHING ARCHIVED RECORDS **
v36@?0@"CKRecordZoneID"8@"CKServerChangeToken"16B24@"NSError"28
Did not fetch archived records from message zone as device condition does not allow sync
Did not fetch archived records from message zone as no archived hint present
*** Encountered error while fetching archived records %@
*** Did not encounter error while fetching archived records
recordZoneFetchCompletionBlock serverChangeToken %@ moreComing %@ recordZoneError %@ archivedRecordsHintIsPresent %@, currentBatchCount %@ maxNumberOfBatches:%@
Setting shouldFetchArchivedRecords to true
There are more changes to fetch. Kicking off another batch of fetching
Done fetching changes from message zone.
Done fetching changes from message zone during an initial sync. Let's not write up
Done fetching live records. Will now fetch archived records
We got a %@ error while fetching messages. %@
Resetting local message sync state & last sync date after received user deleted zone error
Messages zone does not exist. Attempting to create one
//---** Error creating  messages zone
//---** Error fetching messages: %@
Failed fetching messages %@
_processFetchRecordZoneChangesCompletionWithError with no error
****** We are done fetching live messages as max batch attempt limit reached ********
shouldForceArchivedMessagesSync is YES, fetched max live record batches but will also fetch initial sync archived records if needed: %@
Since we fetched max live batch records, we will not fetch archived records
We completed fetching %@ batches of messages during a full sync, setting fullPartialSyncFirstCompletedDate to %@
Fetching live messages, currentBatchCount %@ maxNumberOfBatches %@
***recordZoneChangeTokensUpdatedBlock should not get called
*** Deleted recordID %@ type %@
Scheduling a fetch operation from message zone, using token %@
Did not fetch changes from message zone. Device condition allows sync %@. Disk Space Available %@
Need to kick off a sync of deletes because we had an incompatible message earlier.
Finished a sync of deletes because we had an incompatible message earlier (%@): %@
Mark all incompatible messages for deletion from cloudkit
_shouldMarkAllMessagesAsNeedingSync %@
Kicking off a message write after fetching messages
Completed message write %@ %@
syncMessagesWithSyncType with type %ld deviceConditionsToCheck %@
*** We were called to do an initial sync. Let's only fetch the first set of messages ***
Marking any unsuccessfully synced messages as needing sync
Finished Marking any unsuccessfully synced messages as needing sync
Done fetching archived records.
 ****** This was an initial fetch. Not writing messages *****
Not calling write messages on second callback from fetch archived records
******** Failed fetching archived messages with CKError %@ completionBlockCalledWhenFetchFailed %@
******** Failed fetching live messages with CKError %@ completionBlockCalledWhenFetchFailed %@
v28@?0B8B12B16@"NSError"20
Unsupported sync type
Clearing local sync tokens for Messages
Delete message callback with error %@
Deleted recordIDs %@
Not doing CloudKit message deletes as CK syncing is off
Got %lu recordIDs to sync, filtered to %lu unique recordID
No pending messages to delete from CloudKit
********* Error while deleting messages %@
deleteDate
partBody
com.apple.Messages.recoverableMessageSync
recoverableMessageChangeToken
recoverableMessage
com.apple.private.IMDCKRecoverableMessageSyncController
IMDCKRecoverableMessageSyncController
Skipping recoverable message sync due to Feature being disabled.
Scheduling a fetch recoverable message zone changes operation %@
Recently Deleted | Reading recoverable message record: %@
Recently Deleted | Failed reading recoverable message record. deleteDate: %@ and messageGUID:%@ cannot be nil
Recently Deleted | Reading recoverable message part record
Recently Deleted | Found stored part number %@
v40@?0@"NSNumber"8{_NSRange=QQ}16^B32
Did not find partIndex: %@ in message GUID: %@
Delete record operation unsupported.
Record Zone fetch complete zoneID %@ changeToken %@ tokenData %@ moreComing %d error %@
We got a %@ error while fetching recoverable messages. %@
Attempting to create recoverable message zone
** Failed to create recoverable message zone **
We completed fetching changes from recoverable message zone with no error
We got an expired server change token back so resetting local sync state, and fetching the recoverable messages again %@
********* We got an error fetching changes from recoverable messages zone %@
Recently Deleted | Clearing local recoverable sync state, flags 0x%x
Resetting the sync token to nil
Error creating recoverable message zone %@
***** Timed out creating recoverable message zone *******
Scheduling write recoverable message operation %@
Wrote recoverable message record %@ with error %@
IMDCKRecoverableMessageSyncController | Recently Deleted: could not write record: %@ encountered error: %@
messageRowID
partIndex
Recently Deleted | Marking row %@ with partIndex: %@ for %@ as clean
Recoverable messages writes completed sucess: %@ error %@
Recently Deleted | Not performing CloudKit recoverable message deletes as CK syncing is off
Recently Deleted | Got %lu recordIDs to sync, filtered to %lu unique recordID
Recently Deleted | No pending recoverable messages to delete from CloudKit
Recently Deleted | ********* Error while deleting recoverable messages %@
Recently Deleted | kicking off another batch delete to cloudKit
Recently Deleted | No GUIDs passed in to delete
Recently Deleted | Kicking off recoverable delete of recordIDs %@
messageGUID
chatGUID
_fetchOperationFactory was passed in a nil zone
_saveRecoverableMessagesOperationFactory was passed in a nil zone
Recently Deleted | No recoverable messages data to sync
IMDCKRecoverableMessageSyncController | Recently Deleted: marking clean: Using partIndex fallback: could not convert message to CKRecord with metadata: %@
v32@?0@"NSDictionary"8Q16^B24
Found %lu of %u max recoverable messages to write up
Delete recoverable message callback with error %@
Adding additional deleted recoverable record IDs from error
Deleted recoverable recordIDs %@
deleteDateInterval
IMDCKRecoverableMessageSyncController | Recently Deleted: returning nil record. messageGUID: %@, deleteDateNanosecondIntervalNumber: %@
IMDCKRecoverableMessageSyncController | Recently Deleted: returning nil record. recordID nil for metadata: %@
Recently Delete | Was not able to construct CKRecord with given data. This is bad.
%@+%@+%ld
action
incomingMessageProcessedByDaemon
lastUpdated
collaborationNoticeDefaultThreshold
collaborationNoticeCommentThreshold
collaborationNoticeParticipantChangedThreshold
IMDCollaborationNoticeRateLimiter.persistenceQueue
rateLimiter.plist
Creating rateLimiter persistence.
Loaded empty dictionary, creating a new dictionary.
Loaded noticeEventHistory: %@
IMDCollaborationNoticeRateLimiter
aguid
avid
pathc
auxpathc
vers
mimet
IMFileTransfer_CKRecord ***** Failed to write md5 hash of file at path: %@ with exception: %@
IMFileTransfer+CKRecord
Cannot generate record ID because salt is nil.
No cloudKitRecordID, derived record ID
Record ID from existing cloudKitRecordID: %@
Cannot initialize CKRecord using derived record ID because salt is nil.
Initializing CKRecord using derived record ID
Initialed CKRecord %@ for transfer %@ using record data from DB
IMFileTransfer_CKRecord
**** File a radar **** Asset last path component %@ from url %@ is empty
**** File a radar **** Asset last path component from url %@ is nil so cannot save it to metadata
IMFileTransfer_CKRecord **** Transfer did not have URL or asset was missing on disk. URL %@
Transfer file path %@
%@ transfer has an aux video asset
**** File a radar **** Aux asset last path component from url %@ is nil so cannot save it to metadata
No transfer metadata found for record:%@
Failed cleaning up attachment asset at %@, error %@
Cleaned up attachment asset at %@
Found a better asset in CKRecord %@, cloud size %@ local size %@
Missing file size to compare: cloud size %@ local size %@
Could not read file attributes of new attachment at %@, %@
Could not find file of the asset at %@, %@
Could not read file attributes of existing attachment at %@, %@
IMDFileTransfer+CKRecord
For attachment %@ local file not found at %@
Local asset is bigger than the one in CKRecord %@, taking %@ over %@
Can't find incoming attachment from CKRecord at %@
Could not read file attributes of local attachment at %@, %@
Moving transfer asset from CK cache to final spot
IMTransfer+CKRecord
CKRecord did not have a lastPathComponent, using %@ from filename
Failed to remove existing file at %@ to replace with version from CKRecord, sucess %@ error %@
Failed to move file from %@ to %@, error %@
Created transfer %@, finalAssetPath %@
Failed to write asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@ and asset fileURL %@
CKRecord did not have a auxVideoLastPathComponent, using %@ from auxVideoPath
Failed to remove existing aux file at %@ to replace with version from CKRecord, success %@ error %@
Failed to move file from %@ to %@ error %@
Stored aux video for transfer %@, finalAssetPath %@
Failed to write aux asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@ and asset fileURL %@
Failed to write record image asset to %@ GUID:%@
Got IMFileTransfer record with guid %@ with no file name
Invalid record passed to initWithCKRecord %@
Trying to create imfiletransfer ckrecord with guid %@ and filename %@
Invalid record passed to utiTypeForRecord %@
Invalid record passed to sizeOfAssetForRecord %@
Invalid record passed to transferGUIDOfRecord %@
Invalid record passed to attachmentRecordHasAsset %@
Invalid record passed to cleanUpAssetsOnDiskForRecord: %@
Invalid record passed to md5HashForRecord: %@
We didn't have an md5 hash for fetched record: %@
IMFileTransfer_CKRecord ***** Failed to grab hash of file at path: %@ with exception: %@ when validating attachment
IMFileTransfer_CKRecord *** asset was nil for record id: %@
IMFileTransfer_CKRecord *** fileName [%@] or utiType [%@] is nil
We failed to validate md5HashOfCKAsset: %@ md5HashStoredOnRecord: %@
__kIMDReplayControllerErrorDomain
IMDReplayContoller
Request to store replay message %@ type %d
IMDReplayContoller message was nil
IMDReplayContoller Incorrect message type %d
IMDReplayContoller Unable to archive message object: %@
Warning, missing %@ to add to %s
dict
IMDReplayMessageController. Storing message %@ failed with error %@
IMDReplayContoller: Found an empty message payload while replaying
IMDReplayContoller Trying to replay message of unknown type %@ %d
v16@?0q8
IMDReplayController
Request received to replay messages.
Deleting replay DB after replaying messages
deleteReplayDBIfNotUnderFirstUnlock isUnderFirstUnlock %@
Not deleting replay DB
Deleting replay DB on imagent launch after first unlock
Setting up new replay database at path: %@
Unable to setup replayStorageController, previous store controller with database at path %@ remains active
An replay database was already overriding the default, ending previous override
Restoring default replay database
Attempted to restore a database when no override database was set
Starting to recording replay database
End recording replay database
/var/mobile/Library/SMS/replayDB.db
Couldn't get local asset URL from CKRecord: %@
Failed to create attachment persistent path for aux video source, bad transfer/data (assetPath %@ mimeType %@ utiType %@ guid %@)
Failed to get valid attachment aux filename for aux video copy dest, bad transfer/data (auxAssetPath %@)
Failed to get aux video asset fileURL for aux video copy dest, bad transfer/data (assetPath %@ auxAssetPath %@)
com.apple.protectedcloudstorage.roll.Messages3
ck-client-max-time-to-defer-nightly-sync
IMDCKSyncController
Max Time to defer from server bag %@
Max Time to defer default value %@
_postMetricsToCloudKitOnAutomaticHistoryDeletionAgentLaunch
Received iCloud Account change notification, syncing enabled: %@
Account status is: %ld. Error: %@
SyncAfterAccountUpdate
Account status update, and we stopped sync due to missing TLKs. Launching one-off periodic sync.
Account.update
Registering for account notifications
Registered for cloudkit account change notifications
ck-imahd-sync-interval
_IMAHDAgentFallbackInterval %@
Last synced date %@ timeInterval %@, syncNotCompletedRecently %@
Scheduling nightlySyncTimer. Firing time: in %f sec.
nightlySyncTimer fired
Ignoring request to kick off of eager sync, since syncing is disabled
attempting to kick off an eager sync in %@ seconds
Kicking off a sync on power and wifi isSyncing %@ isUnderFirstUnlock %@ lastSyncDate %@ deviceConditionsAllowSync %@
postInitialSync
Not kicking off a sync on power and wifi isSyncing %@ isUnderFirstUnlock %@ lastSyncDate %@ deviceConditionsAllowSync %@
Init IMDCKSyncController
Got notified to kick off a sync due to IMAutomaticDeletionAgent
IMPowerWifiUsageCollectorOnPowerAndWifiNotification
Not doing account check on launch as device is locked
performInitialSyncOnFirstConnectionOfImagentIfNeeded {hasPerformedInitialSync: %@ hasTriedToEnableCKAndSyncForFirstTime: %@ cloudKitEnabled: %@
This is our first time connecting to imagent on this device (either first time ever or from a restore) and cloudkit is disabled --- will attempt to enable and perform initial sync -- we won't do this again
SyncAfterIdentityUpdate
Request to beginInitialSync
**** Has performed initial sync, or we aren't enabled. Not kicking off initial sync *** | isEnabled %@, hasPerformedInitalSync %@
InitialSync
We aren't ready to perform an initial sync.  We've tried %ld times.  We'll try again in %ld seconds 
We'e tried %ld times to begin an initial sync.  Giving up.
BeginInitialSync
*** Manatee keys not available not kicking off initial sync
MissingTLK
MissingTLKNoInitalSync
Restore Fail
Request to begin chat sync isPeriodic:%@
Not syncing chats from xpc activity -- mocEnabled: %@
Set state for chat syncing with result %d
We synced recently chats not syncing again after coming back online
CoreduetChatPeriodic
ManualChatSync
We dont have manatee TLK. Not kicking off chat only sync
Request to determine if we should mark all incompatibleMessagesForDeletion, set version (%ld) current version (%d)
Request to begin full sync checks %lu (reason %@)
com.apple.Messages.PeriodicSync.
Check-in for a periodic sync at priority %s
Run a User-Initiated periodic sync
Ignoring activity request to sync messages, as syncing is disabled
We did not set the state of a user-initiated xpc_activity to continue successfully for message syncing
v16@?0@"NSObject<OS_xpc_object>"8
Request to begin full sync activity:%@
CloudKit allows sync, beginning periodic sync attempt 0
CoreduetFullPeriodic
ck-stop-online-sync
ck-chat-sync-interval
_minimumChatComingOnlineSyncInterval %@
Last coming online chat sync date %@
Server override prevents us from syncing chats when coming back online
ck-block-single-device-limitation
The server is not allowing us to block chat syncing for iMessage accounts with only one device: %@
Number of devices for iMessage account: %@
Cleaning up tombstone table as CloudKit syncing is off
Request to beginChatSync from coming back online
Not syncing chats from coming back online -- clearing tombstones for deletes only 
Proceeding with coming back online sync
ComingBackOnlineChatSync
kickOffCloudKitSyncIfNeededOnImagentLaunch
disableSyncRetryOnCrash
Not attempting to kick off periodic sync as we are under first unlock AND/OR we have a defaults set com.apple.madrid disableSyncRetryOnCrash
Not kicking off a sync as this is a periodic sync attempt %ld and coreduet should decide whether to kick off a sync again
CrashedDuringSync
duringPeriodicSync
imagent started and we were in the middle of manual sync attempt %ud
duringManualSync
Is charging %@ , isOnWifi %@
NOT Kicking off a periodic sync after we got back as we are not on battery and wifi
We are on power and wifi. Kicking off a sync
ContinuingManualFullSyncAfterLaunch
startedWhileInProgress
Not kicking off a sync as there was no sync in progress or we hit max limit attempts of sync
wasXPCtriggered
restoreSync
nightlyTriggerCrash
Unknown/Crash
clearLocalCloudKitSyncState
ResetSyncDate
disable-mic-ui-refresh-during-sync
RefreshConversationList
Server disallows refreshing UI while syncing
disable-mic-ui-refresh-timer-during-sync
Server disallows refreshing UI while syncing using timer
Setting up a timer to reload the UI
Refreshing UI after time because device is unlocked
Not Refreshing UI after time because device is locked
Invalidating reload timer.
Refreshing UI after unlock
Dumped logs in past hour
Dumped restore failure logs in past hour
Current hour %@
Deleted restore failures directory at path %@
Failed to delete restore failures directory at path %@ with error %@
Dumping restore failure logs
Feature is on, time to send restore failure logdumps, found %@ to send
RestoreFailuresDump
Sending restore failure log (guid %@) at path %@ to recipient %@
Checking we whould send logs. allowedToSendLogs %@ withinAnHourOfLogDumpHour %@ hasDumpedRestoreFailureLogsInPastHour %@
It is dump log time but feature is off, deleting restore failures directory
Not auto dumping Restore Failure MOC logs withingLogDumpHour %@ hasDumpedLogsInPastHour %@ lastLogDumpTime %@
Checking if we need to dump logs using LastErrorDate:%@ and LastSyncDate%@
We haven't reported any errors in the last 24 hours and haven't syned.  Dumping logs 
NoSyncFor24Hours
Not auto dumping MOC logs withingLogDumpHour %@ hasDumpedLogsInPastHour %@ lastLogDumpTime %@
Sync
Failed syncing %@ with error %@
IMDCKSyncDomain
syncStep
Failed
Failed syncing Messages %@, please file a radar
Set activity to state %ld success %@
IMDCKRestoreDomain
Caused by: %@
Beginning initial new device sync with CloudKit. , attemptCount %@
Max attempts to sync due to recoverAble error exceeded
Messages: Failed syncing to CloudKit please file a radar
Retry
Deferring initial sync on attempt %lu, in state %ld
Failed to set activity to STATE_DEFER(3) on attempt %lu, in state %ld
Successfully synced chats after new device bringup
Successfully synced messages after new device bringup
Successfully synced attachments after new device bringup
******** Nuking CloudKit data ******
Deleting CloudKit Data
Attempting periodicSync for attemptCount %@ so setting fullSyncAttempted date.
First full sync is complete, noting down date %@
We need to dump logs after syncing
LowSyncStats
We don't need to dump logs
****** Manatee keys not available. Not syncing %@ ******
Could retry periodic sync based on error %@
Doing an attachment metadata only sync before we continue with the full sync
Attachment metadata only sync failed with error: %@
Attachment metadata only sync succeeded
First full sync has completed - lets just do a normal sync flows
Initiating full sync with CloudKit. Core Duet Sync %@, attemptCount %@
stopManateeSync
Asked to sync but we are not allowed to do so
Set state full sync activity result %d
Max attempts to sync due to recoverable error exceeded
FullMessageSync
RetryAttemptExceeded
Deferring periodic sync on attempt %lu, in state %ld
Successfully synced chats
Successfully synced messages
Successfully synced updates
Successfully synced attachments
Completed syncing deletes
Failed syncing updates with error %@
Kicking off delete sync to CloudKit
Done deleteing chat with error %@
ChatDeletionComplete
Done deleteing messages with error %@
MessageDeletionComplete
Done deleteing attachments with error %@
AttachmentDeletionComplete
RecoverableMessageDeletionComplete
IMDCKRecoverableMessageController
[Recently Deleted] Successfully synced recoverable messages
[Recently Deleted] Recoverable messages sync unsuccessful. Will Retry
Request to sync all chats
Synced chats with success:%@
Ramping says we are allowed
Unable to check exit zone record Error: %@
Entered exit zone at %@. Aborting sync, downloading all attachments. {shouldDownloadAssets: %@}
We are downgrading the security level, downgrade date %@. We can't download at this time. When the Identity is restored, we will kick sync appropriately
Not in exit state, continuing sync
** We are already performing a sync.  Ignoring current request to sync.
 Syncing Self:%@ Chat:%@ Message:%@ Attachment:%@ Exit:%@
iCloud and iMessage accounts match up ? %@
Cache says featureAllowed(%@) featurePromoted(%@) featureVisible(%@) fetchHadServerError(%@)
The ramp cache says we are not rampped.  Let us try to fetch the ramp state one more time.
fetchedFeatureAllowed: %@ fetchedFeaturePromoted: %@ fetchedFeatureVisible: %@ secondFetchHadServerError: %@
IMDCKSyncControlelr
We were ramped in on second fetch -- continuing
We were not ramped in or encountered another error trying to fetch the ramp state. Failing
Set state to DONE for sync activity result %d
v28@?0B8B12B16B20B24
Could not fetch salt, aborting cleaning up MOC
NSDebugDescription
Noting down sync started. Initial value Key %@ value %@
Noting down sync started. After setting value Key %@ value %@
IMDCKSyncController: We started a second sync before a previous one was finished.  Likely there is an exit path that isn't calling _noteMeticsForSyncEndedWithSuccces
Started by %@, running since: %@:
LongRunningSync
Resetting sync state, and attempt counts
_periodicSyncAttemptCount %@
_manualSyncAttemptCount %@
Chats, messages, and attachments have synced successfully, sync time: %@
Updating sync date for Manatee sync %@
Wrote sync date success to CloudKit %@ error %@
Request to syncChats from XPC
sync-state-user-defaults
assembled sync state debugging info: %@
Handling event with name %@ userInfo %@
Got user signed into HSA2 account notification
exitRecordDateWithCompletion in updateDowngradedDateIfNeeded failed with error: %@
Finished updating security level with error: %@
Handling AKUserInfoChangedNotification with user info: %@
Account level changed to %@
We are downgrading from HSA2 -- turning off messages on iCloud
Account level changed to unknown, not turning off messages in iCloud or refreshing values associated with IMCloudKitAppleIDSecurityLevelHSA2.
Finished checking for possible security level downgraded with error: %@. Broadcasting new state if needed.
iCloud and iMessage account match up ? %@
iCloud and iMessage accounts do not match up. Turning off MOC
Messages in iCloud not available
Messages in iCloud is not available because iCloud and iMessage accounts are different.
com.apple.IMDCKSyncController
performOneTimeAccountUpgradeCheckIfNeeded
Will performing MOIC account check on upgrade after %f seconds
Clear analytic defaults and local sync state
User has completed a first full sync so device has started doing periodic syncs. Logging full periodic sync metric.
completedPeriodicSyncSinceFirstFullSync
analytic-zone-periodic-sync-logging-not-allowed
analytic-zone-daily-state-logging-not-allowed
Not logging analytics
dailySyncState-
Device will be uploading %@ analytic dict %@ to CK. CreatedZones: %@ DeletedZones:%@
Not uploading daily sync state.
Will be uploading dailySyncState-PeriodicSync analytic dict %@ to CK.
dailySyncState-PeriodicSync
Not uploading periodic sync activity.
Received key roll pending state did change event notification
Handling Backup State Did Change
We did not have an IMDCKSyncController when trying report _PCSBackupStateDidChange
Handling Test Backup State Did Change
We did not have an IMDCKSyncController when trying report _PCSTestBackupStateDidChange
Handling Successful Keyroll from Backup
We did not have an IMDCKSyncController when trying report _PCSBackupStateKeyrollSuccessful
Handling Pending Keyroll Notification
We did not have an IMDCKSyncController when trying report _PCSPendingKeyroll
Handling Identity/TLK keys available notification, name: %@, userInfo: %@
Identity/TLK update, and we stopped sync due to missing TLKs. Launching one-off periodic sync.
Identity.update
com.apple.private.Messages.IMMessagesToTrack
Registering chat identifier: %@   style: %d  hash: %@ handleInfo: %@ lastAddressedHandle %@ lastAddressedSIMID %@
 => Found chat, but it had no particpants. Updating with handleInfo: %@
********** Created bad chat: %@ *************
1:1 chat identifier mismatch
 => We already have one, nothing to do here. Chat: [%@]
Failed to canonicalize chat identifier
Failed to find chat for hash hash %@ with chatIdentifier: %@, style: %c
Updating account ID from: %@ => %@
Failed to accept moment share for message guid: %@
Configuring Syndication Ranges for Message: %@. isSWYSpam %@, showQuickAction: %@ swyAppName: %@
v28@?0B8@"IMMessageItem"12@"IMMessageItem"20
  => Message was stored. Input: %@   Output: %@
  => No result? Using the requested message: %@
com.apple.imessage
DropSendingMessage
 ** DropSendingMessage is enabled, failing send message
Chat: Could not find a chat for itemGUID: %@
Failed to store item %@
Not sending message up to client because this message is being retried. Guid %@
Removing message: %@   from chat: %@ due to send on different service
v16@?0@"IMMessageItem"8
Not sending delivery receipt
Not handling, subclass for iMessage should handle
Chat_GroupPhoto
Not requesting group photo, subclass for iMessage should handle
Did leave chat: %@  style: %c setting state: %d
Did join chat: %@  style: %c setting state: %d   name: %@   groupID: %@ lastAddressedHandle %@ lastAddressedSIMID %@
Did join chat: %@  style: %c setting state: %d   name: %@   groupID: %@  category %ld extensionName %@
Did join chat: %@  style: %c setting state: %d   name: %@   groupID: %@
Found old message: %@  for error: %d
Updated message: %@
Message is already delivered, and we're not forcing an error here (%@)
Unable to mark error: %d, no messages found for guid: %@
Found old message for read receipt: %@
Unable to mark send of read receipt, message is on a different service: %@ vs %@
Unable to mark send of read receipt, no messages found for guid: %@
Found old message for delivered quietly receipt: %@
Setting was delivered quietly flag on local device for message: %@
Unable to mark message delivered quietly, message is on a different service: %@ vs %@
Unable to mark message delivered quietly, no messages found for guid: %@
Found old message for notify recipient command: %@
Setting did notify recipient flag on local device for message: %@
Unable to mark message notified command, message is on a different service: %@ vs %@
Unable to mark message notified command, no messages found for guid: %@
Found old message for played receipt: %@
Expire received message played on local device: %@
Unable to mark send of played receipt, message is on a different service: %@ vs %@
Unable to mark send of played receipt, no messages found for guid: %@
Found old message for saved receipt: %@
Unable to mark send of saved receipt, message is on a different service: %@ vs %@
Unable to mark send of saved receipt, no messages found for guid: %@
Received didSendSyndicationAction: %@ for Chat: %@
Updated message: %@ with action item: %@
Message not update updated for SyndicationAction - doing nothing with syndication action: %@
Updated syndication state to: %@ was successful: %@ for chat with GUID: %@
   Found message from chat: %@
   Message was already marked as delivered, ignoring
   Message was already marked as black holed, ignoring
Found old message for delivery receipt: %@
MessageService
Received delivery receipt for message: %@
Delivery receipt time was: %f
Message had error: %d
Updated message: %@  had error: %@
B8@?0
MessageSuppression
No message found for guid: %@ to mark as delivered, trying again in a bit
Second to last try, waiting longer
Last try, waiting a lot longer
No message ever found for guid: %@ to mark as read, bailing
Found chats to mark as read: %@
Updating local chat (fromMe: %@): %@
Returning early in _didReceiveMessageReadForMessageID because !_activated
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessageReadForMessageID:date:attempts:useMessageSuppression:completionBlock:]
message: %@
Returning early in _didReceiveMessageReadForMessageID because messageID: %@, [[self service] supportsDatabase]: %@, service: %@
Found chats for messageID: %@   chats: %@
Found no chats for messageID: %@
Found chat for messageID: %@, chat: %@
Received reflected read receipt. Setting suppression flag for chat %@
Noting received reflected read receipt for: %@ (%@)  (self: %@)
Remaining messages: %@
  Also adding message: %@
  Skipping message: %@
No message found for guid: %@ to mark as read, trying again in a bit
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessageReadReceiptForMessageID:date:attempts:completionBlock:]
Found chat for messageID: %@   chat: %@
Unable notify about message, message is on a different service: %@ vs %@
Unable notify about message, no message found
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessagePlayedForMessageID:date:attempts:useMessageSuppression:completionBlock:]
Received reflected played receipt. Setting suppression flag for chat %@
Noting received reflected played receipt for: %@ (%@)  (self: %@)
No message found for guid: %@ to mark as played, trying again in a bit
No message ever found for guid: %@ to mark as played, bailing
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessagePlayedReceiptForMessageID:date:attempts:completionBlock:]
-[IMDServiceSession(IMDServiceSession_Chat) _didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:attempts:useMessageSuppression:account:completionBlock:]
   Message was already marked as saved, ignoring
Received reflected saved receipt. Setting suppression flag for chat %@
Noting received reflected saved receipt for: %@ (%@)  (self: %@)
v16@?0@"IMItem"8
Stored item: %@     Actually stored: %@
Posting received message: %@
Item was not stored, ignoring
v28@?0B8@"IMItem"12@"IMItem"20
Message with guid %@ has been deleted!
No message found for guid: %@ to mark as saved, trying again in a bit
No message ever found for guid: %@ to mark as saved, bailing
-[IMDServiceSession(IMDServiceSession_Chat) didSendMessage:forChat:style:account:forceDate:itemIsComingFromStorage:]
Not notifying for message: %@   this is a typing indicator, and we've already stored a completed message
Not notifying for message: %@   this is a typing indicator, and it failed
Automatically saving message sent from local device: %@
Expire message sent from local device: %@
Updating date on message guid %@ to be: %@
Updating isFiltered to NO, replying to chatId: %@
Posting sent message: %@
-[IMDServiceSession(IMDServiceSession_Chat) notifyDidSendMessageID:account:shouldNotify:]
Updated sent message: %@   duration: %@
Unable notify about message, no messages found for guid: %@
Noting messages for chat GUID %@ marked as read
Suppressed messages now marked as read: %@
Cleared suppression flag for chat %@
%@ ending message suppression for all outstanding timers: %@
v32@?0@8@16^B24
%@ _endMessageSuppressionForChatGUID: %@
Found old message: %@
Removed read flag: %@
Updating chat: %@
Message is already not read: %@
Message suppression timer fired for chat guid %@
Setting suppressed message: %@
Can't delete on this service %@
Ignoring name update, already the current name
The existing message was read, let's mark the new one is read
The existing message has a time: %@, so lets set the new message to have the same time
We are setting the reply to guid for message %@ to be %@ as a reply to guid has not been set
Assigning sort id %@ to message %@ for chat %@
Chat's last read message time date (%@) guid (%@) timestamp: (%@) Messages time date (%@) timestamp: (%@) Server timestamp: (%@)
Last read message time is in the future. Not marking incoming message %@ as read
Setting message %@ as read as incoming message is older than the chat's last read message time
Marking message as failed due to preflight rendering
v12@?0I8
Bailing, we had a similar message: %@
Service was SMS, let's move it over to iMessage
Broadcasting service update for message with GUID %@ after suppression
*** Bailing, we already had a finished message for this in the database. ***
Should suppress message: %@
Found suppression timer %@ for chat %@
message-suppression-timer %lu
Suppressing message: %@
Setting suppressed message flag: %@
The input message disagrees with the "from me" attribute, creating a new message ID
@"IMMessageItem"16@?0@"IMMessageItem"8
No timing information available for incoming message processing with guid %@
  Ensuring the app is alive here
Stored message: %@     Actually stored: %@
Not donating to Message: %@ to CoreSpotlight. isSWYSpam %@, showQuickAction: %@
Message was not stored, ignoring
Updating invitation message after DB store: %@
Invalid chat identifier, ignoring
Chat: %@  status update: %d  style: %c lastAddressedHandle %@ lastAddressedSIMID %@
Updating isFiltered to NO, chat ID is a business chat: %@
Chat: %@  member: %@ from member: %@ unformated: %@ country: %@ status update: %d  style: %c
Storing participant leave: %@
Storing %@ participant change item  %@ => %@
invite
remove
Hawking: New participant (%@) added to chat (%@) is a known contact.
Hawking: New participant (%@) added to chat (%@) is not a known contact.
_CDSpotlightItemRecorder
CoreDuet
Going to remove chat guid from core duet %@
done deleting searchable items with domain identifiers %@. success %@ error %@
No chat to update downgrade properties for.
Handling routing dictionary: %@
Chat: Got a missing service in routing dictionary for GUID (%@): %@
Chat: could not find a session to route message GUID: %@
Chat: Could not re-route missing message GUID: %@
Chat: Could not find a chat for message: %@
Not routing message (%@) because it is not sent and has no error, not a candidate for routing
Re-routing message (guid:%@):%@   chat:%@   service:%@   session:%@
No chat registered, creating on one on service %@  identifier: %@   style: %c  (Chat: %@)
Generated handle info: %@ for group chat: %@
Found iMessage chat [%@], will use lastAddressedHandle %@ lastSIMID %@
No iMessage chat found for chat identifier: %@
Chat: could not find iMessage session to find iMessage chat.
Chat already exists for the other session, nothing to do here: %@
Sending message to session: %@  chatGUID: %@
v24@?0@"NSDictionary"8d16
Scheduling a routing check with interval: %f
message-routing-timer
Handling expire state dictionary: %@
Chat: Could not expire missing message GUID: %@
Not deleting message (%@) because was already saved
Not expiring message (%@) because its expire state %d is already %d
Expire message (guid:%@):%@   chat:%@   session:%@
   delete expired messages: %@
   deleted expired messages: %@
Don't schedule expire state check with interval: %f, one is already scheduled with interval: %f
Scheduling an expire state check with interval: %f
message-expire-state-timer
Handling watchdog dictionary: %@
Chat: Could not watchdog missing message GUID: %@
Don't schedule watchdog check with interval: %f, one is already scheduled with interval: %f
Scheduling a watchdog check with interval: %f
message-watchdog-timer
Going to user user notifications to notify for urgent messages
Auto Replier sending delivered quietly receipt for messageGuid %@ in chatGuid %@
Auto Replier sending notify recipient command for messageGuid %@ in chatGuid %@
Successfully consumed EN url, marking message as read: %@
Scheduling a storage invalidation timer in: %f
We have pending read receipts to process after storage timer fired
Storage timer fired, guids we need to process: %@
Chat: Missed lastItemProcessed.  This time is likely off by the last storage timer
Noting suppressed item updated while processing messages from storage (%@)
Noting item from storage (%@)
This is the first item from stroage starting timer
ProcessingMessagesFromStorage
Noting last item from storage (%@)
Finished processing %lu items from storage%@
Incremented pending read receipt to %lu
Decremented pending read receipt to %lu
Setting pending read receipt to %lu
Predominant service check for incoming message:%@ in chat:%@ was determined to be %@
Not showing quick action since we did not get an AppName
Invalid chat or incorrect number of messages
Identifying the predominant service for chat: %@
Invalid parameter. chatGUID: %@ service: %@ number of messages:%lu
Incorrect chat %@, has more than the number of participants we expected!
Chat %@, has the wrong number of participants than what was expected!
Failed to fetch %lu number of messages from chat %@
Chat opted out of Auto donation. Not configuring syndication ranges
Configuring syndication ranges for incoming message:%@ in chat:%@
Storing message: %@
/Library/Caches/com.apple.xbs/Sources/MessagesCore_Sim/IMCore/IMDaemonCore/IMDServiceSession_Chat.m
void _IMDStoreMessage(IMDService *__strong, IMMessageItem *__strong, BOOL, BOOL, BOOL, BOOL, FZMessageFlags, __strong _IMDMessageStoreShouldStoreBlock, __strong _IMDMessageStoreDidStoreBlock, __strong _IMDMessageStoreCompletionBlock)
_IMDStoreMessage
Unexpected false '%@' in %s at %s:%d. %@
[resultMessage isKindOfClass:[inMessage class]]
input and output message types are not the same. input message has type %@. output message has type %@
  => Result message: %@
Set avatar likeness data for message %@
Set biz intent data for message %@
Set locale data for message %@
Set meCard sharing preferences data for message %@
%@;%c;%@
Found messages guids to mark as read: %@
Notifying about messages: %@
Found message to mark as played: %@
Automatically saving received message played on linked device: %@
Expire received message played on linked device: %@
Found chats to mark as played: %@
Notifying about message: %@
Found message to mark as saved: %@
Found chats to mark as saved: %@
  => Result item: %@
v56@?0@"IMDiMessageIDSDelegate"8@16@"IMDiMessageIDSTrustedData"24@"IMDiMessagePipelineResources"32@"IMMessageContext"40@"IMPowerAssertion"48
IMTransferServicesController_Preview
Generating preview OOP with tmpURL %@ finalURL %@ previewURL %@ maxWidth %f scale %f
IMTranscoderAgent OOP generation completed with error %@
OOP preview generation failed in imagent with error %@
Storing size value %@ for previewURL %@
Transcoder Preview Generation Failure
IMPreviewGeneratorDomain
Timed out getting preview from IMTranscodeController in imagent
persistedPreviewURL: %@
Received CommSafety response from Media-Analysis-Daemon with result %@, %@
Received CommSafety response from Media-Analysis-Daemon with error %@
Timed out waiting for sensitive image check
Not pregenerating preview, no persistedPreviewURL
Not pregenerating preview, utiSupported %@ isCMM %@ aux Video %@, calling completion directly
kMarkSensitiveKey
Not pregenerating preview: IM_BLASTDOOR_ATTACHMENT_PREVIEW_ENABLED NOT set
v44@?0@"NSString"8@"NSString"16B24@"NSError"28@"NSString"36
com.apple.MobileSMSPreview
IMFailPreviewGeneration
Initial sync device conditions check if CloudKit sync is enabled: %@ has accounts %@
Initial sync device conditions check if CloudKit sync is enabled: %@, hasAccounts %@
Initial sync device conditions check if CloudKit sync is enabled: %d
Initial sync device conditions ignoring feature enabled: always TRUE
Initial sync. Not writing up attachments
IMDMessageHistorySyncController
ReplayController requested a history Sync
ReplayController already has sync in flight ignoring request
IDS Transport Log requested a history Sync
IDS Transport Log already has sync in flight ignoring request
Cloudkit Chat Controller requested a history Sync
Cloudkit Chat Controller  already has sync in flight ignoring request
Checking if any sync task need to be started
Already performing a sync task, waiting for that to complete before kicking off the next task
Starting Sync
Finished Sync
v16@?0Q8
No Message History to sync.
Will check in %u seconds if another sync needs to be done
/var/mobile/Library/SMS/CloudKitMetaData/ChatSyncZoneMetaData.db
chatLockRecordType
chatLockRecordName
lRKey
com.apple.private.IMDCKChatSyncController
************ CREATING CHAT LOCK RECORD **************** OH BOY **************
changeToken
**** Do not call -[IMDCKChatSyncController _chatsToUpload] on main thread *******
Error creating chat zone %@
***** Timed out creating chat zone *******
per record completion block record %@ changeTag %@ error %@
We are setting the lock record on the callback for processing records
We got back error [%@] on the lock record, setting the lock record to nil to re-generate on next sync
Error %@ while writing up record %@ 
Extracted record from server error%@ 
Got a conflict while fetching lock record %@
modifyRecordsCompletionBlock error %@
Number of records saved %@
We got back that we have exceeded quota in chat sync -- failing to continue writes
We only had partial error and the whole batch failed 
lock record is present amongst chats
******** LOCK RECORD IS NOT PRESENT ******
We failed to sync Chats due to op lock Not doing ABC %@
Number of chats to write up %@
Chat to sync up %@
This is the last batch of chats to write up
Adding lock record %@
Kicking off another batch of chats to write up
*** This was the last batch of chats to write up. Done writing up chats
**** Error %@ writing chat records %@ to cloudKit *****
No chats to sync up at this moment
No completion block to call
Creating a fetch chat record operation using sync token %@ for zone %@ limit %@
**** _processRecordDeletion:Dropping delete as IDS syncs it real time. ***
** We got the lock record %@ **
_processRecordChanged changed recordID:%@ for ChatGUID %@
Kicking off chat write
Not writing up chats as sync type does not allow it
We got a %@ error while fetching chats. %@
Resetting local chat sync state & last sync date after receiving user deleted zone error
Attempting to create chat zone
Attempting to create chat zone so setting createdChatZone BOOL to YES
** Failed to create chat zone **
We completed fetching changes from chat zone with no error
We got an expired server change token back so resetting local sync state, and fetching the chats again %@
********* We got an error fetching changes from chat zone %@
Scheduling a fetch chat zone changes operation %@
chatExistsWithCompletion (batch size %d)
ChatsExistCheck
Fetched record %@
Completed query %@ with error: %@, foundRecord: %d
Scheduled fetch changes operation to check for the existence of a single chat with identifier: %@ (batch size %d)
chat sync controller checking eligibility
Received error checking eligibility: %@
Returning cached value: %@
_shouldMarkAllChatsAsNeedingSync %@
IMCKChatSyncController
Resetting fetched chats bool to NO
Starting chat sync attempt count %@
Exceeded number of chat sync attempts
**** Not Eligible For Truth Zone, but earlier we were able to fetch the chat zone. Something is up! ****
Syncing chats in new device bring up scenario
Chat sync error %@
*********** we failed to sync Chats due to op lock %@, kicking off another chat sync
Not syncing chats due to missing defaults. Please do following as mobile and try again - defaults write com.apple.madrid enableCKSyncingV2 YES
Marking all chats as dirty
_handleChatDeletionCompletionForRecordIDs error %@
Deleted chat with recordID %@
Error deleteing chats from CloudKit %@
CloudKit Syncing is disable
com.apple.IMDCKChatSyncController
Got %lu recordIDs to sync, filtered to %lu unique recordIDs
Failed to filter record IDs for chat deletion sync, error: %@
No pending chats at this moment
***** WE should not get record completion block in delete operation
Filtering chat recordIDs to those with modification date after %@
Completed chat record fetch with %llu results, error: %@
Including chat with record ID %@ modification date %@ since it is before %@
Filtering out chat with record ID %@ modification date %@ since it is after %@
v32@?0@"CKRecordID"8@"CKRecord"16^B24
IMDMessageHistorySyncNotifyReplayControllerWantsSync
IMDMessageHistorySyncNotifyCKChatSyncControllerWantsSync
IMDMessageHistorySyncNotifyIDSTransactionLogWantsSync
task_flags
/var/mobile/Library/SMS/Stickers
IMDStickerRegistry
Deleting legacy Sticker folder at path %@, error %@
Initialized IMDStickerStore
_isRecipeBasedSticker invalid properties
Retrieve sticker with properties %@, completionBlock %@
IMDStickerRegistry. No completion block passed in.
sticker found in cache %@
Received ME-sticker from balloon %@
IMDStickerRegistry. Failed retrieving sticker me-sticker with error %@, outputURLS %@
Received transcoded output from balloon bundle id %@ path %@
v40@?0@"NSArray"8@"NSString"16@"NSError"24B32B36
Sticker not found in cache
Invalid sticker properties passed to retrieveStickerWithProperties %@
com.apple.private.IMDaemonCore.IMDStickerRegistry
typing-indicator-cleanup
Tried to change property %@ with nil buddy ID
Tried to change empty property for buddy ID: %@
Tried to change IDProperty for buddy ID: %@   bailing
IMDServiceSession_BuddyList.m
Too many calls to [IMDService endBuddyChanges]!
com.apple.Messages.UpdateSync
com.apple.private.IMDCKUpdateSyncController
mic-delete-update-zone
IMDCKUpdateSyncController
Deleting zone based on default, and skipping Update syncs
Scheduling a fetch update zone changes operation %@
Fetched update record with type %@
We got a %@ error while fetching updates. %@
Attempting to create update zone
** Failed to create update zone **
We completed fetching changes from update zone with no error
We got an expired server change token back so resetting local sync state, and fetching the updates again %@
********* We got an error fetching changes from update zone %@
updateChangeToken
Error creating update zone %@
***** Timed out creating update zone *******
Scheduling write updates T1 operation %@
Wrote T1 update record %@ with error %@
Marking row %lld for %@ as clean
Update T1 writes completed sucess: %@ error %@
Scheduling write updates T2 operation %@
Wrote T2 update record %@ with error %@
Successful write of T2 update to the server, updating syncedSyndicationRanges for message guid %@ 
Update T2 writes completed sucess: %@ error %@
fetchOperationFactory was passed in a nil zone
saveT1OperationFactory was passed in a nil zone
**** T1 Update item [%@] could not be converted to CKRecord, marking it as clean and moving on.
Found %lu of %u max T1 updates to write up
saveT2OperationFactory was passed in a nil zone
**** T2 Update item [%@] could not be converted to CKRecord.
Found %lu of %u max T2 updates to write up
XPC Activity state was NOT in state continue(4), was in state %ld!
Keychain
Abandoning password fetcher with request ID: %@  session: %@
No pending password fetch requests for session: %@
IMDServiceSessionBase
/*-------calling into leaveiMessageChat from legacy service session, please file a radar-------*/
/*-------calling into invitePersonInfoToiMessageChat from legacy service session, please file a radar-------*/
/*-------calling into sendGroupPhotoUpdate from legacy service session, please file a radar-------*/
/*-------calling into retryGroupPhotoUpload from legacy service session, please file a radar-------*/
/*-------calling into removePersonInfoFromiMessageChat from legacy service session, please file a radar-------*/
/*-------calling into closeSessionForChat from legacy service session, please file a radar-------*/
/*-------calling into sendNicknameUpdatesToPeerDevices: from service that doesn't support it. File a radar-------*/
/*-------calling into sendNicknameInfoToChatID: from service that doesn't support it. File a radar-------*/
/*-------calling into reflectMarkUnreadToPeerDevicesForMessageGUID: from service that doesn't support it. File a radar-------*/
/*-------calling into sendEditedMessage: from service that doesn't support it. File a radar-------*/
__kIMDReplayMessageStorageControllerErrorDomain
passing in nil filePath to initWithFilePath
IMDReplayStorageController
IMDReplayStorageController was asked to store nil dictionary
Deleting replay db with path %@
IMDCKInitialMessageSyncController
Initial sync device Not writing up messages
UserInfo
IMDXPCEventStreamHandler
%@ received event with name %@ and user info %@.
__ksFirewallUserNotificationIdentifier
RememberPassword
Not Connected
Unexpectedly disconnected
Disconnecting...
Connecting...
Connecfted
-[IMDServiceSession disallowReconnection] %@
Auto-Reconnect Request: %@:%@
Auto-Reconnect failed (Network conditions don't allow it): %@:%@
Reconnecting account: %@:%@
Do Login: %@:%@  (serviceLoginStatus: %d)
Ignoring Login: %@:%@  (serviceLoginStatus: %d)
_login_serverSettingsReadyWithAccount: %@:%@
The account name or server is not valid.
  setting service status to disconnected, account or server is invalid
****** No IMConnectionMonitor for login of account: %@
A network error occurred.
_data_connection_ready: %@:%@
v72@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64
_login_usernameAndPasswordReady: %@:%@
_login_checkUsernameAndPassword: %@:%@  has pass: %@   bad pass: %@
_login_checkUsernameAndPassword: connectionMonitor says we're not reachable
Skipping login, we're not activated
Strange, we're here, but already logged in
Building password notification dialog for: %@   (has pass: %@   has login: %@  bad pass: %@)
v76@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56B64B68B72
autoLogin: %@:%@
Login request: %@:%@ (Setting should reconnect flag = YES)
-[IMDServiceSession logoutServiceSession]: %@, account:%@
-[%@ logoutWithAccount:%@] (activated = %@)
Tried to logout: %@  but we're not supposed to, reflecting this!
<<Connected>>
** %@: clearing _shouldReconnectFlag at logout
%@: Login status changed to %@ (%@)
__kIMDBadgeUtilitiesLoginStatusChangedNotification
-[IMDServiceSession _autoReconnectTimer]: %@
 => Network appears to be up, we'll try to auto reconnect
 ** Network does not appear to be up, we'll skip this attempt
-[IMDServiceSession _clearAutoReconnectTimer]: %@
<%@:%@:%@>
[%@: <%@:%@:%@:%@:%@>]
ogid
name
filt
sqry
prop
prop001
ptcpts
gpid
CKRecord_GroupPhoto
Transfer not found for group photo guid %@
Transfer not finished for group photo guid %@
Resource not reachable for %@ with error %@
ckAsset not able to initialize from transfer file URL: %@
*********Cannot create record without a salt
@"NSData"16@?0@"IMDHandle"8
Couldn't add group photo to CKRecord. Returning nil.
Syncing new syndication attributes up %@
Invalid record passed to chatWithCKRecord %@
@"IMDHandle"16@?0@"NSData"8
Server Chat record has props001 %@, pulling isAutoDonating and donationDate
Server Chat record had props001 data, but we failed to decode to a dictionary!
Group photo exists, setting up transfer
Failed to move group photo file from %@ to %@, error %@
CKRecord_GroupPhoto+CKRecord
Found transfer: %@
Failed making group photo file class C: %@ with error %@
Group photo stored for chat guid %@ with transfer %@
Failed to write asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@
applying changes on chat %@ state %ld
Local last read timestamp %lld, server record last read timestamp %@
Server Chat record has props001 %@, pulling syndication_type and syndication_ranges
Server Chat record has older props001 %@, local syndicationDate: %lu, skipping
Updating chat:%@ madeChanges %d serverHadMoreRecentData %@
Updating chat %@ record name %@ change tag %@
com.apple.demo-settings
StoreDemoMode
IMDBadgeUtilities
_lastFailedMessageDate saved date %@  last failed message data in DB %@ 
__kMessagesBadgeControllerClearFailureBadgeNotification
com.apple.IMSharedUtilities.IMUserLoginIntentChangedInternal
-[IMDBadgeUtilities updateBadgeForUnreadCountChangeIfNeeded:]
Unread count changed from %d to %d
-[IMDBadgeUtilities updateBadgeForLastFailedMessageDateChangeIfNeeded:]
Failed message date changed from %lld to %lld
-[IMDBadgeUtilities _postBadgeNumber:]
Call notification center to post badge number %@
-[IMDBadgeUtilities _postBadgeNumber:]_block_invoke
Notification Center post badge number with error: [%@]
-[IMDBadgeUtilities _postBadgeString:]
Call notification center to post badge string %@
-[IMDBadgeUtilities _postBadgeString:]_block_invoke
Notification Center post badge string with error: [%@]
_shouldShowFailureString _showingFailure %@ _isUnexpectedlyLoggedOut %@ 
Alias
-[IMDBadgeUtilities _clearFailureBadge]
Clearing failure badge, old value = %@
SuppressingReceiveSoundMessageGUIDs
-[IMDBadgeUtilities _cacheFailureDate:]
Cached failure id %lld    alert failure id %lld
com.apple.imdbadgeutilities
lastMadridFailureID
Clear failure badge notification
Unexpected log out dependent value changed
Device does not support FaceTime, not registering TUConversation delegate
Setting up conversation manager for imagent
TUConversation registered
Completed conversation manager setup for imagent
Chats count: %@
chat handle %@ vs conversation handle %@
@16@?0@"TUConversationMember"8
We mapped a chat %@ to a TUConversation with messagesGroupUUID %@ for chat groupID %@
While groupID matched, Messages participants (%@) did not equal TUConversation remoteMembers (%@)
While groupID matched, Messages participants (%@) count did not equal TUConversation remoteMembers (%@)
Attempting to map 1x1 chat for conversation: %@
v24@?0@"TUConversation"8^B16
Not able to find lastAddressedLocalHandle, falling back to account's loginID
Conversation initiator handle value %@
Not creating IMTUConversationItem - likely a nil lastAddressedHandle on chat: %@ or nil handles in conversation: %@
TUConversation UUID %@ for conversation %@
Callback for addedMembersLocally conversation: %@ member: %@
Found chat to potentially add members to: %@
ChatRegistry_CallManagement
@"NSString"16@?0@"TUConversationMember"8
This is a lightweight member - skipping: %@
IMDChatRegistry_CallManagement
Destination is registered for iMessage, adding to group: %@
Destination is NOT registered for iMessage, skipping adding to group: %@
Couldn't find chat, trying to create a new one!
Indicating to TU that we are now mapped to a messages group.
CKRecordUtilities
Computed message record name hash %@ from guid %@ and salt %@
Could not compute message record name hash %@ from guid %@ and salt %@ as one or both are nil
<IMDIDSAccount:%p, ID:%@, idsAccount:%@ >
P:%@
E:%@
iMessageBusiness
imessage
********** We don't have an IDSAccount, please file a radar ********** State: service session = %@, accounts = %@
********** We couldn't find an IMDAccount for the IDSAccount, please file a radar ********** State: service session = %@, IDSAccount = %@, accounts = %@
********** Requesting registered URIs but we don't have an IDSAccount, please file a radar ********** State: service session = %@, accounts = %@
-[IMDAppleServiceSession sessionDidBecomeActive]
-[IMDAppleServiceSession sessionWillBecomeInactiveWithAccount:]
AppleServiceSession
IMDAppleServiceSession
%@ callerID - choosing %@ from %@, idsAccount %@
 ** Selected display ID: %@  was not in URIs set: %@
callerURI - No bindings !!, idsAccount %@ registeredURIs %@
CallerID
IDS Account (%@) registered for: %@ but registration status was wrong. Saving for later
IDS Account (%@) not registered for: %@, serviceName: %@, moving on
No backward compatibility message match found %s
Could not find edited message matching backward compatibility message %s. Message cannot be dropped.
Found edited message matching backward compatibility message %s. Message can be dropped.
No plain body found for message %s
__IMDBackwardCompatibilityMessageIdentifier
B32@0:8@16@24
v16@0:8
parser
v16@?0@"NSArray"8
Backward compatibility message %s does not match any edited message in our database.
Backward compatibility message %s matches an existing message %s at message part %ld.
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
IMSharedUtilities
EDITED_MESSAGE_BACKWARD_COMPATIBILITY_FORMAT
EDITED_MESSAGE_BACKWARD_COMPATIBILITY_EDITED
Backward compatibility message prefix is unlocalized in %s
Backward compatibility message format is unlocalized in %s
IMDaemonCoreHelloWorldClass_Impl
sharedUtilitiesHelloWorld
persistenceHelloWorld
v8@?0
IMDaemonCore.CallManager
Failed to find existing chat for conversation: %s
Invalid call to CallManager's registerChat function for conversation %@
registerChat(for:)
Can't create chat for conversation %@ since the remoteMember %s isn't iMessage-able
Failed to create IMTUConversationItem for conversation %@ on chat %@
Storing conversationItem %@ on chat %@
Not adding IMTUConversationItem since item GUID %s already exists
Found existing item mapping to chatIdentifier: %s
IMDCallManager_Impl
@24@0:8@16
queue
serviceSession
conversationManager
featureFlags
newChatListenerTask
v32@0:8@16@24
Couldn't pick initiator for conversation %@ on chat %@
Not mapping conversation %@ to chat %@ because of remaining handles %s
Received notification that conversation messagesGroupUUID was added: %@
Couldn't find chat for conversation %@
Couldn't find chat for 1-1 conversation with %s, attempting chat creation!
Can't post notification since we couldn't fetch initiator from conversation %@
SharePlay notification will be posted for "%s" app in chat %@ and conversation %s
Received request to post notification for conversation %@ on chat %@
Received notification that conversation was added: %@
v12@?0B8
Received invalid object type from IMDChatAddedNotification %s
Notified that chat was added %@
Notified that all IMDChats are loaded.
Waiting for new chats 
Couldn't find conversation for chat %@
TUConversationManager registered
TUConversationManagerDelegate
v40@0:8@16@24@32
v44@0:8@16@24Q32B40
v48@0:8@16@24@32@40
v48@0:8@16@24Q32@40
v36@0:8@16@24B32
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversation"32
v32@0:8@"TUConversationManager"16@"NSArray"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"TUConversationManager"16@"TUConversation"24Q32B40
v32@0:8@"TUConversationManager"16@"NSString"24
v48@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationMember"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSData"32
v40@0:8@"TUConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v48@0:8@"TUConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v36@0:8@"TUConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"TUConversationManager"16@"NSError"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v28@0:8@"TUConversationManager"16B24
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
hash
Tq,N,R
superclass
T#,N,R
description
T@"NSString",N,R
debugDescription
B24@0:8@"Protocol"16
@"NSString"16@0:8
com.apple.Messages.IncomingClientConnectionListenerWorkloop
Resuming XPC listener for %s
Invalidating XPC listener for %s
IMDaemonCore.IncomingClientConnectionListener
init()
IMDIncomingClientConnectionListener
$defaultActor
machServiceName
allowedEntitlements
listener
clients
requestHandlers
clientConnectionWorkloop
Removing client %s
ClientConnection
v24@?0:8@?<v@?@>16
Resumed connection for PID %d
Configuring XPC connection for %s from PID %d
Connection invalidated for PID %d
Connection interrupted for PID %d
Client %d does not have any of allowed entitlements %s, invalidating connection
Incoming XPC connection for %s
Client %d has entitlement %s
No required entitlements have been specified, allowing all clients
NSXPCListenerDelegate
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
IMDaemonProtocol
v24@0:8Q16
v20@0:8I16
B24@0:8@16
IMDaemonAccountsProtocol
v28@0:8B16@20
v24@0:8@"NSArray"16
v32@0:8@"NSString"16@"NSDictionary"24
v40@0:8@"NSString"16@"NSDictionary"24@"NSString"32
v24@0:8@"NSString"16
v40@0:8@"NSString"16@"NSString"24@"NSString"32
v28@0:8I16@"NSString"20
v32@0:8@"NSArray"16@"NSString"24
v28@0:8B16@"NSString"20
v32@0:8@"NSString"16@"NSString"24
IMDaemonAnyProtocol
v48@0:8@16Q24@32@?40
v44@0:8@16@24C32@36
v40@0:8@16q24@?32
v44@0:8@16C24@28@36
v32@0:8@16q24
v32@0:8@16B24B28
v28@0:8@16B24
v40@0:8@16@24@?32
v40@0:8@16q24@32
v48@0:8@"NSString"16Q24@"NSDictionary"32@?<v@?B@"NSDictionary">40
v48@0:8@"NSString"16Q24@"NSDictionary"32@?<v@?B@"IMXPCDictionary">40
v32@0:8@16@"NSString"24
v44@0:8@"NSString"16@"NSArray"24C32@"NSArray"36
v40@0:8@"NSString"16q24@?<v@?B>32
v44@0:8@"NSArray"16C24@"NSArray"28@"IMMessageItem"36
v32@0:8@"NSString"16q24
v24@0:8@"NSDictionary"16
v44@0:8@"NSArray"16C24@"NSArray"28@"NSString"36
v32@0:8@"NSSet"16@"NSArray"24
v24@0:8@"NSSet"16
v24@0:8@"IMNickname"16
v40@0:8@"NSString"16@"NSData"24@"NSString"32
v32@0:8@"NSDictionary"16@"NSArray"24
v24@0:8@"NSURL"16
v32@0:8@"NSString"16B24B28
v48@0:8@16@"NSString"24@"NSString"32@"NSString"40
v28@0:8@"NSString"16B24
v40@0:8@"IMCollaborationNoticeTransmission"16@"NSSet"24@?<v@?B>32
v40@0:8@"NSString"16q24@"NSString"32
IMDaemonAutomationProtocol
v56@0:8@16@24@32@40@48
v80@0:8@16@24@32@40@48@56q64@72
v48@0:8B16@20@28B36@40
v28@0:8@16i24
v56@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSString"48
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSString"48@"NSDate"56q64@"NSString"72
v40@0:8@"NSDictionary"16@"NSDictionary"24@"NSArray"32
v32@0:8@"NSDictionary"16@"NSString"24
v48@0:8B16@"NSString"20@"NSString"28B36@"NSString"40
v28@0:8@"NSString"16i24
v32@0:8q16@"NSString"24
IMDaemonBuddyListProtocol
v36@0:8B16@20@28
v36@0:8B16@"NSString"20@"NSString"28
IMDaemonChatFileTransferProtocol
v52@0:8@16@24C32@36@?44
v52@0:8@16C24@28@36@44
v52@0:8@"NSString"16@"NSArray"24C32@"NSArray"36@?<v@?B>44
v52@0:8@"NSArray"16C24@"NSArray"28@"NSString"36@"NSString"44
IMDaemonChatMessageHistoryProtocol
v84@0:8@16@24C32@36q44@52@60@68@?76
v84@0:8@16@24@32C40@44q52q60@68@?76
v68@0:8@16@24C32@36q44@52@?60
v60@0:8@16@24C32@36q44@?52
v68@0:8@16C24@28@36@44@52@60
v56@0:8@16@24C32@36B44@?48
v84@0:8@16C24@28q36@44@52@60@68@76
v84@0:8@16@24C32@36q44q52@60@68@76
v56@0:8@16C24@28@36@44B52
v60@0:8@16C24@28q36@44@52
v68@0:8@16C24@28q36@44@52@60
v84@0:8@"NSString"16@"NSArray"24C32@"NSArray"36q44@"NSString"52@"NSString"60@"NSString"68@?<v@?@"NSArray"@"NSArray">76
v84@0:8@"NSString"16@"NSString"24@"NSArray"32C40@"NSArray"44q52q60@"NSString"68@?<v@?@"NSArray"@"NSArray"BB>76
v68@0:8@"NSString"16@"NSArray"24C32@"NSArray"36q44@"NSString"52@?<v@?@"NSArray"@"NSArray">60
v52@0:8@"NSString"16@"NSArray"24C32@"NSArray"36@?<v@?@"NSArray">44
v60@0:8@"NSString"16@"NSArray"24C32@"NSArray"36q44@?<v@?@"NSArray">52
v52@0:8@"NSString"16@"NSArray"24C32@"NSArray"36@?<v@?Q>44
v68@0:8@"NSArray"16C24@"NSArray"28@"NSString"36@"NSString"44@"NSString"52@"NSString"60
v56@0:8@"NSString"16@"NSArray"24C32@"NSArray"36B44@?<v@?Q>48
v40@0:8@"NSArray"16@"NSDate"24@"NSString"32
v84@0:8@"NSArray"16C24@"NSArray"28q36@"NSString"44@"NSString"52@"NSString"60@"NSString"68@"NSString"76
v84@0:8@"NSString"16@"NSArray"24C32@"NSArray"36q44q52@"NSString"60@"NSString"68@"NSString"76
v56@0:8@"NSArray"16C24@"NSArray"28@"NSString"36@"NSString"44B52
v60@0:8@"NSArray"16C24@"NSArray"28q36@"NSString"44@"NSString"52
v68@0:8@"NSArray"16C24@"NSArray"28q36@"NSString"44@"NSString"52@"NSString"60
IMDaemonChatModifyReadStateProtocol
v52@0:8@16C24@28@36q44
v56@0:8@16C24@28@36q44B52
v36@0:8@16C24@28
v52@0:8@"NSArray"16C24@"NSArray"28@"NSArray"36q44
v56@0:8@"NSArray"16C24@"NSArray"28@"NSArray"36q44B52
v36@0:8@"NSArray"16C24@"NSArray"28
IMDaemonChatProtocol
v32@0:8@16@?24
v48@0:8@16@24q32@?40
v52@0:8@16@24@32C40@?44
v72@0:8@16@24q32@40@48@56@64
v52@0:8@16@24@32C40@44
v60@0:8@16@24@32@40C48@52
v68@0:8@16@24@32@40@48@56C64
v48@0:8@16@24q32@40
v32@0:8@"NSString"16@?<v@?@"NSArray">24
v32@0:8@"NSPredicate"16@?<v@?@"NSArray">24
v48@0:8@"NSPredicate"16@"NSDate"24q32@?<v@?@"NSArray">40
v52@0:8@"NSArray"16@"NSString"24@"NSString"32C40@?<v@?@"NSArray">44
v32@0:8@"NSArray"16@?<v@?@"NSArray">24
v24@0:8@"IMMessageItem"16
v48@0:8@"IMMessageItem"16@"NSIndexSet"24@"NSDictionary"32@"NSDate"40
v32@0:8@"IMItem"16@"NSString"24
v72@0:8@"NSString"16@"NSString"24q32@"NSString"40@"NSString"48@"NSString"56@"NSString"64
v52@0:8@"IMMessageItem"16@"NSString"24@"NSString"32C40@"NSString"44
v32@0:8@"IMSyndicationAction"16@"NSArray"24
v48@0:8@"NSData"16@"NSArray"24@"NSString"32@"NSString"40
v40@0:8@"NSData"16@"NSArray"24@"NSString"32
v60@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40C48@"NSString"52
v44@0:8@"NSString"16@"NSString"24C32@"NSString"36
v48@0:8@"NSNumber"16@"NSDictionary"24@"NSString"32@"NSString"40
v68@0:8@"NSNumber"16@"NSDictionary"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56C64
v24@0:8@"IMCollaborationNotice"16
v32@0:8@"NSPredicate"16@"NSString"24
v48@0:8@"NSPredicate"16@"NSDate"24q32@"NSString"40
v52@0:8@"NSArray"16@"NSString"24@"NSString"32C40@"NSString"44
v40@0:8@"NSArray"16@"NSString"24@?<v@?B@"NSDictionary">32
IMDaemonChatSendMessageProtocol
v76@0:8@16@24q32Q40@48C56@60@68
v84@0:8@16@24@32C40@44@52@60@68@76
v32@0:8@"IMMessageItem"16@"NSString"24
v76@0:8@"IMMessageItem"16@"IMMessageItem"24q32Q40@"NSString"48C56@"NSString"60@"NSAttributedString"68
v84@0:8@"NSString"16@"NSArray"24@"NSString"32C40@"NSString"44@"NSString"52@"NSString"60@"NSDictionary"68@"NSString"76
v60@0:8@"NSDictionary"16@"IMMessageItem"24@"NSString"32@"NSString"40C48@"NSString"52
v52@0:8@"NSString"16@"NSString"24@"NSString"32C40@"NSString"44
v52@0:8@"NSDictionary"16@"NSString"24@"NSString"32C40@"NSString"44
IMDaemonCloudSyncProtocol
v24@0:8q16
IMDaemonFileTransferProtocol
v48@0:8@16@24B32B36q40
v44@0:8@16@24@32B40
v48@0:8@"NSString"16@"NSString"24B32B36q40
v44@0:8@"NSString"16@"NSString"24@"NSArray"32B40
IMDaemonFileProviderProtocol
v32@0:8@"NSArray"16q24
IMDaemonManageStatusProtocol
IMDaemonModifyReadStateProtocol
v32@0:8@"NSString"16@"NSDate"24
IMDaemonVCACProtocol
v56@0:8@16I24I28@32@40@48
v48@0:8@"NSString"16@"NSDictionary"24@"NSString"32@"NSString"40
v56@0:8@"NSString"16@"NSDictionary"24@"NSString"32@"NSNumber"40@"NSString"48
v48@0:8@"NSData"16@"NSString"24@"NSString"32@"NSString"40
v56@0:8@"NSString"16I24I28@"NSDictionary"32@"NSString"40@"NSString"48
IMDaemonVCInvitationsAVObserverProtocol
v48@0:8@16I24@28@36B44
v48@0:8@"NSString"16I24@"NSDictionary"28@"NSString"36B44
IMDaemonVCProtocol
infix associatedValue 
wrappingPairs
No plain text tapback found for message %s
Interpreted plain text tapback %s but could not find original message using infix string
Interpreted plain text tapback %s for %s, attaching to %s with range %s, took %fs
__IMDPlainTextTapbackInterpreterImpl
@32@0:8@16@24
v32@?0@"IMMessagePartDescriptor"8q16^B24
PlainTextTapbacks
Removed a heart from "%@"
Removed a like from "%@"
Removed a dislike from "%@"
Removed a laugh from "%@"
Removed an exclamation from "%@"
Removed a question mark from "%@"
DaemonCallManager
CollaborationNotices
DaemonClientConnections
NSObject
_TtC12IMDaemonCore15DaemonWorkActor
_IMDInternalWorkQueue
v24@0:8@?16
Starting to accept incoming connections
Notifying clients they need to re-request setup
IMDaemonCore.ClientConnectionManager
IMDClientConnectionManager
connectionListener
@20@0:8B16
broadcasterForAllListeners
T@"<IMDaemonListenerAnyProtocol>",N,R
broadcasterForAccountListeners
T@"<IMDaemonListenerAccountsProtocol>",N,R
broadcasterForChatListeners
T@"<IMDaemonListenerChatProtocol>",N,R
broadcasterForBlackholeChatListeners
broadcasterForChatDatabaseListeners
T@"<IMDaemonListenerChatDatabaseProtocol>",N,R
broadcasterForChatCountsListeners
T@"<IMDaemonListenerChatCountsProtocol>",N,R
broadcasterForFileProviderListeners
T@"<IMDaemonListenerFileProviderProtocol>",N,R
broadcasterForAVConferenceListeners
T@"<IMDaemonListenerAVProtocol>",N,R
broadcasterForACConferenceListeners
Broadcasting %s to: %s
IMDaemonListenerProtocol
v28@0:8B16@"NSDictionary"20
IMDaemonListenerChatDatabaseProtocol
IMDaemonListenerChatCountsProtocol
IMDBroadcasterProviding
@"<IMDaemonListenerAnyProtocol>"16@0:8
@"<IMDaemonListenerAccountsProtocol>"16@0:8
@"<IMDaemonListenerServiceProtocol>"24@0:8@"IMDService"16
@"<IMDaemonListenerChatProtocol>"16@0:8
@"<IMDaemonListenerChatProtocol>"24@0:8@"IMDService"16
@"<IMDaemonListenerChatProtocol>"20@0:8B16
@"<IMDaemonListenerChatDatabaseProtocol>"16@0:8
@"<IMDaemonListenerChatCountsProtocol>"16@0:8
@"<IMDaemonListenerFileProviderProtocol>"16@0:8
@"<IMDaemonListenerNotificationsProtocol>"24@0:8@"IMDService"16
@"<IMDaemonListenerAVProtocol>"24@0:8@"IMDService"16
@"<IMDaemonListenerAVProtocol>"16@0:8
IMDaemonListenerAccountsProtocol
v44@0:8B16Q20@28@36
v20@0:8B16
v44@0:8B16Q20@"NSString"28@"NSError"36
v32@0:8@"NSString"16@"NSData"24
v32@0:8@"NSDictionary"16@"NSDictionary"24
v32@0:8@"NSSet"16@"NSSet"24
IMDaemonListenerAnyProtocol
v48@0:8@16Q24Q32Q40
v32@0:8q16@24
v40@0:8@"NSString"16@24@32
v36@0:8@"NSString"16@"NSDictionary"24B32
v32@0:8@"NSArray"16@"NSArray"24
v48@0:8@"NSString"16Q24Q32Q40
v32@0:8q16@"NSError"24
IMDaemonListenerAVProtocol
v56@0:8@16@24I32@36I44@48
v48@0:8@"NSString"16@"NSString"24@"NSDictionary"32@"NSDictionary"40
v48@0:8@"NSString"16@"NSString"24@"NSDictionary"32@"NSData"40
v56@0:8@"NSString"16@"NSString"24I32@"NSDictionary"36I44@"NSDictionary"48
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSDictionary"40
v36@0:8@"NSString"16@"NSString"24B32
IMDaemonListenerChatMessageHistoryProtocol
v56@0:8@16@24@32@40q48
v72@0:8@16@24@32q40q48@56B64B68
v40@0:8@"NSString"16@"IMMessageItem"24@"NSArray"32
v56@0:8@"NSString"16@"NSString"24@"NSArray"32@"NSArray"40q48
v72@0:8@"NSString"16@"NSString"24@"NSArray"32q40q48@"NSArray"56B64B68
v48@0:8@"NSString"16@"NSString"24@"NSArray"32@"NSArray"40
v48@0:8@"NSString"16@"NSString"24@"NSArray"32@"NSNumber"40
IMDaemonListenerChatProtocol
v32@0:8@16d24
v52@0:8@16@24C32@36@44
v36@0:8@16B24@28
v68@0:8@16@24C32@36@44@52@60
v60@0:8@16@24C32@36@44@52
v72@0:8@16@24C32@36@44@52@60B68
v56@0:8@16@24C32@36@44B52
v72@0:8@16@24C32@36@44@52i60@64
v64@0:8@16@24C32@36@44@52i60
v56@0:8@16@24@32@40B48B52
v28@0:8I16@20
v32@0:8@"NSString"16d24
v32@0:8@"NSString"16@"NSNumber"24
v52@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSDictionary"44
v52@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSError"44
v36@0:8@"NSString"16B24@"NSString"28
v32@0:8@"NSString"16@"NSArray"24
v52@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"IMMessageItem"44
v68@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSString"44@"NSString"52@"IMMessageItem"60
v60@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"IMMessageItem"44@"NSNumber"52
v68@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSString"44@"NSString"52@"IMItem"60
v72@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSString"44@"NSString"52@"NSArray"60B68
v52@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"IMItem"44
v56@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"IMItem"44B52
v52@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSArray"44
v44@0:8@"NSString"16@"NSString"24C32@"NSArray"36
v72@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSString"44@"NSString"52i60@"NSArray"64
v64@0:8@"NSString"16@"NSString"24C32@"NSDictionary"36@"NSString"44@"NSDictionary"52i60
v40@0:8@"NSArray"16@"NSArray"24@"NSString"32
v32@0:8@"NSArray"16@"NSDictionary"24
v44@0:8@"NSString"16C24@"NSString"28@"NSDictionary"36
v56@0:8@"NSString"16@"NSNumber"24@"NSString"32@"NSString"40@"NSString"48
v56@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40B48B52
IMDaemonListenerFileProviderProtocol
v40@0:8@"NSString"16@"NSString"24@"NSError"32
v32@0:8@"NSURL"16@"NSError"24
IMDaemonListenerNotificationsProtocol
IMDaemonListenerServiceProtocol
v84@0:8@16@24@32@40I48B52@56Q64I72@76
v48@0:8@16I24@28i36@40
v32@0:8@16Q24
v28@0:8@16I24
v84@0:8@"NSString"16@"NSDictionary"24@"NSArray"32@"NSArray"40I48B52@"NSDictionary"56Q64I72@"NSString"76
v48@0:8@"NSString"16I24@"NSString"28i36@"NSDictionary"40
v32@0:8@"NSString"16Q24
v28@0:8@"NSString"16I24
v48@0:8@"NSString"16@"NSString"24@"NSData"32@"NSString"40
v40@0:8@"NSString"16@"NSDictionary"24@"NSDictionary"32
v40@0:8@"NSString"16@"NSArray"24@"NSError"32
v32@0:8@"NSString"16@"NSError"24
v24@0:8@"NSData"16
Unable to save notice, can't retrieve object context
Unable to save notice, error: %s
Saved notice: %@
Unable to get notices, can't retrieve object context
Failed to retrieve notices, error: %s
Retrieved %ld notices for urls (%ld: %s
No URLs provided, unable to retrieve any notices
Unable to get metadata from PersistedCollaborationNotice, %@
Unable to get guidString from PersistedCollaborationNotice, %@
Unable to delete notice, can't retrieve object context
guidString == %@
Failed to delete notice, error: %s
Found %ld notices for guidString: %s
No notices to delete for guidString: %s
Unable to delete notices, can't retrieve object context
Failed to delete notices, error: %s
Successfully deleted %ld notices
No notices to delete
IMDCollaborationNoticeStore
v24@0:8@16
$__lazy_storage_$_persistenceContainer
Successfully deleted notice with guidString: %s, %@
Fatal error
PersistedCollaborationNotice
IMDCollaboration
Unable to generate objectModelURL, aborting.
Unable to resolve collaboration notice directory path %s
collaborationNotices.db
v24@?0@"NSPersistentStoreDescription"8@"NSError"16
Loading store at storeURL: %s with persistenceContainer:%@
Successfully loaded store: %s
Error loading store: %s
com.apple.Messages.ClientConnection
No current client connection when invoking request for %s, ignoring request
_TtC12IMDaemonCore16ClientConnection
unlockedConnection
unlockedCapabilities
unlockedID
unlockedSupportedServices
unlockedRequestHandlers
Rejecting %s for client %s as it has insufficient capabilities %s, needs %s
Receiving message from client with PID: %d id: %s selector: %s
q16@0:8
#16@0:8
@16@0:8
@24@0:8:16
v24@0:8B16B20
_TtC12IMDaemonCore28PersistedCollaborationNotice
IMDaemonCore
date
T@"NSDate",N,D,C
guidString
T@"NSString",N,D,C
metadata
T@"NSData",N,D,C
senderHandle
version
Ts,N,D
%@: Account is restricted, not creating session
%@: Created active session: %@ of service type: %@   (Session class: %@)
%@: Reused existing session: %@
%@: Done setting up session: %@
iMessage service found: %@    accounts: %@
   Empty iMessage accounts, created one: %@
   Added, and moving along
   No account created
   We have iMessage acounts, good to go
No iMessage service found
Activating accounts: %@
Deactivating accounts: %@
*** Removing placeholder account: %@
Created IMDCKSyncState in IMDCKUtilities
will update sync state: %@
broadcasting current sync state: %@
broadcasting final requested update: %@
Loading internal party service with bundle: %@
%@: Loading request for service bundle: %@   Loaded: %@
%@: Loading service bundle: %@   Loaded: %@   identifier: %@
%@: Load success: %@    (Error: %@)
%@: Session class: %@
%@: Service properties: %@
%@: Load failed! Disabling any active accounts  (Error: %@)
   => Disabling: %@
Failed to respond to ST request payloadURL == nil
Failed to respond to ST request requestID == nil
Failed to respond to ST request with answer: %@ error: %@
                                        remoteHost: %@
                            isDataConnectionActive: %@
                                       isReachable: %@
                                          isOnCall: %@
                  supportsSimultaneousDataAndVoice: %@
                            isImmediatelyReachable: %@
                               awaitingDataContext: %@
Latest item time is nil, can't update chat's lastTUConversationCreatedDate! item: %@
Cache miss for subscription validation token, not including token on this message
Error fetching subscription validation tokens for handle handleID: %@ Error: %@
Forward declared API is not available, subscriptionValidationTokenForHandle:completion:
Error fetching subscription validation token for handle handleID: %@ Error: %@
Error validating subscription validation token: %@
Received an unknown validity response, ignoring.
Received an invalid validity response, attempting to fix by potentially re-inviting senderHandleID: %@ fromHandleID: %@
Forward declared API is not available, validatePersonalStatusSubscriptionMatchesSubscriptionValidationToken:fromSender:completion:
Invalid state transition attempted %@ -> %@
Invalid state transition attempted %@ -> Complete
Failed to fetch moment share from %@ for message %@ with CMMstate %@
Error fetching moment share from %@. Error: %@
Encountered indefinite failure for moment share %@. Clearing ingestion state state and setting CMMState back to registered for message %@
Moment share %@ has a context in state %@ and needs to reset transfers
Failed to accept the share at url: %@, error: %@ for message %@
Scheduling retry of moment share fetch after %{public}@ seconds
Accept failed too many times for moment share %@. Giving up
Attempted to accept a moment share that is in an unknown state %@
Regenerating transfers for a moment share is not supported
Error setting syndication identifier to %@ on asset with UUID %@: %@
Message %@: Failed request for resource file URLs for asset: %@, error: %@
Failed to create temporary directory: %@
Failed to remove existing item from temporary directory: %@
Failed to copy item to temporary directory: %@
Failed copy photo/video URL: %@, error: %@
Failed copy of video complement URL: %@, error: %@
Failed fetch for resources to share for asset: %@, error: %@
Failed copy of file URLs: %@, error: %@
Failed export for asset: %@, error: %@
Failed to create export request for asset: %@, error: %@
Unable to mark message %@ as completed when it should be
Missing transfer map for message %@
Unexpected number of curated assets for moment share: %{public}@
Target count requested before a moment share has been fetched for message %@
Unknown fetch type for moment share %@. This may lead to issues ingesting the moment share
syncing finished
clearing all sync states
Set starting periodic sync
Set starting initial sync
Setting controller sync type to %@ for record type: %@
Key value store will update: %@
Updating syncing to: %@
Key value store did update value: %@
broadcasting sync state changed event: %@
Account in need of repair detected, setting sync error
Failed to respond to Family invite payloadURL == nil
Failed to respond to Family invite inviteUrl == nil
%s: Bailing due to empty handle set. This could mean we attempted to send a notice to ourselves.
%s: Bailing because collaboration membership (%@) exceeds the fanout threshold (%@).
Unable to create noticeMessage to send, aborting.
Failed to send Collaboration Notice with error: %@
%s: Bailing receive notice. Zero length fromHandle. Dropping message
%s: Bailing receive notice for highlightEvent generated by self (%@). Dropping message
Error fetching local user availability for contact. Error: %@
Error querying DND state: %@
DND state is nil
Chunk contained no valid message guids, stopping chunking.
Error retrieving allowed auto reply audience. Error: %@
Error retrieving allowed custom auto reply message. Error: %@
Missing last sent date for chatID %@
Nickname data loading has previously caused imagent to crash, deleting all handled and pending nickname data to allow imagent to properly handle future nickname changes.
SyndicationAction is nil when attempting to update a message
MessageGUID is nil when attempting to update a message
MessageItem is nil when attempting to update a message
SyndicationRange is nil when attempting to update a message
Updated syndication ranges for message: %@
Did NOT update syndication ranges for message: %@
New Range:
Original Ranges:
IMDMessageRecordRef was not created for %@
IMMessageItem was not created for %@
Record of itemType TUConversation did not recover as IMTUConversationItem record: %@ recovered as: %@
Failed to get a chat for message to be marked as unread: %@
Failed to find message to mark as unread for GUID:%@
Will delete old ack %@: %@: %lld
Will NOT delete old ack %@: %@: %lld
Edited message contains a file transfer not found in original message. FileTransferGuid: %@
Nil syndication date parameter
Syndication Date (%@ vs %@) is in the past. Not setting syndication type %ld for chat: %@
Setting syndication type to: %ld, syndication date to: %@, for chat: %@
Should never have nil modification date with non-default autoDonationBehavior
handle: %@  account: %@  chatIdentifier: %@  guid: %@
handles: %@  account: %@  chatIdentifier: %@  guid: %@
room: %@  account: %@  chatIdentifier: %@  guid: %@
Could not derive message item from legacy GUID %@
ASSERTION FAILED: %s is unexpectedly nil in "%s" at line %d [%@]
Deleted chat in %f seconds (%@) 
Updated chat with GUID: %@ donation setting to %@ with SyndicationAction: %@
Chat %@ not updated with incoming SyndicationAction: %@
SyndicationAction is nil when attempting to update IMDChat: %@
Error persisting noticeEventHistory, error: %@
Received sendSyndicationAction!.
error: %d  message: %@  force error: %@
Could not find message to update with message editing unsupported handleIDs. GUID: %@
Could not find message to update with message editing error. GUID: %@
Could not find message to update after succesfully sending edit of message. GUID: %@
Message had previous failed deliveries for message part edits. This edit delivery was successful. Clearing previous failed part delivery. GUID: %@
message: %@
Failed to find chat for sent SyndicationAction: %@
Replacing previous message acknowledgements with new acknowledgment for sent message; sender: '%@':'%@'
name: %@   fromID: %@  toIdentifier:%@  identifier: %@ style: %d
messages: %@
Automatically saving message sent from linked device: %@
Expire message sent from linked device: %@
Found existing message: %@
Date last call ended: %@
Looking for a similar message %f seconds back
Found similar message? %@
 enableTelemetry=YES 
IncomingMessage
Replacing previous message acknowledgements with new acknowledgment for received message; sender: '%@':'%@':'%@'
com.apple.messages.AttachmentDownload
Could not find a session for iMessage service
Couldn't upgrade 1:1 chat to Group chat for conversation %@
Can't upgrade from 1:1 chat to Group chat -- Invalid chat style: %c
Failed to find/create chat for conversation %@
%@ - write account defaults: %@
writeAccountDefaults - Started with %@ as the login ID
writeAccountDefaults - Setting %@ as the login ID
writeAccountDefaults - Removing login ID %@
Adding registration delegate for account %@
IMDAccount added %@, adding corresponding IDSAccount %@
IMDAccount removed %@, removing corresponding IDSAccount %@
Enabling IDSAccount %@
Disabling IDSAccount %@
Received account added %@
Received account updates %@
Received accountRemoved %@
** Received account removed for account: %@, but we can't find an account for it
Received accountEnabled %@
** Received account enabled for account: %@, but we can't find an account for it
Received accountDisabled %@
** Received account disabled for account: %@, but we can't find an account for it
IMDIDSService received registration status changed: %@ (%@)
IMDIDSService received aliases changed to %@: %@ (%@)
IMDIDSService received vetted aliases changed: %@ (%@)
IMDIDSService received profile changed to %@: %@ (%@)
IMDIDSService received login changed to %@: %@ (%@)
IMDIDSService received display name changed to %@: %@ (%@)
 => Registration failed, deactivating...: %@ (%@)
IMDIDSService received refresh registration: %@ (%@)
%@: Initialized!  (Environment: %@)
Dealloc service session: %@
Session activating: %@ on Environment: %@
Session deactivating: %@ on Environment: %@
AppleServiceSession: %@
Client requested re-authenticate (Environment: %@) account: %@
Found account to re-authenticate account: %@
Client requested re-register (Environment: %@)
Found account to re-register account: %@
Client requested de-register (Environment: %@)
Found account to de-register account: %@
Client requested password updated (account: %@)
Found account to update password account: %@
Client updateAuthorizationCredentials (account: %@)
Found account to updateAuthorizationCredentials: %@
Client request to remove aliases: %@ account: %@
Found account to remove aliases: %@  account: %@
Client request to add aliases: %@  account: %@
Found account to add aliases: %@  account: %@
Client request to validate: %@  account: %@
Found account to validate aliases: %@  account: %@
Client request to unvalidate: %@  account: %@
Found account to unvalidate aliases: %@  account: %@
Client request to validate profile info: %@
Found account to validate profile info account: %@
Checking specified caller ID: %@ on account: %@, accountDefaults: %@
Caller ID isn't validated, clearing caller ID settings
 Caller ID is valid, registered and in good shape, moving along
No caller ID specified, moving along
%@ callerID - choosing %@ from %@
$ss12CaseIterableP
So8NSObjectC
yyXlG
So13IMMessageItemC
Sbz_Xx
XDXMT
ScPSg
SgXw
ytIeghHr_
ySSG
ScCySb
So8NSObjectCSg
So17OS_dispatch_queueC
So17IMDServiceSessionC
So21TUConversationManagerC
So14IMFeatureFlagsC
ScTyyt
_yptG
_ypt
ySo8TUHandleCG
So14TUConversationC
SSSg
ypSg
ypGSg
So19SwiftNativeNSObjectC
SaySSG
So13NSXPCListenerC
_pXpG
So15NSXPCConnectionC
yXlIeyBy_
$s12IMDaemonCore33IncomingClientConnectionListeningP
yx_GG
SS4guid_
5rangetSg
SS4guid_
5rangetSgz_Xx
Sgz_Xx
ySS3key_
4typetG
$sSY
$s12IMDaemonCore21ClientRequestHandlingP
IeyBh_
$ss11GlobalActorP
Iegh_
So10IMDServiceCSg
yypG
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
ypIegn_
yypc
yyypcG
So21NSPersistentContainerCSgSg
_pSg
$ss12IdentifiableP
ShySSG
_A7At
So24IMDaemonListenerProtocol_pSg
So24IMDaemonListenerProtocol_p
ySSG
$s12IMDaemonCore24ClientConnectionManagingP
So15NSManagedObjectC
AllCases
parser
editedMesssage
sharedUtilitiesHelloWorld
persistenceHelloWorld
queue
serviceSession
conversationManager
featureFlags
newChatListenerTask
$defaultActor
machServiceName
allowedEntitlements
listener
clients
requestHandlers
clientConnectionWorkloop
wrappingPairs
prefix
suffix
associatedValue
parser
location
length
RawValue
rawValue
ActorType
connectionListener
rawValue
ArrayLiteralElement
RawValue
Element
$__lazy_storage_$_persistenceContainer
queue
unlockedConnection
unlockedCapabilities
unlockedID
unlockedSupportedServices
unlockedRequestHandlers
IMDMomentShareIngestionContext
IMDAccount
IMSystemMonitorListener
IMDBroadcastController
IMDMessageHistorySyncTaskLiveFactory
IMDMessageHistorySyncTaskFactory
NSObject
IMDSIMSubscriptionUpdateTracker
IMReadReceiptsMetrics
IMDAccountController
IDSAccountDelegate
Mentions
IMSpamFilterHelper
IMDCKUtilities
IMDCKSyncStateDelegate
IMDMessageHistoryIDSTransactionLogSyncTask
IMDMessageHistorySyncTask
IMDMessageHistoryCKChatSyncTask
IMDCKSyncStatsCollector
IMDClientRequestContext
IMDCKSyncTokenStore
IMDService
IMDScreenTimeAskReponseHandler
IMDMessageActiveDevice
IMDaemonCoreHelloWorldClass
IMDOneTimeCodeManager
IMDSoundUtilities
IMDMessageProcessingController
IMDSpamMessageCreator
IMDWorkQueue
IMDServiceSession
IMConnectionMonitorDelegate
IMServiceSessionProtocol
IMDSpamController
IMDBackwardCompatibilityMessageIdentifier
IMDCKExitManager
IMDRecordZoneManager
APSConnectionDelegate
IMDCKMessageSyncCKOperationFactory
IMDAvailabilityVerificationManager
SKStatusSubscriptionServiceDelegate
IMDAvailabilityVerificationTokens
IMDLocalDaemon
IMDDistributedNotificationXPCEventStreamHandler
IMDTransferDictionaries
IMDChatVocabularyUpdater
INSpeakable
IMDLegactDTController
IDSServiceDelegate
IMDCallerIDUtilities
IMDMomentShareManager
PHPhotoLibraryChangeObserver
IMDCallManager
IMStateLoggable
IMDCKMockRecordKeyZone
DeferredSavingAdditions
IMDCKAttachmentSyncController
IMDCKSyncState
IMKeyValueCollectionDelegate
IMDMessageHistoryFirstUnlockReplaySyncTask
IMDFamilyInviteReponseHandler
IMDPlainTextTapbackInterpreter
IMLegacyAdditions
Hubble
IMDFileTransferCenter
IMPowerLogChatDescription
IMDCKAttachmentSyncCKOperationFactory
IMDExposureNotificationManager
IMDQuickSwitchController
IMDCollaborationNoticeDispatcher
IMItem_CKRecord
IMDCKCacheDeleteManager
IMDAvailabilityAutoReplier
IMDAutoReplying
IMDCKMockDatabase
IMDNotificationResponseUtilities
UNUserNotificationCenterDelegate
IMDCKChatSyncCKOperationFactory
IMDServiceController
IMDNicknameController
IMDMessageSortOrderAssigner
IMDMessageStore
IMFocusStateManagerDelegate
IMDPhotosSyndicationLibraryChangeListener
IMDChat
IMDCKRecordSaltManager
IMDChatRegistry
IMDCKDatabaseManager
CKRecord_IMDaemonCore
IMDCKMockRecordZone
IMDCKRampManager
IMDDaemonPropertyManager
IMDInconsistency
IMDAttachmentStore
IMDCKAbstractSyncController
IMDDeletePartsHelper
MessageProcessing
IMDChatStore
IMDLocationSharingController
IMDCKMessageSyncController
IMDCKRecoverableMessageSyncController
IMDaemonCoreMessageReceivedTimingAdditions
IMDaemonCoreIncomingMessageTracking
IMDInvocationForwarder
SyndicationActions
IMDCollaborationNoticeRateLimiter
IMFileTransfer_CKRecord
IMDReplayController
CloudKit
IMDCKSyncController
IMDXPCEventStreamHandlerDelegate
IMDCKAbstractSyncControllerDelegate
IMMessagesToTrack
IMDServiceSession_Chat
IMDiMessageIDSDelegateHandlerRegistry
IMTransferServicesController_PreviewGeneration
IMDCKInitialAttachmentSyncController
IMDMessageHistorySyncController
IMDCKChatSyncController
IMDCollaborationNoticeController
IMDMessagePTask
IMDStickerRegistry
IMDRecentsController
IMDServiceSession_BuddyList
IMDCKUpdateSyncController
IMDMessagePTaskXPCStore
IMDMessagePTaskStore
Messages
IMDServiceSession_Base
IMDReplayStorageIterationContext
IMDReplayStorageController
IMDCKInitialMessageSyncController
IMDXPCEventStreamHandler
IMDServiceSession_Firewall
IMDServiceSession_LoginManagement
IMDHandle
IMDServiceSession_MessageReplay
IMDChat_CKRecord
IMDBadgeUtilities
IMDChatRegistry_CallManagement
TUConversationManagerDelegate
CKRecordUtilities
IMDSpotlightIndexDelegate
CSSearchableIndexDelegate
IMDIDSAccount
IMDIDSService
IDSAccountControllerDelegate
IDSAccountRegistrationDelegate
IMDAppleServiceSession
logPrivatizedImageReceivedEvent:
originalMessageGUID
setKnownToServer:
IMPhoneNumbersEnabledForMultipleSubscriptionDevice
isEmote
deleteAttachmentsForTransfer:
syndicationStartDate
originalMessageGuid
im_lastPathComponent
writeToURL:atomically:
aa_personID
setVocabulary:ofType:
isEmpty
_setTransferState:
originalTextRangesByPartIndex
syndicationStatus
im_livePhotoVideoPath
writeToURL:error:
isEnabledForDataclass:
aa_primaryAppleAccount
setWantsNotificationResponsesDelivered
deleteBatchWithContext:error:
zoneID
aa_primaryAppleAccountWithCompletion:
isEngramEnabled
setWasDetectedAsSWYSpam:
attribute:atIndex:effectiveRange:
zoneName
otherHandle
aa_primaryAppleAccountWithPreloadedDataclasses
tearDownSessionForChatIdentifier:
attributesAtIndex:effectiveRange:
URLWithString:
clear
registration
absoluteString
attributesOfItemAtPath:error:
imageFilePath
setLastName:
setWatchesSystemLockState:
acceptMomentShareWithCompletion:
isEqualToData:
attributionInfo
setWithArray:
isEqualToDate:
authKitAccountWithAltDSID:
existsAtLocalPath
textMessageWithMessage:embeddedURLs:
clearConnectedToPowerWifiOver20Hours
paddingForMessageOfSize:
deleteDatabase
setWithObject:
isEqualToDictionary:
acceptableErrorCodeWhileDeleting:
threadDictionary
parentChatID
authenticateAccount
isEqualToIgnoringCase:
regularExpressionWithPattern:options:error:
setWithObjects:
autoBugCaptureWithSubType:errorPayload:
threadGuid
longLongValue
parentalControls
incrementCoreDuetSyncAttempts
isEqualToNumber:
deleteInteractionsWithChatGUIDs:
setXpcActivity:
threadIdentifier
setAccount:
partKeyForAttachmentGUID:
isEqualToSet:
shareDirection
deleteInteractionsWithMessageGUIDs:
lowercaseString
threadPart
isEqualToString:
shareStatus
lsAppRecordForURL:checkInstalledAppsOnly:
remoteHost
isEquivalentToHandle:
mainBundle
timeDelivered
setActionType:
participantChangeType
indexOfObject:
isExpanseEnabled
expireState
timeExpressiveSendPlayed
mainQueue
indexOfObject:matchingComparison:
isExpirable
exportRequestForAsset:error:
timeExpressiveSentPlayed
mainRunLoop
passwordUpdated
removeAliases:
setAllowsCellularAccess:
timeIntervalSince1970
exportWithOptions:completionHandler:
initForReadingFromData:error:
path
setLocale:
removeAllObjects
timeIntervalSinceDate:
mainThread
exposureNotificationEnabled
pathExtension
isFinished
removeAttribute:range:
timeIntervalSinceNow
expressiveSendId
autoReplyMessageWithReply:
initRequiringSecureCoding:
pathForResource:ofType:
cloudKitRecordChangeTag
timeIntervalSinceReferenceDate
expressiveSendStyleID
payloadData
_dictionaryRepresentation
isFromMomentShare
extractRecordIDsDeletedFromCKPartialError:
timePlayed
cloudKitServerChangeTokenBlob
isFullyRetracted
extractRecordIDsNotFoundFromCKPartialError:
timeRead
sharedInstanceForBagType:
isGelatoNoticesEnabled
deleteSearchableItemsWithDomainIdentifiers:bundleID:withCompletion:
mapID:usingKey:
timerWithTimeInterval:repeats:block:
setAssociatedMessageGUID:
title
avatar
setMessageActionType:
sharedMomentSharePhotoLibrary
removeItemAtPath:error:
averageTransferRate
setAssociatedMessageGuid:
setMessageBody:
cmmAssetOffset
initWithArray:
perRecordCompletionBlock
removeItemAtURL:error:
balloonBundleID
totalBytes
setAssociatedMessageRange:
CKPartialError:hasErrorCode:
setMessageBodyData:
cmmState
sharedToneManager
isImmediatelyReachable
initWithAssociatedChatGUID:
removeLastObject
setAssociatedMessageRangeLength:
baloonBundleId
totalChangeCount
fetchAllChanges
code
performChanges:completionHandler:
setMessageGUID:
removeListener:
sharedVocabulary
setAssociatedMessageRangeLocation:
totalTimeForKey:
batchProcessingBlock
setMessageSubject:
trackEvent:
fetchAssetsInAssetCollection:options:
setAssociatedMessageType:
setMessageSummaryInfo:
commSafetySensitive
_appearsToBeDSID
trackEvent:withCount:
setAtomic:
_appearsToBeEmail
fetchAssetsWithOptions:
setMmcsEncryptionSupport:
commSafetyUIEnabled
removeObject:
isIncoming
desiredKeys
setAttributes:ofItemAtPath:error:
trackEvent:withDictionary:
initWithBundleIdentifier:
isInternalInstall
destinationCallerID
removeObjectAtIndex:
setAttributionInfo:
fetchAttachmentRecordsFilteredUsingPredicate:limit:completionHandler:
performSelector:withObject:afterDelay:
setModifyRecordZonesCompletionBlock:
trackEvent:withStatistic:
compare:
removeObjectForKey:
shouldFilterUnreadMessageCount
isInternationalSpamFilteringEnabled
trackSpamEvent:
setModifyRecordsCompletionBlock:
setAutomaticallyRetryNetworkFailures:
transactionLogMessageFromDictionaryRepresentation:
permanentHighQualityLocalPath
initWithCalendarIdentifier:
removeObjectIdenticalTo:
isKnownContact:
transcodeLocalTransferPayloadData:balloonBundleID:completionBlock:
initWithCapacity:
setMsgid:
removeObjectsForKeys:
fetchChatRecordsFilteredUsingPredicate:sortedUsingDescriptors:limit:completionHandler:
bizIntent
setName:
removeObjectsInArray:
isLightweightMember
setAvatar:
initWithCoder:
persistData:forKey:error:
fetchChatRecordsFilteredUsingPredicate:sortedUsingLastMessageDateAscending:olderThan:limit:completionHandler:
completionBlock
isLoaded
removeObserver:
deviceForFromID:
accountInfo
fetchChatRecordsWithPinningIdentifier:completionHandler:
SIMInserted
setBadgeCount:withCompletionHandler:
setNotificationIDSTokenURI:
initWithContainerID:options:
accountInfoWithCompletionHandler:
removeObserver:name:object:
setObject:forKey:
setBadgeString:withCompletionHandler:
initWithContainerIdentifier:environment:
components:fromDate:
deviceInformationString
setBalloonBundleID:
setObject:forKey:inDomain:
initWithContentsOfFile:
componentsJoinedByString:
_lastAveragedBytes
deviceIsLockedDown
transferState
setBaloonBundleId:
maxStartDateForRanges:
setObject:forKeyedSubscript:
componentsSeparatedByString:
_lastAveragedInterval
removeRegistrationDelegate:
setBatchProcessingBlock:
initWithData:
componentsWithURL:resolvingAgainstBaseURL:
setOriginalGUID:
accountPartition
isLocatingMessage
removeTimingForKey:
blocklistGroupId:
transferredFilename
setBatchSize:
initWithData:encoding:
accountRegionIsCandidateForHawking:
isLocation
fetchCuratedAssetsInAssetCollection:options:
URLHostAllowedCharacterSet
initWithDictionary:
setOriginalMessageGUID:
setBizIntent:
deviceType
isMainThread
accountRegisteredURIs
fetchCurrentDeviceIDWithCompletionHandler:
bodyData
setBody:
trimmedString
_enumerateBodyByPartsWithIndexesDeleted:rangesDeletedMap:block:
setOriginalMessageGuid:
personCentricIDForChatWithGUID:chatIdentifier:chatStyle:groupID:displayName:participantIDs:
initWithDictionary:uniqueID:serviceName:
repairSharedFocusStatusFollowingFailedValidationWithHandleID:fromHandleID:completion:
devices
boolForKey:withDefault:
setBodyData:
fetchLastMessageRecordForChatRecordWithRowID:completionHandler:
initWithDictionaryRepresentation:
setOriginalTextRangesByPartIndex:
dictionary
shouldSendMeCard
setBool:forDomain:forKey:
messageActionType
initWithDomain:
photoAnalysisInSpotlightEnabled
isNetworkUp
replaceObjectAtIndex:withObject:
setBool:forKey:
messageBodyData
photoShareURLFromPluginBundleID:contentString:payload:
initWithDomain:code:userInfo:
setOtherCountryCode:
type
messageContainsSurfDD:
initWithEnvironmentName:namedDelegatePort:queue:
setOtherHandle:
_auxVideoPathIfItExists
isNull
dictionaryWithCapacity:
unarchivedObjectOfClass:fromData:error:
setOtherUnformattedID:
dictionaryWithContentsOfFile:
unarchivedObjectOfClasses:fromData:error:
setPadding:
initWithFileURL:
dictionaryWithDictionary:
isOlderThanItem:
messageGUID
initWithFormat:
setParentChatID:
pluginSessionGUID
dictionaryWithObject:forKey:
isOnTelephonyCall
replyToGUID
showPinningStatusTextForBundleID:
fetchMomentShareFromShareURL:options:completionHandler:
unionSet:
setParticipantChangeType:
initWithFormat:arguments:
dictionaryWithObjects:forKeys:
isRead
acquireAssertionToUnsuspendProcess
uniqueID
messageID
_startBatchWrite
configurationsByRecordZoneID
dictionaryWithObjects:forKeys:count:
actionIdentifier
isRecentlyDeletedEnabled
unload
_bestGuessURI
fetchOptions
initWithHost:port:delegate:
setPayloadData:
dictionaryWithObjectsAndKeys:
actionIsGroupPhoto
isReducedChatCacheSizeEnabled
messagePartGUID
connectedToPowerAndWifiForOver20Hours
fetchPasswordForProfileID:username:service:outRequestID:completionBlock:
actionType
size
unlock
fetchRecordZoneChangesCompletionBlock
sizePreview:constraints:completionBlock:blockUntilReply:
unprefixedURI
fetchRecordsCompletionBlock
setPerRecordCompletionBlock:
setByAddingObjectsFromSet:
setCMMAssetOffset:
fetchResourcesToShareForAsset:requestOptions:error:
setPerRecordProgressBlock:
messageParts
activateWithCompletionHandler:
isSMSSubClassificationEnabled
fetchResultAfterChanges
setCMMState:
setPerRecordSaveBlock:
initWithImageName:imageFilePath:
consumedSessionPayloads
sortDescriptorWithKey:ascending:
setCMMStateToRegisteredAndAssetOffsetTo:
fetchSMSFilterParamForCategory:subCategory:
initWithIndex:
contactsAvatarRecipeData
sortID
isSafeToDeleteAttachmentPath:
fetchSubscriptionWithID:completionHandler:
messageSubject
containsObject:
initWithIndexesInRange:
isSensitiveImage:withChatID:completionHandler:
initWithInputURL:outputURL:identifier:operation:completionBlock:queue:
unregisterAccount
containsObjectIdenticalTo:
request
sortUsingComparator:
postCoreAutomationNotificationFinishedPeriodicSyncNotificationWithStartTime:chatsDidsync:messagesDidSync:attachmentsDidSync:recoverableMessagesDidSync:
isSent
_randomTemporaryPathWithFileName:
unregisterChangeObserver:
fetchUserRecordIDWithCompletionHandler:
postCoreAutomationNotificationFinishedPurgingAttachments:withErrorString:
_strictlyUnarchivedObjectOfClasses:fromData:error:
containsRichLink
isSpam
sortUsingSelector:
requestExpireStateForMessageGuid:completionBlock:
messageSyncP2Enabled
setChangeType:
unsignedIntValue
initWithKeyValueStorage:
containsString:
sortedArrayUsingComparator:
requestExpireStateWithCompletion:
unsignedIntegerValue
content
UTF8String
initWithLongLong:
isSticker
didNotifyRecipient
postCoreAutomationNotificationWithDictionary:withVerboseLogging:
spotlightItemRecorder
requestPasswordForUsername:service:badPassword:showForgotPassword:shouldRememberPassword:outRequestID:completionBlock:
fileExistsAtPath:
setPhotoLibrary:
unsignedLongLongValue
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
initWithMessageBody:messageGUID:
activeFocusModeMatchesConversationWithHandleStrings:
requestRoutingForMessageGuid:inChat:error:completionBlock:
fileExistsAtPath:isDirectory:
requestRoutingWithCompletion:
fileHFSCreatorCode
setPreviousServerChangeToken:
unvalidateAliases:
initWithMessagePartText:dateSent:backwardCompatibleMessageGUID:
standardUserDefaults
activeModeConfiguration
requestWatchdogForMessageGuid:completionBlock:
fileHFSFlags
setCloudKitRecordChangeTag:
postMessage:category:
updateAccountActivation
start
requestWatchdogWithCompletion:
fileHFSTypeCode
copy
postNotificationName:object:
updateAccountWithAccountInfo:
startDate
requiresDataConnectionActivation
setCloudKitServerChangeTokenBlob:
postNotificationName:object:userInfo:
setProtobufAction:forIncomingRequestsOfType:
fileSize
setQualityOfService:
copyDictionaryRepresentation
initWithObject:title:queue:
isSystemLocked
addAliases:
fileSystemRepresentation
setQuantity:
initWithObjects:
updateAuthorizationCredentials:token:
startTimingForKey:
isSystemMessage
addAttribute:value:range:
didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:useMessageSuppression:completionBlock:
bundleIdentifier
setCmmAssetOffset:
initWithObjectsAndKeys:
setRecordChangedBlock:
predicateWithFormat:
isTypingMessage
addBlock:withTimeout:forKey:description:
setCmmState:
cStringUsingEncoding:
initWithPath:storeName:dataProtectionClass:
preview
copyItemAtPath:toPath:error:
setRecordFetchedBlock:
isUnderFirstDataProtectionLock
copyItemAtURL:toURL:error:
setRecordID:
initWithPhotoLibraryURL:
status
setCommSafetySensitive:
principalClass
setRecordType:
initWithProtobufData:type:isResponse:
isUnfinished
setCompletionBlock:
metricAttachmentValidation:attachmentSize:operationalErrorDomain:operationalErrorCode:validationErrorDomain:validationErrorCode:
setRecordWithIDWasDeletedBlock:
initWithProxyProtocol:proxyHost:proxyPort:delegate:
addDelegate:
stickerUserInfo
setConfiguration:
fileTransferGUIDs
initWithRecordIDs:
setRecordZoneChangeTokensUpdatedBlock:
privateCloudDatabase
isUpdateFromNickname:withOptions:
setConfigurationsByRecordZoneID:
initWithRecordName:zoneID:
setRecordZoneFetchCompletionBlock:
_removeAccount:
processInfo
addEntriesFromDictionary:
stopTimingForKey:
respondToAskForTimeRequestWithIdentifier:answer:error:
updateConnectedToPowerWifiIntervalIfConnected
setConsumedSessionPayloads:
micGroupPhotoEnabled
initWithRecordType:recordID:
coreSpotlightDeleteAttachmentGUIDs:
response
addErrorToArray:forKey:
fileURL
setContactsAvatarRecipeData:
initWithRecordZoneIDs:
responseForError:attempt:retryInterval:
addFailedEditPartIndex:
fileURLWithPath:
mimeType
countByEnumeratingWithState:objects:count:
initWithRecordZoneIDs:configurationsByRecordZoneID:
addFailedRetractPartIndex:
_messageItemWithIndexesDeleted:subRangesToDeleteMapping:deleteSubject:deleteTransferCallback:createItemCallback:fromMessageItem:
isValid
minusSet:
callStackSymbols
fileURLWithPath:isDirectory:
initWithRecordZonesToSave:recordZoneIDsToDelete:
isValidJSONObject:
resultsLimit
filename
mode
initWithRecordsToSave:recordIDsToDelete:
isValidOneTimeCode:
addIndex:
modificationDate
initWithRemoteHost:delegate:
processName
isoCountryCode
retractedPartIndexes
createAndPersistLivePhotoBundleIfNecessary
addListener:
retrieveProxyAccountSettings
modifyRecordsCompletionBlock
productBuildVersion
setReplyToGUID:
retrieveProxySettings
finishEncoding
setCreatedDate:
setRepresentedApplicationBundle:
profileID
initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:threadIdentifier:
fireDate
canMarkPurgable
profileValidationStatus
setResultHandlerQueue:
initWithSender:time:guid:type:
AuxGUIDFromFileTransferGUID:
retryToParticipant
canSend
setDateFormat:
firstObject
moveItemAtPath:toPath:error:
setResultsLimit:
setDefaultConfiguration:
moveItemAtURL:toURL:error:
initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:bizIntent:locale:errorType:threadIdentifier:syndicationRanges:syncedSyndicationRanges:partCount:dateEdited:
reverseObjectEnumerator
fixIMTranscoderAgentPriorityInversion
initWithSerializedError_im:
moveMessageRecordsToRecoveryForChatRecordsWithGUIDs:deleteDate:
setRetryToParticipant:
differenceFromDate:
addNewAttachmentsSyncedCount:
richLinkURLs
moveMessageRecordsToRecoveryForMessageGUIDs:deleteDate:
direction
stringByAddingPercentEncodingWithAllowedCharacters:
addNewChatsSyncedCount:
cancelPreviousPerformRequestsWithTarget:
forceAutoBugCaptureWithSubType:errorPayload:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
initWithService:
_reregisterAndReidentify:
setSavePolicy:
stringByAddingURLEscapes
addNewMessagesSyncedCount:
roomNameIsProbablyAutomaticallyGenerated
cancelPreviousPerformRequestsWithTarget:selector:object:
setDesiredKeys:
formUnionWithCharacterSet:
setSender:
disableServiceSession:
stringByAppendingPathComponent:
cancelRequestID:serviceIdentifier:
createFileAtPath:contents:attributes:
initWithSet:
addObject:
sandboxToken
stringByAppendingPathExtension:
msgid
initWithStatusTypeIdentifier:
publicCloudDatabase
stringByAppendingString:
addObjectsFromArray:
keyEnumerator
updateMessagesRanges:withMessagePartSyndicationRanges:didUpdate:
punctuationCharacterSet
generatePreview:previewURL:constraints:balloonBundleID:completionBlock:blockUntilReply:
addObserver:selector:name:object:
stringByDeletingLastPathComponent
mutableCopy
initWithString:
createOTCFromMessageBody:sender:guid:
doesNotRecognizeSelector:
stringByDeletingPathExtension
addObserverForName:object:queue:usingBlock:
saveAttachmentsForTransfer:chatGUID:storeAtExternalLocation:completion:
setDirection:
generateUnusedChatIdentifierForGroupChatWithServiceName:chatWithChatIdentifierExists:
initWithString:attributes:
domain
stringByExpandingTildeInPath
setDisableMetadataCorrections:
_resetTransferStateIfAttachmentIsMissingAndDownloadable
generatedRoomNameForGroupChat
stringByRemovingCharactersFromSet:
name
category
stringByRemovingWhitespace
doubleValue
setDiscretionaryNetworkBehavior:
changeDetailsForFetchResult:
getBoolFromDomain:forKey:
setShareDirection:
initWithSyndicationAction:
createTodaysStatisticDictionaryIfNeeded
addRegistrationDelegate:queue:
changeDetailsForObject:
getBoolFromDomain:forKey:defaultValue:
qualityOfService
createUniqueDirectoryWithName:atPath:ofType:
setShareStatus:
initWithSyndicationType:messagePartRange:syndicationStartDate:syndicationStatus:
saveSubscription:completionHandler:
stringByStandardizingPath
addRetractedPartIndex:
getBytes:length:
setDontAllowRAW:
queryCurrentStateWithError:
stringByTrimmingCharactersInSet:
getCMMAssetOffset
changeRequestForAsset:
queryItems
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
getCMMState
changeType
createdDate
initWithTimeIntervalSince1970:
setShouldSendMeCard:
saveVerifiedAccount:withCompletionHandler:
dumpLogsToFolderAtPath:withFileName:lastHours:predicate:includeCKDebug:withCompletion:
stringFromDate:
addTimer:forMode:
setEnabled:forDataclass:
characterAtIndex:
curatedAssetIdentifiers
setSortDescriptors:
initWithTimeIntervalSinceNow:
stringGUID
scanUnsignedLongLong:
dumpMOCLoggingMetaData
setEnabledTopics:
_commitBatchWrite
rangeOfString:
setSortID:
curationProperties
_needsWrapper
scannerWithString:
earlierDate:
getValueFromDomain:forKey:
currentBytes
initWithUUIDString:
rangeValue
stringWithFormat:
emitPreviewGenerationBeginFromUTI:
goConnectedWithLocalSocketAddress:remoteSocketAddress:
setSr:
currentCalendar
rangesFromSerializedString:
initWithUnsignedInteger:
addUserNotification:listener:completionHandler:
stringWithString:
emitPreviewGenerationEndFromUTI:
goDisconnected
setErrorCode:
initWithZoneID:
nextBatch
currentHandler
lastObject
aliasStrings
stringWithUTF8String:
group
nextObject
initWithZoneID:subscriptionID:
scheduledTimerWithTimeInterval:repeats:block:
lastPathComponent
initWithZoneName:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
subCategory
groupActionType
currentThread
initWithZoneName:ownerName:
enableNotifications
setEtag:
currentToneIdentifierForAlertType:
securityLevelForAccount:
enabledAccounts
data
receiveFileTransfer:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:progressBlock:completionBlock:
subarrayWithRange:
semanticType
encodeSystemFieldsWithCoder:
setExpireState:
encodeWithCoder:
subject
setExpressiveSendId:
chatCacheEnabled
dataForKey:error:
setStatus:
encodedData
sendData:toDestinations:priority:options:identifier:error:
setExpressiveSendStyleID:
dataRepresentation
setStickerUserInfo:
UUIDString
dataUsingEncoding:
recordChangeTag
instancesRespondToSelector:
allKeys
laterDate:
setFetchAllChanges:
groupTitle
encryptedValuesByKey
intValue
dataWithBytes:length:
recordChangedBlock
allKeysForObject:
_FTCopyGzippedData
normalizedPhoneNumberHandleForValue:isoCountryCode:
setFetchArchivedRecordsCompletionBlock:
recordID
dataWithJSONObject:options:error:
integerForKey:withDefault:
setSubject:
subscriptionID
_FTDataFromHexString
setFetchLimit:
groupUUID
integerValue
allObjects
_FTOptionallyDecompressData
setFetchNewestChangesFirst:
launchListenerForCapability:
noteCoreDuetSyncEnded
setSwyAppName:
sendMessage:toDestinations:priority:options:identifier:error:
subscriptionValidationTokenForHandle:completion:
_FZBestGuessFZIDType
setFetchPropertySets:
setSwyBundleID:
setFetchRecordZoneChangesCompletionBlock:
guidByStrippingAuxPrefix:
allValues
substringFromIndex:
setFetchRecordZonesCompletionBlock:
recordIDs
chatGUID
length
setFetchRecordsCompletionBlock:
SHA1HexString
librarySpecificFetchOptions
substringToIndex:
notification
datasUpToLimit:deleteContext:error:
allowedAutoReplyAudience:
setFetchUserQuotaCompletionBlock:
linkedUserURIs
supportsDataDetectors
dateByAddingTimeInterval:
altDSIDForAccount:
enumerateAttachmentGUIDsWithBlock:
loadAllChatsProgressivelyEnabled
notificationFromRemoteNotificationDictionary:
_URIFromCanonicalizedPhoneNumber
_copyForEnumerating
dateBySettingHour:minute:second:ofDate:options:
supportsDeviceToDeviceEncryption
loadAndReturnError:
enumerateAttribute:inRange:options:usingBlock:
sendProtobuf:toDestinations:priority:options:identifier:error:
setFileTransferGUIDs:
_URIFromFZIDType:
notificationIDSTokenURI
recordType
invokeWithTarget:
notificationType
supportsFaceTime
setFilename:
chatRecordsFilteredByPredicate:
handleFailureInMethod:object:file:lineNumber:description:
setSyncedSyndicationRanges:
recordZoneChangeTokensUpdatedBlock
dateLastCallEnded
supportsSimultaneousVoiceAndDataRightNow
sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:
setFirstName:
notifyClientsNewSetupInfoAvailable
chatRecordsWithHandles:serviceName:displayName:groupID:style:
IMAKUserInfoChangedNotification
recordZoneFetchCompletionBlock
dateSent
enumerateIndexesUsingBlock:
_setAccount:otherPerson:
uppercaseString
chatRecordsWithIdentifier:
recordZoneID
dateWithTimeIntervalSinceNow:
enumerateKeysAndObjectsUsingBlock:
setGroup:
recordZoneIDs
dateWithTimeIntervalSinceReferenceDate:
enumerateObjectsUsingBlock:
__imArrayByApplyingBlock:
userInfo
IMAKUserInfoChangedAltDSIDKey
setGroupActionType:
setSyndicationIdentifierOnMomentSharedAsset:
_updateWithDictionaryRepresentation:
recordZoneIDsWithPendingArchivedRecords
isAssociatedMessageItem
__imArrayByApplyingBlock:filter:
enumerateObjectsWithOptions:usingBlock:
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
null
_setAveragedTransferRate:lastAveragedInterval:lastAveragedBytes:
anyObject
setSyndicationRanges:
__imArrayByFilteringWithBlock:
enumeratorAtPath:
loadRecoverableMessagesMetadataGroupedByChatGUID
uuid
setGroupTitle:
numberOfMatchesInString:options:range:
isAudioMessage
__imFirstObject
serializedError_im
appendFormat:
error
numberWithBool:
recordsToSave
isAutoDonatingMessages
appendString:
__imSetByApplyingBlock:
numberWithChar:
setThreadGuid:
validateAliases:
isAutoReply
__imSetFromArray
errorArrayForKey:
numberWithDouble:
setThreadIdentifier:
isAuxImage
CKPartialError:onlyHasErrorCodes:
__im_conformsToDomain:
errorCode
numberWithInt:
setHandle:
setThreadPart:
handles
recoverMessageRecordsForChatRecordsWithGUIDs:
isAuxVideo
localPath
errorDescription
__im_countMessageParts
numberWithInteger:
setTime:
array
__im_dateByAddingDays:
numberWithLong:
_setCurrentBytes:totalBytes:
decodeObjectOfClasses:forKey:
isBeingRetried
setTimeDelivered:
validateProfile
errorIndicateDeviceDoesNotHaveKeysToSync:
__im_dateWithCurrentServerTime
localURL
arrayByAddingObjectsFromArray:
numberWithLongLong:
_setDirectory:hfsType:hfsCreator:hfsFlags:
setTimeExpressiveSendPlayed:
arrayByApplyingSelector:
__im_dateWithNanosecondTimeIntervalSinceReferenceDate:
errorIndicatesDeviceConditionsDontAllowSync:
value
locale
numberWithUnsignedChar:
setTimeExpressiveSentPlayed:
localizedDescription
arrayByExcludingObjectsInArray:
__im_diffPartIndexesInEditedMessage:previousMessage:editedPartIndexes:removedPartIndexes:
valueForKey:
numberWithUnsignedInt:
_setError:
errorIndicatesQuotaExceeded:
setHideAttachment:
hasImage
defaultHFSFileManager
setTimePlayed:
arrayWithCapacity:
errorIndicatesUserDeletedZone:
__im_messagePartIndexToRangeMap
numberWithUnsignedInteger:
_setErrorDescription:
localizedName
defaultManager
setTimeRead:
errorIndicatesZoneNotCreated:
arrayWithObject:
localizedStandardRangeOfString:
__im_messagePartMatchingPartIndex:
_setFetchOptions:
hasPrefix:
valueWithBytes:objCType:
setHighlightChangeEventType:
numberWithUnsignedLong:
setTitle:
IMAKUserInfoChangedSecurityLevelKey
errorWithDomain:code:userInfo:
localizedStringForKey:value:table:
arrayWithObjects:
__im_nanosecondTimeInterval
numberWithUnsignedLongLong:
setHistory:forMessagePart:
valueWithRange:
defaultWorkspace
setTotalBytes:
arrayWithObjects:count:
__im_performBlock:
localizedStringWithFormat:
object
hasSuffix:
_setLastUpdatedInterval:
etag
valuesByKey
isCarrierReportJunkEnabled
assetCount
__mainThreadPostNotificationName:object:
serviceForClientIdentifier:
objectAfterChanges
_setLocalPath:
setTransferredFilename:
refreshIDStatusForDestinations:service:listenerID:queue:completionBlock:
lock
__mainThreadPostNotificationName:object:userInfo:
_setLocalURL:
objectAtIndex:
isContact
eventData
objectAtIndexedSubscript:
hideAttachment
isDataConnectionActive
setType:
objectForKey:
setInteger:forKey:
isDateInToday:
wasDeliveredQuietly
eventType
objectForKey:inDomain:
setIsBeingRetried:
isDateInYesterday:
exceptionWithName:reason:userInfo:
objectForKeyedSubscript:
weakRefWithObject:
hour
regionID
isDefaultPairedDevice
setUseZoneWidePCS:
associatedMessageGUID
executablePath
__stringByStrippingAttachmentAndControlCharacters
objectsAtIndexes:
_initWithGUID:filename:isDirectory:localURL:account:otherPerson:totalBytes:hfsType:hfsCreator:hfsFlags:isIncoming:
setUserInfo:
weakToStrongObjectsMapTable
isDelivered
registerAccount
associatedMessageGuid
logDictionary:
wellKnownPhotoLibraryURLForIdentifier:
setUsesNotificationCenter:
associatedMessageRange
whitespaceAndNewlineCharacterSet
setIsIncoming:
registerChangeObserver:
checkResourceIsReachableAndReturnError:
associatedMessageRangeLength
openSensitiveURL:withOptions:
setIsSticker:
setValue:
checkSensitivePhotos
associatedMessageRangeLocation
openURL:configuration:completionHandler:
setValue:forDomain:forKey:
associatedMessageType
operationID
setValue:forKey:
syndicatedItemType
_setStartDate:
originalGUID
syndicationIdentifier
logHandleIDs:checkAdditionalLoggingEnabled:
writeToFile:atomically:encoding:error:
setKnownRecordIDsFromList:
setVariant:
syndicationRanges
writeToFile:options:error:
init
initWithURL:message:inChat:
assetUUIDsToFileTransfers
addTransfers:
clearAllTransfers
completeTransferForAssetUUID:
shareURL
message
chat
momentShare
setMomentShare:
assetsFetch
setAssetsFetch:
fetchType
setFetchType:
state
setState:
.cxx_destruct
_assetUUIDsToFileTransfers
_shareURL
_message
_chat
_momentShare
_assetsFetch
_fetchType
_state
T@"NSURL",R,N,V_shareURL
T@"IMMessageItem",R,N,V_message
T@"IMDChat",R,N,V_chat
T@"PHMomentShare",&,N,V_momentShare
T@"PHFetchResult",&,N,V_assetsFetch
Tq,N,V_fetchType
Tq,N,V_state
T@"NSDictionary",R,N
dealloc
systemDidBecomeIdle
systemDidBecomeUnidle
screenSaverDidStart
screenSaverDidStop
screenLocked
screenUnlocked
systemWillSleep
systemDidWake
systemDidEnterMemoryPressure
systemDidLeaveMemoryPressure
systemWillShutdown
systemApplicationDidEnterBackground
systemApplicationWillEnterForeground
systemApplicationDidBecomeActive
systemApplicationWillResignActive
systemApplicationDidSuspend
systemApplicationDidResume
systemApplicationDidSuspendForEventsOnly
systemApplicationDidResumeForEventsOnly
notificationCenterWillAppear
notificationCenterDidDisappear
systemDidStartBackup
systemDidStopBackup
systemDidFinishMigration
systemRestoreStateDidChange
systemDidFastUserSwitchOut
systemDidFastUserSwitchIn
systemDidLogout
systemDidLock
systemDidUnlock
systemScreenDidPowerUp
systemScreenDidPowerDown
systemDidLeaveFirstDataProtectionLock
systemDidLeaveDataProtectionLock
systemDidEnterDataProtectionLock
initWithAccountID:defaults:service:
accountType
setIsManaged:
isActive
canMakeDowngradeRoutingChecks
wasDisabledAutomatically
setWasDisabledAutomatically:
isDisabled
writeAccountDefaults:
postAccountCapabilities
accountInfoToPost
createSessionIfNecessary
releaseSession
setRegistrationStatus:error:alertInfo:
loginID
_registrationInfo
registrationStatus
registrationError
registrationAlertInfo
setLoginStatus:message:reason:properties:
setLoginStatus:message:
_forceSetLoginStatus:message:reason:properties:
accountDefaults
accountID
setAccountID:
service
setService:
session
setSession:
isManaged
setManaged:
serviceLoginStatus
setServiceLoginStatus:
serviceDisconnectReason
setServiceDisconnectReason:
serviceLoginStatusMessage
setServiceLoginStatusMessage:
isLoading
setLoading:
shouldPublishNowPlaying
setLoginID:
_accountDefaults
_managed
_loading
_shouldPublishNowPlaying
_serviceLoginStatus
_serviceDisconnectReason
_accountID
_service
_session
_serviceLoginStatusMessage
_loginID
loading
TB,N,GisLoading,V_loading
TB,N
TB,R,N,V_shouldPublishNowPlaying
T@"NSString",C,N,V_accountID
T@"NSString",C,N,V_loginID
T@"IMDService",&,N,V_service
T@"IMDServiceSession",&,N,V_session
TI,N,V_serviceLoginStatus
Ti,N,V_serviceDisconnectReason
T@"NSString",C,N,V_serviceLoginStatusMessage
Ti,R,N
T@"NSDictionary",R,&,N
T@"NSDictionary",R,&,N,V_accountDefaults
active
TB,R,N,GisActive
disabled
TB,R,N,GisDisabled
managed
TB,N,GisManaged,V_managed
TB,R,N
Tq,R,N
sharedProvider
registerSharedProvider:
T@"<IMDBroadcasterProviding>",R,N
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
newSyncTaskForType:
_initWithCKSyncController:accountController:replayController:
_newKChatSyncTask
_newFirstUnlockReplaySyncTask
_newIDSTransactionLogSyncTask
_ckSyncController
_accountController
_replayController
sharedTrackerInstance
activeSubscriptionsDidChange
_IMDTrackMetric:ForMessageGUID:
_readReceiptTrackingEnabled
_daemonWillShutdown:
internalName
save
sharedInstance
sharedAccountController
account:isActiveChanged:
account:devicesChanged:
account:nearbyDevicesChanged:
account:connectedDevicesChanged:
load
deferredSave
activateAccount:
activateAccounts:
deactivateAccounts:force:
deactivateAccount:
deactivateAccounts:
deactivateAccount:force:
_isAccountActive:forService:
isAccountActive:
addAccount:
removeAccount:
accounts
accountsForLoginID:onService:
accountForAccountID:
accountForHandle:
accountsForService:
activeAccounts
activeAccountsForService:
connectedAccounts
connectedAccountsForService:
connectingAccounts
connectingAccountsForService:
accountAssociatedWithHandle:
accountForIDSAccountUniqueID:
activeSessions
sessionForAccount:
anySessionForServiceName:
_checkPowerAssertion
_rebuildOperationalAccountsCache
_operationalAccounts
_isOperationalForAccount:
_nicknameController
setNetworkDataAvailable:
networkDataAvailable
_accounts
_activeAccounts
_operationalAccountsCache
_isLoading
_isFirstLoad
_networkDataAvailable
TB,R,N,V_isLoading
T@"NSArray",R,N
TB,N,V_networkDataAvailable
activeAliases
activeAccountsAreEligibleForHawking
receiverIsCandidateForHawking:
hasActivePhoneAccount
logHandle
restoreFailuresDirectory
im_AKSecurityLevelKey
_idsAccountController
readAliasesFromDefaults
calculateAliasesForDefaults
calculateAndSaveAliasesToDefaults
addConditionChecks:toCriteria:
syncStateWillUpdate:
syncStateDidUpdate:
serverBag
lockdownManager
deviceSupport
exitManager
_truthContainer
_truthDatabase
imDefaults
telemetryReporter
initWithServerBag:lockDownmanager:deviceSupport:imDefaults:
syncState
broadcastCloudKitState
broadcastCloudKitStateAfterFetchingAccountStatus
broadcastCloudKitStateAfterClearingErrors
keyRollPendingStateDidChange
shouldUseDevContainer
shouldUseDevNickNameContainer
shouldForceArchivedMessagesSync
overrideNumberOfChatsToFetch
overrideNumberOfChatsToWrite
isFirstSyncWithActivity:completion:
messageDatabaseSize
checkiCloudQuota:
_serverAllowsSync
_isInExitState
_mocFeatureEnabled
_shouldiCloudSwitchBeEnabled
_mininimumServerBagClientValue
cloudKitSyncingEnabled
cloudKitSyncDownloadAssetsOnly
setCloudKitSyncingEnabled:
serverAllowsMetricSubmission
serverAllowsAnalyticSubmission
serverAllowsAnalyticDetailsSubmission
_getKeepMessagesValue
_shouldDisplayPopUpForResettingKeepMessages
_resetKeepMessagesSettingandBroadcastToAllDevices
_serverAllowsCacheDelete
enableAttachmentMetricCollection
cacheDeleteEnabled
_serverAllowsRemovalFromBackUp
removeFromBackUpAllowed
internalQueue
accountIsVerifiedForMOCAndSafeForCacheDelete
_authenticationController
_checkEligibilityWithAccountInfo:
_createAccountError:
fetchCloudKitAccountStatusWithCompletion:
_accountNeedsRepairOverride
shouldRepairAccountWithAccountStatus:securityLevel:
_setEligibleToToggleMiCSwitch:
fetchCloudKitAccountStatusAndUpdateEligibilityAndNeedsRepairStatusWithCompletion:
fetchAccountStatusAndUpdateMiCSwitchEligibility
fetchAccountStatusAndUpdateMiCSwitchEligibilityIfNeededOnImagentLaunch
_checkIfEnabledByServerBagOrDefault:
shouldPresentTTROnCloudKitError
shouldLogDumpOnCloudKitError
shouldCollectDailyLogDump
shouldCollectDailyLogDumpForRestoreFailures
logCollectorAddress
reportMOCDebuggingErrorWithString:internalOnly:
reportMOCDebuggingErrorWithString:internalOnly:initialSync:
reportMOCDebuggingErrorWithString:internalOnly:initialSync:sendToHandle:
reportMOCDebuggingErrorWithString:internalOnly:initialSync:sendToHandle:reasonString:
_askToTapToRadarWithString:internalOnly:
recordNameForMessageWithGUID:usingSalt:
syncFailureMetricString:isRecoverable:error:
extractServerRecordFromCKServerErrorRecordChanged:
resetLastSyncDate
_accountStore
checkCloudkitEnabledStatusAndToggleiCloudSwitchIfNeeded
evalToggleiCloudSettingsSwitch
_setiCloudSettingsSwitchEnabled:
_fetchPrimaryAccountWithCompletion:
fetchiCloudAccountPersonID:
_personIdFromAccount:
primaryAccountHasiCloudBackupEnabledWithCompletion:
_isSyncingPausedOverride
isDeviceCharging
isDeviceOnWifi
isSyncingPaused
isKeyRollPending
deviceConditions
deviceConditionsAllowPeriodicSync
newfilteredArrayRemovingCKRecordDupes:
newfilteredArrayRemovingCKRecordIDDupes:
lastDeviceBackUpDate
deviceActiveString
_deviceActive
_showCKLogNotificationWithCompletion:
shouldKickOffWriteForSyncType:
isLocalCachedSaltPresent
shouldReportToRTC
shouldReportToAnalytics
readServerBagBoolForKey:defaultValue:
postSyncStateToCloudKit:
postSyncStateToRTC:category:reportDictionary:
reportZoneCreation:
reportErrorForSyncType:syncStep:response:error:
finalSyncStateFor:
reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:
isCKPartialError:
findRootCauses:
simplifiedError:
logDumpAndSendMessageTo:forHours:reason:
logDumpAndSendMessageTo:forHours:reason:requirePreviousPrompt:willSendBlock:
logToPowerLogForLogDumpGUID:logDumpCompleted:logDumpSucceeded:logDumpSendingCompleted:logDumpSendingSucceeded:reason:
logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didStartSync:didFinishSync:didSucceedSyncing:
logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:
_isLogDumpAllowed
logDumpAndSendMessageTo:forHours:reason:isInitialSync:requirePreviousPrompt:willSendBlock:
ckStatisticCalculations
_isRunningInAutomation
logDumpIsExpected
logDumpIsNecessaryAfterSync
PCSReportManateeStatus
PCSReportManateeStatusAsync:timeout:
_accountManager
_primaryiCloudAccount
_primaryiCloudAccountAltDSID
dsid
_allowDestructiveMOCFeaturesBasedOnDSID
_primaryiCloudAccountSecurityLevel
deviceIsPhoneOrWatch
iCloudAccountMatchesiMessageAccount
signedIntoiCloudAndiMessageAndiCloudAccountMatchesiMessageAccount
enableMOCIfNeeded
downgradingFromHSA2AndDisablingMOC
eligibleForTruthZoneWithCompletion:
isInCloudKitDemoMode
disableAllDevicesWithCompletion:
didKeyRollPendingCheck
setDidKeyRollPendingCheck:
setLockdownManager:
setServerBag:
setDeviceSupport:
setImDefaults:
setTelemetryReporter:
useDeprecatedApi
setUseDeprecatedApi:
_didKeyRollPendingCheck
_useDeprecatedApi
_syncState
_lockdownManager
_serverBag
_deviceSupport
_imDefaults
_telemetryReporter
TB,N,V_didKeyRollPendingCheck
T@"IMLockdownManager",&,N,V_lockdownManager
T@"IDSServerBag",&,N,V_serverBag
T@"FTDeviceSupport",&,N,V_deviceSupport
T@"IMDefaults",&,N,V_imDefaults
T@"IMDSyncTelemetryReporter",&,N,V_telemetryReporter
TB,N,V_useDeprecatedApi
T@"IMDCKSyncState",R,N,V_syncState
keyRollPending
TB,R,N,GisKeyRollPending
deviceCharging
TB,R,N,GisDeviceCharging
deviceOnWifi
TB,R,N,GisDeviceOnWifi
startSyncTask:
syncTaskType
initWithAccountController:
_setupAndBeginSync
_createProcessBatchBlockWithServiceSession:
_createKnownRecordBlock
_createSyncCompletionBlockForServiceSession:
accountController
setAccountController:
taskGroupedByServiceName
setTaskGroupedByServiceName:
syncTaskCompletionBlock
setSyncTaskCompletionBlock:
_className
_taskGroupedByServiceName
_syncTaskCompletionBlock
T@"IMDAccountController",&,N,V_accountController
T@"NSMutableDictionary",&,N,V_taskGroupedByServiceName
T@?,C,N,V_syncTaskCompletionBlock
initWithCKSyncController:
_startICloudSyncWithActivity:
refreshWithDBSyncStatistics
currentInMemorySyncStatistics
incrementSyncedChatCount:incrementTotalChatCount:
incrementSyncedMessageCount:incrementTotalMessageCount:
incrementSyncedAttachmentCount:incrementTotalAttachmentCount:
_incrementCountsForColumnSyncedKey:syncedColumnAmountToIncrease:totalColumnAmountKey:totalColumnAmountToIncrease:
inMemorySyncStatistics
setInMemorySyncStatistics:
_inMemorySyncStatistics
T@"NSMutableDictionary",&,N,V_inMemorySyncStatistics
currentContext
setCurrentContext:
T@"IMDClientRequestContext",&,N
initWithListenerID:auditToken:capabilities:replyProxy:
listenerID
auditToken
capabilities
replyProxy
_listenerID
_capabilities
_replyProxy
_auditToken
T@"NSString",R,C,N,V_listenerID
T{?=[8I]},R,N,V_auditToken
TQ,R,N,V_capabilities
T@"<IMDaemonListenerProtocol>",R,N,V_replyProxy
migrateKey:fromDatabase:
tokenForKey:
persistToken:forKey:
_reallyUnloadServiceBundle
saveSettings
initWithBundle:
_copyServicePropertiesFromIMServiceBundle:
loadServiceBundle
unloadServiceBundle
createDiscontinuedAccount
oldInternalName
_serviceDomain
serviceDomain
_oldServiceDomain
sessionClass
accountClass
isIDSBased
isLegacy
isDiscontinued
synchronizeServiceDefaults
_defaultDefaults
_serviceDefaultsForDomain:
serviceDefaults
serviceDefaultsForSetup
clearOneTimeImportAccounts
delayedSaveSettings
enableAccount:
disableAccount:
accountAdded:
accountRemoved:
newAccountWithAccountDefaults:accountID:
defaultAccountSettings
disallowDeactivation
supportsDatabase
serviceSupportsRegistration
serviceSupportsAuthorization
serviceIgnoresNetworkConnectivity
serviceWantsNullHostReachability
shouldCreateActiveAccounts
shouldForceAccountsActive
shouldForceAccountsConnected
serviceNeedsLogin
serviceNeedsPassword
serviceShouldBeAlwaysLoggedIn
serviceRequiresHost
serviceChatsIgnoreLoginStatus
serviceSupportsPresence
serviceSupportsOneSessionForAllAccounts
serviceProtocolVersion
serviceRequiresSingleAccount
purgeMemoryCaches
mainService
bundle
serviceProperties
setServiceProperties:
_bundle
_sessionClass
_internalName
_serviceDefaults
_serviceProperties
_cachedServiceDefaults
_cachedSetupServiceDefaults
_blockPrefWriting
T@"NSDictionary",&,N,V_serviceProperties
T#,R,N
T@"NSBundle",R,&,N,V_bundle
T@"NSString",R,&,N
discontinued
TB,R,N,GisDiscontinued
canHandleNotificationResponse:userNotificationCenter:
handleNotificationResponse:userNotificationCenter:completionHandler:
initWithIDSDestination:latestDate:latestReadReceiptDate:hasReceivedReadReceipt:
_hasReceivedReadReceiptRecently
shouldSendTypingIndicator
shouldDisplayAttachmentDownloadFailure
shouldDisplayRemoteDecryptionFailure
idsDestination
setIdsDestination:
latestActiveDate
setLatestActiveDate:
hasReceivedReadReceipt
setHasReceivedReadReceipt:
latestReadReceipt
setLatestReadReceipt:
_hasReceivedReadReceipt
_idsDestination
_latestActiveDate
_latestReadReceipt
T@"NSString",&,N,V_idsDestination
T@"NSDate",&,N,V_latestActiveDate
TB,N,V_hasReceivedReadReceipt
T@"NSDate",&,N,V_latestReadReceipt
printGreeting
_swiftImpl
initWithBroadcaster:otcUtilities:
startTrackingCode:
broadcastCodeStatusToClients
consumeCodeWithGuid:
broadcaster
otcUtilities
_setNewCodeAndPrepareInvalidationTimer:
validCodes
setValidCodes:
codeInvalidationTimer
setCodeInvalidationTimer:
setBroadcaster:
broadcasterOverride
setBroadcasterOverride:
setOtcUtilities:
_validCodes
_codeInvalidationTimer
_broadcaster
_broadcasterOverride
_otcUtilities
T@"NSArray",&,N,V_validCodes
T@"NSTimer",&,N,V_codeInvalidationTimer
T@"<IMDaemonListenerProtocol>",&,N,V_broadcaster
T@"<IMDaemonListenerProtocol>",&,N,V_broadcasterOverride
T@"IMOneTimeCodeUtilities",&,N,V_otcUtilities
playMessageSentSoundIfNeeded:
_soundTypeForMessage:
_smsSoundsToPlay
_playSoundType:
_installSystemSound:
_playAcknowledgmentSentSound
_playSMSSound
_isSMSMessage:
_wasDowngraded:
_isSuppressedForGUID:
_stopSuppressingForGUID:
_isAssociatedMessage:
_isAcknowledgmentMessage:
_isAutoPlay:
messageProcessingTaskAdded:
_processingTimerFired
initWithMessagesPTaskStore:
scheduleInitialProcessingCheck
_xpc_IMDCoreSpotlightAddMessageGUID:
_pref_IMDCoreSpotlightHasMigrated
_scheduleDeferredProcessingWithTimeInterval:
_indexSpotlightIfNeedForPTask:
pTaskStore
setPTaskStore:
processingTimer
setProcessingTimer:
_pTaskStore
_processingTimer
T@"<IMDMessagePTaskStore>",&,N,V_pTaskStore
T@"NSTimer",&,N,V_processingTimer
_enableStrictSecureDecodingMode
transferForGuid:
reportMessageDictionaryForMessages:withLastAddressedHandle:maxMessageLength:isAutoReport:withChat:maxMessagesToReport:totalMessageCount:onlyReportForiMessageService:notifyInternalSecurity:
reportUnknownToIDS:messageID:isBlackholed:messageServerTimestamp:toURI:
isSurfPayment:
metaDataForSurfURL:
hasDataDetectedInformalPayment:
surfURLForIMMessageItem:
enqueueBlock:
_managedPrefsNotification:
_networkChanged:
_callMonitorStateChanged:
_processConnectionMonitorUpdate
login
__allServiceSessionsWeakReferenceArray
__registerNewServiceSession:
allServiceSessions
existingServiceSessionForService:
connectionMonitorDidUpdate:
autoLogin
autoReconnect
autoReconnectWithAccount:
logout
loginWithAccount:
logoutWithAccount:
holdBuddyUpdates
resumeBuddyUpdates
authenticateAccount:
registerAccount:
unregisterAccount:
requestGroups
changeGroups:
changeGroup:changes:
renameGroup:to:
acceptSubscriptionRequest:from:
requestSubscriptionTo:
startWatchingBuddy:
stopWatchingBuddy:
requestProperty:ofPerson:
setValue:ofProperty:ofPerson:
updateAuthorizationCredentials:token:account:
joinChatID:handleInfo:identifier:style:joinProperties:
joinChatID:handleInfo:identifier:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:
leaveChatID:identifier:style:
leaveiMessageChatID:identifier:style:
removeChatID:identifier:style:
invitePersonInfo:withMessage:toChatID:identifier:style:
invitePersonInfoToiMessageChat:withMessage:toChatID:identifier:style:
sendGroupPhotoUpdate:toChatID:identifier:style:account:
retryGroupPhotoUpload:toChatID:identifier:style:account:
removePersonInfo:chatID:identifier:style:
removePersonInfoFromiMessageChat:chatID:identifier:style:
declineInvitationToChatID:identifier:style:
updateDisplayName:fromDisplayName:forChatID:identifier:style:
eagerUploadTransfer:recipients:
eagerUploadCancel:
sendMessage:toChatID:identifier:style:
sendJunkReportMessage:
sendLogDumpMessageAtFilePath:toRecipient:shouldDeleteFile:withCompletion:
sendReadReceiptForMessage:toChatID:identifier:style:
sendDeliveredQuietlyReceiptForMessage:forIncomingMessageFromIDSID:toChatGuid:identifier:style:withWillSendToDestinationsHandler:
sendNotifyRecipientCommandForMessage:toChatGuid:identifier:style:
sendPlayedReceiptForMessage:toChatID:identifier:style:
sendSavedReceiptForMessage:toChatID:identifier:style:
noteMessagesMarkedAsReadForChatWithGUID:
sendEditedMessage:previousMessage:partIndex:editType:toChatIdentifier:style:account:backwardCompatabilityText:
sendSyndicationAction:toChatsWithIdentifiers:
setProperties:ofParticipant:inChatID:identifier:style:
setBlockingMode:
setAllowList:
setBlockList:
setBlockIdleStatus:
passwordUpdatedWithAccount:
importMessage:isRead:
sendCommand:withProperties:toPerson:
sendCommand:withProperties:toPerson:toChatID:identifier:style:
sendDeleteCommand:forChatGUID:
sendRecoverCommand:forChatGUID:
requestVCWithPerson:properties:conference:
respondToVCInvitationWithPerson:properties:conference:
cancelVCRequestWithPerson:properties:conference:reason:
sendCounterProposalToPerson:properties:conference:
sendVCUpdate:toPerson:conference:
sendAVMessageToPerson:sessionID:type:userInfo:conference:
relay:sendInitateRequest:toPerson:
relay:sendUpdate:toPerson:
relay:sendCancel:toPerson:
addAliases:account:
removeAliases:account:
validateAliases:account:
unvalidateAliases:account:
validateProfileWithAccount:
enrollDeviceInSMSRelay:
unEnrollDeviceInSMSRelay:
enrollSelfDeviceInSMSRelay
closeSessionChatID:identifier:style:
sendNicknameUpdatesToPeerDevices:toDestinations:
sendNicknameInfoToChatID:
reflectMarkUnreadToPeerDevicesForMessageGUID:
sendDeliveryReceiptForMessageID:toID:deliveryContext:needsDeliveryReceipt:callerID:account:
_blastDoorProcessingWithIMMessageItem:chat:account:fromToken:fromIDSID:fromIdentifier:toIdentifier:participants:groupName:groupID:isEncrypted:isFromMe:isLastFromStorage:isFromStorage:hideLockScreenNotification:wantsCheckpointing:needsDeliveryReceipt:messageBalloonPayloadAttachmentDictionary:inlineAttachments:attributionInfoArray:nicknameDictionary:availabilityVerificationRecipientChannelIDPrefix:availabilityVerificationRecipientEncryptionValidationToken:messageContext:completionBlock:
requestGroupPhotoIfNecessary:incomingGroupPhotoCreationTime:toIdentifier:fromIdentifier:messageIsFromStorage:
initWithAccount:service:
accountNeedsLogin
accountNeedsPassword
accountShouldBeAlwaysLoggedIn
displayName
sessionDidBecomeActive
sessionWillBecomeInactiveWithAccount:
_clearConnectionMonitor
_updateConnectionMonitorWithRemoteHost:
updateConnectionMonitorWithLocalSocketAddress:remoteSocketAddress:
_updateConnectionMonitorFromAccountDefaultsIgnoringProxy:
_reconnectIfNecessary
_reconnectIfNecessaryWithAccount:
_setPendingConnectionMonitorUpdate
_processPotentialNetworkChange
_IDSService
overrideNetworkAvailability
processNetworkDataAvailabilityChange:
networkConditionsAllowLogin
allowedAsChild
canonicalFormOfID:
canonicalFormOfChatRoom:
equalID:andID:
refreshServiceCapabilities
broadcasterForChatListeners
broadcasterForChatListenersWithBlackholeStatus:
broadcasterForChatObserverListeners
broadcasterForAVConferenceListeners
broadcasterForACConferenceListeners
broadcasterForVCConferenceListeners
broadcasterForNotificationsListeners
_clearDowngradeMarkersForChat:
shouldInferRecoverableDeleteForCommandDictionary:
deleteCommandDictionaryWithIncomingDictionary:inferredRecoverableDeleteForLegacyCommandsWithDate:
_blocklistIfNeededForChatDict:
deleteChatsForCommandDictionary:
deleteMessagesForCommandDictionary:
recoverChatsForCommandDictionary:
deleteMessagePartsForCommandDictionary:
chatRegistry
_updateLastMessageTimeStampForChat:broadcaster:
serverHost
serverPort
proxyType
proxyHost
proxyPort
proxyAccount
proxyPassword
useSSL
password
account
setChatRegistry:
_lock
_account
_localProperties
_changedBuddies
_groupChatIdentifierToChatRoomMap
_chatRoomToGroupChatIdentifierMap
_chatSuppressionFlagMap
_chatSuppressionTimerMap
_suppressedMessages
_messageRoutingTimer
_messageExpireStateTimer
_messageWatchdogTimer
_messageAutoReplier
_storageTimer
_messagesReceivedDuringStorage
_pendingReadReceiptFromStorageCount
_timingComingBackFromStorage
_messagesProcessedComingBackFromStorage
_connectionMonitor
_reconnectTimer
_pwRequestID
_systemProxySettingsFetcher
_buddyChangeLevel
_activated
_saveKeychainPassword
_awaitingDataContext
_shouldReconnect
_badPass
_buddies
_proxyHost
_proxyAccount
_proxyPassword
_password
_serverHost
_proxyType
_proxyPort
_useSSL
_serverPort
_chatRegistry
T@"IMDChatRegistry",&,N,V_chatRegistry
T@"IMDAccount",R,&,N,V_account
T@"IMDService",R,&,N,V_service
T@"NSArray",R,&,N,V_accounts
T@"NSString",R,&,N,V_password
T@"NSString",R,&,N,V_serverHost
TS,R,N,V_serverPort
Tq,R,N,V_proxyType
T@"NSString",R,&,N,V_proxyHost
TS,R,N,V_proxyPort
T@"NSString",R,&,N,V_proxyAccount
T@"NSString",R,&,N,V_proxyPassword
TB,R,N,V_useSSL
_spamCheckTimerFired:
__queryServerForID:count:completion:
_updateSpamCheckTimerWithInterval:forChatGUID:
_isDisabled
detectSpam:chatGUID:
shouldCheckForSpamWithExtensionInChat:fromIdentifier:toIdentifier:
checkForSpamWithExtensionInChat:forMessageBody:sender:withCompletion:
chatGUIDToSpamCheckTimerMap
setChatGUIDToSpamCheckTimerMap:
chatGUIDToCountMap
setChatGUIDToCountMap:
spamExtensionCutoffTime
setSpamExtensionCutoffTime:
_chatGUIDToSpamCheckTimerMap
_chatGUIDToCountMap
_spamExtensionCutoffTime
T@"NSMutableDictionary",&,V_chatGUIDToSpamCheckTimerMap
T@"NSMutableDictionary",&,V_chatGUIDToCountMap
Td,N,V_spamExtensionCutoffTime
sharedIdentifier
T@"IMDBackwardCompatibilityMessageIdentifier",R,N
isIgnorableBackwardCompatibilityMessage:inChat:
swiftImplementation
setSwiftImplementation:
_swiftImplementation
T@"__IMDBackwardCompatibilityMessageIdentifier",&,N,V_swiftImplementation
initRecordZoneManager:databaseManager:
_setUpSubscription
exitRecordDate
setExitRecordDate:
errorFetchingExitDate
setErrorFetchingExitDate:
handleNotificationForSubscriptionID:
writeExitRecordWithDate:completion:
exitRecordDateWithCompletion:
_evalToggleiCloudSettingsSwitch
_fetchExitRecordDateWithCompletion:
deleteExitRecordWithCompletion:
exitRecordID
syncCompleteRecordID
analyticZoneRecordID
derivedQualityOfService
exitConfiguration
databaseManager
_scheduleOperation:
_saltZoneCreated
_subscriptionCreated
writeInitialSyncCompletedRecordIfNeeded
writeSyncCompletedRecordWithDate:completion:
submitCloudKitMetricWithOperationGroupName:
_analyticZoneCreated
submitCloudKitAnalyticWithOperationGroupName:analyticDictionary:
_scheduleMetricOperation:
_sharedCKUtilities
_modifiedOpGroupName:
_submitCloudKitMetricWithOperationGroupName:record:ignoreZoneNotFoundError:completion:
_canSubmitCloudKitMetric
_canSubmitCloudKitAnalytic
submitCloudKitMetricWithData:operationGroupName:completion:
submitCloudKitAnalyticWithDictionary:operationGroupName:completion:
sendCloudKitZoneFetchRequestToNoteFeatureIsOn
setExitRecordID:
saltZoneCreatedOverride
setSaltZoneCreatedOverride:
subscriptionCreatedOverride
setSubscriptionCreatedOverride:
ckQueue
setCkQueue:
recordZoneManager
setRecordZoneManager:
setDatabaseManager:
fetchedExitDateOnLaunch
setFetchedExitDateOnLaunch:
_fetchedExitDateOnLaunch
_exitRecordDate
_errorFetchingExitDate
_exitRecordID
_saltZoneCreatedOverride
_subscriptionCreatedOverride
_ckQueue
_recordZoneManager
_databaseManager
T@"CKRecordID",&,N,V_exitRecordID
T@"NSNumber",&,N,V_saltZoneCreatedOverride
T@"NSNumber",&,N,V_subscriptionCreatedOverride
T@"NSObject<OS_dispatch_queue>",&,N,V_ckQueue
T@"IMDRecordZoneManager",&,N,V_recordZoneManager
T@"IMDCKDatabaseManager",&,N,V_databaseManager
T@"NSDate",&,N,V_exitRecordDate
T@"NSError",&,N,V_errorFetchingExitDate
TB,N,V_fetchedExitDateOnLaunch
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveToken:forInfo:
connection:didReceiveURLToken:forInfo:
connection:didReceiveURLTokenError:forInfo:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
dataBaseManager
pushConnection
_setUpPushConnection
_handleNotificationForZoneID:subscriptionID:
_createSubscriptionForZoneID:subscriptionID:recordType:completionBlock:
_createSubscriptionIfNeededForZoneID:subscriptionID:recordType:completionBlock:
_checkRecordZoneExists:completionBlock:
_createRecordZone:completionBlock:
_createRecordZoneIfNeeded:completionBlock:
_deleteZone:
_deleteZone:forDatabase:
createChatZoneIfNeededWithCompletionBlock:
deleteChatZone
createAttachmentZoneIfNeededWithCompletionBlock:
deleteAttachmentZone
createMessageZoneIfNeededWithCompletionBlock:
deleteMessageZone
createUpdateZoneIfNeededWithCompletionBlock:
deleteUpdateZone
createAnalyticZoneIfNeededWithCompletionBlock:
deleteAnalyticZone
createDeDupeSaltZoneIfNeededWithCompletionBlock:
deleteDeDupeSaltZone
createSubscriptionIfNeededOnDeDupeZoneForSubscription:recordType:completionBlock:
createRecoverableMessageZoneIfNeededWithCompletionBlock:
deleteRecoverableMessageZone
deleteAllZones
_deleteAllZonesForDatabase:
ckUtilities
errorAnalyzer
fetchChatZoneToCheckManateeStatus:
chatRecordZoneID
chatRecordZone
attachmentRecordZoneID
attachmentRecordZone
messageRecordZoneID
messageRecordZone
updateRecordZoneID
updateRecordZone
analyticRecordZoneID
analyticRecordZone
deDupeSaltZoneID
deDupeSaltRecordZone
metricZoneID
recoverableMessageRecordZoneID
recoverableMessageRecordZone
setDataBaseManager:
setPushConnection:
_chatRecordZoneID
_chatRecordZone
_attachmentRecordZoneID
_attachmentRecordZone
_messageRecordZoneID
_messageRecordZone
_updateRecordZoneID
_updateRecordZone
_analyticRecordZoneID
_analyticRecordZone
_deDupeSaltZoneID
_deDupeSaltRecordZone
_metricZoneID
_recoverableMessageRecordZoneID
_recoverableMessageRecordZone
_dataBaseManager
_pushConnection
T@"IMDCKDatabaseManager",&,N,V_dataBaseManager
T@"APSConnection",&,N,V_pushConnection
T@"CKRecordZoneID",R,N,V_chatRecordZoneID
T@"CKRecordZone",R,N,V_chatRecordZone
T@"CKRecordZoneID",R,N,V_attachmentRecordZoneID
T@"CKRecordZone",R,N,V_attachmentRecordZone
T@"CKRecordZoneID",R,N,V_messageRecordZoneID
T@"CKRecordZone",R,N,V_messageRecordZone
T@"CKRecordZoneID",R,N,V_updateRecordZoneID
T@"CKRecordZone",R,N,V_updateRecordZone
T@"CKRecordZoneID",R,N,V_analyticRecordZoneID
T@"CKRecordZone",R,N,V_analyticRecordZone
T@"CKRecordZoneID",R,N,V_deDupeSaltZoneID
T@"CKRecordZone",R,N,V_deDupeSaltRecordZone
T@"CKRecordZoneID",R,N,V_metricZoneID
T@"CKRecordZoneID",R,N,V_recoverableMessageRecordZoneID
T@"CKRecordZone",R,N,V_recoverableMessageRecordZone
_messageFetchRecordZoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:
_operationGroupWithName:
fetchMessageZoneChangesCKOperationUsingToken:zoneID:resultsLimit:operationGroupName:activity:
saveMessagesCKOperationUsingRecordsToSave:operationGroupName:activity:
deleteMessageCKOperationUsingRecordIDstoDelete:
deleteRecoverableMessageCKOperationUsingRecordIDstoDelete:
_fetchOptionsDictionaryWithFetchOptions:andZoneID:
fetchArchivedRecordsOperationWithSyncToken:zoneID:activity:
subscriptionValidationTokensForHandle:completion:
validatePersonalStatusSubscriptionMatchesSubscriptionValidationToken:fromSender:completion:
validatePersonalStatusSubscriptionMatchesSubscriptionValidationTokens:fromSender:completion:
availabilityStatusTypeIdentifier
deviceSupportsSubscriptionValidationTokens
subscriptionInvitationReceived:
subscriptionReceivedStatusUpdate:
subscriptionStateChanged:
subscriptionServiceDaemonDisconnected:
cachedAvailabilityVerificationTokensForHandleID:
populateCacheWithAvailbailityVerificationTokensForHandleID:
verifyPersonalSubscriptionMatchesSubscriptionValidationToken:encryptionValidationToken:receivedByHandleID:fromHandleID:messageDate:
_validatePersonalStatusSubscriptionMatchesSubscriptionValidationToken:encryptionValidationToken:fromSender:completion:
_inviteSenderHandleID:fromHandleID:
availabilitySubscriptionService
setAvailabilitySubscriptionService:
subscriptionValidationTokenByHandleIDCache
setSubscriptionValidationTokenByHandleIDCache:
privateWorkQueue
setPrivateWorkQueue:
_availabilitySubscriptionService
_subscriptionValidationTokenByHandleIDCache
_privateWorkQueue
T@"SKStatusSubscriptionService",&,N,V_availabilitySubscriptionService
T@"NSCache",&,N,V_subscriptionValidationTokenByHandleIDCache
T@"NSObject<OS_dispatch_queue>",&,N,V_privateWorkQueue
initWithSubscriptionValidationToken:encryptionValidationToken:
isEqualToAvailabilityVerificationTokens:
subscriptionValidationToken
encryptionValidationToken
_subscriptionValidationToken
_encryptionValidationToken
T@"NSString",R,N,V_subscriptionValidationToken
T@"NSString",R,N,V_encryptionValidationToken
sharedDaemon
setSharedDaemon:
T@"<IMLocalDaemonProtocol>",&,N
initWithEventStreamName:
copyFileTransferDictionaryRepresentationsFromCenter:
performInitialUpdateIfNeeded
initWithChatRegistry:vocabulary:
updateVocabularyForAddedChat:completionHandler:
updateVocabularyForDeletedChat:completionHandler:
updateVocabularyForRenamedChat:completionHandler:
updateVocabularyForDeferredUpdateRequestIfNecessaryWithCompletionHandler:
_updateVocabularyExcludingChat:completionHandler:
vocabulary
setVocabulary:
haveDeferredUpdateRequest
setHaveDeferredUpdateRequest:
_haveDeferredUpdateRequest
_vocabulary
T@"INVocabulary",&,N,V_vocabulary
TB,N,V_haveDeferredUpdateRequest
spokenPhrase
pronunciationHint
vocabularyIdentifier
alternativeSpeakableMatches
identifier
T@"NSString",R,N
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:linkedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantUpdate:context:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
_senderIDFromToken:
dtService
setDtService:
_dtService
T@"IDSService",&,N,V_dtService
im_registeredURIs
guid
fetchMomentShareFromShareURL:forMessage:completionHandler:
_acceptMomentShare:completionHandler:
_loadCMMTransfersForMessage:
_copyItemAtURL:toTemporaryDirectoryWithName:isDirectory:error:
_copiedFileURLFromAssetExportFileURLs:transferGUID:error:
_requestResourceFileURLsForAsset:fileTransfer:completionHandler:
_clearCMMTransfersForCMMMessage:
_generateTransfersForAssetUUIDs:forMessage:inChat:momentShare:
_fileTransferForAssetUUID:forMessage:momentShare:atIndex:ofTotal:
_fetchResultForCuratedOrFirstForMomentShare:outFetchType:
_targetCountForContext:
photoLibraryDidChange:
_updateContext:withChange:
_transitionToFetchingMomentShareForContext:
_handleMomentShareFetchForContext:momentShare:error:
_transitionToWaitingForAssetsForContext:
_transitionToGenerateTransfersStateForContextIfNecessary:
_transitionToCompletedStateForContext:
_generateTransfersForContext:
_contextForMomentShareURL:forMessage:inChat:createIfNeeded:
_removeFinishedIngestionContext:
_handleIngestionFailureForContext:
registerAndAcceptMomentShareForMessage:inChat:resetAssetTransfers:
_acceptMomentShareIfNecessaryForContext:isRetry:
_fetchAssetsForAcceptedMomentShareWithContext:
regenerateTransfersForMessage:inChat:addingAssetWithUUID:
_assetUUIDToUnfinishedTransferMapFromTransfers:
messageHasUnfinishedTransfers:
_startAssetExportForContext:
_handleResourceRequestForContext:asset:transfer:didCompleteWithFileURL:error:
_persistAttachmentAtFileURL:forFileTransfer:
_updatePendingTransferMapForContext:completedTransfer:
shareURLsToContexts
setShareURLsToContexts:
_shareURLsToContexts
T@"NSMutableDictionary",&,N,V_shareURLsToContexts
initWithServiceSession:
stateDictionaryForDiagnosticsRequest
_operationIsCloudKitMetricsOperation:
handleOperation:
_handleWritingCloudKitMetrics:
_handleFetchingExitRecordOperation:
synchronize
delayedSynchronize
unsignedLongValue
initWithSyncTokenStore:
syncControllerRecordType
_needsToMarkAllAttachmentsAsNeedingSync
_shouldMarkAllAttachmentsAsNeedingSync
_hasMarkedAllAttachmentsAsNeedingSync
_numberOfBatchesOfAttachmentsToFetchInInitialSync
_shouldMarkAttachmentsAsNeedingReupload
_markAllFailedAttachmentsAsNeedingSync
_numberOfMetadataBatchesOfAttachmentsToFetchInInitialSync
syncAttachmentsWithSyncType:deviceConditionsToCheck:activity:completionBlock:
fetchAttachmentDataForTransfers:highQuality:perTransferProgress:activity:completion:
acceptFileTransfer:completion:
acceptFileTransfers:completion:
_attachmentDownloadCanStart:withActivity:
_downloadAttachmentAssetsWithActivity:restoringAttachments:retryCount:numAttachmentsDownloaded:completion:
_downloadAttachmentAssetsWithActivity:restoringAttachments:retryCount:numAttachmentsDownloaded:transfers:completion:
downloadAttachmentAssetsWithActivity:restoringAttachments:completion:
downloadAttachmentAssetsWithActivity:restoringAttachments:
purgedAttachmentsForChat:services:limit:
purgedAttachmentsCountForChatsWithChatIdentifiers:services:
downloadAttachmentAssetsForChatIDs:services:style:completion:
__databaseRequestForAttachmentsWithAssets
_ckUtilitiesInstance
_updateDeviceConditionsToCheckIfNeededForCurrentBatchCount:maxBatchCount:
_deviceConditionsAllowsMessageSyncForCurrentBatchCount:maxBatchCount:activity:
_deviceConditionsAllowsMessageSyncWithActivity:
_deviceConditionsAllowsMessageSyncIgnoreFeatureEnabled:activity:
_attachmentZoneID
_recordKeyManagerSharedInstance
_attachmentZoneSalt
_numberOfAttachmentsToDownload
_numberOfAttachmentsToWriteUp
_updateAttachmentGUIDIfNeededAndReturnTransfersToForceMarkAsSync:transfersToSyncRowIDs:
_writeAttachmentsToCloudKitWithActivity:completionBlock:
_fetchAttachmentZoneRecords:desiredKeys:ognSuffix:removeTombstones:activity:completion:
_fetchedAllChangesFromCloudKit
_resyncForDeleteRecoveryState
_hasCompletedRecoveryResync
_initResyncForDeleteRecovery
_markResyncForDeleteRecoveryAs:
_fetchAttachmentZoneChangesShouldWriteBackChanges:desiredKeys:syncType:currentBatchCount:maxBatchCount:syncToken:activity:completionBlock:
_writeCKRecordsToAttachmentZone:activity:withCompletion:
_attachmentZoneCreated
deleteAttachmentSyncToken
_kickOffWriteOnCKQueueWithActivity:completion:
_kickOffWriteIfNeededForSyncType:activity:completion:
_processRecordZoneFetchCompletion:zoneID:clientChangeTokenData:moreComing:shouldWriteBackChanges:desiredKeys:syncType:error:currentBatchCount:maxBatchCount:activity:completionBlock:
_processModifyPerRecordCallBack:error:
_processFetchRecordChangesCompleted:completionBlock:
_processRecordDeletion:
_processRecordChanged:
_processRecordZoneChangeTokenUpdated:zoneID:clienChangeToken:syncType:
_operationErrorForModifyingRecordCompletion:
_processModifyRecordCompletion:deletedRecordIDs:error:completionBlock:
_processAssetFetchPerRecordProgressBlock:progress:
_processAssetFetchPerRecordCompletionBlock:recordID:error:
_processAssetFetchOperationCompletionBlock:removeTombstones:operationID:error:
_recordsToProcessWithError:error:
_removeTransferFromiCloudBackupWithGuid:
_updateTransferUsingCKRecord:wasFetched:
_kickOffAssetFetchForTransfersIfNeededWithActivity:
_markAttachmentWithROWIDAsSyncedWithCloudKit:
_markAttachmentWithROWIDAsFailedToUploadToCloudKit:
_markTransferAsNotBeingAbleToSync:
_markTransferAsNotBeingAbleToSyncUsingCKRecord:
_resetAttachmentSyncStateForRecord:toState:
_migrateSyncToken
_changeTokenKeyForSyncType:
setLatestSyncToken:forSyncType:
latestSyncTokenForSyncType:
clearLocalSyncState:
_validateTransferFromCloudKit:localTransfer:validateCompletion:
_processAndValidateAttachmentRecordsEligibleForPurge:recordIDsToTransfers:capturedWithABC:completion:
_fetchAndValidateFileTransfersFromCloudKit:capturedWithABC:activity:completion:
fileTransferCenter
__shouldOptimizeAttachmentDefault
_constructAttachmentRecordIDUsingTombStoneDictionary:
_attachmentDeleteBatchSize
_readNextDeleteAfterRow
_setNextDeleteAfterRow:
_copyRecordIDsToDeleteWithLimit:
_deleteAttachmentsWithRecordIDs:completion:
syncAttachmentDeletesToCloudKitWithActivity:completion:
isDoingDeleteRecoverySync
setIsDoingDeleteRecoverySync:
CKOperationFactory
setCKOperationFactory:
syncTokenStore
setSyncTokenStore:
completionBlocksForAssetFetchOperations
setCompletionBlocksForAssetFetchOperations:
recordIDToTransferMap
setRecordIDToTransferMap:
perTransferProgress
setPerTransferProgress:
assetDownloadInProgress
setAssetDownloadInProgress:
downloadAssetsForTransferGUIDs
setDownloadAssetsForTransferGUIDs:
deviceConditionsToCheck
setDeviceConditionsToCheck:
_isDoingDeleteRecoverySync
_assetDownloadInProgress
_CKOperationFactory
_syncTokenStore
_completionBlocksForAssetFetchOperations
_recordIDToTransferMap
_perTransferProgress
_downloadAssetsForTransferGUIDs
_deviceConditionsToCheck
T@"IMDCKAttachmentSyncCKOperationFactory",&,N,V_CKOperationFactory
T@"<IMDCKSyncTokenStore>",&,N,V_syncTokenStore
T@"NSMutableDictionary",&,N,V_completionBlocksForAssetFetchOperations
T@"NSMutableDictionary",&,N,V_recordIDToTransferMap
T@?,C,N,V_perTransferProgress
TB,N,V_assetDownloadInProgress
T@"NSMutableArray",&,N,V_downloadAssetsForTransferGUIDs
TQ,N,V_deviceConditionsToCheck
TB,N,V_isDoingDeleteRecoverySync
removeBuildObjectsFromDict:
keyValueCollection:willUpdateValues:
keyValueCollection:didUpdateValues:
initWithKeyValueCollection:
createdChatZone
setCreatedChatZone:
deletedZones
setDeletedZones:
isFeatureEnabled
setFeatureEnabled:
isSyncing
setSyncing:
isEligibleForTruthZone
setEligibleForTruthZone:
isSyncingEnabled
setSyncingEnabled:
isRemovedFromBackup
setRemovedFromBackup:
isInExitState
setInExitState:
setSyncingPaused:
isDisablingDevices
setDisablingDevices:
isStartingEnabledSettingChange
setStartingEnabledSettingChange:
isStartingPeriodicSyncSetByCloudKitHooks
setStartingPeriodicSyncSetByCloudKitHooks:
isStartingInitialSyncSetByCloudKitHooks
setStartingInitialSyncSetByCloudKitHooks:
exitDate
setExitDate:
lastSyncDate
setLastSyncDate:
analyticSyncDatesDictionary
setAnalyticSyncDatesDictionary:
syncControllerSyncState
setSyncControllerSyncState:
syncControllerSyncType
setSyncControllerSyncType:
setSyncControllerRecordType:
accountStatus
setAccountStatus:
syncErrors
clearSyncErrors
addSyncError:
_startBatchChange
_finishBatchChange
_setObject:forKey:forDictionary:shouldSetBuild:
_removeObjectForKey:forDictionary:
removeObjectFromAnalyticSyncDatesDictionaryForKey:
setAnalyticSyncDatesDictionaryObject:forKey:shouldOverrideIfExists:
getAnalyticSyncDatesObjectForKey:
describeErrors
_describeErrors:
_shouldReportNewUserIfCreatedChatZones:deletedZones:
syncUserType
syncReportDictionary
describeRecordCounts
syncReportDictionaryForAttempt:withSuccess:duration:
setSyncingFinished
clearLocalCloudKitSyncState
_setStartingSync
setStartingPeriodicSyncWithRecordType:
setStartingInitialSyncWithRecordType:
setSyncControllerSyncState:withRecordType:
serializedRepresentation
broadcastSyncState
setErrorToAccountNeedsRepair
setErrorToKeyRollingError
keyValueCollection
delegate
setDelegate:
_storage
_delegate
TQ,D,N
Tq,D,N
syncing
TB,D,N,GisSyncing
startingPeriodicSyncSetByCloudKitHooks
TB,D,N,GisStartingPeriodicSyncSetByCloudKitHooks
startingInitialSyncSetByCloudKitHooks
TB,D,N,GisStartingInitialSyncSetByCloudKitHooks
T@"IMKeyValueCollection",R,N,V_storage
T@"<IMDCKSyncStateDelegate>",W,N,V_delegate
featureEnabled
TB,D,N,GisFeatureEnabled
TB,D,N
eligibleForTruthZone
TB,D,N,GisEligibleForTruthZone
syncingEnabled
TB,D,N,GisSyncingEnabled
removedFromBackup
TB,D,N,GisRemovedFromBackup
inExitState
TB,D,N,GisInExitState
syncingPaused
TB,D,N,GisSyncingPaused
T@"NSDate",C,D,N
disablingDevices
TB,D,N,GisDisablingDevices
startingEnabledSettingChange
TB,D,N,GisStartingEnabledSettingChange
T@"NSDictionary",C,D,N
initWithReplayController:accountController:
interpretMessageItem:inChat:
impl
setImpl:
_impl
T@"__IMDPlainTextTapbackInterpreterImpl",&,N,V_impl
stringValue
addHubbleRequestedTransfer:
_removeHubbleRequestedTransfer:
postHubbleDownloadFinishedIfNeededForTransfer:
postHubbleDownloadFailedIfNeededForTransfer:error:
_completeHubbleDownloadForTransfer:
_postHubbleDownloadFailedForTransfer:error:
_transferTimerTick:
fileTransferErrorWithReason:description:
localFileURLRetrievalErrorWithReason:description:
localFileURLRetrievalErrorWithReason:underlyingReason:description:
_progressForTransferGUID:allowCreate:path:
_clearProgressForTransferGUID:
_completeProgressForTransferGUID:
_updateContextStamp
_postUpdated:
_postUpdated:forceNotify:
_dictionaryRepresentationsForFileTransfers:toSave:
_addGatekeeperProperties:toFileAtPath:
_addGatekeeperProperties:toDirectory:
addDefaultGatekeeperPropertiesToDirectory:
_addSpotlightPropertiesFromFileTransfer:toDirectory:
_createWrapperForTransfer:
_removeWrapperForTransfer:
_addActiveTransfer:
_removeActiveTransfer:
_addTransferringTransfer:
_removeTransferringTransfer:
makeNewIncomingTransferWithGUID:filename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
guidForNewOutgoingTransferWithLocalURL:
broadcastTransfersWithGUIDs:atLocalPaths:
makeNewOutgoingTransferWithGUID:filename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
guidForNewIncomingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
guidForNewOutgoingTransferWithFilename:isDirectory:totalBytes:hfsType:hfsCreator:hfsFlags:
registerGUID:forNewOutgoingTransferWithLocalURL:
assignTransfer:toAccount:otherPerson:
addTransfer:forGUID:
addTransfer:forGUID:forceNotify:
_addTransfer:forGUID:shouldNotify:
_addTransfer:forGUID:shouldNotify:forceNotify:
transferForGUID:
removeTransferForGUID:
deleteTransferForGUID:
updateTransferGUID:toGUID:
_updateTransferGUID:toGUID:
startTransfer:
updateTransfer:currentBytes:totalBytes:
updateTransfer:
updateTransferAsWaitingForAccept:
startFinalizingTransfer:
endTransfer:
failTransfer:reason:
resetTransfer:andPostReason:
failTransferPreviewGeneration:
rejectTransfer:
updateTransfer:withPreviewSize:forConstraints:
resetTransferAndPostError:error:
setRecoverableErrorForTransfer:error:
failTransfer:error:
acceptTransfer:path:
_allFileTransfers
_handleFileTransfer:createdWithProperties:withAuditToken:
_handleFileTransfer:updatedWithProperties:
_handleFileTransfer:acceptedWithPath:autoRename:overwrite:options:postNotification:
_handleFileTransfers:autoRename:overwrite:options:postNotification:
_handleFileTransferStopped:
_handleFileTransferRemoved:
_getNewFileTransferForStoredAttachmentPayloadDataWithTransferGUID:messageGUID:
guidsForStoredAttachmentPayloadData:messageGUID:
guidsForStoredAttachmentPayloadDataURLs:messageGUID:
markAttachment:sender:recipients:isIncoming:
sizePreviewsForTransferGUIDs:
_transcodeControllerSharedInstance
_transferRequiresPreviewSizing:
_clientPreviewConstraints
_attachmentStoreSharedInstance
_messageStoreSharedInstance
_statsCollector
_shouldUpdateSyncStats:originalSyncState:
_updateSyncStatsForAttachments:incrementTotalAttachmentCount:
_shouldDownloadAssetForTransfer:forMessageItem:
updateTransfersWithCKRecord:recordWasFetched:downloadAsset:
markTransferAsNotSyncedSuccessfully:
markTransferAsNotSuccessfullyDownloadedFromCloud:
resetSyncStateForRecord:toState:
_reset
contextStamp
setContextStamp:
guidToTransferMap
setGuidToTransferMap:
activeTransfers
setActiveTransfers:
transferTimer
setTransferTimer:
transferringTransfers
setTransferringTransfers:
activeHubbleRequestedTransfers
setActiveHubbleRequestedTransfers:
_contextStamp
_guidToTransferMap
_activeTransfers
_transferTimer
_transferringTransfers
_activeHubbleRequestedTransfers
T@"NSString",&,N,V_contextStamp
T@"NSMutableDictionary",&,N,V_guidToTransferMap
T@"NSMutableSet",&,N,V_activeTransfers
T@"NSTimer",&,N,V_transferTimer
T@"NSMutableArray",&,N,V_transferringTransfers
T@"NSMutableSet",&,N,V_activeHubbleRequestedTransfers
powerLogConversationType
_desiredKeysArrayForType:
fetchAttachmentZoneChangesCKOperationUsingToken:zoneID:resultsLimit:desiredKeys:operationGroupName:activity:
fetchAttachmentZoneRecords:desiredKeys:operationGroupName:activity:
saveAttachmentsCKOperationUsingRecordsToSave:operationGroupName:activity:
_defaultsSayWeHaveSyncedOnce
_attachmentFetchRecordZoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:desiredKeys:
deleteAttachmentCKOperationUsingRecordIDstoDelete:
verifyTextMessage:completionHandler:
_enManager
_allowedDomains
_bagDisabled
_isMessageItemEligibleForEN:
_enURLsForMessageBody:
_enTextMessageForMessageBody:
processMessageItemForENURL:withCompletionHandler:
dummyMethod
_getCurrentDBVersion
_getTempDBPath
_getTempRecentsPath
_getZippedRecentsPath
_getTruncatedDBPath
_getDowngradedDBPath
_getZippedDBPath
_getFileSizeAtPath:
_truncateDBToPath:
_deleteFileAtPath:
_cleanUpTemporaryFiles
_compressFileAtPath:toPath:withCompletionBlock:
_decompressFileAtPath:toPath:withCompletionBlock:
_initiateQuickSwitch
_sendDBVersionResponse:
_sendRecentsRequest
_handleQuickSwitchInitiateRequest
_quickSwitchCompleted:
_sendZippedFileAtPath:withCommand:
_handleDBVersionResponse:
_handleRecentsRequest
_handleQuickSwitchCompleted:
_handleIncomingDB:
_handleIncomingRecents:
_sendQuickSwitchCompletedWithResult:
_sendIDSFile:withCommand:
_sendIDSMessage:
_isPairedDeviceInProxyMode
_defaultPairedDevice
_notifyPSYWithResult:
_notifyPSYDataSent
quickSwitchIDSService
setQuickSwitchIDSService:
_quickSwitchIDSService
T@"IDSService",&,N,V_quickSwitchIDSService
handleIncomingNoticeProtobuf:service:account:fromID:context:
setVersion:
setGuidString:
setHighlightChangeEvent:
setDateAsTimeIntervalSince1970:
_SWCollaborationNoticeTransmissionMessageClass
noticeFanoutThreshold
unarchiveNoticeTransmissionEvent:
sendNotice:toHandles:
reflectDismissalForNoticeGUIDs:
_handlesMinusSenderServiceAccountID:
senderLoginIDs
rateLimiter
setRateLimiter:
gelatoService
setGelatoService:
_rateLimiter
_gelatoService
T@"IDSService",&,N,V_gelatoService
T@"<IMDCollaborationNoticeDispatcherDelegate>",W,N,V_delegate
T@"IMDCollaborationNoticeRateLimiter",&,N,V_rateLimiter
_recordType
_accountControllerSharedInstance
compressedProtobufDataForMessage
compressedProtobufDataForMessageP2
compressedProtobufDataForMessageP3
_populateCKRecordWithIMItemFields:
_populateCKRecordWithIMMessageItemFields:
compressedProtobufDataForGroupTitleChangeItem
_populateCKRecordWithIMGroupTitleChangeItemFields:
compressedProtobufDataForParticipantChangeItem
_populateCKRecordWithIMParticipantChangeItemFields:
compressedProtobufDataForLocationShareStatusChangeItem
_populateCKRecordWithIMLocationShareStatusChangeItemFields:
compressedProtobufDataForGroupActionItem
_populateCKRecordWithIMGroupActionItemFields:
compressedProtobufDataForMessageActionItem
_populateCKRecordWithIMMessageActionItemFields:
callerIDShouldBeCheckedForRegistration:
_recordFromServerChangeToken
copyCKRecordRepresentationWithZoneID:salt:
_shouldDownloadIfPhoneNumberAndNoSIM:
shouldStoreMessage
isCompatibleWithMiC
_updateV1RecordType
compressedProtobufDataWithPadding:
compressedProtobufDataForUpdateT1:
compressedProtobufDataForUpdateT2:
protobufForCompressedData:
protobufForCompressedDataP2:
protobufForCompressedDataP3:
protobufForUpdateT1:
protobufForUpdateT2:
populateIMMessageItemWithProtobufFields:withProtobufData:
populateIMMessageItemWithProtobufFields:withProtobufDataP2:
populateIMMessageItemWithProtobufFields:withProtobufDataP3:
groupTitleChangeProtobufForCompressedData:
populateIMGroupTitleChangeItem:withProtobufData:
participantChangeProtobufForCompressedData:
populateIMParticipantChangeItem:withProtobufData:
locationShareStatusChangeProtobufForCompressedData:
populateIMLocationShareStatusChangeItem:withProtobufData:
groupActionProtobufForCompressedData:
populateIMGroupActionItem:withProtobufData:
messageActionChangeProtobufForCompressedData:
populateIMMessageActionItem:withProtobufData:
createCKRecordForUpdateT1:zoneID:salt:
createCKRecordForUpdateT2:zoneID:salt:
createUpdateT1Info:
createItemWithCKRecord:
resetSyncStateForMessage:toState:
_ckUtilitiesSharedInstance
_deviceConditionsAllowsAttachmentFileSizeUpdateForActivity:
updateAttachmentFileSizesWithActivity:
registerWithCacheDelete
_cacheDeleteSetUp
resetAttachmentWatermark
_cacheDeleteRequestCacheableSpaceGuidanceWithID:diskVolume:urgency:requestedSize:
canWriteFileOfEstimatedSize:refreshCachedValue:
shouldDownloadAssetsOfSize:refreshCachedValue:
reportAvailableSpaceToBeDeleted:urgency:
deleteAttachmentsAndReturnBytesDeleted:urgency:
createDictionaryForNotDeletingAnyAttachments:urgency:
_copyAttachmentRecord:
_purgeableSpaceGivenUrgency:
_deleteAttachmentsAndReturnBytesDeleted:
__wrapperAroundCacheDeletePurgeableCallback:urgency:
__wrapperAroundCacheDeletePurgingCallback:urgency:
__wrapperAroundCacheDeletePurgeNotificationCallback:
isUsingCentralizeCacheDelete
purgeableAttachmentSize
purgeAttachments:
_fileTransfersToDelete:
_deleteFilesOnDiskAndUpdateTransfers:
_postTransferInfoOfDeletedTransfers:
metricAttachmentsToPurge:withActivity:
_fileTransfersToValidate:
_fetchTransfersFromCloudKit:withActivity:
_getIndexSetForBatch:indexOfTransfers:
_indexOfNextBatch:totalTransfers:indexOfTransfers:
_shouldFetchNextBatch:totalTransfers:
_fetchTransfersFromCloudKit:indexOfTransfers:numberOfBatchesToFetch:activity:withCompletion:
alreadyCapturedErrorWithAutoBugCapture
setAlreadyCapturedErrorWithAutoBugCapture:
allowsWritingToDisk
setAllowsWritingToDisk:
isDeviceLowOnDiskSpace
setDeviceLowOnDiskSpace:
isUsingCentralizedModel
setIsUsingCentralizedModel:
isUpdatingAttachmentFileSizes
setIsUpdatingAttachmentFileSizes:
_alreadyCapturedErrorWithAutoBugCapture
_allowsWritingToDisk
_deviceLowOnDiskSpace
_isUsingCentralizedModel
_isUpdatingAttachmentFileSizes
TB,N,V_alreadyCapturedErrorWithAutoBugCapture
TB,N,V_allowsWritingToDisk
deviceLowOnDiskSpace
TB,N,GisDeviceLowOnDiskSpace,V_deviceLowOnDiskSpace
TB,N,V_isUsingCentralizedModel
TB,V_isUpdatingAttachmentFileSizes
isLocalUserAvailableForContactInActiveMode:error:
processMessages:inChat:fromIDSID:
replyDelegate
setReplyDelegate:
T@"<IMDAutoReplyDelegate>",W,N
_processMessagesForAvailabilityAutoReply:forIncomingMessageFromIDSID:inChat:
_userIsAvailableToHandle:
_dndHandleForIMDHandle:
_chatEligibleForAvailabilityInformation:
_messageSenderEligibleToReceiveAvailabilityInformation:
_messageItemsSupportingAvailabilityReplyFromItems:
_sendDeliveredQuietelyForMessages:forIncomingMessageFromIDSID:inChat:
_sendTextAutoReplyIfNecessaryForMessages:withUrgentBreakthroughInstructions:inChat:
_deviceIsPhone
_deviceSupportsiMessageAutoReply
_localDeviceHasSIMMatchingChat:
_deviceSupportsSMSAutoReplyForChat:
_isInDrivingFocus
_haveRecentlySentUnavailabilityAutoReplyMessageToChat:
_messageItemsSupportingBreakthroughNotifications:
_messageItemSupportsBreakthroughNotification:
_messageItemSupportsAvailabilityReply:
_messageGuidsForMessages:
_shouldIgnoreDoNotDisturbForMessages:inChat:
_haveRecentUrgentMessageInGracePeriodForChat:
iterateRecentMessagesInChat:withBlock:
_isSMSChat:
_messageHasLegacyUrgentTriggerMatchInText:
_autoReplyMessageTextWithUrgentBreakthroughInstructions:
_sendTextAutoReplyToChat:withUrgentBreakthroughInstructions:
_shouldSendTextAutoReplyForChat:
_stringForAutoReplyAudience:
_autoReplyAudience
_customizedAutoReplyMessage
_audience:allowsRepliesToChat:
_contactsContainsParticipants:
_favoritesContainsParticipants:
_hasRecentOutgoingMessagesInChat:
_messageIsSOS:
_sosTransportValidForMessage:
_sosURLMatchInText:
automaticDNDStatus
setAutomaticDNDStatus:
_replyDelegate
_automaticDNDStatus
T@"CARAutomaticDNDStatus",&,N,V_automaticDNDStatus
T@"<IMDAutoReplyDelegate>",W,N,V_replyDelegate
_initWithContainer:scope:
_zoneManager
_zoneIdentifierForOperation:
addOperation:
identifierToZoneMap
_identifierToZoneMap
T@"NSDictionary",R,N,V_identifierToZoneMap
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
screenTimeAskReponseHandler
familyInviteResponseHandler
_setupNotificationCenter
_markMessageAsRead:inChat:withCompletionHandler:
notificationCenter
setNotificationCenter:
setScreenTimeAskReponseHandler:
setFamilyInviteResponseHandler:
_notificationCenter
_screenTimeAskReponseHandler
_familyInviteResponseHandler
T@"UNUserNotificationCenter",&,N,V_notificationCenter
T@"IMDScreenTimeAskReponseHandler",&,N,V_screenTimeAskReponseHandler
T@"IMDFamilyInviteReponseHandler",&,N,V_familyInviteResponseHandler
_chatFetchRecordZoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:
_chatFetchRecordZoneChangesCKConfiguration:
_chatSyncOperationGroupWithName:
_chatSyncOperationGroup
fetchChatZoneChangesCKOperationUsingToken:zone:resultsLimit:groupName:activity:
fetchChatZoneChangesCKOperationUsingToken:zone:resultsLimit:activity:
_chatWriteRecordsCKConfiguration:
saveChatsCKOperationUsingRecordsToSave:activity:
deleteChatCKOperationUsingRecordIDstoDelete:
fetchChatCKOperationUsingRecordIDs:
registerSessionClassWithBundle:
allServices
serviceWithName:
_services
_ckAccountChanged:
setPersonalNickname:oldRecordID:completionBlock:
getNicknameWithRecordID:decryptionKey:completionBlock:
deleteAllPersonalNicknamesWithCompletion:
defaults
_nicknameFeatureEnabled
evaluateAccountStateForFeatureEligibility
aliasesDidChange:
_evaluateIfAccountHasMultiplePhoneNumbers
_reuploadLocalProfileVersionNumber
_tryToReuploadPersonalNicknameWithRetryCount:reuploadVersion:
reuploadProfileIfNeeded
pendingNicknameUpdates
handledNicknames
newDeviceDidSignIntoiMessage
_retryPeerRequestWithRetry:
_newDeviceDidSignIntoiMessageWithRetryCount:
deviceSignedOutOfiMessage
verifyTruncatedRecordIDMatchesPersonalNickname:forChat:
_beginNicknameUpload:
_endNicknameUpload
setPersonalNickname:
setPersonalNickname:completionBlock:
_uploadPendingNicknameIfNecessary
_resetHandleSharingList
_clearSharingLists
currentPersonalNicknamewithCompletionBlock:
currentPersonalNicknameWithRecordID:decryptionKey:completionBlock:
NicknameWithRecordID:URI:decryptionKey:withCompletionBlock:
deleteAllPersonalNicknames:withCompletion:
_updateSharingPreferencesIfNeededFromMadridMessage:
_updateMessageDictionaryWithPendingNicknameUpdates:
messageDictionaryWithPersonalRecordIDAndVersion
_markNicknameAsUpdatedForHandleID:
_updateHandledNicknamesIfNeeded:
_showDebugAlertWithHeader:message:
_updateCloudKitRecordIDAndDecryptionKeyIfNeededFromMadridMessage:
_updateHandleDenyAllowListIfNeeded:
_updateDenyAllowListHandlesVersion
_syncHandleAllowDenyListToOtherDevices
_requestingToSendLocalNicknameInfo:
handleNicknameUpdatesFromPeerDevice:fromPeerDevice:
sendPendingNicknameUpdatesDidChange
_isNicknamesSharingEnabled
sendNicknamePreferencesDidChange
sendPersonalNicknameRecordIDAndVersionRequestedByDevice:
sendPersonalNicknameRecordIDAndVersionToAllPeers
_sendMessageDictionary:toDevice:
queueChatToSendNicknamePostUploadIfNeeded:
sendPersonalNicknameToChat:
allowListedHandlesForSharing
denyListedHandlesForSharing
broadcastHandlesSharingNicknamesDidChange
allowHandlesForSharing:onChatGUIDs:
denyHandlesForSharing:
handleAllowList
handleDenyList
_updateHandleList:withHandles:forKey:broadcastUpdates:
_updatePendingNicknameVersion
saveNicknameForRecordID:handleID:userNickname:
clearPendingNicknameForHandleID:
ignorePendingNicknameForHandleID:
_broadcastPendingMapChanged
addNicknameToPendingUpdates:
replacedNicknameForHandleIDInHandledMapIfNeeded:nickname:
_markNicknameAsUpdated:incrementPendingNicknameVersion:
_updateNicknameInHandledMap:
markNicknameAsUpdated:
_writeNicknameToKVStore:nickname:
_deleteNicknameFromPendingMap:
_deleteHandleIDFromPendingMap:
_deleteHandleIDFromHandledMap:
cleanUpNicknameForID:
_deviceUnderFirstUnlock
_isUnderScrutiny
_setUnderScrutiny:
_deleteDataUnderScrutiny
_loadAllInfoFromDiskIfAble
loadPersonalNicknameIfNeeded
loadHandledNicknamesAndPendingUpdates
loadSharingHandlesPrefs
_populateNicknameDictionary:forKVStore:limitToLoad:
_makeAllNicknameContentsClassC
_storePublicNickname:nicknameLocation:encryptionKey:
_storePendingNicknameForUpload:
_getPendingNicknameForUpload
_deletePendingNicknameForUpload
_deletePublicNicknameLocationAndKey
nickNameDecryptionKey
nickNameRecordID
storedPersonalNickname
pendingPersonalNickname
_deleteAvatarForNickname:
allNicknames
nicknameForRecordID:
nicknameForRecordID:handle:
nicknameForHandleURI:
nicknameForHandle:
substringRecordIDForNickname:
transferServicesController
markAllNicknamesAsPending
personalNickname
kvStore
setKvStore:
lastMeContactStoreSync
setLastMeContactStoreSync:
handledNicknamesKVStore
setHandledNicknamesKVStore:
pendingNicknameUpdatesKVStore
setPendingNicknameUpdatesKVStore:
handleSharingKVStore
setHandleSharingKVStore:
setHandledNicknames:
setPendingNicknameUpdates:
setHandleAllowList:
setHandleDenyList:
needToLoadMapsInfoFromDisk
setNeedToLoadMapsInfoFromDisk:
chatsToSendNicknameInfoTo
setChatsToSendNicknameInfoTo:
nicknameIsUploadingToCK
setNicknameIsUploadingToCK:
_needToLoadMapsInfoFromDisk
_nicknameIsUploadingToCK
_personalNickname
_kvStore
_lastMeContactStoreSync
_handledNicknamesKVStore
_pendingNicknameUpdatesKVStore
_handleSharingKVStore
_handledNicknames
_pendingNicknameUpdates
_handleAllowList
_handleDenyList
_chatsToSendNicknameInfoTo
T@"IDSKVStore",&,N,V_kvStore
Td,N,V_lastMeContactStoreSync
T@"IDSKVStore",&,N,V_handledNicknamesKVStore
T@"IDSKVStore",&,N,V_pendingNicknameUpdatesKVStore
T@"IDSKVStore",&,N,V_handleSharingKVStore
T@"NSMutableDictionary",&,N,V_handledNicknames
T@"NSMutableDictionary",&,N,V_pendingNicknameUpdates
T@"NSMutableSet",&,N,V_handleAllowList
T@"NSMutableSet",&,N,V_handleDenyList
T@"IMNickname",&,N,V_personalNickname
TB,N,V_needToLoadMapsInfoFromDisk
T@"NSMutableArray",&,N,V_chatsToSendNicknameInfoTo
TB,N,V_nicknameIsUploadingToCK
T@"NSSet",R,N
messageWithGUID:
copyOfMessagesWithReplyToGUID:
compareMessageToOtherMessagesWithSameReplyToGUIDAndAssignSortID:existingMessagesWithSameReplyToGUID:
assignSortIDToIncomingMessageWithNoExistingMessagesWithSameReplyToGUID:onChat:
persistMessage:
assignSortIDToIncomingMessage:onChat:
assignAndPersistSortIDForIncomingMessage:onChat:
_suppressDBUpdateTimerFired
__postDBUpdate
_updateCacheForMessageGUID:fromMessage:toMessage:updateLastMessage:calculateUnreadCount:
_missingMessageReadReceiptCache
databaseFull
databaseNoLongerFull
_displayDatabaseFullAlert
focusStateDidChange
performInitialHousekeeping
_chatRegistrySharedInstance
_updateModificationDate
_performBlock:afterDelay:
_storeAttachmentsForMessage:
updateFileTransfer:
storeItem:forceReplace:
updateSyndicatedMessageWithSyndicationMessageAction:
updateSyndicatedMessageWithMessageGUID:newRange:
updateSyndicatedMessageWithMessageItem:newRange:
storeMessage:forceReplace:modifyError:modifyFlags:flagMask:
storeMessage:forceReplace:modifyError:modifyFlags:flagMask:updateMessageCache:calculateUnreadCount:
storeMessage:forceReplace:modifyError:modifyFlags:flagMask:updateMessageCache:calculateUnreadCount:reindexMessage:
updateUnformattedID:forBuddyID:onService:
_itemsForMessageRecords:handleID:useAttachmentCache:shouldLoadAttachments:reverseOrder:
_messageItemsForMessageRecords:handleID:useAttachmentCache:shouldLoadAttachments:reverseOrder:
_hasMessagesWithGUIDs:
_itemsWithAssociatedGUID:shouldLoadAttachments:
_itemsWithGUIDs:
_itemsWithHandles:onServices:messageGUID:threadIdentifier:limit:onlyMessages:
_itemsWithRoomNames:onServices:messageGUID:threadIdentifier:limit:onlyMessages:
_itemsWithHandlesBeforeAndAfterGUID:handles:onServices:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:hasMessagesBefore:hasMessagesAfter:
_unreadMessagesWithHandles:onServices:limit:fallbackGUID:
_unreadMessagesWithRoomNames:onServices:limit:fallbackGUID:
registerTransfersWithGUIDs:forMessageGUID:
_fileTransferCenter
messagesWithAssociatedGUID:
messagesWithAssociatedGUID:shouldLoadAttachments:
messagesWithGUIDs:
canStoreItem:onService:
canStoreMessage:onService:
hasStoredMessageWithGUID:
itemWithGUID:
messageWithGUID:registerAttachments:
existingMessageSimilarToMessage:skipServices:skipGUIDs:withinTimeInterval:participants:
markMessageAsDeduplicated:
messageWithReplaceMessageID:fromHandle:onService:
itemsWithHandles:onServices:limit:
itemsWithHandles:onServices:messageGUID:limit:
itemsWithHandles:onServices:messageGUID:threadIdentifier:limit:
itemsWithRoomNames:onServices:limit:
itemsWithRoomNames:onServices:messageGUID:limit:
itemsWithRoomNames:onServices:messageGUID:threadIdentifier:limit:
itemsWithHandles:onServices:messageGUID:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:hasMessagesBefore:hasMessagesAfter:
lastMessageWithHandles:onServices:
unreadMessagesWithHandles:onServices:limit:fallbackGUID:
unreadMessagesWithRoomNames:onServices:limit:fallbackGUID:
lastMessageWithRoomNames:onServices:
lastMessageForChatWithRowID:
lastTUConversationItemForChat:
attachmentsWithHandles:onServices:
attachmentsWithRoomNames:onServices:
messageActionItemsForOriginalMessageGUID:
frequentRepliesForForChatIdentifiers:onServices:limit:
messagesWithReplyToGUID:
addMissingMessageReadReceipt:
popReadReceiptForMissingGUID:
chatForMessage:
chatForMessageGUID:
chatForMessageGUID:enableVerboseLogging:
chatsForMessage:
chatsForMessageGUID:
_chatsForMessageGUID:enableVerboseLogging:
chatForMessageIdentifier:
existingChatForMessageGUID:
_chatsForMessageIdentifier:
_copyHandle:onService:
_isValidPhoneNumber:forCountryCode:
cleanUnformattedPhoneNumber:countryCode:
_cleanupPhoneNumber:
resolveUnformattedRepresentationsForHandles:onService:message:completionBlock:
deleteMessageGUIDs:inChat:
deleteMessageGUIDs:
_deleteMessagesWithGUIDs:chatIdentifiers:style:onServices:batchNumber:completion:
deleteMessagesWithChatIdentifiers:style:onServices:completion:
deleteMessagesWithChatIdentifiers:style:onServices:
deleteMessagesWithReplaceMessageID:fromHandle:onService:
markMessageGUIDUnread:
markMessagesAsReadWithIdentifiers:onServices:chatStyle:upToGUID:readDate:fromMe:
markMessagesAsReadWithChatGUIDs:upToGUID:readDate:fromMe:
deleteMessageFromSpotlightWithGUID:
lastFailedMessageDate
unreadMessagesCount
_calculateUnreadMessagesCountFilteredByFocus
_handlesForChat:
cleanseAttachments
isAttachmentReferencedByMessage:
isSuppressDatabaseUpdates
setSuppressDatabaseUpdates:
retractPostedNotificationsForMessageGUIDs:
postUrgentNotificationsForMessageGUIDs:
updatePostedNotificationsForMessageGUIDs:
_postDBUpdate
updateStamp
databaseChatSpamUpdated:
notificationContext
_shouldUseBadgeUtilities
rebuildLastFailedMessageDate
rebuildUnreadMessageCount
postCountChanges
replaceMessageAcknowledgmentsWithNewMessageAcknowledgment:associatedMessageGUID:sender:
_fileTransferGUIDsInMessageBody:
storeEditedMessage:editedPartIndex:editType:previousMessage:chat:updatedAssociatedMessageItems:
_updateAssociatedMessageItemsFromMessage:toMessage:
loadConsumedSessionPayloadsForItems:
_itemClassShouldUpdateTransferForItem:
messagesThatNeedSyncWithCloudKitWithLimit:
_messagesThatNeedSyncWithCloudKitWithLimit:attemptCount:
messagesPendingUpdateT1ToCloudKitWithLimit:
_messagesPendingUpdateT1ToCloudKitWithLimit:attemptCount:
messagesPendingUpdateT2ToCloudKitWithLimit:
_messagesPendingUpdateT2ToCloudKitWithLimit:attemptCount:
markAllMessagesAsNeedingCloudKitSync
copyMessagesThatNeedToBeDeletedInCloudKitWithLimit:
deleteMessagesFromTombStoneTableWithRecordIDs:
clearMessagesTombStoneTable
markMessageAsCleanWithROWID:
markMessageAsIgnoreButNeedingSyncWithROWID:
lastSyncedMessageRowID
modificationStamp
setModificationStamp:
_modificationStamp
_cachedUnreadMessageCount
_cachedLastFailedMessageDate
_suppressedUpdates
_pendingDBUpdatePost
_suppressedUpdatesTimer
T@"NSString",&,V_modificationStamp
startListening
stopListening
analysisFetchOptions
syndicationLibrary
changeObservationQueue
_analysisFetchOptions
_syndicationLibrary
_changeObservationQueue
T@"PHPhotoLibrary",R,N,V_syndicationLibrary
T@"NSObject<OS_dispatch_queue>",R,N,V_changeObservationQueue
T@"PHFetchOptions",R,N,V_analysisFetchOptions
caseInsensitiveCompare:
handleInfo
compareIDs:
initWithAccountID:service:guid:groupID:chatIdentifier:participants:roomName:displayName:lastAddressedLocalHandle:lastAddressedSIMID:properties:state:style:isFiltered:hasHadSuccessfulQuery:engramID:serverChangeToken:cloudKitSyncState:originalGroupID:lastReadMessageTimeStamp:lastMessageTimeStampOnLoad:cloudKitRecordID:isBlackholed:autoDonationBehavior:autoDonationBehaviorLastModificationDate:
setGuid:
chatIdentifier
setChatIdentifier:
serviceName
setServiceName:
participants
setParticipants:
roomName
setRoomName:
setDisplayName:
autoDonationBehavior
autoDonationBehaviorLastModificationDate
_setAutoDonationBehavior:lastModificationDate:
setAutoDonationBehavior:lastModificationDate:
groupID
setGroupID:
engramID
setEngramID:
serverChangeToken
setServerChangeToken:
cloudKitSyncState
setCloudKitSyncState:
originalGroupID
setOriginalGroupID:
lastReadMessageTimeStamp
setLastReadMessageTimeStamp:
lastTUConversationCreatedDate
setLastTUConversationCreatedDate:
lastAddressedLocalHandle
setLastAddressedLocalHandle:
lastAddressedSIMID
setLastAddressedSIMID:
properties
setProperties:
lastMessage
setLastMessage:
style
setStyle:
unreadCount
_setUnreadCount:
isArchived
isBlackholed
setIsBlackholed:
rowID
_setRowID:
isFiltered
setIsFiltered:
hasHadSuccessfulQuery
setHasHadSuccessfulQuery:
lastMessageTimeStampOnLoad
setLastMessageTimeStampOnLoad:
_updateCachedParticipants
participantHandles
addParticipants:
addParticipant:
removeParticipants:
removeParticipant:
resetParticipants:
recoverParticipantsIfNeeded
serviceSession
engroupCreationDate
isGroupChat
isSMS
persistentID
deviceIndependentID
pinningIdentifier
_sortedParticipantIDHashForParticipants:
_sortedParticipantIDHashForParticipants:usesPersonCentricID:
isOlderThan:
isNewerThan:
compareBySequenceNumberAndDateDescending:
chatProperties
dictionaryRepresentationIncludingLastMessage
copyDictionaryRepresentation:
dictionaryRepresentation
_updateLastMessage:
updateProperties:
storeAndBroadcastChatChanges
generateNewGroupID
isUnnamedChat
updateGroupID:
updateEngramID:
updateEngroupCreationDate:
updateLastReadMessageTimeStampIfNeeded:
updateServerChangeToken:
updateCloudKitSyncState:
updateOriginalGroupID:
updateCloudKitRecordID:
resetCKSyncState
updateLastAddressedHandle:
updateLastAddressedHandle:forceUpdate:
updateLastAddressedSIMID:
updateDisplayName:
updateDisplayName:sender:
updateIsFiltered:
updateIsBlackholed:
updateNumberOfTimesRespondedToThread
updateIsiMessageSpam:
updateSMSCategory:subCategory:
updateShouldForceToSMS:
updateSMSSpamExtensionNameChatProperty:
setLastSentMessageDate:
updateReceivedBlackholeError:
updateSMSHandshakeState:
updateMessageHandshakeState:
isiMessageSpam
isSMSSpam
getNumberOfTimesRespondedToThread
lastSentMessageDate
receivedBlackholeError
smsHandshakeState
messageHandshakeState
lastSeenMessageGUID
updateLastSeenMessageGuidIfNeeded:
lastTranslatableMessageGUIDWithLanguageCode:
updateLastMessageGUID:forLanguageCode:
isEmergencyChat
updateIsEmergencyChat:
updateHasHadSuccessfulQuery:
groupPhotoGuid
updateGroupPhotoGuid:
groupPhotoUploadFailureCount
updateGroupPhotoUploadFailureCount:
_persistMergedIDMergedChatsIfNeeded:
_mergeParticipantIDs
personCentricID
cloudKitChatID
_ckUniqueID
cloudKitDebugDescription
isBusinessChat
tearDownToneNotificationSessionIfNeeded
updateNicknamesForParticipants:
meCardHasUpdated
cloudKitRecordID
setCloudKitRecordID:
lastSeenMessageGuid
createEngramGroupOnMessageSend
setCreateEngramGroupOnMessageSend:
pendingENGroupParticipantUpdate
setPendingENGroupParticipantUpdate:
nicknamesForParticipants
wasReportedAsJunk
setWasReportedAsJunk:
numMessagesSent
setNumMessagesSent:
meCardUpdated
setMeCardUpdated:
_serviceName
_properties
_chatIdentifier
_guid
_groupID
_engramID
_roomName
_displayName
_lastAddressedLocalHandle
_lastAddressedSIMID
_participants
_lastMessage
_chatInfo
_unreadCount
_rowID
_cloudKitSyncState
_originalGroupID
_serverChangeToken
_lastReadMessageTimeStamp
_lastMessageTimeStampOnLoad
_style
_createEngramGroupOnMessageSend
_pendingENGroupParticipantUpdate
_isArchived
_isFiltered
_isBlackholed
_hasHadSuccessfulQuery
_autoDonationBehavior
_autoDonationBehaviorLastModificationDate
_wasReportedAsJunk
_meCardUpdated
_cloudKitRecordID
_lastSeenMessageGuid
_nicknamesForParticipants
_numMessagesSent
T@"<IMDaemonListenerChatProtocol>",R,N
T@"NSString",C
T@"NSString",C,SsetGroupID:
T@"NSString",C,SsetEngramID:
T@"IMMessageItem",&
T@"NSDictionary",&
TQ,S_setUnreadCount:
Tq,S_setRowID:
T@"NSArray",C
TQ,V_numMessagesSent
TB,V_meCardUpdated
T@"NSString",C,N
T@"NSString",C,V_cloudKitRecordID
Tq,N
T@"NSString",R,C,V_lastSeenMessageGuid
T@"NSDate",&,N
T@"IMDServiceSession",R,&
T@"IMDAccount",R,&
T@"IMDService",R,&
T@"NSDictionary",R,&
TB,R
TB,V_createEngramGroupOnMessageSend
TB,V_pendingENGroupParticipantUpdate
T@"NSDictionary",R,N,V_nicknamesForParticipants
TB,V_wasReportedAsJunk
T@"NSDate",R,N
_CKUtilitiesSharedInstance
_container
_fetchLatestSaltFromCloudKitAndPersistWithCompletion:
fetchLatestRecordKeyFromCKAndCreateIfKeyDoesNotExistWithCompletion:
fetchLatestRecordKeyFromCKAndCreateIfKeyDoesNotExistWithCompletion:forceFetch:
clearLocalSyncState
deleteDeDupeRecordZone
cachedSalt
setCachedSalt:
_cachedSalt
T@"NSObject<OS_dispatch_queue>",R,N,V_ckQueue
T@"NSString",&,V_cachedSalt
_contactsChanged:
updateMeCardHasUpdatedForAllChats
_checkForContactChanges
supportedServiceNames
chatStore
_sharedMessageStore
chats
allChats
cachedChats
blackholedChats
blackholedChatsExist
_chatsWithBlackholed:
cachedChatCount
chatForHandle:account:chatIdentifier:guid:lastAddressedHandle:lastAddressedSIMID:isBlackholed:
chatForHandles:account:chatIdentifier:style:groupID:displayName:guid:lastAddressedHandle:lastAddressedSIMID:isBlackholed:
chatForRoom:account:chatIdentifier:guid:
generateUnusedChatIdentifierForGroupChatWithAccount:
existingiMessageChatForID:
existingiMessageChatForID:withChatStyle:
existingSMSChatForID:
existingSMSChatForID:withChatStyle:
_cachedChatWithGUID:
_cachedChatsWithGroupID:
existingChatWithGUID:
existingChatsFilteredUsingPredicate:
existingChatsFilteredUsingPredicate:sortedUsingLastMessageDateAscending:limit:
existingChatsFilteredUsingPredicate:sortedUsingLastMessageDateAscending:olderThan:limit:
existingChatsWithGroupID:
existingChatWithIdentifier:account:
existingChatsWithPinningIdentifier:
existingChatWithEngramID:
existingChatForID:account:
existingChatForIDs:account:style:
existingChatForIDs:account:displayName:groupID:style:
existingChatsForIDs:onService:style:
existingChatsForIDs:onService:displayName:groupID:style:
existingChatsForIDs:displayName:groupID:style:
_existingChatsForIDs:serviceName:displayName:groupID:style:
_legacyExistingLoadedChatsForIDs:onService:displayName:groupID:style:
existingChatForRoom:account:
allChatsWithIdentifier:style:serviceNames:
allExistingSupportedServiceChatsWithIdentifier:style:
allExistingChatsWithIdentifier:style:
allExistingChatsWithIdentifier:
_participantIDSetFromHandles:toIdentifier:
_exactGroupChatMatchOrNewestMatchingGroupID:serviceName:participants:toIdentifier:
_newestGroupChatMatchingParticipants:displayName:strictDisplayNameMatching:serviceName:toIdentifier:
_setGroupID:forChatAndAllSiblings:
bestCandidateGroupChatWithFromIdentifier:toIdentifier:displayName:participants:groupID:serviceName:
updateLastMessageForChat:hintMessage:
updateLastMessageForChat:hintMessage:historyQuery:
updateUnreadCountForChat:
updateNotificationUnreadCountForChat:
updateStateForChat:fromMessage:toMessage:forcePost:hintMessage:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:setUnreadCountToZero:
updateStateForChat:hintMessage:
updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:
updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:
updateStateForChat:hintMessage:shouldRebuildFailedMessageDate:setUnreadCountToZero:
updateStateForChat:forcePost:
updateStateForChat:forcePost:shouldRebuildFailedMessageDate:
updateStateForChat:forcePost:shouldRebuildFailedMessageDate:shouldCalculateUnreadCount:
updateStateForChat:forcePost:shouldRebuildFailedMessageDate:setUnreadCountToZero:
updateGroupIDForChat:newGroupID:
checkBlackholedChatsExistAfterUpdatingChatWithAdd:
markAsSpamForIDs:style:onServices:chatID:queryID:autoReport:
_reportMessageDictionaryForMessages:withLastAddressedHandle:maxMessageLength:isAutoReport:withChat:maxMessagesToReport:totalMessageCount:
_reportToIDSiMessageSpam:
_shouldHandleInternalPhishingAttempts
_spamMessageCreator
_reportMessageDictionaryForMessages:withLastAddressedHandle:maxMessageLength:isAutoReport:withChat:maxMessagesToReport:totalMessageCount:onlyReportForiMessageService:notifyInternalSecurity:
_finalizeIncomingChat:
_populateLastMessageForChat:
_addChatFromCacheMiss:preferExistingChat:
_addChatsFromCacheMisses:preferExistingChats:
addChat:
addChat:firstLoad:
_evictCachedChat:
removeChat:
addItem:toChat:
removeItem:fromChat:
addMessage:toChat:
addMessage:toChat:deferSpotlightIndexing:
removeMessage:fromChat:
stringForChatStyle:
_fixSMSGroupChatAndStoreIfNeeded:iMessageChat:chatToRegenerate:
_fixUpChatParticipantsIfNeeded:usingChatGUIDToChatMap:
_fixUpChatParticipantsIfNeeded:
_chatGUIDToChatMapForChats:
_siblingChatForChat:usingChatGUIDToChatMap:
_chatInfoForChats:
_chatInfoForConnection
_allChatInfo
_chatInfoForNumberOfChats:
_blackholedChatInfoForNumberOfChats:
_chatInfoInRange:wantsBlackholed:
_setInitialLoadForTesting:
_forceReloadChats:
refreshUIWhileSyncing
waitForLoadedChatsWithCompletionHandler:
loadChatsWithCompletionBlock:
_persistMergeIDMergedChatsIfNeeded
updateProperties:chat:style:
addIMDHandleToRegistry:
removeIMDHandleFromRegistry:
allHandlesForID:
_makeAllAttachmentsClassC
findDuplicateUnnamedGroups:
_chat:isDuplicateOfChat:
findDuplicateChats:
_findChatWinnerInDuplicateChatArray:fixDisplayName:
_findLosingChatGUIDsInArrayOfChats:withWinner:
_createGroupChatsArray
_mergeDuplicateGroupsIfNeeded
repairDuplicateChatsIfNeeded
_markGroupPhotosAsUnpurgeableIfNecessary
_allHandles
groupChatsBasedOnIdentity:
groupChatsBasedOnIdentityUsingCacheIfApplicable:
truncatedSortedChatsGroupedByPersonCentricID:count:pinnedChatIdentifiers:
sortPersonCentricChatGroups:
personCentricGroupedChatsArrayWithMaximumNumberOfChats:skipsLastMessageLoading:usingChats:useCachedChatGroups:includingPinnedChatIdentifiers:
_mergedPinningIdentifiersForChats:chatGUIDToChatMap:groupedChatsByPersonCentricIdWithSortedChats:
_haveInconsistentGroupPhotoGuidOnMergedChats:
_repairInconsistentGroupPhotoGuidOnMergedChatsIfNecessary:
chatsToUploadToCloudKitWithLimit:
updateChatWithGUID:serverChangeToken:recordID:
_insertChatUsingCKRecord:
_newestExistingChatWithOriginalGroupID:onService:
_newestExistingChatWithGroupID:onService:
_existingChatForCKRecord:
_ensureNoExistingGroupForCKRecord:
_markForksAsSyncedForChat:
_updateChat:usingRecord:
updateChatUsingCKRecord:
resolveChatConflictUsingCKRecord:localGUID:
markChatAsDeferredForSyncingUsingCKRecord:
markDeferredChatsAsNeedingSync
_shouldUpdateSyncStatsForChat:originalSyncState:
_shouldUpdateSyncStatsForMessage:originalSyncState:
_updateSyncStatisticsForChat:incrementTotalCount:
_updateSyncStatisticsForMessage:incrementTotalCount:
__addChatToGroupIDChatIndex:
__removeChatFromGroupIDChatIndex:
messagesToUploadToCloudKitWithLimit:
_lookupChatUsingParentChatID:service:
_itemFromCKRecord:
_parentChatIDFromCKRecord:
_addItemToParentChatIfNotLocationItem:parentChat:updatedLastMessageCount:
_setSortIDOnIncomingMessage:forChat:
processMessageUsingCKRecord:
_existingItemRequiresUpgrade:itemFromCKRecord:
_adoptUpdatedStateForExistingItem:itemFromCKRecord:
processMessageUsingCKRecord:updatedLastMessageCount:
handleMessageUpdate:
handleMessageUpdateConflictType:serverRecord:localRowID:
updateSyncedSyndicationRanges:forGUID:
copyRecordIDsAndGUIDsPendingCloudKitDelete
clearPendingDeleteTable
doneLoadingAfterMerge
isBeingSetup
_existingiMessageChatForChatIdentifier:style:
simulateMessageReceive:serviceName:groupID:handles:sender:date:associatedMessageType:associatedMessageGuid:
invalidatePersonCentricGroupedChatsCache
_contactsBasedMerginEnabled
_updateCachedAliasToCNIDMap:withHistoryToken:completionHandler:
_aliasToCNIDMapForAliases:
setHistoryToken:
aliasToCNIDMap
_updateCurrentAliasToCNIDDictionaryAndHistoryTokenWithCompletionHandler:
_generateCurrentAliasToCNIDDictionary
_populateContactIDOnHandles
_updateCachedCNIDMapForHandles:
_extractHandlesFromMap:usingCNID:
_handlesWithChangedContactsOriginalMap:newMap:
existingOneOnOneChatsWithIdentifiers:
existingGroupChatsContainingHandles:
_chatGUIDsThatNeedRemergingWithCompletionHandler:
_chatGUIDsThatNeedRemerging:chatDictionaryArray:aliasMap:
moveMessagesWithGUIDsToRecentlyDeleted:deleteDate:
moveMessagesInChatsWithGUIDsToRecentlyDeleted:deleteDate:
recoverMessagesWithChatGUIDs:
recoverableMessagesMetadata
permanentlyDeleteRecoverableMessagesInChatsWithGUIDs:completionHandler:
recoverableMessagesMetadataPendingCloudKitSaveWithLimit:
recoverableMessagesMetadataPendingCloudKitDeleteWithLimit:
clearRecoverableMessageTombStones
updateRecoverableMessageSyncState:forMessageRowID:onPartIndex:
storeRecoverableMessagePartWithBody:forMessageWithGUID:deleteDate:
persistedChatCount
idToHandlesMap
setIdToHandlesMap:
historyToken
setCkUtilities:
setChatStore:
hasDumpedLogsForNoExisitingGroup
setHasDumpedLogsForNoExisitingGroup:
messageProcessingController
messageHistorySyncController
personCentricGroupedChatsCache
setPersonCentricGroupedChatsCache:
cachedAliasToCNIDMap
setCachedAliasToCNIDMap:
conversationManager
_chatsByGroupID
_chatsLock
_handlesLock
_chats
_doneLoadingAfterMerge
_blackholedChatsExistCache
_hasDumpedLogsForNoExisitingGroup
_persistedChatCount
_idToHandlesMap
_historyToken
_ckUtilities
_chatStore
_messageProcessingController
_messageHistorySyncController
_personCentricGroupedChatsCache
_cachedAliasToCNIDMap
_conversationManager
T@"NSMutableDictionary",&,N,V_idToHandlesMap
T@"NSData",R,N,V_historyToken
T@"IMDCKUtilities",&,N,V_ckUtilities
T@"IMDChatStore",&,N,V_chatStore
TB,N,V_hasDumpedLogsForNoExisitingGroup
T@"IMDMessageProcessingController",R,N,V_messageProcessingController
T@"IMDMessageHistorySyncController",R,N,V_messageHistorySyncController
T@"NSMutableDictionary",&,N,V_personCentricGroupedChatsCache
T@"NSMutableDictionary",&,N,V_cachedAliasToCNIDMap
T@"TUConversationManager",R,N,V_conversationManager
TQ,R,N
TQ,R,N,V_persistedChatCount
_serverSaysToUseOldContainer
_nickNameContainerIdentifier
_nickNameContainer
truthDatabase
truthPublicDatabase
truthContainer
manateeDataBase
nickNamePublicDatabase
fetchCurrentUserForNicknameContainer:
manateeContainer
nickNameContainer
_manateeContainer
T@"CKContainer",R,N,V_manateeContainer
T@"CKContainer",R,N,V_nickNameContainer
T@"CKContainer",R,N
copyEncodedSystemFields
_kvStorePath
initWithIdentifier:
_fetchRecordZoneChangesOptionsFromOperation:
_fetchResultLimit:
_ckRecordFromData:
_handleFetchZoneChangesOperation:
_serializedCKRecordData:
_handleModifyRecordsOperation:
queue
recordStore
setRecordStore:
_identifier
_queue
_recordStore
T@"NSString",R,N,V_identifier
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
T@"IDSKVStore",&,N,V_recordStore
_rampUpRecordID
_shouldSendPriorityRequest
_fetchLatestRampStateFromCK:
_writeRampStateAllowed:promoted:visible:fetchHadServerError:
_persistRampFetchServerError:
_performRampCheckWithRetryAfter:
fetchLatestRampStateFromCK:
cachedRampState:
retryTimer
setRetryTimer:
_retryTimer
T@"NSTimer",&,N,V_retryTimer
sharedManager
T@"IMDDaemonPropertyManager",R,N
setValue:ofProperty:
valueOfProperty:
persistentProperties
setValue:ofPersistentProperty:
valueOfPersistentProperty:
mutableProperties
setMutableProperties:
mutablePersistentProperties
setMutablePersistentProperties:
_mutableProperties
_mutablePersistentProperties
T@"NSMutableDictionary",&,N,V_mutableProperties
T@"NSMutableDictionary",&,N,V_mutablePersistentProperties
T@"NSDictionary",R,C,N
setContext:
context
shouldJettison:
firstOccurrence
count
setCount:
_contextWeakReference
_firstOccurrence
_count
T@,W,N
T@"NSDate",R,V_firstOccurrence
TQ,N,V_count
_cloudkitSyncingEnabled
fileEligibleForCacheDelete:
_askToTapToRadarForErrorString:path:
updateTransferIn:fromGUID:toGUID:
storeAttachment:associateWithMessageWithGUID:
storeAttachment:associateWithMessageWithGUID:chatGUID:storeAtExternalLocation:
removeAttachment:fromMessageWithGUID:
updateAttachment:
updateAttachment:chatGUID:storeAtExternalPath:
markFile:asPurgeable:
markAttachmentPurgeable:
markAttachmentUnpurgeable:
markAttachment:purgeable:
markAllAttachmentsAsNotPurgeable
attachmentWithGUID:
attachmentsWithGUIDs:
fileTransferWithAttachmentRecordRef:
attachmentsFilteredUsingPredicate:limit:
database
updateLegacyTransferGUIDIfNeeded:transfersToSync:
_shouldEarlyReturnForWrongItemType:
updateLegacyTransferGUIDOnMessageIfNeeded:
_loadAttachmentRecordForGUID:
_newFileTransferFromIMDAttachmentRecordRef:
_IMTransferGUIDForMessageGUID:andIndex:
_updateAttachmentGUID:withGUID:
_reindexMessage:completion:
_updateLegacyTransferGUIDOn:andUpdateMessageIfNeeded:transfersToSync:
_updatedMessageBody:replacingGuid:withGuid:
markAllAttachmentsAsNeedingCloudKitSync
deleteAttachmentsForMessage:
deleteAttachmentsWithGUIDs:
deleteAttachmentDataForTransfer:
deleteAttachmentWithGUID:
isSafeToDeleteAttachmentAtPath:
deleteAttachmentsDirectWithPredicate:
_transferCanBeMarkedPurgable:
syncController:syncBatchCompleted:
setIsSyncing:
resetRecordCounts
countRecordOnRead:didSucceed:
setBroadcastedSyncStateStateToFinished
setBroadcastedSyncStateStateToStarting
setBroadcastedSyncStateToDownloading
setBroadcastedSyncStateToUploading
setBroadcastedSyncStateToDeleting
setBroadcastedSyncStateToStartingPeriodicSync
setBroadcastedSyncStateToStartingInitialSync
syncStateDebuggingInfo:
addSyncDebuggingInfoToDictionary:
syncBatchCompleted:
recordsRead
setRecordsRead:
recordsWritten
setRecordsWritten:
recordsWriteFailed
setRecordsWriteFailed:
_isSyncing
_recordsRead
_recordsWritten
_recordsWriteFailed
TB,N,V_isSyncing
TQ,N,V_recordsRead
TQ,N,V_recordsWritten
TQ,N,V_recordsWriteFailed
T@"IMDCKSyncState",R,N
T@"<IMDCKAbstractSyncControllerDelegate>",W,V_delegate
_makeDeletePartsDictFor:withIndexes:withIndexToRangeMap:deleteDate:
_unsignedIntegerFromString:
_convertDeletedPartsDict:toIndexSet:toMap:
im_enqueuiMessageBlock:withTimeout:description:
im_enqueuSMSBlock:withTimeout:description:
archiveChat:
unarchiveChat:
blackholeChat:
unblackholeChat:
_addGroupPhotoToTransferCenterForChat:
_processIncomingChat:
loadAllChats
loadRecentChats
_loadChatsIncludingAllChats:
storeChat:
unreadCountForChat:
_incomingChatWithChatRecord:
_incomingChatsWithChatRecords:
chatWithGUID:
chatsFilteredUsingPredicate:
chatsFilteredUsingPredicate:sortedUsingDescriptors:limit:
chatsFilteredUsingPredicate:sortedUsingLastMessageDateAscending:olderThan:limit:
chatsWithIdentifier:
chatsWithIdentifier:onService:
chatsWithPinningIdentifier:
chatsWithGroupID:
chatsWithHandle:onService:
chatsWithHandles:onService:displayName:groupID:style:
chatsWithRoomname:onService:
newestChatWithOriginalGroupID:onService:
newestChatWithGroupID:onService:
enumerateBatchedChatsFilteredUsingPredicate:block:
enumerateBatchedChatsFilteredUsingPredicate:batchSize:block:
chatsGUIDsForMessageWithGUID:
chatsGUIDsForMessageWithIdentifier:
addMessageWithGUID:toChat:
addMessageWithGUID:toChat:deferSpotlightIndexing:
removeMessageWithGUID:fromChat:
remapMessageError:toError:forChat:completion:
deleteChat:
setChatIsFiltered:withChatGuid:
updatePersonCentricIDForHandlesInChatWithMessage:fromIdentifier:personCentricID:chat:
updateHandle:sourceMessage:personCentricID:onService:
_broadcastToForceReloadChats
messagePTaskStore
setMessagePTaskStore:
stateCaptureAssistant
setStateCaptureAssistant:
_lastModificationStamp
_messagePTaskStore
_stateCaptureAssistant
T@"NSString",&,V_lastModificationStamp
T@"<IMDMessagePTaskStore>",&,V_messagePTaskStore
T@"IMStateCaptureAssistant",&,N,V_stateCaptureAssistant
T@"<IMDRemoteDatabaseProtocol>",R,N
addLocationShareItemToMatchingChats:
_addLocationShareItemToMatchingChats:handleID:hasStoredItem:broadcastChanges:
_generateLocationSharingItemWithHandleID:direction:action:
receivedIncomingLocationSharePacket:
_forwardMappingPacket:toID:account:
incompatibleMessageDeleteDetected:
_messageZoneID
_messageRecordSalt
_numberOfMessagesToUpload
_numberOfRecordsToFetchForSyncType:
_messageDeleteBatchSize
_numberOfBatchesOfMessagesToFetchInInitialSync
_isValidCKRecordToSync:
_recordsToSaveWithAttemptCount:
_recordsToSave
_messageZoneCreated
_processRecordWriteCompletionForRecord:NSError:
_processModifyRecordsCompletion:deletedRecordIDs:operationError:isLastBatchOfWrite:activity:writeCompletionBlock:
_syncOperationGroupName
_writeDirtyMessagesToCloudKitWithActivity:completion:
_processRecordChange:
_shouldDeferCoreDuetMessagesSyncWithActivity:
_isCoreDuetSyncForMaxBatchCount:activity:
_deviceConditionsAllowsMessageSyncForActivity:deviceConditionsToCheck:currentBatchCount:maxBatchCount:
_migrateSyncTokens
setArchivedRecordSyncToken:
archivedRecordSyncToken
_resetArvchivedRecordSyncToken
_changeTokenKey
setLatestSyncToken:
latestSyncToken
_resetSyncToken
_processArchivedRecordsFetchCompletionZoneID:serverChangeToken:moreComing:currentBatchCount:maxNumberOfBatches:activity:error:completionBlock:
_fetchArchivedRecordsIfNeeded:currentBatchCount:maxNumberOfBatches:activity:withCompletionBlock:
_processFetchArchivedRecordCompletionWithError:WithCompletionBlock:
_processRecordZoneFetchCompletionZoneID:serverChangeToken:clientChangeTokenData:moreComing:NSError:syncType:currentBatchCount:maxNumberOfBatches:shouldFetchArchivedRecords:activity:completionBlock:
_processFetchRecordZoneChangesCompletionWithError:completionBlock:
_shouldFetchArchivedRecords:
_doesAnyRecordZoneIDHavePendingArchivedRecords:
_isDiskSpaceAvailableForSyncType:currentBatchCount:
_fetchMessageZoneChangesSyncType:currentBatchCount:maxNumberOfBatches:activity:completionBlock:
_noteSyncEnded
_markAllIncompatibleMessagesForDeletion
_needsToMarkAllMessagesAsNeedingSync
_shouldMarkAllMessagesAsNeedingSync
_hasMarkedAllMessagesAsNeedingSync
_markAllUnsuccessFullSyncMessagesAsNeedingSync
syncMessagesWithSyncType:deviceConditionsToCheck:activity:completionBlock:
deleteMessageSyncToken
deleteMessagesZone
_processRecordDeletionCompletion:error:completionBlock:
_deleteMessagesWithRecordIDs:completion:
_sharedIMDMessageStore
_constructMessageRecordIDUsingTombStoneDictionary:
syncDeletedMessagesToCloudKitWithCompletion:
visitedChats
setVisitedChats:
encounteredIncompatibleMessage
setEncounteredIncompatibleMessage:
_encounteredIncompatibleMessage
_archivedRecordSyncToken
_visitedChats
T@"CKServerChangeToken",&,N
T@"IMDCKMessageSyncCKOperationFactory",&,N,V_CKOperationFactory
T@"CKServerChangeToken",&,N,V_archivedRecordSyncToken
T@"NSMutableDictionary",&,N,V_visitedChats
TB,N,V_encounteredIncompatibleMessage
_zoneChangesOptionsDictionaryUsingToken:zoneID:resultsLimit:
_fetchRecoverableMessagesCKConfiguration:
_fetchOperationFactory:token:batchSize:activity:
syncWithType:withActivity:withCompletion:
_readRecordsWithType:attemptCount:activity:completion:
_onRecordRead:
_onRecoverableMessagePartRecordReadWithDeleteDate:messageGUID:partBody:
_onRecordDeleted:type:
_onChangeTokenUpdated:token:data:
_onRecordZoneFetchComplete:token:tokenData:moreComing:error:
_onReadComplete:error:activity:completion:
_zoneCreated
_writeRecordsWithType:activity:completion:
_onRecordWrite:error:recordNameToPartIndexAndRowID:
_onWriteComplete:error:shouldWriteMore:activity:completion:
syncRemovedRecoverableMessagesToCloudKitWithCompletion:
_deleteRecoverableMessagesWithRecordIDs:completion:
_constructRecoverableMessageRecordIDUsingTombStoneDictionary:
_deleteBatchSize
_fetchRecordsOperationWithActivity:
_saveRecordsOperationWithMap:activity:
_writeRecoverableMessagesCKConfiguration:
_saveRecoverableMessagesOperationFactory:token:batchSize:recordNameToPartIndexAndRowID:activity:
createCKRecordforRecoverableMessageMetadata:zoneID:recordNameToPartIndexAndRowID:
recoverableGUIDFromMessageGUID:chatGUID:partIndex:
_latestSyncToken
T@"CKServerChangeToken",&,N,V_latestSyncToken
IMDaemonCoreMessageReceivedTimingCollection
postCoreAutomationNotificationIncomingMessageProcessedWithDuration:
initWithTargets:
addTarget:
removeTarget:
methodSignatureForSelector:
forwardInvocation:
_targets
set_targets:
set_lock:
T@"NSMutableArray",&,N,V_targets
T@"NSLock",&,N,V_lock
updateDonationStateWithSyndicationAction:
defaultThreshold
commentThreshold
participantChangeThreshold
peristencePath
loadNoticeEventHistory
shouldSendNotice:
didSendNotice:
dateLastUpdatedForURL:
thresholdForNoticeType:
saveNoticeEventHistory
persistenceQueue
setPersistenceQueue:
noticeEventHistory
setNoticeEventHistory:
_persistenceQueue
_noticeEventHistory
T@"NSObject<OS_dispatch_queue>",&,N,V_persistenceQueue
T@"NSMutableDictionary",&,N,V_noticeEventHistory
_assetURLToInsertToRecord
_copyCKRecordFromExistingCKMetadata
ckRecordIDFromExistingMetadata
md5HashForURL:
md5HashForTransfer
_setRecordPropertiesBasedOnExistingRecord:
recordIDWithZoneID:salt:
wantsAssetFromRecord:
hasPreferredAssetOverRecord:
moveAssetFromRecord:
initWithCKRecord:writeAssetToDisk:
_fileManager
transferMetaDataFromRecord:
cleanUpAsset:
_recordIsInvalid:
utiTypeForRecord:
sizeOfAssetForRecord:
transferGUIDOfRecord:
attachmentRecordHasAsset:
cleanUpAssetsOnDiskForRecord:
md5HashForRecord:
validateMD5HashForRecord:
batchSize
initWithStorageController:
storeMessage:type:error:
_processBatch:
replayMessages
scheduleSyncTaskForServices:
_fetchNexBatchOfMessagesAndReplay
deleteReplayDBIfNotUnderFirstUnlock
overrideStorageControllerWithDatabaseFromPath:
restoreDefaultStoreControllerInstance
startRecordingReplayDatabase
endRecordingReplayDatabase
replayMessagesWithCompletion:
isRecordingReplayDB
syncTaskByServiceName
setSyncTaskByServiceName:
heldDeletionContext
setHeldDeletionContext:
automationCompletionBlock
setAutomationCompletionBlock:
storageController
setStorageController:
_suspendedStorageController
_isRecordingReplayDB
_syncTaskByServiceName
_heldDeletionContext
_automationCompletionBlock
_storageController
T@"NSDictionary",&,N,V_syncTaskByServiceName
T@"IMDReplayStorageIterationContext",&,N,V_heldDeletionContext
T@?,C,N,V_automationCompletionBlock
T@"IMDReplayStorageController",&,N,V_storageController
TB,R,N,V_isRecordingReplayDB
_statsCollectorCK
_messageStoreSharedInstanceCK
_shouldUpdateSyncStatsCK:originalSyncState:
_updateSyncStatsForAttachmentsCK:incrementTotalAttachmentCount:
_shouldDownloadAssetForTransferCK:forMessageItem:
updateTransfersWithCKRecordCK:recordWasFetched:downloadAsset:
markTransferAsNotSyncedSuccessfullyCK:
markTransferAsNotSuccessfullyDownloadedFromCloudCK:
resetSyncStateForRecordCK:toState:
populateLocalURLsForTransfer:fromCKRecord:
_accountDidChange:
_nightlySyncTimerFired
kickOffEagerSyncIfApplicable
beginInitialSyncWithActivity:
initialSyncAllowed
eventStreamHandler:didReceiveEventWithName:userInfo:
messageSyncController
initialMessageSyncController
chatSyncController
attachmentSyncController
updateSyncController
recoverableMessageSyncController
initialAttachmentSyncController
rampManager
_maxTimeToDeferInSeconds
_postMetricsToCloudKitOnAutomaticHistoryDeletionAgentLaunch
registerForAccountNotifications
_dateForNext24LogDumpAtHour:timeNow:dumpNow:
_dispatchNotification:withBlock:
_IMAHDAgentFallbackIntervalInSeconds
_syncNotCompletedRecently
_kickOffNightlyPeriodicSyncIfApplicable
performInitialSyncOnFirstConnectionOfImagentIfNeeded
_needsSyncOnIdentityUpdate
_needsSyncOnAccountUpdate
_didPassAccountAndIdentityUpdateNeeds
beginChatSyncPeriodic:activity:
shouldMarkAllIncompatibleMessagesForDeletion
beginPeriodicSyncWithChecks:priority:reason:
beginPeriodicSyncWithActivity:
_serverDoesNotAllowComingBackOnlineChatSync
_minimumChatComingOnlineSyncInterval
_chatSyncedRecently
_serverDoesNotSingleDeviceLimitation
_accountHasMultipleDevices
_clearTombstonesWithActivity:
beginComingBackOnlineSyncWithActivity:
kickOffCloudKitSyncIfNeededOnImagentLaunch
clearCKRelatedDefaults
_serverAllowsUIRefreshWhileSyncing
_serverAllowsUIRefreshTimerWhileSyncing
reloadTimeInterval
refreshUIIfApplicableWithBatchCount:
_refreshUIWhileSyncing
recordMetricIsCloudKitEnabled
_hasDumpedLogsInPastHour
_hasDumpedRestoreFailureLogsInPastHour
_currentHour
_withinAnHourOfLogDumpHour
_deleteRestoreFailuresDirectory
sendRestoreFailuresLogDumps
sendRestoreFailuresLogDumpsIfNeeded
collectLogsIfNeeded
_handleSyncFailureType:step:activity:attemptCount:startTime:error:retry:
_retryError
_keychainErrorWithCause:
_keychainError
beginInitialSyncAttemptCount:withActivity:
_errorIndicatesDeviceNotGoodForSync:
_nukeCKData
_reloadChatRegistryOnMainThread
_recordManager
_beginPeriodicSyncWithActivity:attemptCount:
syncAttachmentMetadataFirstSyncWithActivity:deviceConditionsToCheck:completionBlock:
_beginPeriodicSyncWithActivity:attemptCount:syncChatsCompletionBlock:
syncDeletesToCloudKitWithActivity:completion:
_syncRecoverableMessagesToCloudKitWithActivity:syncAttemptCount:startTime:syncCompletionBlock:retryCompletionBock:
_sharedDatabaseManager
_syncChatsWithActivity:
_callSyncWithCompletion:activity:
_ifCloudKitAbleToSyncWithActivity:callBlock:
_beginExitStateCleanupIfNeededWithActivity:
_autoBugCaptureWithSubType:debugDescription:
_noteSyncStarted:
_noteMetricsForSyncStartFrom:fullSync:
_resetSyncStateAndAttemptCounts
_periodicSyncAttemptCount
_manualSyncAttemptCount
_writeDownSyncDate
syncChatsWithMessageContext:
_noteMeticsForSyncEndedWithSuccces:
updateSecurityLevelDowngradedIfNeeded:
handleAKUserInfoChangedNotification:
enforceAccountsMatchForMocAndShowDialogIfNeeded
performOneTimeAccountUpgradeCheckIfNeeded
clearAnalyticDefaultsAndLocalSyncState
_addDatesDefaultsIfNeededToDictionary:keys:
_addDatesDefaultsIfNeededToDictionary:
_dailySyncStateDictionary
_completedPeriodicSyncSinceFirstFullSyncForLastSyncDate:firstFullSyncCompletedDate:
_periodicSyncStateDictionary
_serverDeniesPeriodicSyncAnalytics
_serverDeniesDailySyncStateAnalytics
_submitCloudKitAnalyticWithOperationGroupName:analyticDictionary:
logCloudKitAnalytics
syncStartDate
setSyncStartDate:
longRunningSyncTimer
setLongRunningSyncTimer:
nightlySyncTimer
setNightlySyncTimer:
initialSyncAttempts
setInitialSyncAttempts:
lastLogDumpDate
setLastLogDumpDate:
lastRestoreFailureLogDumpDate
setLastRestoreFailureLogDumpDate:
shouldReloadConversations
setShouldReloadConversations:
reloadTimer
setReloadTimer:
_shouldReloadConversations
_syncStartDate
_longRunningSyncTimer
_nightlySyncTimer
_initialSyncAttempts
_lastLogDumpDate
_lastRestoreFailureLogDumpDate
_reloadTimer
T@"NSDate",&,N,V_syncStartDate
T@"NSTimer",&,N,V_longRunningSyncTimer
T@"IMTimer",&,N,V_nightlySyncTimer
Tq,N,V_initialSyncAttempts
T@"NSDate",&,N,V_lastLogDumpDate
T@"NSDate",&,N,V_lastRestoreFailureLogDumpDate
TB,V_shouldReloadConversations
T@"NSTimer",&,V_reloadTimer
addMessagesID:
containsMessageID:completion:
maxNumberOfMessages
currentNumberOfMessages
recentMessageIDs
setRecentMessageIDs:
setInternalQueue:
_recentMessageIDs
_internalQueue
T@"NSMutableOrderedSet",&,N,V_recentMessageIDs
T@"NSObject<OS_dispatch_queue>",&,N,V_internalQueue
_suppresionTimerFired:
_routingTimerFired
_expireStateTimerFired
_watchdogTimerFired
_storageTimerFired
_IMDStoreMessage:inMessage:forceReplace:modifyError:modifyFlags:calculateUnreadCount:flagMask:shouldStoreBlock:didStoreBlock:block:
_sharedAccountController
useChatRoom:forGroupChatIdentifier:
groupChatIdentifierForChatRoom:
chatRoomForGroupChatIdentifier:
_newHashForChat:style:
registerChat:groupID:style:
registerChat:style:
registerChat:style:handleInfo:
registerChat:style:displayName:groupID:handleInfo:
registerChat:style:displayName:groupID:handleInfo:account:
registerChat:style:displayName:groupID:lastAddressedHandle:handleInfo:account:isBlackholed:
registerChat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:isBlackholed:
canonicalizeChatIdentifier:style:
_mapRoomChatToGroupChat:style:
existingChatsForGroupID:
existingChatsForIDs:style:
chatForChatIdentifier:style:
chatForChatIdentifier:style:account:
processMessageForSending:toChat:style:allowWatchdog:completionBlock:
processMessageForSending:toChat:style:allowWatchdog:account:completionBlock:
_configureAccountInformationOnItem:withAccount:
_configureTimeOnOutgoingItem:
_configureIdentifierForOutgoingItem:withIdentifier:withStyle:
_configureSessionInformationOnItem:toChat:withStyle:forAccount:
_setOutgoingFlagsOnMessage:
_messageStoreCompletion:inputMessage:outputMessage:originalMessage:completionBlock:
_determineResultMessageForInput:output:original:
_shouldDropSendingMessage
chatForItemWithGUID:
storeItem:toChat:style:
sendMessage:toChat:style:
sendMessage:toChat:style:account:
sendSavedReceiptForMessage:toChatID:identifier:style:account:
sendLocationSharingInfo:toID:completionBlock:
didLeaveChat:style:
didLeaveChat:style:account:
didJoinChat:style:
didJoinChat:style:handleInfo:
didJoinChat:style:handleInfo:account:
didJoinChat:style:displayName:groupID:handleInfo:
didJoinChat:style:displayName:groupID:lastAddressedHandle:handleInfo:
didJoinChat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:
didJoinChat:style:displayName:groupID:handleInfo:category:spamExtensionName:
didJoinChat:style:displayName:groupID:handleInfo:account:isBlackholed:
didJoinReadOnlyChat:style:displayName:groupID:handleInfo:category:spamExtensionName:
didReceiveReplaceMessageID:forChat:style:
didReceiveErrorMessage:forChat:style:
didReceiveError:forMessageID:forceError:
didReceiveError:forMessageID:forceError:account:
didReceiveMessageEditingUnsupportedHandleIDs:forMessageGUID:partIndex:previousMessage:backwardCompatibilityMessageGUID:
didReceiveMessageEditingSendFailure:forMessageGUID:previousMessage:
didSendMessageEditForMessageGUID:
didSendMessageReadReceiptForMessageID:
didSendMessageReadReceiptForMessageID:account:
didSendDeliveredQuietlyReceiptForMessageID:
didSendDeliveredQuietlyReceiptForMessageID:account:
didSendNotifyRecipientCommandForMessageID:
didSendNotifyRecipientCommandForMessageID:account:
didSendMessagePlayedReceiptForMessageID:
didSendMessagePlayedReceiptForMessageID:account:
didSendMessageSavedReceiptForMessageID:
didSendMessageSavedReceiptForMessageID:account:
didSendSyndicationActionItem:forChat:
didReceiveMessageDeliveryReceiptForMessageID:date:
didReceiveMessageDeliveryReceiptForMessageID:date:account:
_didReceiveMessageDeliveryReceiptForMessageID:attempts:date:account:
updateChatGUID:withLastReadTimeStamp:withLastSeenMessageGUID:fromMe:
_hasSuppressedMessageID:chatGUID:
_didReceiveMessageReadForMessageID:date:attempts:useMessageSuppression:completionBlock:
didReceiveMessageReadForMessageID:date:completionBlock:
didReceiveMessageReadForMessageID:date:useMessageSuppression:completionBlock:
_didReceiveMessageReadReceiptForMessageID:date:attempts:completionBlock:
didReceiveMessageReadReceiptForMessageID:date:completionBlock:
_didReceiveMessagePlayedForMessageID:date:attempts:useMessageSuppression:completionBlock:
didReceiveMessagePlayedForMessageID:date:completionBlock:
didReceiveMessagePlayedForMessageID:date:useMessageSuppression:completionBlock:
_didReceiveMessagePlayedReceiptForMessageID:date:attempts:completionBlock:
didReceiveMessagePlayedReceiptForMessageID:date:completionBlock:
_didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:attempts:useMessageSuppression:account:completionBlock:
didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:completionBlock:
didReceiveMessageSavedForMessageID:ofType:forChat:fromHandle:fromMe:date:useMessageSuppression:account:completionBlock:
didSendMessage:forChat:style:
didSendMessage:forChat:style:forceDate:
didSendMessage:forChat:style:account:forceDate:
didSendMessage:forChat:style:account:forceDate:itemIsComingFromStorage:
notifyDidSendMessageID:
notifyDidSendMessageID:shouldNotify:
notifyDidSendMessageID:account:shouldNotify:
endMessageSuppression
_endMessageSuppressionForChatGUID:
_setSuppressedMessage:inChatWithGUID:
didReceiveDisplayNameChange:fromID:toIdentifier:forChat:style:account:
didReceiveDisplayNameChange:fromID:toIdentifier:forChat:style:account:sender:
_updateInputMessage:forExistingMessage:
didReceiveMessage:forChat:style:fromIDSID:
didReceiveMessage:forChat:style:account:fromIDSID:
_transcodeController
_setReplyGUIDOnMessage:forChat:
_setSortIDForMessage:forChat:
_isActivated
didReceiveMessages:forChat:style:account:fromIDSID:
testOverrideTextValidationDidFail
_storeMessage:chatIdentifier:localChat:style:account:messagesToPostArray:
didReceiveInvitation:forChat:style:
didUpdateChatStatus:chat:style:
didUpdateChatStatus:chat:style:account:
didUpdateChatStatus:chat:style:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:
didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:account:isBlackholed:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:isBlackholed:
didUpdateChatStatus:chat:style:displayName:groupID:handleInfo:account:category:spamExtensionName:
didUpdateChatStatus:chat:style:displayName:groupID:lastAddressedHandle:lastAddressedSIMID:handleInfo:account:category:spamExtensionName:isBlackholed:
didChangeMemberStatus:forHandle:forChat:style:
didChangeMemberStatus:forHandle:unformattedNumber:countryCode:forChat:style:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:account:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:account:destinationCallerID:
didChangeMemberStatus:forHandle:fromHandle:unformattedNumber:countryCode:forChat:style:account:destinationCallerID:messageTime:
_shouldBlackholeGroupChatFromSender:toRecipient:withOtherParticipants:forAccount:
spotlightItemRecorderClass
_removeChatGuidFromCoreDuet:
_markChatAsDowngraded:
_handleRoutingWithDictionary:
_updateRoutingForMessageGUID:chatGUID:error:account:
_updateRoutingTimerWithInterval:
canMakeExpireStateChecks
_handleExpireStateDictionary:
_updateExpireStateForMessageGUID:
_updateExpireStateTimerWithInterval:
_handleWatchdogWithDictionary:
_updateWatchdogForMessageGUID:
_updateWatchdogTimerWithInterval:
_autoReplier
autoReplier:generatedAutoReplyText:forChat:
autoReplier:receivedUrgentRequestForMessages:
autoReplier:sendDeliveredQuietlyReceiptForMessages:forIncomingMessageFromIDSID:inChat:withWillSendToDestinationsHandler:
autoReplier:sendNotifyRecipientCommandForMessages:inChat:
_checkMessageForOneTimeCodes:
_checkMessageForENURL:
_updateStorageTimerWithInterval:
_postMessagesFromStorage:
didSendBalloonPayload:forChat:style:messageGUID:account:completionBlock:
didReceiveBalloonPayload:forChat:style:messageGUID:account:
isAwaitingStorageTimer
noteSuppressedMessageUpdate:
noteItemFromStorage:
noteLastItemFromStorage:
noteLastItemProcessed
incrementPendingReadReceiptFromStorageCount
decrementPendingReadReceiptFromStorageCount
pendingReadReceiptFromStorageCount
setPendingReadReceiptFromStorageCount:
_isMessageSWYSpamMessage:inChat:
_shouldShowSWYQuickActionForMessage:outAppName:outBundleID:
_predominantServiceForChat:usingMessageThreshold:
_fetchMessagesFromChat:onService:numberOfMessages:
_configureSyndicationRangesForMessage:forChat:withSyndicationStatus:
canAddCommand:
noopHandlerForCommand:
generatePreviewForTransfer:attachmentPath:balloonBundleID:isFromMe:completionBlock:
_markSensitiveDefault
receiveFileTransfer:transferGUID:topic:path:requestURLString:ownerID:signature:decryptionKey:fileSize:generatePreview:balloonBundleID:isFromMe:progressBlock:completionBlock:
failTransfersOnPreviewGenerationFailure
_deviceConditionsAllowsMessageSyncForCurrentBatchCount:maxBatchCount:
_deviceConditionsAllowsMessageSync
_deviceConditionsAllowsMessageSyncIgnoreFeatureEnabled:
syncToken
setSyncToken:
_syncToken
T@"CKServerChangeToken",&,N,V_syncToken
ckChatSyncControllerWantsToSync
replayControllerWantsToSync
IDSTransportLogWantsToSync
initWithMessageHistorySyncTaskFactory:
_evaluateStateAndActIfNeeded
_scheduleNextEvaluation
replayControllerNeedsSync
setReplayControllerNeedsSync:
ckChatSyncControllerNeedsSync
setCkChatSyncControllerNeedsSync:
idsTransportLogNeedsSync
setIdsTransportLogNeedsSync:
currentlyExecutingSyncTask
setCurrentlyExecutingSyncTask:
syncTaskFactory
setSyncTaskFactory:
_replayControllerNeedsSync
_ckChatSyncControllerNeedsSync
_idsTransportLogNeedsSync
_currentlyExecutingSyncTask
_syncTaskFactory
TB,N,V_replayControllerNeedsSync
TB,N,V_ckChatSyncControllerNeedsSync
TB,N,V_idsTransportLogNeedsSync
T@"<IMDMessageHistorySyncTask>",&,N,V_currentlyExecutingSyncTask
T@"<IMDMessageHistorySyncTaskFactory>",&,N,V_syncTaskFactory
_generateLockRecord
_migrateServerChangeToken
_copyChatsToUploadWithLimit:
_randomSalt
_newckRecordsFromChats:
_chatZoneID
_updateChatUsingCKRecord:onRead:didSucceed:
_resolveChatConflictUsingCKRecord:localGUID:
_markChatAsDefferedForSyncingUsingRecord:
_chatZoneCreated
_processModifyPerRecordCallBack:error:recordIDtoGUIDmap:
_lockRecordHadConflict:
_writeCKRecordsToChatZone:activity:withCompletion:
_numberOfChatsToFetch
_numberOfChatsToWrite
_shouldResyncChatsForError:
_logGreenTeaLogsForChats:
_writeDirtyChatsToCloudKitWithActivity:completion:
_fetchChatRecordOperationWithActivity:
_processRecordZoneChangeTokenUpdated:zoneID:clienChangeToken:
_processRecordZoneFetchCompletion:zoneID:clientChangeTokenData:moreComing:error:
_processFetchRecordChangesCompleted:activity:completion:syncType:
deleteChatSyncToken
_syncChatsWithCloudKitWithCompletionType:activity:syncChatsCompletionBlock:
_anyChatExistsOnServerWithResultsLimit:changeToken:activity:completion:
anyChatExistsOnServerWithActivity:completion:
_eligibleForTruthZone
_needsToMarkAllChatsAsNeedingSync
_shouldMarkAllChatsAsNeedingSync
_hasMarkedAllChatsAsNeedingSync
syncChatsWithType:withActivity:completion:
__syncChatsWithCloudKit:attemptCount:activity:withCompletion:
_copyRecordIDsToDelete
_handleChatDeletionCompletionForRecordIDs:error:
syncPendingDeletionWithCompletion:
_deleteChatRecordsWithRecordIDs:completion:
_filterRecordIDsToChatsWithNoRecentModifications:completion:
fetchedChatsDuringLastSync
setFetchedChatsDuringLastSync:
lockRecord
setLockRecord:
_fetchedChatsDuringLastSync
_lockRecord
T@"IMDCKChatSyncCKOperationFactory",&,N,V_CKOperationFactory
T@"CKRecord",&,N,V_lockRecord
TB,N,V_fetchedChatsDuringLastSync
sharedController
receiveHighlightEvent:fromSender:guid:date:
dismissNotice:
noticesForChatGUID:
broadcastNoticesDidChangeForChatGUIDs:
noticeDispatcher
_noticeDispatcher
T@"IMDCollaborationNoticeDispatcher",R,N,V_noticeDispatcher
initWithGUID:
initWithStoreDictionary:
setTaskFlag:
needsProccesingFor:
compeletedTask:
taskFlags
_taskFlags
T@"NSString",R,N,V_guid
TQ,R,N,V_taskFlags
_cachedPathForStickerWithProperties:
_isRecipeBasedSticker:
retrieveStickerWithProperties:completionBlock:
stickerPackGUIDToPackMap
setStickerPackGUIDToPackMap:
_stickerPackGUIDToPackMap
T@"NSMutableDictionary",&,V_stickerPackGUIDToPackMap
__pruneTypingContexts
_setTimerForPruningTypingContext
hasRecentlyMessaged:
noteRecentMessageForPeople:
updateLatestActiveDestination:ForHandle:incomingType:
activeDeviceForHandle:
_typingContext
_typingContextTimer
_activeDeviceForHandle
buddyPictures
pictureOfBuddy:
pictureKeyForBuddy:
allBuddies
groups
buddyProperties
markBuddiesAsChanged:
beginBuddyChanges
changeProperty:ofBuddy:to:
clearPropertiesOfBuddy:
endBuddyChanges
property:ofBuddy:
localProperty:ofBuddy:
clearLocalProperties
localPropertiesOfBuddy:
changeLocalProperty:ofBuddy:to:
T@"NSArray",R,&,N
messageUpdateV1RecordType
stepAfter:
_fetchUpdatesCKConfiguration:
fetchOperationFactory:token:batchSize:activity:
deleteUpdateSyncToken
_numberOfRecordsToFetchPerBatch
_writeUpdatesWithType:updateStep:activity:completion:
_writeT1RecordUpdatesWithType:activity:completion:
_onRecordT1Write:error:recordNameToRowIDMap:
_onWriteT1Complete:error:shouldWriteMore:activity:completion:
_writeT2RecordUpdatesWithType:activity:completion:
_onRecordT2Write:error:recordNameToItemMap:
_onWriteT2Complete:error:shouldWriteMore:activity:completion:
_saveRecordsT1OperationWithMap:activity:
_saveRecordsT2OperationWithMap:activity:
_writeUpdatesCKConfiguration:
saveT1UpdatesOperationFactory:token:batchSize:recordNameToRowIDMap:activity:
saveT2UpdatesOperationFactory:token:batchSize:recordNameToRowIDMap:activity:
writeMsgIDToRowIDMap
setWriteMsgIDToRowIDMap:
_writeMsgIDToRowIDMap
T@"NSMutableDictionary",&,N,V_writeMsgIDToRowIDMap
storePTask:
loadMostRecentMessagePTasks
deleteAllCompletedTasks
updateTaskFlagsForPTask:
_networkCall_InsertRowGuid:taskFlags:
_networkCall_IMDMessagePTaskSelectWithLimit:
_networkCall_IMDMessagePTaskUpdateTaskFlagsForGUID:taskFlags:
_networkCall_IMDMessagePTaskDeleteAllCompletedTask
im_setActivity:
invitePersonInfo:withMessage:toChat:style:
hasCapability:
server
loginIDForAccount:
noteBadPassword
_abandonPWFetcher
_abandonSystemProxySettingsFetcher
accountDefaultsChanged:
loginServiceSessionWithAccount:
blockingMode
allowList
blockList
blockIdleStatus
defaultChatSuffix
shouldImitateGroupChatUsingChatRooms
joinChat:style:joinProperties:
joinChat:style:groupID:joinProperties:
joinChat:handleInfo:style:groupID:joinProperties:
joinChat:handleInfo:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:
leaveChat:style:
leaveiMessageChat:style:
removeChat:style:
invitePerson:withMessage:toChat:style:
invitePersonInfoToiMessageChat:withMessage:toChat:style:
declineInvitationToChat:style:
setProperties:ofParticipant:inChat:style:
validityOfChatRoomName:
cancelVCRequestWithPerson:properties:conference:
closeSessionChat:style:
deleteContext
setDeleteContext:
_deleteContext
T@"IDSKVDeleteContext",&,N,V_deleteContext
initWithFilePath:
storeDictionary:error:
copyNextBatchWithSize:iterationContext:
deleteReplayDB
filePath
store
setStore:
_filePath
_store
T@"IDSKVStore",&,N,V_store
T@"NSString",R,&,N,V_filePath
addDelegate:queue:
removeDelegate:
queueForDelegate:
didReceiveEventWithName:userInfo:
delegateToQueue
_delegateToQueue
T@"NSMapTable",R,N,V_delegateToQueue
warnIfPortBlocked:forAction:
_handleFirewallUserNotificationDidFinish:
userNotificationDidFinish:
_firewallUserNotificationForService:
disallowReconnection
_doLoginIgnoringProxy:
_doLoginIgnoringProxy:withAccount:
_login_serverSettingsReadyWithAccount:
_data_connection_readyWithAccount:
_login_usernameAndPasswordReadyWithAccount:
_login_checkUsernameAndPasswordWithAccount:
systemProxySettingsFetcher:retrievedHost:port:protocol:
systemProxySettingsFetcher:retrievedAccount:password:
logoutServiceSessionWithAccount:
serviceSessionDidLoginWithAccount:
serviceSessionDidLogoutWithAccount:
serviceSessionDidLogoutWithMessage:reason:properties:account:
_wentOfflineWithAccount:
__forceSetLoginStatus:oldStatus:message:reason:properties:account:
_setAutoReconnectTimer
_autoReconnectTimer:
_clearAutoReconnectTimer
initialize
initWithID:unformattedID:countryCode:
initWithID:unformattedID:countryCode:personCentricID:
isBetterDefinedThan:
isBusiness
setPersonCentricID:
setID:
countryCode
setCountryCode:
unformattedID
setUnformattedID:
CNContactID
setCNContactID:
_unformattedID
_countryCode
_personCentricID
_CNContactID
T@"NSString",&,N,V_id
T@"NSString",&,N,V_unformattedID
T@"NSString",&,N,V_countryCode
T@"NSString",&,N,V_personCentricID
T@"NSString",C,N,V_CNContactID
replayMessage:
enqueReplayMessageCallback:
scheduleTransactionLogTask:
_copyCKRecordFromExistingCKMetadataWithZoneID:salt:
_addGroupPhotoToCKRecord:
applyChangesUsingCKRecord:
recordName
chatWithCKRecord:
_updateBadge
_iMessageEnabled
_isUserIntentNotLoggedOut
_isTryingToLogin
_isUsableSendingForAccount:
_iMessageFailedAccountIsIrreparable
_accountsArrayForServiceIMessage
initWithMessageStore:
initWithMessageStore:defaultsStore:
updateBadgeForUnreadCountChangeIfNeeded:
updateBadgeForLastFailedMessageDateChangeIfNeeded:
_updateBadgeAndCancelPreviousUpdate
_postBadgeNumber:
_postBadgeString:
_shouldShowFailureString
isInAppleStoreDemoMode
isUnexpectedlyLoggedOut
_checkIfUnexpectedlyLoggedOut
_clearFailureBadge
_handleUnexpectedLogout
_compareLastFailureDateAndUpdateBadge:
_stopSuppressingSound
_cacheFailureDate:
sharedDefaultsInstance
_savedFailureDate
_saveFailureDate:
_isUnexpectedlyLogOutValue
setUnreadCount:
setLastFailedMessageDate:
isShowingFailure
setShowingFailure:
setUnexpectedlyLoggedOut:
addedObserverForUnexpectedlyLoggedOut
setAddedObserverForUnexpectedlyLoggedOut:
setSharedDefaultsInstance:
_showingFailure
_unexpectedlyLoggedOut
_addedObserverForUnexpectedlyLoggedOut
_lastFailedMessageDate
_sharedDefaultsInstance
TQ,N,V_unreadCount
Tq,N,V_lastFailedMessageDate
showingFailure
TB,N,GisShowingFailure,V_showingFailure
unexpectedlyLoggedOut
TB,N,GisUnexpectedlyLoggedOut,V_unexpectedlyLoggedOut
TB,N,V_addedObserverForUnexpectedlyLoggedOut
T@"IMDefaults",&,N,V_sharedDefaultsInstance
updateMessagesGroupName:onConversation:
conversationUpdateMessagesGroupPhoto:
initiator
registerMessagesGroupUUIDForConversationUUID:
setUpInitialConversationManager
_activeTUConversations
updateFaceTimeGroupName:
updateFaceTimeGroupPhoto:
_oneToOneChatForRemoteHandle:
_chatForTUGroupID:participants:
_chatForTUConversation:
_tuConversationForChat:
_initiatorForConversation:chat:
_conversationItemForChat:conversation:
conversationManager:conversation:addedMembersLocally:
_upgradeChatToGroupChat:forConversation:
_findExistingGroupChatForConversation:onSession:
_createGroupChatForConversation:onSession:
_messageStore
conversationsChangedForConversationManager:
conversationManager:stateChangedForConversation:
conversationManager:stateChangedForConversation:fromOldConversation:
conversationManager:letMeInRequestStateChangedForConversation:
conversationManager:letMeInRequestStateChangedForConversation:fromOldConversation:
conversationManager:localVideoToggledForConversation:
conversationManager:localVideoToggledForConversation:fromOldConversation:
conversationManager:remoteMembersChangedForConversation:
conversationManager:remoteMembersChangedForConversation:fromOldConversation:
conversationManager:pendingMembersChangedForConversation:
conversationManager:pendingMembersChangedForConversation:fromOldConversation:
conversationManager:kickedMembersChangedForConversation:
conversationManager:kickedMembersChangedForConversation:fromOldConversation:
conversationManager:rejectedMembersChangedForConversation:
conversationManager:rejectedMembersChangedForConversation:fromOldConversation:
conversationManager:otherInvitedHandlesChangedForConversation:
conversationManager:otherInvitedHandlesChangedForConversation:fromOldConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:fromOldConversation:
conversationManager:activitySessionsChangedForConversation:
conversationManager:activitySessionsChangedForConversation:fromOldConversation:
conversationManager:oneToOneModeChangedForConversation:
conversationManager:oneToOneModeChangedForConversation:fromOldConversation:
conversationManager:avModeChangedForConversation:
conversationManager:avModeChangedForConversation:fromOldConversation:
conversationManager:resolvedAudioVideoModeChangedForConversation:
conversationManager:resolvedAudioVideoModeChangedForConversation:fromOldConversation:
conversationManager:removedActiveConversation:
conversationManager:addedActiveConversation:
conversationManager:didChangeActivatedLinks:
conversationManager:linkChangedForConversation:
conversationManager:linkChangedForConversation:fromOldConversation:
conversationManager:linkInvitedMemberHandlesChangedForConversation:
conversationManager:linkInvitedMemberHandlesChangedForConversation:fromOldConversation:
conversationManager:conversation:requestedScreenShareForParticipant:
serverDisconnectedForConversationManager:
conversationManager:migratingFromConversation:toConversation:
conversationManager:conversation:receivedActivitySessionEvent:
conversationManager:conversation:remoteParticipantWithIdentifier:updatedAudioEnabled:
conversationManager:conversation:remoteParticipantWithIdentifier:updatedVideoEnabled:
conversationManager:changedActivityAuthorizationForBundleIdentifier:
conversationManager:conversation:participant:addedNotice:
conversationManager:conversation:buzzedMember:
conversationManager:conversationUpdatedMessagesGroupName:
conversationManager:conversationUpdatedMessagesGroupName:fromOldConversation:
conversationManager:conversation:updatedMessagesGroupPhoto:
conversationManager:conversationUpdatedMessagesGroupUUID:
conversationManager:updatedIncomingPendingConversations:
conversationManager:trackedPendingMember:forConversationLink:
conversationManager:conversation:screenSharingChangedForParticipant:
conversationManager:conversation:launchStateChanged:forActivitySession:
conversationManager:remoteScreenShareAttributesChanged:isLocallySharing:
conversationManager:remoteScreenShareEndedWithReason:
conversationManager:ignoreLMIRequestsChangedForConversation:
conversationManager:conversation:didChangeStateForActivitySession:
conversationManager:conversation:didChangeSceneAssociationForActivitySession:
conversationManager:sharePlayAvailableChanged:
conversationManager:screenSharingAvailableChanged:
conversationManager:handoffEligibilityChangedForConversation:
conversationManager:handoffEligibilityChangedToConversation:fromPreviousConversation:
conversationManager:systemActivitySessionsChangedForConversation:
conversationManager:systemActivitySessionsChangedForConversation:fromOldConversation:
_setValue:forKey:
_setCKRecordString:forKey:
_setCKRecordNumber:forKey:
_setUnencryptedCKRecordNumber:forKey:
_setCKRecordData:forKey:
_setCKRecordArray:forKey:
_setCKRecordAsset:forKey:
_setCKRecordDate:forKey:
_dateForKey:
_valueForKey:
_stringForKey:
_numberForKey:
_dataForKey:
_arrayForKey:
_assetForKey:
recordNameUsingSalt:guid:
recordNameForRecordChangeTag:ckRecordID:salt:guid:
recordIDUsingName:zoneID:
recordIDUsingSalt:zoneID:guid:
searchableIndex:reindexAllSearchableItemsWithAcknowledgementHandler:
searchableIndex:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:
searchableIndexDidThrottle:
searchableIndexDidFinishThrottle:
dataForSearchableIndex:itemIdentifier:typeIdentifier:error:
fileURLForSearchableIndex:itemIdentifier:typeIdentifier:inPlace:error:
initWithAccountID:defaults:service:idsAccount:
multiplePhoneNumbersTiedToAccount
idsAccount
_idsAccount
T@"IDSAccount",R,&,N,V_idsAccount
accountController:accountAdded:
accountController:accountUpdated:
accountController:accountRemoved:
accountController:accountEnabled:
accountController:accountDisabled:
account:registrationStatusInfoChanged:
account:aliasesChanged:
account:vettedAliasesChanged:
account:profileChanged:
account:loginChanged:
account:displayNameChanged:
account:pseudonymsChanged:
refreshRegistrationForAccount:
_loadIDSAccountController
initWithBundle:subServiceName:
initWithBundle:isMainService:
accountFromIDSAccountWithUniqueID:
isSubService
imdAccountLoginFromIDSAccountWithType:login:
accountsLoadedFromIdentityServices
activeAccountsFromIdentityServices
registrationFailedForAccount:needsDeletion:
setMockAccountController:
mockAccountController
subService
setSubService:
subServiceName
setSubServiceName:
setMainService:
_activatingAccount
_deactivatingAccount
_subService
_subServiceName
_mainService
T@"IMDIDSService",&,N,V_subService
T@"NSString",&,N,V_subServiceName
T@"IMDIDSService",W,N,V_mainService
idsAccounts
imdAccountForIDSAccount:
registeredURIs
_isDeviceRegistered
_isDeviceRegisteredForAccount:
_updateAccountStatusToUnregistered:withAccount:
_validationStatusForAlias:onAccount:
_aliasStringsForIDSAccount:
_aliases
_aliasesForIDSAccount:
resetCallerIDForIDSAccount:
refreshRegistration
activeDevicesUpdated
reregister
reIdentify
vettedAliases
aliases
validationStatusForAlias:
validationStatusForAlias:onAccount:
callerURI
callerURIForIDSAccount:
idsAccountForURI:IDSServiceName:
idsAccountForFromURI:toURI:
GUID
_GUID
T@"IDSAccount",R,&,N
T@"NSString",R,&,N,V_GUID
plainBody
body
string
localizedStringForKey:value:table:localization:
isFromMe
sender
_stripFZIDPrefix
im_stripCategoryLabel
time
andPredicateWithSubpredicates:
initWithKey:ascending:
sharedDatabase
fetchMessageRecordsForChatRecordWithGUID:filteredUsingPredicate:sortedUsingDescriptors:limit:completionHandler:
dateEdited
editedPartIndexes
historyForMessagePart:
messagePartText
localizations
sharedFeatureFlags
registerWithCompletionHandler:
messagesGroupUUID
remoteMembers
handle
normalizedValue
avMode
isLocallyCreated
UUID
initWithSenderInfo:time:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:type:
setDestinationCallerID:
setAvMode:
setFlags:
refreshIDStatusForDestination:service:listenerID:queue:completionBlock:
normalizedHandleWithDestinationID:
isAVLessSharePlayEnabled
stagedActivitySession
activitySessions
postSharePlayNotificationForChatGUID:faceTimeConversationUUID:handleIdentifier:localizedApplicationName:
activity
localizedApplicationName
defaultCenter
activeConversations
initWithMachServiceName:
resume
invalidate
listener:shouldAcceptNewConnection:
_setQueue:
setExportedInterface:
initWithProtocol:forwardingHandler:
setExportedObject:
setRemoteObjectInterface:
setInterruptionHandler:
setInvalidationHandler:
processIdentifier
valueForEntitlement:
boolValue
setVCCapabilities:
setListenerCapabilities:
writeAccount:defaults:
addAccount:defaults:service:
validateProfileAccount:
setBlockingMode:account:
setAllowList:account:
setBlockList:account:
setBlockIdleStatus:account:
passwordUpdatedAccount:
enrollDeviceForSMSRelay:account:
unEnrollDeviceForSMSRelay:account:
enrollSelfDeviceForSMSRelay:
requestSetupWithClientID:capabilities:context:reply:
requestSetupXPCObjectWithClientID:capabilities:context:reply:
markUnreadForMessageGUID:IDs:style:services:
markMessageAsReadWithGUID:callerOrigin:reply:
markPlayedForMessageGUID:
markPlayedForIDs:style:onServices:message:
playSendSoundForMessageGUID:callerOrigin:
requestNetworkDataAvailability
requestBuddyPicturesAndPropertiesForAccount:
forceReloadChatRegistryWithQueryID:
requestOneTimeCodeStatus
consumeCodeWithMessageGUID:
simulateOneTimeCodeArriving:
preWarm
downloadPurgedAttachmentsForIDs:style:onServices:chatID:
initiateQuickSwitch
requestQOSClassWhileServicingRequestsWithID:
fetchNicknames
fetchHandleSharingState
clearPendingNicknameUpdatesForHandleIDs:
ignorePendingNicknameUpdatesForHandleIDs:
allowHandleIDsForNicknameSharing:onChatGUIDs:
denyHandleIDsForNicknameSharing:
nicknamePreferencesDidChange
fetchPersonalNickname
setNewPersonalNickname:
userNicknameForRecordID:decryptionKey:requestID:
downloadStickerWithGUID:
downloadStickerPackWithGUID:isIncomingMessage:ignoreCache:
holdBuddyUpdatesAccount:
resumeBuddyUpdatesAccount:
startWatchingBuddy:account:
stopWatchingBuddy:account:
requestProperty:ofPerson:account:
setValue:ofProperty:ofPerson:account:
requestGroupsAccount:
sendNotificationMessageToUniqueID:withCommand:
inviteHandleIDToShareMyScreen:isContact:
askHandleIDToShareTheirScreen:isContact:
requestPendingVCInvites
requestPendingACInvites
conference:account:notifyInvitationCancelledFromPerson:
terminateForcingIfNeeded:
sendNotice:toHandles:reply:
markReadForMessageGUID:callerOrigin:queryID:
simulateMessageReceive:serviceName:groupID:handles:sender:
replayMessagesFromDatabasePath:
beginRecordingMessagesToReplayDatabase:
stopRecordingMessagesReplayDatabase
_automation_sendDictionary:options:toHandles:
_automation_receiveDictionary:fromID:
_automation_markMessagesAsRead:messageGUID:forChatGUID:fromMe:queryID:
logDumpAndSendMessageTo:forHours:
debugUpdateGroupParticipantversion:chatIdentifier:
changeGroups:account:
changeGroup:changes:account:
renameGroup:to:account:
acceptSubscriptionRequest:from:account:
requestSubscriptionTo:account:
loadIsDownloadingPurgedAttachmentsForChatWithGUID:chatIdentifiers:style:services:reply:
loadIsDownloadingPurgedAttachmentsForIDs:style:onServices:chatID:queryID:
loadMessageWithGUID:queryID:
loadMessageItemWithGUID:queryID:
loadHistoryForChatWithGUID:chatIdentifiers:style:services:limit:beforeGUID:afterGUID:threadIdentifier:reply:
loadPagedHistoryAroundMessageWithGUID:chatGUID:chatIdentifiers:style:services:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:reply:
loadUnreadHistoryForChatWithGUID:chatIdentifiers:style:services:limit:fallbackMessageGUID:reply:
loadAttachmentsForChatWithGUID:chatIdentifiers:style:services:reply:
loadFrequentRepliesForChatWithGUID:chatIdentifiers:style:services:limit:reply:
loadUncachedAttachmentCountForChatWithGUID:chatIdentifiers:style:services:reply:
deleteMessageWithGUIDs:queryID:
clearHistoryForIDs:style:onServices:beforeGUID:afterGUID:chatID:queryID:
markChatAsSpamWithGUID:chatIdentifiers:style:services:isAutoReport:reply:
retractNotificationsForReadMessagesWithGUIDs:
purgeAttachmentsForChatGUID:
cleanupAttachments
moveMessagesWithGUIDsToRecentlyDeleted:deleteDate:queryID:
moveMessagesInChatsWithGUIDsToRecentlyDeleted:deleteDate:queryID:
recoverMessagesWithChatGUIDs:queryID:
loadRecoverableMessagesMetadataWithQueryID:
permanentlyDeleteRecoverableMessagesInChatsWithGUIDs:queryID:
loadHistoryForIDs:style:onServices:limit:beforeGUID:afterGUID:threadIdentifier:chatID:queryID:
loadPagedHistoryForGUID:chatIdentifiers:style:onServices:numberOfMessagesBefore:numberOfMessagesAfter:threadIdentifier:chatID:queryID:
loadFrequentRepliesForIDs:style:onServices:limit:chatID:queryID:
loadUnreadForIDs:style:onServices:limit:fallbackGUID:chatId:queryID:
loadAttachmentsForIDs:style:onServices:chatID:queryID:
loadUncachedAttachmentCountForIDs:style:onServices:chatID:queryID:
markReadForIDs:style:onServices:messages:clientUnreadCount:
markReadForIDs:style:onServices:messages:clientUnreadCount:setUnreadCountToZero:
markPlayedExpressiveSendForIDs:style:onServices:message:
markSavedForMessageGUID:
markSavedForIDs:style:onServices:message:
markHasHadSuccessfulQueryForIDs:style:onServices:
sendNotifyRecipientCommandForIDs:style:onServices:message:
loadChatWithGUID:reply:
loadChatsFilteredUsingPredicate:reply:
loadChatsFilteredUsingPredicate:lastMessageOlderThan:limit:reply:
loadChatsWithIdentifier:reply:
loadChatsWithPinningIdentifier:reply:
loadChatsWithGroupID:reply:
loadChatsWithHandleIDs:groupID:displayName:style:reply:
loadAnyChatsContainingHandleIDsIn:reply:
loadChatWithChatIdentifier:
requestPendingMessages
updateMessage:
updateMessage:withIndexesOfDeletedItems:withIndexToRangeMapOfDeletedItems:deleteDate:
markMessageAsCorrupt:setCorrupt:
storeItem:inChatGUID:
sendStickerAtPath:toChatID:forNBubbleFromTheBottom:atX:atY:scale:balloonWidth:
sendReadReceiptForMessage:toChatID:identifier:style:account:
sendPlayedReceiptForMessage:toChatID:identifier:style:account:
sendBalloonPayload:attachments:withMessageGUID:bundleID:
updateBalloonPayload:attachments:forMessageGUID:
setProperties:ofParticipant:inChatID:identifier:style:account:
chat:updateProperties:
chat:updateDisplayName:
chat:updateIsFiltered:
chat:updateIsBlackholed:
chat:updateLastAddressHandle:
chat:updateLastAddressedSIMID:
unblackholeAndLoadChatWithHandleIDs:reply:
closeSessionChatID:identifier:style:account:
declineInvitationToChatID:identifier:style:account:
leaveChatID:identifier:style:account:
leaveiMessageChatID:identifier:style:account:
removeChatID:identifier:style:account:
sendCommand:withProperties:toPerson:account:
sendCommand:withProperties:toPerson:account:toChatID:identifier:style:
fetchCollaborationNoticesForChatGUID:reply:
loadChatWithGUID:queryID:
loadChatsFilteredUsingPredicate:queryID:
loadChatsFilteredUsingPredicate:lastMessageOlderThan:limit:queryID:
loadChatsWithIdentifier:queryID:
loadChatsWithGroupID:queryID:
loadChatsWithHandleIDs:groupID:displayName:style:queryID:
fetchCommonCapabilities:fromChatWithGUID:reply:
sendMessage:toChatID:identifier:style:account:
sendJunkReportMessage:account:
sendMappingPacket:toHandle:account:
joinChatID:handleInfo:identifier:style:groupID:lastAddressedHandle:lastAddressedSIMID:joinProperties:account:
invitePersonInfo:withMessage:toChatID:identifier:style:account:
invitePersonInfoToiMessageChat:withMessage:toChatID:identifier:style:account:
removePersonInfo:chatID:identifier:style:account:
removePersonInfoFromiMessageChat:chatID:identifier:style:account:
createChatZone
writeDirtyChats
syncChats
markAllChatsAsDirty
clearChatZoneSyncToken
createAttachmentZone
writeAttachments
syncAttachments
downloadAttachmentAssets
writeDirtyMessages
syncMessages
initiatePeriodicSync
loadDirtyMessagesWithLimit:
loadDeletedMessagesWithLimit:
writeExitRecord
fetchExitRecord
deleteExitRecord
clearDataFromCloudKit
setCloudKitEnabled:
performAdditionalStorageRequiredCheck
tryToDisableAllDevices
initiateSync
uploadDailyAnalyticstoCloudKit
fetchLatestSalt
printCachedSalt
deleteSalt
metricAttachments:
updateAttachmentFileSizes
fetchSyncStateStatistics
writeCloudKitSyncCounts:
reportMetricToCK:withDict:
toggleiCloudBackupsIfNeeded
setiCloudBackupsDisabled:
removePathFromiCloudBackups:
fetchLatestRampState
printCachedRampState
syncDeletesToCloudKit
fetchCloudKitSyncStateDebuggingInfo:
tryToAutoCollectLogsWithErrorString:sendLogsTo:
fileTransfer:createdWithProperties:
fileTransfer:updatedWithProperties:
fileTransfer:acceptedWithPath:autoRename:overwrite:options:
fileTransferStopped:
fileTransferRemoved:
fileTransfersRecoverablyDeleted:
deleteFileTransferWithGUID:
downloadHighQualityVariantOfFileTransferWithGUID:
createItemForPHAssetWithUUID:parentChatItemGUID:chatGUID:
retrieveLocalFileURLForFileTransferWithGUID:options:
retrieveLocalFileURLForFileTransferWithGUIDs:options:
downloadFileTransferWithLocalURL:
autoLoginActiveAccountsIfNecessary
loginAllAccounts
logoutAllAccounts
autoLoginAccount:
autoReconnectAccount:
loginAccount:
logoutAccount:
silenceChat:untilDate:
relay:sendInitateRequest:toPerson:account:
relay:sendUpdate:toPerson:account:
relay:sendCancel:toPerson:account:
requestVCWithPerson:properties:conference:account:
respondToVCInvitationWithPerson:properties:conference:account:
cancelVCRequestWithPerson:properties:conference:account:
cancelVCRequestWithPerson:properties:conference:reason:account:
sendCounterProposalToPerson:properties:conference:account:
sendVCUpdate:toPerson:conference:account:
sendAVMessageToPerson:sessionID:type:userInfo:conference:account:
account:avAction:withArguments:toAVChat:isVideo:
flags
messageSummaryInfo
initWithSender:time:body:attributes:fileTransferGUIDs:flags:error:guid:associatedMessageGUID:associatedMessageType:associatedMessageRange:messageSummaryInfo:threadIdentifier:
itemType
attributedBodyText
__im_visitMessageParts:
isAssociatedMessage
messagePartBody
messagePartRange
enqueueWorkBlock:
newSetupInfoAvailable
broadcasterForAllListeners
broadcasterForAccountListeners
broadcasterForListenersSupportingService:
broadcasterForChatListenersSupportingService:
broadcasterForSentMessageListenersSupportingService:
broadcasterForBlackholeChatListeners
broadcasterForBlackholeChatListenersSupportingService:
broadcasterForChatListenersUsingBlackholeRegistry:
broadcasterForChatDatabaseListeners
broadcasterForChatCountsListeners
broadcasterForFileProviderListeners
broadcasterForNotificationListenersSupportingService:
broadcasterForAVConferenceListenersSupportingService:
broadcasterForACConferenceListenersSupportingService:
broadcasterForVCConferenceListenersSupportingService:
setupComplete:info:
setupComplete
pendingVCRequestComplete
pendingACRequestComplete
vcCapabilitiesChanged:
databaseUpdated
databaseUpdated:
unreadCountChanged:
lastFailedMessageDateChanged:
updateCloudKitState
updateCloudKitStateWithDictionary:
didAttemptToSetEnabledTo:result:
didPerformAdditionalStorageRequiredCheckWithSuccess:additionalStorageRequired:forAccountId:error:
didAttemptToDisableAllDevicesResult:
nicknameRequestResponse:encodedNicknameData:
updatePendingNicknameUpdates:handledNicknameUpdates:
updateNicknameHandlesForSharing:blocked:
handlesSharingNicknamesDidChange
pendingNicknamesOrHandledNicknamesDidChange
updatePersonalNickname:
simSubscriptionsDidChange
networkDataAvailabilityChanged:
property:changedTo:from:
persistentProperty:changedTo:from:
fileTransfer:updatedWithProperties:forceNotify:
fileTransfers:createdWithLocalPaths:
fileTransfer:updatedWithCurrentBytes:totalBytes:averageTransferRate:
stickerPackUpdated:
stickerPackRemoved:
oneTimeCodesDidChange:
didFetchSyncStateStats:
didFetchRampState:
didAttemptToDisableiCloudBackups:error:
didFetchCloudKitSyncDebuggingInfo:
account:conference:receivedInvitationFrom:properties:
account:conference:receivedResponseToInvitationFrom:properties:
account:conference:receivedCancelInvitationFrom:properties:
account:conference:receivedCounterProposalFrom:properties:
account:conference:receivedUpdateFrom:data:
account:conference:receivedAVMessage:from:sessionID:userInfo:
account:conference:changedToNewConferenceID:
account:conference:peerIDChangedFromID:toID:
account:conference:peerID:propertiesUpdated:
account:conference:invitationSentSuccessfully:
account:relay:handleInitate:fromPerson:
account:relay:handleUpdate:fromPerson:
account:relay:handleCancel:fromPerson:
messageQuery:finishedWithResult:chatGUIDs:
messageItemQuery:finishedWithResult:chatGUIDs:
historyQuery:chatID:services:finishedWithResult:limit:
pagedHistoryQuery:chatID:services:numberOfMessagesBefore:numberOfMessagesAfter:finishedWithResult:hasMessagesBefore:hasMessagesAfter:
attachmentQuery:chatID:services:finishedWithResult:
uncachedAttachmentCountQuery:chatID:services:finishedWithResult:
isDownloadingQuery:chatID:services:finishedWithResult:
markAsSpamQuery:chatID:services:finishedWithResult:
frequentRepliesQuery:chatID:services:finishedWithResult:limit:
_automation_markAsReadQuery:finishedWithResult:
chat:updated:
chat:propertiesUpdated:
chat:chatPersonCentricID:displayNameUpdated:
chat:chatPersonCentricID:displayNameUpdated:sender:
chat:lastAddressedHandleUpdated:
chat:lastAddressedSIMIDUpdated:
chat:isFilteredUpdated:
chat:engramIDUpdated:
chat:nicknamesUpdated:
chat:lastMessageTimeStampOnLoadUpdated:
chat:uncachedAttachmentCountUpdated:
account:chat:style:chatProperties:updateProperties:
account:chat:style:chatProperties:error:
leftChat:
engroupParticipantsUpdatedForChat:
loadedChats:
loadedChats:queryID:
markedAsReadForMessageGUID:success:queryID:
forcedReloadingChatRegistryWithQueryID:
movedMessagesToRecentlyDeletedWithQueryID:
movedMessagesToRecentlyDeletedForChatsWithGUIDs:queryID:
recoveredMessagesWithQueryID:
loadedRecoverableMessagesMetadata:queryID:
permanentlyDeletedMessagesInChatsWithDeletedChatGUIDs:queryID:
permanentlyDeletedRecoverableMessagesForChatsWithGUIDs:deletedChatGUIDs:
recoveredMessagesFromRecentlyDeletedForChatsWithGUIDs:
chatsNeedRemerging:groupedChats:
chatLoadedWithChatIdentifier:chats:
account:chat:style:chatProperties:invitationReceived:
account:chat:style:chatProperties:groupID:chatPersonCentricID:messageSent:
account:chat:style:chatProperties:notifySentMessage:sendTime:
account:chat:style:chatProperties:groupID:chatPersonCentricID:messageReceived:
account:chat:style:chatProperties:groupID:chatPersonCentricID:messagesReceived:messagesComingFromStorage:
account:chat:style:chatProperties:messageUpdated:
account:chat:style:chatProperties:messageUpdated:suppressNotification:
account:chat:style:chatProperties:messagesUpdated:
service:chat:style:messagesUpdated:
account:chat:style:chatProperties:groupID:chatPersonCentricID:statusChanged:handleInfo:
account:chat:style:chatProperties:chatPersonCentricID:member:statusChanged:
downloadedPurgedAssetBatchForChatIDs:completedTransferGUIDs:
finishedDownloadingPurgedAssetsForChatIDs:
historicalMessageGUIDsDeleted:chatGUIDs:queryID:
previouslyBlackholedChatLoadedWithChatIdentifier:chats:
previouslyBlackholedChatLoadedWithHandleIDs:chat:
blackholedChatsExist:
groupPhotoUpdatedForChatIdentifier:style:account:userInfo:
displayPinCodeForAccount:pinCode:deviceName:deviceType:phoneNumber:
pinCodeAlertCompleted:deviceName:deviceType:phoneNumber:responseFromDevice:wasCancelled:
screenTimeEnablementChanged:
collaborationNoticesDidChangeForChatGUIDs:
qosClassWhileServicingRequestsResponse:identifier:
fileTransfer:highQualityDownloadSucceededWithPath:
fileTransfer:explicitDownloadSucceededWithPath:livePhotoBundlePath:
fileTransferExplicitDownloadFailed:suggestedRetryGUID:error:
fileTransferHighQualityDownloadFailed:
fileTransferDownloadedSucceededWithLocalURL:
fileTransferDownloadFailedWithLocalURL:error:
receivedUrgentRequestForMessages:
defaultsChanged:forService:
showInvalidCertNotificationForAccount:
showForgotPasswordNotificationForAccount:
activeAccountsChanged:forService:
account:defaults:blockList:allowList:blockingMode:blockIdleStatus:status:capabilities:serviceLoginStatus:loginStatusMessage:
account:loginStatusChanged:message:reason:properties:
account:defaultsChanged:
account:capabilitiesChanged:
accountAdded:defaults:service:
account:blockListChanged:
account:allowListChanged:
account:blockingModeChanged:
account:blockIdleStatusChanged:
account:buddyPropertiesChanged:
account:buddyPictureChanged:imageData:imageHash:
account:buddyProperties:buddyPictures:
account:groupsChanged:error:
account:handleSubscriptionRequestFrom:withMessage:
account:statusChanged:
account:postedError:
updateNicknameData:
viewContext
initWithContext:
guidString
date
setDate:
metadata
contentURL
setUrl:
senderHandle
setSenderHandle:
archivedDataWithRootObject:requiringSecureCoding:error:
setMetadata:
save:
initWithGUIDString:sender:metadata:date:
setPredicate:
deleteObject:
saveNotice:
noticesForURLs:
deleteNotice:
deleteNoticeWithGUIDString:
deleteNoticesForURLs:
orPredicateWithSubpredicates:
bundleForClass:
URLForResource:withExtension:
initWithContentsOfURL:
initWithName:managedObjectModel:
stringByResolvingAndStandardizingPath
initWithURL:
setPersistentStoreDescriptions:
loadPersistentStoresWithCompletionHandler:
currentConnection
remoteObjectProxy
initWithEntity:insertIntoManagedObjectContext:
initWithEntityName:
version
@40@0:8@16@24@32
@16@0:8
v24@0:8@16
v16@0:8
q16@0:8
v24@0:8q16
@"NSMutableDictionary"
@"NSURL"
@"IMMessageItem"
@"IMDChat"
@"PHMomentShare"
@"PHFetchResult"
v20@0:8B16
B16@0:8
v32@0:8i16i20@24
i16@0:8
v40@0:8I16@20i28@32
v28@0:8I16@20
I16@0:8
v20@0:8I16
v20@0:8i16
@"NSString"
@"IMDService"
@"IMDServiceSession"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@24@0:8Q16
@"<IMDMessageHistorySyncTask>"24@0:8Q16
@"IMDCKSyncController"
@"IMDAccountController"
@"IMDReplayController"
v32@0:8q16@24
v28@0:8@16B24
v32@0:8@16@24
v28@0:8@"IDSAccount"16B24
v32@0:8@"IDSAccount"16@"NSArray"24
B32@0:8@16@24
@32@0:8@16@24
@24@0:8@16
@"NSSet"
v32@0:8Q16@24
v24@0:8@"IMDCKSyncState"16
@48@0:8@16@24@32@40
v32@0:8@16@?24
v24@0:8@?16
B32@0:8q16Q24
v32@0:8@16B24B28
v40@0:8@16B24B28@32
v48@0:8@16B24B28@32@40
@36@0:8@16B24@28
B24@0:8q16
B28@0:8@16B24
v40@0:8@16q24@32
v48@0:8q16@24q32@40
@24@0:8q16
v48@0:8q16B24Q28B36d40
v36@0:8@16i24@28
v48@0:8@16i24@28B36@?40
v48@0:8@16B24B28B32B36@40
v40@0:8q16B24B28B32B36
v68@0:8q16B24B28B32B36B40B44B48B52B56Q60
v52@0:8@16i24@28B36B40@?44
v32@0:8@?16d24
@"IMDCKSyncState"
@"IMLockdownManager"
@"IDSServerBag"
@"FTDeviceSupport"
@"IMDefaults"
@"IMDSyncTelemetryReporter"
v24@0:8@?<v@?Q>16
@?24@0:8@16
@?16@0:8
v32@0:8Q16Q24
v48@0:8@16Q24@32Q40
@72@0:8@16{?=[8I]}24Q56@64
{?=[8I]}16@0:8
@"<IMDaemonListenerProtocol>"
{?="val"[8I]}
v32@0:8@"NSString"16@"NSString"24
@"CKServerChangeToken"24@0:8@"NSString"16
v32@0:8@"CKServerChangeToken"16@"NSString"24
@"NSBundle"
@"NSDictionary"
v40@0:8@16@24@?32
@44@0:8@16@24@32B40
@"NSDate"
@"IMDaemonCoreHelloWorldClass_Impl"
@"NSArray"
@"NSTimer"
@"IMOneTimeCodeUtilities"
q24@0:8@16
I24@0:8@16
v24@0:8d16
@"<IMDMessagePTaskStore>"
@76@0:8@16@24Q32B40@44Q52^Q60B68B72
v52@0:8@16@24B32@36@44
v24@0:8@"IMConnectionMonitor"16
v28@0:8B16@20
v40@0:8@16@24@32
v52@0:8@16@24@32C40@44
v76@0:8@16@24@32C40@44@52@60@68
v36@0:8@16@24C32
v52@0:8@16@24@32@40C48
v44@0:8@16@24@32C40
v44@0:8@16@24B32@?36
v60@0:8@16@24@32@40C48@?52
v76@0:8@16@24q32Q40@48C56@60@68
v60@0:8@16@24@32@40@48C56
v48@0:8@16@24@32@40
v48@0:8@16I24I28@32@40
v64@0:8@16@24@32@40@48@56
v192@0:8@16@24@32@40@48@56@64@72@80@88B96B100B104B108B112B116@120@128@136@144@152@160@168@176@?184
v52@0:8@16@24@32@40B48
v24@0:8@"IMDAccount"16
v24@0:8@"NSString"16
v24@0:8@"NSDictionary"16
v32@0:8@"NSString"16@"NSDictionary"24
v28@0:8B16@"NSString"20
v40@0:8@16@"NSString"24@"NSString"32
v40@0:8@"NSString"16@"NSString"24@"NSString"32
v52@0:8@"NSString"16@"NSDictionary"24@"NSString"32C40@"NSDictionary"44
v76@0:8@"NSString"16@"NSDictionary"24@"NSString"32C40@"NSString"44@"NSString"52@"NSString"60@"NSDictionary"68
v36@0:8@"NSString"16@"NSString"24C32
v52@0:8@"NSDictionary"16@"IMMessageItem"24@"NSString"32@"NSString"40C48
v52@0:8@"NSString"16@"NSString"24@"NSString"32C40@"NSString"44
v44@0:8@"NSDictionary"16@"NSString"24@"NSString"32C40
v52@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40C48
v32@0:8@"NSDictionary"16@"NSArray"24
v24@0:8@"NSURL"16
v44@0:8@"IMMessageItem"16@"NSString"24@"NSString"32C40
v24@0:8@"IMMessageItem"16
v44@0:8@"NSString"16@"NSString"24B32@?<v@?B>36
v60@0:8@"IMMessageItem"16@"NSString"24@"NSString"32@"NSString"40C48@?<v@?B>52
v76@0:8@"IMMessageItem"16@"IMMessageItem"24q32Q40@"NSString"48C56@"NSString"60@"NSAttributedString"68
v32@0:8@"IMSyndicationAction"16@"NSArray"24
v52@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40C48
v24@0:8@"NSArray"16
v28@0:8@"NSDictionary"16B24
v40@0:8@"NSNumber"16@"NSDictionary"24@"NSString"32
v60@0:8@"NSNumber"16@"NSDictionary"24@"NSString"32@"NSString"40@"NSString"48C56
v32@0:8@"NSDictionary"16@"NSString"24
v40@0:8@"NSString"16@"NSDictionary"24@"NSString"32
v48@0:8@"NSString"16@"NSDictionary"24@"NSString"32@"NSNumber"40
v40@0:8@"NSData"16@"NSString"24@"NSString"32
v48@0:8@"NSString"16I24I28@"NSDictionary"32@"NSString"40
v32@0:8@"NSArray"16@"NSString"24
B32@0:8@"NSDictionary"16@"NSArray"24
B24@0:8@"NSString"16
v64@0:8@"NSString"16@"NSString"24@"NSDictionary"32@"NSNumber"40@"NSString"48@"IDSAccount"56
v192@0:8@"IMMessageItem"16@"IMDChat"24@"IMDAccount"32@"NSData"40@"NSString"48@"NSString"56@"NSString"64@"NSArray"72@"NSString"80@"NSString"88B96B100B104B108B112B116@"NSNumber"120@"NSDictionary"128@"NSDictionary"136@"NSArray"144@"NSDictionary"152@"NSString"160@"NSString"168@176@?<v@?>184
v52@0:8@"IMDChat"16@"NSNumber"24@"NSString"32@"NSString"40B48
@20@0:8B16
S16@0:8
@"NSRecursiveLock"
@"IMDAccount"
@"NSMutableArray"
@"NSMutableSet"
@"IMTimer"
@"<IMDAutoReplying>"
@"IMTimingCollection"
@"IMConnectionMonitor"
@"IMSystemProxySettingsFetcher"
@"IMDChatRegistry"
v32@0:8d16@24
B40@0:8@16@24@32
v48@0:8@16@24@32@?40
d16@0:8
@"__IMDBackwardCompatibilityMessageIdentifier"
@"NSError"
@"CKRecordID"
@"NSNumber"
@"NSObject<OS_dispatch_queue>"
@"IMDRecordZoneManager"
@"IMDCKDatabaseManager"
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v40@0:8@"APSConnection"16@"NSData"24@"APSAppTokenInfo"32
v40@0:8@"APSConnection"16@"APSURLToken"24@"APSURLTokenInfo"32
v40@0:8@"APSConnection"16@"NSError"24@"APSURLTokenInfo"32
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
@"CKRecordZoneID"
@"CKRecordZone"
@"APSConnection"
@40@0:8@16@24Q32
@56@0:8@16@24Q32@40@48
v24@0:8@"SKStatusSubscription"16
v24@0:8@"SKStatusSubscriptionService"16
v56@0:8@16@24@32@40@48
@"SKStatusSubscriptionService"
@"NSCache"
@24@0:8r*16
@"INVocabulary"
@"NSArray"16@0:8
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32@"IDSMessageContext"40
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
@"IDSService"
@44@0:8@16@24B32^@36
@40@0:8@16@24^@32
@56@0:8@16@24@32Q40Q48
@32@0:8@16^q24
v24@0:8@"PHChange"16
v36@0:8@16@24B32
@"IMDCallManager_Impl"
@"NSDictionary"16@0:8
v48@0:8q16Q24@32@?40
v52@0:8@16B24@?28@36@?44
B28@0:8B16@20
v52@0:8@16B24Q28Q36@?44
v60@0:8@16B24Q28Q36@44@?52
v36@0:8@16B24@?28
@40@0:8@16@24q32
Q32@0:8@16@24
v44@0:8@16@24C32@?36
v32@0:8q16q24
B40@0:8q16q24@32
v60@0:8@16q24@32B40@44@?52
v76@0:8B16q20q28q36q44@52@60@?68
B40@0:8q16@24@?32
v104@0:8@16@24@32B40B44q48q56@64q72q80@88@?96
v48@0:8@16@24@32q40
v32@0:8@16d24
v44@0:8@16B24@28@36
v32@0:8@16q24
v24@0:8Q16
v44@0:8@16B24@28@?36
@"IMDCKAttachmentSyncCKOperationFactory"
@"<IMDCKSyncTokenStore>"
v32@0:8@"IMKeyValueCollection"16@"NSDictionary"24
v44@0:8@16@24@32B40
B24@0:8B16B20
@36@0:8Q16B24d28
v32@0:8Q16q24
@"IMKeyValueCollection"
@"<IMDCKSyncStateDelegate>"
@"__IMDPlainTextTapbackInterpreterImpl"
@32@0:8q16@24
@40@0:8q16q24@32
@28@0:8@16B24
v56@0:8@16@24B32Q36I44I48S52
@48@0:8@16B24Q28I36I40S44
v40@0:8@16@24B32B36
v40@0:8@16Q24Q32
v72@0:8@16@24{IMPreviewConstraints=d{CGSize=dd}dBB}32
v64@0:8@16@24{?=[8I]}32
v52@0:8@16@24B32B36q40B48
v44@0:8@16B24B28q32B40
B44@0:8@16@24@32B40
{IMPreviewConstraints=d{CGSize=dd}dBB}16@0:8
B32@0:8@16q24
v32@0:8@16Q24
@36@0:8@16B24^B28
@64@0:8@16@24Q32q40@48@56
@48@0:8@16q24@32@40
@48@0:8@16@24Q32q40
Q24@0:8@16
@"<IMDCollaborationNoticeDispatcherDelegate>"
@"IMDCollaborationNoticeRateLimiter"
@44@0:8@16@24i32Q36
B28@0:8Q16B24
@28@0:8@16i24
q20@0:8i16
q24@0:8q16
@32@0:8@16Q24
Q40@0:8@16@24Q32
B32@0:8Q16@24
v56@0:8@16Q24Q32@40@?48
v40@0:8@"NSArray"16@"IMDChat"24@"NSString"32
@"<IMDAutoReplyDelegate>"16@0:8
v24@0:8@"<IMDAutoReplyDelegate>"16
v36@0:8@16B24@28
@"<IMDAutoReplyDelegate>"
@"CARAutomaticDNDStatus"
@32@0:8@16q24
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
@"UNUserNotificationCenter"
@"IMDScreenTimeAskReponseHandler"
@"IMDFamilyInviteReponseHandler"
@48@0:8@16@24Q32@40
v28@0:8B16@?20
B40@0:8@16@24Q32
@"IMNickname"
@"IDSKVStore"
B48@0:8@16@24@32B40B44
@44@0:8@16B24B28B32Q36
@52@0:8@16B24B28B32Q36B44B48
@56@0:8@16B24B28B32Q36B44B48B52
@44@0:8@16@24B32B36B40
@60@0:8@16@24@32@40Q48B56
@80@0:8@16@24@32Q40Q48@56^B64^B72
@56@0:8@16@24@32d40@48
@36@0:8i16@20@28
@48@0:8@16@24@32Q40
@56@0:8@16@24@32@40Q48
^{_IMDHandleRecordStruct={__CFRuntimeBase=QAQ}q^{__CFArray}}32@0:8@16@24
v60@0:8@16@24C32@36Q44@?52
@44@0:8@16C24@28@?36
@36@0:8@16C24@28
@56@0:8@16@24C32@36@44B52
@64@0:8@16q24Q32@40@48^@56
@32@0:8q16Q24
@"PHFetchOptions"
@"PHPhotoLibrary"
@204@0:8@16@24@32@40@48@56@64@72@80@88@96q104C112q116B124@128@136q144@152q160q168@176B184q188@196
B32@0:8q16@24
C16@0:8
v20@0:8C16
v28@0:8@?16B24
@68@0:8@16@24@32@40@48@56B64
@88@0:8@16@24@32C40@44@52@60@68@76B84
@28@0:8@16C24
@36@0:8@16B24Q28
@44@0:8@16B24@28Q36
@36@0:8@16@24C32
@52@0:8@16@24@32@40C48
@44@0:8@16@24@32C40
@52@0:8@16@24B32@36@44
@64@0:8@16@24@32@40@48@56
v64@0:8@16@24@32B40@44B52B56B60
v36@0:8@16B24B28B32
Q56@0:8@16C24@28@36@44B52
@68@0:8@16@24Q32B40@44Q52^Q60
@20@0:8C16
v40@0:8@16@24^@32
@36@0:8{_NSRange=QQ}16B32
B24@0:8@?16
B36@0:8@16@24C32
@32@0:8@16^B24
@40@0:8@16q24@32
@48@0:8q16B24@28B36@40
v40@0:8@16@24Q32
v28@0:8@16i24
v40@0:8@16@24q32
v80@0:8@16@24@32@40@48@56q64@72
v40@0:8^@16^@24@32
v40@0:8q16q24q32
@"NSData"
@"IMDCKUtilities"
@"IMDChatStore"
@"IMDMessageProcessingController"
@"IMDMessageHistorySyncController"
@"TUConversationManager"
@"CKContainer"
v32@0:8B16B20B24B28
B24@0:8^@16
@"CUTWeakReference"
B36@0:8@16@24B32
@24@0:8^{_IMDAttachmentRecordStruct={__CFRuntimeBase=QAQ}q^{__CFArray}}16
^{_IMDAttachmentRecordStruct={__CFRuntimeBase=QAQ}q^{__CFArray}}24@0:8@16
v24@0:8B16B20
@"<IMDCKAbstractSyncControllerDelegate>"
B40@0:8@16^@24^@32
v40@0:8@?16d24@32
v40@0:8@16Q24@?32
v40@0:8I16I20@24@?32
B48@0:8@16@24@32@40
@"IMStateCaptureAssistant"
v40@0:8@16q24q32
@"FMFSession"
Q24@0:8q16
v60@0:8@16@24@32B40@44@?52
B48@0:8@16Q24q32q40
v76@0:8@16@24B32q36q44@52@60@?68
v52@0:8B16q20q28@36@?44
v96@0:8@16@24@32B40@44q52q60q68B76@80@?88
B32@0:8q16q24
v56@0:8q16q24q32@40@?48
@"CKServerChangeToken"
@"IMDCKMessageSyncCKOperationFactory"
v40@0:8q16@24@?32
v48@0:8q16@24@32@?40
v52@0:8q16@24B32@36@?44
@"NSLock"
B36@0:8@16C24^@28
@"IMDReplayStorageController"
@"IMDReplayStorageIterationContext"
v40@0:8@"IMDXPCEventStreamHandler"16@"NSString"24@"NSDictionary"32
v32@0:8@"IMDCKAbstractSyncController"16Q24
@40@0:8q16@24^B32
v40@0:8Q16r*24@32
B72@0:8q16q24@32Q40@48@56@?64
v56@0:8@16Q24@32@?40@?48
v32@0:8@?16@24
@"NSMutableOrderedSet"
v80@0:8@16@24B32B36B40B44Q48@?56@?64@?72
v28@0:8@16C24
v36@0:8@16C24@28
v52@0:8@16C24@28@36@44
v60@0:8@16C24@28@36@44@52
v72@0:8@16C24@28@36@44@52@60B68
v80@0:8@16C24@28@36@44@52@60@68B76
v32@0:8^@16^C24
v48@0:8@16@24C32B36@?40
v56@0:8@16@24C32B36@40@?48
v44@0:8@16@24C32@36
v52@0:8B16@20@28@36@?44
v44@0:8@16C24@28@36
v68@0:8@16C24@28@36@44@52@60
v68@0:8@16C24@28@36@44q52@60
v64@0:8@16C24@28@36@44@52B60
v32@0:8i16@20C28
v32@0:8I16@20B28
v40@0:8I16@20B28@32
v36@0:8I16@20@28
B48@0:8@16q24@32@40
v44@0:8@16q24@32B40
v52@0:8@16@24q32B40@?44
v48@0:8@16@24q32@?40
v88@0:8@16q24@32@40B48@52q60B68@72@?80
v68@0:8@16q24@32@40B48@52@?60
v80@0:8@16q24@32@40B48@52B60@64@?72
v52@0:8@16@24C32@36@44
v56@0:8@16@24C32@36@44B52
v60@0:8@16@24@32@40C48@52
v68@0:8@16@24@32@40C48@52@60
B52@0:8@16@24C32@36@44
B60@0:8@16@24@32C40@44@52
v40@0:8i16@20C28@32
v56@0:8i16@20C28@32@40@48
v64@0:8i16@20C28@32@40@48@56
v72@0:8i16@20C28@32@40@48@56@64
v68@0:8i16@20C28@32@40@48@56B64
v84@0:8i16@20C28@32@40@48@56@64@72B80
v80@0:8i16@20C28@32@40@48@56q64@72
v100@0:8i16@20C28@32@40@48@56@64@72q80@88B96
v40@0:8i16@20@28C36
v56@0:8i16@20@28@36@44C52
v64@0:8i16@20@28@36@44@52C60
v72@0:8i16@20@28@36@44@52C60@64
v80@0:8i16@20@28@36@44@52C60@64@72
v88@0:8i16@20@28@36@44@52C60@64@72@80
v44@0:8@16@24I32@36
v56@0:8@16@24@32@40@?48
v60@0:8@16@24C32@36@44@?52
v52@0:8@16@24@32B40@?44
v120@0:8@16@24@32@40@48@56@64@72Q80B88@92B100@?104@?112
B20@0:8B16
@"<IMDMessageHistorySyncTask>"
@"<IMDMessageHistorySyncTaskFactory>"
v48@0:8@16@24@?32q40
v44@0:8i16@20@28@?36
@"IMDCKChatSyncCKOperationFactory"
@"CKRecord"
@"IMDCollaborationNoticeDispatcher"
B24@0:8Q16
v48@0:8q16q24@32@?40
B24@0:8@"IMDMessagePTask"16
v68@0:8@16@24C32@36@44@52@60
{_FZChatRoomValidity=iS}24@0:8@16
@"IDSKVDeleteContext"
B32@0:8@16^@24
@32@0:8Q16^@24
@"NSMapTable"
B28@0:8i16@20
v44@0:8@16@24S32q36
v44@0:8@16i24@28@36
v52@0:8I16I20@24i32@36@44
v44@0:8@16@24Q32B40
v48@0:8@16@24Q32@40
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversation"32
v32@0:8@"TUConversationManager"16@"NSArray"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"TUConversationManager"16@"TUConversation"24Q32B40
v32@0:8@"TUConversationManager"16@"NSString"24
v48@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationMember"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSData"32
v40@0:8@"TUConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v48@0:8@"TUConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v36@0:8@"TUConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"TUConversationManager"16@"NSError"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v28@0:8@"TUConversationManager"16B24
@48@0:8@16@24@32o^@40
@52@0:8@16@24@32B40o^@44
v32@0:8@"CSSearchableIndex"16@?<v@?>24
v40@0:8@"CSSearchableIndex"16@"NSArray"24@?<v@?>32
v24@0:8@"CSSearchableIndex"16
@"NSData"48@0:8@"CSSearchableIndex"16@"NSString"24@"NSString"32o^@40
@"NSURL"52@0:8@"CSSearchableIndex"16@"NSString"24@"NSString"32B40o^@44
@"IDSAccount"
v32@0:8@"IDSAccountController"16@"IDSAccount"24
v32@0:8@"NSString"16@"NSArray"24
@28@0:8i16@20
@"IDSAccountController"
@"IMDIDSService"
q32@0:8@16@24
iMessage
FaceTime
