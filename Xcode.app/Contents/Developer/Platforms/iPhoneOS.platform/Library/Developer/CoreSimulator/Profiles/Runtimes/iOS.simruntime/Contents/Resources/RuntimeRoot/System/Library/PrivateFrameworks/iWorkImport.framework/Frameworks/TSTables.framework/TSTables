FT
FT
M[
M[
M[
M[
FT
FT
M[
FT
FT
P^
N\
N\
N\
M[
N\
P^
M[
P^
FT
FT
P^
FT
FT
N\
P^
N\
M[
-[TSWPStorage(TSTFormulaAdditions) i_copyIntoContext:stylesheet:paragraphStyle:listStyle:bakeModes:resettingHostTableToMatch:referenceColorHelper:disableMenus:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSWPStorage_FormulaAdditions.mm
Creating a copy of the storage resulted in a smaller storage.
Found an attachment that wasn't a TSTWPTokenAttachment
attachment character index out of bounds. Bailing.
Expected destination storage to have an attachment character at this index.
v8@?0
TSUDefaultCat
v40@?0@"TSTWPTokenAttachment"8Q16Q24^B32
-[TSWPStorage(TSTFormulaAdditions) p_rangeOfString:orNodeClass:range:]
Do not call method
%s: %s
-[TSWPStorage(TSTFormulaAdditions) p_stringWithFormulaAsTextFromRange:returningTokenValues:]
Attachment index mismatch
-[TSTGroupNode groupValueTuple]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTGroupNode.mm
Only the root groupNode should have no parentNode pointer
-[TSTGroupNode initWithGroupCellValue:atLevel:groupUid:children:]
Root node shouldn't have a cellValue
v24@?0r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}8^B16
-[TSTGroupNode encodeToArchive:]
Only the root node has a nil groupCellValue?!
boo_TRUE
boo_FALSE
str_%@
-[TSTGroupNode p_refreshGroupValue]
Unexpected new key:%{public}@, expected:%{public}@
-[TSTGroupNode updateGroupCellValueIfKeyMatches:]
canonicalKeyString shouldn't change here
+[TSTGroupNode needFormulasForAggregateType:]
Shouldn't be asking if TSCEAggType_Indirect needs formulas
Shouldn't be asking if TSCEAggType_INVALID needs formulas
v16@?0@"TSTGroupNode"8
+[TSTGroupNode localizedStringForCellValue:categoryLevel:groupBy:]
invalid nil value for '%{public}s'
result
-[TSTGroupNode addAggNode:]
Aggregator needs to be setup already
groupUid
Tr^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},R,V_groupUid
labelUid
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},R
groupValueTuple
T@"TSTGroupValueTuple",R,N
groupCellValue
T@"TSCECellValue",R,&,N,V_groupCellValue
groupLevel
TC,R,N,V_groupLevel
rowUids
T@"TSUUUIDSet",R,&,N,V_rowUids
parentNode
T@"TSTGroupNode",N,V_parentNode
childGroupUids
T@"TSUUUIDSet",R,&,N
directChildGroupUids
isLeaf
TB,R,N
isBlankNode
isErrorNode
aggNodes
T^{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSTAggNode *> > >={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}},R,N
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
-[TSTCellSelection initWithTableInfo:selectionType:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellSelection.mm
expected inequality between %{public}s and %{public}s
selectionType
kNoSelection
-[TSTCellSelection initWithTableInfo:rowOrColumn:index:count:]
Invalid selection type used with rowOrColumn initializer.
-[TSTCellSelection logicalCellIDInTable:]
Cannot provide a logical cell ID for a selection that is not rectangular or does not represent a single cell or merge
v16@?0@8
v32@?0{TSUCellRect={TSUCellCoord=ISBB}{?=II}}8^B24
-[TSTCellSelection selectionByExtendingWithCellRange:inTable:selectionType:cursorCell:]
Can't extend a selection with an invalid cell range
-[TSTCellSelection selectionByAddingCellRange:inTable:withAnchor:cursor:selectionType:]
-[TSTCellSelection selectionByRemovingCellRange:inTable:withAnchor:cursor:selectionType:]
Can't remove an invalid cell range
<%@: %p type: %@ region: %@ base region: %@ anchor: %@ cursor: %@>
<%@: %p type: %@ anchor: %@ cursor: %@>
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
range
T{_NSRange=QQ},R,N
isAtEndOfLine
tableInfo
T@"TSTTableInfo",W,N,V_tableInfo
cellUIDRegion
T@"TSTCellUIDRegion",&,N,V_cellUIDRegion
anchorCellUID
T{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}},N,V_anchorCellUID
cursorCellUID
T{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}},N,V_cursorCellUID
baseCellUIDRegion
T@"TSTCellUIDRegion",&,N,V_baseCellUIDRegion
cachedCellRegion
T@"TSTCellRegion",&,N,V_cachedCellRegion
cachedCellRegionVersionCounter
TQ,N,V_cachedCellRegionVersionCounter
cachedBaseRegion
T@"TSTCellRegion",&,N,V_cachedBaseRegion
cachedBaseRegionVersionCounter
TQ,N,V_cachedBaseRegionVersionCounter
valid
TB,R,N,GisValid
cellRegion
T@"TSTCellRegion",R,N
Tq,R,N,V_selectionType
anchorCellID
T{TSUCellCoord=ISBB},R,N
baseRegion
cursorCellID
cellCount
TQ,R,N
beginImplicitEditing
TB,R,N,V_beginImplicitEditing
sizeClass
searchReferenceRange
T{_NSRange=QQ},N,V_searchReferenceRange
containsHeaderColumns
containsHeaderRows
containsBodyRows
containsFooterRows
containsCellsInCategoryColumn
containsCellsInSummaryRow
containsCellsInLabelRow
containsCellsInSummaryOrLabelRows
containsGroupValueCells
containsCellsInCategoryGroupingColumn
containsCellsInCategoryColumnsOrRows
containsOnlyCellsInCategoryColumn
containsOnlyCellsInSummaryRow
containsOnlyCellsInSummaryAndLabelRows
containsOnlyGroupValueCells
containsOnlyCellsInCategoryColumnsAndRows
TSUCellCoord TSUMakeCellCoord(TSUColumnIndex, TSURowIndex)
/Library/Caches/com.apple.xbs/Binaries/iWorkImport_Sim/install/Symbols/BuiltProducts/TSUtility.framework/Headers/TSUColumnRowTypes.h
Row out of bounds: %lu
TSTSelectionType TSTArchivedToNativeSelectionType(const TST::SelectionTypeArchive)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTArchiveUtilities.h
shouldn't be converting from deprecated archived selection type %d
region
column
noSelection
<unknown>
-[TSTRefParser p_parseStringAsGeometricReferenceComponent:inResolver:outPreserveFlags:gettingReferencesMatchingInputAsPrefix:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTRefParser.mm
can't look for geometric references in no particular table
v24@?0r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8^B16
%@%@ %@%@
%@%@
%@ %@
-[TSTRefParser parseAsTractRefWithParsingContext:]
We should only have a nil preferred geometric resolver if a non-unique table name on another sheet is given without sheet name
-[TSTRefParser parseAsChromeRefWithParsingContext:]
%@:%@
bug in reference parser - only ranges expected here
If there is only one range reference, it should match resultRangeRef.
whitespaceCharSet
T@"NSCharacterSet",&,N,V_whitespaceCharSet
calcEngine
T@"TSCECalculationEngine",R,W,N,V_calcEngine
TSCERangeCoordinate TSCEMakeCellRange(TSUCellCoord, TSUCellCoord)
/Library/Caches/com.apple.xbs/Binaries/iWorkImport_Sim/install/Symbols/BuiltProducts/TSCalculationEngine.framework/Headers/TSCERangeCoordinate.h
column %u > %u
row %u > %u
-[TSTTableModel setStylesheetForUpgradeToSingleStylesheet:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableModel.mm
presets
v32@?0@8Q16^B24
-[TSTTableModel initWithContext:tableUID:columnRowUIDMap:styles:stylePreset:tableInfo:]_block_invoke
Caller must provide preset or styles or both.
v12@?0{TSUModelRowIndex=I}8
v10@?0{TSUModelColumnIndex=S}8
TSTPencilCat
v40@?0@"TSTPencilAnnotation"8r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16Q24^B32
{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@?0r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}BB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{TSUColumnRowOffset=ii}BBBBBBB}}16
v24@?0@"<TSTCellIteratorData>"8^B16
v48@?0I8@"TSDStroke"12{TSTSimpleRange=qQ}20i36^B40
v48@?0S8@"TSDStroke"12{TSTSimpleRange=qQ}20i36^B40
@"TSSStyle"16@?0@"TSSStyle"8
v32@?0^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}8{TSUCellCoord=ISBB}16^B24
-[TSTTableModel p_auditTilesForRowOverlapAndExtensionPastTableBoundsWithVersion:]
Expecting >0 columns and >0 rows in the table, dataStore has %lu cells
Tile audit failed.
tile-overlap-preupgrade
tile-overlap-postupgrade
tables
-[TSTTableModel upgradeDuringDocumentUpgradeIfNeeded:tableInfo:]
Invalid parameter not satisfying: %{public}s
tableInfo != nil
hiddenStates
v24@?0Q8^B16
v24@?0@"TSKCustomFormatWrapper"8^B16
v24@?0@"<TSTCellIteratorData>"8@"TSTConcurrentCellList"16
@"TSTConcurrentSparseCellList"24@?0{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}8
v16@?0@"NSArray"8
v16@?0@"TSWPStorage"8
v16@?0@"TSTColumnRowUIDMap"8
v16@?0@"TSTStrokeSidecar"8
TSTExpandedTables
-[TSTTableModel setTextImportRecord:]
Bad import record type!
<%@> %@ (%@%@)
 From: %@
-[TSTTableModel unnamedTableString]
locale
Table %@
TSTables
untitledTableNameFormat
v40@?0{TSUCellCoord=ISBB}8@"TSTCell"16Q24^B32
-[TSTTableModel setCellsWithBaseCellMap:ignoreFormulas:skipDirtyingNonFormulaCells:]
using a uid based cellmap where a coord based one is expected
-[TSTTableModel clearCommentHostingMapForCommentStorage:]
Tables Comment Storage should not be empty
-[TSTTableModel commentHostingAtBaseCellCoord:forCommentStorage:]
Comment storages should be equal
-[TSTTableModel cellStyle:isEqualToDefaultCellStyleForBaseCellCoord:]
null cell style
null style
-[TSTTableModel textStyle:isEqualToDefaultTextStyleForBaseCellCoord:]
-[TSTTableModel heightOfRowAtIndex:isDefault:]
Bad row index!
-[TSTTableModel widthOfColumnAtIndex:isDefault:]
Bad column index!
-[TSTTableModel setHeight:ofRowAtIndex:]
-[TSTTableModel setWidth:ofColumnAtIndex:]
v32@?0@"NSNumber"8Q16^B24
-[TSTTableModel insertColumnsAtIndex:uids:metadatas:tableArea:]
invalid table area for column insert
not enough room in the header
-[TSTTableModel insertRowsAtIndex:uids:metadatas:tableArea:unsetFilterHidingAction:]
invalid table area for row insert
not enough room in the header for insert
not enough room in the footer for insert
-[TSTTableModel removeRowsAtIndex:count:]
Make sure we've already removed any annotations contained in these rows.
-[TSTTableModel removeColumnsAtIndex:count:]
v32@?0{_NSRange=QQ}8^B24
-[TSTTableModel setHidingState:atRowIndex:]
-[TSTTableModel setHidingState:atColumnIndex:]
-[TSTTableModel tsceValueFromCell:atBaseCellCoord:fetchRichTextAttributesIfPlainText:]
unhandled table cell type found
void p_ValueForCellStorageRef(TSTTableModel *__strong, TSTCellStorageRef, TSUModelCellCoord, TSCEValue *, BOOL)
Can't get a value from a null cell reference!
-[TSTTableModel setFormulaOwnerUIDsWithMap:shouldStealReferences:]
Really needed an ownerUIDMapper here - tableModel is %@ (%@)
^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}28@?0^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8I16^B20
@"TSTConditionalStyleSet"28@?0@"TSTConditionalStyleSet"8I16^B20
-[TSTTableModel registerAllFormulasWithCalculationEngine:wasCrossDocumentPaste:infoIsCategorized:wasUndo:]
expect the locally set calc engine to be the same as the one passed in
v24@?0Q8@"TSCEFormulaObject"16
-[TSTTableModel mapTableStylesToStylesheet:withMapper:]_block_invoke
targetStyle
-[TSTTableModel adoptStylesheet:withMapper:]
we expect the calc engine to be nil
 Document or Theme
-[TSTTableModel validateTableStylesInSameStylesheetExpectingDocSS:]
Expected non-nil document stylesheet for validation.
-[TSTTableModel validateTableStylesInSameStylesheetExpectingDocSS:]_block_invoke
styleStylesheet
Expected%{public}@ stylesheet %p on table network style %lu, got %p
v40@?0@"TSSStyle"8@"NSString"16Q24^B32
v40@?0@"TSWPParagraphStyle"8{_NSRange=QQ}16^B32
-[TSTTableModel baseCellCoordForCellContainingRichTextStorage:]
storage
@"TSTCell"16@?0^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}8
{vector<TSTCell *, std::__1::allocator<TSTCell *> >=^@^@{__compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> >=^@}}36@?0{TSUModelRowIndex=I}8@"TSTTableTile"12@"TSTTableTileRowInfo"20^{vector<TSUModelColumnIndex, std::__1::allocator<TSUModelColumnIndex> >=}28
v40@?0{TSUModelCellCoord={TSUCellCoord=ISBB}}8r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@"TSTCell"24@"TSTCell"32
-[TSTTableModel setCellsConcurrently:ignoreFormula:clearImportWarnings:]_block_invoke
baseCoord should be valid
-[TSTTableModel setCellsConcurrently:ignoreFormula:clearImportWarnings:]_block_invoke_2
cells called should have rich text
tableStyle
T@"TSTTableStyle",&,N
bodyCellStyle
T@"TSTCellStyle",&,N
headerRowCellStyle
headerColumnCellStyle
footerRowCellStyle
categoryLevel1CellStyle
categoryLevel2CellStyle
categoryLevel3CellStyle
categoryLevel4CellStyle
categoryLevel5CellStyle
labelLevel1CellStyle
labelLevel2CellStyle
labelLevel3CellStyle
labelLevel4CellStyle
labelLevel5CellStyle
bodyTextStyle
T@"TSWPParagraphStyle",&,N
headerRowTextStyle
headerColumnTextStyle
footerRowTextStyle
categoryLevel1TextStyle
categoryLevel2TextStyle
categoryLevel3TextStyle
categoryLevel4TextStyle
categoryLevel5TextStyle
labelLevel1TextStyle
labelLevel2TextStyle
labelLevel3TextStyle
labelLevel4TextStyle
labelLevel5TextStyle
tableNameStyle
tableNameShapeStyle
T@"TSWPShapeStyle",&,N
defaultHorizontalBorderStroke
T@"TSDStroke",R,N
defaultHorizontalBorderStrokeEvenIfNotVisible
defaultVerticalBorderStroke
bodyColumnStroke
bodyRowStroke
bodyRowStrokeEvenIfNotVisible
headerColumnBorderStroke
headerColumnBodyColumnStroke
headerColumnBodyRowStroke
headerColumnSeparatorStroke
headerRowBorderStroke
headerRowBodyColumnStroke
headerRowBodyRowStroke
headerRowSeparatorStroke
footerRowBorderStroke
footerRowBodyColumnStroke
footerRowBodyRowStroke
footerRowSeparatorStroke
categoryLevel1TopStroke
categoryLevel2TopStroke
categoryLevel3TopStroke
categoryLevel4TopStroke
categoryLevel5TopStroke
categoryLevel1LabelSeparatorStroke
categoryLevel2LabelSeparatorStroke
categoryLevel3LabelSeparatorStroke
categoryLevel4LabelSeparatorStroke
categoryLevel5LabelSeparatorStroke
categoryLevel1BottomStroke
categoryLevel2BottomStroke
categoryLevel3BottomStroke
categoryLevel4BottomStroke
categoryLevel5BottomStroke
categoryLevel1InteriorStroke
categoryLevel2InteriorStroke
categoryLevel3InteriorStroke
categoryLevel4InteriorStroke
categoryLevel5InteriorStroke
numberOfRows
T{TSUModelRowIndex=I},R,N
numberOfColumns
T{TSUModelColumnIndex=S},R,N
columnRowUIDMap
T@"TSTColumnRowUIDMap",&,N,V_columnRowUIDMap
dataStore
T@"TSTTableDataStore",&,N,V_dataStore
presetIDForUpgrade
TQ,N,V_presetIDForUpgrade
conditionalStyleFormulaOwner
T@"TSTConditionalStyleFormulaOwner",&,N,V_conditionalStyleFormulaOwner
deprecatedProvider
T@"TSWPStorage",&,N,V_deprecatedProvider
commentHostingMap
T@"NSMapTable",R,N,V_commentHostingMap
hasEmbiggened
TB,R,N,V_hasEmbiggened
T@"TSTTableInfo",N,V_tableInfo
upgradeHiddenFormulaOwnerForColumnsUID
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},R,N
upgradeHiddenFormulaOwnerForRowsUID
upgradeNeedsToUpdateFilterSetForImport
upgradeFilterSet
T@"TSTTableFilterSet",&,N,V_upgradeFilterSet
T@"TSCECalculationEngine",N,V_calcEngine
wasCut
TB,N,V_wasCut
tableUID
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_tableUID
fromTableUID
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_fromTableUID
fromGroupByUID
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_fromGroupByUID
ownerUIDMapper
T@"TSCEOwnerUidMapper",R,N
identityOwnerUIDMapper
nsTableUID
T@"NSUUID",R,N
tableName
T@"NSString",&,N,V_tableName
tableNameEnabled
TB,N,V_tableNameEnabled
tableNameHeight
Td,N,V_tableNameHeight
tableNameBorderEnabled
TB,N,V_tableNameBorderEnabled
tableNameBorderStroke
repeatingHeaderRowsEnabled
TB,N,V_repeatingHeaderRowsEnabled
repeatingHeaderColumnsEnabled
TB,N,V_repeatingHeaderColumnsEnabled
tableWritingDirection
Ti,R,N
hasTableBorder
hasAlternatingRows
numberOfHeaderRows
T{TSUModelRowIndex=I},N,V_numberOfHeaderRows
numberOfFooterRows
T{TSUModelRowIndex=I},N,V_numberOfFooterRows
numberOfHeaderColumns
T{TSUModelColumnIndex=S},N,V_numberOfHeaderColumns
headerRowsFrozen
TB,N,V_headerRowsFrozen
headerColumnsFrozen
TB,N,V_headerColumnsFrozen
styleApplyClearsAll
TB,N,V_styleApplyClearsAll
tableStylePreset
T@"TSTTableStylePreset",&,N,V_tableStylePreset
sortRuleReferenceTracker
T@"TSTSortRuleReferenceTracker",R,N,V_sortRuleReferenceTracker
mergeOwner
T@"TSTMergeOwner",R,N,V_mergeOwner
categoryOwner
T@"TSTCategoryOwner",R,N,V_categoryOwner
hiddenStatesOwner
T@"TSTHiddenStatesOwner",R,N,V_hiddenStatesOwner
pencilAnnotationOwner
T@"TSTPencilAnnotationOwner",R,N,V_pencilAnnotationOwner
hauntedOwner
T@"TSCEHauntedOwner",R,N,V_hauntedOwner
conditionalStyleFormulaOwnerUID
cellsPendingWrite
T@"TSTCellDictionary",R,N,V_cellsPendingWrite
cellsToInvalidateAfterRecalc
T@"TSTConcurrentMutableCellUIDSet",R,N,V_cellsToInvalidateAfterRecalc
cellsToInvalidateNonoverflowingAfterRecalc
T@"TSTConcurrentMutableCellUIDSet",R,N,V_cellsToInvalidateNonoverflowingAfterRecalc
sortOrder
T@"TSTTableSortOrder",C,N,V_sortOrder
strokeSidecar
T@"TSTStrokeSidecar",&,N
cellWillChangeDistributor
T@"TSTCellWillChangeDistributor",R,N,V_cellWillChangeDistributor
presetNeedsStrongOwnership
TB,N,V_presetNeedsStrongOwnership
wasUnarchivedFromAProvidedTable
TB,N,V_wasUnarchivedFromAProvidedTable
textImportRecord
T@"TSTStructuredTextImportRecord",&,N,V_textImportRecord
tableSizeClass
archivingCompatibilityVersion
shouldUseWideRows
TB,N
versionAtUnarchive
TQ,R,N,V_versionAtUnarchive
hasMigratableStylesInCells
defaultRowHeight
Td,N,V_defaultRowHeight
defaultColumnWidth
Td,N,V_defaultColumnWidth
rowHeights
T@"NSArray",R,N
columnWidths
T@"TSTTableStyle",&,N,V_tableStyle
T@"TSTCellStyle",&,N,V_bodyCellStyle
T@"TSTCellStyle",&,N,V_headerRowCellStyle
T@"TSTCellStyle",&,N,V_headerColumnCellStyle
T@"TSTCellStyle",&,N,V_footerRowCellStyle
T@"TSTCellStyle",&,N,V_categoryLevel1CellStyle
T@"TSTCellStyle",&,N,V_categoryLevel2CellStyle
T@"TSTCellStyle",&,N,V_categoryLevel3CellStyle
T@"TSTCellStyle",&,N,V_categoryLevel4CellStyle
T@"TSTCellStyle",&,N,V_categoryLevel5CellStyle
T@"TSTCellStyle",&,N,V_labelLevel1CellStyle
T@"TSTCellStyle",&,N,V_labelLevel2CellStyle
T@"TSTCellStyle",&,N,V_labelLevel3CellStyle
T@"TSTCellStyle",&,N,V_labelLevel4CellStyle
T@"TSTCellStyle",&,N,V_labelLevel5CellStyle
T@"TSWPParagraphStyle",&,N,V_bodyTextStyle
T@"TSWPParagraphStyle",&,N,V_headerRowTextStyle
T@"TSWPParagraphStyle",&,N,V_headerColumnTextStyle
T@"TSWPParagraphStyle",&,N,V_footerRowTextStyle
T@"TSWPParagraphStyle",&,N,V_categoryLevel1TextStyle
T@"TSWPParagraphStyle",&,N,V_categoryLevel2TextStyle
T@"TSWPParagraphStyle",&,N,V_categoryLevel3TextStyle
T@"TSWPParagraphStyle",&,N,V_categoryLevel4TextStyle
T@"TSWPParagraphStyle",&,N,V_categoryLevel5TextStyle
T@"TSWPParagraphStyle",&,N,V_labelLevel1TextStyle
T@"TSWPParagraphStyle",&,N,V_labelLevel2TextStyle
T@"TSWPParagraphStyle",&,N,V_labelLevel3TextStyle
T@"TSWPParagraphStyle",&,N,V_labelLevel4TextStyle
T@"TSWPParagraphStyle",&,N,V_labelLevel5TextStyle
T@"TSWPParagraphStyle",&,N,V_tableNameStyle
T@"TSWPShapeStyle",&,N,V_tableNameShapeStyle
double TSTCellStorageDurationValue(TSTCellStorage *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellStorage.h
Asked for duration value from non-duration cell.
TSUCellRect TSUCellRangeFromRowRange(NSRange, TSUColumnRowSize)
/Library/Caches/com.apple.xbs/Binaries/iWorkImport_Sim/install/Symbols/BuiltProducts/TSUtility.framework/Headers/TSUColumnRowRect.h
out of bounds
TSUCellRect TSUCellRangeFromColumnRange(NSRange, TSUColumnRowSize)
TSUDecimal TSTCellStorageDecimalValue(TSTCellStorage *)
Asked for TSUDecimal value from an inappropriate cell.
BOOL TSTCellStorageBoolValue(TSTCellStorage *)
Asked for bool value from non-bool cell.
double TSTCellStorageRawDateValue(TSTCellStorage *)
Asked for date value from non-date cell.
-[TSTMutableCellIteratorData cellID]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTMutableCellIteratorData.m
cellID read before it was set
-[TSTMutableCellIteratorData cell]
cell read before it was set
-[TSTMutableCellIteratorData mergeRange]
mergeRange read before it was set
-[TSTMutableCellIteratorData formulaSpec]
formulaSpec read before it was set
cellID
cell
T@"TSTCell",R,N
formulaSpec
T@"TSTCellFormulaSpec",R,N
mergeRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},R,N
cellValueType
cellHasFormula
cellHasConditionalStyle
cellHasCustomFormat
cellHasCommentStorage
cellIsEmpty
cellIDIsValid
TB,N,V_cellIDIsValid
cellIsValid
TB,N,V_cellIsValid
formulaSpecIsValid
TB,N,V_formulaSpecIsValid
mergeRangeIsValid
TB,N,V_mergeRangeIsValid
T{TSUCellCoord=ISBB},N,V_cellID
T@"TSTCell",&,N,V_cell
T@"TSTCellFormulaSpec",&,N,V_formulaSpec
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_mergeRange
v24@?0@"TSTTableTileRowInfo"8^B16
v28@?0@"TSTTableTileRowInfo"8I16^B20
Tables/Tile
-[TSTTableTile _setRowInfo:atTileRowIndex:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableTile.mm
Duplicate row indexes!
Fatal Assertion failure: %{public}s %{public}s:%d Table embiggening is a one-way process
-[TSTTableTile setShouldUseWideRows:]
Table embiggening is a one-way process
-[TSTTableTile populatedRows]_block_invoke
rowInfo
<%@:%p %lu cells/ rows %@ >
Couldn't find row info for row index %lu
Fatal Assertion failure: %{public}s %{public}s:%d Missing formatKeys.
-[TSTTableTile setCell:atColumnIndex:tileRowIndex:formatKeys:]
Missing formatKeys.
v32@?0@"NSObject"8Q16^B24
-[TSTTableTile assertListRows]_block_invoke
In assertListRows, saw a row info that has no cells
rowInfos
T@"NSPointerArray",&,N,V_rowInfos
maxColumn
TS,R,N
maxRow
TI,R,N
numRows
isEmpty
populatedRows
T@"NSIndexSet",R,N
lastSavedInBNC
TB,N,V_lastSavedInBNC
void _assertTileIndexMatch(TSURowIndex, TSURowIndex)
TableTile row index %u should match array index %u.
hasWorkItems
-[TSTCellRangeControlSpec initWithInteractionType:minimum:maximum:increment:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellRangeControlSpec.mm
Illegal interaction type:%@
Illegal parameters: %f, %f, %f
+[TSTCellRangeControlSpec cellSpecFromTSKFormat:]
TSTCellRangeControlSpec can only be created from TSKFormats for Stepper, Slider, and Rating.
minimum
Td,R,N,V_minimum
maximum
Td,R,N,V_maximum
increment
Td,R,N,V_increment
legacyDisplayFormatType
Ti,R,N,V_legacyDisplayFormatType
tstHasFormulas
tstHasPastableFormulas
tstContainsCategoryColumn
tstNumRows
tstNumColumns
tstHasMergeRanges
tstFullyFiltered
tstCopiedRegion
tstSourceTableID
tstSourceOrigin
tstSourceNumHeaderColumns
tstSourceNumHeaderRows
tstSourceNumFooterRows
tstSourceNumRows
tstSourceNumColumns
tstSourceSelectionType
-[TSTTableInfo initWithContext:geometry:rows:columns:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableInfo.mm
stylePreset
-[TSTTableInfo initWithContext:geometry:]
call - (instancetype) initWithContext: (TSPObjectContext *) context geometry: (TSDInfoGeometry *) geometry styles:(TSTTableStyleNetwork *)styles please
-[TSTTableInfo initWithContext:fromSourceInfo:cellRegion:waitForCalcEngine:flattenCategories:]
Copying a categorized table without flattening. If you know how you got here, please write a bug.
v20@?0I8^B12
v20@?0S8^B12
-[TSTTableInfo _initWithContext:flatteningFromCategorizedInfo:cellRegion:waitForCalcEngine:flatteningOptions:]
not expecting categorized table
-[TSTTableInfo _initWithContext:fromSourceInfo:cellRegion:tableModel:waitForCalcEngine:formulaCoordSpace:]
not expecting a categorized table
%@ %p: %@ (tableUID: %@)
Headers table
Basic table
Checklist table
Stocks table
Plain table
Headers and footers table
+[TSTTableInfo localizedDescriptionForProtoIndex:]
No description for table proto index: %lu
remotedata_positive_fill@2x.png
remotedata_negative_fill@2x.png
-[TSTTableInfo componentRootObject]
Component root object is nil!
-[TSTTableInfo performReadForOneOffFormulaEvaluation:forCellCoord:]
_translator
-[TSTTableInfo notifyTableOfNewResults]
There are no callers of this, but its needed to conform to TSCECalculationEngineRegistration protocol
+[TSTTableInfo bootstrapPresetsOfKind:inTheme:alternate:reservedCount:]
expected equality between %{public}s and %{public}s
p.context
context
@"TSSStyle"32@?0@"TSSStyle"8@"NSString"16Q24
-[TSTTableInfo replaceReferencedStylesUsingBlock:]
failed cell map application
+[TSTTableInfo validateNewName:forTable:]
Unable to get sheetNameProvider
B24@?0@"NSArray"8@"NSArray"16
TableInfo %p with tableName: '%@' and tableUID %@ is not registered with the calc-engine properly.
Repaired by renaming table to '%@' with tableUID: %@
+[TSTTableInfo ensureAllTablesAreRegisteredInDocumentRoot:]
Unexpected failure registering a table: %@
-[TSTTableInfo allAnnotations]_block_invoke
iterator shoul only return cells with comments
-[TSTTableInfo sortTagsForCellsInColumns:rows:]_block_invoke
reorganizeValue
Table
^%@\s\d+(-\d+)?$
%@-%@
-[TSTTableInfo chooseUniqueNameInContainer:forPaste:needsNewName:avoidNames:]
Fresh table name is the same as the old one - aborting infinite loop.
-[TSTTableInfo getDefaultCell:forCellID:]
trying to get a default cell for an invalid cell ID
-[TSTTableInfo getCell:atCellID:suppressCellBorder:]
-[TSTTableInfo getCell:atCellID:]
-[TSTTableInfo formulaAtCellID:]
-[TSTTableInfo setCell:atCellUID:ignoreFormula:clearImportWarnings:]
-[TSTTableInfo setCellsWithCellMap:ignoreFormulas:skipDirtyingNonFormulaCells:]
coord based cellmaps no longer ok
v32@?0r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8Q16^B24
@"TSTCellMap"24@?0{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}8
v24@?0@"<TSTCellIteratorData>"8@"TSTCellMap"16
@"TSTConcurrentCellList"24@?0{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}8
-[TSTTableInfo cellValueTypeAtCellID:]
-[TSTTableInfo setCellStyle:ofRowAtUID:]
-[TSTTableInfo setTextStyle:ofRowAtUID:]
-[TSTTableInfo cellStyleOfRowAtIndex:isDefault:]
-[TSTTableInfo textStyleOfRowAtIndex:isDefault:]
-[TSTTableInfo setCellStyle:ofColumnAtUID:]
-[TSTTableInfo setTextStyle:ofColumnAtUID:]
-[TSTTableInfo cellStyleOfColumnAtIndex:isDefault:]
-[TSTTableInfo textStyleOfColumnAtIndex:isDefault:]
-[TSTTableInfo defaultCellStyleForCellID:]
-[TSTTableInfo defaultCellStyleForTableStyleArea:]
-[TSTTableInfo cellStyleForCellWithEmptyStyleAtCellID:isDefault:]
-[TSTTableInfo defaultTextStyleForCellID:]
-[TSTTableInfo defaultTextStyleForTableStyleArea:]
-[TSTTableInfo textStyleForCellWithEmptyStyleAtCellID:isDefault:]
-[TSTTableInfo cellStyle:isEqualToDefaultCellStyleForCellID:]
-[TSTTableInfo textStyle:isEqualToDefaultTextStyleForCellID:]
-[TSTTableInfo cellStyleAtCellID:isDefault:]
-[TSTTableInfo textStyleAtCellID:isDefault:]
-[TSTTableInfo conditionalStyleSetAtCellID:]
Categories
Column %@
-[TSTTableInfo setHiddenStatesUid:]
_hiddenStates.hiddenStatesUid and _hiddenStatesUid should match
-[TSTTableInfo stringAtCellID:optionalCell:]
-[TSTTableInfo characterFillAtCellID:optionalCell:]
v40@?0Q8{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16^B32
-[TSTTableInfo getValue:atCellID:fetchRichTextAttributesIfPlainText:]
-[TSTTableInfo cellValueFromCell:atCellID:]
v24@?0{TSUCellCoord=ISBB}8^B16
-[TSTTableInfo checkState]
TableChecker: Unexpected groupBy state
TableChecker: Unexpected nil categoryOrder in normal state
TableChecker: Unexpected categoryOrder missing info backpointer in normal state
TableChecker: Unexpected categoryOrder has uid map while uncategorized in normal state
TableChecker: Unexpected nil summaryModel in normal state
TableChecker: Unexpected non-zero rows in summaryModel in normal state
TableChecker: Unexpected non-zero columns in summaryModel in normal state
TableChecker: Unexpected populated cells in summaryModel in normal state
TableChecker: Unexpected strokeSidecar state
TableChecker: Unexpected columnRowUIDMap state
TableChecker: Unexpected translator state
TableChecker: Unexpected nil categoryOrder in disabled state
TableChecker: Unexpected categoryOrder missing info backpointer in disabled state
TableChecker: Unexpected categoryOrder has uid map while uncategorized in disabled state
TableChecker: Unexpected nil summaryModel in disabled state
TableChecker: Unexpected nil categoryOrder in enabled state
TableChecker: Unexpected categoryOrder missing info backpointer in enabled state
TableChecker: Unexpected categoryOrder missing uid map while categorized in enabled state
TableChecker: Unexpected nil summaryModel in enabled state
TableChecker: Unexpected zero rows in summaryModel in enabled state
TableChecker: Unexpected summaryModel not receiving distributed changes in enabled state
TableChecker: Unexpected mergeOwner state
v32@?0C8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}12C20^B24
TableChecker: Unexpected aggregate state
-[TSTTableInfo _correctAndCheckStateSuppressingAssertions:]
TableChecker: correcting nil categoryOrder in normal/disabled state
TableChecker: correcting missing backpointer in normal/disabled state
TableChecker: correcting uid map in normal/disabled state
TableChecker: correcting strokeSidecar
TableChecker: correcting summaryModel
TableChecker: correcting maps
-[TSTTableInfo setGroupByUid:]
Hey, don't set an invalid groupByUid on TSTTableInfo - ignoring your silly request.
_groupBy.groupByUid and _groupByUid should match
-[TSTTableInfo setIsCategoryEnabled:]
Cannot enable/disable categories without a groupBy
v24@?0@"TSTGroupNode"8@"TSUUUIDSet"16
v24@?0@"TSTGroupingColumn"8^B16
v16@?0@"TSTSummaryModel"8
v16@?0@"TSTCategoryOrder"8
-[TSTTableInfo saveToArchive:archiver:]
Out-of-bounds type assignment was clamped to max
Out-of-bounds type assignment was clamped to min
matchesObjectPlaceholderGeometry
geometry
T@"TSDInfoGeometry",C,N
parentInfo
T@"NSObject<TSDContainerInfo>",N
owningAttachment
T@"TSPObject<TSDOwningAttachment>",N
owningAttachmentNoRecurse
T@"TSPObject<TSDOwningAttachment>",R,N
floatingAboveText
TB,R,N,GisFloatingAboveText
anchoredToText
TB,R,N,GisAnchoredToText
inlineWithText
TB,R,N,GisInlineWithText
attachedToBodyText
TB,R,N,GisAttachedToBodyText
childInfos
T@"NSArray",R,C,N
isMaster
groupBy
T@"TSTGroupBy",&,N
numberOfBaseColumns
numberOfBaseRows
numberOfBaseHeaderColumns
numberOfBaseHeaderRows
numberOfBaseFooterRows
numberOfBaseBodyRows
numberOfChromeColumns
T{TSUChromeColumnIndex=S},R,N
numberOfChromeRows
T{TSUChromeRowIndex=I},R,N
numberOfChromeHeaderColumns
numberOfChromeHeaderRows
numberOfChromeFooterRows
baseTableUID
groupByUid
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N
categoryColumnWidth
Td,N
autoListRecognition
autoListTermination
textIsLinked
preventsComments
preventsChangeTracking
supportsMultipleColumns
contentWritingDirection
Tq,R,N
storageChangesInvalidateWrap
supportsDropCapsInChildStorages
rowUIDsWithPendingGroupingChanges
T@"TSUMutableUUIDSet",&,N,V_rowUIDsWithPendingGroupingChanges
migratingStylesOnly
TB,N,V_migratingStylesOnly
rowUIDsForImportedGroupingRows
T@"TSUMutableUUIDSet",&,N,V_rowUIDsForImportedGroupingRows
documentIsClosing
TB,N,V_documentIsClosing
tableTranslatorBaseMapForPasteboard
T{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}},N,V_tableTranslatorBaseMapForPasteboard
tableTranslatorViewMapForPasteboard
T{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}},N,V_tableTranslatorViewMapForPasteboard
archivedMasterLayoutBundle
T@"TSTArchivedMasterLayoutBundle",&,N,V_archivedMasterLayoutBundle
formulaCoordSpace
Tq,N,V_formulaCoordSpace
dragAndDropDetails
T@"NSDictionary",&,N,V_dragAndDropDetails
isCopyContainingCategoryColumn
TB,N,V_isCopyContainingCategoryColumn
hasReference
TB,N,V_hasReference
partitioner
T@"TSTTablePartitioner",&,N,V_partitioner
masterLayout
T@"TSTMasterLayout",&,N,V_masterLayout
categorized
TB,R,N,GisCategorized
hasCategoryRules
T@"TSCECalculationEngine",N
summaryModel
T@"TSTSummaryModel",R,N,V_summaryModel
T@"TSTColumnRowUIDMap",R,N,V_columnRowUIDMap
categoryOrder
T@"TSTCategoryOrder",R,N,V_categoryOrder
TI,N
minNumberOfHeaderColumns
maxNumberOfHeaderColumns
T@"NSString",&,N
Tq,N
T@"TSTTableStylePreset",&,N
hasMigratableStylesInBaseTableCells
backgroundFill
T@"TSDFill",R,N
bodyFill
headerColumnsFill
headerRowsFill
footerRowsFill
T@"TSTConcurrentMutableCellUIDSet",R,N
T@"TSTConditionalStyleFormulaOwner",R,N
T@"TSTCategoryOwner",R,N
T@"TSTHiddenStatesOwner",R,N
T@"TSTHiddenStates",&,N,V_hiddenStates
T@"TSTPencilAnnotationOwner",R,N
filterSet
T@"TSTTableFilterSet",C,N
hiddenStatesUid
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_hiddenStatesUid
T@"TSTTableSortOrder",C,N
T@"TSTSortRuleReferenceTracker",R,N
T@"TSTStrokeSidecar",R,N
T@"TSTCellWillChangeDistributor",R,N
translator
T@"TSTTableTranslator",&,N,V_translator
fromTableCoordMapperForPasteboard
T@"TSCECoordMapper",&,N,V_fromTableCoordMapperForPasteboard
T@"TSTStructuredTextImportRecord",&,N
reimportable
TB,R,N,GisReimportable
newlyImported
TB,R,N,GisNewlyImported
T@"NSArray",R,&,N
bodyRange
bodyColumnRange
bodyRowRange
headerRowRange
footerRowRange
headerColumnRange
actualHeaderColumnRange
topCornerRange
bottomCornerRange
categoryColumnRange
baseColumnRange
wasRemovedFromDocument
TB,R,N,V_wasRemovedFromDocument
T@"TSDInfoGeometry",C,D,N
T@"NSObject<TSDContainerInfo>",D,N
T@"TSPObject<TSDOwningAttachment>",D,N
T@"TSPObject<TSDOwningAttachment>",R,D,N
TB,R,D,N,GisFloatingAboveText
TB,R,D,N,GisAnchoredToText
TB,R,D,N,GisInlineWithText
T@"TSTGroupBy",&,N,V_groupBy
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_groupByUid
v16@?0@"TSDLayout"8
-[TSTTableInfo(CellMap) applyCellDiff:atCellUID:migrationMap:inverseCellDiff:defaultCellStyle:defaultTextStyle:]_block_invoke
customFormat
-[TSTTableInfo(CellMap) applyCellDiff:atCellUID:migrationMap:inverseCellDiff:defaultCellStyle:defaultTextStyle:]
TSU_SUCCESS
void TSTEncodeCellToArchive(TSTCell *__strong, TST::Cell *, TSPArchiver *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTArchiveUtilities.mm
stringValue in string cell is nil
TSDThreadedComments
count
TB,R
-[TSTUIDRectRef baseRangeRef]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTUIDRectRef.mm
This API can't support multiple base ranges, had %lu
-[TSTUIDRectRef viewRangeRef]
This API can't support multiple view ranges, had %lu
%@<%p> base:
T@"TSCECalculationEngine",W,N,V_calcEngine
basePreserveFlags
TC,N,V_basePreserveFlags
viewPreserveFlags
TC,N
isValid
uidRange
T{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}},R,N,V_uidRange
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},R,N,V_tableUID
viewTopLeftCoord
T{TSUViewCellCoord={TSUCellCoord=ISBB}},R
viewBottomRightCoord
baseTopLeftCoord
T{TSUModelCellCoord={TSUCellCoord=ISBB}},R
baseBottomRightCoord
needsUidRectUpgrade
TB,N,V_needsUidRectUpgrade
chromeRangeRef
T{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}},N,V_chromeRangeRef
isViewRectangle
isBaseRectangle
spansAllColumns
spansAllRows
-[TSTCellIterator initWithTableInfo:tableModel:region:flags:searchFlags:clampingRange:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellIterator.mm
caller should pass in region pointer
Tried to create iterator with range larger than is possible.
cannot use iterator flags to return all empty cells and also use flags to only search for specific kinds of cells
unsupported options, searching for borders but not fetching them
flags remain 0x%lx, flags should all be consumed by this point 
searchFlags remain 0x%lx, searchFlags should all be consumed by this point 
-[TSTCellIterator p_updateDataForMergeAtCellID:]
found this column in the cached merge ranges, so expected a merge range
-[TSTCellIterator p_updateDataForCellID:]
cell iterator was asked for cellID %@ that is outside the table bounds
T@"TSTTableInfo",R,N
T@"TSTTableInfo",&,N,V_tableInfo
tableModel
T@"TSTTableModel",&,N,V_tableModel
T@"TSTCellRegion",R,N,V_region
cellData
T@"TSTMutableCellIteratorData",&,N,V_cellData
returnEmptyCells
TB,N,V_returnEmptyCells
returnOneEmptyCell
TB,N,V_returnOneEmptyCell
terminateRegionIterator
TB,N,V_terminateRegionIterator
returnOnlyFormulas
TB,N,V_returnOnlyFormulas
returnMergeRanges
TB,N,V_returnMergeRanges
contentIterator
T@"<TSTCellRegionIterating><TSTMutableCellIteratorDataUpdating>",&,N,V_contentIterator
strokeIterator
T@"<TSTCellRegionIterating><TSTMutableCellIteratorDataUpdating>",&,N,V_strokeIterator
regionIterator
T@"<TSTCellRegionIterating>",&,N,V_regionIterator
dataStoreIterator
T@"<TSTCellRegionIterating><TSTMutableCellIteratorDataUpdating>",&,N,V_dataStoreIterator
rowForColumnIndexesWithMerges
TI,N,V_rowForColumnIndexesWithMerges
returnCellContents
TB,R,N,V_returnCellContents
tableCell
tableCellText
+[TSTCellStyle properties]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellStyle.mm
sProperties
+[TSTCellStyle propertiesAllowingNSNull]_block_invoke
s_nullProperties
+[TSTCellStyle nonEmphasisCellProperties]_block_invoke
s_nonEmphasisProperties
+[TSTCellStyle categoriesCellProperties]_block_invoke
bodyStyle
headerRowStyle
headerColumnStyle
footerRowStyle
categoryLevel1Row
categoryLevel2Row
categoryLevel3Row
categoryLevel4Row
categoryLevel5Row
labelLevel1Row
labelLevel2Row
labelLevel3Row
labelLevel4Row
labelLevel5Row
+[TSTCellStyle p_regionStringForTableStyleArea:]
Unexpected value for region.
+[TSTCellStyle initDefaultPropertyMap:forTableStyleArea:presetID:colors:alternate:]
-[TSTCellStyle validate]
orphaned cell style %@
Cell style not in its stylesheet
v20@?0i8^B12
Collapse Group
TSTablesUndo
Collapse Groups
Expand Group
Expand Groups
%@ -> %@
symbol
T@"NSString",&,N,V_symbol
attribute
Tq,N,V_attribute
-[TSTTableTileRowInfo initFromArchive:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableTileRowInfo.mm
Can't find the last valid column during unarchive!
lastPreBNCCellRef
lastCellRef
Mismatches between buffers.
Document has corrupt row offset buffers.
Row cell count is too high (expected %tu, saw %tu), repairing
-[TSTTableTileRowInfo encodeToArchive:archiver:]
should not be archiving an empty row info
Expected current storage version.
-[TSTTableTileRowInfo _insertCell:atIndex:formatKeys:]
Can't insert over an existing cell!
Fatal Assertion failure: %{public}s %{public}s:%d Attempting to write cells to a preBNC row.
-[TSTTableTileRowInfo setCell:atIndex:formatKeys:]
Attempting to write cells to a preBNC row.
Fatal Assertion failure: %{public}s %{public}s:%d Attempting to insert columns in a preBNC row.
-[TSTTableTileRowInfo insertColumnsAtIndex:count:]
Attempting to insert columns in a preBNC row.
Fatal Assertion failure: %{public}s %{public}s:%d Attempting to remove columns in a preBNC row.
-[TSTTableTileRowInfo removeColumnsAtIndex:count:]
Attempting to remove columns in a preBNC row.
-[TSTTableTileRowInfo moveColumnsFromIndex:toIndex:count:]
Move column ranges cannot overlap!
cellsMoved
cellsMovedPreBNC
-[TSTTableTileRowInfo searchCellStorageRefAtColumnIndex:searchMask:]
no need to call this API with empty search mask
Incorrect maximum column!
-[TSTTableTileRowInfo validateWithResult:]
%{public}@
 Misaligned cell storage offsets!
 Cell storage overflow!
 Found an extra cell in this row!
 Bad cell version!
 Mismatched presence of cells.
 Misaligned cell storage offsets in PreBNC!
 Cell storage overflow in PreBNC!
 Found an extra preBNC cell in this row!
 Cell storage overflow in Pre BNC!
 Incorrect cell count! Expected:%tu Found:%tu.
 Incorrect PreBNC cell count! Expected:%tu Found:%tu.
<%@:%p tileRowIndex %lu cellCount %lu>
tileRowIndex
TI,N,V_tileRowIndex
TQ,R,N,V_cellCount
maxColumnIndex
bncStorageBufferExists
Fatal Assertion failure: %{public}s %{public}s:%d Never call me without a row
TSUColumnIndex _maxColumnIndex(TSTTableTileRowInfo *__unsafe_unretained)
Never call me without a row
void _invalidateMaxColumnIndex(TSTTableTileRowInfo *__unsafe_unretained)
Fatal Assertion failure: %{public}s %{public}s:%d Encountered a bad offset while widening!
void _convertBufferToWideIndexes(TSTTableTileRowBuffer *)
Encountered a bad offset while widening!
Fatal Assertion failure: %{public}s %{public}s:%d Too many columns for our row storage!
void _extendOffsetArrayForMaxIndex(TSTTableTileRowBuffer *, TSUColumnIndex)
Too many columns for our row storage!
void _shiftCellStorageInBuffer(TSTTableTileRowBuffer *, NSUInteger, NSInteger)
Row storage buffer overflow!
void _invalidateMaxColumnIndexForColumnIndex(TSTTableTileRowInfo *__unsafe_unretained, TSUColumnIndex)
NSRange _storageRangeForColumnsInBuffer(TSTTableTileRowBuffer *, TSUColumnIndex, TSUColumnRowCount)
Storage range is out of sync!
void _updateBufferSize(TSTTableTileRowBuffer *, NSUInteger)
buffer->_private.data
Row data buffer is too small!
NSUInteger _applyMovingCellBuffer(TSTTableTileRowBuffer *, TSTTableTileRowBuffer *, TSUColumnIndex, TSUColumnRowCount)
Overwriting a column in move!
NSUInteger _storageSizeInBuffer(TSTTableTileRowBuffer *, TSUColumnIndex, TSUColumnIndex)
Couldn't find next storage offset for non-last cell!
uidsCollapsed
T@"TSUUUIDSet",R,N,V_uidsCollapsed
uidsExpanded
T@"TSUUUIDSet",R,N,V_uidsExpanded
virtual TSCEASTElement *TSTCellSpecFormulaExtractor::functionNode(TSCEASTFunctionElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellFormulaSpec.mm
Need a locale to parse stock formulas.
-[TSTCellFormulaSpec initWithFormula:locale:]
TSTCellFormulaSpec requires a formula.
<%@: %p>: %@
null formula
formula
T^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}},R,N
formulaObject
T@"TSCEFormulaObject",R,N
T^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}},R,N,V_formula
categoryAggregateType
TC,R,N,V_categoryAggregateType
stockDetails
T@"TSTStockDetails",R,N,V_stockDetails
Fatal Assertion failure: %{public}s %{public}s:%d Corrupt cell memory. Crashing!
UInt16 TSTCellStorageSize(TSTCellStorage *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellStorage.mm
Corrupt cell memory. Crashing!
UInt16 TSTCellStorageSizeForHeaderFlags(TSTCellStorageFieldFlags)
Storage size should be four-byte-aligned!
BOOL TSTCellStorageVersionCheck(TSTCellStorage *)
Can't parse cell storage header version %d!
void TSTCellToCellStorage(TSTCell *__strong, TSTCellStorage *)
Cell claims to have a string, but has no key for it!
Cell claims to have rich text, but has no key for it!
Cell claims to have a cell style, but has no key for it!
Cell claims to have a text style, but has no key for it!
Cell claims to have conditional style, but has no key for it!
Cell claims to have a formula, but has no key for it!
Cell claims to have a control, but has no key for it!
Cell claims to have a formula syntax error, but has no key for it!
Can't archive a bad format kind!
Cell claims to have a number format, but has no key for it!
Cell claims to have a currency format, but has no key for it!
Cell claims to have a date format, but has no key for it!
Cell claims to have a duration format, but has no key for it!
Cell claims to have a text format, but has no key for it!
Cell claims to have a boolean format, but has no key for it!
Cell claims to have a comment storage, but has no key for it!
Cell claims to have an import warning set, but has no key for it!
Could not archive all computed storage elements!
Failed to process all storage elements in TSTCellToCellStorage! Starting flags:%u Final flags:%u
Size miscalculation!
void TSTCellStorageToCell(TSTCellStorage *, TSTCell *__strong)
Fatal Assertion failure: %{public}s %{public}s:%d Can't get offset for unknown element 0x%02x, offset:%hu!
UInt16 p_OffsetForElementInStorage(TSTCellStorage *, TSTCellStorageFieldFlags)
Can't get offset for unknown element 0x%02x, offset:%hu!
void p_SetKeyAtOffset(TSTCellStorage *, TSTTableDataListKey, UInt16)
Can't set an invalid datalist key!
-[TSTGroupingColumnList addRule:atGroupLevel:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTGroupingColumnList.mm
Can't call this on root level
-[TSTGroupingColumnList removeRuleAtGroupLevel:]
-[TSTGroupingColumnList moveRuleFromGroupLevel:toLevel:]
-[TSTGroupingColumnList changeGroupingTypeForGroupLevel:toType:]
-[TSTGroupingColumnList replaceRuleAtGroupLevel:withRule:]
groupingColumns
formatStringContainsOnlyDate
formatStringContainsAMPMSpecifier
TSTTableInfo
TSTTableModel
TSTTableStyle
TSTCellStyle
TSTConditionalStyleSet
TSTTableTile
TSTTableDataList
TSTTableDataListSegment
TSTTableHeaderStorageBucket
TSTWPTableInfo
TSTTableStrokePreset
TSTTableStylePreset
TSTArchivedCellSelection
TSTArchivedRdar39989167CellSelection
TSTArchivedStrokeSelection
TSTArchivedAutofillSelection
TSTCellMap
TSTConcurrentCellMap
TSTConcurrentCellList
TSTFormulaEqualsTokenAttachment
TSTWPTokenAttachment
TSTExpressionNode
TSTBooleanNode
TSTNumberNode
TSTStringNode
TSTArrayNode
TSTListNode
TSTLetNode
TSTVariableNode
TSTInNode
TSTOperatorNode
TSTPostfixOperatorNode
TSTPrefixOperatorNode
TSTFunctionNode
TSTFunctionEndNode
TSTDateNode
TSTReferenceNode
TSTDurationNode
TSTArgumentPlaceholderNode
TSTIdentifierNode
TSTMergeRegionMap
TSTEmptyExpressionNode
TSTArchivedLayoutHint
TSTCompletionToken
TSTHiddenStateFormulaOwner
TSTPopUpMenuModel
TSTRichTextPayload
TSTTableFilterSet
TSTTableStyleNetwork
TSTColumnRowUIDMap
TSTSummaryModel
TSTSummaryCellVendor
TSTCategoryOrder
TSTStrokeSidecar
TSTStrokeLayer
TSTPencilAnnotation
TSTHeaderNameMgrTile
TSTHeaderNameMgr
TSTCellDiffArray
TSTCellDiffArraySegment
propertyMapToSet
T@"TSSPropertyMap",&,N,V_propertyMapToSet
propertySetToSet
T@"TSSMutablePropertySet",&,N,V_propertySetToSet
propertyMapToReset
T@"TSSPropertyMap",&,N,V_propertyMapToReset
propertySetToReset
T@"TSSMutablePropertySet",&,N,V_propertySetToReset
hasCachedContainsCellStyleProperties
TB,N,V_hasCachedContainsCellStyleProperties
cachedContainsCellStyleProperties
TB,N,V_cachedContainsCellStyleProperties
hasCachedContainsTextStyleProperties
TB,N,V_hasCachedContainsTextStyleProperties
cachedContainsTextStyleProperties
TB,N,V_cachedContainsTextStyleProperties
hasCachedContainsStringProperties
TB,N,V_hasCachedContainsStringProperties
cachedContainsStringProperties
TB,N,V_cachedContainsStringProperties
empty
TB,R,N,GisEmpty
containsCellStyleProperties
containsTextStyleProperties
containsStringProperties
v16@?0Q8
-[TSTConcurrentCellMap viewCellRects]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTConcurrentCellMap.mm
can't use cellid interface with celluid map
-[TSTConcurrentCellMap cellUIDRanges]
can't use celluid interface with cellid map
-[TSTConcurrentCellMap p_cacheRowColumnUIDs]
-[TSTConcurrentCellMap appendCellList:]
cell list uid state doesn't match cell map
-[TSTConcurrentCellMap appendCellLists:]
-[TSTConcurrentCellMap enumerateSeriallyUsingBlock:]
need a celluid based map
check that willApplyToTable was called already
v40@?0r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8{TSUViewCellCoord={TSUCellCoord=ISBB}}16{TSUModelCellCoord={TSUCellCoord=ISBB}}24@"TSTCell"32
-[TSTConcurrentCellMap p_enumerateNewAndOldCellsSeriallyUsingBlock:]
-[TSTConcurrentCellMap p_enumerateNewAndOldCellsSeriallyUsingPreBNCBlock:]
-[TSTConcurrentCellMap enumerateRowsOfCellsConcurrentlyUsingBlock:]
willApplyToTable should be called first
-[TSTConcurrentCellMap updateDataListsConcurrentlyUsingCommentStorageBlock:conditionalStyleSetBlock:controlCellSpecBlock:formulaBlock:formulaErrorBlock:importWarningSetBlock:richTextBlock:stringBlock:styleBlock:customFormatBlock:formatBlock:preBNCBlock:]
-[TSTConcurrentCellMap updateDataListsConcurrentlyUsingCommentStorageBlock:conditionalStyleSetBlock:controlCellSpecBlock:formulaBlock:formulaErrorBlock:importWarningSetBlock:richTextBlock:stringBlock:styleBlock:customFormatBlock:formatBlock:preBNCBlock:]_block_invoke_2
should only be enumerating the cells of interest (stringValue)
-[TSTConcurrentCellMap updateDataListsConcurrentlyUsingCommentStorageBlock:conditionalStyleSetBlock:controlCellSpecBlock:formulaBlock:formulaErrorBlock:importWarningSetBlock:richTextBlock:stringBlock:styleBlock:customFormatBlock:formatBlock:preBNCBlock:]_block_invoke
should only be enumerating the cells of interest (hasFormula)
-[TSTConcurrentCellMap updateDataListsConcurrentlyUsingCommentStorageBlock:conditionalStyleSetBlock:controlCellSpecBlock:formulaBlock:formulaErrorBlock:importWarningSetBlock:richTextBlock:stringBlock:styleBlock:customFormatBlock:formatBlock:preBNCBlock:]_block_invoke_3
should only be enumerating the cells of interest (hasFormulaAnyError)
-[TSTConcurrentCellMap updateDataListsConcurrentlyUsingCommentStorageBlock:conditionalStyleSetBlock:controlCellSpecBlock:formulaBlock:formulaErrorBlock:importWarningSetBlock:richTextBlock:stringBlock:styleBlock:customFormatBlock:formatBlock:preBNCBlock:]_block_invoke_4
should only be enumerating the cells of interest (hasRichText)
-[TSTConcurrentCellMap updateDataListsConcurrentlyUsingCommentStorageBlock:conditionalStyleSetBlock:controlCellSpecBlock:formulaBlock:formulaErrorBlock:importWarningSetBlock:richTextBlock:stringBlock:styleBlock:customFormatBlock:formatBlock:preBNCBlock:]_block_invoke_5
should only be enumerating the cells of interest (hasConditionalStyle)
-[TSTConcurrentCellMap updateDataListsConcurrentlyUsingCommentStorageBlock:conditionalStyleSetBlock:controlCellSpecBlock:formulaBlock:formulaErrorBlock:importWarningSetBlock:richTextBlock:stringBlock:styleBlock:customFormatBlock:formatBlock:preBNCBlock:]_block_invoke_6
should only be enumerating the cells of interest (hasCommentStorage)
-[TSTConcurrentCellMap updateDataListsConcurrentlyUsingCommentStorageBlock:conditionalStyleSetBlock:controlCellSpecBlock:formulaBlock:formulaErrorBlock:importWarningSetBlock:richTextBlock:stringBlock:styleBlock:customFormatBlock:formatBlock:preBNCBlock:]_block_invoke_7
should only be enumerating the cells of interest (hasImportWarningSet)
-[TSTConcurrentCellMap updateDataListsConcurrentlyUsingCommentStorageBlock:conditionalStyleSetBlock:controlCellSpecBlock:formulaBlock:formulaErrorBlock:importWarningSetBlock:richTextBlock:stringBlock:styleBlock:customFormatBlock:formatBlock:preBNCBlock:]_block_invoke_8
should only be enumerating the cells of interest (hasControl)
{?=IIIIIIIIIS}34@?0@"TSTCell"8@"TSTCell"16@"TSTTableTileRowInfo"24{TSUModelColumnIndex=S}32
-[TSTConcurrentCellMap willApplyToTable:]
applyingToTable already called
need a uidBased cell map
-[TSTConcurrentCellMap convertToInverseCellMap]
willApplyToTable was not called or didApplyToTable called twice
-[TSTConcurrentCellMap pushInverseMergeAction:]
willApplyToTable should have been called
v16@?0@"NSMutableArray"8
uidBased
TB,N,GisUIDBased,V_uidBased
cellLists
T@"NSMutableArray",&,N,V_cellLists
mergeActions
T@"NSMutableArray",&,N,V_mergeActions
inverseMergeActions
T@"NSMutableArray",&,N,V_inverseMergeActions
cachedRowUIDs
T{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}},N,V_cachedRowUIDs
cachedColumnUIDs
T{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}},N,V_cachedColumnUIDs
applyingToTable
TB,N,V_applyingToTable
mayModifyFormulasInCells
TB,N,V_mayModifyFormulasInCells
mayModifyValuesReferencedByFormulas
TB,N,V_mayModifyValuesReferencedByFormulas
-[TSTConcurrentCellList addCell:atViewCellCoord:]
index should be somewhere in the in the cell list's area
-[TSTConcurrentCellList p_setObjectLocale:]
-[TSTConcurrentCellList p_setupInterestingCells:forAdding:]
cell lists size mismatch
-[TSTConcurrentCellList p_invokeBlock:]
base rows needs to match uids
base cols needs to match uids
cells size needs to match area range
only valid viewRowIndexes should remain
only valid baseRowIndexes should remain
-[TSTConcurrentCellList p_convertToInverseCellMap]
oldCells size mismatch in cellList
-[TSTConcurrentCellList p_gatherRowState:]
-[TSTConcurrentCellList p_accumulateCurrentCellsConcurrentlyUsingBlock:]
_tilesPerRow
_rowInfosPerRow
_tilesPerRow size mismatch in cellList
_rowInfosPerRow size mismatch in cellList
-[TSTConcurrentCellList p_enumerateRowsOfCellsConcurrentlyUsingBlock:]
_oldCells size mismatch in cellList
-[TSTConcurrentCellList p_enumerateNewAndOldCellsSeriallyUsingBlock:]
-[TSTConcurrentCellList p_enumerateNewAndOldCellsSeriallyUsingPreBNCBlock:]
-[TSTConcurrentCellList p_enumerateCellsAddedAndRemovedOfType:usingBlock:]
v32@?0@"TSKFormat"8@"NSMutableIndexSet"16^B24
v32@?0@"NSNumber"8@"NSMutableIndexSet"16^B24
-[TSTConcurrentCellList p_enumerateColumnCellCountDiffUsingBlock:]
_baseColumns and _cellCountDiffsPerColumn sizes should match
-[TSTConcurrentCellList p_enumerateRowCellCountDiffUsingBlock:]
_baseRows and _cellCountDiffsPerRow sizes should match
_baseRows and _tilesPerRow sizes should match
_baseRows and _rowInfosPerRow sizes should match
-[TSTConcurrentCellList p_enumerateCustomFormatsBeingAddedUsingReplacementBlock:]_block_invoke
Expected the custom format replacement to be of the same type as the original.
-[TSTConcurrentCellList p_enumerateCustomFormatsBeingAddedUsingReplacementBlock:]
customFormatToRemove can not be nil.
replacementCustomFormat can not be nil.
TB,R,N,GisUIDBased,V_uidBased
viewCellRect
T{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}},N,V_viewCellRect
cellUIDRange
T{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}},N,V_cellUIDRange
hasCells
containsCellBorderChanges
TB,R,N,V_containsCellBorderChanges
interestingCells
T@"NSArray",&,N,V_interestingCells
formatsAdded
T@"NSMutableDictionary",&,N,V_formatsAdded
formatsRemoved
T@"NSMutableDictionary",&,N,V_formatsRemoved
tilesPerRow
T@"NSMutableArray",&,N,V_tilesPerRow
rowInfosPerRow
T@"NSMutableArray",&,N,V_rowInfosPerRow
-[TSTConcurrentSparseCellList addCell:atViewCellCoord:]
-[TSTConcurrentSparseCellList p_invokeBlock:]
-[TSTConcurrentSparseCellList p_accumulateCurrentCellsConcurrentlyUsingBlock:]
-[TSTConcurrentSparseCellList p_enumerateRowsOfCellsConcurrentlyUsingBlock:]
validCells
T@"NSMutableIndexSet",&,N,V_validCells
v12@?0B8
importSettings
T@"TSKStructuredTextImportSettings",&,N,V_importSettings
importSource
T@"NSURL",&,N,V_importSource
importDate
T@"NSDate",&,N,V_importDate
sourceData
T@"NSData",C,N,V_sourceData
confidence
Td,N,V_confidence
importedRegion
T@"TSTCellRegion",&,N,V_importedRegion
sourceColumnCount
TQ,N,V_sourceColumnCount
sourceRowCount
TQ,N,V_sourceRowCount
pasteInverseCommands
T@"NSArray",&,N,V_pasteInverseCommands
pasteType
TQ,N,V_pasteType
pasteWasUpdate
TB,N,V_pasteWasUpdate
wholeTableImport
TB,R,N,GisWholeTableImport
-[TSTTableDataList setRichTextParentInfo:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableDataList.mm
The richTextParentInfo only applied to the Rich Text Payload datalist.
Tables/DataList
-[TSTTableDataList loadFromUnarchiver:]_block_invoke_2
Unarchived a corrupt custom format wrapper. Key %{public}@ is not in the document custom format list
v24@?0@"TSTTableDataObject"8^B16
-[TSTTableDataList p_nextAvailableKey]
-[TSTTableDataList wrappedObjectForPayload:]
Custom Format datalists are obsolete and should never be added to!
-[TSTTableDataList p_setPayload:atSuggestedKey:callWillModify:]
No object with key %u in %{public}@ datalist!
-[TSTTableDataList enumerateFormatsUsingBlock:]
Can't enumerate formats on a non-format list!
-[TSTTableDataList enumerateCustomFormatsUsingBlock:]
Can't enumerate custom formats on a non-custom format list!
-[TSTTableDataList repairStyleDatalistStylesheetIfNecessary]_block_invoke
Expected new style to be in the document stylesheet
-[TSTTableDataList takeReferences:forKey:callWillModify:]
Cannot add reference for custom format
-[TSTTableDataList dropReferences:forKey:callWillModify:]
custom format should not have more than one reference
Comment
Conditional Style
Custom Format
Format
Formula
ControlCellSpec
Formula Error
Import Warning
Multiple Choice List
Rich Text
String
Style
listType
Ti,N,V_listType
nextID
TI,N,V_nextID
useReverseMap
TB,R,N,V_useReverseMap
cachedSegment
T@"TSTTableDataListSegment",N,V_cachedSegment
isNewForBraveNewCell
TB,N,V_isNewForBraveNewCell
richTextParentInfo
T@"NSObject<TSDContainerInfo><TSWPStorageParent>",N,V_richTextParentInfo
-[TSTTableDataList(Type_Specific_API) allRichTextStorages]
API is intended for kTSTTableDataListTypeRichText lists
-[TSTTableDataList(Type_Specific_API) allRichTextStorages]_block_invoke
richTextObject
richTextObject.richTextStorage
-[TSTTableDataList(Type_Specific_API) containsControlCellSpecs]
API is intended for kTSTTableDataListTypeFormat lists
-[TSTTableDataList(Type_Specific_API) containsFormulas]
API is intended for kTSTTableDataListTypeCellSpec lists
-[TSTTableDataList(Type_Specific_API) cellFormatForKey:]
Can only store formats in this list!
-[TSTTableDataList(Type_Specific_API) commentStorageForKey:]
Can only store cell comment storage objects in this list!
-[TSTTableDataList(Type_Specific_API) conditionalStyleSetForKey:]
Can only store conditional styles in this list!
-[TSTTableDataList(Type_Specific_API) formulaForKey:]
Can only store formulas in this list!
-[TSTTableDataList(Type_Specific_API) controlCellSpecForKey:]
Can only store controls in this list!
-[TSTTableDataList(Type_Specific_API) formulaErrorForKey:]
Can only store formulaErrors in this list!
-[TSTTableDataList(Type_Specific_API) importWarningSetForKey:]
Can only store import warning set objects in this list!
-[TSTTableDataList(Type_Specific_API) multipleChoiceListFormatForKey:]
Can only store pop up menu model in this list!
-[TSTTableDataList(Type_Specific_API) richTextForKey:]
Can only store text storages in this list!
-[TSTTableDataList(Type_Specific_API) stringForKey:]
Can only store strings in this list!
-[TSTTableDataList(Type_Specific_API) stringForKey:shouldWrap:]
-[TSTTableDataList(Type_Specific_API) styleForKey:]
Can only store styles in this list!
-[TSTTableDataList(Upgrade) upgradeCellFormatsU2_0]
This upgrade code is only for the Format list.
-[TSTTableDataList(Upgrade) upgradeCellFormatsU2_0]_block_invoke
customFormatList
-[TSTTableDataList(Upgrade) upgradeConditionalStylesToLinkedRefWithTableUID:]
This upgrade is for conditional style only.
-[TSTTableDataList(Upgrade) reassignCustomFormatUIDForPaste:]
This reassign code is for the Format list only.
v24@?0I8I12^B16
table
+[TSTTableStyle propertiesAllowingNSNull]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableStyle.mm
+[TSTTableStyle nonEmphasisTableProperties]_block_invoke
-[TSTTableStyle validate]
orphaned table style %@
Table style not in its stylesheet
-[TSTArchivedCellSelection selection]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTArchivedCellSelection.mm
Call selectionWithParent:
-[TSTArchivedCellSelection selectionWithParent:]
-[TSTArchivedCellSelection setSelection:]
Wrong type of class %@ (expected TSTCellSelection)
<%@: %p> %@
selection
T@"TSKSelection",&,N
%@ for column %@ at level %lu
columnUid
Tr^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},R,N,V_columnUid
level
Ti,R,N,V_level
aggregateType
TC,N,V_aggregateType
v16@?0@"TSPLazyReference"8
B24@?0r^{pair<unsigned int, unsigned long>=IQ}8r^{pair<unsigned int, unsigned long>=IQ}16
-[TSTTableTileStorage _upgradeFromTileIDMap:referenceMap:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableTileStorage.mm
Tile upgrade can't find tile for ID %tu!
error
Fatal Assertion failure: %{public}s %{public}s:%d Failed to load a table tile during upgrade: errorClass=%{public}@, domain=%{public}@, code=%zd, %{public}@hints=%{public}@ (%@) 
recoverable=YES, 
Failed to load a table tile during upgrade: errorClass=%{public}@, domain=%{public}@, code=%zd, %{public}@hints=%{public}@ (%@) 
v32@?0@"TSPLazyReference"8Q16^B24
v28@?0@"TSTTableTile"8I16^B20
-[TSTTableTileStorage setShouldUseWideRows:]
Fatal Assertion failure: %{public}s %{public}s:%d Bad tile group index!
-[TSTTableTileStorage _groupForTileID:]
Bad tile group index!
-[TSTTableTileStorage _tileForID:createIfMissing:]
tile
v32@?0@"TSTTableTile"8Q16^B24
v24@?0@"TSTTableTileGroup"8^B16
-[TSTTableTileStorage _clearContentAtIndex:count:]
Corrupt tile map during clear!
-[TSTTableTileStorage _shiftRowsDownAtIndex:count:]
Tile insertion got confused!
-[TSTTableTileStorage _insertRowsAtIndex:count:]
Should only have whole-tile moves left in insert!
Corrupt tile map during insert!
Fatal Assertion failure: %{public}s %{public}s:%d Lost track of deletion start point!
-[TSTTableTileStorage _removeRowsAtIndex:count:]
Lost track of deletion start point!
Fatal Assertion failure: %{public}s %{public}s:%d Lost track of tiles during delete!
Lost track of tiles during delete!
Corrupt tile map during delete!
Fatal Assertion failure: %{public}s %{public}s:%d Tile should be empty during delete!
Tile should be empty during delete!
Fatal Assertion failure: %{public}s %{public}s:%d Shifting tiles too far during delete!
Shifting tiles too far during delete!
Fatal Assertion failure: %{public}s %{public}s:%d We removed too many rows during delete!
We removed too many rows during delete!
Shift too big during delete!
v32@?0^v8Q16^B24
TSTTilesCat
-[TSTTableTileStorage moveRowIndexRange:toIndex:]
Move row ranges cannot overlap!
v20@?0@"TSTTableTile"8I16
-[TSTTableTileStorage populatedRows]_block_invoke
Fatal Assertion failure: %{public}s %{public}s:%d Corrupt tile ID set!
-[TSTTableTileStorage lastPopulatedRowIndex]_block_invoke
Corrupt tile ID set!
RowInfo Cell Count Audit
Tile ID %lu, firstRow:%d
Tile Overlap Audit
-[TSTTableTileStorage auditTilesForRowOverlapAndExtensionPastTableBounds:withDataStore:result:]_block_invoke
Expected non-empty tile.
Tile with rows %d-%d overlaps with previous tiles in the table.
TileLastRow:%d tileMaxColumn:%d extends beyond tableModelLastRow:%d lastColumn:%d
v28@?0^{TSTCellStorage=}8S16^B20
-[TSTTableTileStorage prepareToApplyConcurrentCellMap:]_block_invoke
@"TSUPair"12@?0I8
tileSize
nextTileID
lastPopulatedRowIndex
populatedTiles
needToUpgradeCellStorage
upgradeRepairedTiles
TB,R,N,V_upgradeRepairedTiles
TB,N,V_shouldUseWideRows
-[TSTTableHeaderStorage initFromArchive:unarchiver:owner:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableHeaderStorage.mm
Don't know how to handle this bucket hash function!
-[TSTTableHeaderStorage initFromArchive:unarchiver:owner:]_block_invoke
Bad header bucket count!
Fatal Assertion failure: %{public}s %{public}s:%d Bad bucket count during archiving!
-[TSTTableHeaderStorage encodeToArchive:archiver:]
Bad bucket count during archiving!
Fatal Assertion failure: %{public}s %{public}s:%d Asked to create buckets when we've already done so!
-[TSTTableHeaderStorage p_allocateBuckets]
Asked to create buckets when we've already done so!
-[TSTTableHeaderStorage shiftIndexesForwardAtIndex:count:]
Headers spilled out of our last bucket during shift!
-[TSTTableHeaderStorage shiftIndexesBackAtIndex:count:]
Headers spilled below zero!
Fatal Assertion failure: %{public}s %{public}s:%d Move ranges cannot overlap!
-[TSTTableHeaderStorage moveIndexRange:toIndex:]
Move ranges cannot overlap!
v28@?0@"TSTTableHeaderInfo"8I16^B20
Fatal Assertion failure: %{public}s %{public}s:%d Can't drive cell count below zero!
-[TSTTableHeaderStorage decrementCellCountAtIndex:byAmount:]
Can't drive cell count below zero!
Fatal Assertion failure: %{public}s %{public}s:%d Can't decrement cell count on a nil header!
Can't decrement cell count on a nil header!
minIndex
maxIndex
populatedIndexes
firstBucketForArchiving
T@"TSPObject",R,N
TSTTableHeaderStorageBucket *p_mapAtIndex(TSTTableHeaderStorage *__strong, TSUColumnOrRowIndex, BOOL)
Unexpected header bucket index!
Fatal Assertion failure: %{public}s %{public}s:%d Bad header bucket index: %u
Bad header bucket index: %u
Fatal Assertion failure: %{public}s %{public}s:%d Bad header bucket index for creation: %u
Bad header bucket index for creation: %u
Fatal Assertion failure: %{public}s %{public}s:%d Can't be missing the first bucket!
Can't be missing the first bucket!
virtual TSCEASTElement *TSTInsertNewRowsAsChromeRewriter::colonTractNode(TSCEASTColonTractElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTInsertNewRowsAsChromeRewriter.mm
Invalid spanning settings in InsertNewRowsAsChromeRewriter
TSURowIndex TSCEMakeAbsoluteRowFromRelativeRow(TSUCellCoord, TSURelativeRowIndex, BOOL)
/Library/Caches/com.apple.xbs/Binaries/iWorkImport_Sim/install/Symbols/BuiltProducts/TSCalculationEngine.framework/Headers/TSCETypes.h
overflow in row
TSUColumnIndex TSCEMakeAbsoluteColumnFromRelativeColumn(TSUCellCoord, TSURelativeColumnIndex, BOOL)
overflow in column
<%@:%p index %lu baseCol %u rules %@
filterIndex
TQ,R,N,V_filterIndex
baseColumnIndex
T{TSUModelColumnIndex=S},R,N,V_baseColumnIndex
ruleCount
-[TSTTableHeaderStorageBucket initWithContext:bounds:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableHeaderStorageBucket.mm
Can't initialize a bucket with a bad range!
Fatal Assertion failure: %{public}s %{public}s:%d Index out of range for bucket!
-[TSTTableHeaderStorageBucket headerAtIndex:]
Index out of range for bucket!
-[TSTTableHeaderStorageBucket mutableHeaderAtIndex:allowCreation:]
-[TSTTableHeaderStorageBucket setHeader:atIndex:]
v32@?0@"TSTTableHeaderInfo"8Q16^B24
-[TSTTableHeaderStorageBucket shiftIndexesBackAtIndex:count:]
Can't shift indexes below zero!
Tables/HeaderStorageBucket
-[TSTTableHeaderStorageBucket loadFromUnarchiver:]
data
T@"TSUSparseArray",&,N,V_data
bounds
T{_NSRange=QQ},N,V_bounds
<%@: %p>
[%lu]: %@
TSTCategorizedTables
formulaOwnerUID
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_formulaOwnerUID
layoutInvalidate
TB,N,VmLayoutInvalidate
layoutInvalidateProvider
TB,N,VmLayoutInvalidateProvider
layoutInvalidateSize
TB,N,VmLayoutInvalidateSize
layoutInvalidateTableNameVisibility
TB,N,VmLayoutInvalidateTableNameVisibility
layoutSpacesInvalidateCoordinates
TB,N,VmLayoutSpacesInvalidateCoordinates
layoutSpacesInvalidateCoordinatesAfterRow
TI,N,V_layoutSpacesInvalidateCoordinatesAfterRow
layoutSpacesInvalidateTableOffsets
TB,N,VmLayoutSpacesInvalidateTableOffsets
layoutInvalidateChildren
TB,N,VmLayoutInvalidateChildren
layoutUpdateChildren
TB,N,VmLayoutUpdateChildren
editingCellIDForInvalidation
T{TSUCellCoord=ISBB},N,V_editingCellIDForInvalidation
v32@?0@"TSTWPLayout"8Q16^B24
v24@?0@"TSTLayoutSpace"8^B16
TSURowIndex TSTLayoutGetPartitionTopRow(TSTLayout *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTLayout.mm
row should be less than kTSURowIndexMax
TSUColumnIndex TSTLayoutGetPartitionLowestColumnIndex(TSTLayout *)
column should be less than kTSUColumnIndexMax
CGRect TSTLayoutGetCanvasFrame(TSTLayout *)
Passing in a nil layout to TSTLayoutGetCanvasFrame.
{CGRect={CGPoint=dd}{CGSize=dd}}32@?0@"TSTLayoutSpace"8{?={?=II}{?=II}}16
v24@?0{?={?=II}{?=II}}8
@"TSUBezierPath"16@?0@"NSArray"8
v40@?0Q8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16^B32
-[TSTLayout p_spillRangeForMaskingRichTextLayout:]
alignment should have already been resolved
v24@?0@"NSNumber"8^B16
v32@?0@8@16^B24
-[TSTLayout positionForColumnIndex:bodyWidth:target:outWidth:outGap:]
created an undersized column
-[TSTLayout naturalAlignmentForCellID:]
Contained text editing layout but invalid editing cell ID?
-[TSTLayout p_cellIDForWPLayout:]
TSTLayout should only parent layouts for editing text or cells with inline attachments!
-[TSTLayout maxAutoGrowLineWidthForTextLayout:]
should only be asking max width for unwrapped rich layouts
-[TSTLayout p_computeSpillingTextFrameForEditingLayout:textSize:editingSpillRange:]
B24@?0@"TSTLayout"8^B16
layoutMargins
T@"TSWPPadding",R,N
columnCount
alwaysStartsNewTarget
shrinkTextToFit
columnsAreLeftToRight
textScaleFactor
Td,R,N
T@"TSTMasterLayout",&,N,VmMasterLayout
layoutHint
T@"TSTLayoutHint",&,N,VmLayoutHint
spaceBundle
T@"TSTLayoutSpaceBundle",&,N,VmSpaceBundle
processChangesFiltering
TB,N,VmProcessChangesFiltering
newCanvasRevealedHorizontally
TB,N,VmNewCanvasRevealedHorizontally
newCanvasRevealedVertically
TB,N,VmNewCanvasRevealedVertically
layoutDirectionIsLeftToRight
TB,R,N,VmLayoutDirectionIsLeftToRight
scaleToFit
T{CGSize=dd},N
containedTextEditingLayout
T@"TSWPLayout",&,N,VmContainedTextEditingLayout
paddingForEditingCell
T{UIEdgeInsets=dddd},R,N,VmCachedPaddingForEditingCell
computedEditingCellContentFrame
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N
editingSpillingTextRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},R,N,VmEditingSpillingTextRange
prevEditingSpillingTextRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,VmPrevEditingSpillingTextRange
containedTextEditorSpills
TB,R,N,VmContainedTextEditorSpills
pageNumber
pageCount
AVERAGE
-[TSTAccumulator valueForType:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTAccumulator.mm
%@ does not handle TSCEAggType_GroupValue/_BodyRows/_Indirect request - a higher level should have handled that
boolCount
TI,R,N,V_boolCount
boolTrueCount
TI,R,N,V_boolTrueCount
numberCount
TI,R,N,V_numberCount
dateCount
TI,R,N,V_dateCount
durationCount
TI,R,N,V_durationCount
stringCount
TI,R,N,V_stringCount
errorCount
TI,R,N,V_errorCount
totalValue
T{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i},R,N
countValue
avgValue
minValue
maxValue
T@"TSULocale",&,N,V_locale
isCircularReference
TB,N,V_isCircularReference
asArray
baseTractRef
T@"TSCECellTractRef",&,N,V_baseTractRef
chromeTractRef
T@"TSCECellTractRef",&,N,V_chromeTractRef
T{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}},R,N
baseRangeRef
T{RefTypeHolder<TSCERangeRef, 0>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}},R,N
%@::
Body
 (%@)
whitespaceAndNewlineCharSet
T@"NSCharacterSet",&,N,V_whitespaceAndNewlineCharSet
nonWhitespaceAndNewlineCharSet
T@"NSCharacterSet",&,N,V_nonWhitespaceAndNewlineCharSet
-[TSTStrokeSidecar initForUpgradeWithTableModel:]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTStrokeSidecar.mm
Expected cellStyle's base style to be in the document stylesheet or the deprecated theme stylesheet. Using default cell style for table area.
Expected default cell style to be in the document stylesheet or the deprecated theme stylesheet. Trying to find a comparable in the correct stylesheet.
No usable root style in the document stylesheet or the deprecated theme stylesheet. Dropping the cell style on the floor.
v16@?0{TSUModelCellCoord={TSUCellCoord=ISBB}}8
v56@?0{TSTSimpleRange=qQ}8@"TSDStroke"24i32@"TSDStroke"36i44^B48
-[TSTStrokeSidecar flattenStrokeOrder]
left and right column stroke count should be identical
top and bottom row stroke count should be identical
v44@?0@"TSDStroke"8{TSTSimpleRange=qQ}16i32^B36
v24@?0@"NSArray"8@"NSPointerArray"16
-[TSTStrokeSidecar saveToArchiver:]
top and bottom stroke run arrays have different counts
left and right stroke run arrays have different counts
leftColumnStrokes
T@"NSPointerArray",R,N,V_leftColumnStrokes
rightColumnStrokes
T@"NSPointerArray",R,N,V_rightColumnStrokes
topRowStrokes
T@"NSPointerArray",R,N,V_topRowStrokes
bottomRowStrokes
T@"NSPointerArray",R,N,V_bottomRowStrokes
maxOrder
Ti,N,V_maxOrder
T@"TSTStrokeSidecar",&,N,V_strokeSidecar
T@"TSTCellRegion",&,N,V_region
columnIndexesInRow
T@"NSIndexSet",&,N,V_columnIndexesInRow
topStrokeLayer
T@"TSTStrokeLayer",&,N,V_topStrokeLayer
bottomStrokeLayer
T@"TSTStrokeLayer",&,N,V_bottomStrokeLayer
-[TSTMergeRangeCache clear]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTMergeRangeCache.mm
Clear with a BitGridTransaction open
TSTMergeRangeCache:
v40@?0Q8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16^B32
mergeIndexes
T@"NSMutableIndexSet",&,N,V_mergeIndexes
T@"TSTMergeOwner",W,N,V_mergeOwner
TQ,N,V_count
tableStyleSet
T@"NSMutableSet",R,N,V_tableStyleSet
cellFillList
T@"TSTCellUIDList",R,N,V_cellFillList
isTopmostContainerInfo
-[TSTTableInfo(TSDReplaceableMediaContainer) p_propertyMapForReplacingImageFill:atCellID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableInfo+TSDReplaceableMediaContainerAdditions.mm
An invalid cell ID was passed in!
oldImageFill
-[TSTLayoutSpace invalidateCoordinatesForEditingCellID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTLayoutSpace.mm
Invalidating for an editing cell range that is not a single logical cell.
-[TSTLayoutSpace nearestRangeForLayoutRect:]
Failed to get nearest cell range from space %@ for layout rect %{public}@
-[TSTLayoutSpace frameForTableNameBorder]
this API is intended to run on the main space
-[TSTLayoutSpace strokeFrameForTableNameBorder]
-[TSTLayoutSpace alignedStrokeFrameForTableNameBorder]
WARNING: stroke width %f < 0.0
WARNING: vertical stroke ( %f %@ => %@ ) length <= 0.0
WARNING: horizontal stroke ( %f %@ => %@ ) length <= 0.0
v48@?0@"TSDStroke"8{TSTSimpleRange=qQ}16i32i36^B40
-[TSTLayoutSpace validateCoordinateCache:]
There are no column coordinates
-[TSTLayoutSpace p_tableCoordinateForGridColumn:]
column %u not in gridRange %@
Body column coordinates and header row column coordinates have not been filled.
-[TSTLayoutSpace p_rawTableCoordinateForGridColumn:]
-[TSTLayoutSpace p_tableCoordinateForGridRow:]
row %u not in gridRange %@
Body row coordinates and header column row coordinates have not been filled.
-[TSTLayoutSpace p_gridColumnForTableCoordinate:]
-[TSTLayoutSpace p_gridRowForTableCoordinate:]
gridRange
T{?={?=II}{?=II}},N,V_gridRange
headerRowColumnCoordinates
T@"TSTCoordinateArray",&,N,V_headerRowColumnCoordinates
bodyColumnCoordinates
T@"TSTCoordinateArray",&,N,V_bodyColumnCoordinates
headerColumnRowCoordinates
T@"TSTCoordinateArray",&,N,V_headerColumnRowCoordinates
bodyRowCoordinates
T@"TSTCoordinateArray",&,N,V_bodyRowCoordinates
bezierPathCache
T@"TSTLayoutSpaceBezierPathCache",&,N,V_bezierPathCache
invalidatedForEditingCell
TB,N,V_invalidatedForEditingCell
invalidTableOffset
TB,N,V_invalidTableOffset
invalidColumnIndex
TS,N,V_invalidColumnIndex
invalidRowIndex
TI,N,V_invalidRowIndex
TB,N,V_layoutDirectionIsLeftToRight
cachedFrame
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_cachedFrame
cachedAlignedFrame
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_cachedAlignedFrame
cachedStrokeFrame
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_cachedStrokeFrame
cachedAlignedStrokeFrame
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_cachedAlignedStrokeFrame
bundle
T@"TSTLayoutSpaceBundle",R,W,N,V_bundle
layoutSpaceType
Ti,R,N,V_layoutSpaceType
layout
T@"TSTLayout",R,W,N
T@"TSTMasterLayout",R,W,N
isMain
isFrozen
isRepeat
isColumns
isRows
isCorner
headerColumnsRepeat
TB,N,V_headerColumnsRepeat
headerRowsRepeat
TB,N,V_headerRowsRepeat
viewScale
Td,N,V_viewScale
transformToCanvas
T{CGAffineTransform=dddddd},N,V_transformToCanvas
transformFromCanvas
T{CGAffineTransform=dddddd},N,V_transformFromCanvas
transformToDevice
T{CGAffineTransform=dddddd},N,V_transformToDevice
transformFromDevice
T{CGAffineTransform=dddddd},N,V_transformFromDevice
drawBlackAndWhite
TB,N,V_drawBlackAndWhite
drawPreventAntialias
TB,N,V_drawPreventAntialias
tableOffset
T{CGPoint=dd},N,V_tableOffset
cellRange
headerColumnsWidth
headerRowsHeight
frame
strokeFrame
frameForTableNameBorder
strokeFrameForTableNameBorder
alignedStrokeFrameForTableNameBorder
frameHasWidthAndHeight
canvasFrame
{%@->%@}
{invalid, invalid}
{invalid, %u}
{%u, invalid}
{%u, %u}
-[TSTCoordinateArray setTableWidthForRightToLeft:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCoordinateArray.mm
Setting a table width on a LTR coordinate array has no effect.
CGFloat TSTCoordinateArrayGetCoordinate(TSTCoordinateArray *, TSTGridIndex)
coordinateArray
CGFloat TSTCoordinateArrayGetRawCoordinate(TSTCoordinateArray *, TSTGridIndex)
<%@ %p offset=%u average=%f
 coordinates={empty}>
 coordinates={
  { offset=%u -> coordinate=%f }
<%@ %p>: expressionNode:%@, parenNestingLevel:%lu argumentIndex:%lu
expressionNode
T@"TSTExpressionNode",R,N,VmExpressionNode
parenNestingLevel
TQ,R,N,VmParenNestingLevel
argumentIndex
TQ,R,N,VmArgumentIndex
invalid symbol
-[TSTVariableNode initAsCopyOf:intoContext:children:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTVariableNode.mm
Unexpected object in initAsCopyOf:... expected TSTVariableNode, got %@
invalid symbol in copy
invalid symbol in setter
-[TSTVariableNode buildASTNodeArray:hostCell:symbolTable:]
VariableNode shouldn't have any children
identifier
T@"NSString",&,N,V_identifier
TI,N,V_symbol
activeTokenCharIndex
TQ,N,VmActiveTokenCharIndex
void TSTCellRegionGathererMap::joinAndAddRange(TSTCellRange, NSUInteger)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellRegionGatherer.mm
_cellRanges does not match encodedCoordToCandidateIndexMap
v24@?0{TSTCellRegionGathererKey=QI}8
mightOverlap
TB,N,V_mightOverlap
debugCellRangeMerges
TQ,N,V_debugCellRangeMerges
TSUCellRect TSUMakeCellRectFromNSRanges(NSRange, NSRange)
Invalid column range
Invalid row range
%@ group-by: %@ for column: %@
T@"TSTGroupBy",R,W,N,V_groupBy
-[TSTTableStylePreset setStyleNetwork:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableStylePreset.mm
styleNetwork
-[TSTTableStylePreset presetID]
No valid preset ID
-[TSTTableStylePreset initWithStyleNetwork:]
-[TSTTableStylePreset initWithContext:]
Should always be intialized with a network and an ID
-[TSTTableStylePreset drawSwatchInRect:inContext:]
_styleNetwork
-[TSTTableStylePreset loadFromUnarchiver:]_block_invoke
_tempUpgradePresetID
_styleNetwork.presetID
-[TSTTableStylePreset saveToArchive:archiver:]
presetKind
T@"NSString",R,N
tempUpgradePresetID
TQ,N,V_tempUpgradePresetID
presetID
T@"TSTTableStyleNetwork",C,N
tableHasStrongOwnership
TB,N,V_tableHasStrongOwnership
visibleIndexSet
T@"NSMutableIndexSet",&,N,V_visibleIndexSet
TSTCellFormatKind TSTCellFormatKindForFormatType(TSUFormatType)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellFormatKind.mm
No appropriate contained format type for format type:%@
TSTCellFormatKindNumber
TSTCellFormatKindCurrency
TSTCellFormatKindDateTime
TSTCellFormatKindDuration
TSTCellFormatKindText
TSTCellFormatKindBoolean
TSTCellFormatKindNotSet
textStyle
shapeStyle
+[TSTTableStyleNetwork createStylesInStylesheet:presetID:colors:alternate:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableStyleNetwork.mm
Style network is missing styles. %{public}@
+[TSTTableStyleNetwork networkFromStylesheet:presetID:]
no default table style in stylesheet %p
nameStyle
+[TSTTableStyleNetwork networkFromTheme:presetID:]
theme
+[TSTTableStyleNetwork networkFromTheme:presetIndex:]
v24@?0Q8Q16
-[TSTTableStyleNetwork initWithContext:styleProvider:presetID:]
Cannot set styles from a different context
-[TSTTableStyleNetwork cellStyleForTableStyleArea:]
illegal table region in style bootstrapping
-[TSTTableStyleNetwork textStyleForTableStyleArea:]
-[TSTTableStyleNetwork setCellStyle:forTableStyleArea:]
-[TSTTableStyleNetwork setTextStyle:forTableStyleArea:]
v24@?0@"TSTCellStyle"8Q16
v24@?0@"TSWPParagraphStyle"8Q16
-[TSTTableStyleNetwork loadFromArchive:unarchiver:]_block_invoke
_tableStyle must be nil when loading from an archive
_bodyCellStyle must be nil when loading from an archive
-[TSTTableStyleNetwork loadFromArchive:unarchiver:]_block_invoke_2
_headerRowCellStyle must be nil when loading from an archive
-[TSTTableStyleNetwork loadFromArchive:unarchiver:]_block_invoke_3
_headerColumnCellStyle must be nil when loading from an archive
-[TSTTableStyleNetwork loadFromArchive:unarchiver:]_block_invoke_4
_footerRowCellStyle must be nil when loading from an archive
-[TSTTableStyleNetwork loadFromArchive:unarchiver:]_block_invoke_15
_bodyTextStyle must be nil when loading from an archive
-[TSTTableStyleNetwork loadFromArchive:unarchiver:]_block_invoke_16
_headerRowTextStyle must be nil when loading from an archive
-[TSTTableStyleNetwork loadFromArchive:unarchiver:]_block_invoke_17
_headerColumnTextStyle must be nil when loading from an archive
-[TSTTableStyleNetwork loadFromArchive:unarchiver:]_block_invoke_18
_footerRowTextStyle must be nil when loading from an archive
-[TSTTableStyleNetwork loadFromArchive:unarchiver:]_block_invoke_29
_tableNameStyle must be nil when loading from an archive
-[TSTTableStyleNetwork loadFromArchive:unarchiver:]_block_invoke_30
_tableNameShapeStyle must be nil when loading from an archive
TQ,N
%@, %@
cellStyle
T@"TSTCellStyle",&,N,V_cellStyle
T@"TSWPParagraphStyle",&,N,V_textStyle
cellID:%u, %u, count:%lu
idOfFirstOccurence
T{TSUCellCoord=ISBB},N,V_idOfFirstOccurence
-[TSTTableArchivedControlCellSelection setSelection:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableArchivedControlCellSelection.mm
Wrong type of class %@ (expected TSTTableControlCellSelection)
T@"TSKSelection",&,N,VmControlCellSelection
-[TSTTableStrokePresetList setStrokePreset:atIndex:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableStrokePresetList.mm
preset index higher than count
-[TSTTableStrokePresetList horizontalStrokeForStrokePreset:]
illegal preset index
-[TSTTableStrokePresetList verticalStrokeForStrokePreset:]
-[TSTTableStrokePresetList exteriorStrokeForStrokePreset:]
-[TSTTableStrokePresetList maskForStrokePreset:]
horizontalStroke
T@"TSDStroke",&,N,VmHorizontalStroke
verticalStroke
T@"TSDStroke",&,N,VmVerticalStroke
exteriorStroke
T@"TSDStroke",&,N,VmExteriorStroke
mask
TI,N,VmVisibleMask
v16@?0@"TSSStylesheet"8
-[TSSTheme(TSTArchiving) tstLoadFromArchive:unarchiver:]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSSTheme_TSTArchiving.mm
Preset style network is missing styles when unarchiving. %{public}@
layoutRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},R,N,V_layoutRange
layoutCellID
T{TSUCellCoord=ISBB},R,N,V_layoutCellID
layoutCell
T@"TSTCell",R,N,V_layoutCell
modelIteratorData
T@"<TSTCellIteratorData>",N,V_modelIteratorData
queriedModel
TB,N,V_queriedModel
modelIteratorHasCell
TB,N,V_modelIteratorHasCell
numberOfLayoutColumns
TI,N,V_numberOfLayoutColumns
TI,N,V_numberOfColumns
TI,N,V_numberOfRows
layoutCellData
T@"TSTMutableCellIteratorData",&,N,V_layoutCellData
T@"TSTMasterLayout",R,&,N,V_masterLayout
-[TSTExpressionNode exportString]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTExpressionNode.mm
Children of TSTExpressionNode that is tokenized should implement exportString().
v32@?0@"TSTExpressionNode"8Q16^B24
-[TSTExpressionNode recordHashesForSubexpressions:]
subclasses must override recordHashesForSubexpressions so CSE works properly
<%@ %p>: '%@'
tokenType
string
argumentSpec
T^{TSCEFunctionArgSpec=iiCi{unordered_set<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={__hash_table<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCEArgumentType, void *> > >={__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSCEArgumentType> >=Q}{__compressed_pair<float, std::__1::equal_to<TSCEArgumentType> >=f}}}{vector<TSCEValue, std::__1::allocator<TSCEValue> >=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::__1::allocator<TSCEValue> >=^{TSCEValue}}}s@ddsBBBBBBB},R,N
children
T@"NSArray",&,N
T^{TSCEFunctionArgSpec=iiCi{unordered_set<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={__hash_table<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCEArgumentType, void *> > >={__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSCEArgumentType> >=Q}{__compressed_pair<float, std::__1::equal_to<TSCEArgumentType> >=f}}}{vector<TSCEValue, std::__1::allocator<TSCEValue> >=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::__1::allocator<TSCEValue> >=^{TSCEValue}}}s@ddsBBBBBBB},N
isOptional
tokenAttachment
T@"TSTWPTokenAttachment",N,V_tokenAttachment
firstIndex
TQ,N,V_firstIndex
lastIndex
TQ,N,V_lastIndex
whitespaceBefore
T@"NSString",&,N,V_whitespaceBefore
whitespaceAfter
T@"NSString",&,N,V_whitespaceAfter
popover
T@"UIViewController",R,&,N
Ti,R,D,N
T@"NSString",R,D,N
-[TSTFormula reparseWithStorage:adjustExpressionTree:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTFormula.mm
Formula storage exceeds maximum length.
'%C%C
'%C%C%C%C
%C%C%C%C%C%C%C%C%C%C%C
+[TSTFormula formulaQuoteContextAtCharIndex:inStorage:]
charIndex %lu not within storage range %@
+-*/^&=><:
%C%C%C%C%C%C%C%C
%C%C%C%C%C%C%C%C%C%C
%C%C%C%C%C
-[TSTFormula p_fixFormula:]
expected a function node with a function start token
unexpected quote context value %ld
expected non-empty storage
expected a function node on the stack
v24@?0@"TSTExpressionNode"8^B16
calculationEngine
T@"TSCECalculationEngine",W,N,V_calculationEngine
syntaxError
TB,N,GisSyntaxError,V_syntaxError
initialWhitespace
T@"NSString",C,N,V_initialWhitespace
T{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}},R,N
geometricFormula
fixupFormulas
TB,N,V_fixupFormulas
formulaWasFixable
TB,R,N,V_formulaWasFixable
formulaFixupsShouldStick
TB,R,N,V_formulaFixupsShouldStick
expressionTree
T@"TSTExpressionNode",&,N,V_expressionTree
TB,N,GisEmpty,V_empty
+[TSTCellChooserControlSpec cellSpecFromTSKFormat:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellChooserControlSpec.mm
mcFormat
-[TSTCellChooserControlSpec initWithArchive:unarchiver:]
Wrong interaction type for a popup.
popupModel
T@"TSTPopUpMenuModel",&,N,V_popupModel
displayChoicesForInspector
startWithFirstItem
TB,R,N,V_startWithFirstItem
ownerUID
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_ownerUID
needsToUpdateFilterSetForImport
TB,N,V_needsToUpdateFilterSetForImport
thresholdCellValues
T@"NSArray",&,N,V_thresholdCellValues
-[TSTOperatorNode initWithContext:operatorChar:children:firstIndex:lastIndex:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTOperatorNode.mm
Operators should only have 2 children.  There are %lu arguments to operator '%hu'
-[TSTOperatorNode initAsCopyOf:intoContext:children:]
Unexpected object in initAsCopyOf:... expected TSTOperatorNode, got %@
-[TSTOperatorNode buildASTNodeArray:hostCell:symbolTable:]
Operator node doesn't have two arguments
Undefined operator node
operatorChar
TS,N,V_operatorChar
TI,R,N,V_mask
v28@?0I8@"TSUCustomFormat"12^B20
keyboardShown
TB,R,N,GisKeyboardShown,V_keyboardShown
-[TSTNumberNode initWithContext:string:locale:firstIndex:lastIndex:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTNumberNode.mm
numberString
-[TSTNumberNode initAsCopyOf:intoContext:children:]
Unexpected object in initAsCopyOf:... expected TSTNumberNode, got %@
-[TSTNumberNode buildASTNodeArray:hostCell:symbolTable:]
NumberNode shouldn't have any children
number
T{TSUDecimal={?=[2Q]}},R,V_number
NSString *TSTStringForDouble(double, TSULocale *__strong)
A locale is required here
Warning: Creating brave new cell with value type %@ but mismatched format type %@, repairing
-[TSTCell_PreBNC upgradedBraveNewCell]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCell_PreBNC.mm
-[TSTCell_PreBNC initWithLocale:]
The formula should not begin with an equals sign.
The formula contains a syntax error.
-[TSTCell_PreBNC stringForEditing]
durationFormat
-[TSTCell_PreBNC setCellStyle:clearingID:]
expected cell style got %{public}@
-[TSTCell_PreBNC setTextStyle:clearingID:]
-[TSTCell_PreBNC setConditionalStyle:clearingID:]
expected conditional style got %{public}@
B20@?0@"TSKFormat"8S16
-[TSTCell_PreBNC copyAllFormatsToCell:]
dest
<%@:%p: value type %@ value %@>
No content
Number
Currency
DEPRECATED
Date
Bool
Duration
FormulaError
RichText
Cell Spec: 
Value: 
<empty>
<number: %f>
<rich text: '%@'>
<string: '%@'>
<date: '%@'>
<bool: '%@'>
FALSE
TRUE
<duration: %f>
<error>
<unknown cell type>
stringID
formulaSyntaxErrorID
richTextID
cellStyleID
TI,N,V_cellStyleID
textStyleID
TI,N,V_textStyleID
conditionalStyleID
TI,N,V_conditionalStyleID
formulaID
TI,N,V_formulaID
currentFormatID
TI,N,V_currentFormatID
numberFormatID
TI,N,V_numberFormatID
currencyFormatID
TI,N,V_currencyFormatID
dateFormatID
TI,N,V_dateFormatID
durationFormatID
TI,N,V_durationFormatID
customFormatID
TI,N,V_customFormatID
baseFormatID
TI,N,V_baseFormatID
commentStorageID
TI,N,V_commentStorageID
importWarningSetID
TI,N,V_importWarningSetID
controlFormatID
TI,N,V_controlFormatID
multipleChoiceListFormatID
TI,N,V_multipleChoiceListFormatID
controlFormat
T@"TSKFormat",R,N,V_controlFormat
multipleChoiceListFormat
T@"TSKFormat",R,N,V_multipleChoiceListFormat
isEmptyForDataStore
valueType
Ti,N,V_valueType
doubleValue
boolValue
durationTimeIntervalValue
dateValue
T@"NSDate",&,N
stringValue
formulaSyntaxError
T@"TSWPStorage",&,N
richTextValue
hasFormulaSyntaxError
hasRichText
formulaSyntaxErrorString
formattedValue
stringForEditing
stringForUnderlyingValue
richTextStorageForLayout
T@"TSWPStorage",R,N
valueIsText
valueIsStringOrNumber
valueIsNumberOrTime
hasValueOrError
dataIsReplaceable
conditionalStyle
T@"TSTConditionalStyleSet",&,N,V_conditionalStyle
conditionalStyleAppliedRule
TC,N,V_conditionalStyleAppliedRule
cellBorder
T@"TSTCellBorder",&,N,V_cellBorder
hasCellStyle
hasTextStyle
hasConditionalStyle
effectiveTextStyle
T@"TSWPParagraphStyle",R,N
writingDirection
cellFill
interactionType
cellSpec
T@"TSTCellSpec",&,N,V_cellSpec
T^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}},N
hasCellSpec
hasFormula
cellSpecForDiff
T@"TSTCellSpec",R,N
hasFormulaAnyError
hasFormulaEvaluationError
hasControl
explicitFormatFlags
TS,N,V_explicitFormatFlags
formatType
currentFormat
T@"TSKFormat",R,N,V_currentFormat
numberFormat
T@"TSKFormat",R,N,V_numberFormat
currencyFormat
T@"TSKFormat",R,N,V_currencyFormat
dateFormat
T@"TSKFormat",R,N,V_dateFormat
T@"TSKFormat",R,N,V_durationFormat
T@"TSKFormat",R,N,V_customFormat
baseFormat
T@"TSKFormat",R,N,V_baseFormat
hasCurrentFormat
currentFormatIsExplicit
customFormatString
currentFormatUsesAccountingStyle
currentFormatNegativeStyle
hasAnyFormats
isMostRecentlyExplicitPercent
hasMismatchedFormatAndValue
cellFlags
TS,N,V_cellFlags
T@"TSULocale",R,N,V_locale
commentStorage
T@"TSDCommentStorage",&,N,V_commentStorage
importWarningSet
T@"TSTImportWarningSet",&,N,V_importWarningSet
hasCommentStorage
hasImportWarningSet
-[TSTCellMap loadFromUnarchiver:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellMap.mm
serious error: flag out of sync with content.
-[TSTCellMap loadFromUnarchiver:]_block_invoke
creating a one-to-many cell map but starting with more than one cell
-[TSTCellMap saveToArchiver:]
We should never archive shallow copies. That's not what they are for
v32@?0@"TSTCellList"8Q16^B24
-[TSTCellMap cellIDAtIndex:]
cannot examine cellIDs in UID mode
-[TSTCellMap enumerateCellsWithIDsUsingBlock:]
can't enumerate IDs since have UIDs
-[TSTCellMap enumerateCellsWithUIDsUsingBlock:]
can't enumerate by UIDs since have IDs
-[TSTCellMap findCellForCellID:]
cannot use find with a UID based cell map
v40@?0r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8@"TSTCell"16Q24^B32
-[TSTCellMap addCell:andCellUID:]
cannot add UIDs in ID mode
cannot add cells in one-to-many mode
-[TSTCellMap addCell:andCellID:]
Cannot add cellIDs while in UID mode.
-[TSTCellMap replaceCellAtIndex0:]
-[TSTCellMap popLastCell]
can't pop last in a UID based table.
-[TSTCellMap appendCellMap:]
Cell Map is trying to append a map of a different types
-[TSTCellMap p_copyCellsAndUUIDsFromCellMap:convertingToCellIDsWithTableInfo:]
This should only be called with a UID based cell map.
cellUIDs
T@"TSTCellUIDList",&,N,V_cellUIDs
oneToMany
TB,R,N,GisOneToMany,V_oneToMany
shallowCopy
TB,N,V_shallowCopy
-[TSTCellList popLastCell]
Trying to popLastCell on an empty %@
-[TSTCellList cellAtIndex:]
Out of range in  %@
-[TSTCellList copyWithZone:]_block_invoke
This list should only have cells.
-[TSTCellList loadFromUnarchiver:]_block_invoke
cells
T@"NSPointerArray",&,N
virtual TSCEASTElement *TSTTSCEASTNodeExpressionNodeFunction::functionNode(TSCEASTFunctionElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTSCEASTNodeExpressionNodeFunction.mm
improper number of arguments for function node.
virtual TSCEASTElement *TSTTSCEASTNodeExpressionNodeFunction::unknownFunctionNode(TSCEASTUnknownFunctionElement *)
virtual TSCEASTElement *TSTTSCEASTNodeExpressionNodeFunction::colonNode(TSCEASTColonElement *)
improper number of arguments for colon node.
virtual TSCEASTElement *TSTTSCEASTNodeExpressionNodeFunction::arrayNode(TSCEASTArrayElement *)
improper number of arguments for array.
virtual TSCEASTElement *TSTTSCEASTNodeExpressionNodeFunction::listNode(TSCEASTListElement *)
improper number of arguments for list node.
TSTExpressionNode *TSTTSCEASTNodeExpressionNodeFunction::expressionNode()
Unable to properly create a TSTExpressionNode. Possibly a bad ASTNodeArray?
void TSTTSCEASTNodeExpressionNodeFunction::processOperatorNode(unichar)
improper number of arguments for operator node.
void TSTTSCEASTNodeExpressionNodeFunction::processPostfixOperatorNode(unichar)
improper number of arguments for postfix operator node.
void TSTTSCEASTNodeExpressionNodeFunction::processPrefixOperatorNode(unichar)
improper number of arguments for prefix operator node.
rwlock
T{_opaque_pthread_rwlock_t=q[192c]},N,V_rwlock
-[TSTColumnRowUIDMap initWithContext:tableUUID:numberOfRows:numberOfColumns:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTColumnRowUIDMap.mm
tableUUID
-[TSTColumnRowUIDMap columnUIDsForColumnIndexes:]
Truncating silly request for %lu columns
-[TSTColumnRowUIDMap rowUIDsForRowIndexes:]
Truncating silly request for %lu rows
-[TSTColumnRowUIDMap insertColumnsWithUIDs:atIndex:]
cannot insert columns at invalid columnIndex
-[TSTColumnRowUIDMap insertRowsWithUIDs:atIndex:]
cannot insert rows at invalid rowIndex
versionCounter
TQ,R,N,V_versionCounter
%@<%p> %@ (on table %@)
 Group Bys:
  - %@
-[TSTCategoryOwner tableInfo]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCategoryOwner.mm
Someone is asking for a tableInfo, but we are not registered with the calcEngine yet
Table %@ is not registered with the calcEngine yet
-[TSTCategoryOwner setGroupBys:]
Saw an invalid groupBy with no groupByUid set
-[TSTCategoryOwner registerWithCalcEngine:baseOwnerUID:]
group by registration should not fail - groupByUid: %@
-[TSTCategoryOwner registerGroupBy:]
T@"TSTTableModel",R,N
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_baseTableUID
groupBys
T@"NSArray",&,N,V_groupBys
%@ @ %@
formulaCoord
T{TSUCellCoord=ISBB},R,N,V_formulaCoord
accumulator
T@"TSTAccumulator",&,N,V_accumulator
groupNode
T@"TSTGroupNode",W,N,V_groupNode
aggregator
T@"TSTAggregator",R,W,N,V_aggregator
T@"NSMutableArray",&,N,V_children
-[TSTFunctionNode initAsCopyOf:intoContext:children:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTFunctionNode.mm
Unexpected object in initAsCopyOf:... expected TSTFunctionNode, got %@
-[TSTFunctionNode buildASTNodeArray:hostCell:symbolTable:]
functionIndex
Ti,R,N,V_functionIndex
functionEndNode
T@"TSTFunctionEndNode",&,N
numArguments
minArguments
Ts,R,N
maxArguments
whitespaceAfterLeftParen
T@"NSString",&,V_whitespaceAfterLeftParen
whitespaceAfterDelimiters
T@"NSArray",&,N,V_whitespaceAfterDelimiters
whitespaceAfterFunctionName
T@"NSString",&,N,V_whitespaceAfterFunctionName
invalidFunctionName
T@"NSString",&,N,V_invalidFunctionName
invalidFunction
TB,R,N,GisInvalidFunction
-[TSTLetNode initWithContext:children:firstIndex:lastIndex:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTLetNode.mm
Let nodes should have exactly 0 or 3 children.  There are %lu arguments to let
A let node's first child must be an identifier.
-[TSTLetNode initAsCopyOf:intoContext:children:]
variable %u
-[TSTLetNode setChildren:]
let nodes must have zero or three children
-[TSTLetNode boundSymbol]
identifier is not of proper type: %@
-[TSTLetNode copyByResolvingIdentifiers:hostTable:baseHostCell:forceReferenceInterpretation:symbolTable:oldToNewNodeMap:]
Let nodes must have exactly zero or three children
-[TSTLetNode addAllIdentifiersToSymbolTable:]
Let nodes must have exactly three children
-[TSTLetNode buildASTNodeArray:hostCell:symbolTable:]
Let node doesn't have three arguments
whitespaceAfterLet
T@"NSString",&,N,V_whitespaceAfterLet
whitespaceAfterIdentifier
T@"NSString",&,N,V_whitespaceAfterIdentifier
whitespaceAfterEquals
T@"NSString",&,N,V_whitespaceAfterEquals
whitespaceAfterDelimiter
T@"NSString",&,N,V_whitespaceAfterDelimiter
-[TSTSummaryModel resetWithForce:]_block_invoke_2
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTSummaryModel.mm
we should have a valid coordinate
v24@?0r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8@"TSTCell"16
v16@?0@"TSTTableInfo"8
v16@?0@"TSTSummaryCellVendor"8
-[TSTSummaryModel setCell:atCellUID:]
Attempting to set cell at illegal summary model cell UID:%{public}@
-[TSTSummaryModel setAggregateType:forColumnUID:atGroupLevel:]_block_invoke
Categories: invalid coordinate in summary uidmap while categories is enabled
-[TSTSummaryModel allRichTextStorages]
TODO
-[TSTSummaryModel setLabelRowVisibility:atCategoryLevel:]
-[TSTSummaryModel setCellStyle:forSummaryLabelAtLevel:]
style should be in the stylesheet
unexpected group level
-[TSTSummaryModel setTextStyle:forSummaryLabelAtLevel:]
-[TSTSummaryModel willRemoveGroup:]
GroupBy tried to remove a summaryRow that doesn't exist in the summaryModel.
+[TSTSummaryModel tableStyleAreaForCategoryLevel:isLabel:]
Calling tableStyleAreaForCategoryLevel with an invalid level
+[TSTSummaryModel categoryLevelForTableStyleArea:]
Calling categoryLevelForTableStyleArea with an invalid style area
summaryRowHeightList
T^{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}},R,N,V_summaryRowHeightList
labelRowHeightList
T^{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}},R,N,V_labelRowHeightList
labelRowVisibilityList
T^{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}},R,N,V_labelRowVisibilityList
needsFormulaReset
TB,N,V_needsFormulaReset
T@"TSTTableDataStore",R,N,V_dataStore
summaryCellVendor
T@"TSTSummaryCellVendor",R,N,V_summaryCellVendor
aggregateFormulaOwner
T@"TSTCategoryAggregateFormulaOwner",R,N,V_aggregateFormulaOwner
T@"TSTTableInfo",R,N,V_tableInfo
aggregateFormulaOwnerUID
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_aggregateFormulaOwnerUID
Td,N,V_categoryColumnWidth
cellMap
T@"TSTCellMap",&,N,V_cellMap
+[TSTCellToggleControlSpec cellSpecFromTSKFormat:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellToggleControlSpec.mm
Expected checkbox format.
-[TSTCellToggleControlSpec initWithArchive:unarchiver:]
Wrong interaction type for a checkbox.
stroke
T{TSTSimpleRange=qQ},R,N
order
T@"TSDStroke",&,N,V_stroke
T{TSTSimpleRange=qQ},N,V_range
Ti,N,V_order
majorStrokeLayerToken
T@"<TSTStrokeLayerStrokeAndRange>",&,N,V_majorStrokeLayerToken
minorStrokeLayerToken
T@"<TSTStrokeLayerStrokeAndRange>",&,N,V_minorStrokeLayerToken
-[TSTStrokeOrderedLayer initWithContext:majorStrokeLayer:minorStrokeLayer:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTStrokeOrderedLayer.m
majorStrokeLayer
minorStrokeLayer
-[TSTStrokeOrderedLayer appendStroke:inRange:order:]
-[TSTStrokeOrderedLayer insertStroke:inRange:order:]
-[TSTStrokeOrderedLayer invalidate]
-[TSTStrokeOrderedLayer invalidateRange:]
T@"TSTStrokeLayer",&,N,V_majorStrokeLayer
T@"TSTStrokeLayer",&,N,V_minorStrokeLayer
TSTWPTokenAttachment *TSTLexer::nextTokenAttachment()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTLexerAdditions.mm
No more tokenAttachments.
virtual TSCEASTElement *TSTTrackingRangeExtractor::crossTableReferenceNode(TSCEASTRelativeCoordRefElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTrackingRangeExtractor.mm
Too many coordinates in tracking range!
tracking region should not yet be initialized
v24@?0r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}8^B16
virtual TSCEASTElement *TSTTrackingRangeExtractor::uidReferenceNode(TSCEASTUidReferenceElement *)
-[TSTFormulaPredArg boolValue]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTFormulaPredArg.mm
Wrong type accessor called on %@
-[TSTFormulaPredArg setBoolValue:]
-[TSTFormulaPredArg number]
-[TSTFormulaPredArg setNumber:]
-[TSTFormulaPredArg preserveFlags]
-[TSTFormulaPredArg setPreserveFlags:]
Must set the entire relative reference, if you are relative
-[TSTFormulaPredArg date]
-[TSTFormulaPredArg setDate:]
-[TSTFormulaPredArg string]
-[TSTFormulaPredArg setString:]
-[TSTFormulaPredArg relativeCellRef]
Asking for a relative cell-ref, but we don't have one
-[TSTFormulaPredArg setRelativeCellRef:]
-[TSTFormulaPredArg uidRectRef]
-[TSTFormulaPredArg categoryRef]
-[TSTFormulaPredArg baseCellRef]
-[TSTFormulaPredArg cellRefForHostCoord:]
-[TSTFormulaPredArg setBaseCellRef:]
-[TSTFormulaPredArg durationValue]
-[TSTFormulaPredArg setDurationValue:]
-[TSTFormulaPredArg durationUnits]
-[TSTFormulaPredArg setDurationUnits:]
-[TSTFormulaPredArg formulaCreatorForPredArgAtHostCell:calcEngine:]
Need calcEngine to transform to relative categoryRef
type
Ti,R,N,V_type
T@"NSNumber",&,N
numberValue
date
T@"NSString",C,N
preserveFlags
T{TSUPreserveFlags=C},N
preserveColumn
preserveRow
hasRelativeCellRef
TB,R,N,V_hasRelativeCellRef
uidRectRef
T@"TSTUIDRectRef",&,N,V_uidRectRef
hasCategoryRef
categoryRef
T{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s},N
durationValue
durationUnits
Ti,N
hostCellCoord
T{TSUModelCellCoord={TSUCellCoord=ISBB}},N,V_hostCellCoord
 Hidden States:
-[TSTHiddenStatesOwner tableInfo]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTHiddenStatesOwner.mm
-[TSTHiddenStatesOwner setTableInfo:]
Resetting tableInfo pointer, not expecting that
Wrong class passed to setTableInfo: %@
-[TSTHiddenStatesOwner registerHiddenStates:baseOwnerUID:]
HiddenStates couldn't register with calc-engine
-[TSTBooleanNode initAsCopyOf:intoContext:children:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTBooleanNode.mm
Unexpected object in initAsCopyOf:... expected TSTBooleanNode, got %@
true
false
-[TSTBooleanNode buildASTNodeArray:hostCell:symbolTable:]
BooleanNode shouldn't have any children
value
TB,N,V_value
-[TSTArrayNode initAsCopyOf:intoContext:children:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTArrayNode.mm
Unexpected object in initAsCopyOf:... expected TSTArrayNode, got %@
-[TSTArrayNode string]
We shouldn't call the arrayNode's string method, because it won't actually return a proper tokenized string
-[TSTArrayNode buildASTNodeArray:hostCell:symbolTable:]
We don't support more than UINT16_MAX rows in an array
We don't support more than UIN8_MAX columns in an array
dimensions
T{TSCEVectorIndexPair=II},R,V_dimensions
whitespaceBeforeFirstChild
T@"NSString",&,V_whitespaceBeforeFirstChild
T@"NSArray",&,V_whitespaceAfterDelimiters
-[TSTListNode initAsCopyOf:intoContext:children:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTListNode.mm
Unexpected object in initAsCopyOf:... expected TSTListNode, got %@
<%@ %p>
-[TSTListNode string]
We shouldn't call the listNode's string method, because it won't actually return a proper tokenized string
-[TSTListNode buildASTNodeArray:hostCell:symbolTable:]
-[TSTGroupNodeFormatManager reset]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTGroupNodeFormatManager.mm
_cellValue
v32@?0@"TSKFormat"8@"NSMutableSet"16^B24
-[TSTGroupNodeFormatManager p_recalculateMergedFormat]
Expected duration format.
-[TSTGroupNodeFormatManager mergedFormatChangedByAddingRowUID:andCellValue:]
format
CellValue:%@
Cache:%@
-[TSTGroupNodeFormatManager initWithArchive:]
Expected equal size arrays for the format dictionary.
v24@?0@8^B16
cellValue
T@"TSCECellValue",R,&,N,V_cellValue
cacheIsValid
TB,N,V_cacheIsValid
cachedCellID
T{TSUCellCoord=ISBB},N,V_cachedCellID
cachedCellStyle
T@"TSTCellStyle",&,N,V_cachedCellStyle
cachedTextStyle
T@"TSWPParagraphStyle",&,N,V_cachedTextStyle
cachedCellWraps
TB,N,V_cachedCellWraps
cachedVerticalAlignment
Ti,N,V_cachedVerticalAlignment
cachedParagraphAlignment
Ti,N,V_cachedParagraphAlignment
cachedMergeRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_cachedMergeRange
cachedAutoSizeFlags
TQ,N,V_cachedAutoSizeFlags
cachedMaskRect
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_cachedMaskRect
cachedMaskSpillRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_cachedMaskSpillRange
cachedPadding
T@"TSWPPadding",&,N,V_cachedPadding
cachedAutosizedFrame
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_cachedAutosizedFrame
-[TSTStringNode initAsCopyOf:intoContext:children:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTStringNode.mm
Unexpected object in initAsCopyOf:... expected TSTStringNode, got %@
\U201C\U2006\U201D
\U201C%@\U201D
"%@"
-[TSTStringNode buildASTNodeArray:hostCell:symbolTable:]
StringNode shouldn't have any children
T@"NSString",&,N,V_value
v24@?0r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8^B16
-[TSTDateNode initAsCopyOf:intoContext:children:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTDateNode.mm
Unexpected object in initAsCopyOf:... expected TSTDateNode, got %@
-[TSTDateNode buildASTNodeArray:hostCell:symbolTable:]
DateNode shouldn't have any children
DATE(%ld%@%ld%@%ld)
(DATE(%ld%@%ld%@%ld)+TIMEVALUE(TIME(%ld%@%ld%@%ld)))
-[TSTDateNode durationWrapper]
We shouldn't ask a Date for it's durationWrapper.
<%@ %p>: '%@'%@
 (BLANK)
T@"NSDate",&,N,V_value
isBlank
TB,N,V_isBlank
T@"NSString",&,N,V_dateFormat
-[TSTReferenceNode initWithContext:calculationEngine:uidRectRef:categoryRef:hostCellRef:referenceColorHelper:suppressAutomaticNamedReferenceInvalidation:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTReferenceNode.mm
Expected uidRectRef to have same calculation engine as the one that was passed in.
-[TSTReferenceNode initWithReferenceStart:referenceEnd:suppressAutomaticNamedReferenceInvalidation:]
Creating a range reference with two references with different ownerUIDs
Creating a range reference with two references with different calculationEngines
-[TSTReferenceNode initAsCopyOf:intoContext:children:]
Unexpected object in initAsCopyOf:... expected TSTReferenceNode, got %@
unable to resurrect calcEngine in document context.
+[TSTReferenceNode p_spanningCategoryRefForViewRangeRef:groupByUid:categoryLevel:calculationEngine:]
trying to create a spanning category summary ref to more than one column
-[TSTReferenceNode p_categoryRefViewTractRef]
invalidCellTractRef
expected to create an invalid cell tract ref
-[TSTReferenceNode categoryRefTableUID]
asking a non-category ref node for its category ref table UID
-[TSTReferenceNode setHostTableUID:]
invalid tableUID
-[TSTReferenceNode referenceAsStringWithContext:]
nil calculationEngine.  Can't generate string for categoryRefNode.
nil calculationEngine.  Can't generate string for referenceNode.
-[TSTReferenceNode referenceAsStringWithContext:]_block_invoke
viewString
 | %@
v24@?0r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8^B16
#REF!
-[TSTReferenceNode buildASTNodeArray:hostCell:symbolTable:]
ReferenceNode shouldn't have any children
-[TSTReferenceNode exportString]
%@ :: 
-[TSTReferenceNode loadFromArchive:unarchiver:]
Invalid TSTReferenceNode archive
documentRoot
T@"TSKDocumentRoot",R,N
changeNotifier
T@"TSKChangeNotifier",R,N
T@"TSTUIDRectRef",R,N,V_uidRectRef
hostTableUID
hostCellRef
T{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}},N,V_hostCellRef
T@"TSTGroupBy",R,N
viewBoundingBox
T{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}},R
baseBoundingBox
rangeContext
TC,N,V_rangeContext
isNonSpanningRangeExpression
isRangeExpression
isLocalReference
rangeWithFunction
TB,N,GisRangeWithFunction,V_rangeWithFunction
isBlankForKeyboardInsertion
TB,N,V_isBlankForKeyboardInsertion
suppressAutomaticNamedReferenceInvalidation
TB,R,N,V_suppressAutomaticNamedReferenceInvalidation
isSingleColumnSpanningReference
isSingleRowSpanningReference
isCategoryRef
TB,R,N,V_isCategoryRef
isCategorySummaryRef
isSpanningCategorySummaryRef
T{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s},N,V_categoryRef
categoryRefTableUID
isResizable
referenceColorHelper
T@"TSTReferenceColorHelper",&,N,V_referenceColorHelper
-[TSTPencilAnnotation initWithContext:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTPencilAnnotation.mm
v16@?0@"TSDPencilAnnotationStorage"8
-[TSTPencilAnnotation loadFromArchive:unarchiver:]
A TSTPencilAnnotation must have a pencilAnnotationStorage
uuid
pencilAnnotationStorage
T@"<TSKPencilAnnotationStorage>",R,N
T@"TSTTableInfo",W,N,V_table
T@"TSDPencilAnnotationStorage",R,N,V_pencilAnnotationStorage
-[TSTDurationNode initAsCopyOf:intoContext:children:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTDurationNode.mm
Unexpected object in initAsCopyOf:... expected TSTDurationNode, got %@
-[TSTDurationNode buildASTNodeArray:hostCell:symbolTable:]
DurationNode shouldn't have any children
DURATION(%g%@%g%@%g%@%g%@%g%@%g)
-[TSTDurationNode date]
We shouldn't ask a Duration for its date.
-[TSTDurationNode format]
We shouldn't ask a Duration for its format.
T{TSTDurationWrapper=d{?=b1iii}},N,V_value
blank
TB,N,GisBlank,V_blank
-[TSTArgumentPlaceholderNode initAsCopyOf:intoContext:children:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTArgumentPlaceholderNode.mm
Unexpected object in initAsCopyOf:... expected TSTArgumentPlaceholderNode, got %@
-[TSTArgumentPlaceholderNode copyIntoContext:bakeModes:children:]
Unexpected mode value type
-[TSTArgumentPlaceholderNode detokenizedText]
expected set placeholder node to return a different node for bakedValue
-[TSTArgumentPlaceholderNode buildASTNodeArray:hostCell:symbolTable:]
ArgumentPlaceholderNode shouldn't have children
mode
Ts,N,V_mode
-[TSTPostfixOperatorNode buildASTNodeArray:hostCell:symbolTable:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTPostfixOperatorNode.mm
-[TSTStrokeDefaultVendor p_updateStrokeLayer:forColumnStrokeType:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTStrokeDefaultVendor.mm
unexpected column strokeType %d
-[TSTStrokeDefaultVendor p_updateStrokeLayer:forRowStrokeType:]
unexpected row strokeType %d
tableProvider
T@"<TSTTableHiddenRowColumnProviding><TSTTableInternalGeometryProviding>",W,N,V_tableProvider
categoryProvider
T@"<TSTCategoryProviding>",W,N,V_categoryProvider
TB,N,V_isValid
strokeTypeToLayerMap
T@"NSPointerArray",&,N,V_strokeTypeToLayerMap
headerSideBorderColumnRange
T{_NSRange=QQ},N,V_headerSideBorderColumnRange
headerColumnSeparatorColumnRange
T{_NSRange=QQ},N,V_headerColumnSeparatorColumnRange
bodySideBorderColumnRange
T{_NSRange=QQ},N,V_bodySideBorderColumnRange
topBorderRowRange
T{_NSRange=QQ},N,V_topBorderRowRange
headerRowSeparatorRowRange
T{_NSRange=QQ},N,V_headerRowSeparatorRowRange
footerRowSeparatorRowRange
T{_NSRange=QQ},N,V_footerRowSeparatorRowRange
bottomBorderRowRange
T{_NSRange=QQ},N,V_bottomBorderRowRange
strokeProvider
T@"<TSTTableStrokeProviding>",W,N,V_strokeProvider
-[TSTPrefixOperatorNode buildASTNodeArray:hostCell:symbolTable:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTPrefixOperatorNode.mm
-[TSTFunctionEndNode insertFormulaText:includeWhitespace:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTFunctionEndNode.mm
We shouldn't ever buildFormulaText: with a functionEndNode
-[TSTFunctionEndNode buildASTNodeArray:hostCell:symbolTable:]
We shouldn't ever buildASTNodeArray: with a functionEndNode
functionNode
T@"TSTFunctionNode",N,V_functionNode
-[TSTCellFormatAndValue stringValue]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellFormatAndValue.mm
Getting a non-string value as string from a TSTCellFormatAndValue.
-[TSTCellFormatAndValue richTextOrErrorTextStorageValue]
Getting a non-rich-text/non-formula-error value as rich text from a TSTCellFormatAndValue.
+[TSTCellFormatAndValue formatAndValueFromRichTextCell:updatingStorageWithBlock:]
expected rich text cell when creating format and value
-[TSTCellFormatAndValue initFromCell:useAllSpareFormats:forceNoContent:applySpareFormatOnly:]
useAllSpareFormats and spareFormatOnly are mutually exclusive!
deprecated cell value type found
-[TSTCellFormatAndValue copyWithZone:]
-[TSTCellFormatAndValue numberOrCurrencyDecimalValue]
Getting a non-double value as double from a TSTCellFormatAndValue.
-[TSTCellFormatAndValue hasStringContentMatchingCell:]
no string content comparison implemented for value type %d
-[TSTCellFormatAndValue applyToCell:]
-[TSTCellFormatAndValue objectByRemovingPropertiesInMap:addingPropertiesInMap:updateInverseResetPropertyMap:updateInverseSetPropertyMap:]
shouldn't remove the value and format from a cell
-[TSTCellFormatAndValue initFromPropertyCommandMessage:unarchiver:]
rich text cells should have a rich text payload
-[TSTCellFormatAndValue saveToPropertyCommandMessage:archiver:]
Non-nil string resulted in NULL protobufString: '%@'
T@"NSDate",R,C,N
numberOrCurrencyDecimalValue
T{TSUDecimal={?=[2Q]}},R,N
T@"NSString",R,C,N
richTextOrErrorTextStorageValue
isFormulaSyntaxError
isApplySpareFormatOnly
widthHeightCollections
T@"NSMutableArray",&,N,V_widthHeightCollections
-[TSTHiddenStates hideRowAtIndex:forAction:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTHiddenStates.mm
-[TSTHiddenStates showRowAtIndex:forAction:]
-[TSTHiddenStates hideColumnAtIndex:forAction:]
-[TSTHiddenStates showColumnAtIndex:forAction:]
-[TSTHiddenStates copyFromHiddenStates:forRange:withContext:isWholeTableCopy:]
Failed to hide row during copy.
Failed to hide column during copy.
T@"TSTHiddenStatesOwner",W,N,V_hiddenStatesOwner
rowHiddenStateExtent
T@"TSTHiddenStateExtent",R,&,N,V_rowHiddenStateExtent
columnHiddenStateExtent
T@"TSTHiddenStateExtent",R,&,N,V_columnHiddenStateExtent
hasHiddenRows
hasHiddenColumns
hasUserHiddenRows
hasUserHiddenColumns
hasCollapsedRows
numberOfHiddenRows
numberOfHiddenColumns
numberOfUserHiddenRows
numberOfUserHiddenColumns
hiddenStateOwnerForRowsUID
hiddenStateOwnerForColumnsUID
T@"TSTTableFilterSet",&,N
needsFilterFormulaRewriteForImport
-[TSTStrokeSidecarIterator initWithStrokeSidecar:region:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTStrokeSidecarIterator.mm
-[TSTStrokeSidecarIterator updateCellData:]
invalid cellID in cellData
cellID %@ should be before cursor cellID %@
T@"TSTStrokeSidecar",R,N,V_strokeSidecar
T@"NSObject<TSTCellRegionIterating>",R,N,V_regionIterator
curCellID
T{TSUCellCoord=ISBB},N,V_curCellID
-[TSTGroupBy didCreateGroup:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTGroupBy.mm
_deferredGroupByChangeNotifications
-[TSTGroupBy willRemoveGroup:]
-[TSTGroupBy didRemoveGroup:]
-[TSTGroupBy didAddRowUID:toGroup:]
-[TSTGroupBy didRemoveRowUID:fromGroup:]
-[TSTGroupBy startOfGroupingChangesBatch]
-[TSTGroupBy endOfGroupingChangesBatch]
-[TSTGroupBy didChangeGroupByStructure]
-[TSTGroupBy changeForSettingGroupingColumnList:]
New grouping column list is nil
-[TSTGroupBy mapGroupUidsForChange:]
wrong groupByUid
-[TSTGroupBy runChange:withAggregates:]
Uh, we were expecting this to be us
-[TSTGroupBy setAggregateType:forColumnUID:atGroupLevel:]
aggType of (%{public}d) is not a valid aggregate type for an entire column
-[TSTGroupBy findGroupNodeForValue:atLevel:createIfMissing:]
Was expecting to have created a groupNode for this groupValue: %@
-[TSTGroupBy beginDeferringRebuildFormulas]
overflow in beginDeferringRebuildFormulas
-[TSTGroupBy endDeferringRebuildFormulas]
endDeferringRebuildFormulas called without matching beginDeferringRebuildFormulas - avoided underflow
-[TSTGroupBy deferGroupByChangeNotifications]
overflow in deferGroupByChangeNotifications
-[TSTGroupBy resumeGroupByChangeNotifications]
resumeGroupByChangeNotifications called without matching deferGroupByChangeNotifications - avoided underflow
-[TSTGroupBy createAggregatorsIfMissingAndAssert:]
No TSTAggregator found for column %@
Couldn't create an aggreator for column: %@
-[TSTGroupBy evaluateFormulaAt:withCalcEngine:recalcOptions:]_block_invoke
Should only get cellRefs from our baseTable, expected %@ but got %@
-[TSTGroupBy isValidCategoryRef:]
%@: %@
<Relative Ancestor>
-[TSTGroupBy captureCategoryRefsFromIterator:atLevel:asSpanning:]_block_invoke
cell.formula
-[TSTGroupBy captureCategoryLabelRefsForViewRegion:atLevel:asSpanning:forRows:]_block_invoke
No level for agg function labels!
-[TSTGroupBy prettyStringForCategoryRef:forHostCellRef:namingContext:]
%@ (%@)
%@::%@
(blank)
(error)
T@"TSTCategoryOwner",W,N,V_categoryOwner
T@"NSArray",R,&,V_groupingColumns
numberOfLevels
TC,R
isEnabled
TB,N,V_isEnabled
groupByChangeDistributor
T@"TSTGroupByChangeDistributor",R,&,N,V_groupByChangeDistributor
aggregators
T@"NSMutableArray",R,&,N,V_aggregators
columnAggregates
T@"NSArray",R,N,V_columnAggregates
T@"TSULocale",R,N
isCategorized
topLevelGroupUid
topLevelGroupNode
T@"TSTGroupNode",R,N
indirectAggTypeChangeFormulaCoord
T{TSUCellCoord=ISBB},R,N,V_indirectAggTypeChangeFormulaCoord
groupingColumnsFormulaCoord
T{TSUCellCoord=ISBB},R,N,V_groupingColumnsFormulaCoord
groupingColumnHeadersFormulaCoord
T{TSUCellCoord=ISBB},R,N,V_groupingColumnHeadersFormulaCoord
allAggsInGroupRootFormulaCoord
T{TSUCellCoord=ISBB},R,N,V_allAggsInGroupRootFormulaCoord
columnOrderChangedPrecedent
T{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}},R,N
rowOrderChangedPrecedent
needsRebuildOfAggFormulas
TB,N,V_needsRebuildOfAggFormulas
customFormatForBlankGroup
T@"TSKCustomFormatWrapper",R,&,N,V_customFormatForBlankGroup
customFormatForErrorGroup
T@"TSKCustomFormatWrapper",R,&,N,V_customFormatForErrorGroup
-[TSTCellBorder applyToCell:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellBorder.mm
currentCellBorder
-[TSTCellBorder objectByRemovingPropertiesInMap:addingPropertiesInMap:updateInverseResetPropertyMap:updateInverseSetPropertyMap:]
shouldn't remove the cell border from a cell
definedTopStroke
TB,R,N,V_definedTopStroke
definedLeftStroke
TB,R,N,V_definedLeftStroke
definedBottomStroke
TB,R,N,V_definedBottomStroke
definedRightStroke
TB,R,N,V_definedRightStroke
topStroke
T@"TSDStroke",R,&,N,V_topStroke
topStrokeOrder
Ti,R,N,V_topStrokeOrder
leftStroke
T@"TSDStroke",R,&,N,V_leftStroke
leftStrokeOrder
Ti,R,N,V_leftStrokeOrder
bottomStroke
T@"TSDStroke",R,&,N,V_bottomStroke
bottomStrokeOrder
Ti,R,N,V_bottomStrokeOrder
rightStroke
T@"TSDStroke",R,&,N,V_rightStroke
rightStrokeOrder
Ti,R,N,V_rightStrokeOrder
hasContent
strokeLayerCount
-[TSTStrokeLayerAbstractStack p_strokeLayerEnumeration]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTStrokeLayerStack.m
-[TSTStrokeLayerAbstractStack count]
-[TSTStrokeLayerAbstractStack enumerateStrokesAndCapsInRange:usingBlock:]_block_invoke
should never see portal strokes here
-[TSTStrokeLayerAbstractStack enumerateStrokesAndCapsInRange:usingBlock:]
defaultStrokeLayer
T@"TSTStrokeLayer",&,N,V_defaultStrokeLayer
customStrokeLayer
T@"TSTStrokeLayer",&,N,V_customStrokeLayer
clearedStrokeLayer
T@"TSTMutableStrokeLayer",&,N,V_clearedStrokeLayer
dynamicStrokeLayer
T@"TSTMutableStrokeLayer",&,N,V_dynamicStrokeLayer
spillStrokeLayer
T@"TSTMutableStrokeLayer",&,N,V_spillStrokeLayer
stackKind
Tq,N,V_stackKind
Tq,N,V_type
-[TSTStrokeLayerMergedStack lockForWrite]
defaultMinorStrokeLayer
T@"TSTStrokeLayer",&,N,V_defaultMinorStrokeLayer
defaultMajorStrokeLayer
T@"TSTStrokeLayer",&,N,V_defaultMajorStrokeLayer
customUnorderedStrokeLayer
T@"TSTStrokeLayer",&,N,V_customUnorderedStrokeLayer
customOrderedStrokeLayer
T@"TSTStrokeOrderedLayer",&,N,V_customOrderedStrokeLayer
clearedMinorStrokeLayer
T@"TSTMutableStrokeLayer",&,N,V_clearedMinorStrokeLayer
clearedMajorStrokeLayer
T@"TSTMutableStrokeLayer",&,N,V_clearedMajorStrokeLayer
dynamicUnorderedStrokeLayer
T@"TSTMutableStrokeLayer",&,N,V_dynamicUnorderedStrokeLayer
dynamicOrderedStrokeLayer
T@"TSTStrokeOrderedLayer",&,N,V_dynamicOrderedStrokeLayer
spillMinorStrokeLayer
T@"TSTMutableStrokeLayer",&,N,V_spillMinorStrokeLayer
spillMajorStrokeLayer
T@"TSTMutableStrokeLayer",&,N,V_spillMajorStrokeLayer
defaultStrokeProvider
T@"<TSTTableStrokeProviding>",R,&,N,V_defaultStrokeProvider
customStrokeProvider
T@"<TSTCustomStrokeProviding>",R,&,N,V_customStrokeProvider
T@"<TSTCategoryProviding><TSTTableInternalGeometryProviding><TSTTableHiddenRowColumnProviding>",R,&,N,V_tableProvider
T@"NSPointerArray",R,&,N,V_topRowStrokes
T@"NSPointerArray",R,&,N,V_bottomRowStrokes
T@"NSPointerArray",R,&,N,V_leftColumnStrokes
T@"NSPointerArray",R,&,N,V_rightColumnStrokes
rowStrokeExportCache
T@"TSUIntegerKeyDictionary",&,N,V_rowStrokeExportCache
columnStrokeExportCache
T@"TSUIntegerKeyDictionary",&,N,V_columnStrokeExportCache
-[TSTHiddenStateExtent hideAtUid:forAction:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTHiddenStateExtent.mm
Can't show/hide at a uuid without a TSTTableInfo to translate to an index
-[TSTHiddenStateExtent showAtUid:forAction:]
-[TSTHiddenStateExtent hideAtViewIndex:forAction:]
Can't show/hide at an index without a TSTTableInfo to translate to uuid
-[TSTHiddenStateExtent showAtViewIndex:forAction:]
-[TSTHiddenStateExtent hideAtBaseIndex:forAction:]
-[TSTHiddenStateExtent showAtBaseIndex:forAction:]
-[TSTHiddenStateExtent hidingActionForViewIndex:]
-[TSTHiddenStateExtent hidingActionForBaseIndex:]
-[TSTHiddenStateExtent indexOfVisibleAfterIndex:]
Can't use this method without a TSTTableInfo to provide tableSize
-[TSTHiddenStateExtent indexOfVisibleAfterAndIncludingIndex:]
-[TSTHiddenStateExtent registerWithCalcEngine:baseOwnerUID:]
Could not locate an unused uuid for hidden state formula owner, last ownerUID attempted: %@
-[TSTHiddenStateExtent remapTableUIDsInFormulasWithMap:calcEngine:]
_filterSet
-[TSTHiddenStateExtent p_calculateTopOrBottomThresholdWithCalcEngine:formulaCoord:isTop:keyScale:]
Unexpected key scale found: %d
-[TSTHiddenStateExtent p_createThresholdCellValue:locale:]
Unexpected threshold value type found: %d
-[TSTHiddenStateExtent evaluateFormulaAt:withCalcEngine:recalcOptions:]
should have nil _rewrittenFilterSet
No predicate found for coordinate: %@
Unexpected predicate type found when calculating threshold: %d
v24@?0q8^B16
v24@?0r^{TSUIndexRange=qq}8^B16
-[TSTHiddenStateExtent setFilterSet:]
filterset should be in geometric form
v24@?0@"TSTEphemeralFilter"8^B16
hiddenStateExtentUid
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_hiddenStateExtentUid
forRows
TB,R,N,V_forRows
anyHidden
anyUserHidden
anyCollapsed
collapsedGroupUids
T@"TSUUUIDSet",R,N,V_collapsedGroupUids
T@"NSArray",R,N,V_thresholdCellValues
numberOfHidden
numberOfUserHidden
UInt16 TSTCellStorageSizePreBNC(TSTCellStoragePreBNC *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellStorage_Deprecated.mm
BOOL TSTCellStorageVersionCheckPreBNC(TSTCellStoragePreBNC *)
Can't parse cell storage header version %d as PreBNC!
void TSTV1CellStorageToCell(TSTV1CellStorage *, TSTCell_PreBNC *__strong)
wrong version of the storage used here
Failed to process all storage elements in TSTV1CellStorageToCell! Starting flags:%u Final flags:%u
void TSTV3CellStorageToCell(TSTV3CellStorage *, TSTCell_PreBNC *__strong)
Failed to process all storage elements in TSTV3CellStorageToCell! Starting flags:%u Final flags:%u Starting format flags:%u Final format flags:%u
void TSTCellStorageToCell_PreBNC(TSTCellStoragePreBNC *, TSTCell_PreBNC *__strong)
Failed to process all storage elements in TSTCellStorageToCell! Starting flags:%u Final flags:%u Starting format flags:%u Final format flags:%u
UInt16 p_OffsetForFormatInStoragePreBNC(TSTCellStoragePreBNC *, TSTCellStorageFormatFlagsPreBNC)
Can't get offset for unknown element 0x%02x!
Fatal Assertion failure: %{public}s %{public}s:%d Can't get offset for unknown element 0x%02x!
UInt16 p_OffsetForElementInStorage(TSTCellStoragePreBNC *, TSTCellStorageHeaderFlagsPreBNC)
void p_TSTCellToCellStoragePreBNC(TSTCell *__strong, TSTCellStoragePreBNC *, TSTNineKeyStructPreBNC *)
Failed to process all storage elements in TSTCellToCellStorage! Starting flags:%u Final flags:%u Starting format flags:%u Final format flags:%u
TSTMergeOwnerDetailedLogCat
-[TSTMergeOwner initWithTableModel:ownerUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTMergeOwner.mm
valid ownerUID is required
-[TSTMergeOwner mergeIndexesForRange:]
The tableModel must be set on the mergeOwner before this API can be used.
v32@?0{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}8^B24
-[TSTMergeOwner p_shrinkMergesAtIndexes:intersectedByBaseRegion:]
_calculationEngine
-[TSTMergeOwner mergeActionForBaseCellRegion:nonOriginPartialsOnly:]
-[TSTMergeOwner mergeActionForBaseCellRegion:nonOriginPartialsOnly:]_block_invoke_2
Merge Owner: Expected to always get a formula at index: %lu
-[TSTMergeOwner isValidMergeRange:]
_tableModel
-[TSTMergeOwner insertBaseMergeRange:]
-[TSTMergeOwner removeBaseMergeRange:]
Unexpectedly not just removing one range
-[TSTMergeOwner performActionReturningInverse:]
Invalid merge action
-[TSTMergeOwner removeReturningInverseForBaseCellRegion:]
-[TSTMergeOwner shrinkReturningInverseForBaseCellRegion:]
-[TSTMergeOwner p_growRangeFrom:toDesired:]
-[TSTMergeOwner p_growReturningInverseForAction:]
-[TSTMergeOwner rewriteMergesForRemovedRange:uids:isRows:]
-[TSTMergeOwner rewriteMergesForRemovedRange:uids:isRows:]_block_invoke
We should not have a merge origin that needs moving inside the range to delete.
-[TSTMergeOwner rewriteMergesForInsertedRange:uids:isRows:]
mergeRangeCache
T@"TSTMergeRangeCache",&,N,V_mergeRangeCache
needsMergeCacheLoad
TB,N,V_needsMergeCacheLoad
T@"TSTTableModel",R,W,N,V_tableModel
formulaStore
T@"TSTFormulaStore",&,N,V_formulaStore
mergeChangeDistributor
T@"TSTMergeChangeDistributor",&,N,V_mergeChangeDistributor
mergeOriginsMap
Tr^{unordered_map<TSUModelCellCoord, TSUModelCellCoord, std::__1::hash<TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, std::__1::allocator<std::__1::pair<const TSUModelCellCoord, TSUModelCellCoord> > >={__hash_table<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true>, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true> >=f}}},R,N,V_mergeOriginsMap
reverseOriginsMap
Tr^{unordered_map<TSUModelCellCoord, TSUModelCellCoord, std::__1::hash<TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, std::__1::allocator<std::__1::pair<const TSUModelCellCoord, TSUModelCellCoord> > >={__hash_table<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true>, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true> >=f}}},R,N,V_reverseOriginsMap
<%@: %p>
+[TSTCellSpec interactionTypeForShimControlFormatType:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellSpec.mm
Unconvertible format type.
+[TSTCellSpec shimControlFormatTypeForInteractionType:]
Unconvertible interaction type.
hasTSCEFormula
isControl
TSTCellInteractionTypeValueEditing
TSTCellInteractionTypeFormulaEditing
TSTCellInteractionTypeStock
TSTCellInteractionTypeStepper
TSTCellInteractionTypeRating
TSTCellInteractionTypePopup
TSTCellInteractionTypeToggle
TSTCellInteractionTypeCategorySummary
-[TSTSortRuleReferenceTracker p_columnForTrackedReference:]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTSortRuleReferenceTracker.mm
Ranges should be one column!
v24@?0r^{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}C}8^B16
-[TSTSortRuleReferenceTracker updateForSortRules:]
Couldn't track reference!
references
T@"NSMutableSet",&,N,V_references
referenceTracker
T@"TSCEReferenceTracker",&,N,V_referenceTracker
sourceCellRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_sourceCellRange
targetCellRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_targetCellRange
TSTMasterLayoutDidChangeEmptyFilteredState
cell id to wp column $
dup $
temp wp column $
master layout concurrent queue
table fonts and metric cache
<%@:%p "%@" range:%@ dynamic_mode:%@ >
TSTCellRange TSTMasterLayoutGetRangeForHint(TSTMasterLayout *__strong, TSTLayoutHint *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTMasterLayout.mm
-[TSTMasterLayout numberOfRows]
Size invariants violated by dynamic add/remove
-[TSTMasterLayout numberOfColumns]
B32@?0{TSUCellRect={TSUCellCoord=ISBB}{?=II}}8^B24
d8@?0
B24@?0@8^B16
void TSTMasterLayoutDynamicResizeSave(TSTMasterLayout *__strong, BOOL *, TSTCellRange *, CGFloat *, BOOL *, TSTCellRange *, CGFloat *)
resizingColumns
resizeColumnRange
resizeColumnAdjustment
resizingRows
resizeRowRange
resizeRowAdjustment
void TSTMasterLayoutDynamicResizeRestore(TSTMasterLayout *__strong, BOOL, TSTCellRange, CGFloat, BOOL, TSTCellRange, CGFloat)
v32@?0@"TSTChangeDescriptor"8Q16^B24
v76@?0{TSUCellRect={TSUCellCoord=ISBB}{?=II}}8d24{UIEdgeInsets=dddd}32B64^B68
-[TSTMasterLayout p_validateFittingInfoWithCellRangeWorker:widthHeightCollection:containsMerges:validationBundle:]_block_invoke
this layout pass should be only merge cells
v40@?0@"TSWPCharacterStyle"8{_NSRange=QQ}16^B32
-[TSTMasterLayout p_containsGradientThatFillsContainerInStyle:]
style must be character or paragraph.
@"TSTWidthHeightCollection"24@?0{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}8
v24@?0@"<TSTCellIteratorData>"8@"TSTWidthHeightCollection"16
-[TSTMasterLayout validateCellForDrawing:cell:contents:wrap:verticalAlignment:padding:layoutCacheFlags:pageNumber:pageCount:]
Trying to draw merged cell (%@) other than origin (%@).
-[TSTMasterLayout measureWithLayoutState:]
stringContents
fontInfoCacheEntry
v24@?0@"TSTCellStateForLayout"8^B16
-[TSTMasterLayout unwrappedFittingWidthsForColumnInCellRegionWorker:]_block_invoke
-[TSTMasterLayout formattedDataParagraphStylePropertyMapForCell:atCellID:]
Trying create a text engine for a merged cell other than origin.
cellIDToWPColumnCache
T@"TSTWPColumnCache",&,N,V_cellIDToWPColumnCache
dupContentCache
T@"TSTDupContentCache",&,N,V_dupContentCache
tempWPColumnCache
T@"TSTWPColumnCache",&,N,V_tempWPColumnCache
widthHeightCache
T@"TSTWidthHeightCache",&,N,V_widthHeightCache
hiddenRowsColumnsCache
T@"TSTHiddenRowsColumnsCache",&,N,V_hiddenRowsColumnsCache
fontInfoCache
T@"TSTFontInfoCache",&,N,V_fontInfoCache
layoutValidateQueue
T@"TSUWidthLimitedQueue",&,N,V_layoutValidateQueue
layoutMeasureQueue
T@"TSUWidthLimitedQueue",&,N,V_layoutMeasureQueue
layoutConcurrentQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_layoutConcurrentQueue
strokesDefaultVendor
T@"TSTStrokeDefaultVendor",&,N,V_strokesDefaultVendor
T@"NSPointerArray",&,N,V_topRowStrokes
T@"NSPointerArray",&,N,V_bottomRowStrokes
T@"NSPointerArray",&,N,V_leftColumnStrokes
T@"NSPointerArray",&,N,V_rightColumnStrokes
spillStrokeColumns
T@"TSTConcurrentMutableIndexSet",&,N,V_spillStrokeColumns
cellRegionForClearedMergeStrokes
T@"TSTCellRegion",&,N,V_cellRegionForClearedMergeStrokes
columnToStrokeWidthCache
T@"TSTStrokeWidthCache",&,N,V_columnToStrokeWidthCache
rowToStrokeHeightCache
T@"TSTStrokeWidthCache",&,N,V_rowToStrokeHeightCache
paraStyleToHeightCache
T@"TSTRWRetainedPointerKeyDictionary",&,N,V_paraStyleToHeightCache
tableNameBounds
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_tableNameBounds
cachedTableNameHeight
Td,N,V_cachedTableNameHeight
tableNameHeightValid
TB,N,V_tableNameHeightValid
cachedNumberOfColumns
TI,N,V_cachedNumberOfColumns
cachedNumberOfRows
TI,N,V_cachedNumberOfRows
cachedNumberOfHeaderColumns
TI,N,V_cachedNumberOfHeaderColumns
cachedNumberOfHeaderRows
TI,N,V_cachedNumberOfHeaderRows
cachedNumberOfFooterRows
TI,N,V_cachedNumberOfFooterRows
cachedMaxNumberOfColumns
TQ,N,V_cachedMaxNumberOfColumns
cachedMaxNumberOfRows
TQ,N,V_cachedMaxNumberOfRows
bandedFillIsValid
TB,N,V_bandedFillIsValid
useBandedFill
TB,N,V_useBandedFill
bandedFillObject
T@"TSDFill",&,N,V_bandedFillObject
tableRowsBehavior
Ti,N,V_tableRowsBehavior
tableDefaultFontHeightsAreValid
TB,N,V_tableDefaultFontHeightsAreValid
contentReadingThreads
T@"NSMutableSet",&,N,V_contentReadingThreads
emptyFilteredTable
TB,N,V_emptyFilteredTable
changeDescriptors
T@"NSMutableArray",&,N,V_changeDescriptors
isGrouped
TB,N,V_isGrouped
inDynamicLayoutMode
TB,N,GisInDynamicLayoutMode,V_inDynamicLayoutMode
dynamicLayoutParticipants
T@"NSMutableSet",&,N,V_dynamicLayoutParticipants
dynamicLayout
T@"TSTLayout",&,N,V_dynamicLayout
dynamicAddOrRemoveColumnElementSize
Td,N,V_dynamicAddOrRemoveColumnElementSize
dynamicAddOrRemoveRowElementSize
Td,N,V_dynamicAddOrRemoveRowElementSize
dynamicBandedFill
TB,N,V_dynamicBandedFill
dynamicBandedFillSetting
TB,N,V_dynamicBandedFillSetting
dynamicColumnAdjustment
Ti,N,V_dynamicColumnAdjustment
dynamicColumnTabSize
Td,N,V_dynamicColumnTabSize
dynamicContentDelegate
T@"<TSTLayoutDynamicContentProtocol>",&,N,V_dynamicContentDelegate
dynamicFontColor
T@"TSUColor",&,N,V_dynamicFontColor
dynamicFontColorCellRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_dynamicFontColorCellRange
dynamicHidingContent
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_dynamicHidingContent
dynamicHidingRowsCols
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_dynamicHidingRowsCols
dynamicHidingRowsColsDirection
Tq,N,V_dynamicHidingRowsColsDirection
dynamicHidingText
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_dynamicHidingText
dynamicRemovingText
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_dynamicRemovingText
dynamicInfoGeometry
T@"TSDInfoGeometry",&,N,V_dynamicInfoGeometry
dynamicRepressFrozenHeaderRows
TB,N,V_dynamicRepressFrozenHeaderRows
dynamicRepressFrozenHeaderColumns
TB,N,V_dynamicRepressFrozenHeaderColumns
dynamicResizeInfo
T@"TSTLayoutDynamicResizeInfo",&,N,V_dynamicResizeInfo
dynamicResizingColumns
TB,N,V_dynamicResizingColumns
dynamicResizingColumnRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_dynamicResizingColumnRange
dynamicResizingColumnAdjustment
Td,N,V_dynamicResizingColumnAdjustment
dynamicResizingRows
TB,N,V_dynamicResizingRows
dynamicResizingRowRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_dynamicResizingRowRange
dynamicResizingRowAdjustment
Td,N,V_dynamicResizingRowAdjustment
dynamicRevealingRowsCols
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_dynamicRevealingRowsCols
dynamicRevealingRowsColsDirection
Tq,N,V_dynamicRevealingRowsColsDirection
dynamicRowAdjustment
Ti,N,V_dynamicRowAdjustment
dynamicRowTabSize
Td,N,V_dynamicRowTabSize
dynamicSelection
T@"TSTCellSelection",&,N,V_dynamicSelection
dynamicTableNameResize
Td,N,V_dynamicTableNameResize
dynamicSuppressingConditionalStylesCellID
T{TSUCellCoord=ISBB},N,V_dynamicSuppressingConditionalStylesCellID
dynamicCellFillDelegate
T@"<TSTLayoutDynamicCellFillProtocol>",&,N,V_dynamicCellFillDelegate
defaultColumnStyle
T@"TSWPColumnStyle",R,N,V_defaultColumnStyle
T@"TSKChangeNotifier",W,N,V_changeNotifier
maxConcurrentTasks
TI,N,V_maxConcurrentTasks
numCellsPerTask
TI,N,V_numCellsPerTask
tableEnvironment
Ti,N,V_tableEnvironment
dynamicRepResize
TB,N,V_dynamicRepResize
dynamicWidthResize
Td,N,V_dynamicWidthResize
dynamicHeightResize
Td,N,V_dynamicHeightResize
dynamicSavedLayoutGeometry
T@"TSDLayoutGeometry",C,N,V_dynamicSavedLayoutGeometry
mergeRangesForLayoutPass
T@"TSTMergeRangeSortedSet",&,N,V_mergeRangesForLayoutPass
processHiddenRowsForExport
TB,N,V_processHiddenRowsForExport
numberOfNonHiddenFooterRows
categoryColumnsCellRange
entireHeaderColumnsCellRange
entireActualHeaderColumnsCellRange
entireHeaderRowsCellRange
entireFooterRowsCellRange
entireBodyRowsCellRange
entireBodyCellRange
visibleRowIndices
visibleColumnIndices
hiddenRowIndices
hiddenColumnIndices
hasActiveFilters
#REF!:#REF!
-[TSTLayoutHint copyForArchiving]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTLayoutHint.mm
copy
-[TSTLayoutHint overlapsWithSelectionPath:]
selectionPath
B16@?0@"TSDDrawableSelection"8
-[TSTLayoutHint overlapsWithSelectionPath:]_block_invoke_2
Invalid cell selection index %lu for %@
B16@?0@"TSTCellSelection"8
ID: %@ 
Range: %@ 
TB,N,VmIsValid
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,VmCellRange
cacheHintID
T{TSUCellCoord=ISBB},N,VmCacheHintID
partitioningPass
T@"NSNumber",&,N,VmPartitioningPass
partitionPosition
TI,N,VmPartitionPosition
maximumSize
T{CGSize=dd},N,VmMaximumSize
effectiveSize
T{CGSize=dd},N,VmEffectiveSize
T@"TSTLayout",N,VmLayout
horizontal
TB,N,VmHorizontal
hint
T@"<TSDHint>",&,N
T@"TSTLayoutHint",&,N,VmHint
-[TSWPParagraphStyle(CellDiffAdditions) objectByRemovingPropertiesInMap:addingPropertiesInMap:updateInverseResetPropertyMap:updateInverseSetPropertyMap:optionalConcurrentStylesheet:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSWPParagraphStyle+CellDiffAdditions.m
Can't specify both a text style and a text style change at the same time.
Stylesheet should not be nil. Attempting repair.
No usable style or stylesheet to vary against!
v32@?0i8C12@16^B24
-[TSTTablePartitioner initWithInfo:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTablePartitioner.m
Incorrect info class in the table partitioner!
-[TSTTablePartitioner measureCellRangeForNextPartitionOfSize:previousHint:horizontally:]
Partitioner can't continue from an invalid range.
Partitioner measured an invalid range.
-[TSTTablePartitioner nextHintForSize:parentLayout:previousHint:horizontally:outFinished:]
previousHint must be nil, or of type TSTLayoutHint.
Hint is for the wrong table info.
-[TSTTablePartitioner p_didFinishPartitioningHint:horizontally:]
Horizontal partitioning went beyond the table bounds!
Vertical partitioning went beyond the table bounds!
-[TSTTablePartitioner partitioningPassForFirstPartitionSize:]
partitioningPassForFirstPartitionSize: Invalid partition size
(%@,%@)
isPrintingCanvas
shouldSuppressBackgrounds
scaledLayout
T@"TSTLayout",R,N
T@"TSTTableInfo",R,N,VmTableInfo
inlineTableWidth
Td,R,N,VmFirstPartitionWidth
T{CGSize=dd},N,VmScaleToFit
scaleIsValid
infoGeometry
T@"TSDInfoGeometry",C,N,VmInfoGeometry
T@"TSTLayout",W,N,V_layout
space
T@"TSTLayoutSpace",&,N,V_space
frozenHeaderColumnsSpace
T@"TSTLayoutSpace",&,N,V_frozenHeaderColumnsSpace
frozenHeaderRowsSpace
T@"TSTLayoutSpace",&,N,V_frozenHeaderRowsSpace
frozenHeaderCornerSpace
T@"TSTLayoutSpace",&,N,V_frozenHeaderCornerSpace
repeatHeaderColumnsSpace
T@"TSTLayoutSpace",&,N,V_repeatHeaderColumnsSpace
repeatHeaderRowsSpace
T@"TSTLayoutSpace",&,N,V_repeatHeaderRowsSpace
repeatHeaderCornerSpace
T@"TSTLayoutSpace",&,N,V_repeatHeaderCornerSpace
-[TSTTableDataListSegment split]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableDataListSegment.mm
Segment ranges are discontiguous!
Fatal Assertion failure: %{public}s %{public}s:%d Got an object with a bad key!
-[TSTTableDataListSegment objectAtIndexedSubscript:]
Got an object with a bad key!
Tables/DataList/Segment
v16@?0@"TSTTableDataObject"8
-[TSTTableDataListSegment loadObjectsFromDataListArchive:unarchiver:]
Need to set up a segment before doing an upgrade-type load of it!
keys
T@"NSMutableIndexSet",&,N,V_keys
Ti,R,N,V_listType
estimatedByteSize
TQ,R,N,V_estimatedByteSize
keyRange
T{_NSRange=QQ},N,V_keyRange
shouldSplit
v40@?0{TSUCellRect={TSUCellCoord=ISBB}{?=II}}8@24Q32
forcingRegion
T@"TSTCellRegion",&,N,V_forcingRegion
arrayOfChunkRocks
T@"NSPointerArray",&,N,V_arrayOfChunkRocks
flags
TQ,N,V_flags
searchFlags
TQ,N,V_searchFlags
clampingViewRect
T{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}},N,V_clampingViewRect
cellsPerSubRegion
TQ,N,V_cellsPerSubRegion
first
T@,&,N,V_first
second
T@,&,N,V_second
third
T@,&,N,V_third
fourth
T@,&,N,V_fourth
-[TSTMergeAction verify]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTMergeAction.mm
%@ has %lu covering ranges and %lu formulas with %lu indexes
Invalid action
Insert action
Remove action
Shrink action
Grow action
+[TSTMergeAction cellUIDRangeFromMergeFormula:calcEngine:]
merge tractlist is invalid
Ti,N,V_type
uidRanges
Tr^{vector<TSU::UUIDRect<TSP::UUIDRect>, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}^{UUIDRect<TSP::UUIDRect>}{__compressed_pair<TSU::UUIDRect<TSP::UUIDRect> *, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}}},N,V_uidRanges
mergeFormulas
Tr^{vector<TSCEFormula, std::__1::allocator<TSCEFormula> >=^{TSCEFormula}^{TSCEFormula}{__compressed_pair<TSCEFormula *, std::__1::allocator<TSCEFormula> >=^{TSCEFormula}}},N,V_mergeFormulas
mergeFormulaIndexes
Tr^{vector<unsigned long, std::__1::allocator<unsigned long> >=^Q^Q{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >=^Q}},N,V_mergeFormulaIndexes
hasMergeFormulas
hasMultiRowMerge
-[TSTCellUIDList pruneCellUIDListAgainstTable:behavior:usingBlock:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellUIDList.mm
Oh in what case do we need to prune away base cells?
compressedSize
TQ,R,N,V_compressedSize
queue
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
-[TSTCellUIDIterator p_nextCellRefIdWithUIDIndexList:UIDs:index:remainDup:lastDiffPos:recentResults:]
Unexpected back reference value.
Unexpected ID reference value.
cellUIDList
T@"TSTCellUIDList",&,N,V_cellUIDList
index
TQ,N,V_index
rowIndex
TQ,N,V_rowIndex
columnIndex
TQ,N,V_columnIndex
rowRemainDup
TQ,N,V_rowRemainDup
columnRemainDup
TQ,N,V_columnRemainDup
lastRowDiffPos
TQ,N,V_lastRowDiffPos
lastColumnDiffPos
TQ,N,V_lastColumnDiffPos
cellUID
T{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}},N,V_cellUID
notifyType
Ti,N,V_notifyType
T@"TSTGroupNode",&,N,V_groupNode
rowUID
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_rowUID
-[TSTTableTileGroup init]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableTileGroup.mm
-[TSTTableTileGroup _tileForLazyReference:]
Fatal Assertion failure: %{public}s %{public}s:%d Failed to load a lazy table tile in TSTTableTileGroup: %@ with error: errorClass=%{public}@, domain=%{public}@, code=%zd, %{public}@hints=%{public}@ (%@) 
Failed to load a lazy table tile in TSTTableTileGroup: %@ with error: errorClass=%{public}@, domain=%{public}@, code=%zd, %{public}@hints=%{public}@ (%@) 
startingTileID
TQ,N,V_startingTileID
Fatal Assertion failure: %{public}s %{public}s:%d Tile ID too low for this group!
NSUInteger _indexForTileID(TSTTableTileID, TSTTableTileID)
Tile ID too low for this group!
Fatal Assertion failure: %{public}s %{public}s:%d Tile ID too high for this group!
Tile ID too high for this group!
-[TSTMergeRegionMap saveToArchiver:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTMergeRegionMap.mm
this should never be called!
mergedRects
Tr^{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}},R,N,V_mergedRects
-[TSTPencilAnnotationOwner addAnnotation:withFormula:atIndex:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTPencilAnnotationOwner.mm
Adding a formula at an index that already has an annotation
-[TSTPencilAnnotationOwner addAnnotation:withFormulaObject:atIndex:]
-[TSTPencilAnnotationOwner removeAnnotation:]
Annotations and formulas out of sync!
v32@?0@"TSTPencilAnnotation"8Q16^B24
Fatal Assertion failure: %{public}s %{public}s:%d Attempting to remove annotation at bad index %tu!
-[TSTPencilAnnotationOwner removeAnnotationAtIndex:]
Attempting to remove annotation at bad index %tu!
-[TSTPencilAnnotationOwner cellRangeForAnnotation:]
Unexpected merge range!
-[TSTPencilAnnotationOwner enumerateAnnotationsWithBlock:]
-[TSTPencilAnnotationOwner enumerateAnnotationsWithBlock:]_block_invoke
Unexpected table info on this annotation.
-[TSTPencilAnnotationOwner _enumerateAnnotationsAndFormulasWithIndexes:block:]_block_invoke
-[TSTPencilAnnotationOwner _annotationsForIndexes:]_block_invoke
annotation
-[TSTPencilAnnotationOwner _indexesForRange:startingOnly:]
self.tableModel
self.calculationEngine
-[TSTPencilAnnotationOwner _indexesForRows:]
-[TSTPencilAnnotationOwner _indexesForRows:]_block_invoke
How do we have a zero-row range here?
-[TSTPencilAnnotationOwner _enumerateIndexesIntersectingRegion:block:]
v48@?0@"TSTCellRegion"8r^{TSUCellCoord=ISBB}16Q24{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}32
-[TSTPencilAnnotationOwner initWithArchive:unarchiver:forTableModel:]
Mismatched number of annotations and formulas.
TSKCellPencilAnnotations
T@"TSCECalculationEngine",R,W,N,V_calculationEngine
T@"TSTFormulaStore",R,N,V_formulaStore
annotations
T@"TSUSparseArray",&,N,V_annotations
v32@?0{TSUCellCoord=ISBB}8d16^B24
v28@?0S8d12^B20
-[TSTWidthHeightCache p_insertColumns:atColumn:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTWidthHeightCache.mm
attempt to insert column range beyond column width cache max columns; truncating
-[TSTWidthHeightCache p_insertRows:atRow:]
attempt to insert row range beyond row height cache max rows; truncating
-[TSTWidthHeightCache p_moveRowsFrom:toRow:]
destination cannot be within the source range.
src range for move exceeds max
dest range for move exceeds max
_rowHeights is not sized correctly before move
-[TSTWidthHeightCache p_moveColumnsFrom:toColumn:]
_columnModelWidths is not sized correctly before move
v16@?0I8I12
-[TSTWidthHeightCache resetFittingRowHeightsStartingWith:upToRow:]
startRow should be before endRow
-[TSTWidthHeightCache validateChangeDescriptors:tableInfo:numberOfRows:numberOfColumns:]
in row delete, fitting/model row caches should match before value
in row delete, fitting/model row caches should match after value
in row insert, fitting/model row caches should match before value
in col delete, model column cache should match before value
in col delete, model column cache should match after value
in col insert, model column cache should match before value
in col insert, model column cache should match after value
-[TSTWidthHeightCache validateRowsNeedingFittingInfo:validationRegion:masterLayout:]
rowsNeedingFittingInfo
needsToBeArchived
TB,N,V_needsToBeArchived
void TSTWidthHeightCacheFittingInfo<4>::set(CGFloat, TSUColumnOrRowIndex) [FittingSizeCount = 4]
setting wh entry with index already present
changeDescriptor
Ti,N,V_changeDescriptor
T@"TSTCellRegion",&,N,V_cellRegion
strokeRegion
T@"TSTCellRegion",&,N,V_strokeRegion
referenceIdentifiers
T@"NSHashTable",&,N,V_referenceIdentifiers
shuffleMapping
T@"TSKShuffleMapping",&,N,V_shuffleMapping
T@"NSSet",&,N,V_annotations
beforeCountValue
TQ,N,V_beforeCountValue
afterCountValue
TQ,N,V_afterCountValue
hasBeforeAfterCounts
strokeRange
processedByMasterLayout
TB,N,V_processedByMasterLayout
maxWidthForChildren
shouldHyphenate
Td,N,VmMaxWidthForChildren
T@"TSULocale",R,N,VmLocale
TB,R,N,VmShouldHyphenate
-[TSTTableSortOrder initWithRules:type:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableSortOrder.mm
sortRules
B24@?0@"TSTTableSortRule"8@"NSDictionary"16
cachedIndexes
T@"NSIndexSet",&,N,V_cachedIndexes
rules
T@"NSArray",R,N,V_rules
baseColumnIndices
-[TSTLayoutTask writeToMasterLayoutCaches:]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTLayoutTask.mm
cell height should be > 0
T@"TSTMasterLayout",R,W,N,V_masterLayout
cellStatesToLayout
T@"NSMutableArray",R,N,V_cellStatesToLayout
numberOfCellStates
-[TSTConcurrentMutableCellUIDSet reapAccumulatedCellRegionWithTable:]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTConcurrentMutableCellUIDSet.mm
Search not found: %{public}@
-[TSTCellStateForLayout hasContent]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellStateForLayout.m
expected nil value for '%{public}s'
TSUCastAsClass(TSWPColumn, [self cellContents])
modelCellID
T{TSUCellCoord=ISBB},N,V_modelCellID
T@"TSTCell",C,N,V_cell
layoutMergeRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_layoutMergeRange
cellContents
T@,&,N,V_cellContents
minSize
T{CGSize=dd},N,V_minSize
maxSize
T{CGSize=dd},N,V_maxSize
Td,N,V_maxWidthForChildren
paddingInsets
T{UIEdgeInsets=dddd},N,V_paddingInsets
verticalAlignment
Ti,N,V_verticalAlignment
cellPropsRowHeight
TB,N,V_cellPropsRowHeight
cellWraps
TB,N,V_cellWraps
needWPColumn
TB,N,V_needWPColumn
shouldFastPathMeasureFitWidth
TB,N,V_shouldFastPathMeasureFitWidth
forDrawing
TB,N,V_forDrawing
inDynamicLayout
TB,N,V_inDynamicLayout
layoutCacheFlags
Ti,N,V_layoutCacheFlags
sizeOfText
T{CGSize=dd},N,V_sizeOfText
keyVal
T@"TSTLayoutContentCachedKey",&,N,V_keyVal
wpColumn
T@"TSWPColumn",&,N,V_wpColumn
TQ,N,V_pageNumber
TQ,N,V_pageCount
<%@ %p>: isActive:%@, expressionNode:%@
T@"TSTExpressionNode",&,N,VmExpressionNode
active
TB,N,GisActive,VmActive
selected
TB,N,GisSelected,VmSelected
highlighted
TB,N,GisHighlighted,VmHighlighted
neverShowsMenu
TB,N,GneverShowsMenu,VmNeverShowsMenu
cachedImage
T^{CGImage=},N
cachedImageScreenScale
Td,N,VmCachedImageScreenScale
<%@ %p>: completionText '%@', prefixRange %@
completionText
T@"NSString",&,N,V_completionText
prefixRange
T{_NSRange=QQ},N,V_prefixRange
renderAsTokenType
Ti,R,N,V_renderAsTokenType
editingReferenceNode
T@"TSTReferenceNode",&,N,V_editingReferenceNode
referenceColor
T@"TSUColor",&,N,V_referenceColor
canvasReferenceProvider
T@"<TSTCanvasReferenceProvider>",W,N,V_canvasReferenceProvider
position
TQ,N,V_position
-[TSTStrokeLayer strokeLayerAtIndex:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTStrokeLayer.mm
should never call this with index > 0
columnOrRowIndex
TI,N,V_columnOrRowIndex
-[TSTMutableStrokeLayer applyStroke:atIndexes:order:applyStroke:atIndexes:order:applyStroke:atIndexes:order:applyStroke:atIndexes:order:applyStroke:atIndexes:order:]
this interface can't be used on complex stroke layers
bodyIndexes
TI,D,N
style
T@"TSSStyle",&,N,V_style
propertyMap
T@"TSSPropertyMap",&,N,V_propertyMap
-[TSTConcurrentStylesheet variationOfStyle:propertyMap:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTConcurrentStylesheet.mm
stylesheet used should be same as the one owning the style
stylesheet
T@"TSSStylesheet",&,N,V_stylesheet
repairOrReplaceMap
T@"NSMapTable",&,N,V_repairOrReplaceMap
variationMap
T@"NSMapTable",&,N,V_variationMap
All at Once
By Row
By Column
By Cell
By Row Content
By Column Content
By Cell Content
By Row Reverse
By Row Content Reverse
By Column Reverse
By Column Content Reverse
By Cell Reverse
By Cell Content Reverse
+[TSTAnimation textureDeliveryStyleFromDeliveryString:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTAnimation.mm
bad delivery string to delivery style mapping
T@"TSTLayout",W,N,VmLayout
stageCount
TQ,R,VmStageCount
stage
TQ,R,VmStage
final
TB,R,VmFinal
showsTableChrome
TB,VmShowsTableChrome
showsOverlayLayers
TB,VmShowsOverlayLayers
expandBackgroundFill
TB,VmExpandBackgroundFill
drawsBlackAndWhite
TB,VmDrawsBlackAndWhite
cellRangeCount
drawTableName
drawTableBackground
drawCellBackground
drawCellContent
clipStrokes
drawStrokes
enabled
textMeasurerBundle
T@"TSWPTextMeasurerBundle",&,N,V_textMeasurerBundle
cache
T@"NSMapTable",&,N,V_cache
propertyMapToTextStyleMap
T@"NSMapTable",&,N,V_propertyMapToTextStyleMap
v32@?0r^{UUIDCoord<TSP::UUIDCoord>={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16^B24
void TSTHeaderPerTable::addHeaderUid(const TSUUUID &, BOOL)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTHeaderNameMgr.mm
_headerRowUids
size
-[TSTHeaderNameMgrTile saveToArchiver:]
_headerNameMgr
firstFragment
T@"NSString",&,N,V_firstFragment
lastFragment
T@"NSString",&,N,V_lastFragment
-[TSTHeaderNameSubset headerCellsMatchingPrefix:]
Warning: asking for prefix matching, but this search result didn't specify prefixes when it was created
%@ for '%@'
limitedToTableUID
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},R,N,V_limitedToTableUID
includesPrefixes
TB,N,V_includesPrefixes
originalFullReferenceString
T@"NSString",R,N,V_originalFullReferenceString
com.apple.Numbers.TST.HeaderNameMgr
v24@?0r^{TSUCellCoord=ISBB}8^B16
-[TSTHeaderNameMgr findTileForString:findClosest:foundAtOffset:]
midTile
-[TSTHeaderNameMgr handleFullTile:]
Could NOT split tile of %lu size for some reason
-[TSTHeaderNameMgr spanningRangeForHeaderCell:]
tracked header reference is not in a header?  (%@ vs body %@)
@"TSTIndexingChunk"24@?0{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}8
v24@?0@"<TSTCellIteratorData>"8@"TSTIndexingChunk"16
v24@?0@"NSString"8^B16
T@"TSCECalculationEngine",R,N
isClosing
-[TSTCellDiffMap initWithContext:cellDiffArray:cellUIDList:uidBased:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellDiffMap.mm
Nil cellDiffArray
Nil cellUIDList
unexpected diff/uidlist ratio
-[TSTCellDiffMap addCellDiff:andCellUID:avoidCopy:]
cannot add cellUIDs in cellID mode
can't add cells to a one-to-many mapping
-[TSTCellDiffMap addCellDiff:andCellID:avoidCopy:]
cannot add cellIDs in UID mode
-[TSTCellDiffMap addCellDiffMap:]
both maps should match isUIDBased state
-[TSTCellDiffMap addCellDiffs:atCellUIDs:]
map should be UIDBased
cellDiffs and cellUIDList should match in length
-[TSTCellDiffMap appendCellDiffMap:]
Trying to append a cellID cellDiffMap to a uidBased diff map. Aborting.
v64@?0@"TSTCellDiff"8{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16Q48^B56
Trying to append a uidBased cellDiffMap to a cellID diff map. Aborting.
v40@?0@"TSTCellDiff"8{TSUCellCoord=ISBB}16Q24^B32
B24@?0r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}8Q16
B24@?0{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}8
-[TSTCellDiffMap enumerateElementsUsingBlock:]
cannot enumerate cellUIDs in cellID mode
-[TSTCellDiffMap enumerateCellIDElementsUsingBlock:]
cannot enumerate cellIDs in UID mode
cellDiffArray
T@"TSTCellDiffArray",&,N,V_cellDiffArray
TB,N,V_containsCellBorderChanges
containsSuppressCustomFormatHandlingProperty
TB,N,V_containsSuppressCustomFormatHandlingProperty
direction
Ti,R,N,V_direction
-[TSTTableViewColumnSortRule encodeToArchive:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableSortRule.mm
TSTTableViewColumnSortRule should never be archived
-[TSTTableViewColumnSortRule initFromArchive:]
TSTTableViewColumnSortRule should never be unarchived
viewColumnIndex
T{TSUViewColumnIndex=S},R,N,V_viewColumnIndex
-[TSTGroupValueTuple groupValueTupleByReplacingValue:atLevel:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTGroupValueTuple.mm
Don't try to replace value for the root
%{public}@: level %d is beyond this tuple's size
%@ [
%@, 
TSTiOSCheckboxChecked6
TSTiOSCheckboxChecked12
TSTiOSCheckboxChecked18
TSTiOSCheckboxChecked24
TSTiOSCheckboxUnchecked6
TSTiOSCheckboxUnchecked12
TSTiOSCheckboxUnchecked18
TSTiOSCheckboxUnchecked24
+[TSTCheckboxRenderer frameWithViewScale:contentFrame:checked:outCheckboxImage:outCheckboxSize:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCheckboxRenderer.m
No checkbox image for rendering!
width
height
vertical
wraps
paragraphStyle
T@"NSString",R,N,VmString
Td,R,N,VmWidth
Td,R,N,VmHeight
T@"TSWPParagraphStyle",R,N,VmParagraphStyle
TB,R,N,VmCellWraps
Ti,R,N,VmValueType
T{UIEdgeInsets=dddd},R,N,VmPaddingInsets
Ti,R,N,VmVerticalAlignment
Ti,R,N,VmWritingDirection
v28@?0I8d12^B20
-[TSTCategoryStoreIterator initWithInfo:region:flags:searchMask:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCategoryStoreIterator.mm
_info.baseTableModel.dataStore
_info.summaryModel.dataStore
searchMask remain 0x%x, should be consumed by this point
-[TSTCategoryStoreIterator dealloc]
iteration should be terminated
-[TSTCategoryStoreIterator updateCellData:]
_baseTile
_baseRow
incomplete map.
cellRef
this is odd case, iterator found cell at this cellID, but then no cellRef
-[TSTCategoryStoreIterator updateFormulaForCellData:]
this is an odd case, iterator found cell at this cellID, but then no cellRef
-[TSTCategoryStoreIterator getNext]
invalid columnUID
should now have a row that intersects the region
couldn't find offset, that's not good.
should now have a valid cellID at this point
info
T@"TSTTableInfo",R,N,V_info
T@"TSTCategoryTranslator",R,N,V_translator
baseDataStore
T@"TSTTableDataStore",R,W,N,V_baseDataStore
baseMap
T@"TSTColumnRowUIDMap",R,W,N,V_baseMap
viewMap
T@"TSTColumnRowUIDMap",R,W,N,V_viewMap
T@"TSTSummaryCellVendor",R,W,N,V_summaryCellVendor
summaryMap
T@"TSTColumnRowUIDMap",R,W,N,V_summaryMap
searchMask
TQ,N,V_searchMask
curRowIndex
TI,N,V_curRowIndex
categoryColumnIndex
TS,R,N,V_categoryColumnIndex
isSummaryRow
TB,N,V_isSummaryRow
isLabelRow
TB,N,V_isLabelRow
TC,N,V_groupLevel
T{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_uuid
baseRowIndex
TI,N,V_baseRowIndex
baseTile
T@"TSTTableTile",&,N,V_baseTile
baseTileRange
T{_NSRange=QQ},N,V_baseTileRange
baseRow
T@"TSTTableTileRowInfo",&,N,V_baseRow
T@"TSTCell",R,N,V_cell
rightToLeft
TB,N,V_rightToLeft
terminated
TB,N,V_terminated
populatedColumnsForGroupLevel1
T@"NSIndexSet",&,N,V_populatedColumnsForGroupLevel1
populatedColumnsForGroupLevel2
T@"NSIndexSet",&,N,V_populatedColumnsForGroupLevel2
populatedColumnsForGroupLevel3
T@"NSIndexSet",&,N,V_populatedColumnsForGroupLevel3
populatedColumnsForGroupLevel4
T@"NSIndexSet",&,N,V_populatedColumnsForGroupLevel4
populatedColumnsForGroupLevel5
T@"NSIndexSet",&,N,V_populatedColumnsForGroupLevel5
viewColumnIndexesInCurrentRow
T@"NSIndexSet",&,N,V_viewColumnIndexesInCurrentRow
-[TSWPStorage(TablesAdditions) hyperlinkCellID]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSWPStorage_TablesAdditions.mm
cell attribute array should not be empty
hyperlinkCellID
T{TSUCellCoord=ISBB},D,N
-[TSTCategoryAggregateFormulaOwner tableInfo]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCategoryAggregateFormulaOwner.mm
-[TSTCategoryAggregateFormulaOwner setTableInfo:]
don't allow overwriting table info pointer, should go from nil -> info
-[TSTCategoryAggregateFormulaOwner evaluateFormulaAt:withCalcEngine:recalcOptions:]
Table has no calc engine. Aborting recalculation.
Tr^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_tableUID
Tr^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},N,V_ownerUID
T@"TSTTableInfo",W,N
-[TSTRichTextPayload initWithContext:storage:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTRichTextPayload.mm
T@"TSWPStorage",&,N,VmStorage
-[TSTSummaryCellVendor getCell:atCellUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTSummaryCellVendor.mm
cell should never be nil
row UID does not resolve
cellUIDMap
T^{map<TSTCellUID, TSTCell *, std::__1::less<TSTCellUID>, std::__1::allocator<std::__1::pair<const TSTCellUID, TSTCell *> > >={__tree<std::__1::__value_type<TSTCellUID, TSTCell *>, std::__1::__map_value_compare<TSTCellUID, std::__1::__value_type<TSTCellUID, TSTCell *>, std::__1::less<TSTCellUID>, true>, std::__1::allocator<std::__1::__value_type<TSTCellUID, TSTCell *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSTCellUID, TSTCell *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSTCellUID, std::__1::__value_type<TSTCellUID, TSTCell *>, std::__1::less<TSTCellUID>, true> >=Q}}},R,N,V_cellUIDMap
hasCustomFormatsToPaste
TB,N,V_hasCustomFormatsToPaste
T@"TSTTableInfo",R,W,N,V_tableInfo
-[TSTTableFilterRule initRuleWhereValuesInTable:inBaseColumn:matchCell:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableFilterRule.mm
Expected a cell with contents to  make a quick filter rule.
TSTTableFilterRule %p: %@
predicate
T@"TSTFormulaPredicate",&,N,V_predicate
doesNotNeedFormulaRewriteForImport
TB,N,V_doesNotNeedFormulaRewriteForImport
-[TSTTableFilterSet p_thresholdComparisonMatchesFilter:withPredicateType:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableFilterSet.mm
Unexpected predicate type found when calculating threshold
-[TSTTableFilterSet rowIsShown:withHiddenStateExtent:withCalcEngine:]
Unexpected threshold value type found
-[TSTTableFilterSet ruleInFilter:atIndex:]
filter index invalid
rule index invalid
-[TSTTableFilterSet filterAtIndex:inTable:]
-[TSTTableFilterSet removeRulesWithAbsoluteIndices:]
invalid rule index passed in
-[TSTTableFilterSet removeRulesWithIndices:inFilter:]
filter index is out of bounds
rule indices are out of bounds
-[TSTTableFilterSet p_addRules:atRuleIndices:inFilter:isNew:]
no rules given
-[TSTTableFilterSet addRules:inFilter:]
-[TSTTableFilterSet replaceRule:atRuleIndex:inFilter:]
-[TSTTableFilterSet enumerateRulesInFilterIndex:usingBlock:]
-[TSTTableFilterSet ruleIndexInFilter:matchingCell:]
-[TSTTableFilterSet numberOfRulesInFilter:]
filterCount
canAddRules
newFilterIndex
filterSetType
needsFormulaRewriteForImport
TB,N,V_needsFormulaRewriteForImport
-[TSTFormulaPredicate initWithPredicateType:arg1:arg2:qualifier1:qualifier2:argumentCellRef:hostCell:calcEngine:forConditionalStyle:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTFormulaPredicate.mm
Conditional styles are only allowed to use arg0 of (+0,+0) relative coordinate
-[TSTFormulaPredicate p_creatorForPeriodBoundaryWithScale:direction:offset:argIndex:earlierBound:isCalPers:hostCell:calcEngine:]
Not a valid date scale
This is expected to be unreachable.
-[TSTFormulaPredicate p_argTypeForNodeTag:argNum:calculationEngine:hostCell:]
A categoryRef as arg 0, I don't think so
-[TSTFormulaPredicate p_setArgumentAt:nodeTag:withDouble:]
%@: Not allowed for argument at position %d
-[TSTFormulaPredicate p_setArgumentAt:nodeTag:withString:]
-[TSTFormulaPredicate p_setArgumentAt:nodeTag:withDate:]
-[TSTFormulaPredicate p_setArgumentAt:nodeTag:withDurationValue:withUnit:]
TSTFormulaPredicate %p: %@
-[TSTFormulaPredicate p_populateMembersFromFormula]
All init methods should have created the NSLock we use here.
-[TSTFormulaPredicate copyByRewritingWithSpec:inOwner:inCellCoordinate:]
Not implemented yet for this type
-[TSTFormulaPredicate upgradeTopAndBottom]
If the columnRef changes size, we need to adjust this, size: %lu Predicate is: %{public}@
predArg1
T@"TSTFormulaPredArg",&,N,VmPredArg1
predArg2
T@"TSTFormulaPredArg",&,N,VmPredArg2
-[TSTArchivedStrokeSelection setSelection:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTArchivedStrokeSelection.mm
Wrong type of class %@ (expected TSTStrokeSelection)
T@"TSKSelection",&,N,VmStrokeSelection
TSTTableBadgeImageCache
void TSTTableBadgeDrawGroupingArrow(TSTTableRep *__strong, CGContextRef, CGRect, TSTCell *__strong, TSTCellID, TSWPVerticalAlignment)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableBadge.m
should only be called on grouping cells
void TSTTableBadgeContentsCenterInfoInit(TSTTableBadgeContentsCenterInfo *, CGFloat, CGFloat, CGFloat, CGFloat, CGFloat, CGFloat)
badgeType
Ti,N,V_badgeType
color
T@"TSUColor",&,N,V_color
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_frame
TSTErrorMessageIcon-2
TSTErrorMessageIcon-4
TSTErrorMessageIcon-8
TSTErrorMessageIcon-16
TSTErrorMessageIcon-32
TSTErrorMessageIcon-64
-[TSTCellRegion regionByTrimmingAroundRowIndices:]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellRegion.mm
-[TSTCellRegion regionByTrimmingAroundColumnIndices:]_block_invoke
-[TSTCellRegion prunedCellRegionAgainstTable:behavior:usingBlock:]
-[TSTCellRegion containsCellRange:]_block_invoke
areaRemaining should be greater than the intersection area
-[TSTCellRegion p_copyFromRegion:]
-[TSTCellRegion p_insertRangeIntoRegion:]
Added range:%{public}@ should never overlap previous range:%{public}@ in region:%{public}@.
<%@ %p boundingbox={ %@ }
 cellRanges={empty}>
 cellRanges={
  { %@ }
boundingCellRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_boundingCellRange
TQ,N,V_cellCount
intersectingColumnsIndexSet
T@"NSIndexSet",&,N,V_intersectingColumnsIndexSet
intersectingRowsIndexSet
T@"NSIndexSet",&,N,V_intersectingRowsIndexSet
firstCellID
T{TSUCellCoord=ISBB},N,V_firstCellID
lastCellID
T{TSUCellCoord=ISBB},N,V_lastCellID
cellRanges
Tr^{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}},R,N,V_cellRanges
isRectangle
boundingTopLeftCellID
boundingBottomRightCellID
numberOfIntersectingColumns
numberOfIntersectingRows
boundingModelCellRect
T{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}},R,N
boundingViewCellRect
T{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}},R,N
-[TSTTableTranslator init]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableTranslator.mm
-[TSTTableTranslator tableStyleAreaForCellID:]
expecting this method to be overridden
-[TSTTableTranslator tableAreaForCellID:]
-[TSTTableTranslator cellValueTypeAtCellID:]
-[TSTTableTranslator defaultCellStyleForCellID:]
-[TSTTableTranslator cellStyleForCellWithEmptyStyleAtCellID:isDefault:]
-[TSTTableTranslator defaultTextStyleForCellID:]
-[TSTTableTranslator textStyleForCellWithEmptyStyleAtCellID:isDefault:]
-[TSTTableTranslator cellStyle:isEqualToDefaultCellStyleForCellID:]
-[TSTTableTranslator textStyle:isEqualToDefaultTextStyleForCellID:]
-[TSTTableTranslator cellStyleAtCellID:isDefault:]
-[TSTTableTranslator textStyleAtCellID:isDefault:]
-[TSTTableTranslator conditionalStyleSetAtCellID:]
-[TSTTableTranslator stringAtCellID:optionalCell:]
-[TSTTableTranslator characterFillAtCellID:optionalCell:]
-[TSTTableTranslator getCell:atCellID:suppressCellBorder:]
-[TSTTableTranslator hasFormulaAtCellID:]
-[TSTTableTranslator formulaAtCellID:]
-[TSTTableTranslator postCommentNotificationForStorage:atViewCellCoord:notificationKey:]
-[TSTTableTranslator commentHostingAtCellID:forCommentStorage:]
-[TSTTableTranslator commentHostingAtCellID:]
-[TSTTableTranslator mergeRangeAtCellID:]
-[TSTTableTranslator mergeOriginForCellID:]
{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}24@?0{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}8
-[TSTTableTranslator cellUIDForSummaryCellCoord:]
no summeries in normal table mode
-[TSTTableTranslator cellExistsAtCellID:]
-[TSTTableTranslator hasCommentAtCellID:]
requires identity mapping from view to model space
-[TSTTableTranslator checkMapsAndAssert:]
TableChecker: Unexpected empty baseMap
-[TSTTableTranslator resetViewMap]
view and base must be the same while uncategorized.
T{TSUViewRowIndex=I},R,N
T{TSUViewColumnIndex=S},R,N
baseTableModel
T@"TSTTableModel",R,N,V_baseTableModel
T@"TSTColumnRowUIDMap",R,N
numberOfPopulatedCells
numberOfComments
T{TSUViewRowIndex=I},N
T{TSUViewColumnIndex=S},N
mergedStrokes
T@"TSTStrokeLayerMergedStack",&,N,V_mergedStrokes
void TSTCellSetCommentStorageClearingID(TSTCell *, TSDCommentStorage *, BOOL)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCell_Deprecated.mm
expected cell comment but didn't get it
-[TSTIdentifierNode initAsCopyOf:intoContext:children:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTIdentifierNode.mm
Unexpected object in initAsCopyOf:... expected TSTIdentifierNode, got %@
-[TSTIdentifierNode buildASTNodeArray:hostCell:symbolTable:]
IdentifierNode shouldn't have any children
fullIdentifier
lastIdentifierComponent
lastComponentWithWhitespaceAppended
aggregateFunction
T@"NSString",&,N,V_aggregateFunction
<%@:%p size %f count %u hiding 0x%02hx cstyle %p tstyle %p
Td,N,V_size
hidingState
TC,N,V_hidingState
numberOfCells
TI,N,V_numberOfCells
T{TSCEVectorIndexPair=II},N,V_dimensions
T@"NSString",&,N,V_whitespaceBeforeFirstChild
T@"NSMutableArray",&,N,V_whitespaceAfterDelimiters
-[TSTConditionalStyleRule setCellStyle:textStyle:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTConditionalStyleRule.mm
Can't replace styles!
TSTConditionalStyleRule %p: %@ => %@, %@
CS Predicate: %@
T@"TSTFormulaPredicate",R,C,N
predicateDescription
predicateType
Ti,R,N,VmPredicateType
T@"TSTCellStyle",R,C,N
T@"TSWPParagraphStyle",R,C,N
-[TSTConditionalStyleSet copyToGeometricFormWithRewriteContext:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTConditionalStyleSet.mm
Trying to rewrite a conditional style with a non-conditionalStyleFormulaOwner containing ownerUID: %@
-[TSTConditionalStyleSet copyByRepairingBadReferences:]
<%@: %p>: Rules:
CS Rules: 
v16@?0@"TSTCellStyle"8
v16@?0@"TSWPParagraphStyle"8
currentRules
T@"NSArray",R,N,V_conditionalStyleSetRules
-[TSTConditionalStyleFormulaOwner initWithTableModel:ownerUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTConditionalStyleFormulaOwner.mm
TSTConditionalStyleFormulaOwner: requires a valid ownerUID, table is: %@ (%@)
subOwnerID
T{TSCESubFormulaOwnerID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}S},N,V_subOwnerID
T@"TSTTableModel",N,V_tableModel
Equals
Is not equal
Greater than
Greater than or equals
Less than
Less than or equals
Between
Starts with
Ends with
Contains
Does not contain
Text Is
Text Is Not
targetWidth
Td,R,N,VmTargetWidth
targetHeight
Td,R,N,VmTargetHeight
static TSCEFormula TSTConvertFormulasFromBaseForCategoriesRewriter::copyFormulaByConvertingFromBase(TSCECalculationEngine *__strong, const TSCEFormula &, TSCEFormulaRewriteSpec *__strong, const TSCEFormulaContainingCell &, TSTFormulaCoordinateSpace, TSTFormulaConversionOptions)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTConvertFormulasFromBaseForCategoriesRewriter.mm
Did we copy correctly?
virtual TSCEASTElement *TSTConvertFormulasFromBaseForCategoriesRewriter::colonTractNode(TSCEASTColonTractElement *)
Invalid spanning settings in ConvertFromBaseRewriter
static TSCECellRef TSTConvertFormulasToBaseForCategoriesRewriter::convertedContainingCellRefForColonTractRewrites(TSCECalculationEngine *__strong, const TSCEFormulaContainingCell &, TSTFormulaCoordinateSpace, TSCEFormulaRewriteSpec *__strong)
convertedContainingCellRefForColonTractRewrites: No coordMapper found for tableUID: %@
virtual TSCEASTElement *TSTConvertFormulasToBaseForCategoriesRewriter::colonTractNode(TSCEASTColonTractElement *)
How did this happen? refTableUID is invalid in TSTConvertFormulasFromChromeToBaseForCategoriesRewriter::colonTractNode
srcCoordMapper
heightFactor
Td,R,N,V_heightFactor
widthFactor
Td,R,N,V_widthFactor
B16@?0r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}8
Fatal Assertion failure: %{public}s %{public}s:%d at the moment we don't handle this well
-[TSTCategoryOrder targetGroupFromRowIndex:minSourceLevel:templateRowUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCategoryOrder.mm
at the moment we don't handle this well
T@"TSTTableInfo",R,W,V_tableInfo
uidMap
T@"TSTColumnRowUIDMap",&,V_uidMap
isRowOrderTemporary
TB,V_isRowOrderTemporary
TSURowIndex TSTUidOrderNode::firstIndex()
Sorting category order: Never should a group be empty
B24@?0r^{TSTUidOrderNode={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{vector<TSTUidOrderNode, std::__1::allocator<TSTUidOrderNode> >=^{TSTUidOrderNode}^{TSTUidOrderNode}{__compressed_pair<TSTUidOrderNode *, std::__1::allocator<TSTUidOrderNode> >=^{TSTUidOrderNode}}}BI}8r^{TSTUidOrderNode={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{vector<TSTUidOrderNode, std::__1::allocator<TSTUidOrderNode> >=^{TSTUidOrderNode}^{TSTUidOrderNode}{__compressed_pair<TSTUidOrderNode *, std::__1::allocator<TSTUidOrderNode> >=^{TSTUidOrderNode}}}BI}16
reorganizeValues
T@"NSMutableArray",&,N,V_reorganizeValues
TI,N,V_rowIndex
+[TSTGroupBy(ChangeGroups) groupingComboForGroupingType:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTGroupBy_ChangeGroups.mm
Round0 isn't supported in this release
+[TSTGroupBy(ChangeGroups) p_dateBySettingUnit:value:ofDate:inCalendar:]
Continued looping trying to set date %@ to week number %lu
v24@?0r^{TSTGroupingLevelAndType=SC}8^B16
T@"TSTCellStyle",R,N,V_cellStyle
T@"TSWPParagraphStyle",R,N,V_textStyle
Td,R,N,V_size
hidingAction
TC,R,N,V_hidingAction
minCursorCellID
T{TSUCellCoord=ISBB},N,V_minCursorCellID
cursorCellIDs
T{vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}}},N,V_cursorCellIDs
iterators
T@"NSMutableArray",&,N,V_iterators
-[TSTTableInfo(Reorganize) mappingForSortWithRules:inRows:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableInfo_Reorganize.mm
Can't sort by an empty rule list!
q24@?0@"TSTTableSortRowTag"8@"TSTTableSortRowTag"16
Index out of range!
-[TSTTableInfo(Reorganize) mappingFromRowUids:toRowUids:]
From index out of range!
-[TSTCategoryTranslator startOfGroupingChangesBatch]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCategoryTranslator.mm
overflow in _groupingsChangingLevel
-[TSTCategoryTranslator endOfGroupingChangesBatch]
endOfGroupingChangesBatch called without matching startOfGroupingChangesBatch - avoided underflow
-[TSTCategoryTranslator resetViewMap]
view and base cannot be the same while categorized
-[TSTCategoryTranslator suspendChangeDescriptorNotificationsDuringBlock:]
not expecting multiple suspensions
Category Column
i24@?0r^{TSUModelCellCoord={TSUCellCoord=ISBB}}8r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
i20@?0C8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}12
i12@?0{TSUViewRowIndex=I}8
-[TSTCategoryTranslator setCellStyle:ofRowAtIndex:]
Categories: cannot set cell style for that row
-[TSTCategoryTranslator setTextStyle:ofRowAtIndex:]
Categories: cannot set text style for that row
v24@?0r^{TSUModelRowIndex=I}8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
v12@?0C8
-[TSTCategoryTranslator setCellStyle:ofColumnAtIndex:]
Categories: setting cell style on unknown column
-[TSTCategoryTranslator setTextStyle:ofColumnAtIndex:]
Categories: setting text style on unknown column
v18@?0{TSUModelColumnIndex=S}8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}10
-[TSTCategoryTranslator cellStyle:isEqualToDefaultCellStyleForCellID:]
Categories: cannot get cell style for that cell
-[TSTCategoryTranslator textStyle:isEqualToDefaultTextStyleForCellID:]
Categories: cannot get text style for that cell
-[TSTCategoryTranslator setCellStyle:atCellID:]
Categories: cannot set cell style for that cell
-[TSTCategoryTranslator setTextStyle:atCellID:]
Categories: cannot set text style for that cell
-[TSTCategoryTranslator conditionalStyleSetAtCellID:]
Categories: cannot get conditional style for that cell
-[TSTCategoryTranslator regionForValueOrCommentCellsInRange:]
Categories: cannot resolve region for cell rect
-[TSTCategoryTranslator p_applyViewCellCoord:toSummaryUsingBlock:toLabelUsingBlock:toCategoryColumnUsingBlock:toBaseUsingBlock:]
cell in summary row is in viewMap, but not in summaryMap
summary row does not have a valid summary row uid
-[TSTCategoryTranslator p_applyViewColumnIndex:toCategoryColumnUsingBlock:toBaseUsingBlock:toBeyondBoundsUsingBlock:]
Categories: this column is not is not in the base table
-[TSTCategoryTranslator heightOfRowAtIndex:isDefault:]
uid must be label or summary
-[TSTCategoryTranslator rowHeights]
Categories: cannot get row heights.
-[TSTCategoryTranslator columnWidths]
Categories: cannot get column widths.
-[TSTCategoryTranslator setHeight:ofRowAtIndex:]
Categories: cannot set height of this row
-[TSTCategoryTranslator setWidth:ofColumnAtIndex:]
Categories: cannot set width of this column
-[TSTCategoryTranslator removeRowsAtIndex:count:]
Categories: row removal method is not supported.
-[TSTCategoryTranslator removeColumnsAtIndex:count:]
Categories: column removal method is not supported.
-[TSTCategoryTranslator postCommentNotificationForStorage:atViewCellCoord:notificationKey:]
Categories: cannot post notification for comment/cell/key
-[TSTCategoryTranslator commentHostingAtCellID:forCommentStorage:]
Categories: cannot resolve comment for cell/storage
-[TSTCategoryTranslator commentHostingAtCellID:]
Categories: cannot resolve comment for cell
-[TSTCategoryTranslator moveColumnRange:toColumnIndex:]
Categories: could not move column
-[TSTCategoryTranslator cellIDForCellContainingRichTextStorage:]
Categories: cannot resolve cell for this rich text storage
-[TSTCategoryTranslator mergeCellRange:]
attempting to merge a disjoint cell region
-[TSTCategoryTranslator mergeRangeAtCellID:]
found a disjoint merge range
-[TSTCategoryTranslator mergedGridIndicesForDimension:]
should not be any merged row grid indexes in the body range
-[TSTCategoryTranslator enumerateMergesIntersectingCellRegion:usingBlock:]_block_invoke
Unexpected view source merge region for categorized table: %@
-[TSTCategoryTranslator mergeRangesIntersectingRange:]_block_invoke
-[TSTCategoryTranslator mergeRangesIntersectingCellRegion:]_block_invoke
-[TSTCategoryTranslator mergeRangesAndCrumbsIntersectingRange:]_block_invoke_2
-[TSTCategoryTranslator insertColumnsAtIndex:uids:metadatas:tableArea:]
Categories: destination column is not in the header
Categories: table area should be body
-[TSTCategoryTranslator insertRowsAtIndex:uids:metadatas:tableArea:unsetFilterHidingAction:]
Categories: destination row is not in the actual header
Categories: destination row is not in the footer
-[TSTCategoryTranslator checkMapsAndAssert:]
TableChecker: Unexpected empty summaryMap
TableChecker: Unexpected empty viewMap
TableChecker: 
TableChecker: Summary model does not match groupBy
TableChecker: Base headers do not match view headers
TableChecker: Base footers do not match view footers
TableChecker: View columns don't match Base Columns + Cat column
TableChecker: Summary columns don't match Base Columns + Cat column
summaryRowIndexes
T@"NSIndexSet",&,N,V_summaryRowIndexes
labelRowIndexes
T@"NSIndexSet",&,N,V_labelRowIndexes
summaryAndLabelRowIndexes
T@"NSIndexSet",&,N,V_summaryAndLabelRowIndexes
suspendNotify
TB,N,V_suspendNotify
No rows match the filter conditions.
visible
T@"NSMutableIndexSet",&,N,V_visible
hidden
T@"NSMutableIndexSet",&,N,V_hidden
userVisible
T@"NSMutableIndexSet",&,N,V_userVisible
userHidden
T@"NSMutableIndexSet",&,N,V_userHidden
@8@?0
v32@?0{_NSRange=QQ}8@24
rowsVisible
T@"TSTHiddenStateIndexSet",&,N,V_rowsVisible
rowsUserVisible
T@"TSTHiddenStateIndexSet",&,N,V_rowsUserVisible
rowsInvalid
T@"NSMutableIndexSet",&,N,V_rowsInvalid
rowMarkIndex
TQ,N,V_rowMarkIndex
columnsVisible
T@"TSTHiddenStateIndexSet",&,N,V_columnsVisible
columnsInvalid
T@"NSMutableIndexSet",&,N,V_columnsInvalid
userVisibleRowIndices
BOOL TSTCellCoerceCellToFormat(TSTCell *__strong, TSUFormatType)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCell_CoercionEngine.mm
Illegal format type for coercion: %{public}@
Attempting to coerce a cell with mismatched format and value types
BOOL TSTCellCoerceEmptyCellToFormat(TSTCell *__strong, TSUFormatType)
Cannot coerce to %@
BOOL TSTCellCoerceTextCellToNumberFormatWithSeparatorFixing(TSTCell *__strong, TSUFormatType)
Need to have a locale set here.
BOOL TSTCellcoerceTextCellToBestNumberFormatUsingLimitedParsing(TSTCell *__strong, BOOL, BOOL)
unexpected format type
-[TSTCell(Coercion) replaceContentWithParsableString:tableInfo:cellID:flags:outControlWasRemoved:]
Cell must have its locale set in replaceContentWithParsableString:
-[TSTCellStyle(CellDiffAdditions) objectByRemovingPropertiesInMap:addingPropertiesInMap:updateInverseResetPropertyMap:updateInverseSetPropertyMap:optionalConcurrentStylesheet:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellStyle+CellDiffAdditions.m
Can't specify both a cell style and a cell style change at the same time.
-[TSTDataStoreIterator initWithModel:region:flags:searchMask:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTDataStoreIterator.mm
_dataStore
cannot specify both walk right to left and walk bottom to top
-[TSTDataStoreIterator updateCellData:]
_curTile
_curRow
-[TSTDataStoreIterator updateFormulaForCellData:]
-[TSTDataStoreIterator getNext]
T@"TSTTableModel",R,N,V_tableModel
curTile
T@"TSTTableTile",&,N,V_curTile
curTileRange
T{_NSRange=QQ},N,V_curTileRange
curRow
T@"TSTTableTileRowInfo",&,N,V_curRow
-[TSTArchivedTableNameSelection setSelection:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTArchivedTableNameSelection.mm
Wrong type of class %@ (expected TSTTableNameSelection)
T@"TSKSelection",&,N,VmTableNameSelection
yyyy
LLLL yyyy
EEEE
M/d/yyyy
yyyy'-W'w
yyyy-QQQ
Value
Year
Month
Day of Week
CategorizeByDay
Week
Quarter
groupingColumnUid
Tr^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})},R,N,V_groupingColumnUid
groupingType
Ti,R,N,V_groupingType
groupingFunctor
Tr^{TSCEFunctor={TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}C},R,N,V_groupingFunctor
-[TSTConvertFormulasForCategoriesByRewritingWrapper initWithCalcEngine:rewriteSpec:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTConvertFormulasForCategoriesByRewritingWrapper.mm
Why are we even being created for a non-move rewriteSpec: %d
-[TSTConvertFormulasForCategoriesByRewritingWrapper convertFromBaseToChromeForCategorizedTableMove:containingCell:]
srcColumnUids
srcRowUids
dstColumnUids
dstRowUids
-[TSTConvertFormulasForCategoriesByRewritingWrapper convertFromChromeToBaseForCategorizedTableMove:containingCell:]
T@"TSCECalculationEngine",R,N,V_calcEngine
rewriteSpec
T@"TSCEFormulaRewriteSpec",R,N,V_rewriteSpec
-[TSTTableModel(FormulaOwner) registerWithCalcEngineForDocumentLoad:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTable_FormulaOwner.mm
Unknown error registering a new table with the calculation engine.
-[TSTTableModel(FormulaOwner) registerWithCalcEngineForDocumentLoad:]_block_invoke
can't translate a non-formula cell
-[TSTTableModel(FormulaOwner) registerWithCalcEngine:]
hiddenStates owner should not fail - tableInfo %@
conditional style owner registration should not fail - tableInfo %@, conditionalStyle ownerUID: %@
pencil annotation owner registration should not fail - tableInfo %@, pencilAnnotationOwner ownerUID: %@
merge owner registration should not fail - tableInfo %@, mergeOwner: %@
category owner registration should not fail - tableInfo %@, categoryOwner: %@
-[TSTTableModel(FormulaOwner) performReadForOneOffFormulaEvaluation:forCellCoord:]
Evaluating non-formula cell.
-[TSTTableModel(FormulaOwner) evaluateFormulaAt:withCalcEngine:recalcOptions:]
Table model has no calc engine. Aborting recalculation.
Inconsistent calcEngines
Cell %@::%@ said hasFormula=YES, but had no formula in it
We are aboout to recalc a formula not listed on willBeModified list: %@ :: %@
 %C 
-[TSTTableModel(FormulaOwner) writeResultsForCalcEngine:]
expect calc engines to be the same
v24@?0r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}8^B16
-[TSTTableModel(FormulaOwner) invalidateForCalcEngine:]
dontClearBackground
TB,N,VdontClearBackground
TSTStrokeAssociatedObject
solid
TB,D,N
virtual TSCEValue TSTTableResolver::valueForCellCoord(const TSUCellCoord &, BOOL) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableResolver.mm
something went wrong fetching data from the table.
virtual TSCEValue TSTTableResolver::scalarValue(const TSCEEvalRef &, const TSCEFormulaOwnerUID &, const TSUCellCoord &, BOOL, BOOL) const
Invalid table pointer in a reference to be resolved. Returning a bogus value. Please file a bug.
virtual TSCEHidingAction TSTTableResolver::getHidingAction(const TSCEEvalRef &) const
can't get hiding action of a range
The error in the cell was removed.
The formula was updated because it refers to a table that was transposed.
The formula was updated because it refers to a table that was transposed. You may need to make additional changes.
The formula refers to a table that was transposed. You may want to review it.
The formula was replaced with its last calculated value.
 Original formula: %@
The following conditional highlighting rules are not supported and were removed: Equal or Above Average, Equal or Below Average.
Conditional highlighting rules using standard deviation are not supported and were removed.
Conditional highlighting rules using formulas are not supported and were removed.
The following conditional highlighting rules are not supported and were removed: Contains Errors.
The following conditional highlighting rules are not supported and were removed: Contains No Errors.
Conditional highlighting rules containing unsupported operators were removed.
Conditional highlighting rules using unsupported style attributes were removed.
The conditional formatting containing an unsupported time period was removed.
Unsupported conditional highlighting rules were removed.
The cell was updated with a more accurate duration format. You may want to review formulas that refer to this cell.
-[TSTImportWarningSet TSTImportFormulaWarningTypeToArchive]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTImportWarningSet.mm
Unhandled FormulaWarningType encountered while saving to archive.
-[TSTImportWarningSet saveToArchive:]
originalFormula will not be archived.
supplementaryText will not be archived.
v32@?0@"NSString"8Q16^B24
-[TSTWrappedFormula nodesToCheckForBareArgumentPlaceholders]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTWrappedFormula.mm
Expected function node for %@ at the top of parse tree
-[TSTWrappedFormula insertFormulaText:includeWhitespace:]
-[TSTWrappedFormula reparseWithStorage:adjustExpressionTree:]_block_invoke
Unexpected attachment passed to block
-[TSTWrappedFormula reparseWithStorage:adjustExpressionTree:]
-[TSTWrappedFormula reparseWithStorage:adjustExpressionTree:]_block_invoke_2
Expected top function node to be at index 0
Expected top function node to end at index %lu
expected non-top node to be past index %lu
Ti,N,VmFunctionIndex
TS,N,V_columnIndex
trackedReference
T@"TSCETrackedReference",&,N,V_trackedReference
@"TSTExpressionNode"16@?0@"TSTExpressionNode"8
Fatal Assertion failure: %{public}s %{public}s:%d Unarchiving is incomplete. Equality comparison is bogus and can lead to document corruption. Crashing now.
-[TSTPopUpMenuModel isEqualToChoices:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTPopUpMenuModel.mm
Unarchiving is incomplete. Equality comparison is bogus and can lead to document corruption. Crashing now.
TSTPopUpMenuModel: (
-[TSTPopUpMenuModel p_mcListTypeForArgType:]
Unexpected TSCEArgumentType for popup list.
-[TSTPopUpMenuModel loadFromArchive:]
We are not handling this type of TSCECellValue
TSTPopUpMenuModel Archiving: Only one of item and tsce_item should exist
TSTPopUpMenuModel Archiving: No items to unarchive
Item 1
Item 2
Item 3
+[TSTPopUpMenuModel popupMenuModelReorderingModel:fromIndex:toIndex:]
Bad index
TSTArchives.sos.proto
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/messages/src/TSTArchives.sos.pb.cc
SFVNativePBMetaDataPBType09
-[TSTTableDataObject loadFromArchive:unarchiver:completion:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableDataObject.mm
Abstract method not overridden by %{public}@
Abstract method not overridden by %@: %s
-[TSTTableDataObject dropReferences:]
dropping data list ref count by more than the total count
-[TSTTableDataObject estimateByteSize]
refCount
TI,R,N,V_refCount
byteSizeForArchiving
TQ,R,N,V_byteSizeForArchiving
TI,N,V_key
payload
T@"NSObject<TSTTableDataPayloadHashing>",&,N,V_payload
T@"TSDCommentStorage",R,D,N
conditionalStyleSet
T@"TSTConditionalStyleSet",R,D,N
T@"TSUCustomFormat",R,D,N
T@"TSKFormat",R,D,N
T@"TSTCellSpec",R,D,N
formulaError
T@"TSWPStorage",R,D,N
T@"TSTImportWarningSet",R,D,N
popUpMenuModel
T@"TSTPopUpMenuModel",R,D,N
richTextStorage
T@"TSSStyle",R,D,N
refCount: %d   commentStorage: %@
refCount: %d   _conditionalStyleSet: %@
-[TSTTableDataCustomFormat encodeToArchive:archiver:]
Should never archive a new custom format datalist!
refCount: %d   _customFormat: %@
NULL
refCount: %d   format: %@
-[TSTTableDataCellSpec loadFromArchive:unarchiver:completion:]
Shouldn't find unsupported formulas in documents. This document is corrupted.
refCount: %d   _cellSpec: %@
refCount: %d   _formulaError: %@
refCount: %d   importWarningSet: %@
refCount: %d   popUpMenuModel: %@
refCount: %d   storage: %@
-[TSTTableDataString initObjectWithString:refCount:]
created a string table entry with a nil string
refCount: %d   string: %@
shouldWrap
TB,R,N,V_shouldWrap
refCount: %d   _style: %@
-[TSTCellDictionary setCell:atCellID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCellDictionary.mm
can't insert an invalid cell ID
-[TSTCellDictionary cellAtCellID:]
can't look up an invalid cell ID
<%@ %p with %d key/value pairs 
  { key: string   : %@
         width    : %f
         height   : %f
         vertical : %@
         direction : %@
wpColumn:  object : %@
           string : %@
  },
v32@?0@"TSTLayoutContentCachedKey"8@"TSWPColumn"16^B24
TSTArchives.proto
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/messages/src/TSTArchives.pb.cc
v32@?0@"NSNumber"8@16^B24
v16@?0@"NSMutableDictionary"8
-[TSTCell initWithLocale:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCell.mm
-[TSTCell copyToCell:]
srcStorage
-[TSTCell copyValueAndFormatToCell:]
-[TSTCell cellByApplyingCellDiff:context:andUpdateInverse:optionalConcurrentStylesheet:]
-[TSTCell setProvidedValueTypeBeforeUpgrade]
Provided cells only allowed before Pre-UFF upgrade.
-[TSTCell formattedValue]
Cell number format failed to produce return string.
Cell currency format failed to produce return string.
Impossible cell value type reached.
-[TSTCell stringForEditing]
-[TSTCell bakeFormulaToValue]
can't bake non-formula cells
-[TSTCell setCellStyle:clearingID:]
-[TSTCell setTextStyle:clearingID:]
-[TSTCell setConditionalStyle:clearingID:]
v40@?0@"TSWPAttachment"8Q16Q24^B32
-[TSTCell interactionType]
Cell must be inflated to determine interaction type
-[TSTCell hasStockFormulaForStockUI]
Cell must be inflated to ask if it contains a stock formula
-[TSTCell popupChoiceIndex]
Not a popup cell.
-[TSTCell applyPopupChoiceIndex:]
Unexpected argument type for popup TSCECellValue.
Cannot apply popup choice
v40@?0@8{_NSRange=QQ}16^B32
unhandled formula result type found.
B24@?0I8@"TSKFormat"12S20
-[TSTCell copyAllFormatsToCell:]
-[TSTCell _validateCustomFormatWrapper:]
Attempting to set an invalid cell custom format. Falling back to default format. Broken format: %@
-[TSTCell setFormatID:forStorageFlag:]
Inappropriate storage flag.
-[TSTCell formatForStorageFlag:]
-[TSTCell formatIDForStorageFlag:]
<cellSpec: %@>
<cellSpec not populated>
cellFormatKind
TI,R,N,V_cellFormatKind
controlCellSpecID
TI,N,V_controlCellSpecID
textFormatID
TI,N,V_textFormatID
booleanFormatID
TI,N,V_booleanFormatID
hasNumberFormat
hasCurrencyFormat
hasDateFormat
hasDurationFormat
hasTextFormat
hasBooleanFormat
numberDoubleValue
currencyDoubleValue
underlyingDoubleValue
numberDecimalValue
T{TSUDecimal={?=[2Q]}},N
currencyDecimalValue
underlyingDecimalValue
valueRepresentsDateWithoutTime
hasContentBreakingMergeFragment
hasStockFormulaForStockUI
T@"TSTStockDetails",R,N
popupChoiceIndex
T@"TSKFormat",R,N
textFormat
T@"TSKFormat",R,N,V_textFormat
booleanFormat
T@"TSKFormat",R,N,V_booleanFormat
currentFormatIsExplicitForCalcEngine
currencyIsMostRecentlySet
hasAnyCustomFormat
hasAnyWarning
B24@?0@"TSKFormat"8@"TSKFormat"16
-[TSTTableDataStore decrementColumnCellCount:byAmount:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableDataStore.mm
-[TSTTableDataStore getCell:atCellID:]
Retrieving corrupt cell storage data for cellID:%@
v28@?0^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}8S16^B20
void p_performRichTextStorageDOLC(TSTTableDataStore *__strong, TSTCell *__strong, TSTCellStorageRef)
Storage being removed from table cell is already not in the document. Probable duplicate. %@
newStorage.documentRoot
Storage being added to table cell is already in the document. Probable duplicate. %@
-[TSTTableDataStore p_updatePreBNCDataListsForCurrentFormat:numberFormat:currencyFormat:dateFormat:durationFormat:baseFormat:customFormat:stepperSliderFormat:mcListFormat:oldPreBNCStorageRef:callWillModify:]
newMCData
I20@?0@"TSKFormat"8i16
void p_updateFormatDataListForNewCell(TSTTableDataStore *__strong, TSTCell *__strong, TSTCellStorageRef)
Handed a bad format key! Repairing.
void p_UpdateDataListsForNewCell(TSTTableDataStore *__strong, TSTCell *__strong, TSTCellStorageRef, const TSCEFormulaOwnerUID &, __strong id<TSCEFormulaReplacing>, BOOL)
Cell of string value type has no value. Setting to NoContent.
Handed a bad string key! Setting to NoContent.
Expected a formula cell spec
Handed a bad formula key! Repairing.
Expected a control cell spec
Handed a bad formula error key! Repairing.
Handed a bad text storage key! Repairing.
Handed a cell comment key! Repairing.
Handed an import warning set key! Repairing.
Handed a bad cell style key! Repairing.
Handed a bad text style key! Repairing.
Handed a bad conditional style key! Repairing.
-[TSTTableDataStore setCell:atCellID:tableUID:calculationEngine:conditionalStyleOwner:ignoreFormula:clearImportWarnings:doRichTextDOLC:]
Failed to get tile for cell!
-[TSTTableDataStore setCellMap:tableUID:calculationEngine:conditionalStyleOwner:ignoreFormulas:skipDirtyingNonFormulaCells:doRichTextDOLC:]_block_invoke
Failed to get a tile while setting a map!
-[TSTTableDataStore p_preBNCKeysForCell:oldPreBNCStorageRef:callWillModify:]
Illegal format type %@ for preBNC stepper/slider display format.
-[TSTTableDataStore populatedCustomFormat:value:]
TSKCustomFormatWrapper format type %{public}@ does not match TSUCustomFormat format type %{public}@. Returning default format.
A custom format with key %{public}@ does not exist in this document or pasteboard. Returning default format.
preBNCPopupTable
-[TSTTableDataStore resolveDataListKeysForPreBNCCell:suppressTransmutation:sourceStorageVersion:]
String cell has bad string!
StringTable
Formula cell has bad formula!
FormulaTable
NULL formula
FormulaErrorTable
RichTextTable
CommentTable
ImportWarningTable
StyleTable
ConditionalStyleTable
preBNCFormatTable
-[TSTTableDataStore resolveDataListKeysForCell:suppressTransmutation:sourceStorageVersion:]
This cell is corrupt. It has a key for both formula and control.
ControlCellSpecTable
FormatTable
v32@?0q8q16^B24
Fatal Assertion failure: %{public}s %{public}s:%d Datalist reference is unexpectedly nil during load!
-[TSTTableDataStore p_loadDatalist:forLazyReference:completionBlock:]
Datalist reference is unexpectedly nil during load!
Fatal Assertion failure: %{public}s %{public}s:%d Failed to load a lazy datalist in TSTTableDataStore: %@ in table: %@ with error: errorClass=%{public}@, domain=%{public}@, code=%zd, %{public}@hints=%{public}@ (%@) 
Failed to load a lazy datalist in TSTTableDataStore: %@ in table: %@ with error: errorClass=%{public}@, domain=%{public}@, code=%zd, %{public}@hints=%{public}@ (%@) 
Fatal Assertion failure: %{public}s %{public}s:%d Conditional style datalist reference is unexpectedly nil!
-[TSTTableDataStore conditionalStyleSetDataList]
Conditional style datalist reference is unexpectedly nil!
Fatal Assertion failure: %{public}s %{public}s:%d String datalist reference is unexpectedly nil!
-[TSTTableDataStore stringDataList]
String datalist reference is unexpectedly nil!
Fatal Assertion failure: %{public}s %{public}s:%d Style datalist reference is unexpectedly nil!
-[TSTTableDataStore styleDataList]
Style datalist reference is unexpectedly nil!
Fatal Assertion failure: %{public}s %{public}s:%d Formula datalist reference is unexpectedly nil!
-[TSTTableDataStore formulaDataList]
Formula datalist reference is unexpectedly nil!
Fatal Assertion failure: %{public}s %{public}s:%d Control cellspec datalist reference is unexpectedly nil!
-[TSTTableDataStore controlCellSpecDataList]
Control cellspec datalist reference is unexpectedly nil!
v16@?0@"TSTTableDataList"8
Fatal Assertion failure: %{public}s %{public}s:%d Formula error datalist reference is unexpectedly nil!
-[TSTTableDataStore formulaErrorDataList]
Formula error datalist reference is unexpectedly nil!
Fatal Assertion failure: %{public}s %{public}s:%d Rich text datalist reference is unexpectedly nil!
-[TSTTableDataStore richTextDataList]
Rich text datalist reference is unexpectedly nil!
-[TSTTableDataStore richTextDataList]_block_invoke
Expected non-nil richTextParentInfo back pointer. Should have been set at initialization.
Fatal Assertion failure: %{public}s %{public}s:%d Format datalist reference is unexpectedly nil!
-[TSTTableDataStore formatDataList]
Format datalist reference is unexpectedly nil!
Fatal Assertion failure: %{public}s %{public}s:%d Comment storage datalist reference is unexpectedly nil!
-[TSTTableDataStore commentStorageDataList]
Comment storage datalist reference is unexpectedly nil!
Fatal Assertion failure: %{public}s %{public}s:%d Import warning datalist reference is unexpectedly nil!
-[TSTTableDataStore importWarningSetDataList]
Import warning datalist reference is unexpectedly nil!
Fatal Assertion failure: %{public}s %{public}s:%d Pre-BNC format datalist reference is unexpectedly nil!
-[TSTTableDataStore preBNCFormatDataList]
Pre-BNC format datalist reference is unexpectedly nil!
-[TSTTableDataStore addPasteboardCustomFormatFromCell:]_block_invoke
Repairing inconsistent custom formats anywhere except the doc server is problematic.
-[TSTTableDataStore addPasteboardCustomFormat:toDocument:updatingPasteboardFormat:]
The pasteboard should have had every custom format.
-[TSTTableDataStore copyPasteboardCustomFormatsFromDataStore:]
_pasteboardCustomFormatList
-[TSTTableDataStore makePasteboardCustomFormatList]
-[TSTTableDataStore setupEmptyPasteboardCustomFormatList]
v16@?0@"TSTMergeRegionMap"8
v28@?0I8@"TSKFormat"12^B20
%@, key:%d, cellCount:%d, datalist count:%d
%@, key:%d, cellCount:%d, datalist count:0
v32@?0@"TSTTableDataList"8^{unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned int> > >={__hash_table<std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned int>, std::__1::equal_to<unsigned int>, true> >=f}}}16@"NSString"24
condStyles
strings
styles
cellSpecs
f-errors
rich text
formats
comments
imp warns
DataList RefCount Audit good:%d bad:%d dead:%d
Datalist Duplication Audit
Conditional Styles list has dupes.
Strings List has dupes.
Styles List has dupes.
Formula List has dupes.
Control Cell Spec List has dupes.
Format List has dupes.
Import Warnings List has dupes.
-[TSTTableDataStore updateDataListsConcurrentlyWithConcurrentCellMap:clearImportWarnings:]_block_invoke
v24@?0@"TSTCell"8@"TSTCell"16
-[TSTTableDataStore updateDataListsConcurrentlyWithConcurrentCellMap:clearImportWarnings:]_block_invoke_2
-[TSTTableDataStore updateDataListsConcurrentlyWithConcurrentCellMap:clearImportWarnings:]_block_invoke_3
-[TSTTableDataStore updateDataListsConcurrentlyWithConcurrentCellMap:clearImportWarnings:]_block_invoke_4
-[TSTTableDataStore updateDataListsConcurrentlyWithConcurrentCellMap:clearImportWarnings:]_block_invoke_5
-[TSTTableDataStore updateDataListsConcurrentlyWithConcurrentCellMap:clearImportWarnings:]_block_invoke_6
cells[idx]
v40@?0B8@"TSKFormat"12I20@"NSIndexSet"24^{vector<TSTCell *, std::__1::allocator<TSTCell *> >=^@^@{__compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> >=^@}}32
-[TSTTableDataStore setCellsConcurrently:tableUID:calculationEngine:conditionalStyleOwner:ignoreFormula:clearImportWarnings:]_block_invoke
the newCells array and the set of column indexes should be the same size
{vector<long, std::__1::allocator<long> >=^q^q{__compressed_pair<long *, std::__1::allocator<long> >=^q}}40@?0@"TSTTableTileRowInfo"8^{vector<TSTCell *, std::__1::allocator<TSTCell *> >=^@^@{__compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> >=^@}}16^{vector<TSTNineKeyStructPreBNC, std::__1::allocator<TSTNineKeyStructPreBNC> >=^{?}^{?}{__compressed_pair<TSTNineKeyStructPreBNC *, std::__1::allocator<TSTNineKeyStructPreBNC> >=^{?}}}24^{vector<TSUModelColumnIndex, std::__1::allocator<TSUModelColumnIndex> >=^{TSUModelColumnIndex}^{TSUModelColumnIndex}{__compressed_pair<TSUModelColumnIndex *, std::__1::allocator<TSUModelColumnIndex> >=^{TSUModelColumnIndex}}}32
-[TSTTableDataStore setCellsConcurrently:tableUID:calculationEngine:conditionalStyleOwner:ignoreFormula:clearImportWarnings:]_block_invoke_2
newFormulaSpec
v18@?0{TSUModelColumnIndex=S}8q10
v36@?0{TSUModelRowIndex=I}8q12@"TSTTableTile"20@"TSTTableTileRowInfo"28
v32@?0@"TSTTableTile"8@"NSMutableIndexSet"16^B24
-[TSTTableDataStore accumulateCurrentCellsConcurrentlyInRow:rowInfo:atColumns:usingCellCreationBlock:]
tileStorage
T@"TSTTableTileStorage",&,N,V_tileStorage
rowHeaderStorage
T@"TSTTableHeaderStorage",&,N,V_rowHeaderStorage
columnHeaderStorage
T@"TSTTableHeaderStorage",&,N,V_columnHeaderStorage
styleTableReference
T@"TSPLazyReference",&,N,V_styleTableReference
conditionalStyleSetTableReference
T@"TSPLazyReference",&,N,V_conditionalStyleSetTableReference
stringTableReference
T@"TSPLazyReference",&,N,V_stringTableReference
formulaTableReference
T@"TSPLazyReference",&,N,V_formulaTableReference
controlCellSpecTableReference
T@"TSPLazyReference",&,N,V_controlCellSpecTableReference
formulaErrorTableReference
T@"TSPLazyReference",&,N,V_formulaErrorTableReference
richTextTableReference
T@"TSPLazyReference",&,N,V_richTextTableReference
formatTableReference
T@"TSPLazyReference",&,N,V_formatTableReference
commentStorageTableReference
T@"TSPLazyReference",&,N,V_commentStorageTableReference
importWarningSetTableReference
T@"TSPLazyReference",&,N,V_importWarningSetTableReference
preBNCFormatTableReference
T@"TSPLazyReference",&,N,V_preBNCFormatTableReference
multipleChoiceListFormatDataList
T@"TSTTableDataList",R,N,V_multipleChoiceListFormatDataList
T@"NSObject<TSDContainerInfo><TSWPStorageParent>",W,N,V_richTextParentInfo
pasteboardCustomFormatList
T@"TSKCustomFormatList",&,N,V_pasteboardCustomFormatList
pasteboardCustomFormatMap
T@"NSMutableDictionary",&,N,V_pasteboardCustomFormatMap
mergedCellRanges
T@"TSTMergeRegionMap",&,N,V_mergedCellRanges
TI,N,V_cellCount
cellCountValid
TB,N,V_cellCountValid
storageVersionPreBNC
TC,N,V_storageVersionPreBNC
missingPostBNCDatalists
TB,N,V_missingPostBNCDatalists
numberOfConditionalStyles
hasPasteboardCustomFormats
TB,R,D,N
upgrading
TB,N,V_upgrading
rank
Ti,N,V_rank
Td,N,V_doubleValue
T@"NSString",&,N,V_string
T@"TSDCommentStorage",R,N,V_commentStorage
transform
T{CGAffineTransform=dddddd},N,V_transform
inset
Td,N,V_inset
reoriginToZero
TB,N,V_reoriginToZero
-[TSTCommentHosting initWithStorage:forTableInfo:cellUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCommentHosting.mm
Expecting valid cell UID!
-[TSTCommentHosting initWithStorage:forTableInfo:baseCellCoord:]
Expecting valid cell ID!
%@@(%@, %@)
annotationUUID
annotationType
author
T@"TSKAnnotationAuthor",&,N
T@"NSDate",R,N
annotationDisplayStringType
T@"TSDCommentStorage",C,N
isHighlight
T@"NSString",&,N,V_annotationUUID
T{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}},R,N,V_cellUID
viewCellCoord
T{TSUViewCellCoord={TSUCellCoord=ISBB}},R,N
baseCellCoord
T{TSUModelCellCoord={TSUCellCoord=ISBB}},R,N
TSTTextCellColumnAutocomplete
TSTLastKeyboardWasNumberUserDefault
sharedTableConfiguration
T@"TSTConfiguration",R,N
maxNumberOfRows
TI,N,V_maxNumberOfRows
maxNumberOfColumns
TI,N,V_maxNumberOfColumns
maxNumberOfPopulatedCells
TI,N,V_maxNumberOfPopulatedCells
supportsContainedTextEditing
TB,N,V_supportsContainedTextEditing
showsCellEditingToolbar
TB,N,V_showsCellEditingToolbar
supportsAutomaticNumberKeyboard
TB,N,V_supportsAutomaticNumberKeyboard
beginEditingOnSingleTap
TB,N,V_beginEditingOnSingleTap
supportsMergedCells
TB,N,V_supportsMergedCells
supportsHiddenCells
TB,N,V_supportsHiddenCells
returnWhileEditingNavigates
TB,N,V_returnWhileEditingNavigates
tabWhileEditingNavigates
TB,N,V_tabWhileEditingNavigates
continuesEditingAfterNavigation
TB,N,V_continuesEditingAfterNavigation
arrowKeyAtEdgeWhileEditingNavigates
TB,N,V_arrowKeyAtEdgeWhileEditingNavigates
arrowKeysWrap
TB,N,V_arrowKeysWrap
arrowKeysNavigateWhenEditingBeganByTyping
TB,N,V_arrowKeysNavigateWhenEditingBeganByTyping
backTabWraps
TB,N,V_backTabWraps
tabAtEdgeAddsRow
TB,N,V_tabAtEdgeAddsRow
tabAtEdgeAddsColumn
TB,N,V_tabAtEdgeAddsColumn
pastesTile
TB,N,V_pastesTile
allowHorizontalAutoresize
TB,N,V_allowHorizontalAutoresize
selectsCellOnInitialTap
TB,N,V_selectsCellOnInitialTap
dragByHandleOnly
TB,N,V_dragByHandleOnly
cornersCanDragResize
TB,N,V_cornersCanDragResize
supportsControlCells
TB,N,V_supportsControlCells
controlCellUIAlwaysVisible
TB,N,V_controlCellUIAlwaysVisible
supportsActionMenu
TB,N,V_supportsActionMenu
hasLargerFonts
TB,N,V_hasLargerFonts
supportsFrozenHeaders
TB,N,V_supportsFrozenHeaders
supportsAutoResizedTables
TB,N,V_supportsAutoResizedTables
supportsCreateChartFromSelection
TB,N,V_supportsCreateChartFromSelection
selectionUsesBezierPath
TB,N,V_selectionUsesBezierPath
usesWholeChromeResizer
TB,N,V_usesWholeChromeResizer
showsChromeWhileEditingCell
TB,N,V_showsChromeWhileEditingCell
showsSelectionKnobsWhileEditingCell
TB,N,V_showsSelectionKnobsWhileEditingCell
showsCellWarningIndicator
TB,N,V_showsCellWarningIndicator
supportsCanvasReferenceEditing
TB,N,V_supportsCanvasReferenceEditing
usesLimitedAutomaticFormatParsing
TB,N,V_usesLimitedAutomaticFormatParsing
supportsFormulaEditing
TB,N,V_supportsFormulaEditing
supportsImplicitEditing
TB,N,V_supportsImplicitEditing
allowFreeformFormulaText
TB,N,V_allowFreeformFormulaText
allowWhitespaceInFormulas
TB,N,V_allowWhitespaceInFormulas
showsHideUnhideUI
TB,N,V_showsHideUnhideUI
exportPermanentHidingState
TB,N,V_exportPermanentHidingState
showsCellOverflowIndicator
TB,N,V_showsCellOverflowIndicator
supportsAutofill
TB,N,V_supportsAutofill
usesLimitedNumberFormatInspector
TB,N,V_usesLimitedNumberFormatInspector
headersFrozenByDefault
TB,N,V_headersFrozenByDefault
createLargeDefaultTables
TB,N,V_createLargeDefaultTables
tableNameEnabledInNewTables
TB,N,V_tableNameEnabledInNewTables
supportsRowColumnAdderKnob
TB,N,V_supportsRowColumnAdderKnob
supportsDragDropMoveMode
TB,N,V_supportsDragDropMoveMode
supportsDynamicallyHidingRowColumnForDragDrop
TB,N,V_supportsDynamicallyHidingRowColumnForDragDrop
formulaEditorEvaluatesFormulas
TB,N,V_formulaEditorEvaluatesFormulas
showReferenceHighlightsOnFormulaCellSelection
TB,N,V_showReferenceHighlightsOnFormulaCellSelection
tokenizeFormulaStringLiterals
TB,N,V_tokenizeFormulaStringLiterals
exportsCellComments
TB,N,V_exportsCellComments
exportsCellAnnotations
TB,N,V_exportsCellAnnotations
supportsCellCommentsActivityLines
TB,N,V_supportsCellCommentsActivityLines
cellEditorsCanScrollToNonLocalTableSelection
TB,N,V_cellEditorsCanScrollToNonLocalTableSelection
supportsRepeatHeaderRowsOnEachPage
TB,N,V_supportsRepeatHeaderRowsOnEachPage
supportsTableTranspose
TB,N,V_supportsTableTranspose
supportsRowMovesInPaginatedTables
TB,N,V_supportsRowMovesInPaginatedTables
disableImplicitNaming
TB,N,V_disableImplicitNaming
supportsComplexReorganizeUI
TB,N,V_supportsComplexReorganizeUI
supportsQuickFilterUI
TB,N,V_supportsQuickFilterUI
pasteFilterHidingAsUserHiding
TB,N,V_pasteFilterHidingAsUserHiding
allowsFullyFilteredTables
TB,N,V_allowsFullyFilteredTables
supportsTableColumnAutocomplete
TB,N,V_supportsTableColumnAutocomplete
supportsInlineAttachments
TB,N,V_supportsInlineAttachments
followsLinksOnFirstTap
TB,N,V_followsLinksOnFirstTap
supportsBidiTablesUI
TB,N,V_supportsBidiTablesUI
supportsPlaceholderGeometry
TB,N,V_supportsPlaceholderGeometry
supportsStockUI
TB,N,V_supportsStockUI
shouldZoomOutOnEndEditing
TB,N,V_shouldZoomOutOnEndEditing
forceZoomInOnBeginEditing
TB,N,V_forceZoomInOnBeginEditing
supportsCategorization
TB,N,V_supportsCategorization
structuredTextImportConfidenceThreshold
Td,N,V_structuredTextImportConfidenceThreshold
structuredTextImportConfidenceThresholdForCanvas
Td,N,V_structuredTextImportConfidenceThresholdForCanvas
structuredTextImportSizeLimit
TQ,N,V_structuredTextImportSizeLimit
allowsBlackDragDropBackground
TB,N,V_allowsBlackDragDropBackground
supportsAddBodyRowAtBottomSiriKitIntent
TB,N,V_supportsAddBodyRowAtBottomSiriKitIntent
supportsExpandedTables
TSTStylePropertyArchiving.proto
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/messages/src/TSTStylePropertyArchiving.pb.cc
-[TSTArchivedAutofillSelection setSelection:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTArchivedAutofillSelection.mm
Wrong type of class %@ (expected TSTAutofillSelection)
autofillSelection
T@"TSTAutofillSelection",&,N,V_autofillSelection
dirtyCellRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_dirtyCellRange
dirtyStrokeRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_dirtyStrokeRange
invalidateAllChrome
TB,N,V_invalidateAllChrome
invalidateAllChromeCaches
TB,N,V_invalidateAllChromeCaches
invalidateColumnChrome
TB,N,V_invalidateColumnChrome
invalidateRowChrome
TB,N,V_invalidateRowChrome
hideChromeContextMenuButton
TB,N,V_hideChromeContextMenuButton
invalidateKnobs
TB,N,V_invalidateKnobs
invalidateSelection
TB,N,V_invalidateSelection
invalidateTableName
TB,N,V_invalidateTableName
updateEditorRemainders
TB,N,V_updateEditorRemainders
syncReferenceHighlightState
TB,N,V_syncReferenceHighlightState
setNeedsDisplay
TB,N,V_setNeedsDisplay
hideStepperHUD
TB,N,V_hideStepperHUD
expandDirtyRegionForReferences
TB,N,V_expandDirtyRegionForReferences
repositionStockPopover
TB,N,V_repositionStockPopover
v32@?0@8@"TSTWPRep"16^B24
v32@?0@"TSDLayout"8Q16^B24
v32@?0@"TSTWPRep"8Q16^B24
+[TSTTableRep p_countOfIdenticalCellsBetweenOutgoingTableInfo:incomingTableInfo:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTTableRep.mm
numberOfColumns not equal!
+[TSTTableRep magicMoveAttributeMatchPercentBetweenOutgoingObject:incomingObject:mixingTypeContext:]
equalCellCount(%d) > totalCellCount(%d)!
void TSTTableRepPrepareToDrawLayoutSpace(TSTTableRep *__strong _Nonnull, TSTLayoutSpace *__strong _Nullable, CGContextRef _Nullable)
containerInfo
T@"NSObject<TSDContainerInfo>",R,N
childReps
searchSelectionBounds
T{CGRect={CGPoint=dd}{CGSize=dd}},N
overlayFrozenHeaderRows
T@"TSDTilingLayer",R,N
overlayFrozenHeaderCorner
overlayFrozenHeaderColumns
ratingsDragCellID
T{TSUCellCoord=ISBB},N
T@"TSTTableReferences",R,N
aspectOperationIsInProgress
zoomOperationIsInProgress
cellDragController
T@"TSTSelectionDragController",W,N
selectionDragAbortedOnNewSelection
visibleFillKnobs
T@"NSSet",C,N
childTextReps
T@"NSMutableDictionary",R,N
tableNameValid
TB,N,GisTableNameValid,V_tableNameValid
shouldRepositionStockPopover
TB,N,V_shouldRepositionStockPopover
zoomToEditOperationIsInProgress
TB,N,V_zoomToEditOperationIsInProgress
TB,N,V_aspectOperationIsInProgress
TB,N,V_zoomOperationIsInProgress
overlayTableName
T@"TSDTilingLayer",&,N,V_overlayTableName
T@"TSDTilingLayer",&,N,V_overlayFrozenHeaderCorner
T@"TSDTilingLayer",&,N,V_overlayFrozenHeaderRows
T@"TSDTilingLayer",&,N,V_overlayFrozenHeaderColumns
overlayFrozenHeaderRowsMask
T@"CALayer",&,N,V_overlayFrozenHeaderRowsMask
overlayFrozenHeaderColumnsMask
T@"CALayer",&,N,V_overlayFrozenHeaderColumnsMask
overlayFrozenHeaderTableBodyMask
T@"CALayer",&,N,V_overlayFrozenHeaderTableBodyMask
overlayFrozenHeaderTableNameMask
T@"CALayer",&,N,V_overlayFrozenHeaderTableNameMask
currentScreenScale
Td,N,V_currentScreenScale
recursivelyDrawingInContext
TB,N,GisRecursivelyDrawingInContext,V_recursivelyDrawingInContext
animationStack
T@"NSMutableArray",R,N,V_animationStack
zoomToEditVisibleCellRange
T{TSUCellRect={TSUCellCoord=ISBB}{?=II}},N,V_zoomToEditVisibleCellRange
TB,R,N,V_dragByHandleOnly
cellEditingMaskLayer
T@"CAShapeLayer",&,N,V_cellEditingMaskLayer
findSelectionHighlightLayer
T@"CAShapeLayer",&,N,V_findSelectionHighlightLayer
tableRepIsBeingRemovedFromBackgroundLayout
TB,V_tableRepIsBeingRemovedFromBackgroundLayout
tableLayout
T@"TSTMasterLayout",R,N
animationController
T@"<TSTTableAnimationController>",W,N,V_animationController
delegate
T@"<TSTTableRepDelegate>",R,N,V_delegate
T{CGAffineTransform=dddddd},R,N
canvasVisibleRect
tableChrome
T@"<TSTTableChromeProvider>",R,N,V_tableChrome
canvasReferenceController
T@"<TSTCanvasReferenceController>",R,W,N,V_canvasReferenceController
T@"TSTCellSelection",R,N
isZoomToEditOperationInProgress
TB,R,N,V_isZoomToEditOperationInProgress
currentAnimation
T@"TSTAnimation",R,N
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_searchSelectionBounds
T{TSUCellCoord=ISBB},N,V_ratingsDragCellID
T@"TSTTableReferences",R,N,V_references
T@"TSTSelectionDragController",W,N,V_cellDragController
TB,N,V_selectionDragAbortedOnNewSelection
TB,R,N,V_selectionUsesBezierPath
TB,R,N,V_selectsCellOnInitialTap
TB,R,N,V_usesWholeChromeResizer
T@"NSSet",C,N,V_visibleFillKnobs
T@"NSMutableDictionary",R,N,V_childTextReps
v16@?0^{CGContext=}8
TSTCellRange TSTTableRepDrawIndividualCellContent(TSTTableRep *__strong, TSTLayoutSpace *__strong, TSTGridRange, TSTCell *__strong, TSTCellID, __strong id, __strong id<TSTCellIteratorData>, TSTCellRange, BOOL, NSMutableArray *__strong, BOOL, TSWPSelection * _Nullable __strong, CGContextRef)
No TSWPColumn layout rock found.
void TSTTableRepDrawGridRange(TSTTableRep *__strong, TSTLayoutSpace *__strong, TSTGridRange, TSTAnimation *__strong, CGContextRef)
background fill is not supported yet
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}
WARNING: invalid cell fill %@ %@
yyFlexLexer::yylex invoked but %option yyclass used
virtual int TSTDefaultLexer::yylex()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTDefaultLexer.lmm
Unable to lex tokenAttachment.
fatal flex scanner internal error--no action found
fatal flex scanner internal error--end of buffer missed
fatal error - scanner input buffer overflow
out of dynamic memory in yy_get_next_buffer()
flex scanner push-back overflow
out of dynamic memory in yy_create_buffer()
out of dynamic memory in yyensure_buffer_stack()
out of memory expanding start-condition stack
start-condition stack underflow
Starting parse
Stack size increased to %lu
Entering state %d
Reading a token: 
Now at end of input.
Next token is
Shifting
int TSTyyparse(TSTParser *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTGrammar.ymm
Parser: the quoted string length is less than 2.
-> $$ =
Error: popping
Cleanup: discarding lookahead
Cleanup: popping
token %s (
nterm %s (
%d.%d-%d.%d
$end
$undefined
TOK_LPAREN
TOK_RPAREN
TOK_LBRACK
TOK_RBRACK
TOK_ARG_SEPARATOR
TOK_DOUBLE_COLON
TOK_UNKNOWN
TOK_IN
TOK_LET
TOK_UNQUOTED_IDENTIFIER
TOK_QUOTED_IDENTIFIER
TOK_AGG_IDENTIFIER_WITH_PARENS
TOK_UNQUOTED_IDENTIFIER_WITH_PARENS
TOK_WS
TOK_QUOTEDSTRING
TOK_FUNCTION_TOKEN
TOK_FUNCTION_END_TOKEN
TOK_NUMBER
TOK_BOOLEAN_TOKEN
TOK_DATE_TOKEN
TOK_DURATION_TOKEN
TOK_VARIABLE_TOKEN
TOK_IDENTIFIER_TOKEN
TOK_ARRAY_LINE_DELIMITER
TOK_REFERENCE_TOKEN
TOK_STRING_TOKEN
TOK_ARGUMENT_PLACEHOLDER_TOKEN
TOK_EMPTY_TOKEN
TOK_COLON
TOK_LESS_OR_EQUAL
TOK_GREATER_OR_EQUAL
TOK_GREATER_THAN
TOK_LESS_THAN
TOK_NOT_EQUAL
TOK_EQUALS
TOK_AMPERSAND
TOK_MINUS
TOK_PLUS
TOK_DIV
TOK_TIMES
TOK_POWER
TOK_PIPE
TOK_PERCENT
UPLUS
UMINUS
$accept
root
expr
unquoted_identifier_component
quoted_identifier_component
identifier_component
reference
piped_reference_list
list
array
list_of_array_rows
list_head
expr_opt
function
Reducing stack by rule %d (line %lu):
   $%d = 
Stack now
Deleting
virtual int TSTCommaLexer::yylex()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-451/quicklook/iwork/src/shared/tables/TSTCommaLexer.lmm
25TSTReparentGroupsRewriter
27TSTCellSpecFormulaExtractor
32TSTInsertNewRowsAsChromeRewriter
?333333
KD#B
36TSTTSCEASTNodeExpressionNodeFunction
8TSTLexer
NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEEE
NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
25TSTTrackingRangeExtractor
28TSTUIDTrackingRangeExtractor
?_Zu
?]Zu
<_Zu
23TSTBakeFormulasDetector
31TSCEFormulaUnarchivingException
25TSTArgumentAtIndexLocator
?47TSTConvertFormulasFromBaseForCategoriesRewriter
45TSTConvertFormulasToBaseForCategoriesRewriter
333333
34TSTResolveRelativeAncestorRewriter
36TSTConvertToRelativeAncestorRewriter
@16TSTTableResolver
17TSCETableResolver
TSTArchives.sos.proto
TSDArchives.sos.proto
TSSArchives.sos.proto
TSTStylePropertyArchiving.proto
TSWPArchives.sos.proto"t
#SpecSetTableStrokePresetListArchive
table_stroke_preset_list
.TST.StrokePresetListArchive
unset
 SpecTableStrokePresetListArchive
!spec_set_table_stroke_preset_list
2(.TST.SpecSetTableStrokePresetListArchive"
&TableCellStylePropertyChangeSetArchive
text_wrap
.TSS.SpecBoolArchive
text_wrap_undefined
type
.TSS.SpecIntegerArchive
type_undefined
fill
.TSD.SpecFillArchive
fill_undefined
vertical_alignment
.TSS.SpecIntegerArchive
vertical_alignment_undefined
padding
.TSWP.SpecPaddingArchive
padding_undefined
"TableStylePropertyChangeSetArchive
auto_resize
.TSS.SpecBoolArchive
auto_resize_undefined
banded_rows
.TSS.SpecBoolArchive
banded_rows_undefined
banded_cell_fill
.TSD.SpecFillArchive
banded_cell_fill_undefined
behaves_like_spreadsheet
.TSS.SpecBoolArchive
"behaves_like_spreadsheet_undefined
body_horizontal_border_stroke
.TSD.SpecStrokeArchive
'body_horizontal_border_stroke_undefined
body_vertical_border_stroke
.TSD.SpecStrokeArchive
%body_vertical_border_stroke_undefined
body_horizontal_stroke
.TSD.SpecStrokeArchive
 body_horizontal_stroke_undefined
body_vertical_stroke
.TSD.SpecStrokeArchive
body_vertical_stroke_undefined
header_column_border_stroke
.TSD.SpecStrokeArchive
%header_column_border_stroke_undefined
header_column_vertical_stroke
.TSD.SpecStrokeArchive
'header_column_vertical_stroke_undefined
header_column_horizontal_stroke
.TSD.SpecStrokeArchive
)header_column_horizontal_stroke_undefined
header_column_separator_stroke
.TSD.SpecStrokeArchive
(header_column_separator_stroke_undefined
header_row_border_stroke
.TSD.SpecStrokeArchive
"header_row_border_stroke_undefined
header_row_horizontal_stroke
.TSD.SpecStrokeArchive
&header_row_horizontal_stroke_undefined
header_row_vertical_stroke
.TSD.SpecStrokeArchive
$header_row_vertical_stroke_undefined
header_row_separator_stroke
.TSD.SpecStrokeArchive
%header_row_separator_stroke_undefined
footer_row_border_stroke
.TSD.SpecStrokeArchive
"footer_row_border_stroke_undefined
footer_row_horizontal_stroke
.TSD.SpecStrokeArchive
&footer_row_horizontal_stroke_undefined
footer_row_vertical_stroke
.TSD.SpecStrokeArchive
$footer_row_vertical_stroke_undefined
footer_row_separator_stroke
.TSD.SpecStrokeArchive
%footer_row_separator_stroke_undefined
stroke_preset_list_object
2%.TST.SpecTableStrokePresetListArchive
#stroke_preset_list_object_undefined
vertical_strokes_visible
.TSS.SpecBoolArchive
"vertical_strokes_visible_undefined
horizontal_strokes_visible
.TSS.SpecBoolArchive
$horizontal_strokes_visible_undefined
header_row_sep_visible
.TSS.SpecBoolArchive
 header_row_sep_visible_undefined
header_row_verticals_visible
.TSS.SpecBoolArchive
&header_row_verticals_visible_undefined
header_col_sep_visible
.TSS.SpecBoolArchive
 header_col_sep_visible_undefined
header_col_horizontals_visible
.TSS.SpecBoolArchive
(header_col_horizontals_visible_undefined
footer_sep_visible
.TSS.SpecBoolArchive
footer_sep_visible_undefined
footer_verticals_visible
.TSS.SpecBoolArchive
"footer_verticals_visible_undefined
border_strokes_visible
.TSS.SpecBoolArchive
 border_strokes_visible_undefined
master_font_family
.TSS.SpecStringArchive
master_font_family_undefined
writing_direction
.TSS.SpecIntegerArchive
writing_direction_undefined
category_level1_top_stroke
.TSD.SpecStrokeArchive
$category_level1_top_stroke_undefined
category_level2_top_stroke
.TSD.SpecStrokeArchive
$category_level2_top_stroke_undefined
category_level3_top_stroke
.TSD.SpecStrokeArchive
$category_level3_top_stroke_undefined
category_level4_top_stroke
.TSD.SpecStrokeArchive
$category_level4_top_stroke_undefined
category_level5_top_stroke
.TSD.SpecStrokeArchive
$category_level5_top_stroke_undefined
&category_level1_label_separator_stroke
.TSD.SpecStrokeArchive
0category_level1_label_separator_stroke_undefined
&category_level2_label_separator_stroke
.TSD.SpecStrokeArchive
0category_level2_label_separator_stroke_undefined
&category_level3_label_separator_stroke
.TSD.SpecStrokeArchive
0category_level3_label_separator_stroke_undefined
&category_level4_label_separator_stroke
.TSD.SpecStrokeArchive
0category_level4_label_separator_stroke_undefined
&category_level5_label_separator_stroke
.TSD.SpecStrokeArchive
0category_level5_label_separator_stroke_undefined
category_level1_bottom_stroke
.TSD.SpecStrokeArchive
'category_level1_bottom_stroke_undefined
category_level2_bottom_stroke
.TSD.SpecStrokeArchive
'category_level2_bottom_stroke_undefined
category_level3_bottom_stroke
.TSD.SpecStrokeArchive
'category_level3_bottom_stroke_undefined
category_level4_bottom_stroke
.TSD.SpecStrokeArchive
'category_level4_bottom_stroke_undefined
category_level5_bottom_stroke
.TSD.SpecStrokeArchive
'category_level5_bottom_stroke_undefined
category_level1_interior_stroke
.TSD.SpecStrokeArchive
)category_level1_interior_stroke_undefined
category_level2_interior_stroke
.TSD.SpecStrokeArchive
)category_level2_interior_stroke_undefined
category_level3_interior_stroke
.TSD.SpecStrokeArchive
)category_level3_interior_stroke_undefined
category_level4_interior_stroke
.TSD.SpecStrokeArchive
)category_level4_interior_stroke_undefined
category_level5_interior_stroke
.TSD.SpecStrokeArchive
)category_level5_interior_stroke_undefined
N3TST35SpecSetTableStrokePresetListArchiveE
N3TST32SpecTableStrokePresetListArchiveE
N3TST38TableCellStylePropertyChangeSetArchiveE
N3TST34TableStylePropertyChangeSetArchiveE
TSTArchives.proto
TSPMessages.proto
TSDArchives.proto
TSKArchives.proto
TSSArchives.proto
TSCEArchives.proto
TSWPArchives.proto
TSTStylePropertyArchiving.proto"Q
CellID
packedData
expanded_coord
.TSCE.CellCoordinateArchive"
CellUIDListArchive
row_uids
.TSP.UUID
column_uids
.TSP.UUID
compressed_row_indexes
compressed_column_indexes
TableSize
packedData
num_columns
num_rows
ExpandedTableSize
num_columns
num_rows
CellRange
origin
.TST.CellID
size
.TST.TableSize"f
ExpandedCellRange
origin
.TSCE.CellCoordinateArchive
size
.TST.ExpandedTableSize"
TableSelection
cellRange
.TST.CellRange
extendedCellRange
.TST.CellRange
extendedCellRangeValid
selection_type
.TST.SelectionTypeArchive"
TileRowInfo
tile_row_index
cell_count
cell_storage_buffer_pre_bnc
cell_offsets_pre_bnc
storage_version
cell_storage_buffer
cell_offsets
has_wide_offsets
Tile
maxColumn
maxRow
numCells
numrows
rowInfos
.TST.TileRowInfo
storage_version
last_saved_in_BNC
should_use_wide_rows
TileStorage
tiles
.TST.TileStorage.Tile
tile_size
should_use_wide_rows
Tile
tileid
tile
.TSP.Reference"
PopUpMenuModel
item
.TST.PopUpMenuModel.CellValueB
tsce_item
.TSCE.CellValueArchive
CellValue
cell_value_type
2!.TST.PopUpMenuModel.CellValueType
boolean_value
.TSCE.BooleanCellValueArchive
date_value
.TSCE.DateCellValueArchive
number_value
.TSCE.NumberCellValueArchive
string_value
.TSCE.StringCellValueArchive"`
CellValueType
NIL_TYPE
BOOLEAN_TYPE
DATE_TYPE
NUMBER_TYPE
STRING_TYPE
ImportWarningSetArchive
formula_import_warning
21.TST.ImportWarningSetArchive.FormulaImportWarning
cond_format_above_avg_equal_avg
false
cond_format_above_avg_std_dev
false
cond_format_complex_formula
false
cond_format_contains_errors
false
cond_format_expr
false
cond_format_not_contains_errors
false
(cond_format_parameters_not_all_same_type
false
cond_format_stop_if_true
false
 cond_format_unsupported_operator
false
cond_format_unsupported_styling
false
#cond_format_unsupported_time_period
false
error_cell_with_no_formula
false
unsupported_cond_format
false
original_data_format
2formula_warning_filtered_column_formula_not_copied
false
duration_format_range_changed
false
FormulaImportWarning
formula_warning_type
2/.TST.ImportWarningSetArchive.FormulaWarningType
original_formula
supplementary_text
FormulaWarningType
THREE_D_REFERENCE
ARRAYED_FORMULA
DIFFERENT_BEHAVIOR_FOR_FUNCTION
ERROR_TOKEN
EXTERNAL_REFERENCE
NATURAL_LANGUAGE_FORMULA
REFERENCE_OUT_OF_BOUNDS
SHARED_FORMULA_BASE_NOT_FOUND
UNKNOWN_NAME
UNSUPPORTED_FORMULA
UNSUPPORTED_FUNCTION
UNSUPPORTED_NAME
TRANSPOSED_NO_ISSUES
TRANSPOSED_WITH_ISSUES
 TRANSPOSED_WITH_ISSUES_UNCHANGED
"CellRefImportWarningSetPairArchive
cell_ref
.TSCE.CellReferenceArchive
warning_set
.TST.ImportWarningSetArchive"m
 ImportWarningSetByCellRefArchive
cellref_warning_set_pair
2'.TST.CellRefImportWarningSetPairArchive"
TableDataList
listType
.TST.TableDataList.ListType
nextListID
entries
.TST.TableDataList.ListEntry
segments
.TSP.Reference
ListEntry
refcount
string
reference
.TSP.Reference
formula
.TSCE.FormulaArchive
format
.TSK.FormatStructArchive
custom_format
.TSK.CustomFormatArchive
rich_text_payload
.TSP.Reference
comment_storage
.TSP.Reference
import_warning_set
.TST.ImportWarningSetArchive
cell_spec
.TST.CellSpecArchive"
ListType
STRING
FORMAT
FORMULA
STYLE
FORMULA_ERROR
CUSTOM_FORMAT
MULTIPLE_CHOICE_LIST_FORMAT
RICH_TEXT_PAYLOAD
CONDITIONAL_STYLE
COMMENT_STORAGE
IMPORT_WARNING
CONTROL_CELL_SPEC
TableDataListSegment
list_type
.TST.TableDataList.ListType
key_range
.TSP.Range
entries
.TST.TableDataList.ListEntry"W
TableRBTree
nodes
.TST.TableRBTree.Node
Node
value
HeaderStorageBucket
bucketHashFunction
headers
.TST.HeaderStorageBucket.Header
Header
index
size
hidingState
numberOfCells
cell_style
.TSP.Reference
text_style
.TSP.Reference"L
HeaderStorage
bucketHashFunction
buckets
.TSP.Reference"
DataStore
rowHeaders
.TST.HeaderStorage
columnHeaders
.TSP.Reference
tiles
.TST.TileStorage
stringTable
.TSP.Reference
styleTable
.TSP.Reference
formula_table
.TSP.Reference
formulaErrorTable
.TSP.Reference
format_table_pre_bnc
.TSP.Reference
multipleChoiceListFormatTable
.TSP.Reference
merge_region_map
.TSP.Reference
customFormatTable
.TSP.Reference
nextRowStripID
nextColumnStripID
rowTileTree
.TST.TableRBTree
columnTileTree
.TST.TableRBTree
storage_version_pre_bnc
rich_text_table
.TSP.Reference
conditionalstyletable
.TSP.Reference
commentStorageTable
.TSP.Reference
importWarningSetTable
.TSP.Reference
control_cell_spec_table
.TSP.Reference
format_table
.TSP.Reference"
TableInfoArchive
super
.TSD.DrawableArchive
tableModel
.TSP.Reference
editing_state
.TSP.ReferenceB
summary_model
.TSP.Reference
category_order
.TSP.Reference
view_column_row_uids
.TSP.Reference
group_by_uuid
.TSP.UUID
hidden_states_uuid
.TSP.UUID
formula_coord_space_in_pre40
formula_coord_space
pasteboard_coord_mapper
.TSCE.CoordMapperArchive
master_layout
.TST.MasterLayoutArchive"^
CategoryInfoArchive
super
.TSD.DrawableArchive
tableModel
.TSP.Reference"[
WPTableInfoArchive
super
.TST.TableInfoArchive
storage
.TSP.Reference"
TableStyleNetworkArchive
table_style
.TSP.Reference
body_text_style
.TSP.Reference
header_row_text_style
.TSP.Reference
header_column_text_style
.TSP.Reference
footer_row_text_style
.TSP.Reference
category_level_1_text_style
.TSP.Reference
category_level_2_text_style
.TSP.Reference
category_level_3_text_style
.TSP.Reference
category_level_4_text_style
.TSP.Reference
category_level_5_text_style
.TSP.Reference
label_level_1_text_style
.TSP.Reference
label_level_2_text_style
.TSP.Reference
label_level_3_text_style
.TSP.Reference
label_level_4_text_style
.TSP.Reference
label_level_5_text_style
.TSP.Reference
body_cell_style
.TSP.Reference
header_row_style
.TSP.Reference
header_column_style
.TSP.Reference
footer_row_style
.TSP.Reference
category_level_1_style
.TSP.Reference
category_level_2_style
.TSP.Reference
category_level_3_style
.TSP.Reference
category_level_4_style
.TSP.Reference
category_level_5_style
.TSP.Reference
label_level_1_style
.TSP.Reference
label_level_2_style
.TSP.Reference
label_level_3_style
.TSP.Reference
label_level_4_style
.TSP.Reference
label_level_5_style
.TSP.Reference
table_name_style
.TSP.Reference
table_name_shape_style
.TSP.Reference
preset_id
TableSortOrderArchive
type
2#.TST.TableSortOrderArchive.SortType
rules
2*.TST.TableSortOrderArchive.SortRuleArchive
SortRuleArchive
column
direction
24.TST.TableSortOrderArchive.SortRuleArchive.Direction"*
Direction
ascending
descending
SortType
entire_table
row_range
TableSortOrderUIDArchive
type
2&.TST.TableSortOrderUIDArchive.SortType
rules
2-.TST.TableSortOrderUIDArchive.SortRuleArchive
SortRuleArchive
column_uid
.TSP.UUID
direction
27.TST.TableSortOrderUIDArchive.SortRuleArchive.Direction"*
Direction
ascending
descending
SortType
entire_table
row_range
SortRuleReferenceTrackerArchive
reference_tracker
.TSP.Reference"1
CellRegion
cell_ranges
.TST.CellRange"E
CellUIDRegionArchive
cell_uid_ranges
.TSP.UUIDRectArchive"
StructuredTextImportRecord
import_settings
2!.TSK.StructuredTextImportSettings
import_source
import_date
source_data
source_encoding
confidence
imported_region
.TST.CellRegion
source_row_count
source_column_count
TableModelArchive
table_id
from_table_id
was_cut
table_style
.TSP.Reference
body_text_style
.TSP.Reference
header_row_text_style
.TSP.Reference
header_column_text_style
.TSP.Reference
footer_row_text_style
.TSP.Reference
body_cell_style
.TSP.Reference
header_row_style
.TSP.Reference
header_column_style
.TSP.Reference
footer_row_style
.TSP.Reference
table_name_style
.TSP.Reference
table_name_shape_style
.TSP.Reference
table_style_preset
.TSP.Reference
preset_index
base_data_store
.TST.DataStore
provider
.TSP.Reference
number_of_rows
number_of_columns
table_name
table_name_enabled
table_name_height
table_name_border_enabled
number_of_header_rows
number_of_header_columns
number_of_footer_rows
header_rows_frozen
header_columns_frozen
number_of_hidden_rows
number_of_hidden_columns
number_of_user_hidden_rows
number_of_user_hidden_columns
number_of_filtered_rows
default_row_height
default_column_width
origin_offset
.TST.CellIDB
repeating_header_rows_enabled
 repeating_header_columns_enabled
style_apply_clears_all
&hidden_state_formula_owner_for_columns
.TSP.Reference
#hidden_state_formula_owner_for_rows
.TSP.Reference
filter_set
.TSP.Reference
"conditional_style_formula_owner_id
.TSP.CFUUIDArchive
sort_order
.TST.TableSortOrderArchive
sort_rule_reference_tracker
2$.TST.SortRuleReferenceTrackerArchive
base_column_row_uids
.TSP.Reference
merge_owner
.TST.MergeOwnerArchive
stroke_sidecar
.TSP.Reference
preset_needs_strong_ownership
text_import_record
.TST.StructuredTextImportRecord
category_level_1_style
.TSP.Reference
category_level_2_style
.TSP.Reference
category_level_3_style
.TSP.Reference
category_level_4_style
.TSP.Reference
category_level_5_style
.TSP.Reference
label_level_1_style
.TSP.Reference
label_level_2_style
.TSP.Reference
label_level_3_style
.TSP.Reference
label_level_4_style
.TSP.Reference
label_level_5_style
.TSP.Reference
category_level_1_text_style
.TSP.Reference
category_level_2_text_style
.TSP.Reference
category_level_3_text_style
.TSP.Reference
category_level_4_text_style
.TSP.Reference
category_level_5_text_style
.TSP.Reference
label_level_1_text_style
.TSP.Reference
label_level_2_text_style
.TSP.Reference
label_level_3_text_style
.TSP.Reference
label_level_4_text_style
.TSP.Reference
label_level_5_text_style
.TSP.Reference
hidden_states_owner
.TST.HiddenStatesOwnerArchive
category_owner
.TST.CategoryOwnerArchive
pencil_annotation_owner
2!.TST.PencilAnnotationOwnerArchive
from_group_by_uid
haunted_owner
.TSCE.HauntedOwnerArchive"
SummaryModelArchive
table_info
.TSP.Reference
data_store
.TST.DataStore
column_row_uids
.TSP.Reference
aggregate_formula_owner_uuid
.TSP.UUID
summary_cell_vendor
.TSP.Reference
category_column_width
summary_row_level_1_height
summary_row_level_2_height
summary_row_level_3_height
summary_row_level_4_height
summary_row_level_5_height
 summary_label_row_level_1_height
 summary_label_row_level_2_height
 summary_label_row_level_3_height
 summary_label_row_level_4_height
 summary_label_row_level_5_height
label_row_visibility_1
label_row_visibility_2
label_row_visibility_3
label_row_visibility_4
label_row_visibility_5
summary_row_height_list
label_row_height_list
label_row_visibility_list
%SummaryModelGroupByChangeStateArchive
cell_map
.TSP.Reference
summary_row_height_list
label_row_height_list
label_row_visibility_list
ColumnRowUIDMapArchive
sorted_column_uids
.TSP.UUID
column_index_for_uid
column_uid_for_index
sorted_row_uids
.TSP.UUID
row_index_for_uid
row_uid_for_index
StrokeLayerArchive
row_column_index
stroke_runs
2(.TST.StrokeLayerArchive.StrokeRunArchive
StrokeRunArchive
origin
length
stroke
.TSD.StrokeArchive
order
StrokeSidecarArchive
max_order
column_count
row_count
left_column_stroke_layers
.TSP.Reference
right_column_stroke_layers
.TSP.Reference
top_row_stroke_layers
.TSP.Reference
bottom_row_stroke_layers
.TSP.Reference"
DurationWrapperArchive"
Cell
valueType
.TST.CellValueType
cell_style
.TSP.Reference
text_style
.TSP.Reference
numberValue
stringValue
boolValue
current_format
.TSK.FormatStructArchive
formulaError
.TSP.Reference
number_format
.TSK.FormatStructArchive
currency_format
.TSK.FormatStructArchive
duration_format
.TSK.FormatStructArchive
date_format
.TSK.FormatStructArchive
custom_format
.TSK.FormatStructArchive
base_format
.TSK.FormatStructArchive
explicit_format_flags
richText
.TSP.Reference
conditional_style
.TSP.Reference
comment_storage
.TSP.Reference
conditional_style_applied_rule
import_warning_set
.TST.ImportWarningSetArchive
custom_format_object
.TSK.CustomFormatArchive
cell_border
.TST.CellBorderArchive
cell_spec
.TST.CellSpecArchive
cell_format_kind
text_format
.TSK.FormatStructArchive
boolean_format
.TSK.FormatStructArchive
decimal_value_low
decimal_value_high
MergeRegionMapArchive
cell_range
.TST.CellRange"
CellMapArchive
cell_tiles
.TSP.Reference
uid_based
expanded_cell_ids
.TSCE.CellCoordinateArchive
cell_uid_list
.TST.CellUIDListArchive
merge_uid_ranges
.TSP.UUIDRectArchive
unmerge_uid_ranges
.TSP.UUIDRectArchive
merge_actions
.TST.MergeOperationArchive
may_modify_formulas_in_cells
true
(may_modify_values_referenced_by_formulas
true"l
CellListArchive
cells
2!.TST.CellListArchive.OptionalCell
OptionalCell
cell
.TST.Cell"
ConcurrentCellMapArchive
cell_lists
.TSP.Reference
uid_based
merge_actions
.TST.MergeOperationArchive
may_modify_formulas_in_cells
true
(may_modify_values_referenced_by_formulas
true"
ConcurrentCellListArchive
cells
2+.TST.ConcurrentCellListArchive.OptionalCell
cell_uid_range
.TSP.UUIDRectArchive
cell_range
.TST.CellRange
OptionalCell
cell
.TST.Cell"
CellFormatAndValueArchive
valueType
.TST.CellValueType
numberValue
stringValue
boolValue
richTextStorage
.TSP.Reference
use_all_spare_formats
explicit_flags
cell_format_kind
number_format
.TSK.FormatStructArchive
currency_format
.TSK.FormatStructArchive
date_format
.TSK.FormatStructArchive
duration_format
.TSK.FormatStructArchive
text_format
.TSK.FormatStructArchive
boolean_format
.TSK.FormatStructArchive
formatted_value
formatted_rich_text_value
.TSP.Reference
apply_spare_format_only
spare_format_type
decimal_low
decimal_high
CellSpecArchive
interaction_type
formula
.TSCE.FormulaArchive
range_control_min
range_control_max
range_control_inc
chooser_control_popup_model
.TSP.Reference
chooser_control_start_w_first
%category_summary_should_display_label
CommentStorageWrapperArchive
comment_storage
.TSP.Reference"
CellDiffArchive
property_map_to_set
.TSS.CommandPropertyMapArchive
property_map_to_reset
.TSS.CommandPropertyMapArchive"5
CellDiffArray
large_array
.TSP.LargeArray"s
CellDiffArraySegment
large_array_segment
.TSP.LargeArraySegment
elements
.TST.CellDiffArchive"
CellDiffMapArchive
uid_based
expanded_cell_ids
.TSCE.CellCoordinateArchive
cell_uids
.TST.CellUIDListArchive
cell_diff_array
.TSP.Reference"
DoubleStyleMapArchive
capacity
count
cell_map_entry
25.TST.DoubleStyleMapArchive.DoubleStyleMapEntryArchive
DoubleStyleMapEntryArchive
cell_id
.TST.CellID
old_style
.TSP.Reference
new_style
.TSP.Reference"
StyleTableMapArchive
capacity
count
map_entry
23.TST.StyleTableMapArchive.StyleTableMapEntryArchive
StyleTableMapEntryArchive
old_style
.TSP.Reference
new_style
.TSP.Reference"
SelectionArchive
tableModel
.TSP.ReferenceB
selection_type
.TST.SelectionTypeArchive
anchor_cell
.TST.CellID
cell_ranges
.TST.CellRange
base_ranges
.TST.CellRange
cursor_cell
.TST.CellID
table_info
.TSP.Reference
cell_uid_region
.TST.CellUIDRegionArchive
base_uid_region
.TST.CellUIDRegionArchive
anchor_cell_uid
.TSP.UUIDCoordArchive
cursor_cell_uid
.TSP.UUIDCoordArchive"
)DeathhawkRdar39989167CellSelectionArchive
table_info
.TSP.Reference
selection_type
.TST.SelectionTypeArchive
cell_uid_region
.TST.CellUIDRegionArchive
base_uid_region
.TST.CellUIDRegionArchive
anchor_cell_uid
.TSP.UUIDCoordArchive
cursor_cell_uid
.TSP.UUIDCoordArchive"&
StrokeSelectionArchive
mask
ControlCellSelectionArchive"
StockCellSelectionArchive"
TableNameSelectionArchive"p
AutofillSelectionArchive
source_cell_range
.TST.CellRange
target_cell_range
.TST.CellRange"V
FilterRuleArchive
predicate
.TST.FormulaPredicateArchive
disabled
TableStyleArchive
super
.TSS.StyleArchive
override_count
table_properties
2 .TST.TableStylePropertiesArchive"
CellStyleArchive
super
.TSS.StyleArchive
override_count
cell_properties
.TST.CellStylePropertiesArchive"
FormulaPredicateArchive
formula
.TSCE.FormulaArchive
predicate_type
21.TST.FormulaPredicateArchive.FormulaPredicateType
qualifier1
2*.TST.FormulaPredicateArchive.QualifierType
qualifier2
2*.TST.FormulaPredicateArchive.QualifierType
param_index1
param_index2
param_index0
FormulaPredicateType
PredNone
TextStartsWith
TextEndsWith
TextContains
TextDoesNotContain
ValueEqual
ValueNotEqual
ValueGreaterThan
ValueGreaterThanOrEqual
ValueLessThan
ValueLessThanOrEqual
ValueAboveAverage
ValueBelowAverage
ValueBetween
Formula
Duplicates
Uniques
DateIsToday
DateIsYesterday
DateIsTomorrow
DateIsTheDate
DateBeforeTheDate
DateAfterTheDate
DateIsInTheRange
DateInTheNext
DateInTheLast
DateIsExactly
DateBeforeRelative
DateAfterRelative
DateBetweenRelative
ValueTop
ValueBottom
ValueNotBetween
DateInThis
IsBlank
IsNotBlank
TextIs
TextIsNot
DurationEqual
DurationNotEqual
DurationGreaterThan
DurationGreaterThanOrEqual
DurationLessThan
DurationLessThanOrEqual
DurationBetween
DurationNotBetween
DurationAboveAverage
DurationBelowAverage
DurationTop
DurationBottom
QualifierType
QualNone
Days
Weeks
Months
Years
FromNow
Quarters
Percent
Values
ConditionalStyleSetArchive
ruleCount
rules
24.TST.ConditionalStyleSetArchive.ConditionalStyleRule
ConditionalStyleRule
predicate
.TST.FormulaPredicateArchive
cell_style
.TSP.Reference
text_style
.TSP.Reference"
FilterSetArchive
type
2#.TST.FilterSetArchive.FilterSetType:
FilterSetArchiveTypeAll
is_enabled
true
filter_rules
.TST.FilterRuleArchive
 needs_formula_rewrite_for_import
false
filter_offsets
filter_enabled
FilterSetType
FilterSetArchiveTypeAll
FilterSetArchiveTypeAny
HiddenStateExtentArchive
hidden_state_extent_uid
.TSP.UUID
hidden_states
2..TST.HiddenStateExtentArchive.RowOrColumnState
row_or_column_direction
22.TST.HiddenStateExtentArchive.RowOrColumnDirection
threshold_value
.TSCE.CellValueArchive
%needs_to_update_filter_set_for_import
false
collapsed_group_uids
.TSP.UUID
RowOrColumnState
row_or_column_uid
.TSP.UUID
user_hidden
filtered
RowOrColumnDirection
ColumnDirection
RowDirection
HiddenStatesArchive
hidden_states_uid
.TSP.UUID
column_hidden_state_extent
.TST.HiddenStateExtentArchive
row_hidden_state_extent
.TST.HiddenStateExtentArchive"i
HiddenStatesOwnerArchive
owner_uid
.TSP.UUID
hidden_states
.TST.HiddenStatesArchive"a
ExpandCollapseStateArchive
uids_collapsed
.TSP.UUID
uids_expanded
.TSP.UUID"l
TokenAttachmentArchive
super
.TSWP.UIGraphicalAttachment
expressionNode
.TSP.Reference"8
FormulaArchive
expressionTree
.TSP.Reference"h
ExpressionNodeArchive
children
.TSP.Reference
first_index
last_index
BooleanNodeArchive
super
.TST.ExpressionNodeArchive
value
NumberNodeArchive
super
.TST.ExpressionNodeArchive
number
decimal_low
decimal_high
StringNodeArchive
super
.TST.ExpressionNodeArchive
value
IdentifierNodeArchive
super
.TST.ExpressionNodeArchive
identifier
symbol
ArrayNodeArchive
super
.TST.ExpressionNodeArchive
columns
rows
ListNodeArchive
super
.TST.ExpressionNodeArchive"V
OperatorNodeArchive
super
.TST.ExpressionNodeArchive
operatorChar
PostfixOperatorNodeArchive
super
.TST.OperatorNodeArchive"D
PrefixOperatorNodeArchive
super
.TST.OperatorNodeArchive"t
FunctionNodeArchive
super
.TST.ExpressionNodeArchive
functionIndex
invalidFunctionName
FunctionEndNodeArchive
super
.TST.ExpressionNodeArchive"[
DateNodeArchive
super
.TST.ExpressionNodeArchive
value
format
ReferenceNodeArchive
super
.TST.ExpressionNodeArchive
rangeReference
.TSCE.RangeReferenceArchive
preserve_flags
hostTableID
host_cell_ref
.TSCE.CellReferenceArchive
table_uid
.TSP.UUID
range_top_left
.TSP.UUIDCoordArchive
range_bottom_right
.TSP.UUIDCoordArchive
category_ref
.TSCE.CategoryReferenceArchive
uid_range_rect
.TSP.UUIDRectArchive"
DurationNodeArchive
super
.TST.ExpressionNodeArchive
timeinterval
smallest
largest
style
ArgumentPlaceholderNodeArchive
super
.TST.ExpressionNodeArchive
functionIndex
argumentIndex
mode
EmptyExpressionNodeArchive
super
.TST.ExpressionNodeArchive"
LetNodeArchive
super
.TST.ExpressionNodeArchive
whitespace_after_let
whitespace_after_identifier
whitespace_after_equals
whitespace_after_delimiter
InNodeArchive
super
.TST.ExpressionNodeArchive"d
VariableNodeArchive
super
.TST.ExpressionNodeArchive
identifier
symbol
LayoutHintArchive
isValid
cellRange
.TST.CellRange
hintID
.TST.CellID
maximumSize
.TSP.Size
partitionPosition
horizontal
effectiveSize
.TSP.Size
partitioningPass
 CompletionTokenAttachmentArchive
super
.TST.TokenAttachmentArchive
completionText
caretPosition
prefixStart
HiddenStateFormulaOwnerArchive
owner_id
.TSP.CFUUIDArchive
threshold_value
.TSCE.CellValueArchive
%needs_to_update_filter_set_for_import
false"
FormulaStoreArchive
next_formula_index
formulas
2).TST.FormulaStoreArchive.FormulaStorePair
FormulaStorePair
formula_index
formula
.TSCE.FormulaArchive"
MergeOperationArchive
merge_type
.TST.MergeActionArchive
merge_ranges
.TSP.UUIDRectArchive
merge_formulas
.TSCE.FormulaArchive
merge_formula_indexes
MergeOwnerArchive
owner_id
.TSP.CFUUIDArchive
formula_store
.TST.FormulaStoreArchive"p
PencilAnnotationArchive
table_info
.TSP.Reference
pencil_annotation_storage
.TSP.Reference"
PencilAnnotationOwnerArchive
owner_id
.TSP.CFUUIDArchive
formula_store
.TST.FormulaStoreArchive
annotations
.TSP.Reference"
AccumulatorArchive
bool_count
bool_true_count
number_count
date_count
duration_count
string_count
error_count
is_circular_ref
min_value
.TSCE.CellValueArchive
max_value
.TSCE.CellValueArchive
number_total_value
.TSCE.CellValueArchive
first_date_seen
.TSCE.CellValueArchive
total_secs_since_ref_date
secs_to_add
GroupColumnArchive
column_uid
.TSP.UUID
grouping_type
.TST.GroupingType
grouping_functor
.TSCE.FunctorArchive
grouping_column_uid
.TSP.UUID"G
GroupColumnListArchive
group_column
.TST.GroupColumnArchive"l
ColumnAggregateArchive
column_uid
.TSP.UUID
level
agg_type
.TST.AggregateType"M
ColumnAggregateListArchive
aggregates
.TST.ColumnAggregateArchive"
CategoryOwnerArchive
owner_uid
.TSP.UUID
group_by
2(.TST.CategoryOwnerArchive.GroupByArchive
GroupByArchive
group_by_uid
.TSP.UUID
group_column
.TST.GroupColumnArchive
group_node_root
29.TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive
aggregator
2:.TST.CategoryOwnerArchive.GroupByArchive.AggregatorArchive
column_agg_type
.TST.ColumnAggregateArchive
is_enabled
 indirect_agg_type_change_formula
.TSCE.CellCoordinateArchive
grouping_columns_formula
.TSCE.CellCoordinateArchive
grouping_column_headers_formula
.TSCE.CellCoordinateArchive
aggs_in_group_root_formula
.TSCE.CellCoordinateArchive
column_order_changed_formula
.TSCE.CellCoordinateArchive
row_order_changed_formula
.TSCE.CellCoordinateArchive
AggNodeArchive
formula_coord
.TSCE.CellCoordinateArchive
accum
.TST.AccumulatorArchive
child
27.TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive
GroupNodeArchive
group_uid
.TSP.UUID
group_value_tuple
2P.TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.GroupValueTupleArchive
group_cell_value
.TSCE.CellValueArchive
child
29.TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive
row_uid
.TSP.UUID
agg_formula_coords
.TSCE.CellCoordinateArchive
format_manager
2N.TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive
GroupValueTupleArchive
value
.TSCE.CellValueArchive
FormatManagerArchive
cell_value
.TSCE.CellValueArchive
formats
.TSK.FormatStructArchive
row_sets
2\.TST.CategoryOwnerArchive.GroupByArchive.GroupNodeArchive.FormatManagerArchive.RowSetArchive
RowSetArchive
row_uids
.TSP.UUID
AggregatorArchive
column_uid
.TSP.UUID
agg_node
27.TST.CategoryOwnerArchive.GroupByArchive.AggNodeArchive"q
RichTextPayloadArchive
storage
.TSP.Reference
range
.TSP.Range
cellid
.TST.CellID"Q
#FormulaEqualsTokenAttachmentArchive
super
.TSWP.UIGraphicalAttachment"
CellFillStandIn
fill
.TSD.FillArchive
type_is_mixed
color_has_been_modified
color_is_mixed
first_color_has_been_modified
first_color_is_mixed
last_color_has_been_modified
last_color_is_mixed
gradient_type_has_been_modified
gradient_type_is_mixed
 gradient_angle_has_been_modified
gradient_angle_is_mixed
image_data_has_been_modified
image_data_is_mixed
tint_color_has_been_modified
tint_color_is_mixed
scale_has_been_modified
scale_is_mixed
technique_has_been_modified
technique_is_mixed
FormulaSelectionArchive
super
.TSWP.SelectionArchive
activeTokenCharIndex
CellBorderArchive
top_stroke
.TSD.StrokeArchive
top_stroke_order
right_stroke
.TSD.StrokeArchive
right_stroke_order
bottom_stroke
.TSD.StrokeArchive
bottom_stroke_order
left_stroke
.TSD.StrokeArchive
left_stroke_order
!DefaultCellStylesContainerArchive
table_style_network
.TSP.Reference
header_row_uids
.TSP.UUID
footer_row_uids
.TSP.UUID
header_column_uids
.TSP.UUID"
MultiTableRemapperArchive
mapping_purpose
2&.TST.MultiTableRemapperArchive.Purpose
should_steal_references
can_reuse_table_names
owner_uid_mapper
.TSCE.OwnerUIDMapperArchive
backing_tables_for_charts
.TSP.UUIDMapArchive
cross_document_paste
nested_inner_mapper
Purpose
DEFAULT
GROUPING
#PAGES_SECTION_DUPLICATION_NONCOLLAB
ChangePropagationMapWrapper
replacement_behavior
style_replace_prototypes
.TSP.Reference
style_replace_replacements
.TSP.Reference
style_modify_styles
.TSP.Reference
style_modify_old_prop_maps
.TSP.Reference
style_modify_new_prop_maps
.TSP.Reference
style_delete_prototypes
.TSP.Reference
style_delete_replacements
.TSP.Reference
table_preset_replace_prototype
.TSP.Reference
 table_preset_replace_replacement
.TSP.Reference
table_preset_delete_prototype
.TSP.Reference
table_preset_delete_replacement
.TSP.Reference"
SummaryCellVendorArchive
table_info
.TSP.Reference
entries
2..TST.SummaryCellVendorArchive.SummaryCellEntry
SummaryCellEntry
wildcardUID
.TSP.UUID
columnUID
.TSP.UUID
cell
.TST.Cell"[
CategoryOrderArchive
table_info
.TSP.Reference
uid_map
.TSP.Reference"
HeaderNameMgrTileArchive
first_fragment
last_fragment
name_frag_entries
21.TST.HeaderNameMgrTileArchive.NameFragmentArchive
NameFragmentArchive
name_fragment
name_precedent
.TSCE.CellCoordinateArchive
uses_of_name_fragment
.TSCE.UidCellRefSetArchive"
HeaderNameMgrArchive
owner_uid
.TSP.UUID
nrm_owner_uid
.TSP.UUID
per_tables
2).TST.HeaderNameMgrArchive.PerTableArchive
name_frag_tiles
.TSP.Reference
PerTableArchive
table_uid
.TSP.UUID
per_table_precedent
.TSCE.CellCoordinateArchive
is_deleted
header_row_uids
.TSP.UUID
header_column_uids
.TSP.UUID
update_header_row_uids
.TSP.UUID
update_header_column_uids
.TSP.UUID"K
WidthHeightCacheFittingEntry
fitting_index
fitting_size
WidthHeightCache
rows_fitting_entries
2!.TST.WidthHeightCacheFittingEntry
columns_count
MasterLayoutArchive
width_height_cache
.TST.WidthHeightCache*
CellType
genericCellType
spanCellType
numberCellType
textCellType
formulaCellType
dateCellType
boolCellType
durationCellType
formulaErrorCellType
automaticCellType
CellValueType
emptyCellValueType
numberCellValueType
stringCellValueType
providedCellValueType
dateCellValueType
boolCellValueType
durationCellValueType
errorCellValueType
richTextCellType
currencyCellValueType
TableDimensionArchive
dimensionRow
dimensionColumn
SelectionTypeArchive
deprecatedCellSelectionType
rowSelectionType
columnSelectionType
"deprecatedCellEditingSelectionType
 deprecatedTableNameSelectionType
deprecatedTableSelectionType
regionSelectionType
noSelectionType
FillDirectionArchive
kTSTFillDownArchive
kTSTFillUpArchive
kTSTFillRightArchive
kTSTFillLeftArchive
MergeActionArchive
mergeActionInsert
mergeActionRemove
mergeActionShrink
mergeActionGrow
HideShowActionArchive
hideShowActionHide
hideShowActionShow
GroupingType
UNIQUE
YEAR
MONTH
DAYOFWEEK
YEARWEEK
YEARQUARTER
ROUND_0
AggregateType
NONE
COUNT
TOTAL
AVERAGE
GROUPVALUE
BODYROWS
INDIRECT
import_warning_set
 .TSS.CommandPropertyEntryArchive
.TST.ImportWarningSetArchive:[
format_and_value
 .TSS.CommandPropertyEntryArchive
.TST.CellFormatAndValueArchive:N
cell_border
 .TSS.CommandPropertyEntryArchive
.TST.CellBorderArchive:]
comment_storage
 .TSS.CommandPropertyEntryArchive
2!.TST.CommentStorageWrapperArchive:J
cell_spec
 .TSS.CommandPropertyEntryArchive
.TST.CellSpecArchive
N3TST6CellIDE
N3TST18CellUIDListArchiveE
N3TST9TableSizeE
N3TST17ExpandedTableSizeE
N3TST9CellRangeE
N3TST17ExpandedCellRangeE
N3TST14TableSelectionE
N3TST11TileRowInfoE
N3TST4TileE
N3TST16TileStorage_TileE
N3TST11TileStorageE
N3TST24PopUpMenuModel_CellValueE
N3TST14PopUpMenuModelE
N3TST44ImportWarningSetArchive_FormulaImportWarningE
N3TST23ImportWarningSetArchiveE
N3TST34CellRefImportWarningSetPairArchiveE
N3TST32ImportWarningSetByCellRefArchiveE
N3TST23TableDataList_ListEntryE
N3TST13TableDataListE
N3TST20TableDataListSegmentE
N3TST16TableRBTree_NodeE
N3TST11TableRBTreeE
N3TST26HeaderStorageBucket_HeaderE
N3TST19HeaderStorageBucketE
N3TST13HeaderStorageE
N3TST9DataStoreE
N3TST16TableInfoArchiveE
N3TST19CategoryInfoArchiveE
N3TST18WPTableInfoArchiveE
N3TST24TableStyleNetworkArchiveE
N3TST37TableSortOrderArchive_SortRuleArchiveE
N3TST21TableSortOrderArchiveE
N3TST40TableSortOrderUIDArchive_SortRuleArchiveE
N3TST24TableSortOrderUIDArchiveE
N3TST31SortRuleReferenceTrackerArchiveE
N3TST10CellRegionE
N3TST20CellUIDRegionArchiveE
N3TST26StructuredTextImportRecordE
N3TST17TableModelArchiveE
N3TST19SummaryModelArchiveE
N3TST37SummaryModelGroupByChangeStateArchiveE
N3TST22ColumnRowUIDMapArchiveE
N3TST35StrokeLayerArchive_StrokeRunArchiveE
N3TST18StrokeLayerArchiveE
N3TST20StrokeSidecarArchiveE
N3TST22DurationWrapperArchiveE
N3TST4CellE
N3TST21MergeRegionMapArchiveE
N3TST14CellMapArchiveE
N3TST28CellListArchive_OptionalCellE
N3TST15CellListArchiveE
N3TST24ConcurrentCellMapArchiveE
N3TST38ConcurrentCellListArchive_OptionalCellE
N3TST25ConcurrentCellListArchiveE
N3TST25CellFormatAndValueArchiveE
N3TST15CellSpecArchiveE
N3TST28CommentStorageWrapperArchiveE
N3TST15CellDiffArchiveE
N3TST13CellDiffArrayE
N3TST20CellDiffArraySegmentE
N3TST18CellDiffMapArchiveE
N3TST48DoubleStyleMapArchive_DoubleStyleMapEntryArchiveE
N3TST21DoubleStyleMapArchiveE
N3TST46StyleTableMapArchive_StyleTableMapEntryArchiveE
N3TST20StyleTableMapArchiveE
N3TST16SelectionArchiveE
N3TST41DeathhawkRdar39989167CellSelectionArchiveE
N3TST22StrokeSelectionArchiveE
N3TST27ControlCellSelectionArchiveE
N3TST25StockCellSelectionArchiveE
N3TST25TableNameSelectionArchiveE
N3TST24AutofillSelectionArchiveE
N3TST17FilterRuleArchiveE
N3TST17TableStyleArchiveE
N3TST16CellStyleArchiveE
N3TST23FormulaPredicateArchiveE
N3TST47ConditionalStyleSetArchive_ConditionalStyleRuleE
N3TST26ConditionalStyleSetArchiveE
N3TST16FilterSetArchiveE
N3TST41HiddenStateExtentArchive_RowOrColumnStateE
N3TST24HiddenStateExtentArchiveE
N3TST19HiddenStatesArchiveE
N3TST24HiddenStatesOwnerArchiveE
N3TST26ExpandCollapseStateArchiveE
N3TST22TokenAttachmentArchiveE
N3TST14FormulaArchiveE
N3TST21ExpressionNodeArchiveE
N3TST18BooleanNodeArchiveE
N3TST17NumberNodeArchiveE
N3TST17StringNodeArchiveE
N3TST21IdentifierNodeArchiveE
N3TST16ArrayNodeArchiveE
N3TST15ListNodeArchiveE
N3TST19OperatorNodeArchiveE
N3TST26PostfixOperatorNodeArchiveE
N3TST25PrefixOperatorNodeArchiveE
N3TST19FunctionNodeArchiveE
N3TST22FunctionEndNodeArchiveE
N3TST15DateNodeArchiveE
N3TST20ReferenceNodeArchiveE
N3TST19DurationNodeArchiveE
N3TST30ArgumentPlaceholderNodeArchiveE
N3TST26EmptyExpressionNodeArchiveE
N3TST14LetNodeArchiveE
N3TST13InNodeArchiveE
N3TST19VariableNodeArchiveE
N3TST17LayoutHintArchiveE
N3TST32CompletionTokenAttachmentArchiveE
N3TST30HiddenStateFormulaOwnerArchiveE
N3TST36FormulaStoreArchive_FormulaStorePairE
N3TST19FormulaStoreArchiveE
N3TST21MergeOperationArchiveE
N3TST17MergeOwnerArchiveE
N3TST23PencilAnnotationArchiveE
N3TST28PencilAnnotationOwnerArchiveE
N3TST18AccumulatorArchiveE
N3TST18GroupColumnArchiveE
N3TST22GroupColumnListArchiveE
N3TST22ColumnAggregateArchiveE
N3TST26ColumnAggregateListArchiveE
N3TST50CategoryOwnerArchive_GroupByArchive_AggNodeArchiveE
N3TST75CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchiveE
N3TST87CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchiveE
N3TST73CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchiveE
N3TST52CategoryOwnerArchive_GroupByArchive_GroupNodeArchiveE
N3TST53CategoryOwnerArchive_GroupByArchive_AggregatorArchiveE
N3TST35CategoryOwnerArchive_GroupByArchiveE
N3TST20CategoryOwnerArchiveE
N3TST22RichTextPayloadArchiveE
N3TST35FormulaEqualsTokenAttachmentArchiveE
N3TST15CellFillStandInE
N3TST23FormulaSelectionArchiveE
N3TST17CellBorderArchiveE
N3TST33DefaultCellStylesContainerArchiveE
N3TST25MultiTableRemapperArchiveE
N3TST27ChangePropagationMapWrapperE
N3TST41SummaryCellVendorArchive_SummaryCellEntryE
N3TST24SummaryCellVendorArchiveE
N3TST20CategoryOrderArchiveE
N3TST44HeaderNameMgrTileArchive_NameFragmentArchiveE
N3TST24HeaderNameMgrTileArchiveE
N3TST36HeaderNameMgrArchive_PerTableArchiveE
N3TST20HeaderNameMgrArchiveE
N3TST28WidthHeightCacheFittingEntryE
N3TST16WidthHeightCacheE
N3TST19MasterLayoutArchiveE
N6google8protobuf8internal29InternalMetadataWithArenaBaseINS0_15UnknownFieldSetENS1_25InternalMetadataWithArenaEE9ContainerE
TSTStylePropertyArchiving.proto
TSPMessages.proto
TSDArchives.proto
TSKArchives.proto
TSSArchives.proto
TSWPArchives.proto"
Deprecated_TableStrokeArchive
stroke
.TSD.StrokeArchive
background
opacity
empty
CellStylePropertiesArchive
cell_fill
.TSD.FillArchive
text_wrap
deprecated_top_stroke
2".TST.Deprecated_TableStrokeArchive
deprecated_right_stroke
2".TST.Deprecated_TableStrokeArchive
deprecated_bottom_stroke
2".TST.Deprecated_TableStrokeArchive
deprecated_left_stroke
2".TST.Deprecated_TableStrokeArchive
vertical_alignment
padding
.TSWP.PaddingArchive
top_stroke
.TSD.StrokeArchive
right_stroke
.TSD.StrokeArchive
bottom_stroke
.TSD.StrokeArchive
left_stroke
.TSD.StrokeArchive"
"Deprecated_StrokePresetDataArchive
deprecated_horizontal_stroke
2".TST.Deprecated_TableStrokeArchive
deprecated_vertical_stroke
2".TST.Deprecated_TableStrokeArchive
deprecated_exterior_stroke
2".TST.Deprecated_TableStrokeArchive
deprecated_visible_mask
StrokePresetDataArchive
horizontal_stroke
.TSD.StrokeArchive
vertical_stroke
.TSD.StrokeArchive
exterior_stroke
.TSD.StrokeArchive
visible_mask
StrokePresetListArchive
count
deprecated_preset
2'.TST.Deprecated_StrokePresetDataArchive
preset
.TST.StrokePresetDataArchive"
TableStylePropertiesArchive
banded_rows
banded_fill
.TSD.FillArchive
behaves_like_spreadsheet
auto_resize
&deprecated_header_row_separator_stroke
2".TST.Deprecated_TableStrokeArchive
#deprecated_header_row_border_stroke
2".TST.Deprecated_TableStrokeArchive
'deprecated_header_row_horizontal_stroke
2".TST.Deprecated_TableStrokeArchive
%deprecated_header_row_vertical_stroke
2".TST.Deprecated_TableStrokeArchive
&deprecated_header_column_border_stroke
2".TST.Deprecated_TableStrokeArchive
)deprecated_header_column_separator_stroke
2".TST.Deprecated_TableStrokeArchive
*deprecated_header_column_horizontal_stroke
2".TST.Deprecated_TableStrokeArchive
(deprecated_header_column_vertical_stroke
2".TST.Deprecated_TableStrokeArchive
&deprecated_footer_row_separator_stroke
2".TST.Deprecated_TableStrokeArchive
#deprecated_footer_row_border_stroke
2".TST.Deprecated_TableStrokeArchive
'deprecated_footer_row_horizontal_stroke
2".TST.Deprecated_TableStrokeArchive
%deprecated_footer_row_vertical_stroke
2".TST.Deprecated_TableStrokeArchive
.deprecated_table_body_horizontal_border_stroke
2".TST.Deprecated_TableStrokeArchive
,deprecated_table_body_vertical_border_stroke
2".TST.Deprecated_TableStrokeArchive
'deprecated_table_body_horizontal_stroke
2".TST.Deprecated_TableStrokeArchive
%deprecated_table_body_vertical_stroke
2".TST.Deprecated_TableStrokeArchive
stroke_preset_list
.TST.StrokePresetListArchive
v_strokes_visible
h_strokes_visible
hr_separator_visible
hc_separator_visible
footer_separator_visible
table_border_visible
table_header_border_visible
table_hc_divider_visible
table_hr_divider_visible
table_footer_divider_visible
OBSOLETE_master_font_size
master_font_family
writing_direction
.TSWP.WritingDirectionType
header_row_separator_stroke
.TSD.StrokeArchive
header_row_border_stroke
.TSD.StrokeArchive
header_row_horizontal_stroke
.TSD.StrokeArchive
header_row_vertical_stroke
.TSD.StrokeArchive
header_column_border_stroke
.TSD.StrokeArchive
header_column_separator_stroke
.TSD.StrokeArchive
header_column_horizontal_stroke
.TSD.StrokeArchive
header_column_vertical_stroke
.TSD.StrokeArchive
footer_row_separator_stroke
.TSD.StrokeArchive
footer_row_border_stroke
.TSD.StrokeArchive
footer_row_horizontal_stroke
.TSD.StrokeArchive
footer_row_vertical_stroke
.TSD.StrokeArchive
#table_body_horizontal_border_stroke
.TSD.StrokeArchive
!table_body_vertical_border_stroke
.TSD.StrokeArchive
table_body_horizontal_stroke
.TSD.StrokeArchive
table_body_vertical_stroke
.TSD.StrokeArchive
category_level1_top_stroke
.TSD.StrokeArchive
category_level2_top_stroke
.TSD.StrokeArchive
category_level3_top_stroke
.TSD.StrokeArchive
category_level4_top_stroke
.TSD.StrokeArchive
category_level5_top_stroke
.TSD.StrokeArchive
category_level1_bottom_stroke
.TSD.StrokeArchive
category_level2_bottom_stroke
.TSD.StrokeArchive
category_level3_bottom_stroke
.TSD.StrokeArchive
category_level4_bottom_stroke
.TSD.StrokeArchive
category_level5_bottom_stroke
.TSD.StrokeArchive
category_level1_interior_stroke
.TSD.StrokeArchive
category_level2_interior_stroke
.TSD.StrokeArchive
category_level3_interior_stroke
.TSD.StrokeArchive
category_level4_interior_stroke
.TSD.StrokeArchive
category_level5_interior_stroke
.TSD.StrokeArchive
&category_level1_label_separator_stroke
.TSD.StrokeArchive
&category_level2_label_separator_stroke
.TSD.StrokeArchive
&category_level3_label_separator_stroke
.TSD.StrokeArchive
&category_level4_label_separator_stroke
.TSD.StrokeArchive
&category_level5_label_separator_stroke
.TSD.StrokeArchive"n
TableStylePresetArchive
index
image
.TSP.Reference
style_network
.TSP.Reference")
TableStrokePresetArchive
index
ThemePresetsArchive
table_style_presets
.TSP.Reference
table_cell_stroke_presets
.TSP.Reference2?
extension
.TSS.ThemeArchive
.TST.ThemePresetsArchive
N3TST29Deprecated_TableStrokeArchiveE
N3TST26CellStylePropertiesArchiveE
N3TST34Deprecated_StrokePresetDataArchiveE
N3TST23StrokePresetDataArchiveE
N3TST23StrokePresetListArchiveE
N3TST27TableStylePropertiesArchiveE
N3TST23TableStylePresetArchiveE
N3TST24TableStrokePresetArchiveE
N3TST19ThemePresetsArchiveE
-23
'67
?@
"'"1";"E"O"Y"c"m"w"
#!#+#1#;#F#Q#[#_#i#s#}#
$!$+$5$?$I$S$]$g$q${$
%$%.%8%B%L%V%`%j%t%z%
&%&/&9&C&M&W&a&k&u&
'$'.'8'B'L'V'`'j't'~'
15TSTDefaultLexer
21TSTDefaultyyFlexLexer
9FlexLexer
 !"#$%&'()*+,-./
pSDA
xCuT
IAVW
?w@CR!"#$%&'()*+,-/0123
LH;<=>?I@
yz{|}~
UDJ@
XYZ[\]^_`abcdefg
hijk
456789:;<=>?
@456789:;<=>?
456789:;<=>?
AB:;<=>?C@
DDDDDDDDDDDDDDDDDD
()*46
DDDDDDDDDDDDDDDDBDDDD,DDD@
!&"%$'
DDDD
(+527
0318?:?D
012222222222222222222222222222333344444556667777777778899:;;<<==>>??
PNO 
'(23456789:>?????????????
????? !"#$%&'()*+-
2<=;<
3<?22???????????????????????
3>222222222222355>7>
6>????%??=<?22
??22
2%?2
2$?2
2#?2
2 ?2
2"?2
2!?2
2&?2
2(?2
2'?2
2*?2
2)?2
2+?2
?3%?2
?%?2
8,?7
"&"0":"D"N"X"b"l"v"
#&#1#<#F#J#T#^#h#r#|#
$ $*$4$>$H$R$\$f$p$z$
%#%-%7%A%K%U%_%e%o%y%
&$&.&8&B&L&V&`&j&t&z&
'#'-'7'A'K'U'_'i'q'{'
13TSTCommaLexer
18TSTignoreFlexLexer
TSTFormulaAdditions
TSTGroupNode
TSTUidReturning
TSTCellSelection
TSDTextSelection
NSObject
TSTRefParser
TSCERefParsingProtocol
TSTFormsSheetProvider
TSTTableModel
TSDMixing
TSTCustomStrokeProviding
TSTStyleProviding
TSTTableStrokeProviding
TSTTableTileCreating
TSTMutableCellIteratorData
TSTCellIteratorData
TSTTableTile
TSTWidthHeightCollection
TSTCellRangeControlSpec
TSTResolverContainerNameProvider
TSCECalculationEngineRegistration
TSKModel
TSTTableInfo
TSDContainerInfo
TSDInfo
TSPCopying
TSDInfoUsingObjectPlaceholderGeometry
TSKSearchable
TSSPresetSource
TSSStyleClient
TSTCategoryProviding
TSCEColumnRowUIDMapping
TSTTableHiddenRowColumnProviding
TSTAdditionalHiddenRowColumnProviding
TSTTableInternalGeometryProviding
TSTTableMergeRangeProviding
TSWPStorageParent
TSWPTextStatisticsTrackerProvider
TSSPropertySource
CellMap
TSTCellIterating
TSTMergeListWrapper
TSTUIDRectRef
NSCopying
TSTCellIterator
TSTCellStyle
TSTInNode
TSTCSEData
TSTStockDetails
TSTTableTileRowInfo
TSTExpandCollapseState
TSTCellFormulaSpec
TSCEFormulaReturning
TSTGroupingColumnList
TSTAdditions
TSTCellDiff
TSTConcurrentCellMap
TSTCellMapChangeDescriptorDelivering
TSTConcurrentCellList
TSTConcurrentSparseCellList
TSTCellDiffArraySegment
TSTStructuredTextImportRecord
TSTTableDataList
Type_Specific_API
Upgrade
TSTTableStyle
TSTArchivedCellSelection
TSKArchivedSelection
TSTArchivedRdar39989167CellSelection
TSTColumnAggregate
TSTTableTileStorage
TSTTableHeaderStorage
TSTEphemeralFilter
TSTTableHeaderStorageBucket
TSTFormulaStore
TSTLayoutProcessChangesActions
TSTLayout
TSWPColumnMetrics
TSWPLayoutParent
TSWPStorageObserver
TSTAccumulator
TSTColumnAggregateList
Helper
TSTRangeRefPair
TSTRefNamer
TSCERefNamingProtocol
TSTCellDiffArray
TSTWPTableInfo
TSTStrokeSidecar
TSTStrokeSidecarLookupMap
TSTMergeRangeCache
TSTTableInfoHint
TSDDrawableContainerInfo
TSDReplaceableMediaContainer
TSDReducibleImageContainer
TSDCompatibilityAwareMediaContainer
TSTLayoutSpace
TSTCoordinateArray
TSTCellWillChangeProtocol
TSTCellWillChangeDistributor
TSTMergeChangeProtocol
TSTMergeChangeDistributor
TSTFormulaTokenContext
TSTVariableNode
TSTWPFormulaSelection
TSTWPFormulaArchivedSelection
TSTWPFormulaFieldSelection
TSTCellRegionGatherer
TSTAggregator
TSTTableStylePreset
TSSPreset
TSTHiddenStateIndexSet
TSTTableStrokePreset
TSTTableStyleNetwork
TSTLocalStylesKey
TSTLocalAccumulator
TSTTableArchivedControlCellSelection
TSTTableStrokePresetList
TSTTableStrokePresetData
TSTArchiving
TSTLayoutCellIterator
TSTExpressionNode
TSTFormulaToken
TSTFormula
TSTFormulaHelperMethods
ValidationSidecarAdditions
TSTCellChooserControlSpec
TSTHiddenStateFormulaOwner
TSTOperatorNode
TSTStrokeSelection
TSTCustomFormatListUpgradeHelper
TSTTableControlCellSelection
TSTNumberNode
TSTCell_PreBNC
TSTCellMap
TSTCellMapIterator
TSTCellList
TSTStrokeWidthCache
TSTTableNameSelection
TSTColumnRowUIDMap
TSTCategoryOwner
TSTAggNode
TSTFunctionNode
TSTLetNode
TSTSummaryModel
TSTGroupByChangeProtocol
TSTSummaryModelGroupByChangeState
TSTRWRetainedPointerKeyDictionary
TSTCellToggleControlSpec
TSTStrokeOrderedLayerToken
TSTStrokeLayerStrokeAndRange
TSTStrokeOrderedLayer
TSTFormulaPredArg
TSTHiddenStatesOwner
TSTBooleanNode
TSTArrayNode
TSTListNode
TSTGroupNodeFormatManager
TSTWPLayout
TSTStringNode
TSTCellUIDRegion
TSTDateNode
TSTReferenceNode
TSTStarRatingRenderer
TSTPencilAnnotation
TSKPencilAnnotation
TSTDurationNode
TSTArgumentPlaceholderNode
TSTPostfixOperatorNode
TSTStrokeDefaultVendor
TSTPrefixOperatorNode
TSTFunctionEndNode
TSTCellFormatAndValue
TSTCellDiffing
TSSPropertyCommandSerializing
TSTLayoutValidationBundle
TSTWPRep
TSTHiddenStates
TSTStrokeSidecarIterator
TSTCellRegionIterating
TSTMutableCellIteratorDataUpdating
TSTGroupBy
TSCEFormulaOwning
TSTEmptyExpressionNode
TSTCellBorder
TSTStrokeLayerEnumerating
TSTStrokeLayerAbstractStack
TSTStrokeLayerStack
TSTStrokeLayerMergedStack
TSTStrokeExporter
TSTHiddenStateExtent
TSTMergeOwner
TSTCellSpec
TSTSortRuleReferenceTracker
TSCEReferenceTrackerDelegate
TSTAutofillSelection
TSTMasterLayout
2R/4
TSTLayoutHint
TSDHint
TSTArchivedLayoutHint
TSDArchivedHint
CellDiffAdditions
TSTTablePartitioner
TSDPartitioner
TSTLayoutSpaceBundle
TSTTableDataListSegment
TSTConcurrentCellIterator
TSTConcurrentCellIteratorFourArgRock
TSTMergeAction
TSTCellUIDList
TSTCellUIDIterator
TSTGroupByChangeDelayedNotification
TSTGroupByChangeDistributor
TSTTableTileGroup
TSTMergeRegionMap
TSTPencilAnnotationOwner
TSTWidthHeightCache
TSTChangeDescriptor
TSTCustomFormatList
TSTTextEngineDelegate
TSWPTextDelegate
TSTTableSortOrder
TSTLayoutTask
TSTConcurrentMutableCellUIDSet
TSTCellStateForLayout
TSTWPTokenAttachment
TSTCompletionToken
TSTStrokeLayerToken
TSTStrokeLayer
NSMutableCopying
TSTMutableStrokeLayer
TSTConcurrentStylesheetKey
TSTConcurrentStylesheet
TSTAnimation
TSTFontInfoCacheEntry
TSTFontInfoCache
TSTIndexingChunk
TSTHeaderNameMgrTile
TSTHeaderNameSubset
TSTHeaderNameMgr
TSCEHeaderNameProtocol
TSTCellDiffMap
TSTTableSortRule
TSTTableViewColumnSortRule
TSTGroupValueTuple
TSTCheckboxRenderer
TSTMergeRangeSortedSet
TSTLayoutContentCachedKey
TSTLayoutDynamicResizeInfo
TSTLayoutDynamicResizeInfoProtocol
TSTCategoryStoreIterator
ReferenceResolving
TSCEReferenceResolving
TablesAdditions
TSTCategoryAggregateFormulaOwner
TSTRichTextPayload
TSTSummaryCellVendor
TSTTableFilterRule
TSTTableFilterSet
TSTFormulaPredicate
TSTArchivedStrokeSelection
TSTTableBadge
TSTPdfTagger
TSKPdfTagger
TSTCellRegion
ModelCoordinateSupport
ViewCoordinateSupport
TSTMutableCellRegion
TSTCellRegionRowMajorIterator
TSTCellRegionColMajorIterator
TSTCellRegionRowMajorReverseIterator
TSTCellRegionColumnMajorReverseIterator
TSTTableTranslator
TSCETableTranslatorProtocol
TSTStrokeExportCache
TSTIdentifierNode
TSTTableHeaderInfo
TSTTemporaryCollectionNode
TSTConditionalStyleRule
TSTConditionalStyleSet
TSTConcurrentMutableIndexSet
TSTConditionalStyleFormulaOwner
TSTLayoutDynamicResizeInfoUnify
TSTLayoutDynamicResizeInfoAccordion
LabelRows
TSTCategoryOrder
TSTPasteMap
TSTTableSortRowTag
ChangeGroups
TSTColumnRowMetadata
TSTContentComposingIterator
Reorganize
TSTCategoryTranslator
TSTFilteredTableDynamicContentDelegate
TSTLayoutDynamicContentProtocol
TSTHiddenRowsColumnsCacheValidationCollection
TSTHiddenRowsColumnsCache
Coercion
TSTDataStoreIterator
TSTArchivedMasterLayoutBundle
TSTFormulaEqualsTokenAttachment
TSTFormulaEqualsTokenAttachmentRenderer
TSWPGraphicalAttachmentRenderer
FormulaAdditions
TSTArchivedTableNameSelection
TSTGroupingColumn
TSTConvertFormulasForCategoriesByRewritingWrapper
FormulaOwner
TSTStrokeAssociatedObject
TSTTableResolverFactory
TSCETableResolverFactoryProtocol
TSCEResolverLocatingProtocol
TSTImportWarningSet
TSTImportWarningSetByCellRef
TSTWrappedFormula
TSTSortRuleReferenceTrackerReference
TSTChartReferenceFormula
TSTPopUpMenuModel
TSUMultipleChoiceListChoiceProviding
TSPPasteboard_TSTAdditions
TSTTableDataObject
TSTTableDataCommentStorage
TSTTableDataConditionalStyleSet
TSTTableDataCustomFormat
TSTTableDataFormat
TSTTableDataCellSpec
TSTTableDataFormulaError
TSTTableDataImportWarningSet
TSTTableDataMultipleChoiceList
TSTTableDataRichText
TSTTableDataString
TSTTableDataStyle
TSTTableDataPayload
TSTCellDictionary
TSTDupContentCache
TSTWPColumnCache
TSTCell
TSTTableDataStore
TSTCellReorganizeValue
TSTCommentStorageWrapper
TSTLayoutSpaceBezierPathCacheKey
TSTLayoutSpaceBezierPathCache
TSTCommentHosting
TSDComment
TSDAnnotation
TSKAnnotation
TSTConfiguration
TSTArchivedAutofillSelection
TSTTableRepProcessChangesActions
TSTTableRep
TSWPRepParent
TSDContainerRep
TSTTableRepInternal
UITextFieldDelegate
CALayerDelegate
TSDMasterDrawableDelegate
context
firstIndex
lastIndex
initWithContext:functionNode:firstIndex:lastIndex:
functionNode
children
count
arrayWithCapacity:
countByEnumeratingWithState:objects:count:
tokenAttachment
objectForKey:
expressionNode
deepCopyIntoContext:bakeModes:withTokenDict:
addObject:
arrayWithArray:
setChildren:
documentRoot
stylesheet
i_copyIntoContext:stylesheet:paragraphStyle:listStyle:bakeModes:resettingHostTableToMatch:referenceColorHelper:disableMenus:
string
writingDirectionForParagraphAtParIndex:
initWithContext:string:kind:stylesheet:paragraphStyle:listStyle:section:columnStyle:paragraphDirection:
defaultParagraphStyle
defaultListStyle
length
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:isFatal:description:
logBacktraceThrottled
range
attachmentIndexRangeForTextRange:
initWithCapacity:
attachmentAtAttachmentIndex:outCharIndex:
tokenType
removeObject:
p_processEndNode:startNode:bakeModes:tokenDict:
initWithContext:expressionNode:
copyIntoContext:bakeModes:
isLocalReference
tableUID
setHostTableUID:
baseBoundingBox
basePreserveFlags
setBaseRangeRef:preserveFlags:
setReferenceColorHelper:
setObject:forUncopiedKey:
functionEndNode
setNeverShowsMenu:
characterAtIndex:
deleteRange:undoTransaction:
replaceCharactersInRange:withString:undoTransaction:
insertAttachmentOrFootnote:range:
anyObject
attachmentAtCharIndex:
enumerateAttachmentsOfClass:inTextRange:usingBlock:
stringWithFormat:
exceptionWithName:reason:userInfo:
isEqualToString:
isEqualToExpressionNode:
letString
p_rangeOfString:orNodeClass:range:
inString
whitespaceAndNewlineCharacterSet
characterIsMember:
takeText:withLanguage:
setLanguage:forCharRange:undoTransaction:
insertUIGraphicalAttachment:withLanguage:
stringWithFormulaPlainTextFromRange:
p_stringWithFormulaAsTextFromRange:returningTokenValues:
stringWithFormulaDetokenizedTextFromRange:
detokenizedText
appendString:
formulaPlainText
appendFormat:
i_copyIntoContext:stylesheet:
hasDamagedTokenAttachments
isFormulaSyntaxErrorEqual:
rangeOfLetWithinRange:
rangeOfInWithinRange:
previousNonWhitespaceOrNewlineIndexStartingAtIndex:
nextNonWhitespaceOrNewlineIndexStartingAtIndex:
takeText:
insertUIGraphicalAttachment:
stringWithFormulaPlainText
stringWithFormulaDetokenizedText
groupUid
groupValueTuple
groupValueTupleByAppendingValue:
initWithValueArray:
initWithGroupCellValue:atLevel:groupUid:children:
init
setParentNode:
initWithCellValue:
cellValue
currentLocale
cellValueWithArchive:locale:
initWithArchive:locale:
groupValueAtLevel:
addRowUid:
initWithArchive:forGroupBy:atLevel:
groupNodesByGroupUid
groupCellValue
keyStringForCellValue:
setObject:forKey:
rowUids
foreachUuid:
aggNodeForAggFormulaCoord:
setGroupNode:
addAggNode:
initWithArchive:
dealloc
canonicalKeyString
removeObjectForKey:
copy
encodeCellValueToArchive:
safeChildren
encodeToArchive:
aggNodes
formulaCoord
valueType
documentLocale
setLocale:
customFormatList
updateWithCustomFormatList:
updateWithDocumentRoot:
removeAllObjects
addChild:withKey:
addUUID:
p_addChildGroupUidsIntoSet:recursively:
groupByUid
groupLevel
findGroupNodeForValue:atLevel:locale:
componentAtIndex:
wordAtIndex:
hasPreserveFlag
trimmedStringStartingAtWord:
localizedBlankGroupName
caseInsensitiveCompare:
localizedErrorGroupName
localizedTrueGroupName
localizedTrueGroupNameForColumn
localizedFalseGroupName
localizedFalseGroupNameForColumn
locale
lowercaseStringWithLocale:
normalizedStringForCompare:
localizedStringForCellValue:categoryLevel:groupBy:
findGroupNodeForDisplayValuesFromSplitter:atLevel:groupBy:startAtComponent:startAtWord:preserveFlags:
groupValueTupleByReplacingValue:atLevel:
groupValueUid
mapPreviousGroupNodeUid:toUpdatedGroupNodeUid:
addChangesTo:forReplacingValue:atLevel:
groupValueTupleByRemovingValueAtLevel:
numberOfLevels
addChangesTo:forRemovingValueAtLevel:
groupValueTupleByPromotingValueAtLevel:toLevel:
addChangesTo:forPromotingValueAtLevel:toLevel:
groupValueTupleByDemotingValueAtLevel:toLevel:
addChangesTo:forDemotingValueAtLevel:toLevel:
mergedFormatChangedByAddingRowUID:andCellValue:
p_refreshGroupValue
didAddRowUID:toGroup:
prefixTupleToLevel:
didAddGroupNode:
insertRowUid:forGroupValueTuple:atLevel:forGroupBy:withLocale:
aggregators
aggNodeForGroupNode:
isRebuildFormulasDeferred
setNeedsRebuildOfAggFormulas:
rebuildFormulasForAggNode:forGroupBy:
containsUuid:
removeUUID:
mergedFormatChangedByRemovingRowUID:
didRemoveRowUID:fromGroup:
removeRowUid:forGroupValueTuple:atLevel:forGroupBy:withLocale:
willRemoveGroupNode:
removeChildForKey:
clearWithGroupBy:
allKeys
removeUuidsFromSetReturningRemoved:
removeRowUids:forGroupBy:
categoryOwner
aggregator
columnUid
aggNodeForColumnUid:
addChild:
enumerateDirectChildren:
groupBy
tableInfo
cellRefsForRowUids:tableUID:
cellRefsForAggNodesAtGroup:
anyAggregateTypeForColumnUID:
calcEngine
hasFormulaAt:
emptyReferenceSetWrapper
insertCellRef:
replaceFormulaIfPrecedentsDifferAt:inOwner:precedents:replaceOptions:
resetExternalReferencesToGroupNode:inGroupBy:
removeFormulaAt:inOwner:
beginBatchingGroupCellDirtying
markCellRefAsDirty:
endBatchingGroupCellDirtying
markOnlyDependentsDirty:
reset
removeAllRowUids
clearEmptyNodesWithGroupBy:
parentNode
stringByReplacingOccurrencesOfString:withString:
localizedNameForBlankGroupForDocumentLocale:
localizedNameForErrorGroupForDocumentLocale:
tsceValue
columnDisplayNameForCategoryLevel:
localizedTrueStringForBooleanGroupWithString:documentLocale:
localizedFalseStringForBooleanGroupWithString:documentLocale:
displayString
groupValueHierarchyStringWithDelimiterString:groupBy:namingContext:
initWithString:locale:
quoteComponents
forFormulaPlainText
tsce_internationalWhitespaceCharacterSet
rangeOfCharacterFromSet:
tsce_newStringByForcingSingleQuoteEscapes:
enumerateAllGroupsWithBlock:
enumerateGroupsAtLevel:withBlock:
groupNodeForGroupUid:
groupNodeForRowUid:atLevel:
needFormulasForAggregateType:
uidReturn
labelUid
initAsRootNode
isLeaf
isBlankNode
isErrorNode
childGroupUids
directChildGroupUids
aggregateRefForType:atLevel:forGroupBy:forColumnUid:
groupValueRefAtLevel:forGroupBy:
groupValueHierarchyRefAtLevel:forGroupBy:
updateGroupCellValueIfKeyMatches:
markAsDirtyWithCalcEngine:
markDependentsAsDirtyWithCalcEngine:
containsRowUid:
groupValueHierarchyForChart:groupBy:
groupValueHierarchyStringWithDelimiterString:
descriptionWithGroupBy:
nodePath
.cxx_destruct
.cxx_construct
_groupUid
_groupCellValue
_groupLevel
_aggNodes
_children
_childrenLock
_rowUids
_parentNode
_formatManager
_childNodesByRowUid
groupByForUID:withCalcEngine:
translator
rowUIDForBaseRowIndex:
cellUIDRegionFromCellRegion:
cellUIDForCellID:
initWithTableInfo:cellUIDRegion:anchorCellUID:cursorCellUID:baseCellUIDRegion:selectionType:searchReferenceRange:beginImplicitEditing:
baseTableModel
cellUIDRegionFromRegion:inTableModel:
columnRowUIDMap
initWithTableInfo:cellRegion:anchorCellID:cursorCellID:baseRegion:selectionType:searchReferenceRange:beginImplicitEditing:
initWithTableInfo:cellRegion:anchorCellID:cursorCellID:baseRegion:selectionType:
regionFromRange:
initWithTableInfo:cellRegion:anchorCellID:cursorCellID:baseRegion:
expandCellRangeToCoverMergedCells:
initWithTableInfo:cellRegion:anchorCellID:cursorCellID:selectionType:
initWithTableInfo:cellRange:type:anchorCellID:cursorCellID:
numberOfColumns
numberOfRows
initWithTableInfo:startingRowIndex:numberOfRows:
initWithTableInfo:startingColumnIndex:numberOfColumns:
cellRegion
regionOffsetBy:
anchorCellID
cursorCellID
baseRegion
selectionType
suitableAnchor
suitableCursor
regionFromRowIndices:columnRange:
regionFromColumnIndices:rowRange:
initWithTableInfo:andCellID:
cellIDForCellUID:
selectionWithTableInfo:cellID:
initWithTableInfo:cellRegion:
initWithTableInfo:rowIndices:
initWithTableInfo:columnIndices:
firstCellID
versionCounter
cellRegionFromCellUIDRegion:
p_cacheCellRegion:
invalidRegion
p_cacheBaseRegion:
cellCount
isRectangle
containsSingleCellOrMergeInTable:
mergeOriginForCellID:
sizeClass
initFromMessage:
readWeakReferenceMessage:completion:
addFinalizeHandler:
saveToMessage:
setWeakReference:message:
setIgnoreAndPreserveUntilModifiedRuleForField:message:
enumerateCellRangesUsingBlock:
containsCellID:
regionByAddingRange:
regionBySubtractingRange:
masterLayout
emptyFilteredTable
numberOfHiddenRows
intersectingColumnsIndexSet
selectionWithTableInfo:columnIndices:
intersectingRowsIndexSet
indexesOfVisibleRowsInRowRange:
regionByTrimmingAroundRowIndices:
indexOfVisibleRowAfterAndIncludingRowAtIndex:
indexOfVisibleRowBeforeAndIncludingRowAtIndex:
indexSetWithIndex:
regionFromColumnIndexes:rowIndexes:
selectionWithTableInfo:cellRegion:
selectionWithTableInfo:rowIndices:
boundingCellRange
indexesOfVisibleColumnsInCellRange:
regionByTrimmingAroundColumnIndices:
indexOfVisibleColumnAfterAndIncludingColumnAtIndex:
indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:
equalsCellRange:
isCategorized
isCategorySummaryRowCollapsed:
rowRangeUnderSummaryOrLabelRow:
mutableCopy
addIndexesInRange:
copyWithZone:
isMemberOfClass:
isEqualToSelection:
anchorCellUID
cursorCellUID
searchReferenceRange
beginImplicitEditing
equalsCellRegion:
tableAreaForCellID:
containsCellRegion:
isSingleCellOrMergeRange:
hasMergeFragmentAtCellID:
canEditWithControlCellSubselectionInTable:
cellAtCellID:
hasControl
interactionType
headerColumnRange
intersectsCellRange:
headerRowRange
bodyRowRange
footerRowRange
indexesForCategoryColumnsInRegion:
indexesForSummaryRowsInRegion:
indexesForLabelRowsInRegion:
containsCellsInSummaryRow
containsCellsInLabelRow
containsCellsInCategoryColumn
containsCellsInSummaryOrLabelRows
indexesForGroupingColumnsInRegion:
intersectsCellRegion:
isEmpty
indexesForSummaryAndLabelRowsInRegion:
numberOfIntersectingColumns
categoryColumnIndex
intersectsColumn:
regionBySubtractingColumnIndexes:
indexesForSummaryAndLabelRows
tsu_indexSetByIntersectingWithIndexes:
containsOnlyCellsInSummaryRow
canEditWithCellSubselectionInTable:
boundingTopLeftCellID
mergeRangeAtCellID:
newCell
getCell:atCellID:
isCategoryColumn:
isCategorySummaryRow:
description
mergeRangesIntersectingRange:
containsCellRange:
groupLevelForGroupUid:
aggregateTypeForColumnUID:atGroupLevel:
selectionWithTableInfo:cellUID:
archivedSelectionClass
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
isAtEndOfLine
initForUpgradeWithTableInfo:cellRegion:anchorCellID:cursorCellID:baseRegion:selectionType:
initWithTableInfo:cellRegion:anchorCellID:cursorCellID:
initWithTableInfo:selectionType:
initWithTableInfo:andCellRange:
initWithTableInfo:cellID:selectionType:
initWithTableInfo:rowOrColumn:index:count:
initWithTableInfo:andPreviousSelection:offsetBy:
isValid
logicalCellIDInTable:
initWithArchive:unarchiver:
saveToArchive:archiver:
initWithRdar39989167Archive:unarchiver:
selectionByExtendingWithCellRange:inTable:selectionType:cursorCell:
selectionByAddingCellRange:inTable:withAnchor:cursor:selectionType:
selectionByRemovingCellRange:inTable:withAnchor:cursor:selectionType:
selectionAdjustedForRowVisibilityInTableInfo:
selectionAdjustedForColumnVisibilityInTableInfo:
selectionAdjustedForGeometryInTableInfo:
setCellRange:
selectionToBeginImplicitEditingInTableInfo:
selectionExpandedToCoverCollapsedRows
insert:atIndex:count:
remove:atIndex:count:
areCellsInTheSameRegionInTable:
containsSelection:
containsCell:
selectsSingleControlCellWithInteractionUIInTable:
containsHeaderColumns
containsHeaderRows
containsBodyRows
containsFooterRows
containsCellsInCategoryColumnsOrRows
containsCellsInCategoryGroupingColumn
containsGroupValueCells
containsOnlyCellsInCategoryColumn
containsOnlyCellsInSummaryAndLabelRows
containsOnlyCellsInCategoryColumnsAndRows
containsOnlyGroupValueCells
canEditWithStockCellSubselectionInTable:
briefDescription
intersectsPartialMergeRangeInTable:
getAggregateType:
setSearchReferenceRange:
setTableInfo:
cellUIDRegion
setCellUIDRegion:
setAnchorCellUID:
setCursorCellUID:
baseCellUIDRegion
setBaseCellUIDRegion:
cachedCellRegion
setCachedCellRegion:
cachedCellRegionVersionCounter
setCachedCellRegionVersionCounter:
cachedBaseRegion
setCachedBaseRegion:
cachedBaseRegionVersionCounter
setCachedBaseRegionVersionCounter:
_beginImplicitEditing
_selectionType
_tableInfo
_cellUIDRegion
_baseCellUIDRegion
_cachedCellRegion
_cachedCellRegionVersionCounter
_cachedBaseRegion
_cachedBaseRegionVersionCounter
_searchReferenceRange
_anchorCellUID
_cursorCellUID
whitespaceCharacterSet
substringToIndex:
initWithCellRef:
setWasConstructedViaNames:
uppercaseString
setOverrideText:
setPreserveFlags:
arrayWithObject:
contextTableResolver
tsce_stringByFoldingForNamedReferenceMatchingWithLocale:
hasPrefix:
substringFromIndex:
referenceIsComplete
tsce_stringByUnescapingSingleQuotes
tsce_stringByUnescapingPartialQuotedString
headerNameMgr
headerCellsMatching:limitToTable:includePrefixes:
tsce_stringByAddingSingleQuoteEscapesIfNecessary
setNamesUsed:
array
tableResolverForTableUID:
localizedCaseInsensitiveIsEqual:toString:
anyRefForRangeForHeaderCell:usePreserveFlags:
referenceTextWithCalculationEngine:hostTableUID:
filterColons
rangeOfString:
rangeReference
rangeRef
compare:options:range:locale:
referencesMatchingInputAsPrefix
tsce_referenceComponentsSeparatedBySpace
subarrayWithRange:
componentsJoinedByString:
abortObject
isAborted
spanningRangeForHeaderCell:
subsetForReferenceName:limitToTable:includePrefixes:
headerCellsExactlyMatching:
headerCellsMatchingPrefix:
allHeaderCellRefsLimitedToTable:
stringInHeaderCell:
initWithRangeRef:
tsce_stringByAddingSingleQuoteEscapes
tsce_needsReferenceSingleQuoteEscaping
setOverrideTextAsTyped:
p_parseStringAsGeometricReferenceComponent:inResolver:outPreserveFlags:gettingReferencesMatchingInputAsPrefix:
addObjectsFromArray:
objectAtIndex:
preserveFlags
p_chromeReferencesForMixedReferences:calcEngine:
wasConstructedViaNames
parseAsBaseTableReference
p_chromeRangeRefForBaseRangeRef:calcEngine:
sheetName
setSheetNameUnquoted:
tableName
setTableNameUnquoted:
sheetNameUnquoted
tableNameUnquoted
contextResolver
resolverContainerMatchingName:
resolverMatchingName:
resolverMatchingName:contextResolver:
contextSheetName
resolverMatchingNameWithContextContainer:contextContainerName:
rest
resolverUID
setTableUID:
parseAsChromeRefWithParsingContext:
tableResolverForRefResolver:
tsce_referenceComponentsSeparatedByColon
p_parseStringAsReferenceComponentIntersection:inResolver:inTableNamed:preferredGeometricResolver:withParsingContext:
setReferencesMatchingInputAsPrefix:
setReferenceIsComplete:
namesUsed
referenceTextForAutocompleteWithCalculationEngine:hostTableUID:preserveFlags:inputString:inputStringIsComplete:
referenceTextForAutocompleteWithCalculationEngine:contextSheetName:preserveFlags:inputString:inputStringIsComplete:
referenceTextWithCalculationEngine:contextSheetName:
stringByAppendingString:
initWithContextTableResolver:
setContextSheetName:
setFilterColons:
setAbortObject:
anyRef
tsce_referenceComponentsSeparatedByPathDelimiter
p_parseComponentsOfReference:gettingSheetName:gettingTableName:gettingRest:
trimNames
whitespaceCharSet
stringByTrimmingCharactersInSet:
setSheetName:
setTableName:
setRest:
parseStringAsChromeReference:withParsingContext:
p_baseReferencesForChromeReferences:calcEngine:
p_baseRangeRefForChromeRangeRef:calcEngine:
resolverForTableUID:
parseR1C1Coord:containingCell:preserveFlagsOut:
rangeOfString:options:
substringWithRange:
hasSuffix:
initWithString:
setCharactersToBeSkipped:
scanInt:
isAtEnd
trimmedString
tableInfoForTableUID:withCalcEngine:
columnUIDForBaseColumnIndex:
viewColumnIndexForChromeColumnIndex:
columnUIDForColumnIndex:
wasQuoted
refPathSplitter
numComponents
aggregateFunction
aggregateTypeForAggregateLabel:
numWords
rangeOfString:options:range:
setAggregateFunction:
removeRefPathWordAtIndex:
p_findFirstColumnNameInComponent:tableName:refResolver:calcEngine:outPreserveFlags:usedWordCount:
objectLocale
setLocalizedBlankGroupName:
setLocalizedErrorGroupName:
trueString
setLocalizedTrueGroupName:
falseString
setLocalizedFalseGroupName:
columnIndexForColumnUID:
chromeColumnIndexForViewColumnIndex:
namer
nameForChromeColumnIndex:inTable:useSymbolicNames:
setLocalizedTrueGroupNameForColumn:
setLocalizedFalseGroupNameForColumn:
groupNodeForGroupValueHierarchyFromSplitter:startAtComponent:startAtWord:preserveFlags:
initWithReferenceString:
setRefPathSplitter:
parseAsCategoryRefWithParsingContext:
p_parseAsCategoryRefWithSheet:tableName:columnNameAndGroupValuesStartAt:withParsingContext:
p_baseReferenceForChromeReference:calcEngine:
overrideText
overrideTextAsTyped
p_chromeReferenceForBaseReference:calcEngine:
baseTractRefForChromeTractRef:
boundingRangeRef
chromeTractRefForBaseTractRef:
initWithCalcEngine:
parseStringAsBaseReference:withParsingContext:
parseR1C1Reference:containingCell:preserveFlagsOut:
parseStringAsCategoryRef:withParsingContext:
parseAsTractRefWithParsingContext:
setWhitespaceCharSet:
_calcEngine
_whitespaceCharSet
logFullBacktrace
willModify
willModifyForUpgrade
tableStylePreset
theme
presetsOfKind:
presetID
setTableStylePreset:
enumerateObjectsUsingBlock:
makeStyleMapper
mapTableStylesToStylesheet:withMapper:
p_clearDefaultStyles
tableStyle
setTableStyle:
bodyCellStyle
setBodyCellStyle:
headerRowCellStyle
setHeaderRowCellStyle:
headerColumnCellStyle
setHeaderColumnCellStyle:
footerRowCellStyle
setFooterRowCellStyle:
categoryLevel1CellStyle
setCategoryLevel1CellStyle:
categoryLevel2CellStyle
setCategoryLevel2CellStyle:
categoryLevel3CellStyle
setCategoryLevel3CellStyle:
categoryLevel4CellStyle
setCategoryLevel4CellStyle:
categoryLevel5CellStyle
setCategoryLevel5CellStyle:
labelLevel1CellStyle
setLabelLevel1CellStyle:
labelLevel2CellStyle
setLabelLevel2CellStyle:
labelLevel3CellStyle
setLabelLevel3CellStyle:
labelLevel4CellStyle
setLabelLevel4CellStyle:
labelLevel5CellStyle
setLabelLevel5CellStyle:
bodyTextStyle
setBodyTextStyle:
headerRowTextStyle
setHeaderRowTextStyle:
headerColumnTextStyle
setHeaderColumnTextStyle:
footerRowTextStyle
setFooterRowTextStyle:
categoryLevel1TextStyle
setCategoryLevel1TextStyle:
categoryLevel2TextStyle
setCategoryLevel2TextStyle:
categoryLevel3TextStyle
setCategoryLevel3TextStyle:
categoryLevel4TextStyle
setCategoryLevel4TextStyle:
categoryLevel5TextStyle
setCategoryLevel5TextStyle:
labelLevel1TextStyle
setLabelLevel1TextStyle:
labelLevel2TextStyle
setLabelLevel2TextStyle:
labelLevel3TextStyle
setLabelLevel3TextStyle:
labelLevel4TextStyle
setLabelLevel4TextStyle:
labelLevel5TextStyle
setLabelLevel5TextStyle:
tableNameStyle
setTableNameStyle:
tableNameShapeStyle
setTableNameShapeStyle:
validateTableStylesInSameStylesheetExpectingDocSS:
initWithLocale:
initWithContext:
sharedTableConfiguration
initWithOwner:
setStorageParentToInfo:
unnamedTableString
tableNameEnabledInNewTables
initWithTableModel:
initWithBaseTableUID:
initWithTableInfo:context:
initWithRules:type:
initForUpgradeWithTableModel:
styleNetwork
rootAncestor
setStyleNetwork:
tableSizeClass
setShouldUseWideRows:
performBlockIgnoringModifications:
initWithContext:columnUIDs:rowUIDs:
initWithContext:tableUID:columnRowUIDMap:styles:stylePreset:tableInfo:
objectUUID
initWithContext:tableUUID:numberOfRows:numberOfColumns:
initWithContext:fromSourceModel:region:tableInfo:waitForCalcEngine:formulaCoordSpace:
regionByIntersectingRange:
networkFromStyleProvider:
blockUntilRecalcIsCompleteWithTimeout:
rowUIDsForRowRange:
columnUIDsForColumnRange:
initWithContext:rowUids:columnUids:styles:stylePreset:tableInfo:
fromTableUID
fromGroupByUID
repeatingHeaderRowsEnabled
repeatingHeaderColumnsEnabled
headerRowsFrozen
headerColumnsFrozen
tableNameEnabled
tableNameBorderEnabled
setTableNameBorderEnabled:
tableNameHeight
setTableNameHeight:
styleApplyClearsAll
setStyleApplyClearsAll:
defaultRowHeight
setDefaultRowHeight:
defaultColumnWidth
setDefaultColumnWidth:
heightOfRowAtIndex:isDefault:
setHeight:ofRowAtIndex:
widthOfColumnAtIndex:isDefault:
setWidth:ofColumnAtIndex:
sortOrder
mergeOwner
mergeRangesIntersectingBaseCellRegion:
tableAreaForBaseCellCoord:
insertBaseMergeRange:
pencilAnnotationOwner
formulaStore
rangeFromFormulaAtIndex:useBoundingRange:
pencilAnnotationStorage
copyWithContext:
initWithTableInfo:pencilAnnotationStorage:
addAnnotation:withAnchorRange:
enumerateAnnotationsAndFormulasContainedInRegion:withBlock:
dataStore
hasPasteboardCustomFormats
copyPasteboardCustomFormatsFromDataStore:
calculationEngine
coordinateMapper
initForCategorizedTableBaseToChromeRewriterWithSrcTableUID:srcTract:dstTableUID:destTract:coordMapper:
cellID
cell
clearDataListIDs
hasFormulaSyntaxError
formulaSyntaxError
setFormulaSyntaxError:
hasRichText
richTextValue
setRichTextValue:
hasCommentStorage
commentStorage
setCommentStorage:
cellSpec
asChooserControlSpec
popupModel
startWithFirstItem
popupCellSpec:startWithFirstItem:
setCellSpec:
hasFormula
formula
setFormulaByRef:
hasConditionalStyle
conditionalStyle
conditionalStyleFormulaOwnerUID
copyByRewritingWithContext:rewriteBlock:
setConditionalStyle:
setCell:atCellID:tableUID:calculationEngine:conditionalStyleOwner:ignoreFormula:clearImportWarnings:doRichTextDOLC:
p_iterateDataStoreCellsInRegion:searchFlags:usingBlock:
strokeSidecar
setStroke:forTopOfRow:order:columnRange:
setStroke:forBottomOfRow:order:columnRange:
setStroke:forLeftOfColumn:order:rowRange:
setStroke:forRightOfColumn:order:rowRange:
enumerateStrokesInRegion:usingTopStrokeBlock:usingBottomStrokeBlock:usingLeftStrokeBlock:usingRightStrokeBlock:
flattenStrokeOrder
dropAllTargets
removeValueForProperty:
updateTableRowColumnStylesWithBlock:
isReadCancelled
insertNewRowsInIndexRange:
insertNewColumnsInIndexRange:
initWithDelegate:
cellMapWithContext:
clear
inflateFromStorageRef:dataStore:suppressingTransmutation:
addCell:andCellID:
enumerateCellStoragesRowByRowToMaxID:getPreBNC:withBlock:
removeAllFormulasFromOwner:
conditionalStyleFormulaOwner
ownerUID
resetAlmostEverything
setCellsWithBaseCellMap:ignoreFormulas:skipDirtyingNonFormulaCells:
numberOfPopulatedCells
auditTilesForRowOverlapAndExtensionPastTableBounds:result:
loggerWithDomain:
setLogApplicationName:
setSamplingPercentage:
logScalarValue:forKey:
p_auditTilesForRowOverlapAndExtensionPastTableBoundsWithVersion:
auditDatalistDuplicationReturningResult:
auditRowInfoCellCountsReturningResult:
confirmRefCountsReturningResult:
setUpgrading:
upgradeDataStoreCellStorageIfNeededWithTableUID:conditionalStyleOwner:
repairStyleDatalistStylesheetIfNecessary
p_auditTableHealthUpgradingFromVersion:
p_rebuildTheTable:
shouldUseWideRows
p_upgradeDefaultCellStylesForStrokeSidecar
mergeRanges
hiddenStates
indexesOfUserHiddenRowsInCellRange:
showRowAtIndex:forAction:
enumerateIndexesUsingBlock:
indexesOfHiddenColumnsInCellRange:
showColumnAtIndex:forAction:
upgradeConditionalStylesToLinkedRefWithTableUID:
viewCellRegionForBaseCellRect:
NRM_formulaOwnerUID
supportsControlCells
forceLoadHeaderStorages
baseCellCoordForViewCellCoord:
clearValue
setCurrentFormat:isExplicit:
willBeRemovedFromDocumentRoot:
wasRemovedFromDocumentRoot:
willBeAddedToDocumentRoot:dolcContext:
wasAddedToDocumentRoot:dolcContext:
hasMismatchedFormatAndValue
formatType
setBoolValue:
setNumberDoubleValue:
setDefaultFormatForValue
customFormat
clearFormatOfType:
processCustomFormatsWithBlock:
removeControlCellSpec
cellStyle
cellStyleForCellWithEmptyStyleAtBaseCellCoord:isDefault:
setCellStyle:
isVariation
parent
defaultCellStyleForBaseCellCoord:
propertyMap
variationOfStyle:propertyMap:
textStyle
textStyleForCellWithEmptyStyleAtBaseCellCoord:isDefault:
setTextStyle:
defaultTextStyleForBaseCellCoord:
numberDecimalValue
setNumberDecimalValue:
currencyDecimalValue
setCurrencyDecimalValue:
addFunctionUsesInFormula:atCellRef:
setFormula:
copyByClearingUids:containingTableUID:
validateAndRepair
addCell:atViewCellCoord:
initWithTableInfo:region:flags:searchFlags:
initWithContext:viewCellRect:
appendCellLists:
enumerateConcurrentlyUsingChunkBeginBlock:concurrentBlock:finalBlock:
hasCells
convertToUuidBasedCellMapUsingTableInfo:pruneCategorizedCells:
willApplyToTable:
prepareToApplyConcurrentCellMap:
containsCellBorderChanges
accumulateCurrentCellsConcurrently:suppressCellBorder:
setCellsConcurrently:ignoreFormula:clearImportWarnings:
didApplyConcurrentCellMap:
validate
dirtyCellsUsingFunction:
generateCategoryStylesConnectedToStylesheet:
defaultCellStyleForTableStyleArea:
addStyle:withParent:identifier:shouldDoDOLC:
defaultTextStyleForTableStyleArea:
updateCalcEngineForTableSize
scheduleRepairingSpanningFormulasInOwner:
endTrackingNamesInTableForLegacyNRM:
fileFormatVersion
initWithArchive:unarchiver:owner:
readReferenceMessage:completion:
tsp_stringWithProtobufString:
isFromCopy
isCrossAppPaste
initWithArchive:unarchiver:forBaseTableUID:
initWithFilterRules:type:context:
initWithTableModel:ownerUID:
initWithArchive:unarchiver:forTableModel:
initFromArchive:
initFromArchive:unarchiver:
hasPreUFFVersion
nsTableUID
newObjectUUIDWithOffset:
initWithBaseTableUID:ownerUID:
p_upgradeMerges
updateForTableSize:
tsp_isInDocument
saveToArchive:archiver:isInTheDocument:
setStrongReference:message:
presetNeedsStrongOwnership
tsp_protobufString
isForCopy
hasHiddenRows
numberOfUserHiddenRows
mutableFilteredRowIndexes
hasHiddenColumns
numberOfHiddenColumns
numberOfUserHiddenColumns
encodeToArchive:archiver:
hiddenStatesOwner
hauntedOwner
setIgnoreAndPreserveUntilModifiedRuleForFieldPath:message:
requiresDocumentVersion:featureIdentifier:
bodyRange
setTableRange:bodyRange:forTableUID:
markIndirectCallsAsDirty
resetMergeCache
importSettings
type
summaryModel
aggregateFormulaOwnerUID
hiddenStateOwnerForRowsUID
hiddenStateOwnerForColumnsUID
initWithTableUID:pasteBoardTableUID:hiddenStateOwnerForRowsUID:hiddenStateOwnerForColumnsUID:conditionalStyleOwnerUID:sortRuleReferenceTrackerOwnerUID:mergeOwnerUID:pencilAnnotationOwnerUID:categoryOwnerUID:categoryAggregatesOwnerUID:groupByUID:
ownerUIDMapper
setToIdentityMapping
intValueForProperty:
valueForProperty:
rowUIDForRowIndex:
metadataForRowIndex:hidingAction:uuid:
metadataForColumnIndex:hidingAction:uuid:defaultColumnWidth:
initWithKeyOptions:valueOptions:capacity:
archivingCompatibilityVersion
sortOrderWithRules:type:
rules
updateForSortRules:
setBaseTableUID:
aggregateFormulaOwner
localizedStringForKey:value:table:
stringFromNumber:
cellRangeForTableArea:givenTableSize:numberOfHeaderRows:numberOfFooterRows:numberOfHeaderColumns:
tableAreaForCellID:inTableWithHeaderColumns:headerRows:footerRows:totalRows:
numberOfHeaderColumns
actualHeaderColumnRange
indexSet
addIndex:
topCornerRange
bottomCornerRange
tableStyleAreaForBaseCellCoord:
getDefaultCell:forTableStyleArea:
cellExistsAtCellID:
cellBorderAtCellID:
setCellBorder:
hasContent
getCell:atBaseCellCoord:suppressCellBorder:
cellExistsAtBaseCellCoord:
getCell:atBaseCellCoord:
replaceFormula:atCellCoord:inOwner:replaceOptions:
hasFormulaAtCellID:
isEmptyForDataStore
maxNumberOfPopulatedCells
hasMaxNumFormulas
p_shouldAllowSetCell:atBaseCellCoord:
cellWillChangeDistributor
willApplyCell:baseCellCoord:tableUID:
cellBorder
setCellBorder:atCellID:
setCell:atBaseCellCoord:ignoreFormula:clearImportWarnings:calcEngine:
formulaAtCellID:
formulaSpecAtCellID:
isUIDBased
enumerateCellsWithIDsUsingBlock:
p_shouldAllowApplyBaseCellMap:
startOfGroupingChangesBatch
willApplyBaseCellMap:tableUID:
setBordersWithCellMap:
setCellMap:tableUID:calculationEngine:conditionalStyleOwner:ignoreFormulas:skipDirtyingNonFormulaCells:doRichTextDOLC:
endOfGroupingChangesBatch
cellWillBeModifiedInCurrentRecalcCycle:
currentFormatIsExplicitForCalcEngine
currentFormat
asDurationFormat
durationTimeIntervalValue
formatByFixingUnitsIfNecessaryForTimeInterval:
formatForCalcEngineAtCellID:formatIsExplicitOut:refIfAvailable:
useAutomaticUnits
cellStorageRefAtCellID:
valueTypeAtCellID:
numberOfComments
hasCommentAtBaseCellCoord:
commentHostingMap
initWithStorage:forTableInfo:baseCellCoord:
storage
commentStorageAtCellID:
commentHostingAtBaseCellCoord:forCommentStorage:
commentWillBeAddedToDocumentRoot
postCommentNotificationForStorage:baseCellCoord:notificationKey:
setCell:atBaseCellCoord:ignoreFormula:clearImportWarnings:
arrayWithObjects:count:
dictionaryWithObjects:forKeys:count:
defaultCenter
postNotificationName:object:userInfo:
clearCommentHostingMapForCommentStorage:
setCellStyle:ofRowAtIndex:
setTextStyle:ofRowAtIndex:
cellStyleOfRowAtIndex:
textStyleOfRowAtIndex:
setCellStyle:ofColumnAtIndex:
setTextStyle:ofColumnAtIndex:
cellStyleOfColumnAtIndex:
textStyleOfColumnAtIndex:
cellStyleOfRowAtIndex:isDefault:
cellStyleOfColumnAtIndex:isDefault:
textStyleOfRowAtIndex:isDefault:
textStyleOfColumnAtIndex:isDefault:
cellStyleAtCellID:
textStyleAtCellID:
conditionalStyleSetAtCellID:
heightOfRowAtIndex:
widthOfColumnAtIndex:
numberWithDouble:
CGFloatValue
computeDefaultFontHeightForTableStyleArea:
topInset
bottomInset
p_tableSize
mergedRangeForBaseCellCoord:
maxNumberOfRows
insertRows:
insertRowsWithUIDs:atIndex:
insertNewRowsInBaseRange:
objectAtIndexedSubscript:
updateRowHeaderAtIndex:fromMetadata:
hidingAction
showBaseRowAtIndex:forAction:
hideBaseRowAtIndex:forAction:
rewriteMergesForInsertedRange:uids:isRows:
dirtyCellsForInsertionOfRows:forTable:tableRange:headerRange:
maxNumberOfColumns
insertColumns:
insertColumnsWithUIDs:atIndex:
insertNewColumnsInBaseRange:
updateColumnHeaderAtIndex:fromMetadata:
hideBaseColumnAtIndex:forAction:
setNumberOfHeaderColumns:
dirtyCellsForInsertionOfColumns:forTable:tableRange:headerRange:
setNumberOfHeaderRows:
setNumberOfFooterRows:
didAddRows:
annotationsContainedByRegion:
dirtyCellsForRemovalOfRows:fromTable:tableRange:
removeFormulasFromRange:
removeFormulasInRange:
rewriteMergesForRemovedRange:uids:isRows:
deleteRowsFromBaseRange:rowUids:
removeRows:
indexSetWithIndexesInRange:
removeRowsAtIndexes:
dirtyCellsForRemovalOfColumns:fromTable:tableRange:
deleteColumnsFromBaseRange:columnUids:
removeColumns:
removeColumnsAtIndexes:
removeRowsAtIndex:count:
enumerateRangesWithOptions:usingBlock:
removeColumnsAtIndex:count:
_removeAnnotationsFromDeleteRange:
enumerateRangesUsingBlock:
moveRowIndexRange:toIndex:
moveBaseRowRange:toRowIndex:
updateTrackedHeaders:
moveColumnIndexRange:toIndex:
moveBaseColumnRange:toColumnIndex:
swapRowAtIndex:withRowAtIndex:
swapBaseRowAtIndex:withRowAtIndex:
hidingStateOfRowAtIndex:
hidingStateOfColumnAtIndex:
versionAtUnarchive
headerInfo_hidingActionForRowAtIndex:
hideRowAtIndex:forAction:
headerInfo_hidingActionForColumnAtIndex:
hideColumnAtIndex:forAction:
needsToUpdateFilterSetForImport
setHidingState:ofRowAtIndex:
setHidingState:ofColumnAtIndex:
formattedValue
stringAtCellID:
textStyleAtBaseCellCoord:isDefault:
conditionalStyleAppliedRule
ruleAtIndex:
blackColor
hasMigratableStylesInCells
regionFromCellIDVector:
maxOrder
strokeLayerForLeftSideOfColumn:
strokeLayerForRightSideOfColumn:
strokeLayerForTopOfRow:
strokeLayerForBottomOfRow:
attachmentCount
elementKind
autoNumberAttachmentError
attachmentError
populatedCustomFormat:value:
indirectErrorForRangeReference:hostTableUID:
numberDoubleValue
currencyDoubleValue
asCurrencyFormat
currencyCode
asCustomFormatWrapper
currencyCodeForValue:
unitForCurrencyCode:
boolValue
durationUnitLargestWithTimeInterval:
stringValue
textStyle:isEqualToDefaultTextStyleForBaseCellCoord:
initWithContext:string:kind:stylesheet:paragraphStyle:listStyle:section:columnStyle:
dateValue
tsceValueFromCell:atBaseCellCoord:fetchRichTextAttributesIfPlainText:
newCellValueFromTSCEValue:withLocale:
getValue:atBaseCellCoord:fetchRichTextAttributesIfPlainText:
applyConditionalValue:
stringForCalcEngineAtCellID:refIfAvailable:
richTextStorageForCalcEngineAtCellID:refIfAvailable:
nextTableUID
updateTableUIDFrom:toTableUID:
sortRuleReferenceTracker
nextSortRuleReferenceTrackerOwnerUID
setOwnerUID:
setFormulaOwnerUIDsWithMap:
nextHiddenStateForRowsOwnerUid
nextHiddenStateForColumnsOwnerUid
nextConditionalStyleOwnerUID
setSubOwnerID:
nextMergeOwnerUID
nextPencilAnnotationOwnerUID
nextCategoryOwnerUID
nextCategoryAggregatesOwnerUid
setAggregateFormulaOwnerUID:
nextGroupByUid
setGroupByUid:
addReceiverToGroupBy:
containsForms
isTableLinkedToAForm:
tableUID:changedToTableUID:
replaceFormulasUsingBlock:
copyByRemappingHostCellAgnosticOwnerUIDsWithMap:calcEngine:ownerUID:error:
replaceConditionalStyleSetsUsingBlock:
formulaID
containsIndex:
bakeFormulaToValue
conditionalStyleID
copyByRemappingOwnerUIDsWithMap:calcEngine:error:
setConditionalStyleAppliedRule:
remapTableUIDsInFormulasWithMap:calcEngine:
remapTableUIDsInFormulasWithMap:
customFormatKey
addPasteboardCustomFormat:toDocument:updatingPasteboardFormat:
customFormatForKey:
initWithFormatType:customFormatKey:customFormat:appliedConditionKey:
updateCustomFormatFromPaste:
clearPasteboardCustomFormatMap
mapReassigningPasteboardCustomFormatKeys:
makePasteboardCustomFormatList
currentTransaction
isSkippingRepairBadRefsForOwnerUID:
duringRollback
tableUIDHistory
hasBadRefWithUidInfo
supportsCategorization
hasFormulaEvaluationError
asFormulaSpec
updateCalculationEngineForFormula:inBaseCellCoord:usingCalcEngine:
copyByRepairingBadReferences:
replaceFormulaForConditionalStyle:atCellID:
coordFromIndex:
referenceSet
getPrecedents:calcEngine:hostCell:doImplicitIntersection:returnUidReferences:
replaceFormulaAt:inOwner:precedents:replaceOptions:
enumerateMergeFormulasUsingBlock:
containsFormulas
numberOfConditionalStyles
initForCategorizedTableChromeToBaseRewriterWithSrcTableUID:srcTract:dstTableUID:destTract:coordMapper:srcCoordMapper:fromTableUID:
setConditionalStyleOwnerUID:
cellHasFormula
formulaCoordSpace
cellHasConditionalStyle
setFormulaCoordSpace:
allCellCoords
clearErrorForCells:
mappedStyleForStyle:
supportsBidiTablesUI
setIntValue:forProperty:
cellStyleForTableStyleArea:
setCellStyle:forTableStyleArea:
textStyleForTableStyleArea:
setTextStyle:forTableStyleArea:
updateHeaderStorageStylesWithBlock:
supportsInlineAttachments
adoptStylesheet:withMapper:supportsInlineAttachments:
assertListTilesAndRows
isAncestorOf:
enumerateAllStylesWithBlock:
removeAnnotations:
upgradeCellFormatsU2_0
networkFromTheme:presetID:
setParagraphStyle:forCharRange:undoTransaction:
enumerateWithAttributeKind:inRange:usingBlock:
defaultFormatWithFormatType:locale:
copyToCell:
rangeForCellID:includingBreak:
newSubstorageWithRange:context:flags:kind:
canBeStoredInAStringValueCell
setStringValue:
paragraphStyleAtCharIndex:effectiveRange:
mergedRects
insertBaseMergeRangeRemovingOverlaps:
containsImportWarnings
containsControlCellSpecs
allRichTextStorages
tableNameBorderStroke
initWithTableInfo:tableModel:region:flags:searchFlags:clampingRange:
getNextCellData:
hasEqualContentToCell:
terminate
hasAlternatingRows
initWithContext:fromSourceModel:region:tableInfo:waitForCalcEngine:
setTableNameEnabled:
initWithInfo:region:flags:searchMask:
iterateCellsUsingBlock:
inflateFromStorageRef:dataStore:
accumulateCurrentCellsConcurrentlyInRow:rowInfo:atColumns:usingCellCreationBlock:
accumulateCellBordersConcurrently:inRow:atColumns:
accumulateCurrentCellsConcurrentlyUsingBlock:
containsUidReferences
copyToGeometricFormWithRewriteContext:
copyByConvertingToRelativeAncestorsWithRewriteContext:
enumerateCellsAddedAndRemovedOfType:withOptions:usingBlock:
updateDataListsConcurrentlyWithConcurrentCellMap:clearImportWarnings:
upgradingFormulasMinion
setCellsConcurrently:tableUID:calculationEngine:conditionalStyleOwner:ignoreFormula:clearImportWarnings:
needsObjectUUID
mixingTypeWithObject:context:
mixedObjectWithFraction:ofObject:
mixedBaseObjectWithObject:
canMixWithNilObjects
mixableObjectClasses
defaultHorizontalBorderStroke
defaultHorizontalBorderStrokeEvenIfNotVisible
defaultVerticalBorderStroke
bodyColumnStroke
bodyRowStroke
bodyRowStrokeEvenIfNotVisible
headerColumnBorderStroke
headerColumnBodyColumnStroke
headerColumnBodyRowStroke
headerColumnSeparatorStroke
headerRowBorderStroke
headerRowBodyColumnStroke
headerRowBodyRowStroke
headerRowSeparatorStroke
footerRowBorderStroke
footerRowBodyColumnStroke
footerRowBodyRowStroke
footerRowSeparatorStroke
categoryLevel1TopStroke
categoryLevel2TopStroke
categoryLevel3TopStroke
categoryLevel4TopStroke
categoryLevel5TopStroke
categoryLevel1LabelSeparatorStroke
categoryLevel2LabelSeparatorStroke
categoryLevel3LabelSeparatorStroke
categoryLevel4LabelSeparatorStroke
categoryLevel5LabelSeparatorStroke
categoryLevel1BottomStroke
categoryLevel2BottomStroke
categoryLevel3BottomStroke
categoryLevel4BottomStroke
categoryLevel5BottomStroke
categoryLevel1InteriorStroke
categoryLevel2InteriorStroke
categoryLevel3InteriorStroke
categoryLevel4InteriorStroke
categoryLevel5InteriorStroke
enumerateDataStoreCellsWithBlock:
setStrokeSidecar:
willClose
documentLocaleDidChange
setStylesheetForUpgradeToSingleStylesheet:
initWithContext:rows:columns:styles:stylePreset:tableInfo:
upgradeDuringDocumentUpgradeIfNeeded:tableInfo:
loadFromUnarchiver:
saveToArchiver:
setPresetNeedsStrongOwnership:
setRepeatingHeaderRowsEnabled:
setRepeatingHeaderColumnsEnabled:
setHeaderRowsFrozen:
setHeaderColumnsFrozen:
numberOfHeaderRows
numberOfFooterRows
setlabelLevel1CellStyle:
setlabelLevel2CellStyle:
setlabelLevel3CellStyle:
setlabelLevel4CellStyle:
setlabelLevel5CellStyle:
setlabelLevel1TextStyle:
setlabelLevel2TextStyle:
setlabelLevel3TextStyle:
setlabelLevel4TextStyle:
setlabelLevel5TextStyle:
setColumnRowUIDMap:
setTextImportRecord:
identityOwnerUIDMapper
hasTableBorder
tableWritingDirection
metadataForRowIndex:hidingAction:
metadataForColumnIndex:hidingAction:
setSortOrder:
resetSortRuleReferenceTrackerForInsert
setFromTableUID:
clearFromTableUID
setFromGroupByUID:
clearFromGroupByUID
wasCut
setWasCut:
cellRangeForTableArea:
tableAreaForRow:
tableAreaForColumn:
tableStyleAreaForRow:
tableAreasForBaseCellRect:
getDefaultCell:forBaseCellCoord:
cellAtBaseCellCoord:
hasFormulaAtBaseCellCoord:
formulaAtBaseCellCoord:
formulaSpecAtBaseCellCoord:
formatForCalcEngineAtBaseCellCoord:formatIsExplicitOut:
cellValueTypeAtBaseCellCoord:
hasCommentStorageAtBaseCellCoord:
commentHostingAtBaseCellCoord:
setCommentStorage:atBaseCellCoord:
removeCommentStorageAtBaseCellCoord:
cellStyle:isEqualToDefaultCellStyleForBaseCellCoord:
setCellStyle:atBaseCellCoord:
setTextStyle:atBaseCellCoord:
cellStyleAtBaseCellCoord:isDefault:
conditionalStyleSetAtBaseCellCoord:
setHeight:ofRow:
setWidth:ofColumn:
rowHeights
columnWidths
setColumnWidths:
setRowHeights:
computeDefaultRowHeight
bodyColumnRange
hasNamesInHeaders
insertRowsInBaseRange:uids:metadata:unsetFilterHidingAction:
insertColumnsAtIndex:uids:metadatas:tableArea:
insertRowsAtIndex:uids:metadatas:tableArea:unsetFilterHidingAction:
removeRowsAtBaseIndexes:
removeColumnsAtBaseIndexes:
removeAnnotationsFromRowsAtBaseIndexes:
removeAnnotationsFromColumnsAtBaseIndexes:
upgradeHiddenStates
upgradeHiddenFormulaOwnerForColumnsUID
upgradeHiddenFormulaOwnerForRowsUID
upgradeNeedsToUpdateFilterSetForImport
hiddenStateFormulaOwnerForRows
hiddenStateFormulaOwnerForColumns
setHidingState:atRowIndex:
setHidingState:atColumnIndex:
stringAtBaseCellCoord:optionalCell:
characterFillAtBaseCellCoord:optionalCell:
regionForValueOrCommentCellsInBaseCellRect:
fillForRow:
fillForColumn:
maxStrokeOrder
setStroke:forTopOfRow:order:
setStroke:forBottomOfRow:order:
setStroke:forLeftOfColumn:order:
setStroke:forRightOfColumn:order:
cellValueFromCell:atBaseCellCoord:
cellValueAtBaseCellCoord:
setFormulaOwnerUIDsWithMap:shouldStealReferences:
remapTableUIDsInFormulasWithMap:calcEngine:bakeForBadRefs:
addPasteboardCustomFormatsToDocumentAndUpdateCells
copyPasteboardCustomFormatsFromTableModel:
registerAllFormulasWithCalculationEngine:wasCrossDocumentPaste:infoIsCategorized:wasUndo:
prepareForPasteWithCalculationEngine:sourceOffset:bakeFormulas:
hasFormulas
cellsModifiedInCurrentRecalcCycle
addCellRefToClearError:
clearErrors
adoptStylesheet:withMapper:
assertCollaborationConvergence
upgradeFormatsForCustomFormatListU2_0
upgradeFromPreUFF
hasImportWarnings
hasControls
baseCellCoordForCellContainingRichTextStorage:
shouldAllowApplyConcurrentCellMap:
hasEmbiggened
setCalcEngine:
setDataStore:
presetIDForUpgrade
setPresetIDForUpgrade:
cellsPendingWrite
cellsToInvalidateAfterRecalc
cellsToInvalidateNonoverflowingAfterRecalc
setConditionalStyleFormulaOwner:
deprecatedProvider
setDeprecatedProvider:
wasUnarchivedFromAProvidedTable
setWasUnarchivedFromAProvidedTable:
textImportRecord
upgradeFilterSet
setUpgradeFilterSet:
_hiddenStateFormulaOwnerForRows
_hiddenStateFormulaOwnerForColumns
_strokeSidecar
_clearErrorCells
_clearErrorLock
_hasEmbiggened
_wasCut
_headerRowsFrozen
_headerColumnsFrozen
_tableNameEnabled
_tableNameBorderEnabled
_repeatingHeaderRowsEnabled
_repeatingHeaderColumnsEnabled
_styleApplyClearsAll
_presetNeedsStrongOwnership
_wasUnarchivedFromAProvidedTable
_numberOfHeaderColumns
_numberOfHeaderRows
_numberOfFooterRows
_versionAtUnarchive
_dataStore
_defaultRowHeight
_defaultColumnWidth
_tableName
_tableNameHeight
_presetIDForUpgrade
_tableStylePreset
_tableStyle
_bodyCellStyle
_headerRowCellStyle
_headerColumnCellStyle
_footerRowCellStyle
_categoryLevel1CellStyle
_categoryLevel2CellStyle
_categoryLevel3CellStyle
_categoryLevel4CellStyle
_categoryLevel5CellStyle
_labelLevel1CellStyle
_labelLevel2CellStyle
_labelLevel3CellStyle
_labelLevel4CellStyle
_labelLevel5CellStyle
_bodyTextStyle
_headerRowTextStyle
_headerColumnTextStyle
_footerRowTextStyle
_categoryLevel1TextStyle
_categoryLevel2TextStyle
_categoryLevel3TextStyle
_categoryLevel4TextStyle
_categoryLevel5TextStyle
_labelLevel1TextStyle
_labelLevel2TextStyle
_labelLevel3TextStyle
_labelLevel4TextStyle
_labelLevel5TextStyle
_tableNameStyle
_tableNameShapeStyle
_cellsPendingWrite
_cellsToInvalidateAfterRecalc
_cellsToInvalidateNonoverflowingAfterRecalc
_conditionalStyleFormulaOwner
_mergeOwner
_categoryOwner
_hiddenStatesOwner
_hauntedOwner
_sortOrder
_sortRuleReferenceTracker
_columnRowUIDMap
_cellWillChangeDistributor
_deprecatedProvider
_commentHostingMap
_textImportRecord
_upgradeFilterSet
_pencilAnnotationOwner
_tableUID
_fromTableUID
_fromGroupByUID
dateWithTimeIntervalSinceReferenceDate:
messageWithDescriptor:
UTF8String
getUUIDBytes:
messageWithNewFunction:descriptor:
initWithUUIDBytes:
setCell:
setFormulaSpec:
setMergeRange:
setCellID:
hasAnyCustomFormat
formulaSpec
mergeRange
cellValueType
cellHasCustomFormat
cellHasCommentStorage
cellIsEmpty
cellIDIsValid
setCellIDIsValid:
cellIsValid
setCellIsValid:
formulaSpecIsValid
setFormulaSpecIsValid:
mergeRangeIsValid
setMergeRangeIsValid:
_cellIDIsValid
_cellIsValid
_formulaSpecIsValid
_mergeRangeIsValid
_cellID
_cell
_formulaSpec
_mergeRange
pointerAtIndex:
enumerateRowsWithBlock:
maxColumnIndex
enumerateRowsAndIndexesWithBlock:
strongObjectsPointerArray
initWithRows:shouldUseWideRows:context:
bncStorageBufferExists
maxRow
setCount:
setTileRowIndex:
replacePointerAtIndex:withPointer:
p_pruneRowCount
rowInfoFromArchive:
tileRowIndex
rowInfoForTileRowIndex:
_setRowInfo:atTileRowIndex:
numRows
populatedRows
rowInfoWithTileRowIndex:wideOffsets:
cellStorageRefAtIndex:
preBNCStorageRefAtIndex:
findOrAddRowInfoAtTileRowIndex:
setCell:atIndex:formatKeys:
_removeRowInfo:atTileRowIndex:
insertColumnsAtIndex:count:
pruneEmptyRows
moveColumnsFromIndex:toIndex:count:
_removeRowsAtTileRowIndex:numberOfRows:shiftingContent:
yankRowsAtTileRowIndex:count:
shiftUpAtTileRowIndex:count:
tsu_enumerateNonNullObjectUsingBlock:
maxColumn
initWithRows:context:
packageLocator
lastSavedInBNC
rowInfoAtOrAfterTileRowIndex:outTileRowIndex:
cellStorageRefAtColumnIndex:tileRowIndex:
preBNCCellStorageRefAtColumnIndex:tileRowIndex:
setCell:atColumnIndex:tileRowIndex:formatKeys:
insertColumnsAtColumnIndex:numberOfColumns:
removeColumnsAtColumnIndex:numberOfColumns:
moveColumnsAtColumnIndex:numberOfColumns:toDestColumnIndex:
insertRowsAtTileRowIndex:numberOfRows:
clearRowsAtTileRowIndex:numberOfRows:
shiftUpAndYankBy:
yankRowInfoAtTileRowIndex:
yankRowsAtTileRowIndex:
spliceRowInfo:atTileRowIndex:overwrite:
spliceRows:atTileRowIndex:
swapRowAtTileRowIndex:withRowAtTileRowIndex:
assertListRows
setLastSavedInBNC:
rowInfos
setRowInfos:
_storageVersion
_lastSavedInBNC
_shouldUseWideRows
_pruningCount
_rowInfos
hasWorkItems
addFittingHeight:forCellID:
addFittingWidth:forCellID:
enumerateFittingHeightsUsingBlock:
enumerateFittingWidthsUsingBlock:
_fittingHeights
_columnToMaxFittingWidths
legalRangeControlMinimum:maximum:increment:
initWithInteractionType:minimum:maximum:increment:
minimum
maximum
increment
numberValueFromString:locale:outDoubleValue:
recomputedValueFromValue:changed:
getCurrentFormat
numberOrCurrencyDecimalValue
asStepperSliderFormat
displayFormatType
defaultRangeControlSpecOfType:
initWithFormatType:minimum:maximum:increment:displayFormatType:
defaultCellValueForInteractionType:
stepperSpecWithMinimum:maximum:increment:
sliderSpecWithMinimum:maximum:increment:
cellSpecFromTSKFormat:
instanceWithArchive:unarchiver:
asRangeControlSpec
valueFromString:locale:
validateFormatAndValue:
tskStepperSliderFormatWithDisplayFormatType:
legacyDisplayFormatType
_interactionType
_legacyDisplayFormatType
_minimum
_maximum
_increment
initWithContext:geometry:
tableModelClass
initWithTableInfo:
groupByByUid:
initWithGroupings:categoryOwner:
registerGroupBy:
initWithHiddenStatesOwner:
hiddenStatesUid
p_updateStorageParentInfoForModels
setupReceiver
size
p_initializeDefaultHeight:andWidth:
initWithContext:geometry:rows:columns:stylePreset:styles:
presetOfKind:index:
initWithPosition:size:
networkWithContext:presetID:colors:alternate:
setSize:
initWithContext:geometry:rows:columns:styles:
geometry
_initWithContext:flatteningFromCategorizedInfo:cellRegion:waitForCalcEngine:flatteningOptions:
_initWithContext:fromSourceInfo:cellRegion:tableModel:waitForCalcEngine:formulaCoordSpace:
exteriorTextWrap
setExteriorTextWrap:
expandCellRegionToCoverMergedCells:
baseCellRegionForViewCellRegion:
indexesForCategoryColumns
intersectsIndexesInRange:
enumerateRowRangesUsingBlock:
flattenGroupValuesIfNeededForCell:viewCellCoord:summaryAndLabelRows:categoryColumns:
hasCellStyle
defaultCellStyleForCellID:
hasTextStyle
defaultTextStyleForCellID:
iterateCellsInRegion:flags:searchFlags:usingBlock:
position
setPrimitiveGeometry:
copyFromHiddenStates:forRange:withContext:isWholeTableCopy:
setParentInfo:
_correctAndCheckStateSuppressingAssertions:
setDocumentIsClosing:
clearPartitioner
releaseMasterLayout
teardown
initWithContext:fromSourceInfo:cellRegion:waitForCalcEngine:flattenCategories:
setParent:
headersFrozenByDefault
checkboxFormat
toggleControlSpec
setCell:atCellUID:ignoreFormula:clearImportWarnings:
p_setupTableModelforStockPrototype
p_setupTableModelforStockSwatch
createLargeDefaultTables
numberOfRowsForProtoIndex:
numberOfColumnsForProtoIndex:
tablePrototypeWithIndex:context:geometry:styles:forTableInsertOnly:
setupTableModelForPrototypeIndex:forTableInsertOnly:
tableModelForTableUID:withCalcEngine:
p_setFillOnCell:positive:
rowUIDs
rowIndexForRowUID:
p_setFormula:atCellID:
p_positiveImageFill
p_negativeImageFill
setObject:forProperty:
initWithContext:name:overridePropertyMap:isVariation:
resourceURL
URLByAppendingPathComponent:
dataFromURL:context:
initWithImageData:technique:tintColor:size:
tableNameTextSize:
effectiveTableNameHeightForTable:
isSafeToConvertToImage
wasRemovedFromDocument
documentIsClosing
initWithInfo:
p_masterLayoutCreateIfNeeded:
archivedMasterLayoutBundle
initWithInfo:masterLayoutBundle:
changeNotifier
setChangeNotifier:
hasActiveFilters
isCategoryGroupValueCell:
isReimportable
isLocked
isInReadOnlyMode
importDate
timeIntervalSinceNow
tableRangeCoordinate
minNumberOfHeaderColumns
maxNumberOfHeaderColumns
filterSet
isRegisteredWithCalcEngine:
registerWithCalcEngine:
registerWithCalcEngine:baseOwnerUID:
registerWithCalcEngineForDocumentLoad:
unregisterFromCalcEngine:
unregisterFromCalcEngine
performReadForOneOffFormulaEvaluation:forCellCoord:
registerLast
containsFilterRulesInUIDForm
copyByRewritingFilterRulesToGeometricFormWithContext:withTableInfo:
setFilterSet:
filterSetUpdated
stageCountForTextureDeliveryStyle:tableProvider:
textureDeliveryStylesLocalized:
textureDeliveryStyleFromDeliveryString:
cellIteratorWithFlags:searchFlags:
cellFlags
setCellFlags:
topStroke
topStrokeOrder
setTopStroke:order:
leftStroke
leftStrokeOrder
setLeftStroke:order:
bottomStroke
bottomStrokeOrder
setBottomStroke:order:
rightStroke
rightStrokeOrder
setRightStroke:order:
setCellsWithCellMap:ignoreFormulas:skipDirtyingNonFormulaCells:
p_bakeMixedCellStrokesIntoTable:outgoingTable:incomingTable:fraction:
angle
setAngle:
setGeometry:
partitioner
setScaleToFit:
widthValid
heightValid
horizontalFlip
verticalFlip
initWithPosition:size:widthValid:heightValid:horizontalFlip:verticalFlip:angle:
objectEnumerator
visitTSTTableInfo:
bootstrapPresetsOfKind:inTheme:alternate:reservedCount:
documentStylesheet
colors
createStylesInStylesheet:presetID:colors:alternate:
initWithStyleNetwork:
setPresets:ofKind:
setWithObject:
iterateCellsWithFlags:searchFlags:usingBlock:
networkWithContext:presetID:styleProvider:styleMorphingBlock:
initShallowMapWithContext:uidBased:
cellStyleForCellWithEmptyStyleAtCellID:isDefault:
textStyleForCellWithEmptyStyleAtCellID:isDefault:
addCell:andCellUID:
mergedStorageRepresentation
setPosition:
removeAnnotationsFromRowsAtIndexes:
removeAnnotationsFromColumnsAtIndexes:
setDrawableIsBeingCopied:
supportsAutoResizedTables
dupContentCache
cellIDToWPColumnCache
resolverContainerNameForResolver:
nameForResolverContainer:
resolverContainerForName:caseSensitive:
resolverContainerNamesMatchingPrefix:
resolverMatchingName:contextContainerName:
resolversMatchingPrefix:
isPendingTableNameUniquification
compare:
resolverNameIsUsed:
floatValue
isEquivalentForCrossDocumentPasteMasterComparison:styleComparisonBlock:
hasEqualContentToCell:usingRichTextStyleComparisonBlock:
initWithOwnerInsertion:fromOwnerUID:
willModifyTable:uidResolver:calcEngine:
didModifyTable:calcEngine:
allOwnersRegistered
shouldForceRegisterAllTables
loadFromFileVersion
childEnumerator
childEnumeratorForUserSearch
modelPathComponentForChild:
acceptVisitor:
formulaOwnerUID
objectToArchiveInDependencyTracker
formulaOwner
modelEnumeratorForObjectsConformingToProtocol:
ownerUIDMap
chooseUniqueNameInContainer:forPaste:
markOwnerAsDirty:
registerAllFormulasWithCalculationEngine:
beginTrackingNamesInTable:
beginTrackingNamesInTableForLegacyNRM:
ownerIsRegistered:
scheduleDetectAndRepairConsistencyViolations
hasCommentAtCellID:
setCommentStorage:atCellUID:
removeCommentStorageAtCellUID:
postCommentNotificationForStorage:atViewCellCoord:notificationKey:
commentHostingAtCellID:forCommentStorage:
commentHostingAtCellID:
beginUpgradingFormulasMode
modelEnumeratorForObjectsOfClass:
upgradeDuringDocumentUpgradeIfNeeded:
uuidBasedCellMapWithContext:
writingDirection
writingDirectionForCellwithTableDefault:
setParagraphWritingDirection:forCharRange:undoTransaction:
textStyleAtCellID:isDefault:
propertyMapWithPropertiesAndValues:
isCategoryGroupValueLabelCell:
isCategorySummaryOrLabelRow:
categoryGroupLevelAtRow:
leftInset
rightInset
paddingWithTopInset:leftInset:bottomInset:rightInset:
effectiveTextStyle
cellStyleAtCellID:isDefault:
currentFormatUsesAccountingStyle
modifiedTextPropertiesForCategorizedCellAtCellID:wraps:padding:
initWithNumberOfSortRules:
setRowIndex:
lastObject
isBlankGroupUid:
isErrorGroupUid:
reorganizeValueForSorting
setReorganizeValue:atIndex:
duplicateFilterSetInUidFormWithTable:
needsFormulaRewriteForImport
setNeedsFormulaRewriteForImport:
setIsEnabled:
setFilterSetType:
isEnabled
ruleCount
dirtyFilterState
hasFilterRulesWithTable:inBaseColumns:
numberOfVisibleBaseBodyRows
allowsRowInsertion
hasCategoryRules
decimalDigitCharacterSet
rangeOfCharacterFromSet:options:
numberValueFromString:locale:outDoubleValue:outValueType:
regularExpressionWithPattern:options:error:
matchesInString:options:range:
chooseUniqueNameInContainer:forPaste:needsNewName:avoidNames:
remappedTableNames
parseNumberFromTableName:
containsObject:
checkoutNumberFormatter
initWithUnsignedInt:
returnNumberFormatter:
categoryLevelForTableStyleArea:
indexesForSummaryRowsAtGroupLevel:
regionByIntersectingRowIndices:
indexesForLabelRowsAtGroupLevel:
regionBySubtractingRowIndexes:
tableAreaForDroppingRowAtIndex:
tableStyleAreaForCellUID:
tableStyleAreaForCellID:
initWithIndexSet:
getDefaultCell:forCellID:
getCell:atCellID:suppressCellBorder:
copyToUidFormForTableInfo:inCellCoordinate:preserveHostCell:
convertFormulasToUidForm:atCellID:preserveHostCell:
textFormat
initWithContext:uidBased:
prunedCellRegionAgainstTable:behavior:
regionBySubtractingRegion:
cellUIDListFromCellRegion:useCategoriesWildcards:
getCell:atCellUID:
enumerateCellUIDsUsingBlock:
copyJustStrokesToCell:
convertFormulasToUidForm:atCellID:
appendCellMap:
mergeActionForRegion:
addMergeAction:
containsMergeChanges
performRead:
cellValueTypeAtCellID:
setCellStyle:ofRowAtUID:
setTextStyle:ofRowAtUID:
setCellStyle:ofColumnAtUID:
setTextStyle:ofColumnAtUID:
cellStyle:isEqualToDefaultCellStyleForCellID:
textStyle:isEqualToDefaultTextStyleForCellID:
getValue:atCellID:fetchRichTextAttributesIfPlainText:
p_stringValueAtCellID:
columnNameForColumnIndex:withFallbackFormat:
columnNameForCellID:restrictToBodyRange:
newlineCharacterSet
componentsSeparatedByCharactersInSet:
chromeRangeRefForViewRangeRef:
setSuppressIdenticalEndReference:
cellRangeNameFromChromeRangeRef:namingContext:
usedSymbolicName
translatedCellRangeName:usedSymbolicName:
chromeRowIndexForViewRowIndex:
chromeLabelForColumn:
chromeLabelForRow:
indexOfVisibleColumnBeforeColumnAtIndex:
indexOfVisibleColumnAfterColumnAtIndex:
indexOfVisibleRowBeforeRowAtIndex:
indexOfVisibleRowAfterRowAtIndex:
bodyRangeForLowestLevelGroupEnclosingCellAtCellID:
categoryColumnRange
baseColumnRange
insertRowsAtIndex:uids:metadatas:tableArea:
rowUIDsForRowIndexes:
addUuidsFromVector:
initWithUUIDVector:
rowHiddenStateExtent
hideAtViewIndex:forAction:
moveRowRange:toRowIndex:
moveColumnRange:toColumnIndex:
hiddenStatesByUid:
hasUserHiddenRows
hasUserHiddenColumns
numberOfHiddenRowsInCellRange:
numberOfUserHiddenRowsInCellRange:
numberOfHiddenColumnsInCellRange:
hasHiddenRowAtIndex:forAction:
hasHiddenColumnAtIndex:forAction:
indexesOfUserHiddenColumnsInCellRange:
indexesOfVisibleColumnsInCellRegion:
indexesOfVisibleColumnsInColumnRange:
indexesOfHiddenRowsInCellRange:
indexesOfFilteredRowsInCellRange:
indexesOfVisibleRowsInCellRange:
indexesOfVisibleRowsInCellRegion:
indexesOfUserVisibleRowsInCellRange:
indexesOfCollapsedRowsInCellRange:
hidingActionForRowAtIndex:
hidingActionForColumnAtIndex:
anyHiddenRowsInCellRange:forAction:
numberOfBaseBodyRows
hasHiddenRowAtIndex:
hasHiddenColumnAtIndex:
anyHiddenRowsInCellRange:
anyHiddenColumnsInCellRange:
stringAtCellID:optionalCell:
characterFillAtCellID:optionalCell:
mergeCellRange:
unmergeCellRange:
mergeRangesPartiallyIntersectCellRange:
mergeRangesPartiallyIntersectCellRegion:
hasMergeRangeSpanningRowsForCellRange:
hasMergeRangesIntersectingCellRegion:
mergedGridIndicesForDimension:
regionForValueOrCommentCellsInRange:
hasRangeSpanningRowsForCellRange:
hasMergeRanges
shrinkReturningInverseForRegion:
removeReturningInverseForRegion:
performActionReturningInverse:
mergeActionForRegion:nonOriginPartialsOnly:
enumerateMergesIntersectingCellRegion:usingBlock:
mergeRangesIntersectingCellRegion:
mergeRangesAndCrumbsIntersectingRange:
initWithMergeList:
isValidMergeRange:
initWithDefaultStrokeProvider:customStrokeProvider:tableProvider:
cellValueFromCell:atCellID:
enumerateCellIDsUsingBlock:
registerAllFormulasWithCalculationEngine:wasCrossDocumentPaste:wasUndo:
registerAllFormulasWithCalculationEngine:wasCrossDocumentPaste:
referenceToHiddenStateFromRow:toRow:
referenceToHiddenStateFromColumn:toColumn:
applyCollapseExpandState:outUndoState:
hasValueOrError
iterateCellsInRange:flags:searchFlags:usingBlock:
numberOfCategoryColumns
numberOfBaseHeaderColumns
isCategoryLabelRow:
valueIsText
indexesForSummaryRows
cellIDForCellContainingRichTextStorage:
writeCellIDsInCellUIDList:toVector:prunedCellUIDs:
rowIndexesForUIDs:
mutableRowIndexesForUIDs:
columnUIDsForColumnIndexes:
columnIndexesForUIDs:
mutableColumnIndexesForUIDs:
prunedColumnUIDsFromColumnUIDs:
prunedRowUIDsFromRowUIDs:
UIDSetForIndexes:isRows:
mutableIndexesForUIDSet:isRows:
mutableIndexesForUIDSet:isRows:notFoundUIDs:
columnUIDs
rowRangeForUIDs:
columnRangeForUIDs:
summaryRowIndexes
labelRowIndexes
addCellRegion:withColumnUIDs:rowUIDs:
numberOfCategoryLevels
addCellUID:
cellRegionFromCellUIDList:includeLabelsWithSummaries:didAddLabels:
tsu_indexSetByAddingIndexes:
region:addingRegion:
cellUIDRegionFromRegion:inTable:
cellRegionFromTable:
categoryGroupLevelAtSummaryRow:
categoryGroupLevelAtLabelRow:
cellRangeForUIDRange:
cellUIDRangeForCellRange:
cellRegionForUIDRange:
cellTractRefForUIDRectRef:
getDefaultCell:forCellUID:
categoryOrder
hasValidInfo
hasValidUidMap
checkMapsAndAssert:
groupByChangeDistributor
hasReceiver:
hasMergeRangeSpanningRowsForBaseCellRect:
enumerateAggregates:
setRowOrder:
setSummaryModel:
resetViewMap
checkState
removeReceiver:
willChangeGroupByTo:
unregisterGroupBy:
setGroupingColumnList:
resetGroupBy
setTranslator:
groupingColumns
indexesForLabelRows
populatedCategoryGroupLevelsInColumn:
isGroupingColumn:
initWithUUID:
collapseSummaryGroupUIDs:
expandSummaryGroupUIDs:
isCategoryGroupOrParentsCollapsed:
tsu_intersectsIndexesInIndexSet:
enumerateRowsUsingBlock:
labelRowVisibilityAtCategoryLevel:
labelRowUIDSetForCategoryLevel:labelRowVisibility:
uuidsAsVector
removeIndexes:
indexesForGroupingColumns
groupingColumnAtCategoryLevel:
columnNameForColumnIndex:
groupingColumnLevelsForColumn:
groupingType
enumerateGroupingColumnsForColumn:withBlock:
setAggregateType:forColumnUID:atGroupLevel:
summaryRowHeightAtCategoryLevel:
setSummaryRowHeight:atCategoryLevel:
labelRowHeightAtCategoryLevel:
setLabelRowHeight:atCategoryLevel:
categoryColumnWidth
setCategoryColumnWidth:
addUuidsFromSet:
didMakeGroupingChangesInRowUIDs:
addIndexes:
regionFromRowIndices:
iteratorClass
loadFromArchive:unarchiver:
setTableModelPrivate:
setCategoryOrder:
setHiddenStatesUid:
setPartitioner:
setMasterLayout:
setGroupBy:
initWithGroupings:categoryOwner:groupByUid:
setHiddenStates:
setHiddenStateOwnerForColumnsUID:
setHiddenStateOwnerForRowsUID:
setNeedsToUpdateFilterSetForImport:
initWithContext:tableInfo:rowUids:
setRowUIDsWithPendingGroupingChanges:
preUFFVersion
shiftGeometryToIncludeTableNameHeight
sourceType
reassignPasteboardCustomFormatKeys
isInlineWithText
initWithMasterLayout:
requiresDocumentVersion:
localizedDescriptionForProtoIndex:
geometryForPrototypeIndex:withCanvasPoint:
tablePrototypeWithIndex:context:geometry:styles:
canPartitionInline
canPartitionForPrinting
bootstrapPresetsOfKind:inTheme:alternate:
presetKinds
validateNewName:forTable:
performRewritesForInsertedTableInfos:
ensureAllTablesAreRegisteredInDocumentRoot:
upgradeTablesIfNeeded:forDocumentRoot:
tableStyleAreaForCellID:inTableWithHeaderColumns:headerRows:footerRows:totalRows:
matchesObjectPlaceholderGeometry
setMatchesObjectPlaceholderGeometry:
clearBackPointerToParentInfoIfNeeded:
isSelectable
layoutClass
repClass
isThemeContent
parentInfo
owningAttachment
setOwningAttachment:
owningAttachmentNoRecurse
isFloatingAboveText
isAnchoredToText
isAttachedToBodyText
uuidPathPrefixComponentsProvider
collaboratorCursorForSelectionPath:
childInfos
prohibitsModificationToChildren
isMaster
searchForAnnotationsWithHitBlock:
enumerateAllAnnotationsInModelWithHitBlock:
continueAnnotationSearch:
commandForReplaceAllWithProvider:
referencedStyles
replaceReferencedStylesUsingBlock:
afterReplacingReferencedStylesSetStylesheet:
setIsCategoryEnabled:
applyGroupingColumns:
isCategorySummaryCell:
isCategoryLabelCell:
isCategoryColumnUneditableCell:
isCategoryGroupingColumn:
isCategoryAnyKindOfCell:
numberOfGroupLevelsShowingLabelsUnderGroupAtIndex:
allGroupUIDs
indexesForSummaryAndBodyRowsInGroupUIDs:
indexesForSummaryRowsAtGroupLevel:inRegion:
indexesForBodyRowsInGroupWithRowAtIndex:
indexesForSummaryRowsUpToGroupLevel:omitGroupsWithUids:
indexesForLabelRowsAtGroupLevel:inRegion:
indexesForLabelRowsUpToGroupLevel:omitGroupsWithUids:
indexesForBodyRows
indexesForBodyAndFooterRows
indexesForBodyColumns
regionSubtractingCategoryColumnsAndRows:
groupingColumnLevelCountForColumn:
groupingTypesAreUniqueForColumn:
allRowUIDsAtSameLevelAsRowIndex:withFilter:
categoryRefReferringToCellRef:
shouldDisplaySummaryLabelRowAtGroupLevel:
numberOfBaseColumns
numberOfBaseRows
numberOfBaseHeaderRows
numberOfBaseFooterRows
numberOfChromeColumns
numberOfChromeRows
numberOfChromeHeaderColumns
numberOfChromeHeaderRows
numberOfChromeFooterRows
baseTableUID
mergesIntersectingRange:
mergesIntersectingCellRegion:
textIsVerticalAtCharIndex:
autoListRecognition
autoListTermination
textIsLinked
preventsComments
preventsChangeTracking
supportsMultipleColumns
contentWritingDirection
storageChangesInvalidateWrap
supportsDropCapsInChildStorages
initWithContext:geometry:rows:columns:stylePreset:
initWithContext:geometry:rows:columns:
initForTestingWithContext:rows:columns:
initWithContext:geometry:styles:
initWithContext:otherTableInfo:
p_popupItemsForStrings:
p_setPopupMenuOnCell:withItems:andSelectedIndex:
p_setFormulaWithSymbolCellCoord:andAttributeCellCoord:atCellID:
p_setFormulaWithSymbolString:atCellID:
additionalObjectsToCopy
componentRootObject
masterLayoutEffectiveTableNameHeight
isSafeToConvertToImageForImagePaste
isSafeToConvertToAttributedString
isSafeToConvertToText
tableModel
tableModelPrivate
resolver
supportsHyperlinks
supportsAttachedComments
supportsRichTextUndoAtCellID:
isNewlyImported
notifyTableOfNewResults
chunkCountForTextureDeliveryStyle:animationFilter:
textureDeliveryStylesLocalized:animationFilter:
requiresStagesBuildingInReverse
suppliesFinalTextures
setContentWritingDirection:
scaleInfoGeometry:
canAspectRatioLockBeChangedByUser
mergedContainedStorages
infoForSelectionPath:
presetKind
shouldCancelScrollingToSelectionPath:forChanges:
setInsertionCenterPosition:
geometryForRTLTableWithGeometry:
contentsAreRightToLeft
setHasReference:
willCopyWithOtherDrawables:
didCopy
didReplaceTextsInStoragesWithPlaceHolderString
prepareForPasteWithSourceOffset:bakeFormulas:
postCommentNotificationForStorage:atCellID:notificationKey:
allAnnotations
bakeFormulas
applyWritingDirection:toCell:cellID:
getTextPropertiesWithCell:cellID:wraps:alignment:verticalAlignment:padding:
notifyAboutStructuredTextImportState
sortTagsForCellsInColumns:rows:
duplicateFilterSet
duplicateFilterSetInUidForm
needsFilterFormulaRewriteForImport
setNeedsFilterFormulaRewriteForImport:
enableFilterSet:
hasFilterRulesInBaseColumns:
hasFilterRulesAffectingInsertRows
canTranspose
useBandedFill
bandedFillObject
hasUntitledTableNameFormat
chooseUniqueNameInContainer:forPaste:needsNewName:
cellIDIsLegal:
cellRegionForTableStyleArea:
tableAreasForCellRange:
setCell:atCellCoord:
cellMapForRegion:uidBased:suppressMergeContent:useCategoriesWildcards:
concurrentCellMapForRegion:suppressMergeContent:
getCell:atCellID:holdingReadLockWithAccessController:
hasMigratableStylesInBaseTableCells
rowNameForCellID:restrictToBodyRange:
cellRangeName:usedSymbolicName:
chromeLabelForCellID:
numberOfCells
cellIDLeftOfCellID:
cellIDRightOfCellID:
cellIDAboveCellID:
cellIDBelowCellID:
insertRowsAtIndex:count:addBefore:
insertColumnsAtIndex:count:addBefore:
importDeferredRemoveGroupingRowsAtIndexes:
processDeferredImportActions
hasDeferredImportActions
isCellRangeHidden:
numberOfVisibleBodyRows
numberOfUserVisibleBodyRows
numberOfVisibleBodyColumns
backgroundFill
bodyFill
headerColumnsFill
headerRowsFill
footerRowsFill
strokeExporterReturningDefaultStrokes:
valueToUseForSummaryCellFormulaError
hasCellID:
cellRegionWithConditionalStyleMatchingCell:
minPopulatedCellRange
findChartableRangesFromTableRange:getBodyRange:headerColumnRange:headerRowRange:
cellUIDListFromCellRegion:
cellRegionFromCellUIDList:
cellUIDForCellID:useCategoriesWildcards:
textStyleForCellWithEmptyStyleAtCellUID:isDefault:
fromTableCoordMapperForPasteboard
hasSummaryRowsInRegion:
willMakeGroupingChangesInRowUIDs:
processRowsWithPendingGroupingChangesAndReturnAffectedCellRegion
commandForSettingTableDirection:icc:
editorClass
rowUIDsWithPendingGroupingChanges
dragAndDropDetails
setDragAndDropDetails:
isCopyContainingCategoryColumn
setIsCopyContainingCategoryColumn:
hasReference
setFromTableCoordMapperForPasteboard:
migratingStylesOnly
setMigratingStylesOnly:
rowUIDsForImportedGroupingRows
setRowUIDsForImportedGroupingRows:
tableTranslatorBaseMapForPasteboard
setTableTranslatorBaseMapForPasteboard:
tableTranslatorViewMapForPasteboard
setTableTranslatorViewMapForPasteboard:
setArchivedMasterLayoutBundle:
_tableModel
_isCopyContainingCategoryColumn
_hasReference
_wasRemovedFromDocument
_migratingStylesOnly
_documentIsClosing
_partitioner
_masterLayout
_summaryModel
_groupBy
_rowUIDsWithPendingGroupingChanges
_formulaCoordSpace
_dragAndDropDetails
_categoryOrder
_hiddenStates
_translator
_fromTableCoordMapperForPasteboard
_rowUIDsForImportedGroupingRows
_archivedMasterLayoutBundle
_groupByUid
_hiddenStatesUid
_tableTranslatorBaseMapForPasteboard
_tableTranslatorViewMapForPasteboard
containsProperty:
performBlockWithTemporaryLayout:
objectForProperty:
floatValueForProperty:
boxedObjectForProperty:
doubleValueForProperty:
CGFloatValueForProperty:
cellDiffMapWithContext:
cellDiff
cellAfterApplyDiff:toCell:atCellUID:migrationMap:inverseCellDiff:concurrentStylesheet:defaultCellStyle:defaultTextStyle:
p_performCommentStorageDOLC:
doesSetProperty:
boolValueForSetProperty:
addCustomFormat:oldKey:fuzzyNameMatching:
properties
containsAnyPropertiesInSet:
categoryColumnUID
setCell:atCellUID:
summaryCellVendor
tableStyleAreaForCategoryLevel:isLabel:
cellByApplyingCellDiff:context:andUpdateInverse:optionalConcurrentStylesheet:
tableUIDMap
p_postCommentNotificationFromDiff:inverseDiff:cellID:
applyCellDiffMap:migrationHelper:updateProperties:
applyCellMap:outPrunedCellMap:outInverseCellMap:options:stylesContainer:
applyCellDiff:atCellUID:migrationMap:inverseCellDiff:defaultCellStyle:defaultTextStyle:
applyConcurrentCellMapToBaseTable:options:requestPruneMap:stylesContainer:migrationHelper:
setCurrencyDoubleValue:
setDurationTimeIntervalValue:
setDateValue:
setRichTextValueWithoutPlaintextCollapse:
formatFromArchive:
setFormat:isExplicit:
suggestCellFormatKind:
initFromMessage:unarchiver:
timeIntervalSinceReferenceDate
replies
numberFormat
encodeToArchive:archivingCustomFormats:
currencyFormat
dateFormat
durationFormat
booleanFormat
cellFormatKind
explicitFormatFlags
saveToMessage:archiver:
initWithMasterLayout:range:flags:searchFlags:
cellIteratorWithRange:flags:searchFlags:
iterateCellsAndTerminateWithIterator:usingBlock:
regionFromMergeList:
addRange:
mergeListWrapperWithRangesPassingTest:
regionForList
_mergeList
setViewRangeRef:preserveFlags:
setChromeRangeRef:preserveFlags:
convertUIDRefToViewTractRef
viewTractRef
topLeft
bottomRight
initWithTopLeft:bottomRight:tableUID:
convertViewTractRefToUID
initWithCalcEngine:tableUID:uidRange:preserveFlags:
columns
rows
spansAllColumns
spansAllRows
uidRange
viewColumnIndexesForUIDs:
viewRowIndexesForUIDs:
viewRangeRefs
baseRangeRefs
tsu_indexSetByExcludingIndexes:
baseRowIndexForViewRowIndex:
baseToViewPreserveFlagsAreInverted
setViewPreserveFlags:
viewRowIndexesForChromeRowIndexes:
viewColumnIndexesForChromeColumnIndexes:
viewPreserveFlags
initWithColumns:rows:tableUID:
setSpansAllColumns:
setSpansAllRows:
chromeColumnIndexesForViewColumnIndexes:
chromeRowIndexesForViewRowIndexes:
baseRowIndexForChromeRowIndex:
viewCellRegionForBaseCellRegion:
referenceIsValid:
initWithColumnUids:rowUids:purpose:
appendUidTract:
initWithCalcEngine:viewTractRef:
initWithCalcEngine:viewRangeRef:preserveFlags:
initWithCalcEngine:chromeRangeRef:preserveFlags:
initWithCalcEngine:baseRangeRef:preserveFlags:
isViewRectangle
isBaseRectangle
baseRangeRef
viewRangeRef
baseTractRef
chromeTractRef
viewTopLeftCoord
viewBottomRightCoord
baseTopLeftCoord
baseBottomRightCoord
viewCellRegionWithRangeContext:
isValidReference
uidTractList
setBasePreserveFlags:
needsUidRectUpgrade
setNeedsUidRectUpgrade:
chromeRangeRef
setChromeRangeRef:
_uidRange
_lastKnownViewTractRef
_needsUidRectUpgrade
_basePreserveFlags
_chromeRangeRef
mutableAnyHiddenColumnIndexes
mutableAnyHiddenRowIndexes
initWithStrokeSidecar:region:
addIterator:
newRightToLeftIterator
newIterator
getNext
p_getNextCellID
p_updateDataForCellID:
setRegionIterator:
advanceToCellID:
updateCellData:
updateFormulaForCellData:
p_updateDataForMergeAtCellID:
nextCellData
initWithTableInfo:region:flags:searchFlags:clampingRange:
initWithTableInfo:flags:searchFlags:
initWithTableInfo:range:flags:searchFlags:
returnCellContents
setTableModel:
region
cellData
setCellData:
returnEmptyCells
setReturnEmptyCells:
returnOneEmptyCell
setReturnOneEmptyCell:
terminateRegionIterator
setTerminateRegionIterator:
returnOnlyFormulas
setReturnOnlyFormulas:
returnMergeRanges
setReturnMergeRanges:
contentIterator
setContentIterator:
strokeIterator
setStrokeIterator:
regionIterator
dataStoreIterator
setDataStoreIterator:
rowForColumnIndexesWithMerges
setRowForColumnIndexesWithMerges:
_columnIndexToMergeRangeMap
_returnCellContents
_returnEmptyCells
_returnOneEmptyCell
_terminateRegionIterator
_returnOnlyFormulas
_returnMergeRanges
_rowForColumnIndexesWithMerges
_region
_cellData
_contentIterator
_strokeIterator
_regionIterator
_dataStoreIterator
initWithProperties:
p_regionStringForTableStyleArea:
colorWithColor:
whiteColor
colorWithRed:green:blue:alpha:
p_initBodyRegionPropertyMap:presetID:colors:alternate:
p_initHeaderRowRegionPropertyMap:presetID:colors:alternate:
p_initHeaderColumnRegionPropertyMap:presetID:colors:alternate:
p_initFooterRowRegionPropertyMap:presetID:colors:alternate:
validateIntValue:forProperty:
validateObjectValue:withClass:forProperty:
loadCellStylePropertiesIntoPropertyMap:fromArchive:unarchiver:
overrideCount
saveCellStylePropertiesToArchive:archiver:
loadCellStyleFromArchive:unarchiver:
saveCellStyleToArchive:archiver:
containsStyle:
definesProperty:
null
setValue:forProperty:
propertySet
allProperties
addProperties:
boxedValueForProperty:
enumeratePropertiesUsingBlock:
setBoxedValue:forProperty:
propertiesAllowingNSNull
nonEmphasisCellProperties
categoriesCellProperties
styleIDForPreset:andTableStyleArea:
textStyleIDForPreset:andTableStyleArea:
initDefaultPropertyMap:forTableStyleArea:presetID:colors:alternate:
upgradeIfNecessary
argumentSpec
numberWithUnsignedInteger:
setWithSet:
expressionsMatchingCSENodeData:forNode:
recordExpression:data:
expressionsIdenticalToExpression:
expressionSize:
_nodesToData
_hashesToNodeSets
initWithSymbol:attribute:
symbol
attribute
detailsWithSymbol:attribute:
isEqualToStockDetails:
setSymbol:
setAttribute:
_symbol
_attribute
initWithTileRowIndex:wideOffsets:
_archivedColumnCount
_replaceCellAtIndex:withCell:formatKeys:
_insertCell:atIndex:formatKeys:
_removeCellAtIndex:
enumerateStoragesInColumnRange:getPreBNC:withBlock:
validateWithResult:
stringWithString:
accumulateCurrentCellsConcurrentlyAtColumns:usingCellCreationBlock:
lockForConcurrentAccess
unlockForConcurrentAccess
cellIndexAtOrAfterIndex:
cellIndexAtOrBeforeIndex:
enumerateStoragesInColumnRange:withBlock:
searchCellStorageRefAtColumnIndex:searchMask:
_currentData
_preBNCData
_maxColumnIndexPrivate
_maxColumnIndexIsValidPrivate
_unfairLock
_tileRowIndex
_cellCount
uidsCollapsed
uidsExpanded
initWithCollapsed:expanded:
saveToArchive:
makeInverse
_collapsedGroupUIDs
_expandedGroupUIDs
_uidsCollapsed
_uidsExpanded
p_computeinteractionType:
initWithFormula:locale:
initWithFormula:
p_mightBeEqual:
formulaObject
initWithFormula:fromTableModel:fromCellID:
cellSpecReplacingFormula:locale:
hasTSCEFormula
isEquivalent:
categoryAggregateType
stockDetails
_formula
_locale
_categoryAggregateType
_stockDetails
hasNumberFormat
hasCurrencyFormat
hasDateFormat
hasDurationFormat
hasTextFormat
hasBooleanFormat
hasImportWarningSet
underlyingDoubleValue
stringID
richTextID
cellStyleID
textStyleID
controlCellSpecID
formulaSyntaxErrorID
numberFormatID
currencyFormatID
dateFormatID
durationFormatID
textFormatID
booleanFormatID
commentStorageID
importWarningSetID
setValueType:
setExplicitFormatFlags:
setCurrencyDecimalValue:roundToDoublePrecision:
setNumberDecimalValue:roundToDoublePrecision:
setStringID:
setRichTextID:
setCellStyleID:
setTextStyleID:
setConditionalStyleID:
setFormulaID:
setControlCellSpecID:
setFormulaSyntaxErrorID:
setNumberFormatID:
setCurrencyFormatID:
setDateFormatID:
setDurationFormatID:
setTextFormatID:
setBooleanFormatID:
setCommentStorageID:
setImportWarningSetID:
ruleAtGroupLevel:
p_isEqual:
groupingColumnUid
insertObject:atIndex:
removeObjectAtIndex:
initWithGroupingColumnUid:columnUid:groupingType:
replaceRuleAtIndex:withRule:
replaceObjectAtIndex:withObject:
addRule:atIndex:
removeRuleAtIndex:
moveRuleFromIndex:toIndex:
changeGroupingTypeForRuleIndex:toType:
initWithGroupingColumns:
isGroupingColumnUidsEqual:
addRule:atGroupLevel:
removeRuleAtGroupLevel:
moveRuleFromGroupLevel:toLevel:
changeGroupingTypeForGroupLevel:toType:
replaceRuleAtGroupLevel:withRule:
_groupingColumns
initWithFormatString:
formatString
datePortionOfDateTimeFormatString:
formatStringContainsOnlyDate
formatStringContainsAMPMSpecifier
todayFormatForLocale:
nowFormatForLocale:
setMessageType:messagePrototype:descriptor:unarchiveClassname:
setDeprecatedMessageType:
setUpgradeMessageType:messagePrototype:unarchiveClassname:
mutableCopyWithZone:
intersectsProperties:
propertySetFromUnionOfPropertySets:
objectForSetProperty:
objectForResetProperty:
addProperty:
p_resetCachedFlags
setBoolValue:forProperty:
setFloatValue:forProperty:
addValuesFromPropertyMap:
filterWithProperties:
removeProperty:
removeAllPropertyValues
objectApplyingDiffToObject:andUpdateInverse:optionalConcurrentStylesheet:
cellDiffProperties
objectByRemovingPropertiesInMap:addingPropertiesInMap:updateInverseResetPropertyMap:updateInverseSetPropertyMap:
objectByRemovingPropertiesInMap:addingPropertiesInMap:updateInverseResetPropertyMap:updateInverseSetPropertyMap:optionalConcurrentStylesheet:
resetPropertiesFromMap:
setPropertiesFromMap:
initFromCommandPropertyMapMessage:unarchiver:
saveToCommandPropertyMapMessage:archiver:
containsStringProperties
doesSetAnyProperties:
doesResetProperty:
doesResetAnyProperties:
containsCellStyleProperties
containsTextStyleProperties
resetObject:forProperty:
resetIntValue:forProperty:
resetFloatValue:forProperty:
propertyMapToSetWithProperties:
removeObjectsToSetForProperty:
objectApplyingDiffToObject:andUpdateInverse:
estimatedByteSize
propertyMapToSet
setPropertyMapToSet:
propertySetToSet
setPropertySetToSet:
propertyMapToReset
setPropertyMapToReset:
propertySetToReset
setPropertySetToReset:
hasCachedContainsCellStyleProperties
setHasCachedContainsCellStyleProperties:
cachedContainsCellStyleProperties
setCachedContainsCellStyleProperties:
hasCachedContainsTextStyleProperties
setHasCachedContainsTextStyleProperties:
cachedContainsTextStyleProperties
setCachedContainsTextStyleProperties:
hasCachedContainsStringProperties
setHasCachedContainsStringProperties:
cachedContainsStringProperties
setCachedContainsStringProperties:
_hasCachedContainsCellStyleProperties
_cachedContainsCellStyleProperties
_hasCachedContainsTextStyleProperties
_cachedContainsTextStyleProperties
_hasCachedContainsStringProperties
_cachedContainsStringProperties
_propertyMapToSet
_propertySetToSet
_propertyMapToReset
_propertySetToReset
p_convertToUuidBasedCellListUsingTableInfo:pruneCategorizedCells:
viewCellRect
cellUIDRange
p_cacheRowColumnUIDs
p_accumulateCurrentCellsConcurrentlyUsingBlock:
firstObject
regionFromConcurrentCellMap:withTableInfo:
changeDescriptorWithType:cellRegion:
changeDescriptorWithType:strokeRegion:
mergeActions
cellRegionForTable:
changeDescriptorWithType:cellRegion:strokeRegion:
pairWithFirst:second:
p_clearDataListIDs
p_baseColumnIndexes
p_baseRowIndexes
p_invokeBlock:
p_enumerateNewAndOldCellsSeriallyUsingBlock:
p_enumerateNewAndOldCellsSeriallyUsingPreBNCBlock:
p_enumerateCellsAddedAndRemovedOfType:usingBlock:
p_enumerateCellsAddedAndRemovedForFormatsUsingBlock:
p_gatherRowState:
p_enumerateRowsOfCellsConcurrentlyUsingBlock:
p_enumerateCellsAddedAndRemovedForFormatsWithOptions:usingBlock:
hasFormulaAnyError
hasAnyFormats
p_enumerateColumnCellCountDiffUsingBlock:
p_enumerateRowCellCountDiffUsingBlock:
p_enumerateCustomFormatsBeingAddedUsingReplacementBlock:
p_pruneToBaseWithTableInfo:
p_convertToInverseCellMap
verify
readRepeatedReferenceMessage:completion:
p_setObjectLocale:
cellLists
setStrongReferenceArray:message:
allocWithZone:
setCellLists:
setUidBased:
initWithArray:
setMergeActions:
changeDescriptorsForTable:
containsCellChanges
hasMultipleCells
viewCellRects
cellUIDRanges
appendCellList:
affectedBaseColumnAndRowIndexes
enumerateSeriallyUsingBlock:
gatherRowState:
enumerateRowsOfCellsConcurrentlyUsingBlock:
updateDataListsConcurrentlyUsingCommentStorageBlock:conditionalStyleSetBlock:controlCellSpecBlock:formulaBlock:formulaErrorBlock:importWarningSetBlock:richTextBlock:stringBlock:styleBlock:customFormatBlock:formatBlock:preBNCBlock:
enumerateColumnCellCountDiffUsingBlock:
enumerateRowCellCountDiffUsingBlock:
enumerateCustomFormatsBeingAddedUsingReplacementBlock:
convertToInverseCellMap
addMergeActions:
pushInverseMergeAction:
clearMerges
mayModifyFormulasInCells
setMayModifyFormulasInCells:
mayModifyValuesReferencedByFormulas
setMayModifyValuesReferencedByFormulas:
inverseMergeActions
setInverseMergeActions:
cachedRowUIDs
setCachedRowUIDs:
cachedColumnUIDs
setCachedColumnUIDs:
applyingToTable
setApplyingToTable:
_uidBased
_mayModifyFormulasInCells
_mayModifyValuesReferencedByFormulas
_applyingToTable
_mergeActions
_cellLists
_inverseMergeActions
_cachedRowUIDs
_cachedColumnUIDs
initWithContext:viewCellRect:cellUIDRange:
regionFromViewCellRect:
p_pruneCellsAtRow:rowsSize:columnsSize:
enumerateIndexesWithOptions:usingBlock:
p_pruneCellsAtColumn:rowsSize:columnsSize:
baseRowIndexForRowUID:
viewRowIndexForRowUID:
baseColumnIndexForColumnUID:
viewColumnIndexForBaseColumnIndex:
p_setupInterestingCells:forAdding:
dictionary
formatIDForStorageFlag:
numberWithUnsignedInt:
first
second
enumerateKeysAndObjectsUsingBlock:
unsignedIntegerValue
initWithContext:cellUIDRange:
setViewCellRect:
setCellUIDRange:
interestingCells
setInterestingCells:
formatsAdded
setFormatsAdded:
formatsRemoved
setFormatsRemoved:
tilesPerRow
setTilesPerRow:
rowInfosPerRow
setRowInfosPerRow:
_viewCellRect
_cellUIDRange
_tilesPerRow
_rowInfosPerRow
_cells
_baseRows
_baseColumns
_viewRows
_viewColumns
_cellCountDiffsPerRow
_cellCountDiffsPerColumn
_preBNCKeysList
_oldCells
_containsCellBorderChanges
_interestingCells
_formatsAdded
_formatsRemoved
enumerateIndexesInRange:options:usingBlock:
shiftIndexesStartingAtIndex:by:
validCells
setValidCells:
_validCells
pushScopeForField:message:usingBlock:
setEstimatedByteSize:
addObject:willModify:
estimatedByteSizeOfElement:
setImportSettings:
setImportSource:
setImportDate:
setSourceData:
setConfidence:
setImportedRegion:
setSourceColumnCount:
setSourceRowCount:
isWholeTableImport
settingsFromArchive:
fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:
dataWithBytes:length:
dataWithContentsOfURL:
sourceEncoding
setSourceEncoding:
fileSystemRepresentation
bytes
record
recordFromArchive:
importSource
sourceData
confidence
importedRegion
sourceColumnCount
sourceRowCount
pasteInverseCommands
setPasteInverseCommands:
pasteType
setPasteType:
pasteWasUpdate
setPasteWasUpdate:
_pasteWasUpdate
_importSettings
_importSource
_importDate
_sourceData
_confidence
_importedRegion
_sourceColumnCount
_sourceRowCount
_pasteInverseCommands
_pasteType
listType
initWithType:keyRange:context:
p_shouldUseReverseMap
p_setupWithType:nextKeyID:
p_addInitialSegment
loadObjectsFromDataListArchive:unarchiver:
keys
format
stringFromDouble:locale:
setIsMarkedCorrupt:
payload
p_enumerateDataObjectsUsingBlock:
isNewForBraveNewCell
setMessageVersion:
encodeObjectsToDataListArchive:archiver:
keyRange
p_segmentForKey:
setObject:atIndexedSubscript:
shouldSplit
split
indexOfObject:
removeIndex:
initObjectWithString:refCount:
initObjectWithFormat:refCount:
initObjectWithCellSpec:refCount:
initObjectWithStyle:refCount:
initObjectWithFormulaError:refCount:
initObjectWithPopUpMenuModel:refCount:
richTextParentInfo
payloadWithStorage:
initObjectWithRichTextPayload:refCount:
initObjectWithConditionalStyleSet:refCount:
initObjectWithCommentStorage:refCount:
initObjectWithImportWarningSet:refCount:
p_objectForPayload:
p_objectForKey:
tst_dataObjectIsEqual:
p_nextAvailableKey
wrappedObjectForPayload:
p_setObject:atKey:updateReverseMap:
listTypeString
takeReference
refCount
p_setPayload:atSuggestedKey:callWillModify:
takeReferences:
richTextStorage
p_clearReverseMapForObject:atKey:
enumerateObjectsWithBlock:
setPayload:
conditionalStyleSet
style
p_objectCount
takeReferences:forKey:callWillModify:
dropReferences:forKey:callWillModify:
dropReferences:
stringForListType:
classForUnarchiver:
setRichTextParentInfo:
initWithType:context:
p_replaceObjectAtKey:withObject:
enumerateFormatsUsingBlock:
enumerateCustomFormatsUsingBlock:
enumerateKeysAndCountsUsingBlock:
refCountForKey:
takeReferenceForKey:callWillModify:
dropReferenceForKey:callWillModify:
setListType:
setIsNewForBraveNewCell:
nextID
setNextID:
useReverseMap
cachedSegment
setCachedSegment:
_segments
_payloadToObjectMap
_unusedKeySet
_isNewForBraveNewCell
_useReverseMap
_listType
_nextID
_richTextParentInfo
_cachedSegment
formulaError
importWarningSet
popUpMenuModel
shouldWrap
addCellFormat:atSuggestedKey:callWillModify:
addCommentStorage:atSuggestedKey:callWillModify:
addConditionalStyleSet:atSuggestedKey:callWillModify:
addFormula:atSuggestedKey:callWillModify:
addControlCellSpec:atSuggestedKey:callWillModify:
addFormulaError:atSuggestedKey:callWillModify:
addImportWarningSet:atSuggestedKey:callWillModify:
addMultipleChoiceListFormat:atSuggestedKey:callWillModify:
addRichText:atSuggestedKey:callWillModify:
addString:atSuggestedKey:callWillModify:
addStyle:atSuggestedKey:callWillModify:
cellFormatForKey:
commentStorageForKey:
conditionalStyleSetForKey:
formulaForKey:
controlCellSpecForKey:
formulaErrorForKey:
importWarningSetForKey:
multipleChoiceListFormatForKey:
richTextForKey:
stringForKey:
stringForKey:shouldWrap:
styleForKey:
documentObject
legacyID
upgradedCustomFormatKeyForLegacyID:
unpopulatedCustomFormatWrapperWithFormatType:customFormatKey:
setKey:
copyByUpgradingToLinkedRefAtHostCellRef:
objectForKeyedSubscript:
UUID
foreach:
setInt:forKey:
hasDuplicatedElements
reassignCustomFormatUIDForPaste:
getRefCountsFromDataList
tst_dataObjectHash
characterSetWithCharactersInString:
integerValue
strokeWithColor:width:
strokePresetListForDefaultPropertyMapForTablePresetID:colors:
horizontalStrokeForStrokePreset:
verticalStrokeForStrokePreset:
exteriorStrokeForStrokePreset:
maskForStrokePreset:
maskForStrokePresets:
validateIntValueAsBool:forProperty:
deriveCategoryTopStrokeFromFooterRowSeparatorStroke:
deriveCategoryBottomStrokeFromFooterRowSeparatorStroke:
deriveCategoryInteriorStrokeFromFooterRowVerticalStroke:
emptyStrokeWithWidth:
tsp_initWithProtobufString:
tsp_saveToProtobufString:
loadTableStylePropertiesIntoPropertyMap:fromArchive:unarchiver:
saveTableStylePropertiesToArchive:archiver:
curatedTableStylePropertySetForCrossDocumentPasteMasterComparison
hasEqualValues:forProperties:
strokeByTransformingByTransform:
boxedValueForProperty:oldBoxedValue:transformedByTransform:
nonEmphasisTableProperties
presetIDForStyleID:
styleIDForPreset:
defaultIntValueForProperty:
initDefaultStrokePresetListInPropertyMap:presetID:colors:
initDefaultPropertyMap:presetID:colors:alternate:
strokeForStrokePreset:
isEquivalentForCrossDocumentPasteMasterComparison:
infos
setSelection:
lastCellID
selection
selectionWithParent:
_cellSelection
_isLegacyBasedIDSelection
_legacyAnchorCellID
_legacyCursorCellID
_legacyCellRegion
_legacyBaseCellRegion
initWithColumnUid:level:aggregateType:
level
aggregateType
setAggregateType:
_columnUid
_level
_aggregateType
_createTileWithID:
setKeepObjectInMemory:
_groupForTileID:
setReference:forTileID:
readLazyReferenceMessage:completion:
pruneTilesForRows:
_upgradeFromTileIDMap:referenceMap:
objectAndReturnError:
domain
code
tsp_isRecoverable
tsp_hintsDescription
_tileForID:createIfMissing:
setStrongLazyReference:message:
enumerateReferencesWithBlock:
_enumerateTiles:
groupWithStartingTileID:
owner
_setTile:forID:
enumerateTilesWithBlock:
_enumerateGroups:
indexGreaterThanOrEqualToIndex:
_removeTileForID:
indexGreaterThanIndex:
tileSize
indexLessThanIndex:
lastPopulatedRowIndex
_shiftRowsDownAtIndex:count:
_yankRowRange:
_spliceRows:atIndex:
_clearContentAtIndex:count:
_shiftRowsUpAtIndex:count:
tsu_addPointersFromPointerArray:
tsu_enumerateNonNullPointersUsingBlock:
_sharedQueue
performAsync:
performSync:
indexLessThanOrEqualToIndex:
_insertRowsAtIndex:count:
_removeRowsAtIndex:count:
incrementValueForKey:
enumerateRowsInRange:withBlock:
enumerateTilesConcurrentlyUsingBlock:
removeAllIndexes
initWithStorageArchive:treeArchive:nextTileID:unarchiver:owner:
saveToStorageArchive:treeArchive:archiver:
nextTileID
enumerateRowByRowInRange:withBlock:
rowInfoAtIndex:
tileForWritingAtRowIndex:outTileRange:
tileStartingAtOrBeforeRowIndex:outTileRange:
tileStartingAtOrAfterRowIndex:outTileRange:
insertRowsAtIndex:count:
columnCellCountsOfRowsInRange:
populatedTiles
pruneTileForRowIndex:
needToUpgradeCellStorage
auditTilesForRowOverlapAndExtensionPastTableBounds:withDataStore:result:
makeStorageMap
upgradeRepairedTiles
_tileIDSet
_tileGroups
_upgradeRepairedTiles
initWithContext:bounds:
setBounds:
_headerAtIndex:
initWithSize:hidingAction:cellStyle:textStyle:columnRowUID:
_mutableHeaderAtIndex:
updateFromMetadata:
_setHeader:atIndex:
mutableHeaderAtIndex:allowCreation:
headerAtIndex:
setHeader:atIndex:
shiftIndexesForwardAtIndex:count:
p_allocateBuckets
setHeaders:
shiftIndexesBackAtIndex:count:
hidingState
setHidingState:
enumerateHeadersWithBlock:
_mutableNoCreateHeaderAtIndex:
setNumberOfCells:
minIndex
maxIndex
populatedIndexes
initWithBucket:owner:
firstBucketForArchiving
initFromArchive:unarchiver:owner:
metadataAtIndex:hidingAction:defaultSize:uuid:
updateHeaderAtIndex:fromMetadata:
removeIndexesAtIndex:count:
swapIndex:withIndex:
moveIndexRange:toIndex:
sizeAtIndex:
setSize:atIndex:
hidingStateAtIndex:
setHidingState:atIndex:
cellStyleAtIndex:
setCellStyle:atIndex:
textStyleAtIndex:
setTextStyle:atIndex:
updateStylesWithBlock:
cellCountAtIndex:
decrementCellCountAtIndex:byAmount:
incrementCellCountAtIndex:byAmount:
resetAllCellCounts
totalCellCount
forceLoadHeaders
_buckets
_bucketCount
isForTable:
isRows
offsetForRowIndex:
absoluteCellTractRefForHostCell:
isRectangularRange
preserveRectangular
rowOrColumnUids
indexes
insertRowGapsAtIndexes:
insertColumnGapsAtIndexes:
fillInRowGapsUsingIndexes:
fillInColumnGapsUsingIndexes:
insertAtUid
edgeExpandUsingIndexes:forRows:
initWithAbsoluteTractRef:hostCell:
verifySpanningSettings
initWithIndex:baseColumnIndex:rules:
initWithArray:copyItems:
filterWithIndex:baseColumnIndex:rules:
arrayByAddingObject:
filterWithRule:atIndex:
filterByAddingRule:
filterByRemovingRuleAtIndex:
filterByClearingRules
enumerateRulesUsingBlock:
filterIndex
baseColumnIndex
_filterIndex
_baseColumnIndex
_rules
minKey
maxKey
initFromArchive:unarchiver:outIndex:
encodeToArchive:archiver:index:
bounds
data
setData:
_data
_bounds
reserveNextIndex
clearFormulaAtIndex:
setFormula:atIndex:
replaceFormula:atCellCoord:inOwner:
setFormulaObject:atIndex:
createFormulaObjectForRange:atIndex:tableUID:
initWithCreator:
formulaObjectAtIndex:
rangeFromFormulaObject:atCoord:useBoundingRange:
rangeFromFormula:atCoord:useBoundingRange:
const_astNodeArray
tableUIDFromFormula:atCoord:
copyByForceSettingOwnerUIDs:calcEngine:
initWithOwnerUID:
initWithArchive:isPreUFF:
indexFromCoord:
rangeFromFormula:atCoord:
rangeFromFormulaObject:atCoord:
setFormulaOwnerUID:
formulaCount
reserveNextCoordinate
markForRollback
rollbackToMark:
appendIndexedFormula:
registerAllFormulaToCalculationEngine
formulaAtIndex:
createFormulaForRange:atIndex:tableUID:
tableUIDFromFormulaAtIndex:
remapRangeFormulasToOwnerUID:
initWithOwnerUID:archive:unarchiver:
_formulaOwnerUID
_formulas
_nextIndex
strokeRegion
layoutSpacesInvalidateCoordinatesAfterRow:
layoutInvalidate
setLayoutInvalidate:
layoutInvalidateProvider
setLayoutInvalidateProvider:
layoutInvalidateSize
setLayoutInvalidateSize:
layoutInvalidateTableNameVisibility
setLayoutInvalidateTableNameVisibility:
layoutSpacesInvalidateCoordinates
setLayoutSpacesInvalidateCoordinates:
layoutSpacesInvalidateTableOffsets
setLayoutSpacesInvalidateTableOffsets:
layoutInvalidateChildren
setLayoutInvalidateChildren:
layoutUpdateChildren
setLayoutUpdateChildren:
layoutSpacesInvalidateCoordinatesAfterRow
setLayoutSpacesInvalidateCoordinatesAfterRow:
editingCellIDForInvalidation
setEditingCellIDForInvalidation:
mLayoutInvalidate
mLayoutInvalidateProvider
mLayoutInvalidateSize
mLayoutInvalidateTableNameVisibility
mLayoutSpacesInvalidateCoordinates
mLayoutSpacesInvalidateTableOffsets
mLayoutInvalidateChildren
mLayoutUpdateChildren
_layoutSpacesInvalidateCoordinatesAfterRow
_editingCellIDForInvalidation
info
setLayout:
initWithLayout:
p_getLayoutDirectionLeftToRight
newLayoutHint
initWithInfo:layoutHint:
removeContainedTextEditingLayout
invalidateLayoutSpaceTableOffsets
removeAttachmentCellLayouts
layoutState
offsetGeometryBy:
strokeFrame
isFrozen
layoutDirectionIsLeftToRight
frame
capturedInfoPositionForAttachment
spaceBundle
space
tableOffset
isDynamicallyChangingInfoGeometry
dynamicInfoGeometry
tableEnvironment
initWithFrame:
layoutGeometryFromInfo
maximumFrameSizeForChild:
alignmentFrame
invalidateLayoutSpaceCoordinates
fullTransform
geometryFromFullTransform:
transform
layoutController
canvas
isAnchoredAtRight
geometryByTranslatingBy:
canvasController
inPrintPreviewMode
layoutHint
validateLayoutHint:
validateTableNameVisibility
validateLayoutSpaces
setNeedsDisplay
validatePageNumberCount
setNeedsDisplayInRect:
layoutRectForCanvasRect:
invalidateLayoutSpaceCoordinatesAfterColumn:
invalidateLayoutSpaceCoordinatesAfterRow:
containedTextEditingLayout
invalidateSize
changeDescriptorWithType:cellRange:
addChangeDescriptor:
invalidateChildren
invalidate
gridRangeOfLayoutSpace:
frameForGridRange:
invalidateTableOffsets
invalidateCoordinates
invalidateCoordinatesAfterColumn:
invalidateCoordinatesAfterRow:
setIsValid:
allValues
invalidateExteriorWrap
invalidatePosition
widthOfColumn:skipDynamicSwap:returnZeroIfHidden:outIsFitting:
maximumSize
heightOfRow:skipDynamicSwap:withStrokeHeights:returnZeroIfHidden:clampToPartitionSize:maximumPartitionSize:outIsFitting:
setGridRange:
entireFooterRowsCellRange
cacheHintID
headerRowsRepeat
headerColumnsRepeat
cellRange
enumerateLayoutSpacesUsingBlock:
partitionPosition
frozenHeaderColumnsSpace
frozenHeaderRowsSpace
frozenHeaderCornerSpace
repeatHeaderColumnsSpace
repeatHeaderRowsSpace
repeatHeaderCornerSpace
lockForRead
alignedStrokeFrame
canvasRectForLayoutRect:
alignedFrame
unlock
frameInRoot
setTransformToCanvas:
transformToCanvas
transformToDevice
setViewScale:
viewScale
layoutPointForCanvasPoint:
canvasPointForLayoutPoint:
canvasFrame
canvasStrokeFrame
isDynamicallyColumnTabResizing
dynamicColumnTabSize
isDynamicallyRowTabResizing
dynamicRowTabSize
supportsFrozenHeaders
inFindReplaceMode
suppressFrozenHeadersForEditing
isStrokeEditing
entireHeaderColumnsCellRange
isEntireCellRangeHidden:
entireHeaderRowsCellRange
setNewCanvasRevealedHorizontally:
setNewCanvasRevealedVertically:
frameHasWidthAndHeight
rangeIntersectingLayoutRect:
isRepeat
alignedStrokeFrameForGridRange:
region:addingRange:
isDynamicallyRepressingFrozenHeaderRows
isDynamicallyRepressingFrozenHeaderColumns
layoutSpaceType
layout
gridPointHitByCanvasPoint:tabsViewable:
canvasFrameForGridRange:
intersectionCellRange:
intersectsGridRange:
intersectionGridRange:ofLayoutSpace:
canvasStrokeFrameForGridRange:
containsGridRange:
contentFrameForGridRange:
alignedOverrideFrameForGridRange:strokeWidthOverride:
intersectsRowGridRange:
intersectionRowGridRange:ofLayoutSpace:
alignedStrokeLineForRowGridRange:
intersectsColumnGridRange:
intersectionColumnGridRange:ofLayoutSpace:
alignedStrokeLineForColumnGridRange:
alignedStrokeLinePathForRowGridRange:transform:inset:reoriginToZero:
alignedStrokeLinePathForColumnGridRange:transform:inset:reoriginToZero:
alignedStrokeFramePathForGridRange:transform:inset:reoriginToZero:
transformUsingAffineTransform:
bezierPathWithRect:
subtractBezierPath:
uniteWithPolygonalBezierPath:
alignedMaskStrokeFramePathForTransform:
enumerateMissingRowsIntersectingCellRange:usingBlock:
enumerateRowsIntersectingCellRange:usingBlock:
appendBezierPath:
enumerateMissingColumnsIntersectingCellRange:usingBlock:
enumerateColumnsIntersectingCellRange:usingBlock:
alignedContentFrameForGridRange:
visiblePartOfRange:
invalidateTableNameHeight
width
alignedRectForLayoutRect:
frameForTableNameBorder
strokeFrameForTableNameBorder
alignedStrokeFrameForTableNameBorder
isBeingManipulated
isInDynamicLayoutMode
dynamicRepResize
isDynamicallyChangingContent
dynamicContentDelegate
cell:forCellID:
modelCellIDForLayoutCellID:
isDynamicallyChangingRowOrColumnCount
naturalAlignmentForCellID:
pageNumber
pageCount
validateCellForDrawing:cell:contents:wrap:verticalAlignment:padding:layoutCacheFlags:pageNumber:pageCount:
cachedCellID
cachedMergeRange
cachedCellWraps
cachedParagraphAlignment
p_maximumSpillRangeForCellID:
p_spillRangeToRightForCellID:
cachedAutosizedFrame
setWithArray:
reverseObjectEnumerator
isDynamicallyHidingContentOfCellID:
isDynamicallyHidingRowsColsCellID:
isDynamicallyHidingTextOfCellID:
cachedCellStyle
cachedTextStyle
initialTextSize
initWithStorage:parentLayout:cellID:frame:
updateChildrenFromInfo
computedEditingCellContentFrame
cachedPadding
maxSize
p_layoutWhollyContainsGridRange:
contentSizeForCellRange:skipDynamicSwap:
tsu_arrayByAddingNonContainedObjectsFromArray:
p_prepareAttachmentCells
clearDynamicStrokesForCellRange:
viewScaleForZoomingToSelectionPath:targetPointSize:
initWithLeftAnchor:rightAnchor:isVertical:
rectInRootForSelectionPath:
orderedSelections
paddingForCellID:
adjustedInsetsForTarget:
p_defaultAlignmentForTableWritingDirection
writingDirectionForParagraphAtCharIndex:
cachedAutoSizeFlags
cachedVerticalAlignment
p_nonAutosizedFrameForTextEditingLayout:
p_nonAutosizedFrameForRichTextLayout:
p_rangeUpAndLeftOfIntersectionRangeOfGridRange:
isCorner
isColumns
p_autosizedFrameForTextEditingLayout:textSize:
p_autosizedFrameForRichTextLayout:textSize:
setCachedAutosizedFrame:
dependentLayouts
p_maskRectForTextEditingLayout:
p_maskRectForRichTextLayout:
cachedMaskRect
p_spillRangeForMaskingRichTextLayout:
setCachedMaskRect:
setCachedMaskSpillRange:
objectsPassingTest:
findLayoutIfAvailableInSet:intersectingRow:
widthForColumnIndex:bodyWidth:
gapForColumnIndex:bodyWidth:
positionForColumnIndex:bodyWidth:target:outWidth:outGap:
layoutMargins
columnCount
alwaysStartsNewTarget
shrinkTextToFit
columnsAreLeftToRight
layoutMarginsForTarget:
textScaleFactor
autosizeFlagsForTextLayout:
verticalAlignmentForTextLayout:
nonAutosizedFrameForTextLayout:
autosizedFrameForTextLayout:textSize:
dependentsOfTextLayout:
repClassForTextLayout:
descendersCannotClip
invalidateForAutosizingTextLayout:
styleProvider
maxAutoGrowLineWidthForTextLayout:
maxAutoGrowBlockHeightForTextLayout:
initialCharIndex
textLayoutShouldWrapAroundExternalDrawables:
textLayoutShouldLayoutVertically:
maskRectForTextLayout:
naturalAlignmentForTextLayout:
pageCountForAttachment:
pageNumberForAttachment:
adjustRect:forScrollingToSelectionPath:forZoom:
storage:didChangeRange:delta:broadcastKind:attributeKindChanges:
scaleToFit
setLayoutHint:
supportsRotation
canRotateChildLayout:
resizeMayChangeAspectRatio
isDraggable
computeLayoutGeometry
computeInfoGeometryFromPureLayoutGeometry:
initialInfoGeometry
wrapFitType
inspectorGeometry
bezierPathsForCellRegion:selectionMask:transform:viewScale:inset:clipToVisibleRect:block:
invalidateTableNameVisibility
p_updateCachedStyleInformationFromCellID:
setupContainedTextEditingLayout:
calculatePointFromSearchReference:
calculatePointFromSearchReferenceWithoutValidation:
activityLineUnscaledEndPointForSearchReference:
unscaledCommentFlagAnchorInfoForSearchReference:
orderedBefore:
canvasShouldScrollForSelectionPath:
textIsVertical
p_textFrameForWrappingCell:defaultRowHeight:
p_cellIDForWPLayout:
p_computeSpillingTextFrameForEditingLayout:textSize:editingSpillRange:
reapCoordinatesChangedMaskForChrome
newCanvasRevealedHorizontally
newCanvasRevealedVertically
setContainedTextEditingLayout:
paddingForEditingCell
setSpaceBundle:
editingSpillingTextRange
prevEditingSpillingTextRange
setPrevEditingSpillingTextRange:
containedTextEditorSpills
processChangesFiltering
setProcessChangesFiltering:
mMasterLayout
mLayoutHint
mCanvasVisibleRect
mCanvasSafeRect
mPreviousVisibleStrokeFrame
mProcessChangesFiltering
mTabsVisible
mTableNameVisibilityIsValid
mTableNameVisible
mNewCanvasRevealedHorizontally
mNewCanvasRevealedVertically
mLayoutDirectionIsLeftToRight
mSpaceBundle
mCached
mRenderingFrameForLayoutGeometryFromInfo
mContainedTextEditingLayout
mAttachmentCellLayouts
mCachedPaddingForEditingCell
mComputedEditingCellContentFrame
mCachedVerticalAlignmentForEditingCell
mAdjustableTableSize
mFixedTableSize
mCapturedStrokeFrameSizeForInline
mEditingSpillingTextRange
mPrevEditingSpillingTextRange
mContainedTextEditorParagraphAlignment
mContainedTextEditorTextWraps
mRemovingContainedTextEditorLayout
mContainedTextEditorSpills
mSpillingTextSize
mCoordinatesChangedMaskForChrome
mShouldUpdateAttachmentChildren
mPageCount
mPageNumber
numberWithUnsignedLongLong:
headerColumnsWidth
headerRowsHeight
initWithLayoutSpaceBundle:type:
setFrozenHeaderColumnsSpace:
setFrozenHeaderRowsSpace:
setFrozenHeaderCornerSpace:
setUserSpaceToDeviceSpaceTransform:
enumerateFrozenLayoutSpacesUsingBlock:
setRepeatHeaderColumnsSpace:
setRepeatHeaderRowsSpace:
setRepeatHeaderCornerSpace:
setHeaderRowsRepeat:
setHeaderColumnsRepeat:
enumerateRepeatLayoutSpacesUsingBlock:
isCircularReferenceError
boolCount
boolTrueCount
numberCount
dateCount
durationCount
stringCount
errorCount
minValue
maxValue
dateByAddingTimeInterval:
specDictionary
functionName
sumMixedDurationsAndUnitlessWithoutADateErrorForFunctionName:
invalidDateManipulationError
initWithFormatType:decimalPlaces:negativeStyle:showSeparator:
isCircularReference
circularReferenceError
countValue
totalValue
avgValue
accumulateValue:
accumulate:
valueForType:
setIsCircularReference:
_boolCount
_boolTrueCount
_numberCount
_dateCount
_durationCount
_stringCount
_errorCount
_minValue
_maxValue
_numberTotalValue
_firstDateSeen
_totalSecsSinceReferenceDate
_secondsToAdd
_isCircularReference
initWithColumnAggregates:
asArray
aggregatesOnLevel:
_columnAggregates
initWithContext:calculationEngine:viewHostCell:TSCEFormula:ownerUID:
formulaForCell:atCellID:inTable:
viewTractRefForChromeTractRef:
baseTractRefForViewTractRef:
viewTractRefForBaseTractRef:
chromeTractRefForViewTractRef:
initWithChromeTractRef:calcEngine:
initWithBaseTractRef:calcEngine:
setBaseTractRef:
setChromeTractRef:
_baseTractRef
_chromeTractRef
invertedSet
stringForRangeRefPair:namingContext:
chromeCellCoordForBaseCellCoord:
nameForChromeRangeRef:namingContext:
nameForBaseRangeRef:namingContext:
categoryRefForAggregateRangeRef:
hostTableUID
prettyStringForCategoryRef:forHostCellRef:namingContext:
rangeIsWithinTable:
forceEscaping
allowSpanningColumnReferenceBodyQualifier
setQuoteComponents:
setForceEscaping:
cellRangeName:namingContext:asChrome:
setAllowSpanningColumnReferenceBodyQualifier:
allowTableName
referenceNameIsUnique:forReference:contextTable:
tsce_stringByForcingSingleQuoteEscapes:
stringValueAtCellCoord:inTableModel:
initWithFormat:
p_columnNameForBaseCellCoord:inTableModel:cellRangeContainingName:
createNameComponentWithChromeRangeRef:rowOrColumnName:isSticky:namingContext:
p_rowNameForBaseCellCoord:inTableModel:cellRangeContainingName:
disableImplicitNaming
useSymbolicNames
p_symbolicColumnNameForRefPair:useTopLeft:isSticky:foundRange:inTableModel:namingContext:
p_symbolicRowNameForRefPair:useTopLeft:isSticky:foundRange:inTableModel:namingContext:
isSingleCellOrSpanningRange
suppressIdenticalEndReference
stringByAppendingFormat:
setUsedSymbolicName:
setUseSymbolicNames:
chromeNameForBaseRangeRef:namingContext:
nameForWrappedRangeRef:namingContext:
whitespaceAndNewlineCharSet
setWhitespaceAndNewlineCharSet:
nonWhitespaceAndNewlineCharSet
setNonWhitespaceAndNewlineCharSet:
_whitespaceAndNewlineCharSet
_nonWhitespaceAndNewlineCharSet
arraySegmentClass
empty
zeroWidthEmptyStroke
p_setLeftStroke:order:atCellID:
p_setRightStroke:order:atCellID:
p_setTopStroke:order:atCellID:
p_setBottomStroke:order:atCellID:
overridePropertyMap
baseStyleForVariation
styleIdentifier
cascadedStyleWithIdentifier:
initWithContext:columnOrRowIndex:
invalidateRange:
setMaxOrder:
setStroke:inRange:order:
leftColumnStrokes
p_setStroke:order:inStrokesArray:atIndex:atRange:
rightColumnStrokes
topRowStrokes
bottomRowStrokes
findStrokeAndRangeAtIndex:
stroke
order
columnOrRowIndex
initWithContext:majorStrokeLayer:minorStrokeLayer:
enumerateRawStrokesSegmentsUsingBlock:
p_flattenMajorStrokeLayer:minorStrokeLayer:
p_strokeRect
enumerateStrokesInRange:usingBlock:
tsu_insertRange:
insertSpaceAtRange:
tsu_removeRange:
removeRange:
moveRange:toIndex:
swapSegmentAtIndex:withSegmentAtIndex:
setColumnOrRowIndex:
setBordersWithConcurrentCellMap:forTableInfo:
_maxOrder
_leftColumnStrokes
_rightColumnStrokes
_topRowStrokes
_bottomRowStrokes
intersectingColumnsInRow:
removeIndexesInRange:
setColumnIndexesInRow:
columnIndexesInRow
setIteratorToRow:
anyCellBordersInThisRow
cellBorderAtColumn:
setRegion:
topStrokeLayer
setTopStrokeLayer:
bottomStrokeLayer
setBottomStrokeLayer:
_columnIndexesInRow
_topStrokeLayer
_bottomStrokeLayer
mergeIndexes
mergeRangeAtIndex:
p_updateGridForReplacingRange:withRange:
mergeIndexesForRange:
mergeIndexesForBaseCellRegion:
enumerateCacheItemsUsingBlock:
enumerateCacheItemsIntersectingBaseCellRect:usingBlock:
enumerateCacheItemsIntersectingBaseCellRegion:usingBlock:
partiallyIntersectsModelCellRect:
initWithMergeOwner:
openRewritingTransaction
commitRewritingTransaction
setMerge:atIndex:
removeMergeRangeAtIndex:
mergeRangesIntersectingBaseCellRect:
partiallyIntersectsBaseCellRect:
partiallyIntersectsBaseCellRegion:
hasRangeSpanningRowsForCellRect:
expandBaseCellRectToCoverMergedCells:
expandBaseCellRegionToCoverMergedCells:
hasRangeSpanningRowsForCellRegion:
setMergeOwner:
setMergeIndexes:
_mergeRanges
_mergedAtCellIds
_transaction
_mergeIndexes
_count
addCellUIDToFillList:
setTableStyleImageForStyleArea:
tableStyleSet
cellFillList
_tableStyleSet
_cellFillList
overridesProperty:
p_imageFillAtCellID:
renderedImageSizeForObjectSize:
highestScaleFactorForRenderingDrawableInfo:
isTopmostContainerInfo
copyWithNewImageData:
initWithImageData:
targetSizeForImageData:associatedHint:
p_propertyMapForReplacingImageFill:atCellID:
compatibilityCheckerForData:associatedHint:
mediaCompatibilityTypeForData:associatedHint:
bundle
lockForWrite
validateCachedFrames
validateCoordinateCache:
validateTableOffset:
bezierPathCache
setTableWidthForRightToLeft:
gridRange
strokeHeightOfGridRow:inColumnRange:
strokeWidthOfGridColumn:inRowRange:
setTableOffset:
isMain
p_headerColumnsGridRange
p_headerRowsGridRange
p_footerRowsGridRange
p_tableRectForLayoutRect:
p_gridRangeForTableRect:
gridRangeForLayoutRect:
p_rangeForLayoutRect:
frameForRange:
p_tableCoordinateForGridColumn:
p_tableCoordinateForGridRow:
p_layoutPointForTablePoint:
p_tableRectForGridRange:
p_layoutRectForTableRect:
p_frameSpecForGridRange:frameType:strokeWidthOverride:
strokeFrameForGridRange:
p_rawTableCoordinateForGridColumn:
p_layoutCoordinateForGridColumn:
p_layoutCoordinateForGridRow:
p_alignedFrameSpecForGridRange:strokeWidthOverride:
gridPointHitByLayoutPoint:
p_tablePointForLayoutPoint:
p_gridPointForTablePoint:
visibleRange
drawPreventAntialias
p_alignStrokeWidth:deviceWidth:scaledWidth:
p_alignStrokeHeight:deviceWidth:scaledWidth:
p_alignedFrameSpecForRowGridRange:
p_alignedFrameSpecForColumnGridRange:
enumerateMergedStrokesForGridColumn:from:to:usingBlock:
enumerateMergedStrokesForGridRow:from:to:usingBlock:
bezierPathForGridRange:transform:inset:reoriginToZero:
mergeRangeEmptyStroke
insertBezierPath:gridRange:transform:inset:reoriginToZero:
alignedFrameForGridRange:
setWidth:
solid
dontClearBackground
color
alphaComponent
newBlendedColorWithFraction:ofColor:
clearColor
setColor:
isRoundDash
paintPath:inContext:
drawBlackAndWhite
strokeHeightOfGridRow:beginColumn:endColumn:
alignStrokeCoordinatesOfBeginPoint:endPoint:width:
strokeWidthForDrawingWithAlignedWidth:originalWidth:
drawSingleStroke:context:beginPoint:endPoint:width:strokeWidthForDrawing:strokeFrame:
enumerateMergedStrokesAndCapsForGridColumn:from:to:usingBlock:
strokeWidthOfGridColumn:beginRow:endRow:
enumerateMergedStrokesAndCapsForGridRow:from:to:usingBlock:
numberOfNonHiddenFooterRows
p_drawStrokeForGridColumn:strokeRect:clearStroke:shadowType:context:
p_drawStrokeForGridRow:strokeRect:clearStroke:shadowType:context:
p_bodyGridRange
initWithCount:atOffset:layoutDirectionIsLeftToRight:
p_topLeftCornerGridRange
p_createRowCoordinatesForGridRange:invalidRowIndex:previousCoordinates:validateSingleRow:outCoordinatesChanged:
p_extendedBodyGridRange
p_createColumnCoordinatesForGridRange:invalidColumnIndex:previousCoordinates:outCoordinatesChanged:
p_gridColumnForTableCoordinate:
p_gridRowForTableCoordinate:
p_bodyTranslationX
p_bodyTranslationY
p_tableCoordinateForX:
p_tableCoordinateForY:
p_cellTypeForGridPoint:
p_layoutOffsetForGridPoint:
p_layoutOffsetForTablePoint:
strokeWidthOfGridColumn:atRowIndex:
strokeHeightOfGridRow:atColumnIndex:
p_alignFrameSpec:
invalidateTableOffset
invalidateCoordinatesForEditingCellID:
validate:
validateCoordinateDirection
nearestRangeForLayoutRect:
contentFrameForRange:
strokeFrameForRange:
canvasFrameForCellRange:
canvasPositionForGridColumn:
canvasPositionForGridRow:
alignedStrokeFrameForCellRange:
drawStrokesInGridRange:clearStrokes:context:
setLayoutDirectionIsLeftToRight:
transformFromCanvas
setTransformFromCanvas:
setTransformToDevice:
transformFromDevice
setTransformFromDevice:
setDrawBlackAndWhite:
setDrawPreventAntialias:
setBezierPathCache:
headerRowColumnCoordinates
setHeaderRowColumnCoordinates:
bodyColumnCoordinates
setBodyColumnCoordinates:
headerColumnRowCoordinates
setHeaderColumnRowCoordinates:
bodyRowCoordinates
setBodyRowCoordinates:
invalidatedForEditingCell
setInvalidatedForEditingCell:
invalidTableOffset
setInvalidTableOffset:
invalidColumnIndex
setInvalidColumnIndex:
invalidRowIndex
setInvalidRowIndex:
cachedFrame
setCachedFrame:
cachedAlignedFrame
setCachedAlignedFrame:
cachedStrokeFrame
setCachedStrokeFrame:
cachedAlignedStrokeFrame
setCachedAlignedStrokeFrame:
mLock
_layoutDirectionIsLeftToRight
_headerColumnsRepeat
_headerRowsRepeat
_drawBlackAndWhite
_drawPreventAntialias
_invalidatedForEditingCell
_invalidTableOffset
_invalidColumnIndex
_layoutSpaceType
_invalidRowIndex
_bundle
_viewScale
_bezierPathCache
_headerRowColumnCoordinates
_bodyColumnCoordinates
_headerColumnRowCoordinates
_bodyRowCoordinates
_tableOffset
_gridRange
_cachedFrame
_cachedAlignedFrame
_cachedStrokeFrame
_cachedAlignedStrokeFrame
_transformToCanvas
_transformFromCanvas
_transformToDevice
_transformFromDevice
initWithIndexesInRange:
mOffset
mCount
mCoordinates
mAverage
mVisibleIndices
mTableWidth
receivers
distributeBlock:
willApplyConcurrentCellMap:tableUID:
willRemoveRows:tableUID:
protocol
didMergeRange:
didUnmergeRange:
initWithExpressionNode:parenNestingLevel:argumentIndex:
initWithExpressionNode:parenNestingLevel:
tokenContextWithExpressionNode:parenNestingLevel:
tokenContextWithExpressionNode:parenNestingLevel:argumentIndex:
parenNestingLevel
argumentIndex
mExpressionNode
mParenNestingLevel
mArgumentIndex
initWithContext:children:firstIndex:lastIndex:
initWithContext:identifier:symbol:firstIndex:lastIndex:
initAsCopyOf:intoContext:children:
whitespaceAfter
setWhitespaceAfter:
whitespaceBefore
setIdentifier:
recordHashesForSubexpressions:
copyByResolvingIdentifiers:hostTable:baseHostCell:forceReferenceInterpretation:symbolTable:oldToNewNodeMap:
insertFormulaText:includeWhitespace:
buildASTNodeArray:hostCell:symbolTable:
exportString
identifier
_identifier
initWithType:range:styleInsertionBehavior:caretAffinity:smartFieldRange:leadingEdge:leadingCharIndex:activeTokenCharIndex:
initWithType:range:styleInsertionBehavior:caretAffinity:smartFieldRange:leadingEdge:leadingCharIndex:
activeTokenCharIndex
setActiveTokenCharIndex:
mActiveTokenCharIndex
selectionFromWPSelection:
tst_isCompatibleWithCell:
tst_isCompatibleWithCellRegion:mergeRange:
gatheredCellRegion
addColumns:
addRegion:
addRows:
regionByMovingColumnsFromRange:toIndex:
regionByMovingRowsFromRange:toIndex:
p_gatherCellRegionViaCellRegionAddition
p_gatherCellRegionViaReducedOverlap
regionFromCellRangeVector:
combineNonOverlappingCellRanges:addingOverlappingCellRanges:
gatherer
moveColumnsFromRange:toIndex:
moveRowsFromRange:toIndex:
mightOverlap
setMightOverlap:
debugCellRangeMerges
setDebugCellRangeMerges:
_gathererMap
_mightOverlap
_debugCellRangeMerges
initWithColumn:forGroupBy:
initWithArchive:aggregator:
localizedLabelForAggType:
valueForFormulaCoord:
rowUIDForViewRowIndex:
aggregateValueForType:groupNodeUid:
baseRowIndexesForUIDs:
getNextAggFormulaCoord
initWithFormulaCoord:groupNode:aggregator:
clearAggFormulas:inOwner:
initWithArchive:groupBy:
aggregateValueForType:atLevel:atRow:
aggregateRefForType:atLevel:atRow:
rebuildAggFormulas
clearAggFormulas:
_aggRoot
drawSwatchInRect:inContext:
p_documentRoot
swatchImage
tableHasStrongOwnership
setTableHasStrongOwnership:
tempUpgradePresetID
setTempUpgradePresetID:
_styleNetwork
_tableHasStrongOwnership
_tempUpgradePresetID
visibleIndexSet
countOfIndexesInRange:
containsIndexesInRange:
enumerateRangesInRange:options:usingBlock:
tsu_moveIndexesInRange:toOffset:
isIndexHidden:
setHidden:atIndex:
setVisibleIndexSet:
setHidden:atIndexes:
setHidden:inRange:
visibleIndices
numberHiddenIndicesInRange:
numberVisibleIndicesInRange:
anyHiddenIndicesInRange:
visibleIndexAfterIndex:
visibleIndexAfterAndIncludingIndex:
visibleIndexBeforeIndex:
visibleIndexBeforeAndIncludingIndex:
findNthPreviousVisibleIndex:fromIndex:
findNthNextVisibleIndex:fromIndex:
moveRangeFrom:toIndex:
deleteRange:
insertRange:
_visibleIndexSet
index
setIndex:
mIndex
initWithContext:styleProvider:
defaultStyleWithContext:
defaultValueForProperty:
setCGFloatValue:forProperty:
setPresetID:
addStyle:withIdentifier:
defaultPropertyMap
tableNameStyleIDForPreset:
defaultTableNameShapeStyleWithContext:
tableNameShapeStyleIDForPreset:
networkFromStylesheet:presetID:
valid
initWithContext:styleProvider:presetID:
emptyStroke
padding
copyWithZone:context:
propertySetWithProperties:
overridePropertyMapIsEqualTo:
removeProperties:
p_saveToArchive:archiver:isPre30Alternate:
shouldSaveAlternates
alternateForVersion:
p_clearCategoryStyles
deriveCategoryCellStyleForTableStyleArea:connectedToStylesheet:
deriveCategoryTextStyleForTableStyleArea:connectedToStylesheet:
addStyle:
p_deriveCategoryCellStyleForTableStyleArea:fromCellStyle:connectedToStylesheet:
referenceColor
hueComponent
saturationComponent
brightnessComponent
colorWithHue:saturation:brightness:alpha:
fullPropertyMap
p_deriveCategoryTextStyleForTableStyleArea:fromTextStyle:connectedToStylesheet:
networkFromTheme:presetIndex:
identifiersForPresetID:
stylesInStylesheet:
styleForStyleNetworkIndex:
dictionaryWithPreset:
initWithContext:fromDictionary:withPreset:
clearAndGenerateCategoryStylesConnectedToStylesheet:
_presetIndex
_cellStyle
_textStyle
idOfFirstOccurence
setIdOfFirstOccurence:
_idOfFirstOccurence
initWithKeyboardShown:
mControlCellSelection
strokePresetListForDefaultPropertyMapWithHorizontalStroke:verticalStroke:exteriorStroke:
initWithMask:horizontalStroke:verticalStroke:exteriorStroke:
setStrokePreset:atIndex:
initWithDeprecatedArchive:unarchiver:
horizontalStroke
verticalStroke
exteriorStroke
mask
presetAtIndex:
strokePresetListForDefaultPropertyMapWithFatStroke:andThinStroke:
setStroke:forPresetIndex:
mPresets
setHorizontalStroke:
setVerticalStroke:
setExteriorStroke:
setMask:
mHorizontalStroke
mVerticalStroke
mExteriorStroke
mVisibleMask
upgradeStylesWithBlock:
tstLoadFromArchive:unarchiver:
tstSaveToArchive:archiver:
registerPresetSourceClass:
tstRegisterPresetSourceClasses
isDynamicallyHidingRowsCols
isDynamicallyHidingRowsCols:rowColIndex:
isDynamicallyRemovingTextOfCellID:
shallowCopyToCell:
initWithLayout:range:flags:searchFlags:
layoutRange
layoutCellID
layoutCell
queriedModel
setQueriedModel:
modelIteratorHasCell
setModelIteratorHasCell:
numberOfLayoutColumns
setNumberOfLayoutColumns:
setNumberOfColumns:
setNumberOfRows:
layoutCellData
setLayoutCellData:
modelIteratorData
setModelIteratorData:
_queriedModel
_modelIteratorHasCell
_numberOfLayoutColumns
_numberOfColumns
_numberOfRows
_layoutCellID
_layoutCell
_layoutCellData
_modelIteratorData
_layoutRange
copyIntoContext:bakeModes:children:
forceReferenceInterpretationOfChildren
setFunctionEndNode:
fixStorageLanguage:
addTSTCanvasReferencesToSet:inRangeContext:withColorHelper:preferringNodesFromStorage:allVisitedNodes:
initWithObjects:
firstIndexOfSubtree
lastIndexOfSubtree
mostSpecificNodeContainingIndex:correspondingIndex:
subtreeContainsIndex:
addVariablesMatchingPrefix:forFormulaIndex:toDictionary:symbolTable:
largestCommonSubexpressionExcludingExisting:cseData:
unionSet:
addAllIdentifiersToSymbolTable:
replaceOccurrencesOfChildrenInSet:withIdentifier:symbol:
largestCommonSubexpression
eliminateLargestCommonSubexpression:withSymbolTable:newIdentifierOut:
lowestCommonAncestor:
defaultNameWithIndex:
initWithContext:identifier:firstIndex:lastIndex:
arrayWithObjects:
setWhitespaceAfterDelimiter:
p_eliminateLargestCommonSubexpressionWithLCA:expressions:withSymbolTable:newIdentifierOut:
initWithContext:firstIndex:lastIndex:
isOptional
setArgumentSpec:
buildASTNodeArray:hostCell:
popover
hasMenu
enumerateExpressionNodesUsingBlock:
compareFirstLastIndices:
rangeEncompassingExpressionNodesInRange:
isFunctionNode
canEliminateLargestCommonSubexpressionWithSymbolTable:
eliminateLargestCommonSubexpressionWithSymbolTable:newIdentifierOut:
setTokenAttachment:
setFirstIndex:
setLastIndex:
setWhitespaceBefore:
_argumentSpec
_tokenAttachment
_firstIndex
_lastIndex
_whitespaceBefore
_whitespaceAfter
initWithContext:calculationEngine:baseHostCell:TSCEFormula:ownerUID:suppressAutomaticNamedReferenceInvalidation:
initWithCalculationEngine:expressionTree:baseHostCell:hostTable:
initWithContext:calculationEngine:viewHostCell:TSCEFormula:ownerUID:suppressAutomaticNamedReferenceInvalidation:
initWithCalculationEngine:baseHostCell:hostTable:
setExpressionTree:
setInitialWhitespace:
setSyntaxError:
setEmpty:
geometricFormula
nodesToCheckForBareArgumentPlaceholders
isCategoryRef
categoryRef
resolveCategoryRef:atRowUid:inHostTable:
setCategoryRef:
reparseWithStorage:adjustExpressionTree:
storageExceedsMaxFormulaLength:
p_fixFormula:
fixPreserveFlagsForCategoryRefInNode:
singleQuoteCharacters
doubleQuoteCharacters
quoteContextAtCharIndex:previousContext:inStorage:
parenCountAtCharIndex:unmatchedParenCount:quoteContext:inStorage:
leftParenCharacters
rightParenCharacters
expressionTree
addCharactersInString:
tsu_push:
tsu_pop
tst_hasFormulaEqualsPrefix
p_charactersToTemporarilyChopOffEndToFixSyntaxError
stringByPaddingToLength:withString:startingAtIndex:
insertAttachmentOrFootnote:range:dolcContext:undoTransaction:changeSession:
p_formulaAsTextReturningTokenValues:
initWithContext:string:stylesheet:kind:
leadingSingleQuoteEscapeCharacters
equalsCharacters
formulaQuoteContextAtCharIndex:inStorage:
parenCountAtCharIndex:inStorage:
initWithContext:calculationEngine:baseHostCell:TSCEFormula:ownerUID:
initWithCalculationEngine:viewHostCell:hostTable:
hasBareArgumentPlaceholders
reparseWithStorage:
formulaDetokenizedText
canSimplify
simplify
setCalculationEngine:
isSyntaxError
fixupFormulas
setFixupFormulas:
formulaWasFixable
formulaFixupsShouldStick
initialWhitespace
_expressionTree
_calculationEngine
_hostInfo
_initialWhitespace
_hostCell
_syntaxError
_fixupFormulas
_formulaWasFixable
_formulaFixupsShouldStick
_empty
tst_hasLeadingCharacterInSet:
tst_isOneCharacterInSet:
characterSetWithRange:
tsu_stringByRemovingCharactersInSet:
tst_isEqualToFormulaEqualsString
tst_hasLeadingSingleQuoteEscape
tst_cleanForFormulaEditor
enumerateCellStringsForRows:rowCount:usingBlock:
enumerateCellStringsUsingBlock:
initWithPopupModel:startWithFirstItem:
choices
displayStringAtIndex:
cellValueWithLocale:
indexForValue:
asMultipleChoiceListFormat
initialValue
initWithInitialValue:multipleChoiceListFormatID:popupModel:
setPopupModel:
displayChoicesForInspector
valueForIndex:
tskMultipleChoiceListFormat
_displayChoices
_startWithFirstItem
_popupModel
setThresholdCellValues:
thresholdCellValues
_ownerUID
_thresholdCellValues
_needsToUpdateFilterSetForImport
initWithContext:operatorChar:children:firstIndex:lastIndex:
operatorChar
initWithContext:children:
setOperatorChar:
_operatorChar
initWithStrokeVisibilityMask:
strokeSelectionWithMask:
_mask
addCustomFormatForUpgrade:legacyKey:
upgradedCustomFormatList:
controlCellSelection
isKeyboardShown
_keyboardShown
initWithContext:number:string:firstIndex:lastIndex:
initWithContext:number:locale:firstIndex:lastIndex:
initWithContext:string:locale:firstIndex:lastIndex:
setNumber:withLocale:
setString:
number
_string
_number
checkoutScientificNumberFormatter
returnScientificNumberFormatter:
hasExplicitFormatOfType:allowMismatchedSpare:
currentFormatIsExplicit
p_mostRecentlySetNumberFormatType
baseFormat
setProvidedValueTypeBeforeUpgrade
cellValueTypeDescription
setImportWarningSet:
resolveDataListKeysForPreBNCCell:suppressTransmutation:sourceStorageVersion:
hasCellSpec
p_currentFormatIsEqualToOtherCellFormat:
doubleValue
isEqualToDate:
compareRange:otherStorage:otherRange:options:styleComparisonBlock:
setStringValue:clearingID:shouldWrap:
setStringValue:clearingID:
setFormulaSyntaxError:clearingID:
setRichTextValue:clearingID:convertToPlaintextIfPossible:
stringFromString:locale:
stringFromDate:locale:
stringFromBool:locale:
stringFromDurationTimeInterval:locale:
percentSymbol
asNumberFormat
showThousandsSeparator
initWithDecimalPlaces:negativeStyle:showSeparator:accountingStyle:currencyCode:
durationUnitSmallest
durationUnitLargest
durationStyle
initWithUseAutomaticUnits:durationUnitSmallest:durationUnitLargest:durationStyle:
stringFromDurationTimeInterval:locale:showPrecision:
stringForEditing
customFormatData
storageByApplyingCustomFormat:
copyPropertyMap
characterStyleAttributeCount
characterCount
characterStyleAtCharIndex:effectiveRange:
setCharacterStyle:range:undoTransaction:
setCellStyle:clearingID:
setTextStyle:clearingID:
setConditionalStyle:clearingID:
cellFill
p_setFormatFlags:explicit:
setCellSpec:clearingID:
spareFormatOfType:allowMismatchedSpare:
applyPopupChoiceIndex:
clearSpareFormatOfType:
setFormula:clearingID:
defaultCellSpec
setDoubleValue:
isControl
p_setFormatExplicit:fromFormatType:setMostRecentlySet:
setFormat:shouldSetExplFlags:isExplicit:makeCurrent:clearingID:
p_TSTCellFormatIsANumberFormatTypeForMostRecentlySet:
p_mostRecentlySetDateFormatType
p_mostRecentlySetTextFormatType
p_TSTCellSetMostRecentlySetNumberFormat:
p_TSTCellSetMostRecentlySetDateFormat:
p_TSTCellSetMostRecentlySetTextFormat:
p_spareFormatOfType:allowMismatchedSpare:explicitOnly:
accountingStyle
useAccountingStyle
negativeStyle
mismatchBetweenValueType:andFormatType:
setCommentStorage:clearingID:
setImportWarningSet:clearingID:
cellValueDescription
stringForCellValueType:
formatType:sharesASpareSlotWithFormatType:
hasASlotForFormatType:
upgradedBraveNewCell
initWithStorageRef:dataStore:
formulaSyntaxErrorString
stringForUnderlyingValue
richTextStorageForLayout
valueIsStringOrNumber
valueIsNumberOrTime
dataIsReplaceable
hasEqualValueToCell:
copyJustStyleAndStrokesToCell:
clearStrokes
cellFillComparedToDefault:suppressCS:isDefault:
setCellSpecRepairingFormats:
cellSpecForDiff
setSpareFormat:isExplicit:
setCurrentFormat:flags:
p_setFormatForFormulaResult:propagation:
clearNoncurrentImplicitFormats
clearAllFormats
copyAllFormatsToCell:
hasCurrentFormat
hasFormatOfType:allowMismatchedSpare:
customFormatString
currentFormatNegativeStyle
isMostRecentlyExplicitPercent
currentFormatID
setCurrentFormatID:
customFormatID
setCustomFormatID:
baseFormatID
setBaseFormatID:
controlFormatID
setControlFormatID:
multipleChoiceListFormatID
setMultipleChoiceListFormatID:
controlFormat
multipleChoiceListFormat
_valueDouble
_valueID
_valueObject
_conditionalStyleAppliedRule
_explicitFormatFlags
_cellFlags
_cellStyleID
_textStyleID
_conditionalStyleID
_formulaID
_currentFormatID
_numberFormatID
_currencyFormatID
_dateFormatID
_durationFormatID
_customFormatID
_baseFormatID
_controlFormatID
_multipleChoiceListFormatID
_commentStorageID
_importWarningSetID
_valueType
_conditionalStyle
_cellBorder
_currentFormat
_numberFormat
_currencyFormat
_dateFormat
_durationFormat
_customFormat
_baseFormat
_controlFormat
_multipleChoiceListFormat
_commentStorage
_importWarningSet
_cellSpec
p_addCell:
p_cellCount
copyWithZone:copyingCells:
cellUIDs
setCellUIDs:
cellUIDList
isOneToMany
p_cellAtIndex:inCellListArray:
cellAtIndex:
initWithCellMap:
enumerateCellsWithUIDsUsingBlock:
cells
popLastCell
removeLastObject
remapUIDsByColumnMap:rowMap:ownerMap:
p_copyCellsAndUUIDsFromCellMap:convertingToCellIDsWithTableInfo:
p_resolveCellIDsToUUIDsByTableInfo:preserveHostCells:
uuidBasedCellMapByTableInfo:preserveHostCells:
p_shallowAddCell:atCellCoord:
shallowAddCell:
addCell:
regionFromCellMap:withTableInfo:
initWithContext:cell:cellUIDList:
initWithContext:cell:cellIDList:
cellIDAtIndex:
cellIDs
iterator
findCellForCellID:
findCellForCellUID:
replaceCellAtIndex0:
addHeadMergeAction:
cellIDBasedCellMapByTableInfo:
uuidBasedCellMapByTableInfo:
shallowCopyToCoordFormUsingMap:
cellMapMaskedByUIDs:inRows:
shallowCopy
setShallowCopy:
_cellIDs
_searchableIDMap
_searchableUIDMap
_oneToMany
_shallowCopy
_cellUIDs
nextCellUID
nextCellAndCellUID
currentCellUID
currentCell
_cellMap
_cellUIDIterator
_index
_currentCellUID
_currentCell
addPointer:
removePointerAtIndex:
setCells:
p_replaceCell:atIndex:
lastCell
initWithContext:functionIndex:children:firstIndex:lastIndex:
setWhitespaceAfterFunctionName:
resurrectModeTokens
removeObjectsInRange:
setInvalidFunctionName:
initWithContext:calculationEngine:uidRectRef:hostCellRef:referenceColorHelper:suppressAutomaticNamedReferenceInvalidation:
initWithContext:calculationEngine:baseRangeRef:preserveFlags:hostCellRef:referenceColorHelper:suppressAutomaticNamedReferenceInvalidation:
initWithReferenceStart:referenceEnd:suppressAutomaticNamedReferenceInvalidation:
setRangeWithFunction:
absoluteCellTractRefForHostCell:offTable:
hasTableUID
uidTractWithCalcEngine:hostTableUID:
numColumns
initWithContext:boolValue:firstIndex:lastIndex:
initWithContext:stringValue:firstIndex:lastIndex:
initWithContext:dateValue:firstIndex:lastIndex:
setDateFormat:
initWithContext:duration:firstIndex:lastIndex:
initWithContext:children:columns:rows:firstIndex:lastIndex:
includedUidsTract
columnUids
initWithInitialCapacity:
setWhitespaceAfterLet:
setWhitespaceAfterIdentifier:
setWhitespaceAfterEquals:
initWithContext:calculationEngine:categoryRef:hostCellRef:referenceColorHelper:
strokeWidthForGridIndex:inRange:
updateCacheForGridIndex:withMergedStrokes:
lockForWriting
rwlock
setRwlock:
_indexToCacheEntriesMap
_rwlock
tableNameSelection
_checkStructure
p_mutableRowIndexesForUIDSet:notFoundUIDs:
p_mutableColumnIndexesForUIDSet:notFoundUIDs:
allOrderedRowUIDs
replaceRowsWithUids:
replaceColumnsWithUids:
applyMap:toRows:
_columnUidForIndex
_rowUidForIndex
_columnIndexForUid
_rowIndexForUid
_versionCounter
addReceiverIfMissing:
mergeChangeDistributor
unregisterFromDistributors
registerWithDistributors
setCategoryOwner:
registerOwnerWithOwnerUID:owner:referenceResolver:baseOwnerUID:ownerKind:
checkForFormulaCoordUpgrade
unregisterOwner:
resetGroupings
didChangeGroupByStructure
removeObjectIdenticalTo:
initWithArchive:forCategoryOwner:
groupValueTupleForRowUid:atLevel:
groupValueForValue:calcEngine:
removeRowUid:forGroupValue:
insertRowUid:forGroupValue:
hasEnabledGroupBys
p_willApplyCell:baseCellCoord:refreshCategoryInfo:
removeRowUids:
insertRowUids:
setGroupBys:
registerGroupByForColumns:
categoryInfos
groupBys
_baseTableUID
_groupBys
setAggNode:forFormulaCoord:
descriptionWithCategoryOwner:
accumulator
setAccumulator:
groupNode
_formulaCoord
_accumulator
_groupNode
_aggregator
functionSpecForFunctionIndex:
numArguments
argumentSpecForIndex:
initWithContext:argumentSpec:firstIndex:lastIndex:
p_resetArgumentSpecForChildren
enumerateObjectsWithOptions:usingBlock:
p_functionSpec
minArguments
maxArguments
setFunctionNode:
functionIndex
value
setMode:
mode
isDescendantOfChild:
unsupportedFunctionNameForLocale:
localizedFunctionNameForLocale:
insertFormulaText:includeWhitespace:unwrapped:
newDefaultFunctionNodeWithContext:functionIndex:
newSumNodeWithContext:children:
isEmptyFunctionNode
isMissingRequiredArgument
isInvalidFunction
whitespaceAfterLeftParen
setWhitespaceAfterLeftParen:
whitespaceAfterDelimiters
setWhitespaceAfterDelimiters:
whitespaceAfterFunctionName
invalidFunctionName
_functionEndNode
_functionIndex
_whitespaceAfterLeftParen
_whitespaceAfterDelimiters
_whitespaceAfterFunctionName
_invalidFunctionName
tst_hasCaseInsensitivePrefix:withLocale:
p_fixupNodeIfFunctionNode:
whitespaceAfterLet
whitespaceAfterIdentifier
whitespaceAfterEquals
whitespaceAfterDelimiter
newBareLetNodeWithContext:
boundSymbol
_whitespaceAfterLet
_whitespaceAfterIdentifier
_whitespaceAfterEquals
_whitespaceAfterDelimiter
initWithContext:tableInfo:
initWithTableUID:ownerUID:
addReceiver:
resetWithForce:
removeColumnsAtSummaryIndexes:
topLevelGroupNode
removeUuidsFromVector:
removeUuidsFromSet:
needsFormulaReset
cellAtCellUID:
setNeedsFormulaReset:
enumerateCellsUsingBlock:
getCell:atCellCoord:
copyJustValueToCell:
markAllDependentsAsDirty
columnRowUID
removeCellsInColumnUid:
formatOfCellFormatKind:isExplicit:
currencyIsMostRecentlySet
enumerateCellStoragesInRange:withBlock:
textStyleAtCellCoord:isDefault:
cellStyleOfSummaryRowAtLevel:isDefault:
textStyleOfSummaryRowAtLevel:isDefault:
textStyleForCellWithEmptyStyleAtCellCoord:isDefault:
cellStyleForCellWithEmptyStyleAtCellCoord:isDefault:
defaultCellStyleForCellCoord:
defaultTextStyleForCellCoord:
cellStyleOfSummaryLabelRowAtLevel:isDefault:
textStyleOfSummaryLabelRowAtLevel:isDefault:
summaryRowHeightList
labelRowHeightList
labelRowVisibilityList
cellMapForWildcardCells
setCellMap:
changeType
groupingColumnChanges
didCreateGroup:
willRemoveGroup:
didRemoveGroup:
formulaAtCellCoord:
hasFormulaAtCellCoord:
_appendColumnWithUID:
_appendRowWithUID:
setFormulaResultCellsWithCellMap:
insertColumnsAtIndex:metadatas:
cellValueTypeAtSummaryModelCoord:
explicitFormatOfKind:atBaseCellCoord:currencyIsMostRecentlySet:
stringAtCellCoord:optionalCell:
cellExistsAtCellCoord:
characterFillAtCellCoord:optionalCell:
cellStyleAtCellCoord:isDefault:
setLabelRowVisibility:atCategoryLevel:
setCellStyle:forSummaryLabelAtLevel:
setTextStyle:forSummaryLabelAtLevel:
currentState
runChange:withSummaryChangeState:migrationHelper:
_needsFormulaReset
_summaryCellVendor
_aggregateFormulaOwner
_categoryColumnWidth
_aggregateFormulaOwnerUID
_summaryRowHeightList
_labelRowHeightList
_labelRowVisibilityList
initWithMessage:unarchiver:
cellMap
_definedCellMap
mRWLock
mRetainedPointerKeyDictionary
asToggleControlSpec
initWithStroke:range:order:majorStrokeLayerToken:minorStrokeLayerToken:
tokenWithStroke:range:order:majorStrokeLayerToken:minorStrokeLayerToken:
setStroke:
setRange:
setOrder:
majorStrokeLayerToken
setMajorStrokeLayerToken:
minorStrokeLayerToken
setMinorStrokeLayerToken:
_order
_stroke
_majorStrokeLayerToken
_minorStrokeLayerToken
_range
majorStrokeLayer
startingIndex
minorStrokeLayer
nextStrokeAndRange:
p_findStrokeAndRangeAtIndex:highOrderToken:updatingLowOrderToken:lowOrderLayer:
enumerateStrokesUsingBlock:
appendStroke:inRange:order:
insertStroke:inRange:order:
setMajorStrokeLayer:
setMinorStrokeLayer:
_majorStrokeLayer
_minorStrokeLayer
initWithUTF8String:
aggregateTypeForAggregateLabel:locale:
foreachCellRect:
activeUidTract
tsu_isSingleContiguousRange
initWithNumber:
setNumber:
setRelativeCellRef:
hasUidRectRef
hasCategoryRef
hostCellCoord
cellRefForHostCoord:
uidRectRef
baseCellRef
setBaseCellRef:
initWithBaseCellRef:preserveFlags:
cellRef
setBaseCellRef:preserveFlags:
date
initWithDate:
durationValue
durationUnits
initWithDuration:units:
initWithBool:
hasRelativeCellRef
initWithRelativeCellRef:
initWithUIDRectRef:
initWithCategoryRef:
relativeCellRef
preserveColumn
preserveRow
numberValue
convertCategoryRefToRelativeAncestorUid:atRowUid:inHostTable:
defaultPredicateArg
initWithDouble:
setNumberValue:
setDate:
setUIDRectRef:
setBaseCellRef:preserveColumn:preserveRow:
initWithBaseCellReference:preserveColumn:preserveRow:
cellReference
setBaseCellReference:
setBaseCellReference:preserveColumn:preserveRow:
setDurationValue:
setDurationUnits:
isEqual:atHostCoord:
formulaCreatorForPredArgAtHostCell:calcEngine:
setUidRectRef:
setHostCellCoord:
_type
_objcData
_baseCellRef
_relativeCellRef
_hasRelativeCellRef
_uidRectRef
_categoryRef
_hostCellCoord
_preserveFlags
_union
loadIndexesFromTable:
hiddenStateExtentUid
columnHiddenStateExtent
initWithArchive:unarchiver:forHiddenStatesOwner:
registerHiddenStates:baseOwnerUID:
hiddenStatesByExtentUid:
unregisterHiddenStates:
willChangeExtentUids:
didChangeExtentUids:
_hiddenStatesByUuid
_hiddenStatesByExtentUuid
localizedTrueString
localizedFalseString
setValue:
_value
dimensions
whitespaceBeforeFirstChild
setWhitespaceBeforeFirstChild:
_dimensions
_whitespaceBeforeFirstChild
p_recalculateMergedFormat
_dict
_noFormatMergingNeeded
_cellValue
initWithInfo:frame:
setCacheIsValid:
cacheIsValid
setCachedCellWraps:
setCachedVerticalAlignment:
setCachedParagraphAlignment:
setCachedMergeRange:
setCachedAutoSizeFlags:
setCachedCellStyle:
setCachedTextStyle:
setCachedPadding:
invalidateForPageCountChange
setCachedCellID:
cachedMaskSpillRange
_cachedCellWraps
_cacheIsValid
_cachedVerticalAlignment
_cachedParagraphAlignment
_cachedCellID
_cachedCellStyle
_cachedTextStyle
_cachedAutoSizeFlags
_cachedPadding
_cachedMergeRange
_cachedMaskSpillRange
_cachedMaskRect
_cachedAutosizedFrame
tsce_newStringByAddingDoubleQuoteEscapesIfNecessary
listSeparator
initWithCellUIDRangeVector:
pruneAgainstTable:
enumerateCellUIDRangesUsingBlock:
enumerateCellUIDUsingBlock:
subRangesOfCellCount:
_cellUIDRangeList
defaultDateTimeFormatForLocale:
tsce_year
tsce_month
tsce_day
tsce_hour
tsce_minute
tsce_second
initWithContext:asBlank:firstIndex:lastIndex:
durationWrapper
isBlank
setIsBlank:
_isBlank
initWithContext:calculationEngine:uidRectRef:categoryRef:hostCellRef:referenceColorHelper:suppressAutomaticNamedReferenceInvalidation:
p_expandedViewRangeRefForViewRangeRef:forLabelRowsInTable:
p_singleCategoryRefForViewRangeRef:rangeContext:calculationEngine:hostCellRef:
isRangeExpression
hostCellRef
referenceColorHelper
p_resetMenu
p_boundingViewRangeRef
isSpanningCategorySummaryRef
p_spanningCategoryRefForViewRangeRef:groupByUid:categoryLevel:calculationEngine:
rangeContext
p_rangeRef:isContainedWithinSummaryAndLabelRowsInTable:
p_cellRangeForSingleCategoryRefInViewRangeRef:inTable:rangeContext:
topLevelGroupUid
p_categoryRefViewTractRef
isValidCategoryRef:
viewCellTractRefForCategoryRef:atRowUid:
isSingleColumnSpanningReference
isSingleRowSpanningReference
isCategorySummaryRef
isSpanningCategoryRef:
isRangeWithFunction
p_subregionForRange:rangeContext:
setAllowTableName:
foreachRangeRef:
referenceAsStringWithContext:
setForFormulaPlainText:
p_buildASTNodeArray:forCoord:preserveFlags:hostCell:
addToIncludedUidsTractColumnUids:rowUids:
preserveFlagsForReference:calcEngine:
initWithContext:calculationEngine:viewRangeRef:preserveFlags:hostCellRef:referenceColorHelper:suppressAutomaticNamedReferenceInvalidation:
initWithContext:calculationEngine:chromeRangeRef:preserveFlags:hostCellRef:referenceColorHelper:suppressAutomaticNamedReferenceInvalidation:
viewBoundingBox
viewRangeRefDeprecated
categoryRefTableUID
isNonSpanningRangeExpression
setIsBlankForKeyboardInsertion:
isResizable
subregionForReference:range:
subregionForRange:
processChanges:forChangeSource:
setHostCellRef:
setRangeContext:
isBlankForKeyboardInsertion
suppressAutomaticNamedReferenceInvalidation
_refString
_formulaPlainText
_rangeContext
_rangeWithFunction
_isBlankForKeyboardInsertion
_suppressAutomaticNamedReferenceInvalidation
_isCategoryRef
_referenceColorHelper
_hostCellRef
p_newStarPath:
renderRating:intoContext:rect:showDots:color:
initWithContext:tableInfo:pencilAnnotationStorage:
UUIDString
table
cellRangeForAnnotation:
uuid
setTable:
_cellRange
_pencilAnnotationStorage
_table
setBlank:
_blank
p_invalidate
numberWithShort:
bakedValue
argumentSpecForFunctionIndex:argumentIndex:
modes
argumentName
_detokenizedText
_mode
p_strokeTypeForColumn:
strokeLayerForStrokeType:
p_strokeTypeForRow:
strokeTypeToLayerMap
validateGeometry
changeDescriptor
strokeLayer
p_updateStrokeLayer:forColumnStrokeType:
p_updateStrokeLayer:forRowStrokeType:
categoryProvider
strokeProvider
applyStroke:atIndexes:order:applyStroke:atIndexes:order:applyStroke:atIndexes:order:applyStroke:atIndexes:order:applyStroke:atIndexes:order:
p_headerColumnSeparatorColumnRangeIsValid
p_headerRowSeparatorRowRangeIsValid
initWithStrokeProvider:tableProvider:categoryProvider:
strokeLayerForColumn:
strokeLayerForRow:
validateChangeDescriptors:
setStrokeProvider:
tableProvider
setTableProvider:
setCategoryProvider:
setStrokeTypeToLayerMap:
headerSideBorderColumnRange
setHeaderSideBorderColumnRange:
headerColumnSeparatorColumnRange
setHeaderColumnSeparatorColumnRange:
bodySideBorderColumnRange
setBodySideBorderColumnRange:
topBorderRowRange
setTopBorderRowRange:
headerRowSeparatorRowRange
setHeaderRowSeparatorRowRange:
footerRowSeparatorRowRange
setFooterRowSeparatorRowRange:
bottomBorderRowRange
setBottomBorderRowRange:
_isValid
_strokeProvider
_tableProvider
_categoryProvider
_strokeTypeToLayerMap
_headerSideBorderColumnRange
_headerColumnSeparatorColumnRange
_bodySideBorderColumnRange
_topBorderRowRange
_headerRowSeparatorRowRange
_footerRowSeparatorRowRange
_bottomBorderRowRange
_functionNode
initFromCell:useAllSpareFormats:
initFromCell:useAllSpareFormats:forceNoContent:applySpareFormatOnly:
formatAndValueFromCell:useAllSpareFormats:
p_copyStorage:
richTextOrErrorTextStorageValue
copyForApplyingNoContentWithSuppressApplyValue:
p_formatForFormatType:
initWithNumberValue:locale:
initWithStringValue:locale:
initWithDateValue:locale:
initWithBoolean:locale:
formatType:isSameCellFormatKindAs:
formatAndValueFromCell:useAllSpareFormats:forceNoContent:
formatAndValueFromRichTextCell:updatingStorageWithBlock:
formatAndValueFromCell:applySpareFormatOnly:
initFromPropertyCommandMessage:unarchiver:
saveToPropertyCommandMessage:archiver:
copyForApplyingNoContent
copyForNotApplyingValue
isFormulaSyntaxError
isApplySpareFormatOnly
hasStringContentMatchingCell:
applyToCell:
_useAllSpareFormats
_suppressApplyValue
_applySpareFormatOnly
_spareFormatType
_boolValue
_decimalValue
_objValue
_formattedValue
_formattedRichTextStorage
_explicitFlags
_cellFormatKind
_booleanFormat
_textFormat
cacheWidth:ofColumn:
widthOfColumn:handleCacheMissUsingBlock:
generateWidthHeightCollection
widthHeightCollections
setWidthHeightCollections:
_columnToWidth
_lock
_widthHeightCollections
maskRect
recursivelyDrawInContext:keepingChildrenPassingTest:
filterFormulaCoordinateForRow:
initWithHiddenStatesOwner:forRows:
initWithHiddenStatesOwner:hiddenStatesUid:
showAtViewIndex:forAction:
hideAtBaseIndex:forAction:
showAtBaseIndex:forAction:
hidingActionForViewIndex:
hidingActionForBaseIndex:
indexesOfHiddenInRange:
indexesOfUserHiddenInRange:
indexesOfFilteredInRange:
indexesOfVisibleInRange:
indexesOfUserVisibleInRange:
indexesOfVisibleIndexesInIndexes:
indexesOfCollapsedInRange:
numberOfHiddenInRange:
numberOfUserHiddenInRange:
anyHiddenInRange:
anyHiddenInRange:forAction:
enumerateColumnRangesUsingBlock:
hasHiddenAtIndex:
indexOfVisibleBeforeIndex:
indexOfVisibleBeforeAndIncludingIndex:
indexOfVisibleAfterIndex:
indexOfVisibleAfterAndIncludingIndex:
numberOfHiddenInBaseRange:
indexesOfHiddenInBaseRange:
numberOfUserHiddenInBaseRange:
syncUpHiddenStateFormulaOwnerUIDs
setHiddenStateExtentUid:
isCategoryGroupUIDCollapsed:
setCategoryGroupUID:asCollapsed:
collapsedGroupUids
copyCollapsedStateToUpdatedGroupUids:
runChange:withCollapsedState:outUndoState:
mutateFormulaFiltersWithTable:usingBlock:
dirtyFilterStateForHeaders
dirtyFilterStateForFooters
anyCollapsed
anyHidden
anyUserHidden
numberOfHidden
numberOfUserHidden
insertBaseRange:
deleteBaseRange:withUids:
moveViewRangeOnlyFrom:toIndex:
moveBaseRangeFrom:toIndex:
swapBaseIndex:withIndex:
mutableUserHiddenIndexes
mutableFilteredIndexes
mutableAnyHiddenIndexes
filterFormulaThresholdCoordinateForRow:
filterFormulaCoordinate
mutableIndexSetByIntersecting:withRange:
showBaseColumnAtIndex:forAction:
hidingActionForBaseRowAtIndex:
hidingActionForBaseColumnAtIndex:
numberOfHiddenColumnsInBaseCellRange:
indexesOfHiddenColumnsInBaseCellRange:
numberOfHiddenRowsInBaseCellRange:
numberOfUserHiddenRowsInBaseCellRange:
indexesOfHiddenRowsInBaseCellRange:
hasCollapsedRows
moveViewColumnRange:toColumnIndex:
mutableUserHiddenRowIndexes
mutableUserHiddenColumnIndexes
setHiddenStatesOwner:
_rowHiddenStateExtent
_columnHiddenStateExtent
p_filterRegion:strokeSidecar:
enumerateColumnsUsingBlock:
regionByAddingRegion:
regionByIntersectingRegion:
curCellID
setCurCellID:
_curCellID
createAggregatorsIfMissingAndAssert:
ownerForOwnerUID:
relativeLevelOfAncestorGroupUid:
relativeAncestorGroupUid:
isRelativeAncestorGroupUid:
resolveRelativeAncestorUid:atRowUid:
convertToRelativeAncestorUid:atRowUid:
dropAllAggregators
insertSpanningRangeRef:
insertRangeRef:
initWithNotifyType:group:
isDeferringGroupByChangeNotifications
initWithNotifyType:group:rowUid:
beginDeferringRebuildFormulas
deferGroupByChangeNotifications
endDeferringRebuildFormulas
resumeGroupByChangeNotifications
addAggregator:
usedAggFormulaCoord:
p_setupCustomFormatsWithLocale:
precedentsOfCell:
resetAllAggsFormula
resetGroupingColumnsFormula
initWithType:groupByUid:
setPreviousLevel:
intersectsSet:
groupValueTupleByMergingTuple:toLevel:
groupingColumnListCopy
initWithType:groupingColumnChanges:groupByUid:
setUpdatedLevel:
previousLevel
addRemoveOfGroupUid:
updatedLevel
columnAggregateListCopy
_removeAggregates:
_addAggregates:atLevel:
markAllExternalGroupByRefsDirty:
aggregatorForColumn:createIfMissing:
findGroupNodeForValue:atLevel:createIfMissing:
rowUidsForGroupValue:atLevel:
distinctValuesAtLevel:
allObjects
sortUsingSelector:
rebuildAllAggFormulas
notifyType
sendToDistributor:
sendDeferredNotifictions:
mergeOriginForBaseCellCoord:
allGroupNodeUids
setValue:forFormulaCoord:
dropAggregator:
createAggregatorOnColumn:
cellIsInACycle:
p_columnNameForColumnUid:
aggregateTypeForCategoryRef:
aggregateLabelForCategoryRef:
columnNameForCategoryRef:
orderedRowUidsFromUids:
valuesForCategoryRef:atRowUid:
sortedArrayFromArray:
errorValue
cellRefsForCategoryRef:atRowUid:ordered:
bodyRowUidsForCategoryRef:atRowUid:ordered:
setObject:forKeyedSubscript:
p_promoteSpanningReferences:withCaptured:atLevel:
cellIteratorWithRegion:flags:searchFlags:
captureCategoryRefsFromIterator:atLevel:asSpanning:
uidRectRefForCategoryRef:atRowUid:
tableOrLinkedResolverForTableUID:
groupValueHierarchyStringForCategoryRef:forHostCellRef:namingContext:
setFormatString:
initWithName:formatType:data:
localizedStringWithFormat:
tswp_stringWithUnambiguousNeutralEnding
ownerKind
linkedResolver
evaluationMode
writeResultsForCalcEngine:
invalidateForCalcEngine:
evaluateFormulaAt:withCalcEngine:recalcOptions:
multiEvaluateFormulasAt:withCalcEngine:recalcOptions:
didInitFromSOS
columnOrderChangedPrecedent
rowOrderChangedPrecedent
columnAggregatesOnColumnUids:
changeForUpdatingGroupValueOnNode:toValue:
changeForMovingBaseRows:toDestGroup:
changeForSettingGroupingColumnList:
mapGroupUidsForChange:
runChange:withAggregates:
numberOfGroupsAtLevel:
indexOfGroupingColumn:
markAllAggregatesAsDirty
enumerateAggregatesAtLevel:withBlock:
groupLevelForGroupUid:isBlank:isError:
markAllGroupNodesDirty
groupsAtLevel:
rowsForGroupValue:atLevel:
rowUidsForGroupUids:
enumerateRowsUidsAtLevel:withBlock:
childGroupUidsForGroupUids:
labelRowUidsForGroupUids:
indexesOfGroupUidsInUids:
removeRowUid:
sortedValuesAtLevel:
aggregateRefOnValue:forColumnUid:forType:atLevel:
groupValueRefOnValue:atLevel:
groupValueHierarchyRefOnValue:atLevel:
enterCalcEngineMode
exitCalcEngineMode
updateAggFormulaCoord:
clearValueForFormulaCoord:
clearAggNode:forFormulaCoord:
aggregatorForColumn:
columnNameForCategoryLevel:
labelForCategoryRef:
valuesForCategoryRef:
unorderedCellRefsForCategoryRef:atRowUid:
cellRefsForCategoryRef:atRowUid:
categoryRefsForSpanningCategoryRef:
expandSpanningCategoryRef:
promoteSpanningReferences:
captureCategoryLabelRefsForViewRegion:atLevel:asSpanning:forRows:
captureAnyCategoryRefsForViewRegion:atLevel:asSpanning:
captureCategoryRefsForViewRegion:atLevel:asSpanning:
captureCategoryRefsForViewRange:atLevel:asSpanning:
viewCellTractRefForCategoryRef:
stringForCategoryRef:hostTableUID:
analyze
aggregateRangeRefForCategoryRef:
columnAggregates
indirectAggTypeChangeFormulaCoord
groupingColumnsFormulaCoord
groupingColumnHeadersFormulaCoord
allAggsInGroupRootFormulaCoord
needsRebuildOfAggFormulas
customFormatForBlankGroup
customFormatForErrorGroup
_isEnabled
_groupRoot
_aggregators
_indirectAggTypeChangeFormulaCoord
_groupingColumnsFormulaCoord
_groupingColumnHeadersFormulaCoord
_allAggsInGroupRootFormulaCoord
_columnOrderChangedCoord
_rowOrderChangedCoord
_groupByChangeDistributor
_nextAggFormulaCoord
_aggValuesLock
_aggNodesByFormulaCoord
_groupNodesByGroupUid
_rebuildFormulasDeferredLevel
_needsRebuildOfAggFormulas
_deferGroupByChangeNotificationsLevel
_deferredGroupByChangeNotifications
_calcEngineGroupByChangeNotifications
_groupingColumnHeadersChanged
_customFormatForBlankGroup
_customFormatForErrorGroup
_clearTopStroke
_clearLeftStroke
_clearBottomStroke
_clearRightStroke
definedTopStroke
definedLeftStroke
definedBottomStroke
definedRightStroke
cellBorderForResettingAllStrokes
_topStroke
_topStrokeOrder
_rightStroke
_rightStrokeOrder
_bottomStroke
_bottomStrokeOrder
_leftStroke
_leftStrokeOrder
_definedTopStroke
_definedTopStrokeOrder
_definedRightStroke
_definedRightStrokeOrder
_definedBottomStroke
_definedBottomStrokeOrder
_definedLeftStroke
_definedLeftStrokeOrder
strokeLayerCount
strokeLayerAtIndex:
replaceStrokeLayerAtIndex:withObject:
p_strokeLayerEnumeration
isPortalStroke
portalledStrokeLayer
enumerateStrokesAndCapsInRange:usingBlock:
lookupStrokeAtIndex:
enumerateStrokesFrom:to:usingBlock:
enumerateStrokesAndCapsFrom:to:usingBlock:
initWithStackKind:
defaultStrokeLayer
clearedStrokeLayer
setClearedStrokeLayer:
dynamicStrokeLayer
setDynamicStrokeLayer:
spillStrokeLayer
setSpillStrokeLayer:
hasStrokeInRange:
setDefaultStrokeLayer:
customStrokeLayer
setCustomStrokeLayer:
strokeLayerStackWithStackKind:
insertClearedStrokeAtRange:
insertDynamicStroke:strokeOrder:atRange:
insertSpillStroke:atRange:
hasSpillStrokeInRange:
replaceDefaultStrokeLayerWith:
replaceCustomStrokeLayerWith:
replaceDynamicStrokeLayerWith:
invalidateCustomStrokes
invalidateClearedStrokesInRange:
invalidateDynamicStrokes
invalidateDynamicStrokesInRange:
invalidateSpillStrokes
stackKind
setStackKind:
setType:
_defaultStrokeLayer
_customStrokeLayer
_clearedStrokeLayer
_dynamicStrokeLayer
_spillStrokeLayer
_stackKind
defaultMinorStrokeLayer
defaultMajorStrokeLayer
customUnorderedStrokeLayer
customOrderedStrokeLayer
clearedMinorStrokeLayer
clearedMajorStrokeLayer
dynamicUnorderedStrokeLayer
dynamicOrderedStrokeLayer
spillMinorStrokeLayer
spillMajorStrokeLayer
setSpillMinorStrokeLayer:
setSpillMajorStrokeLayer:
initWithCopyOfMajorStrokes:andMinorStrokes:
mergeTopStrokes:withBottomStrokes:
mergeLeftStrokes:withRightStrokes:
initWithReferenceOfMajorStrokes:andMinorStrokes:
maxWidthOfStrokesInRange:cachedMax:
p_widthOfStrokesAtIndex:
setDefaultMinorStrokeLayer:
setDefaultMajorStrokeLayer:
setCustomUnorderedStrokeLayer:
setCustomOrderedStrokeLayer:
setClearedMinorStrokeLayer:
setClearedMajorStrokeLayer:
setDynamicUnorderedStrokeLayer:
setDynamicOrderedStrokeLayer:
_defaultMinorStrokeLayer
_defaultMajorStrokeLayer
_customUnorderedStrokeLayer
_customOrderedStrokeLayer
_clearedMinorStrokeLayer
_clearedMajorStrokeLayer
_dynamicUnorderedStrokeLayer
_dynamicOrderedStrokeLayer
_spillMinorStrokeLayer
_spillMajorStrokeLayer
p_resolveStrokes
customStrokeProvider
defaultStrokeProvider
initWithMergedStack:
strokeAtIndex:
strokesForCellID:top:left:bottom:right:
rowStrokeExportCache
setRowStrokeExportCache:
columnStrokeExportCache
setColumnStrokeExportCache:
_defaultStrokeProvider
_customStrokeProvider
_rowStrokeExportCache
_columnStrokeExportCache
forRows
p_registerAllFormulaToCalculationEngine
baseColumnIndexForViewColumnIndex:
areMapsStale
viewRowIndexForBaseRowIndex:
viewIndexForBaseIndex:
hideAtUid:forIndex:forAction:
hidingActionForUid:
addHiddenIndex:forAction:
hiddenStateChangedForViewIndex:
showAtUid:forIndex:forAction:
removeHiddenIndex:forAction:
useCollapsedRows
collapsedRowIndexes
anyHiddenIndexes
mutableBaseRowIndexesForUIDs:
mutableBaseColumnIndexesForUIDs:
clearInvalidIndexes
viewRowIndexesForBaseRowIndexes:
viewColumnIndexesForBaseColumnIndexes:
hideAtUid:forAction:
showAtUid:forAction:
userHiddenIndexes
filteredIndexes
dirtyFilterStateForRowRange:
swapIndexesWithIndexSet:index:withIndex:
ruleAtAbsoluteIndex:
predicate
needsThreshold
baseColumnIndexForFilterRuleInTableInfo:
precedentsForFilterSet:calcEngine:hostOwnerUID:hostCellID:
previousGroupNodeUids
updatedGroupNodeUids
previousGroupNodeUidForUpdatedGroupNodeUid:
addUuidsFromSetReturningAdded:
numberParam1
initWithDate:locale:
shouldAbortRecalculation
predicateType
p_calculateAverageThresholdWithCalcEngine:formulaCoord:
qualifier1
p_calculateTopOrBottomThresholdWithCalcEngine:formulaCoord:isTop:keyScale:
p_createThresholdCellValue:locale:
rowIsShown:withHiddenStateExtent:withCalcEngine:
copyByRewritingFilterRulesToUidFormWithContext:withTableInfo:
p_removeAllFormulaFromCalculationEngine
markRangeRefAsDirty:
enumerateFiltersInTable:usingBlock:
baseIndexForViewIndex:
cellReferenceForIndex:
removeUid:
_hiddenStateExtentUid
_hiddenByUid
_forRows
_filterSet
_collapsedGroupUids
_hiddenStatesOwnerUid
_baseUserHiddenIndexes
_baseFilteredIndexes
_anyBaseHiddenIndexes
_viewIndexesMutex
_userHiddenIndexes
_filteredIndexes
_anyHiddenIndexes
_collapsedRowIndexes
_rewrittenFilterSet
_pendingComputedLock
_pendingRowsShown
_pendingRowsHidden
_cellRangesToInvalidate
_invalidateViewGeometry
_invalidateCollapsedRows
popupChoiceIndex
mergeRangeCache
loadMergeCache
formulaCoordsReferringToRange:fromOwner:skipSpanning:
enumerateModelCellRectsUsingBlock:
p_updateOriginMapWithSourceCellCoord:destCellCoord:
initWithType:uidRanges:
addFormula:
addFormulaIndex:
modelCellRanges
p_moveCellFromCellCoord:toCellCoord:
hasMergeFormulas
mergeActionForBaseCellRegion:nonOriginPartialsOnly:
containsModelCellCoord:
mergeFormulas
dirtyCellsForMergingRange:forTable:headerRowRange:headerColumnRange:
reloadMergeCacheForIndexes:
p_dirtyCellsForMerge:
removeBaseMergeRange:
p_shrinkReturningInverseForAction:
p_growReturningInverseForAction:
p_shrinkMergesAtIndexes:intersectedByBaseRegion:
uidRanges
shrinkReturningInverseForBaseCellRegion:
regionByAddingModelCellRect:
regionBySubtractingModelCellRect:
mergeFormulaIndexes
boundingModelCellRect
regionFromModelCellRect:
regionBySubtractingModelCellRegion:
p_growRangeFrom:toDesired:
intersectsModelCellRect:
enumerateMergesIntersectingBaseCellRegion:usingBlock:
beginSuppressingWillModifyCalls
initForRemoveRowsOrColumnsFromTable:rowColumnUuids:areRows:
setCanBeNested:
copyByRewritingWithSpec:calcEngine:containingCell:
endSuppressingWillModifyCalls
initForInsertingRowsOrColumnsIntoTable:rowColumnUuids:areRows:
didModifyTable:
allMergesAsString
resetMergeOriginMap
mergeActionForBaseCellRegion:
removeReturningInverseForBaseCellRegion:
find:
p_enumerateMergesUsingBlock:
mergeRangesAndCrumbsIntersectingBaseCellRect:
hasMergeRangesIntersectingBaseCellRect:
hasMergeRangesIntersectingBaseCellRegion:
mergeRangesPartiallyIntersectBaseCellRect:
mergeRangesPartiallyIntersectBaseCellRegion:
rewroteFormula:atCoordinate:withRewriteSpec:isUndo:
setFormulaStore:
mergeOriginsMap
reverseOriginsMap
setMergeRangeCache:
needsMergeCacheLoad
setNeedsMergeCacheLoad:
setMergeChangeDistributor:
_mergeOriginsMap
_reverseOriginsMap
_needsMergeCacheLoad
_formulaStore
_mergeRangeCache
_mergeChangeDistributor
interactionTypeIsControl:
initWithPropertiesAndValues:
isShimControlFormatType:
interactionTypeForShimControlFormatType:
shimControlFormatTypeForInteractionType:
propertiesMatchingThoseInMap:
initWithContext:calculationEngine:delegate:
setBaseOwnerUID:
referenceTracker
referencesForCalcEngine:referenceTrackerUID:
foreachSpanningRangeRef:
references
hasTrackedReferenceEqualTo:
allTrackedReferences
endTrackingReference:
p_referenceForColumnIndex:
beginTrackingReferenceWithSpanningRef:
referenceWithColumnIndex:trackedReference:
p_ruleReferenceForTrackedReference:
p_columnForTrackedReference:
setDelegate:
referencedCellWasModified:
shouldRewriteOnSort
shouldRewriteOnRangeMove
shouldRewriteOnTectonicShift
shouldRewriteOnCellMerge
shouldRewriteOnTranspose
shouldRewriteOnTableIDReassignment
cellRangeWasInserted:
setReferences:
setReferenceTracker:
_references
_referenceTracker
initWithSourceCellRange:
initWithSourceCellRange:targetCellRange:
targetCellRange
sourceCellRange
autofillSelectionWithSourceCellRange:
autofillSelectionWithSourceCellRange:targetCellRange:
isValidForCellSelection:inTable:
isValidForRowVisibilityChangeInRegion:table:
setSourceCellRange:
setTargetCellRange:
_sourceCellRange
_targetCellRange
initWithName:
widthHeightCacheFromBundle:withNumberOfRows:andNumberOfColumns:
initWithLimit:
tableRowsBehaviorForTable:andEnvironment:
updateCellRange
addChangeDescriptorWithType:andCellRange:andStrokeRange:
validateStrokesArrays:
p_validateStrokesForRegion:
hiddenRowsColumnsCache
p_validateStrokeWidthCachesForRegion:invalidateStrokeDefaults:
setMaximumSize:
setCacheHintID:
setPartitionPosition:
widthHeightCache
resetModelCache
resetModelCacheRange:
tableNameTextEngine:
initWithStylesheet:paragraphStyle:listStyle:columnStyle:alignmentForNaturalAlignment:naturalDirection:
measureText:
paragraphStyle
calculatedTableNameHeight
calculatedTableNameHeightIncludingDynamicResize:
isDynamicallyResizingTableName
dynamicTableNameResize
numberOfVisibleRowsInCellRange:
visibleColumnIndices
regionByIntersectingColumnIndices:
visibleRowIndices
isDynamicallyResizing:rowColIndex:
hasWidthForColumn:
getColumnWidth:
getModelWidthForColumn:
setModelWidth:forColumn:
scaleIsValid
tableRowsBehavior
p_defaultFontHeightForTableStyleArea:
hasHeightForRow:
getRowHeight:
getModelHeightForRow:
setModelHeight:forRow:
clampRowHeightAccountingForMaximumPartitionSize:rowIndex:rowHeight:
defaultPaddingForCellID:
newTextEngineForCell:atCellID:textStyle:
typesettingLocale
shouldHyphenate
initWithPadding:verticalAlignment:locale:shouldHyphenate:
layoutText:context:kind:minSize:maxSize:anchor:flags:
fontHeightOfParagraphStyle:
typographicBounds
frameBounds
getFitHeightForRow:
resetFittingRowHeightsStartingWith:upToRow:
invalidateBandedFill
p_strokesForGridColumn:isLeft:takeStrokeWriteLock:
adjustGridColumnForVisibility:isLeft:
p_strokesForGridRow:isTop:takeStrokeWriteLock:
adjustGridRowForVisibility:isTop:
p_setDynamicStroke:strokeOrder:forGridRow:isTop:beginColumn:endColumn:
p_setDynamicStroke:strokeOrder:forGridColumn:isLeft:beginRow:endRow:
mergedStrokesForGridRow:
mergedStrokesForGridColumn:
setClearedStrokeForGridColumn:beginRow:endRow:
setClearedStrokeForGridRow:beginColumn:endColumn:
contentWidthForCellRange:skipDynamicSwap:
contentHeightForCellRange:skipDynamicSwap:maximumPartitionSize:
p_contentWidthForCellRange:skipDynamicSwap:validationBundle:
regionByUnioningEveryRangeInRegionWithRange:
shuffleMapping
sourceIndexes
invalidateStrokeDefaults
invalidateStrokeSpills
isDynamicallyChangingRowCount
hiddenColumnIndices
hiddenRowIndices
p_invalidateClearedStrokesForCellRegion:
p_clearStrokesForMergesInCellRegion:
strokeLayerModifiedByInsertingSpaceAt:
strokeLayerModifiedByRemovingRangeAt:
modelRowForLayoutRow:
isDynamicallySettingBandedFill
dynamicBandedFill
dynamicBandedFillSetting
numberOfVisibleRowsFromStartRowIndex:toEndRowIndex:
numberOfVisibleRowsFromHeader:
setModelCellID:
setCellPropsRowHeight:
setNeedWPColumn:
setCellWraps:
setPaddingInsets:
setMinSize:
setMaxSize:
setForDrawing:
setLayoutMergeRange:
setInDynamicLayout:
setCellContents:
setLayoutCacheFlags:
setPageNumber:
setPageCount:
measureWithLayoutState:
sizeOfText
p_setDefaultFontHeight:forTableStyleArea:
dynamicContentMustDrawOnMainThread
isMainThread
modelColumnForLayoutColumn:
layoutRowForModelRow:
layoutColumnForModelColumn:
mergeRange:forCellID:
isDynamicallyRevealingRowsCols:rowColIndex:
processHiddenRowsForExport
isRowUserHidden:
numberOfVisibleColumnsInCellRange:
anyRowsUserHiddenInCellRange:
nonUserHiddenRowAfterAndIncludingRow:
entireBodyRowsCellRange
dynamicLayoutParticipants
isDynamicallyChangingColumnCount
changeDescriptorWithType:cellRange:strokeRange:
processedByMasterLayout
changeDescriptors
setProcessedByMasterLayout:
validateBandedFill
validateDynamicResizeInfo
validateChangeDescriptorQueue
validateTableNameHeight
modifySafelyUsingBlock:
invalidateDefaultFontHeights
validateRowVisibility:
p_validateCellIDToWPColumnCacheForChangeDescriptors:
validateChangeDescriptors:tableInfo:numberOfRows:numberOfColumns:
validateMasterLayoutForChangeDescriptors:
validateDefaultFontHeights
validateStrokesForChangeDescriptors:
validateFittingRegionForChangeDescriptors:
validateRowsNeedingFittingInfo:validationRegion:masterLayout:
validateFittingInfoForValidationRegion:rowsNeedingFittingInfo:
waitForLayoutToComplete:
finalizeLayoutPassWithRowsNeedingFittingInfo:
willModifyIfNeeded:
setFitHeight:forCellID:
enumerateMergeRangesUsingBlock:
regionFromColumnIndices:
postNotificationName:object:
overrideCGFloatValueForProperty:
overrideValueForProperty:
edgeInsetsFromPadding:
queueCellForValidation:cell:textStyle:modelMergeRange:wrap:verticalAlignment:padding:prop:layoutCacheFlags:validationBundle:layoutTask:
p_addFittingInfoForEmptyMergeRange:
p_validateFittingInfoForEmptyCellsBetween:andCellID:inRange:widthHeightCollection:
validateFittingInfoForCell:cellID:mergeRange:setFitting:layoutTask:widthHeightCollection:validationBundle:
processLayoutTask:validationBundle:
p_validateFittingInfoWithCellRangeWorker:widthHeightCollection:containsMerges:validationBundle:
p_validateFittingInfoForEmptyCellsOnSingleRowBetween:andEndCellID:widthHeightCollection:
addRange:height:paddingInsets:isCheckbox:
mergeRangesProppingRowHeightsInRegion:
regionFillingRowsFromRegion:
p_containsGradientThatFillsContainerInStyle:
fillType
p_validationFittingCellRegionForColumnsDeleted:cellRegionGatherer:
p_validationFittingCellRegionForColumnsInserted:cellRegionGatherer:
p_validationFittingCellRegionForColumnsVisibility:cellRegionGatherer:
p_validationFittingCellRegionForColumnsMovedFrom:toColumnIndex:cellRegionGatherer:
p_validationFittingCellRegionForRowsDeleted:cellRegionGatherer:
p_validationFittingCellRegionForRowsInserted:cellRegionGatherer:
p_validationFittingCellRegionForRowsMovedFrom:toRowIndex:cellRegionGatherer:
p_validationFittingCellRegionForRangeMergeUnmerge:cellRegionGatherer:
p_validationFittingCellRegionForStrokesChanged:cellRegionGatherer:
p_validationFittingForChangeDescriptorType:regionFromChangeDescriptor:cellRegionGatherer:
tsu_intersectionWithIndexSet:
p_validationBundleForRegionToValidate:
validateFittingInfoWithCellRange:validationBundle:
setShouldFastPathMeasureFitWidth:
setVerticalAlignment:
layoutCellIDForModelCellID:
hasAttachmentsThatChangeWithPageNumberOrPageCount
wpColumn
keyVal
columnToWidthMapFromCollectionArray:
strongToStrongObjectsMapTable
unsignedIntValue
p_containsGradientFillThatFillsContainerInCell:cellContents:
layoutCacheFlags
cellContents
contentWidthForCellRange:validationBundle:
setMaxWidthForChildren:
addCellState:
numberOfCellStates
numCellsPerTask
modelCellID
minSize
cellWraps
needWPColumn
p_resolvedTextStyleForCell:atCellID:textStyle:outNaturalAlignment:outCellDirection:
fontInfoForTextStyle:withString:
newTextEngineForCell:atCellID:textStyle:naturalAlignment:cellDirection:
setTextColorOverride:
paddingInsets
verticalAlignment
initWithString:width:height:paragraphStyle:cellWraps:valueType:paddingInsets:verticalAlignment:writingDirection:
setKeyVal:
maxWidthForChildren
layoutTextStorage:minSize:maxSize:anchor:pageNumber:pageCount:flags:
setWpColumn:
setSizeOfText:
columnLayoutWidthForBodyWidth:padding:delta:
shouldFastPathMeasureFitWidth
heightForString:width:outFitWidth:
enumerateCellStatesUsingBlock:
writeToMasterLayoutCaches:
setFittingHeightsFromCollectionArray:
widthForString:
boundingBottomRightCellID
unwrappedFittingWidthsForColumnInCellRegionWorker:
redColor
resolvedTextStyleWithPropertyMap:
formattedDataParagraphStylePropertyMapForCell:atCellID:
defaultColumnStyle
isDynamicallyChangingFontColorOfCellID:
dynamicFontColor
setAlignment:
tabs
insertTab:
currentThread
setProcessHiddenRowsForExport:
tableStrokeProvider
hintIsValid:
resetModelHeightWidthCache
clearModelHeightWidthCacheForCellRange:
tableNameTextEngine
tableNameTextSize
categoryColumnsCellRange
entireActualHeaderColumnsCellRange
entireBodyCellRange
heightOfRowIgnoringFitting:withStrokeHeights:
setStrokeSpillForRightGridColumn:leftGridColumn:inRow:
hasStrokeSpillForLeftGridColumn:inRow:
setDynamicCellBorder:forCellID:
shouldRowUseBandedFill:
beginDynamicMode:
endDynamicMode
modelCellRegionForLayoutCellRegion:
layoutCellRegionForModelCellRegion:
isDynamicallyResizing:
isDynamicallyResizingCellID:
expandCellRangeToVisibleNeighbors:
firstEmptyBodyRow
containsAnyContentInRange:
dynamicLayout
isDynamicallyRevealingRowsCols
updateDynamicTableNameSize:
isDynamicallyChangingSelection
updateDynamicFontColor:andRange:
dynamicCellFillDelegate
isDynamicallyChangingCellFill
captureDynamicResizeInfo
updateDynamicResizeInfo:
invalidateDynamicResizeInfo
isGrouped
addChangeDescriptorWithType:andCellRange:
fittingWidthsMapForRegion:includeStrokes:
setMaxConcurrentTasks:
unwrappedFittingWidthsForColumnsInCellRegion:
clearRenderingCaches
isCategoryLastSummaryRowCollapsed
isLastVisibleBodyRowCategorySummaryOrLabelRow
readSafelyUsingBlock:
strokesDefaultVendor
setStrokesDefaultVendor:
setCellIDToWPColumnCache:
setDupContentCache:
tempWPColumnCache
setTempWPColumnCache:
setWidthHeightCache:
setHiddenRowsColumnsCache:
maxConcurrentTasks
setNumCellsPerTask:
setBandedFillObject:
setTableEnvironment:
setTableRowsBehavior:
setInDynamicLayoutMode:
dynamicAddOrRemoveColumnElementSize
setDynamicAddOrRemoveColumnElementSize:
dynamicAddOrRemoveRowElementSize
setDynamicAddOrRemoveRowElementSize:
setDynamicBandedFill:
setDynamicBandedFillSetting:
dynamicColumnAdjustment
setDynamicColumnAdjustment:
setDynamicColumnTabSize:
setDynamicFontColor:
dynamicFontColorCellRange
setDynamicFontColorCellRange:
setDynamicRepResize:
setDynamicInfoGeometry:
dynamicWidthResize
setDynamicWidthResize:
dynamicHeightResize
setDynamicHeightResize:
dynamicResizingColumns
setDynamicResizingColumns:
dynamicResizingColumnRange
setDynamicResizingColumnRange:
dynamicResizingColumnAdjustment
setDynamicResizingColumnAdjustment:
dynamicResizingRows
setDynamicResizingRows:
dynamicResizingRowRange
setDynamicResizingRowRange:
dynamicResizingRowAdjustment
setDynamicResizingRowAdjustment:
dynamicRowAdjustment
setDynamicRowAdjustment:
setDynamicRowTabSize:
dynamicSavedLayoutGeometry
setDynamicSavedLayoutGeometry:
dynamicSelection
setDynamicSelection:
setDynamicTableNameResize:
dynamicSuppressingConditionalStylesCellID
setDynamicSuppressingConditionalStylesCellID:
setChangeDescriptors:
mergeRangesForLayoutPass
setMergeRangesForLayoutPass:
fontInfoCache
setFontInfoCache:
layoutValidateQueue
setLayoutValidateQueue:
layoutMeasureQueue
setLayoutMeasureQueue:
layoutConcurrentQueue
setLayoutConcurrentQueue:
setTopRowStrokes:
setBottomRowStrokes:
setLeftColumnStrokes:
setRightColumnStrokes:
spillStrokeColumns
setSpillStrokeColumns:
cellRegionForClearedMergeStrokes
setCellRegionForClearedMergeStrokes:
columnToStrokeWidthCache
setColumnToStrokeWidthCache:
rowToStrokeHeightCache
setRowToStrokeHeightCache:
paraStyleToHeightCache
setParaStyleToHeightCache:
tableNameBounds
setTableNameBounds:
cachedTableNameHeight
setCachedTableNameHeight:
tableNameHeightValid
setTableNameHeightValid:
cachedNumberOfColumns
setCachedNumberOfColumns:
cachedNumberOfRows
setCachedNumberOfRows:
cachedNumberOfHeaderColumns
setCachedNumberOfHeaderColumns:
cachedNumberOfHeaderRows
setCachedNumberOfHeaderRows:
cachedNumberOfFooterRows
setCachedNumberOfFooterRows:
cachedMaxNumberOfColumns
setCachedMaxNumberOfColumns:
cachedMaxNumberOfRows
setCachedMaxNumberOfRows:
bandedFillIsValid
setBandedFillIsValid:
setUseBandedFill:
tableDefaultFontHeightsAreValid
setTableDefaultFontHeightsAreValid:
contentReadingThreads
setContentReadingThreads:
setEmptyFilteredTable:
setIsGrouped:
setDynamicLayoutParticipants:
setDynamicLayout:
setDynamicContentDelegate:
dynamicHidingContent
setDynamicHidingContent:
dynamicHidingRowsCols
setDynamicHidingRowsCols:
dynamicHidingRowsColsDirection
setDynamicHidingRowsColsDirection:
dynamicHidingText
setDynamicHidingText:
dynamicRemovingText
setDynamicRemovingText:
dynamicRepressFrozenHeaderRows
setDynamicRepressFrozenHeaderRows:
dynamicRepressFrozenHeaderColumns
setDynamicRepressFrozenHeaderColumns:
dynamicResizeInfo
setDynamicResizeInfo:
dynamicRevealingRowsCols
setDynamicRevealingRowsCols:
dynamicRevealingRowsColsDirection
setDynamicRevealingRowsColsDirection:
setDynamicCellFillDelegate:
_tableDefaultFontHeightForArea
_layoutInFlight
_strokesRWLock
_contentRWLock
_inDynamicLayoutMode
_dynamicBandedFill
_dynamicBandedFillSetting
_dynamicRepResize
_dynamicResizingColumns
_dynamicResizingRows
_processHiddenRowsForExport
_tableNameHeightValid
_bandedFillIsValid
_useBandedFill
_tableDefaultFontHeightsAreValid
_emptyFilteredTable
_isGrouped
_dynamicRepressFrozenHeaderRows
_dynamicRepressFrozenHeaderColumns
_maxConcurrentTasks
_numCellsPerTask
_tableEnvironment
_tableRowsBehavior
_dynamicColumnAdjustment
_dynamicRowAdjustment
_cachedNumberOfColumns
_cachedNumberOfRows
_cachedNumberOfHeaderColumns
_cachedNumberOfHeaderRows
_cachedNumberOfFooterRows
_changeNotifier
_strokesDefaultVendor
_cellIDToWPColumnCache
_dupContentCache
_tempWPColumnCache
_widthHeightCache
_hiddenRowsColumnsCache
_bandedFillObject
_dynamicAddOrRemoveColumnElementSize
_dynamicAddOrRemoveRowElementSize
_dynamicColumnTabSize
_dynamicFontColor
_dynamicInfoGeometry
_dynamicWidthResize
_dynamicHeightResize
_dynamicResizingColumnAdjustment
_dynamicResizingRowAdjustment
_dynamicRowTabSize
_dynamicSavedLayoutGeometry
_dynamicSelection
_dynamicTableNameResize
_dynamicSuppressingConditionalStylesCellID
_changeDescriptors
_mergeRangesForLayoutPass
_fontInfoCache
_layoutValidateQueue
_layoutMeasureQueue
_layoutConcurrentQueue
_spillStrokeColumns
_cellRegionForClearedMergeStrokes
_columnToStrokeWidthCache
_rowToStrokeHeightCache
_paraStyleToHeightCache
_cachedTableNameHeight
_cachedMaxNumberOfColumns
_cachedMaxNumberOfRows
_contentReadingThreads
_dynamicLayoutParticipants
_dynamicLayout
_dynamicContentDelegate
_dynamicHidingRowsColsDirection
_dynamicResizeInfo
_dynamicRevealingRowsColsDirection
_dynamicCellFillDelegate
_defaultColumnStyle
_dynamicFontColorCellRange
_dynamicResizingColumnRange
_dynamicResizingRowRange
_dynamicHidingContent
_dynamicHidingRowsCols
_dynamicHidingText
_dynamicRemovingText
_dynamicRevealingRowsCols
_tableNameBounds
initWithRange:hintId:partitionPosition:maximumSize:effectiveSize:layout:validity:horizontal:
indexForSelection:
selectionAtIndex:
cellSelection
mostSpecificSelectionOfClass:
setPartitioningPass:
horizontal
archivedHintClass
overlapsWithSelectionPath:
offsetByDelta:
firstChildHint
lastChildHint
copyForArchiving
isFirstHint
effectiveSize
setEffectiveSize:
setHorizontal:
partitioningPass
mIsValid
mHorizontal
mCellRange
mCacheHintID
mPartitioningPass
mPartitionPosition
mMaximumSize
mEffectiveSize
mLayout
initWithContext:hint:
hint
setHint:
mHint
propertySetByAddingProperties:
containsAnyPropertyInProperties:
repairOrReplaceErrantStyle:
propertyMapWithProperties:
setBoxedObject:forProperty:
enumeratePropertiesAndObjectsUsingBlock:
setInfoGeometry:
makeObjectsPerformSelector:
scaledLayout
validateScaledLayout
p_didFinishPartitioningHint:horizontally:
rootLayout
infoGeometry
measureCellRangeForNextPartitionOfSize:previousHint:horizontally:
partitioningPassForHint:withPreviousHint:
nextHintForSize:parentLayout:previousHint:horizontally:outFinished:
layoutForHint:parentLayout:
hintCacheKeyForHint:
shouldReuseLayout:forSize:parentLayout:hint:
invalidateTextLayout
p_flushCacheAfterPartitioningFinished:lastHint:horizontally:
partitioningPassForFirstPartitionSize:
hintCacheKeyForPartitioningPass:andHintID:
nextLayoutForSize:parentLayout:previousHint:horizontally:outFinished:
didHint:syncWithNextHint:horizontally:delta:
hintForLayout:
setLayoutPartititionsRightToLeft:contentPartitionsRightToLeft:
isPrintingCanvas
setIsPrintingCanvas:
shouldSuppressBackgrounds
setShouldSuppressBackgrounds:
inlineTableWidth
mTableInfo
mInfoGeometry
mTableIsLTR
mLayoutIsLTR
mFirstPartitionWidth
mScaleToFit
mScaledLayout
mHintMatricesByCanvas
mPartitioningPassCache
getSpaceContainingCellID:
setSpace:
_layout
_space
_frozenHeaderColumnsSpace
_frozenHeaderRowsSpace
_frozenHeaderCornerSpace
_repeatHeaderColumnsSpace
_repeatHeaderRowsSpace
_repeatHeaderCornerSpace
byteSizeForArchiving
setKeyRange:
loadObjectFromArchive:listType:unarchiver:completion:
setKeys:
_estimatedByteSize
_keys
_keyRange
initWithTableInfo:region:forcingRegion:clampingViewRect:flags:searchFlags:
enumerateConcurrentlyUsingChunkBeginBlock:perDispatchThreadBlock:concurrentBlock:finalBlock:
flags
iterateCellsInRegion:flags:searchFlags:clampingRange:usingBlock:
initWithTableInfo:region:clampingViewRect:flags:searchFlags:
initWithTableInfo:region:forcingRegion:flags:searchFlags:
cellsPerSubRegion
setCellsPerSubRegion:
forcingRegion
setForcingRegion:
arrayOfChunkRocks
setArrayOfChunkRocks:
setFlags:
searchFlags
setSearchFlags:
clampingViewRect
setClampingViewRect:
_cellsPerSubRegion
_forcingRegion
_arrayOfChunkRocks
_flags
_searchFlags
_clampingViewRect
initWithFirst:second:third:fourth:
rockWithFirst:second:third:fourth:
setFirst:
setSecond:
third
setThird:
fourth
setFourth:
_first
_second
_third
_fourth
stringForMergeType:
setUidRanges:
setMergeFormulas:
setMergeFormulaIndexes:
initWithType:uidRange:
mergeActionForGrowingRange:coveringRange:inTable:
cellUIDRangeFromMergeFormula:calcEngine:
mergeActionForRemovingRanges:inTable:
mergeActionForInsertingRange:inTable:
initWithType:
hasMultiRowMerge
shrinkAction
actionByExpandingWithAction:
_uidRanges
_mergeFormulas
_mergeFormulaIndexes
compress
initWithCellUIDList:
p_compressUID:index:UIDtoIndexMap:UIDs:compressedIndexes:lastSameUIDIndex:
compressUIDIndexListFrom:withUIDCount:to:
pruneCellUIDListAgainstTable:behavior:usingBlock:
cellUIDListFromRange:
compressedRowUIDs
compressedColumnUIDs
compressedRowIndexes
compressedColumnIndexes
setCompressedColumnIndexes:
uncompressedCellUIDs
computeValidCount
pruneCellUIDListAgainstTable:behavior:
compressedSize
queue
_rowIdList
_columnIdList
_rowUIDIndexList
_columnUIDIndexList
_uncompressedCellUIDs
_compressedSize
_queue
p_nextCellRefIdWithUIDIndexList:UIDs:index:remainDup:lastDiffPos:recentResults:
setCellUIDList:
rowIndex
columnIndex
setColumnIndex:
rowRemainDup
setRowRemainDup:
columnRemainDup
setColumnRemainDup:
lastRowDiffPos
setLastRowDiffPos:
lastColumnDiffPos
setLastColumnDiffPos:
cellUID
setCellUID:
_recentRowResults
_recentColumnResults
_cellUIDList
_rowIndex
_columnIndex
_rowRemainDup
_columnRemainDup
_lastRowDiffPos
_lastColumnDiffPos
_cellUID
setNotifyType:
rowUID
setRowUID:
_notifyType
_rowUID
initWithStartingTileID:
_tileForLazyReference:
referenceForObject:
startingTileID
setStartingTileID:
_tiles
_startingTileID
_mergedRects
initWithTableModel:ownerUID:annotations:formulaStore:
addAnnotation:withFormulaObject:atIndex:
annotations
hasObjectForKey:
indexOfAnnotation:
removeAnnotation:
enumerateAnnotationsWithBlock:
_indexesForRange:startingOnly:
_enumerateAnnotationsAndFormulasWithIndexes:block:
_indexesContainedByRegion:
_annotationsForIndexes:
_indexesForRows:
_indexesIntersectingButNotContainingBaseCellRegion:
formulaCoordsReferringToRange:fromOwner:
containsModelCellRect:
_enumerateIndexesIntersectingRegion:block:
requiresDocumentReadVersion:writeVersion:featureIdentifier:
addAnnotation:withFormula:atIndex:
removeAllAnnotations
removeAnnotationAtIndex:
enumerateAnnotationsAndFormulasInRange:withBlock:
containsAnnotation:
annotationsStartingInRange:
_annotationsInRows:
_annotationsIntersectingButNotContainingBaseCellRegion:
setAnnotations:
_annotations
p_resetToRows:andNumColumns:
p_setFittingHeightsFromCollectionWithLock:
numberWithUnsignedShort:
enumerateMappingFollowingSwapsUsingBlock:
willModifyIfPossible:
hasBeforeAfterCounts
beforeCountValue
p_deleteRowsStartingWith:upToRow:
enumerateRowRangesInReverseUsingBlock:
afterCountValue
p_insertRows:atRow:
p_deleteColumnsStartingWith:upToColumn:
enumerateColumnRangesInReverseUsingBlock:
p_insertColumns:atColumn:
p_moveRowsUsingShuffleMapping:
applyMappingToIndexSet:
p_moveRowsFrom:toRow:
p_moveColumnsFrom:toColumn:
p_resetFittingHeightsForRange:
canModify
initWithNumRows:andNumColumns:
setFittingHeightsFromCollection:
needsToBeArchived
setNeedsToBeArchived:
_rowHeights
_columnModelWidths
_needsToBeArchived
initWithChangeDescriptorType:cellRegion:cellID:strokeRegion:referenceIdentifiers:shuffleMapping:annotations:
initWithChangeDescriptorType:cellRegion:cellID:strokeRegion:referenceIdentifiers:shuffleMapping:
setBeforeCountValue:
setAfterCountValue:
details
changeDescriptorWithType:cellID:cellRegion:strokeRegion:
changeDescriptorWithType:cellRegion:strokeRegion:beforeCount:afterCount:
changeDescriptorWithType:cellRegion:beforeCount:afterCount:
changeDescriptorWithType:
changeDescriptorWithType:cellID:cellRange:
changeDescriptorWithType:cellID:cellRange:strokeRange:
changeDescriptorWithType:cellID:strokeRange:
changeDescriptorWithType:strokeRange:
changeDescriptorWithType:referenceIdentifiers:
changeDescriptorWithType:shuffleMapping:
changeDescriptorWithAnnotationsRemovedForMerge:
enumerateChangeRecords:withType:block:
markAsProcessed
strokeRange
referenceIdentifiers
setReferenceIdentifiers:
setChangeDescriptor:
setCellRegion:
setStrokeRegion:
setShuffleMapping:
_processedByMasterLayout
_changeDescriptor
_referenceIdentifiers
_cellRegion
_strokeRegion
_shuffleMapping
_beforeCountValue
_afterCountValue
initWithTopInset:leftInset:bottomInset:rightInset:
forceWesternLineBreaking
mPadding
mVerticalAlignment
mMaxWidthForChildren
mLocale
mShouldHyphenate
ruleWithBaseColumnIndex:direction:
isEqualToArray:
predicateWithBlock:
filteredArrayUsingPredicate:
sortOrderWithBaseColumn:direction:type:
baseColumnIndices
sortOrderByChangingTypeTo:
sortOrderByAddingRule:
sortOrderByRemovingRuleAtIndex:
sortOrderByReplacingRuleAtIndex:withRule:
sortOrderByReplacingRulesWithRules:
sortOrderByRemovingBaseColumnIndices:
containsAnyRulesInBaseColumns:
cachedIndexes
setCachedIndexes:
_cachedIndexes
cellStatesToLayout
layoutMergeRange
inDynamicLayout
cellPropsRowHeight
addEntriesFromDictionary:
initWithLayoutTask:
_cellStatesToLayout
reapAccumulatedCellRegionWithTable:
_rowUIDToColumnUIDSetMap
_sem
forDrawing
_cellPropsRowHeight
_cellWraps
_needWPColumn
_shouldFastPathMeasureFitWidth
_forDrawing
_inDynamicLayout
_verticalAlignment
_layoutCacheFlags
_modelCellID
_cellContents
_maxWidthForChildren
_keyVal
_wpColumn
_pageNumber
_pageCount
_layoutMergeRange
_minSize
_maxSize
_sizeOfText
_paddingInsets
setExpressionNode:
removeObserver:
setCachedImage:
copyIntoContext:
requestRedraw
cachedImage
isActive
setActive:
isSelected
setSelected:
isHighlighted
setHighlighted:
neverShowsMenu
cachedImageScreenScale
setCachedImageScreenScale:
mActive
mSelected
mHighlighted
mNeverShowsMenu
mTextSize
mMenuRect
mCachedImage
mCachedImageScreenScale
mInInvalidate
p_removeCanvasReference
p_createCanvasReference
initWithContext:completionText:
setCompletionText:
setPrefixRange:
setReferenceColor:
setEditingReferenceNode:
tokenText
makeTokenReflectChoice:
completionText
prefixRange
renderAsTokenType
editingReferenceNode
canvasReferenceProvider
setCanvasReferenceProvider:
_renderAsTokenType
_completionText
_editingReferenceNode
_referenceColor
_canvasReferenceProvider
_prefixRange
initWithStroke:range:order:andPosition:
tokenWithStroke:range:order:andPosition:
_position
p_mergeStrokeRunsAtPosition:
p_appendStroke:inRange:order:
p_setStroke:inRange:order:
p_invalidateRange:
p_insertSpaceAtRange:
p_removeRange:
p_flattenStrokeOrder
_strokeRuns
_columnOrRowIndex
isEqualToPropertyMap:
initWithStyle:andPropertyMap:
setStyle:
setPropertyMap:
_style
_propertyMap
mapTableWithKeyOptions:valueOptions:
initWithStylesheet:
setStylesheet:
repairOrReplaceMap
setRepairOrReplaceMap:
variationMap
setVariationMap:
_repairOrReplaceLock
_variationLock
_stylesheet
_repairOrReplaceMap
_variationMap
addCellRange:
p_NumberOfColumnBuilds:
p_NumberOfRowBuilds:
p_NumberOfCellBuilds:
p_stageCountForProvider:withAnimationKind:
enabled
drawsBlackAndWhite
drawCellContent
newAnimationWithLayout:andDeliveryStyle:
newAnimationWithLayout:andCellRange:
deliveryStyleSupportedForExport:
setStage:andFinal:
cellRangeAtIndex:
cellRangeCount
clearCellRanges
drawTableName
drawTableBackground
drawCellBackground
clipStrokes
drawStrokes
isHidingContentOfCellID:
stageCount
stage
final
showsTableChrome
setShowsTableChrome:
showsOverlayLayers
setShowsOverlayLayers:
expandBackgroundFill
setExpandBackgroundFill:
setDrawsBlackAndWhite:
mKind
mCellRanges
mCellRangeCount
mStageCount
mStage
mFinal
mByColumn
mByRow
mByCell
mByContent
mByCellRange
mByMissingCellRange
mReverse
mShowsTableChrome
mShowsOverlayLayers
mExpandBackgroundFill
mDrawsBlackAndWhite
heightForString:textMeasurerBundle:width:outFitWidth:
widthForString:textMeasurerBundle:
initWithTextMeasurerBundle:
textMeasurerBundle
setTextMeasurerBundle:
_dupContentEntryToHeightCache
_dupContentEntryToWidthCache
_textMeasurerBundle
p_didReceiveMemoryWarning:
sharedApplication
addObserver:selector:name:object:
p_didEnterBackground:
canQuicklyMeasureParagraphStyle:
textMeasurerBundleForParagraphStyle:
fontInfoForTextStyle:
canQuicklyMeasureString:textMeasurerBundle:
cache
setCache:
propertyMapToTextStyleMap
setPropertyMapToTextStyleMap:
_resolvedTextStyleLock
_cache
_propertyMapToTextStyleMap
initWithTableUID:
wordFragmentsList
headerCoords
addHeaderWordFragments:atCoord:
_wordFragmentsList
_headerCoords
sortedArrayUsingSelector:
unpackEntryAfterUnarchive:
addChangedTile:
getNextPrecedentCoord:
setEntry:forPrecedentCoord:
initWithHeaderNameMgr:context:
lastFragment
setLastFragment:
firstFragment
setFirstFragment:
medianStringFromArray:
unpackAfterUnarchive:
fragmentEntryForString:createIfMissing:
splitTile
_tileLock
_firstFragment
_lastFragment
_nameFragmentToEntry
_headerNameMgr
namePrefixIndex
foldName:
wordFragmentsFromString:savePreserveFlags:
includesPrefixes
initWithHeaderNameMgr:limitToTableUID:
loadSubsetWithExactMatches:prefixMatches:
limitedToTableUID
setIncludesPrefixes:
originalFullReferenceString
_hnm
_limitedToTableUID
_includesPrefixes
_stringsInHeaderCells
_prefixStringsInHeaderCells
_originalFullReferenceString
setup
usedPrecedentCoord:
waitForQueueToDrain
splitRefPath:
trimmedStringWithPreserveFlag:
perTableEntryForTable:createIfMissing:
updateTrackedHeaders:checkForEmptyHeaders:
hasDisallowedHeaderIndexingForTableUID:
dirtySheetTableNameVolatileCells
fragmentEntryForNameFragmentPrecedent:
insertName:
findTileForString:findClosest:
findTileForString:findClosest:foundAtOffset:
handleFullTile:
p_updateWithWordFragments:atCellCoord:tableUID:
p_updateText:atCellCoord:tableUID:
insertFoldedName:
removeName:
markCellRefsAsDirty:
updateText:atCellCoord:tableUID:
refParser
p_willApplyCell:baseCellCoord:tableUID:
tileForEntry:
markCoordsDirty:inOwner:
columnUIDForViewColumnIndex:
updateWithIndexingChunks:
sheetTableNamePrecedentForTableUID:
enumerateNamesMatchingPrefix:block:
isClosing
p_processWorkForTable:
initWithContext:calcEngine:
setNRM_formulaOwnerUID:
endTrackingNamesInTable:
updateTrackedHeadersForDocumentLocaleChange:
nameFragmentPrecedentsForReferenceString:
numberOfTiles
headerNameMgrQueue
clearTextAtCellCoord:tableUID:
_weakCalcEngine
_headerNameMgrQueue
_nextPrecedentCoord
_allHeaderPerTablesPrecedent
_needsTileSplittingPrecedent
_nameFragmentTiles
_fragPrecedentToEntry
_fragPrecedentsUsedByCellRef
_perTableInfo
_headerPerTablePrecedentToTableUID
_namePrefixIndex
_tilesToConsiderSplitting
_isClosing
_nrm_ownerUID
_whitespaceToBreakAt
initWithContext:cellDiffArray:cellUIDList:uidBased:
initWithArray:context:
p_scanCellDiffArrayForCellBorderChanges:
p_scanCellDiffArrayForSuppressCustomFormatHandlingProperty:
addCellDiff:andCellUID:avoidCopy:
addCellDiff:andCellID:avoidCopy:
cellDiffArray
containsSuppressCustomFormatHandlingProperty
p_scanNSArrayOfDiffsForCellBorderChanges:
p_scanNSArrayOfDiffsForSuppressCustomFormatHandlingProperty:
addCellDiff:andCellUID:
enumerateElementsUsingBlock:
addCellDiff:andCellID:
enumerateCellIDElementsUsingBlock:
pruneCellDiffMapAgainstTable:behavior:usingBlock:
p_resolveCellIDsToUUIDsByTableInfo:
setCellDiffArray:
setContainsCellBorderChanges:
initWithContext:cellDiff:cellUIDList:
addCellDiffMap:
addCellDiffs:atCellUIDs:
appendCellDiffMap:
pruneCellDiffMapAgainstTable:behavior:
uuidBasedCellDiffMapByTableInfo:
cellDiffMapByIntersectingUIDs:inRows:
cellDiffMapByRemovingRows:
cellDiffMapByRemovingColumns:
setContainsSuppressCustomFormatHandlingProperty:
_containsSuppressCustomFormatHandlingProperty
_cellDiffArray
initWithBaseColumnIndex:direction:
direction
ruleByChangingBaseColumnIndexTo:
ruleByChangingDirectionTo:
_direction
initWithViewColumnIndex:direction:
ruleWithViewColumnIndex:direction:
viewColumnIndex
_viewColumnIndex
isEqualToCellValue:
initWithValues:
_groupValues
p_iterateCellsAndTerminateWithIterator:usingBlock:
cellIteratorWithRegion:flags:searchFlags:clampingRange:
frameWithViewScale:contentFrame:checked:outCheckboxImage:outCheckboxSize:
imageForScale:checked:outDrawingScale:
CGImageForSize:inContext:orContentsScaleProvider:
frameWithViewScale:contentFrame:
renderCheckbox:viewScale:intoContext:rect:color:
_set
height
isEqualToLayoutContentCachedKey:
descriptionWithObject:class:
addField:value:
addField:format:
descriptionString
mString
mWidth
mHeight
mParagraphStyle
mCellWraps
mValueType
mPaddingInsets
mWritingDirection
p_captureRowColumnInformation:columnRegion:rowRegion:
initWithMasterLayout:columnRegion:rowRegion:
numberOfIntersectingRows
applyResizeHeightFactor:
applyResizeWidthFactor:
enumerateRowHeightsUsingBlock:
enumerateColumnWidthsUsingBlock:
getMinimumRowHeight:
getMinimumColumnWidth:
initWithMasterLayout:columnRegion:
initWithMasterLayout:rowRegion:
initWithDynamicResizeInfo:
getRowInitialHeight:
getColumnInitialWidth:
getRowHeightResize:
getColumnWidthResize:
captureNewMinimumRowHeights:
totalCapturedRowHeights
totalCapturedColumnWidths
totalCurrentRowHeights
totalCurrentColumnWidths
totalMinimumRowHeights
totalMinimumColumnWidths
applyRowTotalHeight:
applyColumnTotalWidth:
capturedTableSize
mValid
mTableRowsBehavior
mRowRegion
mStartRowIndex
mNumberOfRows
mNumberOfResizableRows
mCapturedRowHeights
mCurrentRowHeights
mMinimumRowHeights
mCapturedRowHeightTotal
mColumnRegion
mStartColumnIndex
mNumberOfColumns
mNumberOfResizableColumns
mCapturedColumnWidths
mCurrentColumnWidths
mMinimumColumnWidths
mCapturedColumnWidthTotal
summaryMap
formulaSpecForStorageRef:
setBaseRow:
setBaseTile:
tempSummaryCell
p_searchSummaryVendorCell:searchFlags:
i_tileStartingAtOrBeforeRowIndex:outTileRange:
intersectsRow:
baseDataStore
baseMap
viewMap
searchMask
setSearchMask:
curRowIndex
setCurRowIndex:
isSummaryRow
setIsSummaryRow:
isLabelRow
setIsLabelRow:
setGroupLevel:
setUuid:
baseRowIndex
setBaseRowIndex:
baseTile
baseTileRange
setBaseTileRange:
baseRow
rightToLeft
setRightToLeft:
terminated
setTerminated:
populatedColumnsForGroupLevel1
setPopulatedColumnsForGroupLevel1:
populatedColumnsForGroupLevel2
setPopulatedColumnsForGroupLevel2:
populatedColumnsForGroupLevel3
setPopulatedColumnsForGroupLevel3:
populatedColumnsForGroupLevel4
setPopulatedColumnsForGroupLevel4:
populatedColumnsForGroupLevel5
setPopulatedColumnsForGroupLevel5:
viewColumnIndexesInCurrentRow
setViewColumnIndexesInCurrentRow:
_mapFromViewToBaseColumnInCurrentRow
_tempSummaryCell
_isSummaryRow
_isLabelRow
_rightToLeft
_terminated
_categoryColumnIndex
_curRowIndex
_baseRowIndex
_info
_baseDataStore
_baseMap
_viewMap
_summaryMap
_searchMask
_baseTile
_baseRow
_populatedColumnsForGroupLevel1
_populatedColumnsForGroupLevel2
_populatedColumnsForGroupLevel3
_populatedColumnsForGroupLevel4
_populatedColumnsForGroupLevel5
_viewColumnIndexesInCurrentRow
_uuid
_baseTileRange
drawableInfo
groupByUID
resetDependenciesForCell:
UIDForIndex:isRows:
UIDsForIndexes:isRows:
mutableIndexesForUIDs:isRows:
UIDsForRange:isRows:
UIDSetForRange:isRows:
changesWithPageNumber
attributeArrayForKind:
hyperlinkCellID
attributeArrayForKind:withCreate:
insertStorage:atCharIndex:dolcContext:undoTransaction:
variationOfCharacterStyle:paragraphStyle:propertyMap:
changesWithPageCount
setHyperlinkCellID:
nonUndoableAppendStoragePreservingEmphasis:
allCells
removeAllCells
isAbortedError
setError:forCell:
clearErrorForCell:
applyFormulaResult:context:hasWarnings:outWriteDidBeginOrEndWithTextCell:propagateCheckboxesAndRatings:
setCell:atCellID:
viewCellCoordForSummaryCellCoord:
initWithContext:storage:
initWithStorage:
setStorage:
mStorage
p_cellSpecForAggregateType:forColumnUID:atGroupLevel:
setHasCustomFormatsToPaste:
hasCustomFormatsToPaste
setTableInfoForGSSP:
runChange:withSummaryCellMap:migrationHelper:
cellUIDMap
_hasCustomFormatsToPaste
_cellUIDMap
initWithFormulaPredicate:
initWithLiteralTextType:string:argumentCellRef:hostCell:
initWithLiteralDateType:date1:date2:number1:number2:qualifier1:qualifier2:argumentCellRef:hostCell:
initWithLiteralDurationType:duration1:durationUnits1:duration2:durationUnits2:qualifier:argumentCellRef:hostCell:
initWithLiteralNumberType:number1:number2:qualifier:argumentCellRef:hostCell:
initRuleWhereValuesInTable:inBaseColumn:matchCell:
copyToUidFormForHiddenRowsWithTableInfo:
copyToGeometricFormForHiddenRowsWithTableInfo:containsBadRef:
evaluateAtCellID:inFormulaOwner:calcEngine:
foreachCellRef:
stringParam1
dateTimeParam1
durationParam1
upgradeTopAndBottom
ruleWithFormulaPredicate:
ruleWhereValuesInTable:inBaseColumn:matchCell:
copyByRewritingToUidFormWithTableInfo:
copyByRewritingToGeometricFormWithTableInfo:containsBadRef:
setDoesNotNeedFormulaRewriteForImport
matchesRow:withFormulaTableUID:withCalculationEngine:
matchesCell:
setPredicate:
doesNotNeedFormulaRewriteForImport
setDoesNotNeedFormulaRewriteForImport:
_doesNotNeedFormulaRewriteForImport
_predicate
removeRulesWithAbsoluteIndices:
filterSetType
filterCount
p_thresholdComparisonMatchesFilter:withPredicateType:
numberOfRulesInFilter:
objectsAtIndexes:
removeObjectsAtIndexes:
insertObjects:atIndexes:
p_addRules:atRuleIndices:inFilter:isNew:
filterAtIndex:inTable:
baseColumnIndicesForRulesInTable:
ruleInFilter:atIndex:
canAddRules
newFilterIndex
removeRulesWithIndices:inFilter:
removeRulesForBaseColumnIndices:withTableInfo:
addRules:inFilter:
replaceRule:atRuleIndex:inFilter:
enumerateFilterIndicesInTable:usingBlock:
enumerateFiltersForColumn:withTable:usingBlock:
enumerateRulesInFilterIndex:usingBlock:
filterIndicesForBaseColumn:inTable:
firstFilterIndexForBaseColumn:inTable:
ruleIndexInFilter:matchingCell:
absoluteRuleIndicesForColumn:inTable:
viewColumnIndicesForRulesInTable:
_needsFormulaRewriteForImport
_filterOffsets
p_clearDerivedVariables
p_isEqualForNonFormulaItems:
predicateArg1atBaseHostCoord:calcEngine:
predicateArg2atBaseHostCoord:calcEngine:
p_creatorForPeriodBoundaryWithScale:direction:offset:argIndex:earlierBound:isCalPers:hostCell:calcEngine:
initWithPredicateType:arg1:arg2:qualifier1:qualifier2:argumentCellRef:hostCell:calcEngine:forConditionalStyle:
initWithPredicateType:arg1:arg2:qualifier1:qualifier2:argumentCellRef:hostCell:calcEngine:
defaultPredicateForType:argumentCellRef:hostCell:
initWithLiteralDateType:date1:date2:number1:number2:qualifier1:qualifier2:argumentCellRef:hostCell:forConditionalStyle:
p_setPredicateType:
p_setQualifier1:
p_setQualifier2:
p_setParamIndex0:
p_setParamIndex1:
p_setParamIndex2:
copyToUidFormWithRewriteContext:
crossTableRefParam0
crossTableRefParam1
crossTableRefParam2
nodeTag0
p_argTypeForNodeTag:argNum:calculationEngine:hostCell:
nodeTag1
nodeTag2
p_testDataTypesForArg0:arg1:arg2:predShouldReturn:
formulaOwnerUIDForSubOwnerID:
p_populateMembersFromFormula
setPredArg1:
setPredArg2:
lock
updatedCellRefForOriginalCellRef:
convertFormulaFromBaseToChromeForCategorizedTableMove:calcEngine:containingCell:rewriteSpec:
convertFormulaFromChromeToBaseForCategorizedTableMove:calcEngine:containingCell:rewriteSpec:
rewriteType
qualifier2
copyByUpgradingToLinkedRefForTable:hostCell:
defaultPredicateForType:argumentCellReference:hostCell:
isThresholdNeededForType:
predArg1
predArg2
isEqualForInspector:atHostCoordinate:
initWithPredicateType:arg1:arg2:qualifier1:qualifier2:argumentCellReference:hostCell:calcEngine:forConditionalStyle:
copyToUidFormForConditionalStylesWithTableInfo:containingCell:preserveHostCell:
setHostCell:hostColumnUID:hostRowUID:
getPrecedents:calcEngine:hostOwnerUID:hostCellID:
evaluateAtCellID:onSubOwnerID:calcEngine:
p_setArgumentAt:nodeTag:withDouble:
p_setArgumentAt:nodeTag:withString:
p_setArgumentAt:nodeTag:withDate:
p_setArgumentAt:nodeTag:withDurationValue:withUnit:
p_setArgumentAt:nodeTag:withCrossTableRef:
p_setArgumentAt:nodeTag:withUIDRectRef:
p_setArgumentAt:nodeTag:withCategoryRef:
numberParam2
dateTimeParam2
durationParam2
copyByConvertingBaseToChrome:inOwner:inCellCoordinate:
copyByConvertingChromeToBase:inOwner:inCellCoordinate:
copyByRewritingWithSpec:inOwner:inCellCoordinate:
copyByOffsettingRelativeReferencesWithOffset:
copyByUpdatingLinkedTable:hostCell:
iterateFormulasWithContext:shouldStop:block:
mFormula
mPredicateType
mQualifier1
mQualifier2
mArgIndex0
mArgIndex1
mArgIndex2
mParamsAreDone
mNodeTag0
mNodeTag1
mNodeTag2
mNumberParam1
mNumberParam2
mStringParam1
mDateTimeParam1
mDateTimeParam2
mDurationParam1
mDurationParam2
_crossTableRefParam0
_crossTableRefParam1
_crossTableRefParam2
mPredArg1
mPredArg2
mPopulateMembersLock
mStrokeSelection
imageNamed:
beginCheckboxCell:
endCheckboxCell
beginRatingCell:
CGColor
endRatingCell
showsCellOverflowIndicator
bezierPathWithLegacyRoundedRect:cornerRadius:
CGPath
colorWithAlphaComponent:
setBadgeType:
setFrame:
badgeType
badgeWithType:color:viewScale:frame:
drawInContext:
_badgeType
_color
_frame
beginTableChunk:
endTableChunk:
beginTableNameForChunk:
endTableNameForChunk:
beginTableLayoutSpace:
endTableLayoutSpace:
beginTableRow:
endTableRow:
beginTableCell:withCellID:cellHasContents:cellIsPrimary:
endTableCell:withCellID:cellHasContents:cellIsPrimary:
showsCellWarningIndicator
p_calculateAncillaryInformation
p_insertRangeIntoRegion:
regionFromCellMap:withTableInfo:passingTest:
regionFromViewCellRectVector:
cellRanges
p_copy
region:subtractingRange:
region:subtractingRowIndexes:
region:subtractingColumnIndexes:
region:intersectingRange:
unionEveryRangeInRegion:withRange:
region:subtractingRegion:
region:intersectingRegion:
regionByRemovingRows:
regionByRemovingColumns:
isIdentityMapping
mapIndex:
regionByAddingRows:
regionByAddingColumns:
tsu_indexSetByIntersectingWithRange:
prunedCellRegionAgainstTable:behavior:usingBlock:
numberWithBool:
p_copyFromRegion:
initWithCellRegion:
regionFromCellDiffMap:withTableInfo:
regionFromCellUIDVector:withTableInfo:
regionFromOverlappingCellRangeVector:
regionFromModelMergeList:
regionFromMergeActionArray:withTableInfo:
regionFillingColumnsFromRegion:
regionFromPropertyListRepresentation:
regionByCollapsingRangesForRemovedRows:
regionByCollapsingRangesForRemovedColumns:
regionByApplyingRowMapping:
regionUpToColumnIndex:
regionUpToColumnIndexRtoL:maxColumnIndex:
regionAfterColumnIndex:
regionAfterColumnIndexRtoL:
regionUpToRowIndex:
regionAfterRowIndex:
propertyListRepresentation
largestRangeContainingCellID:
partiallyIntersectsCellRange:
isSingleCellWideOrHigh:
newBottomToTopIterator
enumerateColumnsInReverseUsingBlock:
enumerateRowsInReverseUsingBlock:
enumerateInDirection:usingBlock:
enumerateGridColumnsUsingBlock:
enumerateGridRowsUsingBlock:
setBoundingCellRange:
setCellCount:
setFirstCellID:
setLastCellID:
setIntersectingColumnsIndexSet:
setIntersectingRowsIndexSet:
_cellRanges
_boundingCellRange
_intersectingColumnsIndexSet
_intersectingRowsIndexSet
_firstCellID
_lastCellID
regionByAddingModelCellRegion:
boundingViewCellRect
regionByAddingViewCellRect:
regionBySubtractingViewCellRect:
regionByAddingViewCellRegion:
regionBySubtractingViewCellRegion:
enumerateViewCellRectsUsingBlock:
p_addRange:calculateAncillaryInfo:
getBytes:length:
fillCellRangeRowMajorSet:leftToRight:
mCellRangeSet
mCellID
mBoundingCellRange
fillCellRangeColMajorSet:topToBottom:
viewRowIndexForChromeRowIndex:
viewCellCoordForChromeCellCoord:
viewCellCoordForBaseCellCoord:
chromeCellCoordForViewCellCoord:
viewCellRefForBaseCellRef:
chromeCellRefForViewCellRef:
viewRangeRefForChromeRangeRef:
chromeCellRefForBaseCellRef:
viewCellRefForChromeCellRef:
baseCellRefForViewCellRef:
columnUIDsForBaseColumnIndexes:
rowUIDsForBaseRowIndexes:
baseColumnIndexesForUIDs:
baseColumnIndexesForViewColumnIndexes:
baseRowIndexesForViewRowIndexes:
viewColumnGridIndexesForBaseColumnGridIndexes:
baseCellCoordForChromeCellCoord:
baseColumnIndexForChromeColumnIndex:
chromeRowIndexForBaseRowIndex:
chromeColumnIndexForBaseColumnIndex:
viewColumnIndexForColumnUID:
metadataForRowIndex:
metadataForColumnIndex:
baseCellCoordForCellUID:
cellUIDforBaseCellCoord:
cellUIDForSummaryCellCoord:
viewCellCoordForCellUID:
baseCellRegionForUIDRange:
baseCellRegionForViewCellRect:
baseShuffleMapForViewShuffleMap:
summaryColumnIndexForViewColumnIndex:
cellAtGroupLevel:columnUID:
forceGroupingChangeReset
resetViewMapAndNotify
_baseTableModel
_coordMapper
mergedStrokes
setMergedStrokes:
_mergedStrokes
formatOfType:allowMismatchedSpare:
formatStruct
formatFromTSUFormatStruct:
p_setFormatExplicit:fromCellFormatKind:setMostRecentlySet:
lastIdentifierComponent
fullIdentifier
lastComponentWithWhitespaceAppended
componentCount
localizedStringIsTrue:
localizedStringIsFalse:
initWithContextResolver:
boundingRange
identifierComponents
initWithContextResolver:components:
initWithComponents:aggregateFunction:
trimmedStringStartingAtWord:withPreserveFlags:
addIdentifierComponent:
appendToLastComponent:
_components
_aggregateFunction
_hidingState
_numberOfCells
_size
setDimensions:
initWithPredicate:cellStyle:textStyle:
isEqualToStyle:ignoreObjectUUID:
conditionalStyleRuleWithRule:
isEqualForInspector:
privateCellStyle
privateTextStyle
setCellStyle:textStyle:
evaluateFormulaAtCellID:withCalcEngine:onSubOwnerID:
predicateDescription
copyByUpdatingHostCellRef:
initWithContext:rules:
ownerKindForOwnerUID:
setAllowsMissingPropertiesWithNoParentStyleForUpgrade:
initWithConditionalStyleSet:
iterateFormulasWithContext:block:
copyByReparenting:groupByUID:rewriteContext:
copyByResolvingRelativeAncestorsWithRewriteContext:
precedentsWithCalcEngine:hostOwnerUID:hostCellID:
rulesDescription
currentRules
_conditionalStyleSetRules
mMutableIndexSet
formulaCoordsInRange:inOwner:
removeFormulaAtCellID:
addFormulaForConditionalStyle:atCellID:
addCellCoordinate:
checkConditionForCellID:withConditionalStyle:withIndex:
removeAllCellCoordinates
allCondStyleFormulasForTable:
changedConditionForCellID:
subOwnerID
_planeUID
_cellsToInvalidate
_subOwnerID
p_applyUnifyResizeFactor:region:direction:totalOfCaptured:count:capturedArray:currentArray:minimumArray:
p_applyUnifyFixedSize:region:direction:count:currentArray:minimumArray:
applyFixedHeight:
applyFixedWidth:
targetWidth
targetHeight
mTargetWidth
mTargetHeight
translationFlags
copyByConvertingColonToColonTract:
astNodeArrayCopy
initWithNodeArray:translationFlags:
coordMapperForTableUID:calcEngine:
srcCoordMapper
relativeBoundingRangeWithContainingCell:
relativeColumns
relativeRows
tableRangeForTable:calcEngine:
intersectWithCellRectIgnoringSpanning:
p_applyAccordionResizeFactor:region:direction:totalOfCaptured:count:capturedArray:currentArray:minimumArray:
heightFactor
widthFactor
_heightFactor
_widthFactor
labelRowUIDSet
orderedRowUidsWithLabels
initWithTableInfo:rowUids:
copyWithContext:tableInfo:
targetGroupFromRowIndex:minSourceLevel:templateRowUID:
minimumCategoryLevelInRowRange:
rowOrder
setTemporaryRowOrder:
setRowOrderUsingViewOrder
insertRowUids:beforeUid:
groupUidsGivenRowUids:selectedLevels:
uidMap
setUidMap:
isRowOrderTemporary
setIsRowOrderTemporary:
_isRowOrderTemporary
_uidMap
reducedSetMinusUuidsFromVector:
p_tgtRangeFromPbRange:andMap:
p_tgtRangeForPbRange:givenColumnMaps:rowMaps:
p_indexForTgtToPbMaps:andMap:
p_tgtCellIDForPbCellID:givenColumnMaps:rowMaps:
pbRangeForTgtRange:
pbCellIDForTgtCellID:
p_tgtRangesForPbRange:givenColumnMaps:rowMaps:
initWithPbRange:tgtRange:
initWithPbTable:pbRange:tgtTable:tgtRange:flag:
createTgtRegionFromPbRegion:
createTgtRegionByIntersectingPbRegion:andTgtRegion:
createTgtMergeMapFromPbMergeMap:andTgtRegion:andTgtBodyRange:
mRowTgtToPbMaps
mColumnTgtToPbMaps
reorganizeValueAtIndex:
reorganizeValues
setReorganizeValues:
_reorganizeValues
component:fromDate:
components:fromDate:
setValue:forComponent:
month
year
setDay:
rangeOfUnit:inUnit:forDate:
weekday
tsce_weekNumberForType:
setMonth:
dateFromComponents:
groupingComboForGroupingType:
changesPerColumnMapToBeInGroup:
p_setCell:groupingCellPlan:groupValue:toGroup:templateCell:
p_cellDiffForFinishedCell:
p_setCell:groupingTypeCombo:groupingCellValue:toBeInGroup:
p_setCell:forUniqueGroupingTypeWithGroupColumnValue:toBeInGroup:
p_setCell:forYearGroupingTypeWithGroupColumnValue:toBeInGroup:
p_setCell:forYearQuarterGroupingTypeWithGroupColumnValue:toBeInGroup:
p_setCell:forMonthGroupingTypeWithGroupColumnValue:toBeInGroup:
p_setCell:forYearWeekGroupingTypeWithGroupColumnValue:toBeInGroup:
p_setCell:forDayOfWeekGroupingTypeWithGroupColumnValue:toBeInGroup:
p_setCell:forDayGroupingTypeWithGroupColumnValue:toBeInGroup:
copyValueAndFormatToCell:
applyFormulaResult:
setYear:
initWithCalendarIdentifier:
timeZoneWithName:
setTimeZone:
defaultDateForGrouping
p_dateBySettingUnit:value:ofDate:inCalendar:
ordinalityOfUnit:inUnit:forDate:
changeCell:atCellUID:toBeInGroup:
changeCellDiffMapToMoveRows:toGroup:templateRowUID:
cellDiffForCell:applyingGroupCellValue:groupingType:toBeInGroup:
tsu_resourcesBundle
metadata
migratedStyleForStyle:
metadataWithUid:
migrateStylesToDocument:
_columnRowUID
_hidingAction
_definedCellStyle
_definedTextStyle
minCursorCellID
setMinCursorCellID:
cursorCellIDs
setCursorCellIDs:
iterators
setIterators:
_minCursorCellID
_iterators
_cursorCellIDs
sortedArrayUsingComparator:
initWithStartIndex:endIndex:
mapping
mappingSize
startIndex
dirtyCellsForRowRange:fromTable:tableRange:
removeFormulasAt:
mappingFromRowUids:toRowUids:
mappingForSortWithRules:inRows:
rearrangeWithMapping:
changeDescriptorsForReorganizingFromRowUids:toRowUids:
rank
localizedCaseInsensitiveCompare:toString:
withinGroupingChangesBatch
setSummaryRowIndexes:
p_buildLabelRowIndexSet
threadCollector
registerChange:details:forChangeSource:
initWithTableUID:summaryAndLabelRows:
mapBaseRow:toViewRow:
p_applyViewCellCoord:toSummaryUsingBlock:toLabelUsingBlock:toCategoryColumnUsingBlock:toBaseUsingBlock:
p_applyViewRowIndex:toSummaryUsingBlock:toLabelUsingBlock:toBaseUsingBlock:toBeyondBoundsUsingBlock:
p_applyViewColumnIndex:toCategoryColumnUsingBlock:toBaseUsingBlock:toBeyondBoundsUsingBlock:
summaryRowIndexForViewRowIndex:
decimalPlaces
initWithTrueString:falseString:
groupingTypeIsAnyDateType:
summaryCellCoordForViewCellCoord:
setByAddingObjectsFromSet:
setByUnionWithSet:
isSubsetOf:
suspendChangeDescriptorNotificationsDuringBlock:
setCellStyle:atCellID:
setTextStyle:atCellID:
summaryCellCoordForCellUID:
baseCoordFromViewCoord:
aggCoordFromViewCoord:
setLabelRowIndexes:
summaryAndLabelRowIndexes
setSummaryAndLabelRowIndexes:
suspendNotify
setSuspendNotify:
_groupingsChangingLevel
_sawGroupingChangeNeedingReset
_suspendNotify
_summaryRowIndexes
_labelRowIndexes
_summaryAndLabelRowIndexes
visible
setVisible:
hidden
setHidden:
userVisible
setUserVisible:
userHidden
setUserHidden:
_visible
_hidden
_userVisible
_userHidden
rowMarkIndex
setRowMarkIndex:
tsu_enumerateRangesConcurrentlyUsingBeginBlock:concurrentBlock:finalBlock:
previousNthVisibleRow:fromRowIndex:
previousNthVisibleColumn:fromColumnIndex:
visibleCellOffsetBy:fromCellID:
userVisibleRowIndices
rowsVisible
setRowsVisible:
rowsUserVisible
setRowsUserVisible:
rowsInvalid
setRowsInvalid:
columnsVisible
setColumnsVisible:
columnsInvalid
setColumnsInvalid:
_rowsVisible
_rowsUserVisible
_rowsInvalid
_rowMarkIndex
_columnsVisible
_columnsInvalid
tswp_spaceCharacterSet
removeCharactersInString:
tswp_smartSingleQuotesCharacterSet
stringByReplacingCharactersInRange:withString:
asDateTimeFormat
automaticMaxAndMinDurationUnitsForTimeInterval:
defaultDecimalPlacesForCurrencyCode:
appliedConditionKey
conditionalFormatDataForKey:
currencyCodeIndex
currencyCodeForCurrencySymbol:
asBaseFormat
base
baseUseMinusSign
groupingSeparator
defaultHexadecimalFormat
usesLimitedAutomaticFormatParsing
supportsFormulaEditing
decimalSeparator
setCurrencyOrNumberDoubleValue:
cellValueFromCell:locale:
coerceToFormatType:
coerceToBaseFormat:
coerceTextCellToBestNumberFormatUsingLimitedParsing:
coerceCellToFormatTypeUsingSpares:
replaceContentWithParsableString:tableInfo:cellID:flags:outControlWasRemoved:
propertySetByAddingProperty:
initWithModel:region:flags:searchMask:
p_setupTileAndRowAtCellID:
setCurRow:
setCurTile:
i_tileStartingAtOrAfterRowIndex:outTileRange:
curTile
curTileRange
setCurTileRange:
curRow
_curTile
_curRow
_curTileRange
tsk_phoneUI
wantsSelectionAtPoint:
rendererForAttachment
baselineOffset
drawAttachment:inContext:selection:
boxedDefaultValueForProperty:
defaultStyleWithDefaultPropertiesInContext:
mTableNameSelection
setFunctorForType
initWithColumnUid:groupingType:
p_groupingFormatWithLocale:
stringForYearType
stringForMonthType
stringForDayOfWeekType
stringForDayType
stringForYearWeekType
stringForYearQuarterType
stringForUniqueType
stringForGroupingType:
initWithColumnIndex:groupingType:inTableInfo:
groupingFunctor
_groupingColumnUid
_groupingType
_groupingFunctor
_groupingFormat
_groupingFormatComputed
_docLocale
isMoveRewriteType:
initWithCalcEngine:rewriteSpec:
convertFromBaseToChromeForCategorizedTableMove:containingCell:
convertFromChromeToBaseForCategorizedTableMove:containingCell:
rewriteSpecBaseToChrome
coordMapper
regionMovedInfo
srcTableUID
srcColumnUids
srcRowUids
dstColumnUids
dstRowUids
uids
dstTableUID
setRewriteSpecBaseToChrome:
setCoordMapper:
rewriteSpecChromeToBase
setRewriteSpecChromeToBase:
finalDstTableUID
rewriteSpec
_rewriteSpecBaseToChrome
_rewriteSpecChromeToBase
_rewriteSpec
hiddenStateForRowsOwnerUid
setNextHiddenStateForRowsOwnerUid:
hiddenStateForColumnsOwnerUid
setNextHiddenStateForColumnsOwnerUid:
conditionalStyleOwnerUID
setNextConditionalStyleOwnerUID:
mergeOwnerUID
setNextMergeOwnerUID:
pencilAnnotationOwnerUID
setNextPencilAnnotationOwnerUID:
categoryOwnerUID
setNextCategoryOwnerUID:
sortRuleReferenceTrackerOwnerUID
setNextSortRuleReferenceTrackerOwnerUID:
categoryAggregatesOwnerUid
setNextCategoryAggregatesOwnerUid:
setNextGroupByUid:
setNewFormulaOwnerUIDsForDuplicatesWithCalcEngine:
cellCoordinatesNeedingExcelImportForTable:
tablesByName
addTable:
firstUnidentifiedRootStyleOfClass:withOverridePropertyMap:
isNotReadyError
updateCalculatedPrecedents:forFormula:atCellRef:withState:
underlyingDecimalValue
corruptCellRefs
formulaOwnerUIDForInternalFormulaOwnerID:
ownerKindForOwnerID:
resetCorruptCellRefs:
hasRunRecalculationALongTime
requestAutosaveForExpensiveCalculation
clearRecalculationTimer
setDontClearBackground:
pattern
patternType
emptyPattern
initWithColor:width:cap:join:pattern:
isEqualToStroke:
portalStroke
cppCalcEngine
badReferenceError
raiseErrorForInvalidReference
raiseInvalidRangeUsageErrorForReference:
invalidMergeReference:contextEntityUID:
raiseException
invalidReferenceError
newTableResolverForResolver:
mapOwnerUID:
valuesForCategoryRef:atRowUid:error:
resolverContainerMatchingName:inDocumentRoot:
resolverMatchingName:inDocumentRoot:contextResolver:
resolverMatchingNameWithContextContainer:inDocumentRoot:contextContainerName:
p_warningSetForFormulaWarningType:originalFormula:supplementaryText:
warningSetForCondFormatAboveAvgEqualAvg
warningSetForCondFormatAboveAvgStdDev
warningSetForCondFormatComplexFormula
warningSetForCondFormatContainsErrors
warningSetForCondFormatExpr
warningSetForCondFormatNotContainsErrors
warningSetForCondFormatParamatersNotAllTheSame
warningSetForCondFormatStopIfTrue
warningSetForCondFormatUnsupportedOperator
warningSetForCondFormatUnsupportedStyling
warningSetForCondFormatUnsupportedTimePeriod
warningSetForUnsupportedCondFormat
warningSetForDurationFormatRangeChanged
warningSetForUnsupportedDataFormat:
emptyWarningSet
TSTImportFormulaWarningTypeFromArchive:
p_isPersistedWithFormulaWarningTypeEnumeration
TSTImportFormulaWarningTypeToArchive
descriptionWithObject:
localizedWarningStrings
addFieldValue:
warningSetFor3DReferenceFormula:
warningSetForArrayedFormula:
warningSetForDifferentBehaviorForFunctionFormula:originalFormula:
warningSetForErrorTokenFormula:
warningSetForExternalReferenceFormula:
warningSetForNaturalLanguageFormula:
warningSetForReferenceOutOfBoundsFormula:
warningSetForSharedFormulaBaseNotFoundFormula:
warningSetForUnknownName:originalFormula:
warningSetForUnsupportedFormula:
warningSetForUnsupportedFunction:originalFormula:
warningSetForUnsupportedNameFormula:originalFormula:
warningSetForTransposedWithoutIssues:
warningSetForTransposedWithIssues:
warningSetForTransposeUnmodifiedWithIssues
warningSetForFilteredColumnFormulaNotCopied
cellDiffClearingAllWarningsWithContext:
areAnySet
individualWarnings
warningSetByAddingWarningsFromSet:
cellDiffClearingWarningsWithContext:
warningSetByRemovingWarningsFromSet:
_cellWarning
_originalDataFormat
_formulaWarning
addWarning:atCellRef:
cellRefForIndex:
warningSetAtCellRef:
_warningSetForCoordinate
_coordinates
setFunctionIndex:
mFunctionIndex
initWithColumnIndex:trackedReference:
trackedReference
setTrackedReference:
_trackedReference
isEqualToChoices:
p_mcListTypeForArgType:
p_mcListTypeOfListItem:
booleanValue
p_listItemAtIndex:
p_numberForListItem:
p_stringForListItem:
p_dateForListItem:
p_booleanForListItem:
loadFromArchive:
initWithItems:context:
tsu_stringWithoutAttachmentCharacters
p_appendChoices:uniquelyToChoices:
p_PopUpMenuModelDefaultWithContext:locale:
p_cellValueFromCellWithCustomFormat:locale:
popupMenuModelFromTable:region:initialValue:overflow:
popupMenuModelDeletingItemFromModel:index:
popupMenuModelEditingItemInModel:index:newContent:
popupMenuModelReorderingModel:fromIndex:toIndex:
valueTypeOfItemAtIndex:
numberAtIndex:
stringAtIndex:
dateAtIndex:
booleanAtIndex:
formatAtIndex:
popUpItemFromNumber:format:
popUpItemFromBoolean:
popUpItemFromString:
popUpItemFromDate:format:
_items
containsPasteboardTypes:
fromExcelDataSource
fromIWorkSageDataSource
initWithRefCount:
loadFromArchive:unarchiver:completion:
p_sharedInitWithRefCount:key:
estimateByteSize
objectWithRefCount:
sharedLoadFromArchive:
dropReference
addReferencesFromObject:
_payload
_key
_refCount
_byteSizeForArchiving
objectWithCommentStorage:refCount:
objectWithConditionalStyleSet:refCount:
initObjectWithCustomFormat:refCount:
formatName
objectWithCustomFormat:refCount:
p_setUpFormat:
asLegacyCustomFormat
objectWithFormat:refCount:
objectWithCellSpec:refCount:
objectWithFormulaError:refCount:
objectWithImportWarningSet:refCount:
objectWithPopUpMenuModel:refCount:
richTextPayload
objectWithRichTextPayload:refCount:
objectWithString:refCount:
_shouldWrap
objectWithStyle:refCount:
applyBlockToAllCells:
_cellsByCoord
_temporaryObjectContextDelegate
_temporaryContext
unsignedLongLongValue
removeObjectsForKeys:
performSyncWriteWithUnderlyingDictionary:
invalidateObjectsWithKeysInCellRange:
resolveDataListKeysForCell:suppressTransmutation:sourceStorageVersion:
noRuleConditionalStyleSetWithContext:
initWithCommentStorage:
conditionalFormatDataForValue:outKey:
valueRepresentsDateWithoutTime
gregorianCalendarLocale
startOfDayForDate:
isDrawable
enumerateAttachmentsInTextRange:usingBlock:
supportsStockUI
currencyCodeForUnit:
basePlaces
initWithBase:basePlaces:baseUseMinusSign:
copyPersistedWithContext:
hyperlinkStyle
smartFieldKind
enumerateSmartFieldsWithAttributeKind:inRange:usingBlock:
p_formatOfCellFormatKind:create:created:
_validateCustomFormatWrapper:
p_formatTypeIsANumberFormatTypeForMostRecentlySet:
p_clearFormatOfCellFormatKind:
p_cellFormatKindForValueType:
p_TSTCellSetMostRecentlySetNumberFormatWithCurrencyFlag:
p_hasExplicitFormatOfCellFormatKind:
formatType:isSameCellFormatKindAs:allowNumberCurrencyMismatch:
p_mismatchBetweenValueType:andCellFormatKind:
setRank:
setCurrencyOrNumberDecimalValue:
hasContentBreakingMergeFragment
hasStockFormulaForStockUI
setCurrentFormat:isExplicit:forExcel:
candidateFormatForSliderStepperControlWithIsCurrent:
setFormatID:forStorageFlag:
formatForStorageFlag:
hasAnyWarning
_valueBigNumber
_controlCellSpecID
_textFormatID
_booleanFormatID
styleDataList
richTextDataList
formulaErrorDataList
decrementColumnCellCount:byAmount:
p_updateNumberOfPopulatedCells
conditionalStyleSetDataList
commentStorageDataList
stringDataList
formatDataList
formulaDataList
importWarningSetDataList
controlCellSpecDataList
upgrading
multipleChoiceListFormatDataList
preBNCFormatDataList
assertIsNotIterating
p_preBNCKeysForCell:atCellID:
incrementCellCountsAtCellID:
decrementCellCountsAtCellID:
p_preBNCKeysForCell:oldPreBNCStorageRef:callWillModify:
p_updatePreBNCDataListsForCurrentFormat:numberFormat:currencyFormat:dateFormat:durationFormat:baseFormat:customFormat:stepperSliderFormat:mcListFormat:oldPreBNCStorageRef:callWillModify:
populatedCustomFormatWrapperFromCFWrapper:customFormat:
isMarkedCorrupt
p_stashBadKey:forList:
p_preBNCpopulatedCustomFormat:value:
p_populatedMultipleChoiceListFormat:
p_clearDataListEntriesForStorageRef:cellID:
p_clearDataListEntriesInRange:
enumerateKeysAndValuesUsingBlock:
p_loadDatalist:forLazyReference:completionBlock:
p_loadDatalist:forLazyReference:
p_makeALazyDatalistOfType:isNewForBNC:
initWithObject:
p_makeALazyDatalistOfType:
removeCustomFormatForKey:
p_pasteboardCustomFormatList
p_pasteboardCustomFormatMap
remapCustomFormatKeysWithOldToNewKeyMap:
_needToUpgradeCellStorage
p_cellMapForUpgradingToBraveNewCell
tsu_enumerateKeysAndObjectsUsingBlock:
cellCountOfRowAtIndex:
cellCountOfColumnAtIndex:
addPasteboardCustomFormatFromCell:
setupEmptyPasteboardCustomFormatList
beginIteration
endIteration
copyWithOwner:
pasteboardCustomFormatList
setPasteboardCustomFormatList:
tileStorage
setTileStorage:
rowHeaderStorage
setRowHeaderStorage:
columnHeaderStorage
setColumnHeaderStorage:
styleTableReference
setStyleTableReference:
conditionalStyleSetTableReference
setConditionalStyleSetTableReference:
stringTableReference
setStringTableReference:
formulaTableReference
setFormulaTableReference:
controlCellSpecTableReference
setControlCellSpecTableReference:
formulaErrorTableReference
setFormulaErrorTableReference:
richTextTableReference
setRichTextTableReference:
formatTableReference
setFormatTableReference:
commentStorageTableReference
setCommentStorageTableReference:
importWarningSetTableReference
setImportWarningSetTableReference:
preBNCFormatTableReference
setPreBNCFormatTableReference:
pasteboardCustomFormatMap
setPasteboardCustomFormatMap:
mergedCellRanges
setMergedCellRanges:
cellCountValid
setCellCountValid:
storageVersionPreBNC
setStorageVersionPreBNC:
missingPostBNCDatalists
setMissingPostBNCDatalists:
_iteratorRunningCount
_styleDataList
_conditionalStyleSetDataList
_stringDataList
_formulaDataList
_controlCellSpecDataList
_formulaErrorDataList
_richTextDataList
_formatDataList
_commentStorageDataList
_importWarningSetDataList
_preBNCFormatDataList
_foundABadDatalistKey
_upgrading
_cellCountValid
_storageVersionPreBNC
_missingPostBNCDatalists
_pasteboardCustomFormatList
_tileStorage
_rowHeaderStorage
_columnHeaderStorage
_styleTableReference
_conditionalStyleSetTableReference
_stringTableReference
_formulaTableReference
_controlCellSpecTableReference
_formulaErrorTableReference
_richTextTableReference
_formatTableReference
_commentStorageTableReference
_importWarningSetTableReference
_preBNCFormatTableReference
_multipleChoiceListFormatDataList
_pasteboardCustomFormatMap
_mergedCellRanges
_rank
_doubleValue
inset
reoriginToZero
setTransform:
setInset:
setReoriginToZero:
_reoriginToZero
_inset
_transform
p_updateAnnotationUUID
initWithStorage:forTableInfo:cellUID:
setAnnotationUUID:
author
copyWithAuthor:
creationDate
text
isInDocument
isFloatingComment
annotationUUID
annotationType
setAuthor:
annotationDisplayStringType
isHighlight
viewCellCoord
baseCellCoord
_annotationUUID
resetSharedTableConfiguration
supportsExpandedTables
setMaxNumberOfRows:
setMaxNumberOfColumns:
setMaxNumberOfPopulatedCells:
supportsContainedTextEditing
setSupportsContainedTextEditing:
showsCellEditingToolbar
setShowsCellEditingToolbar:
supportsAutomaticNumberKeyboard
setSupportsAutomaticNumberKeyboard:
beginEditingOnSingleTap
setBeginEditingOnSingleTap:
supportsMergedCells
setSupportsMergedCells:
supportsHiddenCells
setSupportsHiddenCells:
returnWhileEditingNavigates
setReturnWhileEditingNavigates:
tabWhileEditingNavigates
setTabWhileEditingNavigates:
continuesEditingAfterNavigation
setContinuesEditingAfterNavigation:
arrowKeyAtEdgeWhileEditingNavigates
setArrowKeyAtEdgeWhileEditingNavigates:
arrowKeysWrap
setArrowKeysWrap:
arrowKeysNavigateWhenEditingBeganByTyping
setArrowKeysNavigateWhenEditingBeganByTyping:
backTabWraps
setBackTabWraps:
tabAtEdgeAddsRow
setTabAtEdgeAddsRow:
tabAtEdgeAddsColumn
setTabAtEdgeAddsColumn:
pastesTile
setPastesTile:
allowHorizontalAutoresize
setAllowHorizontalAutoresize:
selectsCellOnInitialTap
setSelectsCellOnInitialTap:
dragByHandleOnly
setDragByHandleOnly:
cornersCanDragResize
setCornersCanDragResize:
setSupportsControlCells:
controlCellUIAlwaysVisible
setControlCellUIAlwaysVisible:
supportsActionMenu
setSupportsActionMenu:
hasLargerFonts
setHasLargerFonts:
setSupportsFrozenHeaders:
setSupportsAutoResizedTables:
supportsCreateChartFromSelection
setSupportsCreateChartFromSelection:
selectionUsesBezierPath
setSelectionUsesBezierPath:
usesWholeChromeResizer
setUsesWholeChromeResizer:
showsChromeWhileEditingCell
setShowsChromeWhileEditingCell:
showsSelectionKnobsWhileEditingCell
setShowsSelectionKnobsWhileEditingCell:
setShowsCellWarningIndicator:
supportsCanvasReferenceEditing
setSupportsCanvasReferenceEditing:
setUsesLimitedAutomaticFormatParsing:
setSupportsFormulaEditing:
supportsImplicitEditing
setSupportsImplicitEditing:
allowFreeformFormulaText
setAllowFreeformFormulaText:
allowWhitespaceInFormulas
setAllowWhitespaceInFormulas:
showsHideUnhideUI
setShowsHideUnhideUI:
exportPermanentHidingState
setExportPermanentHidingState:
setShowsCellOverflowIndicator:
supportsAutofill
setSupportsAutofill:
usesLimitedNumberFormatInspector
setUsesLimitedNumberFormatInspector:
setHeadersFrozenByDefault:
setCreateLargeDefaultTables:
setTableNameEnabledInNewTables:
supportsRowColumnAdderKnob
setSupportsRowColumnAdderKnob:
supportsDragDropMoveMode
setSupportsDragDropMoveMode:
supportsDynamicallyHidingRowColumnForDragDrop
setSupportsDynamicallyHidingRowColumnForDragDrop:
formulaEditorEvaluatesFormulas
setFormulaEditorEvaluatesFormulas:
showReferenceHighlightsOnFormulaCellSelection
setShowReferenceHighlightsOnFormulaCellSelection:
tokenizeFormulaStringLiterals
setTokenizeFormulaStringLiterals:
exportsCellComments
setExportsCellComments:
exportsCellAnnotations
setExportsCellAnnotations:
supportsCellCommentsActivityLines
setSupportsCellCommentsActivityLines:
cellEditorsCanScrollToNonLocalTableSelection
setCellEditorsCanScrollToNonLocalTableSelection:
supportsRepeatHeaderRowsOnEachPage
setSupportsRepeatHeaderRowsOnEachPage:
supportsTableTranspose
setSupportsTableTranspose:
supportsRowMovesInPaginatedTables
setSupportsRowMovesInPaginatedTables:
setDisableImplicitNaming:
supportsComplexReorganizeUI
setSupportsComplexReorganizeUI:
supportsQuickFilterUI
setSupportsQuickFilterUI:
pasteFilterHidingAsUserHiding
setPasteFilterHidingAsUserHiding:
allowsFullyFilteredTables
setAllowsFullyFilteredTables:
supportsTableColumnAutocomplete
setSupportsTableColumnAutocomplete:
setSupportsInlineAttachments:
followsLinksOnFirstTap
setFollowsLinksOnFirstTap:
setSupportsBidiTablesUI:
supportsPlaceholderGeometry
setSupportsPlaceholderGeometry:
setSupportsStockUI:
shouldZoomOutOnEndEditing
setShouldZoomOutOnEndEditing:
forceZoomInOnBeginEditing
setForceZoomInOnBeginEditing:
setSupportsCategorization:
structuredTextImportConfidenceThreshold
setStructuredTextImportConfidenceThreshold:
structuredTextImportConfidenceThresholdForCanvas
setStructuredTextImportConfidenceThresholdForCanvas:
structuredTextImportSizeLimit
setStructuredTextImportSizeLimit:
allowsBlackDragDropBackground
setAllowsBlackDragDropBackground:
supportsAddBodyRowAtBottomSiriKitIntent
setSupportsAddBodyRowAtBottomSiriKitIntent:
_supportsContainedTextEditing
_showsCellEditingToolbar
_supportsAutomaticNumberKeyboard
_beginEditingOnSingleTap
_supportsMergedCells
_supportsHiddenCells
_returnWhileEditingNavigates
_tabWhileEditingNavigates
_continuesEditingAfterNavigation
_arrowKeyAtEdgeWhileEditingNavigates
_arrowKeysWrap
_arrowKeysNavigateWhenEditingBeganByTyping
_backTabWraps
_tabAtEdgeAddsRow
_tabAtEdgeAddsColumn
_pastesTile
_allowHorizontalAutoresize
_selectsCellOnInitialTap
_dragByHandleOnly
_cornersCanDragResize
_supportsControlCells
_controlCellUIAlwaysVisible
_supportsActionMenu
_hasLargerFonts
_supportsFrozenHeaders
_supportsAutoResizedTables
_supportsCreateChartFromSelection
_selectionUsesBezierPath
_usesWholeChromeResizer
_showsChromeWhileEditingCell
_showsSelectionKnobsWhileEditingCell
_showsCellWarningIndicator
_supportsCanvasReferenceEditing
_usesLimitedAutomaticFormatParsing
_supportsFormulaEditing
_supportsImplicitEditing
_allowFreeformFormulaText
_allowWhitespaceInFormulas
_showsHideUnhideUI
_exportPermanentHidingState
_showsCellOverflowIndicator
_supportsAutofill
_usesLimitedNumberFormatInspector
_headersFrozenByDefault
_createLargeDefaultTables
_tableNameEnabledInNewTables
_supportsRowColumnAdderKnob
_supportsDragDropMoveMode
_supportsDynamicallyHidingRowColumnForDragDrop
_formulaEditorEvaluatesFormulas
_showReferenceHighlightsOnFormulaCellSelection
_tokenizeFormulaStringLiterals
_exportsCellComments
_exportsCellAnnotations
_supportsCellCommentsActivityLines
_cellEditorsCanScrollToNonLocalTableSelection
_supportsRepeatHeaderRowsOnEachPage
_supportsTableTranspose
_supportsRowMovesInPaginatedTables
_disableImplicitNaming
_supportsComplexReorganizeUI
_supportsQuickFilterUI
_pasteFilterHidingAsUserHiding
_allowsFullyFilteredTables
_supportsTableColumnAutocomplete
_supportsInlineAttachments
_followsLinksOnFirstTap
_supportsBidiTablesUI
_supportsPlaceholderGeometry
_supportsStockUI
_shouldZoomOutOnEndEditing
_forceZoomInOnBeginEditing
_supportsCategorization
_allowsBlackDragDropBackground
_supportsAddBodyRowAtBottomSiriKitIntent
_maxNumberOfRows
_maxNumberOfColumns
_maxNumberOfPopulatedCells
_structuredTextImportConfidenceThreshold
_structuredTextImportConfidenceThresholdForCanvas
_structuredTextImportSizeLimit
autofillSelection
setAutofillSelection:
_autofillSelection
setDirtyCellRange:
setDirtyStrokeRange:
dirtyCellRange
dirtyStrokeRange
invalidateAllChrome
setInvalidateAllChrome:
invalidateAllChromeCaches
setInvalidateAllChromeCaches:
invalidateColumnChrome
setInvalidateColumnChrome:
invalidateRowChrome
setInvalidateRowChrome:
hideChromeContextMenuButton
setHideChromeContextMenuButton:
invalidateKnobs
setInvalidateKnobs:
invalidateSelection
setInvalidateSelection:
invalidateTableName
setInvalidateTableName:
updateEditorRemainders
setUpdateEditorRemainders:
syncReferenceHighlightState
setSyncReferenceHighlightState:
setSetNeedsDisplay:
hideStepperHUD
setHideStepperHUD:
expandDirtyRegionForReferences
setExpandDirtyRegionForReferences:
repositionStockPopover
setRepositionStockPopover:
_invalidateAllChrome
_invalidateAllChromeCaches
_invalidateColumnChrome
_invalidateRowChrome
_hideChromeContextMenuButton
_invalidateKnobs
_invalidateSelection
_invalidateTableName
_updateEditorRemainders
_syncReferenceHighlightState
_setNeedsDisplay
_hideStepperHUD
_expandDirtyRegionForReferences
_repositionStockPopover
_dirtyCellRange
_dirtyStrokeRange
tableLayout
frameInUnscaledCanvas
visibleUnscaledRectForClippingReps
editorSelection
transformInRoot
convertUnscaledToBoundsRect:
currentScreenScale
setParentRep:
initWithLayout:canvas:
contentsScale
finishInit
setCurrentScreenScale:
layerFrameInScaledCanvas
willBeRemoved
childTextReps
currentAnimation
updateChildrenFromLayout
childReps
arrayByAddingObjectsFromArray:
recursivelyPerformSelectorIfImplemented:
p_shouldPerformOnChildTextReps:
recursivelyPerformSelectorIfImplemented:withObject:
recursivelyPerformSelector:
recursivelyPerformSelector:withObject:
p_dynamicOperationDidBegin
p_dynamicOperationDidEnd
p_dynamicDragDidBegin
i_dynamicDragDidEnd
deviceBoundsForCellRange:
accessController
parentStorage
wpKind
p_cellIDForHyperlinkField:
p_columnForCellID:
selectionWithRange:
boundsRectForSelection:columnArray:includeRuby:includePaginatedAttachments:
p_horizontalAlignmentTransformForHyperlinkWithBounds:inCell:
hyperlinkRegions
smartFieldsWithAttributeKind:intersectingRange:
naturalBoundsRectForHyperlinkField:
hyperlinkRegionWithURL:bezierPath:
validateVisibleRect
isTableNameValid
setTableNameValid:
updateFromLayout
canvasVisibleRect
animationStack
deliveryStyle
setRep:
isMagicMove
setIsMagicMove:
setObjectType:
p_countOfIdenticalCellsBetweenOutgoingTableInfo:incomingTableInfo:
setOverlayFrozenHeaderCorner:
setOverlayFrozenHeaderRowsMask:
setOverlayFrozenHeaderColumnsMask:
removeFromSuperlayer
overlayFrozenHeaderRows
overlayFrozenHeaderColumns
overlayFrozenHeaderTableBodyMask
addSublayer:
isDrawingIntoPDF
isDrawingInFlippedContext
mustDrawOnMainThreadForInteractiveCanvas
isInGroup
isPrinting
setRecursivelyDrawingInContext:
isRecursivelyDrawingInContext
p_isTableRenderingRotated
pushAnimation:
popAnimation
imageWithCGImage:
tableRepDelegateClass
magicMoveAttributeMatchPercentBetweenOutgoingObject:incomingObject:mixingTypeContext:
containerInfo
searchSelectionBounds
setSearchSelectionBounds:
overlayFrozenHeaderCorner
ratingsDragCellID
setRatingsDragCellID:
aspectOperationIsInProgress
zoomOperationIsInProgress
cellDragController
setCellDragController:
selectionDragAbortedOnNewSelection
setSelectionDragAbortedOnNewSelection:
visibleFillKnobs
setVisibleFillKnobs:
textFieldShouldBeginEditing:
textFieldDidBeginEditing:
textFieldShouldEndEditing:
textFieldDidEndEditing:
textFieldDidEndEditing:reason:
textField:shouldChangeCharactersInRange:replacementString:
textFieldDidChangeSelection:
textFieldShouldClear:
textFieldShouldReturn:
displayLayer:
drawLayer:inContext:
layerWillDraw:
layoutSublayersOfLayer:
actionForLayer:forKey:
hitRep:withPrecision:
hitRepChrome:
p_removeObservers
p_addObservers
asyncPostTextChangedInRange:
invalidateEditingCell
canvasBoundsForCellRange:
boundsForCellSelection:
contentsRectForCellRangeAcrossSpaces:contentsCenterInfo:canvasFrame:contentsRect:
logicalCellIDForUnscaledCanvasPoint:
hyperlinkContainerRep
validateStrokesInEditingSpillingTextRange
isFullyVisibleWithBorder:
p_updateDynamicModePropertiesForContainedTextEditing
p_updateDynamicModePropertiesForContainedTextEditingWithSpillingTextRange:
p_resetDynamicModePropertiesForContainedTextEditing
wantsActivityLine
setTableChrome:
didDrawCellImageFill:inCellRange:
textureForDescription:
setOverlayTableName:
setOverlayFrozenHeaderRows:
setOverlayFrozenHeaderColumns:
setOverlayFrozenHeaderTableBodyMask:
setOverlayFrozenHeaderTableNameMask:
p_alignedLayerFrameForLayoutSpace:transform:
validateFrozenHeaderCorner
validateFrozenHeaderRows
validateFrozenHeaderColumns
validateFrozenHeaderTableBodyMask
invalidateFrozenHeaders
canDrawInBackgroundDuringScroll
canDrawInParallel
tableRepIsBeingRemovedFromBackgroundLayout
setTableRepIsBeingRemovedFromBackgroundLayout:
animationController
setAnimationController:
delegate
tableChrome
canvasReferenceController
isZoomToEditOperationInProgress
shouldRepositionStockPopover
setShouldRepositionStockPopover:
zoomToEditOperationIsInProgress
setZoomToEditOperationIsInProgress:
setAspectOperationIsInProgress:
setZoomOperationIsInProgress:
overlayTableName
overlayFrozenHeaderRowsMask
overlayFrozenHeaderColumnsMask
overlayFrozenHeaderTableNameMask
zoomToEditVisibleCellRange
setZoomToEditVisibleCellRange:
cellEditingMaskLayer
setCellEditingMaskLayer:
findSelectionHighlightLayer
setFindSelectionHighlightLayer:
_tableRepIsBeingRemovedFromBackgroundLayout
_selectionDragAbortedOnNewSelection
_isZoomToEditOperationInProgress
_tableNameValid
_shouldRepositionStockPopover
_zoomToEditOperationIsInProgress
_aspectOperationIsInProgress
_zoomOperationIsInProgress
_recursivelyDrawingInContext
_childTextReps
_ratingsDragCellID
_cellDragController
_visibleFillKnobs
_animationController
_delegate
_tableChrome
_canvasReferenceController
_overlayTableName
_overlayFrozenHeaderCorner
_overlayFrozenHeaderRows
_overlayFrozenHeaderColumns
_overlayFrozenHeaderRowsMask
_overlayFrozenHeaderColumnsMask
_overlayFrozenHeaderTableBodyMask
_overlayFrozenHeaderTableNameMask
_currentScreenScale
_animationStack
_cellEditingMaskLayer
_findSelectionHighlightLayer
_zoomToEditVisibleCellRange
_searchSelectionBounds
initWithSize:offset:renderBlock:
setTextureType:
setTextureOpacity:
addRenderable:forStage:
addFinalTexture:forStage:
isCanvasInteractive
parentRep
childRepIsOnDocSetupCanvas:
childRepIsMasterDrawable:
listStartAtCharIndex:
transformInParent
drawColumn:selection:inContext:isFlipped:viewScale:renderMode:
drawText:inContext:minSize:maxSize:anchor:flags:isFlipped:viewScale:
isClear
paintRect:inContext:
getValue:
valueWithBytes:objCType:
changingCellFillAtCellID:
deleteCharactersInRange:
replaceOccurrencesOfString:withString:options:range:
functionNameForLocalizedString:
versionShippedIn
@44@0:8@16@24B32@36
@32@0:8@16@24
@72@0:8@16@24@32@40B48@52@60B68
B16@0:8
{_NSRange=QQ}48@0:8@16#24{_NSRange=QQ}32
B24@0:8@16
{_NSRange=QQ}32@0:8{_NSRange=QQ}16
Q24@0:8Q16
v24@0:8@16
v32@0:8@16@24
@16@0:8
@32@0:8{_NSRange=QQ}16
@36@0:8{_NSRange=QQ}16B32
@24@0:8@16
B20@0:8C16
@36@0:8@16C24@28
r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16@0:8
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16@0:8
^{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSTAggNode *> > >={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}16@0:8
@52@0:8@16C24{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}28@44
@36@0:8r^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSCE::CellCoordinateArchive>=^{Arena}ii^{Rep}}^{UUID}^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive}^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive}^{CellValueArchive}}16@24C32
v16@0:8
v24@0:8^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSCE::CellCoordinateArchive>=^{Arena}ii^{Rep}}^{UUID}^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive}^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive}^{CellValueArchive}}16
v28@0:8@16B24
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}40@0:8C16C20@24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}28@0:8C16@20
@60@0:8@16C24@28Q36Q44^{TSUPreserveFlags=C}52
v36@0:8@16@24C32
v28@0:8@16C24
v32@0:8@16C24C28
@52@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16@24C32@36@44
v52@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16@24C32@36@44
v24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
B24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
@20@0:8C16
@28@0:8B16@20
@40@0:8@16@24@32
v24@0:8@?16
v28@0:8C16@?20
@24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
@28@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16C24
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16@0:8
C16@0:8
{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}
@"TSCECellValue"
{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSTAggNode *> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::hash<TSUUUID>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTAggNode *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >="__value_"f}}}
@"NSMutableDictionary"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"TSUMutableUUIDSet"
@"TSTGroupNode"
@"TSTGroupNodeFormatManager"
{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, std::__1::hash<TSUUUID>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >="__value_"f}}}
@32@0:8@16{TSUCellCoord=ISBB}24
@32@0:8@16r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
{_NSRange=QQ}16@0:8
@84@0:8@16@24^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}32^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}40@48q56{_NSRange=QQ}64B80
@84@0:8@16@24{TSUCellCoord=ISBB}32{TSUCellCoord=ISBB}40@48q56{_NSRange=QQ}64B80
@64@0:8@16@24{TSUCellCoord=ISBB}32{TSUCellCoord=ISBB}40@48q56
@56@0:8@16@24{TSUCellCoord=ISBB}32{TSUCellCoord=ISBB}40@48
@56@0:8@16@24{TSUCellCoord=ISBB}32{TSUCellCoord=ISBB}40q48
@48@0:8@16@24{TSUCellCoord=ISBB}32{TSUCellCoord=ISBB}40
@64@0:8@16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24q40{TSUCellCoord=ISBB}48{TSUCellCoord=ISBB}56
@32@0:8@16q24
@40@0:8@16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24
@40@0:8@16{TSUCellCoord=ISBB}24q32
@32@0:8@16I24I28
@32@0:8@16S24I28
@40@0:8@16q24I32I36
@40@0:8@16@24{TSUColumnRowOffset=ii}32
{TSUCellCoord=ISBB}16@0:8
{TSUCellCoord=ISBB}24@0:8@16
@32@0:8r^{SelectionArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CellRange>=^{Arena}ii^{Rep}}{RepeatedPtrField<TST::CellRange>=^{Arena}ii^{Rep}}^{Reference}^{CellID}^{CellID}^{Reference}^{CellUIDRegionArchive}^{CellUIDRegionArchive}^{UUIDCoordArchive}^{UUIDCoordArchive}i}16@24
v32@0:8^{SelectionArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CellRange>=^{Arena}ii^{Rep}}{RepeatedPtrField<TST::CellRange>=^{Arena}ii^{Rep}}^{Reference}^{CellID}^{CellID}^{Reference}^{CellUIDRegionArchive}^{CellUIDRegionArchive}^{UUIDCoordArchive}^{UUIDCoordArchive}i}16@24
@32@0:8r^{DeathhawkRdar39989167CellSelectionArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}^{CellUIDRegionArchive}^{CellUIDRegionArchive}^{UUIDCoordArchive}^{UUIDCoordArchive}i}16@24
@56@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16@32q40{TSUCellCoord=ISBB}48
@64@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16@32{TSUCellCoord=ISBB}40{TSUCellCoord=ISBB}48q56
v32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
v32@0:8q16I24I28
@24@0:8^{_NSZone=}16
B24@0:8{TSUCellCoord=ISBB}16
B24@0:8o^C16
q16@0:8
v32@0:8{_NSRange=QQ}16
{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@0:8
v48@0:8{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
v24@0:8Q16
@"TSTTableInfo"
@"TSTCellUIDRegion"
@"TSTCellRegion"
{_NSRange="location"Q"length"Q}
{TSTCellUID="_column"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_row"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}}
{RefTypeHolder<TSCERangeRef, 0>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}56@0:8{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@48
{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}56@0:8{RefTypeHolder<TSCERangeRef, 0>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@48
{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}32@0:8@16@24
{RefTypeHolder<TSCERangeRef, 0>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}32@0:8@16@24
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}40@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24^{TSUPreserveFlags=C}32
{TSUCellCoord=ISBB}40@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24^{TSUPreserveFlags=C}32
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}32@0:8@16@24
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}24@0:8@16
@24@0:8@"TSCECalculationEngine"16
{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}32@0:8@"NSString"16@"TSCEReferenceParsingContext"24
{RefTypeHolder<TSCERangeRef, 0>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}32@0:8@"NSString"16@"TSCEReferenceParsingContext"24
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}40@0:8@"NSString"16r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24^{TSUPreserveFlags=C}32
{TSUCellCoord=ISBB}40@0:8@"NSString"16r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24^{TSUPreserveFlags=C}32
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}32@0:8@"NSString"16@"TSCEReferenceParsingContext"24
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}24@0:8@"TSCEReferenceParsingContext"16
@"TSCEWrappedRangeRef"24@0:8@"TSCEReferenceParsingContext"16
@"TSCECellTractRef"24@0:8@"TSCEReferenceParsingContext"16
{TSUChromeCellCoord={TSUCellCoord=ISBB}}48@0:8@16^{TSCETableResolver=^^?}24^{TSUPreserveFlags=C}32^@40
{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}56@0:8@16^{TSCETableResolver=^^?}24@32^{TSCETableResolver=^^?}40@48
B48@0:8@16^@24^@32^@40
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}64@0:8@16@24@32@40^{TSUPreserveFlags=C}48^Q56
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}48@0:8@16@24Q32@40
@"TSCECalculationEngine"
@"NSCharacterSet"
v32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
q32@0:8@16@24
@32@0:8d16@24
q32@0:8@16@"<TSDMixingTypeContext>"24
@"NSArray"16@0:8
@20@0:8S16
@20@0:8I16
@"TSTStrokeLayer"20@0:8S16
@"TSTStrokeLayer"20@0:8I16
@"TSTTableStyle"16@0:8
v24@0:8@"TSTTableStyle"16
@"TSTCellStyle"16@0:8
v24@0:8@"TSTCellStyle"16
@"TSWPParagraphStyle"16@0:8
v24@0:8@"TSWPParagraphStyle"16
@"TSWPShapeStyle"16@0:8
v24@0:8@"TSWPShapeStyle"16
@"TSDStroke"16@0:8
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16@0:8
@32@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16o^B24
{TSUModelRowIndex=I}16@0:8
{TSUModelColumnIndex=S}16@0:8
@"TSWPParagraphStyle"32@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16o^B24
v24@0:8@?<v@?@"TSTCell"{TSUCellCoord=ISBB}^B>16
@72@0:8@16{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@40@48@56@64
@64@0:8@16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}24r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}32@40@48@56
@56@0:8@16I24I28@32@40@48
@52@0:8@16@24@32@40B48
@60@0:8@16@24@32@40B48q52
B24@0:8Q16
v32@0:8Q16@24
{?=II}16@0:8
v20@0:8B16
d16@0:8
v24@0:8d16
v20@0:8{TSUModelRowIndex=I}16
v18@0:8{TSUModelColumnIndex=S}16
i16@0:8
@24@0:8{TSUModelRowIndex=I}16C20
@22@0:8{TSUModelColumnIndex=S}16C18
v32@0:8{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}24@0:8Q16
Q24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
Q20@0:8{TSUModelRowIndex=I}16
Q18@0:8{TSUModelColumnIndex=S}16
@32@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
i32@0:8o@16Q24
i32@0:8o@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24
B24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
i36@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24B32
i32@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24
@24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
v40@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24@32
i48@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24B32B36@40
i40@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24B32B36
^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
i24@0:8@16
i32@0:8@16B24B28
@32@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16^B24
i24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
@32@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16@24
i28@0:8@16{TSUModelRowIndex=I}24
@28@0:8{TSUModelRowIndex=I}16o^B20
i26@0:8@16{TSUModelColumnIndex=S}24
@26@0:8{TSUModelColumnIndex=S}16o^B18
@24@0:8Q16
B32@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24
d28@0:8{TSUModelRowIndex=I}16o^B20
d26@0:8{TSUModelColumnIndex=S}16o^B18
v28@0:8d16{TSUModelRowIndex=I}24
v26@0:8d16{TSUModelColumnIndex=S}24
d24@0:8Q16
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
i52@0:8{_NSRange=QQ}16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}32@40B48
i42@0:8{TSUModelColumnIndex=S}16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}18@26Q34
i48@0:8{TSUModelRowIndex=I}16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}20@28Q36B44
v24@0:8{TSUModelRowIndex=I}16{TSUModelRowIndex=I}20
v20@0:8{TSUModelColumnIndex=S}16{TSUModelColumnIndex=S}18
v36@0:8{_NSRange=QQ}16{TSUModelRowIndex=I}32
v34@0:8{_NSRange=QQ}16{TSUModelColumnIndex=S}32
C20@0:8{TSUModelRowIndex=I}16
C18@0:8{TSUModelColumnIndex=S}16
v28@0:8C16r^{TSUModelRowIndex=I}20
v28@0:8C16r^{TSUModelColumnIndex=S}20
@20@0:8{TSUModelRowIndex=I}16
@18@0:8{TSUModelColumnIndex=S}16
@24@0:8{TSUCellCoord=ISBB}16
v32@0:8@16I24i28
v32@0:8@16S24i28
v48@0:8@16I24i28{TSTSimpleRange=qQ}32
v48@0:8@16S24i28{TSTSimpleRange=qQ}32
{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}36@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24B32
@32@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24
i36@0:8o^{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}16{TSUModelCellCoord={TSUCellCoord=ISBB}}24B32
v36@0:8r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}16@24B32
v36@0:8@16B24B28B32
v36@0:8@16{TSUColumnRowOffset=ii}24B32
{TSCECellCoordSet={map<unsigned short, TSUIndexSet, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSUIndexSet> > >={__tree<std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, TSUIndexSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, TSUIndexSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::less<unsigned short>, true> >=Q}}}}16@0:8
v24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
v32@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{TSUModelCellCoord={TSUCellCoord=ISBB}}24@0:8@16
v40@0:8@16Q24@?32
B32@0:8{TSUCellCoord=ISBB}16^@24
B24@0:8^@16
v32@0:8@16B24B28
@"TSTHiddenStateFormulaOwner"
@"TSTStrokeSidecar"
{TSCECellRefSet="_coordsForOwnerUid"{map<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet> > >="__tree_"{__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >="__value_"Q}}}}
{TSUModelColumnIndex="_column"S}
{TSUModelRowIndex="_row"I}
@"TSTTableDataStore"
@"NSString"
@"TSTTableStylePreset"
@"TSTTableStyle"
@"TSTCellStyle"
@"TSWPParagraphStyle"
@"TSWPShapeStyle"
@"TSTCellDictionary"
@"TSTConcurrentMutableCellUIDSet"
@"TSTConditionalStyleFormulaOwner"
@"TSTMergeOwner"
@"TSTCategoryOwner"
@"TSTHiddenStatesOwner"
@"TSCEHauntedOwner"
@"TSTTableSortOrder"
@"TSTSortRuleReferenceTracker"
@"TSTColumnRowUIDMap"
@"TSTCellWillChangeDistributor"
@"TSWPStorage"
@"NSMapTable"
@"TSTStructuredTextImportRecord"
@"TSTTableFilterSet"
@"TSTPencilAnnotationOwner"
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16@0:8
@"TSTCell"16@0:8
@"TSTCellFormulaSpec"16@0:8
v24@0:8{TSUCellCoord=ISBB}16
{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}
@"TSTCell"
@"TSTCellFormulaSpec"
{TSUCellRect="origin"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"size"{?="numberOfColumns"I"numberOfRows"I}}
I16@0:8
S16@0:8
@36@0:8@16B24@28
v28@0:8@16I24
@28@0:8I16o^I20
^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}24@0:8S16I20
q40@0:8@16S24I28^{?=IIIIIIIIIS}32
i24@0:8S16I20
v28@0:8S16I20S24
v24@0:8I16I20
v28@0:8I16I20B24
@24@0:8I16I20
v32@0:8@16I24B28
@"NSPointerArray"
v32@0:8d16{TSUCellCoord=ISBB}24
{vector<std::__1::pair<TSUCellCoord, double>, std::__1::allocator<std::__1::pair<TSUCellCoord, double> > >="__begin_"^{pair<TSUCellCoord, double>}"__end_"^{pair<TSUCellCoord, double>}"__end_cap_"{__compressed_pair<std::__1::pair<TSUCellCoord, double> *, std::__1::allocator<std::__1::pair<TSUCellCoord, double> > >="__value_"^{pair<TSUCellCoord, double>}}}
{unordered_map<unsigned short, double, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, double> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned short, double>, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, double>, std::__1::hash<unsigned short>, true>, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, double>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned short, double> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, double>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, double>, std::__1::hash<unsigned short>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, double>, std::__1::equal_to<unsigned short>, true> >="__value_"f}}}
B40@0:8d16d24d32
d20@0:8i16
@20@0:8i16
@40@0:8d16d24d32
@32@0:8r^{CellSpecArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{FormulaArchive}^{Reference}dddIBB}16@24
@44@0:8i16d20d28d36
d32@0:8d16^B24
d32@0:8@16@24
v32@0:8^{CellSpecArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{FormulaArchive}^{Reference}dddIBB}16@24
@28@0:8@16B24
@"NSString"24@0:8@"<TSCEReferenceResolving>"16
@"NSString"24@0:8@"<TSCEResolverContainer>"16
@"<TSCEResolverContainer>"28@0:8@"NSString"16B24
@"NSArray"24@0:8@"NSString"16
@"<TSCEReferenceResolving>"32@0:8@"NSString"16@"<TSCEReferenceResolving>"24
@"<TSCEReferenceResolving>"32@0:8@"NSString"16@"NSString"24
@"NSEnumerator"16@0:8
@"NSString"24@0:8@"<TSKModel>"16
v24@0:8@"<TSKModelVisitor>"16
v24@0:8@"TSCECalculationEngine"16
@"TSPObject<TSCECalculationEngineRegistration>"16@0:8
@"<TSCEFormulaOwning>"16@0:8
I24@0:8Q16
@40@0:8q16{CGPoint=dd}24
@48@0:8q16@24@32@40
@52@0:8q16@24@32@40B48
@32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16@24
v36@0:8@16@24i32
v44@0:8@16@24i32Q36
B32@0:8@16@24
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}44@0:8Q16{?=II}24I32I36I40
Q40@0:8{TSUCellCoord=ISBB}16I24I28I32I36
@24@0:8@"TSPObjectContext"16
v24@0:8@"TSDInfoGeometry"16
v24@0:8@"NSObject<TSDContainerInfo>"16
@"TSDInfoGeometry"16@0:8
@"NSObject<TSDContainerInfo>"16@0:8
@"TSPObject<TSDOwningAttachment>"16@0:8
v24@0:8@"TSPObject<TSDOwningAttachment>"16
@"<TSDInfoUUIDPathPrefixComponentsProvider>"16@0:8
@"TSKCollaboratorCursor"24@0:8@"TSKSelectionPath"16
@24@0:8@?16
@"TSKSearch"24@0:8@?<v@?@"<TSKSearchReference>">16
v24@0:8@?<v@?@"<TSKSearchReference>">16
v24@0:8@"TSKSearch"16
@"TSKCommand"24@0:8@"NSObject<TSKSearchReplaceProvider>"16
@"NSSet"16@0:8
v36@0:8@"NSString"16@"TSSTheme"24i32
v24@0:8@?<@"TSSStyle"@?@"TSSStyle">16
v24@0:8@"TSSStylesheet"16
B20@0:8I16
B20@0:8S16
C20@0:8I16
I20@0:8I16
@28@0:8C16@20
@28@0:8C16r^{UUIDSet<TSP::UUIDSet>={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}20
{_NSRange=QQ}20@0:8I16
Q20@0:8S16
@28@0:8I16@?20
B32@0:8{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
C36@0:8{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16C32
v40@0:8C16{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}20C36
C24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}24@0:8r^{RefTypeHolder<TSCECellRef, 1>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16
d20@0:8C16
v28@0:8d16C24
{TSUChromeColumnIndex=S}16@0:8
{TSUChromeRowIndex=I}16@0:8
v24@0:8@"TSTGroupingColumnList"16
@"NSIndexSet"20@0:8S16
@"TSUUUIDSet"16@0:8
@"NSIndexSet"24@0:8@"TSUUUIDSet"16
@"NSIndexSet"24@0:8@"TSTCellRegion"16
@"NSIndexSet"28@0:8C16@"TSTCellRegion"20
@"NSIndexSet"20@0:8C16
@"NSIndexSet"20@0:8I16
@"NSIndexSet"28@0:8C16r^{UUIDSet<TSP::UUIDSet>={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}20
@"NSIndexSet"16@0:8
@"TSTCellRegion"24@0:8@"TSTCellRegion"16
@"NSString"20@0:8C16
@"TSUUUIDSet"28@0:8I16@?<B@?{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}>20
@"TSTGroupBy"16@0:8
v24@0:8@"TSTGroupBy"16
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}20@0:8S16
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}20@0:8I16
S24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
I24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}24@0:8@16
@24@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}32@0:8{_NSRange=QQ}16
{_NSRange=QQ}24@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}24@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24@0:8r^{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}16
{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16@0:8
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}24@0:8@"NSIndexSet"16
@"NSMutableIndexSet"24@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16
@"NSIndexSet"24@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16
@"TSUMutableUUIDSet"28@0:8@"NSIndexSet"16B24
@"NSMutableIndexSet"28@0:8@"TSUUUIDSet"16B24
@"NSMutableIndexSet"36@0:8@"TSUUUIDSet"16B24@"TSUMutableUUIDSet"28
S20@0:8S16
B32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
I32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
@32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
B36@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16C32
B24@0:8I16C20
B24@0:8S16C20
C20@0:8S16
@"NSIndexSet"32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
@"NSMutableIndexSet"32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
@"NSIndexSet"24@0:8@"NSIndexSet"16
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
@"TSTMergeListWrapper"32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
@"TSTMergeListWrapper"24@0:8@"TSTCellRegion"16
@56@0:8@16@24I32I36@40@48
@48@0:8@16@24I32I36@40
@40@0:8@16@24I32I36
@52@0:8@16@24@32B40q44
v28@0:8q16B24
v40@0:8@16@24d32
v40@0:8{TSUCellCoord=ISBB}16{TSUCellCoord=ISBB}24{TSUCellCoord=ISBB}32
v32@0:8@16{TSUCellCoord=ISBB}24
v88@0:8{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16{TSUCellCoord=ISBB}80
@20@0:8B16
v20@0:8I16
Q32@0:8Q16@24
Q24@0:8@16
v48@0:8@16@24@32d40
v24@0:8q16
v32@0:8{CGSize=dd}16
v32@0:8{CGPoint=dd}16
v32@0:8d16d24
v28@0:8{TSUColumnRowOffset=ii}16B24
B32@0:8@16@?24
i32@0:8@16r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24
i24@0:8r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
v40@0:8@16{TSUCellCoord=ISBB}24@32
@32@0:8{TSUCellCoord=ISBB}16@24
v36@0:8i16@20{TSUCellCoord=ISBB}28
v40@0:8{TSUCellCoord=ISBB}16^B24^@32
v64@0:8@16{TSUCellCoord=ISBB}24^B32^i40^i48^@56
@32@0:8r^{vector<unsigned short, std::__1::allocator<unsigned short> >=^S^S{__compressed_pair<unsigned short *, std::__1::allocator<unsigned short> >=^S}}16@24
v20@0:8i16
v40@0:8@16B24B28@32
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24@0:8Q16
Q24@0:8{TSUCellCoord=ISBB}16
Q20@0:8I16
Q24@0:8r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
i32@0:8@16Q24
i32@0:8o@16{TSUCellCoord=ISBB}24
i36@0:8@16{TSUCellCoord=ISBB}24B32
i32@0:8@16{TSUCellCoord=ISBB}24
v36@0:8@16{TSUCellCoord=ISBB}24B32
^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8{TSUCellCoord=ISBB}16
i40@0:8@16r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24B32B36
v48@0:8@16{TSUViewCellCoord={TSUCellCoord=ISBB}}24@32@40
@36@0:8@16B24B28B32
i40@0:8@16{TSUCellCoord=ISBB}24@32
i24@0:8{TSUCellCoord=ISBB}16
i32@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
@28@0:8I16o^B20
i28@0:8@16S24
@28@0:8S16o^B20
@32@0:8{TSUCellCoord=ISBB}16o^B24
B32@0:8@16{TSUCellCoord=ISBB}24
@28@0:8{TSUCellCoord=ISBB}16B24
@28@0:8S16@20
@40@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16o^B32
{TSUCellCoord=ISBB}24@0:8{TSUCellCoord=ISBB}16
d28@0:8I16o^B20
d28@0:8S16o^B20
v28@0:8d16S24
v28@0:8d16I24
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24@0:8{TSUCellCoord=ISBB}16
v28@0:8S16I20B24
i44@0:8S16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}20@28Q36
i44@0:8I16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}20@28Q36
i48@0:8I16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}20@28Q36B44
v24@0:8S16I20
v36@0:8{_NSRange=QQ}16I32
v36@0:8{_NSRange=QQ}16S32
@24@0:8q16
v32@0:8@16@?24
{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}24@0:8@16
{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}16@0:8
i36@0:8o^{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}16{TSUCellCoord=ISBB}24B32
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8I16I20
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8S16S20
@32@0:8@16^@24
B56@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16o^{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}32o^{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}40o^{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}48
{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8r^{TSUCellCoord=ISBB}16
{TSUCellCoord=ISBB}24@0:8r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
B40@0:8@16^{vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}}}24^{vector<TSTCellUID, std::__1::allocator<TSTCellUID> >=^{TSTCellUID}^{TSTCellUID}{__compressed_pair<TSTCellUID *, std::__1::allocator<TSTCellUID> >=^{TSTCellUID}}}32
@36@0:8@16B24o^B28
{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}28@0:8{TSUCellCoord=ISBB}16B24
@24@0:8r^{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}16
i32@0:8o@16r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24
i56@0:8@16{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24
@56@0:8{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16o^B48
@28@0:8i16@20
v32@0:8r^{TableInfoArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{DrawableArchive}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{UUID}^{UUID}^{CoordMapperArchive}^{MasterLayoutArchive}II}16@24
v32@0:8^{TableInfoArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{DrawableArchive}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{UUID}^{UUID}^{CoordMapperArchive}^{MasterLayoutArchive}II}16@24
{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}16@0:8
v64@0:8{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}16
@"TSTTableModel"
@"TSTTablePartitioner"
@"TSTMasterLayout"
@"TSTSummaryModel"
@"TSTGroupBy"
@"NSDictionary"
@"TSTCategoryOrder"
@"TSTHiddenStates"
@"TSTTableTranslator"
@"TSCECoordMapper"
@"TSTArchivedMasterLayoutBundle"
{UUIDRect<TSP::UUIDRect>="_colIdList"{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >="__begin_"^{UUIDData<TSP::UUIDData>}"__end_"^{UUIDData<TSP::UUIDData>}"__end_cap_"{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >="__value_"^{UUIDData<TSP::UUIDData>}}}"_rowIdList"{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >="__begin_"^{UUIDData<TSP::UUIDData>}"__end_"^{UUIDData<TSP::UUIDData>}"__end_cap_"{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >="__value_"^{UUIDData<TSP::UUIDData>}}}}
B20@0:8i16
f20@0:8i16
i20@0:8i16
v40@0:8@16@24{TSUCellCoord=ISBB}32
v56@0:8@16@24@32Q40@48
@64@0:8@16r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@32@40@48@56
@80@0:8@16@24r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}32@40@48@56@64@72
@52@0:8@16Q24B32@36@44
@48@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16Q32Q40
v56@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16Q32Q40@?48
@24@0:8r^{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}16
{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >="__begin_"^{TSUCellRect}"__end_"^{TSUCellRect}"__end_cap_"{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >="__value_"^{TSUCellRect}}}
@36@0:8@16r^{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24C32
@36@0:8@16r^{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24C32
@36@0:8@16r^{RefTypeHolder<TSCERangeRef, 0>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24C32
@44@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24r^{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}32C40
v20@0:8C16
v28@0:8r^{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16C24
v28@0:8r^{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16C24
v28@0:8r^{RefTypeHolder<TSCERangeRef, 0>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16C24
{RefTypeHolder<TSCERangeRef, 0>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@0:8
{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@0:8
{vector<RefTypeHolder<TSCERangeRef, 0>, std::__1::allocator<RefTypeHolder<TSCERangeRef, 0> > >=^{RefTypeHolder<TSCERangeRef, 0>}^{RefTypeHolder<TSCERangeRef, 0>}{__compressed_pair<RefTypeHolder<TSCERangeRef, 0> *, std::__1::allocator<RefTypeHolder<TSCERangeRef, 0> > >=^{RefTypeHolder<TSCERangeRef, 0>}}}16@0:8
{vector<RefTypeHolder<TSCERangeRef, 1>, std::__1::allocator<RefTypeHolder<TSCERangeRef, 1> > >=^{RefTypeHolder<TSCERangeRef, 1>}^{RefTypeHolder<TSCERangeRef, 1>}{__compressed_pair<RefTypeHolder<TSCERangeRef, 1> *, std::__1::allocator<RefTypeHolder<TSCERangeRef, 1> > >=^{RefTypeHolder<TSCERangeRef, 1>}}}16@0:8
{TSUViewCellCoord={TSUCellCoord=ISBB}}16@0:8
{TSUModelCellCoord={TSUCellCoord=ISBB}}16@0:8
{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@0:8
v48@0:8{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16
@"TSCECellTractRef"
{RefTypeHolder<TSCERangeRef, 2>="_ref"{TSCERangeRef="range"{TSCERangeCoordinate="_topLeft"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_bottomRight"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}}"_tableUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}}}
v24@0:8@?<v@?@"<TSTCellIteratorData>"^B>16
@"<TSTCellIteratorData>"16@0:8
@"TSTTableInfo"16@0:8
@72@0:8@16@24@32Q40Q48{TSUCellRect={TSUCellCoord=ISBB}{?=II}}56
@64@0:8@16@24Q32Q40{TSUCellRect={TSUCellCoord=ISBB}{?=II}}48
@40@0:8@16Q24Q32
@56@0:8@16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24Q40Q48
@48@0:8@16@24Q32Q40
{unordered_map<unsigned short, TSUCellRect, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSUCellRect> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned short, TSUCellRect>, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSUCellRect>, std::__1::hash<unsigned short>, true>, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSUCellRect>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned short, TSUCellRect> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSUCellRect>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSUCellRect>, std::__1::hash<unsigned short>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSUCellRect>, std::__1::equal_to<unsigned short>, true> >="__value_"f}}}
@"TSTMutableCellIteratorData"
@"<TSTCellRegionIterating><TSTMutableCellIteratorDataUpdating>"
@"<TSTCellRegionIterating>"
@32@0:8Q16Q24
v44@0:8@16Q24@32i40
v52@0:8@16Q24Q32@40i48
v40@0:8@16r^{CellStylePropertiesArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{FillArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{PaddingArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}Bi}24@32
v32@0:8^{CellStylePropertiesArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{FillArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{PaddingArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}Bi}16@24
v32@0:8r^{CellStyleArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{StyleArchive}^{CellStylePropertiesArchive}I}16@24
v32@0:8^{CellStyleArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{StyleArchive}^{CellStylePropertiesArchive}I}16@24
^{TSCEFunctionArgSpec=}16@0:8
v32@0:8r^{InNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}}16@24
v32@0:8^{InNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}}16@24
v40@0:8@16{TSTCSENodeData=QQ}24
@40@0:8{TSTCSENodeData=QQ}16@32
{unordered_map<TSTExpressionNode *, TSTCSENodeData, std::__1::hash<TSTExpressionNode *>, std::__1::equal_to<TSTExpressionNode *>, std::__1::allocator<std::__1::pair<TSTExpressionNode *const, TSTCSENodeData> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, std::__1::__unordered_map_hasher<TSTExpressionNode *, std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, std::__1::hash<TSTExpressionNode *>, true>, std::__1::__unordered_map_equal<TSTExpressionNode *, std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, std::__1::equal_to<TSTExpressionNode *>, true>, std::__1::allocator<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSTExpressionNode *, std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, std::__1::hash<TSTExpressionNode *>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSTExpressionNode *, std::__1::__hash_value_type<TSTExpressionNode *, TSTCSENodeData>, std::__1::equal_to<TSTExpressionNode *>, true> >="__value_"f}}}
@24@0:8I16B20
@24@0:8r^{TileRowInfo=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}IIIB}16
{vector<TSTCell *, std::__1::allocator<TSTCell *> >=^@^@{__compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> >=^@}}32@0:8^{vector<TSUModelColumnIndex, std::__1::allocator<TSUModelColumnIndex> >=^{TSUModelColumnIndex}^{TSUModelColumnIndex}{__compressed_pair<TSUModelColumnIndex *, std::__1::allocator<TSUModelColumnIndex> >=^{TSUModelColumnIndex}}}16@?24
v32@0:8^{TileRowInfo=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}IIIB}16@24
^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}20@0:8S16
v36@0:8S16@20^{?=IIIIIIIIIS}28
v36@0:8@16S24^{?=IIIIIIIIIS}28
v20@0:8S16
q36@0:8@16S24^{?=IIIIIIIIIS}28
v28@0:8S16S20I24
v40@0:8{_NSRange=QQ}16@?32
v44@0:8{_NSRange=QQ}16B32@?36
B28@0:8S16Q20
{TSTTableTileRowBuffer="_private"{?="data"^{__CFData}"bufferSize"Q"offsets"^S"offsetBufferCount"S"wideOffsets"B}}
@24@0:8r^{ExpandCollapseStateArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}}16
v24@0:8^{ExpandCollapseStateArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}}16
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >="__begin_"^{UUIDData<TSP::UUIDData>}"__end_"^{UUIDData<TSP::UUIDData>}"__end_cap_"{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >="__value_"^{UUIDData<TSP::UUIDData>}}}
@"TSUUUIDSet"
^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@0:8
@"TSCEFormulaObject"16@0:8
@32@0:8^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@24
@40@0:8^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@24{TSUCellCoord=ISBB}32
^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}
@"TSULocale"
@"TSTStockDetails"
v32@0:8@16Q24
v32@0:8Q16Q24
v28@0:8Q16i24
v24@0:8C16C20
v24@0:8C16i20
v28@0:8C16@20
@24@0:8r^{GroupColumnListArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::GroupColumnArchive>=^{Arena}ii^{Rep}}}16
v32@0:8^{GroupColumnListArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::GroupColumnArchive>=^{Arena}ii^{Rep}}}16@24
@"NSArray"
v28@0:8@16i24
v24@0:8i16i20
v24@0:8B16i20
v24@0:8f16i20
@32@0:8r^{CellDiffArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{CommandPropertyMapArchive}^{CommandPropertyMapArchive}}16@24
v32@0:8^{CellDiffArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{CommandPropertyMapArchive}^{CommandPropertyMapArchive}}16@24
@"TSSPropertyMap"
@"TSSMutablePropertySet"
@"TSUPair"24@0:8@"TSTTableInfo"16
{vector<TSUViewCellRect, std::__1::allocator<TSUViewCellRect> >=^{TSUViewCellRect}^{TSUViewCellRect}{__compressed_pair<TSUViewCellRect *, std::__1::allocator<TSUViewCellRect> >=^{TSUViewCellRect}}}16@0:8
{vector<TSU::UUIDRect<TSP::UUIDRect>, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}^{UUIDRect<TSP::UUIDRect>}{__compressed_pair<TSU::UUIDRect<TSP::UUIDRect> *, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}}}16@0:8
r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16@0:8
v40@0:8q16Q24@?32
v32@0:8Q16@?24
v112@0:8@?16@?24@?32@?40@?48@?56@?64@?72@?80@?88@?96@?104
v40@0:8{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16
@"NSMutableArray"
@88@0:8@16{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}24{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}40
@40@0:8@16{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}24
@72@0:8@16{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}24
v32@0:8@16{TSUViewCellCoord={TSUCellCoord=ISBB}}24
v40@0:8Q16Q24Q32
v28@0:8^{vector<TSTCell *, std::__1::allocator<TSTCell *> >=^@^@{__compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> >=^@}}16B24
v32@0:8q16@?24
{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16@0:8
v32@0:8{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{TSUViewCellRect="_rect"{TSUCellRect="origin"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"size"{?="numberOfColumns"I"numberOfRows"I}}}
{vector<TSTCell *, std::__1::allocator<TSTCell *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> >="__value_"^@}}
{vector<TSUModelRowIndex, std::__1::allocator<TSUModelRowIndex> >="__begin_"^{TSUModelRowIndex}"__end_"^{TSUModelRowIndex}"__end_cap_"{__compressed_pair<TSUModelRowIndex *, std::__1::allocator<TSUModelRowIndex> >="__value_"^{TSUModelRowIndex}}}
{vector<TSUModelColumnIndex, std::__1::allocator<TSUModelColumnIndex> >="__begin_"^{TSUModelColumnIndex}"__end_"^{TSUModelColumnIndex}"__end_cap_"{__compressed_pair<TSUModelColumnIndex *, std::__1::allocator<TSUModelColumnIndex> >="__value_"^{TSUModelColumnIndex}}}
{vector<TSUViewRowIndex, std::__1::allocator<TSUViewRowIndex> >="__begin_"^{TSUViewRowIndex}"__end_"^{TSUViewRowIndex}"__end_cap_"{__compressed_pair<TSUViewRowIndex *, std::__1::allocator<TSUViewRowIndex> >="__value_"^{TSUViewRowIndex}}}
{vector<TSUViewColumnIndex, std::__1::allocator<TSUViewColumnIndex> >="__begin_"^{TSUViewColumnIndex}"__end_"^{TSUViewColumnIndex}"__end_cap_"{__compressed_pair<TSUViewColumnIndex *, std::__1::allocator<TSUViewColumnIndex> >="__value_"^{TSUViewColumnIndex}}}
{vector<long, std::__1::allocator<long> >="__begin_"^q"__end_"^q"__end_cap_"{__compressed_pair<long *, std::__1::allocator<long> >="__value_"^q}}
{vector<TSTNineKeyStructPreBNC, std::__1::allocator<TSTNineKeyStructPreBNC> >="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<TSTNineKeyStructPreBNC *, std::__1::allocator<TSTNineKeyStructPreBNC> >="__value_"^{?}}}
@"NSMutableIndexSet"
@24@0:8r^{StructuredTextImportRecord=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{StructuredTextImportSettings}^{CellRegion}dQQQf}16
v24@0:8^{StructuredTextImportRecord=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{StructuredTextImportSettings}^{CellRegion}dQQQf}16
@"TSKStructuredTextImportSettings"
@"NSURL"
@"NSDate"
@"NSData"
#24@0:8@16
v24@0:8i16I20
@32@0:8@16I24B28
v28@0:8I16@20
v24@0:8I16B20
{unordered_map<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *, TSTTableDataPayloadHash, TSTTableDataPayloadEqual, std::__1::allocator<std::__1::pair<NSObject<TSTTableDataPayloadHashing> *const, TSTTableDataObject *> > >="__table_"{__hash_table<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, std::__1::__unordered_map_hasher<NSObject<TSTTableDataPayloadHashing> *, std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, TSTTableDataPayloadHash, true>, std::__1::__unordered_map_equal<NSObject<TSTTableDataPayloadHashing> *, std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, TSTTableDataPayloadEqual, true>, std::__1::allocator<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSObject<TSTTableDataPayloadHashing> *, std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, TSTTableDataPayloadHash, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<NSObject<TSTTableDataPayloadHashing> *, std::__1::__hash_value_type<NSObject<TSTTableDataPayloadHashing> *, TSTTableDataObject *>, TSTTableDataPayloadEqual, true> >="__value_"f}}}
@"NSObject<TSDContainerInfo><TSWPStorageParent>"
@"TSTTableDataListSegment"
I32@0:8@16I24B28
@28@0:8I16^B20
v40@0:8@16Q24@32
@44@0:8@16@24@32B40
I24@0:8@16
v40@0:8@16r^{TableStylePropertiesArchive=^^?{InternalMetadataWithArena=^v}{HasBits<3>=[3I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{FillArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{StrokePresetListArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}BBBBBBBBiBBBBBi}24@32
v32@0:8^{TableStylePropertiesArchive=^^?{InternalMetadataWithArena=^v}{HasBits<3>=[3I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{FillArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{StrokePresetListArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}BBBBBBBBiBBBBBi}16@24
@76@0:8i16@20{CGAffineTransform=dddddd}28
@"TSKSelection"16@0:8
v24@0:8@"TSKSelection"16
@"TSKSelection"24@0:8@"TSKSelection"16
@"TSTCellSelection"
@32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16i24C28
@24@0:8r^{ColumnAggregateArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UUID}Ii}16
v32@0:8^{ColumnAggregateArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UUID}Ii}16@24
@56@0:8r^{TileStorage=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::TileStorage_Tile>=^{Arena}ii^{Rep}}IB}16r^{TableRBTree=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::TableRBTree_Node>=^{Arena}ii^{Rep}}}24Q32@40@48
v32@0:8^{vector<std::__1::pair<unsigned int, unsigned long>, std::__1::allocator<std::__1::pair<unsigned int, unsigned long> > >=^{pair<unsigned int, unsigned long>}^{pair<unsigned int, unsigned long>}{__compressed_pair<std::__1::pair<unsigned int, unsigned long> *, std::__1::allocator<std::__1::pair<unsigned int, unsigned long> > >=^{pair<unsigned int, unsigned long>}}}16^{unordered_map<unsigned long, TSPLazyReference *, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, TSPLazyReference *> > >={__hash_table<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, TSPLazyReference *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, std::__1::hash<unsigned long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, TSPLazyReference *>, std::__1::equal_to<unsigned long>, true> >=f}}}24
v40@0:8^{TileStorage=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::TileStorage_Tile>=^{Arena}ii^{Rep}}IB}16^{TableRBTree=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::TableRBTree_Node>=^{Arena}ii^{Rep}}}24@32
@28@0:8Q16B24
@28@0:8I16^{_NSRange=QQ}20
B40@0:8{TSUCellCoord=ISBB}16@24^@32
{multimap<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *>, std::__1::less<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> > > >={__tree<std::__1::__value_type<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> >, std::__1::__map_value_compare<TSUCellCoord, std::__1::__value_type<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> >, std::__1::less<TSUCellCoord>, true>, std::__1::allocator<std::__1::__value_type<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSUCellCoord, std::__1::__value_type<TSUCellCoord, std::__1::tuple<unsigned int, unsigned long, TSTCellStorage *> >, std::__1::less<TSUCellCoord>, true> >=Q}}}16@0:8
[16@"TSTTableTileGroup"]
@40@0:8r^{HeaderStorage=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::Reference>=^{Arena}ii^{Rep}}I}16@24@32
v32@0:8^{HeaderStorage=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::Reference>=^{Arena}ii^{Rep}}I}16@24
@48@0:8I16C20d24{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
d20@0:8I16
v24@0:8C16I20
v28@0:8I16Q20
[16@"TSTTableHeaderStorageBucket"]
@34@0:8Q16{TSUModelColumnIndex=S}24@26
@32@0:8@16Q24
@40@0:8@16{_NSRange=QQ}24
@"TSUSparseArray"
Q24@0:8r^{TSUCellCoord=ISBB}16
{TSUCellCoord=ISBB}24@0:8Q16
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}32@0:8r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16r^{TSUModelCellCoord={TSUCellCoord=ISBB}}24
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}36@0:8r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16r^{TSUModelCellCoord={TSUCellCoord=ISBB}}24B32
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}32@0:8@16r^{TSUModelCellCoord={TSUCellCoord=ISBB}}24
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}36@0:8@16r^{TSUModelCellCoord={TSUCellCoord=ISBB}}24B32
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32@0:8@16r^{TSUModelCellCoord={TSUCellCoord=ISBB}}24
@32@0:8{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
Q80@0:8{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
v32@0:8r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16Q24
r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8Q16
{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}48@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16Q32r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}40
@48@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16Q32r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}40
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}28@0:8Q16B24
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@0:8Q16
@40@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16r^{FormulaStoreArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::FormulaStoreArchive_FormulaStorePair>=^{Arena}ii^{Rep}}I}24@32
v32@0:8^{FormulaStoreArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::FormulaStoreArchive_FormulaStorePair>=^{Arena}ii^{Rep}}I}16@24
@28@0:8@16I24
d32@0:8Q16d24
d56@0:8Q16d24@32^d40^d48
{CGSize=dd}24@0:8@16
d56@0:8Q16d24@"<TSWPLayoutTarget>"32^d40^d48
{CGSize=dd}24@0:8@"<TSWPLayoutTarget>"16
@"TSWPPadding"16@0:8
@"TSWPPadding"24@0:8@"NSObject<TSWPLayoutTarget>"16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
{CGRect={CGPoint=dd}{CGSize=dd}}40@0:8@16{CGSize=dd}24
d24@0:8@16
{CGSize=dd}16@0:8
{CGRect={CGPoint=dd}{CGSize=dd}}60@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48B56
Q24@0:8@"TSWPLayout"16
i24@0:8@"TSWPLayout"16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@"TSWPLayout"16
{CGRect={CGPoint=dd}{CGSize=dd}}40@0:8@"TSWPLayout"16{CGSize=dd}24
@"<NSFastEnumeration>"24@0:8@"TSWPLayout"16
#24@0:8@"TSWPLayout"16
v24@0:8@"TSWPLayout"16
@"<TSWPStyleProvider>"16@0:8
d24@0:8@"TSWPLayout"16
B24@0:8@"TSWPLayout"16
Q24@0:8@"TSWPAttachment"16
{CGRect={CGPoint=dd}{CGSize=dd}}60@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@"TSKSelectionPath"48B56
v64@0:8@16{_NSRange=QQ}24q40Q48@56
v64@0:8@"TSWPStorage"16{_NSRange=QQ}24q40Q48@"NSArray"56
{CGPoint=dd}16@0:8
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v104@0:8@16I24{CGAffineTransform=dddddd}28d76d84B92@?96
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24@0:8@16
d32@0:8@16d24
{CGPoint=dd}24@0:8@16
{CGRect={CGPoint=dd}{CGSize=dd}}32@0:8{TSUCellCoord=ISBB}16^B24
{CGSize=dd}32@0:8{?={?=II}{?=II}}16
B32@0:8{?={?=II}{?=II}}16
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8@16{CGSize=dd}24^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}40
{UIEdgeInsets=dddd}16@0:8
@"TSTLayoutHint"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@"TSTLayoutSpaceBundle"
{?="tableNameHeight"d"scaleToFitParent"{CGSize="width"d"height"d}"scaleToFitEnclosingTextColumn"{CGSize="width"d"height"d}}
@"TSWPLayout"
{UIEdgeInsets="top"d"left"d"bottom"d"right"d}
{CGSize="width"d"height"d}
@24@0:8r^{AccumulatorArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{CellValueArchive}^{CellValueArchive}^{CellValueArchive}^{CellValueArchive}IIIIIIddIB}16
v24@0:8^{AccumulatorArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{CellValueArchive}^{CellValueArchive}^{CellValueArchive}^{CellValueArchive}IIIIIIddIB}16
v24@0:8r^{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}16
{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}20@0:8C16
{TSCEValue="_numberValue"{TSCENumberValue="_vptr$TSCEAbstractValue"^^?"_decimal"{TSUDecimal="_decimal"{?="w"[2Q]}}"_baseUnits"[1i]"_format"{TSCEFormat="_formatStruct"{TSCEFormatStruct="mFormatType"i""(?="mNumberStruct"{?="mCurrencyCodeIndex"b16"mDecimalPlaces"b8"mNegativeStyle"b3"mShowThousandsSeparator"b1"mUseAccountingStyle"b1}"mFractionFormatStruct"{?="mFractionAccuracy"b8}"mBaseFormatStruct"{?="mBase"b8"mBasePlaces"b8"mBaseUseMinusSign"b1}"mDurationFormatStruct"{?="mUseAutomaticUnits"b1"mDurationUnitSmallest"i"mDurationUnitLargest"i"mDurationStyle"i})"_dateTimeFormat"@"TSKDateTimeFormat""_customFormatWrapper"@"TSKCustomFormatWrapper""_booleanFormat"@"TSKBooleanFormat"}"_formatState"C}"_isUnitlessZero"B}"_buff"[19Q]"_type"i}
{TSCENumberValue="_vptr$TSCEAbstractValue"^^?"_decimal"{TSUDecimal="_decimal"{?="w"[2Q]}}"_baseUnits"[1i]"_format"{TSCEFormat="_formatStruct"{TSCEFormatStruct="mFormatType"i""(?="mNumberStruct"{?="mCurrencyCodeIndex"b16"mDecimalPlaces"b8"mNegativeStyle"b3"mShowThousandsSeparator"b1"mUseAccountingStyle"b1}"mFractionFormatStruct"{?="mFractionAccuracy"b8}"mBaseFormatStruct"{?="mBase"b8"mBasePlaces"b8"mBaseUseMinusSign"b1}"mDurationFormatStruct"{?="mUseAutomaticUnits"b1"mDurationUnitSmallest"i"mDurationUnitLargest"i"mDurationStyle"i})"_dateTimeFormat"@"TSKDateTimeFormat""_customFormatWrapper"@"TSKCustomFormatWrapper""_booleanFormat"@"TSKBooleanFormat"}"_formatState"C}"_isUnitlessZero"B}
{TSCEDateValue="_vptr$TSCEAbstractValue"^^?"mDate"@"NSDate""mFormat"{TSCEFormat="_formatStruct"{TSCEFormatStruct="mFormatType"i""(?="mNumberStruct"{?="mCurrencyCodeIndex"b16"mDecimalPlaces"b8"mNegativeStyle"b3"mShowThousandsSeparator"b1"mUseAccountingStyle"b1}"mFractionFormatStruct"{?="mFractionAccuracy"b8}"mBaseFormatStruct"{?="mBase"b8"mBasePlaces"b8"mBaseUseMinusSign"b1}"mDurationFormatStruct"{?="mUseAutomaticUnits"b1"mDurationUnitSmallest"i"mDurationUnitLargest"i"mDurationStyle"i})"_dateTimeFormat"@"TSKDateTimeFormat""_customFormatWrapper"@"TSKCustomFormatWrapper""_booleanFormat"@"TSKBooleanFormat"}"_formatState"C}}
@24@0:8r^{ColumnAggregateListArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::ColumnAggregateArchive>=^{Arena}ii^{Rep}}}16
v32@0:8^{ColumnAggregateListArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::ColumnAggregateArchive>=^{Arena}ii^{Rep}}}16@24
@40@0:8@16{TSUViewCellCoord={TSUCellCoord=ISBB}}24@32
@32@0:8r^{RefTypeHolder<TSCERangeRef, 0>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@24
@32@0:8r^{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@24
@36@0:8r^{TSUChromeColumnIndex=S}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24B32
@"NSString"32@0:8r^{RefTypeHolder<TSCERangeRef, 0>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@"TSCERefNamingContext"24
@"NSString"32@0:8r^{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@"TSCERefNamingContext"24
@"NSString"36@0:8r^{TSUChromeColumnIndex=S}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24B32
@"NSString"32@0:8@"TSCEWrappedRangeRef"16@"TSCERefNamingContext"24
@32@0:8r^{TSUModelCellCoord={TSUCellCoord=ISBB}}16@24
@40@0:8r^{TSUModelCellCoord={TSUCellCoord=ISBB}}16@24^{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}32
@44@0:8r^{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@24B32@36
@56@0:8@16B24B28^{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}32@40@48
@36@0:8@16@24B32
v32@0:8r^{WPTableInfoArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{TableInfoArchive}^{Reference}}16@24
v56@0:8@16i24@28I36{TSTSimpleRange=qQ}40
v36@0:8@16i24{TSUCellCoord=ISBB}28
v24@0:8{?=II}16
v56@0:8@16@?24@?32@?40@?48
v52@0:8{vector<TSTCell *, std::__1::allocator<TSTCell *> >=^@^@{__compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> >=^@}}16{TSUModelRowIndex=I}40^{vector<TSUModelColumnIndex, std::__1::allocator<TSUModelColumnIndex> >=^{TSUModelColumnIndex}^{TSUModelColumnIndex}{__compressed_pair<TSUModelColumnIndex *, std::__1::allocator<TSUModelColumnIndex> >=^{TSUModelColumnIndex}}}44
@"NSIndexSet"
@"TSTStrokeLayer"
v48@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}32
v40@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16Q32
v40@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16@?32
{vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> >=^{TSUModelCellRect}^{TSUModelCellRect}{__compressed_pair<TSUModelCellRect *, std::__1::allocator<TSUModelCellRect> >=^{TSUModelCellRect}}}16@0:8
{vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> >=^{TSUModelCellRect}^{TSUModelCellRect}{__compressed_pair<TSUModelCellRect *, std::__1::allocator<TSUModelCellRect> >=^{TSUModelCellRect}}}32@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> >=^{TSUModelCellRect}^{TSUModelCellRect}{__compressed_pair<TSUModelCellRect *, std::__1::allocator<TSUModelCellRect> >=^{TSUModelCellRect}}}24@0:8@16
B32@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}32@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{unordered_map<unsigned long, TSUModelCellRect, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, TSUModelCellRect> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, TSUModelCellRect> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, std::__1::hash<unsigned long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, TSUModelCellRect>, std::__1::equal_to<unsigned long>, true> >="__value_"f}}}
{TSCEBitGrid="_tiles"{vector<TSCEBitGridTile *, std::__1::allocator<TSCEBitGridTile *> >="__begin_"^^{TSCEBitGridTile}"__end_"^^{TSCEBitGridTile}"__end_cap_"{__compressed_pair<TSCEBitGridTile **, std::__1::allocator<TSCEBitGridTile *> >="__value_"^^{TSCEBitGridTile}}}"_count"Q"_lastTileFoundAtIndex"Q"_bitsInColumn"{unordered_map<unsigned int, TSUIndexSet *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, TSUIndexSet *> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, TSUIndexSet *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, std::__1::hash<unsigned int>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, TSUIndexSet *>, std::__1::equal_to<unsigned int>, true> >="__value_"f}}}}
^{TSCEBitGridTransaction=^{TSCEBitGrid}{vector<std::__1::pair<_NSRange, _NSRange>, std::__1::allocator<std::__1::pair<_NSRange, _NSRange> > >=^{pair<_NSRange, _NSRange>}^{pair<_NSRange, _NSRange>}{__compressed_pair<std::__1::pair<_NSRange, _NSRange> *, std::__1::allocator<std::__1::pair<_NSRange, _NSRange> > >=^{pair<_NSRange, _NSRange>}}}{vector<std::__1::pair<_NSRange, _NSRange>, std::__1::allocator<std::__1::pair<_NSRange, _NSRange> > >=^{pair<_NSRange, _NSRange>}^{pair<_NSRange, _NSRange>}{__compressed_pair<std::__1::pair<_NSRange, _NSRange> *, std::__1::allocator<std::__1::pair<_NSRange, _NSRange> > >=^{pair<_NSRange, _NSRange>}}}}
@"NSMutableSet"
@"TSTCellUIDList"
d24@0:8@"TSDDrawableInfo"16
{CGSize=dd}32@0:8@16@24
{CGSize=dd}32@0:8@"TSPData"16@"<NSObject>"24
{?={?=II}{?=II}}24@0:8@16
{?={?=II}{?=II}}40@0:8{?={?=II}{?=II}}16@32
@28@0:8@16i24
v32@0:8{?={?=II}{?=II}}16
{?={?=II}{?=II}}16@0:8
{?={?=II}{?=II}}48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
{CGRect={CGPoint=dd}{CGSize=dd}}32@0:8{?={?=II}{?=II}}16
{CGRect={CGPoint=dd}{CGSize=dd}}32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
v64@0:8{CGAffineTransform=dddddd}16
{CGPoint=dd}32@0:8{CGPoint=dd}16
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
{?=II}36@0:8{CGPoint=dd}16B32
{?=II}32@0:8{CGPoint=dd}16
v40@0:8d16^d24^d32
d32@0:8d16d24
v40@0:8^{CGPoint=dd}16^{CGPoint=dd}24^d32
@52@0:8{?={?=II}{?=II}}16^{CGAffineTransform=dddddd}32d40B48
@24@0:8^{CGAffineTransform=dddddd}16
{CGRect={CGPoint=dd}{CGSize=dd}}40@0:8{?={?=II}{?=II}}16d32
v112@0:8@16^{CGContext=}24{CGPoint=dd}32{CGPoint=dd}48d64d72{CGRect={CGPoint=dd}{CGSize=dd}}80
I52@0:8I16{?={?=II}{?=II}}20B36i40^{CGContext=}44
v44@0:8{?={?=II}{?=II}}16B32^{CGContext=}36
@52@0:8{?={?=II}{?=II}}16S32@36^B44
@56@0:8{?={?=II}{?=II}}16I32@36B44^B48
I24@0:8d16
d24@0:8d16
i24@0:8{?=II}16
{CGPoint=dd}24@0:8{?=II}16
{?={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dddd}44@0:8{?={?=II}{?=II}}16i32^d36
v24@0:8^{?={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dddd}16
{?={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dddd}40@0:8{?={?=II}{?=II}}16^d32
{?={CGPoint=dd}{CGPoint=dd}{CGPoint=dd}{CGPoint=dd}dddd}32@0:8{?={?=II}{?=II}}16
{CGAffineTransform=dddddd}16@0:8
{_opaque_pthread_rwlock_t="__sig"q"__opaque"[192c]}
@"TSTLayoutSpaceBezierPathCache"
@"TSTCoordinateArray"
{CGPoint="x"d"y"d}
{?="topLeft"{?="column"I"row"I}"bottomRight"{?="column"I"row"I}}
{CGAffineTransform="a"d"b"d"c"d"d"d"tx"d"ty"d}
@28@0:8I16I20B24
v40@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
v32@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
v32@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
v40@0:8@"TSTCell"16{TSUModelCellCoord={TSUCellCoord=ISBB}}24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
v32@0:8@"TSTCellMap"16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
v32@0:8@"TSTConcurrentCellMap"16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
@"TSTExpressionNode"
@52@0:8@16@24I32Q36Q44
{TSTCSENodeData=QQ}24@0:8@16
@60@0:8@16@24{TSUCellCoord=ISBB}32B40^{TSCESymbolTable=@I{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={__hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true> >=f}}}{unordered_map<unsigned int, NSString *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, NSString *> > >={__hash_table<std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, NSString *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true> >=f}}}{vector<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}{__compressed_pair<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > *, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}}}}44@52
v40@0:8^{TSCEASTNodeArray=*QQ@B}16{TSUCellCoord=ISBB}24^{TSCESymbolTable=@I{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={__hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true> >=f}}}{unordered_map<unsigned int, NSString *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, NSString *> > >={__hash_table<std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, NSString *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true> >=f}}}{vector<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}{__compressed_pair<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > *, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}}}}32
v32@0:8r^{VariableNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}I}16@24
v32@0:8^{VariableNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}I}16@24
@72@0:8i16{_NSRange=QQ}20i36i40{_NSRange=QQ}44B60Q64
@80@0:8i16{_NSRange=QQ}20i36i40{_NSRange=QQ}44B60Q64Q72
q24@0:8@16
B40@0:8@16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24
{TSTCellRegionGathererMap="_cellRangeIndex"Q"_rowRange"{_NSRange="location"Q"length"Q}"_cellRanges"{unordered_map<unsigned long, TSUCellRect, std::__1::hash<unsigned long>, std::__1::equal_to<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, TSUCellRect> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned long, TSUCellRect>, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, TSUCellRect>, std::__1::hash<unsigned long>, true>, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, TSUCellRect>, std::__1::equal_to<unsigned long>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned long, TSUCellRect> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned long, TSUCellRect>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned long, std::__1::__hash_value_type<unsigned long, TSUCellRect>, std::__1::hash<unsigned long>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned long, std::__1::__hash_value_type<unsigned long, TSUCellRect>, std::__1::equal_to<unsigned long>, true> >="__value_"f}}}"_encodedJoinCoordToCandidateIndexMap"{unordered_map<TSTCellRegionGathererKey, unsigned long, std::__1::hash<TSTCellRegionGathererKey>, std::__1::equal_to<TSTCellRegionGathererKey>, std::__1::allocator<std::__1::pair<const TSTCellRegionGathererKey, unsigned long> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, std::__1::__unordered_map_hasher<TSTCellRegionGathererKey, std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, std::__1::hash<TSTCellRegionGathererKey>, true>, std::__1::__unordered_map_equal<TSTCellRegionGathererKey, std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, std::__1::equal_to<TSTCellRegionGathererKey>, true>, std::__1::allocator<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSTCellRegionGathererKey, std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, std::__1::hash<TSTCellRegionGathererKey>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSTCellRegionGathererKey, std::__1::__hash_value_type<TSTCellRegionGathererKey, unsigned long>, std::__1::equal_to<TSTCellRegionGathererKey>, true> >="__value_"f}}}}
@32@0:8r^{CategoryOwnerArchive_GroupByArchive_AggregatorArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UUID}^{CategoryOwnerArchive_GroupByArchive_AggNodeArchive}}16@24
v24@0:8^{CategoryOwnerArchive_GroupByArchive_AggregatorArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UUID}^{CategoryOwnerArchive_GroupByArchive_AggNodeArchive}}16
{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}36@0:8C16{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}20
{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}28@0:8C16C20{TSUViewRowIndex=I}24
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}28@0:8C16C20{TSUViewRowIndex=I}24
{vector<TSCECellRef, std::__1::allocator<TSCECellRef> >=^{TSCECellRef}^{TSCECellRef}{__compressed_pair<TSCECellRef *, std::__1::allocator<TSCECellRef> >=^{TSCECellRef}}}32@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
{vector<TSCECellRef, std::__1::allocator<TSCECellRef> >=^{TSCECellRef}^{TSCECellRef}{__compressed_pair<TSCECellRef *, std::__1::allocator<TSCECellRef> >=^{TSCECellRef}}}24@0:8@16
@"TSTAggNode"
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16^{CGContext=}48
v32@0:8^{TableStylePresetArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}^{Reference}i}16@24
@"TSTTableStyleNetwork"
v28@0:8B16Q20
v28@0:8B16@20
v36@0:8B16{_NSRange=QQ}20
Q32@0:8{_NSRange=QQ}16
B32@0:8{_NSRange=QQ}16
Q32@0:8Q16Q24
v40@0:8{_NSRange=QQ}16Q32
v32@0:8^{TableStrokePresetArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}i}16@24
@44@0:8@16Q24@32i40
@48@0:8@16Q24@32@?40
@40@0:8@16@24Q32
@32@0:8^{_NSZone=}16@24
v32@0:8r^{TableStyleNetworkArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}I}16@24
v36@0:8^{TableStyleNetworkArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}I}16@24B32
@36@0:8Q16@24B32
@"TSTTableControlCellSelection"
@32@0:8Q16@24
@32@0:8r^{StrokePresetListArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::Deprecated_StrokePresetDataArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TST::StrokePresetDataArchive>=^{Arena}ii^{Rep}}i}16@24
v32@0:8^{StrokePresetListArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::Deprecated_StrokePresetDataArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TST::StrokePresetDataArchive>=^{Arena}ii^{Rep}}i}16@24
[15@"TSTTableStrokePresetData"]
@44@0:8I16@20@28@36
@32@0:8r^{StrokePresetDataArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}i}16@24
@32@0:8r^{Deprecated_StrokePresetDataArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}^{Deprecated_TableStrokeArchive}i}16@24
v32@0:8^{StrokePresetDataArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}i}16@24
@"TSDStroke"
v32@0:8r^{ThemeArchive=^^?{ExtensionSet=^{Arena}SS(AllocatedData=^{KeyValue}^{map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > >})}{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::Color>=^{Arena}ii^{Rep}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{Reference}^{Reference}}16@24
v32@0:8^{ThemeArchive=^^?{ExtensionSet=^{Arena}SS(AllocatedData=^{KeyValue}^{map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > >})}{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::Color>=^{Arena}ii^{Rep}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{Reference}^{Reference}}16@24
@"<TSTCellIteratorData>"
^{TSCEFunctionArgSpec=iiCi{unordered_set<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={__hash_table<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCEArgumentType, void *> > >={__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSCEArgumentType> >=Q}{__compressed_pair<float, std::__1::equal_to<TSCEArgumentType> >=f}}}{vector<TSCEValue, std::__1::allocator<TSCEValue> >=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::__1::allocator<TSCEValue> >=^{TSCEValue}}}s@ddsBBBBBBB}16@0:8
v24@0:8^{TSCEFunctionArgSpec=iiCi{unordered_set<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={__hash_table<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCEArgumentType, void *> > >={__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSCEArgumentType> >=Q}{__compressed_pair<float, std::__1::equal_to<TSCEArgumentType> >=f}}}{vector<TSCEValue, std::__1::allocator<TSCEValue> >=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::__1::allocator<TSCEValue> >=^{TSCEValue}}}s@ddsBBBBBBB}16
v32@0:8^{TSCEASTNodeArray=*QQ@B}16{TSUCellCoord=ISBB}24
v52@0:8@16C24@28@36@44
v48@0:8@16Q24@32^{TSCESymbolTable=@I{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={__hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true> >=f}}}{unordered_map<unsigned int, NSString *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, NSString *> > >={__hash_table<std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, NSString *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true> >=f}}}{vector<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}{__compressed_pair<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > *, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}}}}40
v24@0:8^{TSCESymbolTable=@I{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={__hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true> >=f}}}{unordered_map<unsigned int, NSString *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, NSString *> > >={__hash_table<std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, NSString *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true> >=f}}}{vector<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}{__compressed_pair<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > *, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}}}}16
v36@0:8@16@24I32
B24@0:8^{TSCESymbolTable=@I{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={__hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true> >=f}}}{unordered_map<unsigned int, NSString *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, NSString *> > >={__hash_table<std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, NSString *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true> >=f}}}{vector<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}{__compressed_pair<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > *, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}}}}16
@32@0:8^{TSCESymbolTable=@I{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={__hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true> >=f}}}{unordered_map<unsigned int, NSString *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, NSString *> > >={__hash_table<std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, NSString *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true> >=f}}}{vector<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}{__compressed_pair<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > *, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}}}}16^@24
@48@0:8@16@24^{TSCESymbolTable=@I{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={__hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true> >=f}}}{unordered_map<unsigned int, NSString *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, NSString *> > >={__hash_table<std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, NSString *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true> >=f}}}{vector<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}{__compressed_pair<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > *, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}}}}32^@40
@40@0:8@16^{TSCESymbolTable=@I{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={__hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true> >=f}}}{unordered_map<unsigned int, NSString *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, NSString *> > >={__hash_table<std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, NSString *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true> >=f}}}{vector<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}{__compressed_pair<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > *, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}}}}24^@32
v32@0:8r^{ExpressionNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::Reference>=^{Arena}ii^{Rep}}QQ}16@24
v32@0:8^{ExpressionNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::Reference>=^{Arena}ii^{Rep}}QQ}16@24
^{TSCEFunctionArgSpec=iiCi{unordered_set<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={__hash_table<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCEArgumentType, void *> > >={__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSCEArgumentType> >=Q}{__compressed_pair<float, std::__1::equal_to<TSCEArgumentType> >=f}}}{vector<TSCEValue, std::__1::allocator<TSCEValue> >=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::__1::allocator<TSCEValue> >=^{TSCEValue}}}s@ddsBBBBBBB}
@"TSTWPTokenAttachment"
i36@0:8Q16i24@28
i32@0:8Q16@24
Q44@0:8Q16Q24i32@36
@48@0:8@16@24{TSUModelCellCoord={TSUCellCoord=ISBB}}32@40
@60@0:8@16@24{TSUViewCellCoord={TSUCellCoord=ISBB}}32r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}40r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}48B56
@60@0:8@16@24{TSUModelCellCoord={TSUCellCoord=ISBB}}32r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}40r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}48B56
@56@0:8@16@24{TSUViewCellCoord={TSUCellCoord=ISBB}}32r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}40r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}48
@56@0:8@16@24{TSUModelCellCoord={TSUCellCoord=ISBB}}32r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}40r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}48
@40@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24@32
{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@0:8
{TSUModelCellCoord="_coord"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}}
v32@0:8I16I20@?24
@"TSTPopUpMenuModel"
@52@0:8@16S24@28Q36Q44
v32@0:8r^{OperatorNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}I}16@24
v32@0:8^{OperatorNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}I}16@24
@32@0:8r^{StrokeSelectionArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}i}16@24
v32@0:8^{StrokeSelectionArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}i}16@24
@56@0:8@16r^{TSUDecimal={?=[2Q]}}24@32Q40Q48
@56@0:8@16@24@32Q40Q48
v32@0:8r^{TSUDecimal={?=[2Q]}}16@24
v32@0:8r^{NumberNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}dQQ}16@24
v32@0:8^{NumberNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}dQQ}16@24
{TSUDecimal={?=[2Q]}}16@0:8
{TSUDecimal="_decimal"{?="w"[2Q]}}
B24@0:8i16i20
@32@0:8^{?={?=Cb8b16b16b16b16b16}[0C]}16@24
v32@0:8^{?={?=Cb8b16b16b16b16b16}[0C]}16@24
v36@0:8^{?={?=Cb8b16b16b16b16b16}[0C]}16@24B32
@36@0:8@16B24^B28
v28@0:8^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16B24
v24@0:8^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
v24@0:8r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
v40@0:8@16B24B28B32B36
v28@0:8@16S24
v24@0:8S16B20
v28@0:8B16i20B24
@28@0:8i16B20B24
@24@0:8i16B20
B24@0:8i16B20
@"NSObject"
@"TSTConditionalStyleSet"
@"TSTCellBorder"
@"TSKFormat"
@"TSDCommentStorage"
@"TSTImportWarningSet"
@"TSTCellSpec"
@40@0:8@16@24r^{vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}}}32
@28@0:8^{_NSZone=}16B24
r^{vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}}}16@0:8
@24@0:8r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
v32@0:8@16r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24
v40@0:8r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}16r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}24r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}32
@28@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16B24
{vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >="__begin_"^{TSUCellCoord}"__end_"^{TSUCellCoord}"__end_cap_"{__compressed_pair<TSUCellCoord *, std::__1::allocator<TSUCellCoord> >="__value_"^{TSUCellCoord}}}
{unordered_map<TSUCellCoord, TSTCell *, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSTCell *> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, std::__1::__unordered_map_hasher<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, std::__1::hash<TSUCellCoord>, true>, std::__1::__unordered_map_equal<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, std::__1::equal_to<TSUCellCoord>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUCellCoord, TSTCell *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, std::__1::hash<TSUCellCoord>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTCell *>, std::__1::equal_to<TSUCellCoord>, true> >="__value_"f}}}
{unordered_map<TSTCellUID, TSTCell *, std::__1::hash<TSTCellUID>, std::__1::equal_to<TSTCellUID>, std::__1::allocator<std::__1::pair<const TSTCellUID, TSTCell *> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, std::__1::__unordered_map_hasher<TSTCellUID, std::__1::__hash_value_type<TSTCellUID, TSTCell *>, std::__1::hash<TSTCellUID>, true>, std::__1::__unordered_map_equal<TSTCellUID, std::__1::__hash_value_type<TSTCellUID, TSTCell *>, std::__1::equal_to<TSTCellUID>, true>, std::__1::allocator<std::__1::__hash_value_type<TSTCellUID, TSTCell *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTCellUID, TSTCell *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSTCellUID, std::__1::__hash_value_type<TSTCellUID, TSTCell *>, std::__1::hash<TSTCellUID>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSTCellUID, std::__1::__hash_value_type<TSTCellUID, TSTCell *>, std::__1::equal_to<TSTCellUID>, true> >="__value_"f}}}
{pair<TSTCell *, TSTCellUID>=@{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@0:8
r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@0:8
@"TSTCellMap"
@"TSTCellUIDIterator"
d36@0:8I16{TSTSimpleRange=qQ}20
{_opaque_pthread_rwlock_t=q[192c]}16@0:8
v216@0:8{_opaque_pthread_rwlock_t=q[192c]}16
{vector<TSTStrokeWidthCacheEntry, std::__1::allocator<TSTStrokeWidthCacheEntry> >="__begin_"^{TSTStrokeWidthCacheEntry}"__end_"^{TSTStrokeWidthCacheEntry}"__end_cap_"{__compressed_pair<TSTStrokeWidthCacheEntry *, std::__1::allocator<TSTStrokeWidthCacheEntry> >="__value_"^{TSTStrokeWidthCacheEntry}}}
@40@0:8@16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}24r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}32
v24@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16
v28@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16S24
v28@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16I24
v28@0:8r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}16B24
{unordered_map<TSU::UUIDData<TSP::UUIDData>, unsigned short, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, unsigned short> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, std::__1::hash<TSUUUID>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >="__value_"f}}}
{unordered_map<TSU::UUIDData<TSP::UUIDData>, unsigned int, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, unsigned int> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, std::__1::hash<TSUUUID>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned int>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >="__value_"f}}}
@32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
@40@0:8r^{CategoryOwnerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CategoryOwnerArchive_GroupByArchive>=^{Arena}ii^{Rep}}^{UUID}}16@24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
v32@0:8^{CategoryOwnerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CategoryOwnerArchive_GroupByArchive>=^{Arena}ii^{Rep}}^{UUID}}16@24
v32@0:8r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}16@24
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}36@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24B32
@40@0:8{TSUCellCoord=ISBB}16@24@32
@32@0:8r^{CategoryOwnerArchive_GroupByArchive_AggNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive>=^{Arena}ii^{Rep}}^{CellCoordinateArchive}^{AccumulatorArchive}}16@24
v24@0:8^{CategoryOwnerArchive_GroupByArchive_AggNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CategoryOwnerArchive_GroupByArchive_AggNodeArchive>=^{Arena}ii^{Rep}}^{CellCoordinateArchive}^{AccumulatorArchive}}16
@"TSTAccumulator"
@"TSTAggregator"
@52@0:8@16i24@28Q36Q44
s16@0:8
v32@0:8r^{FunctionNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}I}16@24
v32@0:8^{FunctionNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}I}16@24
@"TSTFunctionEndNode"
v32@0:8r^{LetNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}}16@24
v32@0:8^{LetNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}}16@24
Q24@0:8C16B20
C24@0:8Q16
v32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16@24
v24@0:8@"TSTGroupNode"16
v32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16@"TSTGroupNode"24
i26@0:8{TSUModelColumnIndex=S}16@18
v32@0:8C16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}20C28
@36@0:8I16{TSUModelCellCoord={TSUCellCoord=ISBB}}20^B28
v28@0:8Q16C24
Q20@0:8C16
@28@0:8C16o^B20
v40@0:8@16@24@32
^{vector<double, std::__1::allocator<double> >=^d^d{__compressed_pair<double *, std::__1::allocator<double> >=^d}}16@0:8
^{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}16@0:8
@"TSTSummaryCellVendor"
@"TSTCategoryAggregateFormulaOwner"
{vector<double, std::__1::allocator<double> >="__begin_"^d"__end_"^d"__end_cap_"{__compressed_pair<double *, std::__1::allocator<double> >="__value_"^d}}
{vector<int, std::__1::allocator<int> >="__begin_"^i"__end_"^i"__end_cap_"{__compressed_pair<int *, std::__1::allocator<int> >="__value_"^i}}
v32@0:8^{SummaryModelGroupByChangeStateArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedField<double>=ii(Pointer=^{Arena}^{Rep})}{RepeatedField<double>=ii(Pointer=^{Arena}^{Rep})}{RepeatedField<unsigned int>=ii(Pointer=^{Arena}^{Rep})}^{Reference}}16@24
@32@0:8r^{SummaryModelGroupByChangeStateArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedField<double>=ii(Pointer=^{Arena}^{Rep})}{RepeatedField<double>=ii(Pointer=^{Arena}^{Rep})}{RepeatedField<unsigned int>=ii(Pointer=^{Arena}^{Rep})}^{Reference}}16@24
@"TSURetainedPointerKeyDictionary"
@60@0:8@16{TSTSimpleRange=qQ}24i40@44@52
{TSTSimpleRange=qQ}16@0:8
v32@0:8{TSTSimpleRange=qQ}16
@"<TSTStrokeLayerStrokeAndRange>"
{TSTSimpleRange="origin"q"length"Q}
@48@0:8q16@24^@32@40
v44@0:8@16{TSTSimpleRange=qQ}24i40
@24@0:8d16
{TSUPreserveFlags=C}16@0:8
v17@0:8{TSUPreserveFlags=C}16
@24@0:8r^{TSCERelativeCellRef={TSCERelativeCellCoordinate=isBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}b1b1b1b1}16
r^{TSCERelativeCellRef={TSCERelativeCellCoordinate=isBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}b1b1b1b1}16@0:8
v24@0:8r^{TSCERelativeCellRef={TSCERelativeCellCoordinate=isBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}b1b1b1b1}16
@24@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16@0:8
v88@0:8{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16
@32@0:8r^{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16r^{TSUPreserveFlags=C}24
r^{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@0:8
{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
v24@0:8r^{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16
v32@0:8r^{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16r^{TSUPreserveFlags=C}24
v32@0:8r^{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16B24B28
@32@0:8@16B24B28
@28@0:8d16i24
{TSCEFormulaCreator=@?}32@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@24
v24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
{RefTypeHolder<TSCECellRef, 0>="_ref"{TSCECellRef="coordinate"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_tableUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}}}
{TSCERelativeCellRef="relativeCoord"{TSCERelativeCellCoordinate="row"i"column"s"_preserveRow"B"_preserveColumn"B}"tableUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"preserveColumn"b1"preserveRow"b1"isSpanningColumn"b1"isSpanningRow"b1}
@"TSTUIDRectRef"
{TSCECategoryRef="_groupByUid"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_columnUid"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_relativeGroupUid"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_absoluteGroupUid"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_aggType"C"_groupLevel"C"_preserveFlags"{TSUPreserveFlags="_flags"C}"_relativeColumn"s}
{TSUPreserveFlags="_flags"C}
(?="_boolValue"B"_duration"{?="_value"d"_units"i})
@40@0:8r^{HiddenStatesOwnerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::HiddenStatesArchive>=^{Arena}ii^{Rep}}^{UUID}}16@24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
v32@0:8^{HiddenStatesOwnerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::HiddenStatesArchive>=^{Arena}ii^{Rep}}^{UUID}}16@24
@44@0:8@16B24Q28Q36
v32@0:8r^{BooleanNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}B}16@24
v32@0:8^{BooleanNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}B}16@24
@56@0:8@16@24I32I36Q40Q48
v32@0:8r^{ArrayNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}II}16@24
v32@0:8^{ArrayNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}II}16@24
{TSCEVectorIndexPair=II}16@0:8
{TSCEVectorIndexPair="column"I"row"I}
v32@0:8r^{ListNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}}16@24
v32@0:8^{ListNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}}16@24
B32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16@24
@24@0:8r^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSK::FormatStructArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive>=^{Arena}ii^{Rep}}^{CellValueArchive}}16
v24@0:8^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSK::FormatStructArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TST::CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_FormatManagerArchive_RowSetArchive>=^{Arena}ii^{Rep}}^{CellValueArchive}}16
@72@0:8@16@24{TSUCellCoord=ISBB}32{CGRect={CGPoint=dd}{CGSize=dd}}40
@"TSWPPadding"
v32@0:8r^{StringNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}}16@24
v32@0:8^{StringNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}}16@24
@24@0:8r^{vector<TSU::UUIDRect<TSP::UUIDRect>, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}^{UUIDRect<TSP::UUIDRect>}{__compressed_pair<TSU::UUIDRect<TSP::UUIDRect> *, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}}}16
{vector<TSU::UUIDRect<TSP::UUIDRect>, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}^{UUIDRect<TSP::UUIDRect>}{__compressed_pair<TSU::UUIDRect<TSP::UUIDRect> *, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}}}24@0:8Q16
@24@0:8r^{CellUIDRegionArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::UUIDRectArchive>=^{Arena}ii^{Rep}}}16
v24@0:8^{CellUIDRegionArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::UUIDRectArchive>=^{Arena}ii^{Rep}}}16
{vector<TSU::UUIDRect<TSP::UUIDRect>, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >="__begin_"^{UUIDRect<TSP::UUIDRect>}"__end_"^{UUIDRect<TSP::UUIDRect>}"__end_cap_"{__compressed_pair<TSU::UUIDRect<TSP::UUIDRect> *, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >="__value_"^{UUIDRect<TSP::UUIDRect>}}}
{TSTDurationWrapper=d{?=b1iii}}16@0:8
v32@0:8r^{DateNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}}16@24
v32@0:8^{DateNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}}16@24
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}44@0:8r^{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16C24@28r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}36
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}52@0:8r^{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24C40@44
{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}32@0:8r^{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@24
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}36@0:8r^{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16@24C32
B32@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@24
C32@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@24
@68@0:8@16@24@32r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}40r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}48@56B64
@60@0:8@16@24@32r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}40@48B56
@64@0:8@16@24r^{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}32C40r^{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}44@52B60
@64@0:8@16@24r^{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}32C40r^{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}44@52B60
@64@0:8@16@24r^{RefTypeHolder<TSCERangeRef, 0>=}32C40r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}44@52B60
@56@0:8@16@24r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}32r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}40@48
v28@0:8r^{RefTypeHolder<TSCERangeRef, 0>=}16C24
@28@0:8@16C24
v44@0:8^{TSCEASTNodeArray=*QQ@B}16{TSUCellCoord=ISBB}24C32{TSUCellCoord=ISBB}36
v32@0:8r^{ReferenceNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}^{RangeReferenceArchive}^{UUID}^{UUIDCoordArchive}^{UUIDCoordArchive}^{CategoryReferenceArchive}^{UUIDRectArchive}^{CellReferenceArchive}I}16@24
v32@0:8^{ReferenceNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}^{RangeReferenceArchive}^{UUID}^{UUIDCoordArchive}^{UUIDCoordArchive}^{CategoryReferenceArchive}^{UUIDRectArchive}^{CellReferenceArchive}I}16@24
{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@0:8
v40@0:8{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
@"TSTReferenceColorHelper"
{TSCECellRef="coordinate"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_tableUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}}
^{CGPath=}24@0:8d16
v76@0:8d16^{CGContext=}24{CGRect={CGPoint=dd}{CGSize=dd}}32B64^{CGColor=}68
@"<TSKPencilAnnotationStorage>"16@0:8
v32@0:8r^{PencilAnnotationArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}^{Reference}}16@24
v32@0:8^{PencilAnnotationArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}^{Reference}}16@24
@"TSDPencilAnnotationStorage"
@64@0:8@16{TSTDurationWrapper=d{?=b1iii}}24Q48Q56
v40@0:8{TSTDurationWrapper=d{?=b1iii}}16
v32@0:8r^{DurationNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}dIII}16@24
v32@0:8^{DurationNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}dIII}16@24
{TSTDurationWrapper="timeInterval"d"durationFormat"{?="mUseAutomaticUnits"b1"mDurationUnitSmallest"i"mDurationUnitLargest"i"mDurationStyle"i}}
^{TSCEFunctionArgSpec=iiCi{unordered_set<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={__hash_table<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCEArgumentType, void *> > >={__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSCEArgumentType> >=Q}{__compressed_pair<float, std::__1::equal_to<TSCEArgumentType> >=f}}}{vector<TSCEValue, std::__1::allocator<TSCEValue> >=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::__1::allocator<TSCEValue> >=^{TSCEValue}}}s@ddsBBBBBBB}24@0:8i16i20
@48@0:8@16^{TSCEFunctionArgSpec=iiCi{unordered_set<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={__hash_table<TSCEArgumentType, std::__1::hash<TSCEArgumentType>, std::__1::equal_to<TSCEArgumentType>, std::__1::allocator<TSCEArgumentType> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCEArgumentType, void *> > >={__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSCEArgumentType, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSCEArgumentType> >=Q}{__compressed_pair<float, std::__1::equal_to<TSCEArgumentType> >=f}}}{vector<TSCEValue, std::__1::allocator<TSCEValue> >=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::__1::allocator<TSCEValue> >=^{TSCEValue}}}s@ddsBBBBBBB}24Q32Q40
v20@0:8s16
v32@0:8r^{ArgumentPlaceholderNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}III}16@24
v32@0:8^{ArgumentPlaceholderNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}III}16@24
v32@0:8r^{PostfixOperatorNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{OperatorNodeArchive}}16@24
v32@0:8^{PostfixOperatorNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{OperatorNodeArchive}}16@24
i20@0:8I16
@"<TSTTableStrokeProviding>"
@"<TSTTableHiddenRowColumnProviding><TSTTableInternalGeometryProviding>"
@"<TSTCategoryProviding>"
v32@0:8r^{PrefixOperatorNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{OperatorNodeArchive}}16@24
v32@0:8^{PrefixOperatorNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{OperatorNodeArchive}}16@24
v40@0:8^{TSCEASTNodeArray=}16{TSUCellCoord=ISBB}24^{TSCESymbolTable=@I{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={__hash_table<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true>, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true>, std::__1::allocator<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringHash, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<SFUtility::ObjcSharedPtr<NSString>, std::__1::__hash_value_type<SFUtility::ObjcSharedPtr<NSString>, unsigned int>, TSCE::NSStringEqual, true> >=f}}}{unordered_map<unsigned int, NSString *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, NSString *> > >={__hash_table<std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, NSString *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, NSString *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, NSString *>, std::__1::equal_to<unsigned int>, true> >=f}}}{vector<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}{__compressed_pair<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > *, std::__1::allocator<std::__1::unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > > > >=^{unordered_map<SFUtility::ObjcSharedPtr<NSString>, unsigned int, TSCE::NSStringHash, TSCE::NSStringEqual, std::__1::allocator<std::__1::pair<const SFUtility::ObjcSharedPtr<NSString>, unsigned int> > >}}}}32
v32@0:8r^{FunctionEndNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}}16@24
v32@0:8^{FunctionEndNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}}16@24
@"TSTFunctionNode"
@32@0:8@16@?24
@48@0:8@16@24@32@40
@56@0:8@16@24@32@40@48
@48@0:8@"TSSPropertyMap"16@"TSSPropertyMap"24@"TSSPropertyMap"32@"TSSPropertyMap"40
@"TSSPropertySet"16@0:8
@56@0:8@"TSSPropertyMap"16@"TSSPropertyMap"24@"TSSPropertyMap"32@"TSSPropertyMap"40@"TSTConcurrentStylesheet"48
@32@0:8r^{Message=^^?}16@24
v32@0:8^{Message=^^?}16@24
@32@0:8r^{Message=^^?}16@"TSPUnarchiver"24
v32@0:8^{Message=^^?}16@"TSPArchiver"24
@36@0:8@16B24B28i32
d28@0:8S16@?20
v32@0:8^{CGContext=}16@?24
{TSUCellCoord=ISBB}20@0:8I16
@32@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
@40@0:8r^{HiddenStatesArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UUID}^{HiddenStateExtentArchive}^{HiddenStateExtentArchive}}16@24@32
v32@0:8^{HiddenStatesArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UUID}^{HiddenStateExtentArchive}^{HiddenStateExtentArchive}}16@24
B24@0:8{TSUModelRowIndex=I}16C20
B22@0:8{TSUModelColumnIndex=S}16C18
{TSUModelColumnIndex=S}32@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{TSUModelRowIndex=I}32@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
v28@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16B24
@40@0:8@16@24^@32
v40@0:8{_NSRange=QQ}16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}32
v34@0:8{_NSRange=QQ}16{TSUViewColumnIndex=S}32
v52@0:8@16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24@40B48
@"TSTHiddenStateExtent"
v24@0:8@"TSTMutableCellIteratorData"16
@"NSObject<TSTCellRegionIterating>"
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}20@0:8i16
i24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
C32@0:8@16@24
{TSCERecalculationState=C}33@0:8{TSUCellCoord=ISBB}16@24{TSCERecalculationState=C}32
{TSCERecalculationState=C}33@0:8r^{TSCECellCoordSet={map<unsigned short, TSUIndexSet, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSUIndexSet> > >={__tree<std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, TSUIndexSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, TSUIndexSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::less<unsigned short>, true> >=Q}}}}16@24{TSCERecalculationState=C}32
@"<TSCEReferenceResolving>"16@0:8
{TSCERecalculationState=C}33@0:8{TSUCellCoord=ISBB}16@"TSCECalculationEngine"24{TSCERecalculationState=C}32
{TSCERecalculationState=C}33@0:8r^{TSCECellCoordSet={map<unsigned short, TSUIndexSet, std::__1::less<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSUIndexSet> > >={__tree<std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::less<unsigned short>, true>, std::__1::allocator<std::__1::__value_type<unsigned short, TSUIndexSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned short, TSUIndexSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned short, std::__1::__value_type<unsigned short, TSUIndexSet>, std::__1::less<unsigned short>, true> >=Q}}}}16@"TSCECalculationEngine"24{TSCERecalculationState=C}32
@40@0:8@16@24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}40@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
^{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *> > >={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTGroupNode *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}16@0:8
@32@0:8r^{CategoryOwnerArchive_GroupByArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::GroupColumnArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TST::ColumnAggregateArchive>=^{Arena}ii^{Rep}}^{UUID}^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive}^{CellCoordinateArchive}^{CellCoordinateArchive}^{CellCoordinateArchive}^{CellCoordinateArchive}^{CellCoordinateArchive}^{CellCoordinateArchive}B}16@24
v32@0:8^{CategoryOwnerArchive_GroupByArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::GroupColumnArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TST::CategoryOwnerArchive_GroupByArchive_AggregatorArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TST::ColumnAggregateArchive>=^{Arena}ii^{Rep}}^{UUID}^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive}^{CellCoordinateArchive}^{CellCoordinateArchive}^{CellCoordinateArchive}^{CellCoordinateArchive}^{CellCoordinateArchive}^{CellCoordinateArchive}B}16@24
@32@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16@24
{vector<TSCECategoryLevel, std::__1::allocator<TSCECategoryLevel> >=^C^C{__compressed_pair<TSCECategoryLevel *, std::__1::allocator<TSCECategoryLevel> >=^C}}24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
v32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16@?24
C28@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16C24
C40@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16^B24^B32
@32@0:8@16C24B28
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}40@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24C32C36
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}28@0:8@16C24
v24@0:8r^{TSUCellCoord=ISBB}16
v32@0:8@16r^{TSUCellCoord=ISBB}24
@24@0:8r^{TSUCellCoord=ISBB}16
B20@0:8B16
@28@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16B24
B24@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16
C24@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16
C24@0:8@16
@40@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@32
@48@0:8@16Q24Q32^{TSUPreserveFlags=C}40
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}36@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24B32
{vector<TSCEValue, std::__1::allocator<TSCEValue> >=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::__1::allocator<TSCEValue> >=^{TSCEValue}}}24@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16
{vector<TSCEValue, std::__1::allocator<TSCEValue> >=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::__1::allocator<TSCEValue> >=^{TSCEValue}}}32@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
{vector<TSCECellRef, std::__1::allocator<TSCECellRef> >=^{TSCECellRef}^{TSCECellRef}{__compressed_pair<TSCECellRef *, std::__1::allocator<TSCECellRef> >=^{TSCECellRef}}}32@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
{vector<TSCECellRef, std::__1::allocator<TSCECellRef> >=^{TSCECellRef}^{TSCECellRef}{__compressed_pair<TSCECellRef *, std::__1::allocator<TSCECellRef> >=^{TSCECellRef}}}36@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24B32
{vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}^{TSCECategoryRef}{__compressed_pair<TSCECategoryRef *, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}}}24@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16
@32@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
{vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}^{TSCECategoryRef}{__compressed_pair<TSCECategoryRef *, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}}}88@0:8{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16
{vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}^{TSCECategoryRef}{__compressed_pair<TSCECategoryRef *, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}}}32@0:8@16C24B28
{vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}^{TSCECategoryRef}{__compressed_pair<TSCECategoryRef *, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}}}40@0:8{vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}^{TSCECategoryRef}{__compressed_pair<TSCECategoryRef *, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}}}16
{vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}^{TSCECategoryRef}{__compressed_pair<TSCECategoryRef *, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}}}52@0:8{vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}^{TSCECategoryRef}{__compressed_pair<TSCECategoryRef *, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}}}16@40C48
{vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}^{TSCECategoryRef}{__compressed_pair<TSCECategoryRef *, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}}}36@0:8@16C24B28B32
{vector<TSCECategoryRef, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}^{TSCECategoryRef}{__compressed_pair<TSCECategoryRef *, std::__1::allocator<TSCECategoryRef> >=^{TSCECategoryRef}}}40@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16C32B36
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16
{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}24@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
@"TSTGroupByChangeDistributor"
{unordered_map<TSUCellCoord, TSTAggNode *, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSTAggNode *> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, std::__1::__unordered_map_hasher<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, std::__1::hash<TSUCellCoord>, true>, std::__1::__unordered_map_equal<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, std::__1::equal_to<TSUCellCoord>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, std::__1::hash<TSUCellCoord>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTAggNode *>, std::__1::equal_to<TSUCellCoord>, true> >="__value_"f}}}
@"TSKCustomFormatWrapper"
v32@0:8r^{EmptyExpressionNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}}16@24
v32@0:8^{EmptyExpressionNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{ExpressionNodeArchive}}16@24
@32@0:8r^{CellBorderArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}iiii}16@24
v32@0:8^{CellBorderArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}^{StrokeArchive}iiii}16@24
@"TSTStrokeLayer"24@0:8Q16
v40@0:8{TSTSimpleRange=qQ}16@?32
v44@0:8@16i24{TSTSimpleRange=qQ}28
v40@0:8@16{TSTSimpleRange=qQ}24
B32@0:8{TSTSimpleRange=qQ}16
@"TSTMutableStrokeLayer"
d40@0:8{TSTSimpleRange=qQ}16d32
d24@0:8q16
@"TSTStrokeOrderedLayer"
v56@0:8{TSUCellCoord=ISBB}16^@24^@32^@40^@48
@"<TSTCustomStrokeProviding>"
@"<TSTCategoryProviding><TSTTableInternalGeometryProviding><TSTTableHiddenRowColumnProviding>"
@"TSUIntegerKeyDictionary"
v40@0:8@16Q24Q32
{TSUModelColumnOrRowIndex=I}20@0:8{TSUViewColumnOrRowIndex=I}16
{TSUViewColumnOrRowIndex=I}20@0:8{TSUModelColumnOrRowIndex=I}16
v24@0:8{TSUModelColumnOrRowIndex=I}16C20
B28@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16C24
B32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16{TSUModelColumnOrRowIndex=I}24C28
B24@0:8{TSUViewColumnOrRowIndex=I}16C20
B24@0:8{TSUModelColumnOrRowIndex=I}16C20
C20@0:8{TSUViewColumnOrRowIndex=I}16
C20@0:8{TSUModelColumnOrRowIndex=I}16
I32@0:8{_NSRange=QQ}16
B36@0:8{_NSRange=QQ}16C32
v36@0:8{_NSRange=QQ}16{TSUModelColumnOrRowIndex=I}32
v36@0:8{_NSRange=QQ}16{TSUViewColumnOrRowIndex=I}32
v24@0:8{TSUModelColumnOrRowIndex=I}16{TSUModelColumnOrRowIndex=I}20
@40@0:8r^{HiddenStateExtentArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::HiddenStateExtentArchive_RowOrColumnState>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSCE::CellValueArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}^{UUID}iB}16@24@32
v32@0:8^{HiddenStateExtentArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::HiddenStateExtentArchive_RowOrColumnState>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSCE::CellValueArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}^{UUID}iB}16@24
@48@0:8@16@24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32r^{TSUCellCoord=ISBB}40
{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}32@0:8@16r^{TSUCellCoord=ISBB}24
{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}40@0:8@16r^{TSUCellCoord=ISBB}24B32i36
@296@0:8{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}16@288
{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}20@0:8{TSUModelColumnOrRowIndex=I}16
v20@0:8{TSUViewColumnOrRowIndex=I}16
{unordered_map<TSU::UUIDData<TSP::UUIDData>, unsigned char, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, unsigned char> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, std::__1::hash<TSUUUID>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned char>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >="__value_"f}}}
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
{TSUIndexSet="_isEmpty"b1"_hasSingleRange"b1"_singleRange"{TSUIndexRange="_begin"q"_end"q}"_multipleRanges"^{?}}
@40@0:8r^{MergeOwnerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{CFUUIDArchive}^{FormulaStoreArchive}}16@24@32
v32@0:8^{MergeOwnerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{CFUUIDArchive}^{FormulaStoreArchive}}16@24
v32@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16{TSUModelCellCoord={TSUCellCoord=ISBB}}24
v24@0:8r^{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}48@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}32
B24@0:8r^{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{TSUModelCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}44@0:8@16{TSUModelCellCoord={TSUCellCoord=ISBB}}24@32B40
v44@0:8{_NSRange=QQ}16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}32B40
r^{unordered_map<TSUModelCellCoord, TSUModelCellCoord, std::__1::hash<TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, std::__1::allocator<std::__1::pair<const TSUModelCellCoord, TSUModelCellCoord> > >={__hash_table<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true>, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true> >=f}}}16@0:8
{unordered_map<TSUModelCellCoord, TSUModelCellCoord, std::__1::hash<TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, std::__1::allocator<std::__1::pair<const TSUModelCellCoord, TSUModelCellCoord> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true>, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::hash<TSUModelCellCoord>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSUModelCellCoord, std::__1::__hash_value_type<TSUModelCellCoord, TSUModelCellCoord>, std::__1::equal_to<TSUModelCellCoord>, true> >="__value_"f}}}
@"TSTFormulaStore"
@"TSTMergeRangeCache"
@"TSTMergeChangeDistributor"
@24@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
v24@0:8@"TSCETrackedReference"16
@"NSArray"24@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}C}20@0:8S16
S24@0:8@16
v32@0:8^{SortRuleReferenceTrackerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}}16@24
@32@0:8r^{SortRuleReferenceTrackerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}}16@24
@"TSCEReferenceTracker"
@48@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}32
i28@0:8@16i24
d20@0:8B16
d36@0:8S16B20B24^B28
d60@0:8I16B20B24B28B32{CGSize=dd}36^B52
d44@0:8{CGSize=dd}16I32d36
d24@0:8I16B20
v44@0:8@16i24I28B32I36I40
v28@0:8I16I20I24
B24@0:8I16I20
B28@0:8^I16B24
@28@0:8I16B20B24
d28@0:8I16I20I24
d24@0:8I16I20
v36@0:8I16I20I24@?28
{CGSize=dd}36@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16B32
d36@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16B32
d40@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16@32
d44@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16B32@36
d52@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16B32{CGSize=dd}36
v32@0:8d16Q24
B32@0:8^@16{TSUCellCoord=ISBB}24
B24@0:8q16
B28@0:8q16I24
v40@0:8@16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24
v36@0:8i16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}20
v52@0:8i16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}20{TSUCellRect={TSUCellCoord=ISBB}{?=II}}36
v76@0:8@16{TSUCellCoord=ISBB}24{TSUCellRect={TSUCellCoord=ISBB}{?=II}}32B48@52@60@68
v52@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16@32B40@44
v40@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16@32
v40@0:8{TSUCellCoord=ISBB}16{TSUCellCoord=ISBB}24@32
{TSUCellCoord=ISBB}56@0:8{TSUCellCoord=ISBB}16{TSUCellCoord=ISBB}24{TSUCellRect={TSUCellCoord=ISBB}{?=II}}32@48
v36@0:8@16S24@28
v36@0:8@16I24@28
v36@0:8i16@20@28
@76@0:8{TSUCellCoord=ISBB}16@24@32B40i44@48i56Q60Q68
v104@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16@32@40{TSUCellRect={TSUCellCoord=ISBB}{?=II}}48B64i68@72B80i84@88@96
@56@0:8@16{TSUCellCoord=ISBB}24@32^i40^i48
@48@0:8@16{TSUCellCoord=ISBB}24@32i40i44
@40@0:8@16{TSUCellCoord=ISBB}24@32
{UIEdgeInsets=dddd}24@0:8@16
{UIEdgeInsets=dddd}24@0:8{TSUCellCoord=ISBB}16
[15d]
@"NSObject<OS_dispatch_group>"
@"TSKChangeNotifier"
@"TSTStrokeDefaultVendor"
@"TSTWPColumnCache"
@"TSTDupContentCache"
@"TSTWidthHeightCache"
@"TSTHiddenRowsColumnsCache"
@"TSDFill"
@"TSUColor"
@"TSDInfoGeometry"
@"TSDLayoutGeometry"
@"TSTMergeRangeSortedSet"
@"TSTFontInfoCache"
@"TSUWidthLimitedQueue"
@"NSObject<OS_dispatch_queue>"
@"TSTConcurrentMutableIndexSet"
@"TSTStrokeWidthCache"
@"TSTRWRetainedPointerKeyDictionary"
@"TSTLayout"
@"<TSTLayoutDynamicContentProtocol>"
@"TSTLayoutDynamicResizeInfo"
@"<TSTLayoutDynamicCellFillProtocol>"
@"TSWPColumnStyle"
B24@0:8@"TSKSelectionPath"16
@"<TSDHint>"16@0:8
@92@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16{TSUCellCoord=ISBB}32I40{CGSize=dd}44{CGSize=dd}60@76B84B88
@24@0:8r^{LayoutHintArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{CellRange}^{CellID}^{Size}^{Size}BBII}16
v24@0:8^{LayoutHintArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{CellRange}^{CellID}^{Size}^{Size}BBII}16
@"NSNumber"
@32@0:8@"TSPObjectContext"16@"<TSDHint>"24
v24@0:8@"<TSDHint>"16
@60@0:8{CGSize=dd}16@32@40B48o^B52
B40@0:8@16@24B32i36
v24@0:8B16B20
@"TSDLayout"60@0:8{CGSize=dd}16@"TSDLayout"32@"<TSDHint>"40B48o^B52
@"<TSDHint>"60@0:8{CGSize=dd}16@"TSDLayout"32@"<TSDHint>"40B48o^B52
@"TSDLayout"32@0:8@"<TSDHint>"16@"TSDLayout"24
B40@0:8@"<TSDHint>"16@"<TSDHint>"24B32i36
@"<TSDHint>"24@0:8@"TSDLayout"16
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}44@0:8{CGSize=dd}16@32B40
B28@0:8@16B24
B56@0:8@16{CGSize=dd}24@40@48
@32@0:8{CGSize=dd}16
v36@0:8@16@24B32
@"TSUPointerKeyDictionary"
B24@0:8@?16
@"TSTLayoutSpace"
@44@0:8i16{_NSRange=QQ}20@36
v32@0:8r^{TableDataList=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::TableDataList_ListEntry>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::Reference>=^{Arena}ii^{Rep}}Ii}16@24
v32@0:8^{TableDataList=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::TableDataList_ListEntry>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::Reference>=^{Arena}ii^{Rep}}Ii}16@24
{unordered_map<unsigned int, TSTTableDataObject *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, TSTTableDataObject *> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, std::__1::hash<unsigned int>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, TSTTableDataObject *>, std::__1::equal_to<unsigned int>, true> >="__value_"f}}}
@64@0:8@16@24{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}32Q48Q56
@72@0:8@16@24@32{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}40Q56Q64
v40@0:8@?16@?24@?32
v48@0:8@?16@?24@?32@?40
{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}32@0:8r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@24
@32@0:8r^{vector<TSU::UUIDRect<TSP::UUIDRect>, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}^{UUIDRect<TSP::UUIDRect>}{__compressed_pair<TSU::UUIDRect<TSP::UUIDRect> *, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}}}16@24
@40@0:8r^{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}16r^{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}24@32
@32@0:8r^{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}16@24
@28@0:8i16r^{UUIDRect<TSP::UUIDRect>={vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}}20
@28@0:8i16r^{vector<TSU::UUIDRect<TSP::UUIDRect>, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}^{UUIDRect<TSP::UUIDRect>}{__compressed_pair<TSU::UUIDRect<TSP::UUIDRect> *, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}}}20
@32@0:8r^{MergeOperationArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::UUIDRectArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSCE::FormulaArchive>=^{Arena}ii^{Rep}}{RepeatedField<unsigned int>=ii(Pointer=^{Arena}^{Rep})}i}16@24
v32@0:8^{MergeOperationArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::UUIDRectArchive>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSCE::FormulaArchive>=^{Arena}ii^{Rep}}{RepeatedField<unsigned int>=ii(Pointer=^{Arena}^{Rep})}i}16@24
@40@0:8r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}16r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}24r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}32
r^{vector<TSU::UUIDRect<TSP::UUIDRect>, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}^{UUIDRect<TSP::UUIDRect>}{__compressed_pair<TSU::UUIDRect<TSP::UUIDRect> *, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}}}16@0:8
v24@0:8r^{vector<TSU::UUIDRect<TSP::UUIDRect>, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}^{UUIDRect<TSP::UUIDRect>}{__compressed_pair<TSU::UUIDRect<TSP::UUIDRect> *, std::__1::allocator<TSU::UUIDRect<TSP::UUIDRect> > >=^{UUIDRect<TSP::UUIDRect>}}}16
r^{vector<TSCEFormula, std::__1::allocator<TSCEFormula> >=^{TSCEFormula}^{TSCEFormula}{__compressed_pair<TSCEFormula *, std::__1::allocator<TSCEFormula> >=^{TSCEFormula}}}16@0:8
v24@0:8r^{vector<TSCEFormula, std::__1::allocator<TSCEFormula> >=^{TSCEFormula}^{TSCEFormula}{__compressed_pair<TSCEFormula *, std::__1::allocator<TSCEFormula> >=^{TSCEFormula}}}16
r^{vector<unsigned long, std::__1::allocator<unsigned long> >=^Q^Q{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >=^Q}}16@0:8
v24@0:8r^{vector<unsigned long, std::__1::allocator<unsigned long> >=^Q^Q{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >=^Q}}16
{vector<TSCEFormula, std::__1::allocator<TSCEFormula> >="__begin_"^{TSCEFormula}"__end_"^{TSCEFormula}"__end_cap_"{__compressed_pair<TSCEFormula *, std::__1::allocator<TSCEFormula> >="__value_"^{TSCEFormula}}}
{vector<unsigned long, std::__1::allocator<unsigned long> >="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >="__value_"^Q}}
@32@0:8r^{CellUIDListArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedField<int>=ii(Pointer=^{Arena}^{Rep})}{RepeatedField<int>=ii(Pointer=^{Arena}^{Rep})}}16@24
v32@0:8^{CellUIDListArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSP::UUID>=^{Arena}ii^{Rep}}{RepeatedField<int>=ii(Pointer=^{Arena}^{Rep})}{RepeatedField<int>=ii(Pointer=^{Arena}^{Rep})}}16@24
r^{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}16@0:8
v24@0:8r^{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}16
^{vector<TSTCellUID, std::__1::allocator<TSTCellUID> >=^{TSTCellUID}^{TSTCellUID}{__compressed_pair<TSTCellUID *, std::__1::allocator<TSTCellUID> >=^{TSTCellUID}}}16@0:8
v24@0:8r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
v40@0:8@16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}24r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}32
v64@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16Q24^{map<TSU::UUIDData<TSP::UUIDData>, unsigned long, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, unsigned long> > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, unsigned long>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, unsigned long>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, unsigned long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, unsigned long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, unsigned long>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}32^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}40^{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}48^{vector<unsigned long, std::__1::allocator<unsigned long> >=^Q^Q{__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >=^Q}}56
v40@0:8r^{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}16Q24^{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}32
@40@0:8@16Q24@?32
{vector<TSTCellUID, std::__1::allocator<TSTCellUID> >="__begin_"^{TSTCellUID}"__end_"^{TSTCellUID}"__end_cap_"{__compressed_pair<TSTCellUID *, std::__1::allocator<TSTCellUID> >="__value_"^{TSTCellUID}}}
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}64@0:8r^{vector<int, std::__1::allocator<int> >=^i^i{__compressed_pair<int *, std::__1::allocator<int> >=^i}}16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}24^Q32^Q40^Q48^{deque<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={__split_buffer<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> *> >=^^{UUIDData<TSP::UUIDData>}^^{UUIDData<TSP::UUIDData>}^^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> **, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> *> >=^^{UUIDData<TSP::UUIDData>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=Q}}56
{deque<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >="__map_"{__split_buffer<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> *> >="__first_"^^{UUIDData<TSP::UUIDData>}"__begin_"^^{UUIDData<TSP::UUIDData>}"__end_"^^{UUIDData<TSP::UUIDData>}"__end_cap_"{__compressed_pair<TSU::UUIDData<TSP::UUIDData> **, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> *> >="__value_"^^{UUIDData<TSP::UUIDData>}}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >="__value_"Q}}
@36@0:8i16@20r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}28
[256@"TSTTableTile"]
[256@"TSPLazyReference"]
r^{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}16@0:8
@56@0:8@16{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@40@48
Q40@0:8@16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24
v96@0:8@16{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24Q88
v40@0:8@16@24Q32
r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8@16
@36@0:8{TSUModelCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16B32
v24@0:8r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}16
@40@0:8r^{PencilAnnotationOwnerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::Reference>=^{Arena}ii^{Rep}}^{CFUUIDArchive}^{FormulaStoreArchive}}16@24@32
v32@0:8^{PencilAnnotationOwnerArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSP::Reference>=^{Arena}ii^{Rep}}^{CFUUIDArchive}^{FormulaStoreArchive}}16@24
d20@0:8S16
@24@0:8S16S20
B24@0:8I16S20
v36@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16I32
v36@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16S32
@40@0:8@16@24I32S36
@32@0:8r^{WidthHeightCache=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::WidthHeightCacheFittingEntry>=^{Arena}ii^{Rep}}I}16@24
v32@0:8^{WidthHeightCache=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::WidthHeightCacheFittingEntry>=^{Arena}ii^{Rep}}I}16@24
{vector<TSTWidthHeightCacheEntry<4>, std::__1::allocator<TSTWidthHeightCacheEntry<4> > >="__begin_"^{TSTWidthHeightCacheEntry<4>}"__end_"^{TSTWidthHeightCacheEntry<4>}"__end_cap_"{__compressed_pair<TSTWidthHeightCacheEntry<4> *, std::__1::allocator<TSTWidthHeightCacheEntry<4> > >="__value_"^{TSTWidthHeightCacheEntry<4>}}}
@36@0:8i16@20@28
@44@0:8i16{TSUCellCoord=ISBB}20@28@36
@52@0:8i16@20@28Q36Q44
@44@0:8i16@20Q28Q36
@44@0:8i16{TSUCellCoord=ISBB}20{TSUCellRect={TSUCellCoord=ISBB}{?=II}}28
@60@0:8i16{TSUCellCoord=ISBB}20{TSUCellRect={TSUCellCoord=ISBB}{?=II}}28{TSUCellRect={TSUCellCoord=ISBB}{?=II}}44
@36@0:8i16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}20
@52@0:8i16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}20{TSUCellRect={TSUCellCoord=ISBB}{?=II}}36
v36@0:8@16i24@?28
@68@0:8i16@20{TSUCellCoord=ISBB}28@36@44@52@60
@60@0:8i16@20{TSUCellCoord=ISBB}28@36@44@52
@"NSHashTable"
@"TSKShuffleMapping"
@"NSSet"
@"TSULocale"16@0:8
@64@0:8{UIEdgeInsets=dddd}16i48@52B60
@26@0:8{TSUModelColumnIndex=S}16i18i22
@24@0:8r^{TableSortOrderArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::TableSortOrderArchive_SortRuleArchive>=^{Arena}ii^{Rep}}i}16
v24@0:8^{TableSortOrderArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::TableSortOrderArchive_SortRuleArchive>=^{Arena}ii^{Rep}}i}16
{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, std::__1::hash<TSUUUID>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSUMutableUUIDSet *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >="__value_"f}}}
@"NSObject<OS_dispatch_semaphore>"
v48@0:8{UIEdgeInsets=dddd}16
@"TSTLayoutContentCachedKey"
@"TSWPColumn"
^{CGImage=}16@0:8
v24@0:8^{CGImage=}16
v32@0:8r^{TokenAttachmentArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UIGraphicalAttachment}^{Reference}}16@24
v32@0:8^{TokenAttachmentArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UIGraphicalAttachment}^{Reference}}16@24
^{CGImage=}
v32@0:8r^{CompletionTokenAttachmentArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{TokenAttachmentArchive}II}16@24
v32@0:8^{CompletionTokenAttachmentArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{TokenAttachmentArchive}II}16@24
@"TSTReferenceNode"
@"<TSTCanvasReferenceProvider>"
@52@0:8@16{TSTSimpleRange=qQ}24i40Q44
@32@0:8{TSTSimpleRange=qQ}16
{vector<TSTStrokeLayerRun, std::__1::allocator<TSTStrokeLayerRun> >="__begin_"^{TSTStrokeLayerRun}"__end_"^{TSTStrokeLayerRun}"__end_cap_"{__compressed_pair<TSTStrokeLayerRun *, std::__1::allocator<TSTStrokeLayerRun> >="__value_"^{TSTStrokeLayerRun}}}
v32@0:8q16q24
v40@0:8{_NSRange=QQ}16q32
v116@0:8@16@24i32@36@44i52@56@64i72@76@84i92@96@104i112
@"TSSStyle"
@"TSSStylesheet"
Q28@0:8@16i24
v28@0:8Q16B24
^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}
d40@0:8@16d24N^d32
[8{os_unfair_lock_s="_os_unfair_lock_opaque"I}]
[8{unordered_map<TSTFontInfoCacheDupContentEntry, double, std::__1::hash<TSTFontInfoCacheDupContentEntry>, std::__1::equal_to<TSTFontInfoCacheDupContentEntry>, std::__1::allocator<std::__1::pair<const TSTFontInfoCacheDupContentEntry, double> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, std::__1::__unordered_map_hasher<TSTFontInfoCacheDupContentEntry, std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, std::__1::hash<TSTFontInfoCacheDupContentEntry>, true>, std::__1::__unordered_map_equal<TSTFontInfoCacheDupContentEntry, std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, std::__1::equal_to<TSTFontInfoCacheDupContentEntry>, true>, std::__1::allocator<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSTFontInfoCacheDupContentEntry, std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, std::__1::hash<TSTFontInfoCacheDupContentEntry>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSTFontInfoCacheDupContentEntry, std::__1::__hash_value_type<TSTFontInfoCacheDupContentEntry, double>, std::__1::equal_to<TSTFontInfoCacheDupContentEntry>, true> >="__value_"f}}}]
@"TSWPTextMeasurerBundle"
r^{vector<std::__1::vector<NSString *, std::__1::allocator<NSString *> >, std::__1::allocator<std::__1::vector<NSString *, std::__1::allocator<NSString *> > > >=^{vector<NSString *, std::__1::allocator<NSString *> >}^{vector<NSString *, std::__1::allocator<NSString *> >}{__compressed_pair<std::__1::vector<NSString *, std::__1::allocator<NSString *> > *, std::__1::allocator<std::__1::vector<NSString *, std::__1::allocator<NSString *> > > >=^{vector<NSString *, std::__1::allocator<NSString *> >}}}16@0:8
r^{vector<TSU::UUIDCoord<TSP::UUIDCoord>, std::__1::allocator<TSU::UUIDCoord<TSP::UUIDCoord> > >=^{UUIDCoord<TSP::UUIDCoord>}^{UUIDCoord<TSP::UUIDCoord>}{__compressed_pair<TSU::UUIDCoord<TSP::UUIDCoord> *, std::__1::allocator<TSU::UUIDCoord<TSP::UUIDCoord> > >=^{UUIDCoord<TSP::UUIDCoord>}}}16@0:8
v32@0:8r^{vector<NSString *, std::__1::allocator<NSString *> >=}16r^{UUIDCoord<TSP::UUIDCoord>={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24
{vector<std::__1::vector<NSString *, std::__1::allocator<NSString *> >, std::__1::allocator<std::__1::vector<NSString *, std::__1::allocator<NSString *> > > >="__begin_"^{vector<NSString *, std::__1::allocator<NSString *> >}"__end_"^{vector<NSString *, std::__1::allocator<NSString *> >}"__end_cap_"{__compressed_pair<std::__1::vector<NSString *, std::__1::allocator<NSString *> > *, std::__1::allocator<std::__1::vector<NSString *, std::__1::allocator<NSString *> > > >="__value_"^{vector<NSString *, std::__1::allocator<NSString *> >}}}
{vector<TSU::UUIDCoord<TSP::UUIDCoord>, std::__1::allocator<TSU::UUIDCoord<TSP::UUIDCoord> > >="__begin_"^{UUIDCoord<TSP::UUIDCoord>}"__end_"^{UUIDCoord<TSP::UUIDCoord>}"__end_cap_"{__compressed_pair<TSU::UUIDCoord<TSP::UUIDCoord> *, std::__1::allocator<TSU::UUIDCoord<TSP::UUIDCoord> > >="__value_"^{UUIDCoord<TSP::UUIDCoord>}}}
^{TSTHeaderNameMgrEntry={TSUCellCoord=ISBB}{TSCEUidCellRefSet={map<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet> > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}}@}28@0:8@16B24
{map<NSString *, TSTHeaderNameMgrEntry *, std::__1::less<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, TSTHeaderNameMgrEntry *> > >="__tree_"{__tree<std::__1::__value_type<NSString *, TSTHeaderNameMgrEntry *>, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, TSTHeaderNameMgrEntry *>, std::__1::less<NSString *>, true>, std::__1::allocator<std::__1::__value_type<NSString *, TSTHeaderNameMgrEntry *> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<NSString *, TSTHeaderNameMgrEntry *>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<NSString *, std::__1::__value_type<NSString *, TSTHeaderNameMgrEntry *>, std::__1::less<NSString *>, true> >="__value_"Q}}}
@"TSTHeaderNameMgr"
v32@0:8r^{unordered_map<NSString *, TSCEUidCellRefSet, std::__1::hash<NSString *>, std::__1::equal_to<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, TSCEUidCellRefSet> > >={__hash_table<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, std::__1::hash<NSString *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, std::__1::equal_to<NSString *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, std::__1::hash<NSString *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, std::__1::equal_to<NSString *>, true> >=f}}}16r^{unordered_map<NSString *, TSCEUidCellRefSet, std::__1::hash<NSString *>, std::__1::equal_to<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, TSCEUidCellRefSet> > >={__hash_table<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, std::__1::hash<NSString *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, std::__1::equal_to<NSString *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, std::__1::hash<NSString *>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, TSCEUidCellRefSet>, std::__1::equal_to<NSString *>, true> >=f}}}24
{TSCECellRefSet={map<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet> > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}}24@0:8@16
{unordered_map<NSString *, TSCECellRefSet, std::__1::hash<NSString *>, std::__1::equal_to<NSString *>, std::__1::allocator<std::__1::pair<NSString *const, TSCECellRefSet> > >="__table_"{__hash_table<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, TSCECellRefSet>, std::__1::hash<NSString *>, true>, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, TSCECellRefSet>, std::__1::equal_to<NSString *>, true>, std::__1::allocator<std::__1::__hash_value_type<NSString *, TSCECellRefSet> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<NSString *, TSCECellRefSet>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<NSString *, std::__1::__hash_value_type<NSString *, TSCECellRefSet>, std::__1::hash<NSString *>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<NSString *, std::__1::__hash_value_type<NSString *, TSCECellRefSet>, std::__1::equal_to<NSString *>, true> >="__value_"f}}}
@32@0:8@"TSPObjectContext"16@"TSCECalculationEngine"24
{TSCECellRefSet={map<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet> > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}}24@0:8@"NSString"16
v32@0:8^{TSTHeaderNameMgrEntry={TSUCellCoord=ISBB}{TSCEUidCellRefSet={map<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet> > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}}@}16r^{TSUCellCoord=ISBB}24
{TSUCellCoord=ISBB}20@0:8B16
{vector<NSString *, std::__1::allocator<NSString *> >=^@^@{__compressed_pair<NSString *__strong *, std::__1::allocator<NSString *> >=^@}}28@0:8@16B24
^{TSTHeaderPerTable={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{TSUCellCoord=ISBB}@@@@B}28@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16B24
v24@0:8^{TSTHeaderNameMgrEntry={TSUCellCoord=ISBB}{TSCEUidCellRefSet={map<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet> > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}}@}16
^{TSTHeaderNameMgrEntry={TSUCellCoord=ISBB}{TSCEUidCellRefSet={map<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet> > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}}@}24@0:8r^{TSUCellCoord=ISBB}16
@24@0:8^{TSTHeaderNameMgrEntry={TSUCellCoord=ISBB}{TSCEUidCellRefSet={map<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet> > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCEUidCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}}@}16
@36@0:8@16B24^Q28
v40@0:8@16r^{UUIDCoord<TSP::UUIDCoord>={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
v40@0:8r^{vector<NSString *, std::__1::allocator<NSString *> >=^@^@{__compressed_pair<NSString *__strong *, std::__1::allocator<NSString *> >=^@}}16r^{UUIDCoord<TSP::UUIDCoord>={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
v32@0:8r^{UUIDCoord<TSP::UUIDCoord>={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
@24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
B40@0:8@16r^{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
@28@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16B24
@36@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24B32
{TSCECellRefSet={map<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet> > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}}36@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24B32
{TSCECellRefSet={map<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet> > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, TSCECellCoordSet>, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}}24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
{vector<TSTHeaderNameMgrTile *, std::__1::allocator<TSTHeaderNameMgrTile *> >="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<TSTHeaderNameMgrTile *__strong *, std::__1::allocator<TSTHeaderNameMgrTile *> >="__value_"^@}}
{unordered_map<TSUCellCoord, TSTHeaderNameMgrEntry *, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSTHeaderNameMgrEntry *> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, std::__1::__unordered_map_hasher<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, std::__1::hash<TSUCellCoord>, true>, std::__1::__unordered_map_equal<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, std::__1::equal_to<TSUCellCoord>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, std::__1::hash<TSUCellCoord>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSTHeaderNameMgrEntry *>, std::__1::equal_to<TSUCellCoord>, true> >="__value_"f}}}
{unordered_map<TSCEUidCellRef, TSCECellCoordSet, std::__1::hash<TSCEUidCellRef>, std::__1::equal_to<TSCEUidCellRef>, std::__1::allocator<std::__1::pair<const TSCEUidCellRef, TSCECellCoordSet> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, std::__1::__unordered_map_hasher<TSCEUidCellRef, std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, std::__1::hash<TSCEUidCellRef>, true>, std::__1::__unordered_map_equal<TSCEUidCellRef, std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, std::__1::equal_to<TSCEUidCellRef>, true>, std::__1::allocator<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSCEUidCellRef, std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, std::__1::hash<TSCEUidCellRef>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSCEUidCellRef, std::__1::__hash_value_type<TSCEUidCellRef, TSCECellCoordSet>, std::__1::equal_to<TSCEUidCellRef>, true> >="__value_"f}}}
{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, std::__1::hash<TSUUUID>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTHeaderPerTable *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >="__value_"f}}}
{unordered_map<TSUCellCoord, TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSU::UUIDData<TSP::UUIDData> > > >="__table_"{__hash_table<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUCellCoord>, true>, std::__1::__unordered_map_equal<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSUCellCoord>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> > > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUCellCoord>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSUCellCoord, std::__1::__hash_value_type<TSUCellCoord, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSUCellCoord>, true> >="__value_"f}}}
@"TSCENameTrie"
v56@0:8@16{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24
@60@0:8@16{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24B56
@36@0:8@16{TSUCellCoord=ISBB}24B32
@"TSTCellDiffArray"
@22@0:8{TSUModelColumnIndex=S}16i18
v24@0:8^{TableSortOrderArchive_SortRuleArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}Ii}16
@24@0:8r^{TableSortOrderArchive_SortRuleArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}Ii}16
@22@0:8{TSUViewColumnIndex=S}16i18
{TSUViewColumnIndex=S}16@0:8
{TSUViewColumnIndex="_column"S}
@24@0:8C16C20
@32@0:8r^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSCE::CellValueArchive>=^{Arena}ii^{Rep}}}16@24
v24@0:8^{CategoryOwnerArchive_GroupByArchive_GroupNodeArchive_GroupValueTupleArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TSCE::CellValueArchive>=^{Arena}ii^{Rep}}}16
@56@0:8@16Q24Q32{TSUCellRect={TSUCellCoord=ISBB}{?=II}}40
v40@0:8Q16Q24@?32
v48@0:8@16Q24Q32@?40
v64@0:8@16Q24Q32{TSUCellRect={TSUCellCoord=ISBB}{?=II}}40@?56
@36@0:8d16B24o^d28
{CGRect={CGPoint=dd}{CGSize=dd}}56@0:8d16{CGRect={CGPoint=dd}{CGSize=dd}}24
{CGRect={CGPoint=dd}{CGSize=dd}}76@0:8d16{CGRect={CGPoint=dd}{CGSize=dd}}24B56o^@60o^{CGSize=dd}68
v76@0:8B16d20^{CGContext=}28{CGRect={CGPoint=dd}{CGSize=dd}}36@68
v76@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16d32{UIEdgeInsets=dddd}40B72
{set<TSTMergeRangeElem, TSTMergeRangeElemCompare, std::__1::allocator<TSTMergeRangeElem> >="__tree_"{__tree<TSTMergeRangeElem, TSTMergeRangeElemCompare, std::__1::allocator<TSTMergeRangeElem> >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTMergeRangeElem, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, TSTMergeRangeElemCompare>="__value_"Q}}}
@96@0:8@16d24d32@40B48i52{UIEdgeInsets=dddd}56i88i92
@40@0:8@"TSTMasterLayout"16@"TSTCellRegion"24@"TSTCellRegion"32
@24@0:8@"TSTMasterLayout"16
@32@0:8@"TSTMasterLayout"16@"TSTCellRegion"24
@24@0:8@"<TSTLayoutDynamicResizeInfoProtocol>"16
v24@0:8@"TSTMasterLayout"16
B32@0:8@16Q24
{unordered_map<TSUViewColumnIndex, TSUModelColumnIndex, std::__1::hash<TSUViewColumnIndex>, std::__1::equal_to<TSUViewColumnIndex>, std::__1::allocator<std::__1::pair<const TSUViewColumnIndex, TSUModelColumnIndex> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, std::__1::__unordered_map_hasher<TSUViewColumnIndex, std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, std::__1::hash<TSUViewColumnIndex>, true>, std::__1::__unordered_map_equal<TSUViewColumnIndex, std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, std::__1::equal_to<TSUViewColumnIndex>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUViewColumnIndex, std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, std::__1::hash<TSUViewColumnIndex>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSUViewColumnIndex, std::__1::__hash_value_type<TSUViewColumnIndex, TSUModelColumnIndex>, std::__1::equal_to<TSUViewColumnIndex>, true> >="__value_"f}}}
@"TSTCategoryTranslator"
@"TSTTableTile"
@"TSTTableTileRowInfo"
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@0:8I16B20
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}28@0:8@16B24
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}36@0:8{_NSRange=QQ}16B32
@"TSCECalculationEngine"16@0:8
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}28@0:8@"NSIndexSet"16B24
@"NSMutableIndexSet"28@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16B24
@40@0:8C16{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}20C36
v24@0:8^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
v32@0:8r^{SummaryCellVendorArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::SummaryCellVendorArchive_SummaryCellEntry>=^{Arena}ii^{Rep}}^{Reference}}16@24
v32@0:8^{SummaryCellVendorArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::SummaryCellVendorArchive_SummaryCellEntry>=^{Arena}ii^{Rep}}^{Reference}}16@24
^{map<TSTCellUID, TSTCell *, std::__1::less<TSTCellUID>, std::__1::allocator<std::__1::pair<const TSTCellUID, TSTCell *> > >={__tree<std::__1::__value_type<TSTCellUID, TSTCell *>, std::__1::__map_value_compare<TSTCellUID, std::__1::__value_type<TSTCellUID, TSTCell *>, std::__1::less<TSTCellUID>, true>, std::__1::allocator<std::__1::__value_type<TSTCellUID, TSTCell *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSTCellUID, TSTCell *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSTCellUID, std::__1::__value_type<TSTCellUID, TSTCell *>, std::__1::less<TSTCellUID>, true> >=Q}}}16@0:8
{map<TSTCellUID, TSTCell *, std::__1::less<TSTCellUID>, std::__1::allocator<std::__1::pair<const TSTCellUID, TSTCell *> > >="__tree_"{__tree<std::__1::__value_type<TSTCellUID, TSTCell *>, std::__1::__map_value_compare<TSTCellUID, std::__1::__value_type<TSTCellUID, TSTCell *>, std::__1::less<TSTCellUID>, true>, std::__1::allocator<std::__1::__value_type<TSTCellUID, TSTCell *> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSTCellUID, TSTCell *>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSTCellUID, std::__1::__value_type<TSTCellUID, TSTCell *>, std::__1::less<TSTCellUID>, true> >="__value_"Q}}}
@34@0:8@16{TSUModelColumnIndex=S}24@26
@32@0:8@16^B24
B36@0:8I16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}20@28
{TSUModelColumnIndex=S}24@0:8@16
v32@0:8^{FilterRuleArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{FormulaPredicateArchive}B}16@24
@24@0:8r^{FilterRuleArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{FormulaPredicateArchive}B}16
@"TSTFormulaPredicate"
@36@0:8@16i24@28
B28@0:8q16i24
B36@0:8I16@20@28
v44@0:8@16@24Q32B40
v34@0:8{TSUModelColumnIndex=S}16@18@?26
@26@0:8{TSUModelColumnIndex=S}16@18
Q26@0:8{TSUModelColumnIndex=S}16@18
v32@0:8r^{FilterSetArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::FilterRuleArchive>=^{Arena}ii^{Rep}}{RepeatedField<unsigned int>=ii(Pointer=^{Arena}^{Rep})}{RepeatedField<bool>=ii(Pointer=^{Arena}^{Rep})}iBB}16@24
v32@0:8^{FilterSetArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::FilterRuleArchive>=^{Arena}ii^{Rep}}{RepeatedField<unsigned int>=ii(Pointer=^{Arena}^{Rep})}{RepeatedField<bool>=ii(Pointer=^{Arena}^{Rep})}iBB}16@24
@52@0:8i16{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}20{TSUCellCoord=ISBB}44
@36@0:8i16@20{TSUCellCoord=ISBB}28
@88@0:8i16@20@28i36i40{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}44{TSUCellCoord=ISBB}68@76B84
@72@0:8i16@20@28i36i40@44{TSUCellCoord=ISBB}52@60B68
@84@0:8i16@20@28i36i40{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}44{TSUCellCoord=ISBB}68@76
{TSCEFormulaCreator=@?}60@0:8i16i20@24I32B36B40r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}44@52
@96@0:8i16@20@28d36d44i52i56{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}60{TSUCellCoord=ISBB}84B92
@92@0:8i16@20@28d36d44i52i56{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}60{TSUCellCoord=ISBB}84
@72@0:8i16d20d28i36{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}40{TSUCellCoord=ISBB}64
@80@0:8i16d20i28d32i40i44{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}48{TSUCellCoord=ISBB}72
@60@0:8i16@20{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}28{TSUCellCoord=ISBB}52
@24@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}BB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{TSUColumnRowOffset=ii}BBBBBBB}}16
v40@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
v48@0:8^{TSCEReferenceSet={unordered_set<TSCEReferenceType, std::__1::hash<TSCEReferenceType>, std::__1::equal_to<TSCEReferenceType>, std::__1::allocator<TSCEReferenceType> >={__hash_table<TSCEReferenceType, std::__1::hash<TSCEReferenceType>, std::__1::equal_to<TSCEReferenceType>, std::__1::allocator<TSCEReferenceType> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSCEReferenceType, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEReferenceType, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEReferenceType, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEReferenceType, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSCEReferenceType, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEReferenceType, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCEReferenceType, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCEReferenceType, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCEReferenceType, void *> > >={__hash_node_base<std::__1::__hash_node<TSCEReferenceType, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSCEReferenceType, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSCEReferenceType> >=Q}{__compressed_pair<float, std::__1::equal_to<TSCEReferenceType> >=f}}}{unordered_map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > > > >={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > > >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}{unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}{unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}{unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}{unordered_map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> >, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > > > >={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSUCellCoord, std::__1::hash<TSUCellCoord>, std::__1::equal_to<TSUCellCoord>, std::__1::allocator<TSUCellCoord> > >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}{map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > >={__tree<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > >, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > >, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSU::UUIDData<TSP::UUIDData>, std::__1::__value_type<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, true> >=Q}}}{unordered_map<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > >, std::__1::hash<TSCEFormulaRangeContext>, std::__1::equal_to<TSCEFormulaRangeContext>, std::__1::allocator<std::__1::pair<const TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > > > >={__hash_table<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, std::__1::__unordered_map_hasher<TSCEFormulaRangeContext, std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, std::__1::hash<TSCEFormulaRangeContext>, true>, std::__1::__unordered_map_equal<TSCEFormulaRangeContext, std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, std::__1::equal_to<TSCEFormulaRangeContext>, true>, std::__1::allocator<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSCEFormulaRangeContext, std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, std::__1::hash<TSCEFormulaRangeContext>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSCEFormulaRangeContext, std::__1::__hash_value_type<TSCEFormulaRangeContext, std::__1::map<TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> >, std::__1::less<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, std::__1::unordered_set<TSCERangeCoordinate, std::__1::hash<TSCERangeCoordinate>, std::__1::equal_to<TSCERangeCoordinate>, std::__1::allocator<TSCERangeCoordinate> > > > > >, std::__1::equal_to<TSCEFormulaRangeContext>, true> >=f}}}{unordered_set<TSCECategoryRef, std::__1::hash<TSCECategoryRef>, std::__1::equal_to<TSCECategoryRef>, std::__1::allocator<TSCECategoryRef> >={__hash_table<TSCECategoryRef, std::__1::hash<TSCECategoryRef>, std::__1::equal_to<TSCECategoryRef>, std::__1::allocator<TSCECategoryRef> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSCECategoryRef, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCECategoryRef, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCECategoryRef, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCECategoryRef, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSCECategoryRef, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCECategoryRef, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSCECategoryRef, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCECategoryRef, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCECategoryRef, void *> > >={__hash_node_base<std::__1::__hash_node<TSCECategoryRef, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSCECategoryRef, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSCECategoryRef> >=Q}{__compressed_pair<float, std::__1::equal_to<TSCECategoryRef> >=f}}}^{TSCEDependencyTracker}}16@24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32r^{TSUCellCoord=ISBB}40
i44@0:8C16Q20@28{TSUCellCoord=ISBB}36
B36@0:8i16i20i24^B28
B40@0:8{TSUCellCoord=ISBB}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@32
B40@0:8{TSUCellCoord=ISBB}16r^{TSCESubFormulaOwnerID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}S}24@32
v36@0:8q16C24d28
v36@0:8q16C24@28
v40@0:8q16C24d28i36
v60@0:8q16C24{TSCECrossTableReference={TSCERelativeCellCoordinate=isBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{TSUPreserveFlags=C}}28
v36@0:8q16C24r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}28
^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}16@0:8
r^{TSCECrossTableReference={TSCERelativeCellCoordinate=isBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{TSUPreserveFlags=C}}16@0:8
@40@0:8r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}16@24^B32
@48@0:8r^{UUIDMap<TSP::UUIDMap>={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}16@24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32^B40
@40@0:8@16@24{TSUCellCoord=ISBB}32
@24@0:8{TSUColumnRowOffset=ii}16
@32@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16{TSUCellCoord=ISBB}24
@32@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}BB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{TSUColumnRowOffset=ii}BBBBBBB}}16@?24
v40@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}BB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{TSUColumnRowOffset=ii}BBBBBBB}}16^B24@?32
v32@0:8^{FormulaPredicateArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{FormulaArchive}iiiiii}16@24
@24@0:8r^{FormulaPredicateArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{FormulaArchive}iiiiii}16
{TSCEFormula="_astNodeArray"^{TSCEASTNodeArray}"_translationFlags"{TSCEFormulaTranslationFlags="_flags"C}"_hostTableUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_hostColumnUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_hostRowUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}}
^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}
{TSCECrossTableReference="_relativeCoord"{TSCERelativeCellCoordinate="row"i"column"s"_preserveRow"B"_preserveColumn"B}"_tableUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_preserveFlags"{TSUPreserveFlags="_flags"C}}
@"TSTFormulaPredArg"
@"NSLock"
@"TSTStrokeSelection"
@68@0:8i16@20d28{CGRect={CGPoint=dd}{CGSize=dd}}36
v24@0:8^{CGContext=}16
v40@0:8@16{TSUCellCoord=ISBB}24B32B36
v24@0:8@"TSTTableRep"16
v24@0:8@"TSTLayoutSpace"16
v40@0:8@"TSTCell"16{TSUCellCoord=ISBB}24B32B36
@40@0:8@16@24@?32
@24@0:8r^{vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}}}16
@32@0:8r^{vector<TSTCellUID, std::__1::allocator<TSTCellUID> >=^{TSTCellUID}^{TSTCellUID}{__compressed_pair<TSTCellUID *, std::__1::allocator<TSTCellUID> >=^{TSTCellUID}}}16@24
@24@0:8r^{vector<TSUModelCellRect, std::__1::allocator<TSUModelCellRect> >=^{TSUModelCellRect}^{TSUModelCellRect}{__compressed_pair<TSUModelCellRect *, std::__1::allocator<TSUModelCellRect> >=^{TSUModelCellRect}}}16
{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}32@0:8^{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}16^{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}24
@24@0:8r^{CellRegion=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CellRange>=^{Arena}ii^{Rep}}}16
v24@0:8^{CellRegion=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CellRange>=^{Arena}ii^{Rep}}}16
@36@0:8{_NSRange=QQ}16I32
@36@0:8{_NSRange=QQ}16S32
v40@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16@?32
{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}24@0:8Q16
@32@0:8{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
@24@0:8r^{vector<TSUViewCellRect, std::__1::allocator<TSUViewCellRect> >=^{TSUViewCellRect}^{TSUViewCellRect}{__compressed_pair<TSUViewCellRect *, std::__1::allocator<TSUViewCellRect> >=^{TSUViewCellRect}}}16
v36@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16B32
{set<TSUCellRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUCellRect> >="__tree_"{__tree<TSUCellRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUCellRect> >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSUCellRect, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, TSTCellRangeRowMajorLess>="__value_"Q}}}
v28@0:8^{set<TSUCellRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUCellRect> >={__tree<TSUCellRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUCellRect> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSUCellRect, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, TSTCellRangeRowMajorLess>=Q}}}16B24
v28@0:8^{set<TSUCellRect, TSTCellRangeColumnMajorLess, std::__1::allocator<TSUCellRect> >={__tree<TSUCellRect, TSTCellRangeColumnMajorLess, std::__1::allocator<TSUCellRect> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSUCellRect, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, TSTCellRangeColumnMajorLess>=Q}}}16B24
{set<TSUCellRect, TSTCellRangeColumnMajorLess, std::__1::allocator<TSUCellRect> >="__tree_"{__tree<TSUCellRect, TSTCellRangeColumnMajorLess, std::__1::allocator<TSUCellRect> >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSUCellRect, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, TSTCellRangeColumnMajorLess>="__value_"Q}}}
{RefTypeHolder<TSCECellRef, 2>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24@0:8r^{RefTypeHolder<TSCECellRef, 1>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16
{RefTypeHolder<TSCECellRef, 2>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24@0:8r^{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16
{RefTypeHolder<TSCECellRef, 1>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24@0:8r^{RefTypeHolder<TSCECellRef, 2>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16
{RefTypeHolder<TSCECellRef, 1>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24@0:8r^{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16
{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24@0:8r^{RefTypeHolder<TSCECellRef, 1>={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16
{TSUModelCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
{TSUModelCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUChromeCellCoord={TSUCellCoord=ISBB}}16
{TSUViewCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
{TSUChromeCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
{TSUChromeCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
{TSUViewCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUChromeCellCoord={TSUCellCoord=ISBB}}16
{TSUModelRowIndex=I}20@0:8{TSUViewRowIndex=I}16
{TSUModelRowIndex=I}20@0:8{TSUChromeRowIndex=I}16
{TSUModelColumnIndex=S}18@0:8{TSUViewColumnIndex=S}16
{TSUModelColumnIndex=S}18@0:8{TSUChromeColumnIndex=S}16
{TSUViewRowIndex=I}20@0:8{TSUModelRowIndex=I}16
{TSUViewColumnIndex=S}18@0:8{TSUModelColumnIndex=S}16
{TSUChromeRowIndex=I}20@0:8{TSUViewRowIndex=I}16
{TSUChromeColumnIndex=S}18@0:8{TSUViewColumnIndex=S}16
{TSUViewRowIndex=I}20@0:8{TSUChromeRowIndex=I}16
{TSUViewColumnIndex=S}18@0:8{TSUChromeColumnIndex=S}16
{TSUChromeRowIndex=I}20@0:8{TSUModelRowIndex=I}16
{TSUChromeColumnIndex=S}18@0:8{TSUModelColumnIndex=S}16
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@0:8r^{TSUModelColumnIndex=S}16
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@0:8r^{TSUModelRowIndex=I}16
{TSUModelColumnIndex=S}24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
{TSUModelRowIndex=I}24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
{TSUViewColumnIndex=S}24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
{TSUViewRowIndex=I}24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@0:8r^{TSUViewColumnIndex=S}16
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@0:8r^{TSUViewRowIndex=I}16
@"TSCECellTractRef"24@0:8@"TSCECellTractRef"16
@"NSMutableIndexSet"24@0:8@"NSMutableIndexSet"16
v20@0:8{TSUViewRowIndex=I}16
v18@0:8{TSUViewColumnIndex=S}16
{TSUViewRowIndex=I}16@0:8
{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}24@0:8{TSUCellCoord=ISBB}16
Q24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
Q20@0:8{TSUViewRowIndex=I}16
{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}24@0:8Q16
Q18@0:8{TSUViewColumnIndex=S}16
@32@0:8r^{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16o^B24
i32@0:8o@16{TSUViewCellCoord={TSUCellCoord=ISBB}}24
i24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
@28@0:8{TSUViewRowIndex=I}16o^B20
@26@0:8{TSUViewColumnIndex=S}16o^B18
@24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
@32@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16o^B24
B32@0:8@16{TSUViewCellCoord={TSUCellCoord=ISBB}}24
@20@0:8{TSUViewRowIndex=I}16
@18@0:8{TSUViewColumnIndex=S}16
@32@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16@24
i36@0:8@16{TSUViewCellCoord={TSUCellCoord=ISBB}}24B32
i32@0:8@16{TSUViewCellCoord={TSUCellCoord=ISBB}}24
B24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
d28@0:8{TSUViewRowIndex=I}16o^B20
d26@0:8{TSUViewColumnIndex=S}16o^B18
d20@0:8{TSUViewRowIndex=I}16
d18@0:8{TSUViewColumnIndex=S}16
v28@0:8d16{TSUViewRowIndex=I}24
v26@0:8d16{TSUViewColumnIndex=S}24
i42@0:8{TSUViewColumnIndex=S}16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}18@26Q34
i48@0:8{TSUViewRowIndex=I}16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}20@28Q36B44
v24@0:8{TSUViewRowIndex=I}16{TSUViewRowIndex=I}20
v20@0:8{TSUViewColumnIndex=S}16{TSUViewColumnIndex=S}18
v36@0:8{_NSRange=QQ}16{TSUViewRowIndex=I}32
v40@0:8@16{TSUViewCellCoord={TSUCellCoord=ISBB}}24@32
i36@0:8o^{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}16{TSUViewCellCoord={TSUCellCoord=ISBB}}24B32
@32@0:8@16{TSUViewCellCoord={TSUCellCoord=ISBB}}24
{TSUViewCellCoord={TSUCellCoord=ISBB}}24@0:8@16
B32@0:8{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
{TSUViewCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}32@0:8{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{vector<TSUViewCellRect, std::__1::allocator<TSUViewCellRect> >=^{TSUViewCellRect}^{TSUViewCellRect}{__compressed_pair<TSUViewCellRect *, std::__1::allocator<TSUViewCellRect> >=^{TSUViewCellRect}}}32@0:8{TSUViewCellRect={TSUCellRect={TSUCellCoord=ISBB}{?=II}}}16
{vector<TSUViewCellRect, std::__1::allocator<TSUViewCellRect> >=^{TSUViewCellRect}^{TSUViewCellRect}{__compressed_pair<TSUViewCellRect *, std::__1::allocator<TSUViewCellRect> >=^{TSUViewCellRect}}}24@0:8@16
{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24@0:8r^{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16
{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}24@0:8r^{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}}16
{TSUModelCellCoord={TSUCellCoord=ISBB}}24@0:8r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8r^{TSUModelCellCoord={TSUCellCoord=ISBB}}16
{TSUViewCellCoord={TSUCellCoord=ISBB}}24@0:8r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16
C20@0:8{TSUViewRowIndex=I}16
@28@0:8C16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}20
@"TSTStrokeLayerMergedStack"
v32@0:8r^{IdentifierNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}I}16@24
v32@0:8^{IdentifierNodeArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ExpressionNodeArchive}I}16@24
@40@0:8r^{HeaderStorageBucket_Header=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}^{Reference}IfII}16@24^I32
v36@0:8^{HeaderStorageBucket_Header=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}^{Reference}IfII}16@24I32
v24@0:8{TSCEVectorIndexPair=II}16
B40@0:8{TSUCellCoord=ISBB}16@24r^{TSCESubFormulaOwnerID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}S}32
v32@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}BB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{TSUColumnRowOffset=ii}BBBBBBB}}16@?24
@40@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}BB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{TSUColumnRowOffset=ii}BBBBBBB}}32
@40@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24r^{TSUCellCoord=ISBB}32
B40@0:8{TSUCellCoord=ISBB}16@24^Q32
{TSCESubFormulaOwnerID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}S}16@0:8
v40@0:8{TSCESubFormulaOwnerID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}S}16
{TSCESubFormulaOwnerID="_baseOwnerUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_ownerIndex"S}
@"TSCECellCoordinateVector"
d76@0:8d16@24q32d40I48^d52^d60^d68
B60@0:8d16@24q32I40^d44^d52
B24@0:8d16
@28@0:8C16Q20
@40@0:8@16@24r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}32
@32@0:8@16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}24
@32@0:8I16C20^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
C32@0:8{_NSRange=QQ}16
v32@0:8r^{CategoryOrderArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}^{Reference}}16@24
v32@0:8^{CategoryOrderArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{Reference}^{Reference}}16@24
{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}32@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16r^{unordered_map<TSCECategoryLevel, int, std::__1::hash<TSCECategoryLevel>, std::__1::equal_to<TSCECategoryLevel>, std::__1::allocator<std::__1::pair<const TSCECategoryLevel, int> > >={__hash_table<std::__1::__hash_value_type<TSCECategoryLevel, int>, std::__1::__unordered_map_hasher<TSCECategoryLevel, std::__1::__hash_value_type<TSCECategoryLevel, int>, std::__1::hash<TSCECategoryLevel>, true>, std::__1::__unordered_map_equal<TSCECategoryLevel, std::__1::__hash_value_type<TSCECategoryLevel, int>, std::__1::equal_to<TSCECategoryLevel>, true>, std::__1::allocator<std::__1::__hash_value_type<TSCECategoryLevel, int> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECategoryLevel, int>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSCECategoryLevel, std::__1::__hash_value_type<TSCECategoryLevel, int>, std::__1::hash<TSCECategoryLevel>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSCECategoryLevel, std::__1::__hash_value_type<TSCECategoryLevel, int>, std::__1::equal_to<TSCECategoryLevel>, true> >=f}}}24
@68@0:8@16{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24@40{TSUCellRect={TSUCellCoord=ISBB}{?=II}}48i64
I32@0:8^{set<TSTColumnOrRowMap, TSTColumnOrRowMapTgtLess, std::__1::allocator<TSTColumnOrRowMap> >={__tree<TSTColumnOrRowMap, TSTColumnOrRowMapTgtLess, std::__1::allocator<TSTColumnOrRowMap> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, TSTColumnOrRowMapTgtLess>=Q}}}16^{TSTColumnOrRowMap=IIIB}24
{_NSRange=QQ}32@0:8r^{TSTColumnOrRowMap=IIIB}16r^{multiset<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >={__tree<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, TSTColumnOrRowMapPbLess>=Q}}}24
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}48@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16r^{multiset<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >={__tree<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, TSTColumnOrRowMapPbLess>=Q}}}32r^{multiset<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >={__tree<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, TSTColumnOrRowMapPbLess>=Q}}}40
{TSUCellCoord=ISBB}40@0:8{TSUCellCoord=ISBB}16r^{multiset<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >={__tree<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, TSTColumnOrRowMapPbLess>=Q}}}24r^{multiset<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >={__tree<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, TSTColumnOrRowMapPbLess>=Q}}}32
^{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}48@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16r^{multiset<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >={__tree<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, TSTColumnOrRowMapPbLess>=Q}}}32r^{multiset<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >={__tree<TSTColumnOrRowMap, TSTColumnOrRowMapPbLess, std::__1::allocator<TSTColumnOrRowMap> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, TSTColumnOrRowMapPbLess>=Q}}}40
{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}48@0:8r^{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}16^@24{TSUCellRect={TSUCellCoord=ISBB}{?=II}}32
{set<TSTColumnOrRowMap, TSTColumnOrRowMapTgtLess, std::__1::allocator<TSTColumnOrRowMap> >="__tree_"{__tree<TSTColumnOrRowMap, TSTColumnOrRowMapTgtLess, std::__1::allocator<TSTColumnOrRowMap> >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, TSTColumnOrRowMapTgtLess>="__value_"Q}}}
{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell> > >={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSTPlanForGroupingCell>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}24@0:8@16
B40@0:8@16r^{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@32
@40@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16@24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32
@44@0:8@16@24i32@36
v44@0:8@16S24@28@36
B56@0:8@16r^{TSTPlanForGroupingCell=S{vector<TSTGroupingLevelAndType, std::__1::allocator<TSTGroupingLevelAndType> >=^{TSTGroupingLevelAndType}^{TSTGroupingLevelAndType}{__compressed_pair<TSTGroupingLevelAndType *, std::__1::allocator<TSTGroupingLevelAndType> >=^{TSTGroupingLevelAndType}}}}24@32@40@48
S20@0:8i16
@48@0:8Q16q24@32@40
@60@0:8d16C24@28@36{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}44
{vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}}}16@0:8
v40@0:8{vector<TSUCellCoord, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::__1::allocator<TSUCellCoord> >=^{TSUCellCoord}}}16
@32@0:8r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}16r^{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}24
i28@0:8@16{TSUViewRowIndex=I}24
i26@0:8@16{TSUViewColumnIndex=S}24
i56@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16@?24@?32@?40@?48
v52@0:8{TSUViewRowIndex=I}16@?20@?28@?36@?44
v42@0:8{TSUViewColumnIndex=S}16@?18@?26@?34
B32@0:8^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16{TSUCellCoord=ISBB}24
I24@0:8I16I20
S24@0:8I16S20
{TSUCellCoord=ISBB}32@0:8{TSUColumnRowOffset=ii}16{TSUCellCoord=ISBB}24
I28@0:8Q16I24
@"TSTHiddenStateIndexSet"
v56@0:8@16@24{TSUCellCoord=ISBB}32Q40^B48
@32@0:8r^{MasterLayoutArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{WidthHeightCache}}16@24
v32@0:8^{MasterLayoutArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{WidthHeightCache}}16@24
B32@0:8{CGPoint=dd}16
v32@0:8r^{FormulaEqualsTokenAttachmentArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UIGraphicalAttachment}}16@24
v32@0:8^{FormulaEqualsTokenAttachmentArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UIGraphicalAttachment}}16@24
v40@0:8@16^{CGContext=}24@32
v40@0:8@"TSWPUIGraphicalAttachment"16^{CGContext=}24@"TSWPSelection"32
@"TSTTableNameSelection"
@36@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24i32
@28@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16i24
@30@0:8{TSUModelColumnIndex=S}16i18@22
@24@0:8r^{GroupColumnArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UUID}^{FunctorArchive}^{UUID}i}16
v32@0:8^{GroupColumnArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{UUID}^{FunctorArchive}^{UUID}i}16@24
r^{TSCEFunctor={TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}C}16@0:8
{TSCEFunctor="_formula"{TSCEFormula="_astNodeArray"^{TSCEASTNodeArray}"_translationFlags"{TSCEFormulaTranslationFlags="_flags"C}"_hostTableUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_hostColumnUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}"_hostRowUID"{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}}"_numArgs"C}
{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}48@0:8r^{TSCEFormula=^{TSCEASTNodeArray}{TSCEFormulaTranslationFlags=C}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}16@24r^{TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}BB}32@40
@32@0:8@16r^{TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}BB}24
@"TSCEFormulaRewriteSpec"
@24@0:8^{TSCECalcEngine=@@@^{TSCEDependencyTracker}i{_opaque_pthread_mutex_t=q[56c]}Bi@Bd@@@{unordered_set<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> >={__hash_table<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned short, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned short> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned short> >=f}}}{unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}{vector<TSCERecalcPhaseState *, std::__1::allocator<TSCERecalcPhaseState *> >=^^{TSCERecalcPhaseState}^^{TSCERecalcPhaseState}{__compressed_pair<TSCERecalcPhaseState **, std::__1::allocator<TSCERecalcPhaseState *> >=^^{TSCERecalcPhaseState}}}{TSCEInternalCellRefSet={unordered_map<unsigned short, TSCECellCoordSet, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSCECellCoordSet> > >={__hash_table<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__1::hash<unsigned short>, true>, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__1::hash<unsigned short>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__1::equal_to<unsigned short>, true> >=f}}}}{_opaque_pthread_mutex_t=q[56c]}BB{TSCERefResolverMap={_opaque_pthread_mutex_t=q[56c]}{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *> > >={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}B{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *> > >={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}{vector<TSCETableResolver *, std::__1::allocator<TSCETableResolver *> >=^^{TSCETableResolver}^^{TSCETableResolver}{__compressed_pair<TSCETableResolver **, std::__1::allocator<TSCETableResolver *> >=^^{TSCETableResolver}}}}@Q@@@Q@@@i@@B@@B@@@@@BBBBQ@@@@@@{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}{unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}@@BB@@@@}16
^{TSCETableResolver=^^?}24@0:8@16
{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@0:8r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}16
{vector<TSCEValue, std::__1::allocator<TSCEValue> >=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::__1::allocator<TSCEValue> >=^{TSCEValue}}}40@0:8r^{TSCECategoryRef={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}CC{TSUPreserveFlags=C}s}16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24^@32
^{TSCETableResolver=^^?}24@0:8@"<TSCEReferenceResolving>"16
@"<TSCEResolverContainer>"32@0:8@"NSString"16@"TSKDocumentRoot"24
@"<TSCEReferenceResolving>"40@0:8@"NSString"16@"TSKDocumentRoot"24@"<TSCEReferenceResolving>"32
@"<TSCEReferenceResolving>"40@0:8@"NSString"16@"TSKDocumentRoot"24@"NSString"32
^{TSCECalcEngine=@@@^{TSCEDependencyTracker}i{_opaque_pthread_mutex_t=q[56c]}Bi@Bd@@@{unordered_set<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> >={__hash_table<unsigned short, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<unsigned short> >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>, std::__1::allocator<std::__1::__hash_node<unsigned short, void *> > >={__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>=^{__hash_node_base<std::__1::__hash_node<unsigned short, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<unsigned short> >=Q}{__compressed_pair<float, std::__1::equal_to<unsigned short> >=f}}}{unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}{vector<TSCERecalcPhaseState *, std::__1::allocator<TSCERecalcPhaseState *> >=^^{TSCERecalcPhaseState}^^{TSCERecalcPhaseState}{__compressed_pair<TSCERecalcPhaseState **, std::__1::allocator<TSCERecalcPhaseState *> >=^^{TSCERecalcPhaseState}}}{TSCEInternalCellRefSet={unordered_map<unsigned short, TSCECellCoordSet, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSCECellCoordSet> > >={__hash_table<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__1::hash<unsigned short>, true>, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__1::hash<unsigned short>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__1::equal_to<unsigned short>, true> >=f}}}}{_opaque_pthread_mutex_t=q[56c]}BB{TSCERefResolverMap={_opaque_pthread_mutex_t=q[56c]}{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *> > >={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}B{unordered_map<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *> > >={__hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::hash<TSUUUID>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, TSCETableResolver *>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> >=f}}}{vector<TSCETableResolver *, std::__1::allocator<TSCETableResolver *> >=^^{TSCETableResolver}^^{TSCETableResolver}{__compressed_pair<TSCETableResolver **, std::__1::allocator<TSCETableResolver *> >=^^{TSCETableResolver}}}}@Q@@@Q@@@i@@B@@B@@@@@BBBBQ@@@@@@{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}^{UUIDData<TSP::UUIDData>}{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >=^{UUIDData<TSP::UUIDData>}}}{unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}{unordered_set<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={__hash_table<TSU::UUIDData<TSP::UUIDData>, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<TSU::UUIDData<TSP::UUIDData> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>, std::__1::allocator<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> > >={__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>=^{__hash_node_base<std::__1::__hash_node<TSU::UUIDData<TSP::UUIDData>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::hash<TSUUUID> >=Q}{__compressed_pair<float, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> > >=f}}}@@BB@@@@}
@40@0:8q16@24@32
q20@0:8i16
@24@0:8r^{ImportWarningSetArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ImportWarningSetArchive_FormulaImportWarning}BBBBBBBBBBBBBBB}16
v24@0:8^{ImportWarningSetArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{ImportWarningSetArchive_FormulaImportWarning}BBBBBBBBBBBBBBB}16
{TSTImportWarningSetCellWarningFlags="mCondFormatAboveAvgEqualAverageImportWarning"b1"mCondFormatAboveAvgStdDevImportWarning"b1"mCondFormatComplexFormulaImportWarning"b1"mCondFormatContainsErrorsImportWarning"b1"mCondFormatExprImportWarning"b1"mCondFormatNotContainsErrorsImportWarning"b1"mCondFormatParametersNotAllTheSameTypeImportWarning"b1"mCondFormatStopIfTrueImportWarning"b1"mCondFormatUnsupportedOperatorImportWarning"b1"mCondFormatUnsupportedStylingImportWarning"b1"mCondFormatUnsupportedTimePeriodImportWarning"b1"mUnsupportedConditionalFormatImportWarning"b1"mUnsupportedDataFormatImportWarning"b1"mDurationFormatRangeChangedUpgradeWarning"b1}
{TSTImportFormulaWarning="mType"q"mOriginalFormula"@"NSString""mSupplementaryText"@"NSString"}
v32@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24
{TSCECellRef={TSUCellCoord=ISBB}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}24@0:8Q16
@24@0:8r^{ImportWarningSetByCellRefArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CellRefImportWarningSetPairArchive>=^{Arena}ii^{Rep}}}16
v24@0:8^{ImportWarningSetByCellRefArchive=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::CellRefImportWarningSetPairArchive>=^{Arena}ii^{Rep}}}16
{unordered_map<TSCECellRef, TSTImportWarningSet *, std::__1::hash<TSCECellRef>, std::__1::equal_to<TSCECellRef>, std::__1::allocator<std::__1::pair<const TSCECellRef, TSTImportWarningSet *> > >="__table_"{__hash_table<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, std::__1::__unordered_map_hasher<TSCECellRef, std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, std::__1::hash<TSCECellRef>, true>, std::__1::__unordered_map_equal<TSCECellRef, std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, std::__1::equal_to<TSCECellRef>, true>, std::__1::allocator<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSCECellRef, std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, std::__1::hash<TSCECellRef>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<TSCECellRef, std::__1::__hash_value_type<TSCECellRef, TSTImportWarningSet *>, std::__1::equal_to<TSCECellRef>, true> >="__value_"f}}}
{vector<TSCECellRef, std::__1::allocator<TSCECellRef> >="__begin_"^{TSCECellRef}"__end_"^{TSCECellRef}"__end_cap_"{__compressed_pair<TSCECellRef *, std::__1::allocator<TSCECellRef> >="__value_"^{TSCECellRef}}}
@"TSCETrackedReference"
@48@0:8@16@24^B32^B40
@40@0:8@16Q24@32
i24@0:8Q16
B24@0:8@"<TSUMultipleChoiceListChoiceProviding>"16
@"NSString"24@0:8Q16
@"NSDate"24@0:8Q16
v24@0:8r^{PopUpMenuModel=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::PopUpMenuModel_CellValue>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSCE::CellValueArchive>=^{Arena}ii^{Rep}}}16
v32@0:8^{PopUpMenuModel=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{RepeatedPtrField<TST::PopUpMenuModel_CellValue>=^{Arena}ii^{Rep}}{RepeatedPtrField<TSCE::CellValueArchive>=^{Arena}ii^{Rep}}}16@24
v44@0:8r^{TableDataList_ListEntry=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{Reference}^{FormulaArchive}^{FormatStructArchive}^{CustomFormatArchive}^{Reference}^{Reference}^{ImportWarningSetArchive}^{CellSpecArchive}II}16i24@28@?36
v24@0:8r^{TableDataList_ListEntry=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{Reference}^{FormulaArchive}^{FormatStructArchive}^{CustomFormatArchive}^{Reference}^{Reference}^{ImportWarningSetArchive}^{CellSpecArchive}II}16
v40@0:8r^{TableDataList_ListEntry=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{Reference}^{FormulaArchive}^{FormatStructArchive}^{CustomFormatArchive}^{Reference}^{Reference}^{ImportWarningSetArchive}^{CellSpecArchive}II}16@24@?32
v32@0:8^{TableDataList_ListEntry=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}{ArenaStringPtr=^{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >}}^{Reference}^{FormulaArchive}^{FormatStructArchive}^{CustomFormatArchive}^{Reference}^{Reference}^{ImportWarningSetArchive}^{CellSpecArchive}II}16@24
@"NSObject<TSTTableDataPayloadHashing>"
{map<TSUCellCoord, TSTCell *, std::__1::less<TSUCellCoord>, std::__1::allocator<std::__1::pair<const TSUCellCoord, TSTCell *> > >="__tree_"{__tree<std::__1::__value_type<TSUCellCoord, TSTCell *>, std::__1::__map_value_compare<TSUCellCoord, std::__1::__value_type<TSUCellCoord, TSTCell *>, std::__1::less<TSUCellCoord>, true>, std::__1::allocator<std::__1::__value_type<TSUCellCoord, TSTCell *> > >="__begin_node_"^{__tree_end_node<std::__1::__tree_node_base<void *> *>}"__pair1_"{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSUCellCoord, TSTCell *>, void *> > >="__value_"{__tree_end_node<std::__1::__tree_node_base<void *> *>="__left_"^{__tree_node_base<void *>}}}"__pair3_"{__compressed_pair<unsigned long, std::__1::__map_value_compare<TSUCellCoord, std::__1::__value_type<TSUCellCoord, TSTCell *>, std::__1::less<TSUCellCoord>, true> >="__value_"Q}}}
@"TSPTemporaryObjectContextDelegate"
@"TSPObjectContext"
B28@0:8i16i20B24
I20@0:8i16
B24@0:8i16I20
@32@0:8^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}16@24
v32@0:8^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}16@24
v36@0:8^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}16@24B32
v36@0:8{TSUDecimal={?=[2Q]}}16B32
v32@0:8{TSUDecimal={?=[2Q]}}16
v24@0:8r^{TSUDecimal={?=[2Q]}}16
v48@0:8r^{TSCEValue={TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}[1i]{TSCEFormat={TSCEFormatStruct=i(?={?=b16b8b3b1b1}{?=b8}{?=b8b8b1}{?=b1iii})@@@}C}B}[19Q]i}16@24B32^B36B44
@32@0:8I16B20^B24
v28@0:8B16I20B24
@24@0:8^B16
@40@0:8I16C20{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24
@48@0:8S16C20{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24d40
v28@0:8S16@20
v24@0:8C16S20
v28@0:8S16Q20
^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}24@0:8{TSUCellCoord=ISBB}16
v36@0:8{TSUCellCoord=ISBB}16B24@?28
@40@0:8{TSUCellCoord=ISBB}16^B24^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}32
@32@0:8{TSUCellCoord=ISBB}16^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}24
{?=IIIIIIIIIS}100@0:8@16@24@32@40@48@56@64@72@80^{?={?=Cb8b16b16b16b16b16}[0C]}88B96
v68@0:8@16{TSUCellCoord=ISBB}24r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}32@40@48B56B60B64
v60@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@32@40B48B52B56
{?=IIIIIIIIIS}32@0:8@16{TSUCellCoord=ISBB}24
{?=IIIIIIIIIS}36@0:8@16^{?={?=Cb8b16b16b16b16b16}[0C]}24B32
@32@0:8@16d24
v32@0:8@16B24C28
v32@0:8^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}16{TSUCellCoord=ISBB}24
@24@0:8^{TSTCellStorage={?=Cb8b16b16b16b32}[0C]}16
{vector<TSUCellRect, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}^{TSUCellRect}{__compressed_pair<TSUCellRect *, std::__1::allocator<TSUCellRect> >=^{TSUCellRect}}}16@0:8
v32@0:8^@16@24
v40@0:8^@16@24@?32
@40@0:8r^{DataStore=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{HeaderStorage}^{Reference}^{TileStorage}^{Reference}^{Reference}^{Reference}^{TableRBTree}^{TableRBTree}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}III}16@24@32
v36@0:8^{DataStore=^^?{InternalMetadataWithArena=^v}{HasBits<1>=[1I]}{CachedSize={atomic<int>={__cxx_atomic_impl<int, std::__1::__cxx_atomic_base_impl<int> >=Ai}}}^{HeaderStorage}^{Reference}^{TileStorage}^{Reference}^{Reference}^{Reference}^{TableRBTree}^{TableRBTree}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}^{Reference}III}16@24B32
v56@0:8@16r^{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}24@32@40B48B52
{vector<TSTCell *, std::__1::allocator<TSTCell *> >=^@^@{__compressed_pair<TSTCell *__strong *, std::__1::allocator<TSTCell *> >=^@}}44@0:8{TSUModelRowIndex=I}16@20^{vector<TSUModelColumnIndex, std::__1::allocator<TSUModelColumnIndex> >=^{TSUModelColumnIndex}^{TSUModelColumnIndex}{__compressed_pair<TSUModelColumnIndex *, std::__1::allocator<TSUModelColumnIndex> >=^{TSUModelColumnIndex}}}28@?36
@"TSTTableDataList"
@"TSKCustomFormatList"
@"TSTTableTileStorage"
@"TSTTableHeaderStorage"
@"TSPLazyReference"
@"TSTMergeRegionMap"
v60@0:8@16{?={?=II}{?=II}}24^{CGAffineTransform=dddddd}40d48B56
@"TSKAnnotationAuthor"16@0:8
v24@0:8@"TSKAnnotationAuthor"16
@"NSDate"16@0:8
@"TSDCommentStorage"16@0:8
v24@0:8@"TSDCommentStorage"16
@64@0:8@16@24{TSTCellUID={UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}{UUIDData<TSP::UUIDData>=(?=[16C]{?=CCCCCCCCCCCCCCCC}{?=QQ})}}32
@40@0:8@16@24{TSUModelCellCoord={TSUCellCoord=ISBB}}32
@"TSTAutofillSelection"
Q32@0:8@16@24
d40@0:8@16@24@32
@"TSDTilingLayer"16@0:8
@"TSTTableReferences"16@0:8
@"TSTSelectionDragController"16@0:8
v24@0:8@"TSTSelectionDragController"16
v24@0:8@"NSSet"16
@"NSMutableDictionary"16@0:8
v32@0:8@16q24
B48@0:8@16{_NSRange=QQ}24@40
B24@0:8@"UITextField"16
v24@0:8@"UITextField"16
v32@0:8@"UITextField"16q24
B48@0:8@"UITextField"16{_NSRange=QQ}24@"NSString"40
v32@0:8@16^{CGContext=}24
v24@0:8@"CALayer"16
v32@0:8@"CALayer"16^{CGContext=}24
@"<CAAction>"32@0:8@"CALayer"16@"NSString"24
@36@0:8{CGPoint=dd}16B32
@32@0:8{CGPoint=dd}16
v24@0:8:16
v32@0:8:16@24
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8{TSUCellCoord=ISBB}16
v56@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16^{?=Bdddddd}32^{CGRect={CGPoint=dd}{CGSize=dd}}40^{CGRect={CGPoint=dd}{CGSize=dd}}48
{TSUCellCoord=ISBB}32@0:8{CGPoint=dd}16
{CGAffineTransform=dddddd}56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16{TSUCellCoord=ISBB}48
{CGRect={CGPoint=dd}{CGSize=dd}}72@0:8@16{CGAffineTransform=dddddd}24
@"TSTTableReferences"
@"TSTSelectionDragController"
@"<TSTTableAnimationController>"
@"<TSTTableRepDelegate>"
@"<TSTTableChromeProvider>"
@"<TSTCanvasReferenceController>"
@"TSDTilingLayer"
@"CALayer"
@"CAShapeLayer"
B24@0:8@"TSDRep"16
