@(#)PROGRAM:heap  PROJECT:SamplingTools-64559.72.1
.memgraph
%s[%d]: [fatal] unable to read input graph: %s
%s[%d]: mach port for process %d not valid
%s[%d]: %s
%s[%d]: [fatal] mach port for process %d not valid
%s[%d]: [fatal] %s
Command args:    %@
Target process:  %@ [%u]
Parent process:  %@ [%u]
Target process of memgraph:  %@ [%u]
%s[%d]: Unable to deallocate target task port: %d (%s)
SAMPLING_TOOLS_TARGET_PID
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: [fatal] Target task not available for analysis
v12@?0i8
%s[%d]: [fatal] %s kept pid %u suspended for too long - exiting to prevent watchdog timer from killing that process.
v8@?0
SAMPLING_TOOLS_ALL_PROCESSES
Target process is using %s so not generating corpse for better performance.
Target process is an ancestor and permitting live process for ancestors so not generating a corpse to save resources by default.
__check_mach_ports_lookup
i24@?0r^v8r^v16
%s-%d-%s
DT_RESPAWN_FOR_NONNATIVE
%s/%s[%d]-allProcesses.XXXXXX
%s[%d]: [fatal] Couldn't create output directory from template %s, exiting
%s[%d]: [fatal] Couldn't change directory to %s
stderr.txt
Couldn't create error file stderr.txt (%s)
Couldn't replace stderr file with stderr.txt (%s)
Writing all output files into %s
Skipping process of wrong architecture:  %d %s
ANALYZING PROCESS %5d: %s
.txt
Couldn't open output file %s (%s)
Couldn't replace output file with %s (%s)
    CHILD ANALYSIS TOOL CRASHED with %s
    %s for %5d: %s
Exception '%s', reason: '%s'
v16@?0i8I12
v40@?0i8r*12B20I24I28^B32
Child analysis tool crashed for these processes:
Wrote output files into %s
To print all files in pid order use:  (cd %s; cat `/bin/ls -tr1 *.txt`) 
task from parent for pid %u
%s[%d]: [fatal] Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
%s[%d]: Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
SIMULATOR_ROOT
SIMULATOR_SHARED_RESOURCES_DIRECTORY
libclang_rt.asan
Address Sanitizer
libclang_rt.tsan
Thread Sanitizer
v24@?0{_CSTypeRef=QQ}8
generated corpse for pid %u
Failed to generate corpse from the process: %d (%s)
%s[%d]: [fatal] %s, exiting
%s[%d]: %s - examining live process instead
BOOL _respawnToolIfNecessaryWithExitStatus(pid_t, task_read_t, VMURespawnToolOptions, int *)
Only one of kVMURespawnForAllProcesses and kVMURespawnForAllNonNativeProcesses can be set
DYLD_ROOT_PATH
SIMULATOR_UDID
DT_NO_RESPAWN
DT_FORCE_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
%s[%d]: respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but the analysis process does not match the SDK variant of the target process %d.
Analysis of malloc zones may fail.
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
DYLD_FORCE_PLATFORM
x86_64
i386
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
--al
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal] waitpid: %s
_respawnToolIfNecessaryWithExitStatus_block_invoke
sharedCode.m
WIFSIGNALED(child_status)
Child `%s` process died with signal %d %s
v12@?0I8
%s/usr/bin/%s
v20@?0I8@?<v@?>12
Running in DT_RESPAWN_FOR_NONNATIVE mode -- respawning only if necessary to match target process arch and/or platform.
com.apple.dt.instruments
[-sz] [--showSizes] [--noContent] [--addresses=all|<classes-pattern>] <process | memory-graph-file>
<classes-pattern> can be followed by a malloc size specification of the form
[size] or [lowerBound-upperBound], such as 'malloc[1024]' or 'CFData[16k-]'
help
sortBySize
sort output by total size of class instances, rather than by count
zones
show output per-zone instead of an aggregated summary of all zones
kindOfClass
kindOfClass-pattern
filter objects for kind of class (class or superclass matching pattern)
v24@?0@"NSString"8^@16
--kindOfClass option can only be specified once
--kindOfClass
addresses
all|classes-pattern
prints the addresses of matching objects found on the heap in ascending address order
--addresses option can only be specified once
only
--addresses
forkCorpse
generate a corpse fork from process and run heap on it
guessNonObjects
try to identify non-object malloc nodes which are referenced by fields of other objects
diffFrom
memgraph
show only the new objects since the specified memgraph
--diffFrom option can only be specified once
specified memgraph is invalid or nil
layouts
show the object layout for types matching the specified pattern
--layouts option can only be specified once
--layouts
noContent
do not show object content in --addresses mode
readonlyContent
in --addresses mode, only show content backed by readonly memory
showSizes
show distribution of each malloc size for each object, instead of summing and averaging
sumObjectFields
accumulate those fields into the entry for that object
quiet
suppress the process description header
rawNames
show raw class names instead of display names
showInternalFragmentation
print class layouts that have wasted space in allocated instances due to alignment
showBinarySummary
show summary by binaries
getCorpseFromParent
noScanOverlay
DT_NO_SCAN_OVERLAY
showTiming
initialization
metadata
print only the contents of metadata allocations, like 'Swift Metadata'
allProcesses
minimumPid
run heap against all processes (or those >= minimumPid), with the given arguments
shortenedOutput
print fewer characters by using tabs instead of spaces (for ExcResource reports)
paths
for debugging, show binary paths rather than just names
excResource
Produce output for ExcResource report
OS_os_transaction
--excResource
unknown argument: %@
no process id or name specified
only one of --noContent or --readonlyContent can be specified
heap
reading/deserializing graph from file
%s[%d]: [fatal] memgraphs are from the same file [%s]
%s[%d]: [fatal] Invalid memgraph format passed in to --diffFrom: %s
%s[%d]: [fatal] Memgraphs are from different process identifiers [%d] and [%d]
Only showing allocations in %s that are not in %s.
generate analysis task
adding root nodes from task
adding malloc nodes from task
Process %d is not debuggable. Due to security restrictions, heap can only show contents of readonly memory of restricted processes.
%s[%d]: [fatal] Live process and memgraph are from different process identifiers [%d] and [%d]
Only showing allocations in live process [%s] that are not in %s.
unable to introspect malloc zones to get allocation information
%s[%d]: %s
%s[%d]: [fatal] %s
/tmp
counting allocations
printHeap_block_invoke
heap.m
Invalid zone index for block [%#llx-%#llx]: %d
region->zone_index < zoneCount
v24@?0@"VMUVMRegion"8^B16
enumerating references for guessNonObjects
Storage)
[%llu]
v68@?0I8I12I16{?=^{?}{?=QIQ}^{?}}20^B60
printing zone summary info
Process %d: %u zone%s
Zone %s: Overall size: %quKB
; %u nodes malloced for %quKB (%qu%% of capacity); largest unused: [%#llx-%lldKB]
All zones: %u nodes malloced - %quKB
Zone %s: %u nodes
 - Sizes: 
All zones: %u nodes malloced - Sizes: 
v36@?0Q8@"VMUClassInfo"16I24^B28
Found %u ObjC classes
Found %u Swift classes
Found %u CFTypes
Derived %u type names for non-objects from allocation backtraces
non-object
Shouldn't need to create new delta bucket to decrement size %ld
MapIncrWithCount
delta > 0
v32@?0@"VMUFieldInfo"8Q16^B24
%gKB[%lu] 
%lu[%lu] 
Zone %s: %u nodes (%llu bytes) 
All zones: %u nodes (%llu bytes) 
Active blocks in Zone %s that match pattern '%s':
Active blocks in all zones that match pattern '%s':
%#qx
%#qx: %s (%qd bytes)
v52@?0I8{?=Qb60b4@}12@"VMUVMRegion"36^B44
q24@?0@"VMUClassInfo"8@"VMUClassInfo"16
%s -- %s wasted due to alignment (%u bytes * %lu instance%s)
%8lu  %9lu       %s
q24@?0@"NSString"8@"NSString"16
printClassInfo
%8lu  %9lu  %8.1f   
(strlen(buf) + classNameWidth) == defaultTabWidth * 10
%-*s  %-*s  %s
  %-*s  %s
%2.1f GB
%2.1f MB
%2.1f KB
%4llu bytes
Type names for non-objects could be derived from allocation backtraces if the process used MallocStackLogging
No new objects detected between memgraphs.
-----------------------------------------------------------------------
   COUNT      BYTES       AVG   CLASS_NAME                                        TYPE    BINARY
   =====      =====       ===   ==========                                        ====    ======
   COUNT      BYTES       BINARY
   =====      =====       ======
Entries <class>[<offset>], like __NSCFArray[12], indicate non-objects 
pointed to by instances of <class> at given offset.
_classesPattern
T@"NSString",&,N,V_classesPattern
arrayWithArray:
T@"VMUClassPatternMatcher",&,N,V_classesPatternMatcher
containsString:
T@"VMUDebugTimer",&,N,V_debugTimer
is64Bit
TB,N,V_guessNonObjects
realizedClasses
TB,N,V_quietMode
stringByResolvingSymlinksInPath
TB,N,V_showBinarySummary
valueForEnvVar:
.cxx_destruct
_separateByZone
T@"VMUClassPatternMatcher",&,N,V_classFilterPatternMatcher
bundleForClass:
T@"VMUClassPatternMatcher",&,N,V_layoutPatternMatcher
guessNonObjects
TB,N,V_applyDiffFrom
TB,N,V_onlyShowAddresses
stringByAppendingPathComponent:
TB,N,V_separateByZone
sumObjectFields
TB,N,V_showInternalFragmentation
TB,N,V_showPaths
TB,N,V_showRawClassNames
TB,N,V_showShortenedOutput
TB,N,V_showSizes
TB,N,V_showZoneSummaries
TB,N,V_sumObjectFields
TI,N,V_objectContentLevel
UTF8String
_applyDiffFrom
_classFilterPatternMatcher
_classesPatternMatcher
_debugTimer
_guessNonObjects
_layoutPatternMatcher
_objectContentLevel
_onlyShowAddresses
_quietMode
_showBinarySummary
_showInternalFragmentation
_showPaths
_showRawClassNames
_showShortenedOutput
_showSizes
_showZoneSummaries
_sumObjectFields
absoluteURL
addMallocNodesFromTask
addRootNodesFromTask
allocatedTotal
appendFormat:
applyDiffFrom
arguments
attributesOfItemAtPath:error:
binaryMap
binaryName
binaryPath
blockCount
bundlePath
callStackSymbols
classFilterPatternMatcher
classInfoWithClassName:binaryPath:type:
classMap
className
classesPattern
classesPatternMatcher
compare:
componentsJoinedByString:
count
countByEnumeratingWithState:objects:count:
createMapForMinusGraph:
currentHandler
dataWithContentsOfFile:options:error:
debugTimer
defaultManager
description
detachFromTask
directedGraphWithData:error:
displayName
endEvent:
enumerateInfosWithBlock:
enumerateReferencesWithBlock:
enumerateRegionsWithBlock:
enumerateTypeFieldsWithBlock:
executablePath
fileExistsAtPath:
fileExistsAtPath:isDirectory:
fileSize
fileURLWithPath:
fullIvarDescription
genericInfo
handleFailureInFunction:file:lineNumber:description:
hasPrefix:
hasSuffix:
infoType
init
initWithPattern:forArgument:error:
initWithPid:
initWithTask:
initWithTask:getBinariesList:
initWithTask:options:
instanceSize
intValue
isDerivedFromStackBacktrace
isEqualToString:
isExecutableFileAtPath:
isSemiCriticalProcess
labelForNode:
largestUnusedRange
lastPathComponent
layoutPatternMatcher
length
localizedDescription
logHandle
mainBundle
mapTableWithKeyOptions:valueOptions:
matchesNodeDetails:orNodeDescription:
name
nodeDetails:
nodeNamespaceSize
numberWithInt:
numberWithUnsignedInt:
objectAtIndexedSubscript:
objectContentLevel
objectForKey:
offset
onlyShowAddresses
parentPid
parentProcessPath
parseArguments:withBlock:
path
printRuntimeMetadataInfo
processDescriptionString
processInfo
processName
processSnapshotGraphWithOptions:
quantaCounter
quietMode
reason
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:flags:handler:
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:handler:
renormalizedGraph
reservedTotal
resetCachedMatches
separateByZone
setAbortOnError:
setApplyDiffFrom:
setClassFilterPatternMatcher:
setClassesPattern:
setClassesPatternMatcher:
setDebugTimer:
setDiscussion:
setGuessNonObjects:
setLayoutPatternMatcher:
setMatchingKindOfClass:
setObject:atIndexedSubscript:
setObjectContentLevel:
setOnlyShowAddresses:
setQuietMode:
setRecordRuntimeMetadataChunkInfo:
setSeparateByZone:
setShowBinarySummary:
setShowInternalFragmentation:
setShowPaths:
setShowRawClassNames:
setShowShortenedOutput:
setShowSizes:
setShowZoneSummaries:
setSumObjectFields:
setSyntaxDescription:
sharedTimer
shouldAnalyzeWithCorpse
showBinarySummary
showInternalFragmentation
showPaths
showRawClassNames
showShortenedOutput
showSizes
showZoneSummaries
signpostID
size
sortedArrayUsingComparator:
startWithCategory:message:
startWithMessage:
stop
string
stringByAppendingFormat:
stringByDeletingLastPathComponent
stringByStandardizingPath
stringValue
stringWithFormat:
stringWithUTF8String:
subgraphWithMarkedNodes:
superclassInfo
typeName
usage:
usage:shouldExit:
zoneCount
zoneNameForIndex:
[fatal] unable to read input graph: %s
[fatal] mach port for process %d not valid
[fatal] %s
examining %@ [%u]
[fatal] error acquiring target task port from parent.
[fatal] Target task not available for analysis
[fatal] %s kept pid %u suspended for too long - exiting to prevent watchdog timer from killing that process.
[fatal] Couldn't create output directory from template %s, exiting
[fatal] Couldn't change directory to %s
[fatal] Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
[fatal] %s, exiting
[fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
[fatal] 'mach_ports_register' failed: %s (%d)
[fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
[fatal] waitpid: %s
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_port_deallocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
reading/deserializing graph from file
[fatal] memgraphs are from the same file [%s]
[fatal] Invalid memgraph format passed in to --diffFrom: %s
[fatal] Memgraphs are from different process identifiers [%d] and [%d]
generate analysis task
adding root nodes from task
heap
adding malloc nodes from task
[fatal] Live process and memgraph are from different process identifiers [%d] and [%d]
[fatal] %s
counting allocations
enumerating references for guessNonObjects
printing zone summary info
ObjectLocalToThisFile
HeapGlobals
HeapZoneAggregate
@16@0:8
B16@0:8
v20@0:8B16
v24@0:8@16
I16@0:8
v20@0:8I16
v16@0:8
@"VMUClassPatternMatcher"
@"NSString"
@"VMUDebugTimer"
{_VMURange="location"Q"length"Q}
@"NSMapTable"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>22A380007</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.dt.SamplingTools.heap</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>20E5223c</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>16.4</string>
<key>DTSDKBuild</key>
<string>20E5223c</string>
<key>DTSDKName</key>
<string>iphonesimulator16.4.internal</string>
<key>DTXcode</key>
<string>1430</string>
<key>DTXcodeBuild</key>
<string>14E6097d</string>
<key>MinimumOSVersion</key>
<string>16.4</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.private.dt.instruments.dtservicehub.client</key>
<true/>
<key>com.apple.private.iosurfaceinfo</key>
<true/>
<key>com.apple.private.security.storage.AppDataContainers</key>
<true/>
<key>com.apple.rootless.datavault.metadata</key>
<true/>
<key>com.apple.security.iokit-user-client-class</key>
<array>
<string>IOSurfaceRootUserClient</string>
</array>
<key>com.apple.system-task-ports.read</key>
<true/>
<key>com.apple.system-task-ports.read.safe</key>
<true/>
</dict>
</plist>
d094com.apple.private.dt.instruments.dtservicehub.client
com.apple.private.iosurfaceinfo
094com.apple.private.security.storage.AppDataContainers
0*%com.apple.rootless.datavault.metadata
0G*com.apple.security.iokit-user-client-class0
IOSurfaceRootUserClient0% com.apple.system-task-ports.read
0*%com.apple.system-task-ports.read.safe
@(#)PROGRAM:heap  PROJECT:SamplingTools-64559.72.1
.memgraph
%s[%d]: [fatal] unable to read input graph: %s
%s[%d]: mach port for process %d not valid
%s[%d]: %s
%s[%d]: [fatal] mach port for process %d not valid
%s[%d]: [fatal] %s
Command args:    %@
Target process:  %@ [%u]
Parent process:  %@ [%u]
Target process of memgraph:  %@ [%u]
%s[%d]: Unable to deallocate target task port: %d (%s)
SAMPLING_TOOLS_TARGET_PID
%s[%d]: [fatal] error acquiring target task port from parent.
%s[%d]: %s cannot find any existing process %s a name like '%s'%s.
you have access to which has
with
; try running with `sudo`
%s[%d]: cannot examine itself.
%s[%d]: [fatal] Target task not available for analysis
v12@?0i8
%s[%d]: [fatal] %s kept pid %u suspended for too long - exiting to prevent watchdog timer from killing that process.
v8@?0
SAMPLING_TOOLS_ALL_PROCESSES
Target process is using %s so not generating corpse for better performance.
Target process is an ancestor and permitting live process for ancestors so not generating a corpse to save resources by default.
__check_mach_ports_lookup
i24@?0r^v8r^v16
%s-%d-%s
DT_RESPAWN_FOR_NONNATIVE
%s/%s[%d]-allProcesses.XXXXXX
%s[%d]: [fatal] Couldn't create output directory from template %s, exiting
%s[%d]: [fatal] Couldn't change directory to %s
stderr.txt
Couldn't create error file stderr.txt (%s)
Couldn't replace stderr file with stderr.txt (%s)
Writing all output files into %s
Skipping process of wrong architecture:  %d %s
ANALYZING PROCESS %5d: %s
.txt
Couldn't open output file %s (%s)
Couldn't replace output file with %s (%s)
    CHILD ANALYSIS TOOL CRASHED with %s
    %s for %5d: %s
Exception '%s', reason: '%s'
v16@?0i8I12
v40@?0i8r*12B20I24I28^B32
Child analysis tool crashed for these processes:
Wrote output files into %s
To print all files in pid order use:  (cd %s; cat `/bin/ls -tr1 *.txt`) 
task from parent for pid %u
%s[%d]: [fatal] Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
%s[%d]: Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
for unknown reasons
for unknown reasons, even though it appears to exist
because it no longer appears to be running
because the process does not exist
because you do not have appropriate privileges to examine it
%s[%d]: %s cannot examine process %d (%s) %s%s.
%s[%d]: %s cannot examine process %d (with name like '%s') %s.
%s[%d]: %s cannot examine process %d %s.
SIMULATOR_ROOT
SIMULATOR_SHARED_RESOURCES_DIRECTORY
libclang_rt.asan
Address Sanitizer
libclang_rt.tsan
Thread Sanitizer
v24@?0{_CSTypeRef=QQ}8
generated corpse for pid %u
Failed to generate corpse from the process: %d (%s)
%s[%d]: [fatal] %s, exiting
%s[%d]: %s - examining live process instead
BOOL _respawnToolIfNecessaryWithExitStatus(pid_t, task_read_t, VMURespawnToolOptions, int *)
Only one of kVMURespawnForAllProcesses and kVMURespawnForAllNonNativeProcesses can be set
DYLD_ROOT_PATH
SIMULATOR_UDID
DT_NO_RESPAWN
DT_FORCE_RESPAWN
%s[%d]: [fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
%s[%d]: respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but the analysis process does not match the SDK variant of the target process %d.
Analysis of malloc zones may fail.
DYLD_FRAMEWORK_PATH
DYLD_SHARED_REGION
avoid
DYLD_FORCE_PLATFORM
arm64
posix_spawnattr_init
posix_spawnattr_setbinpref_np
%s[%d]: [fatal] 'mach_ports_register' failed: %s (%d)
--al
-atExit
%s[%d]: [fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
%s[%d]: [fatal] waitpid: %s
_respawnToolIfNecessaryWithExitStatus_block_invoke
sharedCode.m
WIFSIGNALED(child_status)
Child `%s` process died with signal %d %s
v12@?0I8
%s/usr/bin/%s
v20@?0I8@?<v@?>12
Running in DT_RESPAWN_FOR_NONNATIVE mode -- respawning only if necessary to match target process arch and/or platform.
com.apple.dt.instruments
[-sz] [--showSizes] [--noContent] [--addresses=all|<classes-pattern>] <process | memory-graph-file>
<classes-pattern> can be followed by a malloc size specification of the form
[size] or [lowerBound-upperBound], such as 'malloc[1024]' or 'CFData[16k-]'
help
sortBySize
sort output by total size of class instances, rather than by count
zones
show output per-zone instead of an aggregated summary of all zones
kindOfClass
kindOfClass-pattern
filter objects for kind of class (class or superclass matching pattern)
v24@?0@"NSString"8^@16
--kindOfClass option can only be specified once
--kindOfClass
addresses
all|classes-pattern
prints the addresses of matching objects found on the heap in ascending address order
--addresses option can only be specified once
only
--addresses
forkCorpse
generate a corpse fork from process and run heap on it
guessNonObjects
try to identify non-object malloc nodes which are referenced by fields of other objects
diffFrom
memgraph
show only the new objects since the specified memgraph
--diffFrom option can only be specified once
specified memgraph is invalid or nil
layouts
show the object layout for types matching the specified pattern
--layouts option can only be specified once
--layouts
noContent
do not show object content in --addresses mode
readonlyContent
in --addresses mode, only show content backed by readonly memory
showSizes
show distribution of each malloc size for each object, instead of summing and averaging
sumObjectFields
accumulate those fields into the entry for that object
quiet
suppress the process description header
rawNames
show raw class names instead of display names
showInternalFragmentation
print class layouts that have wasted space in allocated instances due to alignment
showBinarySummary
show summary by binaries
getCorpseFromParent
noScanOverlay
DT_NO_SCAN_OVERLAY
showTiming
initialization
metadata
print only the contents of metadata allocations, like 'Swift Metadata'
allProcesses
minimumPid
run heap against all processes (or those >= minimumPid), with the given arguments
shortenedOutput
print fewer characters by using tabs instead of spaces (for ExcResource reports)
paths
for debugging, show binary paths rather than just names
excResource
Produce output for ExcResource report
OS_os_transaction
--excResource
unknown argument: %@
no process id or name specified
only one of --noContent or --readonlyContent can be specified
heap
reading/deserializing graph from file
%s[%d]: [fatal] memgraphs are from the same file [%s]
%s[%d]: [fatal] Invalid memgraph format passed in to --diffFrom: %s
%s[%d]: [fatal] Memgraphs are from different process identifiers [%d] and [%d]
Only showing allocations in %s that are not in %s.
generate analysis task
adding root nodes from task
adding malloc nodes from task
Process %d is not debuggable. Due to security restrictions, heap can only show contents of readonly memory of restricted processes.
%s[%d]: [fatal] Live process and memgraph are from different process identifiers [%d] and [%d]
Only showing allocations in live process [%s] that are not in %s.
unable to introspect malloc zones to get allocation information
%s[%d]: %s
%s[%d]: [fatal] %s
/tmp
counting allocations
printHeap_block_invoke
heap.m
Invalid zone index for block [%#llx-%#llx]: %d
region->zone_index < zoneCount
v24@?0@"VMUVMRegion"8^B16
enumerating references for guessNonObjects
Storage)
[%llu]
v68@?0I8I12I16{?=^{?}{?=QIQ}^{?}}20^B60
printing zone summary info
Process %d: %u zone%s
Zone %s: Overall size: %quKB
; %u nodes malloced for %quKB (%qu%% of capacity); largest unused: [%#llx-%lldKB]
All zones: %u nodes malloced - %quKB
Zone %s: %u nodes
 - Sizes: 
All zones: %u nodes malloced - Sizes: 
v36@?0Q8@"VMUClassInfo"16I24^B28
Found %u ObjC classes
Found %u Swift classes
Found %u CFTypes
Derived %u type names for non-objects from allocation backtraces
non-object
Shouldn't need to create new delta bucket to decrement size %ld
MapIncrWithCount
delta > 0
v32@?0@"VMUFieldInfo"8Q16^B24
%gKB[%lu] 
%lu[%lu] 
Zone %s: %u nodes (%llu bytes) 
All zones: %u nodes (%llu bytes) 
Active blocks in Zone %s that match pattern '%s':
Active blocks in all zones that match pattern '%s':
%#qx
%#qx: %s (%qd bytes)
v52@?0I8{?=Qb60b4@}12@"VMUVMRegion"36^B44
q24@?0@"VMUClassInfo"8@"VMUClassInfo"16
%s -- %s wasted due to alignment (%u bytes * %lu instance%s)
%8lu  %9lu       %s
q24@?0@"NSString"8@"NSString"16
printClassInfo
%8lu  %9lu  %8.1f   
(strlen(buf) + classNameWidth) == defaultTabWidth * 10
%-*s  %-*s  %s
  %-*s  %s
%2.1f GB
%2.1f MB
%2.1f KB
%4llu bytes
Type names for non-objects could be derived from allocation backtraces if the process used MallocStackLogging
No new objects detected between memgraphs.
-----------------------------------------------------------------------
   COUNT      BYTES       AVG   CLASS_NAME                                        TYPE    BINARY
   =====      =====       ===   ==========                                        ====    ======
   COUNT      BYTES       BINARY
   =====      =====       ======
Entries <class>[<offset>], like __NSCFArray[12], indicate non-objects 
pointed to by instances of <class> at given offset.
[fatal] unable to read input graph: %s
[fatal] mach port for process %d not valid
[fatal] %s
examining %@ [%u]
[fatal] error acquiring target task port from parent.
[fatal] Target task not available for analysis
[fatal] %s kept pid %u suspended for too long - exiting to prevent watchdog timer from killing that process.
[fatal] Couldn't create output directory from template %s, exiting
[fatal] Couldn't change directory to %s
[fatal] Failed to get DYLD info for %s with error %s (%d). Assuming it's a minimal corpse which can't be analyzed, which we sometimes see for processes which use a lot of memory.
[fatal] %s, exiting
[fatal] respawning is disabled (because DYLD_ROOT_PATH or DT_NO_RESPAWN is set), but analysis process does not match architecture of target process %d.
[fatal] 'mach_ports_register' failed: %s (%d)
[fatal] posix_spawn: %s could not be launched as a %d-bit process with architecture %s: %s (%d)
[fatal] waitpid: %s
%s[%d]: [error] 'mach_port_mod_refs' failed: %s (%d)
%s[%d]: [error] 'mach_port_deallocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_allocate' failed: %s (%d)
%s[%d]: [error] 'mach_port_insert_right' failed: %s (%d)
reading/deserializing graph from file
heap
[fatal] memgraphs are from the same file [%s]
[fatal] Invalid memgraph format passed in to --diffFrom: %s
[fatal] Memgraphs are from different process identifiers [%d] and [%d]
generate analysis task
adding root nodes from task
adding malloc nodes from task
[fatal] Live process and memgraph are from different process identifiers [%d] and [%d]
[fatal] %s
counting allocations
enumerating references for guessNonObjects
printing zone summary info
ObjectLocalToThisFile
HeapGlobals
HeapZoneAggregate
_classesPattern
T@"NSString",&,N,V_classesPattern
arrayWithArray:
T@"VMUClassPatternMatcher",&,N,V_classesPatternMatcher
guessNonObjects
T@"VMUDebugTimer",&,N,V_debugTimer
TB,N,V_guessNonObjects
stringByResolvingSymlinksInPath
TB,N,V_quietMode
valueForEnvVar:
.cxx_destruct
_separateByZone
T@"VMUClassPatternMatcher",&,N,V_classFilterPatternMatcher
containsString:
T@"VMUClassPatternMatcher",&,N,V_layoutPatternMatcher
is64Bit
TB,N,V_applyDiffFrom
realizedClasses
TB,N,V_onlyShowAddresses
sumObjectFields
TB,N,V_separateByZone
TB,N,V_showBinarySummary
TB,N,V_showInternalFragmentation
TB,N,V_showPaths
TB,N,V_showRawClassNames
TB,N,V_showShortenedOutput
TB,N,V_showSizes
TB,N,V_showZoneSummaries
TB,N,V_sumObjectFields
TI,N,V_objectContentLevel
UTF8String
_applyDiffFrom
_classFilterPatternMatcher
_classesPatternMatcher
_debugTimer
_guessNonObjects
_layoutPatternMatcher
_objectContentLevel
_onlyShowAddresses
_quietMode
_showBinarySummary
_showInternalFragmentation
_showPaths
_showRawClassNames
_showShortenedOutput
_showSizes
_showZoneSummaries
_sumObjectFields
absoluteURL
addMallocNodesFromTask
addRootNodesFromTask
allocatedTotal
appendFormat:
applyDiffFrom
arguments
attributesOfItemAtPath:error:
binaryMap
binaryName
binaryPath
blockCount
callStackSymbols
classFilterPatternMatcher
classInfoWithClassName:binaryPath:type:
classMap
className
classesPattern
classesPatternMatcher
compare:
componentsJoinedByString:
count
countByEnumeratingWithState:objects:count:
createMapForMinusGraph:
currentHandler
dataWithContentsOfFile:options:error:
debugTimer
defaultManager
description
detachFromTask
directedGraphWithData:error:
displayName
endEvent:
enumerateInfosWithBlock:
enumerateReferencesWithBlock:
enumerateRegionsWithBlock:
enumerateTypeFieldsWithBlock:
executablePath
fileExistsAtPath:isDirectory:
fileSize
fileURLWithPath:
fullIvarDescription
genericInfo
handleFailureInFunction:file:lineNumber:description:
hasSuffix:
infoType
init
initWithPattern:forArgument:error:
initWithPid:
initWithTask:
initWithTask:getBinariesList:
initWithTask:options:
instanceSize
intValue
isDerivedFromStackBacktrace
isEqualToString:
isExecutableFileAtPath:
isSemiCriticalProcess
labelForNode:
largestUnusedRange
lastPathComponent
layoutPatternMatcher
length
localizedDescription
logHandle
mapTableWithKeyOptions:valueOptions:
matchesNodeDetails:orNodeDescription:
name
nodeDetails:
nodeNamespaceSize
numberWithInt:
numberWithUnsignedInt:
objectAtIndexedSubscript:
objectContentLevel
objectForKey:
offset
onlyShowAddresses
parentPid
parentProcessPath
parseArguments:withBlock:
path
printRuntimeMetadataInfo
processDescriptionString
processInfo
processName
processSnapshotGraphWithOptions:
quantaCounter
quietMode
reason
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:flags:handler:
registerOptionWithLongName:shortName:argumentKind:argumentName:optionDescription:handler:
renormalizedGraph
reservedTotal
resetCachedMatches
separateByZone
setApplyDiffFrom:
setClassFilterPatternMatcher:
setClassesPattern:
setClassesPatternMatcher:
setDebugTimer:
setDiscussion:
setGuessNonObjects:
setLayoutPatternMatcher:
setMatchingKindOfClass:
setObject:atIndexedSubscript:
setObjectContentLevel:
setOnlyShowAddresses:
setQuietMode:
setRecordRuntimeMetadataChunkInfo:
setSeparateByZone:
setShowBinarySummary:
setShowInternalFragmentation:
setShowPaths:
setShowRawClassNames:
setShowShortenedOutput:
setShowSizes:
setShowZoneSummaries:
setSumObjectFields:
setSyntaxDescription:
sharedTimer
shouldAnalyzeWithCorpse
showBinarySummary
showInternalFragmentation
showPaths
showRawClassNames
showShortenedOutput
showSizes
showZoneSummaries
signpostID
size
sortedArrayUsingComparator:
startWithCategory:message:
startWithMessage:
stop
string
stringByAppendingFormat:
stringValue
stringWithFormat:
stringWithUTF8String:
subgraphWithMarkedNodes:
superclassInfo
typeName
usage:
usage:shouldExit:
zoneCount
zoneNameForIndex:
@16@0:8
B16@0:8
v20@0:8B16
v24@0:8@16
I16@0:8
v20@0:8I16
v16@0:8
@"VMUClassPatternMatcher"
@"NSString"
@"VMUDebugTimer"
{_VMURange="location"Q"length"Q}
@"NSMapTable"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>22A380007</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleIdentifier</key>
<string>com.apple.dt.SamplingTools.heap</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>SamplingTools</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>20E5223c</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>16.4</string>
<key>DTSDKBuild</key>
<string>20E5223c</string>
<key>DTSDKName</key>
<string>iphonesimulator16.4.internal</string>
<key>DTXcode</key>
<string>1430</string>
<key>DTXcodeBuild</key>
<string>14E6097d</string>
<key>MinimumOSVersion</key>
<string>16.4</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.private.dt.instruments.dtservicehub.client</key>
<true/>
<key>com.apple.private.iosurfaceinfo</key>
<true/>
<key>com.apple.private.security.storage.AppDataContainers</key>
<true/>
<key>com.apple.rootless.datavault.metadata</key>
<true/>
<key>com.apple.security.iokit-user-client-class</key>
<array>
<string>IOSurfaceRootUserClient</string>
</array>
<key>com.apple.system-task-ports.read</key>
<true/>
<key>com.apple.system-task-ports.read.safe</key>
<true/>
</dict>
</plist>
d094com.apple.private.dt.instruments.dtservicehub.client
com.apple.private.iosurfaceinfo
094com.apple.private.security.storage.AppDataContainers
0*%com.apple.rootless.datavault.metadata
0G*com.apple.security.iokit-user-client-class0
IOSurfaceRootUserClient0% com.apple.system-task-ports.read
0*%com.apple.system-task-ports.read.safe
